
nais_bk002_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167c8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08016888  08016888  00017888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176f0  080176f0  000192d8  2**0
                  CONTENTS
  4 .ARM          00000008  080176f0  080176f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176f8  080176f8  000192d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080176f8  080176f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017700  08017700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08017704  00019000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00006fb0  200002d8  080179dc  000192d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007288  080179dc  0001a288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000192d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b59  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f2b  00000000  00000000  00049e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d0  00000000  00000000  00050d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c8a  00000000  00000000  00053258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cbc  00000000  00000000  00054ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c9f  00000000  00000000  00078b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ace  00000000  00000000  000aa83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cf8  00000000  00000000  0016c350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00176048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d8 	.word	0x200002d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801685c 	.word	0x0801685c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002dc 	.word	0x200002dc
 8000104:	0801685c 	.word	0x0801685c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f82b 	bl	8002498 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff6b 	bl	8002328 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f81d 	bl	8002498 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f813 	bl	8002498 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff95 	bl	80023b0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff8b 	bl	80023b0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcc7 	bl	8000e44 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc47 	bl	8000d54 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcb9 	bl	8000e44 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcaf 	bl	8000e44 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc55 	bl	8000da4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc4b 	bl	8000da4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f88c 	bl	8000668 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	@ 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f7ff ffd0 	bl	8000508 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 ffaf 	bl	80014d0 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	@ 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fdef 	bl	800115c <__aeabi_fsub>
 800057e:	f000 ffa7 	bl	80014d0 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__aeabi_d2uiz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 8000592:	0004      	movs	r4, r0
 8000594:	000d      	movs	r5, r1
 8000596:	f7ff ff7d 	bl	8000494 <__aeabi_dcmpge>
 800059a:	2800      	cmp	r0, #0
 800059c:	d104      	bne.n	80005a8 <__aeabi_d2uiz+0x1c>
 800059e:	0020      	movs	r0, r4
 80005a0:	0029      	movs	r1, r5
 80005a2:	f002 fe71 	bl	8003288 <__aeabi_d2iz>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f002 faac 	bl	8002b0c <__aeabi_dsub>
 80005b4:	f002 fe68 	bl	8003288 <__aeabi_d2iz>
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	061b      	lsls	r3, r3, #24
 80005bc:	469c      	mov	ip, r3
 80005be:	4460      	add	r0, ip
 80005c0:	e7f1      	b.n	80005a6 <__aeabi_d2uiz+0x1a>
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	41e00000 	.word	0x41e00000

080005c8 <__aeabi_d2lz>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	0004      	movs	r4, r0
 80005d0:	000d      	movs	r5, r1
 80005d2:	f7ff ff41 	bl	8000458 <__aeabi_dcmplt>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d108      	bne.n	80005ec <__aeabi_d2lz+0x24>
 80005da:	0020      	movs	r0, r4
 80005dc:	0029      	movs	r1, r5
 80005de:	f000 f80f 	bl	8000600 <__aeabi_d2ulz>
 80005e2:	0002      	movs	r2, r0
 80005e4:	000b      	movs	r3, r1
 80005e6:	0010      	movs	r0, r2
 80005e8:	0019      	movs	r1, r3
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	18e9      	adds	r1, r5, r3
 80005f2:	0020      	movs	r0, r4
 80005f4:	f000 f804 	bl	8000600 <__aeabi_d2ulz>
 80005f8:	2300      	movs	r3, #0
 80005fa:	4242      	negs	r2, r0
 80005fc:	418b      	sbcs	r3, r1
 80005fe:	e7f2      	b.n	80005e6 <__aeabi_d2lz+0x1e>

08000600 <__aeabi_d2ulz>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2200      	movs	r2, #0
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <__aeabi_d2ulz+0x34>)
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	f001 ffb7 	bl	800257c <__aeabi_dmul>
 800060e:	f7ff ffbd 	bl	800058c <__aeabi_d2uiz>
 8000612:	0006      	movs	r6, r0
 8000614:	f002 fea2 	bl	800335c <__aeabi_ui2d>
 8000618:	2200      	movs	r2, #0
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <__aeabi_d2ulz+0x38>)
 800061c:	f001 ffae 	bl	800257c <__aeabi_dmul>
 8000620:	0002      	movs	r2, r0
 8000622:	000b      	movs	r3, r1
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 fa70 	bl	8002b0c <__aeabi_dsub>
 800062c:	f7ff ffae 	bl	800058c <__aeabi_d2uiz>
 8000630:	0031      	movs	r1, r6
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	3df00000 	.word	0x3df00000
 8000638:	41f00000 	.word	0x41f00000

0800063c <__aeabi_l2d>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	0006      	movs	r6, r0
 8000640:	0008      	movs	r0, r1
 8000642:	f002 fe5d 	bl	8003300 <__aeabi_i2d>
 8000646:	2200      	movs	r2, #0
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <__aeabi_l2d+0x28>)
 800064a:	f001 ff97 	bl	800257c <__aeabi_dmul>
 800064e:	000d      	movs	r5, r1
 8000650:	0004      	movs	r4, r0
 8000652:	0030      	movs	r0, r6
 8000654:	f002 fe82 	bl	800335c <__aeabi_ui2d>
 8000658:	002b      	movs	r3, r5
 800065a:	0022      	movs	r2, r4
 800065c:	f000 ffe6 	bl	800162c <__aeabi_dadd>
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	41f00000 	.word	0x41f00000

08000668 <__udivmoddi4>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	4657      	mov	r7, sl
 800066c:	464e      	mov	r6, r9
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	b5e0      	push	{r5, r6, r7, lr}
 8000674:	0004      	movs	r4, r0
 8000676:	000d      	movs	r5, r1
 8000678:	4692      	mov	sl, r2
 800067a:	4699      	mov	r9, r3
 800067c:	b083      	sub	sp, #12
 800067e:	428b      	cmp	r3, r1
 8000680:	d830      	bhi.n	80006e4 <__udivmoddi4+0x7c>
 8000682:	d02d      	beq.n	80006e0 <__udivmoddi4+0x78>
 8000684:	4649      	mov	r1, r9
 8000686:	4650      	mov	r0, sl
 8000688:	f002 ff76 	bl	8003578 <__clzdi2>
 800068c:	0029      	movs	r1, r5
 800068e:	0006      	movs	r6, r0
 8000690:	0020      	movs	r0, r4
 8000692:	f002 ff71 	bl	8003578 <__clzdi2>
 8000696:	1a33      	subs	r3, r6, r0
 8000698:	4698      	mov	r8, r3
 800069a:	3b20      	subs	r3, #32
 800069c:	d434      	bmi.n	8000708 <__udivmoddi4+0xa0>
 800069e:	469b      	mov	fp, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	465a      	mov	r2, fp
 80006a4:	4093      	lsls	r3, r2
 80006a6:	4642      	mov	r2, r8
 80006a8:	001f      	movs	r7, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	4093      	lsls	r3, r2
 80006ae:	001e      	movs	r6, r3
 80006b0:	42af      	cmp	r7, r5
 80006b2:	d83b      	bhi.n	800072c <__udivmoddi4+0xc4>
 80006b4:	42af      	cmp	r7, r5
 80006b6:	d100      	bne.n	80006ba <__udivmoddi4+0x52>
 80006b8:	e079      	b.n	80007ae <__udivmoddi4+0x146>
 80006ba:	465b      	mov	r3, fp
 80006bc:	1ba4      	subs	r4, r4, r6
 80006be:	41bd      	sbcs	r5, r7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da00      	bge.n	80006c6 <__udivmoddi4+0x5e>
 80006c4:	e076      	b.n	80007b4 <__udivmoddi4+0x14c>
 80006c6:	2200      	movs	r2, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	465a      	mov	r2, fp
 80006d2:	4093      	lsls	r3, r2
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4642      	mov	r2, r8
 80006da:	4093      	lsls	r3, r2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	e029      	b.n	8000734 <__udivmoddi4+0xcc>
 80006e0:	4282      	cmp	r2, r0
 80006e2:	d9cf      	bls.n	8000684 <__udivmoddi4+0x1c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <__udivmoddi4+0x8e>
 80006f2:	601c      	str	r4, [r3, #0]
 80006f4:	605d      	str	r5, [r3, #4]
 80006f6:	9800      	ldr	r0, [sp, #0]
 80006f8:	9901      	ldr	r1, [sp, #4]
 80006fa:	b003      	add	sp, #12
 80006fc:	bcf0      	pop	{r4, r5, r6, r7}
 80006fe:	46bb      	mov	fp, r7
 8000700:	46b2      	mov	sl, r6
 8000702:	46a9      	mov	r9, r5
 8000704:	46a0      	mov	r8, r4
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000708:	4642      	mov	r2, r8
 800070a:	469b      	mov	fp, r3
 800070c:	2320      	movs	r3, #32
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	4652      	mov	r2, sl
 8000712:	40da      	lsrs	r2, r3
 8000714:	4641      	mov	r1, r8
 8000716:	0013      	movs	r3, r2
 8000718:	464a      	mov	r2, r9
 800071a:	408a      	lsls	r2, r1
 800071c:	0017      	movs	r7, r2
 800071e:	4642      	mov	r2, r8
 8000720:	431f      	orrs	r7, r3
 8000722:	4653      	mov	r3, sl
 8000724:	4093      	lsls	r3, r2
 8000726:	001e      	movs	r6, r3
 8000728:	42af      	cmp	r7, r5
 800072a:	d9c3      	bls.n	80006b4 <__udivmoddi4+0x4c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4643      	mov	r3, r8
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0d8      	beq.n	80006ec <__udivmoddi4+0x84>
 800073a:	07fb      	lsls	r3, r7, #31
 800073c:	0872      	lsrs	r2, r6, #1
 800073e:	431a      	orrs	r2, r3
 8000740:	4646      	mov	r6, r8
 8000742:	087b      	lsrs	r3, r7, #1
 8000744:	e00e      	b.n	8000764 <__udivmoddi4+0xfc>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d101      	bne.n	800074e <__udivmoddi4+0xe6>
 800074a:	42a2      	cmp	r2, r4
 800074c:	d80c      	bhi.n	8000768 <__udivmoddi4+0x100>
 800074e:	1aa4      	subs	r4, r4, r2
 8000750:	419d      	sbcs	r5, r3
 8000752:	2001      	movs	r0, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2100      	movs	r1, #0
 800075a:	3e01      	subs	r6, #1
 800075c:	1824      	adds	r4, r4, r0
 800075e:	414d      	adcs	r5, r1
 8000760:	2e00      	cmp	r6, #0
 8000762:	d006      	beq.n	8000772 <__udivmoddi4+0x10a>
 8000764:	42ab      	cmp	r3, r5
 8000766:	d9ee      	bls.n	8000746 <__udivmoddi4+0xde>
 8000768:	3e01      	subs	r6, #1
 800076a:	1924      	adds	r4, r4, r4
 800076c:	416d      	adcs	r5, r5
 800076e:	2e00      	cmp	r6, #0
 8000770:	d1f8      	bne.n	8000764 <__udivmoddi4+0xfc>
 8000772:	9800      	ldr	r0, [sp, #0]
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	465b      	mov	r3, fp
 8000778:	1900      	adds	r0, r0, r4
 800077a:	4169      	adcs	r1, r5
 800077c:	2b00      	cmp	r3, #0
 800077e:	db24      	blt.n	80007ca <__udivmoddi4+0x162>
 8000780:	002b      	movs	r3, r5
 8000782:	465a      	mov	r2, fp
 8000784:	4644      	mov	r4, r8
 8000786:	40d3      	lsrs	r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	40e2      	lsrs	r2, r4
 800078c:	001c      	movs	r4, r3
 800078e:	465b      	mov	r3, fp
 8000790:	0015      	movs	r5, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	db2a      	blt.n	80007ec <__udivmoddi4+0x184>
 8000796:	0026      	movs	r6, r4
 8000798:	409e      	lsls	r6, r3
 800079a:	0033      	movs	r3, r6
 800079c:	0026      	movs	r6, r4
 800079e:	4647      	mov	r7, r8
 80007a0:	40be      	lsls	r6, r7
 80007a2:	0032      	movs	r2, r6
 80007a4:	1a80      	subs	r0, r0, r2
 80007a6:	4199      	sbcs	r1, r3
 80007a8:	9000      	str	r0, [sp, #0]
 80007aa:	9101      	str	r1, [sp, #4]
 80007ac:	e79e      	b.n	80006ec <__udivmoddi4+0x84>
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d8bc      	bhi.n	800072c <__udivmoddi4+0xc4>
 80007b2:	e782      	b.n	80006ba <__udivmoddi4+0x52>
 80007b4:	4642      	mov	r2, r8
 80007b6:	2320      	movs	r3, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	40da      	lsrs	r2, r3
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	e785      	b.n	80006d6 <__udivmoddi4+0x6e>
 80007ca:	4642      	mov	r2, r8
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	4646      	mov	r6, r8
 80007d4:	409a      	lsls	r2, r3
 80007d6:	0023      	movs	r3, r4
 80007d8:	40f3      	lsrs	r3, r6
 80007da:	4644      	mov	r4, r8
 80007dc:	4313      	orrs	r3, r2
 80007de:	002a      	movs	r2, r5
 80007e0:	40e2      	lsrs	r2, r4
 80007e2:	001c      	movs	r4, r3
 80007e4:	465b      	mov	r3, fp
 80007e6:	0015      	movs	r5, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dad4      	bge.n	8000796 <__udivmoddi4+0x12e>
 80007ec:	4642      	mov	r2, r8
 80007ee:	002f      	movs	r7, r5
 80007f0:	2320      	movs	r3, #32
 80007f2:	0026      	movs	r6, r4
 80007f4:	4097      	lsls	r7, r2
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	40de      	lsrs	r6, r3
 80007fa:	003b      	movs	r3, r7
 80007fc:	4333      	orrs	r3, r6
 80007fe:	e7cd      	b.n	800079c <__udivmoddi4+0x134>

08000800 <__aeabi_fadd>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	46ce      	mov	lr, r9
 8000804:	4647      	mov	r7, r8
 8000806:	0243      	lsls	r3, r0, #9
 8000808:	0a5a      	lsrs	r2, r3, #9
 800080a:	024e      	lsls	r6, r1, #9
 800080c:	0045      	lsls	r5, r0, #1
 800080e:	0fc4      	lsrs	r4, r0, #31
 8000810:	0048      	lsls	r0, r1, #1
 8000812:	4691      	mov	r9, r2
 8000814:	0e2d      	lsrs	r5, r5, #24
 8000816:	0a72      	lsrs	r2, r6, #9
 8000818:	0e00      	lsrs	r0, r0, #24
 800081a:	4694      	mov	ip, r2
 800081c:	b580      	push	{r7, lr}
 800081e:	099b      	lsrs	r3, r3, #6
 8000820:	0fc9      	lsrs	r1, r1, #31
 8000822:	09b6      	lsrs	r6, r6, #6
 8000824:	1a2a      	subs	r2, r5, r0
 8000826:	428c      	cmp	r4, r1
 8000828:	d021      	beq.n	800086e <__aeabi_fadd+0x6e>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dd0d      	ble.n	800084a <__aeabi_fadd+0x4a>
 800082e:	2800      	cmp	r0, #0
 8000830:	d12d      	bne.n	800088e <__aeabi_fadd+0x8e>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x38>
 8000836:	e08d      	b.n	8000954 <__aeabi_fadd+0x154>
 8000838:	1e51      	subs	r1, r2, #1
 800083a:	2a01      	cmp	r2, #1
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x40>
 800083e:	e11d      	b.n	8000a7c <__aeabi_fadd+0x27c>
 8000840:	2aff      	cmp	r2, #255	@ 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x46>
 8000844:	e0ab      	b.n	800099e <__aeabi_fadd+0x19e>
 8000846:	000a      	movs	r2, r1
 8000848:	e027      	b.n	800089a <__aeabi_fadd+0x9a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d04d      	beq.n	80008ea <__aeabi_fadd+0xea>
 800084e:	1b42      	subs	r2, r0, r5
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x56>
 8000854:	e0cc      	b.n	80009f0 <__aeabi_fadd+0x1f0>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x5c>
 800085a:	e079      	b.n	8000950 <__aeabi_fadd+0x150>
 800085c:	1e54      	subs	r4, r2, #1
 800085e:	2a01      	cmp	r2, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x64>
 8000862:	e128      	b.n	8000ab6 <__aeabi_fadd+0x2b6>
 8000864:	2aff      	cmp	r2, #255	@ 0xff
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x6a>
 8000868:	e097      	b.n	800099a <__aeabi_fadd+0x19a>
 800086a:	0022      	movs	r2, r4
 800086c:	e0c5      	b.n	80009fa <__aeabi_fadd+0x1fa>
 800086e:	2a00      	cmp	r2, #0
 8000870:	dc00      	bgt.n	8000874 <__aeabi_fadd+0x74>
 8000872:	e096      	b.n	80009a2 <__aeabi_fadd+0x1a2>
 8000874:	2800      	cmp	r0, #0
 8000876:	d04f      	beq.n	8000918 <__aeabi_fadd+0x118>
 8000878:	2dff      	cmp	r5, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x7e>
 800087c:	e08f      	b.n	800099e <__aeabi_fadd+0x19e>
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	04c9      	lsls	r1, r1, #19
 8000882:	430e      	orrs	r6, r1
 8000884:	2a1b      	cmp	r2, #27
 8000886:	dd51      	ble.n	800092c <__aeabi_fadd+0x12c>
 8000888:	002a      	movs	r2, r5
 800088a:	3301      	adds	r3, #1
 800088c:	e018      	b.n	80008c0 <__aeabi_fadd+0xc0>
 800088e:	2dff      	cmp	r5, #255	@ 0xff
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x94>
 8000892:	e084      	b.n	800099e <__aeabi_fadd+0x19e>
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	04c9      	lsls	r1, r1, #19
 8000898:	430e      	orrs	r6, r1
 800089a:	2101      	movs	r1, #1
 800089c:	2a1b      	cmp	r2, #27
 800089e:	dc08      	bgt.n	80008b2 <__aeabi_fadd+0xb2>
 80008a0:	0031      	movs	r1, r6
 80008a2:	2020      	movs	r0, #32
 80008a4:	40d1      	lsrs	r1, r2
 80008a6:	1a82      	subs	r2, r0, r2
 80008a8:	4096      	lsls	r6, r2
 80008aa:	0032      	movs	r2, r6
 80008ac:	1e50      	subs	r0, r2, #1
 80008ae:	4182      	sbcs	r2, r0
 80008b0:	4311      	orrs	r1, r2
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	015a      	lsls	r2, r3, #5
 80008b6:	d459      	bmi.n	800096c <__aeabi_fadd+0x16c>
 80008b8:	2107      	movs	r1, #7
 80008ba:	002a      	movs	r2, r5
 80008bc:	4019      	ands	r1, r3
 80008be:	d049      	beq.n	8000954 <__aeabi_fadd+0x154>
 80008c0:	210f      	movs	r1, #15
 80008c2:	4019      	ands	r1, r3
 80008c4:	2904      	cmp	r1, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0xca>
 80008c8:	3304      	adds	r3, #4
 80008ca:	0159      	lsls	r1, r3, #5
 80008cc:	d542      	bpl.n	8000954 <__aeabi_fadd+0x154>
 80008ce:	1c50      	adds	r0, r2, #1
 80008d0:	2afe      	cmp	r2, #254	@ 0xfe
 80008d2:	d03a      	beq.n	800094a <__aeabi_fadd+0x14a>
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	b2c0      	uxtb	r0, r0
 80008d8:	0a5b      	lsrs	r3, r3, #9
 80008da:	05c0      	lsls	r0, r0, #23
 80008dc:	4318      	orrs	r0, r3
 80008de:	07e4      	lsls	r4, r4, #31
 80008e0:	4320      	orrs	r0, r4
 80008e2:	bcc0      	pop	{r6, r7}
 80008e4:	46b9      	mov	r9, r7
 80008e6:	46b0      	mov	r8, r6
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	20fe      	movs	r0, #254	@ 0xfe
 80008ec:	4680      	mov	r8, r0
 80008ee:	1c6f      	adds	r7, r5, #1
 80008f0:	0038      	movs	r0, r7
 80008f2:	4647      	mov	r7, r8
 80008f4:	4207      	tst	r7, r0
 80008f6:	d000      	beq.n	80008fa <__aeabi_fadd+0xfa>
 80008f8:	e08e      	b.n	8000a18 <__aeabi_fadd+0x218>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d000      	beq.n	8000900 <__aeabi_fadd+0x100>
 80008fe:	e0b4      	b.n	8000a6a <__aeabi_fadd+0x26a>
 8000900:	2b00      	cmp	r3, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x106>
 8000904:	e0db      	b.n	8000abe <__aeabi_fadd+0x2be>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d06c      	beq.n	80009e4 <__aeabi_fadd+0x1e4>
 800090a:	1b98      	subs	r0, r3, r6
 800090c:	0145      	lsls	r5, r0, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x112>
 8000910:	e0f7      	b.n	8000b02 <__aeabi_fadd+0x302>
 8000912:	000c      	movs	r4, r1
 8000914:	1af3      	subs	r3, r6, r3
 8000916:	e03d      	b.n	8000994 <__aeabi_fadd+0x194>
 8000918:	2e00      	cmp	r6, #0
 800091a:	d01b      	beq.n	8000954 <__aeabi_fadd+0x154>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x124>
 8000922:	e082      	b.n	8000a2a <__aeabi_fadd+0x22a>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d03a      	beq.n	800099e <__aeabi_fadd+0x19e>
 8000928:	000a      	movs	r2, r1
 800092a:	e7ab      	b.n	8000884 <__aeabi_fadd+0x84>
 800092c:	0031      	movs	r1, r6
 800092e:	2020      	movs	r0, #32
 8000930:	40d1      	lsrs	r1, r2
 8000932:	1a82      	subs	r2, r0, r2
 8000934:	4096      	lsls	r6, r2
 8000936:	0032      	movs	r2, r6
 8000938:	1e50      	subs	r0, r2, #1
 800093a:	4182      	sbcs	r2, r0
 800093c:	430a      	orrs	r2, r1
 800093e:	189b      	adds	r3, r3, r2
 8000940:	015a      	lsls	r2, r3, #5
 8000942:	d5b9      	bpl.n	80008b8 <__aeabi_fadd+0xb8>
 8000944:	1c6a      	adds	r2, r5, #1
 8000946:	2dfe      	cmp	r5, #254	@ 0xfe
 8000948:	d175      	bne.n	8000a36 <__aeabi_fadd+0x236>
 800094a:	20ff      	movs	r0, #255	@ 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7c4      	b.n	80008da <__aeabi_fadd+0xda>
 8000950:	000c      	movs	r4, r1
 8000952:	0033      	movs	r3, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	2aff      	cmp	r2, #255	@ 0xff
 8000958:	d146      	bne.n	80009e8 <__aeabi_fadd+0x1e8>
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f5      	beq.n	800094a <__aeabi_fadd+0x14a>
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	4313      	orrs	r3, r2
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e7b6      	b.n	80008da <__aeabi_fadd+0xda>
 800096c:	019f      	lsls	r7, r3, #6
 800096e:	09bf      	lsrs	r7, r7, #6
 8000970:	0038      	movs	r0, r7
 8000972:	f002 fde3 	bl	800353c <__clzsi2>
 8000976:	3805      	subs	r0, #5
 8000978:	4087      	lsls	r7, r0
 800097a:	4285      	cmp	r5, r0
 800097c:	dc24      	bgt.n	80009c8 <__aeabi_fadd+0x1c8>
 800097e:	003b      	movs	r3, r7
 8000980:	2120      	movs	r1, #32
 8000982:	1b42      	subs	r2, r0, r5
 8000984:	3201      	adds	r2, #1
 8000986:	40d3      	lsrs	r3, r2
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	4097      	lsls	r7, r2
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	4197      	sbcs	r7, r2
 8000990:	2200      	movs	r2, #0
 8000992:	433b      	orrs	r3, r7
 8000994:	0759      	lsls	r1, r3, #29
 8000996:	d193      	bne.n	80008c0 <__aeabi_fadd+0xc0>
 8000998:	e797      	b.n	80008ca <__aeabi_fadd+0xca>
 800099a:	000c      	movs	r4, r1
 800099c:	0033      	movs	r3, r6
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	e7db      	b.n	800095a <__aeabi_fadd+0x15a>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d014      	beq.n	80009d0 <__aeabi_fadd+0x1d0>
 80009a6:	1b42      	subs	r2, r0, r5
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d14b      	bne.n	8000a44 <__aeabi_fadd+0x244>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0d0      	beq.n	8000952 <__aeabi_fadd+0x152>
 80009b0:	1e51      	subs	r1, r2, #1
 80009b2:	2a01      	cmp	r2, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x1b8>
 80009b6:	e09e      	b.n	8000af6 <__aeabi_fadd+0x2f6>
 80009b8:	2aff      	cmp	r2, #255	@ 0xff
 80009ba:	d0ef      	beq.n	800099c <__aeabi_fadd+0x19c>
 80009bc:	000a      	movs	r2, r1
 80009be:	2a1b      	cmp	r2, #27
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fadd+0x282>
 80009c2:	0002      	movs	r2, r0
 80009c4:	1c73      	adds	r3, r6, #1
 80009c6:	e77b      	b.n	80008c0 <__aeabi_fadd+0xc0>
 80009c8:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <__aeabi_fadd+0x30c>)
 80009ca:	1a2a      	subs	r2, r5, r0
 80009cc:	403b      	ands	r3, r7
 80009ce:	e7e1      	b.n	8000994 <__aeabi_fadd+0x194>
 80009d0:	21fe      	movs	r1, #254	@ 0xfe
 80009d2:	1c6a      	adds	r2, r5, #1
 80009d4:	4211      	tst	r1, r2
 80009d6:	d13b      	bne.n	8000a50 <__aeabi_fadd+0x250>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d15d      	bne.n	8000a98 <__aeabi_fadd+0x298>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d07f      	beq.n	8000ae0 <__aeabi_fadd+0x2e0>
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d17f      	bne.n	8000ae4 <__aeabi_fadd+0x2e4>
 80009e4:	2200      	movs	r2, #0
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	b2d0      	uxtb	r0, r2
 80009ee:	e774      	b.n	80008da <__aeabi_fadd+0xda>
 80009f0:	28ff      	cmp	r0, #255	@ 0xff
 80009f2:	d0d2      	beq.n	800099a <__aeabi_fadd+0x19a>
 80009f4:	2480      	movs	r4, #128	@ 0x80
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	4323      	orrs	r3, r4
 80009fa:	2401      	movs	r4, #1
 80009fc:	2a1b      	cmp	r2, #27
 80009fe:	dc07      	bgt.n	8000a10 <__aeabi_fadd+0x210>
 8000a00:	001c      	movs	r4, r3
 8000a02:	2520      	movs	r5, #32
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	1aaa      	subs	r2, r5, r2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	1b33      	subs	r3, r6, r4
 8000a12:	0005      	movs	r5, r0
 8000a14:	000c      	movs	r4, r1
 8000a16:	e74d      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a18:	1b9f      	subs	r7, r3, r6
 8000a1a:	017a      	lsls	r2, r7, #5
 8000a1c:	d422      	bmi.n	8000a64 <__aeabi_fadd+0x264>
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d1a6      	bne.n	8000970 <__aeabi_fadd+0x170>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	2300      	movs	r3, #0
 8000a28:	e757      	b.n	80008da <__aeabi_fadd+0xda>
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	3201      	adds	r2, #1
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d400      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000a34:	e740      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000a36:	2101      	movs	r1, #1
 8000a38:	4835      	ldr	r0, [pc, #212]	@ (8000b10 <__aeabi_fadd+0x310>)
 8000a3a:	4019      	ands	r1, r3
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	4003      	ands	r3, r0
 8000a40:	430b      	orrs	r3, r1
 8000a42:	e7a7      	b.n	8000994 <__aeabi_fadd+0x194>
 8000a44:	28ff      	cmp	r0, #255	@ 0xff
 8000a46:	d0a9      	beq.n	800099c <__aeabi_fadd+0x19c>
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	04c9      	lsls	r1, r1, #19
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	e7b6      	b.n	80009be <__aeabi_fadd+0x1be>
 8000a50:	2aff      	cmp	r2, #255	@ 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fadd+0x256>
 8000a54:	e779      	b.n	800094a <__aeabi_fadd+0x14a>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	0759      	lsls	r1, r3, #29
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x260>
 8000a5e:	e72f      	b.n	80008c0 <__aeabi_fadd+0xc0>
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	e7c1      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000a64:	000c      	movs	r4, r1
 8000a66:	1af7      	subs	r7, r6, r3
 8000a68:	e782      	b.n	8000970 <__aeabi_fadd+0x170>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d12c      	bne.n	8000ac8 <__aeabi_fadd+0x2c8>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d193      	bne.n	800099a <__aeabi_fadd+0x19a>
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	2400      	movs	r4, #0
 8000a76:	20ff      	movs	r0, #255	@ 0xff
 8000a78:	03db      	lsls	r3, r3, #15
 8000a7a:	e72e      	b.n	80008da <__aeabi_fadd+0xda>
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	1b9b      	subs	r3, r3, r6
 8000a80:	e718      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a82:	0019      	movs	r1, r3
 8000a84:	2520      	movs	r5, #32
 8000a86:	40d1      	lsrs	r1, r2
 8000a88:	1aaa      	subs	r2, r5, r2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4193      	sbcs	r3, r2
 8000a90:	430b      	orrs	r3, r1
 8000a92:	0005      	movs	r5, r0
 8000a94:	199b      	adds	r3, r3, r6
 8000a96:	e753      	b.n	8000940 <__aeabi_fadd+0x140>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x29e>
 8000a9c:	e77e      	b.n	800099c <__aeabi_fadd+0x19c>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2a4>
 8000aa2:	e77c      	b.n	800099e <__aeabi_fadd+0x19e>
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	03d2      	lsls	r2, r2, #15
 8000aa8:	4591      	cmp	r9, r2
 8000aaa:	d302      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000aac:	4594      	cmp	ip, r2
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	e753      	b.n	800095e <__aeabi_fadd+0x15e>
 8000ab6:	000c      	movs	r4, r1
 8000ab8:	1af3      	subs	r3, r6, r3
 8000aba:	3501      	adds	r5, #1
 8000abc:	e6fa      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0af      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	0033      	movs	r3, r6
 8000ac6:	e78d      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_fadd+0x2ce>
 8000acc:	e767      	b.n	800099e <__aeabi_fadd+0x19e>
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	03d2      	lsls	r2, r2, #15
 8000ad2:	4591      	cmp	r9, r2
 8000ad4:	d3ed      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ad6:	4594      	cmp	ip, r2
 8000ad8:	d2eb      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ada:	000c      	movs	r4, r1
 8000adc:	0033      	movs	r3, r6
 8000ade:	e7e8      	b.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ae0:	0033      	movs	r3, r6
 8000ae2:	e77f      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ae4:	199b      	adds	r3, r3, r6
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0159      	lsls	r1, r3, #5
 8000aea:	d5b9      	bpl.n	8000a60 <__aeabi_fadd+0x260>
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <__aeabi_fadd+0x30c>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2201      	movs	r2, #1
 8000af4:	e778      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000af6:	199b      	adds	r3, r3, r6
 8000af8:	3201      	adds	r2, #1
 8000afa:	3501      	adds	r5, #1
 8000afc:	0159      	lsls	r1, r3, #5
 8000afe:	d49a      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000b00:	e6da      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d08d      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	e76e      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	fbffffff 	.word	0xfbffffff
 8000b10:	7dffffff 	.word	0x7dffffff

08000b14 <__aeabi_fdiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	464f      	mov	r7, r9
 8000b18:	4646      	mov	r6, r8
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	0244      	lsls	r4, r0, #9
 8000b1e:	b5c0      	push	{r6, r7, lr}
 8000b20:	0047      	lsls	r7, r0, #1
 8000b22:	1c0e      	adds	r6, r1, #0
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	0e3f      	lsrs	r7, r7, #24
 8000b28:	0fc5      	lsrs	r5, r0, #31
 8000b2a:	2f00      	cmp	r7, #0
 8000b2c:	d03c      	beq.n	8000ba8 <__aeabi_fdiv+0x94>
 8000b2e:	2fff      	cmp	r7, #255	@ 0xff
 8000b30:	d042      	beq.n	8000bb8 <__aeabi_fdiv+0xa4>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	4699      	mov	r9, r3
 8000b38:	469a      	mov	sl, r3
 8000b3a:	00e4      	lsls	r4, r4, #3
 8000b3c:	04d2      	lsls	r2, r2, #19
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	3f7f      	subs	r7, #127	@ 0x7f
 8000b42:	0273      	lsls	r3, r6, #9
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	4698      	mov	r8, r3
 8000b48:	0073      	lsls	r3, r6, #1
 8000b4a:	0e1b      	lsrs	r3, r3, #24
 8000b4c:	0ff6      	lsrs	r6, r6, #31
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d01b      	beq.n	8000b8a <__aeabi_fdiv+0x76>
 8000b52:	2bff      	cmp	r3, #255	@ 0xff
 8000b54:	d013      	beq.n	8000b7e <__aeabi_fdiv+0x6a>
 8000b56:	4642      	mov	r2, r8
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	04c9      	lsls	r1, r1, #19
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	2000      	movs	r0, #0
 8000b64:	3b7f      	subs	r3, #127	@ 0x7f
 8000b66:	0029      	movs	r1, r5
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	4071      	eors	r1, r6
 8000b6e:	b2c9      	uxtb	r1, r1
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fdiv+0x62>
 8000b74:	e0b5      	b.n	8000ce2 <__aeabi_fdiv+0x1ce>
 8000b76:	4a74      	ldr	r2, [pc, #464]	@ (8000d48 <__aeabi_fdiv+0x234>)
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	58d3      	ldr	r3, [r2, r3]
 8000b7c:	469f      	mov	pc, r3
 8000b7e:	4643      	mov	r3, r8
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d13f      	bne.n	8000c04 <__aeabi_fdiv+0xf0>
 8000b84:	3fff      	subs	r7, #255	@ 0xff
 8000b86:	3302      	adds	r3, #2
 8000b88:	e003      	b.n	8000b92 <__aeabi_fdiv+0x7e>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12d      	bne.n	8000bec <__aeabi_fdiv+0xd8>
 8000b90:	2301      	movs	r3, #1
 8000b92:	0029      	movs	r1, r5
 8000b94:	464a      	mov	r2, r9
 8000b96:	4071      	eors	r1, r6
 8000b98:	b2c9      	uxtb	r1, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	2a0e      	cmp	r2, #14
 8000b9e:	d838      	bhi.n	8000c12 <__aeabi_fdiv+0xfe>
 8000ba0:	486a      	ldr	r0, [pc, #424]	@ (8000d4c <__aeabi_fdiv+0x238>)
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	5882      	ldr	r2, [r0, r2]
 8000ba6:	4697      	mov	pc, r2
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	d113      	bne.n	8000bd4 <__aeabi_fdiv+0xc0>
 8000bac:	2304      	movs	r3, #4
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e7c4      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_fdiv+0xb4>
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	3b06      	subs	r3, #6
 8000bc2:	27ff      	movs	r7, #255	@ 0xff
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	e7bc      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bc8:	230c      	movs	r3, #12
 8000bca:	4699      	mov	r9, r3
 8000bcc:	3b09      	subs	r3, #9
 8000bce:	27ff      	movs	r7, #255	@ 0xff
 8000bd0:	469a      	mov	sl, r3
 8000bd2:	e7b6      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bd4:	0020      	movs	r0, r4
 8000bd6:	f002 fcb1 	bl	800353c <__clzsi2>
 8000bda:	2776      	movs	r7, #118	@ 0x76
 8000bdc:	1f43      	subs	r3, r0, #5
 8000bde:	409c      	lsls	r4, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	427f      	negs	r7, r7
 8000be4:	4699      	mov	r9, r3
 8000be6:	469a      	mov	sl, r3
 8000be8:	1a3f      	subs	r7, r7, r0
 8000bea:	e7aa      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bec:	4640      	mov	r0, r8
 8000bee:	f002 fca5 	bl	800353c <__clzsi2>
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	1f43      	subs	r3, r0, #5
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	2376      	movs	r3, #118	@ 0x76
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	4690      	mov	r8, r2
 8000c00:	2000      	movs	r0, #0
 8000c02:	e7b0      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c04:	2303      	movs	r3, #3
 8000c06:	464a      	mov	r2, r9
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	33fc      	adds	r3, #252	@ 0xfc
 8000c10:	e7a9      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c12:	000d      	movs	r5, r1
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	2200      	movs	r2, #0
 8000c18:	05c0      	lsls	r0, r0, #23
 8000c1a:	07ed      	lsls	r5, r5, #31
 8000c1c:	4310      	orrs	r0, r2
 8000c1e:	4328      	orrs	r0, r5
 8000c20:	bce0      	pop	{r5, r6, r7}
 8000c22:	46ba      	mov	sl, r7
 8000c24:	46b1      	mov	r9, r6
 8000c26:	46a8      	mov	r8, r5
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	000d      	movs	r5, r1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e7f2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c32:	4653      	mov	r3, sl
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d0ed      	beq.n	8000c14 <__aeabi_fdiv+0x100>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d033      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <__aeabi_fdiv+0x13a>
 8000c42:	2000      	movs	r0, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	e7e7      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c48:	0035      	movs	r5, r6
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d07a      	beq.n	8000d44 <__aeabi_fdiv+0x230>
 8000c4e:	003b      	movs	r3, r7
 8000c50:	337f      	adds	r3, #127	@ 0x7f
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd2d      	ble.n	8000cb2 <__aeabi_fdiv+0x19e>
 8000c56:	4642      	mov	r2, r8
 8000c58:	0752      	lsls	r2, r2, #29
 8000c5a:	d007      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	4641      	mov	r1, r8
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a04      	cmp	r2, #4
 8000c64:	d002      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c66:	2204      	movs	r2, #4
 8000c68:	4694      	mov	ip, r2
 8000c6a:	44e0      	add	r8, ip
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	d505      	bpl.n	8000c7e <__aeabi_fdiv+0x16a>
 8000c72:	4642      	mov	r2, r8
 8000c74:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <__aeabi_fdiv+0x23c>)
 8000c76:	401a      	ands	r2, r3
 8000c78:	003b      	movs	r3, r7
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	3380      	adds	r3, #128	@ 0x80
 8000c7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c80:	dcc8      	bgt.n	8000c14 <__aeabi_fdiv+0x100>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0192      	lsls	r2, r2, #6
 8000c86:	0a52      	lsrs	r2, r2, #9
 8000c88:	b2d8      	uxtb	r0, r3
 8000c8a:	e7c5      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	2500      	movs	r5, #0
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	03d2      	lsls	r2, r2, #15
 8000c94:	e7c0      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c96:	2280      	movs	r2, #128	@ 0x80
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	4214      	tst	r4, r2
 8000c9c:	d002      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	d049      	beq.n	8000d38 <__aeabi_fdiv+0x224>
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	03d2      	lsls	r2, r2, #15
 8000ca8:	4322      	orrs	r2, r4
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	20ff      	movs	r0, #255	@ 0xff
 8000cae:	0a52      	lsrs	r2, r2, #9
 8000cb0:	e7b2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b1b      	cmp	r3, #27
 8000cb8:	dcc3      	bgt.n	8000c42 <__aeabi_fdiv+0x12e>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	40da      	lsrs	r2, r3
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	379e      	adds	r7, #158	@ 0x9e
 8000cc2:	40bb      	lsls	r3, r7
 8000cc4:	1e59      	subs	r1, r3, #1
 8000cc6:	418b      	sbcs	r3, r1
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	0753      	lsls	r3, r2, #29
 8000ccc:	d004      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cce:	230f      	movs	r3, #15
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0153      	lsls	r3, r2, #5
 8000cda:	d529      	bpl.n	8000d30 <__aeabi_fdiv+0x21c>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e79a      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	0163      	lsls	r3, r4, #5
 8000ce6:	0155      	lsls	r5, r2, #5
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d215      	bcs.n	8000d18 <__aeabi_fdiv+0x204>
 8000cec:	201b      	movs	r0, #27
 8000cee:	2200      	movs	r2, #0
 8000cf0:	3f01      	subs	r7, #1
 8000cf2:	2601      	movs	r6, #1
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	db01      	blt.n	8000d02 <__aeabi_fdiv+0x1ee>
 8000cfe:	429d      	cmp	r5, r3
 8000d00:	d801      	bhi.n	8000d06 <__aeabi_fdiv+0x1f2>
 8000d02:	1b5b      	subs	r3, r3, r5
 8000d04:	4332      	orrs	r2, r6
 8000d06:	3801      	subs	r0, #1
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <__aeabi_fdiv+0x1e0>
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	4183      	sbcs	r3, r0
 8000d10:	4313      	orrs	r3, r2
 8000d12:	4698      	mov	r8, r3
 8000d14:	000d      	movs	r5, r1
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fdiv+0x13a>
 8000d18:	201a      	movs	r0, #26
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	1b5b      	subs	r3, r3, r5
 8000d1e:	e7e8      	b.n	8000cf2 <__aeabi_fdiv+0x1de>
 8000d20:	3b02      	subs	r3, #2
 8000d22:	425a      	negs	r2, r3
 8000d24:	4153      	adcs	r3, r2
 8000d26:	425b      	negs	r3, r3
 8000d28:	0035      	movs	r5, r6
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e773      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	2000      	movs	r0, #0
 8000d34:	0a52      	lsrs	r2, r2, #9
 8000d36:	e76f      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	0252      	lsls	r2, r2, #9
 8000d3c:	0035      	movs	r5, r6
 8000d3e:	20ff      	movs	r0, #255	@ 0xff
 8000d40:	0a52      	lsrs	r2, r2, #9
 8000d42:	e769      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d44:	4644      	mov	r4, r8
 8000d46:	e7ad      	b.n	8000ca4 <__aeabi_fdiv+0x190>
 8000d48:	08017090 	.word	0x08017090
 8000d4c:	080170d0 	.word	0x080170d0
 8000d50:	f7ffffff 	.word	0xf7ffffff

08000d54 <__eqsf2>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	024e      	lsls	r6, r1, #9
 8000d5a:	004c      	lsls	r4, r1, #1
 8000d5c:	0245      	lsls	r5, r0, #9
 8000d5e:	0a6d      	lsrs	r5, r5, #9
 8000d60:	0e12      	lsrs	r2, r2, #24
 8000d62:	0fc3      	lsrs	r3, r0, #31
 8000d64:	0a76      	lsrs	r6, r6, #9
 8000d66:	0e24      	lsrs	r4, r4, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d010      	beq.n	8000d90 <__eqsf2+0x3c>
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d00c      	beq.n	8000d8c <__eqsf2+0x38>
 8000d72:	2001      	movs	r0, #1
 8000d74:	42a2      	cmp	r2, r4
 8000d76:	d10a      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d78:	42b5      	cmp	r5, r6
 8000d7a:	d108      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d00f      	beq.n	8000da0 <__eqsf2+0x4c>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d104      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d84:	0028      	movs	r0, r5
 8000d86:	1e43      	subs	r3, r0, #1
 8000d88:	4198      	sbcs	r0, r3
 8000d8a:	e000      	b.n	8000d8e <__eqsf2+0x3a>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	2001      	movs	r0, #1
 8000d92:	2cff      	cmp	r4, #255	@ 0xff
 8000d94:	d1fb      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d96:	4335      	orrs	r5, r6
 8000d98:	d1f9      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d9a:	404b      	eors	r3, r1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	e7f6      	b.n	8000d8e <__eqsf2+0x3a>
 8000da0:	2000      	movs	r0, #0
 8000da2:	e7f4      	b.n	8000d8e <__eqsf2+0x3a>

08000da4 <__gesf2>:
 8000da4:	b530      	push	{r4, r5, lr}
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	0244      	lsls	r4, r0, #9
 8000daa:	024d      	lsls	r5, r1, #9
 8000dac:	0fc3      	lsrs	r3, r0, #31
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	0e12      	lsrs	r2, r2, #24
 8000db4:	0a6d      	lsrs	r5, r5, #9
 8000db6:	0e00      	lsrs	r0, r0, #24
 8000db8:	0fc9      	lsrs	r1, r1, #31
 8000dba:	2aff      	cmp	r2, #255	@ 0xff
 8000dbc:	d019      	beq.n	8000df2 <__gesf2+0x4e>
 8000dbe:	28ff      	cmp	r0, #255	@ 0xff
 8000dc0:	d00b      	beq.n	8000dda <__gesf2+0x36>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d11e      	bne.n	8000e04 <__gesf2+0x60>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d10b      	bne.n	8000de2 <__gesf2+0x3e>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d027      	beq.n	8000e1e <__gesf2+0x7a>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d134      	bne.n	8000e3c <__gesf2+0x98>
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d02f      	beq.n	8000e36 <__gesf2+0x92>
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	bd30      	pop	{r4, r5, pc}
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d128      	bne.n	8000e30 <__gesf2+0x8c>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d101      	bne.n	8000de6 <__gesf2+0x42>
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d0f5      	beq.n	8000dd2 <__gesf2+0x2e>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d107      	bne.n	8000dfa <__gesf2+0x56>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d023      	beq.n	8000e36 <__gesf2+0x92>
 8000dee:	0018      	movs	r0, r3
 8000df0:	e7f2      	b.n	8000dd8 <__gesf2+0x34>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d11c      	bne.n	8000e30 <__gesf2+0x8c>
 8000df6:	28ff      	cmp	r0, #255	@ 0xff
 8000df8:	d014      	beq.n	8000e24 <__gesf2+0x80>
 8000dfa:	1e58      	subs	r0, r3, #1
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	4018      	ands	r0, r3
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7e9      	b.n	8000dd8 <__gesf2+0x34>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d0f8      	beq.n	8000dfa <__gesf2+0x56>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d1f6      	bne.n	8000dfa <__gesf2+0x56>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	dcf4      	bgt.n	8000dfa <__gesf2+0x56>
 8000e10:	dbeb      	blt.n	8000dea <__gesf2+0x46>
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	d8f1      	bhi.n	8000dfa <__gesf2+0x56>
 8000e16:	2000      	movs	r0, #0
 8000e18:	42ac      	cmp	r4, r5
 8000e1a:	d2dd      	bcs.n	8000dd8 <__gesf2+0x34>
 8000e1c:	e7e5      	b.n	8000dea <__gesf2+0x46>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d0da      	beq.n	8000dd8 <__gesf2+0x34>
 8000e22:	e7ea      	b.n	8000dfa <__gesf2+0x56>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d103      	bne.n	8000e30 <__gesf2+0x8c>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d1e6      	bne.n	8000dfa <__gesf2+0x56>
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7d3      	b.n	8000dd8 <__gesf2+0x34>
 8000e30:	2002      	movs	r0, #2
 8000e32:	4240      	negs	r0, r0
 8000e34:	e7d0      	b.n	8000dd8 <__gesf2+0x34>
 8000e36:	2001      	movs	r0, #1
 8000e38:	4240      	negs	r0, r0
 8000e3a:	e7cd      	b.n	8000dd8 <__gesf2+0x34>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d0e8      	beq.n	8000e12 <__gesf2+0x6e>
 8000e40:	e7db      	b.n	8000dfa <__gesf2+0x56>
 8000e42:	46c0      	nop			@ (mov r8, r8)

08000e44 <__lesf2>:
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0244      	lsls	r4, r0, #9
 8000e4a:	024d      	lsls	r5, r1, #9
 8000e4c:	0fc3      	lsrs	r3, r0, #31
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	0a6d      	lsrs	r5, r5, #9
 8000e56:	0e00      	lsrs	r0, r0, #24
 8000e58:	0fc9      	lsrs	r1, r1, #31
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d01a      	beq.n	8000e94 <__lesf2+0x50>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d00e      	beq.n	8000e80 <__lesf2+0x3c>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d11e      	bne.n	8000ea4 <__lesf2+0x60>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d10e      	bne.n	8000e88 <__lesf2+0x44>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d02a      	beq.n	8000ec4 <__lesf2+0x80>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d00c      	beq.n	8000e8c <__lesf2+0x48>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d01d      	beq.n	8000eb2 <__lesf2+0x6e>
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	2302      	movs	r3, #2
 8000e7a:	4018      	ands	r0, r3
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e010      	b.n	8000ea2 <__lesf2+0x5e>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d10d      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d120      	bne.n	8000eca <__lesf2+0x86>
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d11e      	bne.n	8000eca <__lesf2+0x86>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d023      	beq.n	8000ed8 <__lesf2+0x94>
 8000e90:	0008      	movs	r0, r1
 8000e92:	e006      	b.n	8000ea2 <__lesf2+0x5e>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d103      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e98:	28ff      	cmp	r0, #255	@ 0xff
 8000e9a:	d1ec      	bne.n	8000e76 <__lesf2+0x32>
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d017      	beq.n	8000ed0 <__lesf2+0x8c>
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0e6      	beq.n	8000e76 <__lesf2+0x32>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1e4      	bne.n	8000e76 <__lesf2+0x32>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	dce2      	bgt.n	8000e76 <__lesf2+0x32>
 8000eb0:	db04      	blt.n	8000ebc <__lesf2+0x78>
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d8df      	bhi.n	8000e76 <__lesf2+0x32>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d2f2      	bcs.n	8000ea2 <__lesf2+0x5e>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <__lesf2+0x94>
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	e7ee      	b.n	8000ea2 <__lesf2+0x5e>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d0ec      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ec8:	e7d5      	b.n	8000e76 <__lesf2+0x32>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1d3      	bne.n	8000e76 <__lesf2+0x32>
 8000ece:	e7f5      	b.n	8000ebc <__lesf2+0x78>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d0e5      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ed6:	e7ce      	b.n	8000e76 <__lesf2+0x32>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4240      	negs	r0, r0
 8000edc:	e7e1      	b.n	8000ea2 <__lesf2+0x5e>
 8000ede:	46c0      	nop			@ (mov r8, r8)

08000ee0 <__aeabi_fmul>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	464f      	mov	r7, r9
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	46d6      	mov	lr, sl
 8000ee8:	0243      	lsls	r3, r0, #9
 8000eea:	0a5b      	lsrs	r3, r3, #9
 8000eec:	0045      	lsls	r5, r0, #1
 8000eee:	b5c0      	push	{r6, r7, lr}
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	1c0f      	adds	r7, r1, #0
 8000ef4:	0e2d      	lsrs	r5, r5, #24
 8000ef6:	0fc6      	lsrs	r6, r0, #31
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fmul+0x1e>
 8000efc:	e088      	b.n	8001010 <__aeabi_fmul+0x130>
 8000efe:	2dff      	cmp	r5, #255	@ 0xff
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fmul+0x24>
 8000f02:	e08d      	b.n	8001020 <__aeabi_fmul+0x140>
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4691      	mov	r9, r2
 8000f10:	4698      	mov	r8, r3
 8000f12:	469a      	mov	sl, r3
 8000f14:	3d7f      	subs	r5, #127	@ 0x7f
 8000f16:	027c      	lsls	r4, r7, #9
 8000f18:	007b      	lsls	r3, r7, #1
 8000f1a:	0a64      	lsrs	r4, r4, #9
 8000f1c:	0e1b      	lsrs	r3, r3, #24
 8000f1e:	0fff      	lsrs	r7, r7, #31
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d068      	beq.n	8000ff6 <__aeabi_fmul+0x116>
 8000f24:	2bff      	cmp	r3, #255	@ 0xff
 8000f26:	d021      	beq.n	8000f6c <__aeabi_fmul+0x8c>
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	00e4      	lsls	r4, r4, #3
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	4642      	mov	r2, r8
 8000f32:	3b7f      	subs	r3, #127	@ 0x7f
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	2100      	movs	r1, #0
 8000f38:	1c5d      	adds	r5, r3, #1
 8000f3a:	2a0a      	cmp	r2, #10
 8000f3c:	dc2e      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8000f3e:	407e      	eors	r6, r7
 8000f40:	4642      	mov	r2, r8
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	dc23      	bgt.n	8000f8e <__aeabi_fmul+0xae>
 8000f46:	3a01      	subs	r2, #1
 8000f48:	2a01      	cmp	r2, #1
 8000f4a:	d900      	bls.n	8000f4e <__aeabi_fmul+0x6e>
 8000f4c:	e0bd      	b.n	80010ca <__aeabi_fmul+0x1ea>
 8000f4e:	2902      	cmp	r1, #2
 8000f50:	d06e      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000f52:	2901      	cmp	r1, #1
 8000f54:	d12c      	bne.n	8000fb0 <__aeabi_fmul+0xd0>
 8000f56:	2000      	movs	r0, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	05c0      	lsls	r0, r0, #23
 8000f5c:	07f6      	lsls	r6, r6, #31
 8000f5e:	4310      	orrs	r0, r2
 8000f60:	4330      	orrs	r0, r6
 8000f62:	bce0      	pop	{r5, r6, r7}
 8000f64:	46ba      	mov	sl, r7
 8000f66:	46b1      	mov	r9, r6
 8000f68:	46a8      	mov	r8, r5
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	33ff      	adds	r3, #255	@ 0xff
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d065      	beq.n	8001040 <__aeabi_fmul+0x160>
 8000f74:	2203      	movs	r2, #3
 8000f76:	4641      	mov	r1, r8
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	0032      	movs	r2, r6
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	4688      	mov	r8, r1
 8000f80:	407a      	eors	r2, r7
 8000f82:	35ff      	adds	r5, #255	@ 0xff
 8000f84:	290a      	cmp	r1, #10
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_fmul+0xaa>
 8000f88:	e0d8      	b.n	800113c <__aeabi_fmul+0x25c>
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4640      	mov	r0, r8
 8000f90:	2201      	movs	r2, #1
 8000f92:	4082      	lsls	r2, r0
 8000f94:	20a6      	movs	r0, #166	@ 0xa6
 8000f96:	00c0      	lsls	r0, r0, #3
 8000f98:	4202      	tst	r2, r0
 8000f9a:	d020      	beq.n	8000fde <__aeabi_fmul+0xfe>
 8000f9c:	4653      	mov	r3, sl
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d046      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fmul+0xc8>
 8000fa6:	e0bb      	b.n	8001120 <__aeabi_fmul+0x240>
 8000fa8:	4651      	mov	r1, sl
 8000faa:	464c      	mov	r4, r9
 8000fac:	2901      	cmp	r1, #1
 8000fae:	d0d2      	beq.n	8000f56 <__aeabi_fmul+0x76>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	337f      	adds	r3, #127	@ 0x7f
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd70      	ble.n	800109a <__aeabi_fmul+0x1ba>
 8000fb8:	0762      	lsls	r2, r4, #29
 8000fba:	d004      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	4022      	ands	r2, r4
 8000fc0:	2a04      	cmp	r2, #4
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	0122      	lsls	r2, r4, #4
 8000fc8:	d503      	bpl.n	8000fd2 <__aeabi_fmul+0xf2>
 8000fca:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <__aeabi_fmul+0x278>)
 8000fcc:	401c      	ands	r4, r3
 8000fce:	002b      	movs	r3, r5
 8000fd0:	3380      	adds	r3, #128	@ 0x80
 8000fd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fd4:	dc2c      	bgt.n	8001030 <__aeabi_fmul+0x150>
 8000fd6:	01a2      	lsls	r2, r4, #6
 8000fd8:	0a52      	lsrs	r2, r2, #9
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	e7bd      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8000fde:	2090      	movs	r0, #144	@ 0x90
 8000fe0:	0080      	lsls	r0, r0, #2
 8000fe2:	4202      	tst	r2, r0
 8000fe4:	d127      	bne.n	8001036 <__aeabi_fmul+0x156>
 8000fe6:	38b9      	subs	r0, #185	@ 0xb9
 8000fe8:	38ff      	subs	r0, #255	@ 0xff
 8000fea:	4210      	tst	r0, r2
 8000fec:	d06d      	beq.n	80010ca <__aeabi_fmul+0x1ea>
 8000fee:	003e      	movs	r6, r7
 8000ff0:	46a1      	mov	r9, r4
 8000ff2:	468a      	mov	sl, r1
 8000ff4:	e7d2      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d141      	bne.n	800107e <__aeabi_fmul+0x19e>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4690      	mov	r8, r2
 8001002:	002b      	movs	r3, r5
 8001004:	4642      	mov	r2, r8
 8001006:	2101      	movs	r1, #1
 8001008:	1c5d      	adds	r5, r3, #1
 800100a:	2a0a      	cmp	r2, #10
 800100c:	dd97      	ble.n	8000f3e <__aeabi_fmul+0x5e>
 800100e:	e7c5      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d126      	bne.n	8001062 <__aeabi_fmul+0x182>
 8001014:	2304      	movs	r3, #4
 8001016:	4698      	mov	r8, r3
 8001018:	3b03      	subs	r3, #3
 800101a:	2500      	movs	r5, #0
 800101c:	469a      	mov	sl, r3
 800101e:	e77a      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <__aeabi_fmul+0x176>
 8001024:	2308      	movs	r3, #8
 8001026:	4698      	mov	r8, r3
 8001028:	3b06      	subs	r3, #6
 800102a:	25ff      	movs	r5, #255	@ 0xff
 800102c:	469a      	mov	sl, r3
 800102e:	e772      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001030:	20ff      	movs	r0, #255	@ 0xff
 8001032:	2200      	movs	r2, #0
 8001034:	e791      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	2600      	movs	r6, #0
 800103a:	20ff      	movs	r0, #255	@ 0xff
 800103c:	03d2      	lsls	r2, r2, #15
 800103e:	e78c      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001040:	4641      	mov	r1, r8
 8001042:	2202      	movs	r2, #2
 8001044:	3501      	adds	r5, #1
 8001046:	4311      	orrs	r1, r2
 8001048:	4688      	mov	r8, r1
 800104a:	35ff      	adds	r5, #255	@ 0xff
 800104c:	290a      	cmp	r1, #10
 800104e:	dca5      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8001050:	2102      	movs	r1, #2
 8001052:	407e      	eors	r6, r7
 8001054:	e774      	b.n	8000f40 <__aeabi_fmul+0x60>
 8001056:	230c      	movs	r3, #12
 8001058:	4698      	mov	r8, r3
 800105a:	3b09      	subs	r3, #9
 800105c:	25ff      	movs	r5, #255	@ 0xff
 800105e:	469a      	mov	sl, r3
 8001060:	e759      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001062:	0018      	movs	r0, r3
 8001064:	f002 fa6a 	bl	800353c <__clzsi2>
 8001068:	464a      	mov	r2, r9
 800106a:	1f43      	subs	r3, r0, #5
 800106c:	2576      	movs	r5, #118	@ 0x76
 800106e:	409a      	lsls	r2, r3
 8001070:	2300      	movs	r3, #0
 8001072:	426d      	negs	r5, r5
 8001074:	4691      	mov	r9, r2
 8001076:	4698      	mov	r8, r3
 8001078:	469a      	mov	sl, r3
 800107a:	1a2d      	subs	r5, r5, r0
 800107c:	e74b      	b.n	8000f16 <__aeabi_fmul+0x36>
 800107e:	0020      	movs	r0, r4
 8001080:	f002 fa5c 	bl	800353c <__clzsi2>
 8001084:	4642      	mov	r2, r8
 8001086:	1f43      	subs	r3, r0, #5
 8001088:	409c      	lsls	r4, r3
 800108a:	1a2b      	subs	r3, r5, r0
 800108c:	3b76      	subs	r3, #118	@ 0x76
 800108e:	2100      	movs	r1, #0
 8001090:	1c5d      	adds	r5, r3, #1
 8001092:	2a0a      	cmp	r2, #10
 8001094:	dc00      	bgt.n	8001098 <__aeabi_fmul+0x1b8>
 8001096:	e752      	b.n	8000f3e <__aeabi_fmul+0x5e>
 8001098:	e780      	b.n	8000f9c <__aeabi_fmul+0xbc>
 800109a:	2201      	movs	r2, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b1b      	cmp	r3, #27
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_fmul+0x1c4>
 80010a2:	e758      	b.n	8000f56 <__aeabi_fmul+0x76>
 80010a4:	359e      	adds	r5, #158	@ 0x9e
 80010a6:	0022      	movs	r2, r4
 80010a8:	40ac      	lsls	r4, r5
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	1e63      	subs	r3, r4, #1
 80010ae:	419c      	sbcs	r4, r3
 80010b0:	4322      	orrs	r2, r4
 80010b2:	0753      	lsls	r3, r2, #29
 80010b4:	d004      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010b6:	230f      	movs	r3, #15
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d000      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010be:	3204      	adds	r2, #4
 80010c0:	0153      	lsls	r3, r2, #5
 80010c2:	d537      	bpl.n	8001134 <__aeabi_fmul+0x254>
 80010c4:	2001      	movs	r0, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	e747      	b.n	8000f5a <__aeabi_fmul+0x7a>
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	464a      	mov	r2, r9
 80010ce:	0424      	lsls	r4, r4, #16
 80010d0:	0c24      	lsrs	r4, r4, #16
 80010d2:	0027      	movs	r7, r4
 80010d4:	0c10      	lsrs	r0, r2, #16
 80010d6:	0412      	lsls	r2, r2, #16
 80010d8:	0c12      	lsrs	r2, r2, #16
 80010da:	4344      	muls	r4, r0
 80010dc:	4357      	muls	r7, r2
 80010de:	4348      	muls	r0, r1
 80010e0:	4351      	muls	r1, r2
 80010e2:	0c3a      	lsrs	r2, r7, #16
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	1852      	adds	r2, r2, r1
 80010e8:	4294      	cmp	r4, r2
 80010ea:	d903      	bls.n	80010f4 <__aeabi_fmul+0x214>
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	0249      	lsls	r1, r1, #9
 80010f0:	468c      	mov	ip, r1
 80010f2:	4460      	add	r0, ip
 80010f4:	043f      	lsls	r7, r7, #16
 80010f6:	0411      	lsls	r1, r2, #16
 80010f8:	0c3f      	lsrs	r7, r7, #16
 80010fa:	19c9      	adds	r1, r1, r7
 80010fc:	018c      	lsls	r4, r1, #6
 80010fe:	1e67      	subs	r7, r4, #1
 8001100:	41bc      	sbcs	r4, r7
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	0e89      	lsrs	r1, r1, #26
 8001106:	1812      	adds	r2, r2, r0
 8001108:	430c      	orrs	r4, r1
 800110a:	0192      	lsls	r2, r2, #6
 800110c:	4314      	orrs	r4, r2
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	d50e      	bpl.n	8001130 <__aeabi_fmul+0x250>
 8001112:	2301      	movs	r3, #1
 8001114:	0862      	lsrs	r2, r4, #1
 8001116:	401c      	ands	r4, r3
 8001118:	4314      	orrs	r4, r2
 800111a:	e749      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 800111c:	003e      	movs	r6, r7
 800111e:	46a1      	mov	r9, r4
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	464b      	mov	r3, r9
 8001124:	03d2      	lsls	r2, r2, #15
 8001126:	431a      	orrs	r2, r3
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	20ff      	movs	r0, #255	@ 0xff
 800112c:	0a52      	lsrs	r2, r2, #9
 800112e:	e714      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001130:	001d      	movs	r5, r3
 8001132:	e73d      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 8001134:	0192      	lsls	r2, r2, #6
 8001136:	2000      	movs	r0, #0
 8001138:	0a52      	lsrs	r2, r2, #9
 800113a:	e70e      	b.n	8000f5a <__aeabi_fmul+0x7a>
 800113c:	290f      	cmp	r1, #15
 800113e:	d1ed      	bne.n	800111c <__aeabi_fmul+0x23c>
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	464b      	mov	r3, r9
 8001144:	03d2      	lsls	r2, r2, #15
 8001146:	4213      	tst	r3, r2
 8001148:	d0ea      	beq.n	8001120 <__aeabi_fmul+0x240>
 800114a:	4214      	tst	r4, r2
 800114c:	d1e8      	bne.n	8001120 <__aeabi_fmul+0x240>
 800114e:	003e      	movs	r6, r7
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	4322      	orrs	r2, r4
 8001154:	e701      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	f7ffffff 	.word	0xf7ffffff

0800115c <__aeabi_fsub>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	4647      	mov	r7, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	024e      	lsls	r6, r1, #9
 8001164:	0243      	lsls	r3, r0, #9
 8001166:	0045      	lsls	r5, r0, #1
 8001168:	0a72      	lsrs	r2, r6, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0048      	lsls	r0, r1, #1
 800116e:	b580      	push	{r7, lr}
 8001170:	4694      	mov	ip, r2
 8001172:	0a5f      	lsrs	r7, r3, #9
 8001174:	0e2d      	lsrs	r5, r5, #24
 8001176:	099b      	lsrs	r3, r3, #6
 8001178:	0e00      	lsrs	r0, r0, #24
 800117a:	0fc9      	lsrs	r1, r1, #31
 800117c:	09b6      	lsrs	r6, r6, #6
 800117e:	28ff      	cmp	r0, #255	@ 0xff
 8001180:	d024      	beq.n	80011cc <__aeabi_fsub+0x70>
 8001182:	2201      	movs	r2, #1
 8001184:	4051      	eors	r1, r2
 8001186:	1a2a      	subs	r2, r5, r0
 8001188:	428c      	cmp	r4, r1
 800118a:	d00f      	beq.n	80011ac <__aeabi_fsub+0x50>
 800118c:	2a00      	cmp	r2, #0
 800118e:	dc00      	bgt.n	8001192 <__aeabi_fsub+0x36>
 8001190:	e16a      	b.n	8001468 <__aeabi_fsub+0x30c>
 8001192:	2800      	cmp	r0, #0
 8001194:	d135      	bne.n	8001202 <__aeabi_fsub+0xa6>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x40>
 800119a:	e0a2      	b.n	80012e2 <__aeabi_fsub+0x186>
 800119c:	1e51      	subs	r1, r2, #1
 800119e:	2a01      	cmp	r2, #1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x48>
 80011a2:	e124      	b.n	80013ee <__aeabi_fsub+0x292>
 80011a4:	2aff      	cmp	r2, #255	@ 0xff
 80011a6:	d021      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011a8:	000a      	movs	r2, r1
 80011aa:	e02f      	b.n	800120c <__aeabi_fsub+0xb0>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_fsub+0x56>
 80011b0:	e167      	b.n	8001482 <__aeabi_fsub+0x326>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d05e      	beq.n	8001274 <__aeabi_fsub+0x118>
 80011b6:	2dff      	cmp	r5, #255	@ 0xff
 80011b8:	d018      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	04c9      	lsls	r1, r1, #19
 80011be:	430e      	orrs	r6, r1
 80011c0:	2a1b      	cmp	r2, #27
 80011c2:	dc00      	bgt.n	80011c6 <__aeabi_fsub+0x6a>
 80011c4:	e076      	b.n	80012b4 <__aeabi_fsub+0x158>
 80011c6:	002a      	movs	r2, r5
 80011c8:	3301      	adds	r3, #1
 80011ca:	e032      	b.n	8001232 <__aeabi_fsub+0xd6>
 80011cc:	002a      	movs	r2, r5
 80011ce:	3aff      	subs	r2, #255	@ 0xff
 80011d0:	4691      	mov	r9, r2
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d042      	beq.n	800125c <__aeabi_fsub+0x100>
 80011d6:	428c      	cmp	r4, r1
 80011d8:	d055      	beq.n	8001286 <__aeabi_fsub+0x12a>
 80011da:	464a      	mov	r2, r9
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x86>
 80011e0:	e09c      	b.n	800131c <__aeabi_fsub+0x1c0>
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x8c>
 80011e6:	e077      	b.n	80012d8 <__aeabi_fsub+0x17c>
 80011e8:	000c      	movs	r4, r1
 80011ea:	0033      	movs	r3, r6
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x98>
 80011f2:	e06e      	b.n	80012d2 <__aeabi_fsub+0x176>
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	03d2      	lsls	r2, r2, #15
 80011f8:	4313      	orrs	r3, r2
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	20ff      	movs	r0, #255	@ 0xff
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	e024      	b.n	800124c <__aeabi_fsub+0xf0>
 8001202:	2dff      	cmp	r5, #255	@ 0xff
 8001204:	d0f2      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	04c9      	lsls	r1, r1, #19
 800120a:	430e      	orrs	r6, r1
 800120c:	2101      	movs	r1, #1
 800120e:	2a1b      	cmp	r2, #27
 8001210:	dc08      	bgt.n	8001224 <__aeabi_fsub+0xc8>
 8001212:	0031      	movs	r1, r6
 8001214:	2020      	movs	r0, #32
 8001216:	40d1      	lsrs	r1, r2
 8001218:	1a82      	subs	r2, r0, r2
 800121a:	4096      	lsls	r6, r2
 800121c:	0032      	movs	r2, r6
 800121e:	1e50      	subs	r0, r2, #1
 8001220:	4182      	sbcs	r2, r0
 8001222:	4311      	orrs	r1, r2
 8001224:	1a5b      	subs	r3, r3, r1
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	d460      	bmi.n	80012ec <__aeabi_fsub+0x190>
 800122a:	2107      	movs	r1, #7
 800122c:	002a      	movs	r2, r5
 800122e:	4019      	ands	r1, r3
 8001230:	d057      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001232:	210f      	movs	r1, #15
 8001234:	4019      	ands	r1, r3
 8001236:	2904      	cmp	r1, #4
 8001238:	d000      	beq.n	800123c <__aeabi_fsub+0xe0>
 800123a:	3304      	adds	r3, #4
 800123c:	0159      	lsls	r1, r3, #5
 800123e:	d550      	bpl.n	80012e2 <__aeabi_fsub+0x186>
 8001240:	1c50      	adds	r0, r2, #1
 8001242:	2afe      	cmp	r2, #254	@ 0xfe
 8001244:	d045      	beq.n	80012d2 <__aeabi_fsub+0x176>
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	b2c0      	uxtb	r0, r0
 800124a:	0a5b      	lsrs	r3, r3, #9
 800124c:	05c0      	lsls	r0, r0, #23
 800124e:	4318      	orrs	r0, r3
 8001250:	07e4      	lsls	r4, r4, #31
 8001252:	4320      	orrs	r0, r4
 8001254:	bcc0      	pop	{r6, r7}
 8001256:	46b9      	mov	r9, r7
 8001258:	46b0      	mov	r8, r6
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125c:	2201      	movs	r2, #1
 800125e:	4051      	eors	r1, r2
 8001260:	428c      	cmp	r4, r1
 8001262:	d1ba      	bne.n	80011da <__aeabi_fsub+0x7e>
 8001264:	464a      	mov	r2, r9
 8001266:	2a00      	cmp	r2, #0
 8001268:	d010      	beq.n	800128c <__aeabi_fsub+0x130>
 800126a:	2d00      	cmp	r5, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_fsub+0x114>
 800126e:	e098      	b.n	80013a2 <__aeabi_fsub+0x246>
 8001270:	2300      	movs	r3, #0
 8001272:	e7bb      	b.n	80011ec <__aeabi_fsub+0x90>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d034      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001278:	1e51      	subs	r1, r2, #1
 800127a:	2a01      	cmp	r2, #1
 800127c:	d06e      	beq.n	800135c <__aeabi_fsub+0x200>
 800127e:	2aff      	cmp	r2, #255	@ 0xff
 8001280:	d0b4      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001282:	000a      	movs	r2, r1
 8001284:	e79c      	b.n	80011c0 <__aeabi_fsub+0x64>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x130>
 800128a:	e088      	b.n	800139e <__aeabi_fsub+0x242>
 800128c:	20fe      	movs	r0, #254	@ 0xfe
 800128e:	1c6a      	adds	r2, r5, #1
 8001290:	4210      	tst	r0, r2
 8001292:	d000      	beq.n	8001296 <__aeabi_fsub+0x13a>
 8001294:	e092      	b.n	80013bc <__aeabi_fsub+0x260>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d000      	beq.n	800129c <__aeabi_fsub+0x140>
 800129a:	e0a4      	b.n	80013e6 <__aeabi_fsub+0x28a>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x146>
 80012a0:	e0cb      	b.n	800143a <__aeabi_fsub+0x2de>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 80012a6:	e0ca      	b.n	800143e <__aeabi_fsub+0x2e2>
 80012a8:	2200      	movs	r2, #0
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	b2d0      	uxtb	r0, r2
 80012b2:	e7cb      	b.n	800124c <__aeabi_fsub+0xf0>
 80012b4:	0031      	movs	r1, r6
 80012b6:	2020      	movs	r0, #32
 80012b8:	40d1      	lsrs	r1, r2
 80012ba:	1a82      	subs	r2, r0, r2
 80012bc:	4096      	lsls	r6, r2
 80012be:	0032      	movs	r2, r6
 80012c0:	1e50      	subs	r0, r2, #1
 80012c2:	4182      	sbcs	r2, r0
 80012c4:	430a      	orrs	r2, r1
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	d5ae      	bpl.n	800122a <__aeabi_fsub+0xce>
 80012cc:	1c6a      	adds	r2, r5, #1
 80012ce:	2dfe      	cmp	r5, #254	@ 0xfe
 80012d0:	d14a      	bne.n	8001368 <__aeabi_fsub+0x20c>
 80012d2:	20ff      	movs	r0, #255	@ 0xff
 80012d4:	2300      	movs	r3, #0
 80012d6:	e7b9      	b.n	800124c <__aeabi_fsub+0xf0>
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d14b      	bne.n	8001376 <__aeabi_fsub+0x21a>
 80012de:	000c      	movs	r4, r1
 80012e0:	0033      	movs	r3, r6
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	2aff      	cmp	r2, #255	@ 0xff
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x18e>
 80012e8:	e781      	b.n	80011ee <__aeabi_fsub+0x92>
 80012ea:	e7df      	b.n	80012ac <__aeabi_fsub+0x150>
 80012ec:	019f      	lsls	r7, r3, #6
 80012ee:	09bf      	lsrs	r7, r7, #6
 80012f0:	0038      	movs	r0, r7
 80012f2:	f002 f923 	bl	800353c <__clzsi2>
 80012f6:	3805      	subs	r0, #5
 80012f8:	4087      	lsls	r7, r0
 80012fa:	4285      	cmp	r5, r0
 80012fc:	dc21      	bgt.n	8001342 <__aeabi_fsub+0x1e6>
 80012fe:	003b      	movs	r3, r7
 8001300:	2120      	movs	r1, #32
 8001302:	1b42      	subs	r2, r0, r5
 8001304:	3201      	adds	r2, #1
 8001306:	40d3      	lsrs	r3, r2
 8001308:	1a8a      	subs	r2, r1, r2
 800130a:	4097      	lsls	r7, r2
 800130c:	1e7a      	subs	r2, r7, #1
 800130e:	4197      	sbcs	r7, r2
 8001310:	2200      	movs	r2, #0
 8001312:	433b      	orrs	r3, r7
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x1be>
 8001318:	e78b      	b.n	8001232 <__aeabi_fsub+0xd6>
 800131a:	e78f      	b.n	800123c <__aeabi_fsub+0xe0>
 800131c:	20fe      	movs	r0, #254	@ 0xfe
 800131e:	1c6a      	adds	r2, r5, #1
 8001320:	4210      	tst	r0, r2
 8001322:	d112      	bne.n	800134a <__aeabi_fsub+0x1ee>
 8001324:	2d00      	cmp	r5, #0
 8001326:	d152      	bne.n	80013ce <__aeabi_fsub+0x272>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07c      	beq.n	8001426 <__aeabi_fsub+0x2ca>
 800132c:	2e00      	cmp	r6, #0
 800132e:	d0bb      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 8001330:	1b9a      	subs	r2, r3, r6
 8001332:	0150      	lsls	r0, r2, #5
 8001334:	d400      	bmi.n	8001338 <__aeabi_fsub+0x1dc>
 8001336:	e08b      	b.n	8001450 <__aeabi_fsub+0x2f4>
 8001338:	2401      	movs	r4, #1
 800133a:	2200      	movs	r2, #0
 800133c:	1af3      	subs	r3, r6, r3
 800133e:	400c      	ands	r4, r1
 8001340:	e7e8      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <__aeabi_fsub+0x340>)
 8001344:	1a2a      	subs	r2, r5, r0
 8001346:	403b      	ands	r3, r7
 8001348:	e7e4      	b.n	8001314 <__aeabi_fsub+0x1b8>
 800134a:	1b9f      	subs	r7, r3, r6
 800134c:	017a      	lsls	r2, r7, #5
 800134e:	d446      	bmi.n	80013de <__aeabi_fsub+0x282>
 8001350:	2f00      	cmp	r7, #0
 8001352:	d1cd      	bne.n	80012f0 <__aeabi_fsub+0x194>
 8001354:	2400      	movs	r4, #0
 8001356:	2000      	movs	r0, #0
 8001358:	2300      	movs	r3, #0
 800135a:	e777      	b.n	800124c <__aeabi_fsub+0xf0>
 800135c:	199b      	adds	r3, r3, r6
 800135e:	2501      	movs	r5, #1
 8001360:	3201      	adds	r2, #1
 8001362:	0159      	lsls	r1, r3, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x20c>
 8001366:	e760      	b.n	800122a <__aeabi_fsub+0xce>
 8001368:	2101      	movs	r1, #1
 800136a:	484d      	ldr	r0, [pc, #308]	@ (80014a0 <__aeabi_fsub+0x344>)
 800136c:	4019      	ands	r1, r3
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	4003      	ands	r3, r0
 8001372:	430b      	orrs	r3, r1
 8001374:	e7ce      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001376:	1e57      	subs	r7, r2, #1
 8001378:	2a01      	cmp	r2, #1
 800137a:	d05a      	beq.n	8001432 <__aeabi_fsub+0x2d6>
 800137c:	000c      	movs	r4, r1
 800137e:	2aff      	cmp	r2, #255	@ 0xff
 8001380:	d033      	beq.n	80013ea <__aeabi_fsub+0x28e>
 8001382:	2201      	movs	r2, #1
 8001384:	2f1b      	cmp	r7, #27
 8001386:	dc07      	bgt.n	8001398 <__aeabi_fsub+0x23c>
 8001388:	2120      	movs	r1, #32
 800138a:	1bc9      	subs	r1, r1, r7
 800138c:	001a      	movs	r2, r3
 800138e:	408b      	lsls	r3, r1
 8001390:	40fa      	lsrs	r2, r7
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	418b      	sbcs	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	0005      	movs	r5, r0
 800139a:	1ab3      	subs	r3, r6, r2
 800139c:	e743      	b.n	8001226 <__aeabi_fsub+0xca>
 800139e:	2d00      	cmp	r5, #0
 80013a0:	d123      	bne.n	80013ea <__aeabi_fsub+0x28e>
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d09b      	beq.n	80012e0 <__aeabi_fsub+0x184>
 80013a8:	1e51      	subs	r1, r2, #1
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d0d6      	beq.n	800135c <__aeabi_fsub+0x200>
 80013ae:	2aff      	cmp	r2, #255	@ 0xff
 80013b0:	d01b      	beq.n	80013ea <__aeabi_fsub+0x28e>
 80013b2:	291b      	cmp	r1, #27
 80013b4:	dd2c      	ble.n	8001410 <__aeabi_fsub+0x2b4>
 80013b6:	0002      	movs	r2, r0
 80013b8:	1c73      	adds	r3, r6, #1
 80013ba:	e73a      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013bc:	2aff      	cmp	r2, #255	@ 0xff
 80013be:	d088      	beq.n	80012d2 <__aeabi_fsub+0x176>
 80013c0:	199b      	adds	r3, r3, r6
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x26e>
 80013c8:	e733      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e76e      	b.n	80012ac <__aeabi_fsub+0x150>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d110      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d043      	beq.n	800145e <__aeabi_fsub+0x302>
 80013d6:	2401      	movs	r4, #1
 80013d8:	0033      	movs	r3, r6
 80013da:	400c      	ands	r4, r1
 80013dc:	e706      	b.n	80011ec <__aeabi_fsub+0x90>
 80013de:	2401      	movs	r4, #1
 80013e0:	1af7      	subs	r7, r6, r3
 80013e2:	400c      	ands	r4, r1
 80013e4:	e784      	b.n	80012f0 <__aeabi_fsub+0x194>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013ea:	0033      	movs	r3, r6
 80013ec:	e6fe      	b.n	80011ec <__aeabi_fsub+0x90>
 80013ee:	2501      	movs	r5, #1
 80013f0:	1b9b      	subs	r3, r3, r6
 80013f2:	e718      	b.n	8001226 <__aeabi_fsub+0xca>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_fsub+0x29e>
 80013f8:	e6f8      	b.n	80011ec <__aeabi_fsub+0x90>
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	03d2      	lsls	r2, r2, #15
 80013fe:	4297      	cmp	r7, r2
 8001400:	d304      	bcc.n	800140c <__aeabi_fsub+0x2b0>
 8001402:	4594      	cmp	ip, r2
 8001404:	d202      	bcs.n	800140c <__aeabi_fsub+0x2b0>
 8001406:	2401      	movs	r4, #1
 8001408:	0033      	movs	r3, r6
 800140a:	400c      	ands	r4, r1
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	e6f1      	b.n	80011f4 <__aeabi_fsub+0x98>
 8001410:	001a      	movs	r2, r3
 8001412:	2520      	movs	r5, #32
 8001414:	40ca      	lsrs	r2, r1
 8001416:	1a69      	subs	r1, r5, r1
 8001418:	408b      	lsls	r3, r1
 800141a:	1e59      	subs	r1, r3, #1
 800141c:	418b      	sbcs	r3, r1
 800141e:	4313      	orrs	r3, r2
 8001420:	0005      	movs	r5, r0
 8001422:	199b      	adds	r3, r3, r6
 8001424:	e750      	b.n	80012c8 <__aeabi_fsub+0x16c>
 8001426:	2e00      	cmp	r6, #0
 8001428:	d094      	beq.n	8001354 <__aeabi_fsub+0x1f8>
 800142a:	2401      	movs	r4, #1
 800142c:	0033      	movs	r3, r6
 800142e:	400c      	ands	r4, r1
 8001430:	e73a      	b.n	80012a8 <__aeabi_fsub+0x14c>
 8001432:	000c      	movs	r4, r1
 8001434:	2501      	movs	r5, #1
 8001436:	1af3      	subs	r3, r6, r3
 8001438:	e6f5      	b.n	8001226 <__aeabi_fsub+0xca>
 800143a:	0033      	movs	r3, r6
 800143c:	e734      	b.n	80012a8 <__aeabi_fsub+0x14c>
 800143e:	199b      	adds	r3, r3, r6
 8001440:	2200      	movs	r2, #0
 8001442:	0159      	lsls	r1, r3, #5
 8001444:	d5c1      	bpl.n	80013ca <__aeabi_fsub+0x26e>
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <__aeabi_fsub+0x340>)
 8001448:	4013      	ands	r3, r2
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	2201      	movs	r2, #1
 800144e:	e72d      	b.n	80012ac <__aeabi_fsub+0x150>
 8001450:	2a00      	cmp	r2, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_fsub+0x2fa>
 8001454:	e77e      	b.n	8001354 <__aeabi_fsub+0x1f8>
 8001456:	0013      	movs	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	e726      	b.n	80012ac <__aeabi_fsub+0x150>
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	2400      	movs	r4, #0
 8001462:	20ff      	movs	r0, #255	@ 0xff
 8001464:	03db      	lsls	r3, r3, #15
 8001466:	e6f1      	b.n	800124c <__aeabi_fsub+0xf0>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_fsub+0x312>
 800146c:	e756      	b.n	800131c <__aeabi_fsub+0x1c0>
 800146e:	1b47      	subs	r7, r0, r5
 8001470:	003a      	movs	r2, r7
 8001472:	2d00      	cmp	r5, #0
 8001474:	d100      	bne.n	8001478 <__aeabi_fsub+0x31c>
 8001476:	e730      	b.n	80012da <__aeabi_fsub+0x17e>
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	04d2      	lsls	r2, r2, #19
 800147c:	000c      	movs	r4, r1
 800147e:	4313      	orrs	r3, r2
 8001480:	e77f      	b.n	8001382 <__aeabi_fsub+0x226>
 8001482:	2a00      	cmp	r2, #0
 8001484:	d100      	bne.n	8001488 <__aeabi_fsub+0x32c>
 8001486:	e701      	b.n	800128c <__aeabi_fsub+0x130>
 8001488:	1b41      	subs	r1, r0, r5
 800148a:	2d00      	cmp	r5, #0
 800148c:	d101      	bne.n	8001492 <__aeabi_fsub+0x336>
 800148e:	000a      	movs	r2, r1
 8001490:	e788      	b.n	80013a4 <__aeabi_fsub+0x248>
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	04d2      	lsls	r2, r2, #19
 8001496:	4313      	orrs	r3, r2
 8001498:	e78b      	b.n	80013b2 <__aeabi_fsub+0x256>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	fbffffff 	.word	0xfbffffff
 80014a0:	7dffffff 	.word	0x7dffffff

080014a4 <__aeabi_fcmpun>:
 80014a4:	0243      	lsls	r3, r0, #9
 80014a6:	024a      	lsls	r2, r1, #9
 80014a8:	0040      	lsls	r0, r0, #1
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	0a5b      	lsrs	r3, r3, #9
 80014ae:	0a52      	lsrs	r2, r2, #9
 80014b0:	0e09      	lsrs	r1, r1, #24
 80014b2:	0e00      	lsrs	r0, r0, #24
 80014b4:	28ff      	cmp	r0, #255	@ 0xff
 80014b6:	d006      	beq.n	80014c6 <__aeabi_fcmpun+0x22>
 80014b8:	2000      	movs	r0, #0
 80014ba:	29ff      	cmp	r1, #255	@ 0xff
 80014bc:	d102      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014be:	1e53      	subs	r3, r2, #1
 80014c0:	419a      	sbcs	r2, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	4770      	bx	lr
 80014c6:	38fe      	subs	r0, #254	@ 0xfe
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1fb      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_fcmpun+0x14>
 80014ce:	46c0      	nop			@ (mov r8, r8)

080014d0 <__aeabi_f2iz>:
 80014d0:	0241      	lsls	r1, r0, #9
 80014d2:	0042      	lsls	r2, r0, #1
 80014d4:	0fc3      	lsrs	r3, r0, #31
 80014d6:	0a49      	lsrs	r1, r1, #9
 80014d8:	2000      	movs	r0, #0
 80014da:	0e12      	lsrs	r2, r2, #24
 80014dc:	2a7e      	cmp	r2, #126	@ 0x7e
 80014de:	dd03      	ble.n	80014e8 <__aeabi_f2iz+0x18>
 80014e0:	2a9d      	cmp	r2, #157	@ 0x9d
 80014e2:	dd02      	ble.n	80014ea <__aeabi_f2iz+0x1a>
 80014e4:	4a09      	ldr	r2, [pc, #36]	@ (800150c <__aeabi_f2iz+0x3c>)
 80014e6:	1898      	adds	r0, r3, r2
 80014e8:	4770      	bx	lr
 80014ea:	2080      	movs	r0, #128	@ 0x80
 80014ec:	0400      	lsls	r0, r0, #16
 80014ee:	4301      	orrs	r1, r0
 80014f0:	2a95      	cmp	r2, #149	@ 0x95
 80014f2:	dc07      	bgt.n	8001504 <__aeabi_f2iz+0x34>
 80014f4:	2096      	movs	r0, #150	@ 0x96
 80014f6:	1a82      	subs	r2, r0, r2
 80014f8:	40d1      	lsrs	r1, r2
 80014fa:	4248      	negs	r0, r1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <__aeabi_f2iz+0x18>
 8001500:	0008      	movs	r0, r1
 8001502:	e7f1      	b.n	80014e8 <__aeabi_f2iz+0x18>
 8001504:	3a96      	subs	r2, #150	@ 0x96
 8001506:	4091      	lsls	r1, r2
 8001508:	e7f7      	b.n	80014fa <__aeabi_f2iz+0x2a>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	7fffffff 	.word	0x7fffffff

08001510 <__aeabi_i2f>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	2800      	cmp	r0, #0
 8001514:	d013      	beq.n	800153e <__aeabi_i2f+0x2e>
 8001516:	17c3      	asrs	r3, r0, #31
 8001518:	18c5      	adds	r5, r0, r3
 800151a:	405d      	eors	r5, r3
 800151c:	0fc4      	lsrs	r4, r0, #31
 800151e:	0028      	movs	r0, r5
 8001520:	f002 f80c 	bl	800353c <__clzsi2>
 8001524:	239e      	movs	r3, #158	@ 0x9e
 8001526:	0001      	movs	r1, r0
 8001528:	1a1b      	subs	r3, r3, r0
 800152a:	2b96      	cmp	r3, #150	@ 0x96
 800152c:	dc0f      	bgt.n	800154e <__aeabi_i2f+0x3e>
 800152e:	2808      	cmp	r0, #8
 8001530:	d034      	beq.n	800159c <__aeabi_i2f+0x8c>
 8001532:	3908      	subs	r1, #8
 8001534:	408d      	lsls	r5, r1
 8001536:	026d      	lsls	r5, r5, #9
 8001538:	0a6d      	lsrs	r5, r5, #9
 800153a:	b2d8      	uxtb	r0, r3
 800153c:	e002      	b.n	8001544 <__aeabi_i2f+0x34>
 800153e:	2400      	movs	r4, #0
 8001540:	2000      	movs	r0, #0
 8001542:	2500      	movs	r5, #0
 8001544:	05c0      	lsls	r0, r0, #23
 8001546:	4328      	orrs	r0, r5
 8001548:	07e4      	lsls	r4, r4, #31
 800154a:	4320      	orrs	r0, r4
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	2b99      	cmp	r3, #153	@ 0x99
 8001550:	dc16      	bgt.n	8001580 <__aeabi_i2f+0x70>
 8001552:	1f42      	subs	r2, r0, #5
 8001554:	2805      	cmp	r0, #5
 8001556:	d000      	beq.n	800155a <__aeabi_i2f+0x4a>
 8001558:	4095      	lsls	r5, r2
 800155a:	002a      	movs	r2, r5
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <__aeabi_i2f+0x94>)
 800155e:	4002      	ands	r2, r0
 8001560:	076e      	lsls	r6, r5, #29
 8001562:	d009      	beq.n	8001578 <__aeabi_i2f+0x68>
 8001564:	260f      	movs	r6, #15
 8001566:	4035      	ands	r5, r6
 8001568:	2d04      	cmp	r5, #4
 800156a:	d005      	beq.n	8001578 <__aeabi_i2f+0x68>
 800156c:	3204      	adds	r2, #4
 800156e:	0155      	lsls	r5, r2, #5
 8001570:	d502      	bpl.n	8001578 <__aeabi_i2f+0x68>
 8001572:	239f      	movs	r3, #159	@ 0x9f
 8001574:	4002      	ands	r2, r0
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	0192      	lsls	r2, r2, #6
 800157a:	0a55      	lsrs	r5, r2, #9
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	e7e1      	b.n	8001544 <__aeabi_i2f+0x34>
 8001580:	2205      	movs	r2, #5
 8001582:	1a12      	subs	r2, r2, r0
 8001584:	0028      	movs	r0, r5
 8001586:	40d0      	lsrs	r0, r2
 8001588:	0002      	movs	r2, r0
 800158a:	0008      	movs	r0, r1
 800158c:	301b      	adds	r0, #27
 800158e:	4085      	lsls	r5, r0
 8001590:	0028      	movs	r0, r5
 8001592:	1e45      	subs	r5, r0, #1
 8001594:	41a8      	sbcs	r0, r5
 8001596:	4302      	orrs	r2, r0
 8001598:	0015      	movs	r5, r2
 800159a:	e7de      	b.n	800155a <__aeabi_i2f+0x4a>
 800159c:	026d      	lsls	r5, r5, #9
 800159e:	2096      	movs	r0, #150	@ 0x96
 80015a0:	0a6d      	lsrs	r5, r5, #9
 80015a2:	e7cf      	b.n	8001544 <__aeabi_i2f+0x34>
 80015a4:	fbffffff 	.word	0xfbffffff

080015a8 <__aeabi_ui2f>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	1e04      	subs	r4, r0, #0
 80015ac:	d00e      	beq.n	80015cc <__aeabi_ui2f+0x24>
 80015ae:	f001 ffc5 	bl	800353c <__clzsi2>
 80015b2:	239e      	movs	r3, #158	@ 0x9e
 80015b4:	0001      	movs	r1, r0
 80015b6:	1a1b      	subs	r3, r3, r0
 80015b8:	2b96      	cmp	r3, #150	@ 0x96
 80015ba:	dc0c      	bgt.n	80015d6 <__aeabi_ui2f+0x2e>
 80015bc:	2808      	cmp	r0, #8
 80015be:	d02f      	beq.n	8001620 <__aeabi_ui2f+0x78>
 80015c0:	3908      	subs	r1, #8
 80015c2:	408c      	lsls	r4, r1
 80015c4:	0264      	lsls	r4, r4, #9
 80015c6:	0a64      	lsrs	r4, r4, #9
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	e001      	b.n	80015d0 <__aeabi_ui2f+0x28>
 80015cc:	2000      	movs	r0, #0
 80015ce:	2400      	movs	r4, #0
 80015d0:	05c0      	lsls	r0, r0, #23
 80015d2:	4320      	orrs	r0, r4
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	2b99      	cmp	r3, #153	@ 0x99
 80015d8:	dc16      	bgt.n	8001608 <__aeabi_ui2f+0x60>
 80015da:	1f42      	subs	r2, r0, #5
 80015dc:	2805      	cmp	r0, #5
 80015de:	d000      	beq.n	80015e2 <__aeabi_ui2f+0x3a>
 80015e0:	4094      	lsls	r4, r2
 80015e2:	0022      	movs	r2, r4
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <__aeabi_ui2f+0x80>)
 80015e6:	4002      	ands	r2, r0
 80015e8:	0765      	lsls	r5, r4, #29
 80015ea:	d009      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015ec:	250f      	movs	r5, #15
 80015ee:	402c      	ands	r4, r5
 80015f0:	2c04      	cmp	r4, #4
 80015f2:	d005      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015f4:	3204      	adds	r2, #4
 80015f6:	0154      	lsls	r4, r2, #5
 80015f8:	d502      	bpl.n	8001600 <__aeabi_ui2f+0x58>
 80015fa:	239f      	movs	r3, #159	@ 0x9f
 80015fc:	4002      	ands	r2, r0
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	0192      	lsls	r2, r2, #6
 8001602:	0a54      	lsrs	r4, r2, #9
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	e7e3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001608:	0002      	movs	r2, r0
 800160a:	0020      	movs	r0, r4
 800160c:	321b      	adds	r2, #27
 800160e:	4090      	lsls	r0, r2
 8001610:	0002      	movs	r2, r0
 8001612:	1e50      	subs	r0, r2, #1
 8001614:	4182      	sbcs	r2, r0
 8001616:	2005      	movs	r0, #5
 8001618:	1a40      	subs	r0, r0, r1
 800161a:	40c4      	lsrs	r4, r0
 800161c:	4314      	orrs	r4, r2
 800161e:	e7e0      	b.n	80015e2 <__aeabi_ui2f+0x3a>
 8001620:	0264      	lsls	r4, r4, #9
 8001622:	2096      	movs	r0, #150	@ 0x96
 8001624:	0a64      	lsrs	r4, r4, #9
 8001626:	e7d3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001628:	fbffffff 	.word	0xfbffffff

0800162c <__aeabi_dadd>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4657      	mov	r7, sl
 8001630:	464e      	mov	r6, r9
 8001632:	4645      	mov	r5, r8
 8001634:	46de      	mov	lr, fp
 8001636:	b5e0      	push	{r5, r6, r7, lr}
 8001638:	b083      	sub	sp, #12
 800163a:	9000      	str	r0, [sp, #0]
 800163c:	9101      	str	r1, [sp, #4]
 800163e:	030c      	lsls	r4, r1, #12
 8001640:	004f      	lsls	r7, r1, #1
 8001642:	0fce      	lsrs	r6, r1, #31
 8001644:	0a61      	lsrs	r1, r4, #9
 8001646:	9c00      	ldr	r4, [sp, #0]
 8001648:	031d      	lsls	r5, r3, #12
 800164a:	0f64      	lsrs	r4, r4, #29
 800164c:	430c      	orrs	r4, r1
 800164e:	9900      	ldr	r1, [sp, #0]
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	00c8      	lsls	r0, r1, #3
 8001656:	0059      	lsls	r1, r3, #1
 8001658:	0d4b      	lsrs	r3, r1, #21
 800165a:	4699      	mov	r9, r3
 800165c:	9a00      	ldr	r2, [sp, #0]
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	0fd9      	lsrs	r1, r3, #31
 8001664:	0f53      	lsrs	r3, r2, #29
 8001666:	432b      	orrs	r3, r5
 8001668:	469a      	mov	sl, r3
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	0d7f      	lsrs	r7, r7, #21
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4694      	mov	ip, r2
 8001672:	464a      	mov	r2, r9
 8001674:	46b0      	mov	r8, r6
 8001676:	1aba      	subs	r2, r7, r2
 8001678:	428e      	cmp	r6, r1
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x52>
 800167c:	e0b0      	b.n	80017e0 <__aeabi_dadd+0x1b4>
 800167e:	2a00      	cmp	r2, #0
 8001680:	dc00      	bgt.n	8001684 <__aeabi_dadd+0x58>
 8001682:	e078      	b.n	8001776 <__aeabi_dadd+0x14a>
 8001684:	4649      	mov	r1, r9
 8001686:	2900      	cmp	r1, #0
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x60>
 800168a:	e0e9      	b.n	8001860 <__aeabi_dadd+0x234>
 800168c:	49c9      	ldr	r1, [pc, #804]	@ (80019b4 <__aeabi_dadd+0x388>)
 800168e:	428f      	cmp	r7, r1
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x68>
 8001692:	e195      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001694:	2501      	movs	r5, #1
 8001696:	2a38      	cmp	r2, #56	@ 0x38
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_dadd+0x9c>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	4653      	mov	r3, sl
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	430b      	orrs	r3, r1
 80016a2:	469a      	mov	sl, r3
 80016a4:	2a1f      	cmp	r2, #31
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dadd+0x7e>
 80016a8:	e1e7      	b.n	8001a7a <__aeabi_dadd+0x44e>
 80016aa:	2120      	movs	r1, #32
 80016ac:	4655      	mov	r5, sl
 80016ae:	1a8b      	subs	r3, r1, r2
 80016b0:	4661      	mov	r1, ip
 80016b2:	409d      	lsls	r5, r3
 80016b4:	40d1      	lsrs	r1, r2
 80016b6:	430d      	orrs	r5, r1
 80016b8:	4661      	mov	r1, ip
 80016ba:	4099      	lsls	r1, r3
 80016bc:	1e4b      	subs	r3, r1, #1
 80016be:	4199      	sbcs	r1, r3
 80016c0:	4653      	mov	r3, sl
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	430d      	orrs	r5, r1
 80016c6:	1ae4      	subs	r4, r4, r3
 80016c8:	1b45      	subs	r5, r0, r5
 80016ca:	42a8      	cmp	r0, r5
 80016cc:	4180      	sbcs	r0, r0
 80016ce:	4240      	negs	r0, r0
 80016d0:	1a24      	subs	r4, r4, r0
 80016d2:	0223      	lsls	r3, r4, #8
 80016d4:	d400      	bmi.n	80016d8 <__aeabi_dadd+0xac>
 80016d6:	e10f      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 80016d8:	0264      	lsls	r4, r4, #9
 80016da:	0a64      	lsrs	r4, r4, #9
 80016dc:	2c00      	cmp	r4, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0xb6>
 80016e0:	e139      	b.n	8001956 <__aeabi_dadd+0x32a>
 80016e2:	0020      	movs	r0, r4
 80016e4:	f001 ff2a 	bl	800353c <__clzsi2>
 80016e8:	0003      	movs	r3, r0
 80016ea:	3b08      	subs	r3, #8
 80016ec:	2120      	movs	r1, #32
 80016ee:	0028      	movs	r0, r5
 80016f0:	1aca      	subs	r2, r1, r3
 80016f2:	40d0      	lsrs	r0, r2
 80016f4:	409c      	lsls	r4, r3
 80016f6:	0002      	movs	r2, r0
 80016f8:	409d      	lsls	r5, r3
 80016fa:	4322      	orrs	r2, r4
 80016fc:	429f      	cmp	r7, r3
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dadd+0xd6>
 8001700:	e173      	b.n	80019ea <__aeabi_dadd+0x3be>
 8001702:	1bd8      	subs	r0, r3, r7
 8001704:	3001      	adds	r0, #1
 8001706:	1a09      	subs	r1, r1, r0
 8001708:	002c      	movs	r4, r5
 800170a:	408d      	lsls	r5, r1
 800170c:	40c4      	lsrs	r4, r0
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	0013      	movs	r3, r2
 8001714:	40c2      	lsrs	r2, r0
 8001716:	408b      	lsls	r3, r1
 8001718:	4325      	orrs	r5, r4
 800171a:	2700      	movs	r7, #0
 800171c:	0014      	movs	r4, r2
 800171e:	431d      	orrs	r5, r3
 8001720:	076b      	lsls	r3, r5, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dadd+0x10c>
 8001724:	230f      	movs	r3, #15
 8001726:	402b      	ands	r3, r5
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dadd+0x10c>
 800172c:	1d2b      	adds	r3, r5, #4
 800172e:	42ab      	cmp	r3, r5
 8001730:	41ad      	sbcs	r5, r5
 8001732:	426d      	negs	r5, r5
 8001734:	1964      	adds	r4, r4, r5
 8001736:	001d      	movs	r5, r3
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d400      	bmi.n	800173e <__aeabi_dadd+0x112>
 800173c:	e12d      	b.n	800199a <__aeabi_dadd+0x36e>
 800173e:	4a9d      	ldr	r2, [pc, #628]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001740:	3701      	adds	r7, #1
 8001742:	4297      	cmp	r7, r2
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x11c>
 8001746:	e0d3      	b.n	80018f0 <__aeabi_dadd+0x2c4>
 8001748:	4646      	mov	r6, r8
 800174a:	499b      	ldr	r1, [pc, #620]	@ (80019b8 <__aeabi_dadd+0x38c>)
 800174c:	08ed      	lsrs	r5, r5, #3
 800174e:	4021      	ands	r1, r4
 8001750:	074a      	lsls	r2, r1, #29
 8001752:	432a      	orrs	r2, r5
 8001754:	057c      	lsls	r4, r7, #21
 8001756:	024d      	lsls	r5, r1, #9
 8001758:	0b2d      	lsrs	r5, r5, #12
 800175a:	0d64      	lsrs	r4, r4, #21
 800175c:	0524      	lsls	r4, r4, #20
 800175e:	432c      	orrs	r4, r5
 8001760:	07f6      	lsls	r6, r6, #31
 8001762:	4334      	orrs	r4, r6
 8001764:	0010      	movs	r0, r2
 8001766:	0021      	movs	r1, r4
 8001768:	b003      	add	sp, #12
 800176a:	bcf0      	pop	{r4, r5, r6, r7}
 800176c:	46bb      	mov	fp, r7
 800176e:	46b2      	mov	sl, r6
 8001770:	46a9      	mov	r9, r5
 8001772:	46a0      	mov	r8, r4
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	2a00      	cmp	r2, #0
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x150>
 800177a:	e084      	b.n	8001886 <__aeabi_dadd+0x25a>
 800177c:	464a      	mov	r2, r9
 800177e:	1bd2      	subs	r2, r2, r7
 8001780:	2f00      	cmp	r7, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x15a>
 8001784:	e16d      	b.n	8001a62 <__aeabi_dadd+0x436>
 8001786:	0025      	movs	r5, r4
 8001788:	4305      	orrs	r5, r0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x162>
 800178c:	e127      	b.n	80019de <__aeabi_dadd+0x3b2>
 800178e:	1e56      	subs	r6, r2, #1
 8001790:	2a01      	cmp	r2, #1
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x16a>
 8001794:	e23b      	b.n	8001c0e <__aeabi_dadd+0x5e2>
 8001796:	4d87      	ldr	r5, [pc, #540]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001798:	42aa      	cmp	r2, r5
 800179a:	d100      	bne.n	800179e <__aeabi_dadd+0x172>
 800179c:	e26a      	b.n	8001c74 <__aeabi_dadd+0x648>
 800179e:	2501      	movs	r5, #1
 80017a0:	2e38      	cmp	r6, #56	@ 0x38
 80017a2:	dc12      	bgt.n	80017ca <__aeabi_dadd+0x19e>
 80017a4:	0032      	movs	r2, r6
 80017a6:	2a1f      	cmp	r2, #31
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dadd+0x180>
 80017aa:	e1f8      	b.n	8001b9e <__aeabi_dadd+0x572>
 80017ac:	2620      	movs	r6, #32
 80017ae:	0025      	movs	r5, r4
 80017b0:	1ab6      	subs	r6, r6, r2
 80017b2:	0007      	movs	r7, r0
 80017b4:	4653      	mov	r3, sl
 80017b6:	40b0      	lsls	r0, r6
 80017b8:	40d4      	lsrs	r4, r2
 80017ba:	40b5      	lsls	r5, r6
 80017bc:	40d7      	lsrs	r7, r2
 80017be:	1e46      	subs	r6, r0, #1
 80017c0:	41b0      	sbcs	r0, r6
 80017c2:	1b1b      	subs	r3, r3, r4
 80017c4:	469a      	mov	sl, r3
 80017c6:	433d      	orrs	r5, r7
 80017c8:	4305      	orrs	r5, r0
 80017ca:	4662      	mov	r2, ip
 80017cc:	1b55      	subs	r5, r2, r5
 80017ce:	45ac      	cmp	ip, r5
 80017d0:	4192      	sbcs	r2, r2
 80017d2:	4653      	mov	r3, sl
 80017d4:	4252      	negs	r2, r2
 80017d6:	000e      	movs	r6, r1
 80017d8:	464f      	mov	r7, r9
 80017da:	4688      	mov	r8, r1
 80017dc:	1a9c      	subs	r4, r3, r2
 80017de:	e778      	b.n	80016d2 <__aeabi_dadd+0xa6>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dadd+0x1ba>
 80017e4:	e08e      	b.n	8001904 <__aeabi_dadd+0x2d8>
 80017e6:	4649      	mov	r1, r9
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d175      	bne.n	80018d8 <__aeabi_dadd+0x2ac>
 80017ec:	4661      	mov	r1, ip
 80017ee:	4653      	mov	r3, sl
 80017f0:	4319      	orrs	r1, r3
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x1ca>
 80017f4:	e0f6      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 80017f6:	1e51      	subs	r1, r2, #1
 80017f8:	2a01      	cmp	r2, #1
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x1d2>
 80017fc:	e191      	b.n	8001b22 <__aeabi_dadd+0x4f6>
 80017fe:	4d6d      	ldr	r5, [pc, #436]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001800:	42aa      	cmp	r2, r5
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x1da>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001806:	2501      	movs	r5, #1
 8001808:	2938      	cmp	r1, #56	@ 0x38
 800180a:	dc14      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 800180c:	000a      	movs	r2, r1
 800180e:	2a1f      	cmp	r2, #31
 8001810:	dd00      	ble.n	8001814 <__aeabi_dadd+0x1e8>
 8001812:	e1a2      	b.n	8001b5a <__aeabi_dadd+0x52e>
 8001814:	2120      	movs	r1, #32
 8001816:	4653      	mov	r3, sl
 8001818:	1a89      	subs	r1, r1, r2
 800181a:	408b      	lsls	r3, r1
 800181c:	001d      	movs	r5, r3
 800181e:	4663      	mov	r3, ip
 8001820:	40d3      	lsrs	r3, r2
 8001822:	431d      	orrs	r5, r3
 8001824:	4663      	mov	r3, ip
 8001826:	408b      	lsls	r3, r1
 8001828:	0019      	movs	r1, r3
 800182a:	1e4b      	subs	r3, r1, #1
 800182c:	4199      	sbcs	r1, r3
 800182e:	4653      	mov	r3, sl
 8001830:	40d3      	lsrs	r3, r2
 8001832:	430d      	orrs	r5, r1
 8001834:	18e4      	adds	r4, r4, r3
 8001836:	182d      	adds	r5, r5, r0
 8001838:	4285      	cmp	r5, r0
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1824      	adds	r4, r4, r0
 8001840:	0223      	lsls	r3, r4, #8
 8001842:	d559      	bpl.n	80018f8 <__aeabi_dadd+0x2cc>
 8001844:	4b5b      	ldr	r3, [pc, #364]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001846:	3701      	adds	r7, #1
 8001848:	429f      	cmp	r7, r3
 800184a:	d051      	beq.n	80018f0 <__aeabi_dadd+0x2c4>
 800184c:	2101      	movs	r1, #1
 800184e:	4b5a      	ldr	r3, [pc, #360]	@ (80019b8 <__aeabi_dadd+0x38c>)
 8001850:	086a      	lsrs	r2, r5, #1
 8001852:	401c      	ands	r4, r3
 8001854:	4029      	ands	r1, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	07e5      	lsls	r5, r4, #31
 800185a:	4315      	orrs	r5, r2
 800185c:	0864      	lsrs	r4, r4, #1
 800185e:	e75f      	b.n	8001720 <__aeabi_dadd+0xf4>
 8001860:	4661      	mov	r1, ip
 8001862:	4653      	mov	r3, sl
 8001864:	4319      	orrs	r1, r3
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x23e>
 8001868:	e0bc      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 800186a:	1e51      	subs	r1, r2, #1
 800186c:	2a01      	cmp	r2, #1
 800186e:	d100      	bne.n	8001872 <__aeabi_dadd+0x246>
 8001870:	e164      	b.n	8001b3c <__aeabi_dadd+0x510>
 8001872:	4d50      	ldr	r5, [pc, #320]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001874:	42aa      	cmp	r2, r5
 8001876:	d100      	bne.n	800187a <__aeabi_dadd+0x24e>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dadd+0x524>
 800187a:	2501      	movs	r5, #1
 800187c:	2938      	cmp	r1, #56	@ 0x38
 800187e:	dd00      	ble.n	8001882 <__aeabi_dadd+0x256>
 8001880:	e722      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001882:	000a      	movs	r2, r1
 8001884:	e70e      	b.n	80016a4 <__aeabi_dadd+0x78>
 8001886:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <__aeabi_dadd+0x390>)
 8001888:	1c7d      	adds	r5, r7, #1
 800188a:	4215      	tst	r5, r2
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x264>
 800188e:	e0d0      	b.n	8001a32 <__aeabi_dadd+0x406>
 8001890:	0025      	movs	r5, r4
 8001892:	4662      	mov	r2, ip
 8001894:	4653      	mov	r3, sl
 8001896:	4305      	orrs	r5, r0
 8001898:	431a      	orrs	r2, r3
 800189a:	2f00      	cmp	r7, #0
 800189c:	d000      	beq.n	80018a0 <__aeabi_dadd+0x274>
 800189e:	e137      	b.n	8001b10 <__aeabi_dadd+0x4e4>
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x27a>
 80018a4:	e1a8      	b.n	8001bf8 <__aeabi_dadd+0x5cc>
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x280>
 80018aa:	e16a      	b.n	8001b82 <__aeabi_dadd+0x556>
 80018ac:	4663      	mov	r3, ip
 80018ae:	1ac5      	subs	r5, r0, r3
 80018b0:	4653      	mov	r3, sl
 80018b2:	1ae2      	subs	r2, r4, r3
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	419b      	sbcs	r3, r3
 80018b8:	425b      	negs	r3, r3
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dadd+0x296>
 80018c0:	e203      	b.n	8001cca <__aeabi_dadd+0x69e>
 80018c2:	4663      	mov	r3, ip
 80018c4:	1a1d      	subs	r5, r3, r0
 80018c6:	45ac      	cmp	ip, r5
 80018c8:	4192      	sbcs	r2, r2
 80018ca:	4653      	mov	r3, sl
 80018cc:	4252      	negs	r2, r2
 80018ce:	1b1c      	subs	r4, r3, r4
 80018d0:	000e      	movs	r6, r1
 80018d2:	4688      	mov	r8, r1
 80018d4:	1aa4      	subs	r4, r4, r2
 80018d6:	e723      	b.n	8001720 <__aeabi_dadd+0xf4>
 80018d8:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <__aeabi_dadd+0x388>)
 80018da:	428f      	cmp	r7, r1
 80018dc:	d070      	beq.n	80019c0 <__aeabi_dadd+0x394>
 80018de:	2501      	movs	r5, #1
 80018e0:	2a38      	cmp	r2, #56	@ 0x38
 80018e2:	dca8      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	4653      	mov	r3, sl
 80018e8:	0409      	lsls	r1, r1, #16
 80018ea:	430b      	orrs	r3, r1
 80018ec:	469a      	mov	sl, r3
 80018ee:	e78e      	b.n	800180e <__aeabi_dadd+0x1e2>
 80018f0:	003c      	movs	r4, r7
 80018f2:	2500      	movs	r5, #0
 80018f4:	2200      	movs	r2, #0
 80018f6:	e731      	b.n	800175c <__aeabi_dadd+0x130>
 80018f8:	2307      	movs	r3, #7
 80018fa:	402b      	ands	r3, r5
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dadd+0x2d6>
 8001900:	e710      	b.n	8001724 <__aeabi_dadd+0xf8>
 8001902:	e093      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001904:	2a00      	cmp	r2, #0
 8001906:	d074      	beq.n	80019f2 <__aeabi_dadd+0x3c6>
 8001908:	464a      	mov	r2, r9
 800190a:	1bd2      	subs	r2, r2, r7
 800190c:	2f00      	cmp	r7, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x2e6>
 8001910:	e0c7      	b.n	8001aa2 <__aeabi_dadd+0x476>
 8001912:	4928      	ldr	r1, [pc, #160]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001914:	4589      	cmp	r9, r1
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x2ee>
 8001918:	e185      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 800191a:	2501      	movs	r5, #1
 800191c:	2a38      	cmp	r2, #56	@ 0x38
 800191e:	dc12      	bgt.n	8001946 <__aeabi_dadd+0x31a>
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	0409      	lsls	r1, r1, #16
 8001924:	430c      	orrs	r4, r1
 8001926:	2a1f      	cmp	r2, #31
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0x300>
 800192a:	e1ab      	b.n	8001c84 <__aeabi_dadd+0x658>
 800192c:	2120      	movs	r1, #32
 800192e:	0025      	movs	r5, r4
 8001930:	1a89      	subs	r1, r1, r2
 8001932:	0007      	movs	r7, r0
 8001934:	4088      	lsls	r0, r1
 8001936:	408d      	lsls	r5, r1
 8001938:	40d7      	lsrs	r7, r2
 800193a:	1e41      	subs	r1, r0, #1
 800193c:	4188      	sbcs	r0, r1
 800193e:	40d4      	lsrs	r4, r2
 8001940:	433d      	orrs	r5, r7
 8001942:	4305      	orrs	r5, r0
 8001944:	44a2      	add	sl, r4
 8001946:	4465      	add	r5, ip
 8001948:	4565      	cmp	r5, ip
 800194a:	4192      	sbcs	r2, r2
 800194c:	4252      	negs	r2, r2
 800194e:	4452      	add	r2, sl
 8001950:	0014      	movs	r4, r2
 8001952:	464f      	mov	r7, r9
 8001954:	e774      	b.n	8001840 <__aeabi_dadd+0x214>
 8001956:	0028      	movs	r0, r5
 8001958:	f001 fdf0 	bl	800353c <__clzsi2>
 800195c:	0003      	movs	r3, r0
 800195e:	3318      	adds	r3, #24
 8001960:	2b1f      	cmp	r3, #31
 8001962:	dc00      	bgt.n	8001966 <__aeabi_dadd+0x33a>
 8001964:	e6c2      	b.n	80016ec <__aeabi_dadd+0xc0>
 8001966:	002a      	movs	r2, r5
 8001968:	3808      	subs	r0, #8
 800196a:	4082      	lsls	r2, r0
 800196c:	429f      	cmp	r7, r3
 800196e:	dd00      	ble.n	8001972 <__aeabi_dadd+0x346>
 8001970:	e0a9      	b.n	8001ac6 <__aeabi_dadd+0x49a>
 8001972:	1bdb      	subs	r3, r3, r7
 8001974:	1c58      	adds	r0, r3, #1
 8001976:	281f      	cmp	r0, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_dadd+0x350>
 800197a:	e1ac      	b.n	8001cd6 <__aeabi_dadd+0x6aa>
 800197c:	0015      	movs	r5, r2
 800197e:	3b1f      	subs	r3, #31
 8001980:	40dd      	lsrs	r5, r3
 8001982:	2820      	cmp	r0, #32
 8001984:	d005      	beq.n	8001992 <__aeabi_dadd+0x366>
 8001986:	2340      	movs	r3, #64	@ 0x40
 8001988:	1a1b      	subs	r3, r3, r0
 800198a:	409a      	lsls	r2, r3
 800198c:	1e53      	subs	r3, r2, #1
 800198e:	419a      	sbcs	r2, r3
 8001990:	4315      	orrs	r5, r2
 8001992:	2307      	movs	r3, #7
 8001994:	2700      	movs	r7, #0
 8001996:	402b      	ands	r3, r5
 8001998:	e7b0      	b.n	80018fc <__aeabi_dadd+0x2d0>
 800199a:	08ed      	lsrs	r5, r5, #3
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <__aeabi_dadd+0x388>)
 800199e:	0762      	lsls	r2, r4, #29
 80019a0:	432a      	orrs	r2, r5
 80019a2:	08e4      	lsrs	r4, r4, #3
 80019a4:	429f      	cmp	r7, r3
 80019a6:	d00f      	beq.n	80019c8 <__aeabi_dadd+0x39c>
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	0b25      	lsrs	r5, r4, #12
 80019ac:	057c      	lsls	r4, r7, #21
 80019ae:	0d64      	lsrs	r4, r4, #21
 80019b0:	e6d4      	b.n	800175c <__aeabi_dadd+0x130>
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	ff7fffff 	.word	0xff7fffff
 80019bc:	000007fe 	.word	0x000007fe
 80019c0:	08c0      	lsrs	r0, r0, #3
 80019c2:	0762      	lsls	r2, r4, #29
 80019c4:	4302      	orrs	r2, r0
 80019c6:	08e4      	lsrs	r4, r4, #3
 80019c8:	0013      	movs	r3, r2
 80019ca:	4323      	orrs	r3, r4
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3a4>
 80019ce:	e186      	b.n	8001cde <__aeabi_dadd+0x6b2>
 80019d0:	2580      	movs	r5, #128	@ 0x80
 80019d2:	032d      	lsls	r5, r5, #12
 80019d4:	4325      	orrs	r5, r4
 80019d6:	032d      	lsls	r5, r5, #12
 80019d8:	4cc3      	ldr	r4, [pc, #780]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 80019da:	0b2d      	lsrs	r5, r5, #12
 80019dc:	e6be      	b.n	800175c <__aeabi_dadd+0x130>
 80019de:	4660      	mov	r0, ip
 80019e0:	4654      	mov	r4, sl
 80019e2:	000e      	movs	r6, r1
 80019e4:	0017      	movs	r7, r2
 80019e6:	08c5      	lsrs	r5, r0, #3
 80019e8:	e7d8      	b.n	800199c <__aeabi_dadd+0x370>
 80019ea:	4cc0      	ldr	r4, [pc, #768]	@ (8001cec <__aeabi_dadd+0x6c0>)
 80019ec:	1aff      	subs	r7, r7, r3
 80019ee:	4014      	ands	r4, r2
 80019f0:	e696      	b.n	8001720 <__aeabi_dadd+0xf4>
 80019f2:	4abf      	ldr	r2, [pc, #764]	@ (8001cf0 <__aeabi_dadd+0x6c4>)
 80019f4:	1c79      	adds	r1, r7, #1
 80019f6:	4211      	tst	r1, r2
 80019f8:	d16b      	bne.n	8001ad2 <__aeabi_dadd+0x4a6>
 80019fa:	0022      	movs	r2, r4
 80019fc:	4302      	orrs	r2, r0
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dadd+0x3d8>
 8001a02:	e0db      	b.n	8001bbc <__aeabi_dadd+0x590>
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x3de>
 8001a08:	e12d      	b.n	8001c66 <__aeabi_dadd+0x63a>
 8001a0a:	4662      	mov	r2, ip
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x3e8>
 8001a12:	e0b6      	b.n	8001b82 <__aeabi_dadd+0x556>
 8001a14:	4663      	mov	r3, ip
 8001a16:	18c5      	adds	r5, r0, r3
 8001a18:	4285      	cmp	r5, r0
 8001a1a:	4180      	sbcs	r0, r0
 8001a1c:	4454      	add	r4, sl
 8001a1e:	4240      	negs	r0, r0
 8001a20:	1824      	adds	r4, r4, r0
 8001a22:	0223      	lsls	r3, r4, #8
 8001a24:	d502      	bpl.n	8001a2c <__aeabi_dadd+0x400>
 8001a26:	000f      	movs	r7, r1
 8001a28:	4bb0      	ldr	r3, [pc, #704]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001a2a:	401c      	ands	r4, r3
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	0028      	movs	r0, r5
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001a32:	4662      	mov	r2, ip
 8001a34:	1a85      	subs	r5, r0, r2
 8001a36:	42a8      	cmp	r0, r5
 8001a38:	4192      	sbcs	r2, r2
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	4691      	mov	r9, r2
 8001a40:	1ae3      	subs	r3, r4, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	d454      	bmi.n	8001afa <__aeabi_dadd+0x4ce>
 8001a50:	464a      	mov	r2, r9
 8001a52:	464c      	mov	r4, r9
 8001a54:	432a      	orrs	r2, r5
 8001a56:	d000      	beq.n	8001a5a <__aeabi_dadd+0x42e>
 8001a58:	e640      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2500      	movs	r5, #0
 8001a60:	e67c      	b.n	800175c <__aeabi_dadd+0x130>
 8001a62:	4da1      	ldr	r5, [pc, #644]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001a64:	45a9      	cmp	r9, r5
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x43e>
 8001a68:	e090      	b.n	8001b8c <__aeabi_dadd+0x560>
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	2a38      	cmp	r2, #56	@ 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dadd+0x446>
 8001a70:	e6ab      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001a72:	2580      	movs	r5, #128	@ 0x80
 8001a74:	042d      	lsls	r5, r5, #16
 8001a76:	432c      	orrs	r4, r5
 8001a78:	e695      	b.n	80017a6 <__aeabi_dadd+0x17a>
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	4655      	mov	r5, sl
 8001a7e:	3920      	subs	r1, #32
 8001a80:	40cd      	lsrs	r5, r1
 8001a82:	46a9      	mov	r9, r5
 8001a84:	2a20      	cmp	r2, #32
 8001a86:	d006      	beq.n	8001a96 <__aeabi_dadd+0x46a>
 8001a88:	2140      	movs	r1, #64	@ 0x40
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	1a8a      	subs	r2, r1, r2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	4662      	mov	r2, ip
 8001a92:	431a      	orrs	r2, r3
 8001a94:	4694      	mov	ip, r2
 8001a96:	4665      	mov	r5, ip
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	419d      	sbcs	r5, r3
 8001a9c:	464b      	mov	r3, r9
 8001a9e:	431d      	orrs	r5, r3
 8001aa0:	e612      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x47e>
 8001aa8:	e0c4      	b.n	8001c34 <__aeabi_dadd+0x608>
 8001aaa:	1e51      	subs	r1, r2, #1
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x486>
 8001ab0:	e0fb      	b.n	8001caa <__aeabi_dadd+0x67e>
 8001ab2:	4d8d      	ldr	r5, [pc, #564]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ab4:	42aa      	cmp	r2, r5
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dadd+0x48e>
 8001ab8:	e0b5      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 8001aba:	2501      	movs	r5, #1
 8001abc:	2938      	cmp	r1, #56	@ 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dadd+0x496>
 8001ac0:	e741      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	e72f      	b.n	8001926 <__aeabi_dadd+0x2fa>
 8001ac6:	4c89      	ldr	r4, [pc, #548]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001ac8:	1aff      	subs	r7, r7, r3
 8001aca:	4014      	ands	r4, r2
 8001acc:	0762      	lsls	r2, r4, #29
 8001ace:	08e4      	lsrs	r4, r4, #3
 8001ad0:	e76a      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001ad2:	4a85      	ldr	r2, [pc, #532]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ad4:	4291      	cmp	r1, r2
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dadd+0x4ae>
 8001ad8:	e0e3      	b.n	8001ca2 <__aeabi_dadd+0x676>
 8001ada:	4663      	mov	r3, ip
 8001adc:	18c2      	adds	r2, r0, r3
 8001ade:	4282      	cmp	r2, r0
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	0023      	movs	r3, r4
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	4453      	add	r3, sl
 8001ae8:	181b      	adds	r3, r3, r0
 8001aea:	07dd      	lsls	r5, r3, #31
 8001aec:	085c      	lsrs	r4, r3, #1
 8001aee:	2307      	movs	r3, #7
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	4315      	orrs	r5, r2
 8001af4:	000f      	movs	r7, r1
 8001af6:	402b      	ands	r3, r5
 8001af8:	e700      	b.n	80018fc <__aeabi_dadd+0x2d0>
 8001afa:	4663      	mov	r3, ip
 8001afc:	1a1d      	subs	r5, r3, r0
 8001afe:	45ac      	cmp	ip, r5
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	4653      	mov	r3, sl
 8001b04:	4252      	negs	r2, r2
 8001b06:	1b1c      	subs	r4, r3, r4
 8001b08:	000e      	movs	r6, r1
 8001b0a:	4688      	mov	r8, r1
 8001b0c:	1aa4      	subs	r4, r4, r2
 8001b0e:	e5e5      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001b10:	2d00      	cmp	r5, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dadd+0x4ea>
 8001b14:	e091      	b.n	8001c3a <__aeabi_dadd+0x60e>
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d138      	bne.n	8001b8c <__aeabi_dadd+0x560>
 8001b1a:	2480      	movs	r4, #128	@ 0x80
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	e756      	b.n	80019d0 <__aeabi_dadd+0x3a4>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c5      	adds	r5, r0, r3
 8001b26:	4285      	cmp	r5, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4454      	add	r4, sl
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	1824      	adds	r4, r4, r0
 8001b30:	2701      	movs	r7, #1
 8001b32:	0223      	lsls	r3, r4, #8
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dadd+0x50c>
 8001b36:	e6df      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 8001b38:	2702      	movs	r7, #2
 8001b3a:	e687      	b.n	800184c <__aeabi_dadd+0x220>
 8001b3c:	4663      	mov	r3, ip
 8001b3e:	1ac5      	subs	r5, r0, r3
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	4653      	mov	r3, sl
 8001b46:	4240      	negs	r0, r0
 8001b48:	1ae4      	subs	r4, r4, r3
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	1a24      	subs	r4, r4, r0
 8001b4e:	e5c0      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001b50:	0762      	lsls	r2, r4, #29
 8001b52:	08c0      	lsrs	r0, r0, #3
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08e4      	lsrs	r4, r4, #3
 8001b58:	e736      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	4653      	mov	r3, sl
 8001b5e:	3920      	subs	r1, #32
 8001b60:	40cb      	lsrs	r3, r1
 8001b62:	4699      	mov	r9, r3
 8001b64:	2a20      	cmp	r2, #32
 8001b66:	d006      	beq.n	8001b76 <__aeabi_dadd+0x54a>
 8001b68:	2140      	movs	r1, #64	@ 0x40
 8001b6a:	4653      	mov	r3, sl
 8001b6c:	1a8a      	subs	r2, r1, r2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	4662      	mov	r2, ip
 8001b72:	431a      	orrs	r2, r3
 8001b74:	4694      	mov	ip, r2
 8001b76:	4665      	mov	r5, ip
 8001b78:	1e6b      	subs	r3, r5, #1
 8001b7a:	419d      	sbcs	r5, r3
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	431d      	orrs	r5, r3
 8001b80:	e659      	b.n	8001836 <__aeabi_dadd+0x20a>
 8001b82:	0762      	lsls	r2, r4, #29
 8001b84:	08c0      	lsrs	r0, r0, #3
 8001b86:	4302      	orrs	r2, r0
 8001b88:	08e4      	lsrs	r4, r4, #3
 8001b8a:	e70d      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	075a      	lsls	r2, r3, #29
 8001b90:	4663      	mov	r3, ip
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	4653      	mov	r3, sl
 8001b96:	000e      	movs	r6, r1
 8001b98:	4302      	orrs	r2, r0
 8001b9a:	08dc      	lsrs	r4, r3, #3
 8001b9c:	e714      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	0026      	movs	r6, r4
 8001ba2:	3d20      	subs	r5, #32
 8001ba4:	40ee      	lsrs	r6, r5
 8001ba6:	2a20      	cmp	r2, #32
 8001ba8:	d003      	beq.n	8001bb2 <__aeabi_dadd+0x586>
 8001baa:	2540      	movs	r5, #64	@ 0x40
 8001bac:	1aaa      	subs	r2, r5, r2
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4320      	orrs	r0, r4
 8001bb2:	1e42      	subs	r2, r0, #1
 8001bb4:	4190      	sbcs	r0, r2
 8001bb6:	0005      	movs	r5, r0
 8001bb8:	4335      	orrs	r5, r6
 8001bba:	e606      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d07c      	beq.n	8001cba <__aeabi_dadd+0x68e>
 8001bc0:	4662      	mov	r2, ip
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dadd+0x5a0>
 8001bca:	e6fa      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001bcc:	0762      	lsls	r2, r4, #29
 8001bce:	4310      	orrs	r0, r2
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	08e4      	lsrs	r4, r4, #3
 8001bd4:	0312      	lsls	r2, r2, #12
 8001bd6:	4214      	tst	r4, r2
 8001bd8:	d008      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001bda:	08d9      	lsrs	r1, r3, #3
 8001bdc:	4211      	tst	r1, r2
 8001bde:	d105      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001be0:	4663      	mov	r3, ip
 8001be2:	08d8      	lsrs	r0, r3, #3
 8001be4:	4653      	mov	r3, sl
 8001be6:	000c      	movs	r4, r1
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	4318      	orrs	r0, r3
 8001bec:	0f42      	lsrs	r2, r0, #29
 8001bee:	00c0      	lsls	r0, r0, #3
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	e6e7      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x5d2>
 8001bfc:	e72d      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001bfe:	4663      	mov	r3, ip
 8001c00:	08d8      	lsrs	r0, r3, #3
 8001c02:	4653      	mov	r3, sl
 8001c04:	075a      	lsls	r2, r3, #29
 8001c06:	000e      	movs	r6, r1
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	08dc      	lsrs	r4, r3, #3
 8001c0c:	e6cc      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c0e:	4663      	mov	r3, ip
 8001c10:	1a1d      	subs	r5, r3, r0
 8001c12:	45ac      	cmp	ip, r5
 8001c14:	4192      	sbcs	r2, r2
 8001c16:	4653      	mov	r3, sl
 8001c18:	4252      	negs	r2, r2
 8001c1a:	1b1c      	subs	r4, r3, r4
 8001c1c:	000e      	movs	r6, r1
 8001c1e:	4688      	mov	r8, r1
 8001c20:	1aa4      	subs	r4, r4, r2
 8001c22:	3701      	adds	r7, #1
 8001c24:	e555      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001c26:	4663      	mov	r3, ip
 8001c28:	08d9      	lsrs	r1, r3, #3
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	075a      	lsls	r2, r3, #29
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	08dc      	lsrs	r4, r3, #3
 8001c32:	e6c9      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c34:	4660      	mov	r0, ip
 8001c36:	4654      	mov	r4, sl
 8001c38:	e6d4      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001c3a:	08c0      	lsrs	r0, r0, #3
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dadd+0x616>
 8001c40:	e6bf      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	4310      	orrs	r0, r2
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	0312      	lsls	r2, r2, #12
 8001c4c:	4214      	tst	r4, r2
 8001c4e:	d0cd      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001c50:	08dd      	lsrs	r5, r3, #3
 8001c52:	4215      	tst	r5, r2
 8001c54:	d1ca      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001c56:	4663      	mov	r3, ip
 8001c58:	08d8      	lsrs	r0, r3, #3
 8001c5a:	4653      	mov	r3, sl
 8001c5c:	075b      	lsls	r3, r3, #29
 8001c5e:	000e      	movs	r6, r1
 8001c60:	002c      	movs	r4, r5
 8001c62:	4318      	orrs	r0, r3
 8001c64:	e7c2      	b.n	8001bec <__aeabi_dadd+0x5c0>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e699      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c74:	4663      	mov	r3, ip
 8001c76:	08d8      	lsrs	r0, r3, #3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	075a      	lsls	r2, r3, #29
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	08dc      	lsrs	r4, r3, #3
 8001c82:	e6a1      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c84:	0011      	movs	r1, r2
 8001c86:	0027      	movs	r7, r4
 8001c88:	3920      	subs	r1, #32
 8001c8a:	40cf      	lsrs	r7, r1
 8001c8c:	2a20      	cmp	r2, #32
 8001c8e:	d003      	beq.n	8001c98 <__aeabi_dadd+0x66c>
 8001c90:	2140      	movs	r1, #64	@ 0x40
 8001c92:	1a8a      	subs	r2, r1, r2
 8001c94:	4094      	lsls	r4, r2
 8001c96:	4320      	orrs	r0, r4
 8001c98:	1e42      	subs	r2, r0, #1
 8001c9a:	4190      	sbcs	r0, r2
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	433d      	orrs	r5, r7
 8001ca0:	e651      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ca2:	000c      	movs	r4, r1
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	e558      	b.n	800175c <__aeabi_dadd+0x130>
 8001caa:	4460      	add	r0, ip
 8001cac:	4560      	cmp	r0, ip
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	4454      	add	r4, sl
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	18a4      	adds	r4, r4, r2
 8001cb8:	e73a      	b.n	8001b30 <__aeabi_dadd+0x504>
 8001cba:	4653      	mov	r3, sl
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08dc      	lsrs	r4, r3, #3
 8001cc8:	e67e      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001cca:	001a      	movs	r2, r3
 8001ccc:	001c      	movs	r4, r3
 8001cce:	432a      	orrs	r2, r5
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dadd+0x6a8>
 8001cd2:	e6ab      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001cd4:	e6c1      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	2500      	movs	r5, #0
 8001cda:	1a09      	subs	r1, r1, r0
 8001cdc:	e519      	b.n	8001712 <__aeabi_dadd+0xe6>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	4c01      	ldr	r4, [pc, #4]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ce4:	e53a      	b.n	800175c <__aeabi_dadd+0x130>
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	ff7fffff 	.word	0xff7fffff
 8001cf0:	000007fe 	.word	0x000007fe

08001cf4 <__aeabi_ddiv>:
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	46de      	mov	lr, fp
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	b087      	sub	sp, #28
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	030b      	lsls	r3, r1, #12
 8001d08:	0b1b      	lsrs	r3, r3, #12
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	0fca      	lsrs	r2, r1, #31
 8001d0e:	004b      	lsls	r3, r1, #1
 8001d10:	0004      	movs	r4, r0
 8001d12:	4680      	mov	r8, r0
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x28>
 8001d1a:	e16a      	b.n	8001ff2 <__aeabi_ddiv+0x2fe>
 8001d1c:	4ad4      	ldr	r2, [pc, #848]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x30>
 8001d22:	e18c      	b.n	800203e <__aeabi_ddiv+0x34a>
 8001d24:	4659      	mov	r1, fp
 8001d26:	0f42      	lsrs	r2, r0, #29
 8001d28:	00c9      	lsls	r1, r1, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0409      	lsls	r1, r1, #16
 8001d30:	4311      	orrs	r1, r2
 8001d32:	00c2      	lsls	r2, r0, #3
 8001d34:	4690      	mov	r8, r2
 8001d36:	4acf      	ldr	r2, [pc, #828]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d38:	4689      	mov	r9, r1
 8001d3a:	4692      	mov	sl, r2
 8001d3c:	449a      	add	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2400      	movs	r4, #0
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	9e00      	ldr	r6, [sp, #0]
 8001d46:	9f01      	ldr	r7, [sp, #4]
 8001d48:	033b      	lsls	r3, r7, #12
 8001d4a:	0b1b      	lsrs	r3, r3, #12
 8001d4c:	469b      	mov	fp, r3
 8001d4e:	007b      	lsls	r3, r7, #1
 8001d50:	0030      	movs	r0, r6
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	0ffd      	lsrs	r5, r7, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x68>
 8001d5a:	e128      	b.n	8001fae <__aeabi_ddiv+0x2ba>
 8001d5c:	4ac4      	ldr	r2, [pc, #784]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x70>
 8001d62:	e177      	b.n	8002054 <__aeabi_ddiv+0x360>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f72      	lsrs	r2, r6, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	468b      	mov	fp, r1
 8001d74:	49bf      	ldr	r1, [pc, #764]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d76:	00f2      	lsls	r2, r6, #3
 8001d78:	468c      	mov	ip, r1
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	4463      	add	r3, ip
 8001d7e:	1acb      	subs	r3, r1, r3
 8001d80:	469a      	mov	sl, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	9e02      	ldr	r6, [sp, #8]
 8001d86:	406e      	eors	r6, r5
 8001d88:	2c0f      	cmp	r4, #15
 8001d8a:	d827      	bhi.n	8001ddc <__aeabi_ddiv+0xe8>
 8001d8c:	49ba      	ldr	r1, [pc, #744]	@ (8002078 <__aeabi_ddiv+0x384>)
 8001d8e:	00a4      	lsls	r4, r4, #2
 8001d90:	5909      	ldr	r1, [r1, r4]
 8001d92:	468f      	mov	pc, r1
 8001d94:	46cb      	mov	fp, r9
 8001d96:	4642      	mov	r2, r8
 8001d98:	9e02      	ldr	r6, [sp, #8]
 8001d9a:	9b03      	ldr	r3, [sp, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d016      	beq.n	8001dce <__aeabi_ddiv+0xda>
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0xb2>
 8001da4:	e2a6      	b.n	80022f4 <__aeabi_ddiv+0x600>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d000      	beq.n	8001dac <__aeabi_ddiv+0xb8>
 8001daa:	e0df      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8001dac:	2200      	movs	r2, #0
 8001dae:	2300      	movs	r3, #0
 8001db0:	2400      	movs	r4, #0
 8001db2:	4690      	mov	r8, r2
 8001db4:	051b      	lsls	r3, r3, #20
 8001db6:	4323      	orrs	r3, r4
 8001db8:	07f6      	lsls	r6, r6, #31
 8001dba:	4333      	orrs	r3, r6
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	b007      	add	sp, #28
 8001dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc4:	46bb      	mov	fp, r7
 8001dc6:	46b2      	mov	sl, r6
 8001dc8:	46a9      	mov	r9, r5
 8001dca:	46a0      	mov	r8, r4
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001dd6:	e7ed      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001dd8:	002e      	movs	r6, r5
 8001dda:	e7df      	b.n	8001d9c <__aeabi_ddiv+0xa8>
 8001ddc:	45cb      	cmp	fp, r9
 8001dde:	d200      	bcs.n	8001de2 <__aeabi_ddiv+0xee>
 8001de0:	e1d4      	b.n	800218c <__aeabi_ddiv+0x498>
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xf2>
 8001de4:	e1cf      	b.n	8002186 <__aeabi_ddiv+0x492>
 8001de6:	2301      	movs	r3, #1
 8001de8:	425b      	negs	r3, r3
 8001dea:	469c      	mov	ip, r3
 8001dec:	4644      	mov	r4, r8
 8001dee:	4648      	mov	r0, r9
 8001df0:	2700      	movs	r7, #0
 8001df2:	44e2      	add	sl, ip
 8001df4:	465b      	mov	r3, fp
 8001df6:	0e15      	lsrs	r5, r2, #24
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	431d      	orrs	r5, r3
 8001dfc:	0c19      	lsrs	r1, r3, #16
 8001dfe:	042b      	lsls	r3, r5, #16
 8001e00:	0212      	lsls	r2, r2, #8
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	0c1d      	lsrs	r5, r3, #16
 8001e06:	4691      	mov	r9, r2
 8001e08:	9102      	str	r1, [sp, #8]
 8001e0a:	9503      	str	r5, [sp, #12]
 8001e0c:	f7fe fa1e 	bl	800024c <__aeabi_uidivmod>
 8001e10:	0002      	movs	r2, r0
 8001e12:	436a      	muls	r2, r5
 8001e14:	040b      	lsls	r3, r1, #16
 8001e16:	0c21      	lsrs	r1, r4, #16
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4319      	orrs	r1, r3
 8001e1c:	428a      	cmp	r2, r1
 8001e1e:	d909      	bls.n	8001e34 <__aeabi_ddiv+0x140>
 8001e20:	9d00      	ldr	r5, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	46ac      	mov	ip, r5
 8001e26:	425b      	negs	r3, r3
 8001e28:	4461      	add	r1, ip
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	44e0      	add	r8, ip
 8001e2e:	428d      	cmp	r5, r1
 8001e30:	d800      	bhi.n	8001e34 <__aeabi_ddiv+0x140>
 8001e32:	e1fb      	b.n	800222c <__aeabi_ddiv+0x538>
 8001e34:	1a88      	subs	r0, r1, r2
 8001e36:	9902      	ldr	r1, [sp, #8]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	9a03      	ldr	r2, [sp, #12]
 8001e3e:	0424      	lsls	r4, r4, #16
 8001e40:	4342      	muls	r2, r0
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	0c24      	lsrs	r4, r4, #16
 8001e46:	0003      	movs	r3, r0
 8001e48:	430c      	orrs	r4, r1
 8001e4a:	42a2      	cmp	r2, r4
 8001e4c:	d906      	bls.n	8001e5c <__aeabi_ddiv+0x168>
 8001e4e:	9900      	ldr	r1, [sp, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	468c      	mov	ip, r1
 8001e54:	4464      	add	r4, ip
 8001e56:	42a1      	cmp	r1, r4
 8001e58:	d800      	bhi.n	8001e5c <__aeabi_ddiv+0x168>
 8001e5a:	e1e1      	b.n	8002220 <__aeabi_ddiv+0x52c>
 8001e5c:	1aa0      	subs	r0, r4, r2
 8001e5e:	4642      	mov	r2, r8
 8001e60:	0412      	lsls	r2, r2, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4693      	mov	fp, r2
 8001e66:	464b      	mov	r3, r9
 8001e68:	4659      	mov	r1, fp
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	001d      	movs	r5, r3
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	040b      	lsls	r3, r1, #16
 8001e72:	4649      	mov	r1, r9
 8001e74:	0409      	lsls	r1, r1, #16
 8001e76:	0c09      	lsrs	r1, r1, #16
 8001e78:	000c      	movs	r4, r1
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	435c      	muls	r4, r3
 8001e7e:	0c12      	lsrs	r2, r2, #16
 8001e80:	436b      	muls	r3, r5
 8001e82:	4688      	mov	r8, r1
 8001e84:	4351      	muls	r1, r2
 8001e86:	436a      	muls	r2, r5
 8001e88:	0c25      	lsrs	r5, r4, #16
 8001e8a:	46ac      	mov	ip, r5
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	4463      	add	r3, ip
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d903      	bls.n	8001e9c <__aeabi_ddiv+0x1a8>
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4462      	add	r2, ip
 8001e9c:	0c19      	lsrs	r1, r3, #16
 8001e9e:	0424      	lsls	r4, r4, #16
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	0c24      	lsrs	r4, r4, #16
 8001ea4:	188a      	adds	r2, r1, r2
 8001ea6:	191c      	adds	r4, r3, r4
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	d302      	bcc.n	8001eb2 <__aeabi_ddiv+0x1be>
 8001eac:	d116      	bne.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eae:	42a7      	cmp	r7, r4
 8001eb0:	d214      	bcs.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	9d00      	ldr	r5, [sp, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	444f      	add	r7, r9
 8001eba:	9305      	str	r3, [sp, #20]
 8001ebc:	454f      	cmp	r7, r9
 8001ebe:	419b      	sbcs	r3, r3
 8001ec0:	46ac      	mov	ip, r5
 8001ec2:	425b      	negs	r3, r3
 8001ec4:	4463      	add	r3, ip
 8001ec6:	18c0      	adds	r0, r0, r3
 8001ec8:	4285      	cmp	r5, r0
 8001eca:	d300      	bcc.n	8001ece <__aeabi_ddiv+0x1da>
 8001ecc:	e1a1      	b.n	8002212 <__aeabi_ddiv+0x51e>
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	d900      	bls.n	8001ed4 <__aeabi_ddiv+0x1e0>
 8001ed2:	e1f6      	b.n	80022c2 <__aeabi_ddiv+0x5ce>
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8001ed6:	e1f1      	b.n	80022bc <__aeabi_ddiv+0x5c8>
 8001ed8:	9b05      	ldr	r3, [sp, #20]
 8001eda:	469b      	mov	fp, r3
 8001edc:	1b3c      	subs	r4, r7, r4
 8001ede:	42a7      	cmp	r7, r4
 8001ee0:	41bf      	sbcs	r7, r7
 8001ee2:	9d00      	ldr	r5, [sp, #0]
 8001ee4:	1a80      	subs	r0, r0, r2
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	4285      	cmp	r5, r0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_ddiv+0x1fc>
 8001eee:	e1d0      	b.n	8002292 <__aeabi_ddiv+0x59e>
 8001ef0:	9902      	ldr	r1, [sp, #8]
 8001ef2:	f7fe f9ab 	bl	800024c <__aeabi_uidivmod>
 8001ef6:	9a03      	ldr	r2, [sp, #12]
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	4342      	muls	r2, r0
 8001efc:	0c21      	lsrs	r1, r4, #16
 8001efe:	0007      	movs	r7, r0
 8001f00:	4319      	orrs	r1, r3
 8001f02:	428a      	cmp	r2, r1
 8001f04:	d900      	bls.n	8001f08 <__aeabi_ddiv+0x214>
 8001f06:	e178      	b.n	80021fa <__aeabi_ddiv+0x506>
 8001f08:	1a88      	subs	r0, r1, r2
 8001f0a:	9902      	ldr	r1, [sp, #8]
 8001f0c:	f7fe f99e 	bl	800024c <__aeabi_uidivmod>
 8001f10:	9a03      	ldr	r2, [sp, #12]
 8001f12:	0424      	lsls	r4, r4, #16
 8001f14:	4342      	muls	r2, r0
 8001f16:	0409      	lsls	r1, r1, #16
 8001f18:	0c24      	lsrs	r4, r4, #16
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	430c      	orrs	r4, r1
 8001f1e:	42a2      	cmp	r2, r4
 8001f20:	d900      	bls.n	8001f24 <__aeabi_ddiv+0x230>
 8001f22:	e15d      	b.n	80021e0 <__aeabi_ddiv+0x4ec>
 8001f24:	4641      	mov	r1, r8
 8001f26:	1aa4      	subs	r4, r4, r2
 8001f28:	043a      	lsls	r2, r7, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	9d04      	ldr	r5, [sp, #16]
 8001f2e:	0413      	lsls	r3, r2, #16
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	4359      	muls	r1, r3
 8001f34:	4647      	mov	r7, r8
 8001f36:	436b      	muls	r3, r5
 8001f38:	469c      	mov	ip, r3
 8001f3a:	0c10      	lsrs	r0, r2, #16
 8001f3c:	4347      	muls	r7, r0
 8001f3e:	0c0b      	lsrs	r3, r1, #16
 8001f40:	44bc      	add	ip, r7
 8001f42:	4463      	add	r3, ip
 8001f44:	4368      	muls	r0, r5
 8001f46:	429f      	cmp	r7, r3
 8001f48:	d903      	bls.n	8001f52 <__aeabi_ddiv+0x25e>
 8001f4a:	2580      	movs	r5, #128	@ 0x80
 8001f4c:	026d      	lsls	r5, r5, #9
 8001f4e:	46ac      	mov	ip, r5
 8001f50:	4460      	add	r0, ip
 8001f52:	0c1f      	lsrs	r7, r3, #16
 8001f54:	0409      	lsls	r1, r1, #16
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	0c09      	lsrs	r1, r1, #16
 8001f5a:	183f      	adds	r7, r7, r0
 8001f5c:	185b      	adds	r3, r3, r1
 8001f5e:	42bc      	cmp	r4, r7
 8001f60:	d200      	bcs.n	8001f64 <__aeabi_ddiv+0x270>
 8001f62:	e102      	b.n	800216a <__aeabi_ddiv+0x476>
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x274>
 8001f66:	e0fd      	b.n	8002164 <__aeabi_ddiv+0x470>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	4b43      	ldr	r3, [pc, #268]	@ (800207c <__aeabi_ddiv+0x388>)
 8001f6e:	4453      	add	r3, sl
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dc00      	bgt.n	8001f76 <__aeabi_ddiv+0x282>
 8001f74:	e0ae      	b.n	80020d4 <__aeabi_ddiv+0x3e0>
 8001f76:	0751      	lsls	r1, r2, #29
 8001f78:	d000      	beq.n	8001f7c <__aeabi_ddiv+0x288>
 8001f7a:	e198      	b.n	80022ae <__aeabi_ddiv+0x5ba>
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	01c9      	lsls	r1, r1, #7
 8001f80:	d506      	bpl.n	8001f90 <__aeabi_ddiv+0x29c>
 8001f82:	4659      	mov	r1, fp
 8001f84:	4b3e      	ldr	r3, [pc, #248]	@ (8002080 <__aeabi_ddiv+0x38c>)
 8001f86:	4019      	ands	r1, r3
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	468b      	mov	fp, r1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4453      	add	r3, sl
 8001f90:	493c      	ldr	r1, [pc, #240]	@ (8002084 <__aeabi_ddiv+0x390>)
 8001f92:	428b      	cmp	r3, r1
 8001f94:	dd00      	ble.n	8001f98 <__aeabi_ddiv+0x2a4>
 8001f96:	e71a      	b.n	8001dce <__aeabi_ddiv+0xda>
 8001f98:	4659      	mov	r1, fp
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	0749      	lsls	r1, r1, #29
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	465a      	mov	r2, fp
 8001fa2:	055b      	lsls	r3, r3, #21
 8001fa4:	0254      	lsls	r4, r2, #9
 8001fa6:	4688      	mov	r8, r1
 8001fa8:	0b24      	lsrs	r4, r4, #12
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	e702      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001fae:	465a      	mov	r2, fp
 8001fb0:	9b00      	ldr	r3, [sp, #0]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_ddiv+0x2c4>
 8001fb6:	e07e      	b.n	80020b6 <__aeabi_ddiv+0x3c2>
 8001fb8:	465b      	mov	r3, fp
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_ddiv+0x2cc>
 8001fbe:	e100      	b.n	80021c2 <__aeabi_ddiv+0x4ce>
 8001fc0:	4658      	mov	r0, fp
 8001fc2:	f001 fabb 	bl	800353c <__clzsi2>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3a0b      	subs	r2, #11
 8001fcc:	271d      	movs	r7, #29
 8001fce:	9e00      	ldr	r6, [sp, #0]
 8001fd0:	1aba      	subs	r2, r7, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	4658      	mov	r0, fp
 8001fd6:	40d6      	lsrs	r6, r2
 8001fd8:	3908      	subs	r1, #8
 8001fda:	4088      	lsls	r0, r1
 8001fdc:	0032      	movs	r2, r6
 8001fde:	4302      	orrs	r2, r0
 8001fe0:	4693      	mov	fp, r2
 8001fe2:	9a00      	ldr	r2, [sp, #0]
 8001fe4:	408a      	lsls	r2, r1
 8001fe6:	4928      	ldr	r1, [pc, #160]	@ (8002088 <__aeabi_ddiv+0x394>)
 8001fe8:	4453      	add	r3, sl
 8001fea:	468a      	mov	sl, r1
 8001fec:	449a      	add	sl, r3
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e6c8      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8001ff2:	465b      	mov	r3, fp
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	d056      	beq.n	80020a8 <__aeabi_ddiv+0x3b4>
 8001ffa:	465b      	mov	r3, fp
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x30e>
 8002000:	e0cd      	b.n	800219e <__aeabi_ddiv+0x4aa>
 8002002:	4658      	mov	r0, fp
 8002004:	f001 fa9a 	bl	800353c <__clzsi2>
 8002008:	230b      	movs	r3, #11
 800200a:	425b      	negs	r3, r3
 800200c:	469c      	mov	ip, r3
 800200e:	0002      	movs	r2, r0
 8002010:	4484      	add	ip, r0
 8002012:	4666      	mov	r6, ip
 8002014:	231d      	movs	r3, #29
 8002016:	1b9b      	subs	r3, r3, r6
 8002018:	0026      	movs	r6, r4
 800201a:	0011      	movs	r1, r2
 800201c:	4658      	mov	r0, fp
 800201e:	40de      	lsrs	r6, r3
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0033      	movs	r3, r6
 8002026:	4303      	orrs	r3, r0
 8002028:	4699      	mov	r9, r3
 800202a:	0023      	movs	r3, r4
 800202c:	408b      	lsls	r3, r1
 800202e:	4698      	mov	r8, r3
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <__aeabi_ddiv+0x398>)
 8002032:	2400      	movs	r4, #0
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	469a      	mov	sl, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	e682      	b.n	8001d44 <__aeabi_ddiv+0x50>
 800203e:	465a      	mov	r2, fp
 8002040:	4302      	orrs	r2, r0
 8002042:	4691      	mov	r9, r2
 8002044:	d12a      	bne.n	800209c <__aeabi_ddiv+0x3a8>
 8002046:	2200      	movs	r2, #0
 8002048:	469a      	mov	sl, r3
 800204a:	2302      	movs	r3, #2
 800204c:	4690      	mov	r8, r2
 800204e:	2408      	movs	r4, #8
 8002050:	9303      	str	r3, [sp, #12]
 8002052:	e677      	b.n	8001d44 <__aeabi_ddiv+0x50>
 8002054:	465a      	mov	r2, fp
 8002056:	9b00      	ldr	r3, [sp, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <__aeabi_ddiv+0x39c>)
 800205c:	469c      	mov	ip, r3
 800205e:	44e2      	add	sl, ip
 8002060:	2a00      	cmp	r2, #0
 8002062:	d117      	bne.n	8002094 <__aeabi_ddiv+0x3a0>
 8002064:	2302      	movs	r3, #2
 8002066:	431c      	orrs	r4, r3
 8002068:	2300      	movs	r3, #0
 800206a:	469b      	mov	fp, r3
 800206c:	3302      	adds	r3, #2
 800206e:	e689      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	fffffc01 	.word	0xfffffc01
 8002078:	0801710c 	.word	0x0801710c
 800207c:	000003ff 	.word	0x000003ff
 8002080:	feffffff 	.word	0xfeffffff
 8002084:	000007fe 	.word	0x000007fe
 8002088:	000003f3 	.word	0x000003f3
 800208c:	fffffc0d 	.word	0xfffffc0d
 8002090:	fffff801 	.word	0xfffff801
 8002094:	2303      	movs	r3, #3
 8002096:	0032      	movs	r2, r6
 8002098:	431c      	orrs	r4, r3
 800209a:	e673      	b.n	8001d84 <__aeabi_ddiv+0x90>
 800209c:	469a      	mov	sl, r3
 800209e:	2303      	movs	r3, #3
 80020a0:	46d9      	mov	r9, fp
 80020a2:	240c      	movs	r4, #12
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	e64d      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020a8:	2300      	movs	r3, #0
 80020aa:	4698      	mov	r8, r3
 80020ac:	469a      	mov	sl, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	2404      	movs	r4, #4
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	e646      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020b6:	2301      	movs	r3, #1
 80020b8:	431c      	orrs	r4, r3
 80020ba:	2300      	movs	r3, #0
 80020bc:	469b      	mov	fp, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	e660      	b.n	8001d84 <__aeabi_ddiv+0x90>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2480      	movs	r4, #128	@ 0x80
 80020c6:	4698      	mov	r8, r3
 80020c8:	2600      	movs	r6, #0
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <__aeabi_ddiv+0x620>)
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	e671      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 80020d0:	2201      	movs	r2, #1
 80020d2:	4252      	negs	r2, r2
 80020d4:	2101      	movs	r1, #1
 80020d6:	1ac9      	subs	r1, r1, r3
 80020d8:	2938      	cmp	r1, #56	@ 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_ddiv+0x3ea>
 80020dc:	e666      	b.n	8001dac <__aeabi_ddiv+0xb8>
 80020de:	291f      	cmp	r1, #31
 80020e0:	dc00      	bgt.n	80020e4 <__aeabi_ddiv+0x3f0>
 80020e2:	e0ab      	b.n	800223c <__aeabi_ddiv+0x548>
 80020e4:	201f      	movs	r0, #31
 80020e6:	4240      	negs	r0, r0
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	4658      	mov	r0, fp
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	0003      	movs	r3, r0
 80020f0:	2920      	cmp	r1, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_ddiv+0x40a>
 80020f4:	4658      	mov	r0, fp
 80020f6:	4988      	ldr	r1, [pc, #544]	@ (8002318 <__aeabi_ddiv+0x624>)
 80020f8:	4451      	add	r1, sl
 80020fa:	4088      	lsls	r0, r1
 80020fc:	4302      	orrs	r2, r0
 80020fe:	1e51      	subs	r1, r2, #1
 8002100:	418a      	sbcs	r2, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	2307      	movs	r3, #7
 8002106:	0019      	movs	r1, r3
 8002108:	2400      	movs	r4, #0
 800210a:	4011      	ands	r1, r2
 800210c:	4213      	tst	r3, r2
 800210e:	d00c      	beq.n	800212a <__aeabi_ddiv+0x436>
 8002110:	230f      	movs	r3, #15
 8002112:	4013      	ands	r3, r2
 8002114:	2b04      	cmp	r3, #4
 8002116:	d100      	bne.n	800211a <__aeabi_ddiv+0x426>
 8002118:	e0f9      	b.n	800230e <__aeabi_ddiv+0x61a>
 800211a:	1d11      	adds	r1, r2, #4
 800211c:	4291      	cmp	r1, r2
 800211e:	419b      	sbcs	r3, r3
 8002120:	000a      	movs	r2, r1
 8002122:	425b      	negs	r3, r3
 8002124:	0759      	lsls	r1, r3, #29
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	0b1c      	lsrs	r4, r3, #12
 800212a:	08d2      	lsrs	r2, r2, #3
 800212c:	430a      	orrs	r2, r1
 800212e:	4690      	mov	r8, r2
 8002130:	2300      	movs	r3, #0
 8002132:	e63f      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002134:	2480      	movs	r4, #128	@ 0x80
 8002136:	464b      	mov	r3, r9
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	4223      	tst	r3, r4
 800213c:	d009      	beq.n	8002152 <__aeabi_ddiv+0x45e>
 800213e:	465b      	mov	r3, fp
 8002140:	4223      	tst	r3, r4
 8002142:	d106      	bne.n	8002152 <__aeabi_ddiv+0x45e>
 8002144:	431c      	orrs	r4, r3
 8002146:	0324      	lsls	r4, r4, #12
 8002148:	002e      	movs	r6, r5
 800214a:	4690      	mov	r8, r2
 800214c:	4b71      	ldr	r3, [pc, #452]	@ (8002314 <__aeabi_ddiv+0x620>)
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	e630      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002152:	2480      	movs	r4, #128	@ 0x80
 8002154:	464b      	mov	r3, r9
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	431c      	orrs	r4, r3
 800215a:	0324      	lsls	r4, r4, #12
 800215c:	9e02      	ldr	r6, [sp, #8]
 800215e:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002160:	0b24      	lsrs	r4, r4, #12
 8002162:	e627      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_ddiv+0x476>
 8002168:	e700      	b.n	8001f6c <__aeabi_ddiv+0x278>
 800216a:	9800      	ldr	r0, [sp, #0]
 800216c:	1e51      	subs	r1, r2, #1
 800216e:	4684      	mov	ip, r0
 8002170:	4464      	add	r4, ip
 8002172:	4284      	cmp	r4, r0
 8002174:	d200      	bcs.n	8002178 <__aeabi_ddiv+0x484>
 8002176:	e084      	b.n	8002282 <__aeabi_ddiv+0x58e>
 8002178:	42bc      	cmp	r4, r7
 800217a:	d200      	bcs.n	800217e <__aeabi_ddiv+0x48a>
 800217c:	e0ae      	b.n	80022dc <__aeabi_ddiv+0x5e8>
 800217e:	d100      	bne.n	8002182 <__aeabi_ddiv+0x48e>
 8002180:	e0c1      	b.n	8002306 <__aeabi_ddiv+0x612>
 8002182:	000a      	movs	r2, r1
 8002184:	e6f0      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002186:	4542      	cmp	r2, r8
 8002188:	d900      	bls.n	800218c <__aeabi_ddiv+0x498>
 800218a:	e62c      	b.n	8001de6 <__aeabi_ddiv+0xf2>
 800218c:	464b      	mov	r3, r9
 800218e:	07dc      	lsls	r4, r3, #31
 8002190:	0858      	lsrs	r0, r3, #1
 8002192:	4643      	mov	r3, r8
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	431c      	orrs	r4, r3
 8002198:	4643      	mov	r3, r8
 800219a:	07df      	lsls	r7, r3, #31
 800219c:	e62a      	b.n	8001df4 <__aeabi_ddiv+0x100>
 800219e:	f001 f9cd 	bl	800353c <__clzsi2>
 80021a2:	2315      	movs	r3, #21
 80021a4:	469c      	mov	ip, r3
 80021a6:	4484      	add	ip, r0
 80021a8:	0002      	movs	r2, r0
 80021aa:	4663      	mov	r3, ip
 80021ac:	3220      	adds	r2, #32
 80021ae:	2b1c      	cmp	r3, #28
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_ddiv+0x4c0>
 80021b2:	e72e      	b.n	8002012 <__aeabi_ddiv+0x31e>
 80021b4:	0023      	movs	r3, r4
 80021b6:	3808      	subs	r0, #8
 80021b8:	4083      	lsls	r3, r0
 80021ba:	4699      	mov	r9, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	4698      	mov	r8, r3
 80021c0:	e736      	b.n	8002030 <__aeabi_ddiv+0x33c>
 80021c2:	f001 f9bb 	bl	800353c <__clzsi2>
 80021c6:	0002      	movs	r2, r0
 80021c8:	0003      	movs	r3, r0
 80021ca:	3215      	adds	r2, #21
 80021cc:	3320      	adds	r3, #32
 80021ce:	2a1c      	cmp	r2, #28
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_ddiv+0x4e0>
 80021d2:	e6fb      	b.n	8001fcc <__aeabi_ddiv+0x2d8>
 80021d4:	9900      	ldr	r1, [sp, #0]
 80021d6:	3808      	subs	r0, #8
 80021d8:	4081      	lsls	r1, r0
 80021da:	2200      	movs	r2, #0
 80021dc:	468b      	mov	fp, r1
 80021de:	e702      	b.n	8001fe6 <__aeabi_ddiv+0x2f2>
 80021e0:	9900      	ldr	r1, [sp, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	468c      	mov	ip, r1
 80021e6:	4464      	add	r4, ip
 80021e8:	42a1      	cmp	r1, r4
 80021ea:	d900      	bls.n	80021ee <__aeabi_ddiv+0x4fa>
 80021ec:	e69a      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021ee:	42a2      	cmp	r2, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x500>
 80021f2:	e697      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021f4:	1e83      	subs	r3, r0, #2
 80021f6:	4464      	add	r4, ip
 80021f8:	e694      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021fa:	46ac      	mov	ip, r5
 80021fc:	4461      	add	r1, ip
 80021fe:	3f01      	subs	r7, #1
 8002200:	428d      	cmp	r5, r1
 8002202:	d900      	bls.n	8002206 <__aeabi_ddiv+0x512>
 8002204:	e680      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002206:	428a      	cmp	r2, r1
 8002208:	d800      	bhi.n	800220c <__aeabi_ddiv+0x518>
 800220a:	e67d      	b.n	8001f08 <__aeabi_ddiv+0x214>
 800220c:	1e87      	subs	r7, r0, #2
 800220e:	4461      	add	r1, ip
 8002210:	e67a      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002212:	4285      	cmp	r5, r0
 8002214:	d000      	beq.n	8002218 <__aeabi_ddiv+0x524>
 8002216:	e65f      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8002218:	45b9      	cmp	r9, r7
 800221a:	d900      	bls.n	800221e <__aeabi_ddiv+0x52a>
 800221c:	e65c      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 800221e:	e656      	b.n	8001ece <__aeabi_ddiv+0x1da>
 8002220:	42a2      	cmp	r2, r4
 8002222:	d800      	bhi.n	8002226 <__aeabi_ddiv+0x532>
 8002224:	e61a      	b.n	8001e5c <__aeabi_ddiv+0x168>
 8002226:	1e83      	subs	r3, r0, #2
 8002228:	4464      	add	r4, ip
 800222a:	e617      	b.n	8001e5c <__aeabi_ddiv+0x168>
 800222c:	428a      	cmp	r2, r1
 800222e:	d800      	bhi.n	8002232 <__aeabi_ddiv+0x53e>
 8002230:	e600      	b.n	8001e34 <__aeabi_ddiv+0x140>
 8002232:	46ac      	mov	ip, r5
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4698      	mov	r8, r3
 8002238:	4461      	add	r1, ip
 800223a:	e5fb      	b.n	8001e34 <__aeabi_ddiv+0x140>
 800223c:	4837      	ldr	r0, [pc, #220]	@ (800231c <__aeabi_ddiv+0x628>)
 800223e:	0014      	movs	r4, r2
 8002240:	4450      	add	r0, sl
 8002242:	4082      	lsls	r2, r0
 8002244:	465b      	mov	r3, fp
 8002246:	0017      	movs	r7, r2
 8002248:	4083      	lsls	r3, r0
 800224a:	40cc      	lsrs	r4, r1
 800224c:	1e7a      	subs	r2, r7, #1
 800224e:	4197      	sbcs	r7, r2
 8002250:	4323      	orrs	r3, r4
 8002252:	433b      	orrs	r3, r7
 8002254:	001a      	movs	r2, r3
 8002256:	465b      	mov	r3, fp
 8002258:	40cb      	lsrs	r3, r1
 800225a:	0751      	lsls	r1, r2, #29
 800225c:	d009      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 800225e:	210f      	movs	r1, #15
 8002260:	4011      	ands	r1, r2
 8002262:	2904      	cmp	r1, #4
 8002264:	d005      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 8002266:	1d11      	adds	r1, r2, #4
 8002268:	4291      	cmp	r1, r2
 800226a:	4192      	sbcs	r2, r2
 800226c:	4252      	negs	r2, r2
 800226e:	189b      	adds	r3, r3, r2
 8002270:	000a      	movs	r2, r1
 8002272:	0219      	lsls	r1, r3, #8
 8002274:	d400      	bmi.n	8002278 <__aeabi_ddiv+0x584>
 8002276:	e755      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002278:	2200      	movs	r2, #0
 800227a:	2301      	movs	r3, #1
 800227c:	2400      	movs	r4, #0
 800227e:	4690      	mov	r8, r2
 8002280:	e598      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002282:	000a      	movs	r2, r1
 8002284:	42bc      	cmp	r4, r7
 8002286:	d000      	beq.n	800228a <__aeabi_ddiv+0x596>
 8002288:	e66e      	b.n	8001f68 <__aeabi_ddiv+0x274>
 800228a:	454b      	cmp	r3, r9
 800228c:	d000      	beq.n	8002290 <__aeabi_ddiv+0x59c>
 800228e:	e66b      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002290:	e66c      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <__aeabi_ddiv+0x62c>)
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <__aeabi_ddiv+0x630>)
 8002296:	4453      	add	r3, sl
 8002298:	4592      	cmp	sl, r2
 800229a:	da00      	bge.n	800229e <__aeabi_ddiv+0x5aa>
 800229c:	e718      	b.n	80020d0 <__aeabi_ddiv+0x3dc>
 800229e:	2101      	movs	r1, #1
 80022a0:	4249      	negs	r1, r1
 80022a2:	1d0a      	adds	r2, r1, #4
 80022a4:	428a      	cmp	r2, r1
 80022a6:	4189      	sbcs	r1, r1
 80022a8:	4249      	negs	r1, r1
 80022aa:	448b      	add	fp, r1
 80022ac:	e666      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022ae:	210f      	movs	r1, #15
 80022b0:	4011      	ands	r1, r2
 80022b2:	2904      	cmp	r1, #4
 80022b4:	d100      	bne.n	80022b8 <__aeabi_ddiv+0x5c4>
 80022b6:	e661      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022b8:	0011      	movs	r1, r2
 80022ba:	e7f2      	b.n	80022a2 <__aeabi_ddiv+0x5ae>
 80022bc:	42bc      	cmp	r4, r7
 80022be:	d800      	bhi.n	80022c2 <__aeabi_ddiv+0x5ce>
 80022c0:	e60a      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 80022c2:	2302      	movs	r3, #2
 80022c4:	425b      	negs	r3, r3
 80022c6:	469c      	mov	ip, r3
 80022c8:	9900      	ldr	r1, [sp, #0]
 80022ca:	444f      	add	r7, r9
 80022cc:	454f      	cmp	r7, r9
 80022ce:	419b      	sbcs	r3, r3
 80022d0:	44e3      	add	fp, ip
 80022d2:	468c      	mov	ip, r1
 80022d4:	425b      	negs	r3, r3
 80022d6:	4463      	add	r3, ip
 80022d8:	18c0      	adds	r0, r0, r3
 80022da:	e5ff      	b.n	8001edc <__aeabi_ddiv+0x1e8>
 80022dc:	4649      	mov	r1, r9
 80022de:	9d00      	ldr	r5, [sp, #0]
 80022e0:	0048      	lsls	r0, r1, #1
 80022e2:	4548      	cmp	r0, r9
 80022e4:	4189      	sbcs	r1, r1
 80022e6:	46ac      	mov	ip, r5
 80022e8:	4249      	negs	r1, r1
 80022ea:	4461      	add	r1, ip
 80022ec:	4681      	mov	r9, r0
 80022ee:	3a02      	subs	r2, #2
 80022f0:	1864      	adds	r4, r4, r1
 80022f2:	e7c7      	b.n	8002284 <__aeabi_ddiv+0x590>
 80022f4:	2480      	movs	r4, #128	@ 0x80
 80022f6:	465b      	mov	r3, fp
 80022f8:	0324      	lsls	r4, r4, #12
 80022fa:	431c      	orrs	r4, r3
 80022fc:	0324      	lsls	r4, r4, #12
 80022fe:	4690      	mov	r8, r2
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002302:	0b24      	lsrs	r4, r4, #12
 8002304:	e556      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002306:	4599      	cmp	r9, r3
 8002308:	d3e8      	bcc.n	80022dc <__aeabi_ddiv+0x5e8>
 800230a:	000a      	movs	r2, r1
 800230c:	e7bd      	b.n	800228a <__aeabi_ddiv+0x596>
 800230e:	2300      	movs	r3, #0
 8002310:	e708      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	0000043e 	.word	0x0000043e
 800231c:	0000041e 	.word	0x0000041e
 8002320:	000003ff 	.word	0x000003ff
 8002324:	fffffc02 	.word	0xfffffc02

08002328 <__eqdf2>:
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	4657      	mov	r7, sl
 800232c:	46de      	mov	lr, fp
 800232e:	464e      	mov	r6, r9
 8002330:	4645      	mov	r5, r8
 8002332:	b5e0      	push	{r5, r6, r7, lr}
 8002334:	000d      	movs	r5, r1
 8002336:	0004      	movs	r4, r0
 8002338:	0fe8      	lsrs	r0, r5, #31
 800233a:	4683      	mov	fp, r0
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0fd8      	lsrs	r0, r3, #31
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	4682      	mov	sl, r0
 8002344:	4819      	ldr	r0, [pc, #100]	@ (80023ac <__eqdf2+0x84>)
 8002346:	468c      	mov	ip, r1
 8002348:	031f      	lsls	r7, r3, #12
 800234a:	0069      	lsls	r1, r5, #1
 800234c:	005e      	lsls	r6, r3, #1
 800234e:	0d49      	lsrs	r1, r1, #21
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0d76      	lsrs	r6, r6, #21
 8002354:	4281      	cmp	r1, r0
 8002356:	d018      	beq.n	800238a <__eqdf2+0x62>
 8002358:	4286      	cmp	r6, r0
 800235a:	d00f      	beq.n	800237c <__eqdf2+0x54>
 800235c:	2001      	movs	r0, #1
 800235e:	42b1      	cmp	r1, r6
 8002360:	d10d      	bne.n	800237e <__eqdf2+0x56>
 8002362:	45bc      	cmp	ip, r7
 8002364:	d10b      	bne.n	800237e <__eqdf2+0x56>
 8002366:	4294      	cmp	r4, r2
 8002368:	d109      	bne.n	800237e <__eqdf2+0x56>
 800236a:	45d3      	cmp	fp, sl
 800236c:	d01c      	beq.n	80023a8 <__eqdf2+0x80>
 800236e:	2900      	cmp	r1, #0
 8002370:	d105      	bne.n	800237e <__eqdf2+0x56>
 8002372:	4660      	mov	r0, ip
 8002374:	4320      	orrs	r0, r4
 8002376:	1e43      	subs	r3, r0, #1
 8002378:	4198      	sbcs	r0, r3
 800237a:	e000      	b.n	800237e <__eqdf2+0x56>
 800237c:	2001      	movs	r0, #1
 800237e:	bcf0      	pop	{r4, r5, r6, r7}
 8002380:	46bb      	mov	fp, r7
 8002382:	46b2      	mov	sl, r6
 8002384:	46a9      	mov	r9, r5
 8002386:	46a0      	mov	r8, r4
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2001      	movs	r0, #1
 800238c:	428e      	cmp	r6, r1
 800238e:	d1f6      	bne.n	800237e <__eqdf2+0x56>
 8002390:	4661      	mov	r1, ip
 8002392:	4339      	orrs	r1, r7
 8002394:	000f      	movs	r7, r1
 8002396:	4317      	orrs	r7, r2
 8002398:	4327      	orrs	r7, r4
 800239a:	d1f0      	bne.n	800237e <__eqdf2+0x56>
 800239c:	465b      	mov	r3, fp
 800239e:	4652      	mov	r2, sl
 80023a0:	1a98      	subs	r0, r3, r2
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e7ea      	b.n	800237e <__eqdf2+0x56>
 80023a8:	2000      	movs	r0, #0
 80023aa:	e7e8      	b.n	800237e <__eqdf2+0x56>
 80023ac:	000007ff 	.word	0x000007ff

080023b0 <__gedf2>:
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	4657      	mov	r7, sl
 80023b4:	464e      	mov	r6, r9
 80023b6:	4645      	mov	r5, r8
 80023b8:	46de      	mov	lr, fp
 80023ba:	b5e0      	push	{r5, r6, r7, lr}
 80023bc:	000d      	movs	r5, r1
 80023be:	030f      	lsls	r7, r1, #12
 80023c0:	0b39      	lsrs	r1, r7, #12
 80023c2:	b083      	sub	sp, #12
 80023c4:	0004      	movs	r4, r0
 80023c6:	4680      	mov	r8, r0
 80023c8:	9101      	str	r1, [sp, #4]
 80023ca:	0058      	lsls	r0, r3, #1
 80023cc:	0fe9      	lsrs	r1, r5, #31
 80023ce:	4f31      	ldr	r7, [pc, #196]	@ (8002494 <__gedf2+0xe4>)
 80023d0:	0d40      	lsrs	r0, r0, #21
 80023d2:	468c      	mov	ip, r1
 80023d4:	006e      	lsls	r6, r5, #1
 80023d6:	0319      	lsls	r1, r3, #12
 80023d8:	4682      	mov	sl, r0
 80023da:	4691      	mov	r9, r2
 80023dc:	0d76      	lsrs	r6, r6, #21
 80023de:	0b09      	lsrs	r1, r1, #12
 80023e0:	0fd8      	lsrs	r0, r3, #31
 80023e2:	42be      	cmp	r6, r7
 80023e4:	d01f      	beq.n	8002426 <__gedf2+0x76>
 80023e6:	45ba      	cmp	sl, r7
 80023e8:	d00f      	beq.n	800240a <__gedf2+0x5a>
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d12f      	bne.n	800244e <__gedf2+0x9e>
 80023ee:	4655      	mov	r5, sl
 80023f0:	9e01      	ldr	r6, [sp, #4]
 80023f2:	4334      	orrs	r4, r6
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	d127      	bne.n	8002448 <__gedf2+0x98>
 80023f8:	430a      	orrs	r2, r1
 80023fa:	d03a      	beq.n	8002472 <__gedf2+0xc2>
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d145      	bne.n	800248c <__gedf2+0xdc>
 8002400:	2800      	cmp	r0, #0
 8002402:	d11a      	bne.n	800243a <__gedf2+0x8a>
 8002404:	2001      	movs	r0, #1
 8002406:	4240      	negs	r0, r0
 8002408:	e017      	b.n	800243a <__gedf2+0x8a>
 800240a:	4311      	orrs	r1, r2
 800240c:	d13b      	bne.n	8002486 <__gedf2+0xd6>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d102      	bne.n	8002418 <__gedf2+0x68>
 8002412:	9f01      	ldr	r7, [sp, #4]
 8002414:	4327      	orrs	r7, r4
 8002416:	d0f3      	beq.n	8002400 <__gedf2+0x50>
 8002418:	4584      	cmp	ip, r0
 800241a:	d109      	bne.n	8002430 <__gedf2+0x80>
 800241c:	4663      	mov	r3, ip
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <__gedf2+0x54>
 8002422:	4660      	mov	r0, ip
 8002424:	e009      	b.n	800243a <__gedf2+0x8a>
 8002426:	9f01      	ldr	r7, [sp, #4]
 8002428:	4327      	orrs	r7, r4
 800242a:	d12c      	bne.n	8002486 <__gedf2+0xd6>
 800242c:	45b2      	cmp	sl, r6
 800242e:	d024      	beq.n	800247a <__gedf2+0xca>
 8002430:	4663      	mov	r3, ip
 8002432:	2002      	movs	r0, #2
 8002434:	3b01      	subs	r3, #1
 8002436:	4018      	ands	r0, r3
 8002438:	3801      	subs	r0, #1
 800243a:	b003      	add	sp, #12
 800243c:	bcf0      	pop	{r4, r5, r6, r7}
 800243e:	46bb      	mov	fp, r7
 8002440:	46b2      	mov	sl, r6
 8002442:	46a9      	mov	r9, r5
 8002444:	46a0      	mov	r8, r4
 8002446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002448:	2c00      	cmp	r4, #0
 800244a:	d0d9      	beq.n	8002400 <__gedf2+0x50>
 800244c:	e7e4      	b.n	8002418 <__gedf2+0x68>
 800244e:	4654      	mov	r4, sl
 8002450:	2c00      	cmp	r4, #0
 8002452:	d0ed      	beq.n	8002430 <__gedf2+0x80>
 8002454:	4584      	cmp	ip, r0
 8002456:	d1eb      	bne.n	8002430 <__gedf2+0x80>
 8002458:	4556      	cmp	r6, sl
 800245a:	dce9      	bgt.n	8002430 <__gedf2+0x80>
 800245c:	dbde      	blt.n	800241c <__gedf2+0x6c>
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	428b      	cmp	r3, r1
 8002462:	d8e5      	bhi.n	8002430 <__gedf2+0x80>
 8002464:	d1da      	bne.n	800241c <__gedf2+0x6c>
 8002466:	45c8      	cmp	r8, r9
 8002468:	d8e2      	bhi.n	8002430 <__gedf2+0x80>
 800246a:	2000      	movs	r0, #0
 800246c:	45c8      	cmp	r8, r9
 800246e:	d2e4      	bcs.n	800243a <__gedf2+0x8a>
 8002470:	e7d4      	b.n	800241c <__gedf2+0x6c>
 8002472:	2000      	movs	r0, #0
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0e0      	beq.n	800243a <__gedf2+0x8a>
 8002478:	e7da      	b.n	8002430 <__gedf2+0x80>
 800247a:	4311      	orrs	r1, r2
 800247c:	d103      	bne.n	8002486 <__gedf2+0xd6>
 800247e:	4584      	cmp	ip, r0
 8002480:	d1d6      	bne.n	8002430 <__gedf2+0x80>
 8002482:	2000      	movs	r0, #0
 8002484:	e7d9      	b.n	800243a <__gedf2+0x8a>
 8002486:	2002      	movs	r0, #2
 8002488:	4240      	negs	r0, r0
 800248a:	e7d6      	b.n	800243a <__gedf2+0x8a>
 800248c:	4584      	cmp	ip, r0
 800248e:	d0e6      	beq.n	800245e <__gedf2+0xae>
 8002490:	e7ce      	b.n	8002430 <__gedf2+0x80>
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	000007ff 	.word	0x000007ff

08002498 <__ledf2>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	464e      	mov	r6, r9
 800249e:	4645      	mov	r5, r8
 80024a0:	46de      	mov	lr, fp
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	000d      	movs	r5, r1
 80024a6:	030f      	lsls	r7, r1, #12
 80024a8:	0004      	movs	r4, r0
 80024aa:	4680      	mov	r8, r0
 80024ac:	0fe8      	lsrs	r0, r5, #31
 80024ae:	0b39      	lsrs	r1, r7, #12
 80024b0:	4684      	mov	ip, r0
 80024b2:	b083      	sub	sp, #12
 80024b4:	0058      	lsls	r0, r3, #1
 80024b6:	4f30      	ldr	r7, [pc, #192]	@ (8002578 <__ledf2+0xe0>)
 80024b8:	0d40      	lsrs	r0, r0, #21
 80024ba:	9101      	str	r1, [sp, #4]
 80024bc:	031e      	lsls	r6, r3, #12
 80024be:	0069      	lsls	r1, r5, #1
 80024c0:	4682      	mov	sl, r0
 80024c2:	4691      	mov	r9, r2
 80024c4:	0d49      	lsrs	r1, r1, #21
 80024c6:	0b36      	lsrs	r6, r6, #12
 80024c8:	0fd8      	lsrs	r0, r3, #31
 80024ca:	42b9      	cmp	r1, r7
 80024cc:	d020      	beq.n	8002510 <__ledf2+0x78>
 80024ce:	45ba      	cmp	sl, r7
 80024d0:	d00f      	beq.n	80024f2 <__ledf2+0x5a>
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d12b      	bne.n	800252e <__ledf2+0x96>
 80024d6:	9901      	ldr	r1, [sp, #4]
 80024d8:	430c      	orrs	r4, r1
 80024da:	4651      	mov	r1, sl
 80024dc:	2900      	cmp	r1, #0
 80024de:	d137      	bne.n	8002550 <__ledf2+0xb8>
 80024e0:	4332      	orrs	r2, r6
 80024e2:	d038      	beq.n	8002556 <__ledf2+0xbe>
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d144      	bne.n	8002572 <__ledf2+0xda>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d119      	bne.n	8002520 <__ledf2+0x88>
 80024ec:	2001      	movs	r0, #1
 80024ee:	4240      	negs	r0, r0
 80024f0:	e016      	b.n	8002520 <__ledf2+0x88>
 80024f2:	4316      	orrs	r6, r2
 80024f4:	d113      	bne.n	800251e <__ledf2+0x86>
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d102      	bne.n	8002500 <__ledf2+0x68>
 80024fa:	9f01      	ldr	r7, [sp, #4]
 80024fc:	4327      	orrs	r7, r4
 80024fe:	d0f3      	beq.n	80024e8 <__ledf2+0x50>
 8002500:	4584      	cmp	ip, r0
 8002502:	d020      	beq.n	8002546 <__ledf2+0xae>
 8002504:	4663      	mov	r3, ip
 8002506:	2002      	movs	r0, #2
 8002508:	3b01      	subs	r3, #1
 800250a:	4018      	ands	r0, r3
 800250c:	3801      	subs	r0, #1
 800250e:	e007      	b.n	8002520 <__ledf2+0x88>
 8002510:	9f01      	ldr	r7, [sp, #4]
 8002512:	4327      	orrs	r7, r4
 8002514:	d103      	bne.n	800251e <__ledf2+0x86>
 8002516:	458a      	cmp	sl, r1
 8002518:	d1f4      	bne.n	8002504 <__ledf2+0x6c>
 800251a:	4316      	orrs	r6, r2
 800251c:	d01f      	beq.n	800255e <__ledf2+0xc6>
 800251e:	2002      	movs	r0, #2
 8002520:	b003      	add	sp, #12
 8002522:	bcf0      	pop	{r4, r5, r6, r7}
 8002524:	46bb      	mov	fp, r7
 8002526:	46b2      	mov	sl, r6
 8002528:	46a9      	mov	r9, r5
 800252a:	46a0      	mov	r8, r4
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252e:	4654      	mov	r4, sl
 8002530:	2c00      	cmp	r4, #0
 8002532:	d0e7      	beq.n	8002504 <__ledf2+0x6c>
 8002534:	4584      	cmp	ip, r0
 8002536:	d1e5      	bne.n	8002504 <__ledf2+0x6c>
 8002538:	4551      	cmp	r1, sl
 800253a:	dce3      	bgt.n	8002504 <__ledf2+0x6c>
 800253c:	db03      	blt.n	8002546 <__ledf2+0xae>
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	42b3      	cmp	r3, r6
 8002542:	d8df      	bhi.n	8002504 <__ledf2+0x6c>
 8002544:	d00f      	beq.n	8002566 <__ledf2+0xce>
 8002546:	4663      	mov	r3, ip
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0cf      	beq.n	80024ec <__ledf2+0x54>
 800254c:	4660      	mov	r0, ip
 800254e:	e7e7      	b.n	8002520 <__ledf2+0x88>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d0c9      	beq.n	80024e8 <__ledf2+0x50>
 8002554:	e7d4      	b.n	8002500 <__ledf2+0x68>
 8002556:	2000      	movs	r0, #0
 8002558:	2c00      	cmp	r4, #0
 800255a:	d0e1      	beq.n	8002520 <__ledf2+0x88>
 800255c:	e7d2      	b.n	8002504 <__ledf2+0x6c>
 800255e:	4584      	cmp	ip, r0
 8002560:	d1d0      	bne.n	8002504 <__ledf2+0x6c>
 8002562:	2000      	movs	r0, #0
 8002564:	e7dc      	b.n	8002520 <__ledf2+0x88>
 8002566:	45c8      	cmp	r8, r9
 8002568:	d8cc      	bhi.n	8002504 <__ledf2+0x6c>
 800256a:	2000      	movs	r0, #0
 800256c:	45c8      	cmp	r8, r9
 800256e:	d2d7      	bcs.n	8002520 <__ledf2+0x88>
 8002570:	e7e9      	b.n	8002546 <__ledf2+0xae>
 8002572:	4584      	cmp	ip, r0
 8002574:	d0e3      	beq.n	800253e <__ledf2+0xa6>
 8002576:	e7c5      	b.n	8002504 <__ledf2+0x6c>
 8002578:	000007ff 	.word	0x000007ff

0800257c <__aeabi_dmul>:
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	4657      	mov	r7, sl
 8002580:	46de      	mov	lr, fp
 8002582:	464e      	mov	r6, r9
 8002584:	4645      	mov	r5, r8
 8002586:	b5e0      	push	{r5, r6, r7, lr}
 8002588:	001f      	movs	r7, r3
 800258a:	030b      	lsls	r3, r1, #12
 800258c:	0b1b      	lsrs	r3, r3, #12
 800258e:	0016      	movs	r6, r2
 8002590:	469a      	mov	sl, r3
 8002592:	0fca      	lsrs	r2, r1, #31
 8002594:	004b      	lsls	r3, r1, #1
 8002596:	0004      	movs	r4, r0
 8002598:	4693      	mov	fp, r2
 800259a:	b087      	sub	sp, #28
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x26>
 80025a0:	e0d5      	b.n	800274e <__aeabi_dmul+0x1d2>
 80025a2:	4abb      	ldr	r2, [pc, #748]	@ (8002890 <__aeabi_dmul+0x314>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x2e>
 80025a8:	e0f8      	b.n	800279c <__aeabi_dmul+0x220>
 80025aa:	4651      	mov	r1, sl
 80025ac:	0f42      	lsrs	r2, r0, #29
 80025ae:	00c9      	lsls	r1, r1, #3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	0409      	lsls	r1, r1, #16
 80025b6:	4311      	orrs	r1, r2
 80025b8:	00c2      	lsls	r2, r0, #3
 80025ba:	4691      	mov	r9, r2
 80025bc:	4ab5      	ldr	r2, [pc, #724]	@ (8002894 <__aeabi_dmul+0x318>)
 80025be:	468a      	mov	sl, r1
 80025c0:	189d      	adds	r5, r3, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	4698      	mov	r8, r3
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	033c      	lsls	r4, r7, #12
 80025ca:	007b      	lsls	r3, r7, #1
 80025cc:	0ffa      	lsrs	r2, r7, #31
 80025ce:	0030      	movs	r0, r6
 80025d0:	0b24      	lsrs	r4, r4, #12
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0x5e>
 80025d8:	e096      	b.n	8002708 <__aeabi_dmul+0x18c>
 80025da:	4aad      	ldr	r2, [pc, #692]	@ (8002890 <__aeabi_dmul+0x314>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d031      	beq.n	8002644 <__aeabi_dmul+0xc8>
 80025e0:	0f72      	lsrs	r2, r6, #29
 80025e2:	00e4      	lsls	r4, r4, #3
 80025e4:	4322      	orrs	r2, r4
 80025e6:	2480      	movs	r4, #128	@ 0x80
 80025e8:	0424      	lsls	r4, r4, #16
 80025ea:	4314      	orrs	r4, r2
 80025ec:	4aa9      	ldr	r2, [pc, #676]	@ (8002894 <__aeabi_dmul+0x318>)
 80025ee:	00f0      	lsls	r0, r6, #3
 80025f0:	4694      	mov	ip, r2
 80025f2:	4463      	add	r3, ip
 80025f4:	195b      	adds	r3, r3, r5
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	4642      	mov	r2, r8
 80025fc:	2600      	movs	r6, #0
 80025fe:	2a0a      	cmp	r2, #10
 8002600:	dc42      	bgt.n	8002688 <__aeabi_dmul+0x10c>
 8002602:	465a      	mov	r2, fp
 8002604:	9900      	ldr	r1, [sp, #0]
 8002606:	404a      	eors	r2, r1
 8002608:	4693      	mov	fp, r2
 800260a:	4642      	mov	r2, r8
 800260c:	2a02      	cmp	r2, #2
 800260e:	dc32      	bgt.n	8002676 <__aeabi_dmul+0xfa>
 8002610:	3a01      	subs	r2, #1
 8002612:	2a01      	cmp	r2, #1
 8002614:	d900      	bls.n	8002618 <__aeabi_dmul+0x9c>
 8002616:	e149      	b.n	80028ac <__aeabi_dmul+0x330>
 8002618:	2e02      	cmp	r6, #2
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0xa2>
 800261c:	e0ca      	b.n	80027b4 <__aeabi_dmul+0x238>
 800261e:	2e01      	cmp	r6, #1
 8002620:	d13d      	bne.n	800269e <__aeabi_dmul+0x122>
 8002622:	2300      	movs	r3, #0
 8002624:	2400      	movs	r4, #0
 8002626:	2200      	movs	r2, #0
 8002628:	0010      	movs	r0, r2
 800262a:	465a      	mov	r2, fp
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4323      	orrs	r3, r4
 8002630:	07d2      	lsls	r2, r2, #31
 8002632:	4313      	orrs	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	b007      	add	sp, #28
 8002638:	bcf0      	pop	{r4, r5, r6, r7}
 800263a:	46bb      	mov	fp, r7
 800263c:	46b2      	mov	sl, r6
 800263e:	46a9      	mov	r9, r5
 8002640:	46a0      	mov	r8, r4
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002644:	4b92      	ldr	r3, [pc, #584]	@ (8002890 <__aeabi_dmul+0x314>)
 8002646:	4326      	orrs	r6, r4
 8002648:	18eb      	adds	r3, r5, r3
 800264a:	2e00      	cmp	r6, #0
 800264c:	d100      	bne.n	8002650 <__aeabi_dmul+0xd4>
 800264e:	e0bb      	b.n	80027c8 <__aeabi_dmul+0x24c>
 8002650:	2203      	movs	r2, #3
 8002652:	4641      	mov	r1, r8
 8002654:	4311      	orrs	r1, r2
 8002656:	465a      	mov	r2, fp
 8002658:	4688      	mov	r8, r1
 800265a:	9900      	ldr	r1, [sp, #0]
 800265c:	404a      	eors	r2, r1
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0109      	lsls	r1, r1, #4
 8002662:	468c      	mov	ip, r1
 8002664:	0029      	movs	r1, r5
 8002666:	4461      	add	r1, ip
 8002668:	9101      	str	r1, [sp, #4]
 800266a:	4641      	mov	r1, r8
 800266c:	290a      	cmp	r1, #10
 800266e:	dd00      	ble.n	8002672 <__aeabi_dmul+0xf6>
 8002670:	e233      	b.n	8002ada <__aeabi_dmul+0x55e>
 8002672:	4693      	mov	fp, r2
 8002674:	2603      	movs	r6, #3
 8002676:	4642      	mov	r2, r8
 8002678:	2701      	movs	r7, #1
 800267a:	4097      	lsls	r7, r2
 800267c:	21a6      	movs	r1, #166	@ 0xa6
 800267e:	003a      	movs	r2, r7
 8002680:	00c9      	lsls	r1, r1, #3
 8002682:	400a      	ands	r2, r1
 8002684:	420f      	tst	r7, r1
 8002686:	d031      	beq.n	80026ec <__aeabi_dmul+0x170>
 8002688:	9e02      	ldr	r6, [sp, #8]
 800268a:	2e02      	cmp	r6, #2
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0x114>
 800268e:	e235      	b.n	8002afc <__aeabi_dmul+0x580>
 8002690:	2e03      	cmp	r6, #3
 8002692:	d100      	bne.n	8002696 <__aeabi_dmul+0x11a>
 8002694:	e1d2      	b.n	8002a3c <__aeabi_dmul+0x4c0>
 8002696:	4654      	mov	r4, sl
 8002698:	4648      	mov	r0, r9
 800269a:	2e01      	cmp	r6, #1
 800269c:	d0c1      	beq.n	8002622 <__aeabi_dmul+0xa6>
 800269e:	9a01      	ldr	r2, [sp, #4]
 80026a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002898 <__aeabi_dmul+0x31c>)
 80026a2:	4694      	mov	ip, r2
 80026a4:	4463      	add	r3, ip
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dc00      	bgt.n	80026ac <__aeabi_dmul+0x130>
 80026aa:	e0c0      	b.n	800282e <__aeabi_dmul+0x2b2>
 80026ac:	0742      	lsls	r2, r0, #29
 80026ae:	d009      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b0:	220f      	movs	r2, #15
 80026b2:	4002      	ands	r2, r0
 80026b4:	2a04      	cmp	r2, #4
 80026b6:	d005      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b8:	1d02      	adds	r2, r0, #4
 80026ba:	4282      	cmp	r2, r0
 80026bc:	4180      	sbcs	r0, r0
 80026be:	4240      	negs	r0, r0
 80026c0:	1824      	adds	r4, r4, r0
 80026c2:	0010      	movs	r0, r2
 80026c4:	01e2      	lsls	r2, r4, #7
 80026c6:	d506      	bpl.n	80026d6 <__aeabi_dmul+0x15a>
 80026c8:	4b74      	ldr	r3, [pc, #464]	@ (800289c <__aeabi_dmul+0x320>)
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	401c      	ands	r4, r3
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	4694      	mov	ip, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4463      	add	r3, ip
 80026d6:	4a72      	ldr	r2, [pc, #456]	@ (80028a0 <__aeabi_dmul+0x324>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	dc6b      	bgt.n	80027b4 <__aeabi_dmul+0x238>
 80026dc:	0762      	lsls	r2, r4, #29
 80026de:	08c0      	lsrs	r0, r0, #3
 80026e0:	0264      	lsls	r4, r4, #9
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4302      	orrs	r2, r0
 80026e6:	0b24      	lsrs	r4, r4, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e79d      	b.n	8002628 <__aeabi_dmul+0xac>
 80026ec:	2190      	movs	r1, #144	@ 0x90
 80026ee:	0089      	lsls	r1, r1, #2
 80026f0:	420f      	tst	r7, r1
 80026f2:	d163      	bne.n	80027bc <__aeabi_dmul+0x240>
 80026f4:	2288      	movs	r2, #136	@ 0x88
 80026f6:	423a      	tst	r2, r7
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0x180>
 80026fa:	e0d7      	b.n	80028ac <__aeabi_dmul+0x330>
 80026fc:	9b00      	ldr	r3, [sp, #0]
 80026fe:	46a2      	mov	sl, r4
 8002700:	469b      	mov	fp, r3
 8002702:	4681      	mov	r9, r0
 8002704:	9602      	str	r6, [sp, #8]
 8002706:	e7bf      	b.n	8002688 <__aeabi_dmul+0x10c>
 8002708:	0023      	movs	r3, r4
 800270a:	4333      	orrs	r3, r6
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0x194>
 800270e:	e07f      	b.n	8002810 <__aeabi_dmul+0x294>
 8002710:	2c00      	cmp	r4, #0
 8002712:	d100      	bne.n	8002716 <__aeabi_dmul+0x19a>
 8002714:	e1ad      	b.n	8002a72 <__aeabi_dmul+0x4f6>
 8002716:	0020      	movs	r0, r4
 8002718:	f000 ff10 	bl	800353c <__clzsi2>
 800271c:	0002      	movs	r2, r0
 800271e:	0003      	movs	r3, r0
 8002720:	3a0b      	subs	r2, #11
 8002722:	201d      	movs	r0, #29
 8002724:	0019      	movs	r1, r3
 8002726:	1a82      	subs	r2, r0, r2
 8002728:	0030      	movs	r0, r6
 800272a:	3908      	subs	r1, #8
 800272c:	40d0      	lsrs	r0, r2
 800272e:	408c      	lsls	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	0030      	movs	r0, r6
 8002734:	4088      	lsls	r0, r1
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002738:	1aeb      	subs	r3, r5, r3
 800273a:	4694      	mov	ip, r2
 800273c:	4463      	add	r3, ip
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	4642      	mov	r2, r8
 8002744:	2600      	movs	r6, #0
 8002746:	2a0a      	cmp	r2, #10
 8002748:	dc00      	bgt.n	800274c <__aeabi_dmul+0x1d0>
 800274a:	e75a      	b.n	8002602 <__aeabi_dmul+0x86>
 800274c:	e79c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800274e:	4653      	mov	r3, sl
 8002750:	4303      	orrs	r3, r0
 8002752:	4699      	mov	r9, r3
 8002754:	d054      	beq.n	8002800 <__aeabi_dmul+0x284>
 8002756:	4653      	mov	r3, sl
 8002758:	2b00      	cmp	r3, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x1e2>
 800275c:	e177      	b.n	8002a4e <__aeabi_dmul+0x4d2>
 800275e:	4650      	mov	r0, sl
 8002760:	f000 feec 	bl	800353c <__clzsi2>
 8002764:	230b      	movs	r3, #11
 8002766:	425b      	negs	r3, r3
 8002768:	469c      	mov	ip, r3
 800276a:	0002      	movs	r2, r0
 800276c:	4484      	add	ip, r0
 800276e:	0011      	movs	r1, r2
 8002770:	4650      	mov	r0, sl
 8002772:	3908      	subs	r1, #8
 8002774:	4088      	lsls	r0, r1
 8002776:	231d      	movs	r3, #29
 8002778:	4680      	mov	r8, r0
 800277a:	4660      	mov	r0, ip
 800277c:	1a1b      	subs	r3, r3, r0
 800277e:	0020      	movs	r0, r4
 8002780:	40d8      	lsrs	r0, r3
 8002782:	0003      	movs	r3, r0
 8002784:	4640      	mov	r0, r8
 8002786:	4303      	orrs	r3, r0
 8002788:	469a      	mov	sl, r3
 800278a:	0023      	movs	r3, r4
 800278c:	408b      	lsls	r3, r1
 800278e:	4699      	mov	r9, r3
 8002790:	2300      	movs	r3, #0
 8002792:	4d44      	ldr	r5, [pc, #272]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002794:	4698      	mov	r8, r3
 8002796:	1aad      	subs	r5, r5, r2
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	e715      	b.n	80025c8 <__aeabi_dmul+0x4c>
 800279c:	4652      	mov	r2, sl
 800279e:	4302      	orrs	r2, r0
 80027a0:	4691      	mov	r9, r2
 80027a2:	d126      	bne.n	80027f2 <__aeabi_dmul+0x276>
 80027a4:	2200      	movs	r2, #0
 80027a6:	001d      	movs	r5, r3
 80027a8:	2302      	movs	r3, #2
 80027aa:	4692      	mov	sl, r2
 80027ac:	3208      	adds	r2, #8
 80027ae:	4690      	mov	r8, r2
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	e709      	b.n	80025c8 <__aeabi_dmul+0x4c>
 80027b4:	2400      	movs	r4, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <__aeabi_dmul+0x314>)
 80027ba:	e735      	b.n	8002628 <__aeabi_dmul+0xac>
 80027bc:	2300      	movs	r3, #0
 80027be:	2480      	movs	r4, #128	@ 0x80
 80027c0:	469b      	mov	fp, r3
 80027c2:	0324      	lsls	r4, r4, #12
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <__aeabi_dmul+0x314>)
 80027c6:	e72f      	b.n	8002628 <__aeabi_dmul+0xac>
 80027c8:	2202      	movs	r2, #2
 80027ca:	4641      	mov	r1, r8
 80027cc:	4311      	orrs	r1, r2
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4694      	mov	ip, r2
 80027d4:	002a      	movs	r2, r5
 80027d6:	4462      	add	r2, ip
 80027d8:	4688      	mov	r8, r1
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	290a      	cmp	r1, #10
 80027de:	dd00      	ble.n	80027e2 <__aeabi_dmul+0x266>
 80027e0:	e752      	b.n	8002688 <__aeabi_dmul+0x10c>
 80027e2:	465a      	mov	r2, fp
 80027e4:	2000      	movs	r0, #0
 80027e6:	9900      	ldr	r1, [sp, #0]
 80027e8:	0004      	movs	r4, r0
 80027ea:	404a      	eors	r2, r1
 80027ec:	4693      	mov	fp, r2
 80027ee:	2602      	movs	r6, #2
 80027f0:	e70b      	b.n	800260a <__aeabi_dmul+0x8e>
 80027f2:	220c      	movs	r2, #12
 80027f4:	001d      	movs	r5, r3
 80027f6:	2303      	movs	r3, #3
 80027f8:	4681      	mov	r9, r0
 80027fa:	4690      	mov	r8, r2
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	e6e3      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002800:	2300      	movs	r3, #0
 8002802:	469a      	mov	sl, r3
 8002804:	3304      	adds	r3, #4
 8002806:	4698      	mov	r8, r3
 8002808:	3b03      	subs	r3, #3
 800280a:	2500      	movs	r5, #0
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	e6db      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002810:	4642      	mov	r2, r8
 8002812:	3301      	adds	r3, #1
 8002814:	431a      	orrs	r2, r3
 8002816:	002b      	movs	r3, r5
 8002818:	4690      	mov	r8, r2
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	9201      	str	r2, [sp, #4]
 800281e:	4642      	mov	r2, r8
 8002820:	2400      	movs	r4, #0
 8002822:	2000      	movs	r0, #0
 8002824:	2601      	movs	r6, #1
 8002826:	2a0a      	cmp	r2, #10
 8002828:	dc00      	bgt.n	800282c <__aeabi_dmul+0x2b0>
 800282a:	e6ea      	b.n	8002602 <__aeabi_dmul+0x86>
 800282c:	e72c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800282e:	2201      	movs	r2, #1
 8002830:	1ad2      	subs	r2, r2, r3
 8002832:	2a38      	cmp	r2, #56	@ 0x38
 8002834:	dd00      	ble.n	8002838 <__aeabi_dmul+0x2bc>
 8002836:	e6f4      	b.n	8002622 <__aeabi_dmul+0xa6>
 8002838:	2a1f      	cmp	r2, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dmul+0x2c2>
 800283c:	e12a      	b.n	8002a94 <__aeabi_dmul+0x518>
 800283e:	211f      	movs	r1, #31
 8002840:	4249      	negs	r1, r1
 8002842:	1acb      	subs	r3, r1, r3
 8002844:	0021      	movs	r1, r4
 8002846:	40d9      	lsrs	r1, r3
 8002848:	000b      	movs	r3, r1
 800284a:	2a20      	cmp	r2, #32
 800284c:	d005      	beq.n	800285a <__aeabi_dmul+0x2de>
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <__aeabi_dmul+0x32c>)
 8002850:	9d01      	ldr	r5, [sp, #4]
 8002852:	4694      	mov	ip, r2
 8002854:	4465      	add	r5, ip
 8002856:	40ac      	lsls	r4, r5
 8002858:	4320      	orrs	r0, r4
 800285a:	1e42      	subs	r2, r0, #1
 800285c:	4190      	sbcs	r0, r2
 800285e:	4318      	orrs	r0, r3
 8002860:	2307      	movs	r3, #7
 8002862:	0019      	movs	r1, r3
 8002864:	2400      	movs	r4, #0
 8002866:	4001      	ands	r1, r0
 8002868:	4203      	tst	r3, r0
 800286a:	d00c      	beq.n	8002886 <__aeabi_dmul+0x30a>
 800286c:	230f      	movs	r3, #15
 800286e:	4003      	ands	r3, r0
 8002870:	2b04      	cmp	r3, #4
 8002872:	d100      	bne.n	8002876 <__aeabi_dmul+0x2fa>
 8002874:	e140      	b.n	8002af8 <__aeabi_dmul+0x57c>
 8002876:	1d03      	adds	r3, r0, #4
 8002878:	4283      	cmp	r3, r0
 800287a:	41a4      	sbcs	r4, r4
 800287c:	0018      	movs	r0, r3
 800287e:	4264      	negs	r4, r4
 8002880:	0761      	lsls	r1, r4, #29
 8002882:	0264      	lsls	r4, r4, #9
 8002884:	0b24      	lsrs	r4, r4, #12
 8002886:	08c2      	lsrs	r2, r0, #3
 8002888:	2300      	movs	r3, #0
 800288a:	430a      	orrs	r2, r1
 800288c:	e6cc      	b.n	8002628 <__aeabi_dmul+0xac>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	000007ff 	.word	0x000007ff
 8002894:	fffffc01 	.word	0xfffffc01
 8002898:	000003ff 	.word	0x000003ff
 800289c:	feffffff 	.word	0xfeffffff
 80028a0:	000007fe 	.word	0x000007fe
 80028a4:	fffffc0d 	.word	0xfffffc0d
 80028a8:	0000043e 	.word	0x0000043e
 80028ac:	4649      	mov	r1, r9
 80028ae:	464a      	mov	r2, r9
 80028b0:	0409      	lsls	r1, r1, #16
 80028b2:	0c09      	lsrs	r1, r1, #16
 80028b4:	000d      	movs	r5, r1
 80028b6:	0c16      	lsrs	r6, r2, #16
 80028b8:	0c02      	lsrs	r2, r0, #16
 80028ba:	0400      	lsls	r0, r0, #16
 80028bc:	0c00      	lsrs	r0, r0, #16
 80028be:	4345      	muls	r5, r0
 80028c0:	46ac      	mov	ip, r5
 80028c2:	0005      	movs	r5, r0
 80028c4:	4375      	muls	r5, r6
 80028c6:	46a8      	mov	r8, r5
 80028c8:	0015      	movs	r5, r2
 80028ca:	000f      	movs	r7, r1
 80028cc:	4375      	muls	r5, r6
 80028ce:	9200      	str	r2, [sp, #0]
 80028d0:	9502      	str	r5, [sp, #8]
 80028d2:	002a      	movs	r2, r5
 80028d4:	9d00      	ldr	r5, [sp, #0]
 80028d6:	436f      	muls	r7, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	0c2d      	lsrs	r5, r5, #16
 80028dc:	46a9      	mov	r9, r5
 80028de:	4447      	add	r7, r8
 80028e0:	444f      	add	r7, r9
 80028e2:	45b8      	cmp	r8, r7
 80028e4:	d905      	bls.n	80028f2 <__aeabi_dmul+0x376>
 80028e6:	0015      	movs	r5, r2
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	0252      	lsls	r2, r2, #9
 80028ec:	4690      	mov	r8, r2
 80028ee:	4445      	add	r5, r8
 80028f0:	9502      	str	r5, [sp, #8]
 80028f2:	0c3d      	lsrs	r5, r7, #16
 80028f4:	9503      	str	r5, [sp, #12]
 80028f6:	4665      	mov	r5, ip
 80028f8:	042d      	lsls	r5, r5, #16
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	0c2d      	lsrs	r5, r5, #16
 80028fe:	46ac      	mov	ip, r5
 8002900:	003d      	movs	r5, r7
 8002902:	4465      	add	r5, ip
 8002904:	9504      	str	r5, [sp, #16]
 8002906:	0c25      	lsrs	r5, r4, #16
 8002908:	0424      	lsls	r4, r4, #16
 800290a:	0c24      	lsrs	r4, r4, #16
 800290c:	46ac      	mov	ip, r5
 800290e:	0025      	movs	r5, r4
 8002910:	4375      	muls	r5, r6
 8002912:	46a8      	mov	r8, r5
 8002914:	4665      	mov	r5, ip
 8002916:	000f      	movs	r7, r1
 8002918:	4369      	muls	r1, r5
 800291a:	4441      	add	r1, r8
 800291c:	4689      	mov	r9, r1
 800291e:	4367      	muls	r7, r4
 8002920:	0c39      	lsrs	r1, r7, #16
 8002922:	4449      	add	r1, r9
 8002924:	436e      	muls	r6, r5
 8002926:	4588      	cmp	r8, r1
 8002928:	d903      	bls.n	8002932 <__aeabi_dmul+0x3b6>
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	0252      	lsls	r2, r2, #9
 800292e:	4690      	mov	r8, r2
 8002930:	4446      	add	r6, r8
 8002932:	0c0d      	lsrs	r5, r1, #16
 8002934:	46a8      	mov	r8, r5
 8002936:	0035      	movs	r5, r6
 8002938:	4445      	add	r5, r8
 800293a:	9505      	str	r5, [sp, #20]
 800293c:	9d03      	ldr	r5, [sp, #12]
 800293e:	043f      	lsls	r7, r7, #16
 8002940:	46a8      	mov	r8, r5
 8002942:	0c3f      	lsrs	r7, r7, #16
 8002944:	0409      	lsls	r1, r1, #16
 8002946:	19c9      	adds	r1, r1, r7
 8002948:	4488      	add	r8, r1
 800294a:	4645      	mov	r5, r8
 800294c:	9503      	str	r5, [sp, #12]
 800294e:	4655      	mov	r5, sl
 8002950:	042e      	lsls	r6, r5, #16
 8002952:	0c36      	lsrs	r6, r6, #16
 8002954:	0c2f      	lsrs	r7, r5, #16
 8002956:	0035      	movs	r5, r6
 8002958:	4345      	muls	r5, r0
 800295a:	4378      	muls	r0, r7
 800295c:	4681      	mov	r9, r0
 800295e:	0038      	movs	r0, r7
 8002960:	46a8      	mov	r8, r5
 8002962:	0c2d      	lsrs	r5, r5, #16
 8002964:	46aa      	mov	sl, r5
 8002966:	9a00      	ldr	r2, [sp, #0]
 8002968:	4350      	muls	r0, r2
 800296a:	4372      	muls	r2, r6
 800296c:	444a      	add	r2, r9
 800296e:	4452      	add	r2, sl
 8002970:	4591      	cmp	r9, r2
 8002972:	d903      	bls.n	800297c <__aeabi_dmul+0x400>
 8002974:	2580      	movs	r5, #128	@ 0x80
 8002976:	026d      	lsls	r5, r5, #9
 8002978:	46a9      	mov	r9, r5
 800297a:	4448      	add	r0, r9
 800297c:	0c15      	lsrs	r5, r2, #16
 800297e:	46a9      	mov	r9, r5
 8002980:	4645      	mov	r5, r8
 8002982:	042d      	lsls	r5, r5, #16
 8002984:	0c2d      	lsrs	r5, r5, #16
 8002986:	46a8      	mov	r8, r5
 8002988:	4665      	mov	r5, ip
 800298a:	437d      	muls	r5, r7
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	4448      	add	r0, r9
 8002990:	4490      	add	r8, r2
 8002992:	46a9      	mov	r9, r5
 8002994:	0032      	movs	r2, r6
 8002996:	4665      	mov	r5, ip
 8002998:	4362      	muls	r2, r4
 800299a:	436e      	muls	r6, r5
 800299c:	437c      	muls	r4, r7
 800299e:	0c17      	lsrs	r7, r2, #16
 80029a0:	1936      	adds	r6, r6, r4
 80029a2:	19bf      	adds	r7, r7, r6
 80029a4:	42bc      	cmp	r4, r7
 80029a6:	d903      	bls.n	80029b0 <__aeabi_dmul+0x434>
 80029a8:	2480      	movs	r4, #128	@ 0x80
 80029aa:	0264      	lsls	r4, r4, #9
 80029ac:	46a4      	mov	ip, r4
 80029ae:	44e1      	add	r9, ip
 80029b0:	9c02      	ldr	r4, [sp, #8]
 80029b2:	9e03      	ldr	r6, [sp, #12]
 80029b4:	46a4      	mov	ip, r4
 80029b6:	9d05      	ldr	r5, [sp, #20]
 80029b8:	4466      	add	r6, ip
 80029ba:	428e      	cmp	r6, r1
 80029bc:	4189      	sbcs	r1, r1
 80029be:	46ac      	mov	ip, r5
 80029c0:	0412      	lsls	r2, r2, #16
 80029c2:	043c      	lsls	r4, r7, #16
 80029c4:	0c12      	lsrs	r2, r2, #16
 80029c6:	18a2      	adds	r2, r4, r2
 80029c8:	4462      	add	r2, ip
 80029ca:	4249      	negs	r1, r1
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4446      	add	r6, r8
 80029d0:	46a4      	mov	ip, r4
 80029d2:	4546      	cmp	r6, r8
 80029d4:	41a4      	sbcs	r4, r4
 80029d6:	4682      	mov	sl, r0
 80029d8:	4264      	negs	r4, r4
 80029da:	46a0      	mov	r8, r4
 80029dc:	42aa      	cmp	r2, r5
 80029de:	4192      	sbcs	r2, r2
 80029e0:	458c      	cmp	ip, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	44e2      	add	sl, ip
 80029e6:	44d0      	add	r8, sl
 80029e8:	4249      	negs	r1, r1
 80029ea:	4252      	negs	r2, r2
 80029ec:	430a      	orrs	r2, r1
 80029ee:	45a0      	cmp	r8, r4
 80029f0:	41a4      	sbcs	r4, r4
 80029f2:	4582      	cmp	sl, r0
 80029f4:	4189      	sbcs	r1, r1
 80029f6:	4264      	negs	r4, r4
 80029f8:	4249      	negs	r1, r1
 80029fa:	430c      	orrs	r4, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	0c3f      	lsrs	r7, r7, #16
 8002a00:	19d2      	adds	r2, r2, r7
 8002a02:	1912      	adds	r2, r2, r4
 8002a04:	0dcc      	lsrs	r4, r1, #23
 8002a06:	9904      	ldr	r1, [sp, #16]
 8002a08:	0270      	lsls	r0, r6, #9
 8002a0a:	4308      	orrs	r0, r1
 8002a0c:	1e41      	subs	r1, r0, #1
 8002a0e:	4188      	sbcs	r0, r1
 8002a10:	4641      	mov	r1, r8
 8002a12:	444a      	add	r2, r9
 8002a14:	0df6      	lsrs	r6, r6, #23
 8002a16:	0252      	lsls	r2, r2, #9
 8002a18:	4330      	orrs	r0, r6
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	4314      	orrs	r4, r2
 8002a1e:	4308      	orrs	r0, r1
 8002a20:	01d2      	lsls	r2, r2, #7
 8002a22:	d535      	bpl.n	8002a90 <__aeabi_dmul+0x514>
 8002a24:	2201      	movs	r2, #1
 8002a26:	0843      	lsrs	r3, r0, #1
 8002a28:	4002      	ands	r2, r0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	07e0      	lsls	r0, r4, #31
 8002a2e:	4318      	orrs	r0, r3
 8002a30:	0864      	lsrs	r4, r4, #1
 8002a32:	e634      	b.n	800269e <__aeabi_dmul+0x122>
 8002a34:	9b00      	ldr	r3, [sp, #0]
 8002a36:	46a2      	mov	sl, r4
 8002a38:	469b      	mov	fp, r3
 8002a3a:	4681      	mov	r9, r0
 8002a3c:	2480      	movs	r4, #128	@ 0x80
 8002a3e:	4653      	mov	r3, sl
 8002a40:	0324      	lsls	r4, r4, #12
 8002a42:	431c      	orrs	r4, r3
 8002a44:	0324      	lsls	r4, r4, #12
 8002a46:	464a      	mov	r2, r9
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002a4a:	0b24      	lsrs	r4, r4, #12
 8002a4c:	e5ec      	b.n	8002628 <__aeabi_dmul+0xac>
 8002a4e:	f000 fd75 	bl	800353c <__clzsi2>
 8002a52:	2315      	movs	r3, #21
 8002a54:	469c      	mov	ip, r3
 8002a56:	4484      	add	ip, r0
 8002a58:	0002      	movs	r2, r0
 8002a5a:	4663      	mov	r3, ip
 8002a5c:	3220      	adds	r2, #32
 8002a5e:	2b1c      	cmp	r3, #28
 8002a60:	dc00      	bgt.n	8002a64 <__aeabi_dmul+0x4e8>
 8002a62:	e684      	b.n	800276e <__aeabi_dmul+0x1f2>
 8002a64:	2300      	movs	r3, #0
 8002a66:	4699      	mov	r9, r3
 8002a68:	0023      	movs	r3, r4
 8002a6a:	3808      	subs	r0, #8
 8002a6c:	4083      	lsls	r3, r0
 8002a6e:	469a      	mov	sl, r3
 8002a70:	e68e      	b.n	8002790 <__aeabi_dmul+0x214>
 8002a72:	f000 fd63 	bl	800353c <__clzsi2>
 8002a76:	0002      	movs	r2, r0
 8002a78:	0003      	movs	r3, r0
 8002a7a:	3215      	adds	r2, #21
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	2a1c      	cmp	r2, #28
 8002a80:	dc00      	bgt.n	8002a84 <__aeabi_dmul+0x508>
 8002a82:	e64e      	b.n	8002722 <__aeabi_dmul+0x1a6>
 8002a84:	0002      	movs	r2, r0
 8002a86:	0034      	movs	r4, r6
 8002a88:	3a08      	subs	r2, #8
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4094      	lsls	r4, r2
 8002a8e:	e652      	b.n	8002736 <__aeabi_dmul+0x1ba>
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	e604      	b.n	800269e <__aeabi_dmul+0x122>
 8002a94:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <__aeabi_dmul+0x58c>)
 8002a96:	0021      	movs	r1, r4
 8002a98:	469c      	mov	ip, r3
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	9d01      	ldr	r5, [sp, #4]
 8002a9e:	40d3      	lsrs	r3, r2
 8002aa0:	4465      	add	r5, ip
 8002aa2:	40a9      	lsls	r1, r5
 8002aa4:	4319      	orrs	r1, r3
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	40ab      	lsls	r3, r5
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	4183      	sbcs	r3, r0
 8002aae:	4319      	orrs	r1, r3
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	40d4      	lsrs	r4, r2
 8002ab4:	074b      	lsls	r3, r1, #29
 8002ab6:	d009      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ab8:	230f      	movs	r3, #15
 8002aba:	400b      	ands	r3, r1
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d005      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ac0:	1d0b      	adds	r3, r1, #4
 8002ac2:	428b      	cmp	r3, r1
 8002ac4:	4180      	sbcs	r0, r0
 8002ac6:	4240      	negs	r0, r0
 8002ac8:	1824      	adds	r4, r4, r0
 8002aca:	0018      	movs	r0, r3
 8002acc:	0223      	lsls	r3, r4, #8
 8002ace:	d400      	bmi.n	8002ad2 <__aeabi_dmul+0x556>
 8002ad0:	e6d6      	b.n	8002880 <__aeabi_dmul+0x304>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	e5a6      	b.n	8002628 <__aeabi_dmul+0xac>
 8002ada:	290f      	cmp	r1, #15
 8002adc:	d1aa      	bne.n	8002a34 <__aeabi_dmul+0x4b8>
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	421a      	tst	r2, r3
 8002ae6:	d0a9      	beq.n	8002a3c <__aeabi_dmul+0x4c0>
 8002ae8:	421c      	tst	r4, r3
 8002aea:	d1a7      	bne.n	8002a3c <__aeabi_dmul+0x4c0>
 8002aec:	431c      	orrs	r4, r3
 8002aee:	9b00      	ldr	r3, [sp, #0]
 8002af0:	0002      	movs	r2, r0
 8002af2:	469b      	mov	fp, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002af6:	e597      	b.n	8002628 <__aeabi_dmul+0xac>
 8002af8:	2400      	movs	r4, #0
 8002afa:	e6c1      	b.n	8002880 <__aeabi_dmul+0x304>
 8002afc:	2400      	movs	r4, #0
 8002afe:	4b01      	ldr	r3, [pc, #4]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002b00:	0022      	movs	r2, r4
 8002b02:	e591      	b.n	8002628 <__aeabi_dmul+0xac>
 8002b04:	000007ff 	.word	0x000007ff
 8002b08:	0000041e 	.word	0x0000041e

08002b0c <__aeabi_dsub>:
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	464e      	mov	r6, r9
 8002b10:	4645      	mov	r5, r8
 8002b12:	46de      	mov	lr, fp
 8002b14:	4657      	mov	r7, sl
 8002b16:	b5e0      	push	{r5, r6, r7, lr}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	9000      	str	r0, [sp, #0]
 8002b1c:	9101      	str	r1, [sp, #4]
 8002b1e:	030c      	lsls	r4, r1, #12
 8002b20:	004f      	lsls	r7, r1, #1
 8002b22:	0fce      	lsrs	r6, r1, #31
 8002b24:	0a61      	lsrs	r1, r4, #9
 8002b26:	9c00      	ldr	r4, [sp, #0]
 8002b28:	46b0      	mov	r8, r6
 8002b2a:	0f64      	lsrs	r4, r4, #29
 8002b2c:	430c      	orrs	r4, r1
 8002b2e:	9900      	ldr	r1, [sp, #0]
 8002b30:	0d7f      	lsrs	r7, r7, #21
 8002b32:	00c8      	lsls	r0, r1, #3
 8002b34:	0011      	movs	r1, r2
 8002b36:	001a      	movs	r2, r3
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	469c      	mov	ip, r3
 8002b3c:	9100      	str	r1, [sp, #0]
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	0051      	lsls	r1, r2, #1
 8002b42:	0d4b      	lsrs	r3, r1, #21
 8002b44:	4699      	mov	r9, r3
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	9d00      	ldr	r5, [sp, #0]
 8002b4a:	0fd9      	lsrs	r1, r3, #31
 8002b4c:	4663      	mov	r3, ip
 8002b4e:	0f6a      	lsrs	r2, r5, #29
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	4313      	orrs	r3, r2
 8002b54:	00ea      	lsls	r2, r5, #3
 8002b56:	4694      	mov	ip, r2
 8002b58:	4693      	mov	fp, r2
 8002b5a:	4ac1      	ldr	r2, [pc, #772]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002b5c:	9003      	str	r0, [sp, #12]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	4591      	cmp	r9, r2
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x5a>
 8002b64:	e0cd      	b.n	8002d02 <__aeabi_dsub+0x1f6>
 8002b66:	2501      	movs	r5, #1
 8002b68:	4069      	eors	r1, r5
 8002b6a:	464d      	mov	r5, r9
 8002b6c:	1b7d      	subs	r5, r7, r5
 8002b6e:	46aa      	mov	sl, r5
 8002b70:	428e      	cmp	r6, r1
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x6a>
 8002b74:	e080      	b.n	8002c78 <__aeabi_dsub+0x16c>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	dc00      	bgt.n	8002b7c <__aeabi_dsub+0x70>
 8002b7a:	e335      	b.n	80031e8 <__aeabi_dsub+0x6dc>
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x78>
 8002b82:	e0df      	b.n	8002d44 <__aeabi_dsub+0x238>
 8002b84:	4297      	cmp	r7, r2
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x7e>
 8002b88:	e194      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002b8a:	4652      	mov	r2, sl
 8002b8c:	2501      	movs	r5, #1
 8002b8e:	2a38      	cmp	r2, #56	@ 0x38
 8002b90:	dc19      	bgt.n	8002bc6 <__aeabi_dsub+0xba>
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	9b02      	ldr	r3, [sp, #8]
 8002b96:	0412      	lsls	r2, r2, #16
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	4652      	mov	r2, sl
 8002b9e:	2a1f      	cmp	r2, #31
 8002ba0:	dd00      	ble.n	8002ba4 <__aeabi_dsub+0x98>
 8002ba2:	e1e3      	b.n	8002f6c <__aeabi_dsub+0x460>
 8002ba4:	4653      	mov	r3, sl
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	4661      	mov	r1, ip
 8002baa:	9d02      	ldr	r5, [sp, #8]
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	4095      	lsls	r5, r2
 8002bb0:	40d9      	lsrs	r1, r3
 8002bb2:	430d      	orrs	r5, r1
 8002bb4:	4661      	mov	r1, ip
 8002bb6:	4091      	lsls	r1, r2
 8002bb8:	000a      	movs	r2, r1
 8002bba:	1e51      	subs	r1, r2, #1
 8002bbc:	418a      	sbcs	r2, r1
 8002bbe:	4315      	orrs	r5, r2
 8002bc0:	9a02      	ldr	r2, [sp, #8]
 8002bc2:	40da      	lsrs	r2, r3
 8002bc4:	1aa4      	subs	r4, r4, r2
 8002bc6:	1b45      	subs	r5, r0, r5
 8002bc8:	42a8      	cmp	r0, r5
 8002bca:	4180      	sbcs	r0, r0
 8002bcc:	4240      	negs	r0, r0
 8002bce:	1a24      	subs	r4, r4, r0
 8002bd0:	0223      	lsls	r3, r4, #8
 8002bd2:	d400      	bmi.n	8002bd6 <__aeabi_dsub+0xca>
 8002bd4:	e13d      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002bd6:	0264      	lsls	r4, r4, #9
 8002bd8:	0a64      	lsrs	r4, r4, #9
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0xd4>
 8002bde:	e147      	b.n	8002e70 <__aeabi_dsub+0x364>
 8002be0:	0020      	movs	r0, r4
 8002be2:	f000 fcab 	bl	800353c <__clzsi2>
 8002be6:	0003      	movs	r3, r0
 8002be8:	3b08      	subs	r3, #8
 8002bea:	2120      	movs	r1, #32
 8002bec:	0028      	movs	r0, r5
 8002bee:	1aca      	subs	r2, r1, r3
 8002bf0:	40d0      	lsrs	r0, r2
 8002bf2:	409c      	lsls	r4, r3
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	409d      	lsls	r5, r3
 8002bf8:	4322      	orrs	r2, r4
 8002bfa:	429f      	cmp	r7, r3
 8002bfc:	dd00      	ble.n	8002c00 <__aeabi_dsub+0xf4>
 8002bfe:	e177      	b.n	8002ef0 <__aeabi_dsub+0x3e4>
 8002c00:	1bd8      	subs	r0, r3, r7
 8002c02:	3001      	adds	r0, #1
 8002c04:	1a09      	subs	r1, r1, r0
 8002c06:	002c      	movs	r4, r5
 8002c08:	408d      	lsls	r5, r1
 8002c0a:	40c4      	lsrs	r4, r0
 8002c0c:	1e6b      	subs	r3, r5, #1
 8002c0e:	419d      	sbcs	r5, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	40c2      	lsrs	r2, r0
 8002c14:	408b      	lsls	r3, r1
 8002c16:	4325      	orrs	r5, r4
 8002c18:	2700      	movs	r7, #0
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	431d      	orrs	r5, r3
 8002c1e:	076b      	lsls	r3, r5, #29
 8002c20:	d009      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c22:	230f      	movs	r3, #15
 8002c24:	402b      	ands	r3, r5
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d005      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c2a:	1d2b      	adds	r3, r5, #4
 8002c2c:	42ab      	cmp	r3, r5
 8002c2e:	41ad      	sbcs	r5, r5
 8002c30:	426d      	negs	r5, r5
 8002c32:	1964      	adds	r4, r4, r5
 8002c34:	001d      	movs	r5, r3
 8002c36:	0223      	lsls	r3, r4, #8
 8002c38:	d400      	bmi.n	8002c3c <__aeabi_dsub+0x130>
 8002c3a:	e140      	b.n	8002ebe <__aeabi_dsub+0x3b2>
 8002c3c:	4a88      	ldr	r2, [pc, #544]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002c3e:	3701      	adds	r7, #1
 8002c40:	4297      	cmp	r7, r2
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dsub+0x13a>
 8002c44:	e101      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002c46:	2601      	movs	r6, #1
 8002c48:	4643      	mov	r3, r8
 8002c4a:	4986      	ldr	r1, [pc, #536]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002c4c:	08ed      	lsrs	r5, r5, #3
 8002c4e:	4021      	ands	r1, r4
 8002c50:	074a      	lsls	r2, r1, #29
 8002c52:	432a      	orrs	r2, r5
 8002c54:	057c      	lsls	r4, r7, #21
 8002c56:	024d      	lsls	r5, r1, #9
 8002c58:	0b2d      	lsrs	r5, r5, #12
 8002c5a:	0d64      	lsrs	r4, r4, #21
 8002c5c:	401e      	ands	r6, r3
 8002c5e:	0524      	lsls	r4, r4, #20
 8002c60:	432c      	orrs	r4, r5
 8002c62:	07f6      	lsls	r6, r6, #31
 8002c64:	4334      	orrs	r4, r6
 8002c66:	0010      	movs	r0, r2
 8002c68:	0021      	movs	r1, r4
 8002c6a:	b005      	add	sp, #20
 8002c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c6e:	46bb      	mov	fp, r7
 8002c70:	46b2      	mov	sl, r6
 8002c72:	46a9      	mov	r9, r5
 8002c74:	46a0      	mov	r8, r4
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x172>
 8002c7c:	e2d0      	b.n	8003220 <__aeabi_dsub+0x714>
 8002c7e:	4649      	mov	r1, r9
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x17a>
 8002c84:	e0d4      	b.n	8002e30 <__aeabi_dsub+0x324>
 8002c86:	4661      	mov	r1, ip
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x184>
 8002c8e:	e12b      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002c90:	1e69      	subs	r1, r5, #1
 8002c92:	2d01      	cmp	r5, #1
 8002c94:	d100      	bne.n	8002c98 <__aeabi_dsub+0x18c>
 8002c96:	e1d9      	b.n	800304c <__aeabi_dsub+0x540>
 8002c98:	4295      	cmp	r5, r2
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x192>
 8002c9c:	e10a      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002c9e:	2501      	movs	r5, #1
 8002ca0:	2938      	cmp	r1, #56	@ 0x38
 8002ca2:	dc17      	bgt.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002ca4:	468a      	mov	sl, r1
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	2b1f      	cmp	r3, #31
 8002caa:	dd00      	ble.n	8002cae <__aeabi_dsub+0x1a2>
 8002cac:	e1e7      	b.n	800307e <__aeabi_dsub+0x572>
 8002cae:	2220      	movs	r2, #32
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	9b02      	ldr	r3, [sp, #8]
 8002cb4:	4661      	mov	r1, ip
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	001d      	movs	r5, r3
 8002cba:	4653      	mov	r3, sl
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	430d      	orrs	r5, r1
 8002cc6:	1e51      	subs	r1, r2, #1
 8002cc8:	418a      	sbcs	r2, r1
 8002cca:	4653      	mov	r3, sl
 8002ccc:	4315      	orrs	r5, r2
 8002cce:	9a02      	ldr	r2, [sp, #8]
 8002cd0:	40da      	lsrs	r2, r3
 8002cd2:	18a4      	adds	r4, r4, r2
 8002cd4:	182d      	adds	r5, r5, r0
 8002cd6:	4285      	cmp	r5, r0
 8002cd8:	4180      	sbcs	r0, r0
 8002cda:	4240      	negs	r0, r0
 8002cdc:	1824      	adds	r4, r4, r0
 8002cde:	0223      	lsls	r3, r4, #8
 8002ce0:	d400      	bmi.n	8002ce4 <__aeabi_dsub+0x1d8>
 8002ce2:	e0b6      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002ce6:	3701      	adds	r7, #1
 8002ce8:	429f      	cmp	r7, r3
 8002cea:	d100      	bne.n	8002cee <__aeabi_dsub+0x1e2>
 8002cec:	e0ad      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002cf2:	086a      	lsrs	r2, r5, #1
 8002cf4:	401c      	ands	r4, r3
 8002cf6:	4029      	ands	r1, r5
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	07e5      	lsls	r5, r4, #31
 8002cfc:	4315      	orrs	r5, r2
 8002cfe:	0864      	lsrs	r4, r4, #1
 8002d00:	e78d      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002d02:	4a59      	ldr	r2, [pc, #356]	@ (8002e68 <__aeabi_dsub+0x35c>)
 8002d04:	9b02      	ldr	r3, [sp, #8]
 8002d06:	4692      	mov	sl, r2
 8002d08:	4662      	mov	r2, ip
 8002d0a:	44ba      	add	sl, r7
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	d02c      	beq.n	8002d6a <__aeabi_dsub+0x25e>
 8002d10:	428e      	cmp	r6, r1
 8002d12:	d02e      	beq.n	8002d72 <__aeabi_dsub+0x266>
 8002d14:	4652      	mov	r2, sl
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d060      	beq.n	8002ddc <__aeabi_dsub+0x2d0>
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d100      	bne.n	8002d20 <__aeabi_dsub+0x214>
 8002d1e:	e0db      	b.n	8002ed8 <__aeabi_dsub+0x3cc>
 8002d20:	4663      	mov	r3, ip
 8002d22:	000e      	movs	r6, r1
 8002d24:	9c02      	ldr	r4, [sp, #8]
 8002d26:	08d8      	lsrs	r0, r3, #3
 8002d28:	0762      	lsls	r2, r4, #29
 8002d2a:	4302      	orrs	r2, r0
 8002d2c:	08e4      	lsrs	r4, r4, #3
 8002d2e:	0013      	movs	r3, r2
 8002d30:	4323      	orrs	r3, r4
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x22a>
 8002d34:	e254      	b.n	80031e0 <__aeabi_dsub+0x6d4>
 8002d36:	2580      	movs	r5, #128	@ 0x80
 8002d38:	032d      	lsls	r5, r5, #12
 8002d3a:	4325      	orrs	r5, r4
 8002d3c:	032d      	lsls	r5, r5, #12
 8002d3e:	4c48      	ldr	r4, [pc, #288]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d40:	0b2d      	lsrs	r5, r5, #12
 8002d42:	e78c      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002d44:	4661      	mov	r1, ip
 8002d46:	9b02      	ldr	r3, [sp, #8]
 8002d48:	4319      	orrs	r1, r3
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x242>
 8002d4c:	e0cc      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002d4e:	0029      	movs	r1, r5
 8002d50:	3901      	subs	r1, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x24c>
 8002d56:	e188      	b.n	800306a <__aeabi_dsub+0x55e>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x252>
 8002d5c:	e0aa      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dd00      	ble.n	8002d66 <__aeabi_dsub+0x25a>
 8002d64:	e72f      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002d66:	468a      	mov	sl, r1
 8002d68:	e718      	b.n	8002b9c <__aeabi_dsub+0x90>
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4051      	eors	r1, r2
 8002d6e:	428e      	cmp	r6, r1
 8002d70:	d1d0      	bne.n	8002d14 <__aeabi_dsub+0x208>
 8002d72:	4653      	mov	r3, sl
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x26e>
 8002d78:	e0be      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	d000      	beq.n	8002d80 <__aeabi_dsub+0x274>
 8002d7e:	e138      	b.n	8002ff2 <__aeabi_dsub+0x4e6>
 8002d80:	46ca      	mov	sl, r9
 8002d82:	0022      	movs	r2, r4
 8002d84:	4302      	orrs	r2, r0
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x27e>
 8002d88:	e1e2      	b.n	8003150 <__aeabi_dsub+0x644>
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	1e59      	subs	r1, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d100      	bne.n	8002d94 <__aeabi_dsub+0x288>
 8002d92:	e20d      	b.n	80031b0 <__aeabi_dsub+0x6a4>
 8002d94:	4a32      	ldr	r2, [pc, #200]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d96:	4592      	cmp	sl, r2
 8002d98:	d100      	bne.n	8002d9c <__aeabi_dsub+0x290>
 8002d9a:	e1d2      	b.n	8003142 <__aeabi_dsub+0x636>
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	2938      	cmp	r1, #56	@ 0x38
 8002da0:	dc13      	bgt.n	8002dca <__aeabi_dsub+0x2be>
 8002da2:	291f      	cmp	r1, #31
 8002da4:	dd00      	ble.n	8002da8 <__aeabi_dsub+0x29c>
 8002da6:	e1ee      	b.n	8003186 <__aeabi_dsub+0x67a>
 8002da8:	2220      	movs	r2, #32
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	1a52      	subs	r2, r2, r1
 8002dae:	0025      	movs	r5, r4
 8002db0:	0007      	movs	r7, r0
 8002db2:	469a      	mov	sl, r3
 8002db4:	40cc      	lsrs	r4, r1
 8002db6:	4090      	lsls	r0, r2
 8002db8:	4095      	lsls	r5, r2
 8002dba:	40cf      	lsrs	r7, r1
 8002dbc:	44a2      	add	sl, r4
 8002dbe:	1e42      	subs	r2, r0, #1
 8002dc0:	4190      	sbcs	r0, r2
 8002dc2:	4653      	mov	r3, sl
 8002dc4:	432f      	orrs	r7, r5
 8002dc6:	4307      	orrs	r7, r0
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	003d      	movs	r5, r7
 8002dcc:	4465      	add	r5, ip
 8002dce:	4565      	cmp	r5, ip
 8002dd0:	4192      	sbcs	r2, r2
 8002dd2:	9b02      	ldr	r3, [sp, #8]
 8002dd4:	4252      	negs	r2, r2
 8002dd6:	464f      	mov	r7, r9
 8002dd8:	18d4      	adds	r4, r2, r3
 8002dda:	e780      	b.n	8002cde <__aeabi_dsub+0x1d2>
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <__aeabi_dsub+0x360>)
 8002dde:	1c7d      	adds	r5, r7, #1
 8002de0:	4215      	tst	r5, r2
 8002de2:	d000      	beq.n	8002de6 <__aeabi_dsub+0x2da>
 8002de4:	e0aa      	b.n	8002f3c <__aeabi_dsub+0x430>
 8002de6:	4662      	mov	r2, ip
 8002de8:	0025      	movs	r5, r4
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	4305      	orrs	r5, r0
 8002dee:	431a      	orrs	r2, r3
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	d000      	beq.n	8002df6 <__aeabi_dsub+0x2ea>
 8002df4:	e0f5      	b.n	8002fe2 <__aeabi_dsub+0x4d6>
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x2f0>
 8002dfa:	e16b      	b.n	80030d4 <__aeabi_dsub+0x5c8>
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d100      	bne.n	8002e02 <__aeabi_dsub+0x2f6>
 8002e00:	e152      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002e02:	4663      	mov	r3, ip
 8002e04:	1ac5      	subs	r5, r0, r3
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	1ae2      	subs	r2, r4, r3
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	419b      	sbcs	r3, r3
 8002e0e:	425b      	negs	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	d400      	bmi.n	8002e18 <__aeabi_dsub+0x30c>
 8002e16:	e1d5      	b.n	80031c4 <__aeabi_dsub+0x6b8>
 8002e18:	4663      	mov	r3, ip
 8002e1a:	1a1d      	subs	r5, r3, r0
 8002e1c:	45ac      	cmp	ip, r5
 8002e1e:	4192      	sbcs	r2, r2
 8002e20:	2601      	movs	r6, #1
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	4252      	negs	r2, r2
 8002e26:	1b1c      	subs	r4, r3, r4
 8002e28:	4688      	mov	r8, r1
 8002e2a:	1aa4      	subs	r4, r4, r2
 8002e2c:	400e      	ands	r6, r1
 8002e2e:	e6f6      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002e30:	4297      	cmp	r7, r2
 8002e32:	d03f      	beq.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002e34:	4652      	mov	r2, sl
 8002e36:	2501      	movs	r5, #1
 8002e38:	2a38      	cmp	r2, #56	@ 0x38
 8002e3a:	dd00      	ble.n	8002e3e <__aeabi_dsub+0x332>
 8002e3c:	e74a      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	9b02      	ldr	r3, [sp, #8]
 8002e42:	0412      	lsls	r2, r2, #16
 8002e44:	4313      	orrs	r3, r2
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	e72d      	b.n	8002ca6 <__aeabi_dsub+0x19a>
 8002e4a:	003c      	movs	r4, r7
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	e705      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002e52:	2307      	movs	r3, #7
 8002e54:	402b      	ands	r3, r5
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x350>
 8002e5a:	e6e2      	b.n	8002c22 <__aeabi_dsub+0x116>
 8002e5c:	e06b      	b.n	8002f36 <__aeabi_dsub+0x42a>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	000007ff 	.word	0x000007ff
 8002e64:	ff7fffff 	.word	0xff7fffff
 8002e68:	fffff801 	.word	0xfffff801
 8002e6c:	000007fe 	.word	0x000007fe
 8002e70:	0028      	movs	r0, r5
 8002e72:	f000 fb63 	bl	800353c <__clzsi2>
 8002e76:	0003      	movs	r3, r0
 8002e78:	3318      	adds	r3, #24
 8002e7a:	2b1f      	cmp	r3, #31
 8002e7c:	dc00      	bgt.n	8002e80 <__aeabi_dsub+0x374>
 8002e7e:	e6b4      	b.n	8002bea <__aeabi_dsub+0xde>
 8002e80:	002a      	movs	r2, r5
 8002e82:	3808      	subs	r0, #8
 8002e84:	4082      	lsls	r2, r0
 8002e86:	429f      	cmp	r7, r3
 8002e88:	dd00      	ble.n	8002e8c <__aeabi_dsub+0x380>
 8002e8a:	e0b9      	b.n	8003000 <__aeabi_dsub+0x4f4>
 8002e8c:	1bdb      	subs	r3, r3, r7
 8002e8e:	1c58      	adds	r0, r3, #1
 8002e90:	281f      	cmp	r0, #31
 8002e92:	dc00      	bgt.n	8002e96 <__aeabi_dsub+0x38a>
 8002e94:	e1a0      	b.n	80031d8 <__aeabi_dsub+0x6cc>
 8002e96:	0015      	movs	r5, r2
 8002e98:	3b1f      	subs	r3, #31
 8002e9a:	40dd      	lsrs	r5, r3
 8002e9c:	2820      	cmp	r0, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x3a0>
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	1e53      	subs	r3, r2, #1
 8002ea8:	419a      	sbcs	r2, r3
 8002eaa:	4315      	orrs	r5, r2
 8002eac:	2307      	movs	r3, #7
 8002eae:	2700      	movs	r7, #0
 8002eb0:	402b      	ands	r3, r5
 8002eb2:	e7d0      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8002eb4:	08c0      	lsrs	r0, r0, #3
 8002eb6:	0762      	lsls	r2, r4, #29
 8002eb8:	4302      	orrs	r2, r0
 8002eba:	08e4      	lsrs	r4, r4, #3
 8002ebc:	e737      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ebe:	08ea      	lsrs	r2, r5, #3
 8002ec0:	0763      	lsls	r3, r4, #29
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4bd3      	ldr	r3, [pc, #844]	@ (8003214 <__aeabi_dsub+0x708>)
 8002ec6:	08e4      	lsrs	r4, r4, #3
 8002ec8:	429f      	cmp	r7, r3
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x3c2>
 8002ecc:	e72f      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ece:	0324      	lsls	r4, r4, #12
 8002ed0:	0b25      	lsrs	r5, r4, #12
 8002ed2:	057c      	lsls	r4, r7, #21
 8002ed4:	0d64      	lsrs	r4, r4, #21
 8002ed6:	e6c2      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002ed8:	46ca      	mov	sl, r9
 8002eda:	0022      	movs	r2, r4
 8002edc:	4302      	orrs	r2, r0
 8002ede:	d158      	bne.n	8002f92 <__aeabi_dsub+0x486>
 8002ee0:	4663      	mov	r3, ip
 8002ee2:	000e      	movs	r6, r1
 8002ee4:	9c02      	ldr	r4, [sp, #8]
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	4657      	mov	r7, sl
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	e7e7      	b.n	8002ec0 <__aeabi_dsub+0x3b4>
 8002ef0:	4cc9      	ldr	r4, [pc, #804]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002ef2:	1aff      	subs	r7, r7, r3
 8002ef4:	4014      	ands	r4, r2
 8002ef6:	e692      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002ef8:	4dc8      	ldr	r5, [pc, #800]	@ (800321c <__aeabi_dsub+0x710>)
 8002efa:	1c7a      	adds	r2, r7, #1
 8002efc:	422a      	tst	r2, r5
 8002efe:	d000      	beq.n	8002f02 <__aeabi_dsub+0x3f6>
 8002f00:	e084      	b.n	800300c <__aeabi_dsub+0x500>
 8002f02:	0022      	movs	r2, r4
 8002f04:	4302      	orrs	r2, r0
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d000      	beq.n	8002f0c <__aeabi_dsub+0x400>
 8002f0a:	e0ef      	b.n	80030ec <__aeabi_dsub+0x5e0>
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x406>
 8002f10:	e0e5      	b.n	80030de <__aeabi_dsub+0x5d2>
 8002f12:	4662      	mov	r2, ip
 8002f14:	9902      	ldr	r1, [sp, #8]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	d100      	bne.n	8002f1c <__aeabi_dsub+0x410>
 8002f1a:	e0c5      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002f1c:	4663      	mov	r3, ip
 8002f1e:	18c5      	adds	r5, r0, r3
 8002f20:	468c      	mov	ip, r1
 8002f22:	4285      	cmp	r5, r0
 8002f24:	4180      	sbcs	r0, r0
 8002f26:	4464      	add	r4, ip
 8002f28:	4240      	negs	r0, r0
 8002f2a:	1824      	adds	r4, r4, r0
 8002f2c:	0223      	lsls	r3, r4, #8
 8002f2e:	d502      	bpl.n	8002f36 <__aeabi_dsub+0x42a>
 8002f30:	4bb9      	ldr	r3, [pc, #740]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002f32:	3701      	adds	r7, #1
 8002f34:	401c      	ands	r4, r3
 8002f36:	46ba      	mov	sl, r7
 8002f38:	9503      	str	r5, [sp, #12]
 8002f3a:	e7d5      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002f3c:	4662      	mov	r2, ip
 8002f3e:	1a85      	subs	r5, r0, r2
 8002f40:	42a8      	cmp	r0, r5
 8002f42:	4192      	sbcs	r2, r2
 8002f44:	4252      	negs	r2, r2
 8002f46:	4691      	mov	r9, r2
 8002f48:	9b02      	ldr	r3, [sp, #8]
 8002f4a:	1ae3      	subs	r3, r4, r3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1ad2      	subs	r2, r2, r3
 8002f52:	0013      	movs	r3, r2
 8002f54:	4691      	mov	r9, r2
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	d46c      	bmi.n	8003034 <__aeabi_dsub+0x528>
 8002f5a:	464a      	mov	r2, r9
 8002f5c:	464c      	mov	r4, r9
 8002f5e:	432a      	orrs	r2, r5
 8002f60:	d000      	beq.n	8002f64 <__aeabi_dsub+0x458>
 8002f62:	e63a      	b.n	8002bda <__aeabi_dsub+0xce>
 8002f64:	2600      	movs	r6, #0
 8002f66:	2400      	movs	r4, #0
 8002f68:	2500      	movs	r5, #0
 8002f6a:	e678      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002f6c:	9902      	ldr	r1, [sp, #8]
 8002f6e:	4653      	mov	r3, sl
 8002f70:	000d      	movs	r5, r1
 8002f72:	3a20      	subs	r2, #32
 8002f74:	40d5      	lsrs	r5, r2
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d006      	beq.n	8002f88 <__aeabi_dsub+0x47c>
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	000b      	movs	r3, r1
 8002f80:	4093      	lsls	r3, r2
 8002f82:	4662      	mov	r2, ip
 8002f84:	431a      	orrs	r2, r3
 8002f86:	4693      	mov	fp, r2
 8002f88:	465b      	mov	r3, fp
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	4193      	sbcs	r3, r2
 8002f8e:	431d      	orrs	r5, r3
 8002f90:	e619      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002f92:	4653      	mov	r3, sl
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d100      	bne.n	8002f9c <__aeabi_dsub+0x490>
 8002f9a:	e0c6      	b.n	800312a <__aeabi_dsub+0x61e>
 8002f9c:	4e9d      	ldr	r6, [pc, #628]	@ (8003214 <__aeabi_dsub+0x708>)
 8002f9e:	45b2      	cmp	sl, r6
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x498>
 8002fa2:	e6bd      	b.n	8002d20 <__aeabi_dsub+0x214>
 8002fa4:	4688      	mov	r8, r1
 8002fa6:	000e      	movs	r6, r1
 8002fa8:	2501      	movs	r5, #1
 8002faa:	2a38      	cmp	r2, #56	@ 0x38
 8002fac:	dc10      	bgt.n	8002fd0 <__aeabi_dsub+0x4c4>
 8002fae:	2a1f      	cmp	r2, #31
 8002fb0:	dc7f      	bgt.n	80030b2 <__aeabi_dsub+0x5a6>
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	0025      	movs	r5, r4
 8002fb6:	1a89      	subs	r1, r1, r2
 8002fb8:	0007      	movs	r7, r0
 8002fba:	4088      	lsls	r0, r1
 8002fbc:	408d      	lsls	r5, r1
 8002fbe:	40d7      	lsrs	r7, r2
 8002fc0:	40d4      	lsrs	r4, r2
 8002fc2:	1e41      	subs	r1, r0, #1
 8002fc4:	4188      	sbcs	r0, r1
 8002fc6:	9b02      	ldr	r3, [sp, #8]
 8002fc8:	433d      	orrs	r5, r7
 8002fca:	1b1b      	subs	r3, r3, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	4662      	mov	r2, ip
 8002fd2:	1b55      	subs	r5, r2, r5
 8002fd4:	45ac      	cmp	ip, r5
 8002fd6:	4192      	sbcs	r2, r2
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4252      	negs	r2, r2
 8002fdc:	464f      	mov	r7, r9
 8002fde:	1a9c      	subs	r4, r3, r2
 8002fe0:	e5f6      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	d000      	beq.n	8002fe8 <__aeabi_dsub+0x4dc>
 8002fe6:	e0b7      	b.n	8003158 <__aeabi_dsub+0x64c>
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d100      	bne.n	8002fee <__aeabi_dsub+0x4e2>
 8002fec:	e0f0      	b.n	80031d0 <__aeabi_dsub+0x6c4>
 8002fee:	2601      	movs	r6, #1
 8002ff0:	400e      	ands	r6, r1
 8002ff2:	4663      	mov	r3, ip
 8002ff4:	9802      	ldr	r0, [sp, #8]
 8002ff6:	08d9      	lsrs	r1, r3, #3
 8002ff8:	0742      	lsls	r2, r0, #29
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	08c4      	lsrs	r4, r0, #3
 8002ffe:	e696      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003000:	4c85      	ldr	r4, [pc, #532]	@ (8003218 <__aeabi_dsub+0x70c>)
 8003002:	1aff      	subs	r7, r7, r3
 8003004:	4014      	ands	r4, r2
 8003006:	0762      	lsls	r2, r4, #29
 8003008:	08e4      	lsrs	r4, r4, #3
 800300a:	e760      	b.n	8002ece <__aeabi_dsub+0x3c2>
 800300c:	4981      	ldr	r1, [pc, #516]	@ (8003214 <__aeabi_dsub+0x708>)
 800300e:	428a      	cmp	r2, r1
 8003010:	d100      	bne.n	8003014 <__aeabi_dsub+0x508>
 8003012:	e0c9      	b.n	80031a8 <__aeabi_dsub+0x69c>
 8003014:	4663      	mov	r3, ip
 8003016:	18c1      	adds	r1, r0, r3
 8003018:	4281      	cmp	r1, r0
 800301a:	4180      	sbcs	r0, r0
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	4240      	negs	r0, r0
 8003020:	18e3      	adds	r3, r4, r3
 8003022:	181b      	adds	r3, r3, r0
 8003024:	07dd      	lsls	r5, r3, #31
 8003026:	085c      	lsrs	r4, r3, #1
 8003028:	2307      	movs	r3, #7
 800302a:	0849      	lsrs	r1, r1, #1
 800302c:	430d      	orrs	r5, r1
 800302e:	0017      	movs	r7, r2
 8003030:	402b      	ands	r3, r5
 8003032:	e710      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8003034:	4663      	mov	r3, ip
 8003036:	1a1d      	subs	r5, r3, r0
 8003038:	45ac      	cmp	ip, r5
 800303a:	4192      	sbcs	r2, r2
 800303c:	2601      	movs	r6, #1
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	4252      	negs	r2, r2
 8003042:	1b1c      	subs	r4, r3, r4
 8003044:	4688      	mov	r8, r1
 8003046:	1aa4      	subs	r4, r4, r2
 8003048:	400e      	ands	r6, r1
 800304a:	e5c6      	b.n	8002bda <__aeabi_dsub+0xce>
 800304c:	4663      	mov	r3, ip
 800304e:	18c5      	adds	r5, r0, r3
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	4285      	cmp	r5, r0
 8003054:	4180      	sbcs	r0, r0
 8003056:	469c      	mov	ip, r3
 8003058:	4240      	negs	r0, r0
 800305a:	4464      	add	r4, ip
 800305c:	1824      	adds	r4, r4, r0
 800305e:	2701      	movs	r7, #1
 8003060:	0223      	lsls	r3, r4, #8
 8003062:	d400      	bmi.n	8003066 <__aeabi_dsub+0x55a>
 8003064:	e6f5      	b.n	8002e52 <__aeabi_dsub+0x346>
 8003066:	2702      	movs	r7, #2
 8003068:	e641      	b.n	8002cee <__aeabi_dsub+0x1e2>
 800306a:	4663      	mov	r3, ip
 800306c:	1ac5      	subs	r5, r0, r3
 800306e:	42a8      	cmp	r0, r5
 8003070:	4180      	sbcs	r0, r0
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	4240      	negs	r0, r0
 8003076:	1ae4      	subs	r4, r4, r3
 8003078:	2701      	movs	r7, #1
 800307a:	1a24      	subs	r4, r4, r0
 800307c:	e5a8      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 800307e:	9d02      	ldr	r5, [sp, #8]
 8003080:	4652      	mov	r2, sl
 8003082:	002b      	movs	r3, r5
 8003084:	3a20      	subs	r2, #32
 8003086:	40d3      	lsrs	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	4653      	mov	r3, sl
 800308c:	2b20      	cmp	r3, #32
 800308e:	d006      	beq.n	800309e <__aeabi_dsub+0x592>
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	002b      	movs	r3, r5
 8003096:	4093      	lsls	r3, r2
 8003098:	4662      	mov	r2, ip
 800309a:	431a      	orrs	r2, r3
 800309c:	4693      	mov	fp, r2
 800309e:	465d      	mov	r5, fp
 80030a0:	1e6b      	subs	r3, r5, #1
 80030a2:	419d      	sbcs	r5, r3
 80030a4:	430d      	orrs	r5, r1
 80030a6:	e615      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 80030a8:	0762      	lsls	r2, r4, #29
 80030aa:	08c0      	lsrs	r0, r0, #3
 80030ac:	4302      	orrs	r2, r0
 80030ae:	08e4      	lsrs	r4, r4, #3
 80030b0:	e70d      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030b2:	0011      	movs	r1, r2
 80030b4:	0027      	movs	r7, r4
 80030b6:	3920      	subs	r1, #32
 80030b8:	40cf      	lsrs	r7, r1
 80030ba:	2a20      	cmp	r2, #32
 80030bc:	d005      	beq.n	80030ca <__aeabi_dsub+0x5be>
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	1a8a      	subs	r2, r1, r2
 80030c2:	4094      	lsls	r4, r2
 80030c4:	0025      	movs	r5, r4
 80030c6:	4305      	orrs	r5, r0
 80030c8:	9503      	str	r5, [sp, #12]
 80030ca:	9d03      	ldr	r5, [sp, #12]
 80030cc:	1e6a      	subs	r2, r5, #1
 80030ce:	4195      	sbcs	r5, r2
 80030d0:	433d      	orrs	r5, r7
 80030d2:	e77d      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d100      	bne.n	80030da <__aeabi_dsub+0x5ce>
 80030d8:	e744      	b.n	8002f64 <__aeabi_dsub+0x458>
 80030da:	2601      	movs	r6, #1
 80030dc:	400e      	ands	r6, r1
 80030de:	4663      	mov	r3, ip
 80030e0:	08d9      	lsrs	r1, r3, #3
 80030e2:	9b02      	ldr	r3, [sp, #8]
 80030e4:	075a      	lsls	r2, r3, #29
 80030e6:	430a      	orrs	r2, r1
 80030e8:	08dc      	lsrs	r4, r3, #3
 80030ea:	e6f0      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d028      	beq.n	8003142 <__aeabi_dsub+0x636>
 80030f0:	4662      	mov	r2, ip
 80030f2:	9f02      	ldr	r7, [sp, #8]
 80030f4:	08c0      	lsrs	r0, r0, #3
 80030f6:	433a      	orrs	r2, r7
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x5f0>
 80030fa:	e6dc      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 80030fc:	0762      	lsls	r2, r4, #29
 80030fe:	4310      	orrs	r0, r2
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	08e4      	lsrs	r4, r4, #3
 8003104:	0312      	lsls	r2, r2, #12
 8003106:	4214      	tst	r4, r2
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x612>
 800310a:	08fd      	lsrs	r5, r7, #3
 800310c:	4215      	tst	r5, r2
 800310e:	d106      	bne.n	800311e <__aeabi_dsub+0x612>
 8003110:	4663      	mov	r3, ip
 8003112:	2601      	movs	r6, #1
 8003114:	002c      	movs	r4, r5
 8003116:	08d8      	lsrs	r0, r3, #3
 8003118:	077b      	lsls	r3, r7, #29
 800311a:	4318      	orrs	r0, r3
 800311c:	400e      	ands	r6, r1
 800311e:	0f42      	lsrs	r2, r0, #29
 8003120:	00c0      	lsls	r0, r0, #3
 8003122:	08c0      	lsrs	r0, r0, #3
 8003124:	0752      	lsls	r2, r2, #29
 8003126:	4302      	orrs	r2, r0
 8003128:	e601      	b.n	8002d2e <__aeabi_dsub+0x222>
 800312a:	4663      	mov	r3, ip
 800312c:	1a1d      	subs	r5, r3, r0
 800312e:	45ac      	cmp	ip, r5
 8003130:	4192      	sbcs	r2, r2
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4252      	negs	r2, r2
 8003136:	1b1c      	subs	r4, r3, r4
 8003138:	000e      	movs	r6, r1
 800313a:	4688      	mov	r8, r1
 800313c:	2701      	movs	r7, #1
 800313e:	1aa4      	subs	r4, r4, r2
 8003140:	e546      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8003142:	4663      	mov	r3, ip
 8003144:	08d9      	lsrs	r1, r3, #3
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	075a      	lsls	r2, r3, #29
 800314a:	430a      	orrs	r2, r1
 800314c:	08dc      	lsrs	r4, r3, #3
 800314e:	e5ee      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003150:	4663      	mov	r3, ip
 8003152:	9c02      	ldr	r4, [sp, #8]
 8003154:	9303      	str	r3, [sp, #12]
 8003156:	e6c7      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8003158:	08c0      	lsrs	r0, r0, #3
 800315a:	2a00      	cmp	r2, #0
 800315c:	d100      	bne.n	8003160 <__aeabi_dsub+0x654>
 800315e:	e6aa      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 8003160:	0762      	lsls	r2, r4, #29
 8003162:	4310      	orrs	r0, r2
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	08e4      	lsrs	r4, r4, #3
 8003168:	0312      	lsls	r2, r2, #12
 800316a:	4214      	tst	r4, r2
 800316c:	d0d7      	beq.n	800311e <__aeabi_dsub+0x612>
 800316e:	9f02      	ldr	r7, [sp, #8]
 8003170:	08fd      	lsrs	r5, r7, #3
 8003172:	4215      	tst	r5, r2
 8003174:	d1d3      	bne.n	800311e <__aeabi_dsub+0x612>
 8003176:	4663      	mov	r3, ip
 8003178:	2601      	movs	r6, #1
 800317a:	08d8      	lsrs	r0, r3, #3
 800317c:	077b      	lsls	r3, r7, #29
 800317e:	002c      	movs	r4, r5
 8003180:	4318      	orrs	r0, r3
 8003182:	400e      	ands	r6, r1
 8003184:	e7cb      	b.n	800311e <__aeabi_dsub+0x612>
 8003186:	000a      	movs	r2, r1
 8003188:	0027      	movs	r7, r4
 800318a:	3a20      	subs	r2, #32
 800318c:	40d7      	lsrs	r7, r2
 800318e:	2920      	cmp	r1, #32
 8003190:	d005      	beq.n	800319e <__aeabi_dsub+0x692>
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	1a52      	subs	r2, r2, r1
 8003196:	4094      	lsls	r4, r2
 8003198:	0025      	movs	r5, r4
 800319a:	4305      	orrs	r5, r0
 800319c:	9503      	str	r5, [sp, #12]
 800319e:	9d03      	ldr	r5, [sp, #12]
 80031a0:	1e6a      	subs	r2, r5, #1
 80031a2:	4195      	sbcs	r5, r2
 80031a4:	432f      	orrs	r7, r5
 80031a6:	e610      	b.n	8002dca <__aeabi_dsub+0x2be>
 80031a8:	0014      	movs	r4, r2
 80031aa:	2500      	movs	r5, #0
 80031ac:	2200      	movs	r2, #0
 80031ae:	e556      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031b0:	9b02      	ldr	r3, [sp, #8]
 80031b2:	4460      	add	r0, ip
 80031b4:	4699      	mov	r9, r3
 80031b6:	4560      	cmp	r0, ip
 80031b8:	4192      	sbcs	r2, r2
 80031ba:	444c      	add	r4, r9
 80031bc:	4252      	negs	r2, r2
 80031be:	0005      	movs	r5, r0
 80031c0:	18a4      	adds	r4, r4, r2
 80031c2:	e74c      	b.n	800305e <__aeabi_dsub+0x552>
 80031c4:	001a      	movs	r2, r3
 80031c6:	001c      	movs	r4, r3
 80031c8:	432a      	orrs	r2, r5
 80031ca:	d000      	beq.n	80031ce <__aeabi_dsub+0x6c2>
 80031cc:	e6b3      	b.n	8002f36 <__aeabi_dsub+0x42a>
 80031ce:	e6c9      	b.n	8002f64 <__aeabi_dsub+0x458>
 80031d0:	2480      	movs	r4, #128	@ 0x80
 80031d2:	2600      	movs	r6, #0
 80031d4:	0324      	lsls	r4, r4, #12
 80031d6:	e5ae      	b.n	8002d36 <__aeabi_dsub+0x22a>
 80031d8:	2120      	movs	r1, #32
 80031da:	2500      	movs	r5, #0
 80031dc:	1a09      	subs	r1, r1, r0
 80031de:	e517      	b.n	8002c10 <__aeabi_dsub+0x104>
 80031e0:	2200      	movs	r2, #0
 80031e2:	2500      	movs	r5, #0
 80031e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003214 <__aeabi_dsub+0x708>)
 80031e6:	e53a      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	d100      	bne.n	80031ee <__aeabi_dsub+0x6e2>
 80031ec:	e5f6      	b.n	8002ddc <__aeabi_dsub+0x2d0>
 80031ee:	464b      	mov	r3, r9
 80031f0:	1bda      	subs	r2, r3, r7
 80031f2:	4692      	mov	sl, r2
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	d100      	bne.n	80031fa <__aeabi_dsub+0x6ee>
 80031f8:	e66f      	b.n	8002eda <__aeabi_dsub+0x3ce>
 80031fa:	2a38      	cmp	r2, #56	@ 0x38
 80031fc:	dc05      	bgt.n	800320a <__aeabi_dsub+0x6fe>
 80031fe:	2680      	movs	r6, #128	@ 0x80
 8003200:	0436      	lsls	r6, r6, #16
 8003202:	4334      	orrs	r4, r6
 8003204:	4688      	mov	r8, r1
 8003206:	000e      	movs	r6, r1
 8003208:	e6d1      	b.n	8002fae <__aeabi_dsub+0x4a2>
 800320a:	4688      	mov	r8, r1
 800320c:	000e      	movs	r6, r1
 800320e:	2501      	movs	r5, #1
 8003210:	e6de      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	000007ff 	.word	0x000007ff
 8003218:	ff7fffff 	.word	0xff7fffff
 800321c:	000007fe 	.word	0x000007fe
 8003220:	2d00      	cmp	r5, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x71a>
 8003224:	e668      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8003226:	464b      	mov	r3, r9
 8003228:	1bd9      	subs	r1, r3, r7
 800322a:	2f00      	cmp	r7, #0
 800322c:	d101      	bne.n	8003232 <__aeabi_dsub+0x726>
 800322e:	468a      	mov	sl, r1
 8003230:	e5a7      	b.n	8002d82 <__aeabi_dsub+0x276>
 8003232:	2701      	movs	r7, #1
 8003234:	2938      	cmp	r1, #56	@ 0x38
 8003236:	dd00      	ble.n	800323a <__aeabi_dsub+0x72e>
 8003238:	e5c7      	b.n	8002dca <__aeabi_dsub+0x2be>
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	0412      	lsls	r2, r2, #16
 800323e:	4314      	orrs	r4, r2
 8003240:	e5af      	b.n	8002da2 <__aeabi_dsub+0x296>
 8003242:	46c0      	nop			@ (mov r8, r8)

08003244 <__aeabi_dcmpun>:
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	46c6      	mov	lr, r8
 8003248:	031e      	lsls	r6, r3, #12
 800324a:	0b36      	lsrs	r6, r6, #12
 800324c:	46b0      	mov	r8, r6
 800324e:	4e0d      	ldr	r6, [pc, #52]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003250:	030c      	lsls	r4, r1, #12
 8003252:	004d      	lsls	r5, r1, #1
 8003254:	005f      	lsls	r7, r3, #1
 8003256:	b500      	push	{lr}
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d6d      	lsrs	r5, r5, #21
 800325c:	0d7f      	lsrs	r7, r7, #21
 800325e:	42b5      	cmp	r5, r6
 8003260:	d00b      	beq.n	800327a <__aeabi_dcmpun+0x36>
 8003262:	4908      	ldr	r1, [pc, #32]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003264:	2000      	movs	r0, #0
 8003266:	428f      	cmp	r7, r1
 8003268:	d104      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 800326a:	4646      	mov	r6, r8
 800326c:	4316      	orrs	r6, r2
 800326e:	0030      	movs	r0, r6
 8003270:	1e43      	subs	r3, r0, #1
 8003272:	4198      	sbcs	r0, r3
 8003274:	bc80      	pop	{r7}
 8003276:	46b8      	mov	r8, r7
 8003278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800327a:	4304      	orrs	r4, r0
 800327c:	2001      	movs	r0, #1
 800327e:	2c00      	cmp	r4, #0
 8003280:	d1f8      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 8003282:	e7ee      	b.n	8003262 <__aeabi_dcmpun+0x1e>
 8003284:	000007ff 	.word	0x000007ff

08003288 <__aeabi_d2iz>:
 8003288:	000b      	movs	r3, r1
 800328a:	0002      	movs	r2, r0
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d16      	ldr	r5, [pc, #88]	@ (80032e8 <__aeabi_d2iz+0x60>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	b082      	sub	sp, #8
 8003294:	0049      	lsls	r1, r1, #1
 8003296:	2000      	movs	r0, #0
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	0b24      	lsrs	r4, r4, #12
 800329e:	0d49      	lsrs	r1, r1, #21
 80032a0:	0fde      	lsrs	r6, r3, #31
 80032a2:	42a9      	cmp	r1, r5
 80032a4:	dd04      	ble.n	80032b0 <__aeabi_d2iz+0x28>
 80032a6:	4811      	ldr	r0, [pc, #68]	@ (80032ec <__aeabi_d2iz+0x64>)
 80032a8:	4281      	cmp	r1, r0
 80032aa:	dd03      	ble.n	80032b4 <__aeabi_d2iz+0x2c>
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <__aeabi_d2iz+0x68>)
 80032ae:	18f0      	adds	r0, r6, r3
 80032b0:	b002      	add	sp, #8
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	2080      	movs	r0, #128	@ 0x80
 80032b6:	0340      	lsls	r0, r0, #13
 80032b8:	4320      	orrs	r0, r4
 80032ba:	4c0e      	ldr	r4, [pc, #56]	@ (80032f4 <__aeabi_d2iz+0x6c>)
 80032bc:	1a64      	subs	r4, r4, r1
 80032be:	2c1f      	cmp	r4, #31
 80032c0:	dd08      	ble.n	80032d4 <__aeabi_d2iz+0x4c>
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <__aeabi_d2iz+0x70>)
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	40d8      	lsrs	r0, r3
 80032c8:	0003      	movs	r3, r0
 80032ca:	4258      	negs	r0, r3
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	d1ef      	bne.n	80032b0 <__aeabi_d2iz+0x28>
 80032d0:	0018      	movs	r0, r3
 80032d2:	e7ed      	b.n	80032b0 <__aeabi_d2iz+0x28>
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <__aeabi_d2iz+0x74>)
 80032d6:	9a00      	ldr	r2, [sp, #0]
 80032d8:	469c      	mov	ip, r3
 80032da:	0003      	movs	r3, r0
 80032dc:	4461      	add	r1, ip
 80032de:	408b      	lsls	r3, r1
 80032e0:	40e2      	lsrs	r2, r4
 80032e2:	4313      	orrs	r3, r2
 80032e4:	e7f1      	b.n	80032ca <__aeabi_d2iz+0x42>
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	000003fe 	.word	0x000003fe
 80032ec:	0000041d 	.word	0x0000041d
 80032f0:	7fffffff 	.word	0x7fffffff
 80032f4:	00000433 	.word	0x00000433
 80032f8:	00000413 	.word	0x00000413
 80032fc:	fffffbed 	.word	0xfffffbed

08003300 <__aeabi_i2d>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2800      	cmp	r0, #0
 8003304:	d016      	beq.n	8003334 <__aeabi_i2d+0x34>
 8003306:	17c3      	asrs	r3, r0, #31
 8003308:	18c5      	adds	r5, r0, r3
 800330a:	405d      	eors	r5, r3
 800330c:	0fc4      	lsrs	r4, r0, #31
 800330e:	0028      	movs	r0, r5
 8003310:	f000 f914 	bl	800353c <__clzsi2>
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <__aeabi_i2d+0x58>)
 8003316:	1a1b      	subs	r3, r3, r0
 8003318:	055b      	lsls	r3, r3, #21
 800331a:	0d5b      	lsrs	r3, r3, #21
 800331c:	280a      	cmp	r0, #10
 800331e:	dc14      	bgt.n	800334a <__aeabi_i2d+0x4a>
 8003320:	0002      	movs	r2, r0
 8003322:	002e      	movs	r6, r5
 8003324:	3215      	adds	r2, #21
 8003326:	4096      	lsls	r6, r2
 8003328:	220b      	movs	r2, #11
 800332a:	1a12      	subs	r2, r2, r0
 800332c:	40d5      	lsrs	r5, r2
 800332e:	032d      	lsls	r5, r5, #12
 8003330:	0b2d      	lsrs	r5, r5, #12
 8003332:	e003      	b.n	800333c <__aeabi_i2d+0x3c>
 8003334:	2400      	movs	r4, #0
 8003336:	2300      	movs	r3, #0
 8003338:	2500      	movs	r5, #0
 800333a:	2600      	movs	r6, #0
 800333c:	051b      	lsls	r3, r3, #20
 800333e:	432b      	orrs	r3, r5
 8003340:	07e4      	lsls	r4, r4, #31
 8003342:	4323      	orrs	r3, r4
 8003344:	0030      	movs	r0, r6
 8003346:	0019      	movs	r1, r3
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	380b      	subs	r0, #11
 800334c:	4085      	lsls	r5, r0
 800334e:	032d      	lsls	r5, r5, #12
 8003350:	2600      	movs	r6, #0
 8003352:	0b2d      	lsrs	r5, r5, #12
 8003354:	e7f2      	b.n	800333c <__aeabi_i2d+0x3c>
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	0000041e 	.word	0x0000041e

0800335c <__aeabi_ui2d>:
 800335c:	b510      	push	{r4, lr}
 800335e:	1e04      	subs	r4, r0, #0
 8003360:	d010      	beq.n	8003384 <__aeabi_ui2d+0x28>
 8003362:	f000 f8eb 	bl	800353c <__clzsi2>
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <__aeabi_ui2d+0x44>)
 8003368:	1a1b      	subs	r3, r3, r0
 800336a:	055b      	lsls	r3, r3, #21
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	280a      	cmp	r0, #10
 8003370:	dc0f      	bgt.n	8003392 <__aeabi_ui2d+0x36>
 8003372:	220b      	movs	r2, #11
 8003374:	0021      	movs	r1, r4
 8003376:	1a12      	subs	r2, r2, r0
 8003378:	40d1      	lsrs	r1, r2
 800337a:	3015      	adds	r0, #21
 800337c:	030a      	lsls	r2, r1, #12
 800337e:	4084      	lsls	r4, r0
 8003380:	0b12      	lsrs	r2, r2, #12
 8003382:	e001      	b.n	8003388 <__aeabi_ui2d+0x2c>
 8003384:	2300      	movs	r3, #0
 8003386:	2200      	movs	r2, #0
 8003388:	051b      	lsls	r3, r3, #20
 800338a:	4313      	orrs	r3, r2
 800338c:	0020      	movs	r0, r4
 800338e:	0019      	movs	r1, r3
 8003390:	bd10      	pop	{r4, pc}
 8003392:	0022      	movs	r2, r4
 8003394:	380b      	subs	r0, #11
 8003396:	4082      	lsls	r2, r0
 8003398:	0312      	lsls	r2, r2, #12
 800339a:	2400      	movs	r4, #0
 800339c:	0b12      	lsrs	r2, r2, #12
 800339e:	e7f3      	b.n	8003388 <__aeabi_ui2d+0x2c>
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_f2d>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	0242      	lsls	r2, r0, #9
 80033a8:	0043      	lsls	r3, r0, #1
 80033aa:	0fc4      	lsrs	r4, r0, #31
 80033ac:	20fe      	movs	r0, #254	@ 0xfe
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	1c59      	adds	r1, r3, #1
 80033b2:	0a55      	lsrs	r5, r2, #9
 80033b4:	4208      	tst	r0, r1
 80033b6:	d00c      	beq.n	80033d2 <__aeabi_f2d+0x2e>
 80033b8:	21e0      	movs	r1, #224	@ 0xe0
 80033ba:	0089      	lsls	r1, r1, #2
 80033bc:	468c      	mov	ip, r1
 80033be:	076d      	lsls	r5, r5, #29
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	4463      	add	r3, ip
 80033c4:	051b      	lsls	r3, r3, #20
 80033c6:	4313      	orrs	r3, r2
 80033c8:	07e4      	lsls	r4, r4, #31
 80033ca:	4323      	orrs	r3, r4
 80033cc:	0028      	movs	r0, r5
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <__aeabi_f2d+0x5c>
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	d01b      	beq.n	8003412 <__aeabi_f2d+0x6e>
 80033da:	0028      	movs	r0, r5
 80033dc:	f000 f8ae 	bl	800353c <__clzsi2>
 80033e0:	280a      	cmp	r0, #10
 80033e2:	dc1c      	bgt.n	800341e <__aeabi_f2d+0x7a>
 80033e4:	230b      	movs	r3, #11
 80033e6:	002a      	movs	r2, r5
 80033e8:	1a1b      	subs	r3, r3, r0
 80033ea:	40da      	lsrs	r2, r3
 80033ec:	0003      	movs	r3, r0
 80033ee:	3315      	adds	r3, #21
 80033f0:	409d      	lsls	r5, r3
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <__aeabi_f2d+0x88>)
 80033f4:	0312      	lsls	r2, r2, #12
 80033f6:	1a1b      	subs	r3, r3, r0
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	0b12      	lsrs	r2, r2, #12
 80033fc:	0d5b      	lsrs	r3, r3, #21
 80033fe:	e7e1      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003400:	2d00      	cmp	r5, #0
 8003402:	d009      	beq.n	8003418 <__aeabi_f2d+0x74>
 8003404:	0b13      	lsrs	r3, r2, #12
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	0312      	lsls	r2, r2, #12
 800340a:	431a      	orrs	r2, r3
 800340c:	076d      	lsls	r5, r5, #29
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <__aeabi_f2d+0x8c>)
 8003410:	e7d8      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003412:	2300      	movs	r3, #0
 8003414:	2200      	movs	r2, #0
 8003416:	e7d5      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003418:	2200      	movs	r2, #0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <__aeabi_f2d+0x8c>)
 800341c:	e7d2      	b.n	80033c4 <__aeabi_f2d+0x20>
 800341e:	0003      	movs	r3, r0
 8003420:	002a      	movs	r2, r5
 8003422:	3b0b      	subs	r3, #11
 8003424:	409a      	lsls	r2, r3
 8003426:	2500      	movs	r5, #0
 8003428:	e7e3      	b.n	80033f2 <__aeabi_f2d+0x4e>
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	00000389 	.word	0x00000389
 8003430:	000007ff 	.word	0x000007ff

08003434 <__aeabi_d2f>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	004b      	lsls	r3, r1, #1
 8003438:	030f      	lsls	r7, r1, #12
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	4c3b      	ldr	r4, [pc, #236]	@ (800352c <__aeabi_d2f+0xf8>)
 800343e:	0f45      	lsrs	r5, r0, #29
 8003440:	b083      	sub	sp, #12
 8003442:	0a7f      	lsrs	r7, r7, #9
 8003444:	1c5e      	adds	r6, r3, #1
 8003446:	432f      	orrs	r7, r5
 8003448:	9000      	str	r0, [sp, #0]
 800344a:	9101      	str	r1, [sp, #4]
 800344c:	0fca      	lsrs	r2, r1, #31
 800344e:	00c5      	lsls	r5, r0, #3
 8003450:	4226      	tst	r6, r4
 8003452:	d00b      	beq.n	800346c <__aeabi_d2f+0x38>
 8003454:	4936      	ldr	r1, [pc, #216]	@ (8003530 <__aeabi_d2f+0xfc>)
 8003456:	185c      	adds	r4, r3, r1
 8003458:	2cfe      	cmp	r4, #254	@ 0xfe
 800345a:	dd13      	ble.n	8003484 <__aeabi_d2f+0x50>
 800345c:	20ff      	movs	r0, #255	@ 0xff
 800345e:	2300      	movs	r3, #0
 8003460:	05c0      	lsls	r0, r0, #23
 8003462:	4318      	orrs	r0, r3
 8003464:	07d2      	lsls	r2, r2, #31
 8003466:	4310      	orrs	r0, r2
 8003468:	b003      	add	sp, #12
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <__aeabi_d2f+0x42>
 8003470:	2000      	movs	r0, #0
 8003472:	2300      	movs	r3, #0
 8003474:	e7f4      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003476:	433d      	orrs	r5, r7
 8003478:	d0f0      	beq.n	800345c <__aeabi_d2f+0x28>
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	03db      	lsls	r3, r3, #15
 800347e:	20ff      	movs	r0, #255	@ 0xff
 8003480:	433b      	orrs	r3, r7
 8003482:	e7ed      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003484:	2c00      	cmp	r4, #0
 8003486:	dd14      	ble.n	80034b2 <__aeabi_d2f+0x7e>
 8003488:	9b00      	ldr	r3, [sp, #0]
 800348a:	00ff      	lsls	r7, r7, #3
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	4183      	sbcs	r3, r0
 8003492:	0f69      	lsrs	r1, r5, #29
 8003494:	433b      	orrs	r3, r7
 8003496:	430b      	orrs	r3, r1
 8003498:	0759      	lsls	r1, r3, #29
 800349a:	d041      	beq.n	8003520 <__aeabi_d2f+0xec>
 800349c:	210f      	movs	r1, #15
 800349e:	4019      	ands	r1, r3
 80034a0:	2904      	cmp	r1, #4
 80034a2:	d028      	beq.n	80034f6 <__aeabi_d2f+0xc2>
 80034a4:	3304      	adds	r3, #4
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	d525      	bpl.n	80034f6 <__aeabi_d2f+0xc2>
 80034aa:	3401      	adds	r4, #1
 80034ac:	2300      	movs	r3, #0
 80034ae:	b2e0      	uxtb	r0, r4
 80034b0:	e7d6      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034b2:	0021      	movs	r1, r4
 80034b4:	3117      	adds	r1, #23
 80034b6:	dbdb      	blt.n	8003470 <__aeabi_d2f+0x3c>
 80034b8:	2180      	movs	r1, #128	@ 0x80
 80034ba:	201e      	movs	r0, #30
 80034bc:	0409      	lsls	r1, r1, #16
 80034be:	4339      	orrs	r1, r7
 80034c0:	1b00      	subs	r0, r0, r4
 80034c2:	281f      	cmp	r0, #31
 80034c4:	dd1b      	ble.n	80034fe <__aeabi_d2f+0xca>
 80034c6:	2602      	movs	r6, #2
 80034c8:	4276      	negs	r6, r6
 80034ca:	1b34      	subs	r4, r6, r4
 80034cc:	000e      	movs	r6, r1
 80034ce:	40e6      	lsrs	r6, r4
 80034d0:	0034      	movs	r4, r6
 80034d2:	2820      	cmp	r0, #32
 80034d4:	d004      	beq.n	80034e0 <__aeabi_d2f+0xac>
 80034d6:	4817      	ldr	r0, [pc, #92]	@ (8003534 <__aeabi_d2f+0x100>)
 80034d8:	4684      	mov	ip, r0
 80034da:	4463      	add	r3, ip
 80034dc:	4099      	lsls	r1, r3
 80034de:	430d      	orrs	r5, r1
 80034e0:	002b      	movs	r3, r5
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	418b      	sbcs	r3, r1
 80034e6:	4323      	orrs	r3, r4
 80034e8:	0759      	lsls	r1, r3, #29
 80034ea:	d015      	beq.n	8003518 <__aeabi_d2f+0xe4>
 80034ec:	210f      	movs	r1, #15
 80034ee:	2400      	movs	r4, #0
 80034f0:	4019      	ands	r1, r3
 80034f2:	2904      	cmp	r1, #4
 80034f4:	d117      	bne.n	8003526 <__aeabi_d2f+0xf2>
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	0a5b      	lsrs	r3, r3, #9
 80034fa:	b2e0      	uxtb	r0, r4
 80034fc:	e7b0      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034fe:	4c0e      	ldr	r4, [pc, #56]	@ (8003538 <__aeabi_d2f+0x104>)
 8003500:	191c      	adds	r4, r3, r4
 8003502:	002b      	movs	r3, r5
 8003504:	40a5      	lsls	r5, r4
 8003506:	40c3      	lsrs	r3, r0
 8003508:	40a1      	lsls	r1, r4
 800350a:	1e68      	subs	r0, r5, #1
 800350c:	4185      	sbcs	r5, r0
 800350e:	4329      	orrs	r1, r5
 8003510:	430b      	orrs	r3, r1
 8003512:	2400      	movs	r4, #0
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d1c1      	bne.n	800349c <__aeabi_d2f+0x68>
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	2000      	movs	r0, #0
 800351c:	0a5b      	lsrs	r3, r3, #9
 800351e:	e79f      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	b2e0      	uxtb	r0, r4
 8003524:	e79c      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003526:	3304      	adds	r3, #4
 8003528:	e7e5      	b.n	80034f6 <__aeabi_d2f+0xc2>
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	000007fe 	.word	0x000007fe
 8003530:	fffffc80 	.word	0xfffffc80
 8003534:	fffffca2 	.word	0xfffffca2
 8003538:	fffffc82 	.word	0xfffffc82

0800353c <__clzsi2>:
 800353c:	211c      	movs	r1, #28
 800353e:	2301      	movs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4298      	cmp	r0, r3
 8003544:	d301      	bcc.n	800354a <__clzsi2+0xe>
 8003546:	0c00      	lsrs	r0, r0, #16
 8003548:	3910      	subs	r1, #16
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	4298      	cmp	r0, r3
 800354e:	d301      	bcc.n	8003554 <__clzsi2+0x18>
 8003550:	0a00      	lsrs	r0, r0, #8
 8003552:	3908      	subs	r1, #8
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	4298      	cmp	r0, r3
 8003558:	d301      	bcc.n	800355e <__clzsi2+0x22>
 800355a:	0900      	lsrs	r0, r0, #4
 800355c:	3904      	subs	r1, #4
 800355e:	a202      	add	r2, pc, #8	@ (adr r2, 8003568 <__clzsi2+0x2c>)
 8003560:	5c10      	ldrb	r0, [r2, r0]
 8003562:	1840      	adds	r0, r0, r1
 8003564:	4770      	bx	lr
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	02020304 	.word	0x02020304
 800356c:	01010101 	.word	0x01010101
	...

08003578 <__clzdi2>:
 8003578:	b510      	push	{r4, lr}
 800357a:	2900      	cmp	r1, #0
 800357c:	d103      	bne.n	8003586 <__clzdi2+0xe>
 800357e:	f7ff ffdd 	bl	800353c <__clzsi2>
 8003582:	3020      	adds	r0, #32
 8003584:	e002      	b.n	800358c <__clzdi2+0x14>
 8003586:	0008      	movs	r0, r1
 8003588:	f7ff ffd8 	bl	800353c <__clzsi2>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)

08003590 <set_ADS_pins>:
				  GPIO_TypeDef *pdwn_port,
				  uint16_t in_pin,
				  uint16_t out_pin,
				  uint16_t pdwdn_pin,
				  void(*f)(int))
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	001a      	movs	r2, r3
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	801a      	strh	r2, [r3, #0]
	IN_PORT = in_port;
 80035a2:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <set_ADS_pins+0x50>)
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]
	OUT_PORT = out_port;
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <set_ADS_pins+0x54>)
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
	PDWN_PORT=pdwn_port;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <set_ADS_pins+0x58>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
	IN_PIN=in_pin;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <set_ADS_pins+0x5c>)
 80035b6:	1cba      	adds	r2, r7, #2
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
	OUT_PIN=out_pin;
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <set_ADS_pins+0x60>)
 80035be:	2318      	movs	r3, #24
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	8013      	strh	r3, [r2, #0]
	PDWDN_PIN=pdwdn_pin;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <set_ADS_pins+0x64>)
 80035c8:	221c      	movs	r2, #28
 80035ca:	18ba      	adds	r2, r7, r2
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	801a      	strh	r2, [r3, #0]
	ads_callback = f;
 80035d0:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <set_ADS_pins+0x68>)
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000310 	.word	0x20000310
 80035e4:	20000314 	.word	0x20000314
 80035e8:	20000318 	.word	0x20000318
 80035ec:	2000031c 	.word	0x2000031c
 80035f0:	2000031e 	.word	0x2000031e
 80035f4:	20000320 	.word	0x20000320
 80035f8:	20000324 	.word	0x20000324

080035fc <Timer_Event>:

void Timer_Event() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0

	MISO_Val=HAL_GPIO_ReadPin(IN_PORT, IN_PIN);
 8003600:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <Timer_Event+0x11c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b45      	ldr	r3, [pc, #276]	@ (800371c <Timer_Event+0x120>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	0019      	movs	r1, r3
 800360a:	0010      	movs	r0, r2
 800360c:	f005 f848 	bl	80086a0 <HAL_GPIO_ReadPin>
 8003610:	0003      	movs	r3, r0
 8003612:	001a      	movs	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <Timer_Event+0x124>)
 8003616:	601a      	str	r2, [r3, #0]
	if (counter_ads==0 && MISO_Val==1){
 8003618:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <Timer_Event+0x128>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <Timer_Event+0x2e>
 8003620:	4b3f      	ldr	r3, [pc, #252]	@ (8003720 <Timer_Event+0x124>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d100      	bne.n	800362a <Timer_Event+0x2e>
 8003628:	e072      	b.n	8003710 <Timer_Event+0x114>
		return;
	}
	if (counter_ads==0){
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <Timer_Event+0x128>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <Timer_Event+0x40>
		//TIM->ARR=((Period_htim+1)*10)-1;
		TIM->ARR=Period_htim;
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <Timer_Event+0x12c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3d      	ldr	r2, [pc, #244]	@ (800372c <Timer_Event+0x130>)
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
	}
	if (counter_ads%2==0){
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <Timer_Event+0x128>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d10d      	bne.n	8003664 <Timer_Event+0x68>
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_SET);
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <Timer_Event+0x134>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <Timer_Event+0x138>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	0019      	movs	r1, r3
 8003654:	f005 f841 	bl	80086da <HAL_GPIO_WritePin>
		counter_ads++;
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <Timer_Event+0x128>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <Timer_Event+0x128>)
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e026      	b.n	80036b2 <Timer_Event+0xb6>
	}
	else{
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 8003664:	4b32      	ldr	r3, [pc, #200]	@ (8003730 <Timer_Event+0x134>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <Timer_Event+0x138>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	0019      	movs	r1, r3
 8003670:	f005 f833 	bl	80086da <HAL_GPIO_WritePin>
		if (counter_ads_max-2>=counter_ads){
 8003674:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <Timer_Event+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <Timer_Event+0x128>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	dd0d      	ble.n	800369e <Timer_Event+0xa2>
			value_ads|=(MISO_Val<<23-bit_ads);//23-bit_ads отзеркаливаем значение value_ads
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <Timer_Event+0x124>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <Timer_Event+0x140>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2117      	movs	r1, #23
 800368c:	1acb      	subs	r3, r1, r3
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	001a      	movs	r2, r3
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <Timer_Event+0x144>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	431a      	orrs	r2, r3
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <Timer_Event+0x144>)
 800369c:	601a      	str	r2, [r3, #0]

		}

		counter_ads++;
 800369e:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <Timer_Event+0x128>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003724 <Timer_Event+0x128>)
 80036a6:	601a      	str	r2, [r3, #0]
		bit_ads++;
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <Timer_Event+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <Timer_Event+0x140>)
 80036b0:	601a      	str	r2, [r3, #0]
	}
	if(counter_ads==counter_ads_max){
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <Timer_Event+0x128>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <Timer_Event+0x13c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d129      	bne.n	8003712 <Timer_Event+0x116>
		//HAL_TIM_Base_Stop_IT(htim);
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <Timer_Event+0x134>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <Timer_Event+0x138>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	0019      	movs	r1, r3
 80036ca:	f005 f806 	bl	80086da <HAL_GPIO_WritePin>
		if (ads_callback != NULL)
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <Timer_Event+0x148>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <Timer_Event+0xe6>
		{
			ads_callback(value_ads);
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <Timer_Event+0x148>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <Timer_Event+0x144>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0018      	movs	r0, r3
 80036e0:	4790      	blx	r2
		}

		TIM->ARR=((TIM->ARR+1)*10)-1;
 80036e2:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <Timer_Event+0x12c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	0013      	movs	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <Timer_Event+0x12c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
		counter_ads=0;
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <Timer_Event+0x128>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
		value_ads=0;
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <Timer_Event+0x144>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
		bit_ads=0;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <Timer_Event+0x140>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e000      	b.n	8003712 <Timer_Event+0x116>
		return;
 8003710:	46c0      	nop			@ (mov r8, r8)
		//HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_RESET);
	}
}
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000310 	.word	0x20000310
 800371c:	2000031c 	.word	0x2000031c
 8003720:	200002f8 	.word	0x200002f8
 8003724:	200002f4 	.word	0x200002f4
 8003728:	2000030c 	.word	0x2000030c
 800372c:	20000308 	.word	0x20000308
 8003730:	20000314 	.word	0x20000314
 8003734:	2000031e 	.word	0x2000031e
 8003738:	20000000 	.word	0x20000000
 800373c:	200002fc 	.word	0x200002fc
 8003740:	20000300 	.word	0x20000300
 8003744:	20000324 	.word	0x20000324

08003748 <Start_read>:
void Start_read(TIM_HandleTypeDef *htim_ptr, TIM_TypeDef *TIM_ads){
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_SET);
 8003752:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <Start_read+0x70>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <Start_read+0x74>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	0019      	movs	r1, r3
 800375e:	f004 ffbc 	bl	80086da <HAL_GPIO_WritePin>
	if (counter_ads>0&&counter_ads<counter_ads_max){
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <Start_read+0x78>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dd05      	ble.n	8003776 <Start_read+0x2e>
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <Start_read+0x78>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <Start_read+0x7c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	db1c      	blt.n	80037b0 <Start_read+0x68>
		return;
	}
	htim = htim_ptr;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <Start_read+0x80>)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
	TIM = TIM_ads;
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <Start_read+0x84>)
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
	Period_htim=htim->Init.Period;
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <Start_read+0x80>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <Start_read+0x88>)
 800378a:	601a      	str	r2, [r3, #0]
	counter_ads=0;
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <Start_read+0x78>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
	value_ads=0;
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <Start_read+0x8c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
	bit_ads=0;
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <Start_read+0x90>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <Start_read+0x94>)
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <Start_read+0x98>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	0019      	movs	r1, r3
 80037aa:	f004 ff96 	bl	80086da <HAL_GPIO_WritePin>
 80037ae:	e000      	b.n	80037b2 <Start_read+0x6a>
		return;
 80037b0:	46c0      	nop			@ (mov r8, r8)
	//HAL_TIM_Base_Start_IT(htim);
}
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000318 	.word	0x20000318
 80037bc:	20000320 	.word	0x20000320
 80037c0:	200002f4 	.word	0x200002f4
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000304 	.word	0x20000304
 80037cc:	2000030c 	.word	0x2000030c
 80037d0:	20000308 	.word	0x20000308
 80037d4:	20000300 	.word	0x20000300
 80037d8:	200002fc 	.word	0x200002fc
 80037dc:	20000314 	.word	0x20000314
 80037e0:	2000031e 	.word	0x2000031e

080037e4 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "main.h"
#define CONFIGURATION_START_ADDR 0x0801f800
void clearFlash(){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0

	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstPage = 63;//flash memory sector
 80037ea:	233f      	movs	r3, #63	@ 0x3f
 80037ec:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfPages = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
	//uint32_t Flash_BANK = 1;

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <clearFlash+0x58>)
 80037f4:	2202      	movs	r2, #2
 80037f6:	601a      	str	r2, [r3, #0]
	//EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.Page = FirstPage;
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <clearFlash+0x58>)
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <clearFlash+0x58>)
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	60da      	str	r2, [r3, #12]
	uint32_t PageError = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Lock();
 8003808:	f004 fca8 	bl	800815c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800380c:	f004 fc82 	bl	8008114 <HAL_FLASH_Unlock>
	//FLASH_PageErase(FLASH_BANK_1,FirstPage);
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8003810:	003a      	movs	r2, r7
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <clearFlash+0x58>)
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f004 fd3a 	bl	8008290 <HAL_FLASHEx_Erase>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d006      	beq.n	800382e <clearFlash+0x4a>
		/*Error occurred while sector erase.
User can add here some code to deal with this error.
SectorError will contain the faulty sector and then to know the code error on this sector,
user can call function 'HAL_FLASH_GetError()'
		 */
		uint32_t errorcode = HAL_FLASH_GetError();
 8003820:	f004 fcbe 	bl	80081a0 <HAL_FLASH_GetError>
 8003824:	0003      	movs	r3, r0
 8003826:	607b      	str	r3, [r7, #4]
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();
		osDelay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f00b fc82 	bl	800f132 <osDelay>
	}
	//CLEAR_BIT(FLASH->CR, FLASH_CR_PER);

	HAL_FLASH_Lock();
 800382e:	f004 fc95 	bl	800815c <HAL_FLASH_Lock>

}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000328 	.word	0x20000328

08003840 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(uint8_t* data, int size, int offset) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <WriteDeviceAddressOffset+0x70>)
 8003850:	4694      	mov	ip, r2
 8003852:	4463      	add	r3, ip
 8003854:	623b      	str	r3, [r7, #32]
	HAL_FLASH_Lock();
 8003856:	f004 fc81 	bl	800815c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800385a:	f004 fc5b 	bl	8008114 <HAL_FLASH_Unlock>
	//osDelay(10);
	for (int i = 0; i<size; i+=8){
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	e01b      	b.n	800389c <WriteDeviceAddressOffset+0x5c>
		uint64_t data_64 = *(uint64_t*)(&data[i]);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61ba      	str	r2, [r7, #24]
 8003870:	61fb      	str	r3, [r7, #28]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address+i, data_64) != HAL_OK){
 8003872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	18d1      	adds	r1, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2001      	movs	r0, #1
 800387e:	f004 fbfb 	bl	8008078 <HAL_FLASH_Program>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d007      	beq.n	8003896 <WriteDeviceAddressOffset+0x56>
User can add here some code to deal with this error */
			/*
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			uint32_t errorcode = HAL_FLASH_GetError();
 8003886:	f004 fc8b 	bl	80081a0 <HAL_FLASH_GetError>
 800388a:	0003      	movs	r3, r0
 800388c:	617b      	str	r3, [r7, #20]
			osDelay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f00b fc4f 	bl	800f132 <osDelay>
			break;
 8003894:	e006      	b.n	80038a4 <WriteDeviceAddressOffset+0x64>
	for (int i = 0; i<size; i+=8){
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3308      	adds	r3, #8
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbdf      	blt.n	8003864 <WriteDeviceAddressOffset+0x24>
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80038a4:	f004 fc5a 	bl	800815c <HAL_FLASH_Lock>
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b00a      	add	sp, #40	@ 0x28
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0801f800 	.word	0x0801f800

080038b4 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(uint8_t* Dout, int size, int offset)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <ReadDeviceAddressOffset+0x48>)
 80038c4:	4694      	mov	ip, r2
 80038c6:	4463      	add	r3, ip
 80038c8:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00c      	b.n	80038ea <ReadDeviceAddressOffset+0x36>
		Dout[i] = *(__IO uint8_t*)(Address+i);
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	0019      	movs	r1, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	780a      	ldrb	r2, [r1, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbee      	blt.n	80038d0 <ReadDeviceAddressOffset+0x1c>
	}
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	0801f800 	.word	0x0801f800

08003900 <get_platform_number>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void check_errors();

void get_platform_number() {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
//	}
//
//	platform_number.number_ch = '0' + platform_number.number;
//
//	debug("PLATFORM NUMBER: %d \r\n", platform_number.number);
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN Init */

	serial_number =(uint16_t)(crc32b((uint8_t *)UID_BASE, 8));
 8003912:	4b6e      	ldr	r3, [pc, #440]	@ (8003acc <MX_FREERTOS_Init+0x1c0>)
 8003914:	2108      	movs	r1, #8
 8003916:	0018      	movs	r0, r3
 8003918:	f003 f9b0 	bl	8006c7c <crc32b>
 800391c:	0003      	movs	r3, r0
 800391e:	b29a      	uxth	r2, r3
 8003920:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad0 <MX_FREERTOS_Init+0x1c4>)
 8003922:	801a      	strh	r2, [r3, #0]
	serial_number_control = abs((int16_t)serial_number);
 8003924:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad0 <MX_FREERTOS_Init+0x1c4>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b21b      	sxth	r3, r3
 800392a:	17da      	asrs	r2, r3, #31
 800392c:	189b      	adds	r3, r3, r2
 800392e:	4053      	eors	r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	b21a      	sxth	r2, r3
 8003934:	4b67      	ldr	r3, [pc, #412]	@ (8003ad4 <MX_FREERTOS_Init+0x1c8>)
 8003936:	801a      	strh	r2, [r3, #0]
	ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003938:	4b67      	ldr	r3, [pc, #412]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b67      	ldr	r3, [pc, #412]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 800393e:	2108      	movs	r1, #8
 8003940:	0018      	movs	r0, r3
 8003942:	f7ff ffb7 	bl	80038b4 <ReadDeviceAddressOffset>
	//memset(transmitting_command, 0, sizeof(transmitting_command));
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003946:	e016      	b.n	8003976 <MX_FREERTOS_Init+0x6a>
	{
		if(offset>=248){
 8003948:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2bf7      	cmp	r3, #247	@ 0xf7
 800394e:	dd05      	ble.n	800395c <MX_FREERTOS_Init+0x50>
//
			offset=0;
 8003950:	4b61      	ldr	r3, [pc, #388]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
			clearFlash();
 8003956:	f7ff ff45 	bl	80037e4 <clearFlash>
			break;
 800395a:	e010      	b.n	800397e <MX_FREERTOS_Init+0x72>
		}
		offset+=sizeof(sensor_inf);
 800395c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	001a      	movs	r2, r3
 8003964:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 8003966:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003968:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b5b      	ldr	r3, [pc, #364]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 800396e:	2108      	movs	r1, #8
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff ff9f 	bl	80038b4 <ReadDeviceAddressOffset>
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003976:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2bff      	cmp	r3, #255	@ 0xff
 800397c:	d1e4      	bne.n	8003948 <MX_FREERTOS_Init+0x3c>
	}
	if(offset<8){
 800397e:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b07      	cmp	r3, #7
 8003984:	dc1c      	bgt.n	80039c0 <MX_FREERTOS_Init+0xb4>

		//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
		memset(&sensor_inf, 0, sizeof(sensor_inf));
 8003986:	4b55      	ldr	r3, [pc, #340]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003988:	2208      	movs	r2, #8
 800398a:	2100      	movs	r1, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f00f fa5b 	bl	8012e48 <memset>
		sensor_inf.platform_adr[0]='0';
 8003992:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003994:	2230      	movs	r2, #48	@ 0x30
 8003996:	701a      	strb	r2, [r3, #0]
		sensor_inf.platform_adr[1]='1';
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 800399a:	2231      	movs	r2, #49	@ 0x31
 800399c:	705a      	strb	r2, [r3, #1]
		sensor_inf.received_BDR=38400;
 800399e:	4b4f      	ldr	r3, [pc, #316]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 80039a0:	2296      	movs	r2, #150	@ 0x96
 80039a2:	0212      	lsls	r2, r2, #8
 80039a4:	605a      	str	r2, [r3, #4]
		WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80039a6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b4c      	ldr	r3, [pc, #304]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 80039ac:	2108      	movs	r1, #8
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7ff ff46 	bl	8003840 <WriteDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 80039b4:	4b48      	ldr	r3, [pc, #288]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	001a      	movs	r2, r3
 80039bc:	4b46      	ldr	r3, [pc, #280]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039be:	601a      	str	r2, [r3, #0]
	}
	if(offset>=8){
 80039c0:	4b45      	ldr	r3, [pc, #276]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	dd12      	ble.n	80039ee <MX_FREERTOS_Init+0xe2>

		offset-=sizeof(sensor_inf);
 80039c8:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b08      	subs	r3, #8
 80039ce:	001a      	movs	r2, r3
 80039d0:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039d2:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80039d4:	4b40      	ldr	r3, [pc, #256]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b40      	ldr	r3, [pc, #256]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 80039da:	2108      	movs	r1, #8
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff69 	bl	80038b4 <ReadDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3308      	adds	r3, #8
 80039e8:	001a      	movs	r2, r3
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039ec:	601a      	str	r2, [r3, #0]
	}

	 while (!(USART2->ISR & USART_ISR_TC)) {
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2240      	movs	r2, #64	@ 0x40
 80039f6:	4013      	ands	r3, r2
 80039f8:	d0fa      	beq.n	80039f0 <MX_FREERTOS_Init+0xe4>
	 // Ожидание, пока передача завершится
	 }

	 // Отключаем USART перед изменением настроек
	 USART2->CR1 &= ~USART_CR1_UE;
 80039fa:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b38      	ldr	r3, [pc, #224]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
     // Изменение скорости
	 USART2->BRR = (SystemCoreClock+12800) / sensor_inf.received_BDR;
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <MX_FREERTOS_Init+0x1d8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	22c8      	movs	r2, #200	@ 0xc8
 8003a0c:	0192      	lsls	r2, r2, #6
 8003a0e:	189a      	adds	r2, r3, r2
 8003a10:	4b32      	ldr	r3, [pc, #200]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4c32      	ldr	r4, [pc, #200]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a16:	0019      	movs	r1, r3
 8003a18:	0010      	movs	r0, r2
 8003a1a:	f7fc fb91 	bl	8000140 <__udivsi3>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	60e3      	str	r3, [r4, #12]
	 // Включаем USART обратно
	 USART2->CR1 |= USART_CR1_UE;
 8003a22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]

	//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
	//offset+=sizeof(sensor_inf);
	//clearFlash();
	//WriteDeviceAddressOffset((uint8_t*)&sensor_inf, sizeof(sensor_inf), offset);
	sensorsState.hdc_fail = 0;
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae8 <MX_FREERTOS_Init+0x1dc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
	sensorsState.lps_fail = 0;
 8003a34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae8 <MX_FREERTOS_Init+0x1dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
	 set_ADS_pins(GPIOA,
 8003a3a:	23a0      	movs	r3, #160	@ 0xa0
 8003a3c:	05da      	lsls	r2, r3, #23
 8003a3e:	23a0      	movs	r3, #160	@ 0xa0
 8003a40:	05d9      	lsls	r1, r3, #23
 8003a42:	23a0      	movs	r3, #160	@ 0xa0
 8003a44:	05d8      	lsls	r0, r3, #23
 8003a46:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2301      	movs	r3, #1
 8003a54:	f7ff fd9c 	bl	8003590 <set_ADS_pins>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of maximumsPeriodTimer */
  maximumsPeriodTimerHandle = osTimerNew(maximumsPeriodTimer_callback, osTimerPeriodic, NULL, &maximumsPeriodTimer_attributes);
 8003a58:	4b25      	ldr	r3, [pc, #148]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 8003a5a:	4826      	ldr	r0, [pc, #152]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f00b fb9a 	bl	800f198 <osTimerNew>
 8003a64:	0002      	movs	r2, r0
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <MX_FREERTOS_Init+0x1ec>)
 8003a68:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of debugTask */
  debugTaskHandle = osThreadNew(StartDebugTask, NULL, &debugTask_attributes);
 8003a6a:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <MX_FREERTOS_Init+0x1f0>)
 8003a6c:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <MX_FREERTOS_Init+0x1f4>)
 8003a6e:	2100      	movs	r1, #0
 8003a70:	0018      	movs	r0, r3
 8003a72:	f00b fac7 	bl	800f004 <osThreadNew>
 8003a76:	0002      	movs	r2, r0
 8003a78:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <MX_FREERTOS_Init+0x1f8>)
 8003a7a:	601a      	str	r2, [r3, #0]

  /* creation of rxCommandsTask */
  rxCommandsTaskHandle = osThreadNew(StartTaskRxCommands, NULL, &rxCommandsTask_attributes);
 8003a7c:	4a22      	ldr	r2, [pc, #136]	@ (8003b08 <MX_FREERTOS_Init+0x1fc>)
 8003a7e:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <MX_FREERTOS_Init+0x200>)
 8003a80:	2100      	movs	r1, #0
 8003a82:	0018      	movs	r0, r3
 8003a84:	f00b fabe 	bl	800f004 <osThreadNew>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <MX_FREERTOS_Init+0x204>)
 8003a8c:	601a      	str	r2, [r3, #0]

  /* creation of accelTask */
  accelTaskHandle = osThreadNew(StartTaskAccelerometer, NULL, &accelTask_attributes);
 8003a8e:	4a21      	ldr	r2, [pc, #132]	@ (8003b14 <MX_FREERTOS_Init+0x208>)
 8003a90:	4b21      	ldr	r3, [pc, #132]	@ (8003b18 <MX_FREERTOS_Init+0x20c>)
 8003a92:	2100      	movs	r1, #0
 8003a94:	0018      	movs	r0, r3
 8003a96:	f00b fab5 	bl	800f004 <osThreadNew>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <MX_FREERTOS_Init+0x210>)
 8003a9e:	601a      	str	r2, [r3, #0]

  /* creation of sensorsPolling */
  sensorsPollingHandle = osThreadNew(StartSensorsPolling, NULL, &sensorsPolling_attributes);
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b20 <MX_FREERTOS_Init+0x214>)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <MX_FREERTOS_Init+0x218>)
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f00b faac 	bl	800f004 <osThreadNew>
 8003aac:	0002      	movs	r2, r0
 8003aae:	4b1e      	ldr	r3, [pc, #120]	@ (8003b28 <MX_FREERTOS_Init+0x21c>)
 8003ab0:	601a      	str	r2, [r3, #0]

  /* creation of ADS1232Task */
  ADS1232TaskHandle = osThreadNew(StartADS1232Task, NULL, &ADS1232Task_attributes);
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b2c <MX_FREERTOS_Init+0x220>)
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <MX_FREERTOS_Init+0x224>)
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f00b faa3 	bl	800f004 <osThreadNew>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b34 <MX_FREERTOS_Init+0x228>)
 8003ac2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b001      	add	sp, #4
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	1fff7590 	.word	0x1fff7590
 8003ad0:	200003ac 	.word	0x200003ac
 8003ad4:	200003ae 	.word	0x200003ae
 8003ad8:	200003a8 	.word	0x200003a8
 8003adc:	200003a0 	.word	0x200003a0
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	20000068 	.word	0x20000068
 8003ae8:	20000338 	.word	0x20000338
 8003aec:	08004f6d 	.word	0x08004f6d
 8003af0:	08017200 	.word	0x08017200
 8003af4:	08004c01 	.word	0x08004c01
 8003af8:	200003d0 	.word	0x200003d0
 8003afc:	0801714c 	.word	0x0801714c
 8003b00:	08003b39 	.word	0x08003b39
 8003b04:	200003bc 	.word	0x200003bc
 8003b08:	08017170 	.word	0x08017170
 8003b0c:	08003e41 	.word	0x08003e41
 8003b10:	200003c0 	.word	0x200003c0
 8003b14:	08017194 	.word	0x08017194
 8003b18:	08004891 	.word	0x08004891
 8003b1c:	200003c4 	.word	0x200003c4
 8003b20:	080171b8 	.word	0x080171b8
 8003b24:	08004a79 	.word	0x08004a79
 8003b28:	200003c8 	.word	0x200003c8
 8003b2c:	080171dc 	.word	0x080171dc
 8003b30:	08004bd5 	.word	0x08004bd5
 8003b34:	200003cc 	.word	0x200003cc

08003b38 <StartDebugTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	46de      	mov	lr, fp
 8003b3c:	4657      	mov	r7, sl
 8003b3e:	464e      	mov	r6, r9
 8003b40:	4645      	mov	r5, r8
 8003b42:	b5e0      	push	{r5, r6, r7, lr}
 8003b44:	b0e3      	sub	sp, #396	@ 0x18c
 8003b46:	af12      	add	r7, sp, #72	@ 0x48
 8003b48:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartDebugTask */

  /* Infinite loop */
	check_errors();
 8003b4a:	f001 f9bf 	bl	8004ecc <check_errors>

	get_platform_number();
 8003b4e:	f7ff fed7 	bl	8003900 <get_platform_number>

	osTimerStart(maximumsPeriodTimerHandle, timer_period);	// запуск таймера с периодом срабатывания 10 минут
 8003b52:	4bac      	ldr	r3, [pc, #688]	@ (8003e04 <StartDebugTask+0x2cc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4aac      	ldr	r2, [pc, #688]	@ (8003e08 <StartDebugTask+0x2d0>)
 8003b58:	0011      	movs	r1, r2
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f00b fba2 	bl	800f2a4 <osTimerStart>
	debug("\r\nSN: %05d\r\n", serial_number);
 8003b60:	4baa      	ldr	r3, [pc, #680]	@ (8003e0c <StartDebugTask+0x2d4>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	001a      	movs	r2, r3
 8003b66:	4baa      	ldr	r3, [pc, #680]	@ (8003e10 <StartDebugTask+0x2d8>)
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f001 ff92 	bl	8005a94 <debug>
	debug("\r\nMax mediums timer set to %d ms\r\n", timer_period);
 8003b70:	4aa5      	ldr	r2, [pc, #660]	@ (8003e08 <StartDebugTask+0x2d0>)
 8003b72:	4ba8      	ldr	r3, [pc, #672]	@ (8003e14 <StartDebugTask+0x2dc>)
 8003b74:	0011      	movs	r1, r2
 8003b76:	0018      	movs	r0, r3
 8003b78:	f001 ff8c 	bl	8005a94 <debug>

	if (!debug_enabled()) {
 8003b7c:	f001 ff84 	bl	8005a88 <debug_enabled>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d137      	bne.n	8003bf4 <StartDebugTask+0xbc>

		uint8_t message_sn[64] = { 0, };
 8003b84:	4ba4      	ldr	r3, [pc, #656]	@ (8003e18 <StartDebugTask+0x2e0>)
 8003b86:	228c      	movs	r2, #140	@ 0x8c
 8003b88:	0052      	lsls	r2, r2, #1
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	2228      	movs	r2, #40	@ 0x28
 8003b8e:	4694      	mov	ip, r2
 8003b90:	44bc      	add	ip, r7
 8003b92:	4463      	add	r3, ip
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	223c      	movs	r2, #60	@ 0x3c
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f00f f952 	bl	8012e48 <memset>
		memset(message_sn, 0, sizeof(message_sn));
 8003ba4:	2408      	movs	r4, #8
 8003ba6:	2528      	movs	r5, #40	@ 0x28
 8003ba8:	1963      	adds	r3, r4, r5
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	2240      	movs	r2, #64	@ 0x40
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f00f f949 	bl	8012e48 <memset>

		int size = snprintf((char *)message_sn, sizeof(message_sn), "SN: %05d \r\n", serial_number);
 8003bb6:	4b95      	ldr	r3, [pc, #596]	@ (8003e0c <StartDebugTask+0x2d4>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	4a98      	ldr	r2, [pc, #608]	@ (8003e1c <StartDebugTask+0x2e4>)
 8003bbc:	1961      	adds	r1, r4, r5
 8003bbe:	19c8      	adds	r0, r1, r7
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	f00f f869 	bl	8012c98 <sniprintf>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	228a      	movs	r2, #138	@ 0x8a
 8003bca:	0052      	lsls	r2, r2, #1
 8003bcc:	1951      	adds	r1, r2, r5
 8003bce:	19c9      	adds	r1, r1, r7
 8003bd0:	600b      	str	r3, [r1, #0]

		if (size > 0) {
 8003bd2:	0029      	movs	r1, r5
 8003bd4:	1853      	adds	r3, r2, r1
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd0a      	ble.n	8003bf4 <StartDebugTask+0xbc>
			HAL_UART_Transmit(debug_uart, message_sn, size, 100);
 8003bde:	4b90      	ldr	r3, [pc, #576]	@ (8003e20 <StartDebugTask+0x2e8>)
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	1853      	adds	r3, r2, r1
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	1863      	adds	r3, r4, r1
 8003bec:	19d9      	adds	r1, r3, r7
 8003bee:	2364      	movs	r3, #100	@ 0x64
 8003bf0:	f008 fcaa 	bl	800c548 <HAL_UART_Transmit>
		}

	}

	vTaskDelay(100);
 8003bf4:	2064      	movs	r0, #100	@ 0x64
 8003bf6:	f00c fa35 	bl	8010064 <vTaskDelay>

	for (;;) {

		send_debug_messages();
 8003bfa:	f001 ffef 	bl	8005bdc <send_debug_messages>

		if (!debug_enabled()) {
 8003bfe:	f001 ff43 	bl	8005a88 <debug_enabled>
 8003c02:	1e03      	subs	r3, r0, #0
 8003c04:	d000      	beq.n	8003c08 <StartDebugTask+0xd0>
 8003c06:	e0f4      	b.n	8003df2 <StartDebugTask+0x2ba>

			float max_acceleration = fmax(
					round_and_limit_float(get_max_positive_acceleration()),
 8003c08:	f001 fe90 	bl	800592c <get_max_positive_acceleration>
 8003c0c:	1c03      	adds	r3, r0, #0
 8003c0e:	1c18      	adds	r0, r3, #0
 8003c10:	f001 feb4 	bl	800597c <round_and_limit_float>
 8003c14:	1c03      	adds	r3, r0, #0
			float max_acceleration = fmax(
 8003c16:	1c18      	adds	r0, r3, #0
 8003c18:	f7ff fbc4 	bl	80033a4 <__aeabi_f2d>
 8003c1c:	0004      	movs	r4, r0
 8003c1e:	000d      	movs	r5, r1
					round_and_limit_float(get_max_negative_acceleration()));
 8003c20:	f001 fe8e 	bl	8005940 <get_max_negative_acceleration>
 8003c24:	1c03      	adds	r3, r0, #0
 8003c26:	1c18      	adds	r0, r3, #0
 8003c28:	f001 fea8 	bl	800597c <round_and_limit_float>
 8003c2c:	1c03      	adds	r3, r0, #0
			float max_acceleration = fmax(
 8003c2e:	1c18      	adds	r0, r3, #0
 8003c30:	f7ff fbb8 	bl	80033a4 <__aeabi_f2d>
 8003c34:	0002      	movs	r2, r0
 8003c36:	000b      	movs	r3, r1
 8003c38:	0020      	movs	r0, r4
 8003c3a:	0029      	movs	r1, r5
 8003c3c:	f00d fe9f 	bl	801197e <fmax>
 8003c40:	0002      	movs	r2, r0
 8003c42:	000b      	movs	r3, r1
 8003c44:	0010      	movs	r0, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	f7ff fbf4 	bl	8003434 <__aeabi_d2f>
 8003c4c:	1c03      	adds	r3, r0, #0
 8003c4e:	2686      	movs	r6, #134	@ 0x86
 8003c50:	0076      	lsls	r6, r6, #1
 8003c52:	2428      	movs	r4, #40	@ 0x28
 8003c54:	1932      	adds	r2, r6, r4
 8003c56:	19d2      	adds	r2, r2, r7
 8003c58:	6013      	str	r3, [r2, #0]

			float maximum_move = fmax(
					round_and_limit_float(get_max_positive_move()),
 8003c5a:	f001 fe7b 	bl	8005954 <get_max_positive_move>
 8003c5e:	1c03      	adds	r3, r0, #0
 8003c60:	1c18      	adds	r0, r3, #0
 8003c62:	f001 fe8b 	bl	800597c <round_and_limit_float>
 8003c66:	1c03      	adds	r3, r0, #0
			float maximum_move = fmax(
 8003c68:	1c18      	adds	r0, r3, #0
 8003c6a:	f7ff fb9b 	bl	80033a4 <__aeabi_f2d>
 8003c6e:	0004      	movs	r4, r0
 8003c70:	000d      	movs	r5, r1
					round_and_limit_float(get_max_negative_move()));
 8003c72:	f001 fe79 	bl	8005968 <get_max_negative_move>
 8003c76:	1c03      	adds	r3, r0, #0
 8003c78:	1c18      	adds	r0, r3, #0
 8003c7a:	f001 fe7f 	bl	800597c <round_and_limit_float>
 8003c7e:	1c03      	adds	r3, r0, #0
			float maximum_move = fmax(
 8003c80:	1c18      	adds	r0, r3, #0
 8003c82:	f7ff fb8f 	bl	80033a4 <__aeabi_f2d>
 8003c86:	0002      	movs	r2, r0
 8003c88:	000b      	movs	r3, r1
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	0029      	movs	r1, r5
 8003c8e:	f00d fe76 	bl	801197e <fmax>
 8003c92:	0002      	movs	r2, r0
 8003c94:	000b      	movs	r3, r1
 8003c96:	0010      	movs	r0, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	f7ff fbcb 	bl	8003434 <__aeabi_d2f>
 8003c9e:	1c03      	adds	r3, r0, #0
 8003ca0:	2584      	movs	r5, #132	@ 0x84
 8003ca2:	006d      	lsls	r5, r5, #1
 8003ca4:	2428      	movs	r4, #40	@ 0x28
 8003ca6:	192a      	adds	r2, r5, r4
 8003ca8:	19d2      	adds	r2, r2, r7
 8003caa:	6013      	str	r3, [r2, #0]

			uint8_t message[256] = { 0, };
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <StartDebugTask+0x2e0>)
 8003cae:	228c      	movs	r2, #140	@ 0x8c
 8003cb0:	0052      	lsls	r2, r2, #1
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	2228      	movs	r2, #40	@ 0x28
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	44bc      	add	ip, r7
 8003cba:	4463      	add	r3, ip
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	22fc      	movs	r2, #252	@ 0xfc
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f00f f8be 	bl	8012e48 <memset>
			memset(message, 0, sizeof(message));
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	005a      	lsls	r2, r3, #1
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	191b      	adds	r3, r3, r4
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f00f f8b5 	bl	8012e48 <memset>

			int size = snprintf((char *)message, sizeof(message),
				"ACCEL: 0x%08X, LENGTH: 0x%08X, MAX_ACCEL: 0x%08X, MAX_LENGTH: 0x%08X, PRESSURE: %.2f HUMIDITY: %d, TEMP %.2f\r\n\nACCEL: %06.2f,     LENGTH: %06.2f,     MAX_ACCEL: %06.2f,     MAX_LENGTH: %06.2f\r\n\n",
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003cde:	0034      	movs	r4, r6
 8003ce0:	2628      	movs	r6, #40	@ 0x28
 8003ce2:	19a3      	adds	r3, r4, r6
 8003ce4:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4693      	mov	fp, r2
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003cea:	19ab      	adds	r3, r5, r6
 8003cec:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4690      	mov	r8, r2
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8003e24 <StartDebugTask+0x2ec>)
			int size = snprintf((char *)message, sizeof(message),
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4691      	mov	r9, r2
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <StartDebugTask+0x2f0>)
			int size = snprintf((char *)message, sizeof(message),
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4692      	mov	sl, r2
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <StartDebugTask+0x2f4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	1c18      	adds	r0, r3, #0
 8003d04:	f7ff fb4e 	bl	80033a4 <__aeabi_f2d>
			int size = snprintf((char *)message, sizeof(message),
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4b49      	ldr	r3, [pc, #292]	@ (8003e30 <StartDebugTask+0x2f8>)
 8003d0c:	f7fd fff2 	bl	8001cf4 <__aeabi_ddiv>
 8003d10:	0002      	movs	r2, r0
 8003d12:	000b      	movs	r3, r1
 8003d14:	623a      	str	r2, [r7, #32]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003d18:	4b46      	ldr	r3, [pc, #280]	@ (8003e34 <StartDebugTask+0x2fc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
			int size = snprintf((char *)message, sizeof(message),
 8003d1c:	1c18      	adds	r0, r3, #0
 8003d1e:	f7ff fb41 	bl	80033a4 <__aeabi_f2d>
 8003d22:	61b8      	str	r0, [r7, #24]
 8003d24:	61f9      	str	r1, [r7, #28]
				HDC_config.last_temperature,
 8003d26:	4b43      	ldr	r3, [pc, #268]	@ (8003e34 <StartDebugTask+0x2fc>)
 8003d28:	685b      	ldr	r3, [r3, #4]
			int size = snprintf((char *)message, sizeof(message),
 8003d2a:	1c18      	adds	r0, r3, #0
 8003d2c:	f7ff fb3a 	bl	80033a4 <__aeabi_f2d>
 8003d30:	6138      	str	r0, [r7, #16]
 8003d32:	6179      	str	r1, [r7, #20]
 8003d34:	19a3      	adds	r3, r4, r6
 8003d36:	19d9      	adds	r1, r3, r7
 8003d38:	680b      	ldr	r3, [r1, #0]
 8003d3a:	1c18      	adds	r0, r3, #0
 8003d3c:	f7ff fb32 	bl	80033a4 <__aeabi_f2d>
 8003d40:	60b8      	str	r0, [r7, #8]
 8003d42:	60f9      	str	r1, [r7, #12]
 8003d44:	19aa      	adds	r2, r5, r6
 8003d46:	19d1      	adds	r1, r2, r7
 8003d48:	680b      	ldr	r3, [r1, #0]
 8003d4a:	1c18      	adds	r0, r3, #0
 8003d4c:	f7ff fb2a 	bl	80033a4 <__aeabi_f2d>
 8003d50:	6038      	str	r0, [r7, #0]
 8003d52:	6079      	str	r1, [r7, #4]
 8003d54:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <StartDebugTask+0x2ec>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1c18      	adds	r0, r3, #0
 8003d5a:	f7ff fb23 	bl	80033a4 <__aeabi_f2d>
 8003d5e:	0004      	movs	r4, r0
 8003d60:	000d      	movs	r5, r1
 8003d62:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <StartDebugTask+0x2f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	1c18      	adds	r0, r3, #0
 8003d68:	f7ff fb1c 	bl	80033a4 <__aeabi_f2d>
 8003d6c:	4a32      	ldr	r2, [pc, #200]	@ (8003e38 <StartDebugTask+0x300>)
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	005e      	lsls	r6, r3, #1
 8003d72:	46b4      	mov	ip, r6
 8003d74:	2608      	movs	r6, #8
 8003d76:	2328      	movs	r3, #40	@ 0x28
 8003d78:	18f6      	adds	r6, r6, r3
 8003d7a:	19f6      	adds	r6, r6, r7
 8003d7c:	9010      	str	r0, [sp, #64]	@ 0x40
 8003d7e:	9111      	str	r1, [sp, #68]	@ 0x44
 8003d80:	940e      	str	r4, [sp, #56]	@ 0x38
 8003d82:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687c      	ldr	r4, [r7, #4]
 8003d88:	930c      	str	r3, [sp, #48]	@ 0x30
 8003d8a:	940d      	str	r4, [sp, #52]	@ 0x34
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	68fc      	ldr	r4, [r7, #12]
 8003d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	697c      	ldr	r4, [r7, #20]
 8003d98:	9308      	str	r3, [sp, #32]
 8003d9a:	9409      	str	r4, [sp, #36]	@ 0x24
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	69fc      	ldr	r4, [r7, #28]
 8003da0:	9306      	str	r3, [sp, #24]
 8003da2:	9407      	str	r4, [sp, #28]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003da8:	9304      	str	r3, [sp, #16]
 8003daa:	9405      	str	r4, [sp, #20]
 8003dac:	4651      	mov	r1, sl
 8003dae:	9102      	str	r1, [sp, #8]
 8003db0:	4649      	mov	r1, r9
 8003db2:	9101      	str	r1, [sp, #4]
 8003db4:	4641      	mov	r1, r8
 8003db6:	9100      	str	r1, [sp, #0]
 8003db8:	465b      	mov	r3, fp
 8003dba:	4661      	mov	r1, ip
 8003dbc:	0030      	movs	r0, r6
 8003dbe:	f00e ff6b 	bl	8012c98 <sniprintf>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	2288      	movs	r2, #136	@ 0x88
 8003dc6:	0052      	lsls	r2, r2, #1
 8003dc8:	2428      	movs	r4, #40	@ 0x28
 8003dca:	1911      	adds	r1, r2, r4
 8003dcc:	19c9      	adds	r1, r1, r7
 8003dce:	600b      	str	r3, [r1, #0]
				max_acceleration, maximum_move,
				max_acceleration_in_period, maximum_move_in_period);

			if (size > 0) {
 8003dd0:	1913      	adds	r3, r2, r4
 8003dd2:	19d9      	adds	r1, r3, r7
 8003dd4:	680b      	ldr	r3, [r1, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dd0b      	ble.n	8003df2 <StartDebugTask+0x2ba>
				HAL_UART_Transmit(debug_uart, message, size, 100);
 8003dda:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <StartDebugTask+0x2e8>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	1913      	adds	r3, r2, r4
 8003de0:	19da      	adds	r2, r3, r7
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	2608      	movs	r6, #8
 8003de8:	1933      	adds	r3, r6, r4
 8003dea:	19d9      	adds	r1, r3, r7
 8003dec:	2364      	movs	r3, #100	@ 0x64
 8003dee:	f008 fbab 	bl	800c548 <HAL_UART_Transmit>
			}

		}

		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8003df2:	4b12      	ldr	r3, [pc, #72]	@ (8003e3c <StartDebugTask+0x304>)
 8003df4:	2108      	movs	r1, #8
 8003df6:	0018      	movs	r0, r3
 8003df8:	f004 fc8c 	bl	8008714 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	f00c f931 	bl	8010064 <vTaskDelay>
		send_debug_messages();
 8003e02:	e6fa      	b.n	8003bfa <StartDebugTask+0xc2>
 8003e04:	200003d0 	.word	0x200003d0
 8003e08:	000927c0 	.word	0x000927c0
 8003e0c:	200003ac 	.word	0x200003ac
 8003e10:	080168e0 	.word	0x080168e0
 8003e14:	080168f0 	.word	0x080168f0
 8003e18:	fffffef0 	.word	0xfffffef0
 8003e1c:	08016914 	.word	0x08016914
 8003e20:	2000006c 	.word	0x2000006c
 8003e24:	200003b8 	.word	0x200003b8
 8003e28:	200003b4 	.word	0x200003b4
 8003e2c:	2000038c 	.word	0x2000038c
 8003e30:	40900000 	.word	0x40900000
 8003e34:	20000394 	.word	0x20000394
 8003e38:	08016920 	.word	0x08016920
 8003e3c:	50000c00 	.word	0x50000c00

08003e40 <StartTaskRxCommands>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRxCommands */
void StartTaskRxCommands(void *argument)
{
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	46de      	mov	lr, fp
 8003e44:	4657      	mov	r7, sl
 8003e46:	464e      	mov	r6, r9
 8003e48:	4645      	mov	r5, r8
 8003e4a:	b5e0      	push	{r5, r6, r7, lr}
 8003e4c:	b0c1      	sub	sp, #260	@ 0x104
 8003e4e:	af14      	add	r7, sp, #80	@ 0x50
 8003e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartTaskRxCommands */
	/* Infinite loop */
	uint32_t ulNotifiedValue;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 500 );
 8003e52:	23fa      	movs	r3, #250	@ 0xfa
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	22a0      	movs	r2, #160	@ 0xa0
 8003e58:	18ba      	adds	r2, r7, r2
 8003e5a:	6013      	str	r3, [r2, #0]
	memset(received_command, 0x0, sizeof(received_command));
 8003e5c:	4bf6      	ldr	r3, [pc, #984]	@ (8004238 <StartTaskRxCommands+0x3f8>)
 8003e5e:	2216      	movs	r2, #22
 8003e60:	2100      	movs	r1, #0
 8003e62:	0018      	movs	r0, r3
 8003e64:	f00e fff0 	bl	8012e48 <memset>
	memset(transmitting_command, 0x0, sizeof(transmitting_command));
 8003e68:	4bf4      	ldr	r3, [pc, #976]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8003e6a:	2216      	movs	r2, #22
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f00e ffea 	bl	8012e48 <memset>

	//receive(terminal_uart, received_command, 1);
	  receive(terminal_uart, RX_command_buff, 1);
 8003e74:	4bf2      	ldr	r3, [pc, #968]	@ (8004240 <StartTaskRxCommands+0x400>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	49f2      	ldr	r1, [pc, #968]	@ (8004244 <StartTaskRxCommands+0x404>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f001 fe86 	bl	8005b8e <receive>
	for (;;) {

		    ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );
 8003e82:	23a0      	movs	r3, #160	@ 0xa0
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0019      	movs	r1, r3
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f00c fd7e 	bl	801098c <ulTaskNotifyTake>
 8003e90:	0003      	movs	r3, r0
 8003e92:	229c      	movs	r2, #156	@ 0x9c
 8003e94:	18b9      	adds	r1, r7, r2
 8003e96:	600b      	str	r3, [r1, #0]

		    if( ulNotifiedValue == 0 )
 8003e98:	18bb      	adds	r3, r7, r2
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <StartTaskRxCommands+0x64>
 8003ea0:	f000 fcd7 	bl	8004852 <StartTaskRxCommands+0xa12>
			{
		    	continue;
			}

			HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8003ea4:	4be8      	ldr	r3, [pc, #928]	@ (8004248 <StartTaskRxCommands+0x408>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2108      	movs	r1, #8
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f004 fc15 	bl	80086da <HAL_GPIO_WritePin>

			debug("Received <<%s>>\r\n", received_command);
 8003eb0:	4ae1      	ldr	r2, [pc, #900]	@ (8004238 <StartTaskRxCommands+0x3f8>)
 8003eb2:	4be6      	ldr	r3, [pc, #920]	@ (800424c <StartTaskRxCommands+0x40c>)
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f001 fdec 	bl	8005a94 <debug>

			if (terminal_parser_state == PARSER_S4x) { // если посылка S4x;
 8003ebc:	4be4      	ldr	r3, [pc, #912]	@ (8004250 <StartTaskRxCommands+0x410>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d000      	beq.n	8003ec6 <StartTaskRxCommands+0x86>
 8003ec4:	e137      	b.n	8004136 <StartTaskRxCommands+0x2f6>

				float maximum = fmax(
						round_and_limit_float(get_max_positive_move()),
 8003ec6:	f001 fd45 	bl	8005954 <get_max_positive_move>
 8003eca:	1c03      	adds	r3, r0, #0
 8003ecc:	1c18      	adds	r0, r3, #0
 8003ece:	f001 fd55 	bl	800597c <round_and_limit_float>
 8003ed2:	1c03      	adds	r3, r0, #0
				float maximum = fmax(
 8003ed4:	1c18      	adds	r0, r3, #0
 8003ed6:	f7ff fa65 	bl	80033a4 <__aeabi_f2d>
 8003eda:	0004      	movs	r4, r0
 8003edc:	000d      	movs	r5, r1
						round_and_limit_float(get_max_negative_move()));
 8003ede:	f001 fd43 	bl	8005968 <get_max_negative_move>
 8003ee2:	1c03      	adds	r3, r0, #0
 8003ee4:	1c18      	adds	r0, r3, #0
 8003ee6:	f001 fd49 	bl	800597c <round_and_limit_float>
 8003eea:	1c03      	adds	r3, r0, #0
				float maximum = fmax(
 8003eec:	1c18      	adds	r0, r3, #0
 8003eee:	f7ff fa59 	bl	80033a4 <__aeabi_f2d>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	000b      	movs	r3, r1
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	0029      	movs	r1, r5
 8003efa:	f00d fd40 	bl	801197e <fmax>
 8003efe:	0002      	movs	r2, r0
 8003f00:	000b      	movs	r3, r1
 8003f02:	0010      	movs	r0, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	f7ff fa95 	bl	8003434 <__aeabi_d2f>
 8003f0a:	1c03      	adds	r3, r0, #0
 8003f0c:	2284      	movs	r2, #132	@ 0x84
 8003f0e:	18ba      	adds	r2, r7, r2
 8003f10:	6013      	str	r3, [r2, #0]

				float max_acceleration = fmax(
						round_and_limit_float(get_max_positive_acceleration()),
 8003f12:	f001 fd0b 	bl	800592c <get_max_positive_acceleration>
 8003f16:	1c03      	adds	r3, r0, #0
 8003f18:	1c18      	adds	r0, r3, #0
 8003f1a:	f001 fd2f 	bl	800597c <round_and_limit_float>
 8003f1e:	1c03      	adds	r3, r0, #0
				float max_acceleration = fmax(
 8003f20:	1c18      	adds	r0, r3, #0
 8003f22:	f7ff fa3f 	bl	80033a4 <__aeabi_f2d>
 8003f26:	0004      	movs	r4, r0
 8003f28:	000d      	movs	r5, r1
						round_and_limit_float(get_max_negative_acceleration()));
 8003f2a:	f001 fd09 	bl	8005940 <get_max_negative_acceleration>
 8003f2e:	1c03      	adds	r3, r0, #0
 8003f30:	1c18      	adds	r0, r3, #0
 8003f32:	f001 fd23 	bl	800597c <round_and_limit_float>
 8003f36:	1c03      	adds	r3, r0, #0
				float max_acceleration = fmax(
 8003f38:	1c18      	adds	r0, r3, #0
 8003f3a:	f7ff fa33 	bl	80033a4 <__aeabi_f2d>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	000b      	movs	r3, r1
 8003f42:	0020      	movs	r0, r4
 8003f44:	0029      	movs	r1, r5
 8003f46:	f00d fd1a 	bl	801197e <fmax>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	000b      	movs	r3, r1
 8003f4e:	0010      	movs	r0, r2
 8003f50:	0019      	movs	r1, r3
 8003f52:	f7ff fa6f 	bl	8003434 <__aeabi_d2f>
 8003f56:	1c03      	adds	r3, r0, #0
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	18ba      	adds	r2, r7, r2
 8003f5c:	6013      	str	r3, [r2, #0]

				uint8_t flags = 0;
 8003f5e:	2073      	movs	r0, #115	@ 0x73
 8003f60:	2428      	movs	r4, #40	@ 0x28
 8003f62:	1903      	adds	r3, r0, r4
 8003f64:	19db      	adds	r3, r3, r7
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8003f6a:	4bba      	ldr	r3, [pc, #744]	@ (8004254 <StartTaskRxCommands+0x414>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0019      	movs	r1, r3
 8003f70:	1903      	adds	r3, r0, r4
 8003f72:	19db      	adds	r3, r3, r7
 8003f74:	1902      	adds	r2, r0, r4
 8003f76:	19d2      	adds	r2, r2, r7
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 8003f7e:	4bb6      	ldr	r3, [pc, #728]	@ (8004258 <StartTaskRxCommands+0x418>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	b25a      	sxtb	r2, r3
 8003f86:	1903      	adds	r3, r0, r4
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b25a      	sxtb	r2, r3
 8003f92:	1903      	adds	r3, r0, r4
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8003f98:	4baf      	ldr	r3, [pc, #700]	@ (8004258 <StartTaskRxCommands+0x418>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <StartTaskRxCommands+0x166>
 8003fa0:	4bad      	ldr	r3, [pc, #692]	@ (8004258 <StartTaskRxCommands+0x418>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]

					transmitting_command[0] = HDC_config.last_temperature;
 8003fa6:	4bad      	ldr	r3, [pc, #692]	@ (800425c <StartTaskRxCommands+0x41c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	1c18      	adds	r0, r3, #0
 8003fac:	f7fc fad6 	bl	800055c <__aeabi_f2uiz>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8003fb6:	701a      	strb	r2, [r3, #0]
					transmitting_command[1] = HDC_config.last_humidity;
 8003fb8:	4ba8      	ldr	r3, [pc, #672]	@ (800425c <StartTaskRxCommands+0x41c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	1c18      	adds	r0, r3, #0
 8003fbe:	f7fc facd 	bl	800055c <__aeabi_f2uiz>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4b9d      	ldr	r3, [pc, #628]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8003fc8:	705a      	strb	r2, [r3, #1]
					transmitting_command[2] = flags;
 8003fca:	4b9c      	ldr	r3, [pc, #624]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8003fcc:	2273      	movs	r2, #115	@ 0x73
 8003fce:	2128      	movs	r1, #40	@ 0x28
 8003fd0:	1852      	adds	r2, r2, r1
 8003fd2:	19d2      	adds	r2, r2, r7
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	709a      	strb	r2, [r3, #2]
					transmitting_command[3] = (((LPS_data.last_pressure / 1000) - 0.5) / 1.5 * 100);
 8003fd8:	4ba1      	ldr	r3, [pc, #644]	@ (8004260 <StartTaskRxCommands+0x420>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	49a1      	ldr	r1, [pc, #644]	@ (8004264 <StartTaskRxCommands+0x424>)
 8003fde:	1c18      	adds	r0, r3, #0
 8003fe0:	f7fc fd98 	bl	8000b14 <__aeabi_fdiv>
 8003fe4:	1c03      	adds	r3, r0, #0
 8003fe6:	1c18      	adds	r0, r3, #0
 8003fe8:	f7ff f9dc 	bl	80033a4 <__aeabi_f2d>
 8003fec:	2200      	movs	r2, #0
 8003fee:	4b9e      	ldr	r3, [pc, #632]	@ (8004268 <StartTaskRxCommands+0x428>)
 8003ff0:	f7fe fd8c 	bl	8002b0c <__aeabi_dsub>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	000b      	movs	r3, r1
 8003ff8:	0010      	movs	r0, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4b9b      	ldr	r3, [pc, #620]	@ (800426c <StartTaskRxCommands+0x42c>)
 8004000:	f7fd fe78 	bl	8001cf4 <__aeabi_ddiv>
 8004004:	0002      	movs	r2, r0
 8004006:	000b      	movs	r3, r1
 8004008:	0010      	movs	r0, r2
 800400a:	0019      	movs	r1, r3
 800400c:	2200      	movs	r2, #0
 800400e:	4b98      	ldr	r3, [pc, #608]	@ (8004270 <StartTaskRxCommands+0x430>)
 8004010:	f7fe fab4 	bl	800257c <__aeabi_dmul>
 8004014:	0002      	movs	r2, r0
 8004016:	000b      	movs	r3, r1
 8004018:	0010      	movs	r0, r2
 800401a:	0019      	movs	r1, r3
 800401c:	f7fc fab6 	bl	800058c <__aeabi_d2uiz>
 8004020:	0003      	movs	r3, r0
 8004022:	b2da      	uxtb	r2, r3
 8004024:	4b85      	ldr	r3, [pc, #532]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004026:	70da      	strb	r2, [r3, #3]

					memcpy(&transmitting_command[4], &maximum, 4);
 8004028:	2384      	movs	r3, #132	@ 0x84
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b83      	ldr	r3, [pc, #524]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004030:	605a      	str	r2, [r3, #4]
					memcpy(&transmitting_command[8], &max_acceleration, 4);
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b80      	ldr	r3, [pc, #512]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800403a:	609a      	str	r2, [r3, #8]
					memcpy(&transmitting_command[12], &maximum_move_in_period, 4);
 800403c:	4b8d      	ldr	r3, [pc, #564]	@ (8004274 <StartTaskRxCommands+0x434>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b7e      	ldr	r3, [pc, #504]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004042:	60da      	str	r2, [r3, #12]
					memcpy(&transmitting_command[16], &max_acceleration_in_period, 4);
 8004044:	4b8c      	ldr	r3, [pc, #560]	@ (8004278 <StartTaskRxCommands+0x438>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b7c      	ldr	r3, [pc, #496]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800404a:	611a      	str	r2, [r3, #16]
					memcpy(&transmitting_command[20], &serial_number_control, 2);
 800404c:	4b8b      	ldr	r3, [pc, #556]	@ (800427c <StartTaskRxCommands+0x43c>)
 800404e:	881a      	ldrh	r2, [r3, #0]
 8004050:	4b7a      	ldr	r3, [pc, #488]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004052:	829a      	strh	r2, [r3, #20]

					HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 22);
 8004054:	4b7a      	ldr	r3, [pc, #488]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4978      	ldr	r1, [pc, #480]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800405a:	2216      	movs	r2, #22
 800405c:	0018      	movs	r0, r3
 800405e:	f008 fb17 	bl	800c690 <HAL_UART_Transmit_IT>

					//memset(transmitting_command, 0, sizeof(transmitting_command));
					terminal_parser_state =	PARSER_EMPT;
 8004062:	4b7b      	ldr	r3, [pc, #492]	@ (8004250 <StartTaskRxCommands+0x410>)
 8004064:	2209      	movs	r2, #9
 8004066:	701a      	strb	r2, [r3, #0]

					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
							transmitting_command[0], transmitting_command[1],
 8004068:	4b74      	ldr	r3, [pc, #464]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800406a:	781b      	ldrb	r3, [r3, #0]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
							transmitting_command[0], transmitting_command[1],
 800406e:	4b73      	ldr	r3, [pc, #460]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004070:	785b      	ldrb	r3, [r3, #1]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
							transmitting_command[2], transmitting_command[3],
 8004074:	4b71      	ldr	r3, [pc, #452]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004076:	789b      	ldrb	r3, [r3, #2]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004078:	623b      	str	r3, [r7, #32]
							transmitting_command[2], transmitting_command[3],
 800407a:	4b70      	ldr	r3, [pc, #448]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800407c:	78db      	ldrb	r3, [r3, #3]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800407e:	469b      	mov	fp, r3
							transmitting_command[4], transmitting_command[5],
 8004080:	4b6e      	ldr	r3, [pc, #440]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004082:	791b      	ldrb	r3, [r3, #4]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004084:	61fb      	str	r3, [r7, #28]
							transmitting_command[4], transmitting_command[5],
 8004086:	4b6d      	ldr	r3, [pc, #436]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004088:	795b      	ldrb	r3, [r3, #5]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800408a:	61bb      	str	r3, [r7, #24]
							transmitting_command[6], transmitting_command[7],
 800408c:	4b6b      	ldr	r3, [pc, #428]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800408e:	799b      	ldrb	r3, [r3, #6]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004090:	617b      	str	r3, [r7, #20]
							transmitting_command[6], transmitting_command[7],
 8004092:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8004094:	79db      	ldrb	r3, [r3, #7]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004096:	613b      	str	r3, [r7, #16]
							transmitting_command[8], transmitting_command[9],
 8004098:	4b68      	ldr	r3, [pc, #416]	@ (800423c <StartTaskRxCommands+0x3fc>)
 800409a:	7a1b      	ldrb	r3, [r3, #8]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800409c:	60fb      	str	r3, [r7, #12]
							transmitting_command[8], transmitting_command[9],
 800409e:	4b67      	ldr	r3, [pc, #412]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040a0:	7a5b      	ldrb	r3, [r3, #9]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040a2:	60bb      	str	r3, [r7, #8]
							transmitting_command[10], transmitting_command[11],
 80040a4:	4b65      	ldr	r3, [pc, #404]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040a6:	7a9b      	ldrb	r3, [r3, #10]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040a8:	607b      	str	r3, [r7, #4]
							transmitting_command[10], transmitting_command[11],
 80040aa:	4b64      	ldr	r3, [pc, #400]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040ac:	7adb      	ldrb	r3, [r3, #11]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ae:	603b      	str	r3, [r7, #0]
							transmitting_command[12], transmitting_command[13],
 80040b0:	4b62      	ldr	r3, [pc, #392]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040b2:	7b1b      	ldrb	r3, [r3, #12]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040b4:	469a      	mov	sl, r3
							transmitting_command[12], transmitting_command[13],
 80040b6:	4b61      	ldr	r3, [pc, #388]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040b8:	7b5b      	ldrb	r3, [r3, #13]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ba:	4699      	mov	r9, r3
							transmitting_command[14], transmitting_command[15],
 80040bc:	4b5f      	ldr	r3, [pc, #380]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040be:	7b9b      	ldrb	r3, [r3, #14]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040c0:	4698      	mov	r8, r3
							transmitting_command[14], transmitting_command[15],
 80040c2:	4b5e      	ldr	r3, [pc, #376]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040c4:	7bdb      	ldrb	r3, [r3, #15]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040c6:	469c      	mov	ip, r3
							transmitting_command[16], transmitting_command[17],
 80040c8:	4b5c      	ldr	r3, [pc, #368]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040ca:	7c1b      	ldrb	r3, [r3, #16]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040cc:	001e      	movs	r6, r3
							transmitting_command[16], transmitting_command[17],
 80040ce:	4b5b      	ldr	r3, [pc, #364]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040d0:	7c5b      	ldrb	r3, [r3, #17]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040d2:	001d      	movs	r5, r3
							transmitting_command[18], transmitting_command[19],
 80040d4:	4b59      	ldr	r3, [pc, #356]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040d6:	7c9b      	ldrb	r3, [r3, #18]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040d8:	001c      	movs	r4, r3
							transmitting_command[18], transmitting_command[19],
 80040da:	4b58      	ldr	r3, [pc, #352]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040dc:	7cdb      	ldrb	r3, [r3, #19]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040de:	0019      	movs	r1, r3
							transmitting_command[20], transmitting_command[21]);
 80040e0:	4b56      	ldr	r3, [pc, #344]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040e2:	7d1b      	ldrb	r3, [r3, #20]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040e4:	001a      	movs	r2, r3
							transmitting_command[20], transmitting_command[21]);
 80040e6:	4b55      	ldr	r3, [pc, #340]	@ (800423c <StartTaskRxCommands+0x3fc>)
 80040e8:	7d5b      	ldrb	r3, [r3, #21]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ea:	4865      	ldr	r0, [pc, #404]	@ (8004280 <StartTaskRxCommands+0x440>)
 80040ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80040ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80040f0:	9110      	str	r1, [sp, #64]	@ 0x40
 80040f2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80040f4:	950e      	str	r5, [sp, #56]	@ 0x38
 80040f6:	960d      	str	r6, [sp, #52]	@ 0x34
 80040f8:	4664      	mov	r4, ip
 80040fa:	940c      	str	r4, [sp, #48]	@ 0x30
 80040fc:	4644      	mov	r4, r8
 80040fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004100:	464c      	mov	r4, r9
 8004102:	940a      	str	r4, [sp, #40]	@ 0x28
 8004104:	4654      	mov	r4, sl
 8004106:	9409      	str	r4, [sp, #36]	@ 0x24
 8004108:	683c      	ldr	r4, [r7, #0]
 800410a:	9408      	str	r4, [sp, #32]
 800410c:	687c      	ldr	r4, [r7, #4]
 800410e:	9407      	str	r4, [sp, #28]
 8004110:	68bc      	ldr	r4, [r7, #8]
 8004112:	9406      	str	r4, [sp, #24]
 8004114:	68fc      	ldr	r4, [r7, #12]
 8004116:	9405      	str	r4, [sp, #20]
 8004118:	693c      	ldr	r4, [r7, #16]
 800411a:	9404      	str	r4, [sp, #16]
 800411c:	697c      	ldr	r4, [r7, #20]
 800411e:	9403      	str	r4, [sp, #12]
 8004120:	69bc      	ldr	r4, [r7, #24]
 8004122:	9402      	str	r4, [sp, #8]
 8004124:	69fc      	ldr	r4, [r7, #28]
 8004126:	9401      	str	r4, [sp, #4]
 8004128:	465c      	mov	r4, fp
 800412a:	9400      	str	r4, [sp, #0]
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004132:	f001 fcaf 	bl	8005a94 <debug>

			}

			if (terminal_parser_state == PARSER_Sxx) { // если посылка S0x;
 8004136:	4b46      	ldr	r3, [pc, #280]	@ (8004250 <StartTaskRxCommands+0x410>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d000      	beq.n	8004140 <StartTaskRxCommands+0x300>
 800413e:	e11c      	b.n	800437a <StartTaskRxCommands+0x53a>



						uint8_t flags = 0;
 8004140:	2072      	movs	r0, #114	@ 0x72
 8004142:	2428      	movs	r4, #40	@ 0x28
 8004144:	1903      	adds	r3, r0, r4
 8004146:	19db      	adds	r3, r3, r7
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
						flags |= (case_opened << 0);
 800414c:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <StartTaskRxCommands+0x414>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	0019      	movs	r1, r3
 8004152:	1903      	adds	r3, r0, r4
 8004154:	19db      	adds	r3, r3, r7
 8004156:	1902      	adds	r2, r0, r4
 8004158:	19d2      	adds	r2, r2, r7
 800415a:	7812      	ldrb	r2, [r2, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	701a      	strb	r2, [r3, #0]
						flags |= (is_error << 1);
 8004160:	4b3d      	ldr	r3, [pc, #244]	@ (8004258 <StartTaskRxCommands+0x418>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b25a      	sxtb	r2, r3
 8004168:	1903      	adds	r3, r0, r4
 800416a:	19db      	adds	r3, r3, r7
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b25b      	sxtb	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	b25a      	sxtb	r2, r3
 8004174:	1903      	adds	r3, r0, r4
 8004176:	19db      	adds	r3, r3, r7
 8004178:	701a      	strb	r2, [r3, #0]
						if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 800417a:	4b37      	ldr	r3, [pc, #220]	@ (8004258 <StartTaskRxCommands+0x418>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <StartTaskRxCommands+0x348>
 8004182:	4b35      	ldr	r3, [pc, #212]	@ (8004258 <StartTaskRxCommands+0x418>)
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
						IDN=1;
 8004188:	4b3e      	ldr	r3, [pc, #248]	@ (8004284 <StartTaskRxCommands+0x444>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
						if (MSV0==1&&ADR==0) {	// Анализируем третий символ, отвечающий за конкретный БК
 800418e:	4b3e      	ldr	r3, [pc, #248]	@ (8004288 <StartTaskRxCommands+0x448>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d143      	bne.n	800421e <StartTaskRxCommands+0x3de>
 8004196:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <StartTaskRxCommands+0x44c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d13f      	bne.n	800421e <StartTaskRxCommands+0x3de>

							uint8_t buf[4] = {0,0,0,0};
 800419e:	2154      	movs	r1, #84	@ 0x54
 80041a0:	2028      	movs	r0, #40	@ 0x28
 80041a2:	180b      	adds	r3, r1, r0
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
							//uint32_t val = (ads_val*100)/421 ;
							//uint32_t val = (8388607*100)/421 ;
							    //uint32_t val =  1401366;
							uint32_t val = (ads_val);
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <StartTaskRxCommands+0x450>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2494      	movs	r4, #148	@ 0x94
 80041b0:	193a      	adds	r2, r7, r4
 80041b2:	6013      	str	r3, [r2, #0]
									//	отправ	EE FF 0B 00
							//0x78730B00;
							    buf[3] = (val >> (2*8)) & 0xFF;
 80041b4:	193b      	adds	r3, r7, r4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	180b      	adds	r3, r1, r0
 80041be:	19db      	adds	r3, r3, r7
 80041c0:	70da      	strb	r2, [r3, #3]
							    buf[2] = (val >> (1*8)) & 0xFF;
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	180b      	adds	r3, r1, r0
 80041cc:	19db      	adds	r3, r3, r7
 80041ce:	709a      	strb	r2, [r3, #2]
							    buf[1] = (val >> (0*8)) & 0xFF;
 80041d0:	193b      	adds	r3, r7, r4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	180b      	adds	r3, r1, r0
 80041d8:	19db      	adds	r3, r3, r7
 80041da:	705a      	strb	r2, [r3, #1]
							    buf[0] = buf[1]^buf[2]^buf[3];
 80041dc:	180b      	adds	r3, r1, r0
 80041de:	19db      	adds	r3, r3, r7
 80041e0:	785a      	ldrb	r2, [r3, #1]
 80041e2:	180b      	adds	r3, r1, r0
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	789b      	ldrb	r3, [r3, #2]
 80041e8:	4053      	eors	r3, r2
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	180b      	adds	r3, r1, r0
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	78db      	ldrb	r3, [r3, #3]
 80041f2:	4053      	eors	r3, r2
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	180b      	adds	r3, r1, r0
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	701a      	strb	r2, [r3, #0]

							HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 80041fc:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <StartTaskRxCommands+0x400>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	000c      	movs	r4, r1
 8004202:	0005      	movs	r5, r0
 8004204:	180a      	adds	r2, r1, r0
 8004206:	19d1      	adds	r1, r2, r7
 8004208:	2204      	movs	r2, #4
 800420a:	0018      	movs	r0, r3
 800420c:	f008 fa40 	bl	800c690 <HAL_UART_Transmit_IT>
							debug("Transmit to terminal: <%x>",
 8004210:	1963      	adds	r3, r4, r5
 8004212:	19da      	adds	r2, r3, r7
 8004214:	4b1f      	ldr	r3, [pc, #124]	@ (8004294 <StartTaskRxCommands+0x454>)
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f001 fc3b 	bl	8005a94 <debug>
									buf);
						}
						if (ADR==1&&MSV==0) {	// Анализируем третий символ, отвечающий за конкретный БК
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <StartTaskRxCommands+0x44c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d157      	bne.n	80042d6 <StartTaskRxCommands+0x496>
 8004226:	4b1c      	ldr	r3, [pc, #112]	@ (8004298 <StartTaskRxCommands+0x458>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d153      	bne.n	80042d6 <StartTaskRxCommands+0x496>
							 char str_adr[20];
							 sprintf(str_adr,"%c%c\r\n",sensor_inf.platform_adr[0],sensor_inf.platform_adr[1]);
 800422e:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <StartTaskRxCommands+0x45c>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	001a      	movs	r2, r3
 8004234:	e034      	b.n	80042a0 <StartTaskRxCommands+0x460>
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	20000354 	.word	0x20000354
 800423c:	2000033c 	.word	0x2000033c
 8004240:	20000070 	.word	0x20000070
 8004244:	20000374 	.word	0x20000374
 8004248:	50000c00 	.word	0x50000c00
 800424c:	080169e4 	.word	0x080169e4
 8004250:	20000004 	.word	0x20000004
 8004254:	200003b1 	.word	0x200003b1
 8004258:	200003b0 	.word	0x200003b0
 800425c:	20000394 	.word	0x20000394
 8004260:	2000038c 	.word	0x2000038c
 8004264:	447a0000 	.word	0x447a0000
 8004268:	3fe00000 	.word	0x3fe00000
 800426c:	3ff80000 	.word	0x3ff80000
 8004270:	40590000 	.word	0x40590000
 8004274:	200003b4 	.word	0x200003b4
 8004278:	200003b8 	.word	0x200003b8
 800427c:	200003ae 	.word	0x200003ae
 8004280:	080169f8 	.word	0x080169f8
 8004284:	20000370 	.word	0x20000370
 8004288:	2000037c 	.word	0x2000037c
 800428c:	20000384 	.word	0x20000384
 8004290:	2000036c 	.word	0x2000036c
 8004294:	08016a84 	.word	0x08016a84
 8004298:	20000380 	.word	0x20000380
 800429c:	200003a0 	.word	0x200003a0
 80042a0:	4be7      	ldr	r3, [pc, #924]	@ (8004640 <StartTaskRxCommands+0x800>)
 80042a2:	785b      	ldrb	r3, [r3, #1]
 80042a4:	49e7      	ldr	r1, [pc, #924]	@ (8004644 <StartTaskRxCommands+0x804>)
 80042a6:	2540      	movs	r5, #64	@ 0x40
 80042a8:	2628      	movs	r6, #40	@ 0x28
 80042aa:	19a8      	adds	r0, r5, r6
 80042ac:	19c0      	adds	r0, r0, r7
 80042ae:	f00e fd27 	bl	8012d00 <siprintf>
							 HAL_UART_Transmit_IT(terminal_uart, (uint8_t*)str_adr, strlen(str_adr));
 80042b2:	4be5      	ldr	r3, [pc, #916]	@ (8004648 <StartTaskRxCommands+0x808>)
 80042b4:	681c      	ldr	r4, [r3, #0]
 80042b6:	19ab      	adds	r3, r5, r6
 80042b8:	19db      	adds	r3, r3, r7
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7fb ff24 	bl	8000108 <strlen>
 80042c0:	0003      	movs	r3, r0
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	19ab      	adds	r3, r5, r6
 80042c6:	19db      	adds	r3, r3, r7
 80042c8:	0019      	movs	r1, r3
 80042ca:	0020      	movs	r0, r4
 80042cc:	f008 f9e0 	bl	800c690 <HAL_UART_Transmit_IT>

							 ADR=0;
 80042d0:	4bde      	ldr	r3, [pc, #888]	@ (800464c <StartTaskRxCommands+0x80c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
						}
						if (MSV==1&&ADR==0&&MSV0==0) {	// Анализируем третий символ, отвечающий за конкретный БК
 80042d6:	4bde      	ldr	r3, [pc, #888]	@ (8004650 <StartTaskRxCommands+0x810>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d14a      	bne.n	8004374 <StartTaskRxCommands+0x534>
 80042de:	4bdb      	ldr	r3, [pc, #876]	@ (800464c <StartTaskRxCommands+0x80c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d146      	bne.n	8004374 <StartTaskRxCommands+0x534>
 80042e6:	4bdb      	ldr	r3, [pc, #876]	@ (8004654 <StartTaskRxCommands+0x814>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d142      	bne.n	8004374 <StartTaskRxCommands+0x534>

						   uint8_t buf[4] = {0,0,0,0};
 80042ee:	213c      	movs	r1, #60	@ 0x3c
 80042f0:	2028      	movs	r0, #40	@ 0x28
 80042f2:	180b      	adds	r3, r1, r0
 80042f4:	19db      	adds	r3, r3, r7
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
													//uint32_t val = (ads_val*100)/421 ;
													//uint32_t val = (8388607*100)/421 ;
													    //uint32_t val =  1401366;
						   uint32_t val = (ads_val);
 80042fa:	4bd7      	ldr	r3, [pc, #860]	@ (8004658 <StartTaskRxCommands+0x818>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2490      	movs	r4, #144	@ 0x90
 8004300:	193a      	adds	r2, r7, r4
 8004302:	6013      	str	r3, [r2, #0]
															//	отправ	EE FF 0B 00
													//0x78730B00;
						   buf[3] = (val >> (2*8)) & 0xFF;
 8004304:	193b      	adds	r3, r7, r4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2da      	uxtb	r2, r3
 800430c:	180b      	adds	r3, r1, r0
 800430e:	19db      	adds	r3, r3, r7
 8004310:	70da      	strb	r2, [r3, #3]
						   buf[2] = (val >> (1*8)) & 0xFF;
 8004312:	193b      	adds	r3, r7, r4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b2da      	uxtb	r2, r3
 800431a:	180b      	adds	r3, r1, r0
 800431c:	19db      	adds	r3, r3, r7
 800431e:	709a      	strb	r2, [r3, #2]
						   buf[1] = (val >> (0*8)) & 0xFF;
 8004320:	193b      	adds	r3, r7, r4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	180b      	adds	r3, r1, r0
 8004328:	19db      	adds	r3, r3, r7
 800432a:	705a      	strb	r2, [r3, #1]
						   buf[0] = buf[1]^buf[2]^buf[3];
 800432c:	180b      	adds	r3, r1, r0
 800432e:	19db      	adds	r3, r3, r7
 8004330:	785a      	ldrb	r2, [r3, #1]
 8004332:	180b      	adds	r3, r1, r0
 8004334:	19db      	adds	r3, r3, r7
 8004336:	789b      	ldrb	r3, [r3, #2]
 8004338:	4053      	eors	r3, r2
 800433a:	b2da      	uxtb	r2, r3
 800433c:	180b      	adds	r3, r1, r0
 800433e:	19db      	adds	r3, r3, r7
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	4053      	eors	r3, r2
 8004344:	b2da      	uxtb	r2, r3
 8004346:	180b      	adds	r3, r1, r0
 8004348:	19db      	adds	r3, r3, r7
 800434a:	701a      	strb	r2, [r3, #0]

							HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 800434c:	4bbe      	ldr	r3, [pc, #760]	@ (8004648 <StartTaskRxCommands+0x808>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	000c      	movs	r4, r1
 8004352:	0005      	movs	r5, r0
 8004354:	180a      	adds	r2, r1, r0
 8004356:	19d1      	adds	r1, r2, r7
 8004358:	2204      	movs	r2, #4
 800435a:	0018      	movs	r0, r3
 800435c:	f008 f998 	bl	800c690 <HAL_UART_Transmit_IT>
							debug("Transmit to terminal: <%x>",
 8004360:	1963      	adds	r3, r4, r5
 8004362:	19da      	adds	r2, r3, r7
 8004364:	4bbd      	ldr	r3, [pc, #756]	@ (800465c <StartTaskRxCommands+0x81c>)
 8004366:	0011      	movs	r1, r2
 8004368:	0018      	movs	r0, r3
 800436a:	f001 fb93 	bl	8005a94 <debug>
							buf);

							MSV=0;
 800436e:	4bb8      	ldr	r3, [pc, #736]	@ (8004650 <StartTaskRxCommands+0x810>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
						}


							terminal_parser_state =	PARSER_EMPT;
 8004374:	4bba      	ldr	r3, [pc, #744]	@ (8004660 <StartTaskRxCommands+0x820>)
 8004376:	2209      	movs	r2, #9
 8004378:	701a      	strb	r2, [r3, #0]
					}

			if (terminal_parser_state == PARSER_MSV70) { // если посылка Sxx;
 800437a:	4bb9      	ldr	r3, [pc, #740]	@ (8004660 <StartTaskRxCommands+0x820>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d12f      	bne.n	80043e2 <StartTaskRxCommands+0x5a2>



									uint8_t flags = 0;
 8004382:	2067      	movs	r0, #103	@ 0x67
 8004384:	2428      	movs	r4, #40	@ 0x28
 8004386:	1903      	adds	r3, r0, r4
 8004388:	19db      	adds	r3, r3, r7
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
									flags |= (case_opened << 0);
 800438e:	4bb5      	ldr	r3, [pc, #724]	@ (8004664 <StartTaskRxCommands+0x824>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	0019      	movs	r1, r3
 8004394:	1903      	adds	r3, r0, r4
 8004396:	19db      	adds	r3, r3, r7
 8004398:	1902      	adds	r2, r0, r4
 800439a:	19d2      	adds	r2, r2, r7
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	701a      	strb	r2, [r3, #0]
									flags |= (is_error << 1);
 80043a2:	4bb1      	ldr	r3, [pc, #708]	@ (8004668 <StartTaskRxCommands+0x828>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	b25a      	sxtb	r2, r3
 80043aa:	1903      	adds	r3, r0, r4
 80043ac:	19db      	adds	r3, r3, r7
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b25a      	sxtb	r2, r3
 80043b6:	1903      	adds	r3, r0, r4
 80043b8:	19db      	adds	r3, r3, r7
 80043ba:	701a      	strb	r2, [r3, #0]
									if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 80043bc:	4baa      	ldr	r3, [pc, #680]	@ (8004668 <StartTaskRxCommands+0x828>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <StartTaskRxCommands+0x58a>
 80043c4:	4ba8      	ldr	r3, [pc, #672]	@ (8004668 <StartTaskRxCommands+0x828>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]

										// Анализируем третий символ, отвечающий за конкретный БК

										MSV0=1;
 80043ca:	4ba2      	ldr	r3, [pc, #648]	@ (8004654 <StartTaskRxCommands+0x814>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
										//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
										debug("Transmit to terminal: <%x>",
 80043d0:	4aa0      	ldr	r2, [pc, #640]	@ (8004654 <StartTaskRxCommands+0x814>)
 80043d2:	4ba2      	ldr	r3, [pc, #648]	@ (800465c <StartTaskRxCommands+0x81c>)
 80043d4:	0011      	movs	r1, r2
 80043d6:	0018      	movs	r0, r3
 80043d8:	f001 fb5c 	bl	8005a94 <debug>
												&MSV0);
										terminal_parser_state =	PARSER_EMPT;
 80043dc:	4ba0      	ldr	r3, [pc, #640]	@ (8004660 <StartTaskRxCommands+0x820>)
 80043de:	2209      	movs	r2, #9
 80043e0:	701a      	strb	r2, [r3, #0]

								}
			if (terminal_parser_state == PARSER_MSV7) { // если посылка Sxx;
 80043e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004660 <StartTaskRxCommands+0x820>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d12f      	bne.n	800444a <StartTaskRxCommands+0x60a>



					uint8_t flags = 0;
 80043ea:	2066      	movs	r0, #102	@ 0x66
 80043ec:	2428      	movs	r4, #40	@ 0x28
 80043ee:	1903      	adds	r3, r0, r4
 80043f0:	19db      	adds	r3, r3, r7
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
					flags |= (case_opened << 0);
 80043f6:	4b9b      	ldr	r3, [pc, #620]	@ (8004664 <StartTaskRxCommands+0x824>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	0019      	movs	r1, r3
 80043fc:	1903      	adds	r3, r0, r4
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	1902      	adds	r2, r0, r4
 8004402:	19d2      	adds	r2, r2, r7
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	701a      	strb	r2, [r3, #0]
					flags |= (is_error << 1);
 800440a:	4b97      	ldr	r3, [pc, #604]	@ (8004668 <StartTaskRxCommands+0x828>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	b25a      	sxtb	r2, r3
 8004412:	1903      	adds	r3, r0, r4
 8004414:	19db      	adds	r3, r3, r7
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b25b      	sxtb	r3, r3
 800441a:	4313      	orrs	r3, r2
 800441c:	b25a      	sxtb	r2, r3
 800441e:	1903      	adds	r3, r0, r4
 8004420:	19db      	adds	r3, r3, r7
 8004422:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8004424:	4b90      	ldr	r3, [pc, #576]	@ (8004668 <StartTaskRxCommands+0x828>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <StartTaskRxCommands+0x5f2>
 800442c:	4b8e      	ldr	r3, [pc, #568]	@ (8004668 <StartTaskRxCommands+0x828>)
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]

						// Анализируем третий символ, отвечающий за конкретный БК

						MSV=1;
 8004432:	4b87      	ldr	r3, [pc, #540]	@ (8004650 <StartTaskRxCommands+0x810>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]
				//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
				debug("Transmit to terminal: <%x>",&MSV);
 8004438:	4a85      	ldr	r2, [pc, #532]	@ (8004650 <StartTaskRxCommands+0x810>)
 800443a:	4b88      	ldr	r3, [pc, #544]	@ (800465c <StartTaskRxCommands+0x81c>)
 800443c:	0011      	movs	r1, r2
 800443e:	0018      	movs	r0, r3
 8004440:	f001 fb28 	bl	8005a94 <debug>
				terminal_parser_state =	PARSER_EMPT;
 8004444:	4b86      	ldr	r3, [pc, #536]	@ (8004660 <StartTaskRxCommands+0x820>)
 8004446:	2209      	movs	r2, #9
 8004448:	701a      	strb	r2, [r3, #0]

			}
			if (terminal_parser_state == PARSER_ADR7) { // если посылка S0x;
 800444a:	4b85      	ldr	r3, [pc, #532]	@ (8004660 <StartTaskRxCommands+0x820>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b07      	cmp	r3, #7
 8004450:	d129      	bne.n	80044a6 <StartTaskRxCommands+0x666>



				uint8_t flags = 0;
 8004452:	2065      	movs	r0, #101	@ 0x65
 8004454:	2428      	movs	r4, #40	@ 0x28
 8004456:	1903      	adds	r3, r0, r4
 8004458:	19db      	adds	r3, r3, r7
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 800445e:	4b81      	ldr	r3, [pc, #516]	@ (8004664 <StartTaskRxCommands+0x824>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	0019      	movs	r1, r3
 8004464:	1903      	adds	r3, r0, r4
 8004466:	19db      	adds	r3, r3, r7
 8004468:	1902      	adds	r2, r0, r4
 800446a:	19d2      	adds	r2, r2, r7
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 8004472:	4b7d      	ldr	r3, [pc, #500]	@ (8004668 <StartTaskRxCommands+0x828>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	b25a      	sxtb	r2, r3
 800447a:	1903      	adds	r3, r0, r4
 800447c:	19db      	adds	r3, r3, r7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b25b      	sxtb	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b25a      	sxtb	r2, r3
 8004486:	1903      	adds	r3, r0, r4
 8004488:	19db      	adds	r3, r3, r7
 800448a:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 800448c:	4b76      	ldr	r3, [pc, #472]	@ (8004668 <StartTaskRxCommands+0x828>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <StartTaskRxCommands+0x65a>
 8004494:	4b74      	ldr	r3, [pc, #464]	@ (8004668 <StartTaskRxCommands+0x828>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]

				// Анализируем третий символ, отвечающий за конкретный БК
				ADR=1;
 800449a:	4b6c      	ldr	r3, [pc, #432]	@ (800464c <StartTaskRxCommands+0x80c>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
				terminal_parser_state =	PARSER_EMPT;
 80044a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004660 <StartTaskRxCommands+0x820>)
 80044a2:	2209      	movs	r2, #9
 80044a4:	701a      	strb	r2, [r3, #0]

				}
			if (terminal_parser_state == PARSER_ADRNUM) { // если посылка S0x;
 80044a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004660 <StartTaskRxCommands+0x820>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d000      	beq.n	80044b0 <StartTaskRxCommands+0x670>
 80044ae:	e093      	b.n	80045d8 <StartTaskRxCommands+0x798>


				uint8_t flags = 0;
 80044b0:	2064      	movs	r0, #100	@ 0x64
 80044b2:	2428      	movs	r4, #40	@ 0x28
 80044b4:	1903      	adds	r3, r0, r4
 80044b6:	19db      	adds	r3, r3, r7
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80044bc:	4b69      	ldr	r3, [pc, #420]	@ (8004664 <StartTaskRxCommands+0x824>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	0019      	movs	r1, r3
 80044c2:	1903      	adds	r3, r0, r4
 80044c4:	19db      	adds	r3, r3, r7
 80044c6:	1902      	adds	r2, r0, r4
 80044c8:	19d2      	adds	r2, r2, r7
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80044d0:	4b65      	ldr	r3, [pc, #404]	@ (8004668 <StartTaskRxCommands+0x828>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	b25a      	sxtb	r2, r3
 80044d8:	1903      	adds	r3, r0, r4
 80044da:	19db      	adds	r3, r3, r7
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b25a      	sxtb	r2, r3
 80044e4:	1903      	adds	r3, r0, r4
 80044e6:	19db      	adds	r3, r3, r7
 80044e8:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 80044ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004668 <StartTaskRxCommands+0x828>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <StartTaskRxCommands+0x6b8>
 80044f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004668 <StartTaskRxCommands+0x828>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
				received_number=0;
 80044f8:	4b5c      	ldr	r3, [pc, #368]	@ (800466c <StartTaskRxCommands+0x82c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	801a      	strh	r2, [r3, #0]
				for (int i = 7; i < 14; i++) {
 80044fe:	2307      	movs	r3, #7
 8004500:	2284      	movs	r2, #132	@ 0x84
 8004502:	2128      	movs	r1, #40	@ 0x28
 8004504:	1852      	adds	r2, r2, r1
 8004506:	19d2      	adds	r2, r2, r7
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e02d      	b.n	8004568 <StartTaskRxCommands+0x728>
					if (received_command[i] >= '0' && received_command[i] <= '9') {
 800450c:	4a58      	ldr	r2, [pc, #352]	@ (8004670 <StartTaskRxCommands+0x830>)
 800450e:	2084      	movs	r0, #132	@ 0x84
 8004510:	2428      	movs	r4, #40	@ 0x28
 8004512:	1903      	adds	r3, r0, r4
 8004514:	19db      	adds	r3, r3, r7
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	18d3      	adds	r3, r2, r3
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b2f      	cmp	r3, #47	@ 0x2f
 800451e:	d91a      	bls.n	8004556 <StartTaskRxCommands+0x716>
 8004520:	4a53      	ldr	r2, [pc, #332]	@ (8004670 <StartTaskRxCommands+0x830>)
 8004522:	1903      	adds	r3, r0, r4
 8004524:	19db      	adds	r3, r3, r7
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	18d3      	adds	r3, r2, r3
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b39      	cmp	r3, #57	@ 0x39
 800452e:	d812      	bhi.n	8004556 <StartTaskRxCommands+0x716>
						received_number = received_number * 10 + (received_command[i] - '0');
 8004530:	4b4e      	ldr	r3, [pc, #312]	@ (800466c <StartTaskRxCommands+0x82c>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	1c1a      	adds	r2, r3, #0
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	18db      	adds	r3, r3, r3
 800453c:	b29b      	uxth	r3, r3
 800453e:	494c      	ldr	r1, [pc, #304]	@ (8004670 <StartTaskRxCommands+0x830>)
 8004540:	1902      	adds	r2, r0, r4
 8004542:	19d2      	adds	r2, r2, r7
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	188a      	adds	r2, r1, r2
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	189b      	adds	r3, r3, r2
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b30      	subs	r3, #48	@ 0x30
 8004550:	b29a      	uxth	r2, r3
 8004552:	4b46      	ldr	r3, [pc, #280]	@ (800466c <StartTaskRxCommands+0x82c>)
 8004554:	801a      	strh	r2, [r3, #0]
				for (int i = 7; i < 14; i++) {
 8004556:	2284      	movs	r2, #132	@ 0x84
 8004558:	2128      	movs	r1, #40	@ 0x28
 800455a:	1853      	adds	r3, r2, r1
 800455c:	19db      	adds	r3, r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	1852      	adds	r2, r2, r1
 8004564:	19d2      	adds	r2, r2, r7
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	2384      	movs	r3, #132	@ 0x84
 800456a:	2228      	movs	r2, #40	@ 0x28
 800456c:	189b      	adds	r3, r3, r2
 800456e:	19db      	adds	r3, r3, r7
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b0d      	cmp	r3, #13
 8004574:	ddca      	ble.n	800450c <StartTaskRxCommands+0x6cc>
					}

				}

				// Проверка serial_number
				 if (received_number == serial_number) {
 8004576:	4b3d      	ldr	r3, [pc, #244]	@ (800466c <StartTaskRxCommands+0x82c>)
 8004578:	881a      	ldrh	r2, [r3, #0]
 800457a:	4b3e      	ldr	r3, [pc, #248]	@ (8004674 <StartTaskRxCommands+0x834>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d127      	bne.n	80045d2 <StartTaskRxCommands+0x792>
					 memset(sensor_inf.platform_adr, '0', sizeof(sensor_inf.platform_adr));
 8004582:	4b2f      	ldr	r3, [pc, #188]	@ (8004640 <StartTaskRxCommands+0x800>)
 8004584:	2202      	movs	r2, #2
 8004586:	2130      	movs	r1, #48	@ 0x30
 8004588:	0018      	movs	r0, r3
 800458a:	f00e fc5d 	bl	8012e48 <memset>
					 sensor_inf.platform_adr[0]=received_command[3];
 800458e:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <StartTaskRxCommands+0x830>)
 8004590:	78da      	ldrb	r2, [r3, #3]
 8004592:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <StartTaskRxCommands+0x800>)
 8004594:	701a      	strb	r2, [r3, #0]
					 sensor_inf.platform_adr[1]=received_command[4];
 8004596:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <StartTaskRxCommands+0x830>)
 8004598:	791a      	ldrb	r2, [r3, #4]
 800459a:	4b29      	ldr	r3, [pc, #164]	@ (8004640 <StartTaskRxCommands+0x800>)
 800459c:	705a      	strb	r2, [r3, #1]
					// clearFlash();
					 //offset=0;
					 if(offset>=248){
 800459e:	4b36      	ldr	r3, [pc, #216]	@ (8004678 <StartTaskRxCommands+0x838>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2bf7      	cmp	r3, #247	@ 0xf7
 80045a4:	dd04      	ble.n	80045b0 <StartTaskRxCommands+0x770>

					 		offset=0;
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <StartTaskRxCommands+0x838>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
					 		clearFlash();
 80045ac:	f7ff f91a 	bl	80037e4 <clearFlash>
					 	}
					 taskENTER_CRITICAL();
 80045b0:	f00c ff56 	bl	8011460 <vPortEnterCritical>
					 WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80045b4:	4b30      	ldr	r3, [pc, #192]	@ (8004678 <StartTaskRxCommands+0x838>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b21      	ldr	r3, [pc, #132]	@ (8004640 <StartTaskRxCommands+0x800>)
 80045ba:	2108      	movs	r1, #8
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff f93f 	bl	8003840 <WriteDeviceAddressOffset>
					 taskEXIT_CRITICAL();
 80045c2:	f00c ff5f 	bl	8011484 <vPortExitCritical>

					 offset+=sizeof(sensor_inf);
 80045c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <StartTaskRxCommands+0x838>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	001a      	movs	r2, r3
 80045ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <StartTaskRxCommands+0x838>)
 80045d0:	601a      	str	r2, [r3, #0]
				 }

				 //sensor_inf.crc_platform=(uint8_t)(crc32b((uint8_t *)sensor_inf.platform_adr, 2));
				 terminal_parser_state =PARSER_EMPT;
 80045d2:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <StartTaskRxCommands+0x820>)
 80045d4:	2209      	movs	r2, #9
 80045d6:	701a      	strb	r2, [r3, #0]

			}

			if (terminal_parser_state == PARSER_BDR) { // если посылка S0x;
 80045d8:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <StartTaskRxCommands+0x820>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d000      	beq.n	80045e2 <StartTaskRxCommands+0x7a2>
 80045e0:	e0df      	b.n	80047a2 <StartTaskRxCommands+0x962>


							uint8_t flags = 0;
 80045e2:	2063      	movs	r0, #99	@ 0x63
 80045e4:	2428      	movs	r4, #40	@ 0x28
 80045e6:	1903      	adds	r3, r0, r4
 80045e8:	19db      	adds	r3, r3, r7
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
							flags |= (case_opened << 0);
 80045ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <StartTaskRxCommands+0x824>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	0019      	movs	r1, r3
 80045f4:	1903      	adds	r3, r0, r4
 80045f6:	19db      	adds	r3, r3, r7
 80045f8:	1902      	adds	r2, r0, r4
 80045fa:	19d2      	adds	r2, r2, r7
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	701a      	strb	r2, [r3, #0]
							flags |= (is_error << 1);
 8004602:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <StartTaskRxCommands+0x828>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	b25a      	sxtb	r2, r3
 800460a:	1903      	adds	r3, r0, r4
 800460c:	19db      	adds	r3, r3, r7
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b25b      	sxtb	r3, r3
 8004612:	4313      	orrs	r3, r2
 8004614:	b25a      	sxtb	r2, r3
 8004616:	1903      	adds	r3, r0, r4
 8004618:	19db      	adds	r3, r3, r7
 800461a:	701a      	strb	r2, [r3, #0]
							if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 800461c:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <StartTaskRxCommands+0x828>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <StartTaskRxCommands+0x7ea>
 8004624:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <StartTaskRxCommands+0x828>)
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
							sensor_inf.received_BDR=0;
 800462a:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <StartTaskRxCommands+0x800>)
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]

							for (int i = 0; i < 22; i++) {
 8004630:	2300      	movs	r3, #0
 8004632:	2280      	movs	r2, #128	@ 0x80
 8004634:	2128      	movs	r1, #40	@ 0x28
 8004636:	1852      	adds	r2, r2, r1
 8004638:	19d2      	adds	r2, r2, r7
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e044      	b.n	80046c8 <StartTaskRxCommands+0x888>
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	200003a0 	.word	0x200003a0
 8004644:	08016aa0 	.word	0x08016aa0
 8004648:	20000070 	.word	0x20000070
 800464c:	20000384 	.word	0x20000384
 8004650:	20000380 	.word	0x20000380
 8004654:	2000037c 	.word	0x2000037c
 8004658:	2000036c 	.word	0x2000036c
 800465c:	08016a84 	.word	0x08016a84
 8004660:	20000004 	.word	0x20000004
 8004664:	200003b1 	.word	0x200003b1
 8004668:	200003b0 	.word	0x200003b0
 800466c:	2000036a 	.word	0x2000036a
 8004670:	20000354 	.word	0x20000354
 8004674:	200003ac 	.word	0x200003ac
 8004678:	200003a8 	.word	0x200003a8
								if (received_command[i] != ';') {
 800467c:	4a76      	ldr	r2, [pc, #472]	@ (8004858 <StartTaskRxCommands+0xa18>)
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	2128      	movs	r1, #40	@ 0x28
 8004682:	185b      	adds	r3, r3, r1
 8004684:	19db      	adds	r3, r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b3b      	cmp	r3, #59	@ 0x3b
 800468e:	d004      	beq.n	800469a <StartTaskRxCommands+0x85a>
									END_Cmd = END_Cmd+1;
 8004690:	4b72      	ldr	r3, [pc, #456]	@ (800485c <StartTaskRxCommands+0xa1c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	4b71      	ldr	r3, [pc, #452]	@ (800485c <StartTaskRxCommands+0xa1c>)
 8004698:	601a      	str	r2, [r3, #0]
								}
								if (received_command[i] == ';') {
 800469a:	4a6f      	ldr	r2, [pc, #444]	@ (8004858 <StartTaskRxCommands+0xa18>)
 800469c:	2180      	movs	r1, #128	@ 0x80
 800469e:	2028      	movs	r0, #40	@ 0x28
 80046a0:	180b      	adds	r3, r1, r0
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80046ac:	d103      	bne.n	80046b6 <StartTaskRxCommands+0x876>
									i=22;
 80046ae:	2316      	movs	r3, #22
 80046b0:	180a      	adds	r2, r1, r0
 80046b2:	19d2      	adds	r2, r2, r7
 80046b4:	6013      	str	r3, [r2, #0]
							for (int i = 0; i < 22; i++) {
 80046b6:	2280      	movs	r2, #128	@ 0x80
 80046b8:	2128      	movs	r1, #40	@ 0x28
 80046ba:	1853      	adds	r3, r2, r1
 80046bc:	19db      	adds	r3, r3, r7
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	1852      	adds	r2, r2, r1
 80046c4:	19d2      	adds	r2, r2, r7
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	2380      	movs	r3, #128	@ 0x80
 80046ca:	2228      	movs	r2, #40	@ 0x28
 80046cc:	189b      	adds	r3, r3, r2
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b15      	cmp	r3, #21
 80046d4:	ddd2      	ble.n	800467c <StartTaskRxCommands+0x83c>
								}
							}

							for (int i = 3; i < END_Cmd; i++) {
 80046d6:	2303      	movs	r3, #3
 80046d8:	22a4      	movs	r2, #164	@ 0xa4
 80046da:	18ba      	adds	r2, r7, r2
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e025      	b.n	800472c <StartTaskRxCommands+0x8ec>
								if (received_command[i] >= '0' && received_command[i] <= '9') {
 80046e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004858 <StartTaskRxCommands+0xa18>)
 80046e2:	20a4      	movs	r0, #164	@ 0xa4
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	18d3      	adds	r3, r2, r3
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80046ee:	d917      	bls.n	8004720 <StartTaskRxCommands+0x8e0>
 80046f0:	4a59      	ldr	r2, [pc, #356]	@ (8004858 <StartTaskRxCommands+0xa18>)
 80046f2:	183b      	adds	r3, r7, r0
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	18d3      	adds	r3, r2, r3
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b39      	cmp	r3, #57	@ 0x39
 80046fc:	d810      	bhi.n	8004720 <StartTaskRxCommands+0x8e0>
									sensor_inf.received_BDR = sensor_inf.received_BDR * 10 + (received_command[i] - '0');
 80046fe:	4b58      	ldr	r3, [pc, #352]	@ (8004860 <StartTaskRxCommands+0xa20>)
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	0013      	movs	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	189b      	adds	r3, r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	0019      	movs	r1, r3
 800470c:	4a52      	ldr	r2, [pc, #328]	@ (8004858 <StartTaskRxCommands+0xa18>)
 800470e:	183b      	adds	r3, r7, r0
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	18d3      	adds	r3, r2, r3
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	18cb      	adds	r3, r1, r3
 8004718:	3b30      	subs	r3, #48	@ 0x30
 800471a:	001a      	movs	r2, r3
 800471c:	4b50      	ldr	r3, [pc, #320]	@ (8004860 <StartTaskRxCommands+0xa20>)
 800471e:	605a      	str	r2, [r3, #4]
							for (int i = 3; i < END_Cmd; i++) {
 8004720:	22a4      	movs	r2, #164	@ 0xa4
 8004722:	18bb      	adds	r3, r7, r2
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	18ba      	adds	r2, r7, r2
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b4b      	ldr	r3, [pc, #300]	@ (800485c <StartTaskRxCommands+0xa1c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	22a4      	movs	r2, #164	@ 0xa4
 8004732:	18ba      	adds	r2, r7, r2
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	dbd2      	blt.n	80046e0 <StartTaskRxCommands+0x8a0>
								}

							}

				  while (!(USART2->ISR & USART_ISR_TC)) {
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	4b49      	ldr	r3, [pc, #292]	@ (8004864 <StartTaskRxCommands+0xa24>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2240      	movs	r2, #64	@ 0x40
 8004742:	4013      	ands	r3, r2
 8004744:	d0fa      	beq.n	800473c <StartTaskRxCommands+0x8fc>
				         // Ожидание, пока передача завершится
				     }

				     // Отключаем USART перед изменением настроек
				     USART2->CR1 &= ~USART_CR1_UE;
 8004746:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <StartTaskRxCommands+0xa24>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b46      	ldr	r3, [pc, #280]	@ (8004864 <StartTaskRxCommands+0xa24>)
 800474c:	2101      	movs	r1, #1
 800474e:	438a      	bics	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

				     // Изменение скорости
				     USART2->BRR = (SystemCoreClock+12800) / sensor_inf.received_BDR;
 8004752:	4b45      	ldr	r3, [pc, #276]	@ (8004868 <StartTaskRxCommands+0xa28>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	22c8      	movs	r2, #200	@ 0xc8
 8004758:	0192      	lsls	r2, r2, #6
 800475a:	189a      	adds	r2, r3, r2
 800475c:	4b40      	ldr	r3, [pc, #256]	@ (8004860 <StartTaskRxCommands+0xa20>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4c40      	ldr	r4, [pc, #256]	@ (8004864 <StartTaskRxCommands+0xa24>)
 8004762:	0019      	movs	r1, r3
 8004764:	0010      	movs	r0, r2
 8004766:	f7fb fceb 	bl	8000140 <__udivsi3>
 800476a:	0003      	movs	r3, r0
 800476c:	60e3      	str	r3, [r4, #12]

				     // Включаем USART обратно
				     USART2->CR1 |= USART_CR1_UE;
 800476e:	4b3d      	ldr	r3, [pc, #244]	@ (8004864 <StartTaskRxCommands+0xa24>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b3c      	ldr	r3, [pc, #240]	@ (8004864 <StartTaskRxCommands+0xa24>)
 8004774:	2101      	movs	r1, #1
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

				     taskENTER_CRITICAL();
 800477a:	f00c fe71 	bl	8011460 <vPortEnterCritical>
				     WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <StartTaskRxCommands+0xa2c>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b37      	ldr	r3, [pc, #220]	@ (8004860 <StartTaskRxCommands+0xa20>)
 8004784:	2108      	movs	r1, #8
 8004786:	0018      	movs	r0, r3
 8004788:	f7ff f85a 	bl	8003840 <WriteDeviceAddressOffset>
				     taskEXIT_CRITICAL();
 800478c:	f00c fe7a 	bl	8011484 <vPortExitCritical>
				     offset+=sizeof(sensor_inf);
 8004790:	4b36      	ldr	r3, [pc, #216]	@ (800486c <StartTaskRxCommands+0xa2c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	001a      	movs	r2, r3
 8004798:	4b34      	ldr	r3, [pc, #208]	@ (800486c <StartTaskRxCommands+0xa2c>)
 800479a:	601a      	str	r2, [r3, #0]

							 terminal_parser_state =PARSER_EMPT;
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <StartTaskRxCommands+0xa30>)
 800479e:	2209      	movs	r2, #9
 80047a0:	701a      	strb	r2, [r3, #0]

						}



			if (terminal_parser_state == PARSER_IDN7) { // если посылка S0x;
 80047a2:	4b33      	ldr	r3, [pc, #204]	@ (8004870 <StartTaskRxCommands+0xa30>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d147      	bne.n	800483a <StartTaskRxCommands+0x9fa>



				uint8_t flags = 0;
 80047aa:	2062      	movs	r0, #98	@ 0x62
 80047ac:	2428      	movs	r4, #40	@ 0x28
 80047ae:	1903      	adds	r3, r0, r4
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80047b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004874 <StartTaskRxCommands+0xa34>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	0019      	movs	r1, r3
 80047bc:	1903      	adds	r3, r0, r4
 80047be:	19db      	adds	r3, r3, r7
 80047c0:	1902      	adds	r2, r0, r4
 80047c2:	19d2      	adds	r2, r2, r7
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80047ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004878 <StartTaskRxCommands+0xa38>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	b25a      	sxtb	r2, r3
 80047d2:	1903      	adds	r3, r0, r4
 80047d4:	19db      	adds	r3, r3, r7
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b25b      	sxtb	r3, r3
 80047da:	4313      	orrs	r3, r2
 80047dc:	b25a      	sxtb	r2, r3
 80047de:	1903      	adds	r3, r0, r4
 80047e0:	19db      	adds	r3, r3, r7
 80047e2:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 80047e4:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <StartTaskRxCommands+0xa38>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <StartTaskRxCommands+0x9b2>
 80047ec:	4b22      	ldr	r3, [pc, #136]	@ (8004878 <StartTaskRxCommands+0xa38>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
				if(IDN==1){
 80047f2:	4b22      	ldr	r3, [pc, #136]	@ (800487c <StartTaskRxCommands+0xa3c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11f      	bne.n	800483a <StartTaskRxCommands+0x9fa>
				char str_idn[50];
				sprintf(str_idn,"CAS,BCA5/5kg     ,%d,P80\r\n",serial_number);
 80047fa:	4b21      	ldr	r3, [pc, #132]	@ (8004880 <StartTaskRxCommands+0xa40>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	001a      	movs	r2, r3
 8004800:	4920      	ldr	r1, [pc, #128]	@ (8004884 <StartTaskRxCommands+0xa44>)
 8004802:	2508      	movs	r5, #8
 8004804:	2628      	movs	r6, #40	@ 0x28
 8004806:	19ab      	adds	r3, r5, r6
 8004808:	19db      	adds	r3, r3, r7
 800480a:	0018      	movs	r0, r3
 800480c:	f00e fa78 	bl	8012d00 <siprintf>

					HAL_UART_Transmit_IT(terminal_uart, (uint8_t*)str_idn, strlen(str_idn));
 8004810:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <StartTaskRxCommands+0xa48>)
 8004812:	681c      	ldr	r4, [r3, #0]
 8004814:	19ab      	adds	r3, r5, r6
 8004816:	19db      	adds	r3, r3, r7
 8004818:	0018      	movs	r0, r3
 800481a:	f7fb fc75 	bl	8000108 <strlen>
 800481e:	0003      	movs	r3, r0
 8004820:	b29a      	uxth	r2, r3
 8004822:	19ab      	adds	r3, r5, r6
 8004824:	19db      	adds	r3, r3, r7
 8004826:	0019      	movs	r1, r3
 8004828:	0020      	movs	r0, r4
 800482a:	f007 ff31 	bl	800c690 <HAL_UART_Transmit_IT>
					IDN=0;
 800482e:	4b13      	ldr	r3, [pc, #76]	@ (800487c <StartTaskRxCommands+0xa3c>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
					terminal_parser_state =	PARSER_EMPT;
 8004834:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <StartTaskRxCommands+0xa30>)
 8004836:	2209      	movs	r2, #9
 8004838:	701a      	strb	r2, [r3, #0]
					//debug("Transmit to terminal: <%x>", &str_idn);
				}
			}

			memset(received_command, 0, sizeof(received_command));
 800483a:	4b07      	ldr	r3, [pc, #28]	@ (8004858 <StartTaskRxCommands+0xa18>)
 800483c:	2216      	movs	r2, #22
 800483e:	2100      	movs	r1, #0
 8004840:	0018      	movs	r0, r3
 8004842:	f00e fb01 	bl	8012e48 <memset>
			//receive(terminal_uart, received_command, 1);
			//receive(terminal_uart, RX_command_buff, 1);
			debug("Receive from task\r\n");
 8004846:	4b11      	ldr	r3, [pc, #68]	@ (800488c <StartTaskRxCommands+0xa4c>)
 8004848:	0018      	movs	r0, r3
 800484a:	f001 f923 	bl	8005a94 <debug>
 800484e:	f7ff fb18 	bl	8003e82 <StartTaskRxCommands+0x42>
		    	continue;
 8004852:	46c0      	nop			@ (mov r8, r8)
		    ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );
 8004854:	f7ff fb15 	bl	8003e82 <StartTaskRxCommands+0x42>
 8004858:	20000354 	.word	0x20000354
 800485c:	20000388 	.word	0x20000388
 8004860:	200003a0 	.word	0x200003a0
 8004864:	40004400 	.word	0x40004400
 8004868:	20000068 	.word	0x20000068
 800486c:	200003a8 	.word	0x200003a8
 8004870:	20000004 	.word	0x20000004
 8004874:	200003b1 	.word	0x200003b1
 8004878:	200003b0 	.word	0x200003b0
 800487c:	20000370 	.word	0x20000370
 8004880:	200003ac 	.word	0x200003ac
 8004884:	08016aa8 	.word	0x08016aa8
 8004888:	20000070 	.word	0x20000070
 800488c:	08016ac4 	.word	0x08016ac4

08004890 <StartTaskAccelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAccelerometer */
void StartTaskAccelerometer(void *argument)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b08e      	sub	sp, #56	@ 0x38
 8004894:	af06      	add	r7, sp, #24
 8004896:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskAccelerometer */
  /* Infinite loop */
	if(lis331dlh_init_spi(&config, ACCELEROMETER_SPI, ACCEL_CS_GPIO_Port, ACCEL_CS_Pin)) {
 8004898:	4b6e      	ldr	r3, [pc, #440]	@ (8004a54 <StartTaskAccelerometer+0x1c4>)
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004a58 <StartTaskAccelerometer+0x1c8>)
 80048a2:	486e      	ldr	r0, [pc, #440]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048a4:	f001 fe6e 	bl	8006584 <lis331dlh_init_spi>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d005      	beq.n	80048b8 <StartTaskAccelerometer+0x28>
		debug("LIS331DLH DOESN'T WORK OR DOESN'T SOLDERED");
 80048ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004a60 <StartTaskAccelerometer+0x1d0>)
 80048ae:	0018      	movs	r0, r3
 80048b0:	f001 f8f0 	bl	8005a94 <debug>
		HardFault_Handler();
 80048b4:	f002 fce4 	bl	8007280 <HardFault_Handler>
	}
	lis331dlh_update_config(&config);
 80048b8:	4b68      	ldr	r3, [pc, #416]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048ba:	0018      	movs	r0, r3
 80048bc:	f001 ff0e 	bl	80066dc <lis331dlh_update_config>

//	lis331dlh_print_config(&config);
	// нахождение угла наклона
	find_degree(&config);
 80048c0:	4b66      	ldr	r3, [pc, #408]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 fbbe 	bl	8005044 <find_degree>

	while (1) {

		// проверка готовности
		lis331dlh_read_status(&config);
 80048c8:	4b64      	ldr	r3, [pc, #400]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048ca:	0018      	movs	r0, r3
 80048cc:	f001 ff36 	bl	800673c <lis331dlh_read_status>
		check_overrun(&config);
 80048d0:	4b62      	ldr	r3, [pc, #392]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 fcce 	bl	8005274 <check_overrun>

		if (is_measurement_ready(&config)) {
 80048d8:	4b60      	ldr	r3, [pc, #384]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 fce4 	bl	80052a8 <is_measurement_ready>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d00b      	beq.n	80048fc <StartTaskAccelerometer+0x6c>
			// обновление данных с датчика ускорения
			lis331dlh_update_accelaration(&config);
 80048e4:	4b5d      	ldr	r3, [pc, #372]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048e6:	0018      	movs	r0, r3
 80048e8:	f001 feac 	bl	8006644 <lis331dlh_update_accelaration>

			// сброс максимумом и минимумов по таймерам
			reset_move_maximums();
 80048ec:	f000 fff8 	bl	80058e0 <reset_move_maximums>
			reset_acceleration_maximums();
 80048f0:	f000 ffd0 	bl	8005894 <reset_acceleration_maximums>

			// алгоритм вычисления длины перемещений
			calc_length(&config);
 80048f4:	4b59      	ldr	r3, [pc, #356]	@ (8004a5c <StartTaskAccelerometer+0x1cc>)
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 ff30 	bl	800575c <calc_length>
		}

		vTaskDelay(5);
 80048fc:	2005      	movs	r0, #5
 80048fe:	f00b fbb1 	bl	8010064 <vTaskDelay>

		float maximum = fmax(
				round_and_limit_float(get_max_positive_move()),
 8004902:	f001 f827 	bl	8005954 <get_max_positive_move>
 8004906:	1c03      	adds	r3, r0, #0
 8004908:	1c18      	adds	r0, r3, #0
 800490a:	f001 f837 	bl	800597c <round_and_limit_float>
 800490e:	1c03      	adds	r3, r0, #0
		float maximum = fmax(
 8004910:	1c18      	adds	r0, r3, #0
 8004912:	f7fe fd47 	bl	80033a4 <__aeabi_f2d>
 8004916:	0004      	movs	r4, r0
 8004918:	000d      	movs	r5, r1
				round_and_limit_float(get_max_negative_move()));
 800491a:	f001 f825 	bl	8005968 <get_max_negative_move>
 800491e:	1c03      	adds	r3, r0, #0
 8004920:	1c18      	adds	r0, r3, #0
 8004922:	f001 f82b 	bl	800597c <round_and_limit_float>
 8004926:	1c03      	adds	r3, r0, #0
		float maximum = fmax(
 8004928:	1c18      	adds	r0, r3, #0
 800492a:	f7fe fd3b 	bl	80033a4 <__aeabi_f2d>
 800492e:	0002      	movs	r2, r0
 8004930:	000b      	movs	r3, r1
 8004932:	0020      	movs	r0, r4
 8004934:	0029      	movs	r1, r5
 8004936:	f00d f822 	bl	801197e <fmax>
 800493a:	0002      	movs	r2, r0
 800493c:	000b      	movs	r3, r1
 800493e:	0010      	movs	r0, r2
 8004940:	0019      	movs	r1, r3
 8004942:	f7fe fd77 	bl	8003434 <__aeabi_d2f>
 8004946:	1c03      	adds	r3, r0, #0
 8004948:	61fb      	str	r3, [r7, #28]

		float max_acceleration = fmax(
				round_and_limit_float(get_max_positive_acceleration()),
 800494a:	f000 ffef 	bl	800592c <get_max_positive_acceleration>
 800494e:	1c03      	adds	r3, r0, #0
 8004950:	1c18      	adds	r0, r3, #0
 8004952:	f001 f813 	bl	800597c <round_and_limit_float>
 8004956:	1c03      	adds	r3, r0, #0
		float max_acceleration = fmax(
 8004958:	1c18      	adds	r0, r3, #0
 800495a:	f7fe fd23 	bl	80033a4 <__aeabi_f2d>
 800495e:	0004      	movs	r4, r0
 8004960:	000d      	movs	r5, r1
				round_and_limit_float(get_max_negative_acceleration()));
 8004962:	f000 ffed 	bl	8005940 <get_max_negative_acceleration>
 8004966:	1c03      	adds	r3, r0, #0
 8004968:	1c18      	adds	r0, r3, #0
 800496a:	f001 f807 	bl	800597c <round_and_limit_float>
 800496e:	1c03      	adds	r3, r0, #0
		float max_acceleration = fmax(
 8004970:	1c18      	adds	r0, r3, #0
 8004972:	f7fe fd17 	bl	80033a4 <__aeabi_f2d>
 8004976:	0002      	movs	r2, r0
 8004978:	000b      	movs	r3, r1
 800497a:	0020      	movs	r0, r4
 800497c:	0029      	movs	r1, r5
 800497e:	f00c fffe 	bl	801197e <fmax>
 8004982:	0002      	movs	r2, r0
 8004984:	000b      	movs	r3, r1
 8004986:	0010      	movs	r0, r2
 8004988:	0019      	movs	r1, r3
 800498a:	f7fe fd53 	bl	8003434 <__aeabi_d2f>
 800498e:	1c03      	adds	r3, r0, #0
 8004990:	61bb      	str	r3, [r7, #24]

		if(period_expired) {
 8004992:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <StartTaskAccelerometer+0x1d4>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d044      	beq.n	8004a24 <StartTaskAccelerometer+0x194>
			debug("\r\nTaskAccelerometer: Timer done. current maximum = %f maximum_in_period = %f current max_acceleration = %f max_acceleration_in_period = %f \r\n",
 800499a:	69f8      	ldr	r0, [r7, #28]
 800499c:	f7fe fd02 	bl	80033a4 <__aeabi_f2d>
 80049a0:	60b8      	str	r0, [r7, #8]
 80049a2:	60f9      	str	r1, [r7, #12]
 80049a4:	4b30      	ldr	r3, [pc, #192]	@ (8004a68 <StartTaskAccelerometer+0x1d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1c18      	adds	r0, r3, #0
 80049aa:	f7fe fcfb 	bl	80033a4 <__aeabi_f2d>
 80049ae:	0004      	movs	r4, r0
 80049b0:	000d      	movs	r5, r1
 80049b2:	69b8      	ldr	r0, [r7, #24]
 80049b4:	f7fe fcf6 	bl	80033a4 <__aeabi_f2d>
 80049b8:	6038      	str	r0, [r7, #0]
 80049ba:	6079      	str	r1, [r7, #4]
 80049bc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a6c <StartTaskAccelerometer+0x1dc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c18      	adds	r0, r3, #0
 80049c2:	f7fe fcef 	bl	80033a4 <__aeabi_f2d>
 80049c6:	0002      	movs	r2, r0
 80049c8:	000b      	movs	r3, r1
 80049ca:	4929      	ldr	r1, [pc, #164]	@ (8004a70 <StartTaskAccelerometer+0x1e0>)
 80049cc:	9204      	str	r2, [sp, #16]
 80049ce:	9305      	str	r3, [sp, #20]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	9202      	str	r2, [sp, #8]
 80049d6:	9303      	str	r3, [sp, #12]
 80049d8:	9400      	str	r4, [sp, #0]
 80049da:	9501      	str	r5, [sp, #4]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	0008      	movs	r0, r1
 80049e2:	f001 f857 	bl	8005a94 <debug>
					maximum, maximum_move_in_period,
					max_acceleration, max_acceleration_in_period);
			period_expired = false;
 80049e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a64 <StartTaskAccelerometer+0x1d4>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
			maximum_move_in_period = 0;
 80049ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <StartTaskAccelerometer+0x1d8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
			max_acceleration_in_period = 0;
 80049f2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a6c <StartTaskAccelerometer+0x1dc>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
			debug("\r\nTaskAccelerometer: Timer resetted. maximum_in_period = %f max_acceleration_in_period = %f \r\n", maximum_move_in_period, max_acceleration_in_period);
 80049f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <StartTaskAccelerometer+0x1d8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	1c18      	adds	r0, r3, #0
 80049fe:	f7fe fcd1 	bl	80033a4 <__aeabi_f2d>
 8004a02:	0004      	movs	r4, r0
 8004a04:	000d      	movs	r5, r1
 8004a06:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <StartTaskAccelerometer+0x1dc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1c18      	adds	r0, r3, #0
 8004a0c:	f7fe fcca 	bl	80033a4 <__aeabi_f2d>
 8004a10:	0002      	movs	r2, r0
 8004a12:	000b      	movs	r3, r1
 8004a14:	4917      	ldr	r1, [pc, #92]	@ (8004a74 <StartTaskAccelerometer+0x1e4>)
 8004a16:	9200      	str	r2, [sp, #0]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	0022      	movs	r2, r4
 8004a1c:	002b      	movs	r3, r5
 8004a1e:	0008      	movs	r0, r1
 8004a20:	f001 f838 	bl	8005a94 <debug>
		}

		if(maximum > maximum_move_in_period) maximum_move_in_period = maximum;
 8004a24:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <StartTaskAccelerometer+0x1d8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1c19      	adds	r1, r3, #0
 8004a2a:	69f8      	ldr	r0, [r7, #28]
 8004a2c:	f7fb fd62 	bl	80004f4 <__aeabi_fcmpgt>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d002      	beq.n	8004a3a <StartTaskAccelerometer+0x1aa>
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <StartTaskAccelerometer+0x1d8>)
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	601a      	str	r2, [r3, #0]
		if(max_acceleration > max_acceleration_in_period) max_acceleration_in_period = max_acceleration;
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <StartTaskAccelerometer+0x1dc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	1c19      	adds	r1, r3, #0
 8004a40:	69b8      	ldr	r0, [r7, #24]
 8004a42:	f7fb fd57 	bl	80004f4 <__aeabi_fcmpgt>
 8004a46:	1e03      	subs	r3, r0, #0
 8004a48:	d002      	beq.n	8004a50 <StartTaskAccelerometer+0x1c0>
 8004a4a:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <StartTaskAccelerometer+0x1dc>)
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	601a      	str	r2, [r3, #0]
	while (1) {
 8004a50:	e73a      	b.n	80048c8 <StartTaskAccelerometer+0x38>
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	20000064 	.word	0x20000064
 8004a58:	50000400 	.word	0x50000400
 8004a5c:	20000008 	.word	0x20000008
 8004a60:	08016ad8 	.word	0x08016ad8
 8004a64:	200003b2 	.word	0x200003b2
 8004a68:	200003b4 	.word	0x200003b4
 8004a6c:	200003b8 	.word	0x200003b8
 8004a70:	08016b04 	.word	0x08016b04
 8004a74:	08016b94 	.word	0x08016b94

08004a78 <StartSensorsPolling>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsPolling */
void StartSensorsPolling(void *argument)
{
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsPolling */
 /* Infinite loop */

	//vTaskDelay(200);
	taskENTER_CRITICAL();
 8004a80:	f00c fcee 	bl	8011460 <vPortEnterCritical>
	if(!hdc1080_init(SENSORS_I2C, HDC_config.temperature_resolution, HDC_config.humidity_resolution)) {
 8004a84:	4b49      	ldr	r3, [pc, #292]	@ (8004bac <StartSensorsPolling+0x134>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <StartSensorsPolling+0x138>)
 8004a8a:	7819      	ldrb	r1, [r3, #0]
 8004a8c:	4b48      	ldr	r3, [pc, #288]	@ (8004bb0 <StartSensorsPolling+0x138>)
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	001a      	movs	r2, r3
 8004a92:	f001 fa87 	bl	8005fa4 <hdc1080_init>
 8004a96:	0003      	movs	r3, r0
 8004a98:	001a      	movs	r2, r3
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4053      	eors	r3, r2
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <StartSensorsPolling+0x38>
		debug("HDC1080 DOESN'T WORK OR DOESN'T SOLDERED");
 8004aa4:	4b43      	ldr	r3, [pc, #268]	@ (8004bb4 <StartSensorsPolling+0x13c>)
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fff4 	bl	8005a94 <debug>
		HardFault_Handler();
 8004aac:	f002 fbe8 	bl	8007280 <HardFault_Handler>
	}

	if(!lps22hb_init(SENSORS_I2C)) {
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8004bac <StartSensorsPolling+0x134>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f001 feb5 	bl	8006824 <lps22hb_init>
 8004aba:	0003      	movs	r3, r0
 8004abc:	001a      	movs	r2, r3
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4053      	eors	r3, r2
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <StartSensorsPolling+0x5c>
		debug("LPS22HB DOESN'T WORK OR DOESN'T SOLDERED");
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <StartSensorsPolling+0x140>)
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 ffe2 	bl	8005a94 <debug>
		HardFault_Handler();
 8004ad0:	f002 fbd6 	bl	8007280 <HardFault_Handler>
	}
	taskEXIT_CRITICAL();
 8004ad4:	f00c fcd6 	bl	8011484 <vPortExitCritical>
			osDelay(200);
 8004ad8:	20c8      	movs	r0, #200	@ 0xc8
 8004ada:	f00a fb2a 	bl	800f132 <osDelay>

	for (;;) {

		uint8_t status = lps22hb_get_status(&config);
 8004ade:	250f      	movs	r5, #15
 8004ae0:	197c      	adds	r4, r7, r5
 8004ae2:	4b36      	ldr	r3, [pc, #216]	@ (8004bbc <StartSensorsPolling+0x144>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f001 ff0d 	bl	8006904 <lps22hb_get_status>
 8004aea:	0003      	movs	r3, r0
 8004aec:	7023      	strb	r3, [r4, #0]
		lps22hb_check_pressure_overrun(status);
 8004aee:	002c      	movs	r4, r5
 8004af0:	193b      	adds	r3, r7, r4
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f001 ff17 	bl	8006928 <lps22hb_check_pressure_overrun>
		lps22hb_check_temperature_overrun(status);
 8004afa:	193b      	adds	r3, r7, r4
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f001 ff36 	bl	8006970 <lps22hb_check_temperature_overrun>

		if (lps22hb_check_pressure_data_available(status) && lps22hb_check_temperature_data_available(status))
 8004b04:	193b      	adds	r3, r7, r4
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f001 ff55 	bl	80069b8 <lps22hb_check_pressure_data_available>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d048      	beq.n	8004ba4 <StartSensorsPolling+0x12c>
 8004b12:	193b      	adds	r3, r7, r4
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f001 ff5f 	bl	80069da <lps22hb_check_temperature_data_available>
 8004b1c:	1e03      	subs	r3, r0, #0
 8004b1e:	d041      	beq.n	8004ba4 <StartSensorsPolling+0x12c>
		{
			hdc1080_start_measurement(&HDC_config.last_temperature, &HDC_config.last_humidity);
 8004b20:	4a27      	ldr	r2, [pc, #156]	@ (8004bc0 <StartSensorsPolling+0x148>)
 8004b22:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <StartSensorsPolling+0x14c>)
 8004b24:	0011      	movs	r1, r2
 8004b26:	0018      	movs	r0, r3
 8004b28:	f001 faae 	bl	8006088 <hdc1080_start_measurement>
						debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
								HDC_config.last_temperature,
 8004b2c:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <StartSensorsPolling+0x138>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
						debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
 8004b30:	1c18      	adds	r0, r3, #0
 8004b32:	f7fe fc37 	bl	80033a4 <__aeabi_f2d>
 8004b36:	0004      	movs	r4, r0
 8004b38:	000d      	movs	r5, r1
								HDC_config.last_humidity);
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <StartSensorsPolling+0x138>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
						debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
 8004b3e:	1c18      	adds	r0, r3, #0
 8004b40:	f7fe fc30 	bl	80033a4 <__aeabi_f2d>
 8004b44:	0002      	movs	r2, r0
 8004b46:	000b      	movs	r3, r1
 8004b48:	491f      	ldr	r1, [pc, #124]	@ (8004bc8 <StartSensorsPolling+0x150>)
 8004b4a:	9200      	str	r2, [sp, #0]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	0022      	movs	r2, r4
 8004b50:	002b      	movs	r3, r5
 8004b52:	0008      	movs	r0, r1
 8004b54:	f000 ff9e 	bl	8005a94 <debug>

						LPS_data.last_pressure = lps22hb_read_pressure();
 8004b58:	f001 ff50 	bl	80069fc <lps22hb_read_pressure>
 8004b5c:	1c02      	adds	r2, r0, #0
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <StartSensorsPolling+0x154>)
 8004b60:	605a      	str	r2, [r3, #4]
						LPS_data.last_temperature = lps22hb_read_temperature();
 8004b62:	f001 ffb3 	bl	8006acc <lps22hb_read_temperature>
 8004b66:	1c02      	adds	r2, r0, #0
 8004b68:	4b18      	ldr	r3, [pc, #96]	@ (8004bcc <StartSensorsPolling+0x154>)
 8004b6a:	601a      	str	r2, [r3, #0]
						debug("LPS22HB TEMP: %f LPS22HB PRESSURE: %f\n\r",
								LPS_data.last_temperature,
 8004b6c:	4b17      	ldr	r3, [pc, #92]	@ (8004bcc <StartSensorsPolling+0x154>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
						debug("LPS22HB TEMP: %f LPS22HB PRESSURE: %f\n\r",
 8004b70:	1c18      	adds	r0, r3, #0
 8004b72:	f7fe fc17 	bl	80033a4 <__aeabi_f2d>
 8004b76:	0004      	movs	r4, r0
 8004b78:	000d      	movs	r5, r1
								LPS_data.last_pressure);
 8004b7a:	4b14      	ldr	r3, [pc, #80]	@ (8004bcc <StartSensorsPolling+0x154>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
						debug("LPS22HB TEMP: %f LPS22HB PRESSURE: %f\n\r",
 8004b7e:	1c18      	adds	r0, r3, #0
 8004b80:	f7fe fc10 	bl	80033a4 <__aeabi_f2d>
 8004b84:	0002      	movs	r2, r0
 8004b86:	000b      	movs	r3, r1
 8004b88:	4911      	ldr	r1, [pc, #68]	@ (8004bd0 <StartSensorsPolling+0x158>)
 8004b8a:	9200      	str	r2, [sp, #0]
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	0022      	movs	r2, r4
 8004b90:	002b      	movs	r3, r5
 8004b92:	0008      	movs	r0, r1
 8004b94:	f000 ff7e 	bl	8005a94 <debug>
//			LPS_data.last_temperature = lps22hb_read_temperature();
//			debug("LPS22HB RAW TEMP: 0x%4x RAW PRESSURE: 0x%4x\r\n",
//					LPS_data.last_temperature,
//					LPS_data.last_pressure);

			vTaskDelay(1000);
 8004b98:	23fa      	movs	r3, #250	@ 0xfa
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f00b fa61 	bl	8010064 <vTaskDelay>
 8004ba2:	e002      	b.n	8004baa <StartSensorsPolling+0x132>
//														HAL_UART_Transmit (&huart3, last_temperatureLps_prin, len4, 100);


		}
		else {
			vTaskDelay(10);
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	f00b fa5d 	bl	8010064 <vTaskDelay>
	for (;;) {
 8004baa:	e798      	b.n	8004ade <StartSensorsPolling+0x66>
 8004bac:	20000060 	.word	0x20000060
 8004bb0:	20000394 	.word	0x20000394
 8004bb4:	08016bf4 	.word	0x08016bf4
 8004bb8:	08016c20 	.word	0x08016c20
 8004bbc:	20000008 	.word	0x20000008
 8004bc0:	2000039c 	.word	0x2000039c
 8004bc4:	20000398 	.word	0x20000398
 8004bc8:	08016c4c 	.word	0x08016c4c
 8004bcc:	2000038c 	.word	0x2000038c
 8004bd0:	08016c74 	.word	0x08016c74

08004bd4 <StartADS1232Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADS1232Task */
void StartADS1232Task(void *argument)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADS1232Task */
  /* Infinite loop */

	HAL_TIM_Base_Start_IT(&htim2);
 8004bdc:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <StartADS1232Task+0x28>)
 8004bde:	0018      	movs	r0, r3
 8004be0:	f007 f852 	bl	800bc88 <HAL_TIM_Base_Start_IT>
	Start_read(&htim2, TIM2);
 8004be4:	2380      	movs	r3, #128	@ 0x80
 8004be6:	05da      	lsls	r2, r3, #23
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <StartADS1232Task+0x28>)
 8004bea:	0011      	movs	r1, r2
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7fe fdab 	bl	8003748 <Start_read>

  for(;;)
  {
	 // Start_read(&htim2, TIM2);
	      vTaskDelay(100);
 8004bf2:	2064      	movs	r0, #100	@ 0x64
 8004bf4:	f00b fa36 	bl	8010064 <vTaskDelay>
 8004bf8:	e7fb      	b.n	8004bf2 <StartADS1232Task+0x1e>
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	200026a0 	.word	0x200026a0

08004c00 <maximumsPeriodTimer_callback>:
  /* USER CODE END StartADS1232Task */
}

/* maximumsPeriodTimer_callback function */
void maximumsPeriodTimer_callback(void *argument)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN maximumsPeriodTimer_callback */
	debug("\r\n===Timer 10 minutes: reloaded===\r\n");
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <maximumsPeriodTimer_callback+0x20>)
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 ff42 	bl	8005a94 <debug>
	period_expired = true;
 8004c10:	4b04      	ldr	r3, [pc, #16]	@ (8004c24 <maximumsPeriodTimer_callback+0x24>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
  /* USER CODE END maximumsPeriodTimer_callback */
}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	08016c9c 	.word	0x08016c9c
 8004c24:	200003b2 	.word	0x200003b2

08004c28 <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения приема данных
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

	if(huart == &huart2) {
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4b91      	ldr	r3, [pc, #580]	@ (8004e7c <HAL_UART_RxCpltCallback+0x254>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d000      	beq.n	8004c3e <HAL_UART_RxCpltCallback+0x16>
 8004c3c:	e11a      	b.n	8004e74 <HAL_UART_RxCpltCallback+0x24c>
			//extended_debug("Current state = %d, receive <%c>\r\n", terminal_parser_state, received_command[terminal_parser_state]);

			if ((RX_command_buff[0] == 'S'||RX_command_buff[0] == 'M'||RX_command_buff[0] == 'I'||RX_command_buff[0] == 'B'||RX_command_buff[0] == 'A')&&RX_command_count==0) {
 8004c3e:	4b90      	ldr	r3, [pc, #576]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b53      	cmp	r3, #83	@ 0x53
 8004c44:	d00f      	beq.n	8004c66 <HAL_UART_RxCpltCallback+0x3e>
 8004c46:	4b8e      	ldr	r3, [pc, #568]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b4d      	cmp	r3, #77	@ 0x4d
 8004c4c:	d00b      	beq.n	8004c66 <HAL_UART_RxCpltCallback+0x3e>
 8004c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b49      	cmp	r3, #73	@ 0x49
 8004c54:	d007      	beq.n	8004c66 <HAL_UART_RxCpltCallback+0x3e>
 8004c56:	4b8a      	ldr	r3, [pc, #552]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b42      	cmp	r3, #66	@ 0x42
 8004c5c:	d003      	beq.n	8004c66 <HAL_UART_RxCpltCallback+0x3e>
 8004c5e:	4b88      	ldr	r3, [pc, #544]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b41      	cmp	r3, #65	@ 0x41
 8004c64:	d10f      	bne.n	8004c86 <HAL_UART_RxCpltCallback+0x5e>
 8004c66:	4b87      	ldr	r3, [pc, #540]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10b      	bne.n	8004c86 <HAL_UART_RxCpltCallback+0x5e>
				received_command[RX_command_count]=RX_command_buff[0];
 8004c6e:	4b85      	ldr	r3, [pc, #532]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a83      	ldr	r2, [pc, #524]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c74:	7811      	ldrb	r1, [r2, #0]
 8004c76:	4a84      	ldr	r2, [pc, #528]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004c78:	54d1      	strb	r1, [r2, r3]
				RX_command_count=RX_command_count+1;
 8004c7a:	4b82      	ldr	r3, [pc, #520]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	4b80      	ldr	r3, [pc, #512]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e0e3      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x226>
			}
			else if (RX_command_buff[0]!= ';'&&RX_command_count!=0&&RX_command_count<=17) {
 8004c86:	4b7e      	ldr	r3, [pc, #504]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b3b      	cmp	r3, #59	@ 0x3b
 8004c8c:	d013      	beq.n	8004cb6 <HAL_UART_RxCpltCallback+0x8e>
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00f      	beq.n	8004cb6 <HAL_UART_RxCpltCallback+0x8e>
 8004c96:	4b7b      	ldr	r3, [pc, #492]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b11      	cmp	r3, #17
 8004c9c:	dc0b      	bgt.n	8004cb6 <HAL_UART_RxCpltCallback+0x8e>
				received_command[RX_command_count]=RX_command_buff[0];
 8004c9e:	4b79      	ldr	r3, [pc, #484]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a77      	ldr	r2, [pc, #476]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004ca4:	7811      	ldrb	r1, [r2, #0]
 8004ca6:	4a78      	ldr	r2, [pc, #480]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004ca8:	54d1      	strb	r1, [r2, r3]
				RX_command_count=RX_command_count+1;
 8004caa:	4b76      	ldr	r3, [pc, #472]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	4b74      	ldr	r3, [pc, #464]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e0cb      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x226>
			}
			else if (RX_command_buff[0]== ';'&&RX_command_count!=0) {
 8004cb6:	4b72      	ldr	r3, [pc, #456]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b3b      	cmp	r3, #59	@ 0x3b
 8004cbc:	d000      	beq.n	8004cc0 <HAL_UART_RxCpltCallback+0x98>
 8004cbe:	e0c6      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x226>
 8004cc0:	4b70      	ldr	r3, [pc, #448]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d100      	bne.n	8004cca <HAL_UART_RxCpltCallback+0xa2>
 8004cc8:	e0c1      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x226>
				received_command[RX_command_count]=RX_command_buff[0];
 8004cca:	4b6e      	ldr	r3, [pc, #440]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a6c      	ldr	r2, [pc, #432]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004cd0:	7811      	ldrb	r1, [r2, #0]
 8004cd2:	4a6d      	ldr	r2, [pc, #436]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004cd4:	54d1      	strb	r1, [r2, r3]
				RX_command_count=0;
 8004cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]



				if (received_command[0]=='S'){
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b53      	cmp	r3, #83	@ 0x53
 8004ce2:	d12b      	bne.n	8004d3c <HAL_UART_RxCpltCallback+0x114>

					if (received_command[1]=='4'&&received_command[2]==platform_number.number_ch){
 8004ce4:	4b68      	ldr	r3, [pc, #416]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b34      	cmp	r3, #52	@ 0x34
 8004cea:	d109      	bne.n	8004d00 <HAL_UART_RxCpltCallback+0xd8>
 8004cec:	4b66      	ldr	r3, [pc, #408]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004cee:	789a      	ldrb	r2, [r3, #2]
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_UART_RxCpltCallback+0x264>)
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d103      	bne.n	8004d00 <HAL_UART_RxCpltCallback+0xd8>

						terminal_parser_state = PARSER_S4x;
 8004cf8:	4b65      	ldr	r3, [pc, #404]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e098      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>

					}
					else if (received_command[1]==sensor_inf.platform_adr[0]&& (received_command[2]==(sensor_inf.platform_adr[1]))){
 8004d00:	4b61      	ldr	r3, [pc, #388]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d02:	785a      	ldrb	r2, [r3, #1]
 8004d04:	4b63      	ldr	r3, [pc, #396]	@ (8004e94 <HAL_UART_RxCpltCallback+0x26c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d109      	bne.n	8004d20 <HAL_UART_RxCpltCallback+0xf8>
 8004d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d0e:	789a      	ldrb	r2, [r3, #2]
 8004d10:	4b60      	ldr	r3, [pc, #384]	@ (8004e94 <HAL_UART_RxCpltCallback+0x26c>)
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d103      	bne.n	8004d20 <HAL_UART_RxCpltCallback+0xf8>

						terminal_parser_state = PARSER_Sxx;
 8004d18:	4b5d      	ldr	r3, [pc, #372]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e088      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
					}
					else if (received_command[1]=='9'&&received_command[2]=='8'){
 8004d20:	4b59      	ldr	r3, [pc, #356]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	2b39      	cmp	r3, #57	@ 0x39
 8004d26:	d000      	beq.n	8004d2a <HAL_UART_RxCpltCallback+0x102>
 8004d28:	e083      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
 8004d2a:	4b57      	ldr	r3, [pc, #348]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d2c:	789b      	ldrb	r3, [r3, #2]
 8004d2e:	2b38      	cmp	r3, #56	@ 0x38
 8004d30:	d000      	beq.n	8004d34 <HAL_UART_RxCpltCallback+0x10c>
 8004d32:	e07e      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>

						terminal_parser_state = PARSER_S98; //(Ничего не отвечаем)
 8004d34:	4b56      	ldr	r3, [pc, #344]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e07a      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
					}
				}
				else if (received_command[0]=='M'&&received_command[1]=='S'&&received_command[2]=='V'&&received_command[3]=='?'&&received_command[4]=='0') {
 8004d3c:	4b52      	ldr	r3, [pc, #328]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b4d      	cmp	r3, #77	@ 0x4d
 8004d42:	d113      	bne.n	8004d6c <HAL_UART_RxCpltCallback+0x144>
 8004d44:	4b50      	ldr	r3, [pc, #320]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b53      	cmp	r3, #83	@ 0x53
 8004d4a:	d10f      	bne.n	8004d6c <HAL_UART_RxCpltCallback+0x144>
 8004d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d4e:	789b      	ldrb	r3, [r3, #2]
 8004d50:	2b56      	cmp	r3, #86	@ 0x56
 8004d52:	d10b      	bne.n	8004d6c <HAL_UART_RxCpltCallback+0x144>
 8004d54:	4b4c      	ldr	r3, [pc, #304]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d5a:	d107      	bne.n	8004d6c <HAL_UART_RxCpltCallback+0x144>
 8004d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d5e:	791b      	ldrb	r3, [r3, #4]
 8004d60:	2b30      	cmp	r3, #48	@ 0x30
 8004d62:	d103      	bne.n	8004d6c <HAL_UART_RxCpltCallback+0x144>

					terminal_parser_state = PARSER_MSV70;
 8004d64:	4b4a      	ldr	r3, [pc, #296]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004d66:	2203      	movs	r2, #3
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e062      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='M'&&received_command[1]=='S'&&received_command[2]=='V'&&received_command[3]=='?'&&received_command[4]!='0') {
 8004d6c:	4b46      	ldr	r3, [pc, #280]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b4d      	cmp	r3, #77	@ 0x4d
 8004d72:	d113      	bne.n	8004d9c <HAL_UART_RxCpltCallback+0x174>
 8004d74:	4b44      	ldr	r3, [pc, #272]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	2b53      	cmp	r3, #83	@ 0x53
 8004d7a:	d10f      	bne.n	8004d9c <HAL_UART_RxCpltCallback+0x174>
 8004d7c:	4b42      	ldr	r3, [pc, #264]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d7e:	789b      	ldrb	r3, [r3, #2]
 8004d80:	2b56      	cmp	r3, #86	@ 0x56
 8004d82:	d10b      	bne.n	8004d9c <HAL_UART_RxCpltCallback+0x174>
 8004d84:	4b40      	ldr	r3, [pc, #256]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d86:	78db      	ldrb	r3, [r3, #3]
 8004d88:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d8a:	d107      	bne.n	8004d9c <HAL_UART_RxCpltCallback+0x174>
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	2b30      	cmp	r3, #48	@ 0x30
 8004d92:	d003      	beq.n	8004d9c <HAL_UART_RxCpltCallback+0x174>

					terminal_parser_state = PARSER_MSV7;
 8004d94:	4b3e      	ldr	r3, [pc, #248]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004d96:	2205      	movs	r2, #5
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e04a      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='I'&&received_command[1]=='D'&&received_command[2]=='N'&&received_command[3]=='?') {
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b49      	cmp	r3, #73	@ 0x49
 8004da2:	d10f      	bne.n	8004dc4 <HAL_UART_RxCpltCallback+0x19c>
 8004da4:	4b38      	ldr	r3, [pc, #224]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b44      	cmp	r3, #68	@ 0x44
 8004daa:	d10b      	bne.n	8004dc4 <HAL_UART_RxCpltCallback+0x19c>
 8004dac:	4b36      	ldr	r3, [pc, #216]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	2b4e      	cmp	r3, #78	@ 0x4e
 8004db2:	d107      	bne.n	8004dc4 <HAL_UART_RxCpltCallback+0x19c>
 8004db4:	4b34      	ldr	r3, [pc, #208]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004db6:	78db      	ldrb	r3, [r3, #3]
 8004db8:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dba:	d103      	bne.n	8004dc4 <HAL_UART_RxCpltCallback+0x19c>

					terminal_parser_state = PARSER_IDN7;
 8004dbc:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004dbe:	2206      	movs	r2, #6
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e036      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='A'&&received_command[1]=='D'&&received_command[2]=='R'&&received_command[3]=='?') {
 8004dc4:	4b30      	ldr	r3, [pc, #192]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b41      	cmp	r3, #65	@ 0x41
 8004dca:	d10f      	bne.n	8004dec <HAL_UART_RxCpltCallback+0x1c4>
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b44      	cmp	r3, #68	@ 0x44
 8004dd2:	d10b      	bne.n	8004dec <HAL_UART_RxCpltCallback+0x1c4>
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dd6:	789b      	ldrb	r3, [r3, #2]
 8004dd8:	2b52      	cmp	r3, #82	@ 0x52
 8004dda:	d107      	bne.n	8004dec <HAL_UART_RxCpltCallback+0x1c4>
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dde:	78db      	ldrb	r3, [r3, #3]
 8004de0:	2b3f      	cmp	r3, #63	@ 0x3f
 8004de2:	d103      	bne.n	8004dec <HAL_UART_RxCpltCallback+0x1c4>

					terminal_parser_state = PARSER_ADR7;
 8004de4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004de6:	2207      	movs	r2, #7
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e022      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='A'&&received_command[1]=='D'&&received_command[2]=='R'&&received_command[3]!='?') {
 8004dec:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b41      	cmp	r3, #65	@ 0x41
 8004df2:	d10f      	bne.n	8004e14 <HAL_UART_RxCpltCallback+0x1ec>
 8004df4:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b44      	cmp	r3, #68	@ 0x44
 8004dfa:	d10b      	bne.n	8004e14 <HAL_UART_RxCpltCallback+0x1ec>
 8004dfc:	4b22      	ldr	r3, [pc, #136]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004dfe:	789b      	ldrb	r3, [r3, #2]
 8004e00:	2b52      	cmp	r3, #82	@ 0x52
 8004e02:	d107      	bne.n	8004e14 <HAL_UART_RxCpltCallback+0x1ec>
 8004e04:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e0a:	d003      	beq.n	8004e14 <HAL_UART_RxCpltCallback+0x1ec>

					terminal_parser_state = PARSER_ADRNUM;
 8004e0c:	4b20      	ldr	r3, [pc, #128]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004e0e:	2208      	movs	r2, #8
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e00e      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
					}
				else if (received_command[0]=='B'&&received_command[1]=='D'&&received_command[2]=='R') {
 8004e14:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b42      	cmp	r3, #66	@ 0x42
 8004e1a:	d10a      	bne.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b44      	cmp	r3, #68	@ 0x44
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <HAL_UART_RxCpltCallback+0x260>)
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	2b52      	cmp	r3, #82	@ 0x52
 8004e2a:	d102      	bne.n	8004e32 <HAL_UART_RxCpltCallback+0x20a>

				     terminal_parser_state = PARSER_BDR;
 8004e2c:	4b18      	ldr	r3, [pc, #96]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004e2e:	2204      	movs	r2, #4
 8004e30:	701a      	strb	r2, [r3, #0]
				}
				RX_command_count = 0;
 8004e32:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <HAL_UART_RxCpltCallback+0x25c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
				RX_command_buff[0] = 0;
 8004e38:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
				vTaskNotifyGiveFromISR( rxCommandsTaskHandle, &xHigherPriorityTaskWoken );
 8004e3e:	4b16      	ldr	r3, [pc, #88]	@ (8004e98 <HAL_UART_RxCpltCallback+0x270>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	220c      	movs	r2, #12
 8004e44:	18ba      	adds	r2, r7, r2
 8004e46:	0011      	movs	r1, r2
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f00b fde5 	bl	8010a18 <vTaskNotifyGiveFromISR>
			}
		extended_debug("New state = %d\r\n", terminal_parser_state);
 8004e4e:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <HAL_UART_RxCpltCallback+0x268>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	001a      	movs	r2, r3
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_UART_RxCpltCallback+0x274>)
 8004e56:	0011      	movs	r1, r2
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f000 fe8f 	bl	8005b7c <extended_debug>
		HAL_UART_Receive_IT(terminal_uart, RX_command_buff, 1);
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <HAL_UART_RxCpltCallback+0x278>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4907      	ldr	r1, [pc, #28]	@ (8004e80 <HAL_UART_RxCpltCallback+0x258>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	0018      	movs	r0, r3
 8004e68:	f007 fcba 	bl	800c7e0 <HAL_UART_Receive_IT>
		extended_debug("Receive from handler\r\n");
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <HAL_UART_RxCpltCallback+0x27c>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f000 fe84 	bl	8005b7c <extended_debug>
		}



}
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20002780 	.word	0x20002780
 8004e80:	20000374 	.word	0x20000374
 8004e84:	20000378 	.word	0x20000378
 8004e88:	20000354 	.word	0x20000354
 8004e8c:	2000004c 	.word	0x2000004c
 8004e90:	20000004 	.word	0x20000004
 8004e94:	200003a0 	.word	0x200003a0
 8004e98:	200003c0 	.word	0x200003c0
 8004e9c:	08016cc4 	.word	0x08016cc4
 8004ea0:	20000070 	.word	0x20000070
 8004ea4:	08016cd8 	.word	0x08016cd8

08004ea8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения передачи данных
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	if (huart == debug_uart) {
 8004eb0:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <HAL_UART_TxCpltCallback+0x20>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_TxCpltCallback+0x16>
		reset_debug_variables();
 8004eba:	f000 fd87 	bl	80059cc <reset_debug_variables>
	}
}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	2000006c 	.word	0x2000006c

08004ecc <check_errors>:

void check_errors() {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xBBBB){
 8004ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f50 <check_errors+0x84>)
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f005 ff44 	bl	800ad62 <HAL_RTCEx_BKUPRead>
 8004eda:	0003      	movs	r3, r0
 8004edc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f54 <check_errors+0x88>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d114      	bne.n	8004f0c <check_errors+0x40>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <check_errors+0x8c>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f003 fbf6 	bl	80086da <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 8004eee:	f004 fe95 	bl	8009c1c <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <check_errors+0x84>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f005 ff15 	bl	800ad28 <HAL_RTCEx_BKUPWrite>
		is_error = true;
 8004efe:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <check_errors+0x90>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: HardFault ====================\r\n");
 8004f04:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <check_errors+0x94>)
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 fdc4 	bl	8005a94 <debug>
	}

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xAAAA){
 8004f0c:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <check_errors+0x84>)
 8004f0e:	2100      	movs	r1, #0
 8004f10:	0018      	movs	r0, r3
 8004f12:	f005 ff26 	bl	800ad62 <HAL_RTCEx_BKUPRead>
 8004f16:	0003      	movs	r3, r0
 8004f18:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <check_errors+0x98>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d114      	bne.n	8004f48 <check_errors+0x7c>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <check_errors+0x8c>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	2104      	movs	r1, #4
 8004f24:	0018      	movs	r0, r3
 8004f26:	f003 fbd8 	bl	80086da <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 8004f2a:	f004 fe77 	bl	8009c1c <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <check_errors+0x84>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	2100      	movs	r1, #0
 8004f34:	0018      	movs	r0, r3
 8004f36:	f005 fef7 	bl	800ad28 <HAL_RTCEx_BKUPWrite>
		is_error = true;
 8004f3a:	4b08      	ldr	r3, [pc, #32]	@ (8004f5c <check_errors+0x90>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: ErrorHandler ====================\r\n");
 8004f40:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <check_errors+0x9c>)
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 fda6 	bl	8005a94 <debug>
	}
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	20002510 	.word	0x20002510
 8004f54:	0000bbbb 	.word	0x0000bbbb
 8004f58:	50000c00 	.word	0x50000c00
 8004f5c:	200003b0 	.word	0x200003b0
 8004f60:	08016cf0 	.word	0x08016cf0
 8004f64:	0000aaaa 	.word	0x0000aaaa
 8004f68:	08016d38 	.word	0x08016d38

08004f6c <ADS_Callback>:
void ADS_Callback(uint32_t value){
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b091      	sub	sp, #68	@ 0x44
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	 ads_val = value;
 8004f74:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <ADS_Callback+0x38>)
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
		char ADS_val_prin[50]; //size of the number
		int len5 =  sprintf(ADS_val_prin, "ADS_VAL: %d\n\r", ads_val);
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <ADS_Callback+0x38>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	490a      	ldr	r1, [pc, #40]	@ (8004fa8 <ADS_Callback+0x3c>)
 8004f80:	2408      	movs	r4, #8
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	0018      	movs	r0, r3
 8004f86:	f00d febb 	bl	8012d00 <siprintf>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		HAL_UART_Transmit (&huart3, ADS_val_prin, len5, 100);
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	1939      	adds	r1, r7, r4
 8004f94:	4805      	ldr	r0, [pc, #20]	@ (8004fac <ADS_Callback+0x40>)
 8004f96:	2364      	movs	r3, #100	@ 0x64
 8004f98:	f007 fad6 	bl	800c548 <HAL_UART_Transmit>

}
 8004f9c:	46c0      	nop			@ (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b011      	add	sp, #68	@ 0x44
 8004fa2:	bd90      	pop	{r4, r7, pc}
 8004fa4:	2000036c 	.word	0x2000036c
 8004fa8:	08016d80 	.word	0x08016d80
 8004fac:	20002814 	.word	0x20002814

08004fb0 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	1c18      	adds	r0, r3, #0
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZSt4fmaxff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	1c11      	adds	r1, r2, #0
 8004fd6:	1c18      	adds	r0, r3, #0
 8004fd8:	f00c fd22 	bl	8011a20 <fmaxf>
 8004fdc:	1c03      	adds	r3, r0, #0
 8004fde:	1c18      	adds	r0, r3, #0
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1c11      	adds	r1, r2, #0
 8004ff6:	1c18      	adds	r0, r3, #0
 8004ff8:	f00c fd28 	bl	8011a4c <fminf>
 8004ffc:	1c03      	adds	r3, r0, #0
 8004ffe:	1c18      	adds	r0, r3, #0
 8005000:	46bd      	mov	sp, r7
 8005002:	b002      	add	sp, #8
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <_Z21get_acceleration_dataP11lis331dlh_t>:
// поправочный коэффициент на наклон
float incline_factor = 0;


// функция получения ускорения по рабочей оси
int32_t get_acceleration_data(lis331dlh_t * config) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

	if(config->axis_select_x_z == AXIS_X) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	7d1b      	ldrb	r3, [r3, #20]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d102      	bne.n	800501e <_Z21get_acceleration_dataP11lis331dlh_t+0x16>
		return config->accelarations.x;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501c:	e00b      	b.n	8005036 <_Z21get_acceleration_dataP11lis331dlh_t+0x2e>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	7d1b      	ldrb	r3, [r3, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <_Z21get_acceleration_dataP11lis331dlh_t+0x24>
		return config->accelarations.z;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	e004      	b.n	8005036 <_Z21get_acceleration_dataP11lis331dlh_t+0x2e>
	}

	debug("ERROR: wrong axis selected!");
 800502c:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <_Z21get_acceleration_dataP11lis331dlh_t+0x38>)
 800502e:	0018      	movs	r0, r3
 8005030:	f000 fd30 	bl	8005a94 <debug>
	return 0;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b002      	add	sp, #8
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	08016d90 	.word	0x08016d90

08005044 <find_degree>:


// нахождение угла наклона платы относительно целевой оси
void find_degree(lis331dlh_t * config) {
 8005044:	b5b0      	push	{r4, r5, r7, lr}
 8005046:	b08c      	sub	sp, #48	@ 0x30
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	int32_t summ = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float vector = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
	int count = 50;
 8005054:	2332      	movs	r3, #50	@ 0x32
 8005056:	623b      	str	r3, [r7, #32]

	uint32_t timer = HAL_GetTick();
 8005058:	f002 fe30 	bl	8007cbc <HAL_GetTick>
 800505c:	0003      	movs	r3, r0
 800505e:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < count;) {
 8005060:	2300      	movs	r3, #0
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
 8005064:	e04b      	b.n	80050fe <find_degree+0xba>
		lis331dlh_read_status(config);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f001 fb67 	bl	800673c <lis331dlh_read_status>
		if (is_measurement_ready(config)) {					// если данные готовы
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 f919 	bl	80052a8 <is_measurement_ready>
 8005076:	0003      	movs	r3, r0
 8005078:	1e5a      	subs	r2, r3, #1
 800507a:	4193      	sbcs	r3, r2
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d02d      	beq.n	80050de <find_degree+0x9a>
			lis331dlh_update_accelaration(config);			// обновление данных
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	0018      	movs	r0, r3
 8005086:	f001 fadd 	bl	8006644 <lis331dlh_update_accelaration>
			summ += get_acceleration_data(config);			// вытаскиваем ускорение по конкретной оси
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff ffbb 	bl	8005008 <_Z21get_acceleration_dataP11lis331dlh_t>
 8005092:	0002      	movs	r2, r0
 8005094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005096:	189b      	adds	r3, r3, r2
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	435a      	muls	r2, r3
						+ config->accelarations.y * config->accelarations.y
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ac:	434b      	muls	r3, r1
 80050ae:	18d2      	adds	r2, r2, r3
						+ config->accelarations.z * config->accelarations.z);	// вычисление длины вектора
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	434b      	muls	r3, r1
 80050ba:	18d3      	adds	r3, r2, r3
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 80050bc:	0018      	movs	r0, r3
 80050be:	f7fc fa27 	bl	8001510 <__aeabi_i2f>
 80050c2:	1c03      	adds	r3, r0, #0
 80050c4:	1c18      	adds	r0, r3, #0
 80050c6:	f00c fc3b 	bl	8011940 <sqrtf>
 80050ca:	1c03      	adds	r3, r0, #0
 80050cc:	1c19      	adds	r1, r3, #0
 80050ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d0:	f7fb fb96 	bl	8000800 <__aeabi_fadd>
 80050d4:	1c03      	adds	r3, r0, #0
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
			++i;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	3301      	adds	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		uint32_t time_passed = HAL_GetTick() - timer;
 80050de:	f002 fded 	bl	8007cbc <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	60bb      	str	r3, [r7, #8]
		if (time_passed > 1000) {
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	23fa      	movs	r3, #250	@ 0xfa
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d904      	bls.n	80050fe <find_degree+0xba>
			debug("LIS331 timeout error");
 80050f4:	4b53      	ldr	r3, [pc, #332]	@ (8005244 <find_degree+0x200>)
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 fccc 	bl	8005a94 <debug>
			return;
 80050fc:	e09e      	b.n	800523c <find_degree+0x1f8>
	for (int i = 0; i < count;) {
 80050fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	429a      	cmp	r2, r3
 8005104:	dbaf      	blt.n	8005066 <find_degree+0x22>
		}  // выход, если датчик не отвечает
	}

	float sinus = fabs(summ) / vector;
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	0018      	movs	r0, r3
 800510a:	f000 fc4b 	bl	80059a4 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800510e:	0004      	movs	r4, r0
 8005110:	000d      	movs	r5, r1
 8005112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005114:	f7fe f946 	bl	80033a4 <__aeabi_f2d>
 8005118:	0002      	movs	r2, r0
 800511a:	000b      	movs	r3, r1
 800511c:	0020      	movs	r0, r4
 800511e:	0029      	movs	r1, r5
 8005120:	f7fc fde8 	bl	8001cf4 <__aeabi_ddiv>
 8005124:	0002      	movs	r2, r0
 8005126:	000b      	movs	r3, r1
 8005128:	0010      	movs	r0, r2
 800512a:	0019      	movs	r1, r3
 800512c:	f7fe f982 	bl	8003434 <__aeabi_d2f>
 8005130:	1c03      	adds	r3, r0, #0
 8005132:	61bb      	str	r3, [r7, #24]

	if (sinus > 0.001) {
 8005134:	69b8      	ldr	r0, [r7, #24]
 8005136:	f7fe f935 	bl	80033a4 <__aeabi_f2d>
 800513a:	4a43      	ldr	r2, [pc, #268]	@ (8005248 <find_degree+0x204>)
 800513c:	4b43      	ldr	r3, [pc, #268]	@ (800524c <find_degree+0x208>)
 800513e:	f7fb f99f 	bl	8000480 <__aeabi_dcmpgt>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d072      	beq.n	800522c <find_degree+0x1e8>
		float degree = asinf(sinus) * 180 / M_PI;	// нахождение арксинуса и преобразование из радиан в градусы
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	1c18      	adds	r0, r3, #0
 800514a:	f00c fbd9 	bl	8011900 <asinf>
 800514e:	1c03      	adds	r3, r0, #0
 8005150:	493f      	ldr	r1, [pc, #252]	@ (8005250 <find_degree+0x20c>)
 8005152:	1c18      	adds	r0, r3, #0
 8005154:	f7fb fec4 	bl	8000ee0 <__aeabi_fmul>
 8005158:	1c03      	adds	r3, r0, #0
 800515a:	1c18      	adds	r0, r3, #0
 800515c:	f7fe f922 	bl	80033a4 <__aeabi_f2d>
 8005160:	4a3c      	ldr	r2, [pc, #240]	@ (8005254 <find_degree+0x210>)
 8005162:	4b3d      	ldr	r3, [pc, #244]	@ (8005258 <find_degree+0x214>)
 8005164:	f7fc fdc6 	bl	8001cf4 <__aeabi_ddiv>
 8005168:	0002      	movs	r2, r0
 800516a:	000b      	movs	r3, r1
 800516c:	0010      	movs	r0, r2
 800516e:	0019      	movs	r1, r3
 8005170:	f7fe f960 	bl	8003434 <__aeabi_d2f>
 8005174:	1c03      	adds	r3, r0, #0
 8005176:	617b      	str	r3, [r7, #20]
		float mean_axis = fabs(summ) / (float)count;
 8005178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517a:	0018      	movs	r0, r3
 800517c:	f000 fc12 	bl	80059a4 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8005180:	0004      	movs	r4, r0
 8005182:	000d      	movs	r5, r1
 8005184:	6a38      	ldr	r0, [r7, #32]
 8005186:	f7fc f9c3 	bl	8001510 <__aeabi_i2f>
 800518a:	1c03      	adds	r3, r0, #0
 800518c:	1c18      	adds	r0, r3, #0
 800518e:	f7fe f909 	bl	80033a4 <__aeabi_f2d>
 8005192:	0002      	movs	r2, r0
 8005194:	000b      	movs	r3, r1
 8005196:	0020      	movs	r0, r4
 8005198:	0029      	movs	r1, r5
 800519a:	f7fc fdab 	bl	8001cf4 <__aeabi_ddiv>
 800519e:	0002      	movs	r2, r0
 80051a0:	000b      	movs	r3, r1
 80051a2:	0010      	movs	r0, r2
 80051a4:	0019      	movs	r1, r3
 80051a6:	f7fe f945 	bl	8003434 <__aeabi_d2f>
 80051aa:	1c03      	adds	r3, r0, #0
 80051ac:	613b      	str	r3, [r7, #16]
		float mean_vector = vector / (float)count;
 80051ae:	6a38      	ldr	r0, [r7, #32]
 80051b0:	f7fc f9ae 	bl	8001510 <__aeabi_i2f>
 80051b4:	1c03      	adds	r3, r0, #0
 80051b6:	1c19      	adds	r1, r3, #0
 80051b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051ba:	f7fb fcab 	bl	8000b14 <__aeabi_fdiv>
 80051be:	1c03      	adds	r3, r0, #0
 80051c0:	60fb      	str	r3, [r7, #12]
		incline_factor = 1 + mean_axis / mean_vector;	// вычисление поправочного коэффициента на угол наклона
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6938      	ldr	r0, [r7, #16]
 80051c6:	f7fb fca5 	bl	8000b14 <__aeabi_fdiv>
 80051ca:	1c03      	adds	r3, r0, #0
 80051cc:	21fe      	movs	r1, #254	@ 0xfe
 80051ce:	0589      	lsls	r1, r1, #22
 80051d0:	1c18      	adds	r0, r3, #0
 80051d2:	f7fb fb15 	bl	8000800 <__aeabi_fadd>
 80051d6:	1c03      	adds	r3, r0, #0
 80051d8:	1c1a      	adds	r2, r3, #0
 80051da:	4b20      	ldr	r3, [pc, #128]	@ (800525c <find_degree+0x218>)
 80051dc:	601a      	str	r2, [r3, #0]

		debug("Mean = %f\r\n", mean_axis);
 80051de:	6938      	ldr	r0, [r7, #16]
 80051e0:	f7fe f8e0 	bl	80033a4 <__aeabi_f2d>
 80051e4:	0002      	movs	r2, r0
 80051e6:	000b      	movs	r3, r1
 80051e8:	491d      	ldr	r1, [pc, #116]	@ (8005260 <find_degree+0x21c>)
 80051ea:	0008      	movs	r0, r1
 80051ec:	f000 fc52 	bl	8005a94 <debug>
		debug("Full = %f\r\n", mean_vector);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7fe f8d7 	bl	80033a4 <__aeabi_f2d>
 80051f6:	0002      	movs	r2, r0
 80051f8:	000b      	movs	r3, r1
 80051fa:	491a      	ldr	r1, [pc, #104]	@ (8005264 <find_degree+0x220>)
 80051fc:	0008      	movs	r0, r1
 80051fe:	f000 fc49 	bl	8005a94 <debug>
		debug("degree = %f\r\n", degree);
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7fe f8ce 	bl	80033a4 <__aeabi_f2d>
 8005208:	0002      	movs	r2, r0
 800520a:	000b      	movs	r3, r1
 800520c:	4916      	ldr	r1, [pc, #88]	@ (8005268 <find_degree+0x224>)
 800520e:	0008      	movs	r0, r1
 8005210:	f000 fc40 	bl	8005a94 <debug>
		debug("incline factor = %f\r\n", incline_factor);
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <find_degree+0x218>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	1c18      	adds	r0, r3, #0
 800521a:	f7fe f8c3 	bl	80033a4 <__aeabi_f2d>
 800521e:	0002      	movs	r2, r0
 8005220:	000b      	movs	r3, r1
 8005222:	4912      	ldr	r1, [pc, #72]	@ (800526c <find_degree+0x228>)
 8005224:	0008      	movs	r0, r1
 8005226:	f000 fc35 	bl	8005a94 <debug>
 800522a:	e007      	b.n	800523c <find_degree+0x1f8>
	}
	else {
		debug("Incline factor > 2. Error!");
 800522c:	4b10      	ldr	r3, [pc, #64]	@ (8005270 <find_degree+0x22c>)
 800522e:	0018      	movs	r0, r3
 8005230:	f000 fc30 	bl	8005a94 <debug>
		incline_factor = 2;
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <find_degree+0x218>)
 8005236:	2280      	movs	r2, #128	@ 0x80
 8005238:	05d2      	lsls	r2, r2, #23
 800523a:	601a      	str	r2, [r3, #0]
	}

}
 800523c:	46bd      	mov	sp, r7
 800523e:	b00c      	add	sp, #48	@ 0x30
 8005240:	bdb0      	pop	{r4, r5, r7, pc}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	08016dac 	.word	0x08016dac
 8005248:	d2f1a9fc 	.word	0xd2f1a9fc
 800524c:	3f50624d 	.word	0x3f50624d
 8005250:	43340000 	.word	0x43340000
 8005254:	54442d18 	.word	0x54442d18
 8005258:	400921fb 	.word	0x400921fb
 800525c:	200004a8 	.word	0x200004a8
 8005260:	08016dc4 	.word	0x08016dc4
 8005264:	08016dd0 	.word	0x08016dd0
 8005268:	08016ddc 	.word	0x08016ddc
 800526c:	08016dec 	.word	0x08016dec
 8005270:	08016e04 	.word	0x08016e04

08005274 <check_overrun>:

// проверка, что данные ускорений не были перезаписаны
void check_overrun(lis331dlh_t * config) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	if ((config->status_register & 0xF0) > 0) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7f1b      	ldrb	r3, [r3, #28]
 8005280:	001a      	movs	r2, r3
 8005282:	23f0      	movs	r3, #240	@ 0xf0
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	dd07      	ble.n	800529a <check_overrun+0x26>
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_SET);
		debug("Acceleration data overrun! SR %02x\r\n", config->status_register);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7f1b      	ldrb	r3, [r3, #28]
 800528e:	001a      	movs	r2, r3
 8005290:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <check_overrun+0x30>)
 8005292:	0011      	movs	r1, r2
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fbfd 	bl	8005a94 <debug>
//		HAL_UART_Transmit_IT(debug_uart, (uint8_t*)"XYZ Overrun\r\n", 13);
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_RESET);
	}
}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b002      	add	sp, #8
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	08016e20 	.word	0x08016e20

080052a8 <is_measurement_ready>:

// проверка, что данные готовы для считывания
uint8_t is_measurement_ready(lis331dlh_t * config) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	return config->status_register & 0x08;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7f1b      	ldrb	r3, [r3, #28]
 80052b4:	2208      	movs	r2, #8
 80052b6:	4013      	ands	r3, r2
 80052b8:	b2db      	uxtb	r3, r3
}
 80052ba:	0018      	movs	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	b002      	add	sp, #8
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <_Z14save_in_windowf>:

// сохранение данных в "окне" за последние 400 мс.
// Важно учитывать, что запись данных круговая
void save_in_window(float value) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	size_t window_position = (in_window - window);
 80052cc:	4b1f      	ldr	r3, [pc, #124]	@ (800534c <_Z14save_in_windowf+0x88>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005350 <_Z14save_in_windowf+0x8c>)
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	109b      	asrs	r3, r3, #2
 80052d6:	60fb      	str	r3, [r7, #12]
	if (window_position == WINDOW_SIZE) {
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b28      	cmp	r3, #40	@ 0x28
 80052dc:	d105      	bne.n	80052ea <_Z14save_in_windowf+0x26>
		in_window = window;
 80052de:	4b1b      	ldr	r3, [pc, #108]	@ (800534c <_Z14save_in_windowf+0x88>)
 80052e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <_Z14save_in_windowf+0x8c>)
 80052e2:	601a      	str	r2, [r3, #0]
		window_ready = 1;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <_Z14save_in_windowf+0x90>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
	}

	if (!window_ready) {
 80052ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <_Z14save_in_windowf+0x90>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d105      	bne.n	80052fe <_Z14save_in_windowf+0x3a>
		++window_value_counts;
 80052f2:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <_Z14save_in_windowf+0x94>)
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <_Z14save_in_windowf+0x94>)
 80052fc:	801a      	strh	r2, [r3, #0]
	}

	part_sum -= *in_window;
 80052fe:	4b17      	ldr	r3, [pc, #92]	@ (800535c <_Z14save_in_windowf+0x98>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b12      	ldr	r3, [pc, #72]	@ (800534c <_Z14save_in_windowf+0x88>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1ad2      	subs	r2, r2, r3
 800530a:	4b14      	ldr	r3, [pc, #80]	@ (800535c <_Z14save_in_windowf+0x98>)
 800530c:	601a      	str	r2, [r3, #0]
	*in_window++ = value;
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc f8de 	bl	80014d0 <__aeabi_f2iz>
 8005314:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <_Z14save_in_windowf+0x88>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	4a0c      	ldr	r2, [pc, #48]	@ (800534c <_Z14save_in_windowf+0x88>)
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	6018      	str	r0, [r3, #0]
	part_sum += value;
 8005320:	4b0e      	ldr	r3, [pc, #56]	@ (800535c <_Z14save_in_windowf+0x98>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	0018      	movs	r0, r3
 8005326:	f7fc f8f3 	bl	8001510 <__aeabi_i2f>
 800532a:	1c03      	adds	r3, r0, #0
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	1c18      	adds	r0, r3, #0
 8005330:	f7fb fa66 	bl	8000800 <__aeabi_fadd>
 8005334:	1c03      	adds	r3, r0, #0
 8005336:	1c18      	adds	r0, r3, #0
 8005338:	f7fc f8ca 	bl	80014d0 <__aeabi_f2iz>
 800533c:	0002      	movs	r2, r0
 800533e:	4b07      	ldr	r3, [pc, #28]	@ (800535c <_Z14save_in_windowf+0x98>)
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	20000054 	.word	0x20000054
 8005350:	200003f8 	.word	0x200003f8
 8005354:	200003f2 	.word	0x200003f2
 8005358:	20000498 	.word	0x20000498
 800535c:	2000049c 	.word	0x2000049c

08005360 <_Z26get_mean_value_from_windowv>:

float get_mean_value_from_window() {
 8005360:	b5b0      	push	{r4, r5, r7, lr}
 8005362:	af00      	add	r7, sp, #0
	return part_sum / (float)window_value_counts;
 8005364:	4b09      	ldr	r3, [pc, #36]	@ (800538c <_Z26get_mean_value_from_windowv+0x2c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	0018      	movs	r0, r3
 800536a:	f7fc f8d1 	bl	8001510 <__aeabi_i2f>
 800536e:	1c04      	adds	r4, r0, #0
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <_Z26get_mean_value_from_windowv+0x30>)
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	0018      	movs	r0, r3
 8005376:	f7fc f917 	bl	80015a8 <__aeabi_ui2f>
 800537a:	1c03      	adds	r3, r0, #0
 800537c:	1c19      	adds	r1, r3, #0
 800537e:	1c20      	adds	r0, r4, #0
 8005380:	f7fb fbc8 	bl	8000b14 <__aeabi_fdiv>
 8005384:	1c03      	adds	r3, r0, #0
}
 8005386:	1c18      	adds	r0, r3, #0
 8005388:	46bd      	mov	sp, r7
 800538a:	bdb0      	pop	{r4, r5, r7, pc}
 800538c:	2000049c 	.word	0x2000049c
 8005390:	20000498 	.word	0x20000498

08005394 <is_need_stop_measuring>:

// проверка, что пора остановить измерения
// есть два главных условия для этого:
// 		измерение происходит дольше 400 мс (это означает, что платформа уже остановилась)
//		изменение знака скорости (это означает, что платформа прошла точку экстремума)
uint8_t is_need_stop_measuring() {
 8005394:	b5b0      	push	{r4, r5, r7, lr}
 8005396:	af00      	add	r7, sp, #0
	return measuring_started && (watchdog == WINDOW_SIZE || is_positive_speed ^ (speed > 0));
 8005398:	4b0f      	ldr	r3, [pc, #60]	@ (80053d8 <is_need_stop_measuring+0x44>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d017      	beq.n	80053d0 <is_need_stop_measuring+0x3c>
 80053a0:	4b0e      	ldr	r3, [pc, #56]	@ (80053dc <is_need_stop_measuring+0x48>)
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	2b28      	cmp	r3, #40	@ 0x28
 80053a6:	d011      	beq.n	80053cc <is_need_stop_measuring+0x38>
 80053a8:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <is_need_stop_measuring+0x4c>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	001c      	movs	r4, r3
 80053ae:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <is_need_stop_measuring+0x50>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	1c15      	adds	r5, r2, #0
 80053b6:	2100      	movs	r1, #0
 80053b8:	1c18      	adds	r0, r3, #0
 80053ba:	f7fb f89b 	bl	80004f4 <__aeabi_fcmpgt>
 80053be:	1e03      	subs	r3, r0, #0
 80053c0:	d101      	bne.n	80053c6 <is_need_stop_measuring+0x32>
 80053c2:	2300      	movs	r3, #0
 80053c4:	1c1d      	adds	r5, r3, #0
 80053c6:	b2eb      	uxtb	r3, r5
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d001      	beq.n	80053d0 <is_need_stop_measuring+0x3c>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <is_need_stop_measuring+0x3e>
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bdb0      	pop	{r4, r5, r7, pc}
 80053d8:	200003f1 	.word	0x200003f1
 80053dc:	200003f4 	.word	0x200003f4
 80053e0:	200003f0 	.word	0x200003f0
 80053e4:	200003e8 	.word	0x200003e8

080053e8 <get_real_length>:

// преобразование длины из "попугаев" в мм
// 		9.8 - ускорение 1g
//		1000 - преобразование единиц измерений
//		1024 - соответствует 1g при использовании диапазона 2G
float get_real_length() {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	return length * 9.8 / (float)1000 / (float)1024;
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <get_real_length+0x4c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1c18      	adds	r0, r3, #0
 80053f2:	f7fd ffd7 	bl	80033a4 <__aeabi_f2d>
 80053f6:	4a10      	ldr	r2, [pc, #64]	@ (8005438 <get_real_length+0x50>)
 80053f8:	4b10      	ldr	r3, [pc, #64]	@ (800543c <get_real_length+0x54>)
 80053fa:	f7fd f8bf 	bl	800257c <__aeabi_dmul>
 80053fe:	0002      	movs	r2, r0
 8005400:	000b      	movs	r3, r1
 8005402:	0010      	movs	r0, r2
 8005404:	0019      	movs	r1, r3
 8005406:	2200      	movs	r2, #0
 8005408:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <get_real_length+0x58>)
 800540a:	f7fc fc73 	bl	8001cf4 <__aeabi_ddiv>
 800540e:	0002      	movs	r2, r0
 8005410:	000b      	movs	r3, r1
 8005412:	0010      	movs	r0, r2
 8005414:	0019      	movs	r1, r3
 8005416:	2200      	movs	r2, #0
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <get_real_length+0x5c>)
 800541a:	f7fc fc6b 	bl	8001cf4 <__aeabi_ddiv>
 800541e:	0002      	movs	r2, r0
 8005420:	000b      	movs	r3, r1
 8005422:	0010      	movs	r0, r2
 8005424:	0019      	movs	r1, r3
 8005426:	f7fe f805 	bl	8003434 <__aeabi_d2f>
 800542a:	1c03      	adds	r3, r0, #0
}
 800542c:	1c18      	adds	r0, r3, #0
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	200003ec 	.word	0x200003ec
 8005438:	9999999a 	.word	0x9999999a
 800543c:	40239999 	.word	0x40239999
 8005440:	408f4000 	.word	0x408f4000
 8005444:	40900000 	.word	0x40900000

08005448 <is_measuring_meaningful>:

// проверка данных на корректность. условия два:
// 		перемещения меньше 1 считаем погрешностью
// 		должно быть готово "окно" для вычисления сдивига
uint8_t is_measuring_meaningful(float real_length) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	return window_ready && (fabs(real_length) > 1.001f);
 8005450:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <is_measuring_meaningful+0x34>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00c      	beq.n	8005472 <is_measuring_meaningful+0x2a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1c18      	adds	r0, r3, #0
 800545c:	f7ff fda8 	bl	8004fb0 <_ZSt4fabsf>
 8005460:	1c03      	adds	r3, r0, #0
 8005462:	4907      	ldr	r1, [pc, #28]	@ (8005480 <is_measuring_meaningful+0x38>)
 8005464:	1c18      	adds	r0, r3, #0
 8005466:	f7fb f845 	bl	80004f4 <__aeabi_fcmpgt>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <is_measuring_meaningful+0x2a>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <is_measuring_meaningful+0x2c>
 8005472:	2300      	movs	r3, #0
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b002      	add	sp, #8
 800547a:	bd80      	pop	{r7, pc}
 800547c:	200003f2 	.word	0x200003f2
 8005480:	3f8020c5 	.word	0x3f8020c5

08005484 <reset_variables>:

// сброс переменных
void reset_variables() {
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	af00      	add	r7, sp, #0
	if (watchdog == WINDOW_SIZE) {
 8005488:	4b13      	ldr	r3, [pc, #76]	@ (80054d8 <reset_variables+0x54>)
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	2b28      	cmp	r3, #40	@ 0x28
 800548e:	d102      	bne.n	8005496 <reset_variables+0x12>
		speed = 0;
 8005490:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <reset_variables+0x58>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
	}

	measuring_started = 0;
 8005496:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <reset_variables+0x5c>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
	length = 0;
 800549c:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <reset_variables+0x60>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
	watchdog = 0;
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <reset_variables+0x54>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	801a      	strh	r2, [r3, #0]
	is_positive_speed = fabs(speed) > 0;
 80054a8:	4b0c      	ldr	r3, [pc, #48]	@ (80054dc <reset_variables+0x58>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	1c18      	adds	r0, r3, #0
 80054ae:	f7ff fd7f 	bl	8004fb0 <_ZSt4fabsf>
 80054b2:	1c03      	adds	r3, r0, #0
 80054b4:	2201      	movs	r2, #1
 80054b6:	1c14      	adds	r4, r2, #0
 80054b8:	2100      	movs	r1, #0
 80054ba:	1c18      	adds	r0, r3, #0
 80054bc:	f7fb f81a 	bl	80004f4 <__aeabi_fcmpgt>
 80054c0:	1e03      	subs	r3, r0, #0
 80054c2:	d101      	bne.n	80054c8 <reset_variables+0x44>
 80054c4:	2300      	movs	r3, #0
 80054c6:	1c1c      	adds	r4, r3, #0
 80054c8:	b2e3      	uxtb	r3, r4
 80054ca:	001a      	movs	r2, r3
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <reset_variables+0x64>)
 80054ce:	701a      	strb	r2, [r3, #0]
}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bdb0      	pop	{r4, r5, r7, pc}
 80054d6:	46c0      	nop			@ (mov r8, r8)
 80054d8:	200003f4 	.word	0x200003f4
 80054dc:	200003e8 	.word	0x200003e8
 80054e0:	200003f1 	.word	0x200003f1
 80054e4:	200003ec 	.word	0x200003ec
 80054e8:	200003f0 	.word	0x200003f0

080054ec <check_positive_speed>:

// проверяем направление движения
void check_positive_speed() {
 80054ec:	b5b0      	push	{r4, r5, r7, lr}
 80054ee:	af00      	add	r7, sp, #0
	if (fabs(speed) < 0.001) {
 80054f0:	4b1e      	ldr	r3, [pc, #120]	@ (800556c <check_positive_speed+0x80>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1c18      	adds	r0, r3, #0
 80054f6:	f7ff fd5b 	bl	8004fb0 <_ZSt4fabsf>
 80054fa:	1c03      	adds	r3, r0, #0
 80054fc:	1c18      	adds	r0, r3, #0
 80054fe:	f7fd ff51 	bl	80033a4 <__aeabi_f2d>
 8005502:	2301      	movs	r3, #1
 8005504:	1c1c      	adds	r4, r3, #0
 8005506:	4a1a      	ldr	r2, [pc, #104]	@ (8005570 <check_positive_speed+0x84>)
 8005508:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <check_positive_speed+0x88>)
 800550a:	f7fa ffa5 	bl	8000458 <__aeabi_dcmplt>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d101      	bne.n	8005516 <check_positive_speed+0x2a>
 8005512:	2300      	movs	r3, #0
 8005514:	1c1c      	adds	r4, r3, #0
 8005516:	b2e3      	uxtb	r3, r4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d013      	beq.n	8005544 <check_positive_speed+0x58>
		is_positive_speed = acceleration > 0.0f;
 800551c:	4b16      	ldr	r3, [pc, #88]	@ (8005578 <check_positive_speed+0x8c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	1c14      	adds	r4, r2, #0
 8005524:	2100      	movs	r1, #0
 8005526:	1c18      	adds	r0, r3, #0
 8005528:	f7fa ffe4 	bl	80004f4 <__aeabi_fcmpgt>
 800552c:	1e03      	subs	r3, r0, #0
 800552e:	d101      	bne.n	8005534 <check_positive_speed+0x48>
 8005530:	2300      	movs	r3, #0
 8005532:	1c1c      	adds	r4, r3, #0
 8005534:	b2e3      	uxtb	r3, r4
 8005536:	001a      	movs	r2, r3
 8005538:	4b10      	ldr	r3, [pc, #64]	@ (800557c <check_positive_speed+0x90>)
 800553a:	701a      	strb	r2, [r3, #0]
		speed = 0.0f;
 800553c:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <check_positive_speed+0x80>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
	}
	else {
		is_positive_speed = speed > 0.0f;
	}
}
 8005542:	e00f      	b.n	8005564 <check_positive_speed+0x78>
		is_positive_speed = speed > 0.0f;
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <check_positive_speed+0x80>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	1c14      	adds	r4, r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	1c18      	adds	r0, r3, #0
 8005550:	f7fa ffd0 	bl	80004f4 <__aeabi_fcmpgt>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d101      	bne.n	800555c <check_positive_speed+0x70>
 8005558:	2300      	movs	r3, #0
 800555a:	1c1c      	adds	r4, r3, #0
 800555c:	b2e3      	uxtb	r3, r4
 800555e:	001a      	movs	r2, r3
 8005560:	4b06      	ldr	r3, [pc, #24]	@ (800557c <check_positive_speed+0x90>)
 8005562:	701a      	strb	r2, [r3, #0]
}
 8005564:	46c0      	nop			@ (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	bdb0      	pop	{r4, r5, r7, pc}
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	200003e8 	.word	0x200003e8
 8005570:	d2f1a9fc 	.word	0xd2f1a9fc
 8005574:	3f50624d 	.word	0x3f50624d
 8005578:	200003e4 	.word	0x200003e4
 800557c:	200003f0 	.word	0x200003f0

08005580 <_Z23update_speed_and_lengthP11lis331dlh_t>:

// интегрирование ускорения и скорости
void update_speed_and_length(lis331dlh_t * config) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	if (measuring_started) {
 8005588:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <_Z23update_speed_and_lengthP11lis331dlh_t+0x74>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d02d      	beq.n	80055ec <_Z23update_speed_and_lengthP11lis331dlh_t+0x6c>
		speed += acceleration * config->range_factor;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	4b18      	ldr	r3, [pc, #96]	@ (80055f8 <_Z23update_speed_and_lengthP11lis331dlh_t+0x78>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1c19      	adds	r1, r3, #0
 800559a:	1c10      	adds	r0, r2, #0
 800559c:	f7fb fca0 	bl	8000ee0 <__aeabi_fmul>
 80055a0:	1c03      	adds	r3, r0, #0
 80055a2:	1c1a      	adds	r2, r3, #0
 80055a4:	4b15      	ldr	r3, [pc, #84]	@ (80055fc <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	1c19      	adds	r1, r3, #0
 80055aa:	1c10      	adds	r0, r2, #0
 80055ac:	f7fb f928 	bl	8000800 <__aeabi_fadd>
 80055b0:	1c03      	adds	r3, r0, #0
 80055b2:	1c1a      	adds	r2, r3, #0
 80055b4:	4b11      	ldr	r3, [pc, #68]	@ (80055fc <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 80055b6:	601a      	str	r2, [r3, #0]
		length += speed * config->range_factor;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	4b0f      	ldr	r3, [pc, #60]	@ (80055fc <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1c19      	adds	r1, r3, #0
 80055c2:	1c10      	adds	r0, r2, #0
 80055c4:	f7fb fc8c 	bl	8000ee0 <__aeabi_fmul>
 80055c8:	1c03      	adds	r3, r0, #0
 80055ca:	1c1a      	adds	r2, r3, #0
 80055cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	1c19      	adds	r1, r3, #0
 80055d2:	1c10      	adds	r0, r2, #0
 80055d4:	f7fb f914 	bl	8000800 <__aeabi_fadd>
 80055d8:	1c03      	adds	r3, r0, #0
 80055da:	1c1a      	adds	r2, r3, #0
 80055dc:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 80055de:	601a      	str	r2, [r3, #0]
		++watchdog;
 80055e0:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 80055ea:	801a      	strh	r2, [r3, #0]
	}
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	200003f1 	.word	0x200003f1
 80055f8:	200003e4 	.word	0x200003e4
 80055fc:	200003e8 	.word	0x200003e8
 8005600:	200003ec 	.word	0x200003ec
 8005604:	200003f4 	.word	0x200003f4

08005608 <print_result>:

// дебажная печать результатов вычислений
void print_result(float real_length) {
 8005608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800560a:	b08f      	sub	sp, #60	@ 0x3c
 800560c:	af08      	add	r7, sp, #32
 800560e:	6178      	str	r0, [r7, #20]
	if (is_measuring_meaningful(real_length)) {
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	1c18      	adds	r0, r3, #0
 8005614:	f7ff ff18 	bl	8005448 <is_measuring_meaningful>
 8005618:	0003      	movs	r3, r0
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	4193      	sbcs	r3, r2
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02b      	beq.n	800567c <print_result+0x74>
		debug("LENGTH = %f, speed = %f, watchdog = %lu, max = %.2f, min = %.2f\r\n",
 8005624:	6978      	ldr	r0, [r7, #20]
 8005626:	f7fd febd 	bl	80033a4 <__aeabi_f2d>
 800562a:	60b8      	str	r0, [r7, #8]
 800562c:	60f9      	str	r1, [r7, #12]
 800562e:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <print_result+0x7c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	1c18      	adds	r0, r3, #0
 8005634:	f7fd feb6 	bl	80033a4 <__aeabi_f2d>
 8005638:	0004      	movs	r4, r0
 800563a:	000d      	movs	r5, r1
 800563c:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <print_result+0x80>)
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	001e      	movs	r6, r3
 8005642:	4b12      	ldr	r3, [pc, #72]	@ (800568c <print_result+0x84>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	1c18      	adds	r0, r3, #0
 8005648:	f7fd feac 	bl	80033a4 <__aeabi_f2d>
 800564c:	6038      	str	r0, [r7, #0]
 800564e:	6079      	str	r1, [r7, #4]
 8005650:	4b0f      	ldr	r3, [pc, #60]	@ (8005690 <print_result+0x88>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	1c18      	adds	r0, r3, #0
 8005656:	f7fd fea5 	bl	80033a4 <__aeabi_f2d>
 800565a:	0002      	movs	r2, r0
 800565c:	000b      	movs	r3, r1
 800565e:	490d      	ldr	r1, [pc, #52]	@ (8005694 <print_result+0x8c>)
 8005660:	9206      	str	r2, [sp, #24]
 8005662:	9307      	str	r3, [sp, #28]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	9204      	str	r2, [sp, #16]
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	9602      	str	r6, [sp, #8]
 800566e:	9400      	str	r4, [sp, #0]
 8005670:	9501      	str	r5, [sp, #4]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	0008      	movs	r0, r1
 8005678:	f000 fa0c 	bl	8005a94 <debug>
			real_length, speed, watchdog, max_positive_move, max_negative_move);
	}
}
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b007      	add	sp, #28
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005684:	200003e8 	.word	0x200003e8
 8005688:	200003f4 	.word	0x200003f4
 800568c:	200003d4 	.word	0x200003d4
 8005690:	200003d8 	.word	0x200003d8
 8005694:	08016e48 	.word	0x08016e48

08005698 <_Z25find_maxmin_accelerationsv>:

void find_maxmin_accelerations() {
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	float real_acceleration = acceleration * 9.8 / (float)1024;
 800569e:	4b28      	ldr	r3, [pc, #160]	@ (8005740 <_Z25find_maxmin_accelerationsv+0xa8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	1c18      	adds	r0, r3, #0
 80056a4:	f7fd fe7e 	bl	80033a4 <__aeabi_f2d>
 80056a8:	4a26      	ldr	r2, [pc, #152]	@ (8005744 <_Z25find_maxmin_accelerationsv+0xac>)
 80056aa:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <_Z25find_maxmin_accelerationsv+0xb0>)
 80056ac:	f7fc ff66 	bl	800257c <__aeabi_dmul>
 80056b0:	0002      	movs	r2, r0
 80056b2:	000b      	movs	r3, r1
 80056b4:	0010      	movs	r0, r2
 80056b6:	0019      	movs	r1, r3
 80056b8:	2200      	movs	r2, #0
 80056ba:	4b24      	ldr	r3, [pc, #144]	@ (800574c <_Z25find_maxmin_accelerationsv+0xb4>)
 80056bc:	f7fc fb1a 	bl	8001cf4 <__aeabi_ddiv>
 80056c0:	0002      	movs	r2, r0
 80056c2:	000b      	movs	r3, r1
 80056c4:	0010      	movs	r0, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	f7fd feb4 	bl	8003434 <__aeabi_d2f>
 80056cc:	1c03      	adds	r3, r0, #0
 80056ce:	607b      	str	r3, [r7, #4]
	if (max_positive_acceleration < real_acceleration) {
 80056d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005750 <_Z25find_maxmin_accelerationsv+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	1c19      	adds	r1, r3, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fa ff0c 	bl	80004f4 <__aeabi_fcmpgt>
 80056dc:	1e03      	subs	r3, r0, #0
 80056de:	d007      	beq.n	80056f0 <_Z25find_maxmin_accelerationsv+0x58>
		max_positive_acceleration = real_acceleration;
 80056e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <_Z25find_maxmin_accelerationsv+0xb8>)
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 80056e6:	f002 fae9 	bl	8007cbc <HAL_GetTick>
 80056ea:	0002      	movs	r2, r0
 80056ec:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <_Z25find_maxmin_accelerationsv+0xbc>)
 80056ee:	601a      	str	r2, [r3, #0]
	}

	if (max_negative_acceleration > real_acceleration) {
 80056f0:	4b19      	ldr	r3, [pc, #100]	@ (8005758 <_Z25find_maxmin_accelerationsv+0xc0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	1c19      	adds	r1, r3, #0
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fa fee8 	bl	80004cc <__aeabi_fcmplt>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d007      	beq.n	8005710 <_Z25find_maxmin_accelerationsv+0x78>
		max_negative_acceleration = real_acceleration;
 8005700:	4b15      	ldr	r3, [pc, #84]	@ (8005758 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 8005706:	f002 fad9 	bl	8007cbc <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <_Z25find_maxmin_accelerationsv+0xbc>)
 800570e:	601a      	str	r2, [r3, #0]
	}

	max_positive_acceleration = fmax(max_positive_acceleration, real_acceleration);
 8005710:	4b0f      	ldr	r3, [pc, #60]	@ (8005750 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	1c11      	adds	r1, r2, #0
 8005718:	1c18      	adds	r0, r3, #0
 800571a:	f7ff fc54 	bl	8004fc6 <_ZSt4fmaxff>
 800571e:	1c02      	adds	r2, r0, #0
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005722:	601a      	str	r2, [r3, #0]
	max_negative_acceleration = fmin(max_negative_acceleration, real_acceleration);
 8005724:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	1c11      	adds	r1, r2, #0
 800572c:	1c18      	adds	r0, r3, #0
 800572e:	f7ff fc5a 	bl	8004fe6 <_ZSt4fminff>
 8005732:	1c02      	adds	r2, r0, #0
 8005734:	4b08      	ldr	r3, [pc, #32]	@ (8005758 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005736:	601a      	str	r2, [r3, #0]

}
 8005738:	46c0      	nop			@ (mov r8, r8)
 800573a:	46bd      	mov	sp, r7
 800573c:	b002      	add	sp, #8
 800573e:	bd80      	pop	{r7, pc}
 8005740:	200003e4 	.word	0x200003e4
 8005744:	9999999a 	.word	0x9999999a
 8005748:	40239999 	.word	0x40239999
 800574c:	40900000 	.word	0x40900000
 8005750:	200003dc 	.word	0x200003dc
 8005754:	200004a4 	.word	0x200004a4
 8005758:	200003e0 	.word	0x200003e0

0800575c <calc_length>:

// основной алгоритм вычисления длины перемещений
void calc_length(lis331dlh_t * config) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
//	debug("Get data\r\n");
	// получение данных ускорений
	acceleration = get_acceleration_data(config);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0018      	movs	r0, r3
 8005768:	f7ff fc4e 	bl	8005008 <_Z21get_acceleration_dataP11lis331dlh_t>
 800576c:	0003      	movs	r3, r0
 800576e:	0018      	movs	r0, r3
 8005770:	f7fb fece 	bl	8001510 <__aeabi_i2f>
 8005774:	1c02      	adds	r2, r0, #0
 8005776:	4b40      	ldr	r3, [pc, #256]	@ (8005878 <calc_length+0x11c>)
 8005778:	601a      	str	r2, [r3, #0]

	// сохранение значения в окне на 40мс для вычисления среднего для компенсации
	// репроекции осей при движении
	save_in_window(acceleration);
 800577a:	4b3f      	ldr	r3, [pc, #252]	@ (8005878 <calc_length+0x11c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	1c18      	adds	r0, r3, #0
 8005780:	f7ff fda0 	bl	80052c4 <_Z14save_in_windowf>

	// вычитание среднего значения за последние 400 мс
	// необходимо для исключения ускорение свободного падения
	// и компенсации ошибки репроекции осей
	acceleration -= get_mean_value_from_window();
 8005784:	f7ff fdec 	bl	8005360 <_Z26get_mean_value_from_windowv>
 8005788:	1c02      	adds	r2, r0, #0
 800578a:	4b3b      	ldr	r3, [pc, #236]	@ (8005878 <calc_length+0x11c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1c11      	adds	r1, r2, #0
 8005790:	1c18      	adds	r0, r3, #0
 8005792:	f7fb fce3 	bl	800115c <__aeabi_fsub>
 8005796:	1c03      	adds	r3, r0, #0
 8005798:	1c1a      	adds	r2, r3, #0
 800579a:	4b37      	ldr	r3, [pc, #220]	@ (8005878 <calc_length+0x11c>)
 800579c:	601a      	str	r2, [r3, #0]
	// компенсация угла наклона
	acceleration *= incline_factor;
 800579e:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <calc_length+0x11c>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b36      	ldr	r3, [pc, #216]	@ (800587c <calc_length+0x120>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1c19      	adds	r1, r3, #0
 80057a8:	1c10      	adds	r0, r2, #0
 80057aa:	f7fb fb99 	bl	8000ee0 <__aeabi_fmul>
 80057ae:	1c03      	adds	r3, r0, #0
 80057b0:	1c1a      	adds	r2, r3, #0
 80057b2:	4b31      	ldr	r3, [pc, #196]	@ (8005878 <calc_length+0x11c>)
 80057b4:	601a      	str	r2, [r3, #0]

	// нахождение максимумов и минимумов ускорений
	find_maxmin_accelerations();
 80057b6:	f7ff ff6f 	bl	8005698 <_Z25find_maxmin_accelerationsv>

	// старт измерений происходит при значении ускорения больше 5
	// число 5.0 подобрано эмпирическим путем и является компромиссом
	// между точностью и ложными срабатываниями
	if (!measuring_started && fabs(acceleration) > 5.0f) {
 80057ba:	4b31      	ldr	r3, [pc, #196]	@ (8005880 <calc_length+0x124>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <calc_length+0x82>
 80057c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005878 <calc_length+0x11c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1c18      	adds	r0, r3, #0
 80057c8:	f7ff fbf2 	bl	8004fb0 <_ZSt4fabsf>
 80057cc:	1c03      	adds	r3, r0, #0
 80057ce:	492d      	ldr	r1, [pc, #180]	@ (8005884 <calc_length+0x128>)
 80057d0:	1c18      	adds	r0, r3, #0
 80057d2:	f7fa fe8f 	bl	80004f4 <__aeabi_fcmpgt>
 80057d6:	1e03      	subs	r3, r0, #0
 80057d8:	d001      	beq.n	80057de <calc_length+0x82>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <calc_length+0x84>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <calc_length+0x92>
		// флаг начала измерений
		measuring_started = 1;
 80057e4:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <calc_length+0x124>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
		// проверка направления (необходимо для остановки измерений)
		check_positive_speed();
 80057ea:	f7ff fe7f 	bl	80054ec <check_positive_speed>
	}


//	debug("Integrate\r\n");
	// интегрирование
	update_speed_and_length(config);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7ff fec5 	bl	8005580 <_Z23update_speed_and_lengthP11lis331dlh_t>

	// проверка условий остановки
	if (is_need_stop_measuring()) {
 80057f6:	f7ff fdcd 	bl	8005394 <is_need_stop_measuring>
 80057fa:	0003      	movs	r3, r0
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	4193      	sbcs	r3, r2
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d033      	beq.n	800586e <calc_length+0x112>
		// преобразование сырых данных в систему счисления
		float real_length = get_real_length();
 8005806:	f7ff fdef 	bl	80053e8 <get_real_length>
 800580a:	1c03      	adds	r3, r0, #0
 800580c:	60fb      	str	r3, [r7, #12]

		// нахождение максимумов и минимумов по перемещениям
		if (is_measuring_meaningful(real_length)) {
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1c18      	adds	r0, r3, #0
 8005812:	f7ff fe19 	bl	8005448 <is_measuring_meaningful>
 8005816:	0003      	movs	r3, r0
 8005818:	1e5a      	subs	r2, r3, #1
 800581a:	4193      	sbcs	r3, r2
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01f      	beq.n	8005862 <calc_length+0x106>
			if (max_positive_move < real_length) {
 8005822:	4b19      	ldr	r3, [pc, #100]	@ (8005888 <calc_length+0x12c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1c19      	adds	r1, r3, #0
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7fa fe63 	bl	80004f4 <__aeabi_fcmpgt>
 800582e:	1e03      	subs	r3, r0, #0
 8005830:	d007      	beq.n	8005842 <calc_length+0xe6>
				max_positive_move = real_length;
 8005832:	4b15      	ldr	r3, [pc, #84]	@ (8005888 <calc_length+0x12c>)
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 8005838:	f002 fa40 	bl	8007cbc <HAL_GetTick>
 800583c:	0002      	movs	r2, r0
 800583e:	4b13      	ldr	r3, [pc, #76]	@ (800588c <calc_length+0x130>)
 8005840:	601a      	str	r2, [r3, #0]
			}

			if (max_negative_move > real_length) {
 8005842:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <calc_length+0x134>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	1c19      	adds	r1, r3, #0
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7fa fe3f 	bl	80004cc <__aeabi_fcmplt>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d007      	beq.n	8005862 <calc_length+0x106>
				max_negative_move = real_length;
 8005852:	4b0f      	ldr	r3, [pc, #60]	@ (8005890 <calc_length+0x134>)
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 8005858:	f002 fa30 	bl	8007cbc <HAL_GetTick>
 800585c:	0002      	movs	r2, r0
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <calc_length+0x130>)
 8005860:	601a      	str	r2, [r3, #0]
			}
		}
		print_result(real_length);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1c18      	adds	r0, r3, #0
 8005866:	f7ff fecf 	bl	8005608 <print_result>
		reset_variables();
 800586a:	f7ff fe0b 	bl	8005484 <reset_variables>
	}
//	debug("Return\r\n");
}
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	46bd      	mov	sp, r7
 8005872:	b004      	add	sp, #16
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	200003e4 	.word	0x200003e4
 800587c:	200004a8 	.word	0x200004a8
 8005880:	200003f1 	.word	0x200003f1
 8005884:	40a00000 	.word	0x40a00000
 8005888:	200003d4 	.word	0x200003d4
 800588c:	200004a0 	.word	0x200004a0
 8005890:	200003d8 	.word	0x200003d8

08005894 <reset_acceleration_maximums>:

// сброс максимумом ускорений
void reset_acceleration_maximums() {
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - acceleration_timestamp) > maxmin_timeout_ms) {
 8005898:	f002 fa10 	bl	8007cbc <HAL_GetTick>
 800589c:	0002      	movs	r2, r0
 800589e:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <reset_acceleration_maximums+0x3c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	1ad2      	subs	r2, r2, r3
 80058a4:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <reset_acceleration_maximums+0x40>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4293      	cmp	r3, r2
 80058aa:	419b      	sbcs	r3, r3
 80058ac:	425b      	negs	r3, r3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <reset_acceleration_maximums+0x36>
		acceleration_timestamp = HAL_GetTick();
 80058b4:	f002 fa02 	bl	8007cbc <HAL_GetTick>
 80058b8:	0002      	movs	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <reset_acceleration_maximums+0x3c>)
 80058bc:	601a      	str	r2, [r3, #0]

		max_positive_acceleration = 0.0f;
 80058be:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <reset_acceleration_maximums+0x44>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
		max_negative_acceleration = 0.0f;
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <reset_acceleration_maximums+0x48>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
	}
}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200004a4 	.word	0x200004a4
 80058d4:	20000050 	.word	0x20000050
 80058d8:	200003dc 	.word	0x200003dc
 80058dc:	200003e0 	.word	0x200003e0

080058e0 <reset_move_maximums>:

// сброс максимумом по перемещениям
void reset_move_maximums() {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - move_timestamp) > maxmin_timeout_ms) {
 80058e4:	f002 f9ea 	bl	8007cbc <HAL_GetTick>
 80058e8:	0002      	movs	r2, r0
 80058ea:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <reset_move_maximums+0x3c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <reset_move_maximums+0x40>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	419b      	sbcs	r3, r3
 80058f8:	425b      	negs	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <reset_move_maximums+0x36>
		move_timestamp = HAL_GetTick();
 8005900:	f002 f9dc 	bl	8007cbc <HAL_GetTick>
 8005904:	0002      	movs	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	@ (800591c <reset_move_maximums+0x3c>)
 8005908:	601a      	str	r2, [r3, #0]

		max_positive_move = 0.0f;
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <reset_move_maximums+0x44>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
		max_negative_move = 0.0f;
 8005910:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <reset_move_maximums+0x48>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	}
}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	200004a0 	.word	0x200004a0
 8005920:	20000050 	.word	0x20000050
 8005924:	200003d4 	.word	0x200003d4
 8005928:	200003d8 	.word	0x200003d8

0800592c <get_max_positive_acceleration>:

// получить максимум ускорения в +
float get_max_positive_acceleration() {
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
	return max_positive_acceleration;
 8005930:	4b02      	ldr	r3, [pc, #8]	@ (800593c <get_max_positive_acceleration+0x10>)
 8005932:	681b      	ldr	r3, [r3, #0]
}
 8005934:	1c18      	adds	r0, r3, #0
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	200003dc 	.word	0x200003dc

08005940 <get_max_negative_acceleration>:


// получить максимум ускорения в -
float get_max_negative_acceleration() {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
	return max_negative_acceleration;
 8005944:	4b02      	ldr	r3, [pc, #8]	@ (8005950 <get_max_negative_acceleration+0x10>)
 8005946:	681b      	ldr	r3, [r3, #0]
}
 8005948:	1c18      	adds	r0, r3, #0
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	200003e0 	.word	0x200003e0

08005954 <get_max_positive_move>:

// получить максимум перемещения в +
float get_max_positive_move() {
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	return max_positive_move;
 8005958:	4b02      	ldr	r3, [pc, #8]	@ (8005964 <get_max_positive_move+0x10>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	1c18      	adds	r0, r3, #0
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	200003d4 	.word	0x200003d4

08005968 <get_max_negative_move>:

// получить максимум перемещения в -
float get_max_negative_move() {
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
	return max_negative_move;
 800596c:	4b02      	ldr	r3, [pc, #8]	@ (8005978 <get_max_negative_move+0x10>)
 800596e:	681b      	ldr	r3, [r3, #0]
}
 8005970:	1c18      	adds	r0, r3, #0
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			@ (mov r8, r8)
 8005978:	200003d8 	.word	0x200003d8

0800597c <round_and_limit_float>:
	}

	return (uint8_t)fmin(roundf(value), limit);
}

float round_and_limit_float(float value) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	if (value < 0) {
 8005984:	2100      	movs	r1, #0
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fa fda0 	bl	80004cc <__aeabi_fcmplt>
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	d004      	beq.n	800599a <round_and_limit_float+0x1e>
		value *= -1;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2280      	movs	r2, #128	@ 0x80
 8005994:	0612      	lsls	r2, r2, #24
 8005996:	4053      	eors	r3, r2
 8005998:	607b      	str	r3, [r7, #4]
	}

	return value;
 800599a:	687b      	ldr	r3, [r7, #4]
}
 800599c:	1c18      	adds	r0, r3, #0
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80059a4:	b5b0      	push	{r4, r5, r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fd fca7 	bl	8003300 <__aeabi_i2d>
 80059b2:	0002      	movs	r2, r0
 80059b4:	000b      	movs	r3, r1
 80059b6:	0011      	movs	r1, r2
 80059b8:	000c      	movs	r4, r1
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	085d      	lsrs	r5, r3, #1
 80059be:	0022      	movs	r2, r4
 80059c0:	002b      	movs	r3, r5
 80059c2:	0010      	movs	r0, r2
 80059c4:	0019      	movs	r1, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b002      	add	sp, #8
 80059ca:	bdb0      	pop	{r4, r5, r7, pc}

080059cc <reset_debug_variables>:


bool need_logging = true;


void reset_debug_variables() {
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	af00      	add	r7, sp, #0
	if (current_debug_buffer_pointer == last_trasmited_debug_buffer) {
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <reset_debug_variables+0x54>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <reset_debug_variables+0x58>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d10d      	bne.n	80059f8 <reset_debug_variables+0x2c>
		need_logging = true;
 80059dc:	4b12      	ldr	r3, [pc, #72]	@ (8005a28 <reset_debug_variables+0x5c>)
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
		memset(debug_buffer, 0, DEBUG_BUFFER_SIZE);
 80059e2:	2380      	movs	r3, #128	@ 0x80
 80059e4:	019a      	lsls	r2, r3, #6
 80059e6:	4b11      	ldr	r3, [pc, #68]	@ (8005a2c <reset_debug_variables+0x60>)
 80059e8:	2100      	movs	r1, #0
 80059ea:	0018      	movs	r0, r3
 80059ec:	f00d fa2c 	bl	8012e48 <memset>
		current_debug_buffer_pointer = debug_buffer;
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <reset_debug_variables+0x54>)
 80059f2:	4a0e      	ldr	r2, [pc, #56]	@ (8005a2c <reset_debug_variables+0x60>)
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e00b      	b.n	8005a10 <reset_debug_variables+0x44>
	}
	else {
		transmit(
 80059f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a30 <reset_debug_variables+0x64>)
 80059fa:	681c      	ldr	r4, [r3, #0]
 80059fc:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <reset_debug_variables+0x58>)
 80059fe:	681d      	ldr	r5, [r3, #0]
 8005a00:	f000 f832 	bl	8005a68 <get_debug_buffer_length_to_send>
 8005a04:	0003      	movs	r3, r0
 8005a06:	001a      	movs	r2, r3
 8005a08:	0029      	movs	r1, r5
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	f000 f8d4 	bl	8005bb8 <transmit>
			debug_uart, last_trasmited_debug_buffer,
			get_debug_buffer_length_to_send()
		);
	}
	last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005a10:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <reset_debug_variables+0x54>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b03      	ldr	r3, [pc, #12]	@ (8005a24 <reset_debug_variables+0x58>)
 8005a16:	601a      	str	r2, [r3, #0]
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	20000058 	.word	0x20000058
 8005a24:	200024ac 	.word	0x200024ac
 8005a28:	2000005c 	.word	0x2000005c
 8005a2c:	200004ac 	.word	0x200004ac
 8005a30:	2000006c 	.word	0x2000006c

08005a34 <get_free_debug_buffer_size>:


inline size_t get_free_debug_buffer_size() {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
	int32_t size = (int32_t)debug_buffer + (int32_t)DEBUG_BUFFER_SIZE - (int32_t)current_debug_buffer_pointer;
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <get_free_debug_buffer_size+0x2c>)
 8005a3c:	2280      	movs	r2, #128	@ 0x80
 8005a3e:	0192      	lsls	r2, r2, #6
 8005a40:	189a      	adds	r2, r3, r2
 8005a42:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <get_free_debug_buffer_size+0x30>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	607b      	str	r3, [r7, #4]

	if (size < 0) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da01      	bge.n	8005a54 <get_free_debug_buffer_size+0x20>
		size = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	607b      	str	r3, [r7, #4]
	}

	return static_cast<size_t>(size);
 8005a54:	687b      	ldr	r3, [r7, #4]
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b002      	add	sp, #8
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	200004ac 	.word	0x200004ac
 8005a64:	20000058 	.word	0x20000058

08005a68 <get_debug_buffer_length_to_send>:

inline uint16_t get_debug_buffer_length_to_send() {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
//	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
//	size = std::min(size, MAX_DEBUG_MESSAGE_SIZE);
	return current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005a6c:	4b04      	ldr	r3, [pc, #16]	@ (8005a80 <get_debug_buffer_length_to_send+0x18>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <get_debug_buffer_length_to_send+0x1c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	b29b      	uxth	r3, r3
}
 8005a78:	0018      	movs	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	20000058 	.word	0x20000058
 8005a84:	200024ac 	.word	0x200024ac

08005a88 <debug_enabled>:

uint8_t debug_enabled() {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
	return DEBUG_ENABLED;
 8005a8c:	2301      	movs	r3, #1
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <debug>:

void debug(const char * message, ...) {
 8005a94:	b40f      	push	{r0, r1, r2, r3}
 8005a96:	b590      	push	{r4, r7, lr}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
	if constexpr (DEBUG_ENABLED) {
		size_t max_buffer_size = get_free_debug_buffer_size();
 8005a9c:	f7ff ffca 	bl	8005a34 <get_free_debug_buffer_size>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	60bb      	str	r3, [r7, #8]

		if (max_buffer_size > 0) {
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d058      	beq.n	8005b5c <debug+0xc8>
			int16_t recorded = snprintf((char *)current_debug_buffer_pointer, max_buffer_size, "%lu ms: ", HAL_GetTick());
 8005aaa:	4b31      	ldr	r3, [pc, #196]	@ (8005b70 <debug+0xdc>)
 8005aac:	681c      	ldr	r4, [r3, #0]
 8005aae:	f002 f905 	bl	8007cbc <HAL_GetTick>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b74 <debug+0xe0>)
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	0020      	movs	r0, r4
 8005aba:	f00d f8ed 	bl	8012c98 <sniprintf>
 8005abe:	0002      	movs	r2, r0
 8005ac0:	1dbb      	adds	r3, r7, #6
 8005ac2:	801a      	strh	r2, [r3, #0]

			uint16_t length = recorded > 0 ? (uint16_t)recorded : 0;
 8005ac4:	1dbb      	adds	r3, r7, #6
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b21a      	sxth	r2, r3
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	da00      	bge.n	8005ad0 <debug+0x3c>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	b21a      	sxth	r2, r3
 8005ad2:	210e      	movs	r1, #14
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	801a      	strh	r2, [r3, #0]
//			uint16_t length = 0;

			if (max_buffer_size > length) {
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d93e      	bls.n	8005b60 <debug+0xcc>
				max_buffer_size -= length;
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	60bb      	str	r3, [r7, #8]

				va_list args;
				va_start (args, message);
 8005aec:	2324      	movs	r3, #36	@ 0x24
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	603b      	str	r3, [r7, #0]
				recorded = vsnprintf((char *)(current_debug_buffer_pointer + length), max_buffer_size, message, args);
 8005af2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b70 <debug+0xdc>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	187b      	adds	r3, r7, r1
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	18d0      	adds	r0, r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6a3a      	ldr	r2, [r7, #32]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f00d f995 	bl	8012e30 <vsniprintf>
 8005b06:	0002      	movs	r2, r0
 8005b08:	1dbb      	adds	r3, r7, #6
 8005b0a:	801a      	strh	r2, [r3, #0]
				va_end (args);

				if (recorded > 0) {
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	2200      	movs	r2, #0
 8005b10:	5e9b      	ldrsh	r3, [r3, r2]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dd11      	ble.n	8005b3a <debug+0xa6>
					length += recorded < (int16_t)max_buffer_size ? recorded : max_buffer_size;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	b21b      	sxth	r3, r3
 8005b1a:	1dba      	adds	r2, r7, #6
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	5e52      	ldrsh	r2, [r2, r1]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	db02      	blt.n	8005b2a <debug+0x96>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	e001      	b.n	8005b2e <debug+0x9a>
 8005b2a:	1dbb      	adds	r3, r7, #6
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	210e      	movs	r1, #14
 8005b30:	187a      	adds	r2, r7, r1
 8005b32:	1879      	adds	r1, r7, r1
 8005b34:	8809      	ldrh	r1, [r1, #0]
 8005b36:	185b      	adds	r3, r3, r1
 8005b38:	8013      	strh	r3, [r2, #0]
				}

				current_debug_buffer_pointer += length;
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b70 <debug+0xdc>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	230e      	movs	r3, #14
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	18d2      	adds	r2, r2, r3
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <debug+0xdc>)
 8005b48:	601a      	str	r2, [r3, #0]

				if (current_debug_buffer_pointer > (debug_buffer + 8192)) {
 8005b4a:	4b09      	ldr	r3, [pc, #36]	@ (8005b70 <debug+0xdc>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <debug+0xe4>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d905      	bls.n	8005b60 <debug+0xcc>
					current_debug_buffer_pointer = debug_buffer + 8192;
 8005b54:	4a08      	ldr	r2, [pc, #32]	@ (8005b78 <debug+0xe4>)
 8005b56:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <debug+0xdc>)
 8005b58:	601a      	str	r2, [r3, #0]
		}
		else {
			reset_debug_variables();
		}
	}
}
 8005b5a:	e001      	b.n	8005b60 <debug+0xcc>
			reset_debug_variables();
 8005b5c:	f7ff ff36 	bl	80059cc <reset_debug_variables>
}
 8005b60:	46c0      	nop			@ (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b005      	add	sp, #20
 8005b66:	bc90      	pop	{r4, r7}
 8005b68:	bc08      	pop	{r3}
 8005b6a:	b004      	add	sp, #16
 8005b6c:	4718      	bx	r3
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	20000058 	.word	0x20000058
 8005b74:	08016e8c 	.word	0x08016e8c
 8005b78:	200024ac 	.word	0x200024ac

08005b7c <extended_debug>:

void extended_debug(const char * message, ...) {
 8005b7c:	b40f      	push	{r0, r1, r2, r3}
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	af00      	add	r7, sp, #0
		va_list args;
		va_start (args, message);
		debug(message, args);
		va_end (args);
	}
}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	bc08      	pop	{r3}
 8005b8a:	b004      	add	sp, #16
 8005b8c:	4718      	bx	r3

08005b8e <receive>:
//
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)str, len, 100);
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)res, 10, 100);
//}

void receive(uart_t * uart, uint8_t * buffer, size_t size) {
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
	HAL_UART_AbortReceive(uart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f006 fe7d 	bl	800c89c <HAL_UART_AbortReceive>

	HAL_UART_Receive_IT(uart, buffer, size);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f006 fe18 	bl	800c7e0 <HAL_UART_Receive_IT>
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b004      	add	sp, #16
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <transmit>:

void transmit(uart_t * uart, uint8_t * buffer, uint16_t size) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	1dbb      	adds	r3, r7, #6
 8005bc4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(uart, buffer, size);
 8005bc6:	1dbb      	adds	r3, r7, #6
 8005bc8:	881a      	ldrh	r2, [r3, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f006 fd5e 	bl	800c690 <HAL_UART_Transmit_IT>
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b004      	add	sp, #16
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <send_debug_messages>:

void send_debug_messages() {
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
	uint16_t size = get_debug_buffer_length_to_send();
 8005be2:	1dbc      	adds	r4, r7, #6
 8005be4:	f7ff ff40 	bl	8005a68 <get_debug_buffer_length_to_send>
 8005be8:	0003      	movs	r3, r0
 8005bea:	8023      	strh	r3, [r4, #0]

	if (need_logging && size > 0) {
 8005bec:	4b0e      	ldr	r3, [pc, #56]	@ (8005c28 <send_debug_messages+0x4c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <send_debug_messages+0x44>
 8005bf4:	1dbb      	adds	r3, r7, #6
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d011      	beq.n	8005c20 <send_debug_messages+0x44>
		transmit(debug_uart, debug_buffer, size);
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <send_debug_messages+0x50>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	1dbb      	adds	r3, r7, #6
 8005c02:	881a      	ldrh	r2, [r3, #0]
 8005c04:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <send_debug_messages+0x54>)
 8005c06:	0019      	movs	r1, r3
 8005c08:	f7ff ffd6 	bl	8005bb8 <transmit>
		need_logging = false;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <send_debug_messages+0x4c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
		last_trasmited_debug_buffer += size;
 8005c12:	4b08      	ldr	r3, [pc, #32]	@ (8005c34 <send_debug_messages+0x58>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	1dbb      	adds	r3, r7, #6
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	18d2      	adds	r2, r2, r3
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <send_debug_messages+0x58>)
 8005c1e:	601a      	str	r2, [r3, #0]
	}
}
 8005c20:	46c0      	nop			@ (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b003      	add	sp, #12
 8005c26:	bd90      	pop	{r4, r7, pc}
 8005c28:	2000005c 	.word	0x2000005c
 8005c2c:	2000006c 	.word	0x2000006c
 8005c30:	200004ac 	.word	0x200004ac
 8005c34:	200024ac 	.word	0x200024ac

08005c38 <send_all_debug_buffer_blocking>:

void send_all_debug_buffer_blocking() {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005c3e:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <send_all_debug_buffer_blocking+0x2c>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <send_all_debug_buffer_blocking+0x30>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(debug_uart, debug_buffer, size, 100);
 8005c4a:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <send_all_debug_buffer_blocking+0x34>)
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	4907      	ldr	r1, [pc, #28]	@ (8005c70 <send_all_debug_buffer_blocking+0x38>)
 8005c54:	2364      	movs	r3, #100	@ 0x64
 8005c56:	f006 fc77 	bl	800c548 <HAL_UART_Transmit>
}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b002      	add	sp, #8
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	20000058 	.word	0x20000058
 8005c68:	200024ac 	.word	0x200024ac
 8005c6c:	2000006c 	.word	0x2000006c
 8005c70:	200004ac 	.word	0x200004ac

08005c74 <_Z41__static_initialization_and_destruction_0ii>:
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d107      	bne.n	8005c94 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	4a05      	ldr	r2, [pc, #20]	@ (8005c9c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d103      	bne.n	8005c94 <_Z41__static_initialization_and_destruction_0ii+0x20>
uint8_t * last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005c8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b04      	ldr	r3, [pc, #16]	@ (8005ca4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8005c92:	601a      	str	r2, [r3, #0]
}
 8005c94:	46c0      	nop			@ (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b002      	add	sp, #8
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	0000ffff 	.word	0x0000ffff
 8005ca0:	20000058 	.word	0x20000058
 8005ca4:	200024ac 	.word	0x200024ac

08005ca8 <_GLOBAL__sub_I_receive_buffer>:
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	4b03      	ldr	r3, [pc, #12]	@ (8005cbc <_GLOBAL__sub_I_receive_buffer+0x14>)
 8005cae:	0019      	movs	r1, r3
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7ff ffdf 	bl	8005c74 <_Z41__static_initialization_and_destruction_0ii>
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	0000ffff 	.word	0x0000ffff

08005cc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b08b      	sub	sp, #44	@ 0x2c
 8005cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cc6:	2414      	movs	r4, #20
 8005cc8:	193b      	adds	r3, r7, r4
 8005cca:	0018      	movs	r0, r3
 8005ccc:	2314      	movs	r3, #20
 8005cce:	001a      	movs	r2, r3
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	f00d f8b9 	bl	8012e48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cd6:	4bad      	ldr	r3, [pc, #692]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cda:	4bac      	ldr	r3, [pc, #688]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005cdc:	2104      	movs	r1, #4
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ce2:	4baa      	ldr	r3, [pc, #680]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	4013      	ands	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005cee:	4ba7      	ldr	r3, [pc, #668]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf2:	4ba6      	ldr	r3, [pc, #664]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005cf4:	2120      	movs	r1, #32
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005cfa:	4ba4      	ldr	r3, [pc, #656]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfe:	2220      	movs	r2, #32
 8005d00:	4013      	ands	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d06:	4ba1      	ldr	r3, [pc, #644]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d0a:	4ba0      	ldr	r3, [pc, #640]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d12:	4b9e      	ldr	r3, [pc, #632]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	2201      	movs	r2, #1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d1e:	4b9b      	ldr	r3, [pc, #620]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d22:	4b9a      	ldr	r3, [pc, #616]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d24:	2102      	movs	r1, #2
 8005d26:	430a      	orrs	r2, r1
 8005d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d2a:	4b98      	ldr	r3, [pc, #608]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	2202      	movs	r2, #2
 8005d30:	4013      	ands	r3, r2
 8005d32:	607b      	str	r3, [r7, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d36:	4b95      	ldr	r3, [pc, #596]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d3a:	4b94      	ldr	r3, [pc, #592]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d3c:	2108      	movs	r1, #8
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d42:	4b92      	ldr	r3, [pc, #584]	@ (8005f8c <MX_GPIO_Init+0x2cc>)
 8005d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d46:	2208      	movs	r2, #8
 8005d48:	4013      	ands	r3, r2
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GAIN1_Pin|GAIN0_Pin, GPIO_PIN_SET);
 8005d4e:	4b90      	ldr	r3, [pc, #576]	@ (8005f90 <MX_GPIO_Init+0x2d0>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	2103      	movs	r1, #3
 8005d54:	0018      	movs	r0, r3
 8005d56:	f002 fcc0 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|TEMP_Pin|FLASH_NSS_Pin|DBG_GPIO1_Pin, GPIO_PIN_RESET);
 8005d5a:	23a3      	movs	r3, #163	@ 0xa3
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	488c      	ldr	r0, [pc, #560]	@ (8005f90 <MX_GPIO_Init+0x2d0>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	0019      	movs	r1, r3
 8005d64:	f002 fcb9 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCLK_Pin|SPEED_Pin|FLASH_HOLD_Pin, GPIO_PIN_RESET);
 8005d68:	498a      	ldr	r1, [pc, #552]	@ (8005f94 <MX_GPIO_Init+0x2d4>)
 8005d6a:	23a0      	movs	r3, #160	@ 0xa0
 8005d6c:	05db      	lsls	r3, r3, #23
 8005d6e:	2200      	movs	r2, #0
 8005d70:	0018      	movs	r0, r3
 8005d72:	f002 fcb2 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDWN_GPIO_Port, PDWN_Pin, GPIO_PIN_SET);
 8005d76:	23a0      	movs	r3, #160	@ 0xa0
 8005d78:	05db      	lsls	r3, r3, #23
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f002 fcab 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	015b      	lsls	r3, r3, #5
 8005d88:	4883      	ldr	r0, [pc, #524]	@ (8005f98 <MX_GPIO_Init+0x2d8>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	f002 fca4 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_WP_Pin|DBG_GPIO2_Pin|LED_ERROR_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8005d92:	4982      	ldr	r1, [pc, #520]	@ (8005f9c <MX_GPIO_Init+0x2dc>)
 8005d94:	4b82      	ldr	r3, [pc, #520]	@ (8005fa0 <MX_GPIO_Init+0x2e0>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f002 fc9e 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GAIN1_Pin|GAIN0_Pin;
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	2203      	movs	r2, #3
 8005da2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	2201      	movs	r2, #1
 8005da8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005daa:	193b      	adds	r3, r7, r4
 8005dac:	2201      	movs	r2, #1
 8005dae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db0:	193b      	adds	r3, r7, r4
 8005db2:	2200      	movs	r2, #0
 8005db4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005db6:	193b      	adds	r3, r7, r4
 8005db8:	4a75      	ldr	r2, [pc, #468]	@ (8005f90 <MX_GPIO_Init+0x2d0>)
 8005dba:	0019      	movs	r1, r3
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	f002 fb0b 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A0_Pin|TEMP_Pin;
 8005dc2:	193b      	adds	r3, r7, r4
 8005dc4:	220c      	movs	r2, #12
 8005dc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	2201      	movs	r2, #1
 8005dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005dce:	193b      	adds	r3, r7, r4
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd4:	193b      	adds	r3, r7, r4
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dda:	193b      	adds	r3, r7, r4
 8005ddc:	4a6c      	ldr	r2, [pc, #432]	@ (8005f90 <MX_GPIO_Init+0x2d0>)
 8005dde:	0019      	movs	r1, r3
 8005de0:	0010      	movs	r0, r2
 8005de2:	f002 faf9 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY_DROUT_Pin;
 8005de6:	193b      	adds	r3, r7, r4
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dec:	193b      	adds	r3, r7, r4
 8005dee:	2200      	movs	r2, #0
 8005df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df2:	193b      	adds	r3, r7, r4
 8005df4:	2200      	movs	r2, #0
 8005df6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DRDY_DROUT_GPIO_Port, &GPIO_InitStruct);
 8005df8:	193a      	adds	r2, r7, r4
 8005dfa:	23a0      	movs	r3, #160	@ 0xa0
 8005dfc:	05db      	lsls	r3, r3, #23
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f002 fae9 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SCLK_Pin|SPEED_Pin;
 8005e06:	193b      	adds	r3, r7, r4
 8005e08:	220a      	movs	r2, #10
 8005e0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e0c:	193b      	adds	r3, r7, r4
 8005e0e:	2201      	movs	r2, #1
 8005e10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e12:	193b      	adds	r3, r7, r4
 8005e14:	2202      	movs	r2, #2
 8005e16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e18:	193b      	adds	r3, r7, r4
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e1e:	193a      	adds	r2, r7, r4
 8005e20:	23a0      	movs	r3, #160	@ 0xa0
 8005e22:	05db      	lsls	r3, r3, #23
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f002 fad6 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDWN_Pin;
 8005e2c:	193b      	adds	r3, r7, r4
 8005e2e:	2204      	movs	r2, #4
 8005e30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e32:	193b      	adds	r3, r7, r4
 8005e34:	2201      	movs	r2, #1
 8005e36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e38:	193b      	adds	r3, r7, r4
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e3e:	193b      	adds	r3, r7, r4
 8005e40:	2200      	movs	r2, #0
 8005e42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PDWN_GPIO_Port, &GPIO_InitStruct);
 8005e44:	193a      	adds	r2, r7, r4
 8005e46:	23a0      	movs	r3, #160	@ 0xa0
 8005e48:	05db      	lsls	r3, r3, #23
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f002 fac3 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_Z_SELECT_Pin;
 8005e52:	193b      	adds	r3, r7, r4
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e58:	193b      	adds	r3, r7, r4
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e5e:	193b      	adds	r3, r7, r4
 8005e60:	2201      	movs	r2, #1
 8005e62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(X_Z_SELECT_GPIO_Port, &GPIO_InitStruct);
 8005e64:	193b      	adds	r3, r7, r4
 8005e66:	4a4c      	ldr	r2, [pc, #304]	@ (8005f98 <MX_GPIO_Init+0x2d8>)
 8005e68:	0019      	movs	r1, r3
 8005e6a:	0010      	movs	r0, r2
 8005e6c:	f002 fab4 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 8005e70:	0021      	movs	r1, r4
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	2280      	movs	r2, #128	@ 0x80
 8005e76:	0152      	lsls	r2, r2, #5
 8005e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e7a:	000c      	movs	r4, r1
 8005e7c:	193b      	adds	r3, r7, r4
 8005e7e:	2201      	movs	r2, #1
 8005e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e82:	193b      	adds	r3, r7, r4
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e88:	193b      	adds	r3, r7, r4
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 8005e8e:	193b      	adds	r3, r7, r4
 8005e90:	4a41      	ldr	r2, [pc, #260]	@ (8005f98 <MX_GPIO_Init+0x2d8>)
 8005e92:	0019      	movs	r1, r3
 8005e94:	0010      	movs	r0, r2
 8005e96:	f002 fa9f 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin;
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	2280      	movs	r2, #128	@ 0x80
 8005e9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ea0:	193b      	adds	r3, r7, r4
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea6:	193b      	adds	r3, r7, r4
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eac:	193b      	adds	r3, r7, r4
 8005eae:	2200      	movs	r2, #0
 8005eb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_NSS_GPIO_Port, &GPIO_InitStruct);
 8005eb2:	193b      	adds	r3, r7, r4
 8005eb4:	4a36      	ldr	r2, [pc, #216]	@ (8005f90 <MX_GPIO_Init+0x2d0>)
 8005eb6:	0019      	movs	r1, r3
 8005eb8:	0010      	movs	r0, r2
 8005eba:	f002 fa8d 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 8005ebe:	0021      	movs	r1, r4
 8005ec0:	187b      	adds	r3, r7, r1
 8005ec2:	2283      	movs	r2, #131	@ 0x83
 8005ec4:	0092      	lsls	r2, r2, #2
 8005ec6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ec8:	000c      	movs	r4, r1
 8005eca:	193b      	adds	r3, r7, r4
 8005ecc:	2201      	movs	r2, #1
 8005ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed0:	193b      	adds	r3, r7, r4
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed6:	193b      	adds	r3, r7, r4
 8005ed8:	2200      	movs	r2, #0
 8005eda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005edc:	193b      	adds	r3, r7, r4
 8005ede:	4a30      	ldr	r2, [pc, #192]	@ (8005fa0 <MX_GPIO_Init+0x2e0>)
 8005ee0:	0019      	movs	r1, r3
 8005ee2:	0010      	movs	r0, r2
 8005ee4:	f002 fa78 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_HOLD_Pin;
 8005ee8:	0021      	movs	r1, r4
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	2280      	movs	r2, #128	@ 0x80
 8005eee:	00d2      	lsls	r2, r2, #3
 8005ef0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ef2:	000c      	movs	r4, r1
 8005ef4:	193b      	adds	r3, r7, r4
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efa:	193b      	adds	r3, r7, r4
 8005efc:	2200      	movs	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f00:	193b      	adds	r3, r7, r4
 8005f02:	2200      	movs	r2, #0
 8005f04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_HOLD_GPIO_Port, &GPIO_InitStruct);
 8005f06:	193a      	adds	r2, r7, r4
 8005f08:	23a0      	movs	r3, #160	@ 0xa0
 8005f0a:	05db      	lsls	r3, r3, #23
 8005f0c:	0011      	movs	r1, r2
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f002 fa62 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO1_Pin;
 8005f14:	0021      	movs	r1, r4
 8005f16:	187b      	adds	r3, r7, r1
 8005f18:	2280      	movs	r2, #128	@ 0x80
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f1e:	000c      	movs	r4, r1
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	2201      	movs	r2, #1
 8005f24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	2200      	movs	r2, #0
 8005f2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2c:	193b      	adds	r3, r7, r4
 8005f2e:	2203      	movs	r2, #3
 8005f30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8005f32:	193b      	adds	r3, r7, r4
 8005f34:	4a16      	ldr	r2, [pc, #88]	@ (8005f90 <MX_GPIO_Init+0x2d0>)
 8005f36:	0019      	movs	r1, r3
 8005f38:	0010      	movs	r0, r2
 8005f3a:	f002 fa4d 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_pin_3_Pin;
 8005f3e:	193b      	adds	r3, r7, r4
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f44:	193b      	adds	r3, r7, r4
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f4a:	193b      	adds	r3, r7, r4
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Test_pin_3_GPIO_Port, &GPIO_InitStruct);
 8005f50:	193b      	adds	r3, r7, r4
 8005f52:	4a13      	ldr	r2, [pc, #76]	@ (8005fa0 <MX_GPIO_Init+0x2e0>)
 8005f54:	0019      	movs	r1, r3
 8005f56:	0010      	movs	r0, r2
 8005f58:	f002 fa3e 	bl	80083d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO2_Pin;
 8005f5c:	0021      	movs	r1, r4
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	2202      	movs	r2, #2
 8005f62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	2201      	movs	r2, #1
 8005f68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6a:	187b      	adds	r3, r7, r1
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	2203      	movs	r2, #3
 8005f74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <MX_GPIO_Init+0x2e0>)
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	0010      	movs	r0, r2
 8005f7e:	f002 fa2b 	bl	80083d8 <HAL_GPIO_Init>

}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b00b      	add	sp, #44	@ 0x2c
 8005f88:	bd90      	pop	{r4, r7, pc}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	50000800 	.word	0x50000800
 8005f94:	0000040a 	.word	0x0000040a
 8005f98:	50000400 	.word	0x50000400
 8005f9c:	0000020e 	.word	0x0000020e
 8005fa0:	50000c00 	.word	0x50000c00

08005fa4 <hdc1080_init>:
#include "sensors_state.h"
#include "debug.h"

I2C_HandleTypeDef* hi2c_hdc1080;

bool hdc1080_init(I2C_HandleTypeDef* _hi2c_hdc1080, Temp_Reso Temperature_Resolution_x_bit, Humi_Reso Humidity_Resolution_x_bit)	{
 8005fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa6:	b089      	sub	sp, #36	@ 0x24
 8005fa8:	af04      	add	r7, sp, #16
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	0008      	movs	r0, r1
 8005fae:	0011      	movs	r1, r2
 8005fb0:	1cfb      	adds	r3, r7, #3
 8005fb2:	1c02      	adds	r2, r0, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	1cbb      	adds	r3, r7, #2
 8005fb8:	1c0a      	adds	r2, r1, #0
 8005fba:	701a      	strb	r2, [r3, #0]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value = 0x1000;
 8005fbc:	210e      	movs	r1, #14
 8005fbe:	187b      	adds	r3, r7, r1
 8005fc0:	2280      	movs	r2, #128	@ 0x80
 8005fc2:	0152      	lsls	r2, r2, #5
 8005fc4:	801a      	strh	r2, [r3, #0]
	uint8_t data_send[2];
	hi2c_hdc1080 = _hi2c_hdc1080;
 8005fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8006084 <hdc1080_init+0xe0>)
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit) {
 8005fcc:	1cfb      	adds	r3, r7, #3
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d106      	bne.n	8005fe2 <hdc1080_init+0x3e>
		config_reg_value |= (1 << 10); //11 bit
 8005fd4:	187b      	adds	r3, r7, r1
 8005fd6:	187a      	adds	r2, r7, r1
 8005fd8:	8812      	ldrh	r2, [r2, #0]
 8005fda:	2180      	movs	r1, #128	@ 0x80
 8005fdc:	00c9      	lsls	r1, r1, #3
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	801a      	strh	r2, [r3, #0]
	}

	switch(Humidity_Resolution_x_bit) {
 8005fe2:	1cbb      	adds	r3, r7, #2
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d00d      	beq.n	8006006 <hdc1080_init+0x62>
 8005fea:	dc16      	bgt.n	800601a <hdc1080_init+0x76>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d013      	beq.n	8006018 <hdc1080_init+0x74>
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d112      	bne.n	800601a <hdc1080_init+0x76>
		case Humidity_Resolution_11_bit:
			config_reg_value |= (1 << 8);
 8005ff4:	220e      	movs	r2, #14
 8005ff6:	18bb      	adds	r3, r7, r2
 8005ff8:	18ba      	adds	r2, r7, r2
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	2180      	movs	r1, #128	@ 0x80
 8005ffe:	0049      	lsls	r1, r1, #1
 8006000:	430a      	orrs	r2, r1
 8006002:	801a      	strh	r2, [r3, #0]
			break;
 8006004:	e009      	b.n	800601a <hdc1080_init+0x76>
		case Humidity_Resolution_8_bit:
			config_reg_value |= (1 << 9);
 8006006:	220e      	movs	r2, #14
 8006008:	18bb      	adds	r3, r7, r2
 800600a:	18ba      	adds	r2, r7, r2
 800600c:	8812      	ldrh	r2, [r2, #0]
 800600e:	2180      	movs	r1, #128	@ 0x80
 8006010:	0089      	lsls	r1, r1, #2
 8006012:	430a      	orrs	r2, r1
 8006014:	801a      	strh	r2, [r3, #0]
			break;
 8006016:	e000      	b.n	800601a <hdc1080_init+0x76>
		case Humidity_Resolution_14_bit:
			break;
 8006018:	46c0      	nop			@ (mov r8, r8)
	}

	data_send[0] = (config_reg_value >> 8);
 800601a:	210e      	movs	r1, #14
 800601c:	187b      	adds	r3, r7, r1
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	b29b      	uxth	r3, r3
 8006024:	b2da      	uxtb	r2, r3
 8006026:	2508      	movs	r5, #8
 8006028:	197b      	adds	r3, r7, r5
 800602a:	701a      	strb	r2, [r3, #0]
	data_send[1] = (config_reg_value & 0x00ff);
 800602c:	187b      	adds	r3, r7, r1
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	197b      	adds	r3, r7, r5
 8006034:	705a      	strb	r2, [r3, #1]


	HAL_StatusTypeDef status = HAL_OK;
 8006036:	260d      	movs	r6, #13
 8006038:	19bb      	adds	r3, r7, r6
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(hi2c_hdc1080, HDC_1080_ADDR, 10, 100);
 800603e:	4b11      	ldr	r3, [pc, #68]	@ (8006084 <hdc1080_init+0xe0>)
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	19bc      	adds	r4, r7, r6
 8006044:	2364      	movs	r3, #100	@ 0x64
 8006046:	220a      	movs	r2, #10
 8006048:	2180      	movs	r1, #128	@ 0x80
 800604a:	f003 f8b9 	bl	80091c0 <HAL_I2C_IsDeviceReady>
 800604e:	0003      	movs	r3, r0
 8006050:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) {
 8006052:	19bb      	adds	r3, r7, r6
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10f      	bne.n	800607a <hdc1080_init+0xd6>
		HAL_I2C_Mem_Write(hi2c_hdc1080, HDC_1080_ADDR, Configuration_register_add, I2C_MEMADD_SIZE_8BIT, data_send, 2, 1000);
 800605a:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <hdc1080_init+0xe0>)
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	23fa      	movs	r3, #250	@ 0xfa
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	9302      	str	r3, [sp, #8]
 8006064:	2302      	movs	r3, #2
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	197b      	adds	r3, r7, r5
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	2301      	movs	r3, #1
 800606e:	2202      	movs	r2, #2
 8006070:	2180      	movs	r1, #128	@ 0x80
 8006072:	f002 fe43 	bl	8008cfc <HAL_I2C_Mem_Write>
		return true;
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <hdc1080_init+0xd8>
	} else {
		return false;
 800607a:	2300      	movs	r3, #0
	}
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b005      	add	sp, #20
 8006082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006084:	200024b0 	.word	0x200024b0

08006088 <hdc1080_start_measurement>:


int8_t hdc1080_start_measurement(float * temperature, float * humidity)	{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b089      	sub	sp, #36	@ 0x24
 800608c:	af02      	add	r7, sp, #8
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]

	uint8_t receive_data[4];
	uint16_t temp_x, humi_x;
	uint8_t send_data = Temperature_register_add;
 8006092:	210f      	movs	r1, #15
 8006094:	187b      	adds	r3, r7, r1
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(hi2c_hdc1080, HDC_1080_ADDR, &send_data, 1, 100);
 800609a:	4b3a      	ldr	r3, [pc, #232]	@ (8006184 <hdc1080_start_measurement+0xfc>)
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	187a      	adds	r2, r7, r1
 80060a0:	2364      	movs	r3, #100	@ 0x64
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2301      	movs	r3, #1
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	f002 fbf6 	bl	8008898 <HAL_I2C_Master_Transmit>

 	vTaskDelay(20);
 80060ac:	2014      	movs	r0, #20
 80060ae:	f009 ffd9 	bl	8010064 <vTaskDelay>

	/* Read temperature and humidity */
 	HAL_I2C_Master_Receive(hi2c_hdc1080, HDC_1080_ADDR, receive_data, 4, 100);
 80060b2:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <hdc1080_start_measurement+0xfc>)
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	2410      	movs	r4, #16
 80060b8:	193a      	adds	r2, r7, r4
 80060ba:	2364      	movs	r3, #100	@ 0x64
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2304      	movs	r3, #4
 80060c0:	2180      	movs	r1, #128	@ 0x80
 80060c2:	f002 fd13 	bl	8008aec <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0] << 8) | receive_data[1]);
 80060c6:	0021      	movs	r1, r4
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	b21a      	sxth	r2, r3
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	b21b      	sxth	r3, r3
 80060d6:	4313      	orrs	r3, r2
 80060d8:	b21a      	sxth	r2, r3
 80060da:	2016      	movs	r0, #22
 80060dc:	183b      	adds	r3, r7, r0
 80060de:	801a      	strh	r2, [r3, #0]
	humi_x =((receive_data[2] << 8) | receive_data[3]);
 80060e0:	187b      	adds	r3, r7, r1
 80060e2:	789b      	ldrb	r3, [r3, #2]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	187b      	adds	r3, r7, r1
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	b21b      	sxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b21a      	sxth	r2, r3
 80060f2:	2414      	movs	r4, #20
 80060f4:	193b      	adds	r3, r7, r4
 80060f6:	801a      	strh	r2, [r3, #0]

	*temperature=((temp_x / 65536.0) * 165.0) - 40.0;
 80060f8:	183b      	adds	r3, r7, r0
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7fd f8ff 	bl	8003300 <__aeabi_i2d>
 8006102:	2200      	movs	r2, #0
 8006104:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <hdc1080_start_measurement+0x100>)
 8006106:	f7fb fdf5 	bl	8001cf4 <__aeabi_ddiv>
 800610a:	0002      	movs	r2, r0
 800610c:	000b      	movs	r3, r1
 800610e:	0010      	movs	r0, r2
 8006110:	0019      	movs	r1, r3
 8006112:	2200      	movs	r2, #0
 8006114:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <hdc1080_start_measurement+0x104>)
 8006116:	f7fc fa31 	bl	800257c <__aeabi_dmul>
 800611a:	0002      	movs	r2, r0
 800611c:	000b      	movs	r3, r1
 800611e:	0010      	movs	r0, r2
 8006120:	0019      	movs	r1, r3
 8006122:	2200      	movs	r2, #0
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <hdc1080_start_measurement+0x108>)
 8006126:	f7fc fcf1 	bl	8002b0c <__aeabi_dsub>
 800612a:	0002      	movs	r2, r0
 800612c:	000b      	movs	r3, r1
 800612e:	0010      	movs	r0, r2
 8006130:	0019      	movs	r1, r3
 8006132:	f7fd f97f 	bl	8003434 <__aeabi_d2f>
 8006136:	1c02      	adds	r2, r0, #0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	*humidity=(uint8_t)((humi_x / 65536.0) * 100.0);
 800613c:	193b      	adds	r3, r7, r4
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	0018      	movs	r0, r3
 8006142:	f7fd f8dd 	bl	8003300 <__aeabi_i2d>
 8006146:	2200      	movs	r2, #0
 8006148:	4b0f      	ldr	r3, [pc, #60]	@ (8006188 <hdc1080_start_measurement+0x100>)
 800614a:	f7fb fdd3 	bl	8001cf4 <__aeabi_ddiv>
 800614e:	0002      	movs	r2, r0
 8006150:	000b      	movs	r3, r1
 8006152:	0010      	movs	r0, r2
 8006154:	0019      	movs	r1, r3
 8006156:	2200      	movs	r2, #0
 8006158:	4b0e      	ldr	r3, [pc, #56]	@ (8006194 <hdc1080_start_measurement+0x10c>)
 800615a:	f7fc fa0f 	bl	800257c <__aeabi_dmul>
 800615e:	0002      	movs	r2, r0
 8006160:	000b      	movs	r3, r1
 8006162:	0010      	movs	r0, r2
 8006164:	0019      	movs	r1, r3
 8006166:	f7fa fa11 	bl	800058c <__aeabi_d2uiz>
 800616a:	0003      	movs	r3, r0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	0018      	movs	r0, r3
 8006170:	f7fb fa1a 	bl	80015a8 <__aeabi_ui2f>
 8006174:	1c02      	adds	r2, r0, #0
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	601a      	str	r2, [r3, #0]

	return true;
 800617a:	2301      	movs	r3, #1
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b007      	add	sp, #28
 8006182:	bd90      	pop	{r4, r7, pc}
 8006184:	200024b0 	.word	0x200024b0
 8006188:	40f00000 	.word	0x40f00000
 800618c:	4064a000 	.word	0x4064a000
 8006190:	40440000 	.word	0x40440000
 8006194:	40590000 	.word	0x40590000

08006198 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800619c:	4b1b      	ldr	r3, [pc, #108]	@ (800620c <MX_I2C2_Init+0x74>)
 800619e:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <MX_I2C2_Init+0x78>)
 80061a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80061a2:	4b1a      	ldr	r3, [pc, #104]	@ (800620c <MX_I2C2_Init+0x74>)
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <MX_I2C2_Init+0x7c>)
 80061a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80061a8:	4b18      	ldr	r3, [pc, #96]	@ (800620c <MX_I2C2_Init+0x74>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061ae:	4b17      	ldr	r3, [pc, #92]	@ (800620c <MX_I2C2_Init+0x74>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061b4:	4b15      	ldr	r3, [pc, #84]	@ (800620c <MX_I2C2_Init+0x74>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80061ba:	4b14      	ldr	r3, [pc, #80]	@ (800620c <MX_I2C2_Init+0x74>)
 80061bc:	2200      	movs	r2, #0
 80061be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80061c0:	4b12      	ldr	r3, [pc, #72]	@ (800620c <MX_I2C2_Init+0x74>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061c6:	4b11      	ldr	r3, [pc, #68]	@ (800620c <MX_I2C2_Init+0x74>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <MX_I2C2_Init+0x74>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80061d2:	4b0e      	ldr	r3, [pc, #56]	@ (800620c <MX_I2C2_Init+0x74>)
 80061d4:	0018      	movs	r0, r3
 80061d6:	f002 fab9 	bl	800874c <HAL_I2C_Init>
 80061da:	1e03      	subs	r3, r0, #0
 80061dc:	d001      	beq.n	80061e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80061de:	f000 fda5 	bl	8006d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80061e2:	4b0a      	ldr	r3, [pc, #40]	@ (800620c <MX_I2C2_Init+0x74>)
 80061e4:	2100      	movs	r1, #0
 80061e6:	0018      	movs	r0, r3
 80061e8:	f003 fc80 	bl	8009aec <HAL_I2CEx_ConfigAnalogFilter>
 80061ec:	1e03      	subs	r3, r0, #0
 80061ee:	d001      	beq.n	80061f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80061f0:	f000 fd9c 	bl	8006d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80061f4:	4b05      	ldr	r3, [pc, #20]	@ (800620c <MX_I2C2_Init+0x74>)
 80061f6:	2100      	movs	r1, #0
 80061f8:	0018      	movs	r0, r3
 80061fa:	f003 fcc3 	bl	8009b84 <HAL_I2CEx_ConfigDigitalFilter>
 80061fe:	1e03      	subs	r3, r0, #0
 8006200:	d001      	beq.n	8006206 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006202:	f000 fd93 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	200024b4 	.word	0x200024b4
 8006210:	40005800 	.word	0x40005800
 8006214:	10707dbc 	.word	0x10707dbc

08006218 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b08b      	sub	sp, #44	@ 0x2c
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006220:	2414      	movs	r4, #20
 8006222:	193b      	adds	r3, r7, r4
 8006224:	0018      	movs	r0, r3
 8006226:	2314      	movs	r3, #20
 8006228:	001a      	movs	r2, r3
 800622a:	2100      	movs	r1, #0
 800622c:	f00c fe0c 	bl	8012e48 <memset>
  if(i2cHandle->Instance==I2C2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1b      	ldr	r2, [pc, #108]	@ (80062a4 <HAL_I2C_MspInit+0x8c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d130      	bne.n	800629c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800623a:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <HAL_I2C_MspInit+0x90>)
 800623c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <HAL_I2C_MspInit+0x90>)
 8006240:	2102      	movs	r1, #2
 8006242:	430a      	orrs	r2, r1
 8006244:	635a      	str	r2, [r3, #52]	@ 0x34
 8006246:	4b18      	ldr	r3, [pc, #96]	@ (80062a8 <HAL_I2C_MspInit+0x90>)
 8006248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624a:	2202      	movs	r2, #2
 800624c:	4013      	ands	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C2_SCL_Pin|SENSOR_I2C2_SDA_Pin;
 8006252:	193b      	adds	r3, r7, r4
 8006254:	22c0      	movs	r2, #192	@ 0xc0
 8006256:	01d2      	lsls	r2, r2, #7
 8006258:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800625a:	0021      	movs	r1, r4
 800625c:	187b      	adds	r3, r7, r1
 800625e:	2212      	movs	r2, #18
 8006260:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006262:	187b      	adds	r3, r7, r1
 8006264:	2200      	movs	r2, #0
 8006266:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006268:	187b      	adds	r3, r7, r1
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800626e:	187b      	adds	r3, r7, r1
 8006270:	2206      	movs	r2, #6
 8006272:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006274:	187b      	adds	r3, r7, r1
 8006276:	4a0d      	ldr	r2, [pc, #52]	@ (80062ac <HAL_I2C_MspInit+0x94>)
 8006278:	0019      	movs	r1, r3
 800627a:	0010      	movs	r0, r2
 800627c:	f002 f8ac 	bl	80083d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006280:	4b09      	ldr	r3, [pc, #36]	@ (80062a8 <HAL_I2C_MspInit+0x90>)
 8006282:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006284:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <HAL_I2C_MspInit+0x90>)
 8006286:	2180      	movs	r1, #128	@ 0x80
 8006288:	03c9      	lsls	r1, r1, #15
 800628a:	430a      	orrs	r2, r1
 800628c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800628e:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <HAL_I2C_MspInit+0x90>)
 8006290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006292:	2380      	movs	r3, #128	@ 0x80
 8006294:	03db      	lsls	r3, r3, #15
 8006296:	4013      	ands	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800629c:	46c0      	nop			@ (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b00b      	add	sp, #44	@ 0x2c
 80062a2:	bd90      	pop	{r4, r7, pc}
 80062a4:	40005800 	.word	0x40005800
 80062a8:	40021000 	.word	0x40021000
 80062ac:	50000400 	.word	0x50000400

080062b0 <DATA_RATE_TO_TIME>:
	}

	return range_value;
}

float DATA_RATE_TO_TIME(data_rate_t data_rate) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	0002      	movs	r2, r0
 80062b8:	1dfb      	adds	r3, r7, #7
 80062ba:	701a      	strb	r2, [r3, #0]
	float integral_factor = 0;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

	switch(data_rate) {
 80062c0:	1dfb      	adds	r3, r7, #7
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d008      	beq.n	80062da <DATA_RATE_TO_TIME+0x2a>
 80062c8:	dc14      	bgt.n	80062f4 <DATA_RATE_TO_TIME+0x44>
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d00f      	beq.n	80062ee <DATA_RATE_TO_TIME+0x3e>
 80062ce:	dc11      	bgt.n	80062f4 <DATA_RATE_TO_TIME+0x44>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <DATA_RATE_TO_TIME+0x38>
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d004      	beq.n	80062e2 <DATA_RATE_TO_TIME+0x32>
 80062d8:	e00c      	b.n	80062f4 <DATA_RATE_TO_TIME+0x44>
	case DATA_RATE_1000:
		integral_factor = 1;
 80062da:	23fe      	movs	r3, #254	@ 0xfe
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	60fb      	str	r3, [r7, #12]
		break;
 80062e0:	e008      	b.n	80062f4 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_100:
		integral_factor = 10;
 80062e2:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <DATA_RATE_TO_TIME+0x50>)
 80062e4:	60fb      	str	r3, [r7, #12]
		break;
 80062e6:	e005      	b.n	80062f4 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_50:
		integral_factor = 20;
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <DATA_RATE_TO_TIME+0x54>)
 80062ea:	60fb      	str	r3, [r7, #12]
		break;
 80062ec:	e002      	b.n	80062f4 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_400:
		integral_factor = 2.5;
 80062ee:	4b06      	ldr	r3, [pc, #24]	@ (8006308 <DATA_RATE_TO_TIME+0x58>)
 80062f0:	60fb      	str	r3, [r7, #12]
		break;
 80062f2:	46c0      	nop			@ (mov r8, r8)
	}

	return integral_factor;
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	1c18      	adds	r0, r3, #0
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b004      	add	sp, #16
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	41200000 	.word	0x41200000
 8006304:	41a00000 	.word	0x41a00000
 8006308:	40200000 	.word	0x40200000

0800630c <_Z11chip_selectP11lis331dlh_t>:

void chip_select(lis331dlh_t * config) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_RESET);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6898      	ldr	r0, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	899b      	ldrh	r3, [r3, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	0019      	movs	r1, r3
 8006320:	f002 f9db 	bl	80086da <HAL_GPIO_WritePin>
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <_Z13chip_deselectP11lis331dlh_t>:


void chip_deselect(lis331dlh_t * config) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_SET);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6898      	ldr	r0, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	899b      	ldrh	r3, [r3, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	0019      	movs	r1, r3
 8006340:	f002 f9cb 	bl	80086da <HAL_GPIO_WritePin>
}
 8006344:	46c0      	nop			@ (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b002      	add	sp, #8
 800634a:	bd80      	pop	{r7, pc}

0800634c <_Z13read_registerP11lis331dlh_thPhh>:


void read_register(
	lis331dlh_t * config, uint8_t address,
	uint8_t * for_receive, uint8_t receive_length = 1
) {
 800634c:	b5b0      	push	{r4, r5, r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	0008      	movs	r0, r1
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	0019      	movs	r1, r3
 800635a:	240b      	movs	r4, #11
 800635c:	193b      	adds	r3, r7, r4
 800635e:	1c02      	adds	r2, r0, #0
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	250a      	movs	r5, #10
 8006364:	197b      	adds	r3, r7, r5
 8006366:	1c0a      	adds	r2, r1, #0
 8006368:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d020      	beq.n	80063b4 <_Z13read_registerP11lis331dlh_thPhh+0x68>
		chip_select(config);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f7ff ffc9 	bl	800630c <_Z11chip_selectP11lis331dlh_t>

		address |= 0xC0;
 800637a:	193b      	adds	r3, r7, r4
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2240      	movs	r2, #64	@ 0x40
 8006380:	4252      	negs	r2, r2
 8006382:	4313      	orrs	r3, r2
 8006384:	b2da      	uxtb	r2, r3
 8006386:	193b      	adds	r3, r7, r4
 8006388:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	1939      	adds	r1, r7, r4
 8006390:	2364      	movs	r3, #100	@ 0x64
 8006392:	2201      	movs	r2, #1
 8006394:	f004 fdb8 	bl	800af08 <HAL_SPI_Transmit>
		HAL_SPI_Receive(config->spi, for_receive, receive_length, 100);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	197b      	adds	r3, r7, r5
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	2364      	movs	r3, #100	@ 0x64
 80063a6:	f004 ff0f 	bl	800b1c8 <HAL_SPI_Receive>

		chip_deselect(config);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	0018      	movs	r0, r3
 80063ae:	f7ff ffbd 	bl	800632c <_Z13chip_deselectP11lis331dlh_t>
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
//			HAL_Delay(1);
		}
	}
}
 80063b2:	e031      	b.n	8006418 <_Z13read_registerP11lis331dlh_thPhh+0xcc>
		for (uint8_t i = 0; i < receive_length; ++i) {
 80063b4:	2317      	movs	r3, #23
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e024      	b.n	8006408 <_Z13read_registerP11lis331dlh_thPhh+0xbc>
			uint8_t current = address++;
 80063be:	200b      	movs	r0, #11
 80063c0:	183b      	adds	r3, r7, r0
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	b2d1      	uxtb	r1, r2
 80063c8:	183a      	adds	r2, r7, r0
 80063ca:	7011      	strb	r1, [r2, #0]
 80063cc:	2116      	movs	r1, #22
 80063ce:	187a      	adds	r2, r7, r1
 80063d0:	7013      	strb	r3, [r2, #0]
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6858      	ldr	r0, [r3, #4]
 80063d6:	187a      	adds	r2, r7, r1
 80063d8:	2332      	movs	r3, #50	@ 0x32
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	2301      	movs	r3, #1
 80063de:	2132      	movs	r1, #50	@ 0x32
 80063e0:	f002 fa5a 	bl	8008898 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6858      	ldr	r0, [r3, #4]
 80063e8:	2417      	movs	r4, #23
 80063ea:	193b      	adds	r3, r7, r4
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	18d2      	adds	r2, r2, r3
 80063f2:	2332      	movs	r3, #50	@ 0x32
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2301      	movs	r3, #1
 80063f8:	2132      	movs	r1, #50	@ 0x32
 80063fa:	f002 fb77 	bl	8008aec <HAL_I2C_Master_Receive>
		for (uint8_t i = 0; i < receive_length; ++i) {
 80063fe:	193b      	adds	r3, r7, r4
 8006400:	193a      	adds	r2, r7, r4
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	3201      	adds	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	2317      	movs	r3, #23
 800640a:	18fa      	adds	r2, r7, r3
 800640c:	230a      	movs	r3, #10
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d3d2      	bcc.n	80063be <_Z13read_registerP11lis331dlh_thPhh+0x72>
}
 8006418:	46c0      	nop			@ (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b006      	add	sp, #24
 800641e:	bdb0      	pop	{r4, r5, r7, pc}

08006420 <_Z14write_registerP11lis331dlh_thh>:


void write_register(lis331dlh_t * config, uint8_t address, uint8_t value) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af02      	add	r7, sp, #8
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	0008      	movs	r0, r1
 800642a:	0011      	movs	r1, r2
 800642c:	1cfb      	adds	r3, r7, #3
 800642e:	1c02      	adds	r2, r0, #0
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	1cbb      	adds	r3, r7, #2
 8006434:	1c0a      	adds	r2, r1, #0
 8006436:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d016      	beq.n	800646e <_Z14write_registerP11lis331dlh_thh+0x4e>
		chip_select(config);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f7ff ff62 	bl	800630c <_Z11chip_selectP11lis331dlh_t>

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	1cf9      	adds	r1, r7, #3
 800644e:	2364      	movs	r3, #100	@ 0x64
 8006450:	2201      	movs	r2, #1
 8006452:	f004 fd59 	bl	800af08 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(config->spi, &value, 1, 10);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	1cb9      	adds	r1, r7, #2
 800645c:	230a      	movs	r3, #10
 800645e:	2201      	movs	r2, #1
 8006460:	f004 fd52 	bl	800af08 <HAL_SPI_Transmit>

		chip_deselect(config);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	0018      	movs	r0, r3
 8006468:	f7ff ff60 	bl	800632c <_Z13chip_deselectP11lis331dlh_t>
	}
	else {
		uint8_t buffer[] = { address, value };
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
	}
}
 800646c:	e011      	b.n	8006492 <_Z14write_registerP11lis331dlh_thh+0x72>
		uint8_t buffer[] = { address, value };
 800646e:	1cfb      	adds	r3, r7, #3
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	210c      	movs	r1, #12
 8006474:	187b      	adds	r3, r7, r1
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	1cbb      	adds	r3, r7, #2
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	187b      	adds	r3, r7, r1
 800647e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6858      	ldr	r0, [r3, #4]
 8006484:	187a      	adds	r2, r7, r1
 8006486:	2364      	movs	r3, #100	@ 0x64
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2302      	movs	r3, #2
 800648c:	2132      	movs	r1, #50	@ 0x32
 800648e:	f002 fa03 	bl	8008898 <HAL_I2C_Master_Transmit>
}
 8006492:	46c0      	nop			@ (mov r8, r8)
 8006494:	46bd      	mov	sp, r7
 8006496:	b004      	add	sp, #16
 8006498:	bd80      	pop	{r7, pc}

0800649a <_Z24lis331dlh_check_presenceP11lis331dlh_t>:

int lis331dlh_check_presence(lis331dlh_t * config) {
 800649a:	b590      	push	{r4, r7, lr}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]

	uint8_t lis331_who_am_i_contents;

	read_register(config, WHO_AM_I, &lis331_who_am_i_contents);
 80064a2:	240f      	movs	r4, #15
 80064a4:	193a      	adds	r2, r7, r4
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	2301      	movs	r3, #1
 80064aa:	210f      	movs	r1, #15
 80064ac:	f7ff ff4e 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>

	return(lis331_who_am_i_contents != WHO_AM_I_VALUE);
 80064b0:	193b      	adds	r3, r7, r4
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	3b32      	subs	r3, #50	@ 0x32
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	4193      	sbcs	r3, r2
 80064ba:	b2db      	uxtb	r3, r3
}
 80064bc:	0018      	movs	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	b005      	add	sp, #20
 80064c2:	bd90      	pop	{r4, r7, pc}

080064c4 <_Z14lis331dlh_initP11lis331dlh_t>:

int lis331dlh_init(lis331dlh_t * config) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

	if(lis331dlh_check_presence(config)) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7ff ffe3 	bl	800649a <_Z24lis331dlh_check_presenceP11lis331dlh_t>
 80064d4:	0003      	movs	r3, r0
 80064d6:	1e5a      	subs	r2, r3, #1
 80064d8:	4193      	sbcs	r3, r2
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <_Z14lis331dlh_initP11lis331dlh_t+0x20>
		return 1;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e04a      	b.n	800657a <_Z14lis331dlh_initP11lis331dlh_t+0xb6>
	}

	config->range_factor = DATA_RATE_TO_TIME(config->data_rate);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7b9b      	ldrb	r3, [r3, #14]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff fee1 	bl	80062b0 <DATA_RATE_TO_TIME>
 80064ee:	1c02      	adds	r2, r0, #0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	611a      	str	r2, [r3, #16]

	lis331dlh_update_config(config);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f000 f8f0 	bl	80066dc <lis331dlh_update_config>

//	config->control_registers[0] &= !(0b11 << 3);
//	config->control_registers[0] |= 0x27 | (config->data_rate << 3);

	config->control_registers[0] = 0x27 | (config->data_rate << 3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7b9b      	ldrb	r3, [r3, #14]
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	b25b      	sxtb	r3, r3
 8006504:	2227      	movs	r2, #39	@ 0x27
 8006506:	4313      	orrs	r3, r2
 8006508:	b25b      	sxtb	r3, r3
 800650a:	b2da      	uxtb	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	759a      	strb	r2, [r3, #22]

//	config->control_registers[1] &= !(0b10011);
//	config->control_registers[1] |= (0 << 4) | 0b00;

	config->control_registers[1] = 0;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	75da      	strb	r2, [r3, #23]

//	config->control_registers[3] &= !(0b11 << 5);
//	config->control_registers[3] |= (config->range << 4) | (1 << 7);

	config->control_registers[3] = (config->range << 4) | (1 << 7);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	7bdb      	ldrb	r3, [r3, #15]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	b25b      	sxtb	r3, r3
 800651e:	2280      	movs	r2, #128	@ 0x80
 8006520:	4252      	negs	r2, r2
 8006522:	4313      	orrs	r3, r2
 8006524:	b25b      	sxtb	r3, r3
 8006526:	b2da      	uxtb	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	765a      	strb	r2, [r3, #25]

	write_register(config, CTRL_REG1, config->control_registers[0]);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	7d9a      	ldrb	r2, [r3, #22]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2120      	movs	r1, #32
 8006534:	0018      	movs	r0, r3
 8006536:	f7ff ff73 	bl	8006420 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG2, config->control_registers[1]);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7dda      	ldrb	r2, [r3, #23]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2121      	movs	r1, #33	@ 0x21
 8006542:	0018      	movs	r0, r3
 8006544:	f7ff ff6c 	bl	8006420 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG3, config->control_registers[2]);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7e1a      	ldrb	r2, [r3, #24]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2122      	movs	r1, #34	@ 0x22
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff ff65 	bl	8006420 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG4, config->control_registers[3]);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7e5a      	ldrb	r2, [r3, #25]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2123      	movs	r1, #35	@ 0x23
 800655e:	0018      	movs	r0, r3
 8006560:	f7ff ff5e 	bl	8006420 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG5, config->control_registers[4]);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7e9a      	ldrb	r2, [r3, #26]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2124      	movs	r1, #36	@ 0x24
 800656c:	0018      	movs	r0, r3
 800656e:	f7ff ff57 	bl	8006420 <_Z14write_registerP11lis331dlh_thh>

	HAL_Delay(10);
 8006572:	200a      	movs	r0, #10
 8006574:	f001 fbac 	bl	8007cd0 <HAL_Delay>

	return 0;
 8006578:	2300      	movs	r3, #0
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b002      	add	sp, #8
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <lis331dlh_init_spi>:

int lis331dlh_init_spi(
		lis331dlh_t * config,  SPI_HandleTypeDef * spi,
		GPIO_TypeDef * port, uint16_t pin
) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	001a      	movs	r2, r3
 8006592:	1cbb      	adds	r3, r7, #2
 8006594:	801a      	strh	r2, [r3, #0]
	config->spi = spi;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	601a      	str	r2, [r3, #0]
	config->chip_select_port = port;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	609a      	str	r2, [r3, #8]
	config->chip_select_pin = pin;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1cba      	adds	r2, r7, #2
 80065a6:	8812      	ldrh	r2, [r2, #0]
 80065a8:	819a      	strh	r2, [r3, #12]

	config->axis_select_x_z = (axis_select_t) HAL_GPIO_ReadPin(X_Z_SELECT_GPIO_Port, X_Z_SELECT_Pin);
 80065aa:	4b15      	ldr	r3, [pc, #84]	@ (8006600 <lis331dlh_init_spi+0x7c>)
 80065ac:	2101      	movs	r1, #1
 80065ae:	0018      	movs	r0, r3
 80065b0:	f002 f876 	bl	80086a0 <HAL_GPIO_ReadPin>
 80065b4:	0003      	movs	r3, r0
 80065b6:	001a      	movs	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	751a      	strb	r2, [r3, #20]

	if(config->axis_select_x_z == AXIS_X) {
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	7d1b      	ldrb	r3, [r3, #20]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d103      	bne.n	80065cc <lis331dlh_init_spi+0x48>
		debug("AXIS SELECTED: X\r\n");
 80065c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <lis331dlh_init_spi+0x80>)
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff fa64 	bl	8005a94 <debug>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	7d1b      	ldrb	r3, [r3, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <lis331dlh_init_spi+0x58>
		debug("AXIS SELECTED: Z\r\n");
 80065d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <lis331dlh_init_spi+0x84>)
 80065d6:	0018      	movs	r0, r3
 80065d8:	f7ff fa5c 	bl	8005a94 <debug>
	}

	if(lis331dlh_init(config)) {
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	0018      	movs	r0, r3
 80065e0:	f7ff ff70 	bl	80064c4 <_Z14lis331dlh_initP11lis331dlh_t>
 80065e4:	0003      	movs	r3, r0
 80065e6:	1e5a      	subs	r2, r3, #1
 80065e8:	4193      	sbcs	r3, r2
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <lis331dlh_init_spi+0x70>
		return 1;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <lis331dlh_init_spi+0x72>
	}

	return 0;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	0018      	movs	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b004      	add	sp, #16
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	50000400 	.word	0x50000400
 8006604:	08016e98 	.word	0x08016e98
 8006608:	08016eac 	.word	0x08016eac

0800660c <_Z23get_scaled_accelarationhh20acceleration_range_t>:

	return 0;
}


inline int16_t get_scaled_accelaration(uint8_t low_byte, uint8_t high_byte, acceleration_range_t range) {
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	0004      	movs	r4, r0
 8006614:	0008      	movs	r0, r1
 8006616:	0011      	movs	r1, r2
 8006618:	1dfb      	adds	r3, r7, #7
 800661a:	1c22      	adds	r2, r4, #0
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	1dbb      	adds	r3, r7, #6
 8006620:	1c02      	adds	r2, r0, #0
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	1d7b      	adds	r3, r7, #5
 8006626:	1c0a      	adds	r2, r1, #0
 8006628:	701a      	strb	r2, [r3, #0]
	return static_cast<int16_t>(high_byte << 8 | low_byte); 		// 12 бит число представлено в виде
 800662a:	1dbb      	adds	r3, r7, #6
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	b21a      	sxth	r2, r3
 8006632:	1dfb      	adds	r3, r7, #7
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b21b      	sxth	r3, r3
 8006638:	4313      	orrs	r3, r2
 800663a:	b21b      	sxth	r3, r3
																	// 16 бит и младшие 4 бита - нулевые
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b003      	add	sp, #12
 8006642:	bd90      	pop	{r4, r7, pc}

08006644 <lis331dlh_update_accelaration>:

int lis331dlh_update_accelaration(lis331dlh_t * config) {
 8006644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	read_register(config, OUT_X_L, &config->out_x_low, 6);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	331d      	adds	r3, #29
 8006650:	001a      	movs	r2, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	2306      	movs	r3, #6
 8006656:	2128      	movs	r1, #40	@ 0x28
 8006658:	f7ff fe78 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>

	config->accelarations = {
		HAL_GetTick(),
 800665c:	f001 fb2e 	bl	8007cbc <HAL_GetTick>
 8006660:	0004      	movs	r4, r0
		get_scaled_accelaration(config->out_x_low, config->out_x_high, config->range) / 16,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7f58      	ldrb	r0, [r3, #29]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	7f99      	ldrb	r1, [r3, #30]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7bdb      	ldrb	r3, [r3, #15]
 800666e:	001a      	movs	r2, r3
 8006670:	f7ff ffcc 	bl	800660c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	da00      	bge.n	800667a <lis331dlh_update_accelaration+0x36>
 8006678:	330f      	adds	r3, #15
 800667a:	111b      	asrs	r3, r3, #4
 800667c:	b21b      	sxth	r3, r3
 800667e:	001e      	movs	r6, r3
		get_scaled_accelaration(config->out_y_low, config->out_y_high, config->range) / 16,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7fd8      	ldrb	r0, [r3, #31]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	5c99      	ldrb	r1, [r3, r2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	7bdb      	ldrb	r3, [r3, #15]
 800668e:	001a      	movs	r2, r3
 8006690:	f7ff ffbc 	bl	800660c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006694:	1e03      	subs	r3, r0, #0
 8006696:	da00      	bge.n	800669a <lis331dlh_update_accelaration+0x56>
 8006698:	330f      	adds	r3, #15
 800669a:	111b      	asrs	r3, r3, #4
 800669c:	b21b      	sxth	r3, r3
 800669e:	001d      	movs	r5, r3
		get_scaled_accelaration(config->out_z_low, config->out_z_high, config->range) / 16,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2221      	movs	r2, #33	@ 0x21
 80066a4:	5c98      	ldrb	r0, [r3, r2]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2222      	movs	r2, #34	@ 0x22
 80066aa:	5c99      	ldrb	r1, [r3, r2]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7bdb      	ldrb	r3, [r3, #15]
 80066b0:	001a      	movs	r2, r3
 80066b2:	f7ff ffab 	bl	800660c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 80066b6:	1e03      	subs	r3, r0, #0
 80066b8:	da00      	bge.n	80066bc <lis331dlh_update_accelaration+0x78>
 80066ba:	330f      	adds	r3, #15
 80066bc:	111b      	asrs	r3, r3, #4
 80066be:	b21b      	sxth	r3, r3
 80066c0:	001a      	movs	r2, r3
	config->accelarations = {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	62dc      	str	r4, [r3, #44]	@ 0x2c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	631e      	str	r6, [r3, #48]	@ 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	635d      	str	r5, [r3, #52]	@ 0x34
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	639a      	str	r2, [r3, #56]	@ 0x38
	};

	return 0;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	0018      	movs	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b003      	add	sp, #12
 80066da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066dc <lis331dlh_update_config>:

	return 0;
}


void lis331dlh_update_config(lis331dlh_t * config) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	read_register(config, WHO_AM_I, &config->device_id);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3315      	adds	r3, #21
 80066e8:	001a      	movs	r2, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	2301      	movs	r3, #1
 80066ee:	210f      	movs	r1, #15
 80066f0:	f7ff fe2c 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, STATUS_REG, &config->status_register);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	331c      	adds	r3, #28
 80066f8:	001a      	movs	r2, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	2301      	movs	r3, #1
 80066fe:	2127      	movs	r1, #39	@ 0x27
 8006700:	f7ff fe24 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>

	read_register(config, CTRL_REG1, (uint8_t *)&config->control_registers,
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3316      	adds	r3, #22
 8006708:	001a      	movs	r2, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	2305      	movs	r3, #5
 800670e:	2120      	movs	r1, #32
 8006710:	f7ff fe1c 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>
			sizeof(config->control_registers));

	read_register(config, INT1_CFG, (uint8_t *)&config->interrupt_1, sizeof(interrupt_register_t));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3323      	adds	r3, #35	@ 0x23
 8006718:	001a      	movs	r2, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	2304      	movs	r3, #4
 800671e:	2130      	movs	r1, #48	@ 0x30
 8006720:	f7ff fe14 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, INT2_CFG, (uint8_t *)&config->interrupt_2, sizeof(interrupt_register_t));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3327      	adds	r3, #39	@ 0x27
 8006728:	001a      	movs	r2, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	2304      	movs	r3, #4
 800672e:	2134      	movs	r1, #52	@ 0x34
 8006730:	f7ff fe0c 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>
}
 8006734:	46c0      	nop			@ (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <lis331dlh_read_status>:


uint8_t lis331dlh_read_status(lis331dlh_t * config) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	read_register(config, STATUS_REG, &config->status_register);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	331c      	adds	r3, #28
 8006748:	001a      	movs	r2, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	2301      	movs	r3, #1
 800674e:	2127      	movs	r1, #39	@ 0x27
 8006750:	f7ff fdfc 	bl	800634c <_Z13read_registerP11lis331dlh_thPhh>
	return config->status_register;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	7f1b      	ldrb	r3, [r3, #28]
}
 8006758:	0018      	movs	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	b002      	add	sp, #8
 800675e:	bd80      	pop	{r7, pc}

08006760 <_Z15SENSOR_IO_Writehhh>:

#include "lps22.h"

I2C_HandleTypeDef * i2c;

void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value){
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b087      	sub	sp, #28
 8006764:	af02      	add	r7, sp, #8
 8006766:	0004      	movs	r4, r0
 8006768:	0008      	movs	r0, r1
 800676a:	0011      	movs	r1, r2
 800676c:	1dfb      	adds	r3, r7, #7
 800676e:	1c22      	adds	r2, r4, #0
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	1dbb      	adds	r3, r7, #6
 8006774:	1c02      	adds	r2, r0, #0
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	1d7b      	adds	r3, r7, #5
 800677a:	1c0a      	adds	r2, r1, #0
 800677c:	701a      	strb	r2, [r3, #0]

	uint8_t data[] = {Reg, Value};
 800677e:	240c      	movs	r4, #12
 8006780:	193b      	adds	r3, r7, r4
 8006782:	1dba      	adds	r2, r7, #6
 8006784:	7812      	ldrb	r2, [r2, #0]
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	193b      	adds	r3, r7, r4
 800678a:	1d7a      	adds	r2, r7, #5
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(SENSORS_I2C, Addr, data, 2, 100);
 8006790:	4b07      	ldr	r3, [pc, #28]	@ (80067b0 <_Z15SENSOR_IO_Writehhh+0x50>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	1dfb      	adds	r3, r7, #7
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b299      	uxth	r1, r3
 800679a:	193a      	adds	r2, r7, r4
 800679c:	2364      	movs	r3, #100	@ 0x64
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2302      	movs	r3, #2
 80067a2:	f002 f879 	bl	8008898 <HAL_I2C_Master_Transmit>
}
 80067a6:	46c0      	nop			@ (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b005      	add	sp, #20
 80067ac:	bd90      	pop	{r4, r7, pc}
 80067ae:	46c0      	nop			@ (mov r8, r8)
 80067b0:	20000060 	.word	0x20000060

080067b4 <_Z14SENSOR_IO_ReadhhPh>:

uint8_t  SENSOR_IO_Read(uint8_t Addr, uint8_t Reg, uint8_t* state = NULL){
 80067b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b6:	b089      	sub	sp, #36	@ 0x24
 80067b8:	af04      	add	r7, sp, #16
 80067ba:	603a      	str	r2, [r7, #0]
 80067bc:	1dfb      	adds	r3, r7, #7
 80067be:	1c02      	adds	r2, r0, #0
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	1dbb      	adds	r3, r7, #6
 80067c4:	1c0a      	adds	r2, r1, #0
 80067c6:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 80067c8:	250e      	movs	r5, #14
 80067ca:	197b      	adds	r3, r7, r5
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
	uint8_t st = HAL_I2C_Mem_Read(SENSORS_I2C, Addr, Reg, 1, &data, 1, 100);
 80067d0:	4b13      	ldr	r3, [pc, #76]	@ (8006820 <_Z14SENSOR_IO_ReadhhPh+0x6c>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	1dfb      	adds	r3, r7, #7
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	b299      	uxth	r1, r3
 80067da:	1dbb      	adds	r3, r7, #6
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	260f      	movs	r6, #15
 80067e2:	19bc      	adds	r4, r7, r6
 80067e4:	2364      	movs	r3, #100	@ 0x64
 80067e6:	9302      	str	r3, [sp, #8]
 80067e8:	2301      	movs	r3, #1
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	197b      	adds	r3, r7, r5
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2301      	movs	r3, #1
 80067f2:	f002 fbb1 	bl	8008f58 <HAL_I2C_Mem_Read>
 80067f6:	0003      	movs	r3, r0
 80067f8:	7023      	strb	r3, [r4, #0]

	if(state != NULL) *state = (st == HAL_OK);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <_Z14SENSOR_IO_ReadhhPh+0x5c>
 8006800:	19bb      	adds	r3, r7, r6
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	425a      	negs	r2, r3
 8006806:	4153      	adcs	r3, r2
 8006808:	b2db      	uxtb	r3, r3
 800680a:	001a      	movs	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	701a      	strb	r2, [r3, #0]

	return data;
 8006810:	230e      	movs	r3, #14
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b005      	add	sp, #20
 800681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	20000060 	.word	0x20000060

08006824 <lps22hb_init>:

bool lps22hb_init(I2C_HandleTypeDef * i2c_handler){
 8006824:	b5b0      	push	{r4, r5, r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

	i2c = i2c_handler;
 800682c:	4b34      	ldr	r3, [pc, #208]	@ (8006900 <lps22hb_init+0xdc>)
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(i2c, LPS_LOWER_ADDRESS, 3, 1000) != HAL_OK) return false;
 8006832:	4b33      	ldr	r3, [pc, #204]	@ (8006900 <lps22hb_init+0xdc>)
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	23fa      	movs	r3, #250	@ 0xfa
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	2203      	movs	r2, #3
 800683c:	21b8      	movs	r1, #184	@ 0xb8
 800683e:	f002 fcbf 	bl	80091c0 <HAL_I2C_IsDeviceReady>
 8006842:	0003      	movs	r3, r0
 8006844:	1e5a      	subs	r2, r3, #1
 8006846:	4193      	sbcs	r3, r2
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <lps22hb_init+0x2e>
 800684e:	2300      	movs	r3, #0
 8006850:	e052      	b.n	80068f8 <lps22hb_init+0xd4>

	uint8_t tmp;

	/* Set Power mode */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_RES_CONF_REG);
 8006852:	250f      	movs	r5, #15
 8006854:	197c      	adds	r4, r7, r5
 8006856:	2200      	movs	r2, #0
 8006858:	211a      	movs	r1, #26
 800685a:	20b8      	movs	r0, #184	@ 0xb8
 800685c:	f7ff ffaa 	bl	80067b4 <_Z14SENSOR_IO_ReadhhPh>
 8006860:	0003      	movs	r3, r0
 8006862:	7023      	strb	r3, [r4, #0]

	tmp &= ~LPS22HB_LCEN_MASK;
 8006864:	0028      	movs	r0, r5
 8006866:	183b      	adds	r3, r7, r0
 8006868:	183a      	adds	r2, r7, r0
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	2101      	movs	r1, #1
 800686e:	438a      	bics	r2, r1
 8006870:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x01; /* Set low current mode */
 8006872:	183b      	adds	r3, r7, r0
 8006874:	183a      	adds	r2, r7, r0
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	430a      	orrs	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]

	/* Read CTRL_REG1 */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1);
 800687e:	0005      	movs	r5, r0
 8006880:	183c      	adds	r4, r7, r0
 8006882:	2200      	movs	r2, #0
 8006884:	2110      	movs	r1, #16
 8006886:	20b8      	movs	r0, #184	@ 0xb8
 8006888:	f7ff ff94 	bl	80067b4 <_Z14SENSOR_IO_ReadhhPh>
 800688c:	0003      	movs	r3, r0
 800688e:	7023      	strb	r3, [r4, #0]

	/* Set default ODR */
	tmp &= ~LPS22HB_ODR_MASK;
 8006890:	0028      	movs	r0, r5
 8006892:	183b      	adds	r3, r7, r0
 8006894:	183a      	adds	r2, r7, r0
 8006896:	7812      	ldrb	r2, [r2, #0]
 8006898:	2170      	movs	r1, #112	@ 0x70
 800689a:	438a      	bics	r2, r1
 800689c:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x20; /* Set ODR to 10Hz */
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	183a      	adds	r2, r7, r0
 80068a2:	7812      	ldrb	r2, [r2, #0]
 80068a4:	2120      	movs	r1, #32
 80068a6:	430a      	orrs	r2, r1
 80068a8:	701a      	strb	r2, [r3, #0]

	/* Enable BDU */
	tmp &= ~LPS22HB_BDU_MASK;
 80068aa:	183b      	adds	r3, r7, r0
 80068ac:	183a      	adds	r2, r7, r0
 80068ae:	7812      	ldrb	r2, [r2, #0]
 80068b0:	2102      	movs	r1, #2
 80068b2:	438a      	bics	r2, r1
 80068b4:	701a      	strb	r2, [r3, #0]
	tmp |= ((uint8_t)0x02);
 80068b6:	183b      	adds	r3, r7, r0
 80068b8:	183a      	adds	r2, r7, r0
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	2102      	movs	r1, #2
 80068be:	430a      	orrs	r2, r1
 80068c0:	701a      	strb	r2, [r3, #0]

	/* Apply settings to CTRL_REG1 */
	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1, tmp);
 80068c2:	0005      	movs	r5, r0
 80068c4:	197b      	adds	r3, r7, r5
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	001a      	movs	r2, r3
 80068ca:	2110      	movs	r1, #16
 80068cc:	20b8      	movs	r0, #184	@ 0xb8
 80068ce:	f7ff ff47 	bl	8006760 <_Z15SENSOR_IO_Writehhh>


	// включаем работу DATA_READY пина
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3);
 80068d2:	197c      	adds	r4, r7, r5
 80068d4:	2200      	movs	r2, #0
 80068d6:	2112      	movs	r1, #18
 80068d8:	20b8      	movs	r0, #184	@ 0xb8
 80068da:	f7ff ff6b 	bl	80067b4 <_Z14SENSOR_IO_ReadhhPh>
 80068de:	0003      	movs	r3, r0
 80068e0:	7023      	strb	r3, [r4, #0]

	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3, tmp | LPS22HB_DRDY_MASK);
 80068e2:	197b      	adds	r3, r7, r5
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2204      	movs	r2, #4
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	001a      	movs	r2, r3
 80068ee:	2112      	movs	r1, #18
 80068f0:	20b8      	movs	r0, #184	@ 0xb8
 80068f2:	f7ff ff35 	bl	8006760 <_Z15SENSOR_IO_Writehhh>

	return true;
 80068f6:	2301      	movs	r3, #1
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b004      	add	sp, #16
 80068fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006900:	20002508 	.word	0x20002508

08006904 <lps22hb_get_status>:


uint8_t lps22hb_get_status() {
 8006904:	b590      	push	{r4, r7, lr}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	uint8_t status = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_STATUS_REG);
 800690a:	1dfc      	adds	r4, r7, #7
 800690c:	2200      	movs	r2, #0
 800690e:	2127      	movs	r1, #39	@ 0x27
 8006910:	20b8      	movs	r0, #184	@ 0xb8
 8006912:	f7ff ff4f 	bl	80067b4 <_Z14SENSOR_IO_ReadhhPh>
 8006916:	0003      	movs	r3, r0
 8006918:	7023      	strb	r3, [r4, #0]
	return status;
 800691a:	1dfb      	adds	r3, r7, #7
 800691c:	781b      	ldrb	r3, [r3, #0]
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b003      	add	sp, #12
 8006924:	bd90      	pop	{r4, r7, pc}
	...

08006928 <lps22hb_check_pressure_overrun>:

bool lps22hb_check_pressure_overrun(uint8_t status) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	0002      	movs	r2, r0
 8006930:	1dfb      	adds	r3, r7, #7
 8006932:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x10;
 8006934:	1dfb      	adds	r3, r7, #7
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2210      	movs	r2, #16
 800693a:	401a      	ands	r2, r3
 800693c:	200f      	movs	r0, #15
 800693e:	183b      	adds	r3, r7, r0
 8006940:	1e51      	subs	r1, r2, #1
 8006942:	418a      	sbcs	r2, r1
 8006944:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 8006946:	183b      	adds	r3, r7, r0
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <lps22hb_check_pressure_overrun+0x34>
		debug("Pressure data overrun! SR %02x\r\n", status);
 800694e:	1dfb      	adds	r3, r7, #7
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	4b06      	ldr	r3, [pc, #24]	@ (800696c <lps22hb_check_pressure_overrun+0x44>)
 8006954:	0011      	movs	r1, r2
 8006956:	0018      	movs	r0, r3
 8006958:	f7ff f89c 	bl	8005a94 <debug>
	}

	return is_overrun;
 800695c:	230f      	movs	r3, #15
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	781b      	ldrb	r3, [r3, #0]
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b004      	add	sp, #16
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			@ (mov r8, r8)
 800696c:	08016fb4 	.word	0x08016fb4

08006970 <lps22hb_check_temperature_overrun>:

bool lps22hb_check_temperature_overrun(uint8_t status) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	0002      	movs	r2, r0
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x20;
 800697c:	1dfb      	adds	r3, r7, #7
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2220      	movs	r2, #32
 8006982:	401a      	ands	r2, r3
 8006984:	200f      	movs	r0, #15
 8006986:	183b      	adds	r3, r7, r0
 8006988:	1e51      	subs	r1, r2, #1
 800698a:	418a      	sbcs	r2, r1
 800698c:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 800698e:	183b      	adds	r3, r7, r0
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d006      	beq.n	80069a4 <lps22hb_check_temperature_overrun+0x34>
		debug("Temperature data overrun! SR %02x\r\n", status);
 8006996:	1dfb      	adds	r3, r7, #7
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <lps22hb_check_temperature_overrun+0x44>)
 800699c:	0011      	movs	r1, r2
 800699e:	0018      	movs	r0, r3
 80069a0:	f7ff f878 	bl	8005a94 <debug>
	}

	return is_overrun;
 80069a4:	230f      	movs	r3, #15
 80069a6:	18fb      	adds	r3, r7, r3
 80069a8:	781b      	ldrb	r3, [r3, #0]
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b004      	add	sp, #16
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	08016fd8 	.word	0x08016fd8

080069b8 <lps22hb_check_pressure_data_available>:

bool lps22hb_check_pressure_data_available(uint8_t status) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	0002      	movs	r2, r0
 80069c0:	1dfb      	adds	r3, r7, #7
 80069c2:	701a      	strb	r2, [r3, #0]
	return status & 0x01;
 80069c4:	1dfb      	adds	r3, r7, #7
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	4013      	ands	r3, r2
 80069cc:	1e5a      	subs	r2, r3, #1
 80069ce:	4193      	sbcs	r3, r2
 80069d0:	b2db      	uxtb	r3, r3
}
 80069d2:	0018      	movs	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b002      	add	sp, #8
 80069d8:	bd80      	pop	{r7, pc}

080069da <lps22hb_check_temperature_data_available>:

bool lps22hb_check_temperature_data_available(uint8_t status) {
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	0002      	movs	r2, r0
 80069e2:	1dfb      	adds	r3, r7, #7
 80069e4:	701a      	strb	r2, [r3, #0]
	return status & 0x02;
 80069e6:	1dfb      	adds	r3, r7, #7
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2202      	movs	r2, #2
 80069ec:	4013      	ands	r3, r2
 80069ee:	1e5a      	subs	r2, r3, #1
 80069f0:	4193      	sbcs	r3, r2
 80069f2:	b2db      	uxtb	r3, r3
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}

080069fc <lps22hb_read_pressure>:
	  return ctrl;
}

int32_t raw_press = 0;

float lps22hb_read_pressure(){
 80069fc:	b5b0      	push	{r4, r5, r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0

	uint8_t buffer[3];
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8006a02:	230f      	movs	r3, #15
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	e013      	b.n	8006a34 <lps22hb_read_pressure+0x38>
		buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_PRESS_OUT_XL_REG + i));
 8006a0c:	250f      	movs	r5, #15
 8006a0e:	197b      	adds	r3, r7, r5
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	3328      	adds	r3, #40	@ 0x28
 8006a14:	b2d9      	uxtb	r1, r3
 8006a16:	197b      	adds	r3, r7, r5
 8006a18:	781c      	ldrb	r4, [r3, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	20b8      	movs	r0, #184	@ 0xb8
 8006a1e:	f7ff fec9 	bl	80067b4 <_Z14SENSOR_IO_ReadhhPh>
 8006a22:	0003      	movs	r3, r0
 8006a24:	001a      	movs	r2, r3
 8006a26:	003b      	movs	r3, r7
 8006a28:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8006a2a:	197b      	adds	r3, r7, r5
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	197b      	adds	r3, r7, r5
 8006a30:	3201      	adds	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	230f      	movs	r3, #15
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d9e6      	bls.n	8006a0c <lps22hb_read_pressure+0x10>
	}

	/* Build the raw data */
	uint32_t tmp = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	e00e      	b.n	8006a66 <lps22hb_read_pressure+0x6a>
		tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8006a48:	003a      	movs	r2, r7
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	001a      	movs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	409a      	lsls	r2, r3
 8006a58:	0013      	movs	r3, r2
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3301      	adds	r3, #1
 8006a64:	607b      	str	r3, [r7, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	dded      	ble.n	8006a48 <lps22hb_read_pressure+0x4c>
	}

	/* convert the 2's complement 24 bit to 2's complement 32 bit */
	if(tmp & 0x00800000) {
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	2380      	movs	r3, #128	@ 0x80
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	4013      	ands	r3, r2
 8006a74:	d004      	beq.n	8006a80 <lps22hb_read_pressure+0x84>
		tmp |= 0xFF000000;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	22ff      	movs	r2, #255	@ 0xff
 8006a7a:	0612      	lsls	r2, r2, #24
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]
	}

	raw_press = ((int32_t)tmp);
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <lps22hb_read_pressure+0xc4>)
 8006a84:	601a      	str	r2, [r3, #0]
	raw_press = (raw_press * 100) / 4096;
 8006a86:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac0 <lps22hb_read_pressure+0xc4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2264      	movs	r2, #100	@ 0x64
 8006a8c:	4353      	muls	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	da02      	bge.n	8006a98 <lps22hb_read_pressure+0x9c>
 8006a92:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac4 <lps22hb_read_pressure+0xc8>)
 8006a94:	4694      	mov	ip, r2
 8006a96:	4463      	add	r3, ip
 8006a98:	131b      	asrs	r3, r3, #12
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <lps22hb_read_pressure+0xc4>)
 8006a9e:	601a      	str	r2, [r3, #0]

	return (float)((float)raw_press / 100.0f);
 8006aa0:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <lps22hb_read_pressure+0xc4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7fa fd33 	bl	8001510 <__aeabi_i2f>
 8006aaa:	1c03      	adds	r3, r0, #0
 8006aac:	4906      	ldr	r1, [pc, #24]	@ (8006ac8 <lps22hb_read_pressure+0xcc>)
 8006aae:	1c18      	adds	r0, r3, #0
 8006ab0:	f7fa f830 	bl	8000b14 <__aeabi_fdiv>
 8006ab4:	1c03      	adds	r3, r0, #0
}
 8006ab6:	1c18      	adds	r0, r3, #0
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b004      	add	sp, #16
 8006abc:	bdb0      	pop	{r4, r5, r7, pc}
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	2000250c 	.word	0x2000250c
 8006ac4:	00000fff 	.word	0x00000fff
 8006ac8:	42c80000 	.word	0x42c80000

08006acc <lps22hb_read_temperature>:

float lps22hb_read_temperature(){
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
	  int16_t raw_data;
	  uint8_t buffer[2];
	  uint16_t tmp;
	  uint8_t i;

	  for(i = 0; i < 2; i++)
 8006ad2:	1dfb      	adds	r3, r7, #7
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	e012      	b.n	8006b00 <lps22hb_read_temperature+0x34>
	  {
	    buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_TEMP_OUT_L_REG + i));
 8006ada:	1dfb      	adds	r3, r7, #7
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	332b      	adds	r3, #43	@ 0x2b
 8006ae0:	b2d9      	uxtb	r1, r3
 8006ae2:	1dfb      	adds	r3, r7, #7
 8006ae4:	781c      	ldrb	r4, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	20b8      	movs	r0, #184	@ 0xb8
 8006aea:	f7ff fe63 	bl	80067b4 <_Z14SENSOR_IO_ReadhhPh>
 8006aee:	0003      	movs	r3, r0
 8006af0:	001a      	movs	r2, r3
 8006af2:	003b      	movs	r3, r7
 8006af4:	551a      	strb	r2, [r3, r4]
	  for(i = 0; i < 2; i++)
 8006af6:	1dfb      	adds	r3, r7, #7
 8006af8:	781a      	ldrb	r2, [r3, #0]
 8006afa:	1dfb      	adds	r3, r7, #7
 8006afc:	3201      	adds	r2, #1
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	1dfb      	adds	r3, r7, #7
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d9e8      	bls.n	8006ada <lps22hb_read_temperature+0xe>
	  }

	  /* Build the raw tmp */
	  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8006b08:	003b      	movs	r3, r7
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	003b      	movs	r3, r7
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	0019      	movs	r1, r3
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	1852      	adds	r2, r2, r1
 8006b1a:	801a      	strh	r2, [r3, #0]

	  raw_data = (tmp * 10) / 100;
 8006b1c:	1d3b      	adds	r3, r7, #4
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	210a      	movs	r1, #10
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7f9 fb96 	bl	8000254 <__divsi3>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	001a      	movs	r2, r3
 8006b2c:	1cbb      	adds	r3, r7, #2
 8006b2e:	801a      	strh	r2, [r3, #0]

	  return ((float)(raw_data / 10.0f));
 8006b30:	1cbb      	adds	r3, r7, #2
 8006b32:	2200      	movs	r2, #0
 8006b34:	5e9b      	ldrsh	r3, [r3, r2]
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7fa fcea 	bl	8001510 <__aeabi_i2f>
 8006b3c:	1c03      	adds	r3, r0, #0
 8006b3e:	4904      	ldr	r1, [pc, #16]	@ (8006b50 <lps22hb_read_temperature+0x84>)
 8006b40:	1c18      	adds	r0, r3, #0
 8006b42:	f7f9 ffe7 	bl	8000b14 <__aeabi_fdiv>
 8006b46:	1c03      	adds	r3, r0, #0
}
 8006b48:	1c18      	adds	r0, r3, #0
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b003      	add	sp, #12
 8006b4e:	bd90      	pop	{r4, r7, pc}
 8006b50:	41200000 	.word	0x41200000

08006b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b58:	f001 f87e 	bl	8007c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b5c:	f000 f830 	bl	8006bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b60:	f7ff f8ae 	bl	8005cc0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8006b64:	f7ff fb18 	bl	8006198 <MX_I2C2_Init>
  MX_SPI1_Init();
 8006b68:	f000 f97a 	bl	8006e60 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006b6c:	f000 f9b6 	bl	8006edc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8006b70:	f000 fdd4 	bl	800771c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006b74:	f000 fe22 	bl	80077bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006b78:	f000 fe72 	bl	8007860 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8006b7c:	f000 fcce 	bl	800751c <MX_TIM1_Init>
  MX_RTC_Init();
 8006b80:	f000 f902 	bl	8006d88 <MX_RTC_Init>
  MX_USART4_UART_Init();
 8006b84:	f000 fea0 	bl	80078c8 <MX_USART4_UART_Init>
  MX_TIM2_Init();
 8006b88:	f000 fd24 	bl	80075d4 <MX_TIM2_Init>
//	    Error_Handler();
//	  }
 // }


  debug("\r\n\r\nInited\r\n");
 8006b8c:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <main+0x60>)
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7fe ff80 	bl	8005a94 <debug>
  HAL_UART_Transmit_IT(terminal_uart, "123456789\r\n", 12);
 8006b94:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <main+0x64>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4908      	ldr	r1, [pc, #32]	@ (8006bbc <main+0x68>)
 8006b9a:	220c      	movs	r2, #12
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f005 fd77 	bl	800c690 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006ba2:	f008 f9e7 	bl	800ef74 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8006ba6:	f7fc feb1 	bl	800390c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006baa:	f008 fa05 	bl	800efb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	e7fd      	b.n	8006bae <main+0x5a>
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	08016ffc 	.word	0x08016ffc
 8006bb8:	20000070 	.word	0x20000070
 8006bbc:	0801700c 	.word	0x0801700c

08006bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b093      	sub	sp, #76	@ 0x4c
 8006bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bc6:	2410      	movs	r4, #16
 8006bc8:	193b      	adds	r3, r7, r4
 8006bca:	0018      	movs	r0, r3
 8006bcc:	2338      	movs	r3, #56	@ 0x38
 8006bce:	001a      	movs	r2, r3
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	f00c f939 	bl	8012e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bd6:	003b      	movs	r3, r7
 8006bd8:	0018      	movs	r0, r3
 8006bda:	2310      	movs	r3, #16
 8006bdc:	001a      	movs	r2, r3
 8006bde:	2100      	movs	r1, #0
 8006be0:	f00c f932 	bl	8012e48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006be4:	2380      	movs	r3, #128	@ 0x80
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	0018      	movs	r0, r3
 8006bea:	f003 f825 	bl	8009c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006bee:	193b      	adds	r3, r7, r4
 8006bf0:	2209      	movs	r2, #9
 8006bf2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006bf4:	193b      	adds	r3, r7, r4
 8006bf6:	2280      	movs	r2, #128	@ 0x80
 8006bf8:	0252      	lsls	r2, r2, #9
 8006bfa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006bfc:	0021      	movs	r1, r4
 8006bfe:	187b      	adds	r3, r7, r1
 8006c00:	2201      	movs	r2, #1
 8006c02:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c04:	187b      	adds	r3, r7, r1
 8006c06:	2202      	movs	r2, #2
 8006c08:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006c0a:	187b      	adds	r3, r7, r1
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006c10:	187b      	adds	r3, r7, r1
 8006c12:	2200      	movs	r2, #0
 8006c14:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8006c16:	187b      	adds	r3, r7, r1
 8006c18:	2210      	movs	r2, #16
 8006c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c1c:	187b      	adds	r3, r7, r1
 8006c1e:	2280      	movs	r2, #128	@ 0x80
 8006c20:	0292      	lsls	r2, r2, #10
 8006c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006c24:	187b      	adds	r3, r7, r1
 8006c26:	22a0      	movs	r2, #160	@ 0xa0
 8006c28:	0512      	lsls	r2, r2, #20
 8006c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	2280      	movs	r2, #128	@ 0x80
 8006c30:	05d2      	lsls	r2, r2, #23
 8006c32:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c34:	187b      	adds	r3, r7, r1
 8006c36:	0018      	movs	r0, r3
 8006c38:	f003 f84a 	bl	8009cd0 <HAL_RCC_OscConfig>
 8006c3c:	1e03      	subs	r3, r0, #0
 8006c3e:	d001      	beq.n	8006c44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006c40:	f000 f874 	bl	8006d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c44:	003b      	movs	r3, r7
 8006c46:	2207      	movs	r2, #7
 8006c48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c4a:	003b      	movs	r3, r7
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c50:	003b      	movs	r3, r7
 8006c52:	2200      	movs	r2, #0
 8006c54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006c56:	003b      	movs	r3, r7
 8006c58:	2200      	movs	r2, #0
 8006c5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c5c:	003b      	movs	r3, r7
 8006c5e:	2102      	movs	r1, #2
 8006c60:	0018      	movs	r0, r3
 8006c62:	f003 fb4f 	bl	800a304 <HAL_RCC_ClockConfig>
 8006c66:	1e03      	subs	r3, r0, #0
 8006c68:	d001      	beq.n	8006c6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006c6a:	f000 f85f 	bl	8006d2c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8006c6e:	f003 fd1d 	bl	800a6ac <HAL_RCC_EnableCSS>
}
 8006c72:	46c0      	nop			@ (mov r8, r8)
 8006c74:	46bd      	mov	sp, r7
 8006c76:	b013      	add	sp, #76	@ 0x4c
 8006c78:	bd90      	pop	{r4, r7, pc}
	...

08006c7c <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
     int i, j;
     uint32_t byte, crc, mask;

     i = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
     crc = 0xFFFFFFFF;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	425b      	negs	r3, r3
 8006c8e:	617b      	str	r3, [r7, #20]
     for(int k = 0; k<size;k++) {
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	e023      	b.n	8006cde <crc32b+0x62>
        byte = message[k];            // Get next byte.
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	18d3      	adds	r3, r2, r3
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
        crc = crc ^ byte;
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4053      	eors	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8006ca8:	2307      	movs	r3, #7
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	e00e      	b.n	8006ccc <crc32b+0x50>
           mask = -(crc & 1);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	425b      	negs	r3, r3
 8006cb6:	60bb      	str	r3, [r7, #8]
           crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	085a      	lsrs	r2, r3, #1
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	490d      	ldr	r1, [pc, #52]	@ (8006cf4 <crc32b+0x78>)
 8006cc0:	400b      	ands	r3, r1
 8006cc2:	4053      	eors	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	daed      	bge.n	8006cae <crc32b+0x32>
        }
        i = i + 1;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
     for(int k = 0; k<size;k++) {
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d8d7      	bhi.n	8006c96 <crc32b+0x1a>
     }
     return ~crc;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	43db      	mvns	r3, r3
  }
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b008      	add	sp, #32
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	edb88320 	.word	0xedb88320

08006cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a08      	ldr	r2, [pc, #32]	@ (8006d28 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006d0a:	f000 ffc5 	bl	8007c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	2380      	movs	r3, #128	@ 0x80
 8006d14:	05db      	lsls	r3, r3, #23
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d101      	bne.n	8006d1e <HAL_TIM_PeriodElapsedCallback+0x26>

  	  Timer_Event();
 8006d1a:	f7fc fc6f 	bl	80035fc <Timer_Event>
  }
  /* USER CODE END Callback 1 */
}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b002      	add	sp, #8
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	46c0      	nop			@ (mov r8, r8)
 8006d28:	40014800 	.word	0x40014800

08006d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d30:	b672      	cpsid	i
}
 8006d32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_PWR_EnableBkUpAccess();
 8006d34:	f002 ff72 	bl	8009c1c <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xAAAA);
 8006d38:	4a0e      	ldr	r2, [pc, #56]	@ (8006d74 <Error_Handler+0x48>)
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <Error_Handler+0x4c>)
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f003 fff2 	bl	800ad28 <HAL_RTCEx_BKUPWrite>

	debug("==========\r\n");
 8006d44:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <Error_Handler+0x50>)
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7fe fea4 	bl	8005a94 <debug>
	debug("ERROR HANDLER\r\n");
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <Error_Handler+0x54>)
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fe fea0 	bl	8005a94 <debug>
	debug("==========\r\n");
 8006d54:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <Error_Handler+0x50>)
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7fe fe9c 	bl	8005a94 <debug>

	send_all_debug_buffer_blocking();
 8006d5c:	f7fe ff6c 	bl	8005c38 <send_all_debug_buffer_blocking>

	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8006d60:	4b08      	ldr	r3, [pc, #32]	@ (8006d84 <Error_Handler+0x58>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	2104      	movs	r1, #4
 8006d66:	0018      	movs	r0, r3
 8006d68:	f001 fcb7 	bl	80086da <HAL_GPIO_WritePin>

	HAL_NVIC_SystemReset();
 8006d6c:	f001 f8a9 	bl	8007ec2 <HAL_NVIC_SystemReset>

  while (1)
 8006d70:	46c0      	nop			@ (mov r8, r8)
 8006d72:	e7fd      	b.n	8006d70 <Error_Handler+0x44>
 8006d74:	0000aaaa 	.word	0x0000aaaa
 8006d78:	20002510 	.word	0x20002510
 8006d7c:	08017018 	.word	0x08017018
 8006d80:	08017028 	.word	0x08017028
 8006d84:	50000c00 	.word	0x50000c00

08006d88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006d8c:	4b13      	ldr	r3, [pc, #76]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006d8e:	4a14      	ldr	r2, [pc, #80]	@ (8006de0 <MX_RTC_Init+0x58>)
 8006d90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006d92:	4b12      	ldr	r3, [pc, #72]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8006d98:	4b10      	ldr	r3, [pc, #64]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006d9a:	227f      	movs	r2, #127	@ 0x7f
 8006d9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006da0:	22ff      	movs	r2, #255	@ 0xff
 8006da2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006da4:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006daa:	4b0c      	ldr	r3, [pc, #48]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006db0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006db6:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006db8:	2280      	movs	r2, #128	@ 0x80
 8006dba:	05d2      	lsls	r2, r2, #23
 8006dbc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8006dbe:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006dc4:	4b05      	ldr	r3, [pc, #20]	@ (8006ddc <MX_RTC_Init+0x54>)
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f003 fe60 	bl	800aa8c <HAL_RTC_Init>
 8006dcc:	1e03      	subs	r3, r0, #0
 8006dce:	d001      	beq.n	8006dd4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8006dd0:	f7ff ffac 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006dd4:	46c0      	nop			@ (mov r8, r8)
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	20002510 	.word	0x20002510
 8006de0:	40002800 	.word	0x40002800

08006de4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b091      	sub	sp, #68	@ 0x44
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006dec:	240c      	movs	r4, #12
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	0018      	movs	r0, r3
 8006df2:	2334      	movs	r3, #52	@ 0x34
 8006df4:	001a      	movs	r2, r3
 8006df6:	2100      	movs	r1, #0
 8006df8:	f00c f826 	bl	8012e48 <memset>
  if(rtcHandle->Instance==RTC)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a15      	ldr	r2, [pc, #84]	@ (8006e58 <HAL_RTC_MspInit+0x74>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d124      	bne.n	8006e50 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006e06:	193b      	adds	r3, r7, r4
 8006e08:	2280      	movs	r2, #128	@ 0x80
 8006e0a:	0292      	lsls	r2, r2, #10
 8006e0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006e0e:	193b      	adds	r3, r7, r4
 8006e10:	2280      	movs	r2, #128	@ 0x80
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e16:	193b      	adds	r3, r7, r4
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f003 fc7f 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 8006e1e:	1e03      	subs	r3, r0, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006e22:	f7ff ff83 	bl	8006d2c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <HAL_RTC_MspInit+0x78>)
 8006e28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e5c <HAL_RTC_MspInit+0x78>)
 8006e2c:	2180      	movs	r1, #128	@ 0x80
 8006e2e:	0209      	lsls	r1, r1, #8
 8006e30:	430a      	orrs	r2, r1
 8006e32:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006e34:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <HAL_RTC_MspInit+0x78>)
 8006e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e38:	4b08      	ldr	r3, [pc, #32]	@ (8006e5c <HAL_RTC_MspInit+0x78>)
 8006e3a:	2180      	movs	r1, #128	@ 0x80
 8006e3c:	00c9      	lsls	r1, r1, #3
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006e42:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <HAL_RTC_MspInit+0x78>)
 8006e44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e46:	2380      	movs	r3, #128	@ 0x80
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	60bb      	str	r3, [r7, #8]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006e50:	46c0      	nop			@ (mov r8, r8)
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b011      	add	sp, #68	@ 0x44
 8006e56:	bd90      	pop	{r4, r7, pc}
 8006e58:	40002800 	.word	0x40002800
 8006e5c:	40021000 	.word	0x40021000

08006e60 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006e64:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e66:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed8 <MX_SPI1_Init+0x78>)
 8006e68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e6c:	2282      	movs	r2, #130	@ 0x82
 8006e6e:	0052      	lsls	r2, r2, #1
 8006e70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006e72:	4b18      	ldr	r3, [pc, #96]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e78:	4b16      	ldr	r3, [pc, #88]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e7a:	22e0      	movs	r2, #224	@ 0xe0
 8006e7c:	00d2      	lsls	r2, r2, #3
 8006e7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e80:	4b14      	ldr	r3, [pc, #80]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e86:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006e8c:	4b11      	ldr	r3, [pc, #68]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e8e:	2280      	movs	r2, #128	@ 0x80
 8006e90:	0092      	lsls	r2, r2, #2
 8006e92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006eac:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006eae:	2207      	movs	r2, #7
 8006eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006eb2:	4b08      	ldr	r3, [pc, #32]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006eb8:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006eba:	2208      	movs	r2, #8
 8006ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006ebe:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <MX_SPI1_Init+0x74>)
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f003 ff69 	bl	800ad98 <HAL_SPI_Init>
 8006ec6:	1e03      	subs	r3, r0, #0
 8006ec8:	d001      	beq.n	8006ece <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006eca:	f7ff ff2f 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	2000253c 	.word	0x2000253c
 8006ed8:	40013000 	.word	0x40013000

08006edc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f54 <MX_SPI2_Init+0x78>)
 8006ee4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006ee8:	2282      	movs	r2, #130	@ 0x82
 8006eea:	0052      	lsls	r2, r2, #1
 8006eec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006eee:	4b18      	ldr	r3, [pc, #96]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ef4:	4b16      	ldr	r3, [pc, #88]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006ef6:	22e0      	movs	r2, #224	@ 0xe0
 8006ef8:	00d2      	lsls	r2, r2, #3
 8006efa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006efc:	4b14      	ldr	r3, [pc, #80]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f02:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f08:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f0a:	2280      	movs	r2, #128	@ 0x80
 8006f0c:	0092      	lsls	r2, r2, #2
 8006f0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006f10:	4b0f      	ldr	r3, [pc, #60]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f12:	2210      	movs	r2, #16
 8006f14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f16:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f22:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006f28:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f2a:	2207      	movs	r2, #7
 8006f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f2e:	4b08      	ldr	r3, [pc, #32]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f34:	4b06      	ldr	r3, [pc, #24]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f36:	2208      	movs	r2, #8
 8006f38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f3a:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <MX_SPI2_Init+0x74>)
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f003 ff2b 	bl	800ad98 <HAL_SPI_Init>
 8006f42:	1e03      	subs	r3, r0, #0
 8006f44:	d001      	beq.n	8006f4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006f46:	f7ff fef1 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006f4a:	46c0      	nop			@ (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200025a0 	.word	0x200025a0
 8006f54:	40003800 	.word	0x40003800

08006f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b08d      	sub	sp, #52	@ 0x34
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f60:	241c      	movs	r4, #28
 8006f62:	193b      	adds	r3, r7, r4
 8006f64:	0018      	movs	r0, r3
 8006f66:	2314      	movs	r3, #20
 8006f68:	001a      	movs	r2, r3
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	f00b ff6c 	bl	8012e48 <memset>
  if(spiHandle->Instance==SPI1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5f      	ldr	r2, [pc, #380]	@ (80070f4 <HAL_SPI_MspInit+0x19c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d154      	bne.n	8007024 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f7e:	4b5e      	ldr	r3, [pc, #376]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006f80:	2180      	movs	r1, #128	@ 0x80
 8006f82:	0149      	lsls	r1, r1, #5
 8006f84:	430a      	orrs	r2, r1
 8006f86:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f88:	4b5b      	ldr	r3, [pc, #364]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f8c:	2380      	movs	r3, #128	@ 0x80
 8006f8e:	015b      	lsls	r3, r3, #5
 8006f90:	4013      	ands	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f96:	4b58      	ldr	r3, [pc, #352]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f9a:	4b57      	ldr	r3, [pc, #348]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006f9c:	2108      	movs	r1, #8
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8006fa2:	4b55      	ldr	r3, [pc, #340]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	4013      	ands	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fae:	4b52      	ldr	r3, [pc, #328]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb2:	4b51      	ldr	r3, [pc, #324]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006fba:	4b4f      	ldr	r3, [pc, #316]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
 8006fc6:	193b      	adds	r3, r7, r4
 8006fc8:	2280      	movs	r2, #128	@ 0x80
 8006fca:	0052      	lsls	r2, r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fce:	193b      	adds	r3, r7, r4
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd4:	193b      	adds	r3, r7, r4
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fda:	193b      	adds	r3, r7, r4
 8006fdc:	2203      	movs	r2, #3
 8006fde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8006fe0:	193b      	adds	r3, r7, r4
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
 8006fe6:	193b      	adds	r3, r7, r4
 8006fe8:	4a44      	ldr	r2, [pc, #272]	@ (80070fc <HAL_SPI_MspInit+0x1a4>)
 8006fea:	0019      	movs	r1, r3
 8006fec:	0010      	movs	r0, r2
 8006fee:	f001 f9f3 	bl	80083d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8006ff2:	0021      	movs	r1, r4
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	22c0      	movs	r2, #192	@ 0xc0
 8006ff8:	0152      	lsls	r2, r2, #5
 8006ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffc:	187b      	adds	r3, r7, r1
 8006ffe:	2202      	movs	r2, #2
 8007000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	187b      	adds	r3, r7, r1
 8007004:	2200      	movs	r2, #0
 8007006:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007008:	187b      	adds	r3, r7, r1
 800700a:	2203      	movs	r2, #3
 800700c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800700e:	187b      	adds	r3, r7, r1
 8007010:	2200      	movs	r2, #0
 8007012:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007014:	187a      	adds	r2, r7, r1
 8007016:	23a0      	movs	r3, #160	@ 0xa0
 8007018:	05db      	lsls	r3, r3, #23
 800701a:	0011      	movs	r1, r2
 800701c:	0018      	movs	r0, r3
 800701e:	f001 f9db 	bl	80083d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007022:	e063      	b.n	80070ec <HAL_SPI_MspInit+0x194>
  else if(spiHandle->Instance==SPI2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a35      	ldr	r2, [pc, #212]	@ (8007100 <HAL_SPI_MspInit+0x1a8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d15e      	bne.n	80070ec <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800702e:	4b32      	ldr	r3, [pc, #200]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8007030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007032:	4b31      	ldr	r3, [pc, #196]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8007034:	2180      	movs	r1, #128	@ 0x80
 8007036:	01c9      	lsls	r1, r1, #7
 8007038:	430a      	orrs	r2, r1
 800703a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800703c:	4b2e      	ldr	r3, [pc, #184]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 800703e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007040:	2380      	movs	r3, #128	@ 0x80
 8007042:	01db      	lsls	r3, r3, #7
 8007044:	4013      	ands	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800704a:	4b2b      	ldr	r3, [pc, #172]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 800704c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704e:	4b2a      	ldr	r3, [pc, #168]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8007050:	2102      	movs	r1, #2
 8007052:	430a      	orrs	r2, r1
 8007054:	635a      	str	r2, [r3, #52]	@ 0x34
 8007056:	4b28      	ldr	r3, [pc, #160]	@ (80070f8 <HAL_SPI_MspInit+0x1a0>)
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	2202      	movs	r2, #2
 800705c:	4013      	ands	r3, r2
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_MISO_Pin;
 8007062:	241c      	movs	r4, #28
 8007064:	193b      	adds	r3, r7, r4
 8007066:	2204      	movs	r2, #4
 8007068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800706a:	193b      	adds	r3, r7, r4
 800706c:	2202      	movs	r2, #2
 800706e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007070:	193b      	adds	r3, r7, r4
 8007072:	2200      	movs	r2, #0
 8007074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007076:	193b      	adds	r3, r7, r4
 8007078:	2203      	movs	r2, #3
 800707a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800707c:	193b      	adds	r3, r7, r4
 800707e:	2201      	movs	r2, #1
 8007080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MISO_GPIO_Port, &GPIO_InitStruct);
 8007082:	193b      	adds	r3, r7, r4
 8007084:	4a1f      	ldr	r2, [pc, #124]	@ (8007104 <HAL_SPI_MspInit+0x1ac>)
 8007086:	0019      	movs	r1, r3
 8007088:	0010      	movs	r0, r2
 800708a:	f001 f9a5 	bl	80083d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_SCK_Pin;
 800708e:	0021      	movs	r1, r4
 8007090:	187b      	adds	r3, r7, r1
 8007092:	2280      	movs	r2, #128	@ 0x80
 8007094:	00d2      	lsls	r2, r2, #3
 8007096:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007098:	000c      	movs	r4, r1
 800709a:	193b      	adds	r3, r7, r4
 800709c:	2202      	movs	r2, #2
 800709e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	193b      	adds	r3, r7, r4
 80070a2:	2200      	movs	r2, #0
 80070a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a6:	193b      	adds	r3, r7, r4
 80070a8:	2203      	movs	r2, #3
 80070aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070ac:	193b      	adds	r3, r7, r4
 80070ae:	2205      	movs	r2, #5
 80070b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_SCK_GPIO_Port, &GPIO_InitStruct);
 80070b2:	193b      	adds	r3, r7, r4
 80070b4:	4a13      	ldr	r2, [pc, #76]	@ (8007104 <HAL_SPI_MspInit+0x1ac>)
 80070b6:	0019      	movs	r1, r3
 80070b8:	0010      	movs	r0, r2
 80070ba:	f001 f98d 	bl	80083d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_MOSI_Pin;
 80070be:	0021      	movs	r1, r4
 80070c0:	187b      	adds	r3, r7, r1
 80070c2:	2280      	movs	r2, #128	@ 0x80
 80070c4:	0112      	lsls	r2, r2, #4
 80070c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c8:	187b      	adds	r3, r7, r1
 80070ca:	2202      	movs	r2, #2
 80070cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ce:	187b      	adds	r3, r7, r1
 80070d0:	2200      	movs	r2, #0
 80070d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070d4:	187b      	adds	r3, r7, r1
 80070d6:	2203      	movs	r2, #3
 80070d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80070da:	187b      	adds	r3, r7, r1
 80070dc:	2200      	movs	r2, #0
 80070de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MOSI_GPIO_Port, &GPIO_InitStruct);
 80070e0:	187b      	adds	r3, r7, r1
 80070e2:	4a08      	ldr	r2, [pc, #32]	@ (8007104 <HAL_SPI_MspInit+0x1ac>)
 80070e4:	0019      	movs	r1, r3
 80070e6:	0010      	movs	r0, r2
 80070e8:	f001 f976 	bl	80083d8 <HAL_GPIO_Init>
}
 80070ec:	46c0      	nop			@ (mov r8, r8)
 80070ee:	46bd      	mov	sp, r7
 80070f0:	b00d      	add	sp, #52	@ 0x34
 80070f2:	bd90      	pop	{r4, r7, pc}
 80070f4:	40013000 	.word	0x40013000
 80070f8:	40021000 	.word	0x40021000
 80070fc:	50000c00 	.word	0x50000c00
 8007100:	40003800 	.word	0x40003800
 8007104:	50000400 	.word	0x50000400

08007108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800710e:	4b15      	ldr	r3, [pc, #84]	@ (8007164 <HAL_MspInit+0x5c>)
 8007110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007112:	4b14      	ldr	r3, [pc, #80]	@ (8007164 <HAL_MspInit+0x5c>)
 8007114:	2101      	movs	r1, #1
 8007116:	430a      	orrs	r2, r1
 8007118:	641a      	str	r2, [r3, #64]	@ 0x40
 800711a:	4b12      	ldr	r3, [pc, #72]	@ (8007164 <HAL_MspInit+0x5c>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711e:	2201      	movs	r2, #1
 8007120:	4013      	ands	r3, r2
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007126:	4b0f      	ldr	r3, [pc, #60]	@ (8007164 <HAL_MspInit+0x5c>)
 8007128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800712a:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <HAL_MspInit+0x5c>)
 800712c:	2180      	movs	r1, #128	@ 0x80
 800712e:	0549      	lsls	r1, r1, #21
 8007130:	430a      	orrs	r2, r1
 8007132:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007134:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <HAL_MspInit+0x5c>)
 8007136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	055b      	lsls	r3, r3, #21
 800713c:	4013      	ands	r3, r2
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007142:	2302      	movs	r3, #2
 8007144:	425b      	negs	r3, r3
 8007146:	2200      	movs	r2, #0
 8007148:	2103      	movs	r1, #3
 800714a:	0018      	movs	r0, r3
 800714c:	f000 fe94 	bl	8007e78 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007150:	23c0      	movs	r3, #192	@ 0xc0
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	0018      	movs	r0, r3
 8007156:	f000 fddf 	bl	8007d18 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	46bd      	mov	sp, r7
 800715e:	b002      	add	sp, #8
 8007160:	bd80      	pop	{r7, pc}
 8007162:	46c0      	nop			@ (mov r8, r8)
 8007164:	40021000 	.word	0x40021000

08007168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007168:	b5b0      	push	{r4, r5, r7, lr}
 800716a:	b08c      	sub	sp, #48	@ 0x30
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8007170:	232b      	movs	r3, #43	@ 0x2b
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8007178:	4b38      	ldr	r3, [pc, #224]	@ (800725c <HAL_InitTick+0xf4>)
 800717a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800717c:	4b37      	ldr	r3, [pc, #220]	@ (800725c <HAL_InitTick+0xf4>)
 800717e:	2180      	movs	r1, #128	@ 0x80
 8007180:	02c9      	lsls	r1, r1, #11
 8007182:	430a      	orrs	r2, r1
 8007184:	641a      	str	r2, [r3, #64]	@ 0x40
 8007186:	4b35      	ldr	r3, [pc, #212]	@ (800725c <HAL_InitTick+0xf4>)
 8007188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800718a:	2380      	movs	r3, #128	@ 0x80
 800718c:	02db      	lsls	r3, r3, #11
 800718e:	4013      	ands	r3, r2
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007194:	230c      	movs	r3, #12
 8007196:	18fa      	adds	r2, r7, r3
 8007198:	2410      	movs	r4, #16
 800719a:	193b      	adds	r3, r7, r4
 800719c:	0011      	movs	r1, r2
 800719e:	0018      	movs	r0, r3
 80071a0:	f003 fa5a 	bl	800a658 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80071b0:	f003 fa3c 	bl	800a62c <HAL_RCC_GetPCLK1Freq>
 80071b4:	0003      	movs	r3, r0
 80071b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071b8:	e004      	b.n	80071c4 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80071ba:	f003 fa37 	bl	800a62c <HAL_RCC_GetPCLK1Freq>
 80071be:	0003      	movs	r3, r0
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c6:	4926      	ldr	r1, [pc, #152]	@ (8007260 <HAL_InitTick+0xf8>)
 80071c8:	0018      	movs	r0, r3
 80071ca:	f7f8 ffb9 	bl	8000140 <__udivsi3>
 80071ce:	0003      	movs	r3, r0
 80071d0:	3b01      	subs	r3, #1
 80071d2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80071d4:	4b23      	ldr	r3, [pc, #140]	@ (8007264 <HAL_InitTick+0xfc>)
 80071d6:	4a24      	ldr	r2, [pc, #144]	@ (8007268 <HAL_InitTick+0x100>)
 80071d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80071da:	4b22      	ldr	r3, [pc, #136]	@ (8007264 <HAL_InitTick+0xfc>)
 80071dc:	4a23      	ldr	r2, [pc, #140]	@ (800726c <HAL_InitTick+0x104>)
 80071de:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80071e0:	4b20      	ldr	r3, [pc, #128]	@ (8007264 <HAL_InitTick+0xfc>)
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80071e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007264 <HAL_InitTick+0xfc>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007264 <HAL_InitTick+0xfc>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007264 <HAL_InitTick+0xfc>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80071f8:	252b      	movs	r5, #43	@ 0x2b
 80071fa:	197c      	adds	r4, r7, r5
 80071fc:	4b19      	ldr	r3, [pc, #100]	@ (8007264 <HAL_InitTick+0xfc>)
 80071fe:	0018      	movs	r0, r3
 8007200:	f004 fcea 	bl	800bbd8 <HAL_TIM_Base_Init>
 8007204:	0003      	movs	r3, r0
 8007206:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8007208:	197b      	adds	r3, r7, r5
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11e      	bne.n	800724e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8007210:	197c      	adds	r4, r7, r5
 8007212:	4b14      	ldr	r3, [pc, #80]	@ (8007264 <HAL_InitTick+0xfc>)
 8007214:	0018      	movs	r0, r3
 8007216:	f004 fd37 	bl	800bc88 <HAL_TIM_Base_Start_IT>
 800721a:	0003      	movs	r3, r0
 800721c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800721e:	197b      	adds	r3, r7, r5
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d113      	bne.n	800724e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8007226:	2016      	movs	r0, #22
 8007228:	f000 fe3b 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b03      	cmp	r3, #3
 8007230:	d809      	bhi.n	8007246 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	0019      	movs	r1, r3
 8007238:	2016      	movs	r0, #22
 800723a:	f000 fe1d 	bl	8007e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800723e:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <HAL_InitTick+0x108>)
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	e003      	b.n	800724e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8007246:	232b      	movs	r3, #43	@ 0x2b
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800724e:	232b      	movs	r3, #43	@ 0x2b
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	781b      	ldrb	r3, [r3, #0]
}
 8007254:	0018      	movs	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	b00c      	add	sp, #48	@ 0x30
 800725a:	bdb0      	pop	{r4, r5, r7, pc}
 800725c:	40021000 	.word	0x40021000
 8007260:	000f4240 	.word	0x000f4240
 8007264:	20002604 	.word	0x20002604
 8007268:	40014800 	.word	0x40014800
 800726c:	000003e7 	.word	0x000003e7
 8007270:	20000074 	.word	0x20000074

08007274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8007278:	f003 fa26 	bl	800a6c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800727c:	46c0      	nop			@ (mov r8, r8)
 800727e:	e7fd      	b.n	800727c <NMI_Handler+0x8>

08007280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8007284:	4b17      	ldr	r3, [pc, #92]	@ (80072e4 <HardFault_Handler+0x64>)
 8007286:	2201      	movs	r2, #1
 8007288:	2104      	movs	r1, #4
 800728a:	0018      	movs	r0, r3
 800728c:	f001 fa25 	bl	80086da <HAL_GPIO_WritePin>
	HAL_PWR_EnableBkUpAccess();
 8007290:	f002 fcc4 	bl	8009c1c <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 8007294:	4a14      	ldr	r2, [pc, #80]	@ (80072e8 <HardFault_Handler+0x68>)
 8007296:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <HardFault_Handler+0x6c>)
 8007298:	2100      	movs	r1, #0
 800729a:	0018      	movs	r0, r3
 800729c:	f003 fd44 	bl	800ad28 <HAL_RTCEx_BKUPWrite>

	if (debug_enabled()) {
 80072a0:	f7fe fbf2 	bl	8005a88 <debug_enabled>
 80072a4:	1e03      	subs	r3, r0, #0
 80072a6:	d010      	beq.n	80072ca <HardFault_Handler+0x4a>
		debug("==========");
 80072a8:	4b11      	ldr	r3, [pc, #68]	@ (80072f0 <HardFault_Handler+0x70>)
 80072aa:	0018      	movs	r0, r3
 80072ac:	f7fe fbf2 	bl	8005a94 <debug>
		debug("HARD FAULT");
 80072b0:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <HardFault_Handler+0x74>)
 80072b2:	0018      	movs	r0, r3
 80072b4:	f7fe fbee 	bl	8005a94 <debug>
		debug("==========");
 80072b8:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <HardFault_Handler+0x70>)
 80072ba:	0018      	movs	r0, r3
 80072bc:	f7fe fbea 	bl	8005a94 <debug>

		send_all_debug_buffer_blocking();
 80072c0:	f7fe fcba 	bl	8005c38 <send_all_debug_buffer_blocking>
		HAL_NVIC_SystemReset();
 80072c4:	f000 fdfd 	bl	8007ec2 <HAL_NVIC_SystemReset>
 80072c8:	e009      	b.n	80072de <HardFault_Handler+0x5e>
	}
	else {
		HAL_PWR_EnableBkUpAccess();
 80072ca:	f002 fca7 	bl	8009c1c <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 80072ce:	4a06      	ldr	r2, [pc, #24]	@ (80072e8 <HardFault_Handler+0x68>)
 80072d0:	4b06      	ldr	r3, [pc, #24]	@ (80072ec <HardFault_Handler+0x6c>)
 80072d2:	2100      	movs	r1, #0
 80072d4:	0018      	movs	r0, r3
 80072d6:	f003 fd27 	bl	800ad28 <HAL_RTCEx_BKUPWrite>
//		HAL_Delay(200);
		HAL_NVIC_SystemReset();		//Software Reset
 80072da:	f000 fdf2 	bl	8007ec2 <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  vTaskSuspendAll();
 80072de:	f008 ff47 	bl	8010170 <vTaskSuspendAll>
 80072e2:	e7fc      	b.n	80072de <HardFault_Handler+0x5e>
 80072e4:	50000c00 	.word	0x50000c00
 80072e8:	0000bbbb 	.word	0x0000bbbb
 80072ec:	20002510 	.word	0x20002510
 80072f0:	08017038 	.word	0x08017038
 80072f4:	08017044 	.word	0x08017044

080072f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80072fc:	4b03      	ldr	r3, [pc, #12]	@ (800730c <TIM2_IRQHandler+0x14>)
 80072fe:	0018      	movs	r0, r3
 8007300:	f004 fd1e 	bl	800bd40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007304:	46c0      	nop			@ (mov r8, r8)
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	200026a0 	.word	0x200026a0

08007310 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007314:	4b03      	ldr	r3, [pc, #12]	@ (8007324 <TIM17_IRQHandler+0x14>)
 8007316:	0018      	movs	r0, r3
 8007318:	f004 fd12 	bl	800bd40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800731c:	46c0      	nop			@ (mov r8, r8)
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	46c0      	nop			@ (mov r8, r8)
 8007324:	20002604 	.word	0x20002604

08007328 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	extended_debug("USART1_IRQHandler\r\n");
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <USART1_IRQHandler+0x1c>)
 800732e:	0018      	movs	r0, r3
 8007330:	f7fe fc24 	bl	8005b7c <extended_debug>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007334:	4b04      	ldr	r3, [pc, #16]	@ (8007348 <USART1_IRQHandler+0x20>)
 8007336:	0018      	movs	r0, r3
 8007338:	f005 fb64 	bl	800ca04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800733c:	46c0      	nop			@ (mov r8, r8)
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	08017050 	.word	0x08017050
 8007348:	200026ec 	.word	0x200026ec

0800734c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	extended_debug("USART2_IRQHandler\r\n");
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <USART2_IRQHandler+0x1c>)
 8007352:	0018      	movs	r0, r3
 8007354:	f7fe fc12 	bl	8005b7c <extended_debug>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007358:	4b04      	ldr	r3, [pc, #16]	@ (800736c <USART2_IRQHandler+0x20>)
 800735a:	0018      	movs	r0, r3
 800735c:	f005 fb52 	bl	800ca04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	08017064 	.word	0x08017064
 800736c:	20002780 	.word	0x20002780

08007370 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */
//	debug("USART3_4_LPUART1_IRQHandler\r\n");
  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <USART3_4_LPUART1_IRQHandler+0x1c>)
 8007376:	0018      	movs	r0, r3
 8007378:	f005 fb44 	bl	800ca04 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <USART3_4_LPUART1_IRQHandler+0x20>)
 800737e:	0018      	movs	r0, r3
 8007380:	f005 fb40 	bl	800ca04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8007384:	46c0      	nop			@ (mov r8, r8)
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	46c0      	nop			@ (mov r8, r8)
 800738c:	20002814 	.word	0x20002814
 8007390:	200028a8 	.word	0x200028a8

08007394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  return 1;
 8007398:	2301      	movs	r3, #1
}
 800739a:	0018      	movs	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <_kill>:

int _kill(int pid, int sig)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80073aa:	f00b fe07 	bl	8012fbc <__errno>
 80073ae:	0003      	movs	r3, r0
 80073b0:	2216      	movs	r2, #22
 80073b2:	601a      	str	r2, [r3, #0]
  return -1;
 80073b4:	2301      	movs	r3, #1
 80073b6:	425b      	negs	r3, r3
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b002      	add	sp, #8
 80073be:	bd80      	pop	{r7, pc}

080073c0 <_exit>:

void _exit (int status)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80073c8:	2301      	movs	r3, #1
 80073ca:	425a      	negs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	0011      	movs	r1, r2
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff ffe5 	bl	80073a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80073d6:	46c0      	nop			@ (mov r8, r8)
 80073d8:	e7fd      	b.n	80073d6 <_exit+0x16>

080073da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e00a      	b.n	8007402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80073ec:	e000      	b.n	80073f0 <_read+0x16>
 80073ee:	bf00      	nop
 80073f0:	0001      	movs	r1, r0
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	60ba      	str	r2, [r7, #8]
 80073f8:	b2ca      	uxtb	r2, r1
 80073fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	3301      	adds	r3, #1
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	dbf0      	blt.n	80073ec <_read+0x12>
  }

  return len;
 800740a:	687b      	ldr	r3, [r7, #4]
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b006      	add	sp, #24
 8007412:	bd80      	pop	{r7, pc}

08007414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e009      	b.n	800743a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	60ba      	str	r2, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	0018      	movs	r0, r3
 8007430:	e000      	b.n	8007434 <_write+0x20>
 8007432:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	3301      	adds	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	dbf1      	blt.n	8007426 <_write+0x12>
  }
  return len;
 8007442:	687b      	ldr	r3, [r7, #4]
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b006      	add	sp, #24
 800744a:	bd80      	pop	{r7, pc}

0800744c <_close>:

int _close(int file)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007454:	2301      	movs	r3, #1
 8007456:	425b      	negs	r3, r3
}
 8007458:	0018      	movs	r0, r3
 800745a:	46bd      	mov	sp, r7
 800745c:	b002      	add	sp, #8
 800745e:	bd80      	pop	{r7, pc}

08007460 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2280      	movs	r2, #128	@ 0x80
 800746e:	0192      	lsls	r2, r2, #6
 8007470:	605a      	str	r2, [r3, #4]
  return 0;
 8007472:	2300      	movs	r3, #0
}
 8007474:	0018      	movs	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <_isatty>:

int _isatty(int file)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007484:	2301      	movs	r3, #1
}
 8007486:	0018      	movs	r0, r3
 8007488:	46bd      	mov	sp, r7
 800748a:	b002      	add	sp, #8
 800748c:	bd80      	pop	{r7, pc}

0800748e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800749a:	2300      	movs	r3, #0
}
 800749c:	0018      	movs	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	b004      	add	sp, #16
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074ac:	4a14      	ldr	r2, [pc, #80]	@ (8007500 <_sbrk+0x5c>)
 80074ae:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <_sbrk+0x60>)
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80074b8:	4b13      	ldr	r3, [pc, #76]	@ (8007508 <_sbrk+0x64>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80074c0:	4b11      	ldr	r3, [pc, #68]	@ (8007508 <_sbrk+0x64>)
 80074c2:	4a12      	ldr	r2, [pc, #72]	@ (800750c <_sbrk+0x68>)
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074c6:	4b10      	ldr	r3, [pc, #64]	@ (8007508 <_sbrk+0x64>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	18d3      	adds	r3, r2, r3
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d207      	bcs.n	80074e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074d4:	f00b fd72 	bl	8012fbc <__errno>
 80074d8:	0003      	movs	r3, r0
 80074da:	220c      	movs	r2, #12
 80074dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074de:	2301      	movs	r3, #1
 80074e0:	425b      	negs	r3, r3
 80074e2:	e009      	b.n	80074f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074e4:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <_sbrk+0x64>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <_sbrk+0x64>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	18d2      	adds	r2, r2, r3
 80074f2:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <_sbrk+0x64>)
 80074f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	0018      	movs	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b006      	add	sp, #24
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20009000 	.word	0x20009000
 8007504:	00000400 	.word	0x00000400
 8007508:	20002650 	.word	0x20002650
 800750c:	20007288 	.word	0x20007288

08007510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007514:	46c0      	nop			@ (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007522:	2310      	movs	r3, #16
 8007524:	18fb      	adds	r3, r7, r3
 8007526:	0018      	movs	r0, r3
 8007528:	2310      	movs	r3, #16
 800752a:	001a      	movs	r2, r3
 800752c:	2100      	movs	r1, #0
 800752e:	f00b fc8b 	bl	8012e48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	0018      	movs	r0, r3
 8007536:	230c      	movs	r3, #12
 8007538:	001a      	movs	r2, r3
 800753a:	2100      	movs	r1, #0
 800753c:	f00b fc84 	bl	8012e48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007540:	4b21      	ldr	r3, [pc, #132]	@ (80075c8 <MX_TIM1_Init+0xac>)
 8007542:	4a22      	ldr	r2, [pc, #136]	@ (80075cc <MX_TIM1_Init+0xb0>)
 8007544:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8007546:	4b20      	ldr	r3, [pc, #128]	@ (80075c8 <MX_TIM1_Init+0xac>)
 8007548:	223f      	movs	r2, #63	@ 0x3f
 800754a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800754c:	4b1e      	ldr	r3, [pc, #120]	@ (80075c8 <MX_TIM1_Init+0xac>)
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007552:	4b1d      	ldr	r3, [pc, #116]	@ (80075c8 <MX_TIM1_Init+0xac>)
 8007554:	4a1e      	ldr	r2, [pc, #120]	@ (80075d0 <MX_TIM1_Init+0xb4>)
 8007556:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007558:	4b1b      	ldr	r3, [pc, #108]	@ (80075c8 <MX_TIM1_Init+0xac>)
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800755e:	4b1a      	ldr	r3, [pc, #104]	@ (80075c8 <MX_TIM1_Init+0xac>)
 8007560:	2200      	movs	r2, #0
 8007562:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007564:	4b18      	ldr	r3, [pc, #96]	@ (80075c8 <MX_TIM1_Init+0xac>)
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800756a:	4b17      	ldr	r3, [pc, #92]	@ (80075c8 <MX_TIM1_Init+0xac>)
 800756c:	0018      	movs	r0, r3
 800756e:	f004 fb33 	bl	800bbd8 <HAL_TIM_Base_Init>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d001      	beq.n	800757a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8007576:	f7ff fbd9 	bl	8006d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800757a:	2110      	movs	r1, #16
 800757c:	187b      	adds	r3, r7, r1
 800757e:	2280      	movs	r2, #128	@ 0x80
 8007580:	0152      	lsls	r2, r2, #5
 8007582:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007584:	187a      	adds	r2, r7, r1
 8007586:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <MX_TIM1_Init+0xac>)
 8007588:	0011      	movs	r1, r2
 800758a:	0018      	movs	r0, r3
 800758c:	f004 fce0 	bl	800bf50 <HAL_TIM_ConfigClockSource>
 8007590:	1e03      	subs	r3, r0, #0
 8007592:	d001      	beq.n	8007598 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007594:	f7ff fbca 	bl	8006d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007598:	1d3b      	adds	r3, r7, #4
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	2200      	movs	r2, #0
 80075a2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075a4:	1d3b      	adds	r3, r7, #4
 80075a6:	2200      	movs	r2, #0
 80075a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80075aa:	1d3a      	adds	r2, r7, #4
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <MX_TIM1_Init+0xac>)
 80075ae:	0011      	movs	r1, r2
 80075b0:	0018      	movs	r0, r3
 80075b2:	f004 feed 	bl	800c390 <HAL_TIMEx_MasterConfigSynchronization>
 80075b6:	1e03      	subs	r3, r0, #0
 80075b8:	d001      	beq.n	80075be <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80075ba:	f7ff fbb7 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80075be:	46c0      	nop			@ (mov r8, r8)
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b008      	add	sp, #32
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	46c0      	nop			@ (mov r8, r8)
 80075c8:	20002654 	.word	0x20002654
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	0000ffff 	.word	0x0000ffff

080075d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80075da:	2310      	movs	r3, #16
 80075dc:	18fb      	adds	r3, r7, r3
 80075de:	0018      	movs	r0, r3
 80075e0:	2310      	movs	r3, #16
 80075e2:	001a      	movs	r2, r3
 80075e4:	2100      	movs	r1, #0
 80075e6:	f00b fc2f 	bl	8012e48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	0018      	movs	r0, r3
 80075ee:	230c      	movs	r3, #12
 80075f0:	001a      	movs	r2, r3
 80075f2:	2100      	movs	r1, #0
 80075f4:	f00b fc28 	bl	8012e48 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80075f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007674 <MX_TIM2_Init+0xa0>)
 80075fa:	2280      	movs	r2, #128	@ 0x80
 80075fc:	05d2      	lsls	r2, r2, #23
 80075fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8007600:	4b1c      	ldr	r3, [pc, #112]	@ (8007674 <MX_TIM2_Init+0xa0>)
 8007602:	223f      	movs	r2, #63	@ 0x3f
 8007604:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007606:	4b1b      	ldr	r3, [pc, #108]	@ (8007674 <MX_TIM2_Init+0xa0>)
 8007608:	2200      	movs	r2, #0
 800760a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800760c:	4b19      	ldr	r3, [pc, #100]	@ (8007674 <MX_TIM2_Init+0xa0>)
 800760e:	2263      	movs	r2, #99	@ 0x63
 8007610:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007612:	4b18      	ldr	r3, [pc, #96]	@ (8007674 <MX_TIM2_Init+0xa0>)
 8007614:	2200      	movs	r2, #0
 8007616:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007618:	4b16      	ldr	r3, [pc, #88]	@ (8007674 <MX_TIM2_Init+0xa0>)
 800761a:	2200      	movs	r2, #0
 800761c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <MX_TIM2_Init+0xa0>)
 8007620:	0018      	movs	r0, r3
 8007622:	f004 fad9 	bl	800bbd8 <HAL_TIM_Base_Init>
 8007626:	1e03      	subs	r3, r0, #0
 8007628:	d001      	beq.n	800762e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800762a:	f7ff fb7f 	bl	8006d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800762e:	2110      	movs	r1, #16
 8007630:	187b      	adds	r3, r7, r1
 8007632:	2280      	movs	r2, #128	@ 0x80
 8007634:	0152      	lsls	r2, r2, #5
 8007636:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007638:	187a      	adds	r2, r7, r1
 800763a:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <MX_TIM2_Init+0xa0>)
 800763c:	0011      	movs	r1, r2
 800763e:	0018      	movs	r0, r3
 8007640:	f004 fc86 	bl	800bf50 <HAL_TIM_ConfigClockSource>
 8007644:	1e03      	subs	r3, r0, #0
 8007646:	d001      	beq.n	800764c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007648:	f7ff fb70 	bl	8006d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	2200      	movs	r2, #0
 8007656:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007658:	1d3a      	adds	r2, r7, #4
 800765a:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <MX_TIM2_Init+0xa0>)
 800765c:	0011      	movs	r1, r2
 800765e:	0018      	movs	r0, r3
 8007660:	f004 fe96 	bl	800c390 <HAL_TIMEx_MasterConfigSynchronization>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d001      	beq.n	800766c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8007668:	f7ff fb60 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800766c:	46c0      	nop			@ (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b008      	add	sp, #32
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200026a0 	.word	0x200026a0

08007678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b093      	sub	sp, #76	@ 0x4c
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007680:	2414      	movs	r4, #20
 8007682:	193b      	adds	r3, r7, r4
 8007684:	0018      	movs	r0, r3
 8007686:	2334      	movs	r3, #52	@ 0x34
 8007688:	001a      	movs	r2, r3
 800768a:	2100      	movs	r1, #0
 800768c:	f00b fbdc 	bl	8012e48 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1f      	ldr	r2, [pc, #124]	@ (8007714 <HAL_TIM_Base_MspInit+0x9c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d11d      	bne.n	80076d6 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800769a:	193b      	adds	r3, r7, r4
 800769c:	2280      	movs	r2, #128	@ 0x80
 800769e:	0392      	lsls	r2, r2, #14
 80076a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80076a2:	193b      	adds	r3, r7, r4
 80076a4:	2200      	movs	r2, #0
 80076a6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076a8:	193b      	adds	r3, r7, r4
 80076aa:	0018      	movs	r0, r3
 80076ac:	f003 f836 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 80076b0:	1e03      	subs	r3, r0, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80076b4:	f7ff fb3a 	bl	8006d2c <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80076b8:	4b17      	ldr	r3, [pc, #92]	@ (8007718 <HAL_TIM_Base_MspInit+0xa0>)
 80076ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076bc:	4b16      	ldr	r3, [pc, #88]	@ (8007718 <HAL_TIM_Base_MspInit+0xa0>)
 80076be:	2180      	movs	r1, #128	@ 0x80
 80076c0:	0109      	lsls	r1, r1, #4
 80076c2:	430a      	orrs	r2, r1
 80076c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80076c6:	4b14      	ldr	r3, [pc, #80]	@ (8007718 <HAL_TIM_Base_MspInit+0xa0>)
 80076c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076ca:	2380      	movs	r3, #128	@ 0x80
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	4013      	ands	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80076d4:	e019      	b.n	800770a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	2380      	movs	r3, #128	@ 0x80
 80076dc:	05db      	lsls	r3, r3, #23
 80076de:	429a      	cmp	r2, r3
 80076e0:	d113      	bne.n	800770a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <HAL_TIM_Base_MspInit+0xa0>)
 80076e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <HAL_TIM_Base_MspInit+0xa0>)
 80076e8:	2101      	movs	r1, #1
 80076ea:	430a      	orrs	r2, r1
 80076ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80076ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007718 <HAL_TIM_Base_MspInit+0xa0>)
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	2201      	movs	r2, #1
 80076f4:	4013      	ands	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2103      	movs	r1, #3
 80076fe:	200f      	movs	r0, #15
 8007700:	f000 fbba 	bl	8007e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007704:	200f      	movs	r0, #15
 8007706:	f000 fbcc 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
}
 800770a:	46c0      	nop			@ (mov r8, r8)
 800770c:	46bd      	mov	sp, r7
 800770e:	b013      	add	sp, #76	@ 0x4c
 8007710:	bd90      	pop	{r4, r7, pc}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40021000 	.word	0x40021000

0800771c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007720:	4b24      	ldr	r3, [pc, #144]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007722:	4a25      	ldr	r2, [pc, #148]	@ (80077b8 <MX_USART1_UART_Init+0x9c>)
 8007724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007726:	4b23      	ldr	r3, [pc, #140]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007728:	22e1      	movs	r2, #225	@ 0xe1
 800772a:	0252      	lsls	r2, r2, #9
 800772c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800772e:	4b21      	ldr	r3, [pc, #132]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007730:	2200      	movs	r2, #0
 8007732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007734:	4b1f      	ldr	r3, [pc, #124]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007736:	2200      	movs	r2, #0
 8007738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800773a:	4b1e      	ldr	r3, [pc, #120]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 800773c:	2200      	movs	r2, #0
 800773e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007740:	4b1c      	ldr	r3, [pc, #112]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007742:	220c      	movs	r2, #12
 8007744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007746:	4b1b      	ldr	r3, [pc, #108]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007748:	2200      	movs	r2, #0
 800774a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800774c:	4b19      	ldr	r3, [pc, #100]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 800774e:	2200      	movs	r2, #0
 8007750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007752:	4b18      	ldr	r3, [pc, #96]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007754:	2200      	movs	r2, #0
 8007756:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007758:	4b16      	ldr	r3, [pc, #88]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 800775a:	2200      	movs	r2, #0
 800775c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800775e:	4b15      	ldr	r3, [pc, #84]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007760:	2200      	movs	r2, #0
 8007762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8007764:	4813      	ldr	r0, [pc, #76]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	f007 f996 	bl	800ea9c <HAL_RS485Ex_Init>
 8007770:	1e03      	subs	r3, r0, #0
 8007772:	d001      	beq.n	8007778 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8007774:	f7ff fada 	bl	8006d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007778:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 800777a:	2100      	movs	r1, #0
 800777c:	0018      	movs	r0, r3
 800777e:	f007 fa8f 	bl	800eca0 <HAL_UARTEx_SetTxFifoThreshold>
 8007782:	1e03      	subs	r3, r0, #0
 8007784:	d001      	beq.n	800778a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8007786:	f7ff fad1 	bl	8006d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800778a:	4b0a      	ldr	r3, [pc, #40]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 800778c:	2100      	movs	r1, #0
 800778e:	0018      	movs	r0, r3
 8007790:	f007 fac6 	bl	800ed20 <HAL_UARTEx_SetRxFifoThreshold>
 8007794:	1e03      	subs	r3, r0, #0
 8007796:	d001      	beq.n	800779c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8007798:	f7ff fac8 	bl	8006d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800779c:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <MX_USART1_UART_Init+0x98>)
 800779e:	0018      	movs	r0, r3
 80077a0:	f007 fa44 	bl	800ec2c <HAL_UARTEx_DisableFifoMode>
 80077a4:	1e03      	subs	r3, r0, #0
 80077a6:	d001      	beq.n	80077ac <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80077a8:	f7ff fac0 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80077ac:	46c0      	nop			@ (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	46c0      	nop			@ (mov r8, r8)
 80077b4:	200026ec 	.word	0x200026ec
 80077b8:	40013800 	.word	0x40013800

080077bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80077c0:	4b25      	ldr	r3, [pc, #148]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077c2:	4a26      	ldr	r2, [pc, #152]	@ (800785c <MX_USART2_UART_Init+0xa0>)
 80077c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80077c6:	4b24      	ldr	r3, [pc, #144]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077c8:	2296      	movs	r2, #150	@ 0x96
 80077ca:	0212      	lsls	r2, r2, #8
 80077cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80077ce:	4b22      	ldr	r3, [pc, #136]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077d0:	2280      	movs	r2, #128	@ 0x80
 80077d2:	0152      	lsls	r2, r2, #5
 80077d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80077d6:	4b20      	ldr	r3, [pc, #128]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077d8:	2200      	movs	r2, #0
 80077da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80077dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077de:	2280      	movs	r2, #128	@ 0x80
 80077e0:	00d2      	lsls	r2, r2, #3
 80077e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80077e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077e6:	220c      	movs	r2, #12
 80077e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80077f0:	4b19      	ldr	r3, [pc, #100]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80077f6:	4b18      	ldr	r3, [pc, #96]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80077fc:	4b16      	ldr	r3, [pc, #88]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 80077fe:	2200      	movs	r2, #0
 8007800:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007802:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 8007804:	2200      	movs	r2, #0
 8007806:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 1, 1) != HAL_OK)
 8007808:	4813      	ldr	r0, [pc, #76]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 800780a:	2301      	movs	r3, #1
 800780c:	2201      	movs	r2, #1
 800780e:	2100      	movs	r1, #0
 8007810:	f007 f944 	bl	800ea9c <HAL_RS485Ex_Init>
 8007814:	1e03      	subs	r3, r0, #0
 8007816:	d001      	beq.n	800781c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8007818:	f7ff fa88 	bl	8006d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800781c:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 800781e:	2100      	movs	r1, #0
 8007820:	0018      	movs	r0, r3
 8007822:	f007 fa3d 	bl	800eca0 <HAL_UARTEx_SetTxFifoThreshold>
 8007826:	1e03      	subs	r3, r0, #0
 8007828:	d001      	beq.n	800782e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800782a:	f7ff fa7f 	bl	8006d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800782e:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 8007830:	2100      	movs	r1, #0
 8007832:	0018      	movs	r0, r3
 8007834:	f007 fa74 	bl	800ed20 <HAL_UARTEx_SetRxFifoThreshold>
 8007838:	1e03      	subs	r3, r0, #0
 800783a:	d001      	beq.n	8007840 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800783c:	f7ff fa76 	bl	8006d2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8007840:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <MX_USART2_UART_Init+0x9c>)
 8007842:	0018      	movs	r0, r3
 8007844:	f007 f9b4 	bl	800ebb0 <HAL_UARTEx_EnableFifoMode>
 8007848:	1e03      	subs	r3, r0, #0
 800784a:	d001      	beq.n	8007850 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800784c:	f7ff fa6e 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007850:	46c0      	nop			@ (mov r8, r8)
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	20002780 	.word	0x20002780
 800785c:	40004400 	.word	0x40004400

08007860 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007864:	4b16      	ldr	r3, [pc, #88]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 8007866:	4a17      	ldr	r2, [pc, #92]	@ (80078c4 <MX_USART3_UART_Init+0x64>)
 8007868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800786a:	4b15      	ldr	r3, [pc, #84]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 800786c:	22e1      	movs	r2, #225	@ 0xe1
 800786e:	0252      	lsls	r2, r2, #9
 8007870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007872:	4b13      	ldr	r3, [pc, #76]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 8007874:	2200      	movs	r2, #0
 8007876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007878:	4b11      	ldr	r3, [pc, #68]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 800787a:	2200      	movs	r2, #0
 800787c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800787e:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 8007880:	2200      	movs	r2, #0
 8007882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007884:	4b0e      	ldr	r3, [pc, #56]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 8007886:	220c      	movs	r2, #12
 8007888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800788a:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 800788c:	2200      	movs	r2, #0
 800788e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007890:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 8007892:	2200      	movs	r2, #0
 8007894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007896:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 8007898:	2200      	movs	r2, #0
 800789a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800789c:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 800789e:	2200      	movs	r2, #0
 80078a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078a2:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80078a8:	4b05      	ldr	r3, [pc, #20]	@ (80078c0 <MX_USART3_UART_Init+0x60>)
 80078aa:	0018      	movs	r0, r3
 80078ac:	f004 fdf6 	bl	800c49c <HAL_UART_Init>
 80078b0:	1e03      	subs	r3, r0, #0
 80078b2:	d001      	beq.n	80078b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80078b4:	f7ff fa3a 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80078b8:	46c0      	nop			@ (mov r8, r8)
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	46c0      	nop			@ (mov r8, r8)
 80078c0:	20002814 	.word	0x20002814
 80078c4:	40004800 	.word	0x40004800

080078c8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80078cc:	4b16      	ldr	r3, [pc, #88]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078ce:	4a17      	ldr	r2, [pc, #92]	@ (800792c <MX_USART4_UART_Init+0x64>)
 80078d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80078d2:	4b15      	ldr	r3, [pc, #84]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078d4:	22e1      	movs	r2, #225	@ 0xe1
 80078d6:	0252      	lsls	r2, r2, #9
 80078d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80078da:	4b13      	ldr	r3, [pc, #76]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078dc:	2200      	movs	r2, #0
 80078de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80078e0:	4b11      	ldr	r3, [pc, #68]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80078e6:	4b10      	ldr	r3, [pc, #64]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80078ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078ee:	220c      	movs	r2, #12
 80078f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80078f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 8007900:	2200      	movs	r2, #0
 8007902:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007904:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 8007906:	2200      	movs	r2, #0
 8007908:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800790a:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 800790c:	2200      	movs	r2, #0
 800790e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007910:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <MX_USART4_UART_Init+0x60>)
 8007912:	0018      	movs	r0, r3
 8007914:	f004 fdc2 	bl	800c49c <HAL_UART_Init>
 8007918:	1e03      	subs	r3, r0, #0
 800791a:	d001      	beq.n	8007920 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 800791c:	f7ff fa06 	bl	8006d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007920:	46c0      	nop			@ (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	46c0      	nop			@ (mov r8, r8)
 8007928:	200028a8 	.word	0x200028a8
 800792c:	40004c00 	.word	0x40004c00

08007930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007930:	b590      	push	{r4, r7, lr}
 8007932:	b09d      	sub	sp, #116	@ 0x74
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007938:	235c      	movs	r3, #92	@ 0x5c
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	0018      	movs	r0, r3
 800793e:	2314      	movs	r3, #20
 8007940:	001a      	movs	r2, r3
 8007942:	2100      	movs	r1, #0
 8007944:	f00b fa80 	bl	8012e48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007948:	2428      	movs	r4, #40	@ 0x28
 800794a:	193b      	adds	r3, r7, r4
 800794c:	0018      	movs	r0, r3
 800794e:	2334      	movs	r3, #52	@ 0x34
 8007950:	001a      	movs	r2, r3
 8007952:	2100      	movs	r1, #0
 8007954:	f00b fa78 	bl	8012e48 <memset>
  if(uartHandle->Instance==USART1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4aa1      	ldr	r2, [pc, #644]	@ (8007be4 <HAL_UART_MspInit+0x2b4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d15c      	bne.n	8007a1c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007962:	193b      	adds	r3, r7, r4
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007968:	193b      	adds	r3, r7, r4
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800796e:	193b      	adds	r3, r7, r4
 8007970:	0018      	movs	r0, r3
 8007972:	f002 fed3 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 8007976:	1e03      	subs	r3, r0, #0
 8007978:	d001      	beq.n	800797e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800797a:	f7ff f9d7 	bl	8006d2c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800797e:	4b9a      	ldr	r3, [pc, #616]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007980:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007982:	4b99      	ldr	r3, [pc, #612]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007984:	2180      	movs	r1, #128	@ 0x80
 8007986:	01c9      	lsls	r1, r1, #7
 8007988:	430a      	orrs	r2, r1
 800798a:	641a      	str	r2, [r3, #64]	@ 0x40
 800798c:	4b96      	ldr	r3, [pc, #600]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 800798e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007990:	2380      	movs	r3, #128	@ 0x80
 8007992:	01db      	lsls	r3, r3, #7
 8007994:	4013      	ands	r3, r2
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800799a:	4b93      	ldr	r3, [pc, #588]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 800799c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800799e:	4b92      	ldr	r3, [pc, #584]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 80079a0:	2102      	movs	r1, #2
 80079a2:	430a      	orrs	r2, r1
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80079a6:	4b90      	ldr	r3, [pc, #576]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 80079a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079aa:	2202      	movs	r2, #2
 80079ac:	4013      	ands	r3, r2
 80079ae:	623b      	str	r3, [r7, #32]
 80079b0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80079b2:	245c      	movs	r4, #92	@ 0x5c
 80079b4:	193b      	adds	r3, r7, r4
 80079b6:	2208      	movs	r2, #8
 80079b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ba:	193b      	adds	r3, r7, r4
 80079bc:	2202      	movs	r2, #2
 80079be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c0:	193b      	adds	r3, r7, r4
 80079c2:	2200      	movs	r2, #0
 80079c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079c6:	193b      	adds	r3, r7, r4
 80079c8:	2200      	movs	r2, #0
 80079ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80079cc:	193b      	adds	r3, r7, r4
 80079ce:	2204      	movs	r2, #4
 80079d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079d2:	193b      	adds	r3, r7, r4
 80079d4:	4a85      	ldr	r2, [pc, #532]	@ (8007bec <HAL_UART_MspInit+0x2bc>)
 80079d6:	0019      	movs	r1, r3
 80079d8:	0010      	movs	r0, r2
 80079da:	f000 fcfd 	bl	80083d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80079de:	0021      	movs	r1, r4
 80079e0:	187b      	adds	r3, r7, r1
 80079e2:	22c0      	movs	r2, #192	@ 0xc0
 80079e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e6:	187b      	adds	r3, r7, r1
 80079e8:	2202      	movs	r2, #2
 80079ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079f2:	187b      	adds	r3, r7, r1
 80079f4:	2200      	movs	r2, #0
 80079f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80079f8:	187b      	adds	r3, r7, r1
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079fe:	187b      	adds	r3, r7, r1
 8007a00:	4a7a      	ldr	r2, [pc, #488]	@ (8007bec <HAL_UART_MspInit+0x2bc>)
 8007a02:	0019      	movs	r1, r3
 8007a04:	0010      	movs	r0, r2
 8007a06:	f000 fce7 	bl	80083d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2103      	movs	r1, #3
 8007a0e:	201b      	movs	r0, #27
 8007a10:	f000 fa32 	bl	8007e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007a14:	201b      	movs	r0, #27
 8007a16:	f000 fa44 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007a1a:	e0df      	b.n	8007bdc <HAL_UART_MspInit+0x2ac>
  else if(uartHandle->Instance==USART2)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a73      	ldr	r2, [pc, #460]	@ (8007bf0 <HAL_UART_MspInit+0x2c0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d15d      	bne.n	8007ae2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007a26:	2128      	movs	r1, #40	@ 0x28
 8007a28:	187b      	adds	r3, r7, r1
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	2200      	movs	r2, #0
 8007a32:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	0018      	movs	r0, r3
 8007a38:	f002 fe70 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d001      	beq.n	8007a44 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8007a40:	f7ff f974 	bl	8006d2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a44:	4b68      	ldr	r3, [pc, #416]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a48:	4b67      	ldr	r3, [pc, #412]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007a4a:	2180      	movs	r1, #128	@ 0x80
 8007a4c:	0289      	lsls	r1, r1, #10
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a52:	4b65      	ldr	r3, [pc, #404]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a56:	2380      	movs	r3, #128	@ 0x80
 8007a58:	029b      	lsls	r3, r3, #10
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a60:	4b61      	ldr	r3, [pc, #388]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a64:	4b60      	ldr	r3, [pc, #384]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007a66:	2108      	movs	r1, #8
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a70:	2208      	movs	r2, #8
 8007a72:	4013      	ands	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007a78:	245c      	movs	r4, #92	@ 0x5c
 8007a7a:	193b      	adds	r3, r7, r4
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a80:	193b      	adds	r3, r7, r4
 8007a82:	2202      	movs	r2, #2
 8007a84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007a86:	193b      	adds	r3, r7, r4
 8007a88:	2202      	movs	r2, #2
 8007a8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a8c:	193b      	adds	r3, r7, r4
 8007a8e:	2200      	movs	r2, #0
 8007a90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8007a92:	193b      	adds	r3, r7, r4
 8007a94:	2200      	movs	r2, #0
 8007a96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a98:	193b      	adds	r3, r7, r4
 8007a9a:	4a56      	ldr	r2, [pc, #344]	@ (8007bf4 <HAL_UART_MspInit+0x2c4>)
 8007a9c:	0019      	movs	r1, r3
 8007a9e:	0010      	movs	r0, r2
 8007aa0:	f000 fc9a 	bl	80083d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007aa4:	0021      	movs	r1, r4
 8007aa6:	187b      	adds	r3, r7, r1
 8007aa8:	2260      	movs	r2, #96	@ 0x60
 8007aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	2202      	movs	r2, #2
 8007ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab2:	187b      	adds	r3, r7, r1
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ab8:	187b      	adds	r3, r7, r1
 8007aba:	2200      	movs	r2, #0
 8007abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8007abe:	187b      	adds	r3, r7, r1
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ac4:	187b      	adds	r3, r7, r1
 8007ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf4 <HAL_UART_MspInit+0x2c4>)
 8007ac8:	0019      	movs	r1, r3
 8007aca:	0010      	movs	r0, r2
 8007acc:	f000 fc84 	bl	80083d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2103      	movs	r1, #3
 8007ad4:	201c      	movs	r0, #28
 8007ad6:	f000 f9cf 	bl	8007e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007ada:	201c      	movs	r0, #28
 8007adc:	f000 f9e1 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
}
 8007ae0:	e07c      	b.n	8007bdc <HAL_UART_MspInit+0x2ac>
  else if(uartHandle->Instance==USART3)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a44      	ldr	r2, [pc, #272]	@ (8007bf8 <HAL_UART_MspInit+0x2c8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d139      	bne.n	8007b60 <HAL_UART_MspInit+0x230>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007aec:	4b3e      	ldr	r3, [pc, #248]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007af0:	4b3d      	ldr	r3, [pc, #244]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007af2:	2180      	movs	r1, #128	@ 0x80
 8007af4:	02c9      	lsls	r1, r1, #11
 8007af6:	430a      	orrs	r2, r1
 8007af8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007afa:	4b3b      	ldr	r3, [pc, #236]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007afe:	2380      	movs	r3, #128	@ 0x80
 8007b00:	02db      	lsls	r3, r3, #11
 8007b02:	4013      	ands	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b08:	4b37      	ldr	r3, [pc, #220]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b0c:	4b36      	ldr	r3, [pc, #216]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b0e:	2102      	movs	r1, #2
 8007b10:	430a      	orrs	r2, r1
 8007b12:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b14:	4b34      	ldr	r3, [pc, #208]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b18:	2202      	movs	r2, #2
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007b20:	215c      	movs	r1, #92	@ 0x5c
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	22c0      	movs	r2, #192	@ 0xc0
 8007b26:	0092      	lsls	r2, r2, #2
 8007b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2a:	187b      	adds	r3, r7, r1
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b30:	187b      	adds	r3, r7, r1
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b36:	187b      	adds	r3, r7, r1
 8007b38:	2200      	movs	r2, #0
 8007b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007b3c:	187b      	adds	r3, r7, r1
 8007b3e:	2204      	movs	r2, #4
 8007b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b42:	187b      	adds	r3, r7, r1
 8007b44:	4a29      	ldr	r2, [pc, #164]	@ (8007bec <HAL_UART_MspInit+0x2bc>)
 8007b46:	0019      	movs	r1, r3
 8007b48:	0010      	movs	r0, r2
 8007b4a:	f000 fc45 	bl	80083d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2103      	movs	r1, #3
 8007b52:	201d      	movs	r0, #29
 8007b54:	f000 f990 	bl	8007e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007b58:	201d      	movs	r0, #29
 8007b5a:	f000 f9a2 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
}
 8007b5e:	e03d      	b.n	8007bdc <HAL_UART_MspInit+0x2ac>
  else if(uartHandle->Instance==USART4)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a25      	ldr	r2, [pc, #148]	@ (8007bfc <HAL_UART_MspInit+0x2cc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d138      	bne.n	8007bdc <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b70:	2180      	movs	r1, #128	@ 0x80
 8007b72:	0309      	lsls	r1, r1, #12
 8007b74:	430a      	orrs	r2, r1
 8007b76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b7c:	2380      	movs	r3, #128	@ 0x80
 8007b7e:	031b      	lsls	r3, r3, #12
 8007b80:	4013      	ands	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b86:	4b18      	ldr	r3, [pc, #96]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b8a:	4b17      	ldr	r3, [pc, #92]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b92:	4b15      	ldr	r3, [pc, #84]	@ (8007be8 <HAL_UART_MspInit+0x2b8>)
 8007b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b96:	2204      	movs	r2, #4
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8007b9e:	215c      	movs	r1, #92	@ 0x5c
 8007ba0:	187b      	adds	r3, r7, r1
 8007ba2:	22c0      	movs	r2, #192	@ 0xc0
 8007ba4:	0112      	lsls	r2, r2, #4
 8007ba6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba8:	187b      	adds	r3, r7, r1
 8007baa:	2202      	movs	r2, #2
 8007bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bae:	187b      	adds	r3, r7, r1
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bb4:	187b      	adds	r3, r7, r1
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8007c00 <HAL_UART_MspInit+0x2d0>)
 8007bc4:	0019      	movs	r1, r3
 8007bc6:	0010      	movs	r0, r2
 8007bc8:	f000 fc06 	bl	80083d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2103      	movs	r1, #3
 8007bd0:	201d      	movs	r0, #29
 8007bd2:	f000 f951 	bl	8007e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007bd6:	201d      	movs	r0, #29
 8007bd8:	f000 f963 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
}
 8007bdc:	46c0      	nop			@ (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b01d      	add	sp, #116	@ 0x74
 8007be2:	bd90      	pop	{r4, r7, pc}
 8007be4:	40013800 	.word	0x40013800
 8007be8:	40021000 	.word	0x40021000
 8007bec:	50000400 	.word	0x50000400
 8007bf0:	40004400 	.word	0x40004400
 8007bf4:	50000c00 	.word	0x50000c00
 8007bf8:	40004800 	.word	0x40004800
 8007bfc:	40004c00 	.word	0x40004c00
 8007c00:	50000800 	.word	0x50000800

08007c04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007c04:	480d      	ldr	r0, [pc, #52]	@ (8007c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007c06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007c08:	f7ff fc82 	bl	8007510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007c0c:	480c      	ldr	r0, [pc, #48]	@ (8007c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8007c0e:	490d      	ldr	r1, [pc, #52]	@ (8007c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007c10:	4a0d      	ldr	r2, [pc, #52]	@ (8007c48 <LoopForever+0xe>)
  movs r3, #0
 8007c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c14:	e002      	b.n	8007c1c <LoopCopyDataInit>

08007c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c1a:	3304      	adds	r3, #4

08007c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c20:	d3f9      	bcc.n	8007c16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c22:	4a0a      	ldr	r2, [pc, #40]	@ (8007c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007c24:	4c0a      	ldr	r4, [pc, #40]	@ (8007c50 <LoopForever+0x16>)
  movs r3, #0
 8007c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c28:	e001      	b.n	8007c2e <LoopFillZerobss>

08007c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c2c:	3204      	adds	r2, #4

08007c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c30:	d3fb      	bcc.n	8007c2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007c32:	f00b f9c9 	bl	8012fc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007c36:	f7fe ff8d 	bl	8006b54 <main>

08007c3a <LoopForever>:

LoopForever:
  b LoopForever
 8007c3a:	e7fe      	b.n	8007c3a <LoopForever>
  ldr   r0, =_estack
 8007c3c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c44:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8007c48:	08017704 	.word	0x08017704
  ldr r2, =_sbss
 8007c4c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8007c50:	20007288 	.word	0x20007288

08007c54 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c54:	e7fe      	b.n	8007c54 <ADC1_COMP_IRQHandler>
	...

08007c58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007c5e:	1dfb      	adds	r3, r7, #7
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c64:	4b0b      	ldr	r3, [pc, #44]	@ (8007c94 <HAL_Init+0x3c>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <HAL_Init+0x3c>)
 8007c6a:	2180      	movs	r1, #128	@ 0x80
 8007c6c:	0049      	lsls	r1, r1, #1
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c72:	2003      	movs	r0, #3
 8007c74:	f7ff fa78 	bl	8007168 <HAL_InitTick>
 8007c78:	1e03      	subs	r3, r0, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007c7c:	1dfb      	adds	r3, r7, #7
 8007c7e:	2201      	movs	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e001      	b.n	8007c88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007c84:	f7ff fa40 	bl	8007108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007c88:	1dfb      	adds	r3, r7, #7
 8007c8a:	781b      	ldrb	r3, [r3, #0]
}
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b002      	add	sp, #8
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40022000 	.word	0x40022000

08007c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <HAL_IncTick+0x1c>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	001a      	movs	r2, r3
 8007ca2:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <HAL_IncTick+0x20>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	18d2      	adds	r2, r2, r3
 8007ca8:	4b03      	ldr	r3, [pc, #12]	@ (8007cb8 <HAL_IncTick+0x20>)
 8007caa:	601a      	str	r2, [r3, #0]
}
 8007cac:	46c0      	nop			@ (mov r8, r8)
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	46c0      	nop			@ (mov r8, r8)
 8007cb4:	20000078 	.word	0x20000078
 8007cb8:	2000293c 	.word	0x2000293c

08007cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8007cc0:	4b02      	ldr	r3, [pc, #8]	@ (8007ccc <HAL_GetTick+0x10>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
}
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	46c0      	nop			@ (mov r8, r8)
 8007ccc:	2000293c 	.word	0x2000293c

08007cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cd8:	f7ff fff0 	bl	8007cbc <HAL_GetTick>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	d005      	beq.n	8007cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007cea:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <HAL_Delay+0x44>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	001a      	movs	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007cf6:	46c0      	nop			@ (mov r8, r8)
 8007cf8:	f7ff ffe0 	bl	8007cbc <HAL_GetTick>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d8f7      	bhi.n	8007cf8 <HAL_Delay+0x28>
  {
  }
}
 8007d08:	46c0      	nop			@ (mov r8, r8)
 8007d0a:	46c0      	nop			@ (mov r8, r8)
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b004      	add	sp, #16
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	46c0      	nop			@ (mov r8, r8)
 8007d14:	20000078 	.word	0x20000078

08007d18 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007d20:	4b06      	ldr	r3, [pc, #24]	@ (8007d3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a06      	ldr	r2, [pc, #24]	@ (8007d40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	0019      	movs	r1, r3
 8007d2a:	4b04      	ldr	r3, [pc, #16]	@ (8007d3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
}
 8007d32:	46c0      	nop			@ (mov r8, r8)
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b002      	add	sp, #8
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	46c0      	nop			@ (mov r8, r8)
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	fffff9ff 	.word	0xfffff9ff

08007d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	0002      	movs	r2, r0
 8007d4c:	1dfb      	adds	r3, r7, #7
 8007d4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007d50:	1dfb      	adds	r3, r7, #7
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d56:	d809      	bhi.n	8007d6c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d58:	1dfb      	adds	r3, r7, #7
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	001a      	movs	r2, r3
 8007d5e:	231f      	movs	r3, #31
 8007d60:	401a      	ands	r2, r3
 8007d62:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <__NVIC_EnableIRQ+0x30>)
 8007d64:	2101      	movs	r1, #1
 8007d66:	4091      	lsls	r1, r2
 8007d68:	000a      	movs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007d6c:	46c0      	nop			@ (mov r8, r8)
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b002      	add	sp, #8
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	e000e100 	.word	0xe000e100

08007d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	0002      	movs	r2, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	1dfb      	adds	r3, r7, #7
 8007d84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007d86:	1dfb      	adds	r3, r7, #7
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d8c:	d828      	bhi.n	8007de0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e4c <__NVIC_SetPriority+0xd4>)
 8007d90:	1dfb      	adds	r3, r7, #7
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	089b      	lsrs	r3, r3, #2
 8007d98:	33c0      	adds	r3, #192	@ 0xc0
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	589b      	ldr	r3, [r3, r2]
 8007d9e:	1dfa      	adds	r2, r7, #7
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	0011      	movs	r1, r2
 8007da4:	2203      	movs	r2, #3
 8007da6:	400a      	ands	r2, r1
 8007da8:	00d2      	lsls	r2, r2, #3
 8007daa:	21ff      	movs	r1, #255	@ 0xff
 8007dac:	4091      	lsls	r1, r2
 8007dae:	000a      	movs	r2, r1
 8007db0:	43d2      	mvns	r2, r2
 8007db2:	401a      	ands	r2, r3
 8007db4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	019b      	lsls	r3, r3, #6
 8007dba:	22ff      	movs	r2, #255	@ 0xff
 8007dbc:	401a      	ands	r2, r3
 8007dbe:	1dfb      	adds	r3, r7, #7
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	4003      	ands	r3, r0
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007dcc:	481f      	ldr	r0, [pc, #124]	@ (8007e4c <__NVIC_SetPriority+0xd4>)
 8007dce:	1dfb      	adds	r3, r7, #7
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	089b      	lsrs	r3, r3, #2
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	33c0      	adds	r3, #192	@ 0xc0
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007dde:	e031      	b.n	8007e44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007de0:	4a1b      	ldr	r2, [pc, #108]	@ (8007e50 <__NVIC_SetPriority+0xd8>)
 8007de2:	1dfb      	adds	r3, r7, #7
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	0019      	movs	r1, r3
 8007de8:	230f      	movs	r3, #15
 8007dea:	400b      	ands	r3, r1
 8007dec:	3b08      	subs	r3, #8
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	3306      	adds	r3, #6
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	18d3      	adds	r3, r2, r3
 8007df6:	3304      	adds	r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	1dfa      	adds	r2, r7, #7
 8007dfc:	7812      	ldrb	r2, [r2, #0]
 8007dfe:	0011      	movs	r1, r2
 8007e00:	2203      	movs	r2, #3
 8007e02:	400a      	ands	r2, r1
 8007e04:	00d2      	lsls	r2, r2, #3
 8007e06:	21ff      	movs	r1, #255	@ 0xff
 8007e08:	4091      	lsls	r1, r2
 8007e0a:	000a      	movs	r2, r1
 8007e0c:	43d2      	mvns	r2, r2
 8007e0e:	401a      	ands	r2, r3
 8007e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	019b      	lsls	r3, r3, #6
 8007e16:	22ff      	movs	r2, #255	@ 0xff
 8007e18:	401a      	ands	r2, r3
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	0018      	movs	r0, r3
 8007e20:	2303      	movs	r3, #3
 8007e22:	4003      	ands	r3, r0
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e28:	4809      	ldr	r0, [pc, #36]	@ (8007e50 <__NVIC_SetPriority+0xd8>)
 8007e2a:	1dfb      	adds	r3, r7, #7
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	001c      	movs	r4, r3
 8007e30:	230f      	movs	r3, #15
 8007e32:	4023      	ands	r3, r4
 8007e34:	3b08      	subs	r3, #8
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	3306      	adds	r3, #6
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	18c3      	adds	r3, r0, r3
 8007e40:	3304      	adds	r3, #4
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	46c0      	nop			@ (mov r8, r8)
 8007e46:	46bd      	mov	sp, r7
 8007e48:	b003      	add	sp, #12
 8007e4a:	bd90      	pop	{r4, r7, pc}
 8007e4c:	e000e100 	.word	0xe000e100
 8007e50:	e000ed00 	.word	0xe000ed00

08007e54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e58:	f3bf 8f4f 	dsb	sy
}
 8007e5c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e5e:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <__NVIC_SystemReset+0x1c>)
 8007e60:	4a04      	ldr	r2, [pc, #16]	@ (8007e74 <__NVIC_SystemReset+0x20>)
 8007e62:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e64:	f3bf 8f4f 	dsb	sy
}
 8007e68:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007e6a:	46c0      	nop			@ (mov r8, r8)
 8007e6c:	e7fd      	b.n	8007e6a <__NVIC_SystemReset+0x16>
 8007e6e:	46c0      	nop			@ (mov r8, r8)
 8007e70:	e000ed00 	.word	0xe000ed00
 8007e74:	05fa0004 	.word	0x05fa0004

08007e78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	210f      	movs	r1, #15
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	1c02      	adds	r2, r0, #0
 8007e88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	187b      	adds	r3, r7, r1
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	b25b      	sxtb	r3, r3
 8007e92:	0011      	movs	r1, r2
 8007e94:	0018      	movs	r0, r3
 8007e96:	f7ff ff6f 	bl	8007d78 <__NVIC_SetPriority>
}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b004      	add	sp, #16
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	0002      	movs	r2, r0
 8007eaa:	1dfb      	adds	r3, r7, #7
 8007eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007eae:	1dfb      	adds	r3, r7, #7
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	f7ff ff45 	bl	8007d44 <__NVIC_EnableIRQ>
}
 8007eba:	46c0      	nop			@ (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007ec6:	f7ff ffc5 	bl	8007e54 <__NVIC_SystemReset>
	...

08007ecc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e050      	b.n	8007f80 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2225      	movs	r2, #37	@ 0x25
 8007ee2:	5c9b      	ldrb	r3, [r3, r2]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d008      	beq.n	8007efc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2204      	movs	r2, #4
 8007eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	@ 0x24
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e041      	b.n	8007f80 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	210e      	movs	r1, #14
 8007f08:	438a      	bics	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	491c      	ldr	r1, [pc, #112]	@ (8007f88 <HAL_DMA_Abort+0xbc>)
 8007f18:	400a      	ands	r2, r1
 8007f1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2101      	movs	r1, #1
 8007f28:	438a      	bics	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007f2c:	4b17      	ldr	r3, [pc, #92]	@ (8007f8c <HAL_DMA_Abort+0xc0>)
 8007f2e:	6859      	ldr	r1, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f34:	221c      	movs	r2, #28
 8007f36:	4013      	ands	r3, r2
 8007f38:	2201      	movs	r2, #1
 8007f3a:	409a      	lsls	r2, r3
 8007f3c:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <HAL_DMA_Abort+0xc0>)
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007f4a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f5e:	490a      	ldr	r1, [pc, #40]	@ (8007f88 <HAL_DMA_Abort+0xbc>)
 8007f60:	400a      	ands	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007f6c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2225      	movs	r2, #37	@ 0x25
 8007f72:	2101      	movs	r1, #1
 8007f74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2224      	movs	r2, #36	@ 0x24
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	fffffeff 	.word	0xfffffeff
 8007f8c:	40020000 	.word	0x40020000

08007f90 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f98:	210f      	movs	r1, #15
 8007f9a:	187b      	adds	r3, r7, r1
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2225      	movs	r2, #37	@ 0x25
 8007fa4:	5c9b      	ldrb	r3, [r3, r2]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d006      	beq.n	8007fba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007fb2:	187b      	adds	r3, r7, r1
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e049      	b.n	800804e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	210e      	movs	r1, #14
 8007fc6:	438a      	bics	r2, r1
 8007fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	438a      	bics	r2, r1
 8007fd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe4:	491d      	ldr	r1, [pc, #116]	@ (800805c <HAL_DMA_Abort_IT+0xcc>)
 8007fe6:	400a      	ands	r2, r1
 8007fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007fea:	4b1d      	ldr	r3, [pc, #116]	@ (8008060 <HAL_DMA_Abort_IT+0xd0>)
 8007fec:	6859      	ldr	r1, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff2:	221c      	movs	r2, #28
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	4b19      	ldr	r3, [pc, #100]	@ (8008060 <HAL_DMA_Abort_IT+0xd0>)
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008008:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00c      	beq.n	800802c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801c:	490f      	ldr	r1, [pc, #60]	@ (800805c <HAL_DMA_Abort_IT+0xcc>)
 800801e:	400a      	ands	r2, r1
 8008020:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800802a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2225      	movs	r2, #37	@ 0x25
 8008030:	2101      	movs	r1, #1
 8008032:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2224      	movs	r2, #36	@ 0x24
 8008038:	2100      	movs	r1, #0
 800803a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	0010      	movs	r0, r2
 800804c:	4798      	blx	r3
    }
  }
  return status;
 800804e:	230f      	movs	r3, #15
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	781b      	ldrb	r3, [r3, #0]
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	b004      	add	sp, #16
 800805a:	bd80      	pop	{r7, pc}
 800805c:	fffffeff 	.word	0xfffffeff
 8008060:	40020000 	.word	0x40020000

08008064 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008070:	0018      	movs	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	b002      	add	sp, #8
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008078:	b5b0      	push	{r4, r5, r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603a      	str	r2, [r7, #0]
 8008084:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008086:	4b21      	ldr	r3, [pc, #132]	@ (800810c <HAL_FLASH_Program+0x94>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_FLASH_Program+0x1a>
 800808e:	2302      	movs	r3, #2
 8008090:	e038      	b.n	8008104 <HAL_FLASH_Program+0x8c>
 8008092:	4b1e      	ldr	r3, [pc, #120]	@ (800810c <HAL_FLASH_Program+0x94>)
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008098:	4b1c      	ldr	r3, [pc, #112]	@ (800810c <HAL_FLASH_Program+0x94>)
 800809a:	2200      	movs	r2, #0
 800809c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800809e:	2517      	movs	r5, #23
 80080a0:	197c      	adds	r4, r7, r5
 80080a2:	23fa      	movs	r3, #250	@ 0xfa
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	0018      	movs	r0, r3
 80080a8:	f000 f884 	bl	80081b4 <FLASH_WaitForLastOperation>
 80080ac:	0003      	movs	r3, r0
 80080ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80080b0:	197b      	adds	r3, r7, r5
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d11f      	bne.n	80080f8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d106      	bne.n	80080cc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	0008      	movs	r0, r1
 80080c6:	f000 f8c3 	bl	8008250 <FLASH_Program_DoubleWord>
 80080ca:	e005      	b.n	80080d8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	0011      	movs	r1, r2
 80080d2:	0018      	movs	r0, r3
 80080d4:	f00e fbd0 	bl	8016878 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80080d8:	2317      	movs	r3, #23
 80080da:	18fc      	adds	r4, r7, r3
 80080dc:	23fa      	movs	r3, #250	@ 0xfa
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	0018      	movs	r0, r3
 80080e2:	f000 f867 	bl	80081b4 <FLASH_WaitForLastOperation>
 80080e6:	0003      	movs	r3, r0
 80080e8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80080ea:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <HAL_FLASH_Program+0x98>)
 80080ec:	695a      	ldr	r2, [r3, #20]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	43d9      	mvns	r1, r3
 80080f2:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <HAL_FLASH_Program+0x98>)
 80080f4:	400a      	ands	r2, r1
 80080f6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80080f8:	4b04      	ldr	r3, [pc, #16]	@ (800810c <HAL_FLASH_Program+0x94>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80080fe:	2317      	movs	r3, #23
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	781b      	ldrb	r3, [r3, #0]
}
 8008104:	0018      	movs	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	b006      	add	sp, #24
 800810a:	bdb0      	pop	{r4, r5, r7, pc}
 800810c:	20002940 	.word	0x20002940
 8008110:	40022000 	.word	0x40022000

08008114 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800811a:	1dfb      	adds	r3, r7, #7
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008120:	4b0b      	ldr	r3, [pc, #44]	@ (8008150 <HAL_FLASH_Unlock+0x3c>)
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	da0c      	bge.n	8008142 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008128:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <HAL_FLASH_Unlock+0x3c>)
 800812a:	4a0a      	ldr	r2, [pc, #40]	@ (8008154 <HAL_FLASH_Unlock+0x40>)
 800812c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800812e:	4b08      	ldr	r3, [pc, #32]	@ (8008150 <HAL_FLASH_Unlock+0x3c>)
 8008130:	4a09      	ldr	r2, [pc, #36]	@ (8008158 <HAL_FLASH_Unlock+0x44>)
 8008132:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008134:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <HAL_FLASH_Unlock+0x3c>)
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da02      	bge.n	8008142 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800813c:	1dfb      	adds	r3, r7, #7
 800813e:	2201      	movs	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008142:	1dfb      	adds	r3, r7, #7
 8008144:	781b      	ldrb	r3, [r3, #0]
}
 8008146:	0018      	movs	r0, r3
 8008148:	46bd      	mov	sp, r7
 800814a:	b002      	add	sp, #8
 800814c:	bd80      	pop	{r7, pc}
 800814e:	46c0      	nop			@ (mov r8, r8)
 8008150:	40022000 	.word	0x40022000
 8008154:	45670123 	.word	0x45670123
 8008158:	cdef89ab 	.word	0xcdef89ab

0800815c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008162:	1dfb      	adds	r3, r7, #7
 8008164:	2201      	movs	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008168:	23fa      	movs	r3, #250	@ 0xfa
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	0018      	movs	r0, r3
 800816e:	f000 f821 	bl	80081b4 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008172:	4b0a      	ldr	r3, [pc, #40]	@ (800819c <HAL_FLASH_Lock+0x40>)
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	4b09      	ldr	r3, [pc, #36]	@ (800819c <HAL_FLASH_Lock+0x40>)
 8008178:	2180      	movs	r1, #128	@ 0x80
 800817a:	0609      	lsls	r1, r1, #24
 800817c:	430a      	orrs	r2, r1
 800817e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008180:	4b06      	ldr	r3, [pc, #24]	@ (800819c <HAL_FLASH_Lock+0x40>)
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	da02      	bge.n	800818e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008188:	1dfb      	adds	r3, r7, #7
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800818e:	1dfb      	adds	r3, r7, #7
 8008190:	781b      	ldrb	r3, [r3, #0]
}
 8008192:	0018      	movs	r0, r3
 8008194:	46bd      	mov	sp, r7
 8008196:	b002      	add	sp, #8
 8008198:	bd80      	pop	{r7, pc}
 800819a:	46c0      	nop			@ (mov r8, r8)
 800819c:	40022000 	.word	0x40022000

080081a0 <HAL_FLASH_GetError>:
  *            @arg @ref HAL_FLASH_ERROR_OPTV Option validity error
  *            @arg @ref HAL_FLASH_ERROR_ECCD two ECC errors have been detected
  * @note (*) availability depends on devices
  */
uint32_t HAL_FLASH_GetError(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80081a4:	4b02      	ldr	r3, [pc, #8]	@ (80081b0 <HAL_FLASH_GetError+0x10>)
 80081a6:	685b      	ldr	r3, [r3, #4]
}
 80081a8:	0018      	movs	r0, r3
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	20002940 	.word	0x20002940

080081b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80081bc:	f7ff fd7e 	bl	8007cbc <HAL_GetTick>
 80081c0:	0003      	movs	r3, r0
 80081c2:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80081c4:	2380      	movs	r3, #128	@ 0x80
 80081c6:	025b      	lsls	r3, r3, #9
 80081c8:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80081ca:	e00c      	b.n	80081e6 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3301      	adds	r3, #1
 80081d0:	d009      	beq.n	80081e6 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80081d2:	f7ff fd73 	bl	8007cbc <HAL_GetTick>
 80081d6:	0002      	movs	r2, r0
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d801      	bhi.n	80081e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e028      	b.n	8008238 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80081e6:	4b16      	ldr	r3, [pc, #88]	@ (8008240 <FLASH_WaitForLastOperation+0x8c>)
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4013      	ands	r3, r2
 80081ee:	d1ed      	bne.n	80081cc <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80081f0:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <FLASH_WaitForLastOperation+0x8c>)
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	4a13      	ldr	r2, [pc, #76]	@ (8008244 <FLASH_WaitForLastOperation+0x90>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80081fa:	4b11      	ldr	r3, [pc, #68]	@ (8008240 <FLASH_WaitForLastOperation+0x8c>)
 80081fc:	4a12      	ldr	r2, [pc, #72]	@ (8008248 <FLASH_WaitForLastOperation+0x94>)
 80081fe:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d011      	beq.n	800822a <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008206:	4b11      	ldr	r3, [pc, #68]	@ (800824c <FLASH_WaitForLastOperation+0x98>)
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e013      	b.n	8008238 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3301      	adds	r3, #1
 8008214:	d009      	beq.n	800822a <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008216:	f7ff fd51 	bl	8007cbc <HAL_GetTick>
 800821a:	0002      	movs	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d801      	bhi.n	800822a <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e006      	b.n	8008238 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800822a:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <FLASH_WaitForLastOperation+0x8c>)
 800822c:	691a      	ldr	r2, [r3, #16]
 800822e:	2380      	movs	r3, #128	@ 0x80
 8008230:	02db      	lsls	r3, r3, #11
 8008232:	4013      	ands	r3, r2
 8008234:	d1ec      	bne.n	8008210 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b004      	add	sp, #16
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40022000 	.word	0x40022000
 8008244:	0000c3fa 	.word	0x0000c3fa
 8008248:	0000c3fb 	.word	0x0000c3fb
 800824c:	20002940 	.word	0x20002940

08008250 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008250:	b5b0      	push	{r4, r5, r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	603a      	str	r2, [r7, #0]
 800825a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800825c:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <FLASH_Program_DoubleWord+0x3c>)
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <FLASH_Program_DoubleWord+0x3c>)
 8008262:	2101      	movs	r1, #1
 8008264:	430a      	orrs	r2, r1
 8008266:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800826e:	f3bf 8f6f 	isb	sy
}
 8008272:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	001c      	movs	r4, r3
 8008278:	2300      	movs	r3, #0
 800827a:	001d      	movs	r5, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3304      	adds	r3, #4
 8008280:	0022      	movs	r2, r4
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	46c0      	nop			@ (mov r8, r8)
 8008286:	46bd      	mov	sp, r7
 8008288:	b004      	add	sp, #16
 800828a:	bdb0      	pop	{r4, r5, r7, pc}
 800828c:	40022000 	.word	0x40022000

08008290 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008290:	b5b0      	push	{r4, r5, r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800829a:	4b35      	ldr	r3, [pc, #212]	@ (8008370 <HAL_FLASHEx_Erase+0xe0>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_FLASHEx_Erase+0x16>
 80082a2:	2302      	movs	r3, #2
 80082a4:	e05f      	b.n	8008366 <HAL_FLASHEx_Erase+0xd6>
 80082a6:	4b32      	ldr	r3, [pc, #200]	@ (8008370 <HAL_FLASHEx_Erase+0xe0>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80082ac:	4b30      	ldr	r3, [pc, #192]	@ (8008370 <HAL_FLASHEx_Erase+0xe0>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80082b2:	250f      	movs	r5, #15
 80082b4:	197c      	adds	r4, r7, r5
 80082b6:	23fa      	movs	r3, #250	@ 0xfa
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	0018      	movs	r0, r3
 80082bc:	f7ff ff7a 	bl	80081b4 <FLASH_WaitForLastOperation>
 80082c0:	0003      	movs	r3, r0
 80082c2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80082c4:	002c      	movs	r4, r5
 80082c6:	193b      	adds	r3, r7, r4
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d145      	bne.n	800835a <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d10d      	bne.n	80082f8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	0018      	movs	r0, r3
 80082e2:	f000 f849 	bl	8008378 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80082e6:	193c      	adds	r4, r7, r4
 80082e8:	23fa      	movs	r3, #250	@ 0xfa
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7ff ff61 	bl	80081b4 <FLASH_WaitForLastOperation>
 80082f2:	0003      	movs	r3, r0
 80082f4:	7023      	strb	r3, [r4, #0]
 80082f6:	e030      	b.n	800835a <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2201      	movs	r2, #1
 80082fc:	4252      	negs	r2, r2
 80082fe:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	e01a      	b.n	800833e <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	0011      	movs	r1, r2
 8008310:	0018      	movs	r0, r3
 8008312:	f000 f845 	bl	80083a0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008316:	250f      	movs	r5, #15
 8008318:	197c      	adds	r4, r7, r5
 800831a:	23fa      	movs	r3, #250	@ 0xfa
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	0018      	movs	r0, r3
 8008320:	f7ff ff48 	bl	80081b4 <FLASH_WaitForLastOperation>
 8008324:	0003      	movs	r3, r0
 8008326:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008328:	197b      	adds	r3, r7, r5
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	601a      	str	r2, [r3, #0]
          break;
 8008336:	e00a      	b.n	800834e <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	3301      	adds	r3, #1
 800833c:	60bb      	str	r3, [r7, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	18d3      	adds	r3, r2, r3
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	429a      	cmp	r2, r3
 800834c:	d3dc      	bcc.n	8008308 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800834e:	4b09      	ldr	r3, [pc, #36]	@ (8008374 <HAL_FLASHEx_Erase+0xe4>)
 8008350:	695a      	ldr	r2, [r3, #20]
 8008352:	4b08      	ldr	r3, [pc, #32]	@ (8008374 <HAL_FLASHEx_Erase+0xe4>)
 8008354:	2102      	movs	r1, #2
 8008356:	438a      	bics	r2, r1
 8008358:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800835a:	4b05      	ldr	r3, [pc, #20]	@ (8008370 <HAL_FLASHEx_Erase+0xe0>)
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008360:	230f      	movs	r3, #15
 8008362:	18fb      	adds	r3, r7, r3
 8008364:	781b      	ldrb	r3, [r3, #0]
}
 8008366:	0018      	movs	r0, r3
 8008368:	46bd      	mov	sp, r7
 800836a:	b004      	add	sp, #16
 800836c:	bdb0      	pop	{r4, r5, r7, pc}
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	20002940 	.word	0x20002940
 8008374:	40022000 	.word	0x40022000

08008378 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008380:	4b06      	ldr	r3, [pc, #24]	@ (800839c <FLASH_MassErase+0x24>)
 8008382:	695a      	ldr	r2, [r3, #20]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	431a      	orrs	r2, r3
 8008388:	4b04      	ldr	r3, [pc, #16]	@ (800839c <FLASH_MassErase+0x24>)
 800838a:	2180      	movs	r1, #128	@ 0x80
 800838c:	0249      	lsls	r1, r1, #9
 800838e:	430a      	orrs	r2, r1
 8008390:	615a      	str	r2, [r3, #20]
}
 8008392:	46c0      	nop			@ (mov r8, r8)
 8008394:	46bd      	mov	sp, r7
 8008396:	b002      	add	sp, #8
 8008398:	bd80      	pop	{r7, pc}
 800839a:	46c0      	nop			@ (mov r8, r8)
 800839c:	40022000 	.word	0x40022000

080083a0 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80083aa:	4b08      	ldr	r3, [pc, #32]	@ (80083cc <FLASH_PageErase+0x2c>)
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	4a08      	ldr	r2, [pc, #32]	@ (80083d0 <FLASH_PageErase+0x30>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	00da      	lsls	r2, r3, #3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	4b03      	ldr	r3, [pc, #12]	@ (80083cc <FLASH_PageErase+0x2c>)
 80083be:	4905      	ldr	r1, [pc, #20]	@ (80083d4 <FLASH_PageErase+0x34>)
 80083c0:	430a      	orrs	r2, r1
 80083c2:	615a      	str	r2, [r3, #20]
}
 80083c4:	46c0      	nop			@ (mov r8, r8)
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b004      	add	sp, #16
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40022000 	.word	0x40022000
 80083d0:	ffffe007 	.word	0xffffe007
 80083d4:	00010002 	.word	0x00010002

080083d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083e6:	e147      	b.n	8008678 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2101      	movs	r1, #1
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4091      	lsls	r1, r2
 80083f2:	000a      	movs	r2, r1
 80083f4:	4013      	ands	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d100      	bne.n	8008400 <HAL_GPIO_Init+0x28>
 80083fe:	e138      	b.n	8008672 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2203      	movs	r2, #3
 8008406:	4013      	ands	r3, r2
 8008408:	2b01      	cmp	r3, #1
 800840a:	d005      	beq.n	8008418 <HAL_GPIO_Init+0x40>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	2203      	movs	r2, #3
 8008412:	4013      	ands	r3, r2
 8008414:	2b02      	cmp	r3, #2
 8008416:	d130      	bne.n	800847a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	2203      	movs	r2, #3
 8008424:	409a      	lsls	r2, r3
 8008426:	0013      	movs	r3, r2
 8008428:	43da      	mvns	r2, r3
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4013      	ands	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	409a      	lsls	r2, r3
 800843a:	0013      	movs	r3, r2
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800844e:	2201      	movs	r2, #1
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	409a      	lsls	r2, r3
 8008454:	0013      	movs	r3, r2
 8008456:	43da      	mvns	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	4013      	ands	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	091b      	lsrs	r3, r3, #4
 8008464:	2201      	movs	r2, #1
 8008466:	401a      	ands	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	409a      	lsls	r2, r3
 800846c:	0013      	movs	r3, r2
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2203      	movs	r2, #3
 8008480:	4013      	ands	r3, r2
 8008482:	2b03      	cmp	r3, #3
 8008484:	d017      	beq.n	80084b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	2203      	movs	r2, #3
 8008492:	409a      	lsls	r2, r3
 8008494:	0013      	movs	r3, r2
 8008496:	43da      	mvns	r2, r3
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4013      	ands	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	409a      	lsls	r2, r3
 80084a8:	0013      	movs	r3, r2
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2203      	movs	r2, #3
 80084bc:	4013      	ands	r3, r2
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d123      	bne.n	800850a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	08da      	lsrs	r2, r3, #3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3208      	adds	r2, #8
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	58d3      	ldr	r3, [r2, r3]
 80084ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2207      	movs	r2, #7
 80084d4:	4013      	ands	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	220f      	movs	r2, #15
 80084da:	409a      	lsls	r2, r3
 80084dc:	0013      	movs	r3, r2
 80084de:	43da      	mvns	r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4013      	ands	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2107      	movs	r1, #7
 80084ee:	400b      	ands	r3, r1
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	409a      	lsls	r2, r3
 80084f4:	0013      	movs	r3, r2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	08da      	lsrs	r2, r3, #3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3208      	adds	r2, #8
 8008504:	0092      	lsls	r2, r2, #2
 8008506:	6939      	ldr	r1, [r7, #16]
 8008508:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	2203      	movs	r2, #3
 8008516:	409a      	lsls	r2, r3
 8008518:	0013      	movs	r3, r2
 800851a:	43da      	mvns	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4013      	ands	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	2203      	movs	r2, #3
 8008528:	401a      	ands	r2, r3
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	409a      	lsls	r2, r3
 8008530:	0013      	movs	r3, r2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	23c0      	movs	r3, #192	@ 0xc0
 8008544:	029b      	lsls	r3, r3, #10
 8008546:	4013      	ands	r3, r2
 8008548:	d100      	bne.n	800854c <HAL_GPIO_Init+0x174>
 800854a:	e092      	b.n	8008672 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800854c:	4a50      	ldr	r2, [pc, #320]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	089b      	lsrs	r3, r3, #2
 8008552:	3318      	adds	r3, #24
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	589b      	ldr	r3, [r3, r2]
 8008558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2203      	movs	r2, #3
 800855e:	4013      	ands	r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	220f      	movs	r2, #15
 8008564:	409a      	lsls	r2, r3
 8008566:	0013      	movs	r3, r2
 8008568:	43da      	mvns	r2, r3
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4013      	ands	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	23a0      	movs	r3, #160	@ 0xa0
 8008574:	05db      	lsls	r3, r3, #23
 8008576:	429a      	cmp	r2, r3
 8008578:	d013      	beq.n	80085a2 <HAL_GPIO_Init+0x1ca>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a45      	ldr	r2, [pc, #276]	@ (8008694 <HAL_GPIO_Init+0x2bc>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00d      	beq.n	800859e <HAL_GPIO_Init+0x1c6>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a44      	ldr	r2, [pc, #272]	@ (8008698 <HAL_GPIO_Init+0x2c0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <HAL_GPIO_Init+0x1c2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a43      	ldr	r2, [pc, #268]	@ (800869c <HAL_GPIO_Init+0x2c4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d101      	bne.n	8008596 <HAL_GPIO_Init+0x1be>
 8008592:	2303      	movs	r3, #3
 8008594:	e006      	b.n	80085a4 <HAL_GPIO_Init+0x1cc>
 8008596:	2305      	movs	r3, #5
 8008598:	e004      	b.n	80085a4 <HAL_GPIO_Init+0x1cc>
 800859a:	2302      	movs	r3, #2
 800859c:	e002      	b.n	80085a4 <HAL_GPIO_Init+0x1cc>
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <HAL_GPIO_Init+0x1cc>
 80085a2:	2300      	movs	r3, #0
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	2103      	movs	r1, #3
 80085a8:	400a      	ands	r2, r1
 80085aa:	00d2      	lsls	r2, r2, #3
 80085ac:	4093      	lsls	r3, r2
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80085b4:	4936      	ldr	r1, [pc, #216]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	089b      	lsrs	r3, r3, #2
 80085ba:	3318      	adds	r3, #24
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085c2:	4b33      	ldr	r3, [pc, #204]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	43da      	mvns	r2, r3
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	4013      	ands	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	2380      	movs	r3, #128	@ 0x80
 80085d8:	035b      	lsls	r3, r3, #13
 80085da:	4013      	ands	r3, r2
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80085ec:	4b28      	ldr	r3, [pc, #160]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	43da      	mvns	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4013      	ands	r3, r2
 80085fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	2380      	movs	r3, #128	@ 0x80
 8008602:	039b      	lsls	r3, r3, #14
 8008604:	4013      	ands	r3, r2
 8008606:	d003      	beq.n	8008610 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008610:	4b1f      	ldr	r3, [pc, #124]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008616:	4a1e      	ldr	r2, [pc, #120]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 8008618:	2384      	movs	r3, #132	@ 0x84
 800861a:	58d3      	ldr	r3, [r2, r3]
 800861c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	43da      	mvns	r2, r3
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4013      	ands	r3, r2
 8008626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	2380      	movs	r3, #128	@ 0x80
 800862e:	029b      	lsls	r3, r3, #10
 8008630:	4013      	ands	r3, r2
 8008632:	d003      	beq.n	800863c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800863c:	4914      	ldr	r1, [pc, #80]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 800863e:	2284      	movs	r2, #132	@ 0x84
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008644:	4a12      	ldr	r2, [pc, #72]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 8008646:	2380      	movs	r3, #128	@ 0x80
 8008648:	58d3      	ldr	r3, [r2, r3]
 800864a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	43da      	mvns	r2, r3
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4013      	ands	r3, r2
 8008654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	2380      	movs	r3, #128	@ 0x80
 800865c:	025b      	lsls	r3, r3, #9
 800865e:	4013      	ands	r3, r2
 8008660:	d003      	beq.n	800866a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800866a:	4909      	ldr	r1, [pc, #36]	@ (8008690 <HAL_GPIO_Init+0x2b8>)
 800866c:	2280      	movs	r2, #128	@ 0x80
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	3301      	adds	r3, #1
 8008676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	40da      	lsrs	r2, r3
 8008680:	1e13      	subs	r3, r2, #0
 8008682:	d000      	beq.n	8008686 <HAL_GPIO_Init+0x2ae>
 8008684:	e6b0      	b.n	80083e8 <HAL_GPIO_Init+0x10>
  }
}
 8008686:	46c0      	nop			@ (mov r8, r8)
 8008688:	46c0      	nop			@ (mov r8, r8)
 800868a:	46bd      	mov	sp, r7
 800868c:	b006      	add	sp, #24
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40021800 	.word	0x40021800
 8008694:	50000400 	.word	0x50000400
 8008698:	50000800 	.word	0x50000800
 800869c:	50000c00 	.word	0x50000c00

080086a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	000a      	movs	r2, r1
 80086aa:	1cbb      	adds	r3, r7, #2
 80086ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	1cba      	adds	r2, r7, #2
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	4013      	ands	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80086ba:	230f      	movs	r3, #15
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	2201      	movs	r2, #1
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	e003      	b.n	80086cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086c4:	230f      	movs	r3, #15
 80086c6:	18fb      	adds	r3, r7, r3
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80086cc:	230f      	movs	r3, #15
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	781b      	ldrb	r3, [r3, #0]
}
 80086d2:	0018      	movs	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b004      	add	sp, #16
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	0008      	movs	r0, r1
 80086e4:	0011      	movs	r1, r2
 80086e6:	1cbb      	adds	r3, r7, #2
 80086e8:	1c02      	adds	r2, r0, #0
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	1c7b      	adds	r3, r7, #1
 80086ee:	1c0a      	adds	r2, r1, #0
 80086f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086f2:	1c7b      	adds	r3, r7, #1
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086fa:	1cbb      	adds	r3, r7, #2
 80086fc:	881a      	ldrh	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008702:	e003      	b.n	800870c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008704:	1cbb      	adds	r3, r7, #2
 8008706:	881a      	ldrh	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800870c:	46c0      	nop			@ (mov r8, r8)
 800870e:	46bd      	mov	sp, r7
 8008710:	b002      	add	sp, #8
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	000a      	movs	r2, r1
 800871e:	1cbb      	adds	r3, r7, #2
 8008720:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008728:	1cbb      	adds	r3, r7, #2
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4013      	ands	r3, r2
 8008730:	041a      	lsls	r2, r3, #16
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	43db      	mvns	r3, r3
 8008736:	1cb9      	adds	r1, r7, #2
 8008738:	8809      	ldrh	r1, [r1, #0]
 800873a:	400b      	ands	r3, r1
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	619a      	str	r2, [r3, #24]
}
 8008742:	46c0      	nop			@ (mov r8, r8)
 8008744:	46bd      	mov	sp, r7
 8008746:	b004      	add	sp, #16
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e08f      	b.n	800887e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2241      	movs	r2, #65	@ 0x41
 8008762:	5c9b      	ldrb	r3, [r3, r2]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d107      	bne.n	800877a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2240      	movs	r2, #64	@ 0x40
 800876e:	2100      	movs	r1, #0
 8008770:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	0018      	movs	r0, r3
 8008776:	f7fd fd4f 	bl	8006218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2241      	movs	r2, #65	@ 0x41
 800877e:	2124      	movs	r1, #36	@ 0x24
 8008780:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2101      	movs	r1, #1
 800878e:	438a      	bics	r2, r1
 8008790:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	493b      	ldr	r1, [pc, #236]	@ (8008888 <HAL_I2C_Init+0x13c>)
 800879c:	400a      	ands	r2, r1
 800879e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4938      	ldr	r1, [pc, #224]	@ (800888c <HAL_I2C_Init+0x140>)
 80087ac:	400a      	ands	r2, r1
 80087ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d108      	bne.n	80087ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2180      	movs	r1, #128	@ 0x80
 80087c2:	0209      	lsls	r1, r1, #8
 80087c4:	430a      	orrs	r2, r1
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	e007      	b.n	80087da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2184      	movs	r1, #132	@ 0x84
 80087d4:	0209      	lsls	r1, r1, #8
 80087d6:	430a      	orrs	r2, r1
 80087d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d109      	bne.n	80087f6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2180      	movs	r1, #128	@ 0x80
 80087ee:	0109      	lsls	r1, r1, #4
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
 80087f4:	e007      	b.n	8008806 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4923      	ldr	r1, [pc, #140]	@ (8008890 <HAL_I2C_Init+0x144>)
 8008802:	400a      	ands	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4920      	ldr	r1, [pc, #128]	@ (8008894 <HAL_I2C_Init+0x148>)
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	491a      	ldr	r1, [pc, #104]	@ (800888c <HAL_I2C_Init+0x140>)
 8008822:	400a      	ands	r2, r1
 8008824:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691a      	ldr	r2, [r3, #16]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	431a      	orrs	r2, r3
 8008830:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	69d9      	ldr	r1, [r3, #28]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a1a      	ldr	r2, [r3, #32]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2101      	movs	r1, #1
 800885c:	430a      	orrs	r2, r1
 800885e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2241      	movs	r2, #65	@ 0x41
 800886a:	2120      	movs	r1, #32
 800886c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2242      	movs	r2, #66	@ 0x42
 8008878:	2100      	movs	r1, #0
 800887a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	0018      	movs	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	b002      	add	sp, #8
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			@ (mov r8, r8)
 8008888:	f0ffffff 	.word	0xf0ffffff
 800888c:	ffff7fff 	.word	0xffff7fff
 8008890:	fffff7ff 	.word	0xfffff7ff
 8008894:	02008000 	.word	0x02008000

08008898 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008898:	b590      	push	{r4, r7, lr}
 800889a:	b089      	sub	sp, #36	@ 0x24
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	0008      	movs	r0, r1
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	0019      	movs	r1, r3
 80088a6:	230a      	movs	r3, #10
 80088a8:	18fb      	adds	r3, r7, r3
 80088aa:	1c02      	adds	r2, r0, #0
 80088ac:	801a      	strh	r2, [r3, #0]
 80088ae:	2308      	movs	r3, #8
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	1c0a      	adds	r2, r1, #0
 80088b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2241      	movs	r2, #65	@ 0x41
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d000      	beq.n	80088c4 <HAL_I2C_Master_Transmit+0x2c>
 80088c2:	e10a      	b.n	8008ada <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2240      	movs	r2, #64	@ 0x40
 80088c8:	5c9b      	ldrb	r3, [r3, r2]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <HAL_I2C_Master_Transmit+0x3a>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e104      	b.n	8008adc <HAL_I2C_Master_Transmit+0x244>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2240      	movs	r2, #64	@ 0x40
 80088d6:	2101      	movs	r1, #1
 80088d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088da:	f7ff f9ef 	bl	8007cbc <HAL_GetTick>
 80088de:	0003      	movs	r3, r0
 80088e0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088e2:	2380      	movs	r3, #128	@ 0x80
 80088e4:	0219      	lsls	r1, r3, #8
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2319      	movs	r3, #25
 80088ee:	2201      	movs	r2, #1
 80088f0:	f000 fe4a 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 80088f4:	1e03      	subs	r3, r0, #0
 80088f6:	d001      	beq.n	80088fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0ef      	b.n	8008adc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2241      	movs	r2, #65	@ 0x41
 8008900:	2121      	movs	r1, #33	@ 0x21
 8008902:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2242      	movs	r2, #66	@ 0x42
 8008908:	2110      	movs	r1, #16
 800890a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2208      	movs	r2, #8
 800891c:	18ba      	adds	r2, r7, r2
 800891e:	8812      	ldrh	r2, [r2, #0]
 8008920:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800892c:	b29b      	uxth	r3, r3
 800892e:	2bff      	cmp	r3, #255	@ 0xff
 8008930:	d906      	bls.n	8008940 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	22ff      	movs	r2, #255	@ 0xff
 8008936:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008938:	2380      	movs	r3, #128	@ 0x80
 800893a:	045b      	lsls	r3, r3, #17
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	e007      	b.n	8008950 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800894a:	2380      	movs	r3, #128	@ 0x80
 800894c:	049b      	lsls	r3, r3, #18
 800894e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008954:	2b00      	cmp	r3, #0
 8008956:	d027      	beq.n	80089a8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008980:	3b01      	subs	r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800898c:	b2db      	uxtb	r3, r3
 800898e:	3301      	adds	r3, #1
 8008990:	b2da      	uxtb	r2, r3
 8008992:	697c      	ldr	r4, [r7, #20]
 8008994:	230a      	movs	r3, #10
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	8819      	ldrh	r1, [r3, #0]
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	4b51      	ldr	r3, [pc, #324]	@ (8008ae4 <HAL_I2C_Master_Transmit+0x24c>)
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	0023      	movs	r3, r4
 80089a2:	f001 f869 	bl	8009a78 <I2C_TransferConfig>
 80089a6:	e06f      	b.n	8008a88 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	697c      	ldr	r4, [r7, #20]
 80089b0:	230a      	movs	r3, #10
 80089b2:	18fb      	adds	r3, r7, r3
 80089b4:	8819      	ldrh	r1, [r3, #0]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	4b4a      	ldr	r3, [pc, #296]	@ (8008ae4 <HAL_I2C_Master_Transmit+0x24c>)
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	0023      	movs	r3, r4
 80089be:	f001 f85b 	bl	8009a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80089c2:	e061      	b.n	8008a88 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 fe34 	bl	8009638 <I2C_WaitOnTXISFlagUntilTimeout>
 80089d0:	1e03      	subs	r3, r0, #0
 80089d2:	d001      	beq.n	80089d8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e081      	b.n	8008adc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d03a      	beq.n	8008a88 <HAL_I2C_Master_Transmit+0x1f0>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d136      	bne.n	8008a88 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	0013      	movs	r3, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	f000 fdae 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8008a2c:	1e03      	subs	r3, r0, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e053      	b.n	8008adc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2bff      	cmp	r3, #255	@ 0xff
 8008a3c:	d911      	bls.n	8008a62 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	22ff      	movs	r2, #255	@ 0xff
 8008a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	2380      	movs	r3, #128	@ 0x80
 8008a4c:	045c      	lsls	r4, r3, #17
 8008a4e:	230a      	movs	r3, #10
 8008a50:	18fb      	adds	r3, r7, r3
 8008a52:	8819      	ldrh	r1, [r3, #0]
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	2300      	movs	r3, #0
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	0023      	movs	r3, r4
 8008a5c:	f001 f80c 	bl	8009a78 <I2C_TransferConfig>
 8008a60:	e012      	b.n	8008a88 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	2380      	movs	r3, #128	@ 0x80
 8008a74:	049c      	lsls	r4, r3, #18
 8008a76:	230a      	movs	r3, #10
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	8819      	ldrh	r1, [r3, #0]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	0023      	movs	r3, r4
 8008a84:	f000 fff8 	bl	8009a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d198      	bne.n	80089c4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f000 fe13 	bl	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a9e:	1e03      	subs	r3, r0, #0
 8008aa0:	d001      	beq.n	8008aa6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e01a      	b.n	8008adc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	490b      	ldr	r1, [pc, #44]	@ (8008ae8 <HAL_I2C_Master_Transmit+0x250>)
 8008aba:	400a      	ands	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2241      	movs	r2, #65	@ 0x41
 8008ac2:	2120      	movs	r1, #32
 8008ac4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2242      	movs	r2, #66	@ 0x42
 8008aca:	2100      	movs	r1, #0
 8008acc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2240      	movs	r2, #64	@ 0x40
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e000      	b.n	8008adc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008ada:	2302      	movs	r3, #2
  }
}
 8008adc:	0018      	movs	r0, r3
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	b007      	add	sp, #28
 8008ae2:	bd90      	pop	{r4, r7, pc}
 8008ae4:	80002000 	.word	0x80002000
 8008ae8:	fe00e800 	.word	0xfe00e800

08008aec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b089      	sub	sp, #36	@ 0x24
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	0008      	movs	r0, r1
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	0019      	movs	r1, r3
 8008afa:	230a      	movs	r3, #10
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	1c02      	adds	r2, r0, #0
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	2308      	movs	r3, #8
 8008b04:	18fb      	adds	r3, r7, r3
 8008b06:	1c0a      	adds	r2, r1, #0
 8008b08:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2241      	movs	r2, #65	@ 0x41
 8008b0e:	5c9b      	ldrb	r3, [r3, r2]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d000      	beq.n	8008b18 <HAL_I2C_Master_Receive+0x2c>
 8008b16:	e0e8      	b.n	8008cea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2240      	movs	r2, #64	@ 0x40
 8008b1c:	5c9b      	ldrb	r3, [r3, r2]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d101      	bne.n	8008b26 <HAL_I2C_Master_Receive+0x3a>
 8008b22:	2302      	movs	r3, #2
 8008b24:	e0e2      	b.n	8008cec <HAL_I2C_Master_Receive+0x200>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2240      	movs	r2, #64	@ 0x40
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b2e:	f7ff f8c5 	bl	8007cbc <HAL_GetTick>
 8008b32:	0003      	movs	r3, r0
 8008b34:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b36:	2380      	movs	r3, #128	@ 0x80
 8008b38:	0219      	lsls	r1, r3, #8
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	2319      	movs	r3, #25
 8008b42:	2201      	movs	r2, #1
 8008b44:	f000 fd20 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8008b48:	1e03      	subs	r3, r0, #0
 8008b4a:	d001      	beq.n	8008b50 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e0cd      	b.n	8008cec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2241      	movs	r2, #65	@ 0x41
 8008b54:	2122      	movs	r1, #34	@ 0x22
 8008b56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2242      	movs	r2, #66	@ 0x42
 8008b5c:	2110      	movs	r1, #16
 8008b5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2208      	movs	r2, #8
 8008b70:	18ba      	adds	r2, r7, r2
 8008b72:	8812      	ldrh	r2, [r2, #0]
 8008b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2bff      	cmp	r3, #255	@ 0xff
 8008b84:	d911      	bls.n	8008baa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	22ff      	movs	r2, #255	@ 0xff
 8008b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	2380      	movs	r3, #128	@ 0x80
 8008b94:	045c      	lsls	r4, r3, #17
 8008b96:	230a      	movs	r3, #10
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	8819      	ldrh	r1, [r3, #0]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	4b55      	ldr	r3, [pc, #340]	@ (8008cf4 <HAL_I2C_Master_Receive+0x208>)
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	0023      	movs	r3, r4
 8008ba4:	f000 ff68 	bl	8009a78 <I2C_TransferConfig>
 8008ba8:	e076      	b.n	8008c98 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	2380      	movs	r3, #128	@ 0x80
 8008bbc:	049c      	lsls	r4, r3, #18
 8008bbe:	230a      	movs	r3, #10
 8008bc0:	18fb      	adds	r3, r7, r3
 8008bc2:	8819      	ldrh	r1, [r3, #0]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8008cf4 <HAL_I2C_Master_Receive+0x208>)
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	0023      	movs	r3, r4
 8008bcc:	f000 ff54 	bl	8009a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008bd0:	e062      	b.n	8008c98 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f000 fdb7 	bl	800974c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bde:	1e03      	subs	r3, r0, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e082      	b.n	8008cec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d03a      	beq.n	8008c98 <HAL_I2C_Master_Receive+0x1ac>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d136      	bne.n	8008c98 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	0013      	movs	r3, r2
 8008c34:	2200      	movs	r2, #0
 8008c36:	2180      	movs	r1, #128	@ 0x80
 8008c38:	f000 fca6 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8008c3c:	1e03      	subs	r3, r0, #0
 8008c3e:	d001      	beq.n	8008c44 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e053      	b.n	8008cec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2bff      	cmp	r3, #255	@ 0xff
 8008c4c:	d911      	bls.n	8008c72 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	22ff      	movs	r2, #255	@ 0xff
 8008c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	2380      	movs	r3, #128	@ 0x80
 8008c5c:	045c      	lsls	r4, r3, #17
 8008c5e:	230a      	movs	r3, #10
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	8819      	ldrh	r1, [r3, #0]
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	2300      	movs	r3, #0
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	0023      	movs	r3, r4
 8008c6c:	f000 ff04 	bl	8009a78 <I2C_TransferConfig>
 8008c70:	e012      	b.n	8008c98 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	2380      	movs	r3, #128	@ 0x80
 8008c84:	049c      	lsls	r4, r3, #18
 8008c86:	230a      	movs	r3, #10
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	8819      	ldrh	r1, [r3, #0]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	0023      	movs	r3, r4
 8008c94:	f000 fef0 	bl	8009a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d197      	bne.n	8008bd2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	0018      	movs	r0, r3
 8008caa:	f000 fd0b 	bl	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cae:	1e03      	subs	r3, r0, #0
 8008cb0:	d001      	beq.n	8008cb6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e01a      	b.n	8008cec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	490b      	ldr	r1, [pc, #44]	@ (8008cf8 <HAL_I2C_Master_Receive+0x20c>)
 8008cca:	400a      	ands	r2, r1
 8008ccc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2241      	movs	r2, #65	@ 0x41
 8008cd2:	2120      	movs	r1, #32
 8008cd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2242      	movs	r2, #66	@ 0x42
 8008cda:	2100      	movs	r1, #0
 8008cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2240      	movs	r2, #64	@ 0x40
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8008cea:	2302      	movs	r3, #2
  }
}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b007      	add	sp, #28
 8008cf2:	bd90      	pop	{r4, r7, pc}
 8008cf4:	80002400 	.word	0x80002400
 8008cf8:	fe00e800 	.word	0xfe00e800

08008cfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b089      	sub	sp, #36	@ 0x24
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	000c      	movs	r4, r1
 8008d06:	0010      	movs	r0, r2
 8008d08:	0019      	movs	r1, r3
 8008d0a:	230a      	movs	r3, #10
 8008d0c:	18fb      	adds	r3, r7, r3
 8008d0e:	1c22      	adds	r2, r4, #0
 8008d10:	801a      	strh	r2, [r3, #0]
 8008d12:	2308      	movs	r3, #8
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	1c02      	adds	r2, r0, #0
 8008d18:	801a      	strh	r2, [r3, #0]
 8008d1a:	1dbb      	adds	r3, r7, #6
 8008d1c:	1c0a      	adds	r2, r1, #0
 8008d1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2241      	movs	r2, #65	@ 0x41
 8008d24:	5c9b      	ldrb	r3, [r3, r2]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d000      	beq.n	8008d2e <HAL_I2C_Mem_Write+0x32>
 8008d2c:	e10c      	b.n	8008f48 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <HAL_I2C_Mem_Write+0x42>
 8008d34:	232c      	movs	r3, #44	@ 0x2c
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d105      	bne.n	8008d4a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2280      	movs	r2, #128	@ 0x80
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e0ff      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2240      	movs	r2, #64	@ 0x40
 8008d4e:	5c9b      	ldrb	r3, [r3, r2]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_I2C_Mem_Write+0x5c>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e0f8      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2240      	movs	r2, #64	@ 0x40
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d60:	f7fe ffac 	bl	8007cbc <HAL_GetTick>
 8008d64:	0003      	movs	r3, r0
 8008d66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d68:	2380      	movs	r3, #128	@ 0x80
 8008d6a:	0219      	lsls	r1, r3, #8
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	2319      	movs	r3, #25
 8008d74:	2201      	movs	r2, #1
 8008d76:	f000 fc07 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8008d7a:	1e03      	subs	r3, r0, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e0e3      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2241      	movs	r2, #65	@ 0x41
 8008d86:	2121      	movs	r1, #33	@ 0x21
 8008d88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2242      	movs	r2, #66	@ 0x42
 8008d8e:	2140      	movs	r1, #64	@ 0x40
 8008d90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	222c      	movs	r2, #44	@ 0x2c
 8008da2:	18ba      	adds	r2, r7, r2
 8008da4:	8812      	ldrh	r2, [r2, #0]
 8008da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dae:	1dbb      	adds	r3, r7, #6
 8008db0:	881c      	ldrh	r4, [r3, #0]
 8008db2:	2308      	movs	r3, #8
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	881a      	ldrh	r2, [r3, #0]
 8008db8:	230a      	movs	r3, #10
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	8819      	ldrh	r1, [r3, #0]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	0023      	movs	r3, r4
 8008dca:	f000 faf5 	bl	80093b8 <I2C_RequestMemoryWrite>
 8008dce:	1e03      	subs	r3, r0, #0
 8008dd0:	d005      	beq.n	8008dde <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2240      	movs	r2, #64	@ 0x40
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e0b5      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2bff      	cmp	r3, #255	@ 0xff
 8008de6:	d911      	bls.n	8008e0c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	22ff      	movs	r2, #255	@ 0xff
 8008dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	2380      	movs	r3, #128	@ 0x80
 8008df6:	045c      	lsls	r4, r3, #17
 8008df8:	230a      	movs	r3, #10
 8008dfa:	18fb      	adds	r3, r7, r3
 8008dfc:	8819      	ldrh	r1, [r3, #0]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	0023      	movs	r3, r4
 8008e06:	f000 fe37 	bl	8009a78 <I2C_TransferConfig>
 8008e0a:	e012      	b.n	8008e32 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	049c      	lsls	r4, r3, #18
 8008e20:	230a      	movs	r3, #10
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	8819      	ldrh	r1, [r3, #0]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	0023      	movs	r3, r4
 8008e2e:	f000 fe23 	bl	8009a78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f000 fbfd 	bl	8009638 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e3e:	1e03      	subs	r3, r0, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e081      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d03a      	beq.n	8008ef6 <HAL_I2C_Mem_Write+0x1fa>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d136      	bne.n	8008ef6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	0013      	movs	r3, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	2180      	movs	r1, #128	@ 0x80
 8008e96:	f000 fb77 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8008e9a:	1e03      	subs	r3, r0, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e053      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2bff      	cmp	r3, #255	@ 0xff
 8008eaa:	d911      	bls.n	8008ed0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	22ff      	movs	r2, #255	@ 0xff
 8008eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	045c      	lsls	r4, r3, #17
 8008ebc:	230a      	movs	r3, #10
 8008ebe:	18fb      	adds	r3, r7, r3
 8008ec0:	8819      	ldrh	r1, [r3, #0]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	0023      	movs	r3, r4
 8008eca:	f000 fdd5 	bl	8009a78 <I2C_TransferConfig>
 8008ece:	e012      	b.n	8008ef6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	2380      	movs	r3, #128	@ 0x80
 8008ee2:	049c      	lsls	r4, r3, #18
 8008ee4:	230a      	movs	r3, #10
 8008ee6:	18fb      	adds	r3, r7, r3
 8008ee8:	8819      	ldrh	r1, [r3, #0]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	2300      	movs	r3, #0
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	0023      	movs	r3, r4
 8008ef2:	f000 fdc1 	bl	8009a78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d198      	bne.n	8008e32 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0018      	movs	r0, r3
 8008f08:	f000 fbdc 	bl	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f0c:	1e03      	subs	r3, r0, #0
 8008f0e:	d001      	beq.n	8008f14 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e01a      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	490b      	ldr	r1, [pc, #44]	@ (8008f54 <HAL_I2C_Mem_Write+0x258>)
 8008f28:	400a      	ands	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2241      	movs	r2, #65	@ 0x41
 8008f30:	2120      	movs	r1, #32
 8008f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2242      	movs	r2, #66	@ 0x42
 8008f38:	2100      	movs	r1, #0
 8008f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2240      	movs	r2, #64	@ 0x40
 8008f40:	2100      	movs	r1, #0
 8008f42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e000      	b.n	8008f4a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8008f48:	2302      	movs	r3, #2
  }
}
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b007      	add	sp, #28
 8008f50:	bd90      	pop	{r4, r7, pc}
 8008f52:	46c0      	nop			@ (mov r8, r8)
 8008f54:	fe00e800 	.word	0xfe00e800

08008f58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b089      	sub	sp, #36	@ 0x24
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	000c      	movs	r4, r1
 8008f62:	0010      	movs	r0, r2
 8008f64:	0019      	movs	r1, r3
 8008f66:	230a      	movs	r3, #10
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	1c22      	adds	r2, r4, #0
 8008f6c:	801a      	strh	r2, [r3, #0]
 8008f6e:	2308      	movs	r3, #8
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	1c02      	adds	r2, r0, #0
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	1dbb      	adds	r3, r7, #6
 8008f78:	1c0a      	adds	r2, r1, #0
 8008f7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2241      	movs	r2, #65	@ 0x41
 8008f80:	5c9b      	ldrb	r3, [r3, r2]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d000      	beq.n	8008f8a <HAL_I2C_Mem_Read+0x32>
 8008f88:	e110      	b.n	80091ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d004      	beq.n	8008f9a <HAL_I2C_Mem_Read+0x42>
 8008f90:	232c      	movs	r3, #44	@ 0x2c
 8008f92:	18fb      	adds	r3, r7, r3
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2280      	movs	r2, #128	@ 0x80
 8008f9e:	0092      	lsls	r2, r2, #2
 8008fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e103      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2240      	movs	r2, #64	@ 0x40
 8008faa:	5c9b      	ldrb	r3, [r3, r2]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <HAL_I2C_Mem_Read+0x5c>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e0fc      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2240      	movs	r2, #64	@ 0x40
 8008fb8:	2101      	movs	r1, #1
 8008fba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fbc:	f7fe fe7e 	bl	8007cbc <HAL_GetTick>
 8008fc0:	0003      	movs	r3, r0
 8008fc2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fc4:	2380      	movs	r3, #128	@ 0x80
 8008fc6:	0219      	lsls	r1, r3, #8
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	2319      	movs	r3, #25
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f000 fad9 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8008fd6:	1e03      	subs	r3, r0, #0
 8008fd8:	d001      	beq.n	8008fde <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e0e7      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2241      	movs	r2, #65	@ 0x41
 8008fe2:	2122      	movs	r1, #34	@ 0x22
 8008fe4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2242      	movs	r2, #66	@ 0x42
 8008fea:	2140      	movs	r1, #64	@ 0x40
 8008fec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	222c      	movs	r2, #44	@ 0x2c
 8008ffe:	18ba      	adds	r2, r7, r2
 8009000:	8812      	ldrh	r2, [r2, #0]
 8009002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800900a:	1dbb      	adds	r3, r7, #6
 800900c:	881c      	ldrh	r4, [r3, #0]
 800900e:	2308      	movs	r3, #8
 8009010:	18fb      	adds	r3, r7, r3
 8009012:	881a      	ldrh	r2, [r3, #0]
 8009014:	230a      	movs	r3, #10
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	8819      	ldrh	r1, [r3, #0]
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	0023      	movs	r3, r4
 8009026:	f000 fa2b 	bl	8009480 <I2C_RequestMemoryRead>
 800902a:	1e03      	subs	r3, r0, #0
 800902c:	d005      	beq.n	800903a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2240      	movs	r2, #64	@ 0x40
 8009032:	2100      	movs	r1, #0
 8009034:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e0b9      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800903e:	b29b      	uxth	r3, r3
 8009040:	2bff      	cmp	r3, #255	@ 0xff
 8009042:	d911      	bls.n	8009068 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	22ff      	movs	r2, #255	@ 0xff
 8009048:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800904e:	b2da      	uxtb	r2, r3
 8009050:	2380      	movs	r3, #128	@ 0x80
 8009052:	045c      	lsls	r4, r3, #17
 8009054:	230a      	movs	r3, #10
 8009056:	18fb      	adds	r3, r7, r3
 8009058:	8819      	ldrh	r1, [r3, #0]
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	4b56      	ldr	r3, [pc, #344]	@ (80091b8 <HAL_I2C_Mem_Read+0x260>)
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	0023      	movs	r3, r4
 8009062:	f000 fd09 	bl	8009a78 <I2C_TransferConfig>
 8009066:	e012      	b.n	800908e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009076:	b2da      	uxtb	r2, r3
 8009078:	2380      	movs	r3, #128	@ 0x80
 800907a:	049c      	lsls	r4, r3, #18
 800907c:	230a      	movs	r3, #10
 800907e:	18fb      	adds	r3, r7, r3
 8009080:	8819      	ldrh	r1, [r3, #0]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	4b4c      	ldr	r3, [pc, #304]	@ (80091b8 <HAL_I2C_Mem_Read+0x260>)
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	0023      	movs	r3, r4
 800908a:	f000 fcf5 	bl	8009a78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800908e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	0013      	movs	r3, r2
 8009098:	2200      	movs	r2, #0
 800909a:	2104      	movs	r1, #4
 800909c:	f000 fa74 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 80090a0:	1e03      	subs	r3, r0, #0
 80090a2:	d001      	beq.n	80090a8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e082      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b2:	b2d2      	uxtb	r2, r2
 80090b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090c4:	3b01      	subs	r3, #1
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d03a      	beq.n	800915a <HAL_I2C_Mem_Read+0x202>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d136      	bne.n	800915a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	0013      	movs	r3, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	2180      	movs	r1, #128	@ 0x80
 80090fa:	f000 fa45 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 80090fe:	1e03      	subs	r3, r0, #0
 8009100:	d001      	beq.n	8009106 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e053      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800910a:	b29b      	uxth	r3, r3
 800910c:	2bff      	cmp	r3, #255	@ 0xff
 800910e:	d911      	bls.n	8009134 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	22ff      	movs	r2, #255	@ 0xff
 8009114:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800911a:	b2da      	uxtb	r2, r3
 800911c:	2380      	movs	r3, #128	@ 0x80
 800911e:	045c      	lsls	r4, r3, #17
 8009120:	230a      	movs	r3, #10
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	8819      	ldrh	r1, [r3, #0]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	2300      	movs	r3, #0
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	0023      	movs	r3, r4
 800912e:	f000 fca3 	bl	8009a78 <I2C_TransferConfig>
 8009132:	e012      	b.n	800915a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009142:	b2da      	uxtb	r2, r3
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	049c      	lsls	r4, r3, #18
 8009148:	230a      	movs	r3, #10
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	8819      	ldrh	r1, [r3, #0]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	2300      	movs	r3, #0
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	0023      	movs	r3, r4
 8009156:	f000 fc8f 	bl	8009a78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800915e:	b29b      	uxth	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d194      	bne.n	800908e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	0018      	movs	r0, r3
 800916c:	f000 faaa 	bl	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009170:	1e03      	subs	r3, r0, #0
 8009172:	d001      	beq.n	8009178 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e01a      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2220      	movs	r2, #32
 800917e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	490c      	ldr	r1, [pc, #48]	@ (80091bc <HAL_I2C_Mem_Read+0x264>)
 800918c:	400a      	ands	r2, r1
 800918e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2241      	movs	r2, #65	@ 0x41
 8009194:	2120      	movs	r1, #32
 8009196:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2242      	movs	r2, #66	@ 0x42
 800919c:	2100      	movs	r1, #0
 800919e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2240      	movs	r2, #64	@ 0x40
 80091a4:	2100      	movs	r1, #0
 80091a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e000      	b.n	80091ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80091ac:	2302      	movs	r3, #2
  }
}
 80091ae:	0018      	movs	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b007      	add	sp, #28
 80091b4:	bd90      	pop	{r4, r7, pc}
 80091b6:	46c0      	nop			@ (mov r8, r8)
 80091b8:	80002400 	.word	0x80002400
 80091bc:	fe00e800 	.word	0xfe00e800

080091c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	230a      	movs	r3, #10
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	1c0a      	adds	r2, r1, #0
 80091d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2241      	movs	r2, #65	@ 0x41
 80091dc:	5c9b      	ldrb	r3, [r3, r2]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d000      	beq.n	80091e6 <HAL_I2C_IsDeviceReady+0x26>
 80091e4:	e0df      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699a      	ldr	r2, [r3, #24]
 80091ec:	2380      	movs	r3, #128	@ 0x80
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	401a      	ands	r2, r3
 80091f2:	2380      	movs	r3, #128	@ 0x80
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d101      	bne.n	80091fe <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
 80091fc:	e0d4      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2240      	movs	r2, #64	@ 0x40
 8009202:	5c9b      	ldrb	r3, [r3, r2]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_I2C_IsDeviceReady+0x4c>
 8009208:	2302      	movs	r3, #2
 800920a:	e0cd      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2240      	movs	r2, #64	@ 0x40
 8009210:	2101      	movs	r1, #1
 8009212:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2241      	movs	r2, #65	@ 0x41
 8009218:	2124      	movs	r1, #36	@ 0x24
 800921a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d107      	bne.n	800923a <HAL_I2C_IsDeviceReady+0x7a>
 800922a:	230a      	movs	r3, #10
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	059b      	lsls	r3, r3, #22
 8009232:	0d9b      	lsrs	r3, r3, #22
 8009234:	4a5e      	ldr	r2, [pc, #376]	@ (80093b0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8009236:	431a      	orrs	r2, r3
 8009238:	e006      	b.n	8009248 <HAL_I2C_IsDeviceReady+0x88>
 800923a:	230a      	movs	r3, #10
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	059b      	lsls	r3, r3, #22
 8009242:	0d9b      	lsrs	r3, r3, #22
 8009244:	4a5b      	ldr	r2, [pc, #364]	@ (80093b4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8009246:	431a      	orrs	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800924e:	f7fe fd35 	bl	8007cbc <HAL_GetTick>
 8009252:	0003      	movs	r3, r0
 8009254:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2220      	movs	r2, #32
 800925e:	4013      	ands	r3, r2
 8009260:	3b20      	subs	r3, #32
 8009262:	425a      	negs	r2, r3
 8009264:	4153      	adcs	r3, r2
 8009266:	b2da      	uxtb	r2, r3
 8009268:	231f      	movs	r3, #31
 800926a:	18fb      	adds	r3, r7, r3
 800926c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	2210      	movs	r2, #16
 8009276:	4013      	ands	r3, r2
 8009278:	3b10      	subs	r3, #16
 800927a:	425a      	negs	r2, r3
 800927c:	4153      	adcs	r3, r2
 800927e:	b2da      	uxtb	r2, r3
 8009280:	231e      	movs	r3, #30
 8009282:	18fb      	adds	r3, r7, r3
 8009284:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009286:	e035      	b.n	80092f4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	d01a      	beq.n	80092c4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800928e:	f7fe fd15 	bl	8007cbc <HAL_GetTick>
 8009292:	0002      	movs	r2, r0
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d302      	bcc.n	80092a4 <HAL_I2C_IsDeviceReady+0xe4>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10f      	bne.n	80092c4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2241      	movs	r2, #65	@ 0x41
 80092a8:	2120      	movs	r1, #32
 80092aa:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b0:	2220      	movs	r2, #32
 80092b2:	431a      	orrs	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2240      	movs	r2, #64	@ 0x40
 80092bc:	2100      	movs	r1, #0
 80092be:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e071      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	2220      	movs	r2, #32
 80092cc:	4013      	ands	r3, r2
 80092ce:	3b20      	subs	r3, #32
 80092d0:	425a      	negs	r2, r3
 80092d2:	4153      	adcs	r3, r2
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	231f      	movs	r3, #31
 80092d8:	18fb      	adds	r3, r7, r3
 80092da:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	2210      	movs	r2, #16
 80092e4:	4013      	ands	r3, r2
 80092e6:	3b10      	subs	r3, #16
 80092e8:	425a      	negs	r2, r3
 80092ea:	4153      	adcs	r3, r2
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	231e      	movs	r3, #30
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80092f4:	231f      	movs	r3, #31
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d104      	bne.n	8009308 <HAL_I2C_IsDeviceReady+0x148>
 80092fe:	231e      	movs	r3, #30
 8009300:	18fb      	adds	r3, r7, r3
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0bf      	beq.n	8009288 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2210      	movs	r2, #16
 8009310:	4013      	ands	r3, r2
 8009312:	2b10      	cmp	r3, #16
 8009314:	d01a      	beq.n	800934c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	0013      	movs	r3, r2
 8009320:	2200      	movs	r2, #0
 8009322:	2120      	movs	r1, #32
 8009324:	f000 f930 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8009328:	1e03      	subs	r3, r0, #0
 800932a:	d001      	beq.n	8009330 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e03b      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2220      	movs	r2, #32
 8009336:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2241      	movs	r2, #65	@ 0x41
 800933c:	2120      	movs	r1, #32
 800933e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2240      	movs	r2, #64	@ 0x40
 8009344:	2100      	movs	r1, #0
 8009346:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	e02d      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	0013      	movs	r3, r2
 8009356:	2200      	movs	r2, #0
 8009358:	2120      	movs	r1, #32
 800935a:	f000 f915 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 800935e:	1e03      	subs	r3, r0, #0
 8009360:	d001      	beq.n	8009366 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e020      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2210      	movs	r2, #16
 800936c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2220      	movs	r2, #32
 8009374:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	3301      	adds	r3, #1
 800937a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	429a      	cmp	r2, r3
 8009382:	d900      	bls.n	8009386 <HAL_I2C_IsDeviceReady+0x1c6>
 8009384:	e74d      	b.n	8009222 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2241      	movs	r2, #65	@ 0x41
 800938a:	2120      	movs	r1, #32
 800938c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009392:	2220      	movs	r2, #32
 8009394:	431a      	orrs	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2240      	movs	r2, #64	@ 0x40
 800939e:	2100      	movs	r1, #0
 80093a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80093a6:	2302      	movs	r3, #2
  }
}
 80093a8:	0018      	movs	r0, r3
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b008      	add	sp, #32
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	02002000 	.word	0x02002000
 80093b4:	02002800 	.word	0x02002800

080093b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80093b8:	b5b0      	push	{r4, r5, r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	000c      	movs	r4, r1
 80093c2:	0010      	movs	r0, r2
 80093c4:	0019      	movs	r1, r3
 80093c6:	250a      	movs	r5, #10
 80093c8:	197b      	adds	r3, r7, r5
 80093ca:	1c22      	adds	r2, r4, #0
 80093cc:	801a      	strh	r2, [r3, #0]
 80093ce:	2308      	movs	r3, #8
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	1c02      	adds	r2, r0, #0
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	1dbb      	adds	r3, r7, #6
 80093d8:	1c0a      	adds	r2, r1, #0
 80093da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80093dc:	1dbb      	adds	r3, r7, #6
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	2380      	movs	r3, #128	@ 0x80
 80093e4:	045c      	lsls	r4, r3, #17
 80093e6:	197b      	adds	r3, r7, r5
 80093e8:	8819      	ldrh	r1, [r3, #0]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	4b23      	ldr	r3, [pc, #140]	@ (800947c <I2C_RequestMemoryWrite+0xc4>)
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	0023      	movs	r3, r4
 80093f2:	f000 fb41 	bl	8009a78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093f8:	6a39      	ldr	r1, [r7, #32]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	0018      	movs	r0, r3
 80093fe:	f000 f91b 	bl	8009638 <I2C_WaitOnTXISFlagUntilTimeout>
 8009402:	1e03      	subs	r3, r0, #0
 8009404:	d001      	beq.n	800940a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e033      	b.n	8009472 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800940a:	1dbb      	adds	r3, r7, #6
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d107      	bne.n	8009422 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009412:	2308      	movs	r3, #8
 8009414:	18fb      	adds	r3, r7, r3
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	b2da      	uxtb	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009420:	e019      	b.n	8009456 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009422:	2308      	movs	r3, #8
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	b29b      	uxth	r3, r3
 800942c:	b2da      	uxtb	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009436:	6a39      	ldr	r1, [r7, #32]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	0018      	movs	r0, r3
 800943c:	f000 f8fc 	bl	8009638 <I2C_WaitOnTXISFlagUntilTimeout>
 8009440:	1e03      	subs	r3, r0, #0
 8009442:	d001      	beq.n	8009448 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e014      	b.n	8009472 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009448:	2308      	movs	r3, #8
 800944a:	18fb      	adds	r3, r7, r3
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	b2da      	uxtb	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009456:	6a3a      	ldr	r2, [r7, #32]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	0013      	movs	r3, r2
 8009460:	2200      	movs	r2, #0
 8009462:	2180      	movs	r1, #128	@ 0x80
 8009464:	f000 f890 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 8009468:	1e03      	subs	r3, r0, #0
 800946a:	d001      	beq.n	8009470 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e000      	b.n	8009472 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	0018      	movs	r0, r3
 8009474:	46bd      	mov	sp, r7
 8009476:	b004      	add	sp, #16
 8009478:	bdb0      	pop	{r4, r5, r7, pc}
 800947a:	46c0      	nop			@ (mov r8, r8)
 800947c:	80002000 	.word	0x80002000

08009480 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009480:	b5b0      	push	{r4, r5, r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af02      	add	r7, sp, #8
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	000c      	movs	r4, r1
 800948a:	0010      	movs	r0, r2
 800948c:	0019      	movs	r1, r3
 800948e:	250a      	movs	r5, #10
 8009490:	197b      	adds	r3, r7, r5
 8009492:	1c22      	adds	r2, r4, #0
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	2308      	movs	r3, #8
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	1c02      	adds	r2, r0, #0
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	1dbb      	adds	r3, r7, #6
 80094a0:	1c0a      	adds	r2, r1, #0
 80094a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80094a4:	1dbb      	adds	r3, r7, #6
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	197b      	adds	r3, r7, r5
 80094ac:	8819      	ldrh	r1, [r3, #0]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	4b23      	ldr	r3, [pc, #140]	@ (8009540 <I2C_RequestMemoryRead+0xc0>)
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2300      	movs	r3, #0
 80094b6:	f000 fadf 	bl	8009a78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094bc:	6a39      	ldr	r1, [r7, #32]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	0018      	movs	r0, r3
 80094c2:	f000 f8b9 	bl	8009638 <I2C_WaitOnTXISFlagUntilTimeout>
 80094c6:	1e03      	subs	r3, r0, #0
 80094c8:	d001      	beq.n	80094ce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e033      	b.n	8009536 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094ce:	1dbb      	adds	r3, r7, #6
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d107      	bne.n	80094e6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094d6:	2308      	movs	r3, #8
 80094d8:	18fb      	adds	r3, r7, r3
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80094e4:	e019      	b.n	800951a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094e6:	2308      	movs	r3, #8
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094fa:	6a39      	ldr	r1, [r7, #32]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	0018      	movs	r0, r3
 8009500:	f000 f89a 	bl	8009638 <I2C_WaitOnTXISFlagUntilTimeout>
 8009504:	1e03      	subs	r3, r0, #0
 8009506:	d001      	beq.n	800950c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e014      	b.n	8009536 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800950c:	2308      	movs	r3, #8
 800950e:	18fb      	adds	r3, r7, r3
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b2da      	uxtb	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800951a:	6a3a      	ldr	r2, [r7, #32]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	0013      	movs	r3, r2
 8009524:	2200      	movs	r2, #0
 8009526:	2140      	movs	r1, #64	@ 0x40
 8009528:	f000 f82e 	bl	8009588 <I2C_WaitOnFlagUntilTimeout>
 800952c:	1e03      	subs	r3, r0, #0
 800952e:	d001      	beq.n	8009534 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e000      	b.n	8009536 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	0018      	movs	r0, r3
 8009538:	46bd      	mov	sp, r7
 800953a:	b004      	add	sp, #16
 800953c:	bdb0      	pop	{r4, r5, r7, pc}
 800953e:	46c0      	nop			@ (mov r8, r8)
 8009540:	80002000 	.word	0x80002000

08009544 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2202      	movs	r2, #2
 8009554:	4013      	ands	r3, r2
 8009556:	2b02      	cmp	r3, #2
 8009558:	d103      	bne.n	8009562 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	2201      	movs	r2, #1
 800956a:	4013      	ands	r3, r2
 800956c:	2b01      	cmp	r3, #1
 800956e:	d007      	beq.n	8009580 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	699a      	ldr	r2, [r3, #24]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2101      	movs	r1, #1
 800957c:	430a      	orrs	r2, r1
 800957e:	619a      	str	r2, [r3, #24]
  }
}
 8009580:	46c0      	nop			@ (mov r8, r8)
 8009582:	46bd      	mov	sp, r7
 8009584:	b002      	add	sp, #8
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	1dfb      	adds	r3, r7, #7
 8009596:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009598:	e03a      	b.n	8009610 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	0018      	movs	r0, r3
 80095a2:	f000 f971 	bl	8009888 <I2C_IsErrorOccurred>
 80095a6:	1e03      	subs	r3, r0, #0
 80095a8:	d001      	beq.n	80095ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e040      	b.n	8009630 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	d02d      	beq.n	8009610 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095b4:	f7fe fb82 	bl	8007cbc <HAL_GetTick>
 80095b8:	0002      	movs	r2, r0
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d302      	bcc.n	80095ca <I2C_WaitOnFlagUntilTimeout+0x42>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d122      	bne.n	8009610 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	4013      	ands	r3, r2
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	425a      	negs	r2, r3
 80095da:	4153      	adcs	r3, r2
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	001a      	movs	r2, r3
 80095e0:	1dfb      	adds	r3, r7, #7
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d113      	bne.n	8009610 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ec:	2220      	movs	r2, #32
 80095ee:	431a      	orrs	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2241      	movs	r2, #65	@ 0x41
 80095f8:	2120      	movs	r1, #32
 80095fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2242      	movs	r2, #66	@ 0x42
 8009600:	2100      	movs	r1, #0
 8009602:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2240      	movs	r2, #64	@ 0x40
 8009608:	2100      	movs	r1, #0
 800960a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e00f      	b.n	8009630 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	4013      	ands	r3, r2
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	425a      	negs	r2, r3
 8009620:	4153      	adcs	r3, r2
 8009622:	b2db      	uxtb	r3, r3
 8009624:	001a      	movs	r2, r3
 8009626:	1dfb      	adds	r3, r7, #7
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d0b5      	beq.n	800959a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	0018      	movs	r0, r3
 8009632:	46bd      	mov	sp, r7
 8009634:	b004      	add	sp, #16
 8009636:	bd80      	pop	{r7, pc}

08009638 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009644:	e032      	b.n	80096ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	68b9      	ldr	r1, [r7, #8]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	0018      	movs	r0, r3
 800964e:	f000 f91b 	bl	8009888 <I2C_IsErrorOccurred>
 8009652:	1e03      	subs	r3, r0, #0
 8009654:	d001      	beq.n	800965a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e030      	b.n	80096bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	3301      	adds	r3, #1
 800965e:	d025      	beq.n	80096ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009660:	f7fe fb2c 	bl	8007cbc <HAL_GetTick>
 8009664:	0002      	movs	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	429a      	cmp	r2, r3
 800966e:	d302      	bcc.n	8009676 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d11a      	bne.n	80096ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	2202      	movs	r2, #2
 800967e:	4013      	ands	r3, r2
 8009680:	2b02      	cmp	r3, #2
 8009682:	d013      	beq.n	80096ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009688:	2220      	movs	r2, #32
 800968a:	431a      	orrs	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2241      	movs	r2, #65	@ 0x41
 8009694:	2120      	movs	r1, #32
 8009696:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2242      	movs	r2, #66	@ 0x42
 800969c:	2100      	movs	r1, #0
 800969e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2240      	movs	r2, #64	@ 0x40
 80096a4:	2100      	movs	r1, #0
 80096a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e007      	b.n	80096bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	2202      	movs	r2, #2
 80096b4:	4013      	ands	r3, r2
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d1c5      	bne.n	8009646 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	0018      	movs	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	b004      	add	sp, #16
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096d0:	e02f      	b.n	8009732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	0018      	movs	r0, r3
 80096da:	f000 f8d5 	bl	8009888 <I2C_IsErrorOccurred>
 80096de:	1e03      	subs	r3, r0, #0
 80096e0:	d001      	beq.n	80096e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e02d      	b.n	8009742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e6:	f7fe fae9 	bl	8007cbc <HAL_GetTick>
 80096ea:	0002      	movs	r2, r0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d302      	bcc.n	80096fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11a      	bne.n	8009732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	2220      	movs	r2, #32
 8009704:	4013      	ands	r3, r2
 8009706:	2b20      	cmp	r3, #32
 8009708:	d013      	beq.n	8009732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800970e:	2220      	movs	r2, #32
 8009710:	431a      	orrs	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2241      	movs	r2, #65	@ 0x41
 800971a:	2120      	movs	r1, #32
 800971c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2242      	movs	r2, #66	@ 0x42
 8009722:	2100      	movs	r1, #0
 8009724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2240      	movs	r2, #64	@ 0x40
 800972a:	2100      	movs	r1, #0
 800972c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e007      	b.n	8009742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	2220      	movs	r2, #32
 800973a:	4013      	ands	r3, r2
 800973c:	2b20      	cmp	r3, #32
 800973e:	d1c8      	bne.n	80096d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	0018      	movs	r0, r3
 8009744:	46bd      	mov	sp, r7
 8009746:	b004      	add	sp, #16
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009758:	2317      	movs	r3, #23
 800975a:	18fb      	adds	r3, r7, r3
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009760:	e07b      	b.n	800985a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	0018      	movs	r0, r3
 800976a:	f000 f88d 	bl	8009888 <I2C_IsErrorOccurred>
 800976e:	1e03      	subs	r3, r0, #0
 8009770:	d003      	beq.n	800977a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8009772:	2317      	movs	r3, #23
 8009774:	18fb      	adds	r3, r7, r3
 8009776:	2201      	movs	r2, #1
 8009778:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	2220      	movs	r2, #32
 8009782:	4013      	ands	r3, r2
 8009784:	2b20      	cmp	r3, #32
 8009786:	d140      	bne.n	800980a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009788:	2117      	movs	r1, #23
 800978a:	187b      	adds	r3, r7, r1
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d13b      	bne.n	800980a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2204      	movs	r2, #4
 800979a:	4013      	ands	r3, r2
 800979c:	2b04      	cmp	r3, #4
 800979e:	d106      	bne.n	80097ae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80097a8:	187b      	adds	r3, r7, r1
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	2210      	movs	r2, #16
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b10      	cmp	r3, #16
 80097ba:	d123      	bne.n	8009804 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2210      	movs	r2, #16
 80097c2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2204      	movs	r2, #4
 80097c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2220      	movs	r2, #32
 80097d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4929      	ldr	r1, [pc, #164]	@ (8009884 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80097de:	400a      	ands	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2241      	movs	r2, #65	@ 0x41
 80097e6:	2120      	movs	r1, #32
 80097e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2242      	movs	r2, #66	@ 0x42
 80097ee:	2100      	movs	r1, #0
 80097f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2240      	movs	r2, #64	@ 0x40
 80097f6:	2100      	movs	r1, #0
 80097f8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80097fa:	2317      	movs	r3, #23
 80097fc:	18fb      	adds	r3, r7, r3
 80097fe:	2201      	movs	r2, #1
 8009800:	701a      	strb	r2, [r3, #0]
 8009802:	e002      	b.n	800980a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800980a:	f7fe fa57 	bl	8007cbc <HAL_GetTick>
 800980e:	0002      	movs	r2, r0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	d302      	bcc.n	8009820 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d11c      	bne.n	800985a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8009820:	2017      	movs	r0, #23
 8009822:	183b      	adds	r3, r7, r0
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d117      	bne.n	800985a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2204      	movs	r2, #4
 8009832:	4013      	ands	r3, r2
 8009834:	2b04      	cmp	r3, #4
 8009836:	d010      	beq.n	800985a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800983c:	2220      	movs	r2, #32
 800983e:	431a      	orrs	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2241      	movs	r2, #65	@ 0x41
 8009848:	2120      	movs	r1, #32
 800984a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2240      	movs	r2, #64	@ 0x40
 8009850:	2100      	movs	r1, #0
 8009852:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009854:	183b      	adds	r3, r7, r0
 8009856:	2201      	movs	r2, #1
 8009858:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2204      	movs	r2, #4
 8009862:	4013      	ands	r3, r2
 8009864:	2b04      	cmp	r3, #4
 8009866:	d005      	beq.n	8009874 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009868:	2317      	movs	r3, #23
 800986a:	18fb      	adds	r3, r7, r3
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d100      	bne.n	8009874 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009872:	e776      	b.n	8009762 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009874:	2317      	movs	r3, #23
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	781b      	ldrb	r3, [r3, #0]
}
 800987a:	0018      	movs	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	b006      	add	sp, #24
 8009880:	bd80      	pop	{r7, pc}
 8009882:	46c0      	nop			@ (mov r8, r8)
 8009884:	fe00e800 	.word	0xfe00e800

08009888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	@ 0x28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009894:	2327      	movs	r3, #39	@ 0x27
 8009896:	18fb      	adds	r3, r7, r3
 8009898:	2200      	movs	r2, #0
 800989a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	2210      	movs	r2, #16
 80098b0:	4013      	ands	r3, r2
 80098b2:	d100      	bne.n	80098b6 <I2C_IsErrorOccurred+0x2e>
 80098b4:	e079      	b.n	80099aa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2210      	movs	r2, #16
 80098bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098be:	e057      	b.n	8009970 <I2C_IsErrorOccurred+0xe8>
 80098c0:	2227      	movs	r2, #39	@ 0x27
 80098c2:	18bb      	adds	r3, r7, r2
 80098c4:	18ba      	adds	r2, r7, r2
 80098c6:	7812      	ldrb	r2, [r2, #0]
 80098c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	3301      	adds	r3, #1
 80098ce:	d04f      	beq.n	8009970 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098d0:	f7fe f9f4 	bl	8007cbc <HAL_GetTick>
 80098d4:	0002      	movs	r2, r0
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d302      	bcc.n	80098e6 <I2C_IsErrorOccurred+0x5e>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d144      	bne.n	8009970 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	2380      	movs	r3, #128	@ 0x80
 80098ee:	01db      	lsls	r3, r3, #7
 80098f0:	4013      	ands	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80098f4:	2013      	movs	r0, #19
 80098f6:	183b      	adds	r3, r7, r0
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	2142      	movs	r1, #66	@ 0x42
 80098fc:	5c52      	ldrb	r2, [r2, r1]
 80098fe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	2380      	movs	r3, #128	@ 0x80
 8009908:	021b      	lsls	r3, r3, #8
 800990a:	401a      	ands	r2, r3
 800990c:	2380      	movs	r3, #128	@ 0x80
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	429a      	cmp	r2, r3
 8009912:	d126      	bne.n	8009962 <I2C_IsErrorOccurred+0xda>
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	2380      	movs	r3, #128	@ 0x80
 8009918:	01db      	lsls	r3, r3, #7
 800991a:	429a      	cmp	r2, r3
 800991c:	d021      	beq.n	8009962 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800991e:	183b      	adds	r3, r7, r0
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b20      	cmp	r3, #32
 8009924:	d01d      	beq.n	8009962 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2180      	movs	r1, #128	@ 0x80
 8009932:	01c9      	lsls	r1, r1, #7
 8009934:	430a      	orrs	r2, r1
 8009936:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009938:	f7fe f9c0 	bl	8007cbc <HAL_GetTick>
 800993c:	0003      	movs	r3, r0
 800993e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009940:	e00f      	b.n	8009962 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009942:	f7fe f9bb 	bl	8007cbc <HAL_GetTick>
 8009946:	0002      	movs	r2, r0
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b19      	cmp	r3, #25
 800994e:	d908      	bls.n	8009962 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	2220      	movs	r2, #32
 8009954:	4313      	orrs	r3, r2
 8009956:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009958:	2327      	movs	r3, #39	@ 0x27
 800995a:	18fb      	adds	r3, r7, r3
 800995c:	2201      	movs	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]

              break;
 8009960:	e006      	b.n	8009970 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	2220      	movs	r2, #32
 800996a:	4013      	ands	r3, r2
 800996c:	2b20      	cmp	r3, #32
 800996e:	d1e8      	bne.n	8009942 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2220      	movs	r2, #32
 8009978:	4013      	ands	r3, r2
 800997a:	2b20      	cmp	r3, #32
 800997c:	d004      	beq.n	8009988 <I2C_IsErrorOccurred+0x100>
 800997e:	2327      	movs	r3, #39	@ 0x27
 8009980:	18fb      	adds	r3, r7, r3
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d09b      	beq.n	80098c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009988:	2327      	movs	r3, #39	@ 0x27
 800998a:	18fb      	adds	r3, r7, r3
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2220      	movs	r2, #32
 8009998:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	2204      	movs	r2, #4
 800999e:	4313      	orrs	r3, r2
 80099a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80099a2:	2327      	movs	r3, #39	@ 0x27
 80099a4:	18fb      	adds	r3, r7, r3
 80099a6:	2201      	movs	r2, #1
 80099a8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	2380      	movs	r3, #128	@ 0x80
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	4013      	ands	r3, r2
 80099ba:	d00c      	beq.n	80099d6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	2201      	movs	r2, #1
 80099c0:	4313      	orrs	r3, r2
 80099c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2280      	movs	r2, #128	@ 0x80
 80099ca:	0052      	lsls	r2, r2, #1
 80099cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099ce:	2327      	movs	r3, #39	@ 0x27
 80099d0:	18fb      	adds	r3, r7, r3
 80099d2:	2201      	movs	r2, #1
 80099d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	2380      	movs	r3, #128	@ 0x80
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4013      	ands	r3, r2
 80099de:	d00c      	beq.n	80099fa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	2208      	movs	r2, #8
 80099e4:	4313      	orrs	r3, r2
 80099e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2280      	movs	r2, #128	@ 0x80
 80099ee:	00d2      	lsls	r2, r2, #3
 80099f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80099f2:	2327      	movs	r3, #39	@ 0x27
 80099f4:	18fb      	adds	r3, r7, r3
 80099f6:	2201      	movs	r2, #1
 80099f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	2380      	movs	r3, #128	@ 0x80
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4013      	ands	r3, r2
 8009a02:	d00c      	beq.n	8009a1e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	2202      	movs	r2, #2
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2280      	movs	r2, #128	@ 0x80
 8009a12:	0092      	lsls	r2, r2, #2
 8009a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a16:	2327      	movs	r3, #39	@ 0x27
 8009a18:	18fb      	adds	r3, r7, r3
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009a1e:	2327      	movs	r3, #39	@ 0x27
 8009a20:	18fb      	adds	r3, r7, r3
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01d      	beq.n	8009a64 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f7ff fd8a 	bl	8009544 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	490e      	ldr	r1, [pc, #56]	@ (8009a74 <I2C_IsErrorOccurred+0x1ec>)
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2241      	movs	r2, #65	@ 0x41
 8009a50:	2120      	movs	r1, #32
 8009a52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2242      	movs	r2, #66	@ 0x42
 8009a58:	2100      	movs	r1, #0
 8009a5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2240      	movs	r2, #64	@ 0x40
 8009a60:	2100      	movs	r1, #0
 8009a62:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009a64:	2327      	movs	r3, #39	@ 0x27
 8009a66:	18fb      	adds	r3, r7, r3
 8009a68:	781b      	ldrb	r3, [r3, #0]
}
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	b00a      	add	sp, #40	@ 0x28
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	46c0      	nop			@ (mov r8, r8)
 8009a74:	fe00e800 	.word	0xfe00e800

08009a78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	0008      	movs	r0, r1
 8009a82:	0011      	movs	r1, r2
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	240a      	movs	r4, #10
 8009a88:	193b      	adds	r3, r7, r4
 8009a8a:	1c02      	adds	r2, r0, #0
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	2009      	movs	r0, #9
 8009a90:	183b      	adds	r3, r7, r0
 8009a92:	1c0a      	adds	r2, r1, #0
 8009a94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a96:	193b      	adds	r3, r7, r4
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	059b      	lsls	r3, r3, #22
 8009a9c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a9e:	183b      	adds	r3, r7, r0
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	0419      	lsls	r1, r3, #16
 8009aa4:	23ff      	movs	r3, #255	@ 0xff
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009aaa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ac2:	0d51      	lsrs	r1, r2, #21
 8009ac4:	2280      	movs	r2, #128	@ 0x80
 8009ac6:	00d2      	lsls	r2, r2, #3
 8009ac8:	400a      	ands	r2, r1
 8009aca:	4907      	ldr	r1, [pc, #28]	@ (8009ae8 <I2C_TransferConfig+0x70>)
 8009acc:	430a      	orrs	r2, r1
 8009ace:	43d2      	mvns	r2, r2
 8009ad0:	401a      	ands	r2, r3
 8009ad2:	0011      	movs	r1, r2
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ade:	46c0      	nop			@ (mov r8, r8)
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b007      	add	sp, #28
 8009ae4:	bd90      	pop	{r4, r7, pc}
 8009ae6:	46c0      	nop			@ (mov r8, r8)
 8009ae8:	03ff63ff 	.word	0x03ff63ff

08009aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2241      	movs	r2, #65	@ 0x41
 8009afa:	5c9b      	ldrb	r3, [r3, r2]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d138      	bne.n	8009b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2240      	movs	r2, #64	@ 0x40
 8009b06:	5c9b      	ldrb	r3, [r3, r2]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e032      	b.n	8009b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2240      	movs	r2, #64	@ 0x40
 8009b14:	2101      	movs	r1, #1
 8009b16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2241      	movs	r2, #65	@ 0x41
 8009b1c:	2124      	movs	r1, #36	@ 0x24
 8009b1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	438a      	bics	r2, r1
 8009b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4911      	ldr	r1, [pc, #68]	@ (8009b80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009b3c:	400a      	ands	r2, r1
 8009b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6819      	ldr	r1, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2241      	movs	r2, #65	@ 0x41
 8009b64:	2120      	movs	r1, #32
 8009b66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2240      	movs	r2, #64	@ 0x40
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	e000      	b.n	8009b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b74:	2302      	movs	r3, #2
  }
}
 8009b76:	0018      	movs	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b002      	add	sp, #8
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	46c0      	nop			@ (mov r8, r8)
 8009b80:	ffffefff 	.word	0xffffefff

08009b84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2241      	movs	r2, #65	@ 0x41
 8009b92:	5c9b      	ldrb	r3, [r3, r2]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d139      	bne.n	8009c0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2240      	movs	r2, #64	@ 0x40
 8009b9e:	5c9b      	ldrb	r3, [r3, r2]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e033      	b.n	8009c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2240      	movs	r2, #64	@ 0x40
 8009bac:	2101      	movs	r1, #1
 8009bae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2241      	movs	r2, #65	@ 0x41
 8009bb4:	2124      	movs	r1, #36	@ 0x24
 8009bb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	438a      	bics	r2, r1
 8009bc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a11      	ldr	r2, [pc, #68]	@ (8009c18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2241      	movs	r2, #65	@ 0x41
 8009bfe:	2120      	movs	r1, #32
 8009c00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2240      	movs	r2, #64	@ 0x40
 8009c06:	2100      	movs	r1, #0
 8009c08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e000      	b.n	8009c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
  }
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b004      	add	sp, #16
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	fffff0ff 	.word	0xfffff0ff

08009c1c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c20:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	4b03      	ldr	r3, [pc, #12]	@ (8009c34 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009c26:	2180      	movs	r1, #128	@ 0x80
 8009c28:	0049      	lsls	r1, r1, #1
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	601a      	str	r2, [r3, #0]
}
 8009c2e:	46c0      	nop			@ (mov r8, r8)
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40007000 	.word	0x40007000

08009c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009c40:	4b19      	ldr	r3, [pc, #100]	@ (8009ca8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a19      	ldr	r2, [pc, #100]	@ (8009cac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009c46:	4013      	ands	r3, r2
 8009c48:	0019      	movs	r1, r3
 8009c4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ca8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	2380      	movs	r3, #128	@ 0x80
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d11f      	bne.n	8009c9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009c5c:	4b14      	ldr	r3, [pc, #80]	@ (8009cb0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	0013      	movs	r3, r2
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	189b      	adds	r3, r3, r2
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4912      	ldr	r1, [pc, #72]	@ (8009cb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f7f6 fa68 	bl	8000140 <__udivsi3>
 8009c70:	0003      	movs	r3, r0
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c76:	e008      	b.n	8009c8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3b01      	subs	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	e001      	b.n	8009c8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e009      	b.n	8009c9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c8c:	695a      	ldr	r2, [r3, #20]
 8009c8e:	2380      	movs	r3, #128	@ 0x80
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	401a      	ands	r2, r3
 8009c94:	2380      	movs	r3, #128	@ 0x80
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d0ed      	beq.n	8009c78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b004      	add	sp, #16
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	46c0      	nop			@ (mov r8, r8)
 8009ca8:	40007000 	.word	0x40007000
 8009cac:	fffff9ff 	.word	0xfffff9ff
 8009cb0:	20000068 	.word	0x20000068
 8009cb4:	000f4240 	.word	0x000f4240

08009cb8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009cbc:	4b03      	ldr	r3, [pc, #12]	@ (8009ccc <LL_RCC_GetAPB1Prescaler+0x14>)
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	23e0      	movs	r3, #224	@ 0xe0
 8009cc2:	01db      	lsls	r3, r3, #7
 8009cc4:	4013      	ands	r3, r2
}
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40021000 	.word	0x40021000

08009cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e2fe      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d100      	bne.n	8009cee <HAL_RCC_OscConfig+0x1e>
 8009cec:	e07c      	b.n	8009de8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cee:	4bc3      	ldr	r3, [pc, #780]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2238      	movs	r2, #56	@ 0x38
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cf8:	4bc0      	ldr	r3, [pc, #768]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	4013      	ands	r3, r2
 8009d00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	2b10      	cmp	r3, #16
 8009d06:	d102      	bne.n	8009d0e <HAL_RCC_OscConfig+0x3e>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d002      	beq.n	8009d14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d10b      	bne.n	8009d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d14:	4bb9      	ldr	r3, [pc, #740]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	2380      	movs	r3, #128	@ 0x80
 8009d1a:	029b      	lsls	r3, r3, #10
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	d062      	beq.n	8009de6 <HAL_RCC_OscConfig+0x116>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d15e      	bne.n	8009de6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e2d9      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	2380      	movs	r3, #128	@ 0x80
 8009d32:	025b      	lsls	r3, r3, #9
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d107      	bne.n	8009d48 <HAL_RCC_OscConfig+0x78>
 8009d38:	4bb0      	ldr	r3, [pc, #704]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	4baf      	ldr	r3, [pc, #700]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d3e:	2180      	movs	r1, #128	@ 0x80
 8009d40:	0249      	lsls	r1, r1, #9
 8009d42:	430a      	orrs	r2, r1
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e020      	b.n	8009d8a <HAL_RCC_OscConfig+0xba>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	23a0      	movs	r3, #160	@ 0xa0
 8009d4e:	02db      	lsls	r3, r3, #11
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d10e      	bne.n	8009d72 <HAL_RCC_OscConfig+0xa2>
 8009d54:	4ba9      	ldr	r3, [pc, #676]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	4ba8      	ldr	r3, [pc, #672]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d5a:	2180      	movs	r1, #128	@ 0x80
 8009d5c:	02c9      	lsls	r1, r1, #11
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	4ba6      	ldr	r3, [pc, #664]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	4ba5      	ldr	r3, [pc, #660]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d68:	2180      	movs	r1, #128	@ 0x80
 8009d6a:	0249      	lsls	r1, r1, #9
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e00b      	b.n	8009d8a <HAL_RCC_OscConfig+0xba>
 8009d72:	4ba2      	ldr	r3, [pc, #648]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4ba1      	ldr	r3, [pc, #644]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d78:	49a1      	ldr	r1, [pc, #644]	@ (800a000 <HAL_RCC_OscConfig+0x330>)
 8009d7a:	400a      	ands	r2, r1
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	4b9f      	ldr	r3, [pc, #636]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b9e      	ldr	r3, [pc, #632]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009d84:	499f      	ldr	r1, [pc, #636]	@ (800a004 <HAL_RCC_OscConfig+0x334>)
 8009d86:	400a      	ands	r2, r1
 8009d88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d014      	beq.n	8009dbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d92:	f7fd ff93 	bl	8007cbc <HAL_GetTick>
 8009d96:	0003      	movs	r3, r0
 8009d98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d9a:	e008      	b.n	8009dae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d9c:	f7fd ff8e 	bl	8007cbc <HAL_GetTick>
 8009da0:	0002      	movs	r2, r0
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b64      	cmp	r3, #100	@ 0x64
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e298      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009dae:	4b93      	ldr	r3, [pc, #588]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	2380      	movs	r3, #128	@ 0x80
 8009db4:	029b      	lsls	r3, r3, #10
 8009db6:	4013      	ands	r3, r2
 8009db8:	d0f0      	beq.n	8009d9c <HAL_RCC_OscConfig+0xcc>
 8009dba:	e015      	b.n	8009de8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dbc:	f7fd ff7e 	bl	8007cbc <HAL_GetTick>
 8009dc0:	0003      	movs	r3, r0
 8009dc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009dc4:	e008      	b.n	8009dd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dc6:	f7fd ff79 	bl	8007cbc <HAL_GetTick>
 8009dca:	0002      	movs	r2, r0
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	2b64      	cmp	r3, #100	@ 0x64
 8009dd2:	d901      	bls.n	8009dd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e283      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009dd8:	4b88      	ldr	r3, [pc, #544]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	2380      	movs	r3, #128	@ 0x80
 8009dde:	029b      	lsls	r3, r3, #10
 8009de0:	4013      	ands	r3, r2
 8009de2:	d1f0      	bne.n	8009dc6 <HAL_RCC_OscConfig+0xf6>
 8009de4:	e000      	b.n	8009de8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009de6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2202      	movs	r2, #2
 8009dee:	4013      	ands	r3, r2
 8009df0:	d100      	bne.n	8009df4 <HAL_RCC_OscConfig+0x124>
 8009df2:	e099      	b.n	8009f28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df4:	4b81      	ldr	r3, [pc, #516]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2238      	movs	r2, #56	@ 0x38
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	2203      	movs	r2, #3
 8009e04:	4013      	ands	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	2b10      	cmp	r3, #16
 8009e0c:	d102      	bne.n	8009e14 <HAL_RCC_OscConfig+0x144>
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d002      	beq.n	8009e1a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d135      	bne.n	8009e86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e1a:	4b78      	ldr	r3, [pc, #480]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	2380      	movs	r3, #128	@ 0x80
 8009e20:	00db      	lsls	r3, r3, #3
 8009e22:	4013      	ands	r3, r2
 8009e24:	d005      	beq.n	8009e32 <HAL_RCC_OscConfig+0x162>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e256      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e32:	4b72      	ldr	r3, [pc, #456]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	4a74      	ldr	r2, [pc, #464]	@ (800a008 <HAL_RCC_OscConfig+0x338>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	0019      	movs	r1, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	021a      	lsls	r2, r3, #8
 8009e42:	4b6e      	ldr	r3, [pc, #440]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e44:	430a      	orrs	r2, r1
 8009e46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d112      	bne.n	8009e74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a6e      	ldr	r2, [pc, #440]	@ (800a00c <HAL_RCC_OscConfig+0x33c>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	0019      	movs	r1, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691a      	ldr	r2, [r3, #16]
 8009e5c:	4b67      	ldr	r3, [pc, #412]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009e62:	4b66      	ldr	r3, [pc, #408]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	0adb      	lsrs	r3, r3, #11
 8009e68:	2207      	movs	r2, #7
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	4a68      	ldr	r2, [pc, #416]	@ (800a010 <HAL_RCC_OscConfig+0x340>)
 8009e6e:	40da      	lsrs	r2, r3
 8009e70:	4b68      	ldr	r3, [pc, #416]	@ (800a014 <HAL_RCC_OscConfig+0x344>)
 8009e72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009e74:	4b68      	ldr	r3, [pc, #416]	@ (800a018 <HAL_RCC_OscConfig+0x348>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f7fd f975 	bl	8007168 <HAL_InitTick>
 8009e7e:	1e03      	subs	r3, r0, #0
 8009e80:	d051      	beq.n	8009f26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e22c      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d030      	beq.n	8009ef0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a5e      	ldr	r2, [pc, #376]	@ (800a00c <HAL_RCC_OscConfig+0x33c>)
 8009e94:	4013      	ands	r3, r2
 8009e96:	0019      	movs	r1, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	4b57      	ldr	r3, [pc, #348]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009ea2:	4b56      	ldr	r3, [pc, #344]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	4b55      	ldr	r3, [pc, #340]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009ea8:	2180      	movs	r1, #128	@ 0x80
 8009eaa:	0049      	lsls	r1, r1, #1
 8009eac:	430a      	orrs	r2, r1
 8009eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb0:	f7fd ff04 	bl	8007cbc <HAL_GetTick>
 8009eb4:	0003      	movs	r3, r0
 8009eb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009eb8:	e008      	b.n	8009ecc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eba:	f7fd feff 	bl	8007cbc <HAL_GetTick>
 8009ebe:	0002      	movs	r2, r0
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e209      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	d0f0      	beq.n	8009eba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed8:	4b48      	ldr	r3, [pc, #288]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4a4a      	ldr	r2, [pc, #296]	@ (800a008 <HAL_RCC_OscConfig+0x338>)
 8009ede:	4013      	ands	r3, r2
 8009ee0:	0019      	movs	r1, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	021a      	lsls	r2, r3, #8
 8009ee8:	4b44      	ldr	r3, [pc, #272]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
 8009eee:	e01b      	b.n	8009f28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009ef0:	4b42      	ldr	r3, [pc, #264]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	4b41      	ldr	r3, [pc, #260]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009ef6:	4949      	ldr	r1, [pc, #292]	@ (800a01c <HAL_RCC_OscConfig+0x34c>)
 8009ef8:	400a      	ands	r2, r1
 8009efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009efc:	f7fd fede 	bl	8007cbc <HAL_GetTick>
 8009f00:	0003      	movs	r3, r0
 8009f02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f04:	e008      	b.n	8009f18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f06:	f7fd fed9 	bl	8007cbc <HAL_GetTick>
 8009f0a:	0002      	movs	r2, r0
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d901      	bls.n	8009f18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e1e3      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f18:	4b38      	ldr	r3, [pc, #224]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	2380      	movs	r3, #128	@ 0x80
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	4013      	ands	r3, r2
 8009f22:	d1f0      	bne.n	8009f06 <HAL_RCC_OscConfig+0x236>
 8009f24:	e000      	b.n	8009f28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	4013      	ands	r3, r2
 8009f30:	d047      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009f32:	4b32      	ldr	r3, [pc, #200]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	2238      	movs	r2, #56	@ 0x38
 8009f38:	4013      	ands	r3, r2
 8009f3a:	2b18      	cmp	r3, #24
 8009f3c:	d10a      	bne.n	8009f54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f42:	2202      	movs	r2, #2
 8009f44:	4013      	ands	r3, r2
 8009f46:	d03c      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x2f2>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d138      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e1c5      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d019      	beq.n	8009f90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009f5c:	4b27      	ldr	r3, [pc, #156]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009f60:	4b26      	ldr	r3, [pc, #152]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f62:	2101      	movs	r1, #1
 8009f64:	430a      	orrs	r2, r1
 8009f66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f68:	f7fd fea8 	bl	8007cbc <HAL_GetTick>
 8009f6c:	0003      	movs	r3, r0
 8009f6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f70:	e008      	b.n	8009f84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f72:	f7fd fea3 	bl	8007cbc <HAL_GetTick>
 8009f76:	0002      	movs	r2, r0
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e1ad      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f84:	4b1d      	ldr	r3, [pc, #116]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f88:	2202      	movs	r2, #2
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	d0f1      	beq.n	8009f72 <HAL_RCC_OscConfig+0x2a2>
 8009f8e:	e018      	b.n	8009fc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009f90:	4b1a      	ldr	r3, [pc, #104]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009f94:	4b19      	ldr	r3, [pc, #100]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009f96:	2101      	movs	r1, #1
 8009f98:	438a      	bics	r2, r1
 8009f9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9c:	f7fd fe8e 	bl	8007cbc <HAL_GetTick>
 8009fa0:	0003      	movs	r3, r0
 8009fa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fa6:	f7fd fe89 	bl	8007cbc <HAL_GetTick>
 8009faa:	0002      	movs	r2, r0
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e193      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fb8:	4b10      	ldr	r3, [pc, #64]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	d1f1      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	4013      	ands	r3, r2
 8009fca:	d100      	bne.n	8009fce <HAL_RCC_OscConfig+0x2fe>
 8009fcc:	e0c6      	b.n	800a15c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fce:	231f      	movs	r3, #31
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	2238      	movs	r2, #56	@ 0x38
 8009fdc:	4013      	ands	r3, r2
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	d11e      	bne.n	800a020 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009fe2:	4b06      	ldr	r3, [pc, #24]	@ (8009ffc <HAL_RCC_OscConfig+0x32c>)
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	4013      	ands	r3, r2
 8009fea:	d100      	bne.n	8009fee <HAL_RCC_OscConfig+0x31e>
 8009fec:	e0b6      	b.n	800a15c <HAL_RCC_OscConfig+0x48c>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d000      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x328>
 8009ff6:	e0b1      	b.n	800a15c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e171      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
 8009ffc:	40021000 	.word	0x40021000
 800a000:	fffeffff 	.word	0xfffeffff
 800a004:	fffbffff 	.word	0xfffbffff
 800a008:	ffff80ff 	.word	0xffff80ff
 800a00c:	ffffc7ff 	.word	0xffffc7ff
 800a010:	00f42400 	.word	0x00f42400
 800a014:	20000068 	.word	0x20000068
 800a018:	20000074 	.word	0x20000074
 800a01c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a020:	4bb1      	ldr	r3, [pc, #708]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a022:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a024:	2380      	movs	r3, #128	@ 0x80
 800a026:	055b      	lsls	r3, r3, #21
 800a028:	4013      	ands	r3, r2
 800a02a:	d101      	bne.n	800a030 <HAL_RCC_OscConfig+0x360>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e000      	b.n	800a032 <HAL_RCC_OscConfig+0x362>
 800a030:	2300      	movs	r3, #0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d011      	beq.n	800a05a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a036:	4bac      	ldr	r3, [pc, #688]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a03a:	4bab      	ldr	r3, [pc, #684]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a03c:	2180      	movs	r1, #128	@ 0x80
 800a03e:	0549      	lsls	r1, r1, #21
 800a040:	430a      	orrs	r2, r1
 800a042:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a044:	4ba8      	ldr	r3, [pc, #672]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a048:	2380      	movs	r3, #128	@ 0x80
 800a04a:	055b      	lsls	r3, r3, #21
 800a04c:	4013      	ands	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a052:	231f      	movs	r3, #31
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	2201      	movs	r2, #1
 800a058:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a05a:	4ba4      	ldr	r3, [pc, #656]	@ (800a2ec <HAL_RCC_OscConfig+0x61c>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	2380      	movs	r3, #128	@ 0x80
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	4013      	ands	r3, r2
 800a064:	d11a      	bne.n	800a09c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a066:	4ba1      	ldr	r3, [pc, #644]	@ (800a2ec <HAL_RCC_OscConfig+0x61c>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	4ba0      	ldr	r3, [pc, #640]	@ (800a2ec <HAL_RCC_OscConfig+0x61c>)
 800a06c:	2180      	movs	r1, #128	@ 0x80
 800a06e:	0049      	lsls	r1, r1, #1
 800a070:	430a      	orrs	r2, r1
 800a072:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a074:	f7fd fe22 	bl	8007cbc <HAL_GetTick>
 800a078:	0003      	movs	r3, r0
 800a07a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a07e:	f7fd fe1d 	bl	8007cbc <HAL_GetTick>
 800a082:	0002      	movs	r2, r0
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e127      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a090:	4b96      	ldr	r3, [pc, #600]	@ (800a2ec <HAL_RCC_OscConfig+0x61c>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	2380      	movs	r3, #128	@ 0x80
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	4013      	ands	r3, r2
 800a09a:	d0f0      	beq.n	800a07e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d106      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x3e2>
 800a0a4:	4b90      	ldr	r3, [pc, #576]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0a8:	4b8f      	ldr	r3, [pc, #572]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0b0:	e01c      	b.n	800a0ec <HAL_RCC_OscConfig+0x41c>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	2b05      	cmp	r3, #5
 800a0b8:	d10c      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x404>
 800a0ba:	4b8b      	ldr	r3, [pc, #556]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0be:	4b8a      	ldr	r3, [pc, #552]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0c0:	2104      	movs	r1, #4
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0c6:	4b88      	ldr	r3, [pc, #544]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0ca:	4b87      	ldr	r3, [pc, #540]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0d2:	e00b      	b.n	800a0ec <HAL_RCC_OscConfig+0x41c>
 800a0d4:	4b84      	ldr	r3, [pc, #528]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0d8:	4b83      	ldr	r3, [pc, #524]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0da:	2101      	movs	r1, #1
 800a0dc:	438a      	bics	r2, r1
 800a0de:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0e0:	4b81      	ldr	r3, [pc, #516]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0e4:	4b80      	ldr	r3, [pc, #512]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a0e6:	2104      	movs	r1, #4
 800a0e8:	438a      	bics	r2, r1
 800a0ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d014      	beq.n	800a11e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f4:	f7fd fde2 	bl	8007cbc <HAL_GetTick>
 800a0f8:	0003      	movs	r3, r0
 800a0fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0fc:	e009      	b.n	800a112 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0fe:	f7fd fddd 	bl	8007cbc <HAL_GetTick>
 800a102:	0002      	movs	r2, r0
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	4a79      	ldr	r2, [pc, #484]	@ (800a2f0 <HAL_RCC_OscConfig+0x620>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e0e6      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a112:	4b75      	ldr	r3, [pc, #468]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a116:	2202      	movs	r2, #2
 800a118:	4013      	ands	r3, r2
 800a11a:	d0f0      	beq.n	800a0fe <HAL_RCC_OscConfig+0x42e>
 800a11c:	e013      	b.n	800a146 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11e:	f7fd fdcd 	bl	8007cbc <HAL_GetTick>
 800a122:	0003      	movs	r3, r0
 800a124:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a126:	e009      	b.n	800a13c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a128:	f7fd fdc8 	bl	8007cbc <HAL_GetTick>
 800a12c:	0002      	movs	r2, r0
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	4a6f      	ldr	r2, [pc, #444]	@ (800a2f0 <HAL_RCC_OscConfig+0x620>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d901      	bls.n	800a13c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e0d1      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a13c:	4b6a      	ldr	r3, [pc, #424]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a13e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a140:	2202      	movs	r2, #2
 800a142:	4013      	ands	r3, r2
 800a144:	d1f0      	bne.n	800a128 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a146:	231f      	movs	r3, #31
 800a148:	18fb      	adds	r3, r7, r3
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d105      	bne.n	800a15c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a150:	4b65      	ldr	r3, [pc, #404]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a154:	4b64      	ldr	r3, [pc, #400]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a156:	4967      	ldr	r1, [pc, #412]	@ (800a2f4 <HAL_RCC_OscConfig+0x624>)
 800a158:	400a      	ands	r2, r1
 800a15a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d100      	bne.n	800a166 <HAL_RCC_OscConfig+0x496>
 800a164:	e0bb      	b.n	800a2de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a166:	4b60      	ldr	r3, [pc, #384]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	2238      	movs	r2, #56	@ 0x38
 800a16c:	4013      	ands	r3, r2
 800a16e:	2b10      	cmp	r3, #16
 800a170:	d100      	bne.n	800a174 <HAL_RCC_OscConfig+0x4a4>
 800a172:	e07b      	b.n	800a26c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d156      	bne.n	800a22a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a17c:	4b5a      	ldr	r3, [pc, #360]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	4b59      	ldr	r3, [pc, #356]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a182:	495d      	ldr	r1, [pc, #372]	@ (800a2f8 <HAL_RCC_OscConfig+0x628>)
 800a184:	400a      	ands	r2, r1
 800a186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a188:	f7fd fd98 	bl	8007cbc <HAL_GetTick>
 800a18c:	0003      	movs	r3, r0
 800a18e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a190:	e008      	b.n	800a1a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a192:	f7fd fd93 	bl	8007cbc <HAL_GetTick>
 800a196:	0002      	movs	r2, r0
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d901      	bls.n	800a1a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e09d      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1a4:	4b50      	ldr	r3, [pc, #320]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	2380      	movs	r3, #128	@ 0x80
 800a1aa:	049b      	lsls	r3, r3, #18
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	d1f0      	bne.n	800a192 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	4a51      	ldr	r2, [pc, #324]	@ (800a2fc <HAL_RCC_OscConfig+0x62c>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	0019      	movs	r1, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1a      	ldr	r2, [r3, #32]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	4b42      	ldr	r3, [pc, #264]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1e4:	4b40      	ldr	r3, [pc, #256]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b3f      	ldr	r3, [pc, #252]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1ea:	2180      	movs	r1, #128	@ 0x80
 800a1ec:	0449      	lsls	r1, r1, #17
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a1f2:	4b3d      	ldr	r3, [pc, #244]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	4b3c      	ldr	r3, [pc, #240]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a1f8:	2180      	movs	r1, #128	@ 0x80
 800a1fa:	0549      	lsls	r1, r1, #21
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a200:	f7fd fd5c 	bl	8007cbc <HAL_GetTick>
 800a204:	0003      	movs	r3, r0
 800a206:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a208:	e008      	b.n	800a21c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a20a:	f7fd fd57 	bl	8007cbc <HAL_GetTick>
 800a20e:	0002      	movs	r2, r0
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e061      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a21c:	4b32      	ldr	r3, [pc, #200]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	2380      	movs	r3, #128	@ 0x80
 800a222:	049b      	lsls	r3, r3, #18
 800a224:	4013      	ands	r3, r2
 800a226:	d0f0      	beq.n	800a20a <HAL_RCC_OscConfig+0x53a>
 800a228:	e059      	b.n	800a2de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a22a:	4b2f      	ldr	r3, [pc, #188]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	4b2e      	ldr	r3, [pc, #184]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a230:	4931      	ldr	r1, [pc, #196]	@ (800a2f8 <HAL_RCC_OscConfig+0x628>)
 800a232:	400a      	ands	r2, r1
 800a234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a236:	f7fd fd41 	bl	8007cbc <HAL_GetTick>
 800a23a:	0003      	movs	r3, r0
 800a23c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a23e:	e008      	b.n	800a252 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a240:	f7fd fd3c 	bl	8007cbc <HAL_GetTick>
 800a244:	0002      	movs	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d901      	bls.n	800a252 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e046      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a252:	4b25      	ldr	r3, [pc, #148]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	2380      	movs	r3, #128	@ 0x80
 800a258:	049b      	lsls	r3, r3, #18
 800a25a:	4013      	ands	r3, r2
 800a25c:	d1f0      	bne.n	800a240 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a25e:	4b22      	ldr	r3, [pc, #136]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	4b21      	ldr	r3, [pc, #132]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a264:	4926      	ldr	r1, [pc, #152]	@ (800a300 <HAL_RCC_OscConfig+0x630>)
 800a266:	400a      	ands	r2, r1
 800a268:	60da      	str	r2, [r3, #12]
 800a26a:	e038      	b.n	800a2de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d101      	bne.n	800a278 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e033      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a278:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e8 <HAL_RCC_OscConfig+0x618>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2203      	movs	r2, #3
 800a282:	401a      	ands	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d126      	bne.n	800a2da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2270      	movs	r2, #112	@ 0x70
 800a290:	401a      	ands	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a296:	429a      	cmp	r2, r3
 800a298:	d11f      	bne.n	800a2da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	23fe      	movs	r3, #254	@ 0xfe
 800a29e:	01db      	lsls	r3, r3, #7
 800a2a0:	401a      	ands	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d116      	bne.n	800a2da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	23f8      	movs	r3, #248	@ 0xf8
 800a2b0:	039b      	lsls	r3, r3, #14
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d10e      	bne.n	800a2da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	23e0      	movs	r3, #224	@ 0xe0
 800a2c0:	051b      	lsls	r3, r3, #20
 800a2c2:	401a      	ands	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d106      	bne.n	800a2da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	0f5b      	lsrs	r3, r3, #29
 800a2d0:	075a      	lsls	r2, r3, #29
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d001      	beq.n	800a2de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b008      	add	sp, #32
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40021000 	.word	0x40021000
 800a2ec:	40007000 	.word	0x40007000
 800a2f0:	00001388 	.word	0x00001388
 800a2f4:	efffffff 	.word	0xefffffff
 800a2f8:	feffffff 	.word	0xfeffffff
 800a2fc:	11c1808c 	.word	0x11c1808c
 800a300:	eefefffc 	.word	0xeefefffc

0800a304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e0e9      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a318:	4b76      	ldr	r3, [pc, #472]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2207      	movs	r2, #7
 800a31e:	4013      	ands	r3, r2
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d91e      	bls.n	800a364 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a326:	4b73      	ldr	r3, [pc, #460]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2207      	movs	r2, #7
 800a32c:	4393      	bics	r3, r2
 800a32e:	0019      	movs	r1, r3
 800a330:	4b70      	ldr	r3, [pc, #448]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a338:	f7fd fcc0 	bl	8007cbc <HAL_GetTick>
 800a33c:	0003      	movs	r3, r0
 800a33e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a340:	e009      	b.n	800a356 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a342:	f7fd fcbb 	bl	8007cbc <HAL_GetTick>
 800a346:	0002      	movs	r2, r0
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	4a6a      	ldr	r2, [pc, #424]	@ (800a4f8 <HAL_RCC_ClockConfig+0x1f4>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d901      	bls.n	800a356 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e0ca      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a356:	4b67      	ldr	r3, [pc, #412]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2207      	movs	r2, #7
 800a35c:	4013      	ands	r3, r2
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d1ee      	bne.n	800a342 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2202      	movs	r2, #2
 800a36a:	4013      	ands	r3, r2
 800a36c:	d015      	beq.n	800a39a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2204      	movs	r2, #4
 800a374:	4013      	ands	r3, r2
 800a376:	d006      	beq.n	800a386 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a378:	4b60      	ldr	r3, [pc, #384]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	4b5f      	ldr	r3, [pc, #380]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a37e:	21e0      	movs	r1, #224	@ 0xe0
 800a380:	01c9      	lsls	r1, r1, #7
 800a382:	430a      	orrs	r2, r1
 800a384:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a386:	4b5d      	ldr	r3, [pc, #372]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	4a5d      	ldr	r2, [pc, #372]	@ (800a500 <HAL_RCC_ClockConfig+0x1fc>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	0019      	movs	r1, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	4b59      	ldr	r3, [pc, #356]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a396:	430a      	orrs	r2, r1
 800a398:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	d057      	beq.n	800a454 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d107      	bne.n	800a3bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3ac:	4b53      	ldr	r3, [pc, #332]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	2380      	movs	r3, #128	@ 0x80
 800a3b2:	029b      	lsls	r3, r3, #10
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d12b      	bne.n	800a410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e097      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d107      	bne.n	800a3d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3c4:	4b4d      	ldr	r3, [pc, #308]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	2380      	movs	r3, #128	@ 0x80
 800a3ca:	049b      	lsls	r3, r3, #18
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	d11f      	bne.n	800a410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e08b      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d107      	bne.n	800a3ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3dc:	4b47      	ldr	r3, [pc, #284]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	2380      	movs	r3, #128	@ 0x80
 800a3e2:	00db      	lsls	r3, r3, #3
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	d113      	bne.n	800a410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e07f      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d106      	bne.n	800a402 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3f4:	4b41      	ldr	r3, [pc, #260]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	d108      	bne.n	800a410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e074      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a402:	4b3e      	ldr	r3, [pc, #248]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a406:	2202      	movs	r2, #2
 800a408:	4013      	ands	r3, r2
 800a40a:	d101      	bne.n	800a410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e06d      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a410:	4b3a      	ldr	r3, [pc, #232]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	2207      	movs	r2, #7
 800a416:	4393      	bics	r3, r2
 800a418:	0019      	movs	r1, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	4b37      	ldr	r3, [pc, #220]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a420:	430a      	orrs	r2, r1
 800a422:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a424:	f7fd fc4a 	bl	8007cbc <HAL_GetTick>
 800a428:	0003      	movs	r3, r0
 800a42a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a42c:	e009      	b.n	800a442 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a42e:	f7fd fc45 	bl	8007cbc <HAL_GetTick>
 800a432:	0002      	movs	r2, r0
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	4a2f      	ldr	r2, [pc, #188]	@ (800a4f8 <HAL_RCC_ClockConfig+0x1f4>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e054      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a442:	4b2e      	ldr	r3, [pc, #184]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2238      	movs	r2, #56	@ 0x38
 800a448:	401a      	ands	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	429a      	cmp	r2, r3
 800a452:	d1ec      	bne.n	800a42e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a454:	4b27      	ldr	r3, [pc, #156]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2207      	movs	r2, #7
 800a45a:	4013      	ands	r3, r2
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d21e      	bcs.n	800a4a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a462:	4b24      	ldr	r3, [pc, #144]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2207      	movs	r2, #7
 800a468:	4393      	bics	r3, r2
 800a46a:	0019      	movs	r1, r3
 800a46c:	4b21      	ldr	r3, [pc, #132]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a474:	f7fd fc22 	bl	8007cbc <HAL_GetTick>
 800a478:	0003      	movs	r3, r0
 800a47a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a47c:	e009      	b.n	800a492 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a47e:	f7fd fc1d 	bl	8007cbc <HAL_GetTick>
 800a482:	0002      	movs	r2, r0
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	4a1b      	ldr	r2, [pc, #108]	@ (800a4f8 <HAL_RCC_ClockConfig+0x1f4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d901      	bls.n	800a492 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e02c      	b.n	800a4ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a492:	4b18      	ldr	r3, [pc, #96]	@ (800a4f4 <HAL_RCC_ClockConfig+0x1f0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2207      	movs	r2, #7
 800a498:	4013      	ands	r3, r2
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d1ee      	bne.n	800a47e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	d009      	beq.n	800a4be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a4aa:	4b14      	ldr	r3, [pc, #80]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	4a15      	ldr	r2, [pc, #84]	@ (800a504 <HAL_RCC_ClockConfig+0x200>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	0019      	movs	r1, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	4b10      	ldr	r3, [pc, #64]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a4be:	f000 f829 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 800a4c2:	0001      	movs	r1, r0
 800a4c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <HAL_RCC_ClockConfig+0x1f8>)
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	0a1b      	lsrs	r3, r3, #8
 800a4ca:	220f      	movs	r2, #15
 800a4cc:	401a      	ands	r2, r3
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a508 <HAL_RCC_ClockConfig+0x204>)
 800a4d0:	0092      	lsls	r2, r2, #2
 800a4d2:	58d3      	ldr	r3, [r2, r3]
 800a4d4:	221f      	movs	r2, #31
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	000a      	movs	r2, r1
 800a4da:	40da      	lsrs	r2, r3
 800a4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a50c <HAL_RCC_ClockConfig+0x208>)
 800a4de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a510 <HAL_RCC_ClockConfig+0x20c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	f7fc fe3f 	bl	8007168 <HAL_InitTick>
 800a4ea:	0003      	movs	r3, r0
}
 800a4ec:	0018      	movs	r0, r3
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	b004      	add	sp, #16
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	40022000 	.word	0x40022000
 800a4f8:	00001388 	.word	0x00001388
 800a4fc:	40021000 	.word	0x40021000
 800a500:	fffff0ff 	.word	0xfffff0ff
 800a504:	ffff8fff 	.word	0xffff8fff
 800a508:	08017210 	.word	0x08017210
 800a50c:	20000068 	.word	0x20000068
 800a510:	20000074 	.word	0x20000074

0800a514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a51a:	4b3c      	ldr	r3, [pc, #240]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	2238      	movs	r2, #56	@ 0x38
 800a520:	4013      	ands	r3, r2
 800a522:	d10f      	bne.n	800a544 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a524:	4b39      	ldr	r3, [pc, #228]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	0adb      	lsrs	r3, r3, #11
 800a52a:	2207      	movs	r2, #7
 800a52c:	4013      	ands	r3, r2
 800a52e:	2201      	movs	r2, #1
 800a530:	409a      	lsls	r2, r3
 800a532:	0013      	movs	r3, r2
 800a534:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	4835      	ldr	r0, [pc, #212]	@ (800a610 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a53a:	f7f5 fe01 	bl	8000140 <__udivsi3>
 800a53e:	0003      	movs	r3, r0
 800a540:	613b      	str	r3, [r7, #16]
 800a542:	e05d      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a544:	4b31      	ldr	r3, [pc, #196]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	2238      	movs	r2, #56	@ 0x38
 800a54a:	4013      	ands	r3, r2
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d102      	bne.n	800a556 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a550:	4b30      	ldr	r3, [pc, #192]	@ (800a614 <HAL_RCC_GetSysClockFreq+0x100>)
 800a552:	613b      	str	r3, [r7, #16]
 800a554:	e054      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a556:	4b2d      	ldr	r3, [pc, #180]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	2238      	movs	r2, #56	@ 0x38
 800a55c:	4013      	ands	r3, r2
 800a55e:	2b10      	cmp	r3, #16
 800a560:	d138      	bne.n	800a5d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a562:	4b2a      	ldr	r3, [pc, #168]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	2203      	movs	r2, #3
 800a568:	4013      	ands	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a56c:	4b27      	ldr	r3, [pc, #156]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	091b      	lsrs	r3, r3, #4
 800a572:	2207      	movs	r2, #7
 800a574:	4013      	ands	r3, r2
 800a576:	3301      	adds	r3, #1
 800a578:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d10d      	bne.n	800a59c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	4824      	ldr	r0, [pc, #144]	@ (800a614 <HAL_RCC_GetSysClockFreq+0x100>)
 800a584:	f7f5 fddc 	bl	8000140 <__udivsi3>
 800a588:	0003      	movs	r3, r0
 800a58a:	0019      	movs	r1, r3
 800a58c:	4b1f      	ldr	r3, [pc, #124]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	227f      	movs	r2, #127	@ 0x7f
 800a594:	4013      	ands	r3, r2
 800a596:	434b      	muls	r3, r1
 800a598:	617b      	str	r3, [r7, #20]
        break;
 800a59a:	e00d      	b.n	800a5b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	481c      	ldr	r0, [pc, #112]	@ (800a610 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a5a0:	f7f5 fdce 	bl	8000140 <__udivsi3>
 800a5a4:	0003      	movs	r3, r0
 800a5a6:	0019      	movs	r1, r3
 800a5a8:	4b18      	ldr	r3, [pc, #96]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	0a1b      	lsrs	r3, r3, #8
 800a5ae:	227f      	movs	r2, #127	@ 0x7f
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	434b      	muls	r3, r1
 800a5b4:	617b      	str	r3, [r7, #20]
        break;
 800a5b6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a5b8:	4b14      	ldr	r3, [pc, #80]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	0f5b      	lsrs	r3, r3, #29
 800a5be:	2207      	movs	r2, #7
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	6978      	ldr	r0, [r7, #20]
 800a5ca:	f7f5 fdb9 	bl	8000140 <__udivsi3>
 800a5ce:	0003      	movs	r3, r0
 800a5d0:	613b      	str	r3, [r7, #16]
 800a5d2:	e015      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a5d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	2238      	movs	r2, #56	@ 0x38
 800a5da:	4013      	ands	r3, r2
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d103      	bne.n	800a5e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a5e0:	2380      	movs	r3, #128	@ 0x80
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	613b      	str	r3, [r7, #16]
 800a5e6:	e00b      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a5e8:	4b08      	ldr	r3, [pc, #32]	@ (800a60c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	2238      	movs	r2, #56	@ 0x38
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b18      	cmp	r3, #24
 800a5f2:	d103      	bne.n	800a5fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a5f4:	23fa      	movs	r3, #250	@ 0xfa
 800a5f6:	01db      	lsls	r3, r3, #7
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	e001      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a600:	693b      	ldr	r3, [r7, #16]
}
 800a602:	0018      	movs	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	b006      	add	sp, #24
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	46c0      	nop			@ (mov r8, r8)
 800a60c:	40021000 	.word	0x40021000
 800a610:	00f42400 	.word	0x00f42400
 800a614:	00b71b00 	.word	0x00b71b00

0800a618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a61c:	4b02      	ldr	r3, [pc, #8]	@ (800a628 <HAL_RCC_GetHCLKFreq+0x10>)
 800a61e:	681b      	ldr	r3, [r3, #0]
}
 800a620:	0018      	movs	r0, r3
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	20000068 	.word	0x20000068

0800a62c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a62c:	b5b0      	push	{r4, r5, r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a630:	f7ff fff2 	bl	800a618 <HAL_RCC_GetHCLKFreq>
 800a634:	0004      	movs	r4, r0
 800a636:	f7ff fb3f 	bl	8009cb8 <LL_RCC_GetAPB1Prescaler>
 800a63a:	0003      	movs	r3, r0
 800a63c:	0b1a      	lsrs	r2, r3, #12
 800a63e:	4b05      	ldr	r3, [pc, #20]	@ (800a654 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a640:	0092      	lsls	r2, r2, #2
 800a642:	58d3      	ldr	r3, [r2, r3]
 800a644:	221f      	movs	r2, #31
 800a646:	4013      	ands	r3, r2
 800a648:	40dc      	lsrs	r4, r3
 800a64a:	0023      	movs	r3, r4
}
 800a64c:	0018      	movs	r0, r3
 800a64e:	46bd      	mov	sp, r7
 800a650:	bdb0      	pop	{r4, r5, r7, pc}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	08017250 	.word	0x08017250

0800a658 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2207      	movs	r2, #7
 800a666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a668:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a4 <HAL_RCC_GetClockConfig+0x4c>)
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2207      	movs	r2, #7
 800a66e:	401a      	ands	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a674:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a4 <HAL_RCC_GetClockConfig+0x4c>)
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	23f0      	movs	r3, #240	@ 0xf0
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	401a      	ands	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800a682:	4b08      	ldr	r3, [pc, #32]	@ (800a6a4 <HAL_RCC_GetClockConfig+0x4c>)
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	23e0      	movs	r3, #224	@ 0xe0
 800a688:	01db      	lsls	r3, r3, #7
 800a68a:	401a      	ands	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a690:	4b05      	ldr	r3, [pc, #20]	@ (800a6a8 <HAL_RCC_GetClockConfig+0x50>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2207      	movs	r2, #7
 800a696:	401a      	ands	r2, r3
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	601a      	str	r2, [r3, #0]
}
 800a69c:	46c0      	nop			@ (mov r8, r8)
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	b002      	add	sp, #8
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	40021000 	.word	0x40021000
 800a6a8:	40022000 	.word	0x40022000

0800a6ac <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a6b0:	4b04      	ldr	r3, [pc, #16]	@ (800a6c4 <HAL_RCC_EnableCSS+0x18>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	4b03      	ldr	r3, [pc, #12]	@ (800a6c4 <HAL_RCC_EnableCSS+0x18>)
 800a6b6:	2180      	movs	r1, #128	@ 0x80
 800a6b8:	0309      	lsls	r1, r1, #12
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	601a      	str	r2, [r3, #0]
}
 800a6be:	46c0      	nop			@ (mov r8, r8)
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	40021000 	.word	0x40021000

0800a6c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a704 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800a6d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a704 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	22c0      	movs	r2, #192	@ 0xc0
 800a6da:	0092      	lsls	r2, r2, #2
 800a6dc:	400a      	ands	r2, r1
 800a6de:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	2380      	movs	r3, #128	@ 0x80
 800a6e4:	005b      	lsls	r3, r3, #1
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	d001      	beq.n	800a6ee <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a6ea:	f000 f80d 	bl	800a708 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	2380      	movs	r3, #128	@ 0x80
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	d001      	beq.n	800a6fc <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800a6f8:	f000 f80b 	bl	800a712 <HAL_RCC_LSECSSCallback>
  }
}
 800a6fc:	46c0      	nop			@ (mov r8, r8)
 800a6fe:	46bd      	mov	sp, r7
 800a700:	b002      	add	sp, #8
 800a702:	bd80      	pop	{r7, pc}
 800a704:	40021000 	.word	0x40021000

0800a708 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a70c:	46c0      	nop			@ (mov r8, r8)
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800a716:	46c0      	nop			@ (mov r8, r8)
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a724:	2313      	movs	r3, #19
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	2200      	movs	r2, #0
 800a72a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a72c:	2312      	movs	r3, #18
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	2200      	movs	r2, #0
 800a732:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	2380      	movs	r3, #128	@ 0x80
 800a73a:	029b      	lsls	r3, r3, #10
 800a73c:	4013      	ands	r3, r2
 800a73e:	d100      	bne.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a740:	e0a3      	b.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a742:	2011      	movs	r0, #17
 800a744:	183b      	adds	r3, r7, r0
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a74a:	4bc3      	ldr	r3, [pc, #780]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a74c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a74e:	2380      	movs	r3, #128	@ 0x80
 800a750:	055b      	lsls	r3, r3, #21
 800a752:	4013      	ands	r3, r2
 800a754:	d110      	bne.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a756:	4bc0      	ldr	r3, [pc, #768]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a75a:	4bbf      	ldr	r3, [pc, #764]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a75c:	2180      	movs	r1, #128	@ 0x80
 800a75e:	0549      	lsls	r1, r1, #21
 800a760:	430a      	orrs	r2, r1
 800a762:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a764:	4bbc      	ldr	r3, [pc, #752]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a768:	2380      	movs	r3, #128	@ 0x80
 800a76a:	055b      	lsls	r3, r3, #21
 800a76c:	4013      	ands	r3, r2
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a772:	183b      	adds	r3, r7, r0
 800a774:	2201      	movs	r2, #1
 800a776:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a778:	4bb8      	ldr	r3, [pc, #736]	@ (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	4bb7      	ldr	r3, [pc, #732]	@ (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a77e:	2180      	movs	r1, #128	@ 0x80
 800a780:	0049      	lsls	r1, r1, #1
 800a782:	430a      	orrs	r2, r1
 800a784:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a786:	f7fd fa99 	bl	8007cbc <HAL_GetTick>
 800a78a:	0003      	movs	r3, r0
 800a78c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a78e:	e00b      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a790:	f7fd fa94 	bl	8007cbc <HAL_GetTick>
 800a794:	0002      	movs	r2, r0
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d904      	bls.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a79e:	2313      	movs	r3, #19
 800a7a0:	18fb      	adds	r3, r7, r3
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	701a      	strb	r2, [r3, #0]
        break;
 800a7a6:	e005      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7a8:	4bac      	ldr	r3, [pc, #688]	@ (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	2380      	movs	r3, #128	@ 0x80
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	d0ed      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a7b4:	2313      	movs	r3, #19
 800a7b6:	18fb      	adds	r3, r7, r3
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d154      	bne.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a7be:	4ba6      	ldr	r3, [pc, #664]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7c2:	23c0      	movs	r3, #192	@ 0xc0
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d019      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d014      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7da:	4b9f      	ldr	r3, [pc, #636]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7de:	4aa0      	ldr	r2, [pc, #640]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7e4:	4b9c      	ldr	r3, [pc, #624]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7e8:	4b9b      	ldr	r3, [pc, #620]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7ea:	2180      	movs	r1, #128	@ 0x80
 800a7ec:	0249      	lsls	r1, r1, #9
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7f2:	4b99      	ldr	r3, [pc, #612]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7f6:	4b98      	ldr	r3, [pc, #608]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7f8:	499a      	ldr	r1, [pc, #616]	@ (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800a7fa:	400a      	ands	r2, r1
 800a7fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a7fe:	4b96      	ldr	r3, [pc, #600]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2201      	movs	r2, #1
 800a808:	4013      	ands	r3, r2
 800a80a:	d016      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80c:	f7fd fa56 	bl	8007cbc <HAL_GetTick>
 800a810:	0003      	movs	r3, r0
 800a812:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a814:	e00c      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a816:	f7fd fa51 	bl	8007cbc <HAL_GetTick>
 800a81a:	0002      	movs	r2, r0
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	4a91      	ldr	r2, [pc, #580]	@ (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d904      	bls.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a826:	2313      	movs	r3, #19
 800a828:	18fb      	adds	r3, r7, r3
 800a82a:	2203      	movs	r2, #3
 800a82c:	701a      	strb	r2, [r3, #0]
            break;
 800a82e:	e004      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a830:	4b89      	ldr	r3, [pc, #548]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a834:	2202      	movs	r2, #2
 800a836:	4013      	ands	r3, r2
 800a838:	d0ed      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a83a:	2313      	movs	r3, #19
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a844:	4b84      	ldr	r3, [pc, #528]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a848:	4a85      	ldr	r2, [pc, #532]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a84a:	4013      	ands	r3, r2
 800a84c:	0019      	movs	r1, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a852:	4b81      	ldr	r3, [pc, #516]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a854:	430a      	orrs	r2, r1
 800a856:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a858:	e00c      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a85a:	2312      	movs	r3, #18
 800a85c:	18fb      	adds	r3, r7, r3
 800a85e:	2213      	movs	r2, #19
 800a860:	18ba      	adds	r2, r7, r2
 800a862:	7812      	ldrb	r2, [r2, #0]
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	e005      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a868:	2312      	movs	r3, #18
 800a86a:	18fb      	adds	r3, r7, r3
 800a86c:	2213      	movs	r2, #19
 800a86e:	18ba      	adds	r2, r7, r2
 800a870:	7812      	ldrb	r2, [r2, #0]
 800a872:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a874:	2311      	movs	r3, #17
 800a876:	18fb      	adds	r3, r7, r3
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d105      	bne.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a87e:	4b76      	ldr	r3, [pc, #472]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a880:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a882:	4b75      	ldr	r3, [pc, #468]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a884:	4979      	ldr	r1, [pc, #484]	@ (800aa6c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800a886:	400a      	ands	r2, r1
 800a888:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2201      	movs	r2, #1
 800a890:	4013      	ands	r3, r2
 800a892:	d009      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a894:	4b70      	ldr	r3, [pc, #448]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a898:	2203      	movs	r2, #3
 800a89a:	4393      	bics	r3, r2
 800a89c:	0019      	movs	r1, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	4b6d      	ldr	r3, [pc, #436]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	d009      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8b2:	4b69      	ldr	r3, [pc, #420]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b6:	220c      	movs	r2, #12
 800a8b8:	4393      	bics	r3, r2
 800a8ba:	0019      	movs	r1, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	4b65      	ldr	r3, [pc, #404]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8d0:	4b61      	ldr	r3, [pc, #388]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8d4:	4a66      	ldr	r2, [pc, #408]	@ (800aa70 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	0019      	movs	r1, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	4b5e      	ldr	r3, [pc, #376]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	2380      	movs	r3, #128	@ 0x80
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	d009      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8f0:	4b59      	ldr	r3, [pc, #356]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f4:	4a5f      	ldr	r2, [pc, #380]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	4b56      	ldr	r3, [pc, #344]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a900:	430a      	orrs	r2, r1
 800a902:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	2380      	movs	r3, #128	@ 0x80
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	4013      	ands	r3, r2
 800a90e:	d009      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a910:	4b51      	ldr	r3, [pc, #324]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a914:	4a58      	ldr	r2, [pc, #352]	@ (800aa78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a916:	4013      	ands	r3, r2
 800a918:	0019      	movs	r1, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	4b4e      	ldr	r3, [pc, #312]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a920:	430a      	orrs	r2, r1
 800a922:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2220      	movs	r2, #32
 800a92a:	4013      	ands	r3, r2
 800a92c:	d009      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a92e:	4b4a      	ldr	r3, [pc, #296]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a932:	4a52      	ldr	r2, [pc, #328]	@ (800aa7c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800a934:	4013      	ands	r3, r2
 800a936:	0019      	movs	r1, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	4b46      	ldr	r3, [pc, #280]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a93e:	430a      	orrs	r2, r1
 800a940:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	2380      	movs	r3, #128	@ 0x80
 800a948:	01db      	lsls	r3, r3, #7
 800a94a:	4013      	ands	r3, r2
 800a94c:	d015      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a94e:	4b42      	ldr	r3, [pc, #264]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	0899      	lsrs	r1, r3, #2
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1a      	ldr	r2, [r3, #32]
 800a95a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a95c:	430a      	orrs	r2, r1
 800a95e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a1a      	ldr	r2, [r3, #32]
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	05db      	lsls	r3, r3, #23
 800a968:	429a      	cmp	r2, r3
 800a96a:	d106      	bne.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a96c:	4b3a      	ldr	r3, [pc, #232]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	4b39      	ldr	r3, [pc, #228]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a972:	2180      	movs	r1, #128	@ 0x80
 800a974:	0249      	lsls	r1, r1, #9
 800a976:	430a      	orrs	r2, r1
 800a978:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	2380      	movs	r3, #128	@ 0x80
 800a980:	031b      	lsls	r3, r3, #12
 800a982:	4013      	ands	r3, r2
 800a984:	d009      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a986:	4b34      	ldr	r3, [pc, #208]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a98a:	2240      	movs	r2, #64	@ 0x40
 800a98c:	4393      	bics	r3, r2
 800a98e:	0019      	movs	r1, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a994:	4b30      	ldr	r3, [pc, #192]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a996:	430a      	orrs	r2, r1
 800a998:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	2380      	movs	r3, #128	@ 0x80
 800a9a0:	039b      	lsls	r3, r3, #14
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	d016      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a9a6:	4b2c      	ldr	r3, [pc, #176]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9aa:	4a35      	ldr	r2, [pc, #212]	@ (800aa80 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	0019      	movs	r1, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9b4:	4b28      	ldr	r3, [pc, #160]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9be:	2380      	movs	r3, #128	@ 0x80
 800a9c0:	03db      	lsls	r3, r3, #15
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d106      	bne.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a9c6:	4b24      	ldr	r3, [pc, #144]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	4b23      	ldr	r3, [pc, #140]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9cc:	2180      	movs	r1, #128	@ 0x80
 800a9ce:	0449      	lsls	r1, r1, #17
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	2380      	movs	r3, #128	@ 0x80
 800a9da:	03db      	lsls	r3, r3, #15
 800a9dc:	4013      	ands	r3, r2
 800a9de:	d016      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a9e0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9e4:	4a27      	ldr	r2, [pc, #156]	@ (800aa84 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	0019      	movs	r1, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ee:	4b1a      	ldr	r3, [pc, #104]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f8:	2380      	movs	r3, #128	@ 0x80
 800a9fa:	045b      	lsls	r3, r3, #17
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d106      	bne.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800aa00:	4b15      	ldr	r3, [pc, #84]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	4b14      	ldr	r3, [pc, #80]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa06:	2180      	movs	r1, #128	@ 0x80
 800aa08:	0449      	lsls	r1, r1, #17
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	2380      	movs	r3, #128	@ 0x80
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	4013      	ands	r3, r2
 800aa18:	d016      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa1e:	4a1a      	ldr	r2, [pc, #104]	@ (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	0019      	movs	r1, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	695a      	ldr	r2, [r3, #20]
 800aa28:	4b0b      	ldr	r3, [pc, #44]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695a      	ldr	r2, [r3, #20]
 800aa32:	2380      	movs	r3, #128	@ 0x80
 800aa34:	01db      	lsls	r3, r3, #7
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d106      	bne.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aa3a:	4b07      	ldr	r3, [pc, #28]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	4b06      	ldr	r3, [pc, #24]	@ (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa40:	2180      	movs	r1, #128	@ 0x80
 800aa42:	0249      	lsls	r1, r1, #9
 800aa44:	430a      	orrs	r2, r1
 800aa46:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800aa48:	2312      	movs	r3, #18
 800aa4a:	18fb      	adds	r3, r7, r3
 800aa4c:	781b      	ldrb	r3, [r3, #0]
}
 800aa4e:	0018      	movs	r0, r3
 800aa50:	46bd      	mov	sp, r7
 800aa52:	b006      	add	sp, #24
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	46c0      	nop			@ (mov r8, r8)
 800aa58:	40021000 	.word	0x40021000
 800aa5c:	40007000 	.word	0x40007000
 800aa60:	fffffcff 	.word	0xfffffcff
 800aa64:	fffeffff 	.word	0xfffeffff
 800aa68:	00001388 	.word	0x00001388
 800aa6c:	efffffff 	.word	0xefffffff
 800aa70:	fffff3ff 	.word	0xfffff3ff
 800aa74:	fff3ffff 	.word	0xfff3ffff
 800aa78:	ffcfffff 	.word	0xffcfffff
 800aa7c:	ffffcfff 	.word	0xffffcfff
 800aa80:	ffbfffff 	.word	0xffbfffff
 800aa84:	feffffff 	.word	0xfeffffff
 800aa88:	ffff3fff 	.word	0xffff3fff

0800aa8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aa8c:	b5b0      	push	{r4, r5, r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa94:	230f      	movs	r3, #15
 800aa96:	18fb      	adds	r3, r7, r3
 800aa98:	2201      	movs	r2, #1
 800aa9a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d100      	bne.n	800aaa4 <HAL_RTC_Init+0x18>
 800aaa2:	e08c      	b.n	800abbe <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2229      	movs	r2, #41	@ 0x29
 800aaa8:	5c9b      	ldrb	r3, [r3, r2]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10b      	bne.n	800aac8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2228      	movs	r2, #40	@ 0x28
 800aab4:	2100      	movs	r1, #0
 800aab6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2288      	movs	r2, #136	@ 0x88
 800aabc:	0212      	lsls	r2, r2, #8
 800aabe:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	0018      	movs	r0, r3
 800aac4:	f7fc f98e 	bl	8006de4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2229      	movs	r2, #41	@ 0x29
 800aacc:	2102      	movs	r1, #2
 800aace:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	2210      	movs	r2, #16
 800aad8:	4013      	ands	r3, r2
 800aada:	2b10      	cmp	r3, #16
 800aadc:	d062      	beq.n	800aba4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	22ca      	movs	r2, #202	@ 0xca
 800aae4:	625a      	str	r2, [r3, #36]	@ 0x24
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2253      	movs	r2, #83	@ 0x53
 800aaec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800aaee:	250f      	movs	r5, #15
 800aaf0:	197c      	adds	r4, r7, r5
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f000 f891 	bl	800ac1c <RTC_EnterInitMode>
 800aafa:	0003      	movs	r3, r0
 800aafc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800aafe:	0028      	movs	r0, r5
 800ab00:	183b      	adds	r3, r7, r0
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d12c      	bne.n	800ab62 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	699a      	ldr	r2, [r3, #24]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	492e      	ldr	r1, [pc, #184]	@ (800abcc <HAL_RTC_Init+0x140>)
 800ab14:	400a      	ands	r2, r1
 800ab16:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6999      	ldr	r1, [r3, #24]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	6912      	ldr	r2, [r2, #16]
 800ab3e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6919      	ldr	r1, [r3, #16]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	041a      	lsls	r2, r3, #16
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ab54:	183c      	adds	r4, r7, r0
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	0018      	movs	r0, r3
 800ab5a:	f000 f8a1 	bl	800aca0 <RTC_ExitInitMode>
 800ab5e:	0003      	movs	r3, r0
 800ab60:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800ab62:	230f      	movs	r3, #15
 800ab64:	18fb      	adds	r3, r7, r3
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d116      	bne.n	800ab9a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	00d2      	lsls	r2, r2, #3
 800ab78:	08d2      	lsrs	r2, r2, #3
 800ab7a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6999      	ldr	r1, [r3, #24]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	431a      	orrs	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	22ff      	movs	r2, #255	@ 0xff
 800aba0:	625a      	str	r2, [r3, #36]	@ 0x24
 800aba2:	e003      	b.n	800abac <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800aba4:	230f      	movs	r3, #15
 800aba6:	18fb      	adds	r3, r7, r3
 800aba8:	2200      	movs	r2, #0
 800abaa:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800abac:	230f      	movs	r3, #15
 800abae:	18fb      	adds	r3, r7, r3
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d103      	bne.n	800abbe <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2229      	movs	r2, #41	@ 0x29
 800abba:	2101      	movs	r1, #1
 800abbc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800abbe:	230f      	movs	r3, #15
 800abc0:	18fb      	adds	r3, r7, r3
 800abc2:	781b      	ldrb	r3, [r3, #0]
}
 800abc4:	0018      	movs	r0, r3
 800abc6:	46bd      	mov	sp, r7
 800abc8:	b004      	add	sp, #16
 800abca:	bdb0      	pop	{r4, r5, r7, pc}
 800abcc:	fb8fffbf 	.word	0xfb8fffbf

0800abd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a0e      	ldr	r2, [pc, #56]	@ (800ac18 <HAL_RTC_WaitForSynchro+0x48>)
 800abde:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800abe0:	f7fd f86c 	bl	8007cbc <HAL_GetTick>
 800abe4:	0003      	movs	r3, r0
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800abe8:	e00a      	b.n	800ac00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800abea:	f7fd f867 	bl	8007cbc <HAL_GetTick>
 800abee:	0002      	movs	r2, r0
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	1ad2      	subs	r2, r2, r3
 800abf4:	23fa      	movs	r3, #250	@ 0xfa
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d901      	bls.n	800ac00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e006      	b.n	800ac0e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	2220      	movs	r2, #32
 800ac08:	4013      	ands	r3, r2
 800ac0a:	d0ee      	beq.n	800abea <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	0018      	movs	r0, r3
 800ac10:	46bd      	mov	sp, r7
 800ac12:	b004      	add	sp, #16
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	46c0      	nop			@ (mov r8, r8)
 800ac18:	0001005f 	.word	0x0001005f

0800ac1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800ac24:	230f      	movs	r3, #15
 800ac26:	18fb      	adds	r3, r7, r3
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	2240      	movs	r2, #64	@ 0x40
 800ac34:	4013      	ands	r3, r2
 800ac36:	d12c      	bne.n	800ac92 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2180      	movs	r1, #128	@ 0x80
 800ac44:	430a      	orrs	r2, r1
 800ac46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ac48:	f7fd f838 	bl	8007cbc <HAL_GetTick>
 800ac4c:	0003      	movs	r3, r0
 800ac4e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ac50:	e014      	b.n	800ac7c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac52:	f7fd f833 	bl	8007cbc <HAL_GetTick>
 800ac56:	0002      	movs	r2, r0
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	1ad2      	subs	r2, r2, r3
 800ac5c:	200f      	movs	r0, #15
 800ac5e:	183b      	adds	r3, r7, r0
 800ac60:	1839      	adds	r1, r7, r0
 800ac62:	7809      	ldrb	r1, [r1, #0]
 800ac64:	7019      	strb	r1, [r3, #0]
 800ac66:	23fa      	movs	r3, #250	@ 0xfa
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d906      	bls.n	800ac7c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800ac6e:	183b      	adds	r3, r7, r0
 800ac70:	2203      	movs	r2, #3
 800ac72:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2229      	movs	r2, #41	@ 0x29
 800ac78:	2103      	movs	r1, #3
 800ac7a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	2240      	movs	r2, #64	@ 0x40
 800ac84:	4013      	ands	r3, r2
 800ac86:	d104      	bne.n	800ac92 <RTC_EnterInitMode+0x76>
 800ac88:	230f      	movs	r3, #15
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d1df      	bne.n	800ac52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ac92:	230f      	movs	r3, #15
 800ac94:	18fb      	adds	r3, r7, r3
 800ac96:	781b      	ldrb	r3, [r3, #0]
}
 800ac98:	0018      	movs	r0, r3
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b004      	add	sp, #16
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aca8:	240f      	movs	r4, #15
 800acaa:	193b      	adds	r3, r7, r4
 800acac:	2200      	movs	r2, #0
 800acae:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800acb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	4b1b      	ldr	r3, [pc, #108]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800acb6:	2180      	movs	r1, #128	@ 0x80
 800acb8:	438a      	bics	r2, r1
 800acba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800acbc:	4b19      	ldr	r3, [pc, #100]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	2220      	movs	r2, #32
 800acc2:	4013      	ands	r3, r2
 800acc4:	d10d      	bne.n	800ace2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	0018      	movs	r0, r3
 800acca:	f7ff ff81 	bl	800abd0 <HAL_RTC_WaitForSynchro>
 800acce:	1e03      	subs	r3, r0, #0
 800acd0:	d021      	beq.n	800ad16 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2229      	movs	r2, #41	@ 0x29
 800acd6:	2103      	movs	r1, #3
 800acd8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800acda:	193b      	adds	r3, r7, r4
 800acdc:	2203      	movs	r2, #3
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	e019      	b.n	800ad16 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ace2:	4b10      	ldr	r3, [pc, #64]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800ace4:	699a      	ldr	r2, [r3, #24]
 800ace6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800ace8:	2120      	movs	r1, #32
 800acea:	438a      	bics	r2, r1
 800acec:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	0018      	movs	r0, r3
 800acf2:	f7ff ff6d 	bl	800abd0 <HAL_RTC_WaitForSynchro>
 800acf6:	1e03      	subs	r3, r0, #0
 800acf8:	d007      	beq.n	800ad0a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2229      	movs	r2, #41	@ 0x29
 800acfe:	2103      	movs	r1, #3
 800ad00:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad02:	230f      	movs	r3, #15
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	2203      	movs	r2, #3
 800ad08:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad0a:	4b06      	ldr	r3, [pc, #24]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	4b05      	ldr	r3, [pc, #20]	@ (800ad24 <RTC_ExitInitMode+0x84>)
 800ad10:	2120      	movs	r1, #32
 800ad12:	430a      	orrs	r2, r1
 800ad14:	619a      	str	r2, [r3, #24]
  }

  return status;
 800ad16:	230f      	movs	r3, #15
 800ad18:	18fb      	adds	r3, r7, r3
 800ad1a:	781b      	ldrb	r3, [r3, #0]
}
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b005      	add	sp, #20
 800ad22:	bd90      	pop	{r4, r7, pc}
 800ad24:	40002800 	.word	0x40002800

0800ad28 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	001a      	movs	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	18d3      	adds	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	3301      	adds	r3, #1
 800ad46:	33ff      	adds	r3, #255	@ 0xff
 800ad48:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	18d3      	adds	r3, r2, r3
 800ad52:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
}
 800ad5a:	46c0      	nop			@ (mov r8, r8)
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	b006      	add	sp, #24
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	001a      	movs	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	18d3      	adds	r3, r2, r3
 800ad78:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	33ff      	adds	r3, #255	@ 0xff
 800ad80:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	18d3      	adds	r3, r2, r3
 800ad8a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	681b      	ldr	r3, [r3, #0]
}
 800ad90:	0018      	movs	r0, r3
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b004      	add	sp, #16
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e0a8      	b.n	800aefc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d109      	bne.n	800adc6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	2382      	movs	r3, #130	@ 0x82
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	429a      	cmp	r2, r3
 800adbc:	d009      	beq.n	800add2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	61da      	str	r2, [r3, #28]
 800adc4:	e005      	b.n	800add2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	225d      	movs	r2, #93	@ 0x5d
 800addc:	5c9b      	ldrb	r3, [r3, r2]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d107      	bne.n	800adf4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	225c      	movs	r2, #92	@ 0x5c
 800ade8:	2100      	movs	r1, #0
 800adea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	0018      	movs	r0, r3
 800adf0:	f7fc f8b2 	bl	8006f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	225d      	movs	r2, #93	@ 0x5d
 800adf8:	2102      	movs	r1, #2
 800adfa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2140      	movs	r1, #64	@ 0x40
 800ae08:	438a      	bics	r2, r1
 800ae0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	23e0      	movs	r3, #224	@ 0xe0
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d902      	bls.n	800ae1e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e002      	b.n	800ae24 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae1e:	2380      	movs	r3, #128	@ 0x80
 800ae20:	015b      	lsls	r3, r3, #5
 800ae22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68da      	ldr	r2, [r3, #12]
 800ae28:	23f0      	movs	r3, #240	@ 0xf0
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d008      	beq.n	800ae42 <HAL_SPI_Init+0xaa>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	23e0      	movs	r3, #224	@ 0xe0
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d002      	beq.n	800ae42 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	2382      	movs	r3, #130	@ 0x82
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	401a      	ands	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6899      	ldr	r1, [r3, #8]
 800ae50:	2384      	movs	r3, #132	@ 0x84
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	400b      	ands	r3, r1
 800ae56:	431a      	orrs	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	2102      	movs	r1, #2
 800ae5e:	400b      	ands	r3, r1
 800ae60:	431a      	orrs	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	2101      	movs	r1, #1
 800ae68:	400b      	ands	r3, r1
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6999      	ldr	r1, [r3, #24]
 800ae70:	2380      	movs	r3, #128	@ 0x80
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	400b      	ands	r3, r1
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	2138      	movs	r1, #56	@ 0x38
 800ae7e:	400b      	ands	r3, r1
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	2180      	movs	r1, #128	@ 0x80
 800ae88:	400b      	ands	r3, r1
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	0011      	movs	r1, r2
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae92:	2380      	movs	r3, #128	@ 0x80
 800ae94:	019b      	lsls	r3, r3, #6
 800ae96:	401a      	ands	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	0c1b      	lsrs	r3, r3, #16
 800aea6:	2204      	movs	r2, #4
 800aea8:	401a      	ands	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeae:	2110      	movs	r1, #16
 800aeb0:	400b      	ands	r3, r1
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb8:	2108      	movs	r1, #8
 800aeba:	400b      	ands	r3, r1
 800aebc:	431a      	orrs	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68d9      	ldr	r1, [r3, #12]
 800aec2:	23f0      	movs	r3, #240	@ 0xf0
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	400b      	ands	r3, r1
 800aec8:	431a      	orrs	r2, r3
 800aeca:	0011      	movs	r1, r2
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	2380      	movs	r3, #128	@ 0x80
 800aed0:	015b      	lsls	r3, r3, #5
 800aed2:	401a      	ands	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	69da      	ldr	r2, [r3, #28]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4907      	ldr	r1, [pc, #28]	@ (800af04 <HAL_SPI_Init+0x16c>)
 800aee8:	400a      	ands	r2, r1
 800aeea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	225d      	movs	r2, #93	@ 0x5d
 800aef6:	2101      	movs	r1, #1
 800aef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	0018      	movs	r0, r3
 800aefe:	46bd      	mov	sp, r7
 800af00:	b004      	add	sp, #16
 800af02:	bd80      	pop	{r7, pc}
 800af04:	fffff7ff 	.word	0xfffff7ff

0800af08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	1dbb      	adds	r3, r7, #6
 800af16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af18:	231f      	movs	r3, #31
 800af1a:	18fb      	adds	r3, r7, r3
 800af1c:	2200      	movs	r2, #0
 800af1e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	225c      	movs	r2, #92	@ 0x5c
 800af24:	5c9b      	ldrb	r3, [r3, r2]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d101      	bne.n	800af2e <HAL_SPI_Transmit+0x26>
 800af2a:	2302      	movs	r3, #2
 800af2c:	e147      	b.n	800b1be <HAL_SPI_Transmit+0x2b6>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	225c      	movs	r2, #92	@ 0x5c
 800af32:	2101      	movs	r1, #1
 800af34:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af36:	f7fc fec1 	bl	8007cbc <HAL_GetTick>
 800af3a:	0003      	movs	r3, r0
 800af3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800af3e:	2316      	movs	r3, #22
 800af40:	18fb      	adds	r3, r7, r3
 800af42:	1dba      	adds	r2, r7, #6
 800af44:	8812      	ldrh	r2, [r2, #0]
 800af46:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	225d      	movs	r2, #93	@ 0x5d
 800af4c:	5c9b      	ldrb	r3, [r3, r2]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b01      	cmp	r3, #1
 800af52:	d004      	beq.n	800af5e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800af54:	231f      	movs	r3, #31
 800af56:	18fb      	adds	r3, r7, r3
 800af58:	2202      	movs	r2, #2
 800af5a:	701a      	strb	r2, [r3, #0]
    goto error;
 800af5c:	e128      	b.n	800b1b0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <HAL_SPI_Transmit+0x64>
 800af64:	1dbb      	adds	r3, r7, #6
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800af6c:	231f      	movs	r3, #31
 800af6e:	18fb      	adds	r3, r7, r3
 800af70:	2201      	movs	r2, #1
 800af72:	701a      	strb	r2, [r3, #0]
    goto error;
 800af74:	e11c      	b.n	800b1b0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	225d      	movs	r2, #93	@ 0x5d
 800af7a:	2103      	movs	r1, #3
 800af7c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	1dba      	adds	r2, r7, #6
 800af8e:	8812      	ldrh	r2, [r2, #0]
 800af90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1dba      	adds	r2, r7, #6
 800af96:	8812      	ldrh	r2, [r2, #0]
 800af98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2244      	movs	r2, #68	@ 0x44
 800afa4:	2100      	movs	r1, #0
 800afa6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2246      	movs	r2, #70	@ 0x46
 800afac:	2100      	movs	r1, #0
 800afae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	2380      	movs	r3, #128	@ 0x80
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d110      	bne.n	800afea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2140      	movs	r1, #64	@ 0x40
 800afd4:	438a      	bics	r2, r1
 800afd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2180      	movs	r1, #128	@ 0x80
 800afe4:	01c9      	lsls	r1, r1, #7
 800afe6:	430a      	orrs	r2, r1
 800afe8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2240      	movs	r2, #64	@ 0x40
 800aff2:	4013      	ands	r3, r2
 800aff4:	2b40      	cmp	r3, #64	@ 0x40
 800aff6:	d007      	beq.n	800b008 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2140      	movs	r1, #64	@ 0x40
 800b004:	430a      	orrs	r2, r1
 800b006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	23e0      	movs	r3, #224	@ 0xe0
 800b00e:	00db      	lsls	r3, r3, #3
 800b010:	429a      	cmp	r2, r3
 800b012:	d952      	bls.n	800b0ba <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d004      	beq.n	800b026 <HAL_SPI_Transmit+0x11e>
 800b01c:	2316      	movs	r3, #22
 800b01e:	18fb      	adds	r3, r7, r3
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d143      	bne.n	800b0ae <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02a:	881a      	ldrh	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b036:	1c9a      	adds	r2, r3, #2
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b040:	b29b      	uxth	r3, r3
 800b042:	3b01      	subs	r3, #1
 800b044:	b29a      	uxth	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b04a:	e030      	b.n	800b0ae <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	2202      	movs	r2, #2
 800b054:	4013      	ands	r3, r2
 800b056:	2b02      	cmp	r3, #2
 800b058:	d112      	bne.n	800b080 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05e:	881a      	ldrh	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06a:	1c9a      	adds	r2, r3, #2
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b074:	b29b      	uxth	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	b29a      	uxth	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b07e:	e016      	b.n	800b0ae <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b080:	f7fc fe1c 	bl	8007cbc <HAL_GetTick>
 800b084:	0002      	movs	r2, r0
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d802      	bhi.n	800b096 <HAL_SPI_Transmit+0x18e>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	3301      	adds	r3, #1
 800b094:	d102      	bne.n	800b09c <HAL_SPI_Transmit+0x194>
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d108      	bne.n	800b0ae <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b09c:	231f      	movs	r3, #31
 800b09e:	18fb      	adds	r3, r7, r3
 800b0a0:	2203      	movs	r2, #3
 800b0a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	225d      	movs	r2, #93	@ 0x5d
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	5499      	strb	r1, [r3, r2]
          goto error;
 800b0ac:	e080      	b.n	800b1b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1c9      	bne.n	800b04c <HAL_SPI_Transmit+0x144>
 800b0b8:	e053      	b.n	800b162 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d004      	beq.n	800b0cc <HAL_SPI_Transmit+0x1c4>
 800b0c2:	2316      	movs	r3, #22
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d145      	bne.n	800b158 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	330c      	adds	r3, #12
 800b0d6:	7812      	ldrb	r2, [r2, #0]
 800b0d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b0f2:	e031      	b.n	800b158 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d113      	bne.n	800b12a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	330c      	adds	r3, #12
 800b10c:	7812      	ldrb	r2, [r2, #0]
 800b10e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b11e:	b29b      	uxth	r3, r3
 800b120:	3b01      	subs	r3, #1
 800b122:	b29a      	uxth	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b128:	e016      	b.n	800b158 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b12a:	f7fc fdc7 	bl	8007cbc <HAL_GetTick>
 800b12e:	0002      	movs	r2, r0
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d802      	bhi.n	800b140 <HAL_SPI_Transmit+0x238>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	3301      	adds	r3, #1
 800b13e:	d102      	bne.n	800b146 <HAL_SPI_Transmit+0x23e>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d108      	bne.n	800b158 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b146:	231f      	movs	r3, #31
 800b148:	18fb      	adds	r3, r7, r3
 800b14a:	2203      	movs	r2, #3
 800b14c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	225d      	movs	r2, #93	@ 0x5d
 800b152:	2101      	movs	r1, #1
 800b154:	5499      	strb	r1, [r3, r2]
          goto error;
 800b156:	e02b      	b.n	800b1b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1c8      	bne.n	800b0f4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	0018      	movs	r0, r3
 800b16a:	f000 fcef 	bl	800bb4c <SPI_EndRxTxTransaction>
 800b16e:	1e03      	subs	r3, r0, #0
 800b170:	d002      	beq.n	800b178 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2220      	movs	r2, #32
 800b176:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b180:	2300      	movs	r3, #0
 800b182:	613b      	str	r3, [r7, #16]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b19e:	231f      	movs	r3, #31
 800b1a0:	18fb      	adds	r3, r7, r3
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	e003      	b.n	800b1b0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	225d      	movs	r2, #93	@ 0x5d
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	225c      	movs	r2, #92	@ 0x5c
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b1b8:	231f      	movs	r3, #31
 800b1ba:	18fb      	adds	r3, r7, r3
 800b1bc:	781b      	ldrb	r3, [r3, #0]
}
 800b1be:	0018      	movs	r0, r3
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	b008      	add	sp, #32
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1c8:	b590      	push	{r4, r7, lr}
 800b1ca:	b089      	sub	sp, #36	@ 0x24
 800b1cc:	af02      	add	r7, sp, #8
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	1dbb      	adds	r3, r7, #6
 800b1d6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1d8:	2117      	movs	r1, #23
 800b1da:	187b      	adds	r3, r7, r1
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	225d      	movs	r2, #93	@ 0x5d
 800b1e4:	5c9b      	ldrb	r3, [r3, r2]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d003      	beq.n	800b1f4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800b1ec:	187b      	adds	r3, r7, r1
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	701a      	strb	r2, [r3, #0]
    goto error;
 800b1f2:	e12b      	b.n	800b44c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	2382      	movs	r3, #130	@ 0x82
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d113      	bne.n	800b228 <HAL_SPI_Receive+0x60>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10f      	bne.n	800b228 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	225d      	movs	r2, #93	@ 0x5d
 800b20c:	2104      	movs	r1, #4
 800b20e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b210:	1dbb      	adds	r3, r7, #6
 800b212:	881c      	ldrh	r4, [r3, #0]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	0023      	movs	r3, r4
 800b220:	f000 f924 	bl	800b46c <HAL_SPI_TransmitReceive>
 800b224:	0003      	movs	r3, r0
 800b226:	e118      	b.n	800b45a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	225c      	movs	r2, #92	@ 0x5c
 800b22c:	5c9b      	ldrb	r3, [r3, r2]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <HAL_SPI_Receive+0x6e>
 800b232:	2302      	movs	r3, #2
 800b234:	e111      	b.n	800b45a <HAL_SPI_Receive+0x292>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	225c      	movs	r2, #92	@ 0x5c
 800b23a:	2101      	movs	r1, #1
 800b23c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b23e:	f7fc fd3d 	bl	8007cbc <HAL_GetTick>
 800b242:	0003      	movs	r3, r0
 800b244:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <HAL_SPI_Receive+0x8c>
 800b24c:	1dbb      	adds	r3, r7, #6
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d104      	bne.n	800b25e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800b254:	2317      	movs	r3, #23
 800b256:	18fb      	adds	r3, r7, r3
 800b258:	2201      	movs	r2, #1
 800b25a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b25c:	e0f6      	b.n	800b44c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	225d      	movs	r2, #93	@ 0x5d
 800b262:	2104      	movs	r1, #4
 800b264:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	1dba      	adds	r2, r7, #6
 800b276:	2144      	movs	r1, #68	@ 0x44
 800b278:	8812      	ldrh	r2, [r2, #0]
 800b27a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	1dba      	adds	r2, r7, #6
 800b280:	2146      	movs	r1, #70	@ 0x46
 800b282:	8812      	ldrh	r2, [r2, #0]
 800b284:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	68da      	ldr	r2, [r3, #12]
 800b2a8:	23e0      	movs	r3, #224	@ 0xe0
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d908      	bls.n	800b2c2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	496a      	ldr	r1, [pc, #424]	@ (800b464 <HAL_SPI_Receive+0x29c>)
 800b2bc:	400a      	ands	r2, r1
 800b2be:	605a      	str	r2, [r3, #4]
 800b2c0:	e008      	b.n	800b2d4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2180      	movs	r1, #128	@ 0x80
 800b2ce:	0149      	lsls	r1, r1, #5
 800b2d0:	430a      	orrs	r2, r1
 800b2d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	2380      	movs	r3, #128	@ 0x80
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d10f      	bne.n	800b300 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2140      	movs	r1, #64	@ 0x40
 800b2ec:	438a      	bics	r2, r1
 800b2ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	495b      	ldr	r1, [pc, #364]	@ (800b468 <HAL_SPI_Receive+0x2a0>)
 800b2fc:	400a      	ands	r2, r1
 800b2fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2240      	movs	r2, #64	@ 0x40
 800b308:	4013      	ands	r3, r2
 800b30a:	2b40      	cmp	r3, #64	@ 0x40
 800b30c:	d007      	beq.n	800b31e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2140      	movs	r1, #64	@ 0x40
 800b31a:	430a      	orrs	r2, r1
 800b31c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	23e0      	movs	r3, #224	@ 0xe0
 800b324:	00db      	lsls	r3, r3, #3
 800b326:	429a      	cmp	r2, r3
 800b328:	d900      	bls.n	800b32c <HAL_SPI_Receive+0x164>
 800b32a:	e071      	b.n	800b410 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b32c:	e035      	b.n	800b39a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	2201      	movs	r2, #1
 800b336:	4013      	ands	r3, r2
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d117      	bne.n	800b36c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	330c      	adds	r3, #12
 800b342:	001a      	movs	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b348:	7812      	ldrb	r2, [r2, #0]
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2246      	movs	r2, #70	@ 0x46
 800b35c:	5a9b      	ldrh	r3, [r3, r2]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	3b01      	subs	r3, #1
 800b362:	b299      	uxth	r1, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2246      	movs	r2, #70	@ 0x46
 800b368:	5299      	strh	r1, [r3, r2]
 800b36a:	e016      	b.n	800b39a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b36c:	f7fc fca6 	bl	8007cbc <HAL_GetTick>
 800b370:	0002      	movs	r2, r0
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d802      	bhi.n	800b382 <HAL_SPI_Receive+0x1ba>
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	3301      	adds	r3, #1
 800b380:	d102      	bne.n	800b388 <HAL_SPI_Receive+0x1c0>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d108      	bne.n	800b39a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800b388:	2317      	movs	r3, #23
 800b38a:	18fb      	adds	r3, r7, r3
 800b38c:	2203      	movs	r2, #3
 800b38e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	225d      	movs	r2, #93	@ 0x5d
 800b394:	2101      	movs	r1, #1
 800b396:	5499      	strb	r1, [r3, r2]
          goto error;
 800b398:	e058      	b.n	800b44c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2246      	movs	r2, #70	@ 0x46
 800b39e:	5a9b      	ldrh	r3, [r3, r2]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1c3      	bne.n	800b32e <HAL_SPI_Receive+0x166>
 800b3a6:	e039      	b.n	800b41c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d115      	bne.n	800b3e2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c0:	b292      	uxth	r2, r2
 800b3c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c8:	1c9a      	adds	r2, r3, #2
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2246      	movs	r2, #70	@ 0x46
 800b3d2:	5a9b      	ldrh	r3, [r3, r2]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b299      	uxth	r1, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2246      	movs	r2, #70	@ 0x46
 800b3de:	5299      	strh	r1, [r3, r2]
 800b3e0:	e016      	b.n	800b410 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3e2:	f7fc fc6b 	bl	8007cbc <HAL_GetTick>
 800b3e6:	0002      	movs	r2, r0
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d802      	bhi.n	800b3f8 <HAL_SPI_Receive+0x230>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	d102      	bne.n	800b3fe <HAL_SPI_Receive+0x236>
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d108      	bne.n	800b410 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800b3fe:	2317      	movs	r3, #23
 800b400:	18fb      	adds	r3, r7, r3
 800b402:	2203      	movs	r2, #3
 800b404:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	225d      	movs	r2, #93	@ 0x5d
 800b40a:	2101      	movs	r1, #1
 800b40c:	5499      	strb	r1, [r3, r2]
          goto error;
 800b40e:	e01d      	b.n	800b44c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2246      	movs	r2, #70	@ 0x46
 800b414:	5a9b      	ldrh	r3, [r3, r2]
 800b416:	b29b      	uxth	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1c5      	bne.n	800b3a8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	0018      	movs	r0, r3
 800b424:	f000 fb34 	bl	800ba90 <SPI_EndRxTransaction>
 800b428:	1e03      	subs	r3, r0, #0
 800b42a:	d002      	beq.n	800b432 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2220      	movs	r2, #32
 800b430:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800b43a:	2317      	movs	r3, #23
 800b43c:	18fb      	adds	r3, r7, r3
 800b43e:	2201      	movs	r2, #1
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	e003      	b.n	800b44c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	225d      	movs	r2, #93	@ 0x5d
 800b448:	2101      	movs	r1, #1
 800b44a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	225c      	movs	r2, #92	@ 0x5c
 800b450:	2100      	movs	r1, #0
 800b452:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b454:	2317      	movs	r3, #23
 800b456:	18fb      	adds	r3, r7, r3
 800b458:	781b      	ldrb	r3, [r3, #0]
}
 800b45a:	0018      	movs	r0, r3
 800b45c:	46bd      	mov	sp, r7
 800b45e:	b007      	add	sp, #28
 800b460:	bd90      	pop	{r4, r7, pc}
 800b462:	46c0      	nop			@ (mov r8, r8)
 800b464:	ffffefff 	.word	0xffffefff
 800b468:	ffffbfff 	.word	0xffffbfff

0800b46c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08a      	sub	sp, #40	@ 0x28
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	001a      	movs	r2, r3
 800b47a:	1cbb      	adds	r3, r7, #2
 800b47c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b47e:	2301      	movs	r3, #1
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b482:	2323      	movs	r3, #35	@ 0x23
 800b484:	18fb      	adds	r3, r7, r3
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	225c      	movs	r2, #92	@ 0x5c
 800b48e:	5c9b      	ldrb	r3, [r3, r2]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d101      	bne.n	800b498 <HAL_SPI_TransmitReceive+0x2c>
 800b494:	2302      	movs	r3, #2
 800b496:	e1c4      	b.n	800b822 <HAL_SPI_TransmitReceive+0x3b6>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	225c      	movs	r2, #92	@ 0x5c
 800b49c:	2101      	movs	r1, #1
 800b49e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4a0:	f7fc fc0c 	bl	8007cbc <HAL_GetTick>
 800b4a4:	0003      	movs	r3, r0
 800b4a6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4a8:	201b      	movs	r0, #27
 800b4aa:	183b      	adds	r3, r7, r0
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	215d      	movs	r1, #93	@ 0x5d
 800b4b0:	5c52      	ldrb	r2, [r2, r1]
 800b4b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b4ba:	2312      	movs	r3, #18
 800b4bc:	18fb      	adds	r3, r7, r3
 800b4be:	1cba      	adds	r2, r7, #2
 800b4c0:	8812      	ldrh	r2, [r2, #0]
 800b4c2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b4c4:	183b      	adds	r3, r7, r0
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d011      	beq.n	800b4f0 <HAL_SPI_TransmitReceive+0x84>
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	2382      	movs	r3, #130	@ 0x82
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d107      	bne.n	800b4e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d103      	bne.n	800b4e6 <HAL_SPI_TransmitReceive+0x7a>
 800b4de:	183b      	adds	r3, r7, r0
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d004      	beq.n	800b4f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b4e6:	2323      	movs	r3, #35	@ 0x23
 800b4e8:	18fb      	adds	r3, r7, r3
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4ee:	e191      	b.n	800b814 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d006      	beq.n	800b504 <HAL_SPI_TransmitReceive+0x98>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <HAL_SPI_TransmitReceive+0x98>
 800b4fc:	1cbb      	adds	r3, r7, #2
 800b4fe:	881b      	ldrh	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d104      	bne.n	800b50e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b504:	2323      	movs	r3, #35	@ 0x23
 800b506:	18fb      	adds	r3, r7, r3
 800b508:	2201      	movs	r2, #1
 800b50a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b50c:	e182      	b.n	800b814 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	225d      	movs	r2, #93	@ 0x5d
 800b512:	5c9b      	ldrb	r3, [r3, r2]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b04      	cmp	r3, #4
 800b518:	d003      	beq.n	800b522 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	225d      	movs	r2, #93	@ 0x5d
 800b51e:	2105      	movs	r1, #5
 800b520:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	1cba      	adds	r2, r7, #2
 800b532:	2146      	movs	r1, #70	@ 0x46
 800b534:	8812      	ldrh	r2, [r2, #0]
 800b536:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	1cba      	adds	r2, r7, #2
 800b53c:	2144      	movs	r1, #68	@ 0x44
 800b53e:	8812      	ldrh	r2, [r2, #0]
 800b540:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	1cba      	adds	r2, r7, #2
 800b54c:	8812      	ldrh	r2, [r2, #0]
 800b54e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	1cba      	adds	r2, r7, #2
 800b554:	8812      	ldrh	r2, [r2, #0]
 800b556:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	23e0      	movs	r3, #224	@ 0xe0
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d908      	bls.n	800b582 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	49ac      	ldr	r1, [pc, #688]	@ (800b82c <HAL_SPI_TransmitReceive+0x3c0>)
 800b57c:	400a      	ands	r2, r1
 800b57e:	605a      	str	r2, [r3, #4]
 800b580:	e008      	b.n	800b594 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2180      	movs	r1, #128	@ 0x80
 800b58e:	0149      	lsls	r1, r1, #5
 800b590:	430a      	orrs	r2, r1
 800b592:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2240      	movs	r2, #64	@ 0x40
 800b59c:	4013      	ands	r3, r2
 800b59e:	2b40      	cmp	r3, #64	@ 0x40
 800b5a0:	d007      	beq.n	800b5b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2140      	movs	r1, #64	@ 0x40
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68da      	ldr	r2, [r3, #12]
 800b5b6:	23e0      	movs	r3, #224	@ 0xe0
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d800      	bhi.n	800b5c0 <HAL_SPI_TransmitReceive+0x154>
 800b5be:	e083      	b.n	800b6c8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d005      	beq.n	800b5d4 <HAL_SPI_TransmitReceive+0x168>
 800b5c8:	2312      	movs	r3, #18
 800b5ca:	18fb      	adds	r3, r7, r3
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d000      	beq.n	800b5d4 <HAL_SPI_TransmitReceive+0x168>
 800b5d2:	e06d      	b.n	800b6b0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d8:	881a      	ldrh	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e4:	1c9a      	adds	r2, r3, #2
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5f8:	e05a      	b.n	800b6b0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	2202      	movs	r2, #2
 800b602:	4013      	ands	r3, r2
 800b604:	2b02      	cmp	r3, #2
 800b606:	d11b      	bne.n	800b640 <HAL_SPI_TransmitReceive+0x1d4>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d016      	beq.n	800b640 <HAL_SPI_TransmitReceive+0x1d4>
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	2b01      	cmp	r3, #1
 800b616:	d113      	bne.n	800b640 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61c:	881a      	ldrh	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b628:	1c9a      	adds	r2, r3, #2
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b632:	b29b      	uxth	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	b29a      	uxth	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	2201      	movs	r2, #1
 800b648:	4013      	ands	r3, r2
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d11c      	bne.n	800b688 <HAL_SPI_TransmitReceive+0x21c>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2246      	movs	r2, #70	@ 0x46
 800b652:	5a9b      	ldrh	r3, [r3, r2]
 800b654:	b29b      	uxth	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d016      	beq.n	800b688 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b664:	b292      	uxth	r2, r2
 800b666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66c:	1c9a      	adds	r2, r3, #2
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2246      	movs	r2, #70	@ 0x46
 800b676:	5a9b      	ldrh	r3, [r3, r2]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b299      	uxth	r1, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2246      	movs	r2, #70	@ 0x46
 800b682:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b684:	2301      	movs	r3, #1
 800b686:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b688:	f7fc fb18 	bl	8007cbc <HAL_GetTick>
 800b68c:	0002      	movs	r2, r0
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b694:	429a      	cmp	r2, r3
 800b696:	d80b      	bhi.n	800b6b0 <HAL_SPI_TransmitReceive+0x244>
 800b698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69a:	3301      	adds	r3, #1
 800b69c:	d008      	beq.n	800b6b0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800b69e:	2323      	movs	r3, #35	@ 0x23
 800b6a0:	18fb      	adds	r3, r7, r3
 800b6a2:	2203      	movs	r2, #3
 800b6a4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	225d      	movs	r2, #93	@ 0x5d
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	5499      	strb	r1, [r3, r2]
        goto error;
 800b6ae:	e0b1      	b.n	800b814 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d19f      	bne.n	800b5fa <HAL_SPI_TransmitReceive+0x18e>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2246      	movs	r2, #70	@ 0x46
 800b6be:	5a9b      	ldrh	r3, [r3, r2]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d199      	bne.n	800b5fa <HAL_SPI_TransmitReceive+0x18e>
 800b6c6:	e089      	b.n	800b7dc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <HAL_SPI_TransmitReceive+0x270>
 800b6d0:	2312      	movs	r3, #18
 800b6d2:	18fb      	adds	r3, r7, r3
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d000      	beq.n	800b6dc <HAL_SPI_TransmitReceive+0x270>
 800b6da:	e074      	b.n	800b7c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	7812      	ldrb	r2, [r2, #0]
 800b6e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b702:	e060      	b.n	800b7c6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	2202      	movs	r2, #2
 800b70c:	4013      	ands	r3, r2
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d11c      	bne.n	800b74c <HAL_SPI_TransmitReceive+0x2e0>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b716:	b29b      	uxth	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d017      	beq.n	800b74c <HAL_SPI_TransmitReceive+0x2e0>
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d114      	bne.n	800b74c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	330c      	adds	r3, #12
 800b72c:	7812      	ldrb	r2, [r2, #0]
 800b72e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b73e:	b29b      	uxth	r3, r3
 800b740:	3b01      	subs	r3, #1
 800b742:	b29a      	uxth	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	2201      	movs	r2, #1
 800b754:	4013      	ands	r3, r2
 800b756:	2b01      	cmp	r3, #1
 800b758:	d11e      	bne.n	800b798 <HAL_SPI_TransmitReceive+0x32c>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2246      	movs	r2, #70	@ 0x46
 800b75e:	5a9b      	ldrh	r3, [r3, r2]
 800b760:	b29b      	uxth	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d018      	beq.n	800b798 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	330c      	adds	r3, #12
 800b76c:	001a      	movs	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b772:	7812      	ldrb	r2, [r2, #0]
 800b774:	b2d2      	uxtb	r2, r2
 800b776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2246      	movs	r2, #70	@ 0x46
 800b786:	5a9b      	ldrh	r3, [r3, r2]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	3b01      	subs	r3, #1
 800b78c:	b299      	uxth	r1, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2246      	movs	r2, #70	@ 0x46
 800b792:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b794:	2301      	movs	r3, #1
 800b796:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b798:	f7fc fa90 	bl	8007cbc <HAL_GetTick>
 800b79c:	0002      	movs	r2, r0
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d802      	bhi.n	800b7ae <HAL_SPI_TransmitReceive+0x342>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	d102      	bne.n	800b7b4 <HAL_SPI_TransmitReceive+0x348>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d108      	bne.n	800b7c6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800b7b4:	2323      	movs	r3, #35	@ 0x23
 800b7b6:	18fb      	adds	r3, r7, r3
 800b7b8:	2203      	movs	r2, #3
 800b7ba:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	225d      	movs	r2, #93	@ 0x5d
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	5499      	strb	r1, [r3, r2]
        goto error;
 800b7c4:	e026      	b.n	800b814 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d199      	bne.n	800b704 <HAL_SPI_TransmitReceive+0x298>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2246      	movs	r2, #70	@ 0x46
 800b7d4:	5a9b      	ldrh	r3, [r3, r2]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d193      	bne.n	800b704 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7dc:	69fa      	ldr	r2, [r7, #28]
 800b7de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	0018      	movs	r0, r3
 800b7e4:	f000 f9b2 	bl	800bb4c <SPI_EndRxTxTransaction>
 800b7e8:	1e03      	subs	r3, r0, #0
 800b7ea:	d006      	beq.n	800b7fa <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800b7ec:	2323      	movs	r3, #35	@ 0x23
 800b7ee:	18fb      	adds	r3, r7, r3
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d004      	beq.n	800b80c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800b802:	2323      	movs	r3, #35	@ 0x23
 800b804:	18fb      	adds	r3, r7, r3
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	e003      	b.n	800b814 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	225d      	movs	r2, #93	@ 0x5d
 800b810:	2101      	movs	r1, #1
 800b812:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	225c      	movs	r2, #92	@ 0x5c
 800b818:	2100      	movs	r1, #0
 800b81a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b81c:	2323      	movs	r3, #35	@ 0x23
 800b81e:	18fb      	adds	r3, r7, r3
 800b820:	781b      	ldrb	r3, [r3, #0]
}
 800b822:	0018      	movs	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	b00a      	add	sp, #40	@ 0x28
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	46c0      	nop			@ (mov r8, r8)
 800b82c:	ffffefff 	.word	0xffffefff

0800b830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	1dfb      	adds	r3, r7, #7
 800b83e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b840:	f7fc fa3c 	bl	8007cbc <HAL_GetTick>
 800b844:	0002      	movs	r2, r0
 800b846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b848:	1a9b      	subs	r3, r3, r2
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	18d3      	adds	r3, r2, r3
 800b84e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b850:	f7fc fa34 	bl	8007cbc <HAL_GetTick>
 800b854:	0003      	movs	r3, r0
 800b856:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b858:	4b3a      	ldr	r3, [pc, #232]	@ (800b944 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	015b      	lsls	r3, r3, #5
 800b85e:	0d1b      	lsrs	r3, r3, #20
 800b860:	69fa      	ldr	r2, [r7, #28]
 800b862:	4353      	muls	r3, r2
 800b864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b866:	e058      	b.n	800b91a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	3301      	adds	r3, #1
 800b86c:	d055      	beq.n	800b91a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b86e:	f7fc fa25 	bl	8007cbc <HAL_GetTick>
 800b872:	0002      	movs	r2, r0
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d902      	bls.n	800b884 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d142      	bne.n	800b90a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	21e0      	movs	r1, #224	@ 0xe0
 800b890:	438a      	bics	r2, r1
 800b892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	2382      	movs	r3, #130	@ 0x82
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d113      	bne.n	800b8c8 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	2380      	movs	r3, #128	@ 0x80
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d005      	beq.n	800b8b8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	2380      	movs	r3, #128	@ 0x80
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d107      	bne.n	800b8c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2140      	movs	r1, #64	@ 0x40
 800b8c4:	438a      	bics	r2, r1
 800b8c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8cc:	2380      	movs	r3, #128	@ 0x80
 800b8ce:	019b      	lsls	r3, r3, #6
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d110      	bne.n	800b8f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	491a      	ldr	r1, [pc, #104]	@ (800b948 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b8e0:	400a      	ands	r2, r1
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2180      	movs	r1, #128	@ 0x80
 800b8f0:	0189      	lsls	r1, r1, #6
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	225d      	movs	r2, #93	@ 0x5d
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	225c      	movs	r2, #92	@ 0x5c
 800b902:	2100      	movs	r1, #0
 800b904:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e017      	b.n	800b93a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	3b01      	subs	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	4013      	ands	r3, r2
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	425a      	negs	r2, r3
 800b92a:	4153      	adcs	r3, r2
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	001a      	movs	r2, r3
 800b930:	1dfb      	adds	r3, r7, #7
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d197      	bne.n	800b868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	0018      	movs	r0, r3
 800b93c:	46bd      	mov	sp, r7
 800b93e:	b008      	add	sp, #32
 800b940:	bd80      	pop	{r7, pc}
 800b942:	46c0      	nop			@ (mov r8, r8)
 800b944:	20000068 	.word	0x20000068
 800b948:	ffffdfff 	.word	0xffffdfff

0800b94c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	@ 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b95a:	2317      	movs	r3, #23
 800b95c:	18fb      	adds	r3, r7, r3
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b962:	f7fc f9ab 	bl	8007cbc <HAL_GetTick>
 800b966:	0002      	movs	r2, r0
 800b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96a:	1a9b      	subs	r3, r3, r2
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	18d3      	adds	r3, r2, r3
 800b970:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b972:	f7fc f9a3 	bl	8007cbc <HAL_GetTick>
 800b976:	0003      	movs	r3, r0
 800b978:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	330c      	adds	r3, #12
 800b980:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b982:	4b41      	ldr	r3, [pc, #260]	@ (800ba88 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	0013      	movs	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	189b      	adds	r3, r3, r2
 800b98c:	00da      	lsls	r2, r3, #3
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	0d1b      	lsrs	r3, r3, #20
 800b992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b994:	4353      	muls	r3, r2
 800b996:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b998:	e068      	b.n	800ba6c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	23c0      	movs	r3, #192	@ 0xc0
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d10a      	bne.n	800b9ba <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d107      	bne.n	800b9ba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	2117      	movs	r1, #23
 800b9b2:	187b      	adds	r3, r7, r1
 800b9b4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b9b6:	187b      	adds	r3, r7, r1
 800b9b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	d055      	beq.n	800ba6c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9c0:	f7fc f97c 	bl	8007cbc <HAL_GetTick>
 800b9c4:	0002      	movs	r2, r0
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d902      	bls.n	800b9d6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d142      	bne.n	800ba5c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	21e0      	movs	r1, #224	@ 0xe0
 800b9e2:	438a      	bics	r2, r1
 800b9e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	2382      	movs	r3, #130	@ 0x82
 800b9ec:	005b      	lsls	r3, r3, #1
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d113      	bne.n	800ba1a <SPI_WaitFifoStateUntilTimeout+0xce>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	2380      	movs	r3, #128	@ 0x80
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d005      	beq.n	800ba0a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	2380      	movs	r3, #128	@ 0x80
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d107      	bne.n	800ba1a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2140      	movs	r1, #64	@ 0x40
 800ba16:	438a      	bics	r2, r1
 800ba18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba1e:	2380      	movs	r3, #128	@ 0x80
 800ba20:	019b      	lsls	r3, r3, #6
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d110      	bne.n	800ba48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4916      	ldr	r1, [pc, #88]	@ (800ba8c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800ba32:	400a      	ands	r2, r1
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2180      	movs	r1, #128	@ 0x80
 800ba42:	0189      	lsls	r1, r1, #6
 800ba44:	430a      	orrs	r2, r1
 800ba46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	225d      	movs	r2, #93	@ 0x5d
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	225c      	movs	r2, #92	@ 0x5c
 800ba54:	2100      	movs	r1, #0
 800ba56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e010      	b.n	800ba7e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	4013      	ands	r3, r2
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d18e      	bne.n	800b99a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	0018      	movs	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b00a      	add	sp, #40	@ 0x28
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	46c0      	nop			@ (mov r8, r8)
 800ba88:	20000068 	.word	0x20000068
 800ba8c:	ffffdfff 	.word	0xffffdfff

0800ba90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af02      	add	r7, sp, #8
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	2382      	movs	r3, #130	@ 0x82
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d113      	bne.n	800bad0 <SPI_EndRxTransaction+0x40>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	689a      	ldr	r2, [r3, #8]
 800baac:	2380      	movs	r3, #128	@ 0x80
 800baae:	021b      	lsls	r3, r3, #8
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d005      	beq.n	800bac0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	689a      	ldr	r2, [r3, #8]
 800bab8:	2380      	movs	r3, #128	@ 0x80
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	429a      	cmp	r2, r3
 800babe:	d107      	bne.n	800bad0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2140      	movs	r1, #64	@ 0x40
 800bacc:	438a      	bics	r2, r1
 800bace:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	0013      	movs	r3, r2
 800bada:	2200      	movs	r2, #0
 800badc:	2180      	movs	r1, #128	@ 0x80
 800bade:	f7ff fea7 	bl	800b830 <SPI_WaitFlagStateUntilTimeout>
 800bae2:	1e03      	subs	r3, r0, #0
 800bae4:	d007      	beq.n	800baf6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baea:	2220      	movs	r2, #32
 800baec:	431a      	orrs	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e026      	b.n	800bb44 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	2382      	movs	r3, #130	@ 0x82
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d11f      	bne.n	800bb42 <SPI_EndRxTransaction+0xb2>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	689a      	ldr	r2, [r3, #8]
 800bb06:	2380      	movs	r3, #128	@ 0x80
 800bb08:	021b      	lsls	r3, r3, #8
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d005      	beq.n	800bb1a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	2380      	movs	r3, #128	@ 0x80
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d113      	bne.n	800bb42 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	23c0      	movs	r3, #192	@ 0xc0
 800bb1e:	00d9      	lsls	r1, r3, #3
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	0013      	movs	r3, r2
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f7ff ff0f 	bl	800b94c <SPI_WaitFifoStateUntilTimeout>
 800bb2e:	1e03      	subs	r3, r0, #0
 800bb30:	d007      	beq.n	800bb42 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb36:	2220      	movs	r2, #32
 800bb38:	431a      	orrs	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e000      	b.n	800bb44 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	0018      	movs	r0, r3
 800bb46:	46bd      	mov	sp, r7
 800bb48:	b004      	add	sp, #16
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	23c0      	movs	r3, #192	@ 0xc0
 800bb5c:	0159      	lsls	r1, r3, #5
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	0013      	movs	r3, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	f7ff fef0 	bl	800b94c <SPI_WaitFifoStateUntilTimeout>
 800bb6c:	1e03      	subs	r3, r0, #0
 800bb6e:	d007      	beq.n	800bb80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb74:	2220      	movs	r2, #32
 800bb76:	431a      	orrs	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e027      	b.n	800bbd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	0013      	movs	r3, r2
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2180      	movs	r1, #128	@ 0x80
 800bb8e:	f7ff fe4f 	bl	800b830 <SPI_WaitFlagStateUntilTimeout>
 800bb92:	1e03      	subs	r3, r0, #0
 800bb94:	d007      	beq.n	800bba6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e014      	b.n	800bbd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	23c0      	movs	r3, #192	@ 0xc0
 800bbaa:	00d9      	lsls	r1, r3, #3
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	0013      	movs	r3, r2
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f7ff fec9 	bl	800b94c <SPI_WaitFifoStateUntilTimeout>
 800bbba:	1e03      	subs	r3, r0, #0
 800bbbc:	d007      	beq.n	800bbce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	431a      	orrs	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e000      	b.n	800bbd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b004      	add	sp, #16
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e04a      	b.n	800bc80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	223d      	movs	r2, #61	@ 0x3d
 800bbee:	5c9b      	ldrb	r3, [r3, r2]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d107      	bne.n	800bc06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	223c      	movs	r2, #60	@ 0x3c
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	0018      	movs	r0, r3
 800bc02:	f7fb fd39 	bl	8007678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	223d      	movs	r2, #61	@ 0x3d
 800bc0a:	2102      	movs	r1, #2
 800bc0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3304      	adds	r3, #4
 800bc16:	0019      	movs	r1, r3
 800bc18:	0010      	movs	r0, r2
 800bc1a:	f000 fa8f 	bl	800c13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2248      	movs	r2, #72	@ 0x48
 800bc22:	2101      	movs	r1, #1
 800bc24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	223e      	movs	r2, #62	@ 0x3e
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	5499      	strb	r1, [r3, r2]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	223f      	movs	r2, #63	@ 0x3f
 800bc32:	2101      	movs	r1, #1
 800bc34:	5499      	strb	r1, [r3, r2]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2240      	movs	r2, #64	@ 0x40
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	5499      	strb	r1, [r3, r2]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2241      	movs	r2, #65	@ 0x41
 800bc42:	2101      	movs	r1, #1
 800bc44:	5499      	strb	r1, [r3, r2]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2242      	movs	r2, #66	@ 0x42
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	5499      	strb	r1, [r3, r2]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2243      	movs	r2, #67	@ 0x43
 800bc52:	2101      	movs	r1, #1
 800bc54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2244      	movs	r2, #68	@ 0x44
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	5499      	strb	r1, [r3, r2]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2245      	movs	r2, #69	@ 0x45
 800bc62:	2101      	movs	r1, #1
 800bc64:	5499      	strb	r1, [r3, r2]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2246      	movs	r2, #70	@ 0x46
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	5499      	strb	r1, [r3, r2]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2247      	movs	r2, #71	@ 0x47
 800bc72:	2101      	movs	r1, #1
 800bc74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	223d      	movs	r2, #61	@ 0x3d
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	0018      	movs	r0, r3
 800bc82:	46bd      	mov	sp, r7
 800bc84:	b002      	add	sp, #8
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	223d      	movs	r2, #61	@ 0x3d
 800bc94:	5c9b      	ldrb	r3, [r3, r2]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d001      	beq.n	800bca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e042      	b.n	800bd26 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	223d      	movs	r2, #61	@ 0x3d
 800bca4:	2102      	movs	r1, #2
 800bca6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68da      	ldr	r2, [r3, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a1c      	ldr	r2, [pc, #112]	@ (800bd30 <HAL_TIM_Base_Start_IT+0xa8>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d00f      	beq.n	800bce2 <HAL_TIM_Base_Start_IT+0x5a>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	2380      	movs	r3, #128	@ 0x80
 800bcc8:	05db      	lsls	r3, r3, #23
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d009      	beq.n	800bce2 <HAL_TIM_Base_Start_IT+0x5a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a18      	ldr	r2, [pc, #96]	@ (800bd34 <HAL_TIM_Base_Start_IT+0xac>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d004      	beq.n	800bce2 <HAL_TIM_Base_Start_IT+0x5a>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a16      	ldr	r2, [pc, #88]	@ (800bd38 <HAL_TIM_Base_Start_IT+0xb0>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d116      	bne.n	800bd10 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	4a14      	ldr	r2, [pc, #80]	@ (800bd3c <HAL_TIM_Base_Start_IT+0xb4>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b06      	cmp	r3, #6
 800bcf2:	d016      	beq.n	800bd22 <HAL_TIM_Base_Start_IT+0x9a>
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	2380      	movs	r3, #128	@ 0x80
 800bcf8:	025b      	lsls	r3, r3, #9
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d011      	beq.n	800bd22 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2101      	movs	r1, #1
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd0e:	e008      	b.n	800bd22 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	601a      	str	r2, [r3, #0]
 800bd20:	e000      	b.n	800bd24 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd22:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	0018      	movs	r0, r3
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	b004      	add	sp, #16
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	40012c00 	.word	0x40012c00
 800bd34:	40000400 	.word	0x40000400
 800bd38:	40014000 	.word	0x40014000
 800bd3c:	00010007 	.word	0x00010007

0800bd40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	d021      	beq.n	800bda4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2202      	movs	r2, #2
 800bd64:	4013      	ands	r3, r2
 800bd66:	d01d      	beq.n	800bda4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4252      	negs	r2, r2
 800bd70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2203      	movs	r2, #3
 800bd80:	4013      	ands	r3, r2
 800bd82:	d004      	beq.n	800bd8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	0018      	movs	r0, r3
 800bd88:	f000 f9c0 	bl	800c10c <HAL_TIM_IC_CaptureCallback>
 800bd8c:	e007      	b.n	800bd9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	0018      	movs	r0, r3
 800bd92:	f000 f9b3 	bl	800c0fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f000 f9bf 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2204      	movs	r2, #4
 800bda8:	4013      	ands	r3, r2
 800bdaa:	d022      	beq.n	800bdf2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2204      	movs	r2, #4
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	d01e      	beq.n	800bdf2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2205      	movs	r2, #5
 800bdba:	4252      	negs	r2, r2
 800bdbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	23c0      	movs	r3, #192	@ 0xc0
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4013      	ands	r3, r2
 800bdd0:	d004      	beq.n	800bddc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f000 f999 	bl	800c10c <HAL_TIM_IC_CaptureCallback>
 800bdda:	e007      	b.n	800bdec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	0018      	movs	r0, r3
 800bde0:	f000 f98c 	bl	800c0fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	0018      	movs	r0, r3
 800bde8:	f000 f998 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2208      	movs	r2, #8
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	d021      	beq.n	800be3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2208      	movs	r2, #8
 800bdfe:	4013      	ands	r3, r2
 800be00:	d01d      	beq.n	800be3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2209      	movs	r2, #9
 800be08:	4252      	negs	r2, r2
 800be0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2204      	movs	r2, #4
 800be10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	2203      	movs	r2, #3
 800be1a:	4013      	ands	r3, r2
 800be1c:	d004      	beq.n	800be28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	0018      	movs	r0, r3
 800be22:	f000 f973 	bl	800c10c <HAL_TIM_IC_CaptureCallback>
 800be26:	e007      	b.n	800be38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	0018      	movs	r0, r3
 800be2c:	f000 f966 	bl	800c0fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	0018      	movs	r0, r3
 800be34:	f000 f972 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2210      	movs	r2, #16
 800be42:	4013      	ands	r3, r2
 800be44:	d022      	beq.n	800be8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2210      	movs	r2, #16
 800be4a:	4013      	ands	r3, r2
 800be4c:	d01e      	beq.n	800be8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2211      	movs	r2, #17
 800be54:	4252      	negs	r2, r2
 800be56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2208      	movs	r2, #8
 800be5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	69da      	ldr	r2, [r3, #28]
 800be64:	23c0      	movs	r3, #192	@ 0xc0
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4013      	ands	r3, r2
 800be6a:	d004      	beq.n	800be76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	0018      	movs	r0, r3
 800be70:	f000 f94c 	bl	800c10c <HAL_TIM_IC_CaptureCallback>
 800be74:	e007      	b.n	800be86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	0018      	movs	r0, r3
 800be7a:	f000 f93f 	bl	800c0fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	0018      	movs	r0, r3
 800be82:	f000 f94b 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2201      	movs	r2, #1
 800be90:	4013      	ands	r3, r2
 800be92:	d00c      	beq.n	800beae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2201      	movs	r2, #1
 800be98:	4013      	ands	r3, r2
 800be9a:	d008      	beq.n	800beae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2202      	movs	r2, #2
 800bea2:	4252      	negs	r2, r2
 800bea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7fa ff25 	bl	8006cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2280      	movs	r2, #128	@ 0x80
 800beb2:	4013      	ands	r3, r2
 800beb4:	d104      	bne.n	800bec0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	2380      	movs	r3, #128	@ 0x80
 800beba:	019b      	lsls	r3, r3, #6
 800bebc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bebe:	d00b      	beq.n	800bed8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2280      	movs	r2, #128	@ 0x80
 800bec4:	4013      	ands	r3, r2
 800bec6:	d007      	beq.n	800bed8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a1e      	ldr	r2, [pc, #120]	@ (800bf48 <HAL_TIM_IRQHandler+0x208>)
 800bece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	0018      	movs	r0, r3
 800bed4:	f000 fad2 	bl	800c47c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	2380      	movs	r3, #128	@ 0x80
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4013      	ands	r3, r2
 800bee0:	d00b      	beq.n	800befa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2280      	movs	r2, #128	@ 0x80
 800bee6:	4013      	ands	r3, r2
 800bee8:	d007      	beq.n	800befa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a17      	ldr	r2, [pc, #92]	@ (800bf4c <HAL_TIM_IRQHandler+0x20c>)
 800bef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	0018      	movs	r0, r3
 800bef6:	f000 fac9 	bl	800c48c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2240      	movs	r2, #64	@ 0x40
 800befe:	4013      	ands	r3, r2
 800bf00:	d00c      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2240      	movs	r2, #64	@ 0x40
 800bf06:	4013      	ands	r3, r2
 800bf08:	d008      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2241      	movs	r2, #65	@ 0x41
 800bf10:	4252      	negs	r2, r2
 800bf12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	0018      	movs	r0, r3
 800bf18:	f000 f908 	bl	800c12c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	4013      	ands	r3, r2
 800bf22:	d00c      	beq.n	800bf3e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2220      	movs	r2, #32
 800bf28:	4013      	ands	r3, r2
 800bf2a:	d008      	beq.n	800bf3e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2221      	movs	r2, #33	@ 0x21
 800bf32:	4252      	negs	r2, r2
 800bf34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f000 fa97 	bl	800c46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf3e:	46c0      	nop			@ (mov r8, r8)
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b004      	add	sp, #16
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	46c0      	nop			@ (mov r8, r8)
 800bf48:	ffffdf7f 	.word	0xffffdf7f
 800bf4c:	fffffeff 	.word	0xfffffeff

0800bf50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf5a:	230f      	movs	r3, #15
 800bf5c:	18fb      	adds	r3, r7, r3
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	223c      	movs	r2, #60	@ 0x3c
 800bf66:	5c9b      	ldrb	r3, [r3, r2]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d101      	bne.n	800bf70 <HAL_TIM_ConfigClockSource+0x20>
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	e0bc      	b.n	800c0ea <HAL_TIM_ConfigClockSource+0x19a>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	223c      	movs	r2, #60	@ 0x3c
 800bf74:	2101      	movs	r1, #1
 800bf76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	223d      	movs	r2, #61	@ 0x3d
 800bf7c:	2102      	movs	r1, #2
 800bf7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4a5a      	ldr	r2, [pc, #360]	@ (800c0f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	4a59      	ldr	r2, [pc, #356]	@ (800c0f8 <HAL_TIM_ConfigClockSource+0x1a8>)
 800bf94:	4013      	ands	r3, r2
 800bf96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2280      	movs	r2, #128	@ 0x80
 800bfa6:	0192      	lsls	r2, r2, #6
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d040      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0xde>
 800bfac:	2280      	movs	r2, #128	@ 0x80
 800bfae:	0192      	lsls	r2, r2, #6
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d900      	bls.n	800bfb6 <HAL_TIM_ConfigClockSource+0x66>
 800bfb4:	e088      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bfb6:	2280      	movs	r2, #128	@ 0x80
 800bfb8:	0152      	lsls	r2, r2, #5
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d100      	bne.n	800bfc0 <HAL_TIM_ConfigClockSource+0x70>
 800bfbe:	e088      	b.n	800c0d2 <HAL_TIM_ConfigClockSource+0x182>
 800bfc0:	2280      	movs	r2, #128	@ 0x80
 800bfc2:	0152      	lsls	r2, r2, #5
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d900      	bls.n	800bfca <HAL_TIM_ConfigClockSource+0x7a>
 800bfc8:	e07e      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bfca:	2b70      	cmp	r3, #112	@ 0x70
 800bfcc:	d018      	beq.n	800c000 <HAL_TIM_ConfigClockSource+0xb0>
 800bfce:	d900      	bls.n	800bfd2 <HAL_TIM_ConfigClockSource+0x82>
 800bfd0:	e07a      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bfd2:	2b60      	cmp	r3, #96	@ 0x60
 800bfd4:	d04f      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x126>
 800bfd6:	d900      	bls.n	800bfda <HAL_TIM_ConfigClockSource+0x8a>
 800bfd8:	e076      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bfda:	2b50      	cmp	r3, #80	@ 0x50
 800bfdc:	d03b      	beq.n	800c056 <HAL_TIM_ConfigClockSource+0x106>
 800bfde:	d900      	bls.n	800bfe2 <HAL_TIM_ConfigClockSource+0x92>
 800bfe0:	e072      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bfe2:	2b40      	cmp	r3, #64	@ 0x40
 800bfe4:	d057      	beq.n	800c096 <HAL_TIM_ConfigClockSource+0x146>
 800bfe6:	d900      	bls.n	800bfea <HAL_TIM_ConfigClockSource+0x9a>
 800bfe8:	e06e      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bfea:	2b30      	cmp	r3, #48	@ 0x30
 800bfec:	d063      	beq.n	800c0b6 <HAL_TIM_ConfigClockSource+0x166>
 800bfee:	d86b      	bhi.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bff0:	2b20      	cmp	r3, #32
 800bff2:	d060      	beq.n	800c0b6 <HAL_TIM_ConfigClockSource+0x166>
 800bff4:	d868      	bhi.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d05d      	beq.n	800c0b6 <HAL_TIM_ConfigClockSource+0x166>
 800bffa:	2b10      	cmp	r3, #16
 800bffc:	d05b      	beq.n	800c0b6 <HAL_TIM_ConfigClockSource+0x166>
 800bffe:	e063      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c010:	f000 f99e 	bl	800c350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2277      	movs	r2, #119	@ 0x77
 800c020:	4313      	orrs	r3, r2
 800c022:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	609a      	str	r2, [r3, #8]
      break;
 800c02c:	e052      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c03e:	f000 f987 	bl	800c350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2180      	movs	r1, #128	@ 0x80
 800c04e:	01c9      	lsls	r1, r1, #7
 800c050:	430a      	orrs	r2, r1
 800c052:	609a      	str	r2, [r3, #8]
      break;
 800c054:	e03e      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c062:	001a      	movs	r2, r3
 800c064:	f000 f8f8 	bl	800c258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2150      	movs	r1, #80	@ 0x50
 800c06e:	0018      	movs	r0, r3
 800c070:	f000 f952 	bl	800c318 <TIM_ITRx_SetConfig>
      break;
 800c074:	e02e      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c082:	001a      	movs	r2, r3
 800c084:	f000 f916 	bl	800c2b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2160      	movs	r1, #96	@ 0x60
 800c08e:	0018      	movs	r0, r3
 800c090:	f000 f942 	bl	800c318 <TIM_ITRx_SetConfig>
      break;
 800c094:	e01e      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0a2:	001a      	movs	r2, r3
 800c0a4:	f000 f8d8 	bl	800c258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2140      	movs	r1, #64	@ 0x40
 800c0ae:	0018      	movs	r0, r3
 800c0b0:	f000 f932 	bl	800c318 <TIM_ITRx_SetConfig>
      break;
 800c0b4:	e00e      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	0019      	movs	r1, r3
 800c0c0:	0010      	movs	r0, r2
 800c0c2:	f000 f929 	bl	800c318 <TIM_ITRx_SetConfig>
      break;
 800c0c6:	e005      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c0c8:	230f      	movs	r3, #15
 800c0ca:	18fb      	adds	r3, r7, r3
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	701a      	strb	r2, [r3, #0]
      break;
 800c0d0:	e000      	b.n	800c0d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c0d2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	223d      	movs	r2, #61	@ 0x3d
 800c0d8:	2101      	movs	r1, #1
 800c0da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	223c      	movs	r2, #60	@ 0x3c
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	5499      	strb	r1, [r3, r2]

  return status;
 800c0e4:	230f      	movs	r3, #15
 800c0e6:	18fb      	adds	r3, r7, r3
 800c0e8:	781b      	ldrb	r3, [r3, #0]
}
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b004      	add	sp, #16
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	46c0      	nop			@ (mov r8, r8)
 800c0f4:	ffceff88 	.word	0xffceff88
 800c0f8:	ffff00ff 	.word	0xffff00ff

0800c0fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c104:	46c0      	nop			@ (mov r8, r8)
 800c106:	46bd      	mov	sp, r7
 800c108:	b002      	add	sp, #8
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c114:	46c0      	nop			@ (mov r8, r8)
 800c116:	46bd      	mov	sp, r7
 800c118:	b002      	add	sp, #8
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c124:	46c0      	nop			@ (mov r8, r8)
 800c126:	46bd      	mov	sp, r7
 800c128:	b002      	add	sp, #8
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c134:	46c0      	nop			@ (mov r8, r8)
 800c136:	46bd      	mov	sp, r7
 800c138:	b002      	add	sp, #8
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a3b      	ldr	r2, [pc, #236]	@ (800c23c <TIM_Base_SetConfig+0x100>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d008      	beq.n	800c166 <TIM_Base_SetConfig+0x2a>
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	2380      	movs	r3, #128	@ 0x80
 800c158:	05db      	lsls	r3, r3, #23
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d003      	beq.n	800c166 <TIM_Base_SetConfig+0x2a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a37      	ldr	r2, [pc, #220]	@ (800c240 <TIM_Base_SetConfig+0x104>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d108      	bne.n	800c178 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2270      	movs	r2, #112	@ 0x70
 800c16a:	4393      	bics	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	4313      	orrs	r3, r2
 800c176:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a30      	ldr	r2, [pc, #192]	@ (800c23c <TIM_Base_SetConfig+0x100>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d018      	beq.n	800c1b2 <TIM_Base_SetConfig+0x76>
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	2380      	movs	r3, #128	@ 0x80
 800c184:	05db      	lsls	r3, r3, #23
 800c186:	429a      	cmp	r2, r3
 800c188:	d013      	beq.n	800c1b2 <TIM_Base_SetConfig+0x76>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a2c      	ldr	r2, [pc, #176]	@ (800c240 <TIM_Base_SetConfig+0x104>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00f      	beq.n	800c1b2 <TIM_Base_SetConfig+0x76>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a2b      	ldr	r2, [pc, #172]	@ (800c244 <TIM_Base_SetConfig+0x108>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d00b      	beq.n	800c1b2 <TIM_Base_SetConfig+0x76>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a2a      	ldr	r2, [pc, #168]	@ (800c248 <TIM_Base_SetConfig+0x10c>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d007      	beq.n	800c1b2 <TIM_Base_SetConfig+0x76>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a29      	ldr	r2, [pc, #164]	@ (800c24c <TIM_Base_SetConfig+0x110>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_Base_SetConfig+0x76>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a28      	ldr	r2, [pc, #160]	@ (800c250 <TIM_Base_SetConfig+0x114>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d108      	bne.n	800c1c4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4a27      	ldr	r2, [pc, #156]	@ (800c254 <TIM_Base_SetConfig+0x118>)
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2280      	movs	r2, #128	@ 0x80
 800c1c8:	4393      	bics	r3, r2
 800c1ca:	001a      	movs	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	689a      	ldr	r2, [r3, #8]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a13      	ldr	r2, [pc, #76]	@ (800c23c <TIM_Base_SetConfig+0x100>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d00b      	beq.n	800c20a <TIM_Base_SetConfig+0xce>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a14      	ldr	r2, [pc, #80]	@ (800c248 <TIM_Base_SetConfig+0x10c>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d007      	beq.n	800c20a <TIM_Base_SetConfig+0xce>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a13      	ldr	r2, [pc, #76]	@ (800c24c <TIM_Base_SetConfig+0x110>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d003      	beq.n	800c20a <TIM_Base_SetConfig+0xce>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a12      	ldr	r2, [pc, #72]	@ (800c250 <TIM_Base_SetConfig+0x114>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d103      	bne.n	800c212 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	691a      	ldr	r2, [r3, #16]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	2201      	movs	r2, #1
 800c21e:	4013      	ands	r3, r2
 800c220:	2b01      	cmp	r3, #1
 800c222:	d106      	bne.n	800c232 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	2201      	movs	r2, #1
 800c22a:	4393      	bics	r3, r2
 800c22c:	001a      	movs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	611a      	str	r2, [r3, #16]
  }
}
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	46bd      	mov	sp, r7
 800c236:	b004      	add	sp, #16
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	46c0      	nop			@ (mov r8, r8)
 800c23c:	40012c00 	.word	0x40012c00
 800c240:	40000400 	.word	0x40000400
 800c244:	40002000 	.word	0x40002000
 800c248:	40014000 	.word	0x40014000
 800c24c:	40014400 	.word	0x40014400
 800c250:	40014800 	.word	0x40014800
 800c254:	fffffcff 	.word	0xfffffcff

0800c258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	2201      	movs	r2, #1
 800c270:	4393      	bics	r3, r2
 800c272:	001a      	movs	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	22f0      	movs	r2, #240	@ 0xf0
 800c282:	4393      	bics	r3, r2
 800c284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	011b      	lsls	r3, r3, #4
 800c28a:	693a      	ldr	r2, [r7, #16]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	220a      	movs	r2, #10
 800c294:	4393      	bics	r3, r2
 800c296:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	621a      	str	r2, [r3, #32]
}
 800c2ac:	46c0      	nop			@ (mov r8, r8)
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	b006      	add	sp, #24
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	2210      	movs	r2, #16
 800c2cc:	4393      	bics	r3, r2
 800c2ce:	001a      	movs	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	4a0d      	ldr	r2, [pc, #52]	@ (800c314 <TIM_TI2_ConfigInputStage+0x60>)
 800c2de:	4013      	ands	r3, r2
 800c2e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	031b      	lsls	r3, r3, #12
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	22a0      	movs	r2, #160	@ 0xa0
 800c2f0:	4393      	bics	r3, r2
 800c2f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	621a      	str	r2, [r3, #32]
}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	46bd      	mov	sp, r7
 800c30e:	b006      	add	sp, #24
 800c310:	bd80      	pop	{r7, pc}
 800c312:	46c0      	nop			@ (mov r8, r8)
 800c314:	ffff0fff 	.word	0xffff0fff

0800c318 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4a08      	ldr	r2, [pc, #32]	@ (800c34c <TIM_ITRx_SetConfig+0x34>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	4313      	orrs	r3, r2
 800c336:	2207      	movs	r2, #7
 800c338:	4313      	orrs	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	609a      	str	r2, [r3, #8]
}
 800c342:	46c0      	nop			@ (mov r8, r8)
 800c344:	46bd      	mov	sp, r7
 800c346:	b004      	add	sp, #16
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	46c0      	nop			@ (mov r8, r8)
 800c34c:	ffcfff8f 	.word	0xffcfff8f

0800c350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	4a09      	ldr	r2, [pc, #36]	@ (800c38c <TIM_ETR_SetConfig+0x3c>)
 800c368:	4013      	ands	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	021a      	lsls	r2, r3, #8
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	431a      	orrs	r2, r3
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	4313      	orrs	r3, r2
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	609a      	str	r2, [r3, #8]
}
 800c384:	46c0      	nop			@ (mov r8, r8)
 800c386:	46bd      	mov	sp, r7
 800c388:	b006      	add	sp, #24
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	ffff00ff 	.word	0xffff00ff

0800c390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	223c      	movs	r2, #60	@ 0x3c
 800c39e:	5c9b      	ldrb	r3, [r3, r2]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e055      	b.n	800c454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	223c      	movs	r2, #60	@ 0x3c
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	223d      	movs	r2, #61	@ 0x3d
 800c3b4:	2102      	movs	r1, #2
 800c3b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a23      	ldr	r2, [pc, #140]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d108      	bne.n	800c3e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4a22      	ldr	r2, [pc, #136]	@ (800c460 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c3d6:	4013      	ands	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2270      	movs	r2, #112	@ 0x70
 800c3e8:	4393      	bics	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a16      	ldr	r2, [pc, #88]	@ (800c45c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d00f      	beq.n	800c428 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	2380      	movs	r3, #128	@ 0x80
 800c40e:	05db      	lsls	r3, r3, #23
 800c410:	429a      	cmp	r2, r3
 800c412:	d009      	beq.n	800c428 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a12      	ldr	r2, [pc, #72]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d004      	beq.n	800c428 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a11      	ldr	r2, [pc, #68]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d10c      	bne.n	800c442 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2280      	movs	r2, #128	@ 0x80
 800c42c:	4393      	bics	r3, r2
 800c42e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	4313      	orrs	r3, r2
 800c438:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	223d      	movs	r2, #61	@ 0x3d
 800c446:	2101      	movs	r1, #1
 800c448:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	223c      	movs	r2, #60	@ 0x3c
 800c44e:	2100      	movs	r1, #0
 800c450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	0018      	movs	r0, r3
 800c456:	46bd      	mov	sp, r7
 800c458:	b004      	add	sp, #16
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	40012c00 	.word	0x40012c00
 800c460:	ff0fffff 	.word	0xff0fffff
 800c464:	40000400 	.word	0x40000400
 800c468:	40014000 	.word	0x40014000

0800c46c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c474:	46c0      	nop			@ (mov r8, r8)
 800c476:	46bd      	mov	sp, r7
 800c478:	b002      	add	sp, #8
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c484:	46c0      	nop			@ (mov r8, r8)
 800c486:	46bd      	mov	sp, r7
 800c488:	b002      	add	sp, #8
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c494:	46c0      	nop			@ (mov r8, r8)
 800c496:	46bd      	mov	sp, r7
 800c498:	b002      	add	sp, #8
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e046      	b.n	800c53c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2288      	movs	r2, #136	@ 0x88
 800c4b2:	589b      	ldr	r3, [r3, r2]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d107      	bne.n	800c4c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2284      	movs	r2, #132	@ 0x84
 800c4bc:	2100      	movs	r1, #0
 800c4be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	f7fb fa34 	bl	8007930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2288      	movs	r2, #136	@ 0x88
 800c4cc:	2124      	movs	r1, #36	@ 0x24
 800c4ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2101      	movs	r1, #1
 800c4dc:	438a      	bics	r2, r1
 800c4de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d003      	beq.n	800c4f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	0018      	movs	r0, r3
 800c4ec:	f001 f882 	bl	800d5f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	0018      	movs	r0, r3
 800c4f4:	f000 fdc0 	bl	800d078 <UART_SetConfig>
 800c4f8:	0003      	movs	r3, r0
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d101      	bne.n	800c502 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e01c      	b.n	800c53c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	490d      	ldr	r1, [pc, #52]	@ (800c544 <HAL_UART_Init+0xa8>)
 800c50e:	400a      	ands	r2, r1
 800c510:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689a      	ldr	r2, [r3, #8]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	212a      	movs	r1, #42	@ 0x2a
 800c51e:	438a      	bics	r2, r1
 800c520:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2101      	movs	r1, #1
 800c52e:	430a      	orrs	r2, r1
 800c530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	0018      	movs	r0, r3
 800c536:	f001 f911 	bl	800d75c <UART_CheckIdleState>
 800c53a:	0003      	movs	r3, r0
}
 800c53c:	0018      	movs	r0, r3
 800c53e:	46bd      	mov	sp, r7
 800c540:	b002      	add	sp, #8
 800c542:	bd80      	pop	{r7, pc}
 800c544:	ffffb7ff 	.word	0xffffb7ff

0800c548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b08a      	sub	sp, #40	@ 0x28
 800c54c:	af02      	add	r7, sp, #8
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	1dbb      	adds	r3, r7, #6
 800c556:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2288      	movs	r2, #136	@ 0x88
 800c55c:	589b      	ldr	r3, [r3, r2]
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d000      	beq.n	800c564 <HAL_UART_Transmit+0x1c>
 800c562:	e090      	b.n	800c686 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <HAL_UART_Transmit+0x2a>
 800c56a:	1dbb      	adds	r3, r7, #6
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e088      	b.n	800c688 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	689a      	ldr	r2, [r3, #8]
 800c57a:	2380      	movs	r3, #128	@ 0x80
 800c57c:	015b      	lsls	r3, r3, #5
 800c57e:	429a      	cmp	r2, r3
 800c580:	d109      	bne.n	800c596 <HAL_UART_Transmit+0x4e>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d105      	bne.n	800c596 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	2201      	movs	r2, #1
 800c58e:	4013      	ands	r3, r2
 800c590:	d001      	beq.n	800c596 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e078      	b.n	800c688 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2290      	movs	r2, #144	@ 0x90
 800c59a:	2100      	movs	r1, #0
 800c59c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2288      	movs	r2, #136	@ 0x88
 800c5a2:	2121      	movs	r1, #33	@ 0x21
 800c5a4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5a6:	f7fb fb89 	bl	8007cbc <HAL_GetTick>
 800c5aa:	0003      	movs	r3, r0
 800c5ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	1dba      	adds	r2, r7, #6
 800c5b2:	2154      	movs	r1, #84	@ 0x54
 800c5b4:	8812      	ldrh	r2, [r2, #0]
 800c5b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	1dba      	adds	r2, r7, #6
 800c5bc:	2156      	movs	r1, #86	@ 0x56
 800c5be:	8812      	ldrh	r2, [r2, #0]
 800c5c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	689a      	ldr	r2, [r3, #8]
 800c5c6:	2380      	movs	r3, #128	@ 0x80
 800c5c8:	015b      	lsls	r3, r3, #5
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d108      	bne.n	800c5e0 <HAL_UART_Transmit+0x98>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d104      	bne.n	800c5e0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	61bb      	str	r3, [r7, #24]
 800c5de:	e003      	b.n	800c5e8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c5e8:	e030      	b.n	800c64c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	0013      	movs	r3, r2
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2180      	movs	r1, #128	@ 0x80
 800c5f8:	f001 f95a 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800c5fc:	1e03      	subs	r3, r0, #0
 800c5fe:	d005      	beq.n	800c60c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2288      	movs	r2, #136	@ 0x88
 800c604:	2120      	movs	r1, #32
 800c606:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c608:	2303      	movs	r3, #3
 800c60a:	e03d      	b.n	800c688 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10b      	bne.n	800c62a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	001a      	movs	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	05d2      	lsls	r2, r2, #23
 800c61e:	0dd2      	lsrs	r2, r2, #23
 800c620:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	3302      	adds	r3, #2
 800c626:	61bb      	str	r3, [r7, #24]
 800c628:	e007      	b.n	800c63a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	781a      	ldrb	r2, [r3, #0]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	3301      	adds	r3, #1
 800c638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2256      	movs	r2, #86	@ 0x56
 800c63e:	5a9b      	ldrh	r3, [r3, r2]
 800c640:	b29b      	uxth	r3, r3
 800c642:	3b01      	subs	r3, #1
 800c644:	b299      	uxth	r1, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2256      	movs	r2, #86	@ 0x56
 800c64a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2256      	movs	r2, #86	@ 0x56
 800c650:	5a9b      	ldrh	r3, [r3, r2]
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1c8      	bne.n	800c5ea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	0013      	movs	r3, r2
 800c662:	2200      	movs	r2, #0
 800c664:	2140      	movs	r1, #64	@ 0x40
 800c666:	f001 f923 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800c66a:	1e03      	subs	r3, r0, #0
 800c66c:	d005      	beq.n	800c67a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2288      	movs	r2, #136	@ 0x88
 800c672:	2120      	movs	r1, #32
 800c674:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e006      	b.n	800c688 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2288      	movs	r2, #136	@ 0x88
 800c67e:	2120      	movs	r1, #32
 800c680:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	e000      	b.n	800c688 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800c686:	2302      	movs	r3, #2
  }
}
 800c688:	0018      	movs	r0, r3
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b008      	add	sp, #32
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08c      	sub	sp, #48	@ 0x30
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	1dbb      	adds	r3, r7, #6
 800c69c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2288      	movs	r2, #136	@ 0x88
 800c6a2:	589b      	ldr	r3, [r3, r2]
 800c6a4:	2b20      	cmp	r3, #32
 800c6a6:	d000      	beq.n	800c6aa <HAL_UART_Transmit_IT+0x1a>
 800c6a8:	e08d      	b.n	800c7c6 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d003      	beq.n	800c6b8 <HAL_UART_Transmit_IT+0x28>
 800c6b0:	1dbb      	adds	r3, r7, #6
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e085      	b.n	800c7c8 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	2380      	movs	r3, #128	@ 0x80
 800c6c2:	015b      	lsls	r3, r3, #5
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d109      	bne.n	800c6dc <HAL_UART_Transmit_IT+0x4c>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d105      	bne.n	800c6dc <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	d001      	beq.n	800c6dc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e075      	b.n	800c7c8 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	1dba      	adds	r2, r7, #6
 800c6e6:	2154      	movs	r1, #84	@ 0x54
 800c6e8:	8812      	ldrh	r2, [r2, #0]
 800c6ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	1dba      	adds	r2, r7, #6
 800c6f0:	2156      	movs	r1, #86	@ 0x56
 800c6f2:	8812      	ldrh	r2, [r2, #0]
 800c6f4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2290      	movs	r2, #144	@ 0x90
 800c700:	2100      	movs	r1, #0
 800c702:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2288      	movs	r2, #136	@ 0x88
 800c708:	2121      	movs	r1, #33	@ 0x21
 800c70a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c710:	2380      	movs	r3, #128	@ 0x80
 800c712:	059b      	lsls	r3, r3, #22
 800c714:	429a      	cmp	r2, r3
 800c716:	d12a      	bne.n	800c76e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	2380      	movs	r3, #128	@ 0x80
 800c71e:	015b      	lsls	r3, r3, #5
 800c720:	429a      	cmp	r2, r3
 800c722:	d107      	bne.n	800c734 <HAL_UART_Transmit_IT+0xa4>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d103      	bne.n	800c734 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4a28      	ldr	r2, [pc, #160]	@ (800c7d0 <HAL_UART_Transmit_IT+0x140>)
 800c730:	679a      	str	r2, [r3, #120]	@ 0x78
 800c732:	e002      	b.n	800c73a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4a27      	ldr	r2, [pc, #156]	@ (800c7d4 <HAL_UART_Transmit_IT+0x144>)
 800c738:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c73a:	f3ef 8310 	mrs	r3, PRIMASK
 800c73e:	61fb      	str	r3, [r7, #28]
  return(result);
 800c740:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c742:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c744:	2301      	movs	r3, #1
 800c746:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	f383 8810 	msr	PRIMASK, r3
}
 800c74e:	46c0      	nop			@ (mov r8, r8)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	689a      	ldr	r2, [r3, #8]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2180      	movs	r1, #128	@ 0x80
 800c75c:	0409      	lsls	r1, r1, #16
 800c75e:	430a      	orrs	r2, r1
 800c760:	609a      	str	r2, [r3, #8]
 800c762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c764:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	f383 8810 	msr	PRIMASK, r3
}
 800c76c:	e029      	b.n	800c7c2 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689a      	ldr	r2, [r3, #8]
 800c772:	2380      	movs	r3, #128	@ 0x80
 800c774:	015b      	lsls	r3, r3, #5
 800c776:	429a      	cmp	r2, r3
 800c778:	d107      	bne.n	800c78a <HAL_UART_Transmit_IT+0xfa>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d103      	bne.n	800c78a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4a14      	ldr	r2, [pc, #80]	@ (800c7d8 <HAL_UART_Transmit_IT+0x148>)
 800c786:	679a      	str	r2, [r3, #120]	@ 0x78
 800c788:	e002      	b.n	800c790 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4a13      	ldr	r2, [pc, #76]	@ (800c7dc <HAL_UART_Transmit_IT+0x14c>)
 800c78e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c790:	f3ef 8310 	mrs	r3, PRIMASK
 800c794:	613b      	str	r3, [r7, #16]
  return(result);
 800c796:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c79a:	2301      	movs	r3, #1
 800c79c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f383 8810 	msr	PRIMASK, r3
}
 800c7a4:	46c0      	nop			@ (mov r8, r8)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2180      	movs	r1, #128	@ 0x80
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	f383 8810 	msr	PRIMASK, r3
}
 800c7c0:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e000      	b.n	800c7c8 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800c7c6:	2302      	movs	r3, #2
  }
}
 800c7c8:	0018      	movs	r0, r3
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	b00c      	add	sp, #48	@ 0x30
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	0800df31 	.word	0x0800df31
 800c7d4:	0800de45 	.word	0x0800de45
 800c7d8:	0800dd87 	.word	0x0800dd87
 800c7dc:	0800dcd3 	.word	0x0800dcd3

0800c7e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	1dbb      	adds	r3, r7, #6
 800c7ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	228c      	movs	r2, #140	@ 0x8c
 800c7f2:	589b      	ldr	r3, [r3, r2]
 800c7f4:	2b20      	cmp	r3, #32
 800c7f6:	d14a      	bne.n	800c88e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <HAL_UART_Receive_IT+0x26>
 800c7fe:	1dbb      	adds	r3, r7, #6
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	e042      	b.n	800c890 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	689a      	ldr	r2, [r3, #8]
 800c80e:	2380      	movs	r3, #128	@ 0x80
 800c810:	015b      	lsls	r3, r3, #5
 800c812:	429a      	cmp	r2, r3
 800c814:	d109      	bne.n	800c82a <HAL_UART_Receive_IT+0x4a>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d105      	bne.n	800c82a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2201      	movs	r2, #1
 800c822:	4013      	ands	r3, r2
 800c824:	d001      	beq.n	800c82a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e032      	b.n	800c890 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a18      	ldr	r2, [pc, #96]	@ (800c898 <HAL_UART_Receive_IT+0xb8>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d020      	beq.n	800c87c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	2380      	movs	r3, #128	@ 0x80
 800c842:	041b      	lsls	r3, r3, #16
 800c844:	4013      	ands	r3, r2
 800c846:	d019      	beq.n	800c87c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c848:	f3ef 8310 	mrs	r3, PRIMASK
 800c84c:	613b      	str	r3, [r7, #16]
  return(result);
 800c84e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c850:	61fb      	str	r3, [r7, #28]
 800c852:	2301      	movs	r3, #1
 800c854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f383 8810 	msr	PRIMASK, r3
}
 800c85c:	46c0      	nop			@ (mov r8, r8)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2180      	movs	r1, #128	@ 0x80
 800c86a:	04c9      	lsls	r1, r1, #19
 800c86c:	430a      	orrs	r2, r1
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	f383 8810 	msr	PRIMASK, r3
}
 800c87a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c87c:	1dbb      	adds	r3, r7, #6
 800c87e:	881a      	ldrh	r2, [r3, #0]
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	0018      	movs	r0, r3
 800c886:	f001 f883 	bl	800d990 <UART_Start_Receive_IT>
 800c88a:	0003      	movs	r3, r0
 800c88c:	e000      	b.n	800c890 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c88e:	2302      	movs	r3, #2
  }
}
 800c890:	0018      	movs	r0, r3
 800c892:	46bd      	mov	sp, r7
 800c894:	b008      	add	sp, #32
 800c896:	bd80      	pop	{r7, pc}
 800c898:	40008000 	.word	0x40008000

0800c89c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b092      	sub	sp, #72	@ 0x48
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c8a8:	623b      	str	r3, [r7, #32]
  return(result);
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c8ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b4:	f383 8810 	msr	PRIMASK, r3
}
 800c8b8:	46c0      	nop			@ (mov r8, r8)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	494d      	ldr	r1, [pc, #308]	@ (800c9fc <HAL_UART_AbortReceive+0x160>)
 800c8c6:	400a      	ands	r2, r1
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d0:	f383 8810 	msr	PRIMASK, r3
}
 800c8d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c8de:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e6:	f383 8810 	msr	PRIMASK, r3
}
 800c8ea:	46c0      	nop			@ (mov r8, r8)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689a      	ldr	r2, [r3, #8]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4942      	ldr	r1, [pc, #264]	@ (800ca00 <HAL_UART_AbortReceive+0x164>)
 800c8f8:	400a      	ands	r2, r1
 800c8fa:	609a      	str	r2, [r3, #8]
 800c8fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c902:	f383 8810 	msr	PRIMASK, r3
}
 800c906:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d118      	bne.n	800c942 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c910:	f3ef 8310 	mrs	r3, PRIMASK
 800c914:	617b      	str	r3, [r7, #20]
  return(result);
 800c916:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c91a:	2301      	movs	r3, #1
 800c91c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	f383 8810 	msr	PRIMASK, r3
}
 800c924:	46c0      	nop			@ (mov r8, r8)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2110      	movs	r1, #16
 800c932:	438a      	bics	r2, r1
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	f383 8810 	msr	PRIMASK, r3
}
 800c940:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	2240      	movs	r2, #64	@ 0x40
 800c94a:	4013      	ands	r3, r2
 800c94c:	2b40      	cmp	r3, #64	@ 0x40
 800c94e:	d139      	bne.n	800c9c4 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c950:	f3ef 8310 	mrs	r3, PRIMASK
 800c954:	60bb      	str	r3, [r7, #8]
  return(result);
 800c956:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c95a:	2301      	movs	r3, #1
 800c95c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f383 8810 	msr	PRIMASK, r3
}
 800c964:	46c0      	nop			@ (mov r8, r8)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	689a      	ldr	r2, [r3, #8]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2140      	movs	r1, #64	@ 0x40
 800c972:	438a      	bics	r2, r1
 800c974:	609a      	str	r2, [r3, #8]
 800c976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c978:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f383 8810 	msr	PRIMASK, r3
}
 800c980:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2280      	movs	r2, #128	@ 0x80
 800c986:	589b      	ldr	r3, [r3, r2]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01b      	beq.n	800c9c4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2280      	movs	r2, #128	@ 0x80
 800c990:	589b      	ldr	r3, [r3, r2]
 800c992:	2200      	movs	r2, #0
 800c994:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2280      	movs	r2, #128	@ 0x80
 800c99a:	589b      	ldr	r3, [r3, r2]
 800c99c:	0018      	movs	r0, r3
 800c99e:	f7fb fa95 	bl	8007ecc <HAL_DMA_Abort>
 800c9a2:	1e03      	subs	r3, r0, #0
 800c9a4:	d00e      	beq.n	800c9c4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2280      	movs	r2, #128	@ 0x80
 800c9aa:	589b      	ldr	r3, [r3, r2]
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	f7fb fb59 	bl	8008064 <HAL_DMA_GetError>
 800c9b2:	0003      	movs	r3, r0
 800c9b4:	2b20      	cmp	r3, #32
 800c9b6:	d105      	bne.n	800c9c4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2290      	movs	r2, #144	@ 0x90
 800c9bc:	2110      	movs	r1, #16
 800c9be:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e017      	b.n	800c9f4 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	225e      	movs	r2, #94	@ 0x5e
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	220f      	movs	r2, #15
 800c9d2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	699a      	ldr	r2, [r3, #24]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2108      	movs	r1, #8
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	228c      	movs	r2, #140	@ 0x8c
 800c9e8:	2120      	movs	r1, #32
 800c9ea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	0018      	movs	r0, r3
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	b012      	add	sp, #72	@ 0x48
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	fffffedf 	.word	0xfffffedf
 800ca00:	effffffe 	.word	0xeffffffe

0800ca04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca04:	b5b0      	push	{r4, r5, r7, lr}
 800ca06:	b0aa      	sub	sp, #168	@ 0xa8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	22a4      	movs	r2, #164	@ 0xa4
 800ca14:	18b9      	adds	r1, r7, r2
 800ca16:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	20a0      	movs	r0, #160	@ 0xa0
 800ca20:	1839      	adds	r1, r7, r0
 800ca22:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	249c      	movs	r4, #156	@ 0x9c
 800ca2c:	1939      	adds	r1, r7, r4
 800ca2e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca30:	0011      	movs	r1, r2
 800ca32:	18bb      	adds	r3, r7, r2
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4aa2      	ldr	r2, [pc, #648]	@ (800ccc0 <HAL_UART_IRQHandler+0x2bc>)
 800ca38:	4013      	ands	r3, r2
 800ca3a:	2298      	movs	r2, #152	@ 0x98
 800ca3c:	18bd      	adds	r5, r7, r2
 800ca3e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800ca40:	18bb      	adds	r3, r7, r2
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11a      	bne.n	800ca7e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca48:	187b      	adds	r3, r7, r1
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	4013      	ands	r3, r2
 800ca50:	d015      	beq.n	800ca7e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca52:	183b      	adds	r3, r7, r0
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2220      	movs	r2, #32
 800ca58:	4013      	ands	r3, r2
 800ca5a:	d105      	bne.n	800ca68 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca5c:	193b      	adds	r3, r7, r4
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	2380      	movs	r3, #128	@ 0x80
 800ca62:	055b      	lsls	r3, r3, #21
 800ca64:	4013      	ands	r3, r2
 800ca66:	d00a      	beq.n	800ca7e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d100      	bne.n	800ca72 <HAL_UART_IRQHandler+0x6e>
 800ca70:	e2dc      	b.n	800d02c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	0010      	movs	r0, r2
 800ca7a:	4798      	blx	r3
      }
      return;
 800ca7c:	e2d6      	b.n	800d02c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca7e:	2398      	movs	r3, #152	@ 0x98
 800ca80:	18fb      	adds	r3, r7, r3
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d100      	bne.n	800ca8a <HAL_UART_IRQHandler+0x86>
 800ca88:	e122      	b.n	800ccd0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ca8a:	239c      	movs	r3, #156	@ 0x9c
 800ca8c:	18fb      	adds	r3, r7, r3
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a8c      	ldr	r2, [pc, #560]	@ (800ccc4 <HAL_UART_IRQHandler+0x2c0>)
 800ca92:	4013      	ands	r3, r2
 800ca94:	d106      	bne.n	800caa4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ca96:	23a0      	movs	r3, #160	@ 0xa0
 800ca98:	18fb      	adds	r3, r7, r3
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a8a      	ldr	r2, [pc, #552]	@ (800ccc8 <HAL_UART_IRQHandler+0x2c4>)
 800ca9e:	4013      	ands	r3, r2
 800caa0:	d100      	bne.n	800caa4 <HAL_UART_IRQHandler+0xa0>
 800caa2:	e115      	b.n	800ccd0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800caa4:	23a4      	movs	r3, #164	@ 0xa4
 800caa6:	18fb      	adds	r3, r7, r3
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2201      	movs	r2, #1
 800caac:	4013      	ands	r3, r2
 800caae:	d012      	beq.n	800cad6 <HAL_UART_IRQHandler+0xd2>
 800cab0:	23a0      	movs	r3, #160	@ 0xa0
 800cab2:	18fb      	adds	r3, r7, r3
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	2380      	movs	r3, #128	@ 0x80
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	4013      	ands	r3, r2
 800cabc:	d00b      	beq.n	800cad6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2201      	movs	r2, #1
 800cac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2290      	movs	r2, #144	@ 0x90
 800caca:	589b      	ldr	r3, [r3, r2]
 800cacc:	2201      	movs	r2, #1
 800cace:	431a      	orrs	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2190      	movs	r1, #144	@ 0x90
 800cad4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cad6:	23a4      	movs	r3, #164	@ 0xa4
 800cad8:	18fb      	adds	r3, r7, r3
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2202      	movs	r2, #2
 800cade:	4013      	ands	r3, r2
 800cae0:	d011      	beq.n	800cb06 <HAL_UART_IRQHandler+0x102>
 800cae2:	239c      	movs	r3, #156	@ 0x9c
 800cae4:	18fb      	adds	r3, r7, r3
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2201      	movs	r2, #1
 800caea:	4013      	ands	r3, r2
 800caec:	d00b      	beq.n	800cb06 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2202      	movs	r2, #2
 800caf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2290      	movs	r2, #144	@ 0x90
 800cafa:	589b      	ldr	r3, [r3, r2]
 800cafc:	2204      	movs	r2, #4
 800cafe:	431a      	orrs	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2190      	movs	r1, #144	@ 0x90
 800cb04:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb06:	23a4      	movs	r3, #164	@ 0xa4
 800cb08:	18fb      	adds	r3, r7, r3
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	4013      	ands	r3, r2
 800cb10:	d011      	beq.n	800cb36 <HAL_UART_IRQHandler+0x132>
 800cb12:	239c      	movs	r3, #156	@ 0x9c
 800cb14:	18fb      	adds	r3, r7, r3
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	d00b      	beq.n	800cb36 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2204      	movs	r2, #4
 800cb24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2290      	movs	r2, #144	@ 0x90
 800cb2a:	589b      	ldr	r3, [r3, r2]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	431a      	orrs	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2190      	movs	r1, #144	@ 0x90
 800cb34:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb36:	23a4      	movs	r3, #164	@ 0xa4
 800cb38:	18fb      	adds	r3, r7, r3
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2208      	movs	r2, #8
 800cb3e:	4013      	ands	r3, r2
 800cb40:	d017      	beq.n	800cb72 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb42:	23a0      	movs	r3, #160	@ 0xa0
 800cb44:	18fb      	adds	r3, r7, r3
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2220      	movs	r2, #32
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	d105      	bne.n	800cb5a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb4e:	239c      	movs	r3, #156	@ 0x9c
 800cb50:	18fb      	adds	r3, r7, r3
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a5b      	ldr	r2, [pc, #364]	@ (800ccc4 <HAL_UART_IRQHandler+0x2c0>)
 800cb56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb58:	d00b      	beq.n	800cb72 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2208      	movs	r2, #8
 800cb60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2290      	movs	r2, #144	@ 0x90
 800cb66:	589b      	ldr	r3, [r3, r2]
 800cb68:	2208      	movs	r2, #8
 800cb6a:	431a      	orrs	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2190      	movs	r1, #144	@ 0x90
 800cb70:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb72:	23a4      	movs	r3, #164	@ 0xa4
 800cb74:	18fb      	adds	r3, r7, r3
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	2380      	movs	r3, #128	@ 0x80
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	d013      	beq.n	800cba8 <HAL_UART_IRQHandler+0x1a4>
 800cb80:	23a0      	movs	r3, #160	@ 0xa0
 800cb82:	18fb      	adds	r3, r7, r3
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	2380      	movs	r3, #128	@ 0x80
 800cb88:	04db      	lsls	r3, r3, #19
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	d00c      	beq.n	800cba8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2280      	movs	r2, #128	@ 0x80
 800cb94:	0112      	lsls	r2, r2, #4
 800cb96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2290      	movs	r2, #144	@ 0x90
 800cb9c:	589b      	ldr	r3, [r3, r2]
 800cb9e:	2220      	movs	r2, #32
 800cba0:	431a      	orrs	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2190      	movs	r1, #144	@ 0x90
 800cba6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2290      	movs	r2, #144	@ 0x90
 800cbac:	589b      	ldr	r3, [r3, r2]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d100      	bne.n	800cbb4 <HAL_UART_IRQHandler+0x1b0>
 800cbb2:	e23d      	b.n	800d030 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbb4:	23a4      	movs	r3, #164	@ 0xa4
 800cbb6:	18fb      	adds	r3, r7, r3
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2220      	movs	r2, #32
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	d015      	beq.n	800cbec <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbc0:	23a0      	movs	r3, #160	@ 0xa0
 800cbc2:	18fb      	adds	r3, r7, r3
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2220      	movs	r2, #32
 800cbc8:	4013      	ands	r3, r2
 800cbca:	d106      	bne.n	800cbda <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbcc:	239c      	movs	r3, #156	@ 0x9c
 800cbce:	18fb      	adds	r3, r7, r3
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	2380      	movs	r3, #128	@ 0x80
 800cbd4:	055b      	lsls	r3, r3, #21
 800cbd6:	4013      	ands	r3, r2
 800cbd8:	d008      	beq.n	800cbec <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d004      	beq.n	800cbec <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	0010      	movs	r0, r2
 800cbea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2290      	movs	r2, #144	@ 0x90
 800cbf0:	589b      	ldr	r3, [r3, r2]
 800cbf2:	2194      	movs	r1, #148	@ 0x94
 800cbf4:	187a      	adds	r2, r7, r1
 800cbf6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	2240      	movs	r2, #64	@ 0x40
 800cc00:	4013      	ands	r3, r2
 800cc02:	2b40      	cmp	r3, #64	@ 0x40
 800cc04:	d004      	beq.n	800cc10 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc06:	187b      	adds	r3, r7, r1
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2228      	movs	r2, #40	@ 0x28
 800cc0c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc0e:	d04c      	beq.n	800ccaa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	0018      	movs	r0, r3
 800cc14:	f000 ffe0 	bl	800dbd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	2240      	movs	r2, #64	@ 0x40
 800cc20:	4013      	ands	r3, r2
 800cc22:	2b40      	cmp	r3, #64	@ 0x40
 800cc24:	d13c      	bne.n	800cca0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc26:	f3ef 8310 	mrs	r3, PRIMASK
 800cc2a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800cc2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc2e:	2090      	movs	r0, #144	@ 0x90
 800cc30:	183a      	adds	r2, r7, r0
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	2301      	movs	r3, #1
 800cc36:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc3a:	f383 8810 	msr	PRIMASK, r3
}
 800cc3e:	46c0      	nop			@ (mov r8, r8)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	689a      	ldr	r2, [r3, #8]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2140      	movs	r1, #64	@ 0x40
 800cc4c:	438a      	bics	r2, r1
 800cc4e:	609a      	str	r2, [r3, #8]
 800cc50:	183b      	adds	r3, r7, r0
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc58:	f383 8810 	msr	PRIMASK, r3
}
 800cc5c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2280      	movs	r2, #128	@ 0x80
 800cc62:	589b      	ldr	r3, [r3, r2]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d016      	beq.n	800cc96 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2280      	movs	r2, #128	@ 0x80
 800cc6c:	589b      	ldr	r3, [r3, r2]
 800cc6e:	4a17      	ldr	r2, [pc, #92]	@ (800cccc <HAL_UART_IRQHandler+0x2c8>)
 800cc70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2280      	movs	r2, #128	@ 0x80
 800cc76:	589b      	ldr	r3, [r3, r2]
 800cc78:	0018      	movs	r0, r3
 800cc7a:	f7fb f989 	bl	8007f90 <HAL_DMA_Abort_IT>
 800cc7e:	1e03      	subs	r3, r0, #0
 800cc80:	d01c      	beq.n	800ccbc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2280      	movs	r2, #128	@ 0x80
 800cc86:	589b      	ldr	r3, [r3, r2]
 800cc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	2180      	movs	r1, #128	@ 0x80
 800cc8e:	5852      	ldr	r2, [r2, r1]
 800cc90:	0010      	movs	r0, r2
 800cc92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc94:	e012      	b.n	800ccbc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	0018      	movs	r0, r3
 800cc9a:	f000 f9d9 	bl	800d050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc9e:	e00d      	b.n	800ccbc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	0018      	movs	r0, r3
 800cca4:	f000 f9d4 	bl	800d050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cca8:	e008      	b.n	800ccbc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	0018      	movs	r0, r3
 800ccae:	f000 f9cf 	bl	800d050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2290      	movs	r2, #144	@ 0x90
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800ccba:	e1b9      	b.n	800d030 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccbc:	46c0      	nop			@ (mov r8, r8)
    return;
 800ccbe:	e1b7      	b.n	800d030 <HAL_UART_IRQHandler+0x62c>
 800ccc0:	0000080f 	.word	0x0000080f
 800ccc4:	10000001 	.word	0x10000001
 800ccc8:	04000120 	.word	0x04000120
 800cccc:	0800dca5 	.word	0x0800dca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d000      	beq.n	800ccda <HAL_UART_IRQHandler+0x2d6>
 800ccd8:	e13e      	b.n	800cf58 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccda:	23a4      	movs	r3, #164	@ 0xa4
 800ccdc:	18fb      	adds	r3, r7, r3
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2210      	movs	r2, #16
 800cce2:	4013      	ands	r3, r2
 800cce4:	d100      	bne.n	800cce8 <HAL_UART_IRQHandler+0x2e4>
 800cce6:	e137      	b.n	800cf58 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cce8:	23a0      	movs	r3, #160	@ 0xa0
 800ccea:	18fb      	adds	r3, r7, r3
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2210      	movs	r2, #16
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	d100      	bne.n	800ccf6 <HAL_UART_IRQHandler+0x2f2>
 800ccf4:	e130      	b.n	800cf58 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2210      	movs	r2, #16
 800ccfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	2240      	movs	r2, #64	@ 0x40
 800cd06:	4013      	ands	r3, r2
 800cd08:	2b40      	cmp	r3, #64	@ 0x40
 800cd0a:	d000      	beq.n	800cd0e <HAL_UART_IRQHandler+0x30a>
 800cd0c:	e0a4      	b.n	800ce58 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2280      	movs	r2, #128	@ 0x80
 800cd12:	589b      	ldr	r3, [r3, r2]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	217e      	movs	r1, #126	@ 0x7e
 800cd1a:	187b      	adds	r3, r7, r1
 800cd1c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cd1e:	187b      	adds	r3, r7, r1
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d100      	bne.n	800cd28 <HAL_UART_IRQHandler+0x324>
 800cd26:	e185      	b.n	800d034 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	225c      	movs	r2, #92	@ 0x5c
 800cd2c:	5a9b      	ldrh	r3, [r3, r2]
 800cd2e:	187a      	adds	r2, r7, r1
 800cd30:	8812      	ldrh	r2, [r2, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d300      	bcc.n	800cd38 <HAL_UART_IRQHandler+0x334>
 800cd36:	e17d      	b.n	800d034 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	187a      	adds	r2, r7, r1
 800cd3c:	215e      	movs	r1, #94	@ 0x5e
 800cd3e:	8812      	ldrh	r2, [r2, #0]
 800cd40:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2280      	movs	r2, #128	@ 0x80
 800cd46:	589b      	ldr	r3, [r3, r2]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2220      	movs	r2, #32
 800cd4e:	4013      	ands	r3, r2
 800cd50:	d170      	bne.n	800ce34 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd52:	f3ef 8310 	mrs	r3, PRIMASK
 800cd56:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd62:	f383 8810 	msr	PRIMASK, r3
}
 800cd66:	46c0      	nop			@ (mov r8, r8)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	49b4      	ldr	r1, [pc, #720]	@ (800d044 <HAL_UART_IRQHandler+0x640>)
 800cd74:	400a      	ands	r2, r1
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7e:	f383 8810 	msr	PRIMASK, r3
}
 800cd82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd84:	f3ef 8310 	mrs	r3, PRIMASK
 800cd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800cd8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd8c:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd8e:	2301      	movs	r3, #1
 800cd90:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd94:	f383 8810 	msr	PRIMASK, r3
}
 800cd98:	46c0      	nop			@ (mov r8, r8)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689a      	ldr	r2, [r3, #8]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2101      	movs	r1, #1
 800cda6:	438a      	bics	r2, r1
 800cda8:	609a      	str	r2, [r3, #8]
 800cdaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdac:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdb0:	f383 8810 	msr	PRIMASK, r3
}
 800cdb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdb6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800cdbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdbe:	673b      	str	r3, [r7, #112]	@ 0x70
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdc6:	f383 8810 	msr	PRIMASK, r3
}
 800cdca:	46c0      	nop			@ (mov r8, r8)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	689a      	ldr	r2, [r3, #8]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2140      	movs	r1, #64	@ 0x40
 800cdd8:	438a      	bics	r2, r1
 800cdda:	609a      	str	r2, [r3, #8]
 800cddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cdde:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cde0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cde2:	f383 8810 	msr	PRIMASK, r3
}
 800cde6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	228c      	movs	r2, #140	@ 0x8c
 800cdec:	2120      	movs	r1, #32
 800cdee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdfa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800cdfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce00:	2301      	movs	r3, #1
 800ce02:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce06:	f383 8810 	msr	PRIMASK, r3
}
 800ce0a:	46c0      	nop			@ (mov r8, r8)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2110      	movs	r1, #16
 800ce18:	438a      	bics	r2, r1
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce22:	f383 8810 	msr	PRIMASK, r3
}
 800ce26:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2280      	movs	r2, #128	@ 0x80
 800ce2c:	589b      	ldr	r3, [r3, r2]
 800ce2e:	0018      	movs	r0, r3
 800ce30:	f7fb f84c 	bl	8007ecc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2202      	movs	r2, #2
 800ce38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	225c      	movs	r2, #92	@ 0x5c
 800ce3e:	5a9a      	ldrh	r2, [r3, r2]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	215e      	movs	r1, #94	@ 0x5e
 800ce44:	5a5b      	ldrh	r3, [r3, r1]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	0011      	movs	r1, r2
 800ce50:	0018      	movs	r0, r3
 800ce52:	f000 f905 	bl	800d060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce56:	e0ed      	b.n	800d034 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	225c      	movs	r2, #92	@ 0x5c
 800ce5c:	5a99      	ldrh	r1, [r3, r2]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	225e      	movs	r2, #94	@ 0x5e
 800ce62:	5a9b      	ldrh	r3, [r3, r2]
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	208e      	movs	r0, #142	@ 0x8e
 800ce68:	183b      	adds	r3, r7, r0
 800ce6a:	1a8a      	subs	r2, r1, r2
 800ce6c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	225e      	movs	r2, #94	@ 0x5e
 800ce72:	5a9b      	ldrh	r3, [r3, r2]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d100      	bne.n	800ce7c <HAL_UART_IRQHandler+0x478>
 800ce7a:	e0dd      	b.n	800d038 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800ce7c:	183b      	adds	r3, r7, r0
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d100      	bne.n	800ce86 <HAL_UART_IRQHandler+0x482>
 800ce84:	e0d8      	b.n	800d038 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce86:	f3ef 8310 	mrs	r3, PRIMASK
 800ce8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce8e:	2488      	movs	r4, #136	@ 0x88
 800ce90:	193a      	adds	r2, r7, r4
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	2301      	movs	r3, #1
 800ce96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f383 8810 	msr	PRIMASK, r3
}
 800ce9e:	46c0      	nop			@ (mov r8, r8)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4967      	ldr	r1, [pc, #412]	@ (800d048 <HAL_UART_IRQHandler+0x644>)
 800ceac:	400a      	ands	r2, r1
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	193b      	adds	r3, r7, r4
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f383 8810 	msr	PRIMASK, r3
}
 800cebc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cebe:	f3ef 8310 	mrs	r3, PRIMASK
 800cec2:	61bb      	str	r3, [r7, #24]
  return(result);
 800cec4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cec6:	2484      	movs	r4, #132	@ 0x84
 800cec8:	193a      	adds	r2, r7, r4
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	2301      	movs	r3, #1
 800cece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	f383 8810 	msr	PRIMASK, r3
}
 800ced6:	46c0      	nop			@ (mov r8, r8)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	689a      	ldr	r2, [r3, #8]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	495a      	ldr	r1, [pc, #360]	@ (800d04c <HAL_UART_IRQHandler+0x648>)
 800cee4:	400a      	ands	r2, r1
 800cee6:	609a      	str	r2, [r3, #8]
 800cee8:	193b      	adds	r3, r7, r4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	f383 8810 	msr	PRIMASK, r3
}
 800cef4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	228c      	movs	r2, #140	@ 0x8c
 800cefa:	2120      	movs	r1, #32
 800cefc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf12:	2480      	movs	r4, #128	@ 0x80
 800cf14:	193a      	adds	r2, r7, r4
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	2301      	movs	r3, #1
 800cf1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	f383 8810 	msr	PRIMASK, r3
}
 800cf22:	46c0      	nop			@ (mov r8, r8)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2110      	movs	r1, #16
 800cf30:	438a      	bics	r2, r1
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	193b      	adds	r3, r7, r4
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	f383 8810 	msr	PRIMASK, r3
}
 800cf40:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2202      	movs	r2, #2
 800cf46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf48:	183b      	adds	r3, r7, r0
 800cf4a:	881a      	ldrh	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	0011      	movs	r1, r2
 800cf50:	0018      	movs	r0, r3
 800cf52:	f000 f885 	bl	800d060 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf56:	e06f      	b.n	800d038 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf58:	23a4      	movs	r3, #164	@ 0xa4
 800cf5a:	18fb      	adds	r3, r7, r3
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	2380      	movs	r3, #128	@ 0x80
 800cf60:	035b      	lsls	r3, r3, #13
 800cf62:	4013      	ands	r3, r2
 800cf64:	d010      	beq.n	800cf88 <HAL_UART_IRQHandler+0x584>
 800cf66:	239c      	movs	r3, #156	@ 0x9c
 800cf68:	18fb      	adds	r3, r7, r3
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	2380      	movs	r3, #128	@ 0x80
 800cf6e:	03db      	lsls	r3, r3, #15
 800cf70:	4013      	ands	r3, r2
 800cf72:	d009      	beq.n	800cf88 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2280      	movs	r2, #128	@ 0x80
 800cf7a:	0352      	lsls	r2, r2, #13
 800cf7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	0018      	movs	r0, r3
 800cf82:	f001 fdfd 	bl	800eb80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf86:	e05a      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cf88:	23a4      	movs	r3, #164	@ 0xa4
 800cf8a:	18fb      	adds	r3, r7, r3
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2280      	movs	r2, #128	@ 0x80
 800cf90:	4013      	ands	r3, r2
 800cf92:	d016      	beq.n	800cfc2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cf94:	23a0      	movs	r3, #160	@ 0xa0
 800cf96:	18fb      	adds	r3, r7, r3
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2280      	movs	r2, #128	@ 0x80
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	d106      	bne.n	800cfae <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cfa0:	239c      	movs	r3, #156	@ 0x9c
 800cfa2:	18fb      	adds	r3, r7, r3
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	2380      	movs	r3, #128	@ 0x80
 800cfa8:	041b      	lsls	r3, r3, #16
 800cfaa:	4013      	ands	r3, r2
 800cfac:	d009      	beq.n	800cfc2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d042      	beq.n	800d03c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	0010      	movs	r0, r2
 800cfbe:	4798      	blx	r3
    }
    return;
 800cfc0:	e03c      	b.n	800d03c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cfc2:	23a4      	movs	r3, #164	@ 0xa4
 800cfc4:	18fb      	adds	r3, r7, r3
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2240      	movs	r2, #64	@ 0x40
 800cfca:	4013      	ands	r3, r2
 800cfcc:	d00a      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x5e0>
 800cfce:	23a0      	movs	r3, #160	@ 0xa0
 800cfd0:	18fb      	adds	r3, r7, r3
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2240      	movs	r2, #64	@ 0x40
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	d004      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	0018      	movs	r0, r3
 800cfde:	f001 f821 	bl	800e024 <UART_EndTransmit_IT>
    return;
 800cfe2:	e02c      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cfe4:	23a4      	movs	r3, #164	@ 0xa4
 800cfe6:	18fb      	adds	r3, r7, r3
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	2380      	movs	r3, #128	@ 0x80
 800cfec:	041b      	lsls	r3, r3, #16
 800cfee:	4013      	ands	r3, r2
 800cff0:	d00b      	beq.n	800d00a <HAL_UART_IRQHandler+0x606>
 800cff2:	23a0      	movs	r3, #160	@ 0xa0
 800cff4:	18fb      	adds	r3, r7, r3
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	2380      	movs	r3, #128	@ 0x80
 800cffa:	05db      	lsls	r3, r3, #23
 800cffc:	4013      	ands	r3, r2
 800cffe:	d004      	beq.n	800d00a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	0018      	movs	r0, r3
 800d004:	f001 fdcc 	bl	800eba0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d008:	e019      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d00a:	23a4      	movs	r3, #164	@ 0xa4
 800d00c:	18fb      	adds	r3, r7, r3
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	2380      	movs	r3, #128	@ 0x80
 800d012:	045b      	lsls	r3, r3, #17
 800d014:	4013      	ands	r3, r2
 800d016:	d012      	beq.n	800d03e <HAL_UART_IRQHandler+0x63a>
 800d018:	23a0      	movs	r3, #160	@ 0xa0
 800d01a:	18fb      	adds	r3, r7, r3
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	da0d      	bge.n	800d03e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	0018      	movs	r0, r3
 800d026:	f001 fdb3 	bl	800eb90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d02a:	e008      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
      return;
 800d02c:	46c0      	nop			@ (mov r8, r8)
 800d02e:	e006      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
    return;
 800d030:	46c0      	nop			@ (mov r8, r8)
 800d032:	e004      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
      return;
 800d034:	46c0      	nop			@ (mov r8, r8)
 800d036:	e002      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
      return;
 800d038:	46c0      	nop			@ (mov r8, r8)
 800d03a:	e000      	b.n	800d03e <HAL_UART_IRQHandler+0x63a>
    return;
 800d03c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d03e:	46bd      	mov	sp, r7
 800d040:	b02a      	add	sp, #168	@ 0xa8
 800d042:	bdb0      	pop	{r4, r5, r7, pc}
 800d044:	fffffeff 	.word	0xfffffeff
 800d048:	fffffedf 	.word	0xfffffedf
 800d04c:	effffffe 	.word	0xeffffffe

0800d050 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d058:	46c0      	nop			@ (mov r8, r8)
 800d05a:	46bd      	mov	sp, r7
 800d05c:	b002      	add	sp, #8
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	000a      	movs	r2, r1
 800d06a:	1cbb      	adds	r3, r7, #2
 800d06c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d06e:	46c0      	nop			@ (mov r8, r8)
 800d070:	46bd      	mov	sp, r7
 800d072:	b002      	add	sp, #8
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d078:	b5b0      	push	{r4, r5, r7, lr}
 800d07a:	b090      	sub	sp, #64	@ 0x40
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d080:	231a      	movs	r3, #26
 800d082:	2220      	movs	r2, #32
 800d084:	189b      	adds	r3, r3, r2
 800d086:	19db      	adds	r3, r3, r7
 800d088:	2200      	movs	r2, #0
 800d08a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08e:	689a      	ldr	r2, [r3, #8]
 800d090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	431a      	orrs	r2, r3
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4aaf      	ldr	r2, [pc, #700]	@ (800d368 <UART_SetConfig+0x2f0>)
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	0019      	movs	r1, r3
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b6:	430b      	orrs	r3, r1
 800d0b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4aaa      	ldr	r2, [pc, #680]	@ (800d36c <UART_SetConfig+0x2f4>)
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	0018      	movs	r0, r3
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c8:	68d9      	ldr	r1, [r3, #12]
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	0003      	movs	r3, r0
 800d0d0:	430b      	orrs	r3, r1
 800d0d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d6:	699b      	ldr	r3, [r3, #24]
 800d0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4aa4      	ldr	r2, [pc, #656]	@ (800d370 <UART_SetConfig+0x2f8>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d004      	beq.n	800d0ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	4a9f      	ldr	r2, [pc, #636]	@ (800d374 <UART_SetConfig+0x2fc>)
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	0019      	movs	r1, r3
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d100:	430b      	orrs	r3, r1
 800d102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10a:	220f      	movs	r2, #15
 800d10c:	4393      	bics	r3, r2
 800d10e:	0018      	movs	r0, r3
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	0003      	movs	r3, r0
 800d11a:	430b      	orrs	r3, r1
 800d11c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a95      	ldr	r2, [pc, #596]	@ (800d378 <UART_SetConfig+0x300>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d131      	bne.n	800d18c <UART_SetConfig+0x114>
 800d128:	4b94      	ldr	r3, [pc, #592]	@ (800d37c <UART_SetConfig+0x304>)
 800d12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d12c:	2203      	movs	r2, #3
 800d12e:	4013      	ands	r3, r2
 800d130:	2b03      	cmp	r3, #3
 800d132:	d01d      	beq.n	800d170 <UART_SetConfig+0xf8>
 800d134:	d823      	bhi.n	800d17e <UART_SetConfig+0x106>
 800d136:	2b02      	cmp	r3, #2
 800d138:	d00c      	beq.n	800d154 <UART_SetConfig+0xdc>
 800d13a:	d820      	bhi.n	800d17e <UART_SetConfig+0x106>
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <UART_SetConfig+0xce>
 800d140:	2b01      	cmp	r3, #1
 800d142:	d00e      	beq.n	800d162 <UART_SetConfig+0xea>
 800d144:	e01b      	b.n	800d17e <UART_SetConfig+0x106>
 800d146:	231b      	movs	r3, #27
 800d148:	2220      	movs	r2, #32
 800d14a:	189b      	adds	r3, r3, r2
 800d14c:	19db      	adds	r3, r3, r7
 800d14e:	2200      	movs	r2, #0
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e0b4      	b.n	800d2be <UART_SetConfig+0x246>
 800d154:	231b      	movs	r3, #27
 800d156:	2220      	movs	r2, #32
 800d158:	189b      	adds	r3, r3, r2
 800d15a:	19db      	adds	r3, r3, r7
 800d15c:	2202      	movs	r2, #2
 800d15e:	701a      	strb	r2, [r3, #0]
 800d160:	e0ad      	b.n	800d2be <UART_SetConfig+0x246>
 800d162:	231b      	movs	r3, #27
 800d164:	2220      	movs	r2, #32
 800d166:	189b      	adds	r3, r3, r2
 800d168:	19db      	adds	r3, r3, r7
 800d16a:	2204      	movs	r2, #4
 800d16c:	701a      	strb	r2, [r3, #0]
 800d16e:	e0a6      	b.n	800d2be <UART_SetConfig+0x246>
 800d170:	231b      	movs	r3, #27
 800d172:	2220      	movs	r2, #32
 800d174:	189b      	adds	r3, r3, r2
 800d176:	19db      	adds	r3, r3, r7
 800d178:	2208      	movs	r2, #8
 800d17a:	701a      	strb	r2, [r3, #0]
 800d17c:	e09f      	b.n	800d2be <UART_SetConfig+0x246>
 800d17e:	231b      	movs	r3, #27
 800d180:	2220      	movs	r2, #32
 800d182:	189b      	adds	r3, r3, r2
 800d184:	19db      	adds	r3, r3, r7
 800d186:	2210      	movs	r2, #16
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	e098      	b.n	800d2be <UART_SetConfig+0x246>
 800d18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a7b      	ldr	r2, [pc, #492]	@ (800d380 <UART_SetConfig+0x308>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d131      	bne.n	800d1fa <UART_SetConfig+0x182>
 800d196:	4b79      	ldr	r3, [pc, #484]	@ (800d37c <UART_SetConfig+0x304>)
 800d198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d19a:	220c      	movs	r2, #12
 800d19c:	4013      	ands	r3, r2
 800d19e:	2b0c      	cmp	r3, #12
 800d1a0:	d01d      	beq.n	800d1de <UART_SetConfig+0x166>
 800d1a2:	d823      	bhi.n	800d1ec <UART_SetConfig+0x174>
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	d00c      	beq.n	800d1c2 <UART_SetConfig+0x14a>
 800d1a8:	d820      	bhi.n	800d1ec <UART_SetConfig+0x174>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d002      	beq.n	800d1b4 <UART_SetConfig+0x13c>
 800d1ae:	2b04      	cmp	r3, #4
 800d1b0:	d00e      	beq.n	800d1d0 <UART_SetConfig+0x158>
 800d1b2:	e01b      	b.n	800d1ec <UART_SetConfig+0x174>
 800d1b4:	231b      	movs	r3, #27
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	189b      	adds	r3, r3, r2
 800d1ba:	19db      	adds	r3, r3, r7
 800d1bc:	2200      	movs	r2, #0
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	e07d      	b.n	800d2be <UART_SetConfig+0x246>
 800d1c2:	231b      	movs	r3, #27
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	19db      	adds	r3, r3, r7
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	701a      	strb	r2, [r3, #0]
 800d1ce:	e076      	b.n	800d2be <UART_SetConfig+0x246>
 800d1d0:	231b      	movs	r3, #27
 800d1d2:	2220      	movs	r2, #32
 800d1d4:	189b      	adds	r3, r3, r2
 800d1d6:	19db      	adds	r3, r3, r7
 800d1d8:	2204      	movs	r2, #4
 800d1da:	701a      	strb	r2, [r3, #0]
 800d1dc:	e06f      	b.n	800d2be <UART_SetConfig+0x246>
 800d1de:	231b      	movs	r3, #27
 800d1e0:	2220      	movs	r2, #32
 800d1e2:	189b      	adds	r3, r3, r2
 800d1e4:	19db      	adds	r3, r3, r7
 800d1e6:	2208      	movs	r2, #8
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	e068      	b.n	800d2be <UART_SetConfig+0x246>
 800d1ec:	231b      	movs	r3, #27
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	189b      	adds	r3, r3, r2
 800d1f2:	19db      	adds	r3, r3, r7
 800d1f4:	2210      	movs	r2, #16
 800d1f6:	701a      	strb	r2, [r3, #0]
 800d1f8:	e061      	b.n	800d2be <UART_SetConfig+0x246>
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a61      	ldr	r2, [pc, #388]	@ (800d384 <UART_SetConfig+0x30c>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d106      	bne.n	800d212 <UART_SetConfig+0x19a>
 800d204:	231b      	movs	r3, #27
 800d206:	2220      	movs	r2, #32
 800d208:	189b      	adds	r3, r3, r2
 800d20a:	19db      	adds	r3, r3, r7
 800d20c:	2200      	movs	r2, #0
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	e055      	b.n	800d2be <UART_SetConfig+0x246>
 800d212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a5c      	ldr	r2, [pc, #368]	@ (800d388 <UART_SetConfig+0x310>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d106      	bne.n	800d22a <UART_SetConfig+0x1b2>
 800d21c:	231b      	movs	r3, #27
 800d21e:	2220      	movs	r2, #32
 800d220:	189b      	adds	r3, r3, r2
 800d222:	19db      	adds	r3, r3, r7
 800d224:	2200      	movs	r2, #0
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	e049      	b.n	800d2be <UART_SetConfig+0x246>
 800d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a50      	ldr	r2, [pc, #320]	@ (800d370 <UART_SetConfig+0x2f8>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d13e      	bne.n	800d2b2 <UART_SetConfig+0x23a>
 800d234:	4b51      	ldr	r3, [pc, #324]	@ (800d37c <UART_SetConfig+0x304>)
 800d236:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d238:	23c0      	movs	r3, #192	@ 0xc0
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	4013      	ands	r3, r2
 800d23e:	22c0      	movs	r2, #192	@ 0xc0
 800d240:	0112      	lsls	r2, r2, #4
 800d242:	4293      	cmp	r3, r2
 800d244:	d027      	beq.n	800d296 <UART_SetConfig+0x21e>
 800d246:	22c0      	movs	r2, #192	@ 0xc0
 800d248:	0112      	lsls	r2, r2, #4
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d82a      	bhi.n	800d2a4 <UART_SetConfig+0x22c>
 800d24e:	2280      	movs	r2, #128	@ 0x80
 800d250:	0112      	lsls	r2, r2, #4
 800d252:	4293      	cmp	r3, r2
 800d254:	d011      	beq.n	800d27a <UART_SetConfig+0x202>
 800d256:	2280      	movs	r2, #128	@ 0x80
 800d258:	0112      	lsls	r2, r2, #4
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d822      	bhi.n	800d2a4 <UART_SetConfig+0x22c>
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d004      	beq.n	800d26c <UART_SetConfig+0x1f4>
 800d262:	2280      	movs	r2, #128	@ 0x80
 800d264:	00d2      	lsls	r2, r2, #3
 800d266:	4293      	cmp	r3, r2
 800d268:	d00e      	beq.n	800d288 <UART_SetConfig+0x210>
 800d26a:	e01b      	b.n	800d2a4 <UART_SetConfig+0x22c>
 800d26c:	231b      	movs	r3, #27
 800d26e:	2220      	movs	r2, #32
 800d270:	189b      	adds	r3, r3, r2
 800d272:	19db      	adds	r3, r3, r7
 800d274:	2200      	movs	r2, #0
 800d276:	701a      	strb	r2, [r3, #0]
 800d278:	e021      	b.n	800d2be <UART_SetConfig+0x246>
 800d27a:	231b      	movs	r3, #27
 800d27c:	2220      	movs	r2, #32
 800d27e:	189b      	adds	r3, r3, r2
 800d280:	19db      	adds	r3, r3, r7
 800d282:	2202      	movs	r2, #2
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e01a      	b.n	800d2be <UART_SetConfig+0x246>
 800d288:	231b      	movs	r3, #27
 800d28a:	2220      	movs	r2, #32
 800d28c:	189b      	adds	r3, r3, r2
 800d28e:	19db      	adds	r3, r3, r7
 800d290:	2204      	movs	r2, #4
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e013      	b.n	800d2be <UART_SetConfig+0x246>
 800d296:	231b      	movs	r3, #27
 800d298:	2220      	movs	r2, #32
 800d29a:	189b      	adds	r3, r3, r2
 800d29c:	19db      	adds	r3, r3, r7
 800d29e:	2208      	movs	r2, #8
 800d2a0:	701a      	strb	r2, [r3, #0]
 800d2a2:	e00c      	b.n	800d2be <UART_SetConfig+0x246>
 800d2a4:	231b      	movs	r3, #27
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	189b      	adds	r3, r3, r2
 800d2aa:	19db      	adds	r3, r3, r7
 800d2ac:	2210      	movs	r2, #16
 800d2ae:	701a      	strb	r2, [r3, #0]
 800d2b0:	e005      	b.n	800d2be <UART_SetConfig+0x246>
 800d2b2:	231b      	movs	r3, #27
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	189b      	adds	r3, r3, r2
 800d2b8:	19db      	adds	r3, r3, r7
 800d2ba:	2210      	movs	r2, #16
 800d2bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a2b      	ldr	r2, [pc, #172]	@ (800d370 <UART_SetConfig+0x2f8>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d000      	beq.n	800d2ca <UART_SetConfig+0x252>
 800d2c8:	e0a9      	b.n	800d41e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2ca:	231b      	movs	r3, #27
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	189b      	adds	r3, r3, r2
 800d2d0:	19db      	adds	r3, r3, r7
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b08      	cmp	r3, #8
 800d2d6:	d015      	beq.n	800d304 <UART_SetConfig+0x28c>
 800d2d8:	dc18      	bgt.n	800d30c <UART_SetConfig+0x294>
 800d2da:	2b04      	cmp	r3, #4
 800d2dc:	d00d      	beq.n	800d2fa <UART_SetConfig+0x282>
 800d2de:	dc15      	bgt.n	800d30c <UART_SetConfig+0x294>
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <UART_SetConfig+0x272>
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d005      	beq.n	800d2f4 <UART_SetConfig+0x27c>
 800d2e8:	e010      	b.n	800d30c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ea:	f7fd f99f 	bl	800a62c <HAL_RCC_GetPCLK1Freq>
 800d2ee:	0003      	movs	r3, r0
 800d2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f2:	e014      	b.n	800d31e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2f4:	4b25      	ldr	r3, [pc, #148]	@ (800d38c <UART_SetConfig+0x314>)
 800d2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f8:	e011      	b.n	800d31e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2fa:	f7fd f90b 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 800d2fe:	0003      	movs	r3, r0
 800d300:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d302:	e00c      	b.n	800d31e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d304:	2380      	movs	r3, #128	@ 0x80
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d30a:	e008      	b.n	800d31e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800d30c:	2300      	movs	r3, #0
 800d30e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d310:	231a      	movs	r3, #26
 800d312:	2220      	movs	r2, #32
 800d314:	189b      	adds	r3, r3, r2
 800d316:	19db      	adds	r3, r3, r7
 800d318:	2201      	movs	r2, #1
 800d31a:	701a      	strb	r2, [r3, #0]
        break;
 800d31c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d320:	2b00      	cmp	r3, #0
 800d322:	d100      	bne.n	800d326 <UART_SetConfig+0x2ae>
 800d324:	e14b      	b.n	800d5be <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d32a:	4b19      	ldr	r3, [pc, #100]	@ (800d390 <UART_SetConfig+0x318>)
 800d32c:	0052      	lsls	r2, r2, #1
 800d32e:	5ad3      	ldrh	r3, [r2, r3]
 800d330:	0019      	movs	r1, r3
 800d332:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d334:	f7f2 ff04 	bl	8000140 <__udivsi3>
 800d338:	0003      	movs	r3, r0
 800d33a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	0013      	movs	r3, r2
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	189b      	adds	r3, r3, r2
 800d346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d348:	429a      	cmp	r2, r3
 800d34a:	d305      	bcc.n	800d358 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d354:	429a      	cmp	r2, r3
 800d356:	d91d      	bls.n	800d394 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800d358:	231a      	movs	r3, #26
 800d35a:	2220      	movs	r2, #32
 800d35c:	189b      	adds	r3, r3, r2
 800d35e:	19db      	adds	r3, r3, r7
 800d360:	2201      	movs	r2, #1
 800d362:	701a      	strb	r2, [r3, #0]
 800d364:	e12b      	b.n	800d5be <UART_SetConfig+0x546>
 800d366:	46c0      	nop			@ (mov r8, r8)
 800d368:	cfff69f3 	.word	0xcfff69f3
 800d36c:	ffffcfff 	.word	0xffffcfff
 800d370:	40008000 	.word	0x40008000
 800d374:	11fff4ff 	.word	0x11fff4ff
 800d378:	40013800 	.word	0x40013800
 800d37c:	40021000 	.word	0x40021000
 800d380:	40004400 	.word	0x40004400
 800d384:	40004800 	.word	0x40004800
 800d388:	40004c00 	.word	0x40004c00
 800d38c:	00f42400 	.word	0x00f42400
 800d390:	08017270 	.word	0x08017270
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d396:	61bb      	str	r3, [r7, #24]
 800d398:	2300      	movs	r3, #0
 800d39a:	61fb      	str	r3, [r7, #28]
 800d39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3a0:	4b92      	ldr	r3, [pc, #584]	@ (800d5ec <UART_SetConfig+0x574>)
 800d3a2:	0052      	lsls	r2, r2, #1
 800d3a4:	5ad3      	ldrh	r3, [r2, r3]
 800d3a6:	613b      	str	r3, [r7, #16]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	617b      	str	r3, [r7, #20]
 800d3ac:	693a      	ldr	r2, [r7, #16]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	69b8      	ldr	r0, [r7, #24]
 800d3b2:	69f9      	ldr	r1, [r7, #28]
 800d3b4:	f7f3 f8b2 	bl	800051c <__aeabi_uldivmod>
 800d3b8:	0002      	movs	r2, r0
 800d3ba:	000b      	movs	r3, r1
 800d3bc:	0e11      	lsrs	r1, r2, #24
 800d3be:	021d      	lsls	r5, r3, #8
 800d3c0:	430d      	orrs	r5, r1
 800d3c2:	0214      	lsls	r4, r2, #8
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	085b      	lsrs	r3, r3, #1
 800d3ca:	60bb      	str	r3, [r7, #8]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	68b8      	ldr	r0, [r7, #8]
 800d3d2:	68f9      	ldr	r1, [r7, #12]
 800d3d4:	1900      	adds	r0, r0, r4
 800d3d6:	4169      	adcs	r1, r5
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	607b      	str	r3, [r7, #4]
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f7f3 f899 	bl	800051c <__aeabi_uldivmod>
 800d3ea:	0002      	movs	r2, r0
 800d3ec:	000b      	movs	r3, r1
 800d3ee:	0013      	movs	r3, r2
 800d3f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3f4:	23c0      	movs	r3, #192	@ 0xc0
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d309      	bcc.n	800d410 <UART_SetConfig+0x398>
 800d3fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3fe:	2380      	movs	r3, #128	@ 0x80
 800d400:	035b      	lsls	r3, r3, #13
 800d402:	429a      	cmp	r2, r3
 800d404:	d204      	bcs.n	800d410 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800d406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d40c:	60da      	str	r2, [r3, #12]
 800d40e:	e0d6      	b.n	800d5be <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800d410:	231a      	movs	r3, #26
 800d412:	2220      	movs	r2, #32
 800d414:	189b      	adds	r3, r3, r2
 800d416:	19db      	adds	r3, r3, r7
 800d418:	2201      	movs	r2, #1
 800d41a:	701a      	strb	r2, [r3, #0]
 800d41c:	e0cf      	b.n	800d5be <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d420:	69da      	ldr	r2, [r3, #28]
 800d422:	2380      	movs	r3, #128	@ 0x80
 800d424:	021b      	lsls	r3, r3, #8
 800d426:	429a      	cmp	r2, r3
 800d428:	d000      	beq.n	800d42c <UART_SetConfig+0x3b4>
 800d42a:	e070      	b.n	800d50e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800d42c:	231b      	movs	r3, #27
 800d42e:	2220      	movs	r2, #32
 800d430:	189b      	adds	r3, r3, r2
 800d432:	19db      	adds	r3, r3, r7
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b08      	cmp	r3, #8
 800d438:	d015      	beq.n	800d466 <UART_SetConfig+0x3ee>
 800d43a:	dc18      	bgt.n	800d46e <UART_SetConfig+0x3f6>
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d00d      	beq.n	800d45c <UART_SetConfig+0x3e4>
 800d440:	dc15      	bgt.n	800d46e <UART_SetConfig+0x3f6>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d002      	beq.n	800d44c <UART_SetConfig+0x3d4>
 800d446:	2b02      	cmp	r3, #2
 800d448:	d005      	beq.n	800d456 <UART_SetConfig+0x3de>
 800d44a:	e010      	b.n	800d46e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d44c:	f7fd f8ee 	bl	800a62c <HAL_RCC_GetPCLK1Freq>
 800d450:	0003      	movs	r3, r0
 800d452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d454:	e014      	b.n	800d480 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d456:	4b66      	ldr	r3, [pc, #408]	@ (800d5f0 <UART_SetConfig+0x578>)
 800d458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d45a:	e011      	b.n	800d480 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d45c:	f7fd f85a 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 800d460:	0003      	movs	r3, r0
 800d462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d464:	e00c      	b.n	800d480 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d466:	2380      	movs	r3, #128	@ 0x80
 800d468:	021b      	lsls	r3, r3, #8
 800d46a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d46c:	e008      	b.n	800d480 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d472:	231a      	movs	r3, #26
 800d474:	2220      	movs	r2, #32
 800d476:	189b      	adds	r3, r3, r2
 800d478:	19db      	adds	r3, r3, r7
 800d47a:	2201      	movs	r2, #1
 800d47c:	701a      	strb	r2, [r3, #0]
        break;
 800d47e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d482:	2b00      	cmp	r3, #0
 800d484:	d100      	bne.n	800d488 <UART_SetConfig+0x410>
 800d486:	e09a      	b.n	800d5be <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d48c:	4b57      	ldr	r3, [pc, #348]	@ (800d5ec <UART_SetConfig+0x574>)
 800d48e:	0052      	lsls	r2, r2, #1
 800d490:	5ad3      	ldrh	r3, [r2, r3]
 800d492:	0019      	movs	r1, r3
 800d494:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d496:	f7f2 fe53 	bl	8000140 <__udivsi3>
 800d49a:	0003      	movs	r3, r0
 800d49c:	005a      	lsls	r2, r3, #1
 800d49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	085b      	lsrs	r3, r3, #1
 800d4a4:	18d2      	adds	r2, r2, r3
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	0019      	movs	r1, r3
 800d4ac:	0010      	movs	r0, r2
 800d4ae:	f7f2 fe47 	bl	8000140 <__udivsi3>
 800d4b2:	0003      	movs	r3, r0
 800d4b4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b8:	2b0f      	cmp	r3, #15
 800d4ba:	d921      	bls.n	800d500 <UART_SetConfig+0x488>
 800d4bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4be:	2380      	movs	r3, #128	@ 0x80
 800d4c0:	025b      	lsls	r3, r3, #9
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d21c      	bcs.n	800d500 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	200e      	movs	r0, #14
 800d4cc:	2420      	movs	r4, #32
 800d4ce:	1903      	adds	r3, r0, r4
 800d4d0:	19db      	adds	r3, r3, r7
 800d4d2:	210f      	movs	r1, #15
 800d4d4:	438a      	bics	r2, r1
 800d4d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	085b      	lsrs	r3, r3, #1
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	2207      	movs	r2, #7
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	b299      	uxth	r1, r3
 800d4e4:	1903      	adds	r3, r0, r4
 800d4e6:	19db      	adds	r3, r3, r7
 800d4e8:	1902      	adds	r2, r0, r4
 800d4ea:	19d2      	adds	r2, r2, r7
 800d4ec:	8812      	ldrh	r2, [r2, #0]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	1902      	adds	r2, r0, r4
 800d4f8:	19d2      	adds	r2, r2, r7
 800d4fa:	8812      	ldrh	r2, [r2, #0]
 800d4fc:	60da      	str	r2, [r3, #12]
 800d4fe:	e05e      	b.n	800d5be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800d500:	231a      	movs	r3, #26
 800d502:	2220      	movs	r2, #32
 800d504:	189b      	adds	r3, r3, r2
 800d506:	19db      	adds	r3, r3, r7
 800d508:	2201      	movs	r2, #1
 800d50a:	701a      	strb	r2, [r3, #0]
 800d50c:	e057      	b.n	800d5be <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d50e:	231b      	movs	r3, #27
 800d510:	2220      	movs	r2, #32
 800d512:	189b      	adds	r3, r3, r2
 800d514:	19db      	adds	r3, r3, r7
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b08      	cmp	r3, #8
 800d51a:	d015      	beq.n	800d548 <UART_SetConfig+0x4d0>
 800d51c:	dc18      	bgt.n	800d550 <UART_SetConfig+0x4d8>
 800d51e:	2b04      	cmp	r3, #4
 800d520:	d00d      	beq.n	800d53e <UART_SetConfig+0x4c6>
 800d522:	dc15      	bgt.n	800d550 <UART_SetConfig+0x4d8>
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <UART_SetConfig+0x4b6>
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d005      	beq.n	800d538 <UART_SetConfig+0x4c0>
 800d52c:	e010      	b.n	800d550 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d52e:	f7fd f87d 	bl	800a62c <HAL_RCC_GetPCLK1Freq>
 800d532:	0003      	movs	r3, r0
 800d534:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d536:	e014      	b.n	800d562 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d538:	4b2d      	ldr	r3, [pc, #180]	@ (800d5f0 <UART_SetConfig+0x578>)
 800d53a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d53c:	e011      	b.n	800d562 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d53e:	f7fc ffe9 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 800d542:	0003      	movs	r3, r0
 800d544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d546:	e00c      	b.n	800d562 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d548:	2380      	movs	r3, #128	@ 0x80
 800d54a:	021b      	lsls	r3, r3, #8
 800d54c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d54e:	e008      	b.n	800d562 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800d550:	2300      	movs	r3, #0
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d554:	231a      	movs	r3, #26
 800d556:	2220      	movs	r2, #32
 800d558:	189b      	adds	r3, r3, r2
 800d55a:	19db      	adds	r3, r3, r7
 800d55c:	2201      	movs	r2, #1
 800d55e:	701a      	strb	r2, [r3, #0]
        break;
 800d560:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d564:	2b00      	cmp	r3, #0
 800d566:	d02a      	beq.n	800d5be <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d56c:	4b1f      	ldr	r3, [pc, #124]	@ (800d5ec <UART_SetConfig+0x574>)
 800d56e:	0052      	lsls	r2, r2, #1
 800d570:	5ad3      	ldrh	r3, [r2, r3]
 800d572:	0019      	movs	r1, r3
 800d574:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d576:	f7f2 fde3 	bl	8000140 <__udivsi3>
 800d57a:	0003      	movs	r3, r0
 800d57c:	001a      	movs	r2, r3
 800d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	085b      	lsrs	r3, r3, #1
 800d584:	18d2      	adds	r2, r2, r3
 800d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	0019      	movs	r1, r3
 800d58c:	0010      	movs	r0, r2
 800d58e:	f7f2 fdd7 	bl	8000140 <__udivsi3>
 800d592:	0003      	movs	r3, r0
 800d594:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	2b0f      	cmp	r3, #15
 800d59a:	d90a      	bls.n	800d5b2 <UART_SetConfig+0x53a>
 800d59c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d59e:	2380      	movs	r3, #128	@ 0x80
 800d5a0:	025b      	lsls	r3, r3, #9
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d205      	bcs.n	800d5b2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	60da      	str	r2, [r3, #12]
 800d5b0:	e005      	b.n	800d5be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800d5b2:	231a      	movs	r3, #26
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	189b      	adds	r3, r3, r2
 800d5b8:	19db      	adds	r3, r3, r7
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c0:	226a      	movs	r2, #106	@ 0x6a
 800d5c2:	2101      	movs	r1, #1
 800d5c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	2268      	movs	r2, #104	@ 0x68
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d5da:	231a      	movs	r3, #26
 800d5dc:	2220      	movs	r2, #32
 800d5de:	189b      	adds	r3, r3, r2
 800d5e0:	19db      	adds	r3, r3, r7
 800d5e2:	781b      	ldrb	r3, [r3, #0]
}
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	b010      	add	sp, #64	@ 0x40
 800d5ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ec:	08017270 	.word	0x08017270
 800d5f0:	00f42400 	.word	0x00f42400

0800d5f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d600:	2208      	movs	r2, #8
 800d602:	4013      	ands	r3, r2
 800d604:	d00b      	beq.n	800d61e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	4a4a      	ldr	r2, [pc, #296]	@ (800d738 <UART_AdvFeatureConfig+0x144>)
 800d60e:	4013      	ands	r3, r2
 800d610:	0019      	movs	r1, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	430a      	orrs	r2, r1
 800d61c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d622:	2201      	movs	r2, #1
 800d624:	4013      	ands	r3, r2
 800d626:	d00b      	beq.n	800d640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	4a43      	ldr	r2, [pc, #268]	@ (800d73c <UART_AdvFeatureConfig+0x148>)
 800d630:	4013      	ands	r3, r2
 800d632:	0019      	movs	r1, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	430a      	orrs	r2, r1
 800d63e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d644:	2202      	movs	r2, #2
 800d646:	4013      	ands	r3, r2
 800d648:	d00b      	beq.n	800d662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	4a3b      	ldr	r2, [pc, #236]	@ (800d740 <UART_AdvFeatureConfig+0x14c>)
 800d652:	4013      	ands	r3, r2
 800d654:	0019      	movs	r1, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	430a      	orrs	r2, r1
 800d660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d666:	2204      	movs	r2, #4
 800d668:	4013      	ands	r3, r2
 800d66a:	d00b      	beq.n	800d684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	4a34      	ldr	r2, [pc, #208]	@ (800d744 <UART_AdvFeatureConfig+0x150>)
 800d674:	4013      	ands	r3, r2
 800d676:	0019      	movs	r1, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	430a      	orrs	r2, r1
 800d682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d688:	2210      	movs	r2, #16
 800d68a:	4013      	ands	r3, r2
 800d68c:	d00b      	beq.n	800d6a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	4a2c      	ldr	r2, [pc, #176]	@ (800d748 <UART_AdvFeatureConfig+0x154>)
 800d696:	4013      	ands	r3, r2
 800d698:	0019      	movs	r1, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6aa:	2220      	movs	r2, #32
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	d00b      	beq.n	800d6c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	4a25      	ldr	r2, [pc, #148]	@ (800d74c <UART_AdvFeatureConfig+0x158>)
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	0019      	movs	r1, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6cc:	2240      	movs	r2, #64	@ 0x40
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	d01d      	beq.n	800d70e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d750 <UART_AdvFeatureConfig+0x15c>)
 800d6da:	4013      	ands	r3, r2
 800d6dc:	0019      	movs	r1, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6ee:	2380      	movs	r3, #128	@ 0x80
 800d6f0:	035b      	lsls	r3, r3, #13
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d10b      	bne.n	800d70e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	4a15      	ldr	r2, [pc, #84]	@ (800d754 <UART_AdvFeatureConfig+0x160>)
 800d6fe:	4013      	ands	r3, r2
 800d700:	0019      	movs	r1, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d712:	2280      	movs	r2, #128	@ 0x80
 800d714:	4013      	ands	r3, r2
 800d716:	d00b      	beq.n	800d730 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	4a0e      	ldr	r2, [pc, #56]	@ (800d758 <UART_AdvFeatureConfig+0x164>)
 800d720:	4013      	ands	r3, r2
 800d722:	0019      	movs	r1, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	430a      	orrs	r2, r1
 800d72e:	605a      	str	r2, [r3, #4]
  }
}
 800d730:	46c0      	nop			@ (mov r8, r8)
 800d732:	46bd      	mov	sp, r7
 800d734:	b002      	add	sp, #8
 800d736:	bd80      	pop	{r7, pc}
 800d738:	ffff7fff 	.word	0xffff7fff
 800d73c:	fffdffff 	.word	0xfffdffff
 800d740:	fffeffff 	.word	0xfffeffff
 800d744:	fffbffff 	.word	0xfffbffff
 800d748:	ffffefff 	.word	0xffffefff
 800d74c:	ffffdfff 	.word	0xffffdfff
 800d750:	ffefffff 	.word	0xffefffff
 800d754:	ff9fffff 	.word	0xff9fffff
 800d758:	fff7ffff 	.word	0xfff7ffff

0800d75c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b092      	sub	sp, #72	@ 0x48
 800d760:	af02      	add	r7, sp, #8
 800d762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2290      	movs	r2, #144	@ 0x90
 800d768:	2100      	movs	r1, #0
 800d76a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d76c:	f7fa faa6 	bl	8007cbc <HAL_GetTick>
 800d770:	0003      	movs	r3, r0
 800d772:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2208      	movs	r2, #8
 800d77c:	4013      	ands	r3, r2
 800d77e:	2b08      	cmp	r3, #8
 800d780:	d12d      	bne.n	800d7de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d784:	2280      	movs	r2, #128	@ 0x80
 800d786:	0391      	lsls	r1, r2, #14
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	4a47      	ldr	r2, [pc, #284]	@ (800d8a8 <UART_CheckIdleState+0x14c>)
 800d78c:	9200      	str	r2, [sp, #0]
 800d78e:	2200      	movs	r2, #0
 800d790:	f000 f88e 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800d794:	1e03      	subs	r3, r0, #0
 800d796:	d022      	beq.n	800d7de <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d798:	f3ef 8310 	mrs	r3, PRIMASK
 800d79c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a8:	f383 8810 	msr	PRIMASK, r3
}
 800d7ac:	46c0      	nop			@ (mov r8, r8)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2180      	movs	r1, #128	@ 0x80
 800d7ba:	438a      	bics	r2, r1
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c4:	f383 8810 	msr	PRIMASK, r3
}
 800d7c8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2288      	movs	r2, #136	@ 0x88
 800d7ce:	2120      	movs	r1, #32
 800d7d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2284      	movs	r2, #132	@ 0x84
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7da:	2303      	movs	r3, #3
 800d7dc:	e060      	b.n	800d8a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2204      	movs	r2, #4
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	2b04      	cmp	r3, #4
 800d7ea:	d146      	bne.n	800d87a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ee:	2280      	movs	r2, #128	@ 0x80
 800d7f0:	03d1      	lsls	r1, r2, #15
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	4a2c      	ldr	r2, [pc, #176]	@ (800d8a8 <UART_CheckIdleState+0x14c>)
 800d7f6:	9200      	str	r2, [sp, #0]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f000 f859 	bl	800d8b0 <UART_WaitOnFlagUntilTimeout>
 800d7fe:	1e03      	subs	r3, r0, #0
 800d800:	d03b      	beq.n	800d87a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d802:	f3ef 8310 	mrs	r3, PRIMASK
 800d806:	60fb      	str	r3, [r7, #12]
  return(result);
 800d808:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d80a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d80c:	2301      	movs	r3, #1
 800d80e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f383 8810 	msr	PRIMASK, r3
}
 800d816:	46c0      	nop			@ (mov r8, r8)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4922      	ldr	r1, [pc, #136]	@ (800d8ac <UART_CheckIdleState+0x150>)
 800d824:	400a      	ands	r2, r1
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	f383 8810 	msr	PRIMASK, r3
}
 800d832:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d834:	f3ef 8310 	mrs	r3, PRIMASK
 800d838:	61bb      	str	r3, [r7, #24]
  return(result);
 800d83a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d83c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d83e:	2301      	movs	r3, #1
 800d840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	f383 8810 	msr	PRIMASK, r3
}
 800d848:	46c0      	nop			@ (mov r8, r8)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2101      	movs	r1, #1
 800d856:	438a      	bics	r2, r1
 800d858:	609a      	str	r2, [r3, #8]
 800d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	f383 8810 	msr	PRIMASK, r3
}
 800d864:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	228c      	movs	r2, #140	@ 0x8c
 800d86a:	2120      	movs	r1, #32
 800d86c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2284      	movs	r2, #132	@ 0x84
 800d872:	2100      	movs	r1, #0
 800d874:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d876:	2303      	movs	r3, #3
 800d878:	e012      	b.n	800d8a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2288      	movs	r2, #136	@ 0x88
 800d87e:	2120      	movs	r1, #32
 800d880:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	228c      	movs	r2, #140	@ 0x8c
 800d886:	2120      	movs	r1, #32
 800d888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2284      	movs	r2, #132	@ 0x84
 800d89a:	2100      	movs	r1, #0
 800d89c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	0018      	movs	r0, r3
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	b010      	add	sp, #64	@ 0x40
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	01ffffff 	.word	0x01ffffff
 800d8ac:	fffffedf 	.word	0xfffffedf

0800d8b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	1dfb      	adds	r3, r7, #7
 800d8be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8c0:	e051      	b.n	800d966 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	d04e      	beq.n	800d966 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8c8:	f7fa f9f8 	bl	8007cbc <HAL_GetTick>
 800d8cc:	0002      	movs	r2, r0
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d302      	bcc.n	800d8de <UART_WaitOnFlagUntilTimeout+0x2e>
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e051      	b.n	800d986 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2204      	movs	r2, #4
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	d03b      	beq.n	800d966 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	2b80      	cmp	r3, #128	@ 0x80
 800d8f2:	d038      	beq.n	800d966 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b40      	cmp	r3, #64	@ 0x40
 800d8f8:	d035      	beq.n	800d966 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	2208      	movs	r2, #8
 800d902:	4013      	ands	r3, r2
 800d904:	2b08      	cmp	r3, #8
 800d906:	d111      	bne.n	800d92c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2208      	movs	r2, #8
 800d90e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	0018      	movs	r0, r3
 800d914:	f000 f960 	bl	800dbd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2290      	movs	r2, #144	@ 0x90
 800d91c:	2108      	movs	r1, #8
 800d91e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2284      	movs	r2, #132	@ 0x84
 800d924:	2100      	movs	r1, #0
 800d926:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e02c      	b.n	800d986 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	69da      	ldr	r2, [r3, #28]
 800d932:	2380      	movs	r3, #128	@ 0x80
 800d934:	011b      	lsls	r3, r3, #4
 800d936:	401a      	ands	r2, r3
 800d938:	2380      	movs	r3, #128	@ 0x80
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d112      	bne.n	800d966 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2280      	movs	r2, #128	@ 0x80
 800d946:	0112      	lsls	r2, r2, #4
 800d948:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	0018      	movs	r0, r3
 800d94e:	f000 f943 	bl	800dbd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2290      	movs	r2, #144	@ 0x90
 800d956:	2120      	movs	r1, #32
 800d958:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2284      	movs	r2, #132	@ 0x84
 800d95e:	2100      	movs	r1, #0
 800d960:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d962:	2303      	movs	r3, #3
 800d964:	e00f      	b.n	800d986 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	4013      	ands	r3, r2
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	425a      	negs	r2, r3
 800d976:	4153      	adcs	r3, r2
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	001a      	movs	r2, r3
 800d97c:	1dfb      	adds	r3, r7, #7
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d09e      	beq.n	800d8c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	0018      	movs	r0, r3
 800d988:	46bd      	mov	sp, r7
 800d98a:	b004      	add	sp, #16
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b098      	sub	sp, #96	@ 0x60
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	1dbb      	adds	r3, r7, #6
 800d99c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	1dba      	adds	r2, r7, #6
 800d9a8:	215c      	movs	r1, #92	@ 0x5c
 800d9aa:	8812      	ldrh	r2, [r2, #0]
 800d9ac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1dba      	adds	r2, r7, #6
 800d9b2:	215e      	movs	r1, #94	@ 0x5e
 800d9b4:	8812      	ldrh	r2, [r2, #0]
 800d9b6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689a      	ldr	r2, [r3, #8]
 800d9c2:	2380      	movs	r3, #128	@ 0x80
 800d9c4:	015b      	lsls	r3, r3, #5
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d10d      	bne.n	800d9e6 <UART_Start_Receive_IT+0x56>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d104      	bne.n	800d9dc <UART_Start_Receive_IT+0x4c>
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2260      	movs	r2, #96	@ 0x60
 800d9d6:	497b      	ldr	r1, [pc, #492]	@ (800dbc4 <UART_Start_Receive_IT+0x234>)
 800d9d8:	5299      	strh	r1, [r3, r2]
 800d9da:	e02e      	b.n	800da3a <UART_Start_Receive_IT+0xaa>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2260      	movs	r2, #96	@ 0x60
 800d9e0:	21ff      	movs	r1, #255	@ 0xff
 800d9e2:	5299      	strh	r1, [r3, r2]
 800d9e4:	e029      	b.n	800da3a <UART_Start_Receive_IT+0xaa>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <UART_Start_Receive_IT+0x7a>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d104      	bne.n	800da00 <UART_Start_Receive_IT+0x70>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2260      	movs	r2, #96	@ 0x60
 800d9fa:	21ff      	movs	r1, #255	@ 0xff
 800d9fc:	5299      	strh	r1, [r3, r2]
 800d9fe:	e01c      	b.n	800da3a <UART_Start_Receive_IT+0xaa>
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2260      	movs	r2, #96	@ 0x60
 800da04:	217f      	movs	r1, #127	@ 0x7f
 800da06:	5299      	strh	r1, [r3, r2]
 800da08:	e017      	b.n	800da3a <UART_Start_Receive_IT+0xaa>
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	689a      	ldr	r2, [r3, #8]
 800da0e:	2380      	movs	r3, #128	@ 0x80
 800da10:	055b      	lsls	r3, r3, #21
 800da12:	429a      	cmp	r2, r3
 800da14:	d10d      	bne.n	800da32 <UART_Start_Receive_IT+0xa2>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d104      	bne.n	800da28 <UART_Start_Receive_IT+0x98>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2260      	movs	r2, #96	@ 0x60
 800da22:	217f      	movs	r1, #127	@ 0x7f
 800da24:	5299      	strh	r1, [r3, r2]
 800da26:	e008      	b.n	800da3a <UART_Start_Receive_IT+0xaa>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2260      	movs	r2, #96	@ 0x60
 800da2c:	213f      	movs	r1, #63	@ 0x3f
 800da2e:	5299      	strh	r1, [r3, r2]
 800da30:	e003      	b.n	800da3a <UART_Start_Receive_IT+0xaa>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2260      	movs	r2, #96	@ 0x60
 800da36:	2100      	movs	r1, #0
 800da38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2290      	movs	r2, #144	@ 0x90
 800da3e:	2100      	movs	r1, #0
 800da40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	228c      	movs	r2, #140	@ 0x8c
 800da46:	2122      	movs	r1, #34	@ 0x22
 800da48:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da4a:	f3ef 8310 	mrs	r3, PRIMASK
 800da4e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800da50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da54:	2301      	movs	r3, #1
 800da56:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da5a:	f383 8810 	msr	PRIMASK, r3
}
 800da5e:	46c0      	nop			@ (mov r8, r8)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2101      	movs	r1, #1
 800da6c:	430a      	orrs	r2, r1
 800da6e:	609a      	str	r2, [r3, #8]
 800da70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da72:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da76:	f383 8810 	msr	PRIMASK, r3
}
 800da7a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800da80:	2380      	movs	r3, #128	@ 0x80
 800da82:	059b      	lsls	r3, r3, #22
 800da84:	429a      	cmp	r2, r3
 800da86:	d150      	bne.n	800db2a <UART_Start_Receive_IT+0x19a>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2268      	movs	r2, #104	@ 0x68
 800da8c:	5a9b      	ldrh	r3, [r3, r2]
 800da8e:	1dba      	adds	r2, r7, #6
 800da90:	8812      	ldrh	r2, [r2, #0]
 800da92:	429a      	cmp	r2, r3
 800da94:	d349      	bcc.n	800db2a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	689a      	ldr	r2, [r3, #8]
 800da9a:	2380      	movs	r3, #128	@ 0x80
 800da9c:	015b      	lsls	r3, r3, #5
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d107      	bne.n	800dab2 <UART_Start_Receive_IT+0x122>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d103      	bne.n	800dab2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4a46      	ldr	r2, [pc, #280]	@ (800dbc8 <UART_Start_Receive_IT+0x238>)
 800daae:	675a      	str	r2, [r3, #116]	@ 0x74
 800dab0:	e002      	b.n	800dab8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	4a45      	ldr	r2, [pc, #276]	@ (800dbcc <UART_Start_Receive_IT+0x23c>)
 800dab6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d019      	beq.n	800daf4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac0:	f3ef 8310 	mrs	r3, PRIMASK
 800dac4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800dac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800daca:	2301      	movs	r3, #1
 800dacc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad0:	f383 8810 	msr	PRIMASK, r3
}
 800dad4:	46c0      	nop			@ (mov r8, r8)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2180      	movs	r1, #128	@ 0x80
 800dae2:	0049      	lsls	r1, r1, #1
 800dae4:	430a      	orrs	r2, r1
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800daea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daee:	f383 8810 	msr	PRIMASK, r3
}
 800daf2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daf4:	f3ef 8310 	mrs	r3, PRIMASK
 800daf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800dafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dafc:	657b      	str	r3, [r7, #84]	@ 0x54
 800dafe:	2301      	movs	r3, #1
 800db00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db04:	f383 8810 	msr	PRIMASK, r3
}
 800db08:	46c0      	nop			@ (mov r8, r8)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	689a      	ldr	r2, [r3, #8]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2180      	movs	r1, #128	@ 0x80
 800db16:	0549      	lsls	r1, r1, #21
 800db18:	430a      	orrs	r2, r1
 800db1a:	609a      	str	r2, [r3, #8]
 800db1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	f383 8810 	msr	PRIMASK, r3
}
 800db26:	46c0      	nop			@ (mov r8, r8)
 800db28:	e047      	b.n	800dbba <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	689a      	ldr	r2, [r3, #8]
 800db2e:	2380      	movs	r3, #128	@ 0x80
 800db30:	015b      	lsls	r3, r3, #5
 800db32:	429a      	cmp	r2, r3
 800db34:	d107      	bne.n	800db46 <UART_Start_Receive_IT+0x1b6>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	4a23      	ldr	r2, [pc, #140]	@ (800dbd0 <UART_Start_Receive_IT+0x240>)
 800db42:	675a      	str	r2, [r3, #116]	@ 0x74
 800db44:	e002      	b.n	800db4c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	4a22      	ldr	r2, [pc, #136]	@ (800dbd4 <UART_Start_Receive_IT+0x244>)
 800db4a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d019      	beq.n	800db88 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db54:	f3ef 8310 	mrs	r3, PRIMASK
 800db58:	61fb      	str	r3, [r7, #28]
  return(result);
 800db5a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800db5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db5e:	2301      	movs	r3, #1
 800db60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db62:	6a3b      	ldr	r3, [r7, #32]
 800db64:	f383 8810 	msr	PRIMASK, r3
}
 800db68:	46c0      	nop			@ (mov r8, r8)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2190      	movs	r1, #144	@ 0x90
 800db76:	0049      	lsls	r1, r1, #1
 800db78:	430a      	orrs	r2, r1
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db82:	f383 8810 	msr	PRIMASK, r3
}
 800db86:	e018      	b.n	800dbba <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db88:	f3ef 8310 	mrs	r3, PRIMASK
 800db8c:	613b      	str	r3, [r7, #16]
  return(result);
 800db8e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db90:	653b      	str	r3, [r7, #80]	@ 0x50
 800db92:	2301      	movs	r3, #1
 800db94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f383 8810 	msr	PRIMASK, r3
}
 800db9c:	46c0      	nop			@ (mov r8, r8)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2120      	movs	r1, #32
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	f383 8810 	msr	PRIMASK, r3
}
 800dbb8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	b018      	add	sp, #96	@ 0x60
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	000001ff 	.word	0x000001ff
 800dbc8:	0800e745 	.word	0x0800e745
 800dbcc:	0800e405 	.word	0x0800e405
 800dbd0:	0800e241 	.word	0x0800e241
 800dbd4:	0800e07d 	.word	0x0800e07d

0800dbd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08e      	sub	sp, #56	@ 0x38
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbe0:	f3ef 8310 	mrs	r3, PRIMASK
 800dbe4:	617b      	str	r3, [r7, #20]
  return(result);
 800dbe6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbea:	2301      	movs	r3, #1
 800dbec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	f383 8810 	msr	PRIMASK, r3
}
 800dbf4:	46c0      	nop			@ (mov r8, r8)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4926      	ldr	r1, [pc, #152]	@ (800dc9c <UART_EndRxTransfer+0xc4>)
 800dc02:	400a      	ands	r2, r1
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	f383 8810 	msr	PRIMASK, r3
}
 800dc10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc12:	f3ef 8310 	mrs	r3, PRIMASK
 800dc16:	623b      	str	r3, [r7, #32]
  return(result);
 800dc18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	f383 8810 	msr	PRIMASK, r3
}
 800dc26:	46c0      	nop			@ (mov r8, r8)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	689a      	ldr	r2, [r3, #8]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	491b      	ldr	r1, [pc, #108]	@ (800dca0 <UART_EndRxTransfer+0xc8>)
 800dc34:	400a      	ands	r2, r1
 800dc36:	609a      	str	r2, [r3, #8]
 800dc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3e:	f383 8810 	msr	PRIMASK, r3
}
 800dc42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d118      	bne.n	800dc7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc50:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc56:	2301      	movs	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f383 8810 	msr	PRIMASK, r3
}
 800dc60:	46c0      	nop			@ (mov r8, r8)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2110      	movs	r1, #16
 800dc6e:	438a      	bics	r2, r1
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f383 8810 	msr	PRIMASK, r3
}
 800dc7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	228c      	movs	r2, #140	@ 0x8c
 800dc82:	2120      	movs	r1, #32
 800dc84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc92:	46c0      	nop			@ (mov r8, r8)
 800dc94:	46bd      	mov	sp, r7
 800dc96:	b00e      	add	sp, #56	@ 0x38
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	46c0      	nop			@ (mov r8, r8)
 800dc9c:	fffffedf 	.word	0xfffffedf
 800dca0:	effffffe 	.word	0xeffffffe

0800dca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	225e      	movs	r2, #94	@ 0x5e
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2256      	movs	r2, #86	@ 0x56
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	f7ff f9c3 	bl	800d050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcca:	46c0      	nop			@ (mov r8, r8)
 800dccc:	46bd      	mov	sp, r7
 800dcce:	b004      	add	sp, #16
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b08a      	sub	sp, #40	@ 0x28
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2288      	movs	r2, #136	@ 0x88
 800dcde:	589b      	ldr	r3, [r3, r2]
 800dce0:	2b21      	cmp	r3, #33	@ 0x21
 800dce2:	d14c      	bne.n	800dd7e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2256      	movs	r2, #86	@ 0x56
 800dce8:	5a9b      	ldrh	r3, [r3, r2]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d132      	bne.n	800dd56 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcf0:	f3ef 8310 	mrs	r3, PRIMASK
 800dcf4:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcf6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dcf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f383 8810 	msr	PRIMASK, r3
}
 800dd04:	46c0      	nop			@ (mov r8, r8)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2180      	movs	r1, #128	@ 0x80
 800dd12:	438a      	bics	r2, r1
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	f383 8810 	msr	PRIMASK, r3
}
 800dd20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd22:	f3ef 8310 	mrs	r3, PRIMASK
 800dd26:	617b      	str	r3, [r7, #20]
  return(result);
 800dd28:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd2a:	623b      	str	r3, [r7, #32]
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	f383 8810 	msr	PRIMASK, r3
}
 800dd36:	46c0      	nop			@ (mov r8, r8)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2140      	movs	r1, #64	@ 0x40
 800dd44:	430a      	orrs	r2, r1
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	f383 8810 	msr	PRIMASK, r3
}
 800dd52:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dd54:	e013      	b.n	800dd7e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd5a:	781a      	ldrb	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd66:	1c5a      	adds	r2, r3, #1
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2256      	movs	r2, #86	@ 0x56
 800dd70:	5a9b      	ldrh	r3, [r3, r2]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	3b01      	subs	r3, #1
 800dd76:	b299      	uxth	r1, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2256      	movs	r2, #86	@ 0x56
 800dd7c:	5299      	strh	r1, [r3, r2]
}
 800dd7e:	46c0      	nop			@ (mov r8, r8)
 800dd80:	46bd      	mov	sp, r7
 800dd82:	b00a      	add	sp, #40	@ 0x28
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b08c      	sub	sp, #48	@ 0x30
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2288      	movs	r2, #136	@ 0x88
 800dd92:	589b      	ldr	r3, [r3, r2]
 800dd94:	2b21      	cmp	r3, #33	@ 0x21
 800dd96:	d151      	bne.n	800de3c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2256      	movs	r2, #86	@ 0x56
 800dd9c:	5a9b      	ldrh	r3, [r3, r2]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d132      	bne.n	800de0a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dda4:	f3ef 8310 	mrs	r3, PRIMASK
 800dda8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ddac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddae:	2301      	movs	r3, #1
 800ddb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	f383 8810 	msr	PRIMASK, r3
}
 800ddb8:	46c0      	nop			@ (mov r8, r8)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2180      	movs	r1, #128	@ 0x80
 800ddc6:	438a      	bics	r2, r1
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f383 8810 	msr	PRIMASK, r3
}
 800ddd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddd6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddda:	61bb      	str	r3, [r7, #24]
  return(result);
 800dddc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
 800dde0:	2301      	movs	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f383 8810 	msr	PRIMASK, r3
}
 800ddea:	46c0      	nop			@ (mov r8, r8)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2140      	movs	r1, #64	@ 0x40
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	f383 8810 	msr	PRIMASK, r3
}
 800de06:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800de08:	e018      	b.n	800de3c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800de10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	001a      	movs	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	05d2      	lsls	r2, r2, #23
 800de1c:	0dd2      	lsrs	r2, r2, #23
 800de1e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de24:	1c9a      	adds	r2, r3, #2
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2256      	movs	r2, #86	@ 0x56
 800de2e:	5a9b      	ldrh	r3, [r3, r2]
 800de30:	b29b      	uxth	r3, r3
 800de32:	3b01      	subs	r3, #1
 800de34:	b299      	uxth	r1, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2256      	movs	r2, #86	@ 0x56
 800de3a:	5299      	strh	r1, [r3, r2]
}
 800de3c:	46c0      	nop			@ (mov r8, r8)
 800de3e:	46bd      	mov	sp, r7
 800de40:	b00c      	add	sp, #48	@ 0x30
 800de42:	bd80      	pop	{r7, pc}

0800de44 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08c      	sub	sp, #48	@ 0x30
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2288      	movs	r2, #136	@ 0x88
 800de50:	589b      	ldr	r3, [r3, r2]
 800de52:	2b21      	cmp	r3, #33	@ 0x21
 800de54:	d165      	bne.n	800df22 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800de56:	232e      	movs	r3, #46	@ 0x2e
 800de58:	18fb      	adds	r3, r7, r3
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	216a      	movs	r1, #106	@ 0x6a
 800de5e:	5a52      	ldrh	r2, [r2, r1]
 800de60:	801a      	strh	r2, [r3, #0]
 800de62:	e059      	b.n	800df18 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2256      	movs	r2, #86	@ 0x56
 800de68:	5a9b      	ldrh	r3, [r3, r2]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d133      	bne.n	800ded8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de70:	f3ef 8310 	mrs	r3, PRIMASK
 800de74:	60fb      	str	r3, [r7, #12]
  return(result);
 800de76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800de78:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de7a:	2301      	movs	r3, #1
 800de7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f383 8810 	msr	PRIMASK, r3
}
 800de84:	46c0      	nop			@ (mov r8, r8)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	689a      	ldr	r2, [r3, #8]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4926      	ldr	r1, [pc, #152]	@ (800df2c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800de92:	400a      	ands	r2, r1
 800de94:	609a      	str	r2, [r3, #8]
 800de96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	f383 8810 	msr	PRIMASK, r3
}
 800dea0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dea2:	f3ef 8310 	mrs	r3, PRIMASK
 800dea6:	61bb      	str	r3, [r7, #24]
  return(result);
 800dea8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800deaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800deac:	2301      	movs	r3, #1
 800deae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f383 8810 	msr	PRIMASK, r3
}
 800deb6:	46c0      	nop			@ (mov r8, r8)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2140      	movs	r1, #64	@ 0x40
 800dec4:	430a      	orrs	r2, r1
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800decc:	6a3b      	ldr	r3, [r7, #32]
 800dece:	f383 8810 	msr	PRIMASK, r3
}
 800ded2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800ded4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800ded6:	e024      	b.n	800df22 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	2280      	movs	r2, #128	@ 0x80
 800dee0:	4013      	ands	r3, r2
 800dee2:	d013      	beq.n	800df0c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dee8:	781a      	ldrb	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2256      	movs	r2, #86	@ 0x56
 800defe:	5a9b      	ldrh	r3, [r3, r2]
 800df00:	b29b      	uxth	r3, r3
 800df02:	3b01      	subs	r3, #1
 800df04:	b299      	uxth	r1, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2256      	movs	r2, #86	@ 0x56
 800df0a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800df0c:	212e      	movs	r1, #46	@ 0x2e
 800df0e:	187b      	adds	r3, r7, r1
 800df10:	881a      	ldrh	r2, [r3, #0]
 800df12:	187b      	adds	r3, r7, r1
 800df14:	3a01      	subs	r2, #1
 800df16:	801a      	strh	r2, [r3, #0]
 800df18:	232e      	movs	r3, #46	@ 0x2e
 800df1a:	18fb      	adds	r3, r7, r3
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1a0      	bne.n	800de64 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	46bd      	mov	sp, r7
 800df26:	b00c      	add	sp, #48	@ 0x30
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	ff7fffff 	.word	0xff7fffff

0800df30 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b08c      	sub	sp, #48	@ 0x30
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2288      	movs	r2, #136	@ 0x88
 800df3c:	589b      	ldr	r3, [r3, r2]
 800df3e:	2b21      	cmp	r3, #33	@ 0x21
 800df40:	d16a      	bne.n	800e018 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800df42:	232e      	movs	r3, #46	@ 0x2e
 800df44:	18fb      	adds	r3, r7, r3
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	216a      	movs	r1, #106	@ 0x6a
 800df4a:	5a52      	ldrh	r2, [r2, r1]
 800df4c:	801a      	strh	r2, [r3, #0]
 800df4e:	e05e      	b.n	800e00e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2256      	movs	r2, #86	@ 0x56
 800df54:	5a9b      	ldrh	r3, [r3, r2]
 800df56:	b29b      	uxth	r3, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d133      	bne.n	800dfc4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df5c:	f3ef 8310 	mrs	r3, PRIMASK
 800df60:	60bb      	str	r3, [r7, #8]
  return(result);
 800df62:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800df64:	627b      	str	r3, [r7, #36]	@ 0x24
 800df66:	2301      	movs	r3, #1
 800df68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f383 8810 	msr	PRIMASK, r3
}
 800df70:	46c0      	nop			@ (mov r8, r8)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	689a      	ldr	r2, [r3, #8]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4928      	ldr	r1, [pc, #160]	@ (800e020 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800df7e:	400a      	ands	r2, r1
 800df80:	609a      	str	r2, [r3, #8]
 800df82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f383 8810 	msr	PRIMASK, r3
}
 800df8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df8e:	f3ef 8310 	mrs	r3, PRIMASK
 800df92:	617b      	str	r3, [r7, #20]
  return(result);
 800df94:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df96:	623b      	str	r3, [r7, #32]
 800df98:	2301      	movs	r3, #1
 800df9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	f383 8810 	msr	PRIMASK, r3
}
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2140      	movs	r1, #64	@ 0x40
 800dfb0:	430a      	orrs	r2, r1
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	6a3b      	ldr	r3, [r7, #32]
 800dfb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	f383 8810 	msr	PRIMASK, r3
}
 800dfbe:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800dfc0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800dfc2:	e029      	b.n	800e018 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	69db      	ldr	r3, [r3, #28]
 800dfca:	2280      	movs	r2, #128	@ 0x80
 800dfcc:	4013      	ands	r3, r2
 800dfce:	d018      	beq.n	800e002 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfd4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	001a      	movs	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	05d2      	lsls	r2, r2, #23
 800dfe2:	0dd2      	lsrs	r2, r2, #23
 800dfe4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfea:	1c9a      	adds	r2, r3, #2
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2256      	movs	r2, #86	@ 0x56
 800dff4:	5a9b      	ldrh	r3, [r3, r2]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	3b01      	subs	r3, #1
 800dffa:	b299      	uxth	r1, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2256      	movs	r2, #86	@ 0x56
 800e000:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e002:	212e      	movs	r1, #46	@ 0x2e
 800e004:	187b      	adds	r3, r7, r1
 800e006:	881a      	ldrh	r2, [r3, #0]
 800e008:	187b      	adds	r3, r7, r1
 800e00a:	3a01      	subs	r2, #1
 800e00c:	801a      	strh	r2, [r3, #0]
 800e00e:	232e      	movs	r3, #46	@ 0x2e
 800e010:	18fb      	adds	r3, r7, r3
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d19b      	bne.n	800df50 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800e018:	46c0      	nop			@ (mov r8, r8)
 800e01a:	46bd      	mov	sp, r7
 800e01c:	b00c      	add	sp, #48	@ 0x30
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	ff7fffff 	.word	0xff7fffff

0800e024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e02c:	f3ef 8310 	mrs	r3, PRIMASK
 800e030:	60bb      	str	r3, [r7, #8]
  return(result);
 800e032:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e034:	617b      	str	r3, [r7, #20]
 800e036:	2301      	movs	r3, #1
 800e038:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f383 8810 	msr	PRIMASK, r3
}
 800e040:	46c0      	nop			@ (mov r8, r8)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2140      	movs	r1, #64	@ 0x40
 800e04e:	438a      	bics	r2, r1
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	f383 8810 	msr	PRIMASK, r3
}
 800e05c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2288      	movs	r2, #136	@ 0x88
 800e062:	2120      	movs	r1, #32
 800e064:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	0018      	movs	r0, r3
 800e070:	f7f6 ff1a 	bl	8004ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e074:	46c0      	nop			@ (mov r8, r8)
 800e076:	46bd      	mov	sp, r7
 800e078:	b006      	add	sp, #24
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b094      	sub	sp, #80	@ 0x50
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e084:	204e      	movs	r0, #78	@ 0x4e
 800e086:	183b      	adds	r3, r7, r0
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	2160      	movs	r1, #96	@ 0x60
 800e08c:	5a52      	ldrh	r2, [r2, r1]
 800e08e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	228c      	movs	r2, #140	@ 0x8c
 800e094:	589b      	ldr	r3, [r3, r2]
 800e096:	2b22      	cmp	r3, #34	@ 0x22
 800e098:	d000      	beq.n	800e09c <UART_RxISR_8BIT+0x20>
 800e09a:	e0bf      	b.n	800e21c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0a2:	214c      	movs	r1, #76	@ 0x4c
 800e0a4:	187b      	adds	r3, r7, r1
 800e0a6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e0a8:	187b      	adds	r3, r7, r1
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	183b      	adds	r3, r7, r0
 800e0b0:	881b      	ldrh	r3, [r3, #0]
 800e0b2:	b2d9      	uxtb	r1, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0b8:	400a      	ands	r2, r1
 800e0ba:	b2d2      	uxtb	r2, r2
 800e0bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	225e      	movs	r2, #94	@ 0x5e
 800e0cc:	5a9b      	ldrh	r3, [r3, r2]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	b299      	uxth	r1, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	225e      	movs	r2, #94	@ 0x5e
 800e0d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	225e      	movs	r2, #94	@ 0x5e
 800e0de:	5a9b      	ldrh	r3, [r3, r2]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d000      	beq.n	800e0e8 <UART_RxISR_8BIT+0x6c>
 800e0e6:	e0a1      	b.n	800e22c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e8:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f8:	f383 8810 	msr	PRIMASK, r3
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	494a      	ldr	r1, [pc, #296]	@ (800e234 <UART_RxISR_8BIT+0x1b8>)
 800e10a:	400a      	ands	r2, r1
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e114:	f383 8810 	msr	PRIMASK, r3
}
 800e118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e11a:	f3ef 8310 	mrs	r3, PRIMASK
 800e11e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e122:	647b      	str	r3, [r7, #68]	@ 0x44
 800e124:	2301      	movs	r3, #1
 800e126:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e12a:	f383 8810 	msr	PRIMASK, r3
}
 800e12e:	46c0      	nop			@ (mov r8, r8)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	689a      	ldr	r2, [r3, #8]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2101      	movs	r1, #1
 800e13c:	438a      	bics	r2, r1
 800e13e:	609a      	str	r2, [r3, #8]
 800e140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e142:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e146:	f383 8810 	msr	PRIMASK, r3
}
 800e14a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	228c      	movs	r2, #140	@ 0x8c
 800e150:	2120      	movs	r1, #32
 800e152:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a34      	ldr	r2, [pc, #208]	@ (800e238 <UART_RxISR_8BIT+0x1bc>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d01f      	beq.n	800e1aa <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	2380      	movs	r3, #128	@ 0x80
 800e172:	041b      	lsls	r3, r3, #16
 800e174:	4013      	ands	r3, r2
 800e176:	d018      	beq.n	800e1aa <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e178:	f3ef 8310 	mrs	r3, PRIMASK
 800e17c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e17e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e180:	643b      	str	r3, [r7, #64]	@ 0x40
 800e182:	2301      	movs	r3, #1
 800e184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	f383 8810 	msr	PRIMASK, r3
}
 800e18c:	46c0      	nop			@ (mov r8, r8)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4928      	ldr	r1, [pc, #160]	@ (800e23c <UART_RxISR_8BIT+0x1c0>)
 800e19a:	400a      	ands	r2, r1
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	f383 8810 	msr	PRIMASK, r3
}
 800e1a8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d12f      	bne.n	800e212 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1be:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	f383 8810 	msr	PRIMASK, r3
}
 800e1cc:	46c0      	nop			@ (mov r8, r8)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2110      	movs	r1, #16
 800e1da:	438a      	bics	r2, r1
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	f383 8810 	msr	PRIMASK, r3
}
 800e1e8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	2210      	movs	r2, #16
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	2b10      	cmp	r3, #16
 800e1f6:	d103      	bne.n	800e200 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2210      	movs	r2, #16
 800e1fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	225c      	movs	r2, #92	@ 0x5c
 800e204:	5a9a      	ldrh	r2, [r3, r2]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	0011      	movs	r1, r2
 800e20a:	0018      	movs	r0, r3
 800e20c:	f7fe ff28 	bl	800d060 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e210:	e00c      	b.n	800e22c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	0018      	movs	r0, r3
 800e216:	f7f6 fd07 	bl	8004c28 <HAL_UART_RxCpltCallback>
}
 800e21a:	e007      	b.n	800e22c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	699a      	ldr	r2, [r3, #24]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2108      	movs	r1, #8
 800e228:	430a      	orrs	r2, r1
 800e22a:	619a      	str	r2, [r3, #24]
}
 800e22c:	46c0      	nop			@ (mov r8, r8)
 800e22e:	46bd      	mov	sp, r7
 800e230:	b014      	add	sp, #80	@ 0x50
 800e232:	bd80      	pop	{r7, pc}
 800e234:	fffffedf 	.word	0xfffffedf
 800e238:	40008000 	.word	0x40008000
 800e23c:	fbffffff 	.word	0xfbffffff

0800e240 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b094      	sub	sp, #80	@ 0x50
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e248:	204e      	movs	r0, #78	@ 0x4e
 800e24a:	183b      	adds	r3, r7, r0
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	2160      	movs	r1, #96	@ 0x60
 800e250:	5a52      	ldrh	r2, [r2, r1]
 800e252:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	228c      	movs	r2, #140	@ 0x8c
 800e258:	589b      	ldr	r3, [r3, r2]
 800e25a:	2b22      	cmp	r3, #34	@ 0x22
 800e25c:	d000      	beq.n	800e260 <UART_RxISR_16BIT+0x20>
 800e25e:	e0bf      	b.n	800e3e0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e266:	214c      	movs	r1, #76	@ 0x4c
 800e268:	187b      	adds	r3, r7, r1
 800e26a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e270:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800e272:	187b      	adds	r3, r7, r1
 800e274:	183a      	adds	r2, r7, r0
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	8812      	ldrh	r2, [r2, #0]
 800e27a:	4013      	ands	r3, r2
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e280:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e286:	1c9a      	adds	r2, r3, #2
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	225e      	movs	r2, #94	@ 0x5e
 800e290:	5a9b      	ldrh	r3, [r3, r2]
 800e292:	b29b      	uxth	r3, r3
 800e294:	3b01      	subs	r3, #1
 800e296:	b299      	uxth	r1, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	225e      	movs	r2, #94	@ 0x5e
 800e29c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	225e      	movs	r2, #94	@ 0x5e
 800e2a2:	5a9b      	ldrh	r3, [r3, r2]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d000      	beq.n	800e2ac <UART_RxISR_16BIT+0x6c>
 800e2aa:	e0a1      	b.n	800e3f0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800e2b0:	623b      	str	r3, [r7, #32]
  return(result);
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	f383 8810 	msr	PRIMASK, r3
}
 800e2c0:	46c0      	nop			@ (mov r8, r8)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	494a      	ldr	r1, [pc, #296]	@ (800e3f8 <UART_RxISR_16BIT+0x1b8>)
 800e2ce:	400a      	ands	r2, r1
 800e2d0:	601a      	str	r2, [r3, #0]
 800e2d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d8:	f383 8810 	msr	PRIMASK, r3
}
 800e2dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2de:	f3ef 8310 	mrs	r3, PRIMASK
 800e2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ee:	f383 8810 	msr	PRIMASK, r3
}
 800e2f2:	46c0      	nop			@ (mov r8, r8)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	689a      	ldr	r2, [r3, #8]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2101      	movs	r1, #1
 800e300:	438a      	bics	r2, r1
 800e302:	609a      	str	r2, [r3, #8]
 800e304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e306:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e30a:	f383 8810 	msr	PRIMASK, r3
}
 800e30e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	228c      	movs	r2, #140	@ 0x8c
 800e314:	2120      	movs	r1, #32
 800e316:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a34      	ldr	r2, [pc, #208]	@ (800e3fc <UART_RxISR_16BIT+0x1bc>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d01f      	beq.n	800e36e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	685a      	ldr	r2, [r3, #4]
 800e334:	2380      	movs	r3, #128	@ 0x80
 800e336:	041b      	lsls	r3, r3, #16
 800e338:	4013      	ands	r3, r2
 800e33a:	d018      	beq.n	800e36e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e33c:	f3ef 8310 	mrs	r3, PRIMASK
 800e340:	617b      	str	r3, [r7, #20]
  return(result);
 800e342:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e346:	2301      	movs	r3, #1
 800e348:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	f383 8810 	msr	PRIMASK, r3
}
 800e350:	46c0      	nop			@ (mov r8, r8)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4928      	ldr	r1, [pc, #160]	@ (800e400 <UART_RxISR_16BIT+0x1c0>)
 800e35e:	400a      	ands	r2, r1
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	f383 8810 	msr	PRIMASK, r3
}
 800e36c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e372:	2b01      	cmp	r3, #1
 800e374:	d12f      	bne.n	800e3d6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e37c:	f3ef 8310 	mrs	r3, PRIMASK
 800e380:	60bb      	str	r3, [r7, #8]
  return(result);
 800e382:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e384:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e386:	2301      	movs	r3, #1
 800e388:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f383 8810 	msr	PRIMASK, r3
}
 800e390:	46c0      	nop			@ (mov r8, r8)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2110      	movs	r1, #16
 800e39e:	438a      	bics	r2, r1
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	f383 8810 	msr	PRIMASK, r3
}
 800e3ac:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	69db      	ldr	r3, [r3, #28]
 800e3b4:	2210      	movs	r2, #16
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	2b10      	cmp	r3, #16
 800e3ba:	d103      	bne.n	800e3c4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2210      	movs	r2, #16
 800e3c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	225c      	movs	r2, #92	@ 0x5c
 800e3c8:	5a9a      	ldrh	r2, [r3, r2]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	0011      	movs	r1, r2
 800e3ce:	0018      	movs	r0, r3
 800e3d0:	f7fe fe46 	bl	800d060 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3d4:	e00c      	b.n	800e3f0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	0018      	movs	r0, r3
 800e3da:	f7f6 fc25 	bl	8004c28 <HAL_UART_RxCpltCallback>
}
 800e3de:	e007      	b.n	800e3f0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	699a      	ldr	r2, [r3, #24]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2108      	movs	r1, #8
 800e3ec:	430a      	orrs	r2, r1
 800e3ee:	619a      	str	r2, [r3, #24]
}
 800e3f0:	46c0      	nop			@ (mov r8, r8)
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	b014      	add	sp, #80	@ 0x50
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	fffffedf 	.word	0xfffffedf
 800e3fc:	40008000 	.word	0x40008000
 800e400:	fbffffff 	.word	0xfbffffff

0800e404 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b0a0      	sub	sp, #128	@ 0x80
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e40c:	237a      	movs	r3, #122	@ 0x7a
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	2160      	movs	r1, #96	@ 0x60
 800e414:	5a52      	ldrh	r2, [r2, r1]
 800e416:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	69db      	ldr	r3, [r3, #28]
 800e41e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	228c      	movs	r2, #140	@ 0x8c
 800e434:	589b      	ldr	r3, [r3, r2]
 800e436:	2b22      	cmp	r3, #34	@ 0x22
 800e438:	d000      	beq.n	800e43c <UART_RxISR_8BIT_FIFOEN+0x38>
 800e43a:	e16a      	b.n	800e712 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e43c:	236e      	movs	r3, #110	@ 0x6e
 800e43e:	18fb      	adds	r3, r7, r3
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	2168      	movs	r1, #104	@ 0x68
 800e444:	5a52      	ldrh	r2, [r2, r1]
 800e446:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e448:	e111      	b.n	800e66e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e450:	216c      	movs	r1, #108	@ 0x6c
 800e452:	187b      	adds	r3, r7, r1
 800e454:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e456:	187b      	adds	r3, r7, r1
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	237a      	movs	r3, #122	@ 0x7a
 800e45e:	18fb      	adds	r3, r7, r3
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	b2d9      	uxtb	r1, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e468:	400a      	ands	r2, r1
 800e46a:	b2d2      	uxtb	r2, r2
 800e46c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e472:	1c5a      	adds	r2, r3, #1
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	225e      	movs	r2, #94	@ 0x5e
 800e47c:	5a9b      	ldrh	r3, [r3, r2]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	3b01      	subs	r3, #1
 800e482:	b299      	uxth	r1, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	225e      	movs	r2, #94	@ 0x5e
 800e488:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	69db      	ldr	r3, [r3, #28]
 800e490:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e494:	2207      	movs	r2, #7
 800e496:	4013      	ands	r3, r2
 800e498:	d049      	beq.n	800e52e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e49a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e49c:	2201      	movs	r2, #1
 800e49e:	4013      	ands	r3, r2
 800e4a0:	d010      	beq.n	800e4c4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e4a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e4a4:	2380      	movs	r3, #128	@ 0x80
 800e4a6:	005b      	lsls	r3, r3, #1
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	d00b      	beq.n	800e4c4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2290      	movs	r2, #144	@ 0x90
 800e4b8:	589b      	ldr	r3, [r3, r2]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2190      	movs	r1, #144	@ 0x90
 800e4c2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	4013      	ands	r3, r2
 800e4ca:	d00f      	beq.n	800e4ec <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e4cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	d00b      	beq.n	800e4ec <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2202      	movs	r2, #2
 800e4da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2290      	movs	r2, #144	@ 0x90
 800e4e0:	589b      	ldr	r3, [r3, r2]
 800e4e2:	2204      	movs	r2, #4
 800e4e4:	431a      	orrs	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2190      	movs	r1, #144	@ 0x90
 800e4ea:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4ee:	2204      	movs	r2, #4
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	d00f      	beq.n	800e514 <UART_RxISR_8BIT_FIFOEN+0x110>
 800e4f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	d00b      	beq.n	800e514 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2204      	movs	r2, #4
 800e502:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2290      	movs	r2, #144	@ 0x90
 800e508:	589b      	ldr	r3, [r3, r2]
 800e50a:	2202      	movs	r2, #2
 800e50c:	431a      	orrs	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2190      	movs	r1, #144	@ 0x90
 800e512:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2290      	movs	r2, #144	@ 0x90
 800e518:	589b      	ldr	r3, [r3, r2]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d007      	beq.n	800e52e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	0018      	movs	r0, r3
 800e522:	f7fe fd95 	bl	800d050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2290      	movs	r2, #144	@ 0x90
 800e52a:	2100      	movs	r1, #0
 800e52c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	225e      	movs	r2, #94	@ 0x5e
 800e532:	5a9b      	ldrh	r3, [r3, r2]
 800e534:	b29b      	uxth	r3, r3
 800e536:	2b00      	cmp	r3, #0
 800e538:	d000      	beq.n	800e53c <UART_RxISR_8BIT_FIFOEN+0x138>
 800e53a:	e098      	b.n	800e66e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e53c:	f3ef 8310 	mrs	r3, PRIMASK
 800e540:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800e542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e544:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e546:	2301      	movs	r3, #1
 800e548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e54c:	f383 8810 	msr	PRIMASK, r3
}
 800e550:	46c0      	nop			@ (mov r8, r8)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4973      	ldr	r1, [pc, #460]	@ (800e72c <UART_RxISR_8BIT_FIFOEN+0x328>)
 800e55e:	400a      	ands	r2, r1
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e564:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e568:	f383 8810 	msr	PRIMASK, r3
}
 800e56c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e56e:	f3ef 8310 	mrs	r3, PRIMASK
 800e572:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800e574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e576:	667b      	str	r3, [r7, #100]	@ 0x64
 800e578:	2301      	movs	r3, #1
 800e57a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e57c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e57e:	f383 8810 	msr	PRIMASK, r3
}
 800e582:	46c0      	nop			@ (mov r8, r8)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	689a      	ldr	r2, [r3, #8]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4968      	ldr	r1, [pc, #416]	@ (800e730 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800e590:	400a      	ands	r2, r1
 800e592:	609a      	str	r2, [r3, #8]
 800e594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e59a:	f383 8810 	msr	PRIMASK, r3
}
 800e59e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	228c      	movs	r2, #140	@ 0x8c
 800e5a4:	2120      	movs	r1, #32
 800e5a6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a5e      	ldr	r2, [pc, #376]	@ (800e734 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d01f      	beq.n	800e5fe <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	2380      	movs	r3, #128	@ 0x80
 800e5c6:	041b      	lsls	r3, r3, #16
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	d018      	beq.n	800e5fe <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5dc:	f383 8810 	msr	PRIMASK, r3
}
 800e5e0:	46c0      	nop			@ (mov r8, r8)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4952      	ldr	r1, [pc, #328]	@ (800e738 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800e5ee:	400a      	ands	r2, r1
 800e5f0:	601a      	str	r2, [r3, #0]
 800e5f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5f4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5f8:	f383 8810 	msr	PRIMASK, r3
}
 800e5fc:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e602:	2b01      	cmp	r3, #1
 800e604:	d12f      	bne.n	800e666 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e60c:	f3ef 8310 	mrs	r3, PRIMASK
 800e610:	623b      	str	r3, [r7, #32]
  return(result);
 800e612:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e616:	2301      	movs	r3, #1
 800e618:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61c:	f383 8810 	msr	PRIMASK, r3
}
 800e620:	46c0      	nop			@ (mov r8, r8)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2110      	movs	r1, #16
 800e62e:	438a      	bics	r2, r1
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e634:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e638:	f383 8810 	msr	PRIMASK, r3
}
 800e63c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	2210      	movs	r2, #16
 800e646:	4013      	ands	r3, r2
 800e648:	2b10      	cmp	r3, #16
 800e64a:	d103      	bne.n	800e654 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2210      	movs	r2, #16
 800e652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	225c      	movs	r2, #92	@ 0x5c
 800e658:	5a9a      	ldrh	r2, [r3, r2]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	0011      	movs	r1, r2
 800e65e:	0018      	movs	r0, r3
 800e660:	f7fe fcfe 	bl	800d060 <HAL_UARTEx_RxEventCallback>
 800e664:	e003      	b.n	800e66e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	0018      	movs	r0, r3
 800e66a:	f7f6 fadd 	bl	8004c28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e66e:	236e      	movs	r3, #110	@ 0x6e
 800e670:	18fb      	adds	r3, r7, r3
 800e672:	881b      	ldrh	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d004      	beq.n	800e682 <UART_RxISR_8BIT_FIFOEN+0x27e>
 800e678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e67a:	2220      	movs	r2, #32
 800e67c:	4013      	ands	r3, r2
 800e67e:	d000      	beq.n	800e682 <UART_RxISR_8BIT_FIFOEN+0x27e>
 800e680:	e6e3      	b.n	800e44a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e682:	205a      	movs	r0, #90	@ 0x5a
 800e684:	183b      	adds	r3, r7, r0
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	215e      	movs	r1, #94	@ 0x5e
 800e68a:	5a52      	ldrh	r2, [r2, r1]
 800e68c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e68e:	0001      	movs	r1, r0
 800e690:	187b      	adds	r3, r7, r1
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d044      	beq.n	800e722 <UART_RxISR_8BIT_FIFOEN+0x31e>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2268      	movs	r2, #104	@ 0x68
 800e69c:	5a9b      	ldrh	r3, [r3, r2]
 800e69e:	187a      	adds	r2, r7, r1
 800e6a0:	8812      	ldrh	r2, [r2, #0]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d23d      	bcs.n	800e722 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f383 8810 	msr	PRIMASK, r3
}
 800e6ba:	46c0      	nop			@ (mov r8, r8)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	689a      	ldr	r2, [r3, #8]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	491d      	ldr	r1, [pc, #116]	@ (800e73c <UART_RxISR_8BIT_FIFOEN+0x338>)
 800e6c8:	400a      	ands	r2, r1
 800e6ca:	609a      	str	r2, [r3, #8]
 800e6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	f383 8810 	msr	PRIMASK, r3
}
 800e6d6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a19      	ldr	r2, [pc, #100]	@ (800e740 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800e6dc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6de:	f3ef 8310 	mrs	r3, PRIMASK
 800e6e2:	617b      	str	r3, [r7, #20]
  return(result);
 800e6e4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	f383 8810 	msr	PRIMASK, r3
}
 800e6f2:	46c0      	nop			@ (mov r8, r8)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2120      	movs	r1, #32
 800e700:	430a      	orrs	r2, r1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e706:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	f383 8810 	msr	PRIMASK, r3
}
 800e70e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e710:	e007      	b.n	800e722 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	699a      	ldr	r2, [r3, #24]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2108      	movs	r1, #8
 800e71e:	430a      	orrs	r2, r1
 800e720:	619a      	str	r2, [r3, #24]
}
 800e722:	46c0      	nop			@ (mov r8, r8)
 800e724:	46bd      	mov	sp, r7
 800e726:	b020      	add	sp, #128	@ 0x80
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	46c0      	nop			@ (mov r8, r8)
 800e72c:	fffffeff 	.word	0xfffffeff
 800e730:	effffffe 	.word	0xeffffffe
 800e734:	40008000 	.word	0x40008000
 800e738:	fbffffff 	.word	0xfbffffff
 800e73c:	efffffff 	.word	0xefffffff
 800e740:	0800e07d 	.word	0x0800e07d

0800e744 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b0a2      	sub	sp, #136	@ 0x88
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e74c:	2382      	movs	r3, #130	@ 0x82
 800e74e:	18fb      	adds	r3, r7, r3
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	2160      	movs	r1, #96	@ 0x60
 800e754:	5a52      	ldrh	r2, [r2, r1]
 800e756:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	69db      	ldr	r3, [r3, #28]
 800e75e:	2284      	movs	r2, #132	@ 0x84
 800e760:	18ba      	adds	r2, r7, r2
 800e762:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	228c      	movs	r2, #140	@ 0x8c
 800e778:	589b      	ldr	r3, [r3, r2]
 800e77a:	2b22      	cmp	r3, #34	@ 0x22
 800e77c:	d000      	beq.n	800e780 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800e77e:	e174      	b.n	800ea6a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e780:	2376      	movs	r3, #118	@ 0x76
 800e782:	18fb      	adds	r3, r7, r3
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	2168      	movs	r1, #104	@ 0x68
 800e788:	5a52      	ldrh	r2, [r2, r1]
 800e78a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e78c:	e119      	b.n	800e9c2 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e794:	2174      	movs	r1, #116	@ 0x74
 800e796:	187b      	adds	r3, r7, r1
 800e798:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e79e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800e7a0:	187b      	adds	r3, r7, r1
 800e7a2:	2282      	movs	r2, #130	@ 0x82
 800e7a4:	18ba      	adds	r2, r7, r2
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	8812      	ldrh	r2, [r2, #0]
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7b6:	1c9a      	adds	r2, r3, #2
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	225e      	movs	r2, #94	@ 0x5e
 800e7c0:	5a9b      	ldrh	r3, [r3, r2]
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b299      	uxth	r1, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	225e      	movs	r2, #94	@ 0x5e
 800e7cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	69db      	ldr	r3, [r3, #28]
 800e7d4:	2184      	movs	r1, #132	@ 0x84
 800e7d6:	187a      	adds	r2, r7, r1
 800e7d8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e7da:	187b      	adds	r3, r7, r1
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2207      	movs	r2, #7
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	d04e      	beq.n	800e882 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7e4:	187b      	adds	r3, r7, r1
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	d010      	beq.n	800e810 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800e7ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e7f0:	2380      	movs	r3, #128	@ 0x80
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	d00b      	beq.n	800e810 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2290      	movs	r2, #144	@ 0x90
 800e804:	589b      	ldr	r3, [r3, r2]
 800e806:	2201      	movs	r2, #1
 800e808:	431a      	orrs	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2190      	movs	r1, #144	@ 0x90
 800e80e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e810:	2384      	movs	r3, #132	@ 0x84
 800e812:	18fb      	adds	r3, r7, r3
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2202      	movs	r2, #2
 800e818:	4013      	ands	r3, r2
 800e81a:	d00f      	beq.n	800e83c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800e81c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e81e:	2201      	movs	r2, #1
 800e820:	4013      	ands	r3, r2
 800e822:	d00b      	beq.n	800e83c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2202      	movs	r2, #2
 800e82a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2290      	movs	r2, #144	@ 0x90
 800e830:	589b      	ldr	r3, [r3, r2]
 800e832:	2204      	movs	r2, #4
 800e834:	431a      	orrs	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2190      	movs	r1, #144	@ 0x90
 800e83a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e83c:	2384      	movs	r3, #132	@ 0x84
 800e83e:	18fb      	adds	r3, r7, r3
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2204      	movs	r2, #4
 800e844:	4013      	ands	r3, r2
 800e846:	d00f      	beq.n	800e868 <UART_RxISR_16BIT_FIFOEN+0x124>
 800e848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e84a:	2201      	movs	r2, #1
 800e84c:	4013      	ands	r3, r2
 800e84e:	d00b      	beq.n	800e868 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2204      	movs	r2, #4
 800e856:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2290      	movs	r2, #144	@ 0x90
 800e85c:	589b      	ldr	r3, [r3, r2]
 800e85e:	2202      	movs	r2, #2
 800e860:	431a      	orrs	r2, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2190      	movs	r1, #144	@ 0x90
 800e866:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2290      	movs	r2, #144	@ 0x90
 800e86c:	589b      	ldr	r3, [r3, r2]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d007      	beq.n	800e882 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	0018      	movs	r0, r3
 800e876:	f7fe fbeb 	bl	800d050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2290      	movs	r2, #144	@ 0x90
 800e87e:	2100      	movs	r1, #0
 800e880:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	225e      	movs	r2, #94	@ 0x5e
 800e886:	5a9b      	ldrh	r3, [r3, r2]
 800e888:	b29b      	uxth	r3, r3
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d000      	beq.n	800e890 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800e88e:	e098      	b.n	800e9c2 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e890:	f3ef 8310 	mrs	r3, PRIMASK
 800e894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800e896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e898:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e89a:	2301      	movs	r3, #1
 800e89c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8a0:	f383 8810 	msr	PRIMASK, r3
}
 800e8a4:	46c0      	nop			@ (mov r8, r8)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4974      	ldr	r1, [pc, #464]	@ (800ea84 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800e8b2:	400a      	ands	r2, r1
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8b8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8bc:	f383 8810 	msr	PRIMASK, r3
}
 800e8c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800e8c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e8ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8d2:	f383 8810 	msr	PRIMASK, r3
}
 800e8d6:	46c0      	nop			@ (mov r8, r8)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	689a      	ldr	r2, [r3, #8]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4969      	ldr	r1, [pc, #420]	@ (800ea88 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800e8e4:	400a      	ands	r2, r1
 800e8e6:	609a      	str	r2, [r3, #8]
 800e8e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8ea:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ee:	f383 8810 	msr	PRIMASK, r3
}
 800e8f2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	228c      	movs	r2, #140	@ 0x8c
 800e8f8:	2120      	movs	r1, #32
 800e8fa:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a5f      	ldr	r2, [pc, #380]	@ (800ea8c <UART_RxISR_16BIT_FIFOEN+0x348>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d01f      	beq.n	800e952 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	685a      	ldr	r2, [r3, #4]
 800e918:	2380      	movs	r3, #128	@ 0x80
 800e91a:	041b      	lsls	r3, r3, #16
 800e91c:	4013      	ands	r3, r2
 800e91e:	d018      	beq.n	800e952 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e920:	f3ef 8310 	mrs	r3, PRIMASK
 800e924:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e928:	667b      	str	r3, [r7, #100]	@ 0x64
 800e92a:	2301      	movs	r3, #1
 800e92c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e930:	f383 8810 	msr	PRIMASK, r3
}
 800e934:	46c0      	nop			@ (mov r8, r8)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4953      	ldr	r1, [pc, #332]	@ (800ea90 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800e942:	400a      	ands	r2, r1
 800e944:	601a      	str	r2, [r3, #0]
 800e946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e948:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94c:	f383 8810 	msr	PRIMASK, r3
}
 800e950:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e956:	2b01      	cmp	r3, #1
 800e958:	d12f      	bne.n	800e9ba <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e960:	f3ef 8310 	mrs	r3, PRIMASK
 800e964:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e968:	663b      	str	r3, [r7, #96]	@ 0x60
 800e96a:	2301      	movs	r3, #1
 800e96c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e970:	f383 8810 	msr	PRIMASK, r3
}
 800e974:	46c0      	nop			@ (mov r8, r8)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2110      	movs	r1, #16
 800e982:	438a      	bics	r2, r1
 800e984:	601a      	str	r2, [r3, #0]
 800e986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98c:	f383 8810 	msr	PRIMASK, r3
}
 800e990:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	69db      	ldr	r3, [r3, #28]
 800e998:	2210      	movs	r2, #16
 800e99a:	4013      	ands	r3, r2
 800e99c:	2b10      	cmp	r3, #16
 800e99e:	d103      	bne.n	800e9a8 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2210      	movs	r2, #16
 800e9a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	225c      	movs	r2, #92	@ 0x5c
 800e9ac:	5a9a      	ldrh	r2, [r3, r2]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	0011      	movs	r1, r2
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	f7fe fb54 	bl	800d060 <HAL_UARTEx_RxEventCallback>
 800e9b8:	e003      	b.n	800e9c2 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	0018      	movs	r0, r3
 800e9be:	f7f6 f933 	bl	8004c28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9c2:	2376      	movs	r3, #118	@ 0x76
 800e9c4:	18fb      	adds	r3, r7, r3
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d006      	beq.n	800e9da <UART_RxISR_16BIT_FIFOEN+0x296>
 800e9cc:	2384      	movs	r3, #132	@ 0x84
 800e9ce:	18fb      	adds	r3, r7, r3
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2220      	movs	r2, #32
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	d000      	beq.n	800e9da <UART_RxISR_16BIT_FIFOEN+0x296>
 800e9d8:	e6d9      	b.n	800e78e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e9da:	205e      	movs	r0, #94	@ 0x5e
 800e9dc:	183b      	adds	r3, r7, r0
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	215e      	movs	r1, #94	@ 0x5e
 800e9e2:	5a52      	ldrh	r2, [r2, r1]
 800e9e4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e9e6:	0001      	movs	r1, r0
 800e9e8:	187b      	adds	r3, r7, r1
 800e9ea:	881b      	ldrh	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d044      	beq.n	800ea7a <UART_RxISR_16BIT_FIFOEN+0x336>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2268      	movs	r2, #104	@ 0x68
 800e9f4:	5a9b      	ldrh	r3, [r3, r2]
 800e9f6:	187a      	adds	r2, r7, r1
 800e9f8:	8812      	ldrh	r2, [r2, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d23d      	bcs.n	800ea7a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9fe:	f3ef 8310 	mrs	r3, PRIMASK
 800ea02:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea08:	2301      	movs	r3, #1
 800ea0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	f383 8810 	msr	PRIMASK, r3
}
 800ea12:	46c0      	nop			@ (mov r8, r8)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	689a      	ldr	r2, [r3, #8]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	491d      	ldr	r1, [pc, #116]	@ (800ea94 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800ea20:	400a      	ands	r2, r1
 800ea22:	609a      	str	r2, [r3, #8]
 800ea24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	f383 8810 	msr	PRIMASK, r3
}
 800ea2e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a19      	ldr	r2, [pc, #100]	@ (800ea98 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800ea34:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea36:	f3ef 8310 	mrs	r3, PRIMASK
 800ea3a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea3c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea40:	2301      	movs	r3, #1
 800ea42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	f383 8810 	msr	PRIMASK, r3
}
 800ea4a:	46c0      	nop			@ (mov r8, r8)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2120      	movs	r1, #32
 800ea58:	430a      	orrs	r2, r1
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	f383 8810 	msr	PRIMASK, r3
}
 800ea66:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea68:	e007      	b.n	800ea7a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	699a      	ldr	r2, [r3, #24]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2108      	movs	r1, #8
 800ea76:	430a      	orrs	r2, r1
 800ea78:	619a      	str	r2, [r3, #24]
}
 800ea7a:	46c0      	nop			@ (mov r8, r8)
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	b022      	add	sp, #136	@ 0x88
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	46c0      	nop			@ (mov r8, r8)
 800ea84:	fffffeff 	.word	0xfffffeff
 800ea88:	effffffe 	.word	0xeffffffe
 800ea8c:	40008000 	.word	0x40008000
 800ea90:	fbffffff 	.word	0xfbffffff
 800ea94:	efffffff 	.word	0xefffffff
 800ea98:	0800e241 	.word	0x0800e241

0800ea9c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
 800eaa8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e05d      	b.n	800eb70 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2288      	movs	r2, #136	@ 0x88
 800eab8:	589b      	ldr	r3, [r3, r2]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d107      	bne.n	800eace <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2284      	movs	r2, #132	@ 0x84
 800eac2:	2100      	movs	r1, #0
 800eac4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	0018      	movs	r0, r3
 800eaca:	f7f8 ff31 	bl	8007930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2288      	movs	r2, #136	@ 0x88
 800ead2:	2124      	movs	r1, #36	@ 0x24
 800ead4:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2101      	movs	r1, #1
 800eae2:	438a      	bics	r2, r1
 800eae4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	f7fe fd7f 	bl	800d5f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	0018      	movs	r0, r3
 800eafa:	f7fe fabd 	bl	800d078 <UART_SetConfig>
 800eafe:	0003      	movs	r3, r0
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d101      	bne.n	800eb08 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e033      	b.n	800eb70 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	689a      	ldr	r2, [r3, #8]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2180      	movs	r1, #128	@ 0x80
 800eb14:	01c9      	lsls	r1, r1, #7
 800eb16:	430a      	orrs	r2, r1
 800eb18:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	4a15      	ldr	r2, [pc, #84]	@ (800eb78 <HAL_RS485Ex_Init+0xdc>)
 800eb22:	4013      	ands	r3, r2
 800eb24:	0019      	movs	r1, r3
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	430a      	orrs	r2, r1
 800eb2e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	055b      	lsls	r3, r3, #21
 800eb34:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	041b      	lsls	r3, r3, #16
 800eb3a:	697a      	ldr	r2, [r7, #20]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a0d      	ldr	r2, [pc, #52]	@ (800eb7c <HAL_RS485Ex_Init+0xe0>)
 800eb48:	4013      	ands	r3, r2
 800eb4a:	0019      	movs	r1, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	697a      	ldr	r2, [r7, #20]
 800eb52:	430a      	orrs	r2, r1
 800eb54:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2101      	movs	r1, #1
 800eb62:	430a      	orrs	r2, r1
 800eb64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	0018      	movs	r0, r3
 800eb6a:	f7fe fdf7 	bl	800d75c <UART_CheckIdleState>
 800eb6e:	0003      	movs	r3, r0
}
 800eb70:	0018      	movs	r0, r3
 800eb72:	46bd      	mov	sp, r7
 800eb74:	b006      	add	sp, #24
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	ffff7fff 	.word	0xffff7fff
 800eb7c:	fc00ffff 	.word	0xfc00ffff

0800eb80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eb88:	46c0      	nop			@ (mov r8, r8)
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	b002      	add	sp, #8
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb98:	46c0      	nop			@ (mov r8, r8)
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	b002      	add	sp, #8
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eba8:	46c0      	nop			@ (mov r8, r8)
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	b002      	add	sp, #8
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2284      	movs	r2, #132	@ 0x84
 800ebbc:	5c9b      	ldrb	r3, [r3, r2]
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d101      	bne.n	800ebc6 <HAL_UARTEx_EnableFifoMode+0x16>
 800ebc2:	2302      	movs	r3, #2
 800ebc4:	e02d      	b.n	800ec22 <HAL_UARTEx_EnableFifoMode+0x72>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2284      	movs	r2, #132	@ 0x84
 800ebca:	2101      	movs	r1, #1
 800ebcc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2288      	movs	r2, #136	@ 0x88
 800ebd2:	2124      	movs	r1, #36	@ 0x24
 800ebd4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2101      	movs	r1, #1
 800ebea:	438a      	bics	r2, r1
 800ebec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2280      	movs	r2, #128	@ 0x80
 800ebf2:	0592      	lsls	r2, r2, #22
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2280      	movs	r2, #128	@ 0x80
 800ebfc:	0592      	lsls	r2, r2, #22
 800ebfe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	f000 f8ca 	bl	800eda4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2288      	movs	r2, #136	@ 0x88
 800ec14:	2120      	movs	r1, #32
 800ec16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2284      	movs	r2, #132	@ 0x84
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	0018      	movs	r0, r3
 800ec24:	46bd      	mov	sp, r7
 800ec26:	b004      	add	sp, #16
 800ec28:	bd80      	pop	{r7, pc}
	...

0800ec2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2284      	movs	r2, #132	@ 0x84
 800ec38:	5c9b      	ldrb	r3, [r3, r2]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d101      	bne.n	800ec42 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec3e:	2302      	movs	r3, #2
 800ec40:	e027      	b.n	800ec92 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2284      	movs	r2, #132	@ 0x84
 800ec46:	2101      	movs	r1, #1
 800ec48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2288      	movs	r2, #136	@ 0x88
 800ec4e:	2124      	movs	r1, #36	@ 0x24
 800ec50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2101      	movs	r1, #1
 800ec66:	438a      	bics	r2, r1
 800ec68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4a0b      	ldr	r2, [pc, #44]	@ (800ec9c <HAL_UARTEx_DisableFifoMode+0x70>)
 800ec6e:	4013      	ands	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2288      	movs	r2, #136	@ 0x88
 800ec84:	2120      	movs	r1, #32
 800ec86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2284      	movs	r2, #132	@ 0x84
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ec90:	2300      	movs	r3, #0
}
 800ec92:	0018      	movs	r0, r3
 800ec94:	46bd      	mov	sp, r7
 800ec96:	b004      	add	sp, #16
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	46c0      	nop			@ (mov r8, r8)
 800ec9c:	dfffffff 	.word	0xdfffffff

0800eca0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2284      	movs	r2, #132	@ 0x84
 800ecae:	5c9b      	ldrb	r3, [r3, r2]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d101      	bne.n	800ecb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	e02e      	b.n	800ed16 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2284      	movs	r2, #132	@ 0x84
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2288      	movs	r2, #136	@ 0x88
 800ecc4:	2124      	movs	r1, #36	@ 0x24
 800ecc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2101      	movs	r1, #1
 800ecdc:	438a      	bics	r2, r1
 800ecde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	08d9      	lsrs	r1, r3, #3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	0018      	movs	r0, r3
 800ecf8:	f000 f854 	bl	800eda4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68fa      	ldr	r2, [r7, #12]
 800ed02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2288      	movs	r2, #136	@ 0x88
 800ed08:	2120      	movs	r1, #32
 800ed0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2284      	movs	r2, #132	@ 0x84
 800ed10:	2100      	movs	r1, #0
 800ed12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	0018      	movs	r0, r3
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	b004      	add	sp, #16
 800ed1c:	bd80      	pop	{r7, pc}
	...

0800ed20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2284      	movs	r2, #132	@ 0x84
 800ed2e:	5c9b      	ldrb	r3, [r3, r2]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d101      	bne.n	800ed38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e02f      	b.n	800ed98 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2284      	movs	r2, #132	@ 0x84
 800ed3c:	2101      	movs	r1, #1
 800ed3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2288      	movs	r2, #136	@ 0x88
 800ed44:	2124      	movs	r1, #36	@ 0x24
 800ed46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	438a      	bics	r2, r1
 800ed5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	4a0e      	ldr	r2, [pc, #56]	@ (800eda0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ed68:	4013      	ands	r3, r2
 800ed6a:	0019      	movs	r1, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	683a      	ldr	r2, [r7, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f000 f813 	bl	800eda4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2288      	movs	r2, #136	@ 0x88
 800ed8a:	2120      	movs	r1, #32
 800ed8c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2284      	movs	r2, #132	@ 0x84
 800ed92:	2100      	movs	r1, #0
 800ed94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	0018      	movs	r0, r3
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	b004      	add	sp, #16
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	f1ffffff 	.word	0xf1ffffff

0800eda4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d108      	bne.n	800edc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	226a      	movs	r2, #106	@ 0x6a
 800edb8:	2101      	movs	r1, #1
 800edba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2268      	movs	r2, #104	@ 0x68
 800edc0:	2101      	movs	r1, #1
 800edc2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edc4:	e043      	b.n	800ee4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edc6:	260f      	movs	r6, #15
 800edc8:	19bb      	adds	r3, r7, r6
 800edca:	2208      	movs	r2, #8
 800edcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800edce:	200e      	movs	r0, #14
 800edd0:	183b      	adds	r3, r7, r0
 800edd2:	2208      	movs	r2, #8
 800edd4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	0e5b      	lsrs	r3, r3, #25
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	240d      	movs	r4, #13
 800ede2:	193b      	adds	r3, r7, r4
 800ede4:	2107      	movs	r1, #7
 800ede6:	400a      	ands	r2, r1
 800ede8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	0f5b      	lsrs	r3, r3, #29
 800edf2:	b2da      	uxtb	r2, r3
 800edf4:	250c      	movs	r5, #12
 800edf6:	197b      	adds	r3, r7, r5
 800edf8:	2107      	movs	r1, #7
 800edfa:	400a      	ands	r2, r1
 800edfc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edfe:	183b      	adds	r3, r7, r0
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	197a      	adds	r2, r7, r5
 800ee04:	7812      	ldrb	r2, [r2, #0]
 800ee06:	4914      	ldr	r1, [pc, #80]	@ (800ee58 <UARTEx_SetNbDataToProcess+0xb4>)
 800ee08:	5c8a      	ldrb	r2, [r1, r2]
 800ee0a:	435a      	muls	r2, r3
 800ee0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee0e:	197b      	adds	r3, r7, r5
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	4a12      	ldr	r2, [pc, #72]	@ (800ee5c <UARTEx_SetNbDataToProcess+0xb8>)
 800ee14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee16:	0019      	movs	r1, r3
 800ee18:	f7f1 fa1c 	bl	8000254 <__divsi3>
 800ee1c:	0003      	movs	r3, r0
 800ee1e:	b299      	uxth	r1, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	226a      	movs	r2, #106	@ 0x6a
 800ee24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee26:	19bb      	adds	r3, r7, r6
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	193a      	adds	r2, r7, r4
 800ee2c:	7812      	ldrb	r2, [r2, #0]
 800ee2e:	490a      	ldr	r1, [pc, #40]	@ (800ee58 <UARTEx_SetNbDataToProcess+0xb4>)
 800ee30:	5c8a      	ldrb	r2, [r1, r2]
 800ee32:	435a      	muls	r2, r3
 800ee34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee36:	193b      	adds	r3, r7, r4
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	4a08      	ldr	r2, [pc, #32]	@ (800ee5c <UARTEx_SetNbDataToProcess+0xb8>)
 800ee3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee3e:	0019      	movs	r1, r3
 800ee40:	f7f1 fa08 	bl	8000254 <__divsi3>
 800ee44:	0003      	movs	r3, r0
 800ee46:	b299      	uxth	r1, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2268      	movs	r2, #104	@ 0x68
 800ee4c:	5299      	strh	r1, [r3, r2]
}
 800ee4e:	46c0      	nop			@ (mov r8, r8)
 800ee50:	46bd      	mov	sp, r7
 800ee52:	b005      	add	sp, #20
 800ee54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee56:	46c0      	nop			@ (mov r8, r8)
 800ee58:	08017288 	.word	0x08017288
 800ee5c:	08017290 	.word	0x08017290

0800ee60 <__NVIC_SetPriority>:
{
 800ee60:	b590      	push	{r4, r7, lr}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	0002      	movs	r2, r0
 800ee68:	6039      	str	r1, [r7, #0]
 800ee6a:	1dfb      	adds	r3, r7, #7
 800ee6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ee6e:	1dfb      	adds	r3, r7, #7
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee74:	d828      	bhi.n	800eec8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ee76:	4a2f      	ldr	r2, [pc, #188]	@ (800ef34 <__NVIC_SetPriority+0xd4>)
 800ee78:	1dfb      	adds	r3, r7, #7
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	b25b      	sxtb	r3, r3
 800ee7e:	089b      	lsrs	r3, r3, #2
 800ee80:	33c0      	adds	r3, #192	@ 0xc0
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	589b      	ldr	r3, [r3, r2]
 800ee86:	1dfa      	adds	r2, r7, #7
 800ee88:	7812      	ldrb	r2, [r2, #0]
 800ee8a:	0011      	movs	r1, r2
 800ee8c:	2203      	movs	r2, #3
 800ee8e:	400a      	ands	r2, r1
 800ee90:	00d2      	lsls	r2, r2, #3
 800ee92:	21ff      	movs	r1, #255	@ 0xff
 800ee94:	4091      	lsls	r1, r2
 800ee96:	000a      	movs	r2, r1
 800ee98:	43d2      	mvns	r2, r2
 800ee9a:	401a      	ands	r2, r3
 800ee9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	019b      	lsls	r3, r3, #6
 800eea2:	22ff      	movs	r2, #255	@ 0xff
 800eea4:	401a      	ands	r2, r3
 800eea6:	1dfb      	adds	r3, r7, #7
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	0018      	movs	r0, r3
 800eeac:	2303      	movs	r3, #3
 800eeae:	4003      	ands	r3, r0
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eeb4:	481f      	ldr	r0, [pc, #124]	@ (800ef34 <__NVIC_SetPriority+0xd4>)
 800eeb6:	1dfb      	adds	r3, r7, #7
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	b25b      	sxtb	r3, r3
 800eebc:	089b      	lsrs	r3, r3, #2
 800eebe:	430a      	orrs	r2, r1
 800eec0:	33c0      	adds	r3, #192	@ 0xc0
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	501a      	str	r2, [r3, r0]
}
 800eec6:	e031      	b.n	800ef2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eec8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef38 <__NVIC_SetPriority+0xd8>)
 800eeca:	1dfb      	adds	r3, r7, #7
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	0019      	movs	r1, r3
 800eed0:	230f      	movs	r3, #15
 800eed2:	400b      	ands	r3, r1
 800eed4:	3b08      	subs	r3, #8
 800eed6:	089b      	lsrs	r3, r3, #2
 800eed8:	3306      	adds	r3, #6
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	18d3      	adds	r3, r2, r3
 800eede:	3304      	adds	r3, #4
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	1dfa      	adds	r2, r7, #7
 800eee4:	7812      	ldrb	r2, [r2, #0]
 800eee6:	0011      	movs	r1, r2
 800eee8:	2203      	movs	r2, #3
 800eeea:	400a      	ands	r2, r1
 800eeec:	00d2      	lsls	r2, r2, #3
 800eeee:	21ff      	movs	r1, #255	@ 0xff
 800eef0:	4091      	lsls	r1, r2
 800eef2:	000a      	movs	r2, r1
 800eef4:	43d2      	mvns	r2, r2
 800eef6:	401a      	ands	r2, r3
 800eef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	019b      	lsls	r3, r3, #6
 800eefe:	22ff      	movs	r2, #255	@ 0xff
 800ef00:	401a      	ands	r2, r3
 800ef02:	1dfb      	adds	r3, r7, #7
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	0018      	movs	r0, r3
 800ef08:	2303      	movs	r3, #3
 800ef0a:	4003      	ands	r3, r0
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ef10:	4809      	ldr	r0, [pc, #36]	@ (800ef38 <__NVIC_SetPriority+0xd8>)
 800ef12:	1dfb      	adds	r3, r7, #7
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	001c      	movs	r4, r3
 800ef18:	230f      	movs	r3, #15
 800ef1a:	4023      	ands	r3, r4
 800ef1c:	3b08      	subs	r3, #8
 800ef1e:	089b      	lsrs	r3, r3, #2
 800ef20:	430a      	orrs	r2, r1
 800ef22:	3306      	adds	r3, #6
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	18c3      	adds	r3, r0, r3
 800ef28:	3304      	adds	r3, #4
 800ef2a:	601a      	str	r2, [r3, #0]
}
 800ef2c:	46c0      	nop			@ (mov r8, r8)
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	b003      	add	sp, #12
 800ef32:	bd90      	pop	{r4, r7, pc}
 800ef34:	e000e100 	.word	0xe000e100
 800ef38:	e000ed00 	.word	0xe000ed00

0800ef3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ef40:	4b05      	ldr	r3, [pc, #20]	@ (800ef58 <SysTick_Handler+0x1c>)
 800ef42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ef44:	f001 fca8 	bl	8010898 <xTaskGetSchedulerState>
 800ef48:	0003      	movs	r3, r0
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d001      	beq.n	800ef52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ef4e:	f002 fae3 	bl	8011518 <xPortSysTickHandler>
  }
}
 800ef52:	46c0      	nop			@ (mov r8, r8)
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	e000e010 	.word	0xe000e010

0800ef5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ef60:	2305      	movs	r3, #5
 800ef62:	425b      	negs	r3, r3
 800ef64:	2100      	movs	r1, #0
 800ef66:	0018      	movs	r0, r3
 800ef68:	f7ff ff7a 	bl	800ee60 <__NVIC_SetPriority>
#endif
}
 800ef6c:	46c0      	nop			@ (mov r8, r8)
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
	...

0800ef74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef7a:	f3ef 8305 	mrs	r3, IPSR
 800ef7e:	603b      	str	r3, [r7, #0]
  return(result);
 800ef80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ef86:	2306      	movs	r3, #6
 800ef88:	425b      	negs	r3, r3
 800ef8a:	607b      	str	r3, [r7, #4]
 800ef8c:	e00c      	b.n	800efa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ef8e:	4b09      	ldr	r3, [pc, #36]	@ (800efb4 <osKernelInitialize+0x40>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d105      	bne.n	800efa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ef96:	4b07      	ldr	r3, [pc, #28]	@ (800efb4 <osKernelInitialize+0x40>)
 800ef98:	2201      	movs	r2, #1
 800ef9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	607b      	str	r3, [r7, #4]
 800efa0:	e002      	b.n	800efa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800efa2:	2301      	movs	r3, #1
 800efa4:	425b      	negs	r3, r3
 800efa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800efa8:	687b      	ldr	r3, [r7, #4]
}
 800efaa:	0018      	movs	r0, r3
 800efac:	46bd      	mov	sp, r7
 800efae:	b002      	add	sp, #8
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	46c0      	nop			@ (mov r8, r8)
 800efb4:	2000295c 	.word	0x2000295c

0800efb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efbe:	f3ef 8305 	mrs	r3, IPSR
 800efc2:	603b      	str	r3, [r7, #0]
  return(result);
 800efc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d003      	beq.n	800efd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800efca:	2306      	movs	r3, #6
 800efcc:	425b      	negs	r3, r3
 800efce:	607b      	str	r3, [r7, #4]
 800efd0:	e010      	b.n	800eff4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800efd2:	4b0b      	ldr	r3, [pc, #44]	@ (800f000 <osKernelStart+0x48>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d109      	bne.n	800efee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800efda:	f7ff ffbf 	bl	800ef5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800efde:	4b08      	ldr	r3, [pc, #32]	@ (800f000 <osKernelStart+0x48>)
 800efe0:	2202      	movs	r2, #2
 800efe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800efe4:	f001 f864 	bl	80100b0 <vTaskStartScheduler>
      stat = osOK;
 800efe8:	2300      	movs	r3, #0
 800efea:	607b      	str	r3, [r7, #4]
 800efec:	e002      	b.n	800eff4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800efee:	2301      	movs	r3, #1
 800eff0:	425b      	negs	r3, r3
 800eff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eff4:	687b      	ldr	r3, [r7, #4]
}
 800eff6:	0018      	movs	r0, r3
 800eff8:	46bd      	mov	sp, r7
 800effa:	b002      	add	sp, #8
 800effc:	bd80      	pop	{r7, pc}
 800effe:	46c0      	nop			@ (mov r8, r8)
 800f000:	2000295c 	.word	0x2000295c

0800f004 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f004:	b5b0      	push	{r4, r5, r7, lr}
 800f006:	b08e      	sub	sp, #56	@ 0x38
 800f008:	af04      	add	r7, sp, #16
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f010:	2300      	movs	r3, #0
 800f012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f014:	f3ef 8305 	mrs	r3, IPSR
 800f018:	617b      	str	r3, [r7, #20]
  return(result);
 800f01a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d000      	beq.n	800f022 <osThreadNew+0x1e>
 800f020:	e082      	b.n	800f128 <osThreadNew+0x124>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d100      	bne.n	800f02a <osThreadNew+0x26>
 800f028:	e07e      	b.n	800f128 <osThreadNew+0x124>
    stack = configMINIMAL_STACK_SIZE;
 800f02a:	2380      	movs	r3, #128	@ 0x80
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f030:	2318      	movs	r3, #24
 800f032:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f034:	2300      	movs	r3, #0
 800f036:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f038:	2301      	movs	r3, #1
 800f03a:	425b      	negs	r3, r3
 800f03c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d044      	beq.n	800f0ce <osThreadNew+0xca>
      if (attr->name != NULL) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <osThreadNew+0x4e>
        name = attr->name;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <osThreadNew+0x5c>
        prio = (UBaseType_t)attr->priority;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d007      	beq.n	800f076 <osThreadNew+0x72>
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	2b38      	cmp	r3, #56	@ 0x38
 800f06a:	d804      	bhi.n	800f076 <osThreadNew+0x72>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	2201      	movs	r2, #1
 800f072:	4013      	ands	r3, r2
 800f074:	d001      	beq.n	800f07a <osThreadNew+0x76>
        return (NULL);
 800f076:	2300      	movs	r3, #0
 800f078:	e057      	b.n	800f12a <osThreadNew+0x126>
      }

      if (attr->stack_size > 0U) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d003      	beq.n	800f08a <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	089b      	lsrs	r3, r3, #2
 800f088:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00e      	beq.n	800f0b0 <osThreadNew+0xac>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	2ba7      	cmp	r3, #167	@ 0xa7
 800f098:	d90a      	bls.n	800f0b0 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d006      	beq.n	800f0b0 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <osThreadNew+0xac>
        mem = 1;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	61bb      	str	r3, [r7, #24]
 800f0ae:	e010      	b.n	800f0d2 <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10c      	bne.n	800f0d2 <osThreadNew+0xce>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d108      	bne.n	800f0d2 <osThreadNew+0xce>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d104      	bne.n	800f0d2 <osThreadNew+0xce>
          mem = 0;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	61bb      	str	r3, [r7, #24]
 800f0cc:	e001      	b.n	800f0d2 <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d112      	bne.n	800f0fe <osThreadNew+0xfa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f0e0:	68bd      	ldr	r5, [r7, #8]
 800f0e2:	6a3c      	ldr	r4, [r7, #32]
 800f0e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	9302      	str	r3, [sp, #8]
 800f0ea:	9201      	str	r2, [sp, #4]
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	002b      	movs	r3, r5
 800f0f2:	0022      	movs	r2, r4
 800f0f4:	f000 fe19 	bl	800fd2a <xTaskCreateStatic>
 800f0f8:	0003      	movs	r3, r0
 800f0fa:	613b      	str	r3, [r7, #16]
 800f0fc:	e014      	b.n	800f128 <osThreadNew+0x124>
      #endif
    }
    else {
      if (mem == 0) {
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d111      	bne.n	800f128 <osThreadNew+0x124>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	b29a      	uxth	r2, r3
 800f108:	68bc      	ldr	r4, [r7, #8]
 800f10a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	2310      	movs	r3, #16
 800f110:	18fb      	adds	r3, r7, r3
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	9300      	str	r3, [sp, #0]
 800f118:	0023      	movs	r3, r4
 800f11a:	f000 fe4d 	bl	800fdb8 <xTaskCreate>
 800f11e:	0003      	movs	r3, r0
 800f120:	2b01      	cmp	r3, #1
 800f122:	d001      	beq.n	800f128 <osThreadNew+0x124>
            hTask = NULL;
 800f124:	2300      	movs	r3, #0
 800f126:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f128:	693b      	ldr	r3, [r7, #16]
}
 800f12a:	0018      	movs	r0, r3
 800f12c:	46bd      	mov	sp, r7
 800f12e:	b00a      	add	sp, #40	@ 0x28
 800f130:	bdb0      	pop	{r4, r5, r7, pc}

0800f132 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f132:	b580      	push	{r7, lr}
 800f134:	b084      	sub	sp, #16
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f13a:	f3ef 8305 	mrs	r3, IPSR
 800f13e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f140:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f142:	2b00      	cmp	r3, #0
 800f144:	d003      	beq.n	800f14e <osDelay+0x1c>
    stat = osErrorISR;
 800f146:	2306      	movs	r3, #6
 800f148:	425b      	negs	r3, r3
 800f14a:	60fb      	str	r3, [r7, #12]
 800f14c:	e008      	b.n	800f160 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800f14e:	2300      	movs	r3, #0
 800f150:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d003      	beq.n	800f160 <osDelay+0x2e>
      vTaskDelay(ticks);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	0018      	movs	r0, r3
 800f15c:	f000 ff82 	bl	8010064 <vTaskDelay>
    }
  }

  return (stat);
 800f160:	68fb      	ldr	r3, [r7, #12]
}
 800f162:	0018      	movs	r0, r3
 800f164:	46bd      	mov	sp, r7
 800f166:	b004      	add	sp, #16
 800f168:	bd80      	pop	{r7, pc}

0800f16a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b084      	sub	sp, #16
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	0018      	movs	r0, r3
 800f176:	f002 f8c3 	bl	8011300 <pvTimerGetTimerID>
 800f17a:	0003      	movs	r3, r0
 800f17c:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d005      	beq.n	800f190 <TimerCallback+0x26>
    callb->func (callb->arg);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	0018      	movs	r0, r3
 800f18e:	4790      	blx	r2
  }
}
 800f190:	46c0      	nop			@ (mov r8, r8)
 800f192:	46bd      	mov	sp, r7
 800f194:	b004      	add	sp, #16
 800f196:	bd80      	pop	{r7, pc}

0800f198 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f198:	b590      	push	{r4, r7, lr}
 800f19a:	b08d      	sub	sp, #52	@ 0x34
 800f19c:	af02      	add	r7, sp, #8
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	240b      	movs	r4, #11
 800f1a6:	193b      	adds	r3, r7, r4
 800f1a8:	1c0a      	adds	r2, r1, #0
 800f1aa:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1b0:	f3ef 8305 	mrs	r3, IPSR
 800f1b4:	613b      	str	r3, [r7, #16]
  return(result);
 800f1b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d000      	beq.n	800f1be <osTimerNew+0x26>
 800f1bc:	e06b      	b.n	800f296 <osTimerNew+0xfe>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d100      	bne.n	800f1c6 <osTimerNew+0x2e>
 800f1c4:	e067      	b.n	800f296 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f1c6:	2008      	movs	r0, #8
 800f1c8:	f002 f9e2 	bl	8011590 <pvPortMalloc>
 800f1cc:	0003      	movs	r3, r0
 800f1ce:	617b      	str	r3, [r7, #20]

    if (callb != NULL) {
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d05f      	beq.n	800f296 <osTimerNew+0xfe>
      callb->func = func;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f1e2:	193b      	adds	r3, r7, r4
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <osTimerNew+0x58>
        reload = pdFALSE;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	e001      	b.n	800f1f4 <osTimerNew+0x5c>
      } else {
        reload = pdTRUE;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	425b      	negs	r3, r3
 800f1f8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d01c      	beq.n	800f23e <osTimerNew+0xa6>
        if (attr->name != NULL) {
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <osTimerNew+0x7a>
          name = attr->name;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d006      	beq.n	800f228 <osTimerNew+0x90>
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f220:	d902      	bls.n	800f228 <osTimerNew+0x90>
          mem = 1;
 800f222:	2301      	movs	r3, #1
 800f224:	61bb      	str	r3, [r7, #24]
 800f226:	e00c      	b.n	800f242 <osTimerNew+0xaa>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d108      	bne.n	800f242 <osTimerNew+0xaa>
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d104      	bne.n	800f242 <osTimerNew+0xaa>
            mem = 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	61bb      	str	r3, [r7, #24]
 800f23c:	e001      	b.n	800f242 <osTimerNew+0xaa>
          }
        }
      }
      else {
        mem = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d10e      	bne.n	800f266 <osTimerNew+0xce>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	6979      	ldr	r1, [r7, #20]
 800f24e:	69fa      	ldr	r2, [r7, #28]
 800f250:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f252:	9301      	str	r3, [sp, #4]
 800f254:	4b12      	ldr	r3, [pc, #72]	@ (800f2a0 <osTimerNew+0x108>)
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	000b      	movs	r3, r1
 800f25a:	2101      	movs	r1, #1
 800f25c:	f001 fd0f 	bl	8010c7e <xTimerCreateStatic>
 800f260:	0003      	movs	r3, r0
 800f262:	623b      	str	r3, [r7, #32]
 800f264:	e00d      	b.n	800f282 <osTimerNew+0xea>
        #endif
      }
      else {
        if (mem == 0) {
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d10a      	bne.n	800f282 <osTimerNew+0xea>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f26c:	6979      	ldr	r1, [r7, #20]
 800f26e:	69fa      	ldr	r2, [r7, #28]
 800f270:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f272:	4b0b      	ldr	r3, [pc, #44]	@ (800f2a0 <osTimerNew+0x108>)
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	000b      	movs	r3, r1
 800f278:	2101      	movs	r1, #1
 800f27a:	f001 fcdd 	bl	8010c38 <xTimerCreate>
 800f27e:	0003      	movs	r3, r0
 800f280:	623b      	str	r3, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f282:	6a3b      	ldr	r3, [r7, #32]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d106      	bne.n	800f296 <osTimerNew+0xfe>
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <osTimerNew+0xfe>
        vPortFree (callb);
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	0018      	movs	r0, r3
 800f292:	f002 fa2d 	bl	80116f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f296:	6a3b      	ldr	r3, [r7, #32]
}
 800f298:	0018      	movs	r0, r3
 800f29a:	46bd      	mov	sp, r7
 800f29c:	b00b      	add	sp, #44	@ 0x2c
 800f29e:	bd90      	pop	{r4, r7, pc}
 800f2a0:	0800f16b 	.word	0x0800f16b

0800f2a4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b088      	sub	sp, #32
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2b2:	f3ef 8305 	mrs	r3, IPSR
 800f2b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <osTimerStart+0x22>
    stat = osErrorISR;
 800f2be:	2306      	movs	r3, #6
 800f2c0:	425b      	negs	r3, r3
 800f2c2:	617b      	str	r3, [r7, #20]
 800f2c4:	e017      	b.n	800f2f6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d103      	bne.n	800f2d4 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f2cc:	2304      	movs	r3, #4
 800f2ce:	425b      	negs	r3, r3
 800f2d0:	617b      	str	r3, [r7, #20]
 800f2d2:	e010      	b.n	800f2f6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f2d4:	683a      	ldr	r2, [r7, #0]
 800f2d6:	6938      	ldr	r0, [r7, #16]
 800f2d8:	2300      	movs	r3, #0
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	2300      	movs	r3, #0
 800f2de:	2104      	movs	r1, #4
 800f2e0:	f001 fd30 	bl	8010d44 <xTimerGenericCommand>
 800f2e4:	0003      	movs	r3, r0
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d102      	bne.n	800f2f0 <osTimerStart+0x4c>
      stat = osOK;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	617b      	str	r3, [r7, #20]
 800f2ee:	e002      	b.n	800f2f6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	425b      	negs	r3, r3
 800f2f4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f2f6:	697b      	ldr	r3, [r7, #20]
}
 800f2f8:	0018      	movs	r0, r3
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	b006      	add	sp, #24
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	4a06      	ldr	r2, [pc, #24]	@ (800f328 <vApplicationGetIdleTaskMemory+0x28>)
 800f310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	4a05      	ldr	r2, [pc, #20]	@ (800f32c <vApplicationGetIdleTaskMemory+0x2c>)
 800f316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2280      	movs	r2, #128	@ 0x80
 800f31c:	0052      	lsls	r2, r2, #1
 800f31e:	601a      	str	r2, [r3, #0]
}
 800f320:	46c0      	nop			@ (mov r8, r8)
 800f322:	46bd      	mov	sp, r7
 800f324:	b004      	add	sp, #16
 800f326:	bd80      	pop	{r7, pc}
 800f328:	20002960 	.word	0x20002960
 800f32c:	20002a08 	.word	0x20002a08

0800f330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	4a06      	ldr	r2, [pc, #24]	@ (800f358 <vApplicationGetTimerTaskMemory+0x28>)
 800f340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	4a05      	ldr	r2, [pc, #20]	@ (800f35c <vApplicationGetTimerTaskMemory+0x2c>)
 800f346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2280      	movs	r2, #128	@ 0x80
 800f34c:	0092      	lsls	r2, r2, #2
 800f34e:	601a      	str	r2, [r3, #0]
}
 800f350:	46c0      	nop			@ (mov r8, r8)
 800f352:	46bd      	mov	sp, r7
 800f354:	b004      	add	sp, #16
 800f356:	bd80      	pop	{r7, pc}
 800f358:	20002e08 	.word	0x20002e08
 800f35c:	20002eb0 	.word	0x20002eb0

0800f360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	3308      	adds	r3, #8
 800f36c:	001a      	movs	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2201      	movs	r2, #1
 800f376:	4252      	negs	r2, r2
 800f378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3308      	adds	r3, #8
 800f37e:	001a      	movs	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3308      	adds	r3, #8
 800f388:	001a      	movs	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f394:	46c0      	nop			@ (mov r8, r8)
 800f396:	46bd      	mov	sp, r7
 800f398:	b002      	add	sp, #8
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3aa:	46c0      	nop			@ (mov r8, r8)
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	b002      	add	sp, #8
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b084      	sub	sp, #16
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]
}
 800f3ee:	46c0      	nop			@ (mov r8, r8)
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	b004      	add	sp, #16
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	3301      	adds	r3, #1
 800f40a:	d103      	bne.n	800f414 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	60fb      	str	r3, [r7, #12]
 800f412:	e00c      	b.n	800f42e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3308      	adds	r3, #8
 800f418:	60fb      	str	r3, [r7, #12]
 800f41a:	e002      	b.n	800f422 <vListInsert+0x2c>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	60fb      	str	r3, [r7, #12]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d2f6      	bcs.n	800f41c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	683a      	ldr	r2, [r7, #0]
 800f43c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	601a      	str	r2, [r3, #0]
}
 800f45a:	46c0      	nop			@ (mov r8, r8)
 800f45c:	46bd      	mov	sp, r7
 800f45e:	b004      	add	sp, #16
 800f460:	bd80      	pop	{r7, pc}

0800f462 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b084      	sub	sp, #16
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	6892      	ldr	r2, [r2, #8]
 800f478:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	6852      	ldr	r2, [r2, #4]
 800f482:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d103      	bne.n	800f496 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	689a      	ldr	r2, [r3, #8]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	1e5a      	subs	r2, r3, #1
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
}
 800f4aa:	0018      	movs	r0, r3
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	b004      	add	sp, #16
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b084      	sub	sp, #16
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d102      	bne.n	800f4cc <xQueueGenericReset+0x1a>
 800f4c6:	b672      	cpsid	i
 800f4c8:	46c0      	nop			@ (mov r8, r8)
 800f4ca:	e7fd      	b.n	800f4c8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800f4cc:	f001 ffc8 	bl	8011460 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4dc:	434b      	muls	r3, r1
 800f4de:	18d2      	adds	r2, r2, r3
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4fa:	1e59      	subs	r1, r3, #1
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f500:	434b      	muls	r3, r1
 800f502:	18d2      	adds	r2, r2, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2244      	movs	r2, #68	@ 0x44
 800f50c:	21ff      	movs	r1, #255	@ 0xff
 800f50e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2245      	movs	r2, #69	@ 0x45
 800f514:	21ff      	movs	r1, #255	@ 0xff
 800f516:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10d      	bne.n	800f53a <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d013      	beq.n	800f54e <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	3310      	adds	r3, #16
 800f52a:	0018      	movs	r0, r3
 800f52c:	f001 f818 	bl	8010560 <xTaskRemoveFromEventList>
 800f530:	1e03      	subs	r3, r0, #0
 800f532:	d00c      	beq.n	800f54e <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f534:	f001 ff84 	bl	8011440 <vPortYield>
 800f538:	e009      	b.n	800f54e <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3310      	adds	r3, #16
 800f53e:	0018      	movs	r0, r3
 800f540:	f7ff ff0e 	bl	800f360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	3324      	adds	r3, #36	@ 0x24
 800f548:	0018      	movs	r0, r3
 800f54a:	f7ff ff09 	bl	800f360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f54e:	f001 ff99 	bl	8011484 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f552:	2301      	movs	r3, #1
}
 800f554:	0018      	movs	r0, r3
 800f556:	46bd      	mov	sp, r7
 800f558:	b004      	add	sp, #16
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f55c:	b590      	push	{r4, r7, lr}
 800f55e:	b089      	sub	sp, #36	@ 0x24
 800f560:	af02      	add	r7, sp, #8
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
 800f568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d102      	bne.n	800f576 <xQueueGenericCreateStatic+0x1a>
 800f570:	b672      	cpsid	i
 800f572:	46c0      	nop			@ (mov r8, r8)
 800f574:	e7fd      	b.n	800f572 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d102      	bne.n	800f582 <xQueueGenericCreateStatic+0x26>
 800f57c:	b672      	cpsid	i
 800f57e:	46c0      	nop			@ (mov r8, r8)
 800f580:	e7fd      	b.n	800f57e <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d002      	beq.n	800f58e <xQueueGenericCreateStatic+0x32>
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <xQueueGenericCreateStatic+0x36>
 800f58e:	2301      	movs	r3, #1
 800f590:	e000      	b.n	800f594 <xQueueGenericCreateStatic+0x38>
 800f592:	2300      	movs	r3, #0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d102      	bne.n	800f59e <xQueueGenericCreateStatic+0x42>
 800f598:	b672      	cpsid	i
 800f59a:	46c0      	nop			@ (mov r8, r8)
 800f59c:	e7fd      	b.n	800f59a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d102      	bne.n	800f5aa <xQueueGenericCreateStatic+0x4e>
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <xQueueGenericCreateStatic+0x52>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e000      	b.n	800f5b0 <xQueueGenericCreateStatic+0x54>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d102      	bne.n	800f5ba <xQueueGenericCreateStatic+0x5e>
 800f5b4:	b672      	cpsid	i
 800f5b6:	46c0      	nop			@ (mov r8, r8)
 800f5b8:	e7fd      	b.n	800f5b6 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5ba:	2350      	movs	r3, #80	@ 0x50
 800f5bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	2b50      	cmp	r3, #80	@ 0x50
 800f5c2:	d002      	beq.n	800f5ca <xQueueGenericCreateStatic+0x6e>
 800f5c4:	b672      	cpsid	i
 800f5c6:	46c0      	nop			@ (mov r8, r8)
 800f5c8:	e7fd      	b.n	800f5c6 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f5ca:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00e      	beq.n	800f5f4 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2246      	movs	r2, #70	@ 0x46
 800f5da:	2101      	movs	r1, #1
 800f5dc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f5de:	2328      	movs	r3, #40	@ 0x28
 800f5e0:	18fb      	adds	r3, r7, r3
 800f5e2:	781c      	ldrb	r4, [r3, #0]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	68b9      	ldr	r1, [r7, #8]
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	0023      	movs	r3, r4
 800f5f0:	f000 f805 	bl	800f5fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f5f4:	697b      	ldr	r3, [r7, #20]
	}
 800f5f6:	0018      	movs	r0, r3
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	b007      	add	sp, #28
 800f5fc:	bd90      	pop	{r4, r7, pc}

0800f5fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f5fe:	b580      	push	{r7, lr}
 800f600:	b084      	sub	sp, #16
 800f602:	af00      	add	r7, sp, #0
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	60b9      	str	r1, [r7, #8]
 800f608:	607a      	str	r2, [r7, #4]
 800f60a:	001a      	movs	r2, r3
 800f60c:	1cfb      	adds	r3, r7, #3
 800f60e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d103      	bne.n	800f61e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	69ba      	ldr	r2, [r7, #24]
 800f61a:	601a      	str	r2, [r3, #0]
 800f61c:	e002      	b.n	800f624 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	2101      	movs	r1, #1
 800f634:	0018      	movs	r0, r3
 800f636:	f7ff ff3c 	bl	800f4b2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	1cfa      	adds	r2, r7, #3
 800f63e:	214c      	movs	r1, #76	@ 0x4c
 800f640:	7812      	ldrb	r2, [r2, #0]
 800f642:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f644:	46c0      	nop			@ (mov r8, r8)
 800f646:	46bd      	mov	sp, r7
 800f648:	b004      	add	sp, #16
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b08a      	sub	sp, #40	@ 0x28
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f65a:	2300      	movs	r3, #0
 800f65c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f662:	6a3b      	ldr	r3, [r7, #32]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <xQueueGenericSend+0x22>
 800f668:	b672      	cpsid	i
 800f66a:	46c0      	nop			@ (mov r8, r8)
 800f66c:	e7fd      	b.n	800f66a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d103      	bne.n	800f67c <xQueueGenericSend+0x30>
 800f674:	6a3b      	ldr	r3, [r7, #32]
 800f676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d101      	bne.n	800f680 <xQueueGenericSend+0x34>
 800f67c:	2301      	movs	r3, #1
 800f67e:	e000      	b.n	800f682 <xQueueGenericSend+0x36>
 800f680:	2300      	movs	r3, #0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d102      	bne.n	800f68c <xQueueGenericSend+0x40>
 800f686:	b672      	cpsid	i
 800f688:	46c0      	nop			@ (mov r8, r8)
 800f68a:	e7fd      	b.n	800f688 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	d103      	bne.n	800f69a <xQueueGenericSend+0x4e>
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f696:	2b01      	cmp	r3, #1
 800f698:	d101      	bne.n	800f69e <xQueueGenericSend+0x52>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e000      	b.n	800f6a0 <xQueueGenericSend+0x54>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d102      	bne.n	800f6aa <xQueueGenericSend+0x5e>
 800f6a4:	b672      	cpsid	i
 800f6a6:	46c0      	nop			@ (mov r8, r8)
 800f6a8:	e7fd      	b.n	800f6a6 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6aa:	f001 f8f5 	bl	8010898 <xTaskGetSchedulerState>
 800f6ae:	1e03      	subs	r3, r0, #0
 800f6b0:	d102      	bne.n	800f6b8 <xQueueGenericSend+0x6c>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d101      	bne.n	800f6bc <xQueueGenericSend+0x70>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e000      	b.n	800f6be <xQueueGenericSend+0x72>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d102      	bne.n	800f6c8 <xQueueGenericSend+0x7c>
 800f6c2:	b672      	cpsid	i
 800f6c4:	46c0      	nop			@ (mov r8, r8)
 800f6c6:	e7fd      	b.n	800f6c4 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6c8:	f001 feca 	bl	8011460 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6cc:	6a3b      	ldr	r3, [r7, #32]
 800f6ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6d0:	6a3b      	ldr	r3, [r7, #32]
 800f6d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d302      	bcc.n	800f6de <xQueueGenericSend+0x92>
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	2b02      	cmp	r3, #2
 800f6dc:	d11e      	bne.n	800f71c <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	68b9      	ldr	r1, [r7, #8]
 800f6e2:	6a3b      	ldr	r3, [r7, #32]
 800f6e4:	0018      	movs	r0, r3
 800f6e6:	f000 f9a8 	bl	800fa3a <prvCopyDataToQueue>
 800f6ea:	0003      	movs	r3, r0
 800f6ec:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6ee:	6a3b      	ldr	r3, [r7, #32]
 800f6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d009      	beq.n	800f70a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6f6:	6a3b      	ldr	r3, [r7, #32]
 800f6f8:	3324      	adds	r3, #36	@ 0x24
 800f6fa:	0018      	movs	r0, r3
 800f6fc:	f000 ff30 	bl	8010560 <xTaskRemoveFromEventList>
 800f700:	1e03      	subs	r3, r0, #0
 800f702:	d007      	beq.n	800f714 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f704:	f001 fe9c 	bl	8011440 <vPortYield>
 800f708:	e004      	b.n	800f714 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d001      	beq.n	800f714 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f710:	f001 fe96 	bl	8011440 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f714:	f001 feb6 	bl	8011484 <vPortExitCritical>
				return pdPASS;
 800f718:	2301      	movs	r3, #1
 800f71a:	e05b      	b.n	800f7d4 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d103      	bne.n	800f72a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f722:	f001 feaf 	bl	8011484 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f726:	2300      	movs	r3, #0
 800f728:	e054      	b.n	800f7d4 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f730:	2314      	movs	r3, #20
 800f732:	18fb      	adds	r3, r7, r3
 800f734:	0018      	movs	r0, r3
 800f736:	f000 ff71 	bl	801061c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f73a:	2301      	movs	r3, #1
 800f73c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f73e:	f001 fea1 	bl	8011484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f742:	f000 fd15 	bl	8010170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f746:	f001 fe8b 	bl	8011460 <vPortEnterCritical>
 800f74a:	6a3b      	ldr	r3, [r7, #32]
 800f74c:	2244      	movs	r2, #68	@ 0x44
 800f74e:	5c9b      	ldrb	r3, [r3, r2]
 800f750:	b25b      	sxtb	r3, r3
 800f752:	3301      	adds	r3, #1
 800f754:	d103      	bne.n	800f75e <xQueueGenericSend+0x112>
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	2244      	movs	r2, #68	@ 0x44
 800f75a:	2100      	movs	r1, #0
 800f75c:	5499      	strb	r1, [r3, r2]
 800f75e:	6a3b      	ldr	r3, [r7, #32]
 800f760:	2245      	movs	r2, #69	@ 0x45
 800f762:	5c9b      	ldrb	r3, [r3, r2]
 800f764:	b25b      	sxtb	r3, r3
 800f766:	3301      	adds	r3, #1
 800f768:	d103      	bne.n	800f772 <xQueueGenericSend+0x126>
 800f76a:	6a3b      	ldr	r3, [r7, #32]
 800f76c:	2245      	movs	r2, #69	@ 0x45
 800f76e:	2100      	movs	r1, #0
 800f770:	5499      	strb	r1, [r3, r2]
 800f772:	f001 fe87 	bl	8011484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f776:	1d3a      	adds	r2, r7, #4
 800f778:	2314      	movs	r3, #20
 800f77a:	18fb      	adds	r3, r7, r3
 800f77c:	0011      	movs	r1, r2
 800f77e:	0018      	movs	r0, r3
 800f780:	f000 ff60 	bl	8010644 <xTaskCheckForTimeOut>
 800f784:	1e03      	subs	r3, r0, #0
 800f786:	d11e      	bne.n	800f7c6 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f788:	6a3b      	ldr	r3, [r7, #32]
 800f78a:	0018      	movs	r0, r3
 800f78c:	f000 fa5a 	bl	800fc44 <prvIsQueueFull>
 800f790:	1e03      	subs	r3, r0, #0
 800f792:	d011      	beq.n	800f7b8 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	3310      	adds	r3, #16
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	0011      	movs	r1, r2
 800f79c:	0018      	movs	r0, r3
 800f79e:	f000 fe97 	bl	80104d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	0018      	movs	r0, r3
 800f7a6:	f000 f9d9 	bl	800fb5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f7aa:	f000 fced 	bl	8010188 <xTaskResumeAll>
 800f7ae:	1e03      	subs	r3, r0, #0
 800f7b0:	d18a      	bne.n	800f6c8 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800f7b2:	f001 fe45 	bl	8011440 <vPortYield>
 800f7b6:	e787      	b.n	800f6c8 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f7b8:	6a3b      	ldr	r3, [r7, #32]
 800f7ba:	0018      	movs	r0, r3
 800f7bc:	f000 f9ce 	bl	800fb5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7c0:	f000 fce2 	bl	8010188 <xTaskResumeAll>
 800f7c4:	e780      	b.n	800f6c8 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	f000 f9c7 	bl	800fb5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7ce:	f000 fcdb 	bl	8010188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f7d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	b00a      	add	sp, #40	@ 0x28
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f7dc:	b590      	push	{r4, r7, lr}
 800f7de:	b08b      	sub	sp, #44	@ 0x2c
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <xQueueGenericSendFromISR+0x1e>
 800f7f4:	b672      	cpsid	i
 800f7f6:	46c0      	nop			@ (mov r8, r8)
 800f7f8:	e7fd      	b.n	800f7f6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d103      	bne.n	800f808 <xQueueGenericSendFromISR+0x2c>
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f804:	2b00      	cmp	r3, #0
 800f806:	d101      	bne.n	800f80c <xQueueGenericSendFromISR+0x30>
 800f808:	2301      	movs	r3, #1
 800f80a:	e000      	b.n	800f80e <xQueueGenericSendFromISR+0x32>
 800f80c:	2300      	movs	r3, #0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <xQueueGenericSendFromISR+0x3c>
 800f812:	b672      	cpsid	i
 800f814:	46c0      	nop			@ (mov r8, r8)
 800f816:	e7fd      	b.n	800f814 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	d103      	bne.n	800f826 <xQueueGenericSendFromISR+0x4a>
 800f81e:	6a3b      	ldr	r3, [r7, #32]
 800f820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f822:	2b01      	cmp	r3, #1
 800f824:	d101      	bne.n	800f82a <xQueueGenericSendFromISR+0x4e>
 800f826:	2301      	movs	r3, #1
 800f828:	e000      	b.n	800f82c <xQueueGenericSendFromISR+0x50>
 800f82a:	2300      	movs	r3, #0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d102      	bne.n	800f836 <xQueueGenericSendFromISR+0x5a>
 800f830:	b672      	cpsid	i
 800f832:	46c0      	nop			@ (mov r8, r8)
 800f834:	e7fd      	b.n	800f832 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f836:	f001 fe3d 	bl	80114b4 <ulSetInterruptMaskFromISR>
 800f83a:	0003      	movs	r3, r0
 800f83c:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f83e:	6a3b      	ldr	r3, [r7, #32]
 800f840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f842:	6a3b      	ldr	r3, [r7, #32]
 800f844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f846:	429a      	cmp	r2, r3
 800f848:	d302      	bcc.n	800f850 <xQueueGenericSendFromISR+0x74>
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	2b02      	cmp	r3, #2
 800f84e:	d131      	bne.n	800f8b4 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f850:	241b      	movs	r4, #27
 800f852:	193b      	adds	r3, r7, r4
 800f854:	6a3a      	ldr	r2, [r7, #32]
 800f856:	2145      	movs	r1, #69	@ 0x45
 800f858:	5c52      	ldrb	r2, [r2, r1]
 800f85a:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f860:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	68b9      	ldr	r1, [r7, #8]
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	0018      	movs	r0, r3
 800f86a:	f000 f8e6 	bl	800fa3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f86e:	193b      	adds	r3, r7, r4
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	b25b      	sxtb	r3, r3
 800f874:	3301      	adds	r3, #1
 800f876:	d111      	bne.n	800f89c <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f878:	6a3b      	ldr	r3, [r7, #32]
 800f87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d016      	beq.n	800f8ae <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f880:	6a3b      	ldr	r3, [r7, #32]
 800f882:	3324      	adds	r3, #36	@ 0x24
 800f884:	0018      	movs	r0, r3
 800f886:	f000 fe6b 	bl	8010560 <xTaskRemoveFromEventList>
 800f88a:	1e03      	subs	r3, r0, #0
 800f88c:	d00f      	beq.n	800f8ae <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00c      	beq.n	800f8ae <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	601a      	str	r2, [r3, #0]
 800f89a:	e008      	b.n	800f8ae <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f89c:	231b      	movs	r3, #27
 800f89e:	18fb      	adds	r3, r7, r3
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	b259      	sxtb	r1, r3
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	2245      	movs	r2, #69	@ 0x45
 800f8ac:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800f8b2:	e001      	b.n	800f8b8 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	0018      	movs	r0, r3
 800f8bc:	f001 fe00 	bl	80114c0 <vClearInterruptMaskFromISR>

	return xReturn;
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f8c2:	0018      	movs	r0, r3
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	b00b      	add	sp, #44	@ 0x2c
 800f8c8:	bd90      	pop	{r4, r7, pc}

0800f8ca <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b08a      	sub	sp, #40	@ 0x28
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	60f8      	str	r0, [r7, #12]
 800f8d2:	60b9      	str	r1, [r7, #8]
 800f8d4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8de:	6a3b      	ldr	r3, [r7, #32]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d102      	bne.n	800f8ea <xQueueReceive+0x20>
 800f8e4:	b672      	cpsid	i
 800f8e6:	46c0      	nop			@ (mov r8, r8)
 800f8e8:	e7fd      	b.n	800f8e6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d103      	bne.n	800f8f8 <xQueueReceive+0x2e>
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <xQueueReceive+0x32>
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e000      	b.n	800f8fe <xQueueReceive+0x34>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d102      	bne.n	800f908 <xQueueReceive+0x3e>
 800f902:	b672      	cpsid	i
 800f904:	46c0      	nop			@ (mov r8, r8)
 800f906:	e7fd      	b.n	800f904 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f908:	f000 ffc6 	bl	8010898 <xTaskGetSchedulerState>
 800f90c:	1e03      	subs	r3, r0, #0
 800f90e:	d102      	bne.n	800f916 <xQueueReceive+0x4c>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d101      	bne.n	800f91a <xQueueReceive+0x50>
 800f916:	2301      	movs	r3, #1
 800f918:	e000      	b.n	800f91c <xQueueReceive+0x52>
 800f91a:	2300      	movs	r3, #0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d102      	bne.n	800f926 <xQueueReceive+0x5c>
 800f920:	b672      	cpsid	i
 800f922:	46c0      	nop			@ (mov r8, r8)
 800f924:	e7fd      	b.n	800f922 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f926:	f001 fd9b 	bl	8011460 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f92e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d01a      	beq.n	800f96c <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	6a3b      	ldr	r3, [r7, #32]
 800f93a:	0011      	movs	r1, r2
 800f93c:	0018      	movs	r0, r3
 800f93e:	f000 f8e7 	bl	800fb10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	1e5a      	subs	r2, r3, #1
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d008      	beq.n	800f964 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	3310      	adds	r3, #16
 800f956:	0018      	movs	r0, r3
 800f958:	f000 fe02 	bl	8010560 <xTaskRemoveFromEventList>
 800f95c:	1e03      	subs	r3, r0, #0
 800f95e:	d001      	beq.n	800f964 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f960:	f001 fd6e 	bl	8011440 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f964:	f001 fd8e 	bl	8011484 <vPortExitCritical>
				return pdPASS;
 800f968:	2301      	movs	r3, #1
 800f96a:	e062      	b.n	800fa32 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d103      	bne.n	800f97a <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f972:	f001 fd87 	bl	8011484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f976:	2300      	movs	r3, #0
 800f978:	e05b      	b.n	800fa32 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d106      	bne.n	800f98e <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f980:	2314      	movs	r3, #20
 800f982:	18fb      	adds	r3, r7, r3
 800f984:	0018      	movs	r0, r3
 800f986:	f000 fe49 	bl	801061c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f98a:	2301      	movs	r3, #1
 800f98c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f98e:	f001 fd79 	bl	8011484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f992:	f000 fbed 	bl	8010170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f996:	f001 fd63 	bl	8011460 <vPortEnterCritical>
 800f99a:	6a3b      	ldr	r3, [r7, #32]
 800f99c:	2244      	movs	r2, #68	@ 0x44
 800f99e:	5c9b      	ldrb	r3, [r3, r2]
 800f9a0:	b25b      	sxtb	r3, r3
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	d103      	bne.n	800f9ae <xQueueReceive+0xe4>
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	2244      	movs	r2, #68	@ 0x44
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	5499      	strb	r1, [r3, r2]
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	2245      	movs	r2, #69	@ 0x45
 800f9b2:	5c9b      	ldrb	r3, [r3, r2]
 800f9b4:	b25b      	sxtb	r3, r3
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	d103      	bne.n	800f9c2 <xQueueReceive+0xf8>
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	2245      	movs	r2, #69	@ 0x45
 800f9be:	2100      	movs	r1, #0
 800f9c0:	5499      	strb	r1, [r3, r2]
 800f9c2:	f001 fd5f 	bl	8011484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9c6:	1d3a      	adds	r2, r7, #4
 800f9c8:	2314      	movs	r3, #20
 800f9ca:	18fb      	adds	r3, r7, r3
 800f9cc:	0011      	movs	r1, r2
 800f9ce:	0018      	movs	r0, r3
 800f9d0:	f000 fe38 	bl	8010644 <xTaskCheckForTimeOut>
 800f9d4:	1e03      	subs	r3, r0, #0
 800f9d6:	d11e      	bne.n	800fa16 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9d8:	6a3b      	ldr	r3, [r7, #32]
 800f9da:	0018      	movs	r0, r3
 800f9dc:	f000 f91c 	bl	800fc18 <prvIsQueueEmpty>
 800f9e0:	1e03      	subs	r3, r0, #0
 800f9e2:	d011      	beq.n	800fa08 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9e4:	6a3b      	ldr	r3, [r7, #32]
 800f9e6:	3324      	adds	r3, #36	@ 0x24
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	0011      	movs	r1, r2
 800f9ec:	0018      	movs	r0, r3
 800f9ee:	f000 fd6f 	bl	80104d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9f2:	6a3b      	ldr	r3, [r7, #32]
 800f9f4:	0018      	movs	r0, r3
 800f9f6:	f000 f8b1 	bl	800fb5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9fa:	f000 fbc5 	bl	8010188 <xTaskResumeAll>
 800f9fe:	1e03      	subs	r3, r0, #0
 800fa00:	d191      	bne.n	800f926 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800fa02:	f001 fd1d 	bl	8011440 <vPortYield>
 800fa06:	e78e      	b.n	800f926 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	f000 f8a6 	bl	800fb5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa10:	f000 fbba 	bl	8010188 <xTaskResumeAll>
 800fa14:	e787      	b.n	800f926 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	0018      	movs	r0, r3
 800fa1a:	f000 f89f 	bl	800fb5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa1e:	f000 fbb3 	bl	8010188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	0018      	movs	r0, r3
 800fa26:	f000 f8f7 	bl	800fc18 <prvIsQueueEmpty>
 800fa2a:	1e03      	subs	r3, r0, #0
 800fa2c:	d100      	bne.n	800fa30 <xQueueReceive+0x166>
 800fa2e:	e77a      	b.n	800f926 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa32:	0018      	movs	r0, r3
 800fa34:	46bd      	mov	sp, r7
 800fa36:	b00a      	add	sp, #40	@ 0x28
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b086      	sub	sp, #24
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa46:	2300      	movs	r3, #0
 800fa48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d10e      	bne.n	800fa76 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d14e      	bne.n	800fafe <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	0018      	movs	r0, r3
 800fa66:	f000 ff33 	bl	80108d0 <xTaskPriorityDisinherit>
 800fa6a:	0003      	movs	r3, r0
 800fa6c:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2200      	movs	r2, #0
 800fa72:	609a      	str	r2, [r3, #8]
 800fa74:	e043      	b.n	800fafe <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d119      	bne.n	800fab0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6858      	ldr	r0, [r3, #4]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	0019      	movs	r1, r3
 800fa88:	f003 fad0 	bl	801302c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	685a      	ldr	r2, [r3, #4]
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa94:	18d2      	adds	r2, r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d32b      	bcc.n	800fafe <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	605a      	str	r2, [r3, #4]
 800faae:	e026      	b.n	800fafe <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	68d8      	ldr	r0, [r3, #12]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	0019      	movs	r1, r3
 800fabc:	f003 fab6 	bl	801302c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	68da      	ldr	r2, [r3, #12]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fac8:	425b      	negs	r3, r3
 800faca:	18d2      	adds	r2, r2, r3
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	68da      	ldr	r2, [r3, #12]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d207      	bcs.n	800faec <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	689a      	ldr	r2, [r3, #8]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae4:	425b      	negs	r3, r3
 800fae6:	18d2      	adds	r2, r2, r3
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d105      	bne.n	800fafe <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	3b01      	subs	r3, #1
 800fafc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fb06:	697b      	ldr	r3, [r7, #20]
}
 800fb08:	0018      	movs	r0, r3
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	b006      	add	sp, #24
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d018      	beq.n	800fb54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68da      	ldr	r2, [r3, #12]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2a:	18d2      	adds	r2, r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	68da      	ldr	r2, [r3, #12]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d303      	bcc.n	800fb44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68d9      	ldr	r1, [r3, #12]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	0018      	movs	r0, r3
 800fb50:	f003 fa6c 	bl	801302c <memcpy>
	}
}
 800fb54:	46c0      	nop			@ (mov r8, r8)
 800fb56:	46bd      	mov	sp, r7
 800fb58:	b002      	add	sp, #8
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fb64:	f001 fc7c 	bl	8011460 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fb68:	230f      	movs	r3, #15
 800fb6a:	18fb      	adds	r3, r7, r3
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	2145      	movs	r1, #69	@ 0x45
 800fb70:	5c52      	ldrb	r2, [r2, r1]
 800fb72:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb74:	e013      	b.n	800fb9e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d016      	beq.n	800fbac <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	3324      	adds	r3, #36	@ 0x24
 800fb82:	0018      	movs	r0, r3
 800fb84:	f000 fcec 	bl	8010560 <xTaskRemoveFromEventList>
 800fb88:	1e03      	subs	r3, r0, #0
 800fb8a:	d001      	beq.n	800fb90 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb8c:	f000 fdac 	bl	80106e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb90:	210f      	movs	r1, #15
 800fb92:	187b      	adds	r3, r7, r1
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	3b01      	subs	r3, #1
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	187b      	adds	r3, r7, r1
 800fb9c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb9e:	230f      	movs	r3, #15
 800fba0:	18fb      	adds	r3, r7, r3
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	b25b      	sxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	dce5      	bgt.n	800fb76 <prvUnlockQueue+0x1a>
 800fbaa:	e000      	b.n	800fbae <prvUnlockQueue+0x52>
					break;
 800fbac:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2245      	movs	r2, #69	@ 0x45
 800fbb2:	21ff      	movs	r1, #255	@ 0xff
 800fbb4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800fbb6:	f001 fc65 	bl	8011484 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fbba:	f001 fc51 	bl	8011460 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fbbe:	230e      	movs	r3, #14
 800fbc0:	18fb      	adds	r3, r7, r3
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	2144      	movs	r1, #68	@ 0x44
 800fbc6:	5c52      	ldrb	r2, [r2, r1]
 800fbc8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbca:	e013      	b.n	800fbf4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d016      	beq.n	800fc02 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	3310      	adds	r3, #16
 800fbd8:	0018      	movs	r0, r3
 800fbda:	f000 fcc1 	bl	8010560 <xTaskRemoveFromEventList>
 800fbde:	1e03      	subs	r3, r0, #0
 800fbe0:	d001      	beq.n	800fbe6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800fbe2:	f000 fd81 	bl	80106e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fbe6:	210e      	movs	r1, #14
 800fbe8:	187b      	adds	r3, r7, r1
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	3b01      	subs	r3, #1
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	187b      	adds	r3, r7, r1
 800fbf2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbf4:	230e      	movs	r3, #14
 800fbf6:	18fb      	adds	r3, r7, r3
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	b25b      	sxtb	r3, r3
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	dce5      	bgt.n	800fbcc <prvUnlockQueue+0x70>
 800fc00:	e000      	b.n	800fc04 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800fc02:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2244      	movs	r2, #68	@ 0x44
 800fc08:	21ff      	movs	r1, #255	@ 0xff
 800fc0a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800fc0c:	f001 fc3a 	bl	8011484 <vPortExitCritical>
}
 800fc10:	46c0      	nop			@ (mov r8, r8)
 800fc12:	46bd      	mov	sp, r7
 800fc14:	b004      	add	sp, #16
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc20:	f001 fc1e 	bl	8011460 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d102      	bne.n	800fc32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	60fb      	str	r3, [r7, #12]
 800fc30:	e001      	b.n	800fc36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc36:	f001 fc25 	bl	8011484 <vPortExitCritical>

	return xReturn;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
}
 800fc3c:	0018      	movs	r0, r3
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	b004      	add	sp, #16
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc4c:	f001 fc08 	bl	8011460 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d102      	bne.n	800fc62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	60fb      	str	r3, [r7, #12]
 800fc60:	e001      	b.n	800fc66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fc62:	2300      	movs	r3, #0
 800fc64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc66:	f001 fc0d 	bl	8011484 <vPortExitCritical>

	return xReturn;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
}
 800fc6c:	0018      	movs	r0, r3
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	b004      	add	sp, #16
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc7e:	2300      	movs	r3, #0
 800fc80:	60fb      	str	r3, [r7, #12]
 800fc82:	e015      	b.n	800fcb0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fc84:	4b0e      	ldr	r3, [pc, #56]	@ (800fcc0 <vQueueAddToRegistry+0x4c>)
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	00d2      	lsls	r2, r2, #3
 800fc8a:	58d3      	ldr	r3, [r2, r3]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d10c      	bne.n	800fcaa <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc90:	4b0b      	ldr	r3, [pc, #44]	@ (800fcc0 <vQueueAddToRegistry+0x4c>)
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	00d2      	lsls	r2, r2, #3
 800fc96:	6839      	ldr	r1, [r7, #0]
 800fc98:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc9a:	4a09      	ldr	r2, [pc, #36]	@ (800fcc0 <vQueueAddToRegistry+0x4c>)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	00db      	lsls	r3, r3, #3
 800fca0:	18d3      	adds	r3, r2, r3
 800fca2:	3304      	adds	r3, #4
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fca8:	e006      	b.n	800fcb8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3301      	adds	r3, #1
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2b07      	cmp	r3, #7
 800fcb4:	d9e6      	bls.n	800fc84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fcb6:	46c0      	nop			@ (mov r8, r8)
 800fcb8:	46c0      	nop			@ (mov r8, r8)
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	b004      	add	sp, #16
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	200036b0 	.word	0x200036b0

0800fcc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fcd4:	f001 fbc4 	bl	8011460 <vPortEnterCritical>
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	2244      	movs	r2, #68	@ 0x44
 800fcdc:	5c9b      	ldrb	r3, [r3, r2]
 800fcde:	b25b      	sxtb	r3, r3
 800fce0:	3301      	adds	r3, #1
 800fce2:	d103      	bne.n	800fcec <vQueueWaitForMessageRestricted+0x28>
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	2244      	movs	r2, #68	@ 0x44
 800fce8:	2100      	movs	r1, #0
 800fcea:	5499      	strb	r1, [r3, r2]
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2245      	movs	r2, #69	@ 0x45
 800fcf0:	5c9b      	ldrb	r3, [r3, r2]
 800fcf2:	b25b      	sxtb	r3, r3
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	d103      	bne.n	800fd00 <vQueueWaitForMessageRestricted+0x3c>
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2245      	movs	r2, #69	@ 0x45
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	5499      	strb	r1, [r3, r2]
 800fd00:	f001 fbc0 	bl	8011484 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d106      	bne.n	800fd1a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	3324      	adds	r3, #36	@ 0x24
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	68b9      	ldr	r1, [r7, #8]
 800fd14:	0018      	movs	r0, r3
 800fd16:	f000 fbfb 	bl	8010510 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	0018      	movs	r0, r3
 800fd1e:	f7ff ff1d 	bl	800fb5c <prvUnlockQueue>
	}
 800fd22:	46c0      	nop			@ (mov r8, r8)
 800fd24:	46bd      	mov	sp, r7
 800fd26:	b006      	add	sp, #24
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fd2a:	b590      	push	{r4, r7, lr}
 800fd2c:	b08d      	sub	sp, #52	@ 0x34
 800fd2e:	af04      	add	r7, sp, #16
 800fd30:	60f8      	str	r0, [r7, #12]
 800fd32:	60b9      	str	r1, [r7, #8]
 800fd34:	607a      	str	r2, [r7, #4]
 800fd36:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fd38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d102      	bne.n	800fd44 <xTaskCreateStatic+0x1a>
 800fd3e:	b672      	cpsid	i
 800fd40:	46c0      	nop			@ (mov r8, r8)
 800fd42:	e7fd      	b.n	800fd40 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800fd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d102      	bne.n	800fd50 <xTaskCreateStatic+0x26>
 800fd4a:	b672      	cpsid	i
 800fd4c:	46c0      	nop			@ (mov r8, r8)
 800fd4e:	e7fd      	b.n	800fd4c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fd50:	23a8      	movs	r3, #168	@ 0xa8
 800fd52:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	2ba8      	cmp	r3, #168	@ 0xa8
 800fd58:	d002      	beq.n	800fd60 <xTaskCreateStatic+0x36>
 800fd5a:	b672      	cpsid	i
 800fd5c:	46c0      	nop			@ (mov r8, r8)
 800fd5e:	e7fd      	b.n	800fd5c <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fd60:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d020      	beq.n	800fdaa <xTaskCreateStatic+0x80>
 800fd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d01d      	beq.n	800fdaa <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd70:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	22a5      	movs	r2, #165	@ 0xa5
 800fd7c:	2102      	movs	r1, #2
 800fd7e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fd80:	683c      	ldr	r4, [r7, #0]
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	68b9      	ldr	r1, [r7, #8]
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	2300      	movs	r3, #0
 800fd8a:	9303      	str	r3, [sp, #12]
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	9302      	str	r3, [sp, #8]
 800fd90:	2318      	movs	r3, #24
 800fd92:	18fb      	adds	r3, r7, r3
 800fd94:	9301      	str	r3, [sp, #4]
 800fd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	0023      	movs	r3, r4
 800fd9c:	f000 f858 	bl	800fe50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	0018      	movs	r0, r3
 800fda4:	f000 f8f6 	bl	800ff94 <prvAddNewTaskToReadyList>
 800fda8:	e001      	b.n	800fdae <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fdae:	69bb      	ldr	r3, [r7, #24]
	}
 800fdb0:	0018      	movs	r0, r3
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	b009      	add	sp, #36	@ 0x24
 800fdb6:	bd90      	pop	{r4, r7, pc}

0800fdb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fdb8:	b590      	push	{r4, r7, lr}
 800fdba:	b08d      	sub	sp, #52	@ 0x34
 800fdbc:	af04      	add	r7, sp, #16
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	1dbb      	adds	r3, r7, #6
 800fdc6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fdc8:	1dbb      	adds	r3, r7, #6
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	0018      	movs	r0, r3
 800fdd0:	f001 fbde 	bl	8011590 <pvPortMalloc>
 800fdd4:	0003      	movs	r3, r0
 800fdd6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d010      	beq.n	800fe00 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fdde:	20a8      	movs	r0, #168	@ 0xa8
 800fde0:	f001 fbd6 	bl	8011590 <pvPortMalloc>
 800fde4:	0003      	movs	r3, r0
 800fde6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d003      	beq.n	800fdf6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	697a      	ldr	r2, [r7, #20]
 800fdf2:	631a      	str	r2, [r3, #48]	@ 0x30
 800fdf4:	e006      	b.n	800fe04 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	0018      	movs	r0, r3
 800fdfa:	f001 fc79 	bl	80116f0 <vPortFree>
 800fdfe:	e001      	b.n	800fe04 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fe00:	2300      	movs	r3, #0
 800fe02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d01a      	beq.n	800fe40 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	22a5      	movs	r2, #165	@ 0xa5
 800fe0e:	2100      	movs	r1, #0
 800fe10:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fe12:	1dbb      	adds	r3, r7, #6
 800fe14:	881a      	ldrh	r2, [r3, #0]
 800fe16:	683c      	ldr	r4, [r7, #0]
 800fe18:	68b9      	ldr	r1, [r7, #8]
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	9302      	str	r3, [sp, #8]
 800fe24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe26:	9301      	str	r3, [sp, #4]
 800fe28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	0023      	movs	r3, r4
 800fe2e:	f000 f80f 	bl	800fe50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	0018      	movs	r0, r3
 800fe36:	f000 f8ad 	bl	800ff94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	61bb      	str	r3, [r7, #24]
 800fe3e:	e002      	b.n	800fe46 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe40:	2301      	movs	r3, #1
 800fe42:	425b      	negs	r3, r3
 800fe44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fe46:	69bb      	ldr	r3, [r7, #24]
	}
 800fe48:	0018      	movs	r0, r3
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	b009      	add	sp, #36	@ 0x24
 800fe4e:	bd90      	pop	{r4, r7, pc}

0800fe50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
 800fe5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fe5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	001a      	movs	r2, r3
 800fe68:	21a5      	movs	r1, #165	@ 0xa5
 800fe6a:	f002 ffed 	bl	8012e48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4943      	ldr	r1, [pc, #268]	@ (800ff84 <prvInitialiseNewTask+0x134>)
 800fe76:	468c      	mov	ip, r1
 800fe78:	4463      	add	r3, ip
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	18d3      	adds	r3, r2, r3
 800fe7e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	2207      	movs	r2, #7
 800fe84:	4393      	bics	r3, r2
 800fe86:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	2207      	movs	r2, #7
 800fe8c:	4013      	ands	r3, r2
 800fe8e:	d002      	beq.n	800fe96 <prvInitialiseNewTask+0x46>
 800fe90:	b672      	cpsid	i
 800fe92:	46c0      	nop			@ (mov r8, r8)
 800fe94:	e7fd      	b.n	800fe92 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d020      	beq.n	800fede <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	617b      	str	r3, [r7, #20]
 800fea0:	e013      	b.n	800feca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	18d3      	adds	r3, r2, r3
 800fea8:	7818      	ldrb	r0, [r3, #0]
 800feaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800feac:	2134      	movs	r1, #52	@ 0x34
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	18d3      	adds	r3, r2, r3
 800feb2:	185b      	adds	r3, r3, r1
 800feb4:	1c02      	adds	r2, r0, #0
 800feb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	18d3      	adds	r3, r2, r3
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d006      	beq.n	800fed2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	3301      	adds	r3, #1
 800fec8:	617b      	str	r3, [r7, #20]
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	2b0f      	cmp	r3, #15
 800fece:	d9e8      	bls.n	800fea2 <prvInitialiseNewTask+0x52>
 800fed0:	e000      	b.n	800fed4 <prvInitialiseNewTask+0x84>
			{
				break;
 800fed2:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed6:	2243      	movs	r2, #67	@ 0x43
 800fed8:	2100      	movs	r1, #0
 800feda:	5499      	strb	r1, [r3, r2]
 800fedc:	e003      	b.n	800fee6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fee0:	2234      	movs	r2, #52	@ 0x34
 800fee2:	2100      	movs	r1, #0
 800fee4:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fee6:	6a3b      	ldr	r3, [r7, #32]
 800fee8:	2b37      	cmp	r3, #55	@ 0x37
 800feea:	d901      	bls.n	800fef0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800feec:	2337      	movs	r3, #55	@ 0x37
 800feee:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef2:	6a3a      	ldr	r2, [r7, #32]
 800fef4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef8:	6a3a      	ldr	r2, [r7, #32]
 800fefa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefe:	2200      	movs	r2, #0
 800ff00:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff04:	3304      	adds	r3, #4
 800ff06:	0018      	movs	r0, r3
 800ff08:	f7ff fa48 	bl	800f39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ff0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0e:	3318      	adds	r3, #24
 800ff10:	0018      	movs	r0, r3
 800ff12:	f7ff fa43 	bl	800f39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ff16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff1c:	6a3b      	ldr	r3, [r7, #32]
 800ff1e:	2238      	movs	r2, #56	@ 0x38
 800ff20:	1ad2      	subs	r2, r2, r3
 800ff22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff2a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	22a0      	movs	r2, #160	@ 0xa0
 800ff30:	2100      	movs	r1, #0
 800ff32:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff36:	22a4      	movs	r2, #164	@ 0xa4
 800ff38:	2100      	movs	r1, #0
 800ff3a:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ff3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3e:	3354      	adds	r3, #84	@ 0x54
 800ff40:	224c      	movs	r2, #76	@ 0x4c
 800ff42:	2100      	movs	r1, #0
 800ff44:	0018      	movs	r0, r3
 800ff46:	f002 ff7f 	bl	8012e48 <memset>
 800ff4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff4c:	4a0e      	ldr	r2, [pc, #56]	@ (800ff88 <prvInitialiseNewTask+0x138>)
 800ff4e:	659a      	str	r2, [r3, #88]	@ 0x58
 800ff50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff52:	4a0e      	ldr	r2, [pc, #56]	@ (800ff8c <prvInitialiseNewTask+0x13c>)
 800ff54:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ff56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff58:	4a0d      	ldr	r2, [pc, #52]	@ (800ff90 <prvInitialiseNewTask+0x140>)
 800ff5a:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	68f9      	ldr	r1, [r7, #12]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	0018      	movs	r0, r3
 800ff64:	f001 f9e4 	bl	8011330 <pxPortInitialiseStack>
 800ff68:	0002      	movs	r2, r0
 800ff6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d002      	beq.n	800ff7a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff7a:	46c0      	nop			@ (mov r8, r8)
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	b006      	add	sp, #24
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	46c0      	nop			@ (mov r8, r8)
 800ff84:	3fffffff 	.word	0x3fffffff
 800ff88:	2000713c 	.word	0x2000713c
 800ff8c:	200071a4 	.word	0x200071a4
 800ff90:	2000720c 	.word	0x2000720c

0800ff94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff9c:	f001 fa60 	bl	8011460 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ffa0:	4b2a      	ldr	r3, [pc, #168]	@ (801004c <prvAddNewTaskToReadyList+0xb8>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	1c5a      	adds	r2, r3, #1
 800ffa6:	4b29      	ldr	r3, [pc, #164]	@ (801004c <prvAddNewTaskToReadyList+0xb8>)
 800ffa8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ffaa:	4b29      	ldr	r3, [pc, #164]	@ (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d109      	bne.n	800ffc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ffb2:	4b27      	ldr	r3, [pc, #156]	@ (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ffb8:	4b24      	ldr	r3, [pc, #144]	@ (801004c <prvAddNewTaskToReadyList+0xb8>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d110      	bne.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ffc0:	f000 fbac 	bl	801071c <prvInitialiseTaskLists>
 800ffc4:	e00d      	b.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ffc6:	4b23      	ldr	r3, [pc, #140]	@ (8010054 <prvAddNewTaskToReadyList+0xc0>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d109      	bne.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ffce:	4b20      	ldr	r3, [pc, #128]	@ (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d802      	bhi.n	800ffe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ffdc:	4b1c      	ldr	r3, [pc, #112]	@ (8010050 <prvAddNewTaskToReadyList+0xbc>)
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ffe2:	4b1d      	ldr	r3, [pc, #116]	@ (8010058 <prvAddNewTaskToReadyList+0xc4>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	4b1b      	ldr	r3, [pc, #108]	@ (8010058 <prvAddNewTaskToReadyList+0xc4>)
 800ffea:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ffec:	4b1a      	ldr	r3, [pc, #104]	@ (8010058 <prvAddNewTaskToReadyList+0xc4>)
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff8:	4b18      	ldr	r3, [pc, #96]	@ (801005c <prvAddNewTaskToReadyList+0xc8>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d903      	bls.n	8010008 <prvAddNewTaskToReadyList+0x74>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010004:	4b15      	ldr	r3, [pc, #84]	@ (801005c <prvAddNewTaskToReadyList+0xc8>)
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801000c:	0013      	movs	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	189b      	adds	r3, r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	4a12      	ldr	r2, [pc, #72]	@ (8010060 <prvAddNewTaskToReadyList+0xcc>)
 8010016:	189a      	adds	r2, r3, r2
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	3304      	adds	r3, #4
 801001c:	0019      	movs	r1, r3
 801001e:	0010      	movs	r0, r2
 8010020:	f7ff f9c7 	bl	800f3b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010024:	f001 fa2e 	bl	8011484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010028:	4b0a      	ldr	r3, [pc, #40]	@ (8010054 <prvAddNewTaskToReadyList+0xc0>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d008      	beq.n	8010042 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010030:	4b07      	ldr	r3, [pc, #28]	@ (8010050 <prvAddNewTaskToReadyList+0xbc>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003a:	429a      	cmp	r2, r3
 801003c:	d201      	bcs.n	8010042 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801003e:	f001 f9ff 	bl	8011440 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010042:	46c0      	nop			@ (mov r8, r8)
 8010044:	46bd      	mov	sp, r7
 8010046:	b002      	add	sp, #8
 8010048:	bd80      	pop	{r7, pc}
 801004a:	46c0      	nop			@ (mov r8, r8)
 801004c:	20003bc4 	.word	0x20003bc4
 8010050:	200036f0 	.word	0x200036f0
 8010054:	20003bd0 	.word	0x20003bd0
 8010058:	20003be0 	.word	0x20003be0
 801005c:	20003bcc 	.word	0x20003bcc
 8010060:	200036f4 	.word	0x200036f4

08010064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801006c:	2300      	movs	r3, #0
 801006e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d011      	beq.n	801009a <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010076:	4b0d      	ldr	r3, [pc, #52]	@ (80100ac <vTaskDelay+0x48>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d002      	beq.n	8010084 <vTaskDelay+0x20>
 801007e:	b672      	cpsid	i
 8010080:	46c0      	nop			@ (mov r8, r8)
 8010082:	e7fd      	b.n	8010080 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8010084:	f000 f874 	bl	8010170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2100      	movs	r1, #0
 801008c:	0018      	movs	r0, r3
 801008e:	f000 fd3f 	bl	8010b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010092:	f000 f879 	bl	8010188 <xTaskResumeAll>
 8010096:	0003      	movs	r3, r0
 8010098:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80100a0:	f001 f9ce 	bl	8011440 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100a4:	46c0      	nop			@ (mov r8, r8)
 80100a6:	46bd      	mov	sp, r7
 80100a8:	b004      	add	sp, #16
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20003bec 	.word	0x20003bec

080100b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80100b0:	b590      	push	{r4, r7, lr}
 80100b2:	b089      	sub	sp, #36	@ 0x24
 80100b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80100ba:	2300      	movs	r3, #0
 80100bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80100be:	003a      	movs	r2, r7
 80100c0:	1d39      	adds	r1, r7, #4
 80100c2:	2308      	movs	r3, #8
 80100c4:	18fb      	adds	r3, r7, r3
 80100c6:	0018      	movs	r0, r3
 80100c8:	f7ff f91a 	bl	800f300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80100cc:	683c      	ldr	r4, [r7, #0]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	68ba      	ldr	r2, [r7, #8]
 80100d2:	491f      	ldr	r1, [pc, #124]	@ (8010150 <vTaskStartScheduler+0xa0>)
 80100d4:	481f      	ldr	r0, [pc, #124]	@ (8010154 <vTaskStartScheduler+0xa4>)
 80100d6:	9202      	str	r2, [sp, #8]
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	2300      	movs	r3, #0
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	2300      	movs	r3, #0
 80100e0:	0022      	movs	r2, r4
 80100e2:	f7ff fe22 	bl	800fd2a <xTaskCreateStatic>
 80100e6:	0002      	movs	r2, r0
 80100e8:	4b1b      	ldr	r3, [pc, #108]	@ (8010158 <vTaskStartScheduler+0xa8>)
 80100ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80100ec:	4b1a      	ldr	r3, [pc, #104]	@ (8010158 <vTaskStartScheduler+0xa8>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d002      	beq.n	80100fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80100f4:	2301      	movs	r3, #1
 80100f6:	60fb      	str	r3, [r7, #12]
 80100f8:	e001      	b.n	80100fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b01      	cmp	r3, #1
 8010102:	d103      	bne.n	801010c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8010104:	f000 fd58 	bl	8010bb8 <xTimerCreateTimerTask>
 8010108:	0003      	movs	r3, r0
 801010a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2b01      	cmp	r3, #1
 8010110:	d113      	bne.n	801013a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8010112:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010114:	4b11      	ldr	r3, [pc, #68]	@ (801015c <vTaskStartScheduler+0xac>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3354      	adds	r3, #84	@ 0x54
 801011a:	001a      	movs	r2, r3
 801011c:	4b10      	ldr	r3, [pc, #64]	@ (8010160 <vTaskStartScheduler+0xb0>)
 801011e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010120:	4b10      	ldr	r3, [pc, #64]	@ (8010164 <vTaskStartScheduler+0xb4>)
 8010122:	2201      	movs	r2, #1
 8010124:	4252      	negs	r2, r2
 8010126:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010128:	4b0f      	ldr	r3, [pc, #60]	@ (8010168 <vTaskStartScheduler+0xb8>)
 801012a:	2201      	movs	r2, #1
 801012c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801012e:	4b0f      	ldr	r3, [pc, #60]	@ (801016c <vTaskStartScheduler+0xbc>)
 8010130:	2200      	movs	r2, #0
 8010132:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010134:	f001 f960 	bl	80113f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010138:	e005      	b.n	8010146 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3301      	adds	r3, #1
 801013e:	d102      	bne.n	8010146 <vTaskStartScheduler+0x96>
 8010140:	b672      	cpsid	i
 8010142:	46c0      	nop			@ (mov r8, r8)
 8010144:	e7fd      	b.n	8010142 <vTaskStartScheduler+0x92>
}
 8010146:	46c0      	nop			@ (mov r8, r8)
 8010148:	46bd      	mov	sp, r7
 801014a:	b005      	add	sp, #20
 801014c:	bd90      	pop	{r4, r7, pc}
 801014e:	46c0      	nop			@ (mov r8, r8)
 8010150:	08017078 	.word	0x08017078
 8010154:	080106fd 	.word	0x080106fd
 8010158:	20003be8 	.word	0x20003be8
 801015c:	200036f0 	.word	0x200036f0
 8010160:	20000094 	.word	0x20000094
 8010164:	20003be4 	.word	0x20003be4
 8010168:	20003bd0 	.word	0x20003bd0
 801016c:	20003bc8 	.word	0x20003bc8

08010170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010174:	4b03      	ldr	r3, [pc, #12]	@ (8010184 <vTaskSuspendAll+0x14>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	4b02      	ldr	r3, [pc, #8]	@ (8010184 <vTaskSuspendAll+0x14>)
 801017c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801017e:	46c0      	nop			@ (mov r8, r8)
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	20003bec 	.word	0x20003bec

08010188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010192:	2300      	movs	r3, #0
 8010194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010196:	4b3a      	ldr	r3, [pc, #232]	@ (8010280 <xTaskResumeAll+0xf8>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d102      	bne.n	80101a4 <xTaskResumeAll+0x1c>
 801019e:	b672      	cpsid	i
 80101a0:	46c0      	nop			@ (mov r8, r8)
 80101a2:	e7fd      	b.n	80101a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80101a4:	f001 f95c 	bl	8011460 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101a8:	4b35      	ldr	r3, [pc, #212]	@ (8010280 <xTaskResumeAll+0xf8>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	1e5a      	subs	r2, r3, #1
 80101ae:	4b34      	ldr	r3, [pc, #208]	@ (8010280 <xTaskResumeAll+0xf8>)
 80101b0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101b2:	4b33      	ldr	r3, [pc, #204]	@ (8010280 <xTaskResumeAll+0xf8>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d15b      	bne.n	8010272 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101ba:	4b32      	ldr	r3, [pc, #200]	@ (8010284 <xTaskResumeAll+0xfc>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d057      	beq.n	8010272 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101c2:	e02f      	b.n	8010224 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c4:	4b30      	ldr	r3, [pc, #192]	@ (8010288 <xTaskResumeAll+0x100>)
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	68db      	ldr	r3, [r3, #12]
 80101ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	3318      	adds	r3, #24
 80101d0:	0018      	movs	r0, r3
 80101d2:	f7ff f946 	bl	800f462 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	3304      	adds	r3, #4
 80101da:	0018      	movs	r0, r3
 80101dc:	f7ff f941 	bl	800f462 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e4:	4b29      	ldr	r3, [pc, #164]	@ (801028c <xTaskResumeAll+0x104>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d903      	bls.n	80101f4 <xTaskResumeAll+0x6c>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f0:	4b26      	ldr	r3, [pc, #152]	@ (801028c <xTaskResumeAll+0x104>)
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f8:	0013      	movs	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	189b      	adds	r3, r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4a23      	ldr	r2, [pc, #140]	@ (8010290 <xTaskResumeAll+0x108>)
 8010202:	189a      	adds	r2, r3, r2
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	3304      	adds	r3, #4
 8010208:	0019      	movs	r1, r3
 801020a:	0010      	movs	r0, r2
 801020c:	f7ff f8d1 	bl	800f3b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010214:	4b1f      	ldr	r3, [pc, #124]	@ (8010294 <xTaskResumeAll+0x10c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801021a:	429a      	cmp	r2, r3
 801021c:	d302      	bcc.n	8010224 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801021e:	4b1e      	ldr	r3, [pc, #120]	@ (8010298 <xTaskResumeAll+0x110>)
 8010220:	2201      	movs	r2, #1
 8010222:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010224:	4b18      	ldr	r3, [pc, #96]	@ (8010288 <xTaskResumeAll+0x100>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d1cb      	bne.n	80101c4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010232:	f000 fb13 	bl	801085c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010236:	4b19      	ldr	r3, [pc, #100]	@ (801029c <xTaskResumeAll+0x114>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00f      	beq.n	8010262 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010242:	f000 f83b 	bl	80102bc <xTaskIncrementTick>
 8010246:	1e03      	subs	r3, r0, #0
 8010248:	d002      	beq.n	8010250 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 801024a:	4b13      	ldr	r3, [pc, #76]	@ (8010298 <xTaskResumeAll+0x110>)
 801024c:	2201      	movs	r2, #1
 801024e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	3b01      	subs	r3, #1
 8010254:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1f2      	bne.n	8010242 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801025c:	4b0f      	ldr	r3, [pc, #60]	@ (801029c <xTaskResumeAll+0x114>)
 801025e:	2200      	movs	r2, #0
 8010260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010262:	4b0d      	ldr	r3, [pc, #52]	@ (8010298 <xTaskResumeAll+0x110>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d003      	beq.n	8010272 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801026a:	2301      	movs	r3, #1
 801026c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801026e:	f001 f8e7 	bl	8011440 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010272:	f001 f907 	bl	8011484 <vPortExitCritical>

	return xAlreadyYielded;
 8010276:	68bb      	ldr	r3, [r7, #8]
}
 8010278:	0018      	movs	r0, r3
 801027a:	46bd      	mov	sp, r7
 801027c:	b004      	add	sp, #16
 801027e:	bd80      	pop	{r7, pc}
 8010280:	20003bec 	.word	0x20003bec
 8010284:	20003bc4 	.word	0x20003bc4
 8010288:	20003b84 	.word	0x20003b84
 801028c:	20003bcc 	.word	0x20003bcc
 8010290:	200036f4 	.word	0x200036f4
 8010294:	200036f0 	.word	0x200036f0
 8010298:	20003bd8 	.word	0x20003bd8
 801029c:	20003bd4 	.word	0x20003bd4

080102a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80102a6:	4b04      	ldr	r3, [pc, #16]	@ (80102b8 <xTaskGetTickCount+0x18>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80102ac:	687b      	ldr	r3, [r7, #4]
}
 80102ae:	0018      	movs	r0, r3
 80102b0:	46bd      	mov	sp, r7
 80102b2:	b002      	add	sp, #8
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	46c0      	nop			@ (mov r8, r8)
 80102b8:	20003bc8 	.word	0x20003bc8

080102bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80102c2:	2300      	movs	r3, #0
 80102c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102c6:	4b4a      	ldr	r3, [pc, #296]	@ (80103f0 <xTaskIncrementTick+0x134>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d000      	beq.n	80102d0 <xTaskIncrementTick+0x14>
 80102ce:	e085      	b.n	80103dc <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102d0:	4b48      	ldr	r3, [pc, #288]	@ (80103f4 <xTaskIncrementTick+0x138>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	3301      	adds	r3, #1
 80102d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102d8:	4b46      	ldr	r3, [pc, #280]	@ (80103f4 <xTaskIncrementTick+0x138>)
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d118      	bne.n	8010316 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80102e4:	4b44      	ldr	r3, [pc, #272]	@ (80103f8 <xTaskIncrementTick+0x13c>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d002      	beq.n	80102f4 <xTaskIncrementTick+0x38>
 80102ee:	b672      	cpsid	i
 80102f0:	46c0      	nop			@ (mov r8, r8)
 80102f2:	e7fd      	b.n	80102f0 <xTaskIncrementTick+0x34>
 80102f4:	4b40      	ldr	r3, [pc, #256]	@ (80103f8 <xTaskIncrementTick+0x13c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	60fb      	str	r3, [r7, #12]
 80102fa:	4b40      	ldr	r3, [pc, #256]	@ (80103fc <xTaskIncrementTick+0x140>)
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	4b3e      	ldr	r3, [pc, #248]	@ (80103f8 <xTaskIncrementTick+0x13c>)
 8010300:	601a      	str	r2, [r3, #0]
 8010302:	4b3e      	ldr	r3, [pc, #248]	@ (80103fc <xTaskIncrementTick+0x140>)
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	601a      	str	r2, [r3, #0]
 8010308:	4b3d      	ldr	r3, [pc, #244]	@ (8010400 <xTaskIncrementTick+0x144>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	1c5a      	adds	r2, r3, #1
 801030e:	4b3c      	ldr	r3, [pc, #240]	@ (8010400 <xTaskIncrementTick+0x144>)
 8010310:	601a      	str	r2, [r3, #0]
 8010312:	f000 faa3 	bl	801085c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010316:	4b3b      	ldr	r3, [pc, #236]	@ (8010404 <xTaskIncrementTick+0x148>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	693a      	ldr	r2, [r7, #16]
 801031c:	429a      	cmp	r2, r3
 801031e:	d349      	bcc.n	80103b4 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010320:	4b35      	ldr	r3, [pc, #212]	@ (80103f8 <xTaskIncrementTick+0x13c>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d104      	bne.n	8010334 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801032a:	4b36      	ldr	r3, [pc, #216]	@ (8010404 <xTaskIncrementTick+0x148>)
 801032c:	2201      	movs	r2, #1
 801032e:	4252      	negs	r2, r2
 8010330:	601a      	str	r2, [r3, #0]
					break;
 8010332:	e03f      	b.n	80103b4 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010334:	4b30      	ldr	r3, [pc, #192]	@ (80103f8 <xTaskIncrementTick+0x13c>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	68db      	ldr	r3, [r3, #12]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010344:	693a      	ldr	r2, [r7, #16]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	429a      	cmp	r2, r3
 801034a:	d203      	bcs.n	8010354 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801034c:	4b2d      	ldr	r3, [pc, #180]	@ (8010404 <xTaskIncrementTick+0x148>)
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010352:	e02f      	b.n	80103b4 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	3304      	adds	r3, #4
 8010358:	0018      	movs	r0, r3
 801035a:	f7ff f882 	bl	800f462 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010362:	2b00      	cmp	r3, #0
 8010364:	d004      	beq.n	8010370 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	3318      	adds	r3, #24
 801036a:	0018      	movs	r0, r3
 801036c:	f7ff f879 	bl	800f462 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010374:	4b24      	ldr	r3, [pc, #144]	@ (8010408 <xTaskIncrementTick+0x14c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	429a      	cmp	r2, r3
 801037a:	d903      	bls.n	8010384 <xTaskIncrementTick+0xc8>
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010380:	4b21      	ldr	r3, [pc, #132]	@ (8010408 <xTaskIncrementTick+0x14c>)
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010388:	0013      	movs	r3, r2
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	189b      	adds	r3, r3, r2
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	4a1e      	ldr	r2, [pc, #120]	@ (801040c <xTaskIncrementTick+0x150>)
 8010392:	189a      	adds	r2, r3, r2
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	3304      	adds	r3, #4
 8010398:	0019      	movs	r1, r3
 801039a:	0010      	movs	r0, r2
 801039c:	f7ff f809 	bl	800f3b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010410 <xTaskIncrementTick+0x154>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d3b8      	bcc.n	8010320 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80103ae:	2301      	movs	r3, #1
 80103b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103b2:	e7b5      	b.n	8010320 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103b4:	4b16      	ldr	r3, [pc, #88]	@ (8010410 <xTaskIncrementTick+0x154>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103ba:	4914      	ldr	r1, [pc, #80]	@ (801040c <xTaskIncrementTick+0x150>)
 80103bc:	0013      	movs	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	189b      	adds	r3, r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	585b      	ldr	r3, [r3, r1]
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d901      	bls.n	80103ce <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 80103ca:	2301      	movs	r3, #1
 80103cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80103ce:	4b11      	ldr	r3, [pc, #68]	@ (8010414 <xTaskIncrementTick+0x158>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d007      	beq.n	80103e6 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80103d6:	2301      	movs	r3, #1
 80103d8:	617b      	str	r3, [r7, #20]
 80103da:	e004      	b.n	80103e6 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80103dc:	4b0e      	ldr	r3, [pc, #56]	@ (8010418 <xTaskIncrementTick+0x15c>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	1c5a      	adds	r2, r3, #1
 80103e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010418 <xTaskIncrementTick+0x15c>)
 80103e4:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80103e6:	697b      	ldr	r3, [r7, #20]
}
 80103e8:	0018      	movs	r0, r3
 80103ea:	46bd      	mov	sp, r7
 80103ec:	b006      	add	sp, #24
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	20003bec 	.word	0x20003bec
 80103f4:	20003bc8 	.word	0x20003bc8
 80103f8:	20003b7c 	.word	0x20003b7c
 80103fc:	20003b80 	.word	0x20003b80
 8010400:	20003bdc 	.word	0x20003bdc
 8010404:	20003be4 	.word	0x20003be4
 8010408:	20003bcc 	.word	0x20003bcc
 801040c:	200036f4 	.word	0x200036f4
 8010410:	200036f0 	.word	0x200036f0
 8010414:	20003bd8 	.word	0x20003bd8
 8010418:	20003bd4 	.word	0x20003bd4

0801041c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010422:	4b25      	ldr	r3, [pc, #148]	@ (80104b8 <vTaskSwitchContext+0x9c>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d003      	beq.n	8010432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801042a:	4b24      	ldr	r3, [pc, #144]	@ (80104bc <vTaskSwitchContext+0xa0>)
 801042c:	2201      	movs	r2, #1
 801042e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010430:	e03e      	b.n	80104b0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010432:	4b22      	ldr	r3, [pc, #136]	@ (80104bc <vTaskSwitchContext+0xa0>)
 8010434:	2200      	movs	r2, #0
 8010436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010438:	4b21      	ldr	r3, [pc, #132]	@ (80104c0 <vTaskSwitchContext+0xa4>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	607b      	str	r3, [r7, #4]
 801043e:	e008      	b.n	8010452 <vTaskSwitchContext+0x36>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d102      	bne.n	801044c <vTaskSwitchContext+0x30>
 8010446:	b672      	cpsid	i
 8010448:	46c0      	nop			@ (mov r8, r8)
 801044a:	e7fd      	b.n	8010448 <vTaskSwitchContext+0x2c>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	3b01      	subs	r3, #1
 8010450:	607b      	str	r3, [r7, #4]
 8010452:	491c      	ldr	r1, [pc, #112]	@ (80104c4 <vTaskSwitchContext+0xa8>)
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	0013      	movs	r3, r2
 8010458:	009b      	lsls	r3, r3, #2
 801045a:	189b      	adds	r3, r3, r2
 801045c:	009b      	lsls	r3, r3, #2
 801045e:	585b      	ldr	r3, [r3, r1]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d0ed      	beq.n	8010440 <vTaskSwitchContext+0x24>
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	0013      	movs	r3, r2
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	189b      	adds	r3, r3, r2
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	4a15      	ldr	r2, [pc, #84]	@ (80104c4 <vTaskSwitchContext+0xa8>)
 8010470:	189b      	adds	r3, r3, r2
 8010472:	603b      	str	r3, [r7, #0]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	685a      	ldr	r2, [r3, #4]
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	605a      	str	r2, [r3, #4]
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	685a      	ldr	r2, [r3, #4]
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	3308      	adds	r3, #8
 8010486:	429a      	cmp	r2, r3
 8010488:	d104      	bne.n	8010494 <vTaskSwitchContext+0x78>
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	685a      	ldr	r2, [r3, #4]
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	605a      	str	r2, [r3, #4]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	4b0b      	ldr	r3, [pc, #44]	@ (80104c8 <vTaskSwitchContext+0xac>)
 801049c:	601a      	str	r2, [r3, #0]
 801049e:	4b08      	ldr	r3, [pc, #32]	@ (80104c0 <vTaskSwitchContext+0xa4>)
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104a4:	4b08      	ldr	r3, [pc, #32]	@ (80104c8 <vTaskSwitchContext+0xac>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	3354      	adds	r3, #84	@ 0x54
 80104aa:	001a      	movs	r2, r3
 80104ac:	4b07      	ldr	r3, [pc, #28]	@ (80104cc <vTaskSwitchContext+0xb0>)
 80104ae:	601a      	str	r2, [r3, #0]
}
 80104b0:	46c0      	nop			@ (mov r8, r8)
 80104b2:	46bd      	mov	sp, r7
 80104b4:	b002      	add	sp, #8
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	20003bec 	.word	0x20003bec
 80104bc:	20003bd8 	.word	0x20003bd8
 80104c0:	20003bcc 	.word	0x20003bcc
 80104c4:	200036f4 	.word	0x200036f4
 80104c8:	200036f0 	.word	0x200036f0
 80104cc:	20000094 	.word	0x20000094

080104d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d102      	bne.n	80104e6 <vTaskPlaceOnEventList+0x16>
 80104e0:	b672      	cpsid	i
 80104e2:	46c0      	nop			@ (mov r8, r8)
 80104e4:	e7fd      	b.n	80104e2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104e6:	4b09      	ldr	r3, [pc, #36]	@ (801050c <vTaskPlaceOnEventList+0x3c>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	3318      	adds	r3, #24
 80104ec:	001a      	movs	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	0011      	movs	r1, r2
 80104f2:	0018      	movs	r0, r3
 80104f4:	f7fe ff7f 	bl	800f3f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	2101      	movs	r1, #1
 80104fc:	0018      	movs	r0, r3
 80104fe:	f000 fb07 	bl	8010b10 <prvAddCurrentTaskToDelayedList>
}
 8010502:	46c0      	nop			@ (mov r8, r8)
 8010504:	46bd      	mov	sp, r7
 8010506:	b002      	add	sp, #8
 8010508:	bd80      	pop	{r7, pc}
 801050a:	46c0      	nop			@ (mov r8, r8)
 801050c:	200036f0 	.word	0x200036f0

08010510 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d102      	bne.n	8010528 <vTaskPlaceOnEventListRestricted+0x18>
 8010522:	b672      	cpsid	i
 8010524:	46c0      	nop			@ (mov r8, r8)
 8010526:	e7fd      	b.n	8010524 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010528:	4b0c      	ldr	r3, [pc, #48]	@ (801055c <vTaskPlaceOnEventListRestricted+0x4c>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	3318      	adds	r3, #24
 801052e:	001a      	movs	r2, r3
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	0011      	movs	r1, r2
 8010534:	0018      	movs	r0, r3
 8010536:	f7fe ff3c 	bl	800f3b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8010540:	2301      	movs	r3, #1
 8010542:	425b      	negs	r3, r3
 8010544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	0011      	movs	r1, r2
 801054c:	0018      	movs	r0, r3
 801054e:	f000 fadf 	bl	8010b10 <prvAddCurrentTaskToDelayedList>
	}
 8010552:	46c0      	nop			@ (mov r8, r8)
 8010554:	46bd      	mov	sp, r7
 8010556:	b004      	add	sp, #16
 8010558:	bd80      	pop	{r7, pc}
 801055a:	46c0      	nop			@ (mov r8, r8)
 801055c:	200036f0 	.word	0x200036f0

08010560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d102      	bne.n	801057c <xTaskRemoveFromEventList+0x1c>
 8010576:	b672      	cpsid	i
 8010578:	46c0      	nop			@ (mov r8, r8)
 801057a:	e7fd      	b.n	8010578 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	3318      	adds	r3, #24
 8010580:	0018      	movs	r0, r3
 8010582:	f7fe ff6e 	bl	800f462 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010586:	4b1f      	ldr	r3, [pc, #124]	@ (8010604 <xTaskRemoveFromEventList+0xa4>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d11d      	bne.n	80105ca <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	3304      	adds	r3, #4
 8010592:	0018      	movs	r0, r3
 8010594:	f7fe ff65 	bl	800f462 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801059c:	4b1a      	ldr	r3, [pc, #104]	@ (8010608 <xTaskRemoveFromEventList+0xa8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d903      	bls.n	80105ac <xTaskRemoveFromEventList+0x4c>
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105a8:	4b17      	ldr	r3, [pc, #92]	@ (8010608 <xTaskRemoveFromEventList+0xa8>)
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105b0:	0013      	movs	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	189b      	adds	r3, r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	4a14      	ldr	r2, [pc, #80]	@ (801060c <xTaskRemoveFromEventList+0xac>)
 80105ba:	189a      	adds	r2, r3, r2
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	3304      	adds	r3, #4
 80105c0:	0019      	movs	r1, r3
 80105c2:	0010      	movs	r0, r2
 80105c4:	f7fe fef5 	bl	800f3b2 <vListInsertEnd>
 80105c8:	e007      	b.n	80105da <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	3318      	adds	r3, #24
 80105ce:	001a      	movs	r2, r3
 80105d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010610 <xTaskRemoveFromEventList+0xb0>)
 80105d2:	0011      	movs	r1, r2
 80105d4:	0018      	movs	r0, r3
 80105d6:	f7fe feec 	bl	800f3b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105de:	4b0d      	ldr	r3, [pc, #52]	@ (8010614 <xTaskRemoveFromEventList+0xb4>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d905      	bls.n	80105f4 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80105e8:	2301      	movs	r3, #1
 80105ea:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80105ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010618 <xTaskRemoveFromEventList+0xb8>)
 80105ee:	2201      	movs	r2, #1
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	e001      	b.n	80105f8 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80105f4:	2300      	movs	r3, #0
 80105f6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80105f8:	68fb      	ldr	r3, [r7, #12]
}
 80105fa:	0018      	movs	r0, r3
 80105fc:	46bd      	mov	sp, r7
 80105fe:	b004      	add	sp, #16
 8010600:	bd80      	pop	{r7, pc}
 8010602:	46c0      	nop			@ (mov r8, r8)
 8010604:	20003bec 	.word	0x20003bec
 8010608:	20003bcc 	.word	0x20003bcc
 801060c:	200036f4 	.word	0x200036f4
 8010610:	20003b84 	.word	0x20003b84
 8010614:	200036f0 	.word	0x200036f0
 8010618:	20003bd8 	.word	0x20003bd8

0801061c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010624:	4b05      	ldr	r3, [pc, #20]	@ (801063c <vTaskInternalSetTimeOutState+0x20>)
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801062c:	4b04      	ldr	r3, [pc, #16]	@ (8010640 <vTaskInternalSetTimeOutState+0x24>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	605a      	str	r2, [r3, #4]
}
 8010634:	46c0      	nop			@ (mov r8, r8)
 8010636:	46bd      	mov	sp, r7
 8010638:	b002      	add	sp, #8
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20003bdc 	.word	0x20003bdc
 8010640:	20003bc8 	.word	0x20003bc8

08010644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d102      	bne.n	801065a <xTaskCheckForTimeOut+0x16>
 8010654:	b672      	cpsid	i
 8010656:	46c0      	nop			@ (mov r8, r8)
 8010658:	e7fd      	b.n	8010656 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d102      	bne.n	8010666 <xTaskCheckForTimeOut+0x22>
 8010660:	b672      	cpsid	i
 8010662:	46c0      	nop			@ (mov r8, r8)
 8010664:	e7fd      	b.n	8010662 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8010666:	f000 fefb 	bl	8011460 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801066a:	4b1d      	ldr	r3, [pc, #116]	@ (80106e0 <xTaskCheckForTimeOut+0x9c>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3301      	adds	r3, #1
 8010680:	d102      	bne.n	8010688 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010682:	2300      	movs	r3, #0
 8010684:	617b      	str	r3, [r7, #20]
 8010686:	e024      	b.n	80106d2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	4b15      	ldr	r3, [pc, #84]	@ (80106e4 <xTaskCheckForTimeOut+0xa0>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	429a      	cmp	r2, r3
 8010692:	d007      	beq.n	80106a4 <xTaskCheckForTimeOut+0x60>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	693a      	ldr	r2, [r7, #16]
 801069a:	429a      	cmp	r2, r3
 801069c:	d302      	bcc.n	80106a4 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801069e:	2301      	movs	r3, #1
 80106a0:	617b      	str	r3, [r7, #20]
 80106a2:	e016      	b.n	80106d2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d20c      	bcs.n	80106c8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	1ad2      	subs	r2, r2, r3
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	0018      	movs	r0, r3
 80106be:	f7ff ffad 	bl	801061c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80106c2:	2300      	movs	r3, #0
 80106c4:	617b      	str	r3, [r7, #20]
 80106c6:	e004      	b.n	80106d2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2200      	movs	r2, #0
 80106cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80106ce:	2301      	movs	r3, #1
 80106d0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80106d2:	f000 fed7 	bl	8011484 <vPortExitCritical>

	return xReturn;
 80106d6:	697b      	ldr	r3, [r7, #20]
}
 80106d8:	0018      	movs	r0, r3
 80106da:	46bd      	mov	sp, r7
 80106dc:	b006      	add	sp, #24
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	20003bc8 	.word	0x20003bc8
 80106e4:	20003bdc 	.word	0x20003bdc

080106e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106ec:	4b02      	ldr	r3, [pc, #8]	@ (80106f8 <vTaskMissedYield+0x10>)
 80106ee:	2201      	movs	r2, #1
 80106f0:	601a      	str	r2, [r3, #0]
}
 80106f2:	46c0      	nop			@ (mov r8, r8)
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	20003bd8 	.word	0x20003bd8

080106fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010704:	f000 f84e 	bl	80107a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010708:	4b03      	ldr	r3, [pc, #12]	@ (8010718 <prvIdleTask+0x1c>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d9f9      	bls.n	8010704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010710:	f000 fe96 	bl	8011440 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010714:	e7f6      	b.n	8010704 <prvIdleTask+0x8>
 8010716:	46c0      	nop			@ (mov r8, r8)
 8010718:	200036f4 	.word	0x200036f4

0801071c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010722:	2300      	movs	r3, #0
 8010724:	607b      	str	r3, [r7, #4]
 8010726:	e00c      	b.n	8010742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	0013      	movs	r3, r2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	189b      	adds	r3, r3, r2
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	4a14      	ldr	r2, [pc, #80]	@ (8010784 <prvInitialiseTaskLists+0x68>)
 8010734:	189b      	adds	r3, r3, r2
 8010736:	0018      	movs	r0, r3
 8010738:	f7fe fe12 	bl	800f360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3301      	adds	r3, #1
 8010740:	607b      	str	r3, [r7, #4]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2b37      	cmp	r3, #55	@ 0x37
 8010746:	d9ef      	bls.n	8010728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010748:	4b0f      	ldr	r3, [pc, #60]	@ (8010788 <prvInitialiseTaskLists+0x6c>)
 801074a:	0018      	movs	r0, r3
 801074c:	f7fe fe08 	bl	800f360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010750:	4b0e      	ldr	r3, [pc, #56]	@ (801078c <prvInitialiseTaskLists+0x70>)
 8010752:	0018      	movs	r0, r3
 8010754:	f7fe fe04 	bl	800f360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010758:	4b0d      	ldr	r3, [pc, #52]	@ (8010790 <prvInitialiseTaskLists+0x74>)
 801075a:	0018      	movs	r0, r3
 801075c:	f7fe fe00 	bl	800f360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010760:	4b0c      	ldr	r3, [pc, #48]	@ (8010794 <prvInitialiseTaskLists+0x78>)
 8010762:	0018      	movs	r0, r3
 8010764:	f7fe fdfc 	bl	800f360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010768:	4b0b      	ldr	r3, [pc, #44]	@ (8010798 <prvInitialiseTaskLists+0x7c>)
 801076a:	0018      	movs	r0, r3
 801076c:	f7fe fdf8 	bl	800f360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010770:	4b0a      	ldr	r3, [pc, #40]	@ (801079c <prvInitialiseTaskLists+0x80>)
 8010772:	4a05      	ldr	r2, [pc, #20]	@ (8010788 <prvInitialiseTaskLists+0x6c>)
 8010774:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010776:	4b0a      	ldr	r3, [pc, #40]	@ (80107a0 <prvInitialiseTaskLists+0x84>)
 8010778:	4a04      	ldr	r2, [pc, #16]	@ (801078c <prvInitialiseTaskLists+0x70>)
 801077a:	601a      	str	r2, [r3, #0]
}
 801077c:	46c0      	nop			@ (mov r8, r8)
 801077e:	46bd      	mov	sp, r7
 8010780:	b002      	add	sp, #8
 8010782:	bd80      	pop	{r7, pc}
 8010784:	200036f4 	.word	0x200036f4
 8010788:	20003b54 	.word	0x20003b54
 801078c:	20003b68 	.word	0x20003b68
 8010790:	20003b84 	.word	0x20003b84
 8010794:	20003b98 	.word	0x20003b98
 8010798:	20003bb0 	.word	0x20003bb0
 801079c:	20003b7c 	.word	0x20003b7c
 80107a0:	20003b80 	.word	0x20003b80

080107a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107aa:	e01a      	b.n	80107e2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80107ac:	f000 fe58 	bl	8011460 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107b0:	4b10      	ldr	r3, [pc, #64]	@ (80107f4 <prvCheckTasksWaitingTermination+0x50>)
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	3304      	adds	r3, #4
 80107bc:	0018      	movs	r0, r3
 80107be:	f7fe fe50 	bl	800f462 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107c2:	4b0d      	ldr	r3, [pc, #52]	@ (80107f8 <prvCheckTasksWaitingTermination+0x54>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	1e5a      	subs	r2, r3, #1
 80107c8:	4b0b      	ldr	r3, [pc, #44]	@ (80107f8 <prvCheckTasksWaitingTermination+0x54>)
 80107ca:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107cc:	4b0b      	ldr	r3, [pc, #44]	@ (80107fc <prvCheckTasksWaitingTermination+0x58>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	1e5a      	subs	r2, r3, #1
 80107d2:	4b0a      	ldr	r3, [pc, #40]	@ (80107fc <prvCheckTasksWaitingTermination+0x58>)
 80107d4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80107d6:	f000 fe55 	bl	8011484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	0018      	movs	r0, r3
 80107de:	f000 f80f 	bl	8010800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107e2:	4b06      	ldr	r3, [pc, #24]	@ (80107fc <prvCheckTasksWaitingTermination+0x58>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1e0      	bne.n	80107ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80107ea:	46c0      	nop			@ (mov r8, r8)
 80107ec:	46c0      	nop			@ (mov r8, r8)
 80107ee:	46bd      	mov	sp, r7
 80107f0:	b002      	add	sp, #8
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	20003b98 	.word	0x20003b98
 80107f8:	20003bc4 	.word	0x20003bc4
 80107fc:	20003bac 	.word	0x20003bac

08010800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	3354      	adds	r3, #84	@ 0x54
 801080c:	0018      	movs	r0, r3
 801080e:	f002 fb39 	bl	8012e84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	22a5      	movs	r2, #165	@ 0xa5
 8010816:	5c9b      	ldrb	r3, [r3, r2]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d109      	bne.n	8010830 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010820:	0018      	movs	r0, r3
 8010822:	f000 ff65 	bl	80116f0 <vPortFree>
				vPortFree( pxTCB );
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	0018      	movs	r0, r3
 801082a:	f000 ff61 	bl	80116f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801082e:	e011      	b.n	8010854 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	22a5      	movs	r2, #165	@ 0xa5
 8010834:	5c9b      	ldrb	r3, [r3, r2]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d104      	bne.n	8010844 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	0018      	movs	r0, r3
 801083e:	f000 ff57 	bl	80116f0 <vPortFree>
	}
 8010842:	e007      	b.n	8010854 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	22a5      	movs	r2, #165	@ 0xa5
 8010848:	5c9b      	ldrb	r3, [r3, r2]
 801084a:	2b02      	cmp	r3, #2
 801084c:	d002      	beq.n	8010854 <prvDeleteTCB+0x54>
 801084e:	b672      	cpsid	i
 8010850:	46c0      	nop			@ (mov r8, r8)
 8010852:	e7fd      	b.n	8010850 <prvDeleteTCB+0x50>
	}
 8010854:	46c0      	nop			@ (mov r8, r8)
 8010856:	46bd      	mov	sp, r7
 8010858:	b002      	add	sp, #8
 801085a:	bd80      	pop	{r7, pc}

0801085c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010862:	4b0b      	ldr	r3, [pc, #44]	@ (8010890 <prvResetNextTaskUnblockTime+0x34>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d104      	bne.n	8010876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801086c:	4b09      	ldr	r3, [pc, #36]	@ (8010894 <prvResetNextTaskUnblockTime+0x38>)
 801086e:	2201      	movs	r2, #1
 8010870:	4252      	negs	r2, r2
 8010872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010874:	e008      	b.n	8010888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010876:	4b06      	ldr	r3, [pc, #24]	@ (8010890 <prvResetNextTaskUnblockTime+0x34>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685a      	ldr	r2, [r3, #4]
 8010884:	4b03      	ldr	r3, [pc, #12]	@ (8010894 <prvResetNextTaskUnblockTime+0x38>)
 8010886:	601a      	str	r2, [r3, #0]
}
 8010888:	46c0      	nop			@ (mov r8, r8)
 801088a:	46bd      	mov	sp, r7
 801088c:	b002      	add	sp, #8
 801088e:	bd80      	pop	{r7, pc}
 8010890:	20003b7c 	.word	0x20003b7c
 8010894:	20003be4 	.word	0x20003be4

08010898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801089e:	4b0a      	ldr	r3, [pc, #40]	@ (80108c8 <xTaskGetSchedulerState+0x30>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d102      	bne.n	80108ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80108a6:	2301      	movs	r3, #1
 80108a8:	607b      	str	r3, [r7, #4]
 80108aa:	e008      	b.n	80108be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108ac:	4b07      	ldr	r3, [pc, #28]	@ (80108cc <xTaskGetSchedulerState+0x34>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d102      	bne.n	80108ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108b4:	2302      	movs	r3, #2
 80108b6:	607b      	str	r3, [r7, #4]
 80108b8:	e001      	b.n	80108be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108ba:	2300      	movs	r3, #0
 80108bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108be:	687b      	ldr	r3, [r7, #4]
	}
 80108c0:	0018      	movs	r0, r3
 80108c2:	46bd      	mov	sp, r7
 80108c4:	b002      	add	sp, #8
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	20003bd0 	.word	0x20003bd0
 80108cc:	20003bec 	.word	0x20003bec

080108d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80108dc:	2300      	movs	r3, #0
 80108de:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d046      	beq.n	8010974 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80108e6:	4b26      	ldr	r3, [pc, #152]	@ (8010980 <xTaskPriorityDisinherit+0xb0>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	68ba      	ldr	r2, [r7, #8]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d002      	beq.n	80108f6 <xTaskPriorityDisinherit+0x26>
 80108f0:	b672      	cpsid	i
 80108f2:	46c0      	nop			@ (mov r8, r8)
 80108f4:	e7fd      	b.n	80108f2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d102      	bne.n	8010904 <xTaskPriorityDisinherit+0x34>
 80108fe:	b672      	cpsid	i
 8010900:	46c0      	nop			@ (mov r8, r8)
 8010902:	e7fd      	b.n	8010900 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010908:	1e5a      	subs	r2, r3, #1
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010916:	429a      	cmp	r2, r3
 8010918:	d02c      	beq.n	8010974 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801091e:	2b00      	cmp	r3, #0
 8010920:	d128      	bne.n	8010974 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	3304      	adds	r3, #4
 8010926:	0018      	movs	r0, r3
 8010928:	f7fe fd9b 	bl	800f462 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010938:	2238      	movs	r2, #56	@ 0x38
 801093a:	1ad2      	subs	r2, r2, r3
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010944:	4b0f      	ldr	r3, [pc, #60]	@ (8010984 <xTaskPriorityDisinherit+0xb4>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	429a      	cmp	r2, r3
 801094a:	d903      	bls.n	8010954 <xTaskPriorityDisinherit+0x84>
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010950:	4b0c      	ldr	r3, [pc, #48]	@ (8010984 <xTaskPriorityDisinherit+0xb4>)
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010958:	0013      	movs	r3, r2
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	189b      	adds	r3, r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4a09      	ldr	r2, [pc, #36]	@ (8010988 <xTaskPriorityDisinherit+0xb8>)
 8010962:	189a      	adds	r2, r3, r2
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	3304      	adds	r3, #4
 8010968:	0019      	movs	r1, r3
 801096a:	0010      	movs	r0, r2
 801096c:	f7fe fd21 	bl	800f3b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010970:	2301      	movs	r3, #1
 8010972:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010974:	68fb      	ldr	r3, [r7, #12]
	}
 8010976:	0018      	movs	r0, r3
 8010978:	46bd      	mov	sp, r7
 801097a:	b004      	add	sp, #16
 801097c:	bd80      	pop	{r7, pc}
 801097e:	46c0      	nop			@ (mov r8, r8)
 8010980:	200036f0 	.word	0x200036f0
 8010984:	20003bcc 	.word	0x20003bcc
 8010988:	200036f4 	.word	0x200036f4

0801098c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010996:	f000 fd63 	bl	8011460 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801099a:	4b1e      	ldr	r3, [pc, #120]	@ (8010a14 <ulTaskNotifyTake+0x88>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	22a0      	movs	r2, #160	@ 0xa0
 80109a0:	589b      	ldr	r3, [r3, r2]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d10e      	bne.n	80109c4 <ulTaskNotifyTake+0x38>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80109a6:	4b1b      	ldr	r3, [pc, #108]	@ (8010a14 <ulTaskNotifyTake+0x88>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	22a4      	movs	r2, #164	@ 0xa4
 80109ac:	2101      	movs	r1, #1
 80109ae:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d006      	beq.n	80109c4 <ulTaskNotifyTake+0x38>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	2101      	movs	r1, #1
 80109ba:	0018      	movs	r0, r3
 80109bc:	f000 f8a8 	bl	8010b10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80109c0:	f000 fd3e 	bl	8011440 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80109c4:	f000 fd5e 	bl	8011484 <vPortExitCritical>

		taskENTER_CRITICAL();
 80109c8:	f000 fd4a 	bl	8011460 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80109cc:	4b11      	ldr	r3, [pc, #68]	@ (8010a14 <ulTaskNotifyTake+0x88>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	22a0      	movs	r2, #160	@ 0xa0
 80109d2:	589b      	ldr	r3, [r3, r2]
 80109d4:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00e      	beq.n	80109fa <ulTaskNotifyTake+0x6e>
			{
				if( xClearCountOnExit != pdFALSE )
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d005      	beq.n	80109ee <ulTaskNotifyTake+0x62>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80109e2:	4b0c      	ldr	r3, [pc, #48]	@ (8010a14 <ulTaskNotifyTake+0x88>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	22a0      	movs	r2, #160	@ 0xa0
 80109e8:	2100      	movs	r1, #0
 80109ea:	5099      	str	r1, [r3, r2]
 80109ec:	e005      	b.n	80109fa <ulTaskNotifyTake+0x6e>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80109ee:	4b09      	ldr	r3, [pc, #36]	@ (8010a14 <ulTaskNotifyTake+0x88>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	3a01      	subs	r2, #1
 80109f6:	21a0      	movs	r1, #160	@ 0xa0
 80109f8:	505a      	str	r2, [r3, r1]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80109fa:	4b06      	ldr	r3, [pc, #24]	@ (8010a14 <ulTaskNotifyTake+0x88>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	22a4      	movs	r2, #164	@ 0xa4
 8010a00:	2100      	movs	r1, #0
 8010a02:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8010a04:	f000 fd3e 	bl	8011484 <vPortExitCritical>

		return ulReturn;
 8010a08:	68fb      	ldr	r3, [r7, #12]
	}
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	b004      	add	sp, #16
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	46c0      	nop			@ (mov r8, r8)
 8010a14:	200036f0 	.word	0x200036f0

08010a18 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <vTaskNotifyGiveFromISR+0x16>
 8010a28:	b672      	cpsid	i
 8010a2a:	46c0      	nop			@ (mov r8, r8)
 8010a2c:	e7fd      	b.n	8010a2a <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a32:	f000 fd3f 	bl	80114b4 <ulSetInterruptMaskFromISR>
 8010a36:	0003      	movs	r3, r0
 8010a38:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010a3a:	200f      	movs	r0, #15
 8010a3c:	183b      	adds	r3, r7, r0
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	21a4      	movs	r1, #164	@ 0xa4
 8010a42:	5c52      	ldrb	r2, [r2, r1]
 8010a44:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	22a4      	movs	r2, #164	@ 0xa4
 8010a4a:	2102      	movs	r1, #2
 8010a4c:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	22a0      	movs	r2, #160	@ 0xa0
 8010a52:	589b      	ldr	r3, [r3, r2]
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	21a0      	movs	r1, #160	@ 0xa0
 8010a5a:	505a      	str	r2, [r3, r1]

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010a5c:	183b      	adds	r3, r7, r0
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d140      	bne.n	8010ae6 <vTaskNotifyGiveFromISR+0xce>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d002      	beq.n	8010a72 <vTaskNotifyGiveFromISR+0x5a>
 8010a6c:	b672      	cpsid	i
 8010a6e:	46c0      	nop			@ (mov r8, r8)
 8010a70:	e7fd      	b.n	8010a6e <vTaskNotifyGiveFromISR+0x56>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a72:	4b21      	ldr	r3, [pc, #132]	@ (8010af8 <vTaskNotifyGiveFromISR+0xe0>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d11d      	bne.n	8010ab6 <vTaskNotifyGiveFromISR+0x9e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	3304      	adds	r3, #4
 8010a7e:	0018      	movs	r0, r3
 8010a80:	f7fe fcef 	bl	800f462 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a88:	4b1c      	ldr	r3, [pc, #112]	@ (8010afc <vTaskNotifyGiveFromISR+0xe4>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d903      	bls.n	8010a98 <vTaskNotifyGiveFromISR+0x80>
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a94:	4b19      	ldr	r3, [pc, #100]	@ (8010afc <vTaskNotifyGiveFromISR+0xe4>)
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a9c:	0013      	movs	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	189b      	adds	r3, r3, r2
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4a16      	ldr	r2, [pc, #88]	@ (8010b00 <vTaskNotifyGiveFromISR+0xe8>)
 8010aa6:	189a      	adds	r2, r3, r2
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	3304      	adds	r3, #4
 8010aac:	0019      	movs	r1, r3
 8010aae:	0010      	movs	r0, r2
 8010ab0:	f7fe fc7f 	bl	800f3b2 <vListInsertEnd>
 8010ab4:	e007      	b.n	8010ac6 <vTaskNotifyGiveFromISR+0xae>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	3318      	adds	r3, #24
 8010aba:	001a      	movs	r2, r3
 8010abc:	4b11      	ldr	r3, [pc, #68]	@ (8010b04 <vTaskNotifyGiveFromISR+0xec>)
 8010abe:	0011      	movs	r1, r2
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f7fe fc76 	bl	800f3b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aca:	4b0f      	ldr	r3, [pc, #60]	@ (8010b08 <vTaskNotifyGiveFromISR+0xf0>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d908      	bls.n	8010ae6 <vTaskNotifyGiveFromISR+0xce>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d002      	beq.n	8010ae0 <vTaskNotifyGiveFromISR+0xc8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	2201      	movs	r2, #1
 8010ade:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8010b0c <vTaskNotifyGiveFromISR+0xf4>)
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	0018      	movs	r0, r3
 8010aea:	f000 fce9 	bl	80114c0 <vClearInterruptMaskFromISR>
	}
 8010aee:	46c0      	nop			@ (mov r8, r8)
 8010af0:	46bd      	mov	sp, r7
 8010af2:	b006      	add	sp, #24
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	46c0      	nop			@ (mov r8, r8)
 8010af8:	20003bec 	.word	0x20003bec
 8010afc:	20003bcc 	.word	0x20003bcc
 8010b00:	200036f4 	.word	0x200036f4
 8010b04:	20003b84 	.word	0x20003b84
 8010b08:	200036f0 	.word	0x200036f0
 8010b0c:	20003bd8 	.word	0x20003bd8

08010b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010b1a:	4b21      	ldr	r3, [pc, #132]	@ (8010ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b20:	4b20      	ldr	r3, [pc, #128]	@ (8010ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	3304      	adds	r3, #4
 8010b26:	0018      	movs	r0, r3
 8010b28:	f7fe fc9b 	bl	800f462 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	d10b      	bne.n	8010b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d008      	beq.n	8010b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b38:	4b1a      	ldr	r3, [pc, #104]	@ (8010ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	1d1a      	adds	r2, r3, #4
 8010b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010b40:	0011      	movs	r1, r2
 8010b42:	0018      	movs	r0, r3
 8010b44:	f7fe fc35 	bl	800f3b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b48:	e026      	b.n	8010b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	18d3      	adds	r3, r2, r3
 8010b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b52:	4b14      	ldr	r3, [pc, #80]	@ (8010ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d209      	bcs.n	8010b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b62:	4b12      	ldr	r3, [pc, #72]	@ (8010bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	0019      	movs	r1, r3
 8010b6e:	0010      	movs	r0, r2
 8010b70:	f7fe fc41 	bl	800f3f6 <vListInsert>
}
 8010b74:	e010      	b.n	8010b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b76:	4b0e      	ldr	r3, [pc, #56]	@ (8010bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8010ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	3304      	adds	r3, #4
 8010b80:	0019      	movs	r1, r3
 8010b82:	0010      	movs	r0, r2
 8010b84:	f7fe fc37 	bl	800f3f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b88:	4b0a      	ldr	r3, [pc, #40]	@ (8010bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d202      	bcs.n	8010b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b92:	4b08      	ldr	r3, [pc, #32]	@ (8010bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b94:	68ba      	ldr	r2, [r7, #8]
 8010b96:	601a      	str	r2, [r3, #0]
}
 8010b98:	46c0      	nop			@ (mov r8, r8)
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	b004      	add	sp, #16
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20003bc8 	.word	0x20003bc8
 8010ba4:	200036f0 	.word	0x200036f0
 8010ba8:	20003bb0 	.word	0x20003bb0
 8010bac:	20003b80 	.word	0x20003b80
 8010bb0:	20003b7c 	.word	0x20003b7c
 8010bb4:	20003be4 	.word	0x20003be4

08010bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010bb8:	b590      	push	{r4, r7, lr}
 8010bba:	b089      	sub	sp, #36	@ 0x24
 8010bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010bc2:	f000 fb5b 	bl	801127c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010bc6:	4b18      	ldr	r3, [pc, #96]	@ (8010c28 <xTimerCreateTimerTask+0x70>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d020      	beq.n	8010c10 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010bd6:	003a      	movs	r2, r7
 8010bd8:	1d39      	adds	r1, r7, #4
 8010bda:	2308      	movs	r3, #8
 8010bdc:	18fb      	adds	r3, r7, r3
 8010bde:	0018      	movs	r0, r3
 8010be0:	f7fe fba6 	bl	800f330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010be4:	683c      	ldr	r4, [r7, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	4910      	ldr	r1, [pc, #64]	@ (8010c2c <xTimerCreateTimerTask+0x74>)
 8010bec:	4810      	ldr	r0, [pc, #64]	@ (8010c30 <xTimerCreateTimerTask+0x78>)
 8010bee:	9202      	str	r2, [sp, #8]
 8010bf0:	9301      	str	r3, [sp, #4]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	0022      	movs	r2, r4
 8010bfa:	f7ff f896 	bl	800fd2a <xTaskCreateStatic>
 8010bfe:	0002      	movs	r2, r0
 8010c00:	4b0c      	ldr	r3, [pc, #48]	@ (8010c34 <xTimerCreateTimerTask+0x7c>)
 8010c02:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010c04:	4b0b      	ldr	r3, [pc, #44]	@ (8010c34 <xTimerCreateTimerTask+0x7c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d001      	beq.n	8010c10 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <xTimerCreateTimerTask+0x64>
 8010c16:	b672      	cpsid	i
 8010c18:	46c0      	nop			@ (mov r8, r8)
 8010c1a:	e7fd      	b.n	8010c18 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
}
 8010c1e:	0018      	movs	r0, r3
 8010c20:	46bd      	mov	sp, r7
 8010c22:	b005      	add	sp, #20
 8010c24:	bd90      	pop	{r4, r7, pc}
 8010c26:	46c0      	nop			@ (mov r8, r8)
 8010c28:	20003c20 	.word	0x20003c20
 8010c2c:	08017080 	.word	0x08017080
 8010c30:	08010e69 	.word	0x08010e69
 8010c34:	20003c24 	.word	0x20003c24

08010c38 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010c38:	b590      	push	{r4, r7, lr}
 8010c3a:	b089      	sub	sp, #36	@ 0x24
 8010c3c:	af02      	add	r7, sp, #8
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
 8010c44:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010c46:	202c      	movs	r0, #44	@ 0x2c
 8010c48:	f000 fca2 	bl	8011590 <pvPortMalloc>
 8010c4c:	0003      	movs	r3, r0
 8010c4e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d00e      	beq.n	8010c74 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	2228      	movs	r2, #40	@ 0x28
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010c5e:	683c      	ldr	r4, [r7, #0]
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	68b9      	ldr	r1, [r7, #8]
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	9301      	str	r3, [sp, #4]
 8010c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	0023      	movs	r3, r4
 8010c70:	f000 f834 	bl	8010cdc <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010c74:	697b      	ldr	r3, [r7, #20]
	}
 8010c76:	0018      	movs	r0, r3
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	b007      	add	sp, #28
 8010c7c:	bd90      	pop	{r4, r7, pc}

08010c7e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010c7e:	b590      	push	{r4, r7, lr}
 8010c80:	b089      	sub	sp, #36	@ 0x24
 8010c82:	af02      	add	r7, sp, #8
 8010c84:	60f8      	str	r0, [r7, #12]
 8010c86:	60b9      	str	r1, [r7, #8]
 8010c88:	607a      	str	r2, [r7, #4]
 8010c8a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010c8c:	232c      	movs	r3, #44	@ 0x2c
 8010c8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	2b2c      	cmp	r3, #44	@ 0x2c
 8010c94:	d002      	beq.n	8010c9c <xTimerCreateStatic+0x1e>
 8010c96:	b672      	cpsid	i
 8010c98:	46c0      	nop			@ (mov r8, r8)
 8010c9a:	e7fd      	b.n	8010c98 <xTimerCreateStatic+0x1a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010c9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d102      	bne.n	8010caa <xTimerCreateStatic+0x2c>
 8010ca4:	b672      	cpsid	i
 8010ca6:	46c0      	nop			@ (mov r8, r8)
 8010ca8:	e7fd      	b.n	8010ca6 <xTimerCreateStatic+0x28>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cac:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00e      	beq.n	8010cd2 <xTimerCreateStatic+0x54>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	2228      	movs	r2, #40	@ 0x28
 8010cb8:	2102      	movs	r1, #2
 8010cba:	5499      	strb	r1, [r3, r2]

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010cbc:	683c      	ldr	r4, [r7, #0]
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	68b9      	ldr	r1, [r7, #8]
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	9301      	str	r3, [sp, #4]
 8010cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cca:	9300      	str	r3, [sp, #0]
 8010ccc:	0023      	movs	r3, r4
 8010cce:	f000 f805 	bl	8010cdc <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010cd2:	697b      	ldr	r3, [r7, #20]
	}
 8010cd4:	0018      	movs	r0, r3
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	b007      	add	sp, #28
 8010cda:	bd90      	pop	{r4, r7, pc}

08010cdc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d102      	bne.n	8010cf6 <prvInitialiseNewTimer+0x1a>
 8010cf0:	b672      	cpsid	i
 8010cf2:	46c0      	nop			@ (mov r8, r8)
 8010cf4:	e7fd      	b.n	8010cf2 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01e      	beq.n	8010d3a <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010cfc:	f000 fabe 	bl	801127c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	68fa      	ldr	r2, [r7, #12]
 8010d04:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	68ba      	ldr	r2, [r7, #8]
 8010d0a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	683a      	ldr	r2, [r7, #0]
 8010d10:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	69ba      	ldr	r2, [r7, #24]
 8010d16:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	3304      	adds	r3, #4
 8010d1c:	0018      	movs	r0, r3
 8010d1e:	f7fe fb3d 	bl	800f39c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d008      	beq.n	8010d3a <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	2228      	movs	r2, #40	@ 0x28
 8010d2c:	5c9b      	ldrb	r3, [r3, r2]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	4313      	orrs	r3, r2
 8010d32:	b2d9      	uxtb	r1, r3
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	2228      	movs	r2, #40	@ 0x28
 8010d38:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010d3a:	46c0      	nop			@ (mov r8, r8)
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	b004      	add	sp, #16
 8010d40:	bd80      	pop	{r7, pc}
	...

08010d44 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b08b      	sub	sp, #44	@ 0x2c
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
 8010d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010d52:	2300      	movs	r3, #0
 8010d54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d102      	bne.n	8010d62 <xTimerGenericCommand+0x1e>
 8010d5c:	b672      	cpsid	i
 8010d5e:	46c0      	nop			@ (mov r8, r8)
 8010d60:	e7fd      	b.n	8010d5e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010d62:	4b1d      	ldr	r3, [pc, #116]	@ (8010dd8 <xTimerGenericCommand+0x94>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d030      	beq.n	8010dcc <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010d6a:	2414      	movs	r4, #20
 8010d6c:	193b      	adds	r3, r7, r4
 8010d6e:	68ba      	ldr	r2, [r7, #8]
 8010d70:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010d72:	193b      	adds	r3, r7, r4
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010d78:	193b      	adds	r3, r7, r4
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	2b05      	cmp	r3, #5
 8010d82:	dc19      	bgt.n	8010db8 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010d84:	f7ff fd88 	bl	8010898 <xTaskGetSchedulerState>
 8010d88:	0003      	movs	r3, r0
 8010d8a:	2b02      	cmp	r3, #2
 8010d8c:	d109      	bne.n	8010da2 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010d8e:	4b12      	ldr	r3, [pc, #72]	@ (8010dd8 <xTimerGenericCommand+0x94>)
 8010d90:	6818      	ldr	r0, [r3, #0]
 8010d92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d94:	1939      	adds	r1, r7, r4
 8010d96:	2300      	movs	r3, #0
 8010d98:	f7fe fc58 	bl	800f64c <xQueueGenericSend>
 8010d9c:	0003      	movs	r3, r0
 8010d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010da0:	e014      	b.n	8010dcc <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010da2:	4b0d      	ldr	r3, [pc, #52]	@ (8010dd8 <xTimerGenericCommand+0x94>)
 8010da4:	6818      	ldr	r0, [r3, #0]
 8010da6:	2314      	movs	r3, #20
 8010da8:	18f9      	adds	r1, r7, r3
 8010daa:	2300      	movs	r3, #0
 8010dac:	2200      	movs	r2, #0
 8010dae:	f7fe fc4d 	bl	800f64c <xQueueGenericSend>
 8010db2:	0003      	movs	r3, r0
 8010db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010db6:	e009      	b.n	8010dcc <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010db8:	4b07      	ldr	r3, [pc, #28]	@ (8010dd8 <xTimerGenericCommand+0x94>)
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	683a      	ldr	r2, [r7, #0]
 8010dbe:	2314      	movs	r3, #20
 8010dc0:	18f9      	adds	r1, r7, r3
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f7fe fd0a 	bl	800f7dc <xQueueGenericSendFromISR>
 8010dc8:	0003      	movs	r3, r0
 8010dca:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010dce:	0018      	movs	r0, r3
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	b00b      	add	sp, #44	@ 0x2c
 8010dd4:	bd90      	pop	{r4, r7, pc}
 8010dd6:	46c0      	nop			@ (mov r8, r8)
 8010dd8:	20003c20 	.word	0x20003c20

08010ddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b086      	sub	sp, #24
 8010de0:	af02      	add	r7, sp, #8
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010de6:	4b1f      	ldr	r3, [pc, #124]	@ (8010e64 <prvProcessExpiredTimer+0x88>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	3304      	adds	r3, #4
 8010df4:	0018      	movs	r0, r3
 8010df6:	f7fe fb34 	bl	800f462 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2228      	movs	r2, #40	@ 0x28
 8010dfe:	5c9b      	ldrb	r3, [r3, r2]
 8010e00:	001a      	movs	r2, r3
 8010e02:	2304      	movs	r3, #4
 8010e04:	4013      	ands	r3, r2
 8010e06:	d01a      	beq.n	8010e3e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	699a      	ldr	r2, [r3, #24]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	18d1      	adds	r1, r2, r3
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	683a      	ldr	r2, [r7, #0]
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f000 f8c7 	bl	8010fa8 <prvInsertTimerInActiveList>
 8010e1a:	1e03      	subs	r3, r0, #0
 8010e1c:	d018      	beq.n	8010e50 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	2300      	movs	r3, #0
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	2300      	movs	r3, #0
 8010e28:	2100      	movs	r1, #0
 8010e2a:	f7ff ff8b 	bl	8010d44 <xTimerGenericCommand>
 8010e2e:	0003      	movs	r3, r0
 8010e30:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10b      	bne.n	8010e50 <prvProcessExpiredTimer+0x74>
 8010e38:	b672      	cpsid	i
 8010e3a:	46c0      	nop			@ (mov r8, r8)
 8010e3c:	e7fd      	b.n	8010e3a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2228      	movs	r2, #40	@ 0x28
 8010e42:	5c9b      	ldrb	r3, [r3, r2]
 8010e44:	2201      	movs	r2, #1
 8010e46:	4393      	bics	r3, r2
 8010e48:	b2d9      	uxtb	r1, r3
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2228      	movs	r2, #40	@ 0x28
 8010e4e:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6a1b      	ldr	r3, [r3, #32]
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	0010      	movs	r0, r2
 8010e58:	4798      	blx	r3
}
 8010e5a:	46c0      	nop			@ (mov r8, r8)
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	b004      	add	sp, #16
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	46c0      	nop			@ (mov r8, r8)
 8010e64:	20003c18 	.word	0x20003c18

08010e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010e70:	2308      	movs	r3, #8
 8010e72:	18fb      	adds	r3, r7, r3
 8010e74:	0018      	movs	r0, r3
 8010e76:	f000 f855 	bl	8010f24 <prvGetNextExpireTime>
 8010e7a:	0003      	movs	r3, r0
 8010e7c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	0011      	movs	r1, r2
 8010e84:	0018      	movs	r0, r3
 8010e86:	f000 f805 	bl	8010e94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010e8a:	f000 f8cf 	bl	801102c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010e8e:	46c0      	nop			@ (mov r8, r8)
 8010e90:	e7ee      	b.n	8010e70 <prvTimerTask+0x8>
	...

08010e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010e9e:	f7ff f967 	bl	8010170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ea2:	2308      	movs	r3, #8
 8010ea4:	18fb      	adds	r3, r7, r3
 8010ea6:	0018      	movs	r0, r3
 8010ea8:	f000 f85e 	bl	8010f68 <prvSampleTimeNow>
 8010eac:	0003      	movs	r3, r0
 8010eae:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d12b      	bne.n	8010f0e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d10c      	bne.n	8010ed6 <prvProcessTimerOrBlockTask+0x42>
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d808      	bhi.n	8010ed6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8010ec4:	f7ff f960 	bl	8010188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	0011      	movs	r1, r2
 8010ece:	0018      	movs	r0, r3
 8010ed0:	f7ff ff84 	bl	8010ddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010ed4:	e01d      	b.n	8010f12 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d008      	beq.n	8010eee <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010edc:	4b0f      	ldr	r3, [pc, #60]	@ (8010f1c <prvProcessTimerOrBlockTask+0x88>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <prvProcessTimerOrBlockTask+0x56>
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e000      	b.n	8010eec <prvProcessTimerOrBlockTask+0x58>
 8010eea:	2300      	movs	r3, #0
 8010eec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010eee:	4b0c      	ldr	r3, [pc, #48]	@ (8010f20 <prvProcessTimerOrBlockTask+0x8c>)
 8010ef0:	6818      	ldr	r0, [r3, #0]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	683a      	ldr	r2, [r7, #0]
 8010efa:	0019      	movs	r1, r3
 8010efc:	f7fe fee2 	bl	800fcc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010f00:	f7ff f942 	bl	8010188 <xTaskResumeAll>
 8010f04:	1e03      	subs	r3, r0, #0
 8010f06:	d104      	bne.n	8010f12 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8010f08:	f000 fa9a 	bl	8011440 <vPortYield>
}
 8010f0c:	e001      	b.n	8010f12 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8010f0e:	f7ff f93b 	bl	8010188 <xTaskResumeAll>
}
 8010f12:	46c0      	nop			@ (mov r8, r8)
 8010f14:	46bd      	mov	sp, r7
 8010f16:	b004      	add	sp, #16
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	46c0      	nop			@ (mov r8, r8)
 8010f1c:	20003c1c 	.word	0x20003c1c
 8010f20:	20003c20 	.word	0x20003c20

08010f24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <prvGetNextExpireTime+0x40>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <prvGetNextExpireTime+0x16>
 8010f36:	2201      	movs	r2, #1
 8010f38:	e000      	b.n	8010f3c <prvGetNextExpireTime+0x18>
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d105      	bne.n	8010f54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f48:	4b06      	ldr	r3, [pc, #24]	@ (8010f64 <prvGetNextExpireTime+0x40>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	60fb      	str	r3, [r7, #12]
 8010f52:	e001      	b.n	8010f58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010f54:	2300      	movs	r3, #0
 8010f56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010f58:	68fb      	ldr	r3, [r7, #12]
}
 8010f5a:	0018      	movs	r0, r3
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	b004      	add	sp, #16
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	46c0      	nop			@ (mov r8, r8)
 8010f64:	20003c18 	.word	0x20003c18

08010f68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010f70:	f7ff f996 	bl	80102a0 <xTaskGetTickCount>
 8010f74:	0003      	movs	r3, r0
 8010f76:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8010f78:	4b0a      	ldr	r3, [pc, #40]	@ (8010fa4 <prvSampleTimeNow+0x3c>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d205      	bcs.n	8010f8e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8010f82:	f000 f91d 	bl	80111c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	601a      	str	r2, [r3, #0]
 8010f8c:	e002      	b.n	8010f94 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010f94:	4b03      	ldr	r3, [pc, #12]	@ (8010fa4 <prvSampleTimeNow+0x3c>)
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
}
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	b004      	add	sp, #16
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	20003c28 	.word	0x20003c28

08010fa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b086      	sub	sp, #24
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	607a      	str	r2, [r7, #4]
 8010fb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d812      	bhi.n	8010ff4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	1ad2      	subs	r2, r2, r3
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	699b      	ldr	r3, [r3, #24]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d302      	bcc.n	8010fe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	617b      	str	r3, [r7, #20]
 8010fe0:	e01b      	b.n	801101a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010fe2:	4b10      	ldr	r3, [pc, #64]	@ (8011024 <prvInsertTimerInActiveList+0x7c>)
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	0019      	movs	r1, r3
 8010fec:	0010      	movs	r0, r2
 8010fee:	f7fe fa02 	bl	800f3f6 <vListInsert>
 8010ff2:	e012      	b.n	801101a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d206      	bcs.n	801100a <prvInsertTimerInActiveList+0x62>
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	429a      	cmp	r2, r3
 8011002:	d302      	bcc.n	801100a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011004:	2301      	movs	r3, #1
 8011006:	617b      	str	r3, [r7, #20]
 8011008:	e007      	b.n	801101a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801100a:	4b07      	ldr	r3, [pc, #28]	@ (8011028 <prvInsertTimerInActiveList+0x80>)
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	3304      	adds	r3, #4
 8011012:	0019      	movs	r1, r3
 8011014:	0010      	movs	r0, r2
 8011016:	f7fe f9ee 	bl	800f3f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801101a:	697b      	ldr	r3, [r7, #20]
}
 801101c:	0018      	movs	r0, r3
 801101e:	46bd      	mov	sp, r7
 8011020:	b006      	add	sp, #24
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20003c1c 	.word	0x20003c1c
 8011028:	20003c18 	.word	0x20003c18

0801102c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801102c:	b590      	push	{r4, r7, lr}
 801102e:	b08d      	sub	sp, #52	@ 0x34
 8011030:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011032:	e0b1      	b.n	8011198 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011034:	2208      	movs	r2, #8
 8011036:	18bb      	adds	r3, r7, r2
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	da10      	bge.n	8011060 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801103e:	18bb      	adds	r3, r7, r2
 8011040:	3304      	adds	r3, #4
 8011042:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011046:	2b00      	cmp	r3, #0
 8011048:	d102      	bne.n	8011050 <prvProcessReceivedCommands+0x24>
 801104a:	b672      	cpsid	i
 801104c:	46c0      	nop			@ (mov r8, r8)
 801104e:	e7fd      	b.n	801104c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011056:	6858      	ldr	r0, [r3, #4]
 8011058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105a:	689b      	ldr	r3, [r3, #8]
 801105c:	0019      	movs	r1, r3
 801105e:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011060:	2208      	movs	r2, #8
 8011062:	18bb      	adds	r3, r7, r2
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	da00      	bge.n	801106c <prvProcessReceivedCommands+0x40>
 801106a:	e095      	b.n	8011198 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801106c:	18bb      	adds	r3, r7, r2
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011072:	6a3b      	ldr	r3, [r7, #32]
 8011074:	695b      	ldr	r3, [r3, #20]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d004      	beq.n	8011084 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801107a:	6a3b      	ldr	r3, [r7, #32]
 801107c:	3304      	adds	r3, #4
 801107e:	0018      	movs	r0, r3
 8011080:	f7fe f9ef 	bl	800f462 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011084:	1d3b      	adds	r3, r7, #4
 8011086:	0018      	movs	r0, r3
 8011088:	f7ff ff6e 	bl	8010f68 <prvSampleTimeNow>
 801108c:	0003      	movs	r3, r0
 801108e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8011090:	2308      	movs	r3, #8
 8011092:	18fb      	adds	r3, r7, r3
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b09      	cmp	r3, #9
 8011098:	d900      	bls.n	801109c <prvProcessReceivedCommands+0x70>
 801109a:	e07a      	b.n	8011192 <prvProcessReceivedCommands+0x166>
 801109c:	009a      	lsls	r2, r3, #2
 801109e:	4b46      	ldr	r3, [pc, #280]	@ (80111b8 <prvProcessReceivedCommands+0x18c>)
 80110a0:	18d3      	adds	r3, r2, r3
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80110a6:	6a3b      	ldr	r3, [r7, #32]
 80110a8:	2228      	movs	r2, #40	@ 0x28
 80110aa:	5c9b      	ldrb	r3, [r3, r2]
 80110ac:	2201      	movs	r2, #1
 80110ae:	4313      	orrs	r3, r2
 80110b0:	b2d9      	uxtb	r1, r3
 80110b2:	6a3b      	ldr	r3, [r7, #32]
 80110b4:	2228      	movs	r2, #40	@ 0x28
 80110b6:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80110b8:	2408      	movs	r4, #8
 80110ba:	193b      	adds	r3, r7, r4
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	6a3b      	ldr	r3, [r7, #32]
 80110c0:	699b      	ldr	r3, [r3, #24]
 80110c2:	18d1      	adds	r1, r2, r3
 80110c4:	193b      	adds	r3, r7, r4
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	69fa      	ldr	r2, [r7, #28]
 80110ca:	6a38      	ldr	r0, [r7, #32]
 80110cc:	f7ff ff6c 	bl	8010fa8 <prvInsertTimerInActiveList>
 80110d0:	1e03      	subs	r3, r0, #0
 80110d2:	d060      	beq.n	8011196 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110d4:	6a3b      	ldr	r3, [r7, #32]
 80110d6:	6a1b      	ldr	r3, [r3, #32]
 80110d8:	6a3a      	ldr	r2, [r7, #32]
 80110da:	0010      	movs	r0, r2
 80110dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110de:	6a3b      	ldr	r3, [r7, #32]
 80110e0:	2228      	movs	r2, #40	@ 0x28
 80110e2:	5c9b      	ldrb	r3, [r3, r2]
 80110e4:	001a      	movs	r2, r3
 80110e6:	2304      	movs	r3, #4
 80110e8:	4013      	ands	r3, r2
 80110ea:	d054      	beq.n	8011196 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80110ec:	193b      	adds	r3, r7, r4
 80110ee:	685a      	ldr	r2, [r3, #4]
 80110f0:	6a3b      	ldr	r3, [r7, #32]
 80110f2:	699b      	ldr	r3, [r3, #24]
 80110f4:	18d2      	adds	r2, r2, r3
 80110f6:	6a38      	ldr	r0, [r7, #32]
 80110f8:	2300      	movs	r3, #0
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	2300      	movs	r3, #0
 80110fe:	2100      	movs	r1, #0
 8011100:	f7ff fe20 	bl	8010d44 <xTimerGenericCommand>
 8011104:	0003      	movs	r3, r0
 8011106:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d143      	bne.n	8011196 <prvProcessReceivedCommands+0x16a>
 801110e:	b672      	cpsid	i
 8011110:	46c0      	nop			@ (mov r8, r8)
 8011112:	e7fd      	b.n	8011110 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011114:	6a3b      	ldr	r3, [r7, #32]
 8011116:	2228      	movs	r2, #40	@ 0x28
 8011118:	5c9b      	ldrb	r3, [r3, r2]
 801111a:	2201      	movs	r2, #1
 801111c:	4393      	bics	r3, r2
 801111e:	b2d9      	uxtb	r1, r3
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	2228      	movs	r2, #40	@ 0x28
 8011124:	5499      	strb	r1, [r3, r2]
					break;
 8011126:	e037      	b.n	8011198 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	2228      	movs	r2, #40	@ 0x28
 801112c:	5c9b      	ldrb	r3, [r3, r2]
 801112e:	2201      	movs	r2, #1
 8011130:	4313      	orrs	r3, r2
 8011132:	b2d9      	uxtb	r1, r3
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	2228      	movs	r2, #40	@ 0x28
 8011138:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801113a:	2308      	movs	r3, #8
 801113c:	18fb      	adds	r3, r7, r3
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	6a3b      	ldr	r3, [r7, #32]
 8011142:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011144:	6a3b      	ldr	r3, [r7, #32]
 8011146:	699b      	ldr	r3, [r3, #24]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d102      	bne.n	8011152 <prvProcessReceivedCommands+0x126>
 801114c:	b672      	cpsid	i
 801114e:	46c0      	nop			@ (mov r8, r8)
 8011150:	e7fd      	b.n	801114e <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	699a      	ldr	r2, [r3, #24]
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	18d1      	adds	r1, r2, r3
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	69fa      	ldr	r2, [r7, #28]
 801115e:	6a38      	ldr	r0, [r7, #32]
 8011160:	f7ff ff22 	bl	8010fa8 <prvInsertTimerInActiveList>
					break;
 8011164:	e018      	b.n	8011198 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011166:	6a3b      	ldr	r3, [r7, #32]
 8011168:	2228      	movs	r2, #40	@ 0x28
 801116a:	5c9b      	ldrb	r3, [r3, r2]
 801116c:	001a      	movs	r2, r3
 801116e:	2302      	movs	r3, #2
 8011170:	4013      	ands	r3, r2
 8011172:	d104      	bne.n	801117e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	0018      	movs	r0, r3
 8011178:	f000 faba 	bl	80116f0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801117c:	e00c      	b.n	8011198 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801117e:	6a3b      	ldr	r3, [r7, #32]
 8011180:	2228      	movs	r2, #40	@ 0x28
 8011182:	5c9b      	ldrb	r3, [r3, r2]
 8011184:	2201      	movs	r2, #1
 8011186:	4393      	bics	r3, r2
 8011188:	b2d9      	uxtb	r1, r3
 801118a:	6a3b      	ldr	r3, [r7, #32]
 801118c:	2228      	movs	r2, #40	@ 0x28
 801118e:	5499      	strb	r1, [r3, r2]
					break;
 8011190:	e002      	b.n	8011198 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 8011192:	46c0      	nop			@ (mov r8, r8)
 8011194:	e000      	b.n	8011198 <prvProcessReceivedCommands+0x16c>
					break;
 8011196:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011198:	4b08      	ldr	r3, [pc, #32]	@ (80111bc <prvProcessReceivedCommands+0x190>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	2208      	movs	r2, #8
 801119e:	18b9      	adds	r1, r7, r2
 80111a0:	2200      	movs	r2, #0
 80111a2:	0018      	movs	r0, r3
 80111a4:	f7fe fb91 	bl	800f8ca <xQueueReceive>
 80111a8:	1e03      	subs	r3, r0, #0
 80111aa:	d000      	beq.n	80111ae <prvProcessReceivedCommands+0x182>
 80111ac:	e742      	b.n	8011034 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80111ae:	46c0      	nop			@ (mov r8, r8)
 80111b0:	46c0      	nop			@ (mov r8, r8)
 80111b2:	46bd      	mov	sp, r7
 80111b4:	b00b      	add	sp, #44	@ 0x2c
 80111b6:	bd90      	pop	{r4, r7, pc}
 80111b8:	08017298 	.word	0x08017298
 80111bc:	20003c20 	.word	0x20003c20

080111c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b088      	sub	sp, #32
 80111c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80111c6:	e042      	b.n	801124e <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80111c8:	4b2a      	ldr	r3, [pc, #168]	@ (8011274 <prvSwitchTimerLists+0xb4>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111d2:	4b28      	ldr	r3, [pc, #160]	@ (8011274 <prvSwitchTimerLists+0xb4>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	3304      	adds	r3, #4
 80111e0:	0018      	movs	r0, r3
 80111e2:	f7fe f93e 	bl	800f462 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6a1b      	ldr	r3, [r3, #32]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	0010      	movs	r0, r2
 80111ee:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2228      	movs	r2, #40	@ 0x28
 80111f4:	5c9b      	ldrb	r3, [r3, r2]
 80111f6:	001a      	movs	r2, r3
 80111f8:	2304      	movs	r3, #4
 80111fa:	4013      	ands	r3, r2
 80111fc:	d027      	beq.n	801124e <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	699b      	ldr	r3, [r3, #24]
 8011202:	693a      	ldr	r2, [r7, #16]
 8011204:	18d3      	adds	r3, r2, r3
 8011206:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011208:	68ba      	ldr	r2, [r7, #8]
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	429a      	cmp	r2, r3
 801120e:	d90e      	bls.n	801122e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68ba      	ldr	r2, [r7, #8]
 8011214:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801121c:	4b15      	ldr	r3, [pc, #84]	@ (8011274 <prvSwitchTimerLists+0xb4>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	3304      	adds	r3, #4
 8011224:	0019      	movs	r1, r3
 8011226:	0010      	movs	r0, r2
 8011228:	f7fe f8e5 	bl	800f3f6 <vListInsert>
 801122c:	e00f      	b.n	801124e <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801122e:	693a      	ldr	r2, [r7, #16]
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	2300      	movs	r3, #0
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	2300      	movs	r3, #0
 8011238:	2100      	movs	r1, #0
 801123a:	f7ff fd83 	bl	8010d44 <xTimerGenericCommand>
 801123e:	0003      	movs	r3, r0
 8011240:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d102      	bne.n	801124e <prvSwitchTimerLists+0x8e>
 8011248:	b672      	cpsid	i
 801124a:	46c0      	nop			@ (mov r8, r8)
 801124c:	e7fd      	b.n	801124a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801124e:	4b09      	ldr	r3, [pc, #36]	@ (8011274 <prvSwitchTimerLists+0xb4>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d1b7      	bne.n	80111c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011258:	4b06      	ldr	r3, [pc, #24]	@ (8011274 <prvSwitchTimerLists+0xb4>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801125e:	4b06      	ldr	r3, [pc, #24]	@ (8011278 <prvSwitchTimerLists+0xb8>)
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	4b04      	ldr	r3, [pc, #16]	@ (8011274 <prvSwitchTimerLists+0xb4>)
 8011264:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8011266:	4b04      	ldr	r3, [pc, #16]	@ (8011278 <prvSwitchTimerLists+0xb8>)
 8011268:	697a      	ldr	r2, [r7, #20]
 801126a:	601a      	str	r2, [r3, #0]
}
 801126c:	46c0      	nop			@ (mov r8, r8)
 801126e:	46bd      	mov	sp, r7
 8011270:	b006      	add	sp, #24
 8011272:	bd80      	pop	{r7, pc}
 8011274:	20003c18 	.word	0x20003c18
 8011278:	20003c1c 	.word	0x20003c1c

0801127c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011282:	f000 f8ed 	bl	8011460 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011286:	4b16      	ldr	r3, [pc, #88]	@ (80112e0 <prvCheckForValidListAndQueue+0x64>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d123      	bne.n	80112d6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801128e:	4b15      	ldr	r3, [pc, #84]	@ (80112e4 <prvCheckForValidListAndQueue+0x68>)
 8011290:	0018      	movs	r0, r3
 8011292:	f7fe f865 	bl	800f360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011296:	4b14      	ldr	r3, [pc, #80]	@ (80112e8 <prvCheckForValidListAndQueue+0x6c>)
 8011298:	0018      	movs	r0, r3
 801129a:	f7fe f861 	bl	800f360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801129e:	4b13      	ldr	r3, [pc, #76]	@ (80112ec <prvCheckForValidListAndQueue+0x70>)
 80112a0:	4a10      	ldr	r2, [pc, #64]	@ (80112e4 <prvCheckForValidListAndQueue+0x68>)
 80112a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80112a4:	4b12      	ldr	r3, [pc, #72]	@ (80112f0 <prvCheckForValidListAndQueue+0x74>)
 80112a6:	4a10      	ldr	r2, [pc, #64]	@ (80112e8 <prvCheckForValidListAndQueue+0x6c>)
 80112a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80112aa:	4b12      	ldr	r3, [pc, #72]	@ (80112f4 <prvCheckForValidListAndQueue+0x78>)
 80112ac:	4a12      	ldr	r2, [pc, #72]	@ (80112f8 <prvCheckForValidListAndQueue+0x7c>)
 80112ae:	2100      	movs	r1, #0
 80112b0:	9100      	str	r1, [sp, #0]
 80112b2:	2110      	movs	r1, #16
 80112b4:	200a      	movs	r0, #10
 80112b6:	f7fe f951 	bl	800f55c <xQueueGenericCreateStatic>
 80112ba:	0002      	movs	r2, r0
 80112bc:	4b08      	ldr	r3, [pc, #32]	@ (80112e0 <prvCheckForValidListAndQueue+0x64>)
 80112be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80112c0:	4b07      	ldr	r3, [pc, #28]	@ (80112e0 <prvCheckForValidListAndQueue+0x64>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d006      	beq.n	80112d6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80112c8:	4b05      	ldr	r3, [pc, #20]	@ (80112e0 <prvCheckForValidListAndQueue+0x64>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a0b      	ldr	r2, [pc, #44]	@ (80112fc <prvCheckForValidListAndQueue+0x80>)
 80112ce:	0011      	movs	r1, r2
 80112d0:	0018      	movs	r0, r3
 80112d2:	f7fe fccf 	bl	800fc74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80112d6:	f000 f8d5 	bl	8011484 <vPortExitCritical>
}
 80112da:	46c0      	nop			@ (mov r8, r8)
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	20003c20 	.word	0x20003c20
 80112e4:	20003bf0 	.word	0x20003bf0
 80112e8:	20003c04 	.word	0x20003c04
 80112ec:	20003c18 	.word	0x20003c18
 80112f0:	20003c1c 	.word	0x20003c1c
 80112f4:	20003ccc 	.word	0x20003ccc
 80112f8:	20003c2c 	.word	0x20003c2c
 80112fc:	08017088 	.word	0x08017088

08011300 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d102      	bne.n	8011318 <pvTimerGetTimerID+0x18>
 8011312:	b672      	cpsid	i
 8011314:	46c0      	nop			@ (mov r8, r8)
 8011316:	e7fd      	b.n	8011314 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8011318:	f000 f8a2 	bl	8011460 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	69db      	ldr	r3, [r3, #28]
 8011320:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8011322:	f000 f8af 	bl	8011484 <vPortExitCritical>

	return pvReturn;
 8011326:	68bb      	ldr	r3, [r7, #8]
}
 8011328:	0018      	movs	r0, r3
 801132a:	46bd      	mov	sp, r7
 801132c:	b004      	add	sp, #16
 801132e:	bd80      	pop	{r7, pc}

08011330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	3b04      	subs	r3, #4
 8011340:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2280      	movs	r2, #128	@ 0x80
 8011346:	0452      	lsls	r2, r2, #17
 8011348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	3b04      	subs	r3, #4
 801134e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	3b04      	subs	r3, #4
 801135a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801135c:	4a08      	ldr	r2, [pc, #32]	@ (8011380 <pxPortInitialiseStack+0x50>)
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	3b14      	subs	r3, #20
 8011366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3b20      	subs	r3, #32
 8011372:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011374:	68fb      	ldr	r3, [r7, #12]
}
 8011376:	0018      	movs	r0, r3
 8011378:	46bd      	mov	sp, r7
 801137a:	b004      	add	sp, #16
 801137c:	bd80      	pop	{r7, pc}
 801137e:	46c0      	nop			@ (mov r8, r8)
 8011380:	08011385 	.word	0x08011385

08011384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801138a:	2300      	movs	r3, #0
 801138c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801138e:	4b08      	ldr	r3, [pc, #32]	@ (80113b0 <prvTaskExitError+0x2c>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3301      	adds	r3, #1
 8011394:	d002      	beq.n	801139c <prvTaskExitError+0x18>
 8011396:	b672      	cpsid	i
 8011398:	46c0      	nop			@ (mov r8, r8)
 801139a:	e7fd      	b.n	8011398 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801139c:	b672      	cpsid	i
	while( ulDummy == 0 )
 801139e:	46c0      	nop			@ (mov r8, r8)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d0fc      	beq.n	80113a0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80113a6:	46c0      	nop			@ (mov r8, r8)
 80113a8:	46c0      	nop			@ (mov r8, r8)
 80113aa:	46bd      	mov	sp, r7
 80113ac:	b002      	add	sp, #8
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	2000007c 	.word	0x2000007c

080113b4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80113b8:	46c0      	nop			@ (mov r8, r8)
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
	...

080113c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80113c0:	4a0b      	ldr	r2, [pc, #44]	@ (80113f0 <pxCurrentTCBConst2>)
 80113c2:	6813      	ldr	r3, [r2, #0]
 80113c4:	6818      	ldr	r0, [r3, #0]
 80113c6:	3020      	adds	r0, #32
 80113c8:	f380 8809 	msr	PSP, r0
 80113cc:	2002      	movs	r0, #2
 80113ce:	f380 8814 	msr	CONTROL, r0
 80113d2:	f3bf 8f6f 	isb	sy
 80113d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80113d8:	46ae      	mov	lr, r5
 80113da:	bc08      	pop	{r3}
 80113dc:	bc04      	pop	{r2}
 80113de:	b662      	cpsie	i
 80113e0:	4718      	bx	r3
 80113e2:	46c0      	nop			@ (mov r8, r8)
 80113e4:	46c0      	nop			@ (mov r8, r8)
 80113e6:	46c0      	nop			@ (mov r8, r8)
 80113e8:	46c0      	nop			@ (mov r8, r8)
 80113ea:	46c0      	nop			@ (mov r8, r8)
 80113ec:	46c0      	nop			@ (mov r8, r8)
 80113ee:	46c0      	nop			@ (mov r8, r8)

080113f0 <pxCurrentTCBConst2>:
 80113f0:	200036f0 	.word	0x200036f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80113f4:	46c0      	nop			@ (mov r8, r8)
 80113f6:	46c0      	nop			@ (mov r8, r8)

080113f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113fc:	4b0e      	ldr	r3, [pc, #56]	@ (8011438 <xPortStartScheduler+0x40>)
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	4b0d      	ldr	r3, [pc, #52]	@ (8011438 <xPortStartScheduler+0x40>)
 8011402:	21ff      	movs	r1, #255	@ 0xff
 8011404:	0409      	lsls	r1, r1, #16
 8011406:	430a      	orrs	r2, r1
 8011408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801140a:	4b0b      	ldr	r3, [pc, #44]	@ (8011438 <xPortStartScheduler+0x40>)
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	4b0a      	ldr	r3, [pc, #40]	@ (8011438 <xPortStartScheduler+0x40>)
 8011410:	21ff      	movs	r1, #255	@ 0xff
 8011412:	0609      	lsls	r1, r1, #24
 8011414:	430a      	orrs	r2, r1
 8011416:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011418:	f000 f898 	bl	801154c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801141c:	4b07      	ldr	r3, [pc, #28]	@ (801143c <xPortStartScheduler+0x44>)
 801141e:	2200      	movs	r2, #0
 8011420:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8011422:	f7ff ffcd 	bl	80113c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011426:	f7fe fff9 	bl	801041c <vTaskSwitchContext>
	prvTaskExitError();
 801142a:	f7ff ffab 	bl	8011384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801142e:	2300      	movs	r3, #0
}
 8011430:	0018      	movs	r0, r3
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	46c0      	nop			@ (mov r8, r8)
 8011438:	e000ed20 	.word	0xe000ed20
 801143c:	2000007c 	.word	0x2000007c

08011440 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011444:	4b05      	ldr	r3, [pc, #20]	@ (801145c <vPortYield+0x1c>)
 8011446:	2280      	movs	r2, #128	@ 0x80
 8011448:	0552      	lsls	r2, r2, #21
 801144a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801144c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011450:	f3bf 8f6f 	isb	sy
}
 8011454:	46c0      	nop			@ (mov r8, r8)
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	46c0      	nop			@ (mov r8, r8)
 801145c:	e000ed04 	.word	0xe000ed04

08011460 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011460:	b580      	push	{r7, lr}
 8011462:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8011464:	b672      	cpsid	i
	uxCriticalNesting++;
 8011466:	4b06      	ldr	r3, [pc, #24]	@ (8011480 <vPortEnterCritical+0x20>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	1c5a      	adds	r2, r3, #1
 801146c:	4b04      	ldr	r3, [pc, #16]	@ (8011480 <vPortEnterCritical+0x20>)
 801146e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8011470:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011474:	f3bf 8f6f 	isb	sy
}
 8011478:	46c0      	nop			@ (mov r8, r8)
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	46c0      	nop			@ (mov r8, r8)
 8011480:	2000007c 	.word	0x2000007c

08011484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011488:	4b09      	ldr	r3, [pc, #36]	@ (80114b0 <vPortExitCritical+0x2c>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <vPortExitCritical+0x12>
 8011490:	b672      	cpsid	i
 8011492:	46c0      	nop			@ (mov r8, r8)
 8011494:	e7fd      	b.n	8011492 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8011496:	4b06      	ldr	r3, [pc, #24]	@ (80114b0 <vPortExitCritical+0x2c>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	1e5a      	subs	r2, r3, #1
 801149c:	4b04      	ldr	r3, [pc, #16]	@ (80114b0 <vPortExitCritical+0x2c>)
 801149e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80114a0:	4b03      	ldr	r3, [pc, #12]	@ (80114b0 <vPortExitCritical+0x2c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d100      	bne.n	80114aa <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 80114a8:	b662      	cpsie	i
	}
}
 80114aa:	46c0      	nop			@ (mov r8, r8)
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	2000007c 	.word	0x2000007c

080114b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80114b4:	f3ef 8010 	mrs	r0, PRIMASK
 80114b8:	b672      	cpsid	i
 80114ba:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80114bc:	46c0      	nop			@ (mov r8, r8)
 80114be:	0018      	movs	r0, r3

080114c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80114c0:	f380 8810 	msr	PRIMASK, r0
 80114c4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80114c6:	46c0      	nop			@ (mov r8, r8)
	...

080114d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114d0:	f3ef 8009 	mrs	r0, PSP
 80114d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011510 <pxCurrentTCBConst>)
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	3820      	subs	r0, #32
 80114da:	6010      	str	r0, [r2, #0]
 80114dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80114de:	4644      	mov	r4, r8
 80114e0:	464d      	mov	r5, r9
 80114e2:	4656      	mov	r6, sl
 80114e4:	465f      	mov	r7, fp
 80114e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80114e8:	b508      	push	{r3, lr}
 80114ea:	b672      	cpsid	i
 80114ec:	f7fe ff96 	bl	801041c <vTaskSwitchContext>
 80114f0:	b662      	cpsie	i
 80114f2:	bc0c      	pop	{r2, r3}
 80114f4:	6811      	ldr	r1, [r2, #0]
 80114f6:	6808      	ldr	r0, [r1, #0]
 80114f8:	3010      	adds	r0, #16
 80114fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80114fc:	46a0      	mov	r8, r4
 80114fe:	46a9      	mov	r9, r5
 8011500:	46b2      	mov	sl, r6
 8011502:	46bb      	mov	fp, r7
 8011504:	f380 8809 	msr	PSP, r0
 8011508:	3820      	subs	r0, #32
 801150a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801150c:	4718      	bx	r3
 801150e:	46c0      	nop			@ (mov r8, r8)

08011510 <pxCurrentTCBConst>:
 8011510:	200036f0 	.word	0x200036f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8011514:	46c0      	nop			@ (mov r8, r8)
 8011516:	46c0      	nop			@ (mov r8, r8)

08011518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801151e:	f7ff ffc9 	bl	80114b4 <ulSetInterruptMaskFromISR>
 8011522:	0003      	movs	r3, r0
 8011524:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011526:	f7fe fec9 	bl	80102bc <xTaskIncrementTick>
 801152a:	1e03      	subs	r3, r0, #0
 801152c:	d003      	beq.n	8011536 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801152e:	4b06      	ldr	r3, [pc, #24]	@ (8011548 <xPortSysTickHandler+0x30>)
 8011530:	2280      	movs	r2, #128	@ 0x80
 8011532:	0552      	lsls	r2, r2, #21
 8011534:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	0018      	movs	r0, r3
 801153a:	f7ff ffc1 	bl	80114c0 <vClearInterruptMaskFromISR>
}
 801153e:	46c0      	nop			@ (mov r8, r8)
 8011540:	46bd      	mov	sp, r7
 8011542:	b002      	add	sp, #8
 8011544:	bd80      	pop	{r7, pc}
 8011546:	46c0      	nop			@ (mov r8, r8)
 8011548:	e000ed04 	.word	0xe000ed04

0801154c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011550:	4b0b      	ldr	r3, [pc, #44]	@ (8011580 <vPortSetupTimerInterrupt+0x34>)
 8011552:	2200      	movs	r2, #0
 8011554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011556:	4b0b      	ldr	r3, [pc, #44]	@ (8011584 <vPortSetupTimerInterrupt+0x38>)
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801155c:	4b0a      	ldr	r3, [pc, #40]	@ (8011588 <vPortSetupTimerInterrupt+0x3c>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	22fa      	movs	r2, #250	@ 0xfa
 8011562:	0091      	lsls	r1, r2, #2
 8011564:	0018      	movs	r0, r3
 8011566:	f7ee fdeb 	bl	8000140 <__udivsi3>
 801156a:	0003      	movs	r3, r0
 801156c:	001a      	movs	r2, r3
 801156e:	4b07      	ldr	r3, [pc, #28]	@ (801158c <vPortSetupTimerInterrupt+0x40>)
 8011570:	3a01      	subs	r2, #1
 8011572:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8011574:	4b02      	ldr	r3, [pc, #8]	@ (8011580 <vPortSetupTimerInterrupt+0x34>)
 8011576:	2207      	movs	r2, #7
 8011578:	601a      	str	r2, [r3, #0]
}
 801157a:	46c0      	nop			@ (mov r8, r8)
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	e000e010 	.word	0xe000e010
 8011584:	e000e018 	.word	0xe000e018
 8011588:	20000068 	.word	0x20000068
 801158c:	e000e014 	.word	0xe000e014

08011590 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011598:	2300      	movs	r3, #0
 801159a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801159c:	f7fe fde8 	bl	8010170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115a0:	4b4d      	ldr	r3, [pc, #308]	@ (80116d8 <pvPortMalloc+0x148>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d101      	bne.n	80115ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115a8:	f000 f8f2 	bl	8011790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115ac:	4b4b      	ldr	r3, [pc, #300]	@ (80116dc <pvPortMalloc+0x14c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	4013      	ands	r3, r2
 80115b4:	d000      	beq.n	80115b8 <pvPortMalloc+0x28>
 80115b6:	e080      	b.n	80116ba <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d013      	beq.n	80115e6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80115be:	2208      	movs	r2, #8
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	189b      	adds	r3, r3, r2
 80115c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2207      	movs	r2, #7
 80115ca:	4013      	ands	r3, r2
 80115cc:	d00b      	beq.n	80115e6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2207      	movs	r2, #7
 80115d2:	4393      	bics	r3, r2
 80115d4:	3308      	adds	r3, #8
 80115d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2207      	movs	r2, #7
 80115dc:	4013      	ands	r3, r2
 80115de:	d002      	beq.n	80115e6 <pvPortMalloc+0x56>
 80115e0:	b672      	cpsid	i
 80115e2:	46c0      	nop			@ (mov r8, r8)
 80115e4:	e7fd      	b.n	80115e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d066      	beq.n	80116ba <pvPortMalloc+0x12a>
 80115ec:	4b3c      	ldr	r3, [pc, #240]	@ (80116e0 <pvPortMalloc+0x150>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d861      	bhi.n	80116ba <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80115f6:	4b3b      	ldr	r3, [pc, #236]	@ (80116e4 <pvPortMalloc+0x154>)
 80115f8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80115fa:	4b3a      	ldr	r3, [pc, #232]	@ (80116e4 <pvPortMalloc+0x154>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011600:	e004      	b.n	801160c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	429a      	cmp	r2, r3
 8011614:	d903      	bls.n	801161e <pvPortMalloc+0x8e>
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d1f1      	bne.n	8011602 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801161e:	4b2e      	ldr	r3, [pc, #184]	@ (80116d8 <pvPortMalloc+0x148>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	697a      	ldr	r2, [r7, #20]
 8011624:	429a      	cmp	r2, r3
 8011626:	d048      	beq.n	80116ba <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2208      	movs	r2, #8
 801162e:	189b      	adds	r3, r3, r2
 8011630:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	685a      	ldr	r2, [r3, #4]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	1ad2      	subs	r2, r2, r3
 8011642:	2308      	movs	r3, #8
 8011644:	005b      	lsls	r3, r3, #1
 8011646:	429a      	cmp	r2, r3
 8011648:	d917      	bls.n	801167a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801164a:	697a      	ldr	r2, [r7, #20]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	18d3      	adds	r3, r2, r3
 8011650:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2207      	movs	r2, #7
 8011656:	4013      	ands	r3, r2
 8011658:	d002      	beq.n	8011660 <pvPortMalloc+0xd0>
 801165a:	b672      	cpsid	i
 801165c:	46c0      	nop			@ (mov r8, r8)
 801165e:	e7fd      	b.n	801165c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	1ad2      	subs	r2, r2, r3
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	0018      	movs	r0, r3
 8011676:	f000 f8eb 	bl	8011850 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801167a:	4b19      	ldr	r3, [pc, #100]	@ (80116e0 <pvPortMalloc+0x150>)
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	1ad2      	subs	r2, r2, r3
 8011684:	4b16      	ldr	r3, [pc, #88]	@ (80116e0 <pvPortMalloc+0x150>)
 8011686:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011688:	4b15      	ldr	r3, [pc, #84]	@ (80116e0 <pvPortMalloc+0x150>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	4b16      	ldr	r3, [pc, #88]	@ (80116e8 <pvPortMalloc+0x158>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	429a      	cmp	r2, r3
 8011692:	d203      	bcs.n	801169c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011694:	4b12      	ldr	r3, [pc, #72]	@ (80116e0 <pvPortMalloc+0x150>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	4b13      	ldr	r3, [pc, #76]	@ (80116e8 <pvPortMalloc+0x158>)
 801169a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	4b0e      	ldr	r3, [pc, #56]	@ (80116dc <pvPortMalloc+0x14c>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	431a      	orrs	r2, r3
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	2200      	movs	r2, #0
 80116ae:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80116b0:	4b0e      	ldr	r3, [pc, #56]	@ (80116ec <pvPortMalloc+0x15c>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	1c5a      	adds	r2, r3, #1
 80116b6:	4b0d      	ldr	r3, [pc, #52]	@ (80116ec <pvPortMalloc+0x15c>)
 80116b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80116ba:	f7fe fd65 	bl	8010188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2207      	movs	r2, #7
 80116c2:	4013      	ands	r3, r2
 80116c4:	d002      	beq.n	80116cc <pvPortMalloc+0x13c>
 80116c6:	b672      	cpsid	i
 80116c8:	46c0      	nop			@ (mov r8, r8)
 80116ca:	e7fd      	b.n	80116c8 <pvPortMalloc+0x138>
	return pvReturn;
 80116cc:	68fb      	ldr	r3, [r7, #12]
}
 80116ce:	0018      	movs	r0, r3
 80116d0:	46bd      	mov	sp, r7
 80116d2:	b006      	add	sp, #24
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	46c0      	nop			@ (mov r8, r8)
 80116d8:	20007124 	.word	0x20007124
 80116dc:	20007138 	.word	0x20007138
 80116e0:	20007128 	.word	0x20007128
 80116e4:	2000711c 	.word	0x2000711c
 80116e8:	2000712c 	.word	0x2000712c
 80116ec:	20007130 	.word	0x20007130

080116f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d03c      	beq.n	801177c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011702:	2308      	movs	r3, #8
 8011704:	425b      	negs	r3, r3
 8011706:	68fa      	ldr	r2, [r7, #12]
 8011708:	18d3      	adds	r3, r2, r3
 801170a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	685a      	ldr	r2, [r3, #4]
 8011714:	4b1b      	ldr	r3, [pc, #108]	@ (8011784 <vPortFree+0x94>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4013      	ands	r3, r2
 801171a:	d102      	bne.n	8011722 <vPortFree+0x32>
 801171c:	b672      	cpsid	i
 801171e:	46c0      	nop			@ (mov r8, r8)
 8011720:	e7fd      	b.n	801171e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d002      	beq.n	8011730 <vPortFree+0x40>
 801172a:	b672      	cpsid	i
 801172c:	46c0      	nop			@ (mov r8, r8)
 801172e:	e7fd      	b.n	801172c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	685a      	ldr	r2, [r3, #4]
 8011734:	4b13      	ldr	r3, [pc, #76]	@ (8011784 <vPortFree+0x94>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4013      	ands	r3, r2
 801173a:	d01f      	beq.n	801177c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d11b      	bne.n	801177c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	685a      	ldr	r2, [r3, #4]
 8011748:	4b0e      	ldr	r3, [pc, #56]	@ (8011784 <vPortFree+0x94>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	43db      	mvns	r3, r3
 801174e:	401a      	ands	r2, r3
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011754:	f7fe fd0c 	bl	8010170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	4b0a      	ldr	r3, [pc, #40]	@ (8011788 <vPortFree+0x98>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	18d2      	adds	r2, r2, r3
 8011762:	4b09      	ldr	r3, [pc, #36]	@ (8011788 <vPortFree+0x98>)
 8011764:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	0018      	movs	r0, r3
 801176a:	f000 f871 	bl	8011850 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801176e:	4b07      	ldr	r3, [pc, #28]	@ (801178c <vPortFree+0x9c>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	1c5a      	adds	r2, r3, #1
 8011774:	4b05      	ldr	r3, [pc, #20]	@ (801178c <vPortFree+0x9c>)
 8011776:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8011778:	f7fe fd06 	bl	8010188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801177c:	46c0      	nop			@ (mov r8, r8)
 801177e:	46bd      	mov	sp, r7
 8011780:	b004      	add	sp, #16
 8011782:	bd80      	pop	{r7, pc}
 8011784:	20007138 	.word	0x20007138
 8011788:	20007128 	.word	0x20007128
 801178c:	20007134 	.word	0x20007134

08011790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011796:	23d0      	movs	r3, #208	@ 0xd0
 8011798:	019b      	lsls	r3, r3, #6
 801179a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801179c:	4b26      	ldr	r3, [pc, #152]	@ (8011838 <prvHeapInit+0xa8>)
 801179e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2207      	movs	r2, #7
 80117a4:	4013      	ands	r3, r2
 80117a6:	d00c      	beq.n	80117c2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	3307      	adds	r3, #7
 80117ac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2207      	movs	r2, #7
 80117b2:	4393      	bics	r3, r2
 80117b4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	1ad2      	subs	r2, r2, r3
 80117bc:	4b1e      	ldr	r3, [pc, #120]	@ (8011838 <prvHeapInit+0xa8>)
 80117be:	18d3      	adds	r3, r2, r3
 80117c0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117c6:	4b1d      	ldr	r3, [pc, #116]	@ (801183c <prvHeapInit+0xac>)
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117cc:	4b1b      	ldr	r3, [pc, #108]	@ (801183c <prvHeapInit+0xac>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	18d3      	adds	r3, r2, r3
 80117d8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117da:	2208      	movs	r2, #8
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	1a9b      	subs	r3, r3, r2
 80117e0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2207      	movs	r2, #7
 80117e6:	4393      	bics	r3, r2
 80117e8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117ea:	68fa      	ldr	r2, [r7, #12]
 80117ec:	4b14      	ldr	r3, [pc, #80]	@ (8011840 <prvHeapInit+0xb0>)
 80117ee:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80117f0:	4b13      	ldr	r3, [pc, #76]	@ (8011840 <prvHeapInit+0xb0>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2200      	movs	r2, #0
 80117f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80117f8:	4b11      	ldr	r3, [pc, #68]	@ (8011840 <prvHeapInit+0xb0>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	2200      	movs	r2, #0
 80117fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	1ad2      	subs	r2, r2, r3
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801180e:	4b0c      	ldr	r3, [pc, #48]	@ (8011840 <prvHeapInit+0xb0>)
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	685a      	ldr	r2, [r3, #4]
 801181a:	4b0a      	ldr	r3, [pc, #40]	@ (8011844 <prvHeapInit+0xb4>)
 801181c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	685a      	ldr	r2, [r3, #4]
 8011822:	4b09      	ldr	r3, [pc, #36]	@ (8011848 <prvHeapInit+0xb8>)
 8011824:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011826:	4b09      	ldr	r3, [pc, #36]	@ (801184c <prvHeapInit+0xbc>)
 8011828:	2280      	movs	r2, #128	@ 0x80
 801182a:	0612      	lsls	r2, r2, #24
 801182c:	601a      	str	r2, [r3, #0]
}
 801182e:	46c0      	nop			@ (mov r8, r8)
 8011830:	46bd      	mov	sp, r7
 8011832:	b004      	add	sp, #16
 8011834:	bd80      	pop	{r7, pc}
 8011836:	46c0      	nop			@ (mov r8, r8)
 8011838:	20003d1c 	.word	0x20003d1c
 801183c:	2000711c 	.word	0x2000711c
 8011840:	20007124 	.word	0x20007124
 8011844:	2000712c 	.word	0x2000712c
 8011848:	20007128 	.word	0x20007128
 801184c:	20007138 	.word	0x20007138

08011850 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011858:	4b27      	ldr	r3, [pc, #156]	@ (80118f8 <prvInsertBlockIntoFreeList+0xa8>)
 801185a:	60fb      	str	r3, [r7, #12]
 801185c:	e002      	b.n	8011864 <prvInsertBlockIntoFreeList+0x14>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	60fb      	str	r3, [r7, #12]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	429a      	cmp	r2, r3
 801186c:	d8f7      	bhi.n	801185e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	18d3      	adds	r3, r2, r3
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	429a      	cmp	r2, r3
 801187e:	d108      	bne.n	8011892 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	685a      	ldr	r2, [r3, #4]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	18d2      	adds	r2, r2, r3
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	18d2      	adds	r2, r2, r3
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d118      	bne.n	80118d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	4b14      	ldr	r3, [pc, #80]	@ (80118fc <prvInsertBlockIntoFreeList+0xac>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d00d      	beq.n	80118ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	685a      	ldr	r2, [r3, #4]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	18d2      	adds	r2, r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	e008      	b.n	80118e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118ce:	4b0b      	ldr	r3, [pc, #44]	@ (80118fc <prvInsertBlockIntoFreeList+0xac>)
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	601a      	str	r2, [r3, #0]
 80118d6:	e003      	b.n	80118e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d002      	beq.n	80118ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118ee:	46c0      	nop			@ (mov r8, r8)
 80118f0:	46bd      	mov	sp, r7
 80118f2:	b004      	add	sp, #16
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	46c0      	nop			@ (mov r8, r8)
 80118f8:	2000711c 	.word	0x2000711c
 80118fc:	20007124 	.word	0x20007124

08011900 <asinf>:
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	1c05      	adds	r5, r0, #0
 8011904:	f000 f94c 	bl	8011ba0 <__ieee754_asinf>
 8011908:	1c29      	adds	r1, r5, #0
 801190a:	1c04      	adds	r4, r0, #0
 801190c:	1c28      	adds	r0, r5, #0
 801190e:	f7ef fdc9 	bl	80014a4 <__aeabi_fcmpun>
 8011912:	2800      	cmp	r0, #0
 8011914:	d110      	bne.n	8011938 <asinf+0x38>
 8011916:	1c28      	adds	r0, r5, #0
 8011918:	f000 f82e 	bl	8011978 <fabsf>
 801191c:	21fe      	movs	r1, #254	@ 0xfe
 801191e:	0589      	lsls	r1, r1, #22
 8011920:	f7ee fde8 	bl	80004f4 <__aeabi_fcmpgt>
 8011924:	2800      	cmp	r0, #0
 8011926:	d007      	beq.n	8011938 <asinf+0x38>
 8011928:	f001 fb48 	bl	8012fbc <__errno>
 801192c:	2321      	movs	r3, #33	@ 0x21
 801192e:	6003      	str	r3, [r0, #0]
 8011930:	4802      	ldr	r0, [pc, #8]	@ (801193c <asinf+0x3c>)
 8011932:	f000 f871 	bl	8011a18 <nanf>
 8011936:	1c04      	adds	r4, r0, #0
 8011938:	1c20      	adds	r0, r4, #0
 801193a:	bd70      	pop	{r4, r5, r6, pc}
 801193c:	0801768d 	.word	0x0801768d

08011940 <sqrtf>:
 8011940:	b570      	push	{r4, r5, r6, lr}
 8011942:	1c05      	adds	r5, r0, #0
 8011944:	f000 f8b4 	bl	8011ab0 <__ieee754_sqrtf>
 8011948:	1c29      	adds	r1, r5, #0
 801194a:	1c04      	adds	r4, r0, #0
 801194c:	1c28      	adds	r0, r5, #0
 801194e:	f7ef fda9 	bl	80014a4 <__aeabi_fcmpun>
 8011952:	2800      	cmp	r0, #0
 8011954:	d10e      	bne.n	8011974 <sqrtf+0x34>
 8011956:	2100      	movs	r1, #0
 8011958:	1c28      	adds	r0, r5, #0
 801195a:	f7ee fdb7 	bl	80004cc <__aeabi_fcmplt>
 801195e:	2800      	cmp	r0, #0
 8011960:	d008      	beq.n	8011974 <sqrtf+0x34>
 8011962:	f001 fb2b 	bl	8012fbc <__errno>
 8011966:	2321      	movs	r3, #33	@ 0x21
 8011968:	2100      	movs	r1, #0
 801196a:	6003      	str	r3, [r0, #0]
 801196c:	1c08      	adds	r0, r1, #0
 801196e:	f7ef f8d1 	bl	8000b14 <__aeabi_fdiv>
 8011972:	1c04      	adds	r4, r0, #0
 8011974:	1c20      	adds	r0, r4, #0
 8011976:	bd70      	pop	{r4, r5, r6, pc}

08011978 <fabsf>:
 8011978:	0040      	lsls	r0, r0, #1
 801197a:	0840      	lsrs	r0, r0, #1
 801197c:	4770      	bx	lr

0801197e <fmax>:
 801197e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011980:	0004      	movs	r4, r0
 8011982:	000d      	movs	r5, r1
 8011984:	0016      	movs	r6, r2
 8011986:	001f      	movs	r7, r3
 8011988:	f000 f816 	bl	80119b8 <__fpclassifyd>
 801198c:	2800      	cmp	r0, #0
 801198e:	d104      	bne.n	801199a <fmax+0x1c>
 8011990:	0034      	movs	r4, r6
 8011992:	003d      	movs	r5, r7
 8011994:	0029      	movs	r1, r5
 8011996:	0020      	movs	r0, r4
 8011998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801199a:	0030      	movs	r0, r6
 801199c:	0039      	movs	r1, r7
 801199e:	f000 f80b 	bl	80119b8 <__fpclassifyd>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d0f6      	beq.n	8011994 <fmax+0x16>
 80119a6:	0032      	movs	r2, r6
 80119a8:	003b      	movs	r3, r7
 80119aa:	0020      	movs	r0, r4
 80119ac:	0029      	movs	r1, r5
 80119ae:	f7ee fd67 	bl	8000480 <__aeabi_dcmpgt>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d0ec      	beq.n	8011990 <fmax+0x12>
 80119b6:	e7ed      	b.n	8011994 <fmax+0x16>

080119b8 <__fpclassifyd>:
 80119b8:	000b      	movs	r3, r1
 80119ba:	b570      	push	{r4, r5, r6, lr}
 80119bc:	0004      	movs	r4, r0
 80119be:	0002      	movs	r2, r0
 80119c0:	0001      	movs	r1, r0
 80119c2:	431c      	orrs	r4, r3
 80119c4:	2002      	movs	r0, #2
 80119c6:	2c00      	cmp	r4, #0
 80119c8:	d006      	beq.n	80119d8 <__fpclassifyd+0x20>
 80119ca:	2080      	movs	r0, #128	@ 0x80
 80119cc:	0600      	lsls	r0, r0, #24
 80119ce:	4283      	cmp	r3, r0
 80119d0:	d103      	bne.n	80119da <__fpclassifyd+0x22>
 80119d2:	1e4b      	subs	r3, r1, #1
 80119d4:	4199      	sbcs	r1, r3
 80119d6:	1c88      	adds	r0, r1, #2
 80119d8:	bd70      	pop	{r4, r5, r6, pc}
 80119da:	480c      	ldr	r0, [pc, #48]	@ (8011a0c <__fpclassifyd+0x54>)
 80119dc:	0059      	lsls	r1, r3, #1
 80119de:	0849      	lsrs	r1, r1, #1
 80119e0:	4c0b      	ldr	r4, [pc, #44]	@ (8011a10 <__fpclassifyd+0x58>)
 80119e2:	180e      	adds	r6, r1, r0
 80119e4:	2004      	movs	r0, #4
 80119e6:	42a6      	cmp	r6, r4
 80119e8:	d9f6      	bls.n	80119d8 <__fpclassifyd+0x20>
 80119ea:	2480      	movs	r4, #128	@ 0x80
 80119ec:	3801      	subs	r0, #1
 80119ee:	0364      	lsls	r4, r4, #13
 80119f0:	42a3      	cmp	r3, r4
 80119f2:	d3f1      	bcc.n	80119d8 <__fpclassifyd+0x20>
 80119f4:	2580      	movs	r5, #128	@ 0x80
 80119f6:	062d      	lsls	r5, r5, #24
 80119f8:	195d      	adds	r5, r3, r5
 80119fa:	42a5      	cmp	r5, r4
 80119fc:	d3ec      	bcc.n	80119d8 <__fpclassifyd+0x20>
 80119fe:	4c05      	ldr	r4, [pc, #20]	@ (8011a14 <__fpclassifyd+0x5c>)
 8011a00:	2000      	movs	r0, #0
 8011a02:	42a1      	cmp	r1, r4
 8011a04:	d1e8      	bne.n	80119d8 <__fpclassifyd+0x20>
 8011a06:	4250      	negs	r0, r2
 8011a08:	4150      	adcs	r0, r2
 8011a0a:	e7e5      	b.n	80119d8 <__fpclassifyd+0x20>
 8011a0c:	fff00000 	.word	0xfff00000
 8011a10:	7fdfffff 	.word	0x7fdfffff
 8011a14:	7ff00000 	.word	0x7ff00000

08011a18 <nanf>:
 8011a18:	4800      	ldr	r0, [pc, #0]	@ (8011a1c <nanf+0x4>)
 8011a1a:	4770      	bx	lr
 8011a1c:	7fc00000 	.word	0x7fc00000

08011a20 <fmaxf>:
 8011a20:	b570      	push	{r4, r5, r6, lr}
 8011a22:	1c04      	adds	r4, r0, #0
 8011a24:	1c0d      	adds	r5, r1, #0
 8011a26:	f000 f827 	bl	8011a78 <__fpclassifyf>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d102      	bne.n	8011a34 <fmaxf+0x14>
 8011a2e:	1c2c      	adds	r4, r5, #0
 8011a30:	1c20      	adds	r0, r4, #0
 8011a32:	bd70      	pop	{r4, r5, r6, pc}
 8011a34:	1c28      	adds	r0, r5, #0
 8011a36:	f000 f81f 	bl	8011a78 <__fpclassifyf>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	d0f8      	beq.n	8011a30 <fmaxf+0x10>
 8011a3e:	1c29      	adds	r1, r5, #0
 8011a40:	1c20      	adds	r0, r4, #0
 8011a42:	f7ee fd57 	bl	80004f4 <__aeabi_fcmpgt>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d0f1      	beq.n	8011a2e <fmaxf+0xe>
 8011a4a:	e7f1      	b.n	8011a30 <fmaxf+0x10>

08011a4c <fminf>:
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	1c04      	adds	r4, r0, #0
 8011a50:	1c0d      	adds	r5, r1, #0
 8011a52:	f000 f811 	bl	8011a78 <__fpclassifyf>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d102      	bne.n	8011a60 <fminf+0x14>
 8011a5a:	1c2c      	adds	r4, r5, #0
 8011a5c:	1c20      	adds	r0, r4, #0
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}
 8011a60:	1c28      	adds	r0, r5, #0
 8011a62:	f000 f809 	bl	8011a78 <__fpclassifyf>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d0f8      	beq.n	8011a5c <fminf+0x10>
 8011a6a:	1c29      	adds	r1, r5, #0
 8011a6c:	1c20      	adds	r0, r4, #0
 8011a6e:	f7ee fd2d 	bl	80004cc <__aeabi_fcmplt>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d0f1      	beq.n	8011a5a <fminf+0xe>
 8011a76:	e7f1      	b.n	8011a5c <fminf+0x10>

08011a78 <__fpclassifyf>:
 8011a78:	0043      	lsls	r3, r0, #1
 8011a7a:	085a      	lsrs	r2, r3, #1
 8011a7c:	2002      	movs	r0, #2
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d00f      	beq.n	8011aa2 <__fpclassifyf+0x2a>
 8011a82:	21fe      	movs	r1, #254	@ 0xfe
 8011a84:	4b07      	ldr	r3, [pc, #28]	@ (8011aa4 <__fpclassifyf+0x2c>)
 8011a86:	05c9      	lsls	r1, r1, #23
 8011a88:	18d3      	adds	r3, r2, r3
 8011a8a:	1800      	adds	r0, r0, r0
 8011a8c:	428b      	cmp	r3, r1
 8011a8e:	d308      	bcc.n	8011aa2 <__fpclassifyf+0x2a>
 8011a90:	4905      	ldr	r1, [pc, #20]	@ (8011aa8 <__fpclassifyf+0x30>)
 8011a92:	1e53      	subs	r3, r2, #1
 8011a94:	3801      	subs	r0, #1
 8011a96:	428b      	cmp	r3, r1
 8011a98:	d903      	bls.n	8011aa2 <__fpclassifyf+0x2a>
 8011a9a:	4b04      	ldr	r3, [pc, #16]	@ (8011aac <__fpclassifyf+0x34>)
 8011a9c:	18d0      	adds	r0, r2, r3
 8011a9e:	4243      	negs	r3, r0
 8011aa0:	4158      	adcs	r0, r3
 8011aa2:	4770      	bx	lr
 8011aa4:	ff800000 	.word	0xff800000
 8011aa8:	007ffffe 	.word	0x007ffffe
 8011aac:	80800000 	.word	0x80800000

08011ab0 <__ieee754_sqrtf>:
 8011ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ab2:	0003      	movs	r3, r0
 8011ab4:	0042      	lsls	r2, r0, #1
 8011ab6:	1c04      	adds	r4, r0, #0
 8011ab8:	20ff      	movs	r0, #255	@ 0xff
 8011aba:	0852      	lsrs	r2, r2, #1
 8011abc:	05c0      	lsls	r0, r0, #23
 8011abe:	4282      	cmp	r2, r0
 8011ac0:	d30a      	bcc.n	8011ad8 <__ieee754_sqrtf+0x28>
 8011ac2:	1c21      	adds	r1, r4, #0
 8011ac4:	1c20      	adds	r0, r4, #0
 8011ac6:	f7ef fa0b 	bl	8000ee0 <__aeabi_fmul>
 8011aca:	1c01      	adds	r1, r0, #0
 8011acc:	1c20      	adds	r0, r4, #0
 8011ace:	f7ee fe97 	bl	8000800 <__aeabi_fadd>
 8011ad2:	1c04      	adds	r4, r0, #0
 8011ad4:	1c20      	adds	r0, r4, #0
 8011ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011ad8:	2a00      	cmp	r2, #0
 8011ada:	d0fb      	beq.n	8011ad4 <__ieee754_sqrtf+0x24>
 8011adc:	2c00      	cmp	r4, #0
 8011ade:	da07      	bge.n	8011af0 <__ieee754_sqrtf+0x40>
 8011ae0:	1c21      	adds	r1, r4, #0
 8011ae2:	1c20      	adds	r0, r4, #0
 8011ae4:	f7ef fb3a 	bl	800115c <__aeabi_fsub>
 8011ae8:	1c01      	adds	r1, r0, #0
 8011aea:	f7ef f813 	bl	8000b14 <__aeabi_fdiv>
 8011aee:	e7f0      	b.n	8011ad2 <__ieee754_sqrtf+0x22>
 8011af0:	0022      	movs	r2, r4
 8011af2:	15e1      	asrs	r1, r4, #23
 8011af4:	4002      	ands	r2, r0
 8011af6:	4204      	tst	r4, r0
 8011af8:	d046      	beq.n	8011b88 <__ieee754_sqrtf+0xd8>
 8011afa:	2280      	movs	r2, #128	@ 0x80
 8011afc:	000f      	movs	r7, r1
 8011afe:	025b      	lsls	r3, r3, #9
 8011b00:	0a5b      	lsrs	r3, r3, #9
 8011b02:	0412      	lsls	r2, r2, #16
 8011b04:	3f7f      	subs	r7, #127	@ 0x7f
 8011b06:	4313      	orrs	r3, r2
 8011b08:	07c9      	lsls	r1, r1, #31
 8011b0a:	d400      	bmi.n	8011b0e <__ieee754_sqrtf+0x5e>
 8011b0c:	005b      	lsls	r3, r3, #1
 8011b0e:	2400      	movs	r4, #0
 8011b10:	2180      	movs	r1, #128	@ 0x80
 8011b12:	2019      	movs	r0, #25
 8011b14:	0026      	movs	r6, r4
 8011b16:	107f      	asrs	r7, r7, #1
 8011b18:	005b      	lsls	r3, r3, #1
 8011b1a:	0449      	lsls	r1, r1, #17
 8011b1c:	1875      	adds	r5, r6, r1
 8011b1e:	001a      	movs	r2, r3
 8011b20:	429d      	cmp	r5, r3
 8011b22:	dc02      	bgt.n	8011b2a <__ieee754_sqrtf+0x7a>
 8011b24:	186e      	adds	r6, r5, r1
 8011b26:	1b5a      	subs	r2, r3, r5
 8011b28:	1864      	adds	r4, r4, r1
 8011b2a:	3801      	subs	r0, #1
 8011b2c:	0053      	lsls	r3, r2, #1
 8011b2e:	0849      	lsrs	r1, r1, #1
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d1f3      	bne.n	8011b1c <__ieee754_sqrtf+0x6c>
 8011b34:	2a00      	cmp	r2, #0
 8011b36:	d019      	beq.n	8011b6c <__ieee754_sqrtf+0xbc>
 8011b38:	4d17      	ldr	r5, [pc, #92]	@ (8011b98 <__ieee754_sqrtf+0xe8>)
 8011b3a:	4e18      	ldr	r6, [pc, #96]	@ (8011b9c <__ieee754_sqrtf+0xec>)
 8011b3c:	6828      	ldr	r0, [r5, #0]
 8011b3e:	6831      	ldr	r1, [r6, #0]
 8011b40:	682b      	ldr	r3, [r5, #0]
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	f7ef fb0a 	bl	800115c <__aeabi_fsub>
 8011b48:	1c01      	adds	r1, r0, #0
 8011b4a:	9801      	ldr	r0, [sp, #4]
 8011b4c:	f7ee fcc8 	bl	80004e0 <__aeabi_fcmple>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d00b      	beq.n	8011b6c <__ieee754_sqrtf+0xbc>
 8011b54:	6828      	ldr	r0, [r5, #0]
 8011b56:	6831      	ldr	r1, [r6, #0]
 8011b58:	f7ee fe52 	bl	8000800 <__aeabi_fadd>
 8011b5c:	682d      	ldr	r5, [r5, #0]
 8011b5e:	1c01      	adds	r1, r0, #0
 8011b60:	1c28      	adds	r0, r5, #0
 8011b62:	f7ee fcb3 	bl	80004cc <__aeabi_fcmplt>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d011      	beq.n	8011b8e <__ieee754_sqrtf+0xde>
 8011b6a:	3402      	adds	r4, #2
 8011b6c:	23fc      	movs	r3, #252	@ 0xfc
 8011b6e:	1064      	asrs	r4, r4, #1
 8011b70:	059b      	lsls	r3, r3, #22
 8011b72:	18e3      	adds	r3, r4, r3
 8011b74:	05fc      	lsls	r4, r7, #23
 8011b76:	18e4      	adds	r4, r4, r3
 8011b78:	e7ac      	b.n	8011ad4 <__ieee754_sqrtf+0x24>
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	3201      	adds	r2, #1
 8011b7e:	4203      	tst	r3, r0
 8011b80:	d0fb      	beq.n	8011b7a <__ieee754_sqrtf+0xca>
 8011b82:	3a01      	subs	r2, #1
 8011b84:	1a89      	subs	r1, r1, r2
 8011b86:	e7b8      	b.n	8011afa <__ieee754_sqrtf+0x4a>
 8011b88:	2080      	movs	r0, #128	@ 0x80
 8011b8a:	0400      	lsls	r0, r0, #16
 8011b8c:	e7f7      	b.n	8011b7e <__ieee754_sqrtf+0xce>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	3401      	adds	r4, #1
 8011b92:	439c      	bics	r4, r3
 8011b94:	e7ea      	b.n	8011b6c <__ieee754_sqrtf+0xbc>
 8011b96:	46c0      	nop			@ (mov r8, r8)
 8011b98:	20000084 	.word	0x20000084
 8011b9c:	20000080 	.word	0x20000080

08011ba0 <__ieee754_asinf>:
 8011ba0:	23fe      	movs	r3, #254	@ 0xfe
 8011ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ba4:	0046      	lsls	r6, r0, #1
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	1c04      	adds	r4, r0, #0
 8011baa:	9002      	str	r0, [sp, #8]
 8011bac:	0876      	lsrs	r6, r6, #1
 8011bae:	059b      	lsls	r3, r3, #22
 8011bb0:	429e      	cmp	r6, r3
 8011bb2:	d10c      	bne.n	8011bce <__ieee754_asinf+0x2e>
 8011bb4:	498e      	ldr	r1, [pc, #568]	@ (8011df0 <__ieee754_asinf+0x250>)
 8011bb6:	f7ef f993 	bl	8000ee0 <__aeabi_fmul>
 8011bba:	498e      	ldr	r1, [pc, #568]	@ (8011df4 <__ieee754_asinf+0x254>)
 8011bbc:	1c05      	adds	r5, r0, #0
 8011bbe:	1c20      	adds	r0, r4, #0
 8011bc0:	f7ef f98e 	bl	8000ee0 <__aeabi_fmul>
 8011bc4:	1c01      	adds	r1, r0, #0
 8011bc6:	1c28      	adds	r0, r5, #0
 8011bc8:	f7ee fe1a 	bl	8000800 <__aeabi_fadd>
 8011bcc:	e007      	b.n	8011bde <__ieee754_asinf+0x3e>
 8011bce:	429e      	cmp	r6, r3
 8011bd0:	d909      	bls.n	8011be6 <__ieee754_asinf+0x46>
 8011bd2:	1c01      	adds	r1, r0, #0
 8011bd4:	f7ef fac2 	bl	800115c <__aeabi_fsub>
 8011bd8:	1c01      	adds	r1, r0, #0
 8011bda:	f7ee ff9b 	bl	8000b14 <__aeabi_fdiv>
 8011bde:	1c04      	adds	r4, r0, #0
 8011be0:	1c20      	adds	r0, r4, #0
 8011be2:	b005      	add	sp, #20
 8011be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011be6:	23fc      	movs	r3, #252	@ 0xfc
 8011be8:	059b      	lsls	r3, r3, #22
 8011bea:	429e      	cmp	r6, r3
 8011bec:	d20c      	bcs.n	8011c08 <__ieee754_asinf+0x68>
 8011bee:	23c8      	movs	r3, #200	@ 0xc8
 8011bf0:	059b      	lsls	r3, r3, #22
 8011bf2:	429e      	cmp	r6, r3
 8011bf4:	d276      	bcs.n	8011ce4 <__ieee754_asinf+0x144>
 8011bf6:	4980      	ldr	r1, [pc, #512]	@ (8011df8 <__ieee754_asinf+0x258>)
 8011bf8:	f7ee fe02 	bl	8000800 <__aeabi_fadd>
 8011bfc:	21fe      	movs	r1, #254	@ 0xfe
 8011bfe:	0589      	lsls	r1, r1, #22
 8011c00:	f7ee fc78 	bl	80004f4 <__aeabi_fcmpgt>
 8011c04:	2800      	cmp	r0, #0
 8011c06:	d1eb      	bne.n	8011be0 <__ieee754_asinf+0x40>
 8011c08:	1c20      	adds	r0, r4, #0
 8011c0a:	f7ff feb5 	bl	8011978 <fabsf>
 8011c0e:	1c01      	adds	r1, r0, #0
 8011c10:	20fe      	movs	r0, #254	@ 0xfe
 8011c12:	0580      	lsls	r0, r0, #22
 8011c14:	f7ef faa2 	bl	800115c <__aeabi_fsub>
 8011c18:	21fc      	movs	r1, #252	@ 0xfc
 8011c1a:	0589      	lsls	r1, r1, #22
 8011c1c:	f7ef f960 	bl	8000ee0 <__aeabi_fmul>
 8011c20:	4976      	ldr	r1, [pc, #472]	@ (8011dfc <__ieee754_asinf+0x25c>)
 8011c22:	1c04      	adds	r4, r0, #0
 8011c24:	f7ef f95c 	bl	8000ee0 <__aeabi_fmul>
 8011c28:	4975      	ldr	r1, [pc, #468]	@ (8011e00 <__ieee754_asinf+0x260>)
 8011c2a:	f7ee fde9 	bl	8000800 <__aeabi_fadd>
 8011c2e:	1c21      	adds	r1, r4, #0
 8011c30:	f7ef f956 	bl	8000ee0 <__aeabi_fmul>
 8011c34:	4973      	ldr	r1, [pc, #460]	@ (8011e04 <__ieee754_asinf+0x264>)
 8011c36:	f7ef fa91 	bl	800115c <__aeabi_fsub>
 8011c3a:	1c21      	adds	r1, r4, #0
 8011c3c:	f7ef f950 	bl	8000ee0 <__aeabi_fmul>
 8011c40:	4971      	ldr	r1, [pc, #452]	@ (8011e08 <__ieee754_asinf+0x268>)
 8011c42:	f7ee fddd 	bl	8000800 <__aeabi_fadd>
 8011c46:	1c21      	adds	r1, r4, #0
 8011c48:	f7ef f94a 	bl	8000ee0 <__aeabi_fmul>
 8011c4c:	496f      	ldr	r1, [pc, #444]	@ (8011e0c <__ieee754_asinf+0x26c>)
 8011c4e:	f7ef fa85 	bl	800115c <__aeabi_fsub>
 8011c52:	1c21      	adds	r1, r4, #0
 8011c54:	f7ef f944 	bl	8000ee0 <__aeabi_fmul>
 8011c58:	496d      	ldr	r1, [pc, #436]	@ (8011e10 <__ieee754_asinf+0x270>)
 8011c5a:	f7ee fdd1 	bl	8000800 <__aeabi_fadd>
 8011c5e:	1c21      	adds	r1, r4, #0
 8011c60:	f7ef f93e 	bl	8000ee0 <__aeabi_fmul>
 8011c64:	496b      	ldr	r1, [pc, #428]	@ (8011e14 <__ieee754_asinf+0x274>)
 8011c66:	9001      	str	r0, [sp, #4]
 8011c68:	1c20      	adds	r0, r4, #0
 8011c6a:	f7ef f939 	bl	8000ee0 <__aeabi_fmul>
 8011c6e:	496a      	ldr	r1, [pc, #424]	@ (8011e18 <__ieee754_asinf+0x278>)
 8011c70:	f7ef fa74 	bl	800115c <__aeabi_fsub>
 8011c74:	1c21      	adds	r1, r4, #0
 8011c76:	f7ef f933 	bl	8000ee0 <__aeabi_fmul>
 8011c7a:	4968      	ldr	r1, [pc, #416]	@ (8011e1c <__ieee754_asinf+0x27c>)
 8011c7c:	f7ee fdc0 	bl	8000800 <__aeabi_fadd>
 8011c80:	1c21      	adds	r1, r4, #0
 8011c82:	f7ef f92d 	bl	8000ee0 <__aeabi_fmul>
 8011c86:	4966      	ldr	r1, [pc, #408]	@ (8011e20 <__ieee754_asinf+0x280>)
 8011c88:	f7ef fa68 	bl	800115c <__aeabi_fsub>
 8011c8c:	1c21      	adds	r1, r4, #0
 8011c8e:	f7ef f927 	bl	8000ee0 <__aeabi_fmul>
 8011c92:	21fe      	movs	r1, #254	@ 0xfe
 8011c94:	0589      	lsls	r1, r1, #22
 8011c96:	f7ee fdb3 	bl	8000800 <__aeabi_fadd>
 8011c9a:	1c07      	adds	r7, r0, #0
 8011c9c:	1c20      	adds	r0, r4, #0
 8011c9e:	f7ff ff07 	bl	8011ab0 <__ieee754_sqrtf>
 8011ca2:	4b60      	ldr	r3, [pc, #384]	@ (8011e24 <__ieee754_asinf+0x284>)
 8011ca4:	1c05      	adds	r5, r0, #0
 8011ca6:	429e      	cmp	r6, r3
 8011ca8:	d966      	bls.n	8011d78 <__ieee754_asinf+0x1d8>
 8011caa:	1c39      	adds	r1, r7, #0
 8011cac:	9801      	ldr	r0, [sp, #4]
 8011cae:	f7ee ff31 	bl	8000b14 <__aeabi_fdiv>
 8011cb2:	1c29      	adds	r1, r5, #0
 8011cb4:	f7ef f914 	bl	8000ee0 <__aeabi_fmul>
 8011cb8:	1c29      	adds	r1, r5, #0
 8011cba:	f7ee fda1 	bl	8000800 <__aeabi_fadd>
 8011cbe:	1c01      	adds	r1, r0, #0
 8011cc0:	f7ee fd9e 	bl	8000800 <__aeabi_fadd>
 8011cc4:	4958      	ldr	r1, [pc, #352]	@ (8011e28 <__ieee754_asinf+0x288>)
 8011cc6:	f7ee fd9b 	bl	8000800 <__aeabi_fadd>
 8011cca:	1c01      	adds	r1, r0, #0
 8011ccc:	4848      	ldr	r0, [pc, #288]	@ (8011df0 <__ieee754_asinf+0x250>)
 8011cce:	f7ef fa45 	bl	800115c <__aeabi_fsub>
 8011cd2:	9b02      	ldr	r3, [sp, #8]
 8011cd4:	1c04      	adds	r4, r0, #0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	dd00      	ble.n	8011cdc <__ieee754_asinf+0x13c>
 8011cda:	e781      	b.n	8011be0 <__ieee754_asinf+0x40>
 8011cdc:	2380      	movs	r3, #128	@ 0x80
 8011cde:	061b      	lsls	r3, r3, #24
 8011ce0:	18c4      	adds	r4, r0, r3
 8011ce2:	e77d      	b.n	8011be0 <__ieee754_asinf+0x40>
 8011ce4:	1c01      	adds	r1, r0, #0
 8011ce6:	f7ef f8fb 	bl	8000ee0 <__aeabi_fmul>
 8011cea:	4944      	ldr	r1, [pc, #272]	@ (8011dfc <__ieee754_asinf+0x25c>)
 8011cec:	1c05      	adds	r5, r0, #0
 8011cee:	f7ef f8f7 	bl	8000ee0 <__aeabi_fmul>
 8011cf2:	4943      	ldr	r1, [pc, #268]	@ (8011e00 <__ieee754_asinf+0x260>)
 8011cf4:	f7ee fd84 	bl	8000800 <__aeabi_fadd>
 8011cf8:	1c29      	adds	r1, r5, #0
 8011cfa:	f7ef f8f1 	bl	8000ee0 <__aeabi_fmul>
 8011cfe:	4941      	ldr	r1, [pc, #260]	@ (8011e04 <__ieee754_asinf+0x264>)
 8011d00:	f7ef fa2c 	bl	800115c <__aeabi_fsub>
 8011d04:	1c29      	adds	r1, r5, #0
 8011d06:	f7ef f8eb 	bl	8000ee0 <__aeabi_fmul>
 8011d0a:	493f      	ldr	r1, [pc, #252]	@ (8011e08 <__ieee754_asinf+0x268>)
 8011d0c:	f7ee fd78 	bl	8000800 <__aeabi_fadd>
 8011d10:	1c29      	adds	r1, r5, #0
 8011d12:	f7ef f8e5 	bl	8000ee0 <__aeabi_fmul>
 8011d16:	493d      	ldr	r1, [pc, #244]	@ (8011e0c <__ieee754_asinf+0x26c>)
 8011d18:	f7ef fa20 	bl	800115c <__aeabi_fsub>
 8011d1c:	1c29      	adds	r1, r5, #0
 8011d1e:	f7ef f8df 	bl	8000ee0 <__aeabi_fmul>
 8011d22:	493b      	ldr	r1, [pc, #236]	@ (8011e10 <__ieee754_asinf+0x270>)
 8011d24:	f7ee fd6c 	bl	8000800 <__aeabi_fadd>
 8011d28:	1c29      	adds	r1, r5, #0
 8011d2a:	f7ef f8d9 	bl	8000ee0 <__aeabi_fmul>
 8011d2e:	4939      	ldr	r1, [pc, #228]	@ (8011e14 <__ieee754_asinf+0x274>)
 8011d30:	1c06      	adds	r6, r0, #0
 8011d32:	1c28      	adds	r0, r5, #0
 8011d34:	f7ef f8d4 	bl	8000ee0 <__aeabi_fmul>
 8011d38:	4937      	ldr	r1, [pc, #220]	@ (8011e18 <__ieee754_asinf+0x278>)
 8011d3a:	f7ef fa0f 	bl	800115c <__aeabi_fsub>
 8011d3e:	1c29      	adds	r1, r5, #0
 8011d40:	f7ef f8ce 	bl	8000ee0 <__aeabi_fmul>
 8011d44:	4935      	ldr	r1, [pc, #212]	@ (8011e1c <__ieee754_asinf+0x27c>)
 8011d46:	f7ee fd5b 	bl	8000800 <__aeabi_fadd>
 8011d4a:	1c29      	adds	r1, r5, #0
 8011d4c:	f7ef f8c8 	bl	8000ee0 <__aeabi_fmul>
 8011d50:	4933      	ldr	r1, [pc, #204]	@ (8011e20 <__ieee754_asinf+0x280>)
 8011d52:	f7ef fa03 	bl	800115c <__aeabi_fsub>
 8011d56:	1c29      	adds	r1, r5, #0
 8011d58:	f7ef f8c2 	bl	8000ee0 <__aeabi_fmul>
 8011d5c:	21fe      	movs	r1, #254	@ 0xfe
 8011d5e:	0589      	lsls	r1, r1, #22
 8011d60:	f7ee fd4e 	bl	8000800 <__aeabi_fadd>
 8011d64:	1c01      	adds	r1, r0, #0
 8011d66:	1c30      	adds	r0, r6, #0
 8011d68:	f7ee fed4 	bl	8000b14 <__aeabi_fdiv>
 8011d6c:	1c21      	adds	r1, r4, #0
 8011d6e:	f7ef f8b7 	bl	8000ee0 <__aeabi_fmul>
 8011d72:	1c01      	adds	r1, r0, #0
 8011d74:	1c20      	adds	r0, r4, #0
 8011d76:	e727      	b.n	8011bc8 <__ieee754_asinf+0x28>
 8011d78:	1c01      	adds	r1, r0, #0
 8011d7a:	0b06      	lsrs	r6, r0, #12
 8011d7c:	f7ee fd40 	bl	8000800 <__aeabi_fadd>
 8011d80:	1c39      	adds	r1, r7, #0
 8011d82:	9003      	str	r0, [sp, #12]
 8011d84:	9801      	ldr	r0, [sp, #4]
 8011d86:	f7ee fec5 	bl	8000b14 <__aeabi_fdiv>
 8011d8a:	1c01      	adds	r1, r0, #0
 8011d8c:	9803      	ldr	r0, [sp, #12]
 8011d8e:	f7ef f8a7 	bl	8000ee0 <__aeabi_fmul>
 8011d92:	0336      	lsls	r6, r6, #12
 8011d94:	1c07      	adds	r7, r0, #0
 8011d96:	1c31      	adds	r1, r6, #0
 8011d98:	1c30      	adds	r0, r6, #0
 8011d9a:	f7ef f8a1 	bl	8000ee0 <__aeabi_fmul>
 8011d9e:	1c01      	adds	r1, r0, #0
 8011da0:	1c20      	adds	r0, r4, #0
 8011da2:	f7ef f9db 	bl	800115c <__aeabi_fsub>
 8011da6:	1c31      	adds	r1, r6, #0
 8011da8:	1c04      	adds	r4, r0, #0
 8011daa:	1c28      	adds	r0, r5, #0
 8011dac:	f7ee fd28 	bl	8000800 <__aeabi_fadd>
 8011db0:	1c01      	adds	r1, r0, #0
 8011db2:	1c20      	adds	r0, r4, #0
 8011db4:	f7ee feae 	bl	8000b14 <__aeabi_fdiv>
 8011db8:	1c01      	adds	r1, r0, #0
 8011dba:	f7ee fd21 	bl	8000800 <__aeabi_fadd>
 8011dbe:	1c01      	adds	r1, r0, #0
 8011dc0:	480c      	ldr	r0, [pc, #48]	@ (8011df4 <__ieee754_asinf+0x254>)
 8011dc2:	f7ef f9cb 	bl	800115c <__aeabi_fsub>
 8011dc6:	1c01      	adds	r1, r0, #0
 8011dc8:	1c38      	adds	r0, r7, #0
 8011dca:	f7ef f9c7 	bl	800115c <__aeabi_fsub>
 8011dce:	1c31      	adds	r1, r6, #0
 8011dd0:	1c04      	adds	r4, r0, #0
 8011dd2:	1c30      	adds	r0, r6, #0
 8011dd4:	f7ee fd14 	bl	8000800 <__aeabi_fadd>
 8011dd8:	1c01      	adds	r1, r0, #0
 8011dda:	4814      	ldr	r0, [pc, #80]	@ (8011e2c <__ieee754_asinf+0x28c>)
 8011ddc:	f7ef f9be 	bl	800115c <__aeabi_fsub>
 8011de0:	1c01      	adds	r1, r0, #0
 8011de2:	1c20      	adds	r0, r4, #0
 8011de4:	f7ef f9ba 	bl	800115c <__aeabi_fsub>
 8011de8:	1c01      	adds	r1, r0, #0
 8011dea:	4810      	ldr	r0, [pc, #64]	@ (8011e2c <__ieee754_asinf+0x28c>)
 8011dec:	e76f      	b.n	8011cce <__ieee754_asinf+0x12e>
 8011dee:	46c0      	nop			@ (mov r8, r8)
 8011df0:	3fc90fdb 	.word	0x3fc90fdb
 8011df4:	b33bbd2e 	.word	0xb33bbd2e
 8011df8:	7149f2ca 	.word	0x7149f2ca
 8011dfc:	3811ef08 	.word	0x3811ef08
 8011e00:	3a4f7f04 	.word	0x3a4f7f04
 8011e04:	3d241146 	.word	0x3d241146
 8011e08:	3e4e0aa8 	.word	0x3e4e0aa8
 8011e0c:	3ea6b090 	.word	0x3ea6b090
 8011e10:	3e2aaaab 	.word	0x3e2aaaab
 8011e14:	3d9dc62e 	.word	0x3d9dc62e
 8011e18:	3f303361 	.word	0x3f303361
 8011e1c:	4001572d 	.word	0x4001572d
 8011e20:	4019d139 	.word	0x4019d139
 8011e24:	3f799999 	.word	0x3f799999
 8011e28:	333bbd2e 	.word	0x333bbd2e
 8011e2c:	3f490fdb 	.word	0x3f490fdb

08011e30 <__cvt>:
 8011e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e32:	001f      	movs	r7, r3
 8011e34:	2300      	movs	r3, #0
 8011e36:	0016      	movs	r6, r2
 8011e38:	b08b      	sub	sp, #44	@ 0x2c
 8011e3a:	429f      	cmp	r7, r3
 8011e3c:	da04      	bge.n	8011e48 <__cvt+0x18>
 8011e3e:	2180      	movs	r1, #128	@ 0x80
 8011e40:	0609      	lsls	r1, r1, #24
 8011e42:	187b      	adds	r3, r7, r1
 8011e44:	001f      	movs	r7, r3
 8011e46:	232d      	movs	r3, #45	@ 0x2d
 8011e48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011e4a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011e4c:	7013      	strb	r3, [r2, #0]
 8011e4e:	2320      	movs	r3, #32
 8011e50:	2203      	movs	r2, #3
 8011e52:	439d      	bics	r5, r3
 8011e54:	2d46      	cmp	r5, #70	@ 0x46
 8011e56:	d007      	beq.n	8011e68 <__cvt+0x38>
 8011e58:	002b      	movs	r3, r5
 8011e5a:	3b45      	subs	r3, #69	@ 0x45
 8011e5c:	4259      	negs	r1, r3
 8011e5e:	414b      	adcs	r3, r1
 8011e60:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011e62:	3a01      	subs	r2, #1
 8011e64:	18cb      	adds	r3, r1, r3
 8011e66:	9310      	str	r3, [sp, #64]	@ 0x40
 8011e68:	ab09      	add	r3, sp, #36	@ 0x24
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	ab08      	add	r3, sp, #32
 8011e6e:	9303      	str	r3, [sp, #12]
 8011e70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011e72:	9200      	str	r2, [sp, #0]
 8011e74:	9302      	str	r3, [sp, #8]
 8011e76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e78:	0032      	movs	r2, r6
 8011e7a:	9301      	str	r3, [sp, #4]
 8011e7c:	003b      	movs	r3, r7
 8011e7e:	f001 f96d 	bl	801315c <_dtoa_r>
 8011e82:	0004      	movs	r4, r0
 8011e84:	2d47      	cmp	r5, #71	@ 0x47
 8011e86:	d11b      	bne.n	8011ec0 <__cvt+0x90>
 8011e88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011e8a:	07db      	lsls	r3, r3, #31
 8011e8c:	d511      	bpl.n	8011eb2 <__cvt+0x82>
 8011e8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e90:	18c3      	adds	r3, r0, r3
 8011e92:	9307      	str	r3, [sp, #28]
 8011e94:	2200      	movs	r2, #0
 8011e96:	2300      	movs	r3, #0
 8011e98:	0030      	movs	r0, r6
 8011e9a:	0039      	movs	r1, r7
 8011e9c:	f7ee fad6 	bl	800044c <__aeabi_dcmpeq>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d001      	beq.n	8011ea8 <__cvt+0x78>
 8011ea4:	9b07      	ldr	r3, [sp, #28]
 8011ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ea8:	2230      	movs	r2, #48	@ 0x30
 8011eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eac:	9907      	ldr	r1, [sp, #28]
 8011eae:	428b      	cmp	r3, r1
 8011eb0:	d320      	bcc.n	8011ef4 <__cvt+0xc4>
 8011eb2:	0020      	movs	r0, r4
 8011eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eb6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011eb8:	1b1b      	subs	r3, r3, r4
 8011eba:	6013      	str	r3, [r2, #0]
 8011ebc:	b00b      	add	sp, #44	@ 0x2c
 8011ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ec0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ec2:	18c3      	adds	r3, r0, r3
 8011ec4:	9307      	str	r3, [sp, #28]
 8011ec6:	2d46      	cmp	r5, #70	@ 0x46
 8011ec8:	d1e4      	bne.n	8011e94 <__cvt+0x64>
 8011eca:	7803      	ldrb	r3, [r0, #0]
 8011ecc:	2b30      	cmp	r3, #48	@ 0x30
 8011ece:	d10c      	bne.n	8011eea <__cvt+0xba>
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	0030      	movs	r0, r6
 8011ed6:	0039      	movs	r1, r7
 8011ed8:	f7ee fab8 	bl	800044c <__aeabi_dcmpeq>
 8011edc:	2800      	cmp	r0, #0
 8011ede:	d104      	bne.n	8011eea <__cvt+0xba>
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011ee4:	1a9b      	subs	r3, r3, r2
 8011ee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011ee8:	6013      	str	r3, [r2, #0]
 8011eea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011eec:	9a07      	ldr	r2, [sp, #28]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	18d3      	adds	r3, r2, r3
 8011ef2:	e7ce      	b.n	8011e92 <__cvt+0x62>
 8011ef4:	1c59      	adds	r1, r3, #1
 8011ef6:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ef8:	701a      	strb	r2, [r3, #0]
 8011efa:	e7d6      	b.n	8011eaa <__cvt+0x7a>

08011efc <__exponent>:
 8011efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011efe:	232b      	movs	r3, #43	@ 0x2b
 8011f00:	0005      	movs	r5, r0
 8011f02:	000c      	movs	r4, r1
 8011f04:	b085      	sub	sp, #20
 8011f06:	7002      	strb	r2, [r0, #0]
 8011f08:	2900      	cmp	r1, #0
 8011f0a:	da01      	bge.n	8011f10 <__exponent+0x14>
 8011f0c:	424c      	negs	r4, r1
 8011f0e:	3302      	adds	r3, #2
 8011f10:	706b      	strb	r3, [r5, #1]
 8011f12:	2c09      	cmp	r4, #9
 8011f14:	dd2c      	ble.n	8011f70 <__exponent+0x74>
 8011f16:	ab02      	add	r3, sp, #8
 8011f18:	1dde      	adds	r6, r3, #7
 8011f1a:	0020      	movs	r0, r4
 8011f1c:	210a      	movs	r1, #10
 8011f1e:	f7ee fa7f 	bl	8000420 <__aeabi_idivmod>
 8011f22:	0037      	movs	r7, r6
 8011f24:	3130      	adds	r1, #48	@ 0x30
 8011f26:	3e01      	subs	r6, #1
 8011f28:	0020      	movs	r0, r4
 8011f2a:	7031      	strb	r1, [r6, #0]
 8011f2c:	210a      	movs	r1, #10
 8011f2e:	9401      	str	r4, [sp, #4]
 8011f30:	f7ee f990 	bl	8000254 <__divsi3>
 8011f34:	9b01      	ldr	r3, [sp, #4]
 8011f36:	0004      	movs	r4, r0
 8011f38:	2b63      	cmp	r3, #99	@ 0x63
 8011f3a:	dcee      	bgt.n	8011f1a <__exponent+0x1e>
 8011f3c:	1eba      	subs	r2, r7, #2
 8011f3e:	1ca8      	adds	r0, r5, #2
 8011f40:	0001      	movs	r1, r0
 8011f42:	0013      	movs	r3, r2
 8011f44:	3430      	adds	r4, #48	@ 0x30
 8011f46:	7014      	strb	r4, [r2, #0]
 8011f48:	ac02      	add	r4, sp, #8
 8011f4a:	3407      	adds	r4, #7
 8011f4c:	429c      	cmp	r4, r3
 8011f4e:	d80a      	bhi.n	8011f66 <__exponent+0x6a>
 8011f50:	2300      	movs	r3, #0
 8011f52:	42a2      	cmp	r2, r4
 8011f54:	d803      	bhi.n	8011f5e <__exponent+0x62>
 8011f56:	3309      	adds	r3, #9
 8011f58:	aa02      	add	r2, sp, #8
 8011f5a:	189b      	adds	r3, r3, r2
 8011f5c:	1bdb      	subs	r3, r3, r7
 8011f5e:	18c0      	adds	r0, r0, r3
 8011f60:	1b40      	subs	r0, r0, r5
 8011f62:	b005      	add	sp, #20
 8011f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f66:	781c      	ldrb	r4, [r3, #0]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	700c      	strb	r4, [r1, #0]
 8011f6c:	3101      	adds	r1, #1
 8011f6e:	e7eb      	b.n	8011f48 <__exponent+0x4c>
 8011f70:	2330      	movs	r3, #48	@ 0x30
 8011f72:	18e4      	adds	r4, r4, r3
 8011f74:	70ab      	strb	r3, [r5, #2]
 8011f76:	1d28      	adds	r0, r5, #4
 8011f78:	70ec      	strb	r4, [r5, #3]
 8011f7a:	e7f1      	b.n	8011f60 <__exponent+0x64>

08011f7c <_printf_float>:
 8011f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f7e:	b097      	sub	sp, #92	@ 0x5c
 8011f80:	000d      	movs	r5, r1
 8011f82:	920a      	str	r2, [sp, #40]	@ 0x28
 8011f84:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8011f86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f88:	9009      	str	r0, [sp, #36]	@ 0x24
 8011f8a:	f000 ff65 	bl	8012e58 <_localeconv_r>
 8011f8e:	6803      	ldr	r3, [r0, #0]
 8011f90:	0018      	movs	r0, r3
 8011f92:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f94:	f7ee f8b8 	bl	8000108 <strlen>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011f9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8011f9e:	7e2b      	ldrb	r3, [r5, #24]
 8011fa0:	2207      	movs	r2, #7
 8011fa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	930e      	str	r3, [sp, #56]	@ 0x38
 8011fa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	05c9      	lsls	r1, r1, #23
 8011fae:	d545      	bpl.n	801203c <_printf_float+0xc0>
 8011fb0:	189b      	adds	r3, r3, r2
 8011fb2:	4393      	bics	r3, r2
 8011fb4:	001a      	movs	r2, r3
 8011fb6:	3208      	adds	r2, #8
 8011fb8:	6022      	str	r2, [r4, #0]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	681e      	ldr	r6, [r3, #0]
 8011fbe:	685f      	ldr	r7, [r3, #4]
 8011fc0:	007b      	lsls	r3, r7, #1
 8011fc2:	085b      	lsrs	r3, r3, #1
 8011fc4:	9311      	str	r3, [sp, #68]	@ 0x44
 8011fc6:	9610      	str	r6, [sp, #64]	@ 0x40
 8011fc8:	64ae      	str	r6, [r5, #72]	@ 0x48
 8011fca:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8011fcc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011fce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011fd0:	4ba7      	ldr	r3, [pc, #668]	@ (8012270 <_printf_float+0x2f4>)
 8011fd2:	4252      	negs	r2, r2
 8011fd4:	f7f1 f936 	bl	8003244 <__aeabi_dcmpun>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d131      	bne.n	8012040 <_printf_float+0xc4>
 8011fdc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011fde:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	4ba3      	ldr	r3, [pc, #652]	@ (8012270 <_printf_float+0x2f4>)
 8011fe4:	4252      	negs	r2, r2
 8011fe6:	f7ee fa41 	bl	800046c <__aeabi_dcmple>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d128      	bne.n	8012040 <_printf_float+0xc4>
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	0030      	movs	r0, r6
 8011ff4:	0039      	movs	r1, r7
 8011ff6:	f7ee fa2f 	bl	8000458 <__aeabi_dcmplt>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d003      	beq.n	8012006 <_printf_float+0x8a>
 8011ffe:	002b      	movs	r3, r5
 8012000:	222d      	movs	r2, #45	@ 0x2d
 8012002:	3343      	adds	r3, #67	@ 0x43
 8012004:	701a      	strb	r2, [r3, #0]
 8012006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012008:	4f9a      	ldr	r7, [pc, #616]	@ (8012274 <_printf_float+0x2f8>)
 801200a:	2b47      	cmp	r3, #71	@ 0x47
 801200c:	d900      	bls.n	8012010 <_printf_float+0x94>
 801200e:	4f9a      	ldr	r7, [pc, #616]	@ (8012278 <_printf_float+0x2fc>)
 8012010:	2303      	movs	r3, #3
 8012012:	2400      	movs	r4, #0
 8012014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012016:	612b      	str	r3, [r5, #16]
 8012018:	3301      	adds	r3, #1
 801201a:	439a      	bics	r2, r3
 801201c:	602a      	str	r2, [r5, #0]
 801201e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012020:	0029      	movs	r1, r5
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012028:	aa15      	add	r2, sp, #84	@ 0x54
 801202a:	f000 f9e5 	bl	80123f8 <_printf_common>
 801202e:	3001      	adds	r0, #1
 8012030:	d000      	beq.n	8012034 <_printf_float+0xb8>
 8012032:	e09f      	b.n	8012174 <_printf_float+0x1f8>
 8012034:	2001      	movs	r0, #1
 8012036:	4240      	negs	r0, r0
 8012038:	b017      	add	sp, #92	@ 0x5c
 801203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801203c:	3307      	adds	r3, #7
 801203e:	e7b8      	b.n	8011fb2 <_printf_float+0x36>
 8012040:	0032      	movs	r2, r6
 8012042:	003b      	movs	r3, r7
 8012044:	0030      	movs	r0, r6
 8012046:	0039      	movs	r1, r7
 8012048:	f7f1 f8fc 	bl	8003244 <__aeabi_dcmpun>
 801204c:	2800      	cmp	r0, #0
 801204e:	d00b      	beq.n	8012068 <_printf_float+0xec>
 8012050:	2f00      	cmp	r7, #0
 8012052:	da03      	bge.n	801205c <_printf_float+0xe0>
 8012054:	002b      	movs	r3, r5
 8012056:	222d      	movs	r2, #45	@ 0x2d
 8012058:	3343      	adds	r3, #67	@ 0x43
 801205a:	701a      	strb	r2, [r3, #0]
 801205c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801205e:	4f87      	ldr	r7, [pc, #540]	@ (801227c <_printf_float+0x300>)
 8012060:	2b47      	cmp	r3, #71	@ 0x47
 8012062:	d9d5      	bls.n	8012010 <_printf_float+0x94>
 8012064:	4f86      	ldr	r7, [pc, #536]	@ (8012280 <_printf_float+0x304>)
 8012066:	e7d3      	b.n	8012010 <_printf_float+0x94>
 8012068:	2220      	movs	r2, #32
 801206a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801206c:	686b      	ldr	r3, [r5, #4]
 801206e:	4394      	bics	r4, r2
 8012070:	1c5a      	adds	r2, r3, #1
 8012072:	d146      	bne.n	8012102 <_printf_float+0x186>
 8012074:	3307      	adds	r3, #7
 8012076:	606b      	str	r3, [r5, #4]
 8012078:	2380      	movs	r3, #128	@ 0x80
 801207a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801207c:	00db      	lsls	r3, r3, #3
 801207e:	4313      	orrs	r3, r2
 8012080:	2200      	movs	r2, #0
 8012082:	602b      	str	r3, [r5, #0]
 8012084:	9206      	str	r2, [sp, #24]
 8012086:	aa14      	add	r2, sp, #80	@ 0x50
 8012088:	9205      	str	r2, [sp, #20]
 801208a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801208c:	a90a      	add	r1, sp, #40	@ 0x28
 801208e:	9204      	str	r2, [sp, #16]
 8012090:	aa13      	add	r2, sp, #76	@ 0x4c
 8012092:	9203      	str	r2, [sp, #12]
 8012094:	2223      	movs	r2, #35	@ 0x23
 8012096:	1852      	adds	r2, r2, r1
 8012098:	9202      	str	r2, [sp, #8]
 801209a:	9301      	str	r3, [sp, #4]
 801209c:	686b      	ldr	r3, [r5, #4]
 801209e:	0032      	movs	r2, r6
 80120a0:	9300      	str	r3, [sp, #0]
 80120a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120a4:	003b      	movs	r3, r7
 80120a6:	f7ff fec3 	bl	8011e30 <__cvt>
 80120aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80120ac:	0007      	movs	r7, r0
 80120ae:	2c47      	cmp	r4, #71	@ 0x47
 80120b0:	d12d      	bne.n	801210e <_printf_float+0x192>
 80120b2:	1cd3      	adds	r3, r2, #3
 80120b4:	db02      	blt.n	80120bc <_printf_float+0x140>
 80120b6:	686b      	ldr	r3, [r5, #4]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	dd48      	ble.n	801214e <_printf_float+0x1d2>
 80120bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80120c0:	3b02      	subs	r3, #2
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80120c6:	0028      	movs	r0, r5
 80120c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120ca:	3901      	subs	r1, #1
 80120cc:	3050      	adds	r0, #80	@ 0x50
 80120ce:	9113      	str	r1, [sp, #76]	@ 0x4c
 80120d0:	f7ff ff14 	bl	8011efc <__exponent>
 80120d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80120d6:	0004      	movs	r4, r0
 80120d8:	1813      	adds	r3, r2, r0
 80120da:	612b      	str	r3, [r5, #16]
 80120dc:	2a01      	cmp	r2, #1
 80120de:	dc02      	bgt.n	80120e6 <_printf_float+0x16a>
 80120e0:	682a      	ldr	r2, [r5, #0]
 80120e2:	07d2      	lsls	r2, r2, #31
 80120e4:	d501      	bpl.n	80120ea <_printf_float+0x16e>
 80120e6:	3301      	adds	r3, #1
 80120e8:	612b      	str	r3, [r5, #16]
 80120ea:	2323      	movs	r3, #35	@ 0x23
 80120ec:	aa0a      	add	r2, sp, #40	@ 0x28
 80120ee:	189b      	adds	r3, r3, r2
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d100      	bne.n	80120f8 <_printf_float+0x17c>
 80120f6:	e792      	b.n	801201e <_printf_float+0xa2>
 80120f8:	002b      	movs	r3, r5
 80120fa:	222d      	movs	r2, #45	@ 0x2d
 80120fc:	3343      	adds	r3, #67	@ 0x43
 80120fe:	701a      	strb	r2, [r3, #0]
 8012100:	e78d      	b.n	801201e <_printf_float+0xa2>
 8012102:	2c47      	cmp	r4, #71	@ 0x47
 8012104:	d1b8      	bne.n	8012078 <_printf_float+0xfc>
 8012106:	2b00      	cmp	r3, #0
 8012108:	d1b6      	bne.n	8012078 <_printf_float+0xfc>
 801210a:	3301      	adds	r3, #1
 801210c:	e7b3      	b.n	8012076 <_printf_float+0xfa>
 801210e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012110:	0011      	movs	r1, r2
 8012112:	2b65      	cmp	r3, #101	@ 0x65
 8012114:	d9d7      	bls.n	80120c6 <_printf_float+0x14a>
 8012116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012118:	2b66      	cmp	r3, #102	@ 0x66
 801211a:	d11a      	bne.n	8012152 <_printf_float+0x1d6>
 801211c:	686b      	ldr	r3, [r5, #4]
 801211e:	2a00      	cmp	r2, #0
 8012120:	dd09      	ble.n	8012136 <_printf_float+0x1ba>
 8012122:	612a      	str	r2, [r5, #16]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d102      	bne.n	801212e <_printf_float+0x1b2>
 8012128:	6829      	ldr	r1, [r5, #0]
 801212a:	07c9      	lsls	r1, r1, #31
 801212c:	d50b      	bpl.n	8012146 <_printf_float+0x1ca>
 801212e:	3301      	adds	r3, #1
 8012130:	189b      	adds	r3, r3, r2
 8012132:	612b      	str	r3, [r5, #16]
 8012134:	e007      	b.n	8012146 <_printf_float+0x1ca>
 8012136:	2b00      	cmp	r3, #0
 8012138:	d103      	bne.n	8012142 <_printf_float+0x1c6>
 801213a:	2201      	movs	r2, #1
 801213c:	6829      	ldr	r1, [r5, #0]
 801213e:	4211      	tst	r1, r2
 8012140:	d000      	beq.n	8012144 <_printf_float+0x1c8>
 8012142:	1c9a      	adds	r2, r3, #2
 8012144:	612a      	str	r2, [r5, #16]
 8012146:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012148:	2400      	movs	r4, #0
 801214a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801214c:	e7cd      	b.n	80120ea <_printf_float+0x16e>
 801214e:	2367      	movs	r3, #103	@ 0x67
 8012150:	930c      	str	r3, [sp, #48]	@ 0x30
 8012152:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012154:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012156:	4299      	cmp	r1, r3
 8012158:	db06      	blt.n	8012168 <_printf_float+0x1ec>
 801215a:	682b      	ldr	r3, [r5, #0]
 801215c:	6129      	str	r1, [r5, #16]
 801215e:	07db      	lsls	r3, r3, #31
 8012160:	d5f1      	bpl.n	8012146 <_printf_float+0x1ca>
 8012162:	3101      	adds	r1, #1
 8012164:	6129      	str	r1, [r5, #16]
 8012166:	e7ee      	b.n	8012146 <_printf_float+0x1ca>
 8012168:	2201      	movs	r2, #1
 801216a:	2900      	cmp	r1, #0
 801216c:	dce0      	bgt.n	8012130 <_printf_float+0x1b4>
 801216e:	1892      	adds	r2, r2, r2
 8012170:	1a52      	subs	r2, r2, r1
 8012172:	e7dd      	b.n	8012130 <_printf_float+0x1b4>
 8012174:	682a      	ldr	r2, [r5, #0]
 8012176:	0553      	lsls	r3, r2, #21
 8012178:	d408      	bmi.n	801218c <_printf_float+0x210>
 801217a:	692b      	ldr	r3, [r5, #16]
 801217c:	003a      	movs	r2, r7
 801217e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012180:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012182:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012184:	47a0      	blx	r4
 8012186:	3001      	adds	r0, #1
 8012188:	d129      	bne.n	80121de <_printf_float+0x262>
 801218a:	e753      	b.n	8012034 <_printf_float+0xb8>
 801218c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801218e:	2b65      	cmp	r3, #101	@ 0x65
 8012190:	d800      	bhi.n	8012194 <_printf_float+0x218>
 8012192:	e0da      	b.n	801234a <_printf_float+0x3ce>
 8012194:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8012196:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012198:	2200      	movs	r2, #0
 801219a:	2300      	movs	r3, #0
 801219c:	f7ee f956 	bl	800044c <__aeabi_dcmpeq>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d033      	beq.n	801220c <_printf_float+0x290>
 80121a4:	2301      	movs	r3, #1
 80121a6:	4a37      	ldr	r2, [pc, #220]	@ (8012284 <_printf_float+0x308>)
 80121a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80121aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80121ae:	47a0      	blx	r4
 80121b0:	3001      	adds	r0, #1
 80121b2:	d100      	bne.n	80121b6 <_printf_float+0x23a>
 80121b4:	e73e      	b.n	8012034 <_printf_float+0xb8>
 80121b6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80121b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121ba:	42b3      	cmp	r3, r6
 80121bc:	db02      	blt.n	80121c4 <_printf_float+0x248>
 80121be:	682b      	ldr	r3, [r5, #0]
 80121c0:	07db      	lsls	r3, r3, #31
 80121c2:	d50c      	bpl.n	80121de <_printf_float+0x262>
 80121c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80121c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80121ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80121cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121ce:	47a0      	blx	r4
 80121d0:	2400      	movs	r4, #0
 80121d2:	3001      	adds	r0, #1
 80121d4:	d100      	bne.n	80121d8 <_printf_float+0x25c>
 80121d6:	e72d      	b.n	8012034 <_printf_float+0xb8>
 80121d8:	1e73      	subs	r3, r6, #1
 80121da:	42a3      	cmp	r3, r4
 80121dc:	dc0a      	bgt.n	80121f4 <_printf_float+0x278>
 80121de:	682b      	ldr	r3, [r5, #0]
 80121e0:	079b      	lsls	r3, r3, #30
 80121e2:	d500      	bpl.n	80121e6 <_printf_float+0x26a>
 80121e4:	e105      	b.n	80123f2 <_printf_float+0x476>
 80121e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80121e8:	68e8      	ldr	r0, [r5, #12]
 80121ea:	4298      	cmp	r0, r3
 80121ec:	db00      	blt.n	80121f0 <_printf_float+0x274>
 80121ee:	e723      	b.n	8012038 <_printf_float+0xbc>
 80121f0:	0018      	movs	r0, r3
 80121f2:	e721      	b.n	8012038 <_printf_float+0xbc>
 80121f4:	002a      	movs	r2, r5
 80121f6:	2301      	movs	r3, #1
 80121f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80121fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80121fe:	321a      	adds	r2, #26
 8012200:	47b8      	blx	r7
 8012202:	3001      	adds	r0, #1
 8012204:	d100      	bne.n	8012208 <_printf_float+0x28c>
 8012206:	e715      	b.n	8012034 <_printf_float+0xb8>
 8012208:	3401      	adds	r4, #1
 801220a:	e7e5      	b.n	80121d8 <_printf_float+0x25c>
 801220c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801220e:	2b00      	cmp	r3, #0
 8012210:	dc3a      	bgt.n	8012288 <_printf_float+0x30c>
 8012212:	2301      	movs	r3, #1
 8012214:	4a1b      	ldr	r2, [pc, #108]	@ (8012284 <_printf_float+0x308>)
 8012216:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012218:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801221a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801221c:	47a0      	blx	r4
 801221e:	3001      	adds	r0, #1
 8012220:	d100      	bne.n	8012224 <_printf_float+0x2a8>
 8012222:	e707      	b.n	8012034 <_printf_float+0xb8>
 8012224:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012226:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012228:	4333      	orrs	r3, r6
 801222a:	d102      	bne.n	8012232 <_printf_float+0x2b6>
 801222c:	682b      	ldr	r3, [r5, #0]
 801222e:	07db      	lsls	r3, r3, #31
 8012230:	d5d5      	bpl.n	80121de <_printf_float+0x262>
 8012232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012234:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012236:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012238:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801223a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801223c:	47a0      	blx	r4
 801223e:	2300      	movs	r3, #0
 8012240:	3001      	adds	r0, #1
 8012242:	d100      	bne.n	8012246 <_printf_float+0x2ca>
 8012244:	e6f6      	b.n	8012034 <_printf_float+0xb8>
 8012246:	930c      	str	r3, [sp, #48]	@ 0x30
 8012248:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801224a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801224c:	425b      	negs	r3, r3
 801224e:	4293      	cmp	r3, r2
 8012250:	dc01      	bgt.n	8012256 <_printf_float+0x2da>
 8012252:	0033      	movs	r3, r6
 8012254:	e792      	b.n	801217c <_printf_float+0x200>
 8012256:	002a      	movs	r2, r5
 8012258:	2301      	movs	r3, #1
 801225a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801225c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801225e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012260:	321a      	adds	r2, #26
 8012262:	47a0      	blx	r4
 8012264:	3001      	adds	r0, #1
 8012266:	d100      	bne.n	801226a <_printf_float+0x2ee>
 8012268:	e6e4      	b.n	8012034 <_printf_float+0xb8>
 801226a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801226c:	3301      	adds	r3, #1
 801226e:	e7ea      	b.n	8012246 <_printf_float+0x2ca>
 8012270:	7fefffff 	.word	0x7fefffff
 8012274:	080172c0 	.word	0x080172c0
 8012278:	080172c4 	.word	0x080172c4
 801227c:	080172c8 	.word	0x080172c8
 8012280:	080172cc 	.word	0x080172cc
 8012284:	080172d0 	.word	0x080172d0
 8012288:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801228a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801228c:	930c      	str	r3, [sp, #48]	@ 0x30
 801228e:	429e      	cmp	r6, r3
 8012290:	dd00      	ble.n	8012294 <_printf_float+0x318>
 8012292:	001e      	movs	r6, r3
 8012294:	2e00      	cmp	r6, #0
 8012296:	dc31      	bgt.n	80122fc <_printf_float+0x380>
 8012298:	43f3      	mvns	r3, r6
 801229a:	2400      	movs	r4, #0
 801229c:	17db      	asrs	r3, r3, #31
 801229e:	4033      	ands	r3, r6
 80122a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80122a2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80122a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122a6:	1af3      	subs	r3, r6, r3
 80122a8:	42a3      	cmp	r3, r4
 80122aa:	dc30      	bgt.n	801230e <_printf_float+0x392>
 80122ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122b0:	429a      	cmp	r2, r3
 80122b2:	dc38      	bgt.n	8012326 <_printf_float+0x3aa>
 80122b4:	682b      	ldr	r3, [r5, #0]
 80122b6:	07db      	lsls	r3, r3, #31
 80122b8:	d435      	bmi.n	8012326 <_printf_float+0x3aa>
 80122ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80122bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122c0:	1b9b      	subs	r3, r3, r6
 80122c2:	1b14      	subs	r4, r2, r4
 80122c4:	429c      	cmp	r4, r3
 80122c6:	dd00      	ble.n	80122ca <_printf_float+0x34e>
 80122c8:	001c      	movs	r4, r3
 80122ca:	2c00      	cmp	r4, #0
 80122cc:	dc34      	bgt.n	8012338 <_printf_float+0x3bc>
 80122ce:	43e3      	mvns	r3, r4
 80122d0:	2600      	movs	r6, #0
 80122d2:	17db      	asrs	r3, r3, #31
 80122d4:	401c      	ands	r4, r3
 80122d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	1b1b      	subs	r3, r3, r4
 80122de:	42b3      	cmp	r3, r6
 80122e0:	dc00      	bgt.n	80122e4 <_printf_float+0x368>
 80122e2:	e77c      	b.n	80121de <_printf_float+0x262>
 80122e4:	002a      	movs	r2, r5
 80122e6:	2301      	movs	r3, #1
 80122e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80122ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80122ee:	321a      	adds	r2, #26
 80122f0:	47b8      	blx	r7
 80122f2:	3001      	adds	r0, #1
 80122f4:	d100      	bne.n	80122f8 <_printf_float+0x37c>
 80122f6:	e69d      	b.n	8012034 <_printf_float+0xb8>
 80122f8:	3601      	adds	r6, #1
 80122fa:	e7ec      	b.n	80122d6 <_printf_float+0x35a>
 80122fc:	0033      	movs	r3, r6
 80122fe:	003a      	movs	r2, r7
 8012300:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012304:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012306:	47a0      	blx	r4
 8012308:	3001      	adds	r0, #1
 801230a:	d1c5      	bne.n	8012298 <_printf_float+0x31c>
 801230c:	e692      	b.n	8012034 <_printf_float+0xb8>
 801230e:	002a      	movs	r2, r5
 8012310:	2301      	movs	r3, #1
 8012312:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012314:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012316:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012318:	321a      	adds	r2, #26
 801231a:	47b0      	blx	r6
 801231c:	3001      	adds	r0, #1
 801231e:	d100      	bne.n	8012322 <_printf_float+0x3a6>
 8012320:	e688      	b.n	8012034 <_printf_float+0xb8>
 8012322:	3401      	adds	r4, #1
 8012324:	e7bd      	b.n	80122a2 <_printf_float+0x326>
 8012326:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801232a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801232c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801232e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012330:	47a0      	blx	r4
 8012332:	3001      	adds	r0, #1
 8012334:	d1c1      	bne.n	80122ba <_printf_float+0x33e>
 8012336:	e67d      	b.n	8012034 <_printf_float+0xb8>
 8012338:	19ba      	adds	r2, r7, r6
 801233a:	0023      	movs	r3, r4
 801233c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801233e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012340:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012342:	47b0      	blx	r6
 8012344:	3001      	adds	r0, #1
 8012346:	d1c2      	bne.n	80122ce <_printf_float+0x352>
 8012348:	e674      	b.n	8012034 <_printf_float+0xb8>
 801234a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801234c:	930c      	str	r3, [sp, #48]	@ 0x30
 801234e:	2b01      	cmp	r3, #1
 8012350:	dc02      	bgt.n	8012358 <_printf_float+0x3dc>
 8012352:	2301      	movs	r3, #1
 8012354:	421a      	tst	r2, r3
 8012356:	d039      	beq.n	80123cc <_printf_float+0x450>
 8012358:	2301      	movs	r3, #1
 801235a:	003a      	movs	r2, r7
 801235c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801235e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012360:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012362:	47b0      	blx	r6
 8012364:	3001      	adds	r0, #1
 8012366:	d100      	bne.n	801236a <_printf_float+0x3ee>
 8012368:	e664      	b.n	8012034 <_printf_float+0xb8>
 801236a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801236c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801236e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012370:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012372:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012374:	47b0      	blx	r6
 8012376:	3001      	adds	r0, #1
 8012378:	d100      	bne.n	801237c <_printf_float+0x400>
 801237a:	e65b      	b.n	8012034 <_printf_float+0xb8>
 801237c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801237e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012382:	2200      	movs	r2, #0
 8012384:	3b01      	subs	r3, #1
 8012386:	930c      	str	r3, [sp, #48]	@ 0x30
 8012388:	2300      	movs	r3, #0
 801238a:	f7ee f85f 	bl	800044c <__aeabi_dcmpeq>
 801238e:	2800      	cmp	r0, #0
 8012390:	d11a      	bne.n	80123c8 <_printf_float+0x44c>
 8012392:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012394:	1c7a      	adds	r2, r7, #1
 8012396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012398:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801239a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801239c:	47b0      	blx	r6
 801239e:	3001      	adds	r0, #1
 80123a0:	d10e      	bne.n	80123c0 <_printf_float+0x444>
 80123a2:	e647      	b.n	8012034 <_printf_float+0xb8>
 80123a4:	002a      	movs	r2, r5
 80123a6:	2301      	movs	r3, #1
 80123a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80123ae:	321a      	adds	r2, #26
 80123b0:	47b8      	blx	r7
 80123b2:	3001      	adds	r0, #1
 80123b4:	d100      	bne.n	80123b8 <_printf_float+0x43c>
 80123b6:	e63d      	b.n	8012034 <_printf_float+0xb8>
 80123b8:	3601      	adds	r6, #1
 80123ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123bc:	429e      	cmp	r6, r3
 80123be:	dbf1      	blt.n	80123a4 <_printf_float+0x428>
 80123c0:	002a      	movs	r2, r5
 80123c2:	0023      	movs	r3, r4
 80123c4:	3250      	adds	r2, #80	@ 0x50
 80123c6:	e6da      	b.n	801217e <_printf_float+0x202>
 80123c8:	2600      	movs	r6, #0
 80123ca:	e7f6      	b.n	80123ba <_printf_float+0x43e>
 80123cc:	003a      	movs	r2, r7
 80123ce:	e7e2      	b.n	8012396 <_printf_float+0x41a>
 80123d0:	002a      	movs	r2, r5
 80123d2:	2301      	movs	r3, #1
 80123d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80123da:	3219      	adds	r2, #25
 80123dc:	47b0      	blx	r6
 80123de:	3001      	adds	r0, #1
 80123e0:	d100      	bne.n	80123e4 <_printf_float+0x468>
 80123e2:	e627      	b.n	8012034 <_printf_float+0xb8>
 80123e4:	3401      	adds	r4, #1
 80123e6:	68eb      	ldr	r3, [r5, #12]
 80123e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80123ea:	1a9b      	subs	r3, r3, r2
 80123ec:	42a3      	cmp	r3, r4
 80123ee:	dcef      	bgt.n	80123d0 <_printf_float+0x454>
 80123f0:	e6f9      	b.n	80121e6 <_printf_float+0x26a>
 80123f2:	2400      	movs	r4, #0
 80123f4:	e7f7      	b.n	80123e6 <_printf_float+0x46a>
 80123f6:	46c0      	nop			@ (mov r8, r8)

080123f8 <_printf_common>:
 80123f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123fa:	0016      	movs	r6, r2
 80123fc:	9301      	str	r3, [sp, #4]
 80123fe:	688a      	ldr	r2, [r1, #8]
 8012400:	690b      	ldr	r3, [r1, #16]
 8012402:	000c      	movs	r4, r1
 8012404:	9000      	str	r0, [sp, #0]
 8012406:	4293      	cmp	r3, r2
 8012408:	da00      	bge.n	801240c <_printf_common+0x14>
 801240a:	0013      	movs	r3, r2
 801240c:	0022      	movs	r2, r4
 801240e:	6033      	str	r3, [r6, #0]
 8012410:	3243      	adds	r2, #67	@ 0x43
 8012412:	7812      	ldrb	r2, [r2, #0]
 8012414:	2a00      	cmp	r2, #0
 8012416:	d001      	beq.n	801241c <_printf_common+0x24>
 8012418:	3301      	adds	r3, #1
 801241a:	6033      	str	r3, [r6, #0]
 801241c:	6823      	ldr	r3, [r4, #0]
 801241e:	069b      	lsls	r3, r3, #26
 8012420:	d502      	bpl.n	8012428 <_printf_common+0x30>
 8012422:	6833      	ldr	r3, [r6, #0]
 8012424:	3302      	adds	r3, #2
 8012426:	6033      	str	r3, [r6, #0]
 8012428:	6822      	ldr	r2, [r4, #0]
 801242a:	2306      	movs	r3, #6
 801242c:	0015      	movs	r5, r2
 801242e:	401d      	ands	r5, r3
 8012430:	421a      	tst	r2, r3
 8012432:	d027      	beq.n	8012484 <_printf_common+0x8c>
 8012434:	0023      	movs	r3, r4
 8012436:	3343      	adds	r3, #67	@ 0x43
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	1e5a      	subs	r2, r3, #1
 801243c:	4193      	sbcs	r3, r2
 801243e:	6822      	ldr	r2, [r4, #0]
 8012440:	0692      	lsls	r2, r2, #26
 8012442:	d430      	bmi.n	80124a6 <_printf_common+0xae>
 8012444:	0022      	movs	r2, r4
 8012446:	9901      	ldr	r1, [sp, #4]
 8012448:	9800      	ldr	r0, [sp, #0]
 801244a:	9d08      	ldr	r5, [sp, #32]
 801244c:	3243      	adds	r2, #67	@ 0x43
 801244e:	47a8      	blx	r5
 8012450:	3001      	adds	r0, #1
 8012452:	d025      	beq.n	80124a0 <_printf_common+0xa8>
 8012454:	2206      	movs	r2, #6
 8012456:	6823      	ldr	r3, [r4, #0]
 8012458:	2500      	movs	r5, #0
 801245a:	4013      	ands	r3, r2
 801245c:	2b04      	cmp	r3, #4
 801245e:	d105      	bne.n	801246c <_printf_common+0x74>
 8012460:	6833      	ldr	r3, [r6, #0]
 8012462:	68e5      	ldr	r5, [r4, #12]
 8012464:	1aed      	subs	r5, r5, r3
 8012466:	43eb      	mvns	r3, r5
 8012468:	17db      	asrs	r3, r3, #31
 801246a:	401d      	ands	r5, r3
 801246c:	68a3      	ldr	r3, [r4, #8]
 801246e:	6922      	ldr	r2, [r4, #16]
 8012470:	4293      	cmp	r3, r2
 8012472:	dd01      	ble.n	8012478 <_printf_common+0x80>
 8012474:	1a9b      	subs	r3, r3, r2
 8012476:	18ed      	adds	r5, r5, r3
 8012478:	2600      	movs	r6, #0
 801247a:	42b5      	cmp	r5, r6
 801247c:	d120      	bne.n	80124c0 <_printf_common+0xc8>
 801247e:	2000      	movs	r0, #0
 8012480:	e010      	b.n	80124a4 <_printf_common+0xac>
 8012482:	3501      	adds	r5, #1
 8012484:	68e3      	ldr	r3, [r4, #12]
 8012486:	6832      	ldr	r2, [r6, #0]
 8012488:	1a9b      	subs	r3, r3, r2
 801248a:	42ab      	cmp	r3, r5
 801248c:	ddd2      	ble.n	8012434 <_printf_common+0x3c>
 801248e:	0022      	movs	r2, r4
 8012490:	2301      	movs	r3, #1
 8012492:	9901      	ldr	r1, [sp, #4]
 8012494:	9800      	ldr	r0, [sp, #0]
 8012496:	9f08      	ldr	r7, [sp, #32]
 8012498:	3219      	adds	r2, #25
 801249a:	47b8      	blx	r7
 801249c:	3001      	adds	r0, #1
 801249e:	d1f0      	bne.n	8012482 <_printf_common+0x8a>
 80124a0:	2001      	movs	r0, #1
 80124a2:	4240      	negs	r0, r0
 80124a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80124a6:	2030      	movs	r0, #48	@ 0x30
 80124a8:	18e1      	adds	r1, r4, r3
 80124aa:	3143      	adds	r1, #67	@ 0x43
 80124ac:	7008      	strb	r0, [r1, #0]
 80124ae:	0021      	movs	r1, r4
 80124b0:	1c5a      	adds	r2, r3, #1
 80124b2:	3145      	adds	r1, #69	@ 0x45
 80124b4:	7809      	ldrb	r1, [r1, #0]
 80124b6:	18a2      	adds	r2, r4, r2
 80124b8:	3243      	adds	r2, #67	@ 0x43
 80124ba:	3302      	adds	r3, #2
 80124bc:	7011      	strb	r1, [r2, #0]
 80124be:	e7c1      	b.n	8012444 <_printf_common+0x4c>
 80124c0:	0022      	movs	r2, r4
 80124c2:	2301      	movs	r3, #1
 80124c4:	9901      	ldr	r1, [sp, #4]
 80124c6:	9800      	ldr	r0, [sp, #0]
 80124c8:	9f08      	ldr	r7, [sp, #32]
 80124ca:	321a      	adds	r2, #26
 80124cc:	47b8      	blx	r7
 80124ce:	3001      	adds	r0, #1
 80124d0:	d0e6      	beq.n	80124a0 <_printf_common+0xa8>
 80124d2:	3601      	adds	r6, #1
 80124d4:	e7d1      	b.n	801247a <_printf_common+0x82>
	...

080124d8 <_printf_i>:
 80124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124da:	b08b      	sub	sp, #44	@ 0x2c
 80124dc:	9206      	str	r2, [sp, #24]
 80124de:	000a      	movs	r2, r1
 80124e0:	3243      	adds	r2, #67	@ 0x43
 80124e2:	9307      	str	r3, [sp, #28]
 80124e4:	9005      	str	r0, [sp, #20]
 80124e6:	9203      	str	r2, [sp, #12]
 80124e8:	7e0a      	ldrb	r2, [r1, #24]
 80124ea:	000c      	movs	r4, r1
 80124ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80124ee:	2a78      	cmp	r2, #120	@ 0x78
 80124f0:	d809      	bhi.n	8012506 <_printf_i+0x2e>
 80124f2:	2a62      	cmp	r2, #98	@ 0x62
 80124f4:	d80b      	bhi.n	801250e <_printf_i+0x36>
 80124f6:	2a00      	cmp	r2, #0
 80124f8:	d100      	bne.n	80124fc <_printf_i+0x24>
 80124fa:	e0bc      	b.n	8012676 <_printf_i+0x19e>
 80124fc:	497b      	ldr	r1, [pc, #492]	@ (80126ec <_printf_i+0x214>)
 80124fe:	9104      	str	r1, [sp, #16]
 8012500:	2a58      	cmp	r2, #88	@ 0x58
 8012502:	d100      	bne.n	8012506 <_printf_i+0x2e>
 8012504:	e090      	b.n	8012628 <_printf_i+0x150>
 8012506:	0025      	movs	r5, r4
 8012508:	3542      	adds	r5, #66	@ 0x42
 801250a:	702a      	strb	r2, [r5, #0]
 801250c:	e022      	b.n	8012554 <_printf_i+0x7c>
 801250e:	0010      	movs	r0, r2
 8012510:	3863      	subs	r0, #99	@ 0x63
 8012512:	2815      	cmp	r0, #21
 8012514:	d8f7      	bhi.n	8012506 <_printf_i+0x2e>
 8012516:	f7ed fe09 	bl	800012c <__gnu_thumb1_case_shi>
 801251a:	0016      	.short	0x0016
 801251c:	fff6001f 	.word	0xfff6001f
 8012520:	fff6fff6 	.word	0xfff6fff6
 8012524:	001ffff6 	.word	0x001ffff6
 8012528:	fff6fff6 	.word	0xfff6fff6
 801252c:	fff6fff6 	.word	0xfff6fff6
 8012530:	003600a1 	.word	0x003600a1
 8012534:	fff60080 	.word	0xfff60080
 8012538:	00b2fff6 	.word	0x00b2fff6
 801253c:	0036fff6 	.word	0x0036fff6
 8012540:	fff6fff6 	.word	0xfff6fff6
 8012544:	0084      	.short	0x0084
 8012546:	0025      	movs	r5, r4
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	3542      	adds	r5, #66	@ 0x42
 801254c:	1d11      	adds	r1, r2, #4
 801254e:	6019      	str	r1, [r3, #0]
 8012550:	6813      	ldr	r3, [r2, #0]
 8012552:	702b      	strb	r3, [r5, #0]
 8012554:	2301      	movs	r3, #1
 8012556:	e0a0      	b.n	801269a <_printf_i+0x1c2>
 8012558:	6818      	ldr	r0, [r3, #0]
 801255a:	6809      	ldr	r1, [r1, #0]
 801255c:	1d02      	adds	r2, r0, #4
 801255e:	060d      	lsls	r5, r1, #24
 8012560:	d50b      	bpl.n	801257a <_printf_i+0xa2>
 8012562:	6806      	ldr	r6, [r0, #0]
 8012564:	601a      	str	r2, [r3, #0]
 8012566:	2e00      	cmp	r6, #0
 8012568:	da03      	bge.n	8012572 <_printf_i+0x9a>
 801256a:	232d      	movs	r3, #45	@ 0x2d
 801256c:	9a03      	ldr	r2, [sp, #12]
 801256e:	4276      	negs	r6, r6
 8012570:	7013      	strb	r3, [r2, #0]
 8012572:	4b5e      	ldr	r3, [pc, #376]	@ (80126ec <_printf_i+0x214>)
 8012574:	270a      	movs	r7, #10
 8012576:	9304      	str	r3, [sp, #16]
 8012578:	e018      	b.n	80125ac <_printf_i+0xd4>
 801257a:	6806      	ldr	r6, [r0, #0]
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	0649      	lsls	r1, r1, #25
 8012580:	d5f1      	bpl.n	8012566 <_printf_i+0x8e>
 8012582:	b236      	sxth	r6, r6
 8012584:	e7ef      	b.n	8012566 <_printf_i+0x8e>
 8012586:	6808      	ldr	r0, [r1, #0]
 8012588:	6819      	ldr	r1, [r3, #0]
 801258a:	c940      	ldmia	r1!, {r6}
 801258c:	0605      	lsls	r5, r0, #24
 801258e:	d402      	bmi.n	8012596 <_printf_i+0xbe>
 8012590:	0640      	lsls	r0, r0, #25
 8012592:	d500      	bpl.n	8012596 <_printf_i+0xbe>
 8012594:	b2b6      	uxth	r6, r6
 8012596:	6019      	str	r1, [r3, #0]
 8012598:	4b54      	ldr	r3, [pc, #336]	@ (80126ec <_printf_i+0x214>)
 801259a:	270a      	movs	r7, #10
 801259c:	9304      	str	r3, [sp, #16]
 801259e:	2a6f      	cmp	r2, #111	@ 0x6f
 80125a0:	d100      	bne.n	80125a4 <_printf_i+0xcc>
 80125a2:	3f02      	subs	r7, #2
 80125a4:	0023      	movs	r3, r4
 80125a6:	2200      	movs	r2, #0
 80125a8:	3343      	adds	r3, #67	@ 0x43
 80125aa:	701a      	strb	r2, [r3, #0]
 80125ac:	6863      	ldr	r3, [r4, #4]
 80125ae:	60a3      	str	r3, [r4, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	db03      	blt.n	80125bc <_printf_i+0xe4>
 80125b4:	2104      	movs	r1, #4
 80125b6:	6822      	ldr	r2, [r4, #0]
 80125b8:	438a      	bics	r2, r1
 80125ba:	6022      	str	r2, [r4, #0]
 80125bc:	2e00      	cmp	r6, #0
 80125be:	d102      	bne.n	80125c6 <_printf_i+0xee>
 80125c0:	9d03      	ldr	r5, [sp, #12]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00c      	beq.n	80125e0 <_printf_i+0x108>
 80125c6:	9d03      	ldr	r5, [sp, #12]
 80125c8:	0030      	movs	r0, r6
 80125ca:	0039      	movs	r1, r7
 80125cc:	f7ed fe3e 	bl	800024c <__aeabi_uidivmod>
 80125d0:	9b04      	ldr	r3, [sp, #16]
 80125d2:	3d01      	subs	r5, #1
 80125d4:	5c5b      	ldrb	r3, [r3, r1]
 80125d6:	702b      	strb	r3, [r5, #0]
 80125d8:	0033      	movs	r3, r6
 80125da:	0006      	movs	r6, r0
 80125dc:	429f      	cmp	r7, r3
 80125de:	d9f3      	bls.n	80125c8 <_printf_i+0xf0>
 80125e0:	2f08      	cmp	r7, #8
 80125e2:	d109      	bne.n	80125f8 <_printf_i+0x120>
 80125e4:	6823      	ldr	r3, [r4, #0]
 80125e6:	07db      	lsls	r3, r3, #31
 80125e8:	d506      	bpl.n	80125f8 <_printf_i+0x120>
 80125ea:	6862      	ldr	r2, [r4, #4]
 80125ec:	6923      	ldr	r3, [r4, #16]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	dc02      	bgt.n	80125f8 <_printf_i+0x120>
 80125f2:	2330      	movs	r3, #48	@ 0x30
 80125f4:	3d01      	subs	r5, #1
 80125f6:	702b      	strb	r3, [r5, #0]
 80125f8:	9b03      	ldr	r3, [sp, #12]
 80125fa:	1b5b      	subs	r3, r3, r5
 80125fc:	6123      	str	r3, [r4, #16]
 80125fe:	9b07      	ldr	r3, [sp, #28]
 8012600:	0021      	movs	r1, r4
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	9805      	ldr	r0, [sp, #20]
 8012606:	9b06      	ldr	r3, [sp, #24]
 8012608:	aa09      	add	r2, sp, #36	@ 0x24
 801260a:	f7ff fef5 	bl	80123f8 <_printf_common>
 801260e:	3001      	adds	r0, #1
 8012610:	d148      	bne.n	80126a4 <_printf_i+0x1cc>
 8012612:	2001      	movs	r0, #1
 8012614:	4240      	negs	r0, r0
 8012616:	b00b      	add	sp, #44	@ 0x2c
 8012618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801261a:	2220      	movs	r2, #32
 801261c:	6809      	ldr	r1, [r1, #0]
 801261e:	430a      	orrs	r2, r1
 8012620:	6022      	str	r2, [r4, #0]
 8012622:	2278      	movs	r2, #120	@ 0x78
 8012624:	4932      	ldr	r1, [pc, #200]	@ (80126f0 <_printf_i+0x218>)
 8012626:	9104      	str	r1, [sp, #16]
 8012628:	0021      	movs	r1, r4
 801262a:	3145      	adds	r1, #69	@ 0x45
 801262c:	700a      	strb	r2, [r1, #0]
 801262e:	6819      	ldr	r1, [r3, #0]
 8012630:	6822      	ldr	r2, [r4, #0]
 8012632:	c940      	ldmia	r1!, {r6}
 8012634:	0610      	lsls	r0, r2, #24
 8012636:	d402      	bmi.n	801263e <_printf_i+0x166>
 8012638:	0650      	lsls	r0, r2, #25
 801263a:	d500      	bpl.n	801263e <_printf_i+0x166>
 801263c:	b2b6      	uxth	r6, r6
 801263e:	6019      	str	r1, [r3, #0]
 8012640:	07d3      	lsls	r3, r2, #31
 8012642:	d502      	bpl.n	801264a <_printf_i+0x172>
 8012644:	2320      	movs	r3, #32
 8012646:	4313      	orrs	r3, r2
 8012648:	6023      	str	r3, [r4, #0]
 801264a:	2e00      	cmp	r6, #0
 801264c:	d001      	beq.n	8012652 <_printf_i+0x17a>
 801264e:	2710      	movs	r7, #16
 8012650:	e7a8      	b.n	80125a4 <_printf_i+0xcc>
 8012652:	2220      	movs	r2, #32
 8012654:	6823      	ldr	r3, [r4, #0]
 8012656:	4393      	bics	r3, r2
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	e7f8      	b.n	801264e <_printf_i+0x176>
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	680d      	ldr	r5, [r1, #0]
 8012660:	1d10      	adds	r0, r2, #4
 8012662:	6949      	ldr	r1, [r1, #20]
 8012664:	6018      	str	r0, [r3, #0]
 8012666:	6813      	ldr	r3, [r2, #0]
 8012668:	062e      	lsls	r6, r5, #24
 801266a:	d501      	bpl.n	8012670 <_printf_i+0x198>
 801266c:	6019      	str	r1, [r3, #0]
 801266e:	e002      	b.n	8012676 <_printf_i+0x19e>
 8012670:	066d      	lsls	r5, r5, #25
 8012672:	d5fb      	bpl.n	801266c <_printf_i+0x194>
 8012674:	8019      	strh	r1, [r3, #0]
 8012676:	2300      	movs	r3, #0
 8012678:	9d03      	ldr	r5, [sp, #12]
 801267a:	6123      	str	r3, [r4, #16]
 801267c:	e7bf      	b.n	80125fe <_printf_i+0x126>
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	1d11      	adds	r1, r2, #4
 8012682:	6019      	str	r1, [r3, #0]
 8012684:	6815      	ldr	r5, [r2, #0]
 8012686:	2100      	movs	r1, #0
 8012688:	0028      	movs	r0, r5
 801268a:	6862      	ldr	r2, [r4, #4]
 801268c:	f000 fcc3 	bl	8013016 <memchr>
 8012690:	2800      	cmp	r0, #0
 8012692:	d001      	beq.n	8012698 <_printf_i+0x1c0>
 8012694:	1b40      	subs	r0, r0, r5
 8012696:	6060      	str	r0, [r4, #4]
 8012698:	6863      	ldr	r3, [r4, #4]
 801269a:	6123      	str	r3, [r4, #16]
 801269c:	2300      	movs	r3, #0
 801269e:	9a03      	ldr	r2, [sp, #12]
 80126a0:	7013      	strb	r3, [r2, #0]
 80126a2:	e7ac      	b.n	80125fe <_printf_i+0x126>
 80126a4:	002a      	movs	r2, r5
 80126a6:	6923      	ldr	r3, [r4, #16]
 80126a8:	9906      	ldr	r1, [sp, #24]
 80126aa:	9805      	ldr	r0, [sp, #20]
 80126ac:	9d07      	ldr	r5, [sp, #28]
 80126ae:	47a8      	blx	r5
 80126b0:	3001      	adds	r0, #1
 80126b2:	d0ae      	beq.n	8012612 <_printf_i+0x13a>
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	079b      	lsls	r3, r3, #30
 80126b8:	d415      	bmi.n	80126e6 <_printf_i+0x20e>
 80126ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126bc:	68e0      	ldr	r0, [r4, #12]
 80126be:	4298      	cmp	r0, r3
 80126c0:	daa9      	bge.n	8012616 <_printf_i+0x13e>
 80126c2:	0018      	movs	r0, r3
 80126c4:	e7a7      	b.n	8012616 <_printf_i+0x13e>
 80126c6:	0022      	movs	r2, r4
 80126c8:	2301      	movs	r3, #1
 80126ca:	9906      	ldr	r1, [sp, #24]
 80126cc:	9805      	ldr	r0, [sp, #20]
 80126ce:	9e07      	ldr	r6, [sp, #28]
 80126d0:	3219      	adds	r2, #25
 80126d2:	47b0      	blx	r6
 80126d4:	3001      	adds	r0, #1
 80126d6:	d09c      	beq.n	8012612 <_printf_i+0x13a>
 80126d8:	3501      	adds	r5, #1
 80126da:	68e3      	ldr	r3, [r4, #12]
 80126dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126de:	1a9b      	subs	r3, r3, r2
 80126e0:	42ab      	cmp	r3, r5
 80126e2:	dcf0      	bgt.n	80126c6 <_printf_i+0x1ee>
 80126e4:	e7e9      	b.n	80126ba <_printf_i+0x1e2>
 80126e6:	2500      	movs	r5, #0
 80126e8:	e7f7      	b.n	80126da <_printf_i+0x202>
 80126ea:	46c0      	nop			@ (mov r8, r8)
 80126ec:	080172d2 	.word	0x080172d2
 80126f0:	080172e3 	.word	0x080172e3

080126f4 <_scanf_float>:
 80126f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126f6:	b08b      	sub	sp, #44	@ 0x2c
 80126f8:	0016      	movs	r6, r2
 80126fa:	9003      	str	r0, [sp, #12]
 80126fc:	22ae      	movs	r2, #174	@ 0xae
 80126fe:	2000      	movs	r0, #0
 8012700:	9307      	str	r3, [sp, #28]
 8012702:	688b      	ldr	r3, [r1, #8]
 8012704:	000c      	movs	r4, r1
 8012706:	1e59      	subs	r1, r3, #1
 8012708:	0052      	lsls	r2, r2, #1
 801270a:	9006      	str	r0, [sp, #24]
 801270c:	4291      	cmp	r1, r2
 801270e:	d905      	bls.n	801271c <_scanf_float+0x28>
 8012710:	3b5e      	subs	r3, #94	@ 0x5e
 8012712:	3bff      	subs	r3, #255	@ 0xff
 8012714:	9306      	str	r3, [sp, #24]
 8012716:	235e      	movs	r3, #94	@ 0x5e
 8012718:	33ff      	adds	r3, #255	@ 0xff
 801271a:	60a3      	str	r3, [r4, #8]
 801271c:	23f0      	movs	r3, #240	@ 0xf0
 801271e:	6822      	ldr	r2, [r4, #0]
 8012720:	00db      	lsls	r3, r3, #3
 8012722:	4313      	orrs	r3, r2
 8012724:	6023      	str	r3, [r4, #0]
 8012726:	0023      	movs	r3, r4
 8012728:	2500      	movs	r5, #0
 801272a:	331c      	adds	r3, #28
 801272c:	001f      	movs	r7, r3
 801272e:	9304      	str	r3, [sp, #16]
 8012730:	9502      	str	r5, [sp, #8]
 8012732:	9509      	str	r5, [sp, #36]	@ 0x24
 8012734:	9508      	str	r5, [sp, #32]
 8012736:	9501      	str	r5, [sp, #4]
 8012738:	9505      	str	r5, [sp, #20]
 801273a:	68a2      	ldr	r2, [r4, #8]
 801273c:	2a00      	cmp	r2, #0
 801273e:	d00a      	beq.n	8012756 <_scanf_float+0x62>
 8012740:	6833      	ldr	r3, [r6, #0]
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	2b4e      	cmp	r3, #78	@ 0x4e
 8012746:	d844      	bhi.n	80127d2 <_scanf_float+0xde>
 8012748:	0018      	movs	r0, r3
 801274a:	2b40      	cmp	r3, #64	@ 0x40
 801274c:	d82c      	bhi.n	80127a8 <_scanf_float+0xb4>
 801274e:	382b      	subs	r0, #43	@ 0x2b
 8012750:	b2c1      	uxtb	r1, r0
 8012752:	290e      	cmp	r1, #14
 8012754:	d92a      	bls.n	80127ac <_scanf_float+0xb8>
 8012756:	9b01      	ldr	r3, [sp, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d003      	beq.n	8012764 <_scanf_float+0x70>
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	4aa6      	ldr	r2, [pc, #664]	@ (80129f8 <_scanf_float+0x304>)
 8012760:	4013      	ands	r3, r2
 8012762:	6023      	str	r3, [r4, #0]
 8012764:	9b02      	ldr	r3, [sp, #8]
 8012766:	3b01      	subs	r3, #1
 8012768:	2b01      	cmp	r3, #1
 801276a:	d900      	bls.n	801276e <_scanf_float+0x7a>
 801276c:	e0fe      	b.n	801296c <_scanf_float+0x278>
 801276e:	25be      	movs	r5, #190	@ 0xbe
 8012770:	006d      	lsls	r5, r5, #1
 8012772:	9b04      	ldr	r3, [sp, #16]
 8012774:	429f      	cmp	r7, r3
 8012776:	d900      	bls.n	801277a <_scanf_float+0x86>
 8012778:	e0ee      	b.n	8012958 <_scanf_float+0x264>
 801277a:	2001      	movs	r0, #1
 801277c:	b00b      	add	sp, #44	@ 0x2c
 801277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012780:	0018      	movs	r0, r3
 8012782:	3861      	subs	r0, #97	@ 0x61
 8012784:	280d      	cmp	r0, #13
 8012786:	d8e6      	bhi.n	8012756 <_scanf_float+0x62>
 8012788:	f7ed fcd0 	bl	800012c <__gnu_thumb1_case_shi>
 801278c:	ffe50089 	.word	0xffe50089
 8012790:	ffe5ffe5 	.word	0xffe5ffe5
 8012794:	00a700bb 	.word	0x00a700bb
 8012798:	ffe5ffe5 	.word	0xffe5ffe5
 801279c:	ffe5008f 	.word	0xffe5008f
 80127a0:	ffe5ffe5 	.word	0xffe5ffe5
 80127a4:	006bffe5 	.word	0x006bffe5
 80127a8:	3841      	subs	r0, #65	@ 0x41
 80127aa:	e7eb      	b.n	8012784 <_scanf_float+0x90>
 80127ac:	280e      	cmp	r0, #14
 80127ae:	d8d2      	bhi.n	8012756 <_scanf_float+0x62>
 80127b0:	f7ed fcbc 	bl	800012c <__gnu_thumb1_case_shi>
 80127b4:	ffd1004f 	.word	0xffd1004f
 80127b8:	009d004f 	.word	0x009d004f
 80127bc:	0021ffd1 	.word	0x0021ffd1
 80127c0:	00410041 	.word	0x00410041
 80127c4:	00410041 	.word	0x00410041
 80127c8:	00410041 	.word	0x00410041
 80127cc:	00410041 	.word	0x00410041
 80127d0:	0041      	.short	0x0041
 80127d2:	2b6e      	cmp	r3, #110	@ 0x6e
 80127d4:	d80a      	bhi.n	80127ec <_scanf_float+0xf8>
 80127d6:	2b60      	cmp	r3, #96	@ 0x60
 80127d8:	d8d2      	bhi.n	8012780 <_scanf_float+0x8c>
 80127da:	2b54      	cmp	r3, #84	@ 0x54
 80127dc:	d100      	bne.n	80127e0 <_scanf_float+0xec>
 80127de:	e081      	b.n	80128e4 <_scanf_float+0x1f0>
 80127e0:	2b59      	cmp	r3, #89	@ 0x59
 80127e2:	d1b8      	bne.n	8012756 <_scanf_float+0x62>
 80127e4:	2d07      	cmp	r5, #7
 80127e6:	d1b6      	bne.n	8012756 <_scanf_float+0x62>
 80127e8:	2508      	movs	r5, #8
 80127ea:	e02f      	b.n	801284c <_scanf_float+0x158>
 80127ec:	2b74      	cmp	r3, #116	@ 0x74
 80127ee:	d079      	beq.n	80128e4 <_scanf_float+0x1f0>
 80127f0:	2b79      	cmp	r3, #121	@ 0x79
 80127f2:	d0f7      	beq.n	80127e4 <_scanf_float+0xf0>
 80127f4:	e7af      	b.n	8012756 <_scanf_float+0x62>
 80127f6:	6821      	ldr	r1, [r4, #0]
 80127f8:	05c8      	lsls	r0, r1, #23
 80127fa:	d51c      	bpl.n	8012836 <_scanf_float+0x142>
 80127fc:	2380      	movs	r3, #128	@ 0x80
 80127fe:	4399      	bics	r1, r3
 8012800:	9b01      	ldr	r3, [sp, #4]
 8012802:	6021      	str	r1, [r4, #0]
 8012804:	3301      	adds	r3, #1
 8012806:	9301      	str	r3, [sp, #4]
 8012808:	9b06      	ldr	r3, [sp, #24]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d003      	beq.n	8012816 <_scanf_float+0x122>
 801280e:	3b01      	subs	r3, #1
 8012810:	3201      	adds	r2, #1
 8012812:	9306      	str	r3, [sp, #24]
 8012814:	60a2      	str	r2, [r4, #8]
 8012816:	68a3      	ldr	r3, [r4, #8]
 8012818:	3b01      	subs	r3, #1
 801281a:	60a3      	str	r3, [r4, #8]
 801281c:	6923      	ldr	r3, [r4, #16]
 801281e:	3301      	adds	r3, #1
 8012820:	6123      	str	r3, [r4, #16]
 8012822:	6873      	ldr	r3, [r6, #4]
 8012824:	3b01      	subs	r3, #1
 8012826:	6073      	str	r3, [r6, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	dc00      	bgt.n	801282e <_scanf_float+0x13a>
 801282c:	e08a      	b.n	8012944 <_scanf_float+0x250>
 801282e:	6833      	ldr	r3, [r6, #0]
 8012830:	3301      	adds	r3, #1
 8012832:	6033      	str	r3, [r6, #0]
 8012834:	e781      	b.n	801273a <_scanf_float+0x46>
 8012836:	9a02      	ldr	r2, [sp, #8]
 8012838:	1951      	adds	r1, r2, r5
 801283a:	2900      	cmp	r1, #0
 801283c:	d000      	beq.n	8012840 <_scanf_float+0x14c>
 801283e:	e78a      	b.n	8012756 <_scanf_float+0x62>
 8012840:	000d      	movs	r5, r1
 8012842:	6822      	ldr	r2, [r4, #0]
 8012844:	486d      	ldr	r0, [pc, #436]	@ (80129fc <_scanf_float+0x308>)
 8012846:	9102      	str	r1, [sp, #8]
 8012848:	4002      	ands	r2, r0
 801284a:	6022      	str	r2, [r4, #0]
 801284c:	703b      	strb	r3, [r7, #0]
 801284e:	3701      	adds	r7, #1
 8012850:	e7e1      	b.n	8012816 <_scanf_float+0x122>
 8012852:	2180      	movs	r1, #128	@ 0x80
 8012854:	6822      	ldr	r2, [r4, #0]
 8012856:	420a      	tst	r2, r1
 8012858:	d100      	bne.n	801285c <_scanf_float+0x168>
 801285a:	e77c      	b.n	8012756 <_scanf_float+0x62>
 801285c:	438a      	bics	r2, r1
 801285e:	6022      	str	r2, [r4, #0]
 8012860:	e7f4      	b.n	801284c <_scanf_float+0x158>
 8012862:	9a02      	ldr	r2, [sp, #8]
 8012864:	2a00      	cmp	r2, #0
 8012866:	d10f      	bne.n	8012888 <_scanf_float+0x194>
 8012868:	9a01      	ldr	r2, [sp, #4]
 801286a:	2a00      	cmp	r2, #0
 801286c:	d10f      	bne.n	801288e <_scanf_float+0x19a>
 801286e:	6822      	ldr	r2, [r4, #0]
 8012870:	21e0      	movs	r1, #224	@ 0xe0
 8012872:	0010      	movs	r0, r2
 8012874:	00c9      	lsls	r1, r1, #3
 8012876:	4008      	ands	r0, r1
 8012878:	4288      	cmp	r0, r1
 801287a:	d108      	bne.n	801288e <_scanf_float+0x19a>
 801287c:	4960      	ldr	r1, [pc, #384]	@ (8012a00 <_scanf_float+0x30c>)
 801287e:	400a      	ands	r2, r1
 8012880:	6022      	str	r2, [r4, #0]
 8012882:	2201      	movs	r2, #1
 8012884:	9202      	str	r2, [sp, #8]
 8012886:	e7e1      	b.n	801284c <_scanf_float+0x158>
 8012888:	9a02      	ldr	r2, [sp, #8]
 801288a:	2a02      	cmp	r2, #2
 801288c:	d058      	beq.n	8012940 <_scanf_float+0x24c>
 801288e:	2d01      	cmp	r5, #1
 8012890:	d002      	beq.n	8012898 <_scanf_float+0x1a4>
 8012892:	2d04      	cmp	r5, #4
 8012894:	d000      	beq.n	8012898 <_scanf_float+0x1a4>
 8012896:	e75e      	b.n	8012756 <_scanf_float+0x62>
 8012898:	3501      	adds	r5, #1
 801289a:	b2ed      	uxtb	r5, r5
 801289c:	e7d6      	b.n	801284c <_scanf_float+0x158>
 801289e:	9a02      	ldr	r2, [sp, #8]
 80128a0:	2a01      	cmp	r2, #1
 80128a2:	d000      	beq.n	80128a6 <_scanf_float+0x1b2>
 80128a4:	e757      	b.n	8012756 <_scanf_float+0x62>
 80128a6:	2202      	movs	r2, #2
 80128a8:	e7ec      	b.n	8012884 <_scanf_float+0x190>
 80128aa:	2d00      	cmp	r5, #0
 80128ac:	d110      	bne.n	80128d0 <_scanf_float+0x1dc>
 80128ae:	9a01      	ldr	r2, [sp, #4]
 80128b0:	2a00      	cmp	r2, #0
 80128b2:	d000      	beq.n	80128b6 <_scanf_float+0x1c2>
 80128b4:	e752      	b.n	801275c <_scanf_float+0x68>
 80128b6:	6822      	ldr	r2, [r4, #0]
 80128b8:	21e0      	movs	r1, #224	@ 0xe0
 80128ba:	0010      	movs	r0, r2
 80128bc:	00c9      	lsls	r1, r1, #3
 80128be:	4008      	ands	r0, r1
 80128c0:	4288      	cmp	r0, r1
 80128c2:	d000      	beq.n	80128c6 <_scanf_float+0x1d2>
 80128c4:	e11d      	b.n	8012b02 <_scanf_float+0x40e>
 80128c6:	494e      	ldr	r1, [pc, #312]	@ (8012a00 <_scanf_float+0x30c>)
 80128c8:	3501      	adds	r5, #1
 80128ca:	400a      	ands	r2, r1
 80128cc:	6022      	str	r2, [r4, #0]
 80128ce:	e7bd      	b.n	801284c <_scanf_float+0x158>
 80128d0:	21fd      	movs	r1, #253	@ 0xfd
 80128d2:	1eea      	subs	r2, r5, #3
 80128d4:	420a      	tst	r2, r1
 80128d6:	d0df      	beq.n	8012898 <_scanf_float+0x1a4>
 80128d8:	e73d      	b.n	8012756 <_scanf_float+0x62>
 80128da:	2d02      	cmp	r5, #2
 80128dc:	d000      	beq.n	80128e0 <_scanf_float+0x1ec>
 80128de:	e73a      	b.n	8012756 <_scanf_float+0x62>
 80128e0:	2503      	movs	r5, #3
 80128e2:	e7b3      	b.n	801284c <_scanf_float+0x158>
 80128e4:	2d06      	cmp	r5, #6
 80128e6:	d000      	beq.n	80128ea <_scanf_float+0x1f6>
 80128e8:	e735      	b.n	8012756 <_scanf_float+0x62>
 80128ea:	2507      	movs	r5, #7
 80128ec:	e7ae      	b.n	801284c <_scanf_float+0x158>
 80128ee:	6822      	ldr	r2, [r4, #0]
 80128f0:	0591      	lsls	r1, r2, #22
 80128f2:	d400      	bmi.n	80128f6 <_scanf_float+0x202>
 80128f4:	e72f      	b.n	8012756 <_scanf_float+0x62>
 80128f6:	4943      	ldr	r1, [pc, #268]	@ (8012a04 <_scanf_float+0x310>)
 80128f8:	400a      	ands	r2, r1
 80128fa:	6022      	str	r2, [r4, #0]
 80128fc:	9a01      	ldr	r2, [sp, #4]
 80128fe:	9205      	str	r2, [sp, #20]
 8012900:	e7a4      	b.n	801284c <_scanf_float+0x158>
 8012902:	21a0      	movs	r1, #160	@ 0xa0
 8012904:	2080      	movs	r0, #128	@ 0x80
 8012906:	6822      	ldr	r2, [r4, #0]
 8012908:	00c9      	lsls	r1, r1, #3
 801290a:	4011      	ands	r1, r2
 801290c:	00c0      	lsls	r0, r0, #3
 801290e:	4281      	cmp	r1, r0
 8012910:	d006      	beq.n	8012920 <_scanf_float+0x22c>
 8012912:	4202      	tst	r2, r0
 8012914:	d100      	bne.n	8012918 <_scanf_float+0x224>
 8012916:	e71e      	b.n	8012756 <_scanf_float+0x62>
 8012918:	9901      	ldr	r1, [sp, #4]
 801291a:	2900      	cmp	r1, #0
 801291c:	d100      	bne.n	8012920 <_scanf_float+0x22c>
 801291e:	e0f0      	b.n	8012b02 <_scanf_float+0x40e>
 8012920:	0591      	lsls	r1, r2, #22
 8012922:	d404      	bmi.n	801292e <_scanf_float+0x23a>
 8012924:	9901      	ldr	r1, [sp, #4]
 8012926:	9805      	ldr	r0, [sp, #20]
 8012928:	9709      	str	r7, [sp, #36]	@ 0x24
 801292a:	1a09      	subs	r1, r1, r0
 801292c:	9108      	str	r1, [sp, #32]
 801292e:	4934      	ldr	r1, [pc, #208]	@ (8012a00 <_scanf_float+0x30c>)
 8012930:	400a      	ands	r2, r1
 8012932:	21c0      	movs	r1, #192	@ 0xc0
 8012934:	0049      	lsls	r1, r1, #1
 8012936:	430a      	orrs	r2, r1
 8012938:	6022      	str	r2, [r4, #0]
 801293a:	2200      	movs	r2, #0
 801293c:	9201      	str	r2, [sp, #4]
 801293e:	e785      	b.n	801284c <_scanf_float+0x158>
 8012940:	2203      	movs	r2, #3
 8012942:	e79f      	b.n	8012884 <_scanf_float+0x190>
 8012944:	23c0      	movs	r3, #192	@ 0xc0
 8012946:	005b      	lsls	r3, r3, #1
 8012948:	0031      	movs	r1, r6
 801294a:	58e3      	ldr	r3, [r4, r3]
 801294c:	9803      	ldr	r0, [sp, #12]
 801294e:	4798      	blx	r3
 8012950:	2800      	cmp	r0, #0
 8012952:	d100      	bne.n	8012956 <_scanf_float+0x262>
 8012954:	e6f1      	b.n	801273a <_scanf_float+0x46>
 8012956:	e6fe      	b.n	8012756 <_scanf_float+0x62>
 8012958:	3f01      	subs	r7, #1
 801295a:	5963      	ldr	r3, [r4, r5]
 801295c:	0032      	movs	r2, r6
 801295e:	7839      	ldrb	r1, [r7, #0]
 8012960:	9803      	ldr	r0, [sp, #12]
 8012962:	4798      	blx	r3
 8012964:	6923      	ldr	r3, [r4, #16]
 8012966:	3b01      	subs	r3, #1
 8012968:	6123      	str	r3, [r4, #16]
 801296a:	e702      	b.n	8012772 <_scanf_float+0x7e>
 801296c:	1e6b      	subs	r3, r5, #1
 801296e:	2b06      	cmp	r3, #6
 8012970:	d80e      	bhi.n	8012990 <_scanf_float+0x29c>
 8012972:	9702      	str	r7, [sp, #8]
 8012974:	2d02      	cmp	r5, #2
 8012976:	d920      	bls.n	80129ba <_scanf_float+0x2c6>
 8012978:	1beb      	subs	r3, r5, r7
 801297a:	b2db      	uxtb	r3, r3
 801297c:	9306      	str	r3, [sp, #24]
 801297e:	9b02      	ldr	r3, [sp, #8]
 8012980:	9a06      	ldr	r2, [sp, #24]
 8012982:	189b      	adds	r3, r3, r2
 8012984:	b2db      	uxtb	r3, r3
 8012986:	2b03      	cmp	r3, #3
 8012988:	d127      	bne.n	80129da <_scanf_float+0x2e6>
 801298a:	3d03      	subs	r5, #3
 801298c:	b2ed      	uxtb	r5, r5
 801298e:	1b7f      	subs	r7, r7, r5
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	05da      	lsls	r2, r3, #23
 8012994:	d553      	bpl.n	8012a3e <_scanf_float+0x34a>
 8012996:	055b      	lsls	r3, r3, #21
 8012998:	d536      	bpl.n	8012a08 <_scanf_float+0x314>
 801299a:	25be      	movs	r5, #190	@ 0xbe
 801299c:	006d      	lsls	r5, r5, #1
 801299e:	9b04      	ldr	r3, [sp, #16]
 80129a0:	429f      	cmp	r7, r3
 80129a2:	d800      	bhi.n	80129a6 <_scanf_float+0x2b2>
 80129a4:	e6e9      	b.n	801277a <_scanf_float+0x86>
 80129a6:	3f01      	subs	r7, #1
 80129a8:	5963      	ldr	r3, [r4, r5]
 80129aa:	0032      	movs	r2, r6
 80129ac:	7839      	ldrb	r1, [r7, #0]
 80129ae:	9803      	ldr	r0, [sp, #12]
 80129b0:	4798      	blx	r3
 80129b2:	6923      	ldr	r3, [r4, #16]
 80129b4:	3b01      	subs	r3, #1
 80129b6:	6123      	str	r3, [r4, #16]
 80129b8:	e7f1      	b.n	801299e <_scanf_float+0x2aa>
 80129ba:	25be      	movs	r5, #190	@ 0xbe
 80129bc:	006d      	lsls	r5, r5, #1
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	429f      	cmp	r7, r3
 80129c2:	d800      	bhi.n	80129c6 <_scanf_float+0x2d2>
 80129c4:	e6d9      	b.n	801277a <_scanf_float+0x86>
 80129c6:	3f01      	subs	r7, #1
 80129c8:	5963      	ldr	r3, [r4, r5]
 80129ca:	0032      	movs	r2, r6
 80129cc:	7839      	ldrb	r1, [r7, #0]
 80129ce:	9803      	ldr	r0, [sp, #12]
 80129d0:	4798      	blx	r3
 80129d2:	6923      	ldr	r3, [r4, #16]
 80129d4:	3b01      	subs	r3, #1
 80129d6:	6123      	str	r3, [r4, #16]
 80129d8:	e7f1      	b.n	80129be <_scanf_float+0x2ca>
 80129da:	9b02      	ldr	r3, [sp, #8]
 80129dc:	0032      	movs	r2, r6
 80129de:	3b01      	subs	r3, #1
 80129e0:	7819      	ldrb	r1, [r3, #0]
 80129e2:	9302      	str	r3, [sp, #8]
 80129e4:	23be      	movs	r3, #190	@ 0xbe
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	58e3      	ldr	r3, [r4, r3]
 80129ea:	9803      	ldr	r0, [sp, #12]
 80129ec:	4798      	blx	r3
 80129ee:	6923      	ldr	r3, [r4, #16]
 80129f0:	3b01      	subs	r3, #1
 80129f2:	6123      	str	r3, [r4, #16]
 80129f4:	e7c3      	b.n	801297e <_scanf_float+0x28a>
 80129f6:	46c0      	nop			@ (mov r8, r8)
 80129f8:	fffffeff 	.word	0xfffffeff
 80129fc:	fffffe7f 	.word	0xfffffe7f
 8012a00:	fffff87f 	.word	0xfffff87f
 8012a04:	fffffd7f 	.word	0xfffffd7f
 8012a08:	6923      	ldr	r3, [r4, #16]
 8012a0a:	1e7d      	subs	r5, r7, #1
 8012a0c:	7829      	ldrb	r1, [r5, #0]
 8012a0e:	3b01      	subs	r3, #1
 8012a10:	6123      	str	r3, [r4, #16]
 8012a12:	2965      	cmp	r1, #101	@ 0x65
 8012a14:	d00c      	beq.n	8012a30 <_scanf_float+0x33c>
 8012a16:	2945      	cmp	r1, #69	@ 0x45
 8012a18:	d00a      	beq.n	8012a30 <_scanf_float+0x33c>
 8012a1a:	23be      	movs	r3, #190	@ 0xbe
 8012a1c:	005b      	lsls	r3, r3, #1
 8012a1e:	58e3      	ldr	r3, [r4, r3]
 8012a20:	0032      	movs	r2, r6
 8012a22:	9803      	ldr	r0, [sp, #12]
 8012a24:	4798      	blx	r3
 8012a26:	6923      	ldr	r3, [r4, #16]
 8012a28:	1ebd      	subs	r5, r7, #2
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	7829      	ldrb	r1, [r5, #0]
 8012a2e:	6123      	str	r3, [r4, #16]
 8012a30:	23be      	movs	r3, #190	@ 0xbe
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	0032      	movs	r2, r6
 8012a36:	58e3      	ldr	r3, [r4, r3]
 8012a38:	9803      	ldr	r0, [sp, #12]
 8012a3a:	4798      	blx	r3
 8012a3c:	002f      	movs	r7, r5
 8012a3e:	6821      	ldr	r1, [r4, #0]
 8012a40:	2310      	movs	r3, #16
 8012a42:	000a      	movs	r2, r1
 8012a44:	401a      	ands	r2, r3
 8012a46:	4219      	tst	r1, r3
 8012a48:	d001      	beq.n	8012a4e <_scanf_float+0x35a>
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	e696      	b.n	801277c <_scanf_float+0x88>
 8012a4e:	21c0      	movs	r1, #192	@ 0xc0
 8012a50:	703a      	strb	r2, [r7, #0]
 8012a52:	6823      	ldr	r3, [r4, #0]
 8012a54:	00c9      	lsls	r1, r1, #3
 8012a56:	400b      	ands	r3, r1
 8012a58:	2180      	movs	r1, #128	@ 0x80
 8012a5a:	00c9      	lsls	r1, r1, #3
 8012a5c:	428b      	cmp	r3, r1
 8012a5e:	d11c      	bne.n	8012a9a <_scanf_float+0x3a6>
 8012a60:	9b05      	ldr	r3, [sp, #20]
 8012a62:	9a01      	ldr	r2, [sp, #4]
 8012a64:	9905      	ldr	r1, [sp, #20]
 8012a66:	1a9a      	subs	r2, r3, r2
 8012a68:	9b01      	ldr	r3, [sp, #4]
 8012a6a:	428b      	cmp	r3, r1
 8012a6c:	d121      	bne.n	8012ab2 <_scanf_float+0x3be>
 8012a6e:	2200      	movs	r2, #0
 8012a70:	9904      	ldr	r1, [sp, #16]
 8012a72:	9803      	ldr	r0, [sp, #12]
 8012a74:	f002 fd40 	bl	80154f8 <_strtod_r>
 8012a78:	9b07      	ldr	r3, [sp, #28]
 8012a7a:	6822      	ldr	r2, [r4, #0]
 8012a7c:	0006      	movs	r6, r0
 8012a7e:	000f      	movs	r7, r1
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	0791      	lsls	r1, r2, #30
 8012a84:	d522      	bpl.n	8012acc <_scanf_float+0x3d8>
 8012a86:	9907      	ldr	r1, [sp, #28]
 8012a88:	1d1a      	adds	r2, r3, #4
 8012a8a:	600a      	str	r2, [r1, #0]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	601e      	str	r6, [r3, #0]
 8012a90:	605f      	str	r7, [r3, #4]
 8012a92:	68e3      	ldr	r3, [r4, #12]
 8012a94:	3301      	adds	r3, #1
 8012a96:	60e3      	str	r3, [r4, #12]
 8012a98:	e7d7      	b.n	8012a4a <_scanf_float+0x356>
 8012a9a:	9b08      	ldr	r3, [sp, #32]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d0e6      	beq.n	8012a6e <_scanf_float+0x37a>
 8012aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012aa2:	9803      	ldr	r0, [sp, #12]
 8012aa4:	1c59      	adds	r1, r3, #1
 8012aa6:	230a      	movs	r3, #10
 8012aa8:	f002 fdb8 	bl	801561c <_strtol_r>
 8012aac:	9b08      	ldr	r3, [sp, #32]
 8012aae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012ab0:	1ac2      	subs	r2, r0, r3
 8012ab2:	0023      	movs	r3, r4
 8012ab4:	3370      	adds	r3, #112	@ 0x70
 8012ab6:	33ff      	adds	r3, #255	@ 0xff
 8012ab8:	429f      	cmp	r7, r3
 8012aba:	d302      	bcc.n	8012ac2 <_scanf_float+0x3ce>
 8012abc:	0027      	movs	r7, r4
 8012abe:	376f      	adds	r7, #111	@ 0x6f
 8012ac0:	37ff      	adds	r7, #255	@ 0xff
 8012ac2:	0038      	movs	r0, r7
 8012ac4:	4910      	ldr	r1, [pc, #64]	@ (8012b08 <_scanf_float+0x414>)
 8012ac6:	f000 f91b 	bl	8012d00 <siprintf>
 8012aca:	e7d0      	b.n	8012a6e <_scanf_float+0x37a>
 8012acc:	1d19      	adds	r1, r3, #4
 8012ace:	0752      	lsls	r2, r2, #29
 8012ad0:	d502      	bpl.n	8012ad8 <_scanf_float+0x3e4>
 8012ad2:	9a07      	ldr	r2, [sp, #28]
 8012ad4:	6011      	str	r1, [r2, #0]
 8012ad6:	e7d9      	b.n	8012a8c <_scanf_float+0x398>
 8012ad8:	9a07      	ldr	r2, [sp, #28]
 8012ada:	0030      	movs	r0, r6
 8012adc:	6011      	str	r1, [r2, #0]
 8012ade:	681d      	ldr	r5, [r3, #0]
 8012ae0:	0032      	movs	r2, r6
 8012ae2:	003b      	movs	r3, r7
 8012ae4:	0039      	movs	r1, r7
 8012ae6:	f7f0 fbad 	bl	8003244 <__aeabi_dcmpun>
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d004      	beq.n	8012af8 <_scanf_float+0x404>
 8012aee:	4807      	ldr	r0, [pc, #28]	@ (8012b0c <_scanf_float+0x418>)
 8012af0:	f7fe ff92 	bl	8011a18 <nanf>
 8012af4:	6028      	str	r0, [r5, #0]
 8012af6:	e7cc      	b.n	8012a92 <_scanf_float+0x39e>
 8012af8:	0030      	movs	r0, r6
 8012afa:	0039      	movs	r1, r7
 8012afc:	f7f0 fc9a 	bl	8003434 <__aeabi_d2f>
 8012b00:	e7f8      	b.n	8012af4 <_scanf_float+0x400>
 8012b02:	2300      	movs	r3, #0
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	e62d      	b.n	8012764 <_scanf_float+0x70>
 8012b08:	080172f4 	.word	0x080172f4
 8012b0c:	0801768d 	.word	0x0801768d

08012b10 <std>:
 8012b10:	2300      	movs	r3, #0
 8012b12:	b510      	push	{r4, lr}
 8012b14:	0004      	movs	r4, r0
 8012b16:	6003      	str	r3, [r0, #0]
 8012b18:	6043      	str	r3, [r0, #4]
 8012b1a:	6083      	str	r3, [r0, #8]
 8012b1c:	8181      	strh	r1, [r0, #12]
 8012b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b20:	81c2      	strh	r2, [r0, #14]
 8012b22:	6103      	str	r3, [r0, #16]
 8012b24:	6143      	str	r3, [r0, #20]
 8012b26:	6183      	str	r3, [r0, #24]
 8012b28:	0019      	movs	r1, r3
 8012b2a:	2208      	movs	r2, #8
 8012b2c:	305c      	adds	r0, #92	@ 0x5c
 8012b2e:	f000 f98b 	bl	8012e48 <memset>
 8012b32:	4b0b      	ldr	r3, [pc, #44]	@ (8012b60 <std+0x50>)
 8012b34:	6224      	str	r4, [r4, #32]
 8012b36:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b38:	4b0a      	ldr	r3, [pc, #40]	@ (8012b64 <std+0x54>)
 8012b3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012b68 <std+0x58>)
 8012b3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b40:	4b0a      	ldr	r3, [pc, #40]	@ (8012b6c <std+0x5c>)
 8012b42:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b44:	4b0a      	ldr	r3, [pc, #40]	@ (8012b70 <std+0x60>)
 8012b46:	429c      	cmp	r4, r3
 8012b48:	d005      	beq.n	8012b56 <std+0x46>
 8012b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8012b74 <std+0x64>)
 8012b4c:	429c      	cmp	r4, r3
 8012b4e:	d002      	beq.n	8012b56 <std+0x46>
 8012b50:	4b09      	ldr	r3, [pc, #36]	@ (8012b78 <std+0x68>)
 8012b52:	429c      	cmp	r4, r3
 8012b54:	d103      	bne.n	8012b5e <std+0x4e>
 8012b56:	0020      	movs	r0, r4
 8012b58:	3058      	adds	r0, #88	@ 0x58
 8012b5a:	f000 fa59 	bl	8013010 <__retarget_lock_init_recursive>
 8012b5e:	bd10      	pop	{r4, pc}
 8012b60:	08012d41 	.word	0x08012d41
 8012b64:	08012d69 	.word	0x08012d69
 8012b68:	08012da1 	.word	0x08012da1
 8012b6c:	08012dcd 	.word	0x08012dcd
 8012b70:	2000713c 	.word	0x2000713c
 8012b74:	200071a4 	.word	0x200071a4
 8012b78:	2000720c 	.word	0x2000720c

08012b7c <stdio_exit_handler>:
 8012b7c:	b510      	push	{r4, lr}
 8012b7e:	4a03      	ldr	r2, [pc, #12]	@ (8012b8c <stdio_exit_handler+0x10>)
 8012b80:	4903      	ldr	r1, [pc, #12]	@ (8012b90 <stdio_exit_handler+0x14>)
 8012b82:	4804      	ldr	r0, [pc, #16]	@ (8012b94 <stdio_exit_handler+0x18>)
 8012b84:	f000 f86c 	bl	8012c60 <_fwalk_sglue>
 8012b88:	bd10      	pop	{r4, pc}
 8012b8a:	46c0      	nop			@ (mov r8, r8)
 8012b8c:	20000088 	.word	0x20000088
 8012b90:	080159ed 	.word	0x080159ed
 8012b94:	20000098 	.word	0x20000098

08012b98 <cleanup_stdio>:
 8012b98:	6841      	ldr	r1, [r0, #4]
 8012b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8012bc8 <cleanup_stdio+0x30>)
 8012b9c:	b510      	push	{r4, lr}
 8012b9e:	0004      	movs	r4, r0
 8012ba0:	4299      	cmp	r1, r3
 8012ba2:	d001      	beq.n	8012ba8 <cleanup_stdio+0x10>
 8012ba4:	f002 ff22 	bl	80159ec <_fflush_r>
 8012ba8:	68a1      	ldr	r1, [r4, #8]
 8012baa:	4b08      	ldr	r3, [pc, #32]	@ (8012bcc <cleanup_stdio+0x34>)
 8012bac:	4299      	cmp	r1, r3
 8012bae:	d002      	beq.n	8012bb6 <cleanup_stdio+0x1e>
 8012bb0:	0020      	movs	r0, r4
 8012bb2:	f002 ff1b 	bl	80159ec <_fflush_r>
 8012bb6:	68e1      	ldr	r1, [r4, #12]
 8012bb8:	4b05      	ldr	r3, [pc, #20]	@ (8012bd0 <cleanup_stdio+0x38>)
 8012bba:	4299      	cmp	r1, r3
 8012bbc:	d002      	beq.n	8012bc4 <cleanup_stdio+0x2c>
 8012bbe:	0020      	movs	r0, r4
 8012bc0:	f002 ff14 	bl	80159ec <_fflush_r>
 8012bc4:	bd10      	pop	{r4, pc}
 8012bc6:	46c0      	nop			@ (mov r8, r8)
 8012bc8:	2000713c 	.word	0x2000713c
 8012bcc:	200071a4 	.word	0x200071a4
 8012bd0:	2000720c 	.word	0x2000720c

08012bd4 <global_stdio_init.part.0>:
 8012bd4:	b510      	push	{r4, lr}
 8012bd6:	4b09      	ldr	r3, [pc, #36]	@ (8012bfc <global_stdio_init.part.0+0x28>)
 8012bd8:	4a09      	ldr	r2, [pc, #36]	@ (8012c00 <global_stdio_init.part.0+0x2c>)
 8012bda:	2104      	movs	r1, #4
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	4809      	ldr	r0, [pc, #36]	@ (8012c04 <global_stdio_init.part.0+0x30>)
 8012be0:	2200      	movs	r2, #0
 8012be2:	f7ff ff95 	bl	8012b10 <std>
 8012be6:	2201      	movs	r2, #1
 8012be8:	2109      	movs	r1, #9
 8012bea:	4807      	ldr	r0, [pc, #28]	@ (8012c08 <global_stdio_init.part.0+0x34>)
 8012bec:	f7ff ff90 	bl	8012b10 <std>
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	2112      	movs	r1, #18
 8012bf4:	4805      	ldr	r0, [pc, #20]	@ (8012c0c <global_stdio_init.part.0+0x38>)
 8012bf6:	f7ff ff8b 	bl	8012b10 <std>
 8012bfa:	bd10      	pop	{r4, pc}
 8012bfc:	20007274 	.word	0x20007274
 8012c00:	08012b7d 	.word	0x08012b7d
 8012c04:	2000713c 	.word	0x2000713c
 8012c08:	200071a4 	.word	0x200071a4
 8012c0c:	2000720c 	.word	0x2000720c

08012c10 <__sfp_lock_acquire>:
 8012c10:	b510      	push	{r4, lr}
 8012c12:	4802      	ldr	r0, [pc, #8]	@ (8012c1c <__sfp_lock_acquire+0xc>)
 8012c14:	f000 f9fd 	bl	8013012 <__retarget_lock_acquire_recursive>
 8012c18:	bd10      	pop	{r4, pc}
 8012c1a:	46c0      	nop			@ (mov r8, r8)
 8012c1c:	2000727d 	.word	0x2000727d

08012c20 <__sfp_lock_release>:
 8012c20:	b510      	push	{r4, lr}
 8012c22:	4802      	ldr	r0, [pc, #8]	@ (8012c2c <__sfp_lock_release+0xc>)
 8012c24:	f000 f9f6 	bl	8013014 <__retarget_lock_release_recursive>
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	46c0      	nop			@ (mov r8, r8)
 8012c2c:	2000727d 	.word	0x2000727d

08012c30 <__sinit>:
 8012c30:	b510      	push	{r4, lr}
 8012c32:	0004      	movs	r4, r0
 8012c34:	f7ff ffec 	bl	8012c10 <__sfp_lock_acquire>
 8012c38:	6a23      	ldr	r3, [r4, #32]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d002      	beq.n	8012c44 <__sinit+0x14>
 8012c3e:	f7ff ffef 	bl	8012c20 <__sfp_lock_release>
 8012c42:	bd10      	pop	{r4, pc}
 8012c44:	4b04      	ldr	r3, [pc, #16]	@ (8012c58 <__sinit+0x28>)
 8012c46:	6223      	str	r3, [r4, #32]
 8012c48:	4b04      	ldr	r3, [pc, #16]	@ (8012c5c <__sinit+0x2c>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d1f6      	bne.n	8012c3e <__sinit+0xe>
 8012c50:	f7ff ffc0 	bl	8012bd4 <global_stdio_init.part.0>
 8012c54:	e7f3      	b.n	8012c3e <__sinit+0xe>
 8012c56:	46c0      	nop			@ (mov r8, r8)
 8012c58:	08012b99 	.word	0x08012b99
 8012c5c:	20007274 	.word	0x20007274

08012c60 <_fwalk_sglue>:
 8012c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c62:	0014      	movs	r4, r2
 8012c64:	2600      	movs	r6, #0
 8012c66:	9000      	str	r0, [sp, #0]
 8012c68:	9101      	str	r1, [sp, #4]
 8012c6a:	68a5      	ldr	r5, [r4, #8]
 8012c6c:	6867      	ldr	r7, [r4, #4]
 8012c6e:	3f01      	subs	r7, #1
 8012c70:	d504      	bpl.n	8012c7c <_fwalk_sglue+0x1c>
 8012c72:	6824      	ldr	r4, [r4, #0]
 8012c74:	2c00      	cmp	r4, #0
 8012c76:	d1f8      	bne.n	8012c6a <_fwalk_sglue+0xa>
 8012c78:	0030      	movs	r0, r6
 8012c7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012c7c:	89ab      	ldrh	r3, [r5, #12]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d908      	bls.n	8012c94 <_fwalk_sglue+0x34>
 8012c82:	220e      	movs	r2, #14
 8012c84:	5eab      	ldrsh	r3, [r5, r2]
 8012c86:	3301      	adds	r3, #1
 8012c88:	d004      	beq.n	8012c94 <_fwalk_sglue+0x34>
 8012c8a:	0029      	movs	r1, r5
 8012c8c:	9800      	ldr	r0, [sp, #0]
 8012c8e:	9b01      	ldr	r3, [sp, #4]
 8012c90:	4798      	blx	r3
 8012c92:	4306      	orrs	r6, r0
 8012c94:	3568      	adds	r5, #104	@ 0x68
 8012c96:	e7ea      	b.n	8012c6e <_fwalk_sglue+0xe>

08012c98 <sniprintf>:
 8012c98:	b40c      	push	{r2, r3}
 8012c9a:	b530      	push	{r4, r5, lr}
 8012c9c:	4b17      	ldr	r3, [pc, #92]	@ (8012cfc <sniprintf+0x64>)
 8012c9e:	000c      	movs	r4, r1
 8012ca0:	681d      	ldr	r5, [r3, #0]
 8012ca2:	b09d      	sub	sp, #116	@ 0x74
 8012ca4:	2900      	cmp	r1, #0
 8012ca6:	da08      	bge.n	8012cba <sniprintf+0x22>
 8012ca8:	238b      	movs	r3, #139	@ 0x8b
 8012caa:	2001      	movs	r0, #1
 8012cac:	602b      	str	r3, [r5, #0]
 8012cae:	4240      	negs	r0, r0
 8012cb0:	b01d      	add	sp, #116	@ 0x74
 8012cb2:	bc30      	pop	{r4, r5}
 8012cb4:	bc08      	pop	{r3}
 8012cb6:	b002      	add	sp, #8
 8012cb8:	4718      	bx	r3
 8012cba:	2382      	movs	r3, #130	@ 0x82
 8012cbc:	466a      	mov	r2, sp
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	8293      	strh	r3, [r2, #20]
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	9002      	str	r0, [sp, #8]
 8012cc6:	9006      	str	r0, [sp, #24]
 8012cc8:	4299      	cmp	r1, r3
 8012cca:	d000      	beq.n	8012cce <sniprintf+0x36>
 8012ccc:	1e4b      	subs	r3, r1, #1
 8012cce:	9304      	str	r3, [sp, #16]
 8012cd0:	9307      	str	r3, [sp, #28]
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	466a      	mov	r2, sp
 8012cd6:	425b      	negs	r3, r3
 8012cd8:	82d3      	strh	r3, [r2, #22]
 8012cda:	0028      	movs	r0, r5
 8012cdc:	ab21      	add	r3, sp, #132	@ 0x84
 8012cde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012ce0:	a902      	add	r1, sp, #8
 8012ce2:	9301      	str	r3, [sp, #4]
 8012ce4:	f002 fcfe 	bl	80156e4 <_svfiprintf_r>
 8012ce8:	1c43      	adds	r3, r0, #1
 8012cea:	da01      	bge.n	8012cf0 <sniprintf+0x58>
 8012cec:	238b      	movs	r3, #139	@ 0x8b
 8012cee:	602b      	str	r3, [r5, #0]
 8012cf0:	2c00      	cmp	r4, #0
 8012cf2:	d0dd      	beq.n	8012cb0 <sniprintf+0x18>
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	9b02      	ldr	r3, [sp, #8]
 8012cf8:	701a      	strb	r2, [r3, #0]
 8012cfa:	e7d9      	b.n	8012cb0 <sniprintf+0x18>
 8012cfc:	20000094 	.word	0x20000094

08012d00 <siprintf>:
 8012d00:	b40e      	push	{r1, r2, r3}
 8012d02:	b500      	push	{lr}
 8012d04:	490b      	ldr	r1, [pc, #44]	@ (8012d34 <siprintf+0x34>)
 8012d06:	b09c      	sub	sp, #112	@ 0x70
 8012d08:	ab1d      	add	r3, sp, #116	@ 0x74
 8012d0a:	9002      	str	r0, [sp, #8]
 8012d0c:	9006      	str	r0, [sp, #24]
 8012d0e:	9107      	str	r1, [sp, #28]
 8012d10:	9104      	str	r1, [sp, #16]
 8012d12:	4809      	ldr	r0, [pc, #36]	@ (8012d38 <siprintf+0x38>)
 8012d14:	4909      	ldr	r1, [pc, #36]	@ (8012d3c <siprintf+0x3c>)
 8012d16:	cb04      	ldmia	r3!, {r2}
 8012d18:	9105      	str	r1, [sp, #20]
 8012d1a:	6800      	ldr	r0, [r0, #0]
 8012d1c:	a902      	add	r1, sp, #8
 8012d1e:	9301      	str	r3, [sp, #4]
 8012d20:	f002 fce0 	bl	80156e4 <_svfiprintf_r>
 8012d24:	2200      	movs	r2, #0
 8012d26:	9b02      	ldr	r3, [sp, #8]
 8012d28:	701a      	strb	r2, [r3, #0]
 8012d2a:	b01c      	add	sp, #112	@ 0x70
 8012d2c:	bc08      	pop	{r3}
 8012d2e:	b003      	add	sp, #12
 8012d30:	4718      	bx	r3
 8012d32:	46c0      	nop			@ (mov r8, r8)
 8012d34:	7fffffff 	.word	0x7fffffff
 8012d38:	20000094 	.word	0x20000094
 8012d3c:	ffff0208 	.word	0xffff0208

08012d40 <__sread>:
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	000c      	movs	r4, r1
 8012d44:	250e      	movs	r5, #14
 8012d46:	5f49      	ldrsh	r1, [r1, r5]
 8012d48:	f000 f910 	bl	8012f6c <_read_r>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	db03      	blt.n	8012d58 <__sread+0x18>
 8012d50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012d52:	181b      	adds	r3, r3, r0
 8012d54:	6563      	str	r3, [r4, #84]	@ 0x54
 8012d56:	bd70      	pop	{r4, r5, r6, pc}
 8012d58:	89a3      	ldrh	r3, [r4, #12]
 8012d5a:	4a02      	ldr	r2, [pc, #8]	@ (8012d64 <__sread+0x24>)
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	81a3      	strh	r3, [r4, #12]
 8012d60:	e7f9      	b.n	8012d56 <__sread+0x16>
 8012d62:	46c0      	nop			@ (mov r8, r8)
 8012d64:	ffffefff 	.word	0xffffefff

08012d68 <__swrite>:
 8012d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d6a:	001f      	movs	r7, r3
 8012d6c:	898b      	ldrh	r3, [r1, #12]
 8012d6e:	0005      	movs	r5, r0
 8012d70:	000c      	movs	r4, r1
 8012d72:	0016      	movs	r6, r2
 8012d74:	05db      	lsls	r3, r3, #23
 8012d76:	d505      	bpl.n	8012d84 <__swrite+0x1c>
 8012d78:	230e      	movs	r3, #14
 8012d7a:	5ec9      	ldrsh	r1, [r1, r3]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	2302      	movs	r3, #2
 8012d80:	f000 f8e0 	bl	8012f44 <_lseek_r>
 8012d84:	89a3      	ldrh	r3, [r4, #12]
 8012d86:	4a05      	ldr	r2, [pc, #20]	@ (8012d9c <__swrite+0x34>)
 8012d88:	0028      	movs	r0, r5
 8012d8a:	4013      	ands	r3, r2
 8012d8c:	81a3      	strh	r3, [r4, #12]
 8012d8e:	0032      	movs	r2, r6
 8012d90:	230e      	movs	r3, #14
 8012d92:	5ee1      	ldrsh	r1, [r4, r3]
 8012d94:	003b      	movs	r3, r7
 8012d96:	f000 f8fd 	bl	8012f94 <_write_r>
 8012d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d9c:	ffffefff 	.word	0xffffefff

08012da0 <__sseek>:
 8012da0:	b570      	push	{r4, r5, r6, lr}
 8012da2:	000c      	movs	r4, r1
 8012da4:	250e      	movs	r5, #14
 8012da6:	5f49      	ldrsh	r1, [r1, r5]
 8012da8:	f000 f8cc 	bl	8012f44 <_lseek_r>
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	1c42      	adds	r2, r0, #1
 8012db0:	d103      	bne.n	8012dba <__sseek+0x1a>
 8012db2:	4a05      	ldr	r2, [pc, #20]	@ (8012dc8 <__sseek+0x28>)
 8012db4:	4013      	ands	r3, r2
 8012db6:	81a3      	strh	r3, [r4, #12]
 8012db8:	bd70      	pop	{r4, r5, r6, pc}
 8012dba:	2280      	movs	r2, #128	@ 0x80
 8012dbc:	0152      	lsls	r2, r2, #5
 8012dbe:	4313      	orrs	r3, r2
 8012dc0:	81a3      	strh	r3, [r4, #12]
 8012dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8012dc4:	e7f8      	b.n	8012db8 <__sseek+0x18>
 8012dc6:	46c0      	nop			@ (mov r8, r8)
 8012dc8:	ffffefff 	.word	0xffffefff

08012dcc <__sclose>:
 8012dcc:	b510      	push	{r4, lr}
 8012dce:	230e      	movs	r3, #14
 8012dd0:	5ec9      	ldrsh	r1, [r1, r3]
 8012dd2:	f000 f845 	bl	8012e60 <_close_r>
 8012dd6:	bd10      	pop	{r4, pc}

08012dd8 <_vsniprintf_r>:
 8012dd8:	b530      	push	{r4, r5, lr}
 8012dda:	0014      	movs	r4, r2
 8012ddc:	0005      	movs	r5, r0
 8012dde:	001a      	movs	r2, r3
 8012de0:	b09b      	sub	sp, #108	@ 0x6c
 8012de2:	2c00      	cmp	r4, #0
 8012de4:	da05      	bge.n	8012df2 <_vsniprintf_r+0x1a>
 8012de6:	238b      	movs	r3, #139	@ 0x8b
 8012de8:	6003      	str	r3, [r0, #0]
 8012dea:	2001      	movs	r0, #1
 8012dec:	4240      	negs	r0, r0
 8012dee:	b01b      	add	sp, #108	@ 0x6c
 8012df0:	bd30      	pop	{r4, r5, pc}
 8012df2:	2382      	movs	r3, #130	@ 0x82
 8012df4:	4668      	mov	r0, sp
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	8183      	strh	r3, [r0, #12]
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	9100      	str	r1, [sp, #0]
 8012dfe:	9104      	str	r1, [sp, #16]
 8012e00:	429c      	cmp	r4, r3
 8012e02:	d000      	beq.n	8012e06 <_vsniprintf_r+0x2e>
 8012e04:	1e63      	subs	r3, r4, #1
 8012e06:	9302      	str	r3, [sp, #8]
 8012e08:	9305      	str	r3, [sp, #20]
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	4669      	mov	r1, sp
 8012e0e:	425b      	negs	r3, r3
 8012e10:	81cb      	strh	r3, [r1, #14]
 8012e12:	0028      	movs	r0, r5
 8012e14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e16:	f002 fc65 	bl	80156e4 <_svfiprintf_r>
 8012e1a:	1c43      	adds	r3, r0, #1
 8012e1c:	da01      	bge.n	8012e22 <_vsniprintf_r+0x4a>
 8012e1e:	238b      	movs	r3, #139	@ 0x8b
 8012e20:	602b      	str	r3, [r5, #0]
 8012e22:	2c00      	cmp	r4, #0
 8012e24:	d0e3      	beq.n	8012dee <_vsniprintf_r+0x16>
 8012e26:	2200      	movs	r2, #0
 8012e28:	9b00      	ldr	r3, [sp, #0]
 8012e2a:	701a      	strb	r2, [r3, #0]
 8012e2c:	e7df      	b.n	8012dee <_vsniprintf_r+0x16>
	...

08012e30 <vsniprintf>:
 8012e30:	b513      	push	{r0, r1, r4, lr}
 8012e32:	4c04      	ldr	r4, [pc, #16]	@ (8012e44 <vsniprintf+0x14>)
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	0013      	movs	r3, r2
 8012e38:	000a      	movs	r2, r1
 8012e3a:	0001      	movs	r1, r0
 8012e3c:	6820      	ldr	r0, [r4, #0]
 8012e3e:	f7ff ffcb 	bl	8012dd8 <_vsniprintf_r>
 8012e42:	bd16      	pop	{r1, r2, r4, pc}
 8012e44:	20000094 	.word	0x20000094

08012e48 <memset>:
 8012e48:	0003      	movs	r3, r0
 8012e4a:	1882      	adds	r2, r0, r2
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d100      	bne.n	8012e52 <memset+0xa>
 8012e50:	4770      	bx	lr
 8012e52:	7019      	strb	r1, [r3, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	e7f9      	b.n	8012e4c <memset+0x4>

08012e58 <_localeconv_r>:
 8012e58:	4800      	ldr	r0, [pc, #0]	@ (8012e5c <_localeconv_r+0x4>)
 8012e5a:	4770      	bx	lr
 8012e5c:	200001d4 	.word	0x200001d4

08012e60 <_close_r>:
 8012e60:	2300      	movs	r3, #0
 8012e62:	b570      	push	{r4, r5, r6, lr}
 8012e64:	4d06      	ldr	r5, [pc, #24]	@ (8012e80 <_close_r+0x20>)
 8012e66:	0004      	movs	r4, r0
 8012e68:	0008      	movs	r0, r1
 8012e6a:	602b      	str	r3, [r5, #0]
 8012e6c:	f7f4 faee 	bl	800744c <_close>
 8012e70:	1c43      	adds	r3, r0, #1
 8012e72:	d103      	bne.n	8012e7c <_close_r+0x1c>
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d000      	beq.n	8012e7c <_close_r+0x1c>
 8012e7a:	6023      	str	r3, [r4, #0]
 8012e7c:	bd70      	pop	{r4, r5, r6, pc}
 8012e7e:	46c0      	nop			@ (mov r8, r8)
 8012e80:	20007278 	.word	0x20007278

08012e84 <_reclaim_reent>:
 8012e84:	4b2e      	ldr	r3, [pc, #184]	@ (8012f40 <_reclaim_reent+0xbc>)
 8012e86:	b570      	push	{r4, r5, r6, lr}
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	0004      	movs	r4, r0
 8012e8c:	4283      	cmp	r3, r0
 8012e8e:	d04f      	beq.n	8012f30 <_reclaim_reent+0xac>
 8012e90:	69c3      	ldr	r3, [r0, #28]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d017      	beq.n	8012ec6 <_reclaim_reent+0x42>
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00d      	beq.n	8012eb8 <_reclaim_reent+0x34>
 8012e9c:	2500      	movs	r5, #0
 8012e9e:	69e3      	ldr	r3, [r4, #28]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	5959      	ldr	r1, [r3, r5]
 8012ea4:	2900      	cmp	r1, #0
 8012ea6:	d144      	bne.n	8012f32 <_reclaim_reent+0xae>
 8012ea8:	3504      	adds	r5, #4
 8012eaa:	2d80      	cmp	r5, #128	@ 0x80
 8012eac:	d1f7      	bne.n	8012e9e <_reclaim_reent+0x1a>
 8012eae:	69e3      	ldr	r3, [r4, #28]
 8012eb0:	0020      	movs	r0, r4
 8012eb2:	68d9      	ldr	r1, [r3, #12]
 8012eb4:	f000 ff46 	bl	8013d44 <_free_r>
 8012eb8:	69e3      	ldr	r3, [r4, #28]
 8012eba:	6819      	ldr	r1, [r3, #0]
 8012ebc:	2900      	cmp	r1, #0
 8012ebe:	d002      	beq.n	8012ec6 <_reclaim_reent+0x42>
 8012ec0:	0020      	movs	r0, r4
 8012ec2:	f000 ff3f 	bl	8013d44 <_free_r>
 8012ec6:	6961      	ldr	r1, [r4, #20]
 8012ec8:	2900      	cmp	r1, #0
 8012eca:	d002      	beq.n	8012ed2 <_reclaim_reent+0x4e>
 8012ecc:	0020      	movs	r0, r4
 8012ece:	f000 ff39 	bl	8013d44 <_free_r>
 8012ed2:	69e1      	ldr	r1, [r4, #28]
 8012ed4:	2900      	cmp	r1, #0
 8012ed6:	d002      	beq.n	8012ede <_reclaim_reent+0x5a>
 8012ed8:	0020      	movs	r0, r4
 8012eda:	f000 ff33 	bl	8013d44 <_free_r>
 8012ede:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012ee0:	2900      	cmp	r1, #0
 8012ee2:	d002      	beq.n	8012eea <_reclaim_reent+0x66>
 8012ee4:	0020      	movs	r0, r4
 8012ee6:	f000 ff2d 	bl	8013d44 <_free_r>
 8012eea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012eec:	2900      	cmp	r1, #0
 8012eee:	d002      	beq.n	8012ef6 <_reclaim_reent+0x72>
 8012ef0:	0020      	movs	r0, r4
 8012ef2:	f000 ff27 	bl	8013d44 <_free_r>
 8012ef6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012ef8:	2900      	cmp	r1, #0
 8012efa:	d002      	beq.n	8012f02 <_reclaim_reent+0x7e>
 8012efc:	0020      	movs	r0, r4
 8012efe:	f000 ff21 	bl	8013d44 <_free_r>
 8012f02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012f04:	2900      	cmp	r1, #0
 8012f06:	d002      	beq.n	8012f0e <_reclaim_reent+0x8a>
 8012f08:	0020      	movs	r0, r4
 8012f0a:	f000 ff1b 	bl	8013d44 <_free_r>
 8012f0e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012f10:	2900      	cmp	r1, #0
 8012f12:	d002      	beq.n	8012f1a <_reclaim_reent+0x96>
 8012f14:	0020      	movs	r0, r4
 8012f16:	f000 ff15 	bl	8013d44 <_free_r>
 8012f1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012f1c:	2900      	cmp	r1, #0
 8012f1e:	d002      	beq.n	8012f26 <_reclaim_reent+0xa2>
 8012f20:	0020      	movs	r0, r4
 8012f22:	f000 ff0f 	bl	8013d44 <_free_r>
 8012f26:	6a23      	ldr	r3, [r4, #32]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d001      	beq.n	8012f30 <_reclaim_reent+0xac>
 8012f2c:	0020      	movs	r0, r4
 8012f2e:	4798      	blx	r3
 8012f30:	bd70      	pop	{r4, r5, r6, pc}
 8012f32:	680e      	ldr	r6, [r1, #0]
 8012f34:	0020      	movs	r0, r4
 8012f36:	f000 ff05 	bl	8013d44 <_free_r>
 8012f3a:	0031      	movs	r1, r6
 8012f3c:	e7b2      	b.n	8012ea4 <_reclaim_reent+0x20>
 8012f3e:	46c0      	nop			@ (mov r8, r8)
 8012f40:	20000094 	.word	0x20000094

08012f44 <_lseek_r>:
 8012f44:	b570      	push	{r4, r5, r6, lr}
 8012f46:	0004      	movs	r4, r0
 8012f48:	0008      	movs	r0, r1
 8012f4a:	0011      	movs	r1, r2
 8012f4c:	001a      	movs	r2, r3
 8012f4e:	2300      	movs	r3, #0
 8012f50:	4d05      	ldr	r5, [pc, #20]	@ (8012f68 <_lseek_r+0x24>)
 8012f52:	602b      	str	r3, [r5, #0]
 8012f54:	f7f4 fa9b 	bl	800748e <_lseek>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	d103      	bne.n	8012f64 <_lseek_r+0x20>
 8012f5c:	682b      	ldr	r3, [r5, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d000      	beq.n	8012f64 <_lseek_r+0x20>
 8012f62:	6023      	str	r3, [r4, #0]
 8012f64:	bd70      	pop	{r4, r5, r6, pc}
 8012f66:	46c0      	nop			@ (mov r8, r8)
 8012f68:	20007278 	.word	0x20007278

08012f6c <_read_r>:
 8012f6c:	b570      	push	{r4, r5, r6, lr}
 8012f6e:	0004      	movs	r4, r0
 8012f70:	0008      	movs	r0, r1
 8012f72:	0011      	movs	r1, r2
 8012f74:	001a      	movs	r2, r3
 8012f76:	2300      	movs	r3, #0
 8012f78:	4d05      	ldr	r5, [pc, #20]	@ (8012f90 <_read_r+0x24>)
 8012f7a:	602b      	str	r3, [r5, #0]
 8012f7c:	f7f4 fa2d 	bl	80073da <_read>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	d103      	bne.n	8012f8c <_read_r+0x20>
 8012f84:	682b      	ldr	r3, [r5, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d000      	beq.n	8012f8c <_read_r+0x20>
 8012f8a:	6023      	str	r3, [r4, #0]
 8012f8c:	bd70      	pop	{r4, r5, r6, pc}
 8012f8e:	46c0      	nop			@ (mov r8, r8)
 8012f90:	20007278 	.word	0x20007278

08012f94 <_write_r>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	0004      	movs	r4, r0
 8012f98:	0008      	movs	r0, r1
 8012f9a:	0011      	movs	r1, r2
 8012f9c:	001a      	movs	r2, r3
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	4d05      	ldr	r5, [pc, #20]	@ (8012fb8 <_write_r+0x24>)
 8012fa2:	602b      	str	r3, [r5, #0]
 8012fa4:	f7f4 fa36 	bl	8007414 <_write>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d103      	bne.n	8012fb4 <_write_r+0x20>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d000      	beq.n	8012fb4 <_write_r+0x20>
 8012fb2:	6023      	str	r3, [r4, #0]
 8012fb4:	bd70      	pop	{r4, r5, r6, pc}
 8012fb6:	46c0      	nop			@ (mov r8, r8)
 8012fb8:	20007278 	.word	0x20007278

08012fbc <__errno>:
 8012fbc:	4b01      	ldr	r3, [pc, #4]	@ (8012fc4 <__errno+0x8>)
 8012fbe:	6818      	ldr	r0, [r3, #0]
 8012fc0:	4770      	bx	lr
 8012fc2:	46c0      	nop			@ (mov r8, r8)
 8012fc4:	20000094 	.word	0x20000094

08012fc8 <__libc_init_array>:
 8012fc8:	b570      	push	{r4, r5, r6, lr}
 8012fca:	2600      	movs	r6, #0
 8012fcc:	4c0c      	ldr	r4, [pc, #48]	@ (8013000 <__libc_init_array+0x38>)
 8012fce:	4d0d      	ldr	r5, [pc, #52]	@ (8013004 <__libc_init_array+0x3c>)
 8012fd0:	1b64      	subs	r4, r4, r5
 8012fd2:	10a4      	asrs	r4, r4, #2
 8012fd4:	42a6      	cmp	r6, r4
 8012fd6:	d109      	bne.n	8012fec <__libc_init_array+0x24>
 8012fd8:	2600      	movs	r6, #0
 8012fda:	f003 fc3f 	bl	801685c <_init>
 8012fde:	4c0a      	ldr	r4, [pc, #40]	@ (8013008 <__libc_init_array+0x40>)
 8012fe0:	4d0a      	ldr	r5, [pc, #40]	@ (801300c <__libc_init_array+0x44>)
 8012fe2:	1b64      	subs	r4, r4, r5
 8012fe4:	10a4      	asrs	r4, r4, #2
 8012fe6:	42a6      	cmp	r6, r4
 8012fe8:	d105      	bne.n	8012ff6 <__libc_init_array+0x2e>
 8012fea:	bd70      	pop	{r4, r5, r6, pc}
 8012fec:	00b3      	lsls	r3, r6, #2
 8012fee:	58eb      	ldr	r3, [r5, r3]
 8012ff0:	4798      	blx	r3
 8012ff2:	3601      	adds	r6, #1
 8012ff4:	e7ee      	b.n	8012fd4 <__libc_init_array+0xc>
 8012ff6:	00b3      	lsls	r3, r6, #2
 8012ff8:	58eb      	ldr	r3, [r5, r3]
 8012ffa:	4798      	blx	r3
 8012ffc:	3601      	adds	r6, #1
 8012ffe:	e7f2      	b.n	8012fe6 <__libc_init_array+0x1e>
 8013000:	080176f8 	.word	0x080176f8
 8013004:	080176f8 	.word	0x080176f8
 8013008:	08017700 	.word	0x08017700
 801300c:	080176f8 	.word	0x080176f8

08013010 <__retarget_lock_init_recursive>:
 8013010:	4770      	bx	lr

08013012 <__retarget_lock_acquire_recursive>:
 8013012:	4770      	bx	lr

08013014 <__retarget_lock_release_recursive>:
 8013014:	4770      	bx	lr

08013016 <memchr>:
 8013016:	b2c9      	uxtb	r1, r1
 8013018:	1882      	adds	r2, r0, r2
 801301a:	4290      	cmp	r0, r2
 801301c:	d101      	bne.n	8013022 <memchr+0xc>
 801301e:	2000      	movs	r0, #0
 8013020:	4770      	bx	lr
 8013022:	7803      	ldrb	r3, [r0, #0]
 8013024:	428b      	cmp	r3, r1
 8013026:	d0fb      	beq.n	8013020 <memchr+0xa>
 8013028:	3001      	adds	r0, #1
 801302a:	e7f6      	b.n	801301a <memchr+0x4>

0801302c <memcpy>:
 801302c:	2300      	movs	r3, #0
 801302e:	b510      	push	{r4, lr}
 8013030:	429a      	cmp	r2, r3
 8013032:	d100      	bne.n	8013036 <memcpy+0xa>
 8013034:	bd10      	pop	{r4, pc}
 8013036:	5ccc      	ldrb	r4, [r1, r3]
 8013038:	54c4      	strb	r4, [r0, r3]
 801303a:	3301      	adds	r3, #1
 801303c:	e7f8      	b.n	8013030 <memcpy+0x4>

0801303e <quorem>:
 801303e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013040:	6902      	ldr	r2, [r0, #16]
 8013042:	690f      	ldr	r7, [r1, #16]
 8013044:	b087      	sub	sp, #28
 8013046:	0006      	movs	r6, r0
 8013048:	000b      	movs	r3, r1
 801304a:	2000      	movs	r0, #0
 801304c:	9102      	str	r1, [sp, #8]
 801304e:	42ba      	cmp	r2, r7
 8013050:	db6d      	blt.n	801312e <quorem+0xf0>
 8013052:	3f01      	subs	r7, #1
 8013054:	00bc      	lsls	r4, r7, #2
 8013056:	3314      	adds	r3, #20
 8013058:	9305      	str	r3, [sp, #20]
 801305a:	191b      	adds	r3, r3, r4
 801305c:	9303      	str	r3, [sp, #12]
 801305e:	0033      	movs	r3, r6
 8013060:	3314      	adds	r3, #20
 8013062:	191c      	adds	r4, r3, r4
 8013064:	9301      	str	r3, [sp, #4]
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	9304      	str	r3, [sp, #16]
 801306a:	9b03      	ldr	r3, [sp, #12]
 801306c:	9804      	ldr	r0, [sp, #16]
 801306e:	681d      	ldr	r5, [r3, #0]
 8013070:	3501      	adds	r5, #1
 8013072:	0029      	movs	r1, r5
 8013074:	f7ed f864 	bl	8000140 <__udivsi3>
 8013078:	9b04      	ldr	r3, [sp, #16]
 801307a:	9000      	str	r0, [sp, #0]
 801307c:	42ab      	cmp	r3, r5
 801307e:	d32b      	bcc.n	80130d8 <quorem+0x9a>
 8013080:	9b05      	ldr	r3, [sp, #20]
 8013082:	9d01      	ldr	r5, [sp, #4]
 8013084:	469c      	mov	ip, r3
 8013086:	2300      	movs	r3, #0
 8013088:	9305      	str	r3, [sp, #20]
 801308a:	9304      	str	r3, [sp, #16]
 801308c:	4662      	mov	r2, ip
 801308e:	ca08      	ldmia	r2!, {r3}
 8013090:	6828      	ldr	r0, [r5, #0]
 8013092:	4694      	mov	ip, r2
 8013094:	9a00      	ldr	r2, [sp, #0]
 8013096:	b299      	uxth	r1, r3
 8013098:	4351      	muls	r1, r2
 801309a:	9a05      	ldr	r2, [sp, #20]
 801309c:	0c1b      	lsrs	r3, r3, #16
 801309e:	1889      	adds	r1, r1, r2
 80130a0:	9a00      	ldr	r2, [sp, #0]
 80130a2:	4353      	muls	r3, r2
 80130a4:	0c0a      	lsrs	r2, r1, #16
 80130a6:	189b      	adds	r3, r3, r2
 80130a8:	0c1a      	lsrs	r2, r3, #16
 80130aa:	b289      	uxth	r1, r1
 80130ac:	9205      	str	r2, [sp, #20]
 80130ae:	b282      	uxth	r2, r0
 80130b0:	1a52      	subs	r2, r2, r1
 80130b2:	9904      	ldr	r1, [sp, #16]
 80130b4:	0c00      	lsrs	r0, r0, #16
 80130b6:	1852      	adds	r2, r2, r1
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	1411      	asrs	r1, r2, #16
 80130bc:	1ac3      	subs	r3, r0, r3
 80130be:	185b      	adds	r3, r3, r1
 80130c0:	1419      	asrs	r1, r3, #16
 80130c2:	b292      	uxth	r2, r2
 80130c4:	041b      	lsls	r3, r3, #16
 80130c6:	431a      	orrs	r2, r3
 80130c8:	9b03      	ldr	r3, [sp, #12]
 80130ca:	9104      	str	r1, [sp, #16]
 80130cc:	c504      	stmia	r5!, {r2}
 80130ce:	4563      	cmp	r3, ip
 80130d0:	d2dc      	bcs.n	801308c <quorem+0x4e>
 80130d2:	6823      	ldr	r3, [r4, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d030      	beq.n	801313a <quorem+0xfc>
 80130d8:	0030      	movs	r0, r6
 80130da:	9902      	ldr	r1, [sp, #8]
 80130dc:	f001 fa12 	bl	8014504 <__mcmp>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	db23      	blt.n	801312c <quorem+0xee>
 80130e4:	0034      	movs	r4, r6
 80130e6:	2500      	movs	r5, #0
 80130e8:	9902      	ldr	r1, [sp, #8]
 80130ea:	3414      	adds	r4, #20
 80130ec:	3114      	adds	r1, #20
 80130ee:	6823      	ldr	r3, [r4, #0]
 80130f0:	c901      	ldmia	r1!, {r0}
 80130f2:	9302      	str	r3, [sp, #8]
 80130f4:	466b      	mov	r3, sp
 80130f6:	891b      	ldrh	r3, [r3, #8]
 80130f8:	b282      	uxth	r2, r0
 80130fa:	1a9a      	subs	r2, r3, r2
 80130fc:	9b02      	ldr	r3, [sp, #8]
 80130fe:	1952      	adds	r2, r2, r5
 8013100:	0c00      	lsrs	r0, r0, #16
 8013102:	0c1b      	lsrs	r3, r3, #16
 8013104:	1a1b      	subs	r3, r3, r0
 8013106:	1410      	asrs	r0, r2, #16
 8013108:	181b      	adds	r3, r3, r0
 801310a:	141d      	asrs	r5, r3, #16
 801310c:	b292      	uxth	r2, r2
 801310e:	041b      	lsls	r3, r3, #16
 8013110:	431a      	orrs	r2, r3
 8013112:	9b03      	ldr	r3, [sp, #12]
 8013114:	c404      	stmia	r4!, {r2}
 8013116:	428b      	cmp	r3, r1
 8013118:	d2e9      	bcs.n	80130ee <quorem+0xb0>
 801311a:	9a01      	ldr	r2, [sp, #4]
 801311c:	00bb      	lsls	r3, r7, #2
 801311e:	18d3      	adds	r3, r2, r3
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	2a00      	cmp	r2, #0
 8013124:	d013      	beq.n	801314e <quorem+0x110>
 8013126:	9b00      	ldr	r3, [sp, #0]
 8013128:	3301      	adds	r3, #1
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	9800      	ldr	r0, [sp, #0]
 801312e:	b007      	add	sp, #28
 8013130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013132:	6823      	ldr	r3, [r4, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d104      	bne.n	8013142 <quorem+0x104>
 8013138:	3f01      	subs	r7, #1
 801313a:	9b01      	ldr	r3, [sp, #4]
 801313c:	3c04      	subs	r4, #4
 801313e:	42a3      	cmp	r3, r4
 8013140:	d3f7      	bcc.n	8013132 <quorem+0xf4>
 8013142:	6137      	str	r7, [r6, #16]
 8013144:	e7c8      	b.n	80130d8 <quorem+0x9a>
 8013146:	681a      	ldr	r2, [r3, #0]
 8013148:	2a00      	cmp	r2, #0
 801314a:	d104      	bne.n	8013156 <quorem+0x118>
 801314c:	3f01      	subs	r7, #1
 801314e:	9a01      	ldr	r2, [sp, #4]
 8013150:	3b04      	subs	r3, #4
 8013152:	429a      	cmp	r2, r3
 8013154:	d3f7      	bcc.n	8013146 <quorem+0x108>
 8013156:	6137      	str	r7, [r6, #16]
 8013158:	e7e5      	b.n	8013126 <quorem+0xe8>
	...

0801315c <_dtoa_r>:
 801315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315e:	0014      	movs	r4, r2
 8013160:	001d      	movs	r5, r3
 8013162:	69c6      	ldr	r6, [r0, #28]
 8013164:	b09d      	sub	sp, #116	@ 0x74
 8013166:	940a      	str	r4, [sp, #40]	@ 0x28
 8013168:	950b      	str	r5, [sp, #44]	@ 0x2c
 801316a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801316c:	9003      	str	r0, [sp, #12]
 801316e:	2e00      	cmp	r6, #0
 8013170:	d10f      	bne.n	8013192 <_dtoa_r+0x36>
 8013172:	2010      	movs	r0, #16
 8013174:	f000 fe30 	bl	8013dd8 <malloc>
 8013178:	9b03      	ldr	r3, [sp, #12]
 801317a:	1e02      	subs	r2, r0, #0
 801317c:	61d8      	str	r0, [r3, #28]
 801317e:	d104      	bne.n	801318a <_dtoa_r+0x2e>
 8013180:	21ef      	movs	r1, #239	@ 0xef
 8013182:	4bc7      	ldr	r3, [pc, #796]	@ (80134a0 <_dtoa_r+0x344>)
 8013184:	48c7      	ldr	r0, [pc, #796]	@ (80134a4 <_dtoa_r+0x348>)
 8013186:	f002 fc99 	bl	8015abc <__assert_func>
 801318a:	6046      	str	r6, [r0, #4]
 801318c:	6086      	str	r6, [r0, #8]
 801318e:	6006      	str	r6, [r0, #0]
 8013190:	60c6      	str	r6, [r0, #12]
 8013192:	9b03      	ldr	r3, [sp, #12]
 8013194:	69db      	ldr	r3, [r3, #28]
 8013196:	6819      	ldr	r1, [r3, #0]
 8013198:	2900      	cmp	r1, #0
 801319a:	d00b      	beq.n	80131b4 <_dtoa_r+0x58>
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	2301      	movs	r3, #1
 80131a0:	4093      	lsls	r3, r2
 80131a2:	604a      	str	r2, [r1, #4]
 80131a4:	608b      	str	r3, [r1, #8]
 80131a6:	9803      	ldr	r0, [sp, #12]
 80131a8:	f000 ff16 	bl	8013fd8 <_Bfree>
 80131ac:	2200      	movs	r2, #0
 80131ae:	9b03      	ldr	r3, [sp, #12]
 80131b0:	69db      	ldr	r3, [r3, #28]
 80131b2:	601a      	str	r2, [r3, #0]
 80131b4:	2d00      	cmp	r5, #0
 80131b6:	da1e      	bge.n	80131f6 <_dtoa_r+0x9a>
 80131b8:	2301      	movs	r3, #1
 80131ba:	603b      	str	r3, [r7, #0]
 80131bc:	006b      	lsls	r3, r5, #1
 80131be:	085b      	lsrs	r3, r3, #1
 80131c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131c2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80131c4:	4bb8      	ldr	r3, [pc, #736]	@ (80134a8 <_dtoa_r+0x34c>)
 80131c6:	4ab8      	ldr	r2, [pc, #736]	@ (80134a8 <_dtoa_r+0x34c>)
 80131c8:	403b      	ands	r3, r7
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d116      	bne.n	80131fc <_dtoa_r+0xa0>
 80131ce:	4bb7      	ldr	r3, [pc, #732]	@ (80134ac <_dtoa_r+0x350>)
 80131d0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80131d2:	6013      	str	r3, [r2, #0]
 80131d4:	033b      	lsls	r3, r7, #12
 80131d6:	0b1b      	lsrs	r3, r3, #12
 80131d8:	4323      	orrs	r3, r4
 80131da:	d101      	bne.n	80131e0 <_dtoa_r+0x84>
 80131dc:	f000 fd83 	bl	8013ce6 <_dtoa_r+0xb8a>
 80131e0:	4bb3      	ldr	r3, [pc, #716]	@ (80134b0 <_dtoa_r+0x354>)
 80131e2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80131e4:	9308      	str	r3, [sp, #32]
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	d002      	beq.n	80131f0 <_dtoa_r+0x94>
 80131ea:	4bb2      	ldr	r3, [pc, #712]	@ (80134b4 <_dtoa_r+0x358>)
 80131ec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80131ee:	6013      	str	r3, [r2, #0]
 80131f0:	9808      	ldr	r0, [sp, #32]
 80131f2:	b01d      	add	sp, #116	@ 0x74
 80131f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131f6:	2300      	movs	r3, #0
 80131f8:	603b      	str	r3, [r7, #0]
 80131fa:	e7e2      	b.n	80131c2 <_dtoa_r+0x66>
 80131fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80131fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013200:	9212      	str	r2, [sp, #72]	@ 0x48
 8013202:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013204:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013206:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013208:	2200      	movs	r2, #0
 801320a:	2300      	movs	r3, #0
 801320c:	f7ed f91e 	bl	800044c <__aeabi_dcmpeq>
 8013210:	1e06      	subs	r6, r0, #0
 8013212:	d00b      	beq.n	801322c <_dtoa_r+0xd0>
 8013214:	2301      	movs	r3, #1
 8013216:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013218:	6013      	str	r3, [r2, #0]
 801321a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <_dtoa_r+0xca>
 8013220:	4ba5      	ldr	r3, [pc, #660]	@ (80134b8 <_dtoa_r+0x35c>)
 8013222:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013224:	6013      	str	r3, [r2, #0]
 8013226:	4ba5      	ldr	r3, [pc, #660]	@ (80134bc <_dtoa_r+0x360>)
 8013228:	9308      	str	r3, [sp, #32]
 801322a:	e7e1      	b.n	80131f0 <_dtoa_r+0x94>
 801322c:	ab1a      	add	r3, sp, #104	@ 0x68
 801322e:	9301      	str	r3, [sp, #4]
 8013230:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	9803      	ldr	r0, [sp, #12]
 8013236:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013238:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801323a:	f001 fa85 	bl	8014748 <__d2b>
 801323e:	007a      	lsls	r2, r7, #1
 8013240:	9005      	str	r0, [sp, #20]
 8013242:	0d52      	lsrs	r2, r2, #21
 8013244:	d100      	bne.n	8013248 <_dtoa_r+0xec>
 8013246:	e07b      	b.n	8013340 <_dtoa_r+0x1e4>
 8013248:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801324a:	9618      	str	r6, [sp, #96]	@ 0x60
 801324c:	0319      	lsls	r1, r3, #12
 801324e:	4b9c      	ldr	r3, [pc, #624]	@ (80134c0 <_dtoa_r+0x364>)
 8013250:	0b09      	lsrs	r1, r1, #12
 8013252:	430b      	orrs	r3, r1
 8013254:	499b      	ldr	r1, [pc, #620]	@ (80134c4 <_dtoa_r+0x368>)
 8013256:	1857      	adds	r7, r2, r1
 8013258:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801325a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801325c:	0019      	movs	r1, r3
 801325e:	2200      	movs	r2, #0
 8013260:	4b99      	ldr	r3, [pc, #612]	@ (80134c8 <_dtoa_r+0x36c>)
 8013262:	f7ef fc53 	bl	8002b0c <__aeabi_dsub>
 8013266:	4a99      	ldr	r2, [pc, #612]	@ (80134cc <_dtoa_r+0x370>)
 8013268:	4b99      	ldr	r3, [pc, #612]	@ (80134d0 <_dtoa_r+0x374>)
 801326a:	f7ef f987 	bl	800257c <__aeabi_dmul>
 801326e:	4a99      	ldr	r2, [pc, #612]	@ (80134d4 <_dtoa_r+0x378>)
 8013270:	4b99      	ldr	r3, [pc, #612]	@ (80134d8 <_dtoa_r+0x37c>)
 8013272:	f7ee f9db 	bl	800162c <__aeabi_dadd>
 8013276:	0004      	movs	r4, r0
 8013278:	0038      	movs	r0, r7
 801327a:	000d      	movs	r5, r1
 801327c:	f7f0 f840 	bl	8003300 <__aeabi_i2d>
 8013280:	4a96      	ldr	r2, [pc, #600]	@ (80134dc <_dtoa_r+0x380>)
 8013282:	4b97      	ldr	r3, [pc, #604]	@ (80134e0 <_dtoa_r+0x384>)
 8013284:	f7ef f97a 	bl	800257c <__aeabi_dmul>
 8013288:	0002      	movs	r2, r0
 801328a:	000b      	movs	r3, r1
 801328c:	0020      	movs	r0, r4
 801328e:	0029      	movs	r1, r5
 8013290:	f7ee f9cc 	bl	800162c <__aeabi_dadd>
 8013294:	0004      	movs	r4, r0
 8013296:	000d      	movs	r5, r1
 8013298:	f7ef fff6 	bl	8003288 <__aeabi_d2iz>
 801329c:	2200      	movs	r2, #0
 801329e:	9004      	str	r0, [sp, #16]
 80132a0:	2300      	movs	r3, #0
 80132a2:	0020      	movs	r0, r4
 80132a4:	0029      	movs	r1, r5
 80132a6:	f7ed f8d7 	bl	8000458 <__aeabi_dcmplt>
 80132aa:	2800      	cmp	r0, #0
 80132ac:	d00b      	beq.n	80132c6 <_dtoa_r+0x16a>
 80132ae:	9804      	ldr	r0, [sp, #16]
 80132b0:	f7f0 f826 	bl	8003300 <__aeabi_i2d>
 80132b4:	002b      	movs	r3, r5
 80132b6:	0022      	movs	r2, r4
 80132b8:	f7ed f8c8 	bl	800044c <__aeabi_dcmpeq>
 80132bc:	4243      	negs	r3, r0
 80132be:	4158      	adcs	r0, r3
 80132c0:	9b04      	ldr	r3, [sp, #16]
 80132c2:	1a1b      	subs	r3, r3, r0
 80132c4:	9304      	str	r3, [sp, #16]
 80132c6:	2301      	movs	r3, #1
 80132c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80132ca:	9b04      	ldr	r3, [sp, #16]
 80132cc:	2b16      	cmp	r3, #22
 80132ce:	d810      	bhi.n	80132f2 <_dtoa_r+0x196>
 80132d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80132d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80132d4:	9a04      	ldr	r2, [sp, #16]
 80132d6:	4b83      	ldr	r3, [pc, #524]	@ (80134e4 <_dtoa_r+0x388>)
 80132d8:	00d2      	lsls	r2, r2, #3
 80132da:	189b      	adds	r3, r3, r2
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	f7ed f8ba 	bl	8000458 <__aeabi_dcmplt>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d047      	beq.n	8013378 <_dtoa_r+0x21c>
 80132e8:	9b04      	ldr	r3, [sp, #16]
 80132ea:	3b01      	subs	r3, #1
 80132ec:	9304      	str	r3, [sp, #16]
 80132ee:	2300      	movs	r3, #0
 80132f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80132f2:	2200      	movs	r2, #0
 80132f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80132f6:	9206      	str	r2, [sp, #24]
 80132f8:	1bdb      	subs	r3, r3, r7
 80132fa:	1e5a      	subs	r2, r3, #1
 80132fc:	d53e      	bpl.n	801337c <_dtoa_r+0x220>
 80132fe:	2201      	movs	r2, #1
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	9306      	str	r3, [sp, #24]
 8013304:	2300      	movs	r3, #0
 8013306:	930d      	str	r3, [sp, #52]	@ 0x34
 8013308:	9b04      	ldr	r3, [sp, #16]
 801330a:	2b00      	cmp	r3, #0
 801330c:	db38      	blt.n	8013380 <_dtoa_r+0x224>
 801330e:	9a04      	ldr	r2, [sp, #16]
 8013310:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013312:	4694      	mov	ip, r2
 8013314:	4463      	add	r3, ip
 8013316:	930d      	str	r3, [sp, #52]	@ 0x34
 8013318:	2300      	movs	r3, #0
 801331a:	9214      	str	r2, [sp, #80]	@ 0x50
 801331c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801331e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013320:	2401      	movs	r4, #1
 8013322:	2b09      	cmp	r3, #9
 8013324:	d867      	bhi.n	80133f6 <_dtoa_r+0x29a>
 8013326:	2b05      	cmp	r3, #5
 8013328:	dd02      	ble.n	8013330 <_dtoa_r+0x1d4>
 801332a:	2400      	movs	r4, #0
 801332c:	3b04      	subs	r3, #4
 801332e:	9322      	str	r3, [sp, #136]	@ 0x88
 8013330:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013332:	1e98      	subs	r0, r3, #2
 8013334:	2803      	cmp	r0, #3
 8013336:	d867      	bhi.n	8013408 <_dtoa_r+0x2ac>
 8013338:	f7ec feee 	bl	8000118 <__gnu_thumb1_case_uqi>
 801333c:	5b383a2b 	.word	0x5b383a2b
 8013340:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013342:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8013344:	18f6      	adds	r6, r6, r3
 8013346:	4b68      	ldr	r3, [pc, #416]	@ (80134e8 <_dtoa_r+0x38c>)
 8013348:	18f2      	adds	r2, r6, r3
 801334a:	2a20      	cmp	r2, #32
 801334c:	dd0f      	ble.n	801336e <_dtoa_r+0x212>
 801334e:	2340      	movs	r3, #64	@ 0x40
 8013350:	1a9b      	subs	r3, r3, r2
 8013352:	409f      	lsls	r7, r3
 8013354:	4b65      	ldr	r3, [pc, #404]	@ (80134ec <_dtoa_r+0x390>)
 8013356:	0038      	movs	r0, r7
 8013358:	18f3      	adds	r3, r6, r3
 801335a:	40dc      	lsrs	r4, r3
 801335c:	4320      	orrs	r0, r4
 801335e:	f7ef fffd 	bl	800335c <__aeabi_ui2d>
 8013362:	2201      	movs	r2, #1
 8013364:	4b62      	ldr	r3, [pc, #392]	@ (80134f0 <_dtoa_r+0x394>)
 8013366:	1e77      	subs	r7, r6, #1
 8013368:	18cb      	adds	r3, r1, r3
 801336a:	9218      	str	r2, [sp, #96]	@ 0x60
 801336c:	e776      	b.n	801325c <_dtoa_r+0x100>
 801336e:	2320      	movs	r3, #32
 8013370:	0020      	movs	r0, r4
 8013372:	1a9b      	subs	r3, r3, r2
 8013374:	4098      	lsls	r0, r3
 8013376:	e7f2      	b.n	801335e <_dtoa_r+0x202>
 8013378:	9015      	str	r0, [sp, #84]	@ 0x54
 801337a:	e7ba      	b.n	80132f2 <_dtoa_r+0x196>
 801337c:	920d      	str	r2, [sp, #52]	@ 0x34
 801337e:	e7c3      	b.n	8013308 <_dtoa_r+0x1ac>
 8013380:	9b06      	ldr	r3, [sp, #24]
 8013382:	9a04      	ldr	r2, [sp, #16]
 8013384:	1a9b      	subs	r3, r3, r2
 8013386:	9306      	str	r3, [sp, #24]
 8013388:	4253      	negs	r3, r2
 801338a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801338c:	2300      	movs	r3, #0
 801338e:	9314      	str	r3, [sp, #80]	@ 0x50
 8013390:	e7c5      	b.n	801331e <_dtoa_r+0x1c2>
 8013392:	2300      	movs	r3, #0
 8013394:	9310      	str	r3, [sp, #64]	@ 0x40
 8013396:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013398:	930e      	str	r3, [sp, #56]	@ 0x38
 801339a:	9309      	str	r3, [sp, #36]	@ 0x24
 801339c:	2b00      	cmp	r3, #0
 801339e:	dc13      	bgt.n	80133c8 <_dtoa_r+0x26c>
 80133a0:	2301      	movs	r3, #1
 80133a2:	001a      	movs	r2, r3
 80133a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80133a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80133a8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80133aa:	e00d      	b.n	80133c8 <_dtoa_r+0x26c>
 80133ac:	2301      	movs	r3, #1
 80133ae:	e7f1      	b.n	8013394 <_dtoa_r+0x238>
 80133b0:	2300      	movs	r3, #0
 80133b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80133b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80133b6:	4694      	mov	ip, r2
 80133b8:	9b04      	ldr	r3, [sp, #16]
 80133ba:	4463      	add	r3, ip
 80133bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80133be:	3301      	adds	r3, #1
 80133c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	dc00      	bgt.n	80133c8 <_dtoa_r+0x26c>
 80133c6:	2301      	movs	r3, #1
 80133c8:	9a03      	ldr	r2, [sp, #12]
 80133ca:	2100      	movs	r1, #0
 80133cc:	69d0      	ldr	r0, [r2, #28]
 80133ce:	2204      	movs	r2, #4
 80133d0:	0015      	movs	r5, r2
 80133d2:	3514      	adds	r5, #20
 80133d4:	429d      	cmp	r5, r3
 80133d6:	d91b      	bls.n	8013410 <_dtoa_r+0x2b4>
 80133d8:	6041      	str	r1, [r0, #4]
 80133da:	9803      	ldr	r0, [sp, #12]
 80133dc:	f000 fdb8 	bl	8013f50 <_Balloc>
 80133e0:	9008      	str	r0, [sp, #32]
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d117      	bne.n	8013416 <_dtoa_r+0x2ba>
 80133e6:	21b0      	movs	r1, #176	@ 0xb0
 80133e8:	4b42      	ldr	r3, [pc, #264]	@ (80134f4 <_dtoa_r+0x398>)
 80133ea:	482e      	ldr	r0, [pc, #184]	@ (80134a4 <_dtoa_r+0x348>)
 80133ec:	9a08      	ldr	r2, [sp, #32]
 80133ee:	31ff      	adds	r1, #255	@ 0xff
 80133f0:	e6c9      	b.n	8013186 <_dtoa_r+0x2a>
 80133f2:	2301      	movs	r3, #1
 80133f4:	e7dd      	b.n	80133b2 <_dtoa_r+0x256>
 80133f6:	2300      	movs	r3, #0
 80133f8:	9410      	str	r4, [sp, #64]	@ 0x40
 80133fa:	9322      	str	r3, [sp, #136]	@ 0x88
 80133fc:	3b01      	subs	r3, #1
 80133fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8013400:	9309      	str	r3, [sp, #36]	@ 0x24
 8013402:	2200      	movs	r2, #0
 8013404:	3313      	adds	r3, #19
 8013406:	e7cf      	b.n	80133a8 <_dtoa_r+0x24c>
 8013408:	2301      	movs	r3, #1
 801340a:	9310      	str	r3, [sp, #64]	@ 0x40
 801340c:	3b02      	subs	r3, #2
 801340e:	e7f6      	b.n	80133fe <_dtoa_r+0x2a2>
 8013410:	3101      	adds	r1, #1
 8013412:	0052      	lsls	r2, r2, #1
 8013414:	e7dc      	b.n	80133d0 <_dtoa_r+0x274>
 8013416:	9b03      	ldr	r3, [sp, #12]
 8013418:	9a08      	ldr	r2, [sp, #32]
 801341a:	69db      	ldr	r3, [r3, #28]
 801341c:	601a      	str	r2, [r3, #0]
 801341e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013420:	2b0e      	cmp	r3, #14
 8013422:	d900      	bls.n	8013426 <_dtoa_r+0x2ca>
 8013424:	e0d9      	b.n	80135da <_dtoa_r+0x47e>
 8013426:	2c00      	cmp	r4, #0
 8013428:	d100      	bne.n	801342c <_dtoa_r+0x2d0>
 801342a:	e0d6      	b.n	80135da <_dtoa_r+0x47e>
 801342c:	9b04      	ldr	r3, [sp, #16]
 801342e:	2b00      	cmp	r3, #0
 8013430:	dd64      	ble.n	80134fc <_dtoa_r+0x3a0>
 8013432:	210f      	movs	r1, #15
 8013434:	9a04      	ldr	r2, [sp, #16]
 8013436:	4b2b      	ldr	r3, [pc, #172]	@ (80134e4 <_dtoa_r+0x388>)
 8013438:	400a      	ands	r2, r1
 801343a:	00d2      	lsls	r2, r2, #3
 801343c:	189b      	adds	r3, r3, r2
 801343e:	681e      	ldr	r6, [r3, #0]
 8013440:	685f      	ldr	r7, [r3, #4]
 8013442:	9b04      	ldr	r3, [sp, #16]
 8013444:	2402      	movs	r4, #2
 8013446:	111d      	asrs	r5, r3, #4
 8013448:	05db      	lsls	r3, r3, #23
 801344a:	d50a      	bpl.n	8013462 <_dtoa_r+0x306>
 801344c:	4b2a      	ldr	r3, [pc, #168]	@ (80134f8 <_dtoa_r+0x39c>)
 801344e:	400d      	ands	r5, r1
 8013450:	6a1a      	ldr	r2, [r3, #32]
 8013452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013454:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013456:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013458:	f7ee fc4c 	bl	8001cf4 <__aeabi_ddiv>
 801345c:	900a      	str	r0, [sp, #40]	@ 0x28
 801345e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013460:	3401      	adds	r4, #1
 8013462:	4b25      	ldr	r3, [pc, #148]	@ (80134f8 <_dtoa_r+0x39c>)
 8013464:	930c      	str	r3, [sp, #48]	@ 0x30
 8013466:	2d00      	cmp	r5, #0
 8013468:	d108      	bne.n	801347c <_dtoa_r+0x320>
 801346a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801346c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801346e:	0032      	movs	r2, r6
 8013470:	003b      	movs	r3, r7
 8013472:	f7ee fc3f 	bl	8001cf4 <__aeabi_ddiv>
 8013476:	900a      	str	r0, [sp, #40]	@ 0x28
 8013478:	910b      	str	r1, [sp, #44]	@ 0x2c
 801347a:	e05a      	b.n	8013532 <_dtoa_r+0x3d6>
 801347c:	2301      	movs	r3, #1
 801347e:	421d      	tst	r5, r3
 8013480:	d009      	beq.n	8013496 <_dtoa_r+0x33a>
 8013482:	18e4      	adds	r4, r4, r3
 8013484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013486:	0030      	movs	r0, r6
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	0039      	movs	r1, r7
 801348e:	f7ef f875 	bl	800257c <__aeabi_dmul>
 8013492:	0006      	movs	r6, r0
 8013494:	000f      	movs	r7, r1
 8013496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013498:	106d      	asrs	r5, r5, #1
 801349a:	3308      	adds	r3, #8
 801349c:	e7e2      	b.n	8013464 <_dtoa_r+0x308>
 801349e:	46c0      	nop			@ (mov r8, r8)
 80134a0:	08017306 	.word	0x08017306
 80134a4:	0801731d 	.word	0x0801731d
 80134a8:	7ff00000 	.word	0x7ff00000
 80134ac:	0000270f 	.word	0x0000270f
 80134b0:	08017302 	.word	0x08017302
 80134b4:	08017305 	.word	0x08017305
 80134b8:	080172d1 	.word	0x080172d1
 80134bc:	080172d0 	.word	0x080172d0
 80134c0:	3ff00000 	.word	0x3ff00000
 80134c4:	fffffc01 	.word	0xfffffc01
 80134c8:	3ff80000 	.word	0x3ff80000
 80134cc:	636f4361 	.word	0x636f4361
 80134d0:	3fd287a7 	.word	0x3fd287a7
 80134d4:	8b60c8b3 	.word	0x8b60c8b3
 80134d8:	3fc68a28 	.word	0x3fc68a28
 80134dc:	509f79fb 	.word	0x509f79fb
 80134e0:	3fd34413 	.word	0x3fd34413
 80134e4:	08017418 	.word	0x08017418
 80134e8:	00000432 	.word	0x00000432
 80134ec:	00000412 	.word	0x00000412
 80134f0:	fe100000 	.word	0xfe100000
 80134f4:	08017375 	.word	0x08017375
 80134f8:	080173f0 	.word	0x080173f0
 80134fc:	9b04      	ldr	r3, [sp, #16]
 80134fe:	2402      	movs	r4, #2
 8013500:	2b00      	cmp	r3, #0
 8013502:	d016      	beq.n	8013532 <_dtoa_r+0x3d6>
 8013504:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013506:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013508:	220f      	movs	r2, #15
 801350a:	425d      	negs	r5, r3
 801350c:	402a      	ands	r2, r5
 801350e:	4bd7      	ldr	r3, [pc, #860]	@ (801386c <_dtoa_r+0x710>)
 8013510:	00d2      	lsls	r2, r2, #3
 8013512:	189b      	adds	r3, r3, r2
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	f7ef f830 	bl	800257c <__aeabi_dmul>
 801351c:	2701      	movs	r7, #1
 801351e:	2300      	movs	r3, #0
 8013520:	900a      	str	r0, [sp, #40]	@ 0x28
 8013522:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013524:	4ed2      	ldr	r6, [pc, #840]	@ (8013870 <_dtoa_r+0x714>)
 8013526:	112d      	asrs	r5, r5, #4
 8013528:	2d00      	cmp	r5, #0
 801352a:	d000      	beq.n	801352e <_dtoa_r+0x3d2>
 801352c:	e0ba      	b.n	80136a4 <_dtoa_r+0x548>
 801352e:	2b00      	cmp	r3, #0
 8013530:	d1a1      	bne.n	8013476 <_dtoa_r+0x31a>
 8013532:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013534:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013536:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013538:	2b00      	cmp	r3, #0
 801353a:	d100      	bne.n	801353e <_dtoa_r+0x3e2>
 801353c:	e0bd      	b.n	80136ba <_dtoa_r+0x55e>
 801353e:	2200      	movs	r2, #0
 8013540:	0030      	movs	r0, r6
 8013542:	0039      	movs	r1, r7
 8013544:	4bcb      	ldr	r3, [pc, #812]	@ (8013874 <_dtoa_r+0x718>)
 8013546:	f7ec ff87 	bl	8000458 <__aeabi_dcmplt>
 801354a:	2800      	cmp	r0, #0
 801354c:	d100      	bne.n	8013550 <_dtoa_r+0x3f4>
 801354e:	e0b4      	b.n	80136ba <_dtoa_r+0x55e>
 8013550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013552:	2b00      	cmp	r3, #0
 8013554:	d100      	bne.n	8013558 <_dtoa_r+0x3fc>
 8013556:	e0b0      	b.n	80136ba <_dtoa_r+0x55e>
 8013558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801355a:	2b00      	cmp	r3, #0
 801355c:	dd39      	ble.n	80135d2 <_dtoa_r+0x476>
 801355e:	9b04      	ldr	r3, [sp, #16]
 8013560:	2200      	movs	r2, #0
 8013562:	3b01      	subs	r3, #1
 8013564:	930c      	str	r3, [sp, #48]	@ 0x30
 8013566:	0030      	movs	r0, r6
 8013568:	4bc3      	ldr	r3, [pc, #780]	@ (8013878 <_dtoa_r+0x71c>)
 801356a:	0039      	movs	r1, r7
 801356c:	f7ef f806 	bl	800257c <__aeabi_dmul>
 8013570:	900a      	str	r0, [sp, #40]	@ 0x28
 8013572:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013576:	3401      	adds	r4, #1
 8013578:	0020      	movs	r0, r4
 801357a:	9311      	str	r3, [sp, #68]	@ 0x44
 801357c:	f7ef fec0 	bl	8003300 <__aeabi_i2d>
 8013580:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013584:	f7ee fffa 	bl	800257c <__aeabi_dmul>
 8013588:	4bbc      	ldr	r3, [pc, #752]	@ (801387c <_dtoa_r+0x720>)
 801358a:	2200      	movs	r2, #0
 801358c:	f7ee f84e 	bl	800162c <__aeabi_dadd>
 8013590:	4bbb      	ldr	r3, [pc, #748]	@ (8013880 <_dtoa_r+0x724>)
 8013592:	0006      	movs	r6, r0
 8013594:	18cf      	adds	r7, r1, r3
 8013596:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013598:	2b00      	cmp	r3, #0
 801359a:	d000      	beq.n	801359e <_dtoa_r+0x442>
 801359c:	e091      	b.n	80136c2 <_dtoa_r+0x566>
 801359e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80135a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80135a2:	2200      	movs	r2, #0
 80135a4:	4bb7      	ldr	r3, [pc, #732]	@ (8013884 <_dtoa_r+0x728>)
 80135a6:	f7ef fab1 	bl	8002b0c <__aeabi_dsub>
 80135aa:	0032      	movs	r2, r6
 80135ac:	003b      	movs	r3, r7
 80135ae:	0004      	movs	r4, r0
 80135b0:	000d      	movs	r5, r1
 80135b2:	f7ec ff65 	bl	8000480 <__aeabi_dcmpgt>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d000      	beq.n	80135bc <_dtoa_r+0x460>
 80135ba:	e29d      	b.n	8013af8 <_dtoa_r+0x99c>
 80135bc:	2180      	movs	r1, #128	@ 0x80
 80135be:	0609      	lsls	r1, r1, #24
 80135c0:	187b      	adds	r3, r7, r1
 80135c2:	0032      	movs	r2, r6
 80135c4:	0020      	movs	r0, r4
 80135c6:	0029      	movs	r1, r5
 80135c8:	f7ec ff46 	bl	8000458 <__aeabi_dcmplt>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d000      	beq.n	80135d2 <_dtoa_r+0x476>
 80135d0:	e130      	b.n	8013834 <_dtoa_r+0x6d8>
 80135d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80135d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80135d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80135d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80135da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80135dc:	2b00      	cmp	r3, #0
 80135de:	da00      	bge.n	80135e2 <_dtoa_r+0x486>
 80135e0:	e177      	b.n	80138d2 <_dtoa_r+0x776>
 80135e2:	9a04      	ldr	r2, [sp, #16]
 80135e4:	2a0e      	cmp	r2, #14
 80135e6:	dd00      	ble.n	80135ea <_dtoa_r+0x48e>
 80135e8:	e173      	b.n	80138d2 <_dtoa_r+0x776>
 80135ea:	4ba0      	ldr	r3, [pc, #640]	@ (801386c <_dtoa_r+0x710>)
 80135ec:	00d2      	lsls	r2, r2, #3
 80135ee:	189b      	adds	r3, r3, r2
 80135f0:	685c      	ldr	r4, [r3, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	9306      	str	r3, [sp, #24]
 80135f6:	9407      	str	r4, [sp, #28]
 80135f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	da03      	bge.n	8013606 <_dtoa_r+0x4aa>
 80135fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013600:	2b00      	cmp	r3, #0
 8013602:	dc00      	bgt.n	8013606 <_dtoa_r+0x4aa>
 8013604:	e106      	b.n	8013814 <_dtoa_r+0x6b8>
 8013606:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013608:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801360a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801360c:	9d08      	ldr	r5, [sp, #32]
 801360e:	3b01      	subs	r3, #1
 8013610:	195b      	adds	r3, r3, r5
 8013612:	930a      	str	r3, [sp, #40]	@ 0x28
 8013614:	9a06      	ldr	r2, [sp, #24]
 8013616:	9b07      	ldr	r3, [sp, #28]
 8013618:	0030      	movs	r0, r6
 801361a:	0039      	movs	r1, r7
 801361c:	f7ee fb6a 	bl	8001cf4 <__aeabi_ddiv>
 8013620:	f7ef fe32 	bl	8003288 <__aeabi_d2iz>
 8013624:	9009      	str	r0, [sp, #36]	@ 0x24
 8013626:	f7ef fe6b 	bl	8003300 <__aeabi_i2d>
 801362a:	9a06      	ldr	r2, [sp, #24]
 801362c:	9b07      	ldr	r3, [sp, #28]
 801362e:	f7ee ffa5 	bl	800257c <__aeabi_dmul>
 8013632:	0002      	movs	r2, r0
 8013634:	000b      	movs	r3, r1
 8013636:	0030      	movs	r0, r6
 8013638:	0039      	movs	r1, r7
 801363a:	f7ef fa67 	bl	8002b0c <__aeabi_dsub>
 801363e:	002b      	movs	r3, r5
 8013640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013642:	3501      	adds	r5, #1
 8013644:	3230      	adds	r2, #48	@ 0x30
 8013646:	701a      	strb	r2, [r3, #0]
 8013648:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801364a:	002c      	movs	r4, r5
 801364c:	429a      	cmp	r2, r3
 801364e:	d000      	beq.n	8013652 <_dtoa_r+0x4f6>
 8013650:	e131      	b.n	80138b6 <_dtoa_r+0x75a>
 8013652:	0002      	movs	r2, r0
 8013654:	000b      	movs	r3, r1
 8013656:	f7ed ffe9 	bl	800162c <__aeabi_dadd>
 801365a:	9a06      	ldr	r2, [sp, #24]
 801365c:	9b07      	ldr	r3, [sp, #28]
 801365e:	0006      	movs	r6, r0
 8013660:	000f      	movs	r7, r1
 8013662:	f7ec ff0d 	bl	8000480 <__aeabi_dcmpgt>
 8013666:	2800      	cmp	r0, #0
 8013668:	d000      	beq.n	801366c <_dtoa_r+0x510>
 801366a:	e10f      	b.n	801388c <_dtoa_r+0x730>
 801366c:	9a06      	ldr	r2, [sp, #24]
 801366e:	9b07      	ldr	r3, [sp, #28]
 8013670:	0030      	movs	r0, r6
 8013672:	0039      	movs	r1, r7
 8013674:	f7ec feea 	bl	800044c <__aeabi_dcmpeq>
 8013678:	2800      	cmp	r0, #0
 801367a:	d003      	beq.n	8013684 <_dtoa_r+0x528>
 801367c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801367e:	07dd      	lsls	r5, r3, #31
 8013680:	d500      	bpl.n	8013684 <_dtoa_r+0x528>
 8013682:	e103      	b.n	801388c <_dtoa_r+0x730>
 8013684:	9905      	ldr	r1, [sp, #20]
 8013686:	9803      	ldr	r0, [sp, #12]
 8013688:	f000 fca6 	bl	8013fd8 <_Bfree>
 801368c:	2300      	movs	r3, #0
 801368e:	7023      	strb	r3, [r4, #0]
 8013690:	9b04      	ldr	r3, [sp, #16]
 8013692:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013694:	3301      	adds	r3, #1
 8013696:	6013      	str	r3, [r2, #0]
 8013698:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801369a:	2b00      	cmp	r3, #0
 801369c:	d100      	bne.n	80136a0 <_dtoa_r+0x544>
 801369e:	e5a7      	b.n	80131f0 <_dtoa_r+0x94>
 80136a0:	601c      	str	r4, [r3, #0]
 80136a2:	e5a5      	b.n	80131f0 <_dtoa_r+0x94>
 80136a4:	423d      	tst	r5, r7
 80136a6:	d005      	beq.n	80136b4 <_dtoa_r+0x558>
 80136a8:	6832      	ldr	r2, [r6, #0]
 80136aa:	6873      	ldr	r3, [r6, #4]
 80136ac:	f7ee ff66 	bl	800257c <__aeabi_dmul>
 80136b0:	003b      	movs	r3, r7
 80136b2:	3401      	adds	r4, #1
 80136b4:	106d      	asrs	r5, r5, #1
 80136b6:	3608      	adds	r6, #8
 80136b8:	e736      	b.n	8013528 <_dtoa_r+0x3cc>
 80136ba:	9b04      	ldr	r3, [sp, #16]
 80136bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80136be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136c0:	e75a      	b.n	8013578 <_dtoa_r+0x41c>
 80136c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80136c4:	4b69      	ldr	r3, [pc, #420]	@ (801386c <_dtoa_r+0x710>)
 80136c6:	3a01      	subs	r2, #1
 80136c8:	00d2      	lsls	r2, r2, #3
 80136ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80136cc:	189b      	adds	r3, r3, r2
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	2900      	cmp	r1, #0
 80136d4:	d04c      	beq.n	8013770 <_dtoa_r+0x614>
 80136d6:	2000      	movs	r0, #0
 80136d8:	496b      	ldr	r1, [pc, #428]	@ (8013888 <_dtoa_r+0x72c>)
 80136da:	f7ee fb0b 	bl	8001cf4 <__aeabi_ddiv>
 80136de:	0032      	movs	r2, r6
 80136e0:	003b      	movs	r3, r7
 80136e2:	f7ef fa13 	bl	8002b0c <__aeabi_dsub>
 80136e6:	9a08      	ldr	r2, [sp, #32]
 80136e8:	0006      	movs	r6, r0
 80136ea:	4694      	mov	ip, r2
 80136ec:	000f      	movs	r7, r1
 80136ee:	9b08      	ldr	r3, [sp, #32]
 80136f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80136f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80136f4:	4463      	add	r3, ip
 80136f6:	9311      	str	r3, [sp, #68]	@ 0x44
 80136f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80136fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80136fc:	f7ef fdc4 	bl	8003288 <__aeabi_d2iz>
 8013700:	0005      	movs	r5, r0
 8013702:	f7ef fdfd 	bl	8003300 <__aeabi_i2d>
 8013706:	0002      	movs	r2, r0
 8013708:	000b      	movs	r3, r1
 801370a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801370c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801370e:	f7ef f9fd 	bl	8002b0c <__aeabi_dsub>
 8013712:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013714:	3530      	adds	r5, #48	@ 0x30
 8013716:	1c5c      	adds	r4, r3, #1
 8013718:	701d      	strb	r5, [r3, #0]
 801371a:	0032      	movs	r2, r6
 801371c:	003b      	movs	r3, r7
 801371e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013720:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013722:	f7ec fe99 	bl	8000458 <__aeabi_dcmplt>
 8013726:	2800      	cmp	r0, #0
 8013728:	d16a      	bne.n	8013800 <_dtoa_r+0x6a4>
 801372a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801372c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801372e:	2000      	movs	r0, #0
 8013730:	4950      	ldr	r1, [pc, #320]	@ (8013874 <_dtoa_r+0x718>)
 8013732:	f7ef f9eb 	bl	8002b0c <__aeabi_dsub>
 8013736:	0032      	movs	r2, r6
 8013738:	003b      	movs	r3, r7
 801373a:	f7ec fe8d 	bl	8000458 <__aeabi_dcmplt>
 801373e:	2800      	cmp	r0, #0
 8013740:	d000      	beq.n	8013744 <_dtoa_r+0x5e8>
 8013742:	e0a5      	b.n	8013890 <_dtoa_r+0x734>
 8013744:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013746:	42a3      	cmp	r3, r4
 8013748:	d100      	bne.n	801374c <_dtoa_r+0x5f0>
 801374a:	e742      	b.n	80135d2 <_dtoa_r+0x476>
 801374c:	2200      	movs	r2, #0
 801374e:	0030      	movs	r0, r6
 8013750:	0039      	movs	r1, r7
 8013752:	4b49      	ldr	r3, [pc, #292]	@ (8013878 <_dtoa_r+0x71c>)
 8013754:	f7ee ff12 	bl	800257c <__aeabi_dmul>
 8013758:	2200      	movs	r2, #0
 801375a:	0006      	movs	r6, r0
 801375c:	000f      	movs	r7, r1
 801375e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013762:	4b45      	ldr	r3, [pc, #276]	@ (8013878 <_dtoa_r+0x71c>)
 8013764:	f7ee ff0a 	bl	800257c <__aeabi_dmul>
 8013768:	9416      	str	r4, [sp, #88]	@ 0x58
 801376a:	900a      	str	r0, [sp, #40]	@ 0x28
 801376c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801376e:	e7c3      	b.n	80136f8 <_dtoa_r+0x59c>
 8013770:	0030      	movs	r0, r6
 8013772:	0039      	movs	r1, r7
 8013774:	f7ee ff02 	bl	800257c <__aeabi_dmul>
 8013778:	9d08      	ldr	r5, [sp, #32]
 801377a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801377c:	002b      	movs	r3, r5
 801377e:	4694      	mov	ip, r2
 8013780:	9016      	str	r0, [sp, #88]	@ 0x58
 8013782:	9117      	str	r1, [sp, #92]	@ 0x5c
 8013784:	4463      	add	r3, ip
 8013786:	9319      	str	r3, [sp, #100]	@ 0x64
 8013788:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801378a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801378c:	f7ef fd7c 	bl	8003288 <__aeabi_d2iz>
 8013790:	0004      	movs	r4, r0
 8013792:	f7ef fdb5 	bl	8003300 <__aeabi_i2d>
 8013796:	000b      	movs	r3, r1
 8013798:	0002      	movs	r2, r0
 801379a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801379c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801379e:	f7ef f9b5 	bl	8002b0c <__aeabi_dsub>
 80137a2:	3430      	adds	r4, #48	@ 0x30
 80137a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137a6:	702c      	strb	r4, [r5, #0]
 80137a8:	3501      	adds	r5, #1
 80137aa:	0006      	movs	r6, r0
 80137ac:	000f      	movs	r7, r1
 80137ae:	42ab      	cmp	r3, r5
 80137b0:	d129      	bne.n	8013806 <_dtoa_r+0x6aa>
 80137b2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80137b4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80137b6:	9b08      	ldr	r3, [sp, #32]
 80137b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80137ba:	469c      	mov	ip, r3
 80137bc:	2200      	movs	r2, #0
 80137be:	4b32      	ldr	r3, [pc, #200]	@ (8013888 <_dtoa_r+0x72c>)
 80137c0:	4464      	add	r4, ip
 80137c2:	f7ed ff33 	bl	800162c <__aeabi_dadd>
 80137c6:	0002      	movs	r2, r0
 80137c8:	000b      	movs	r3, r1
 80137ca:	0030      	movs	r0, r6
 80137cc:	0039      	movs	r1, r7
 80137ce:	f7ec fe57 	bl	8000480 <__aeabi_dcmpgt>
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d15c      	bne.n	8013890 <_dtoa_r+0x734>
 80137d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80137d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80137da:	2000      	movs	r0, #0
 80137dc:	492a      	ldr	r1, [pc, #168]	@ (8013888 <_dtoa_r+0x72c>)
 80137de:	f7ef f995 	bl	8002b0c <__aeabi_dsub>
 80137e2:	0002      	movs	r2, r0
 80137e4:	000b      	movs	r3, r1
 80137e6:	0030      	movs	r0, r6
 80137e8:	0039      	movs	r1, r7
 80137ea:	f7ec fe35 	bl	8000458 <__aeabi_dcmplt>
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d100      	bne.n	80137f4 <_dtoa_r+0x698>
 80137f2:	e6ee      	b.n	80135d2 <_dtoa_r+0x476>
 80137f4:	0023      	movs	r3, r4
 80137f6:	3c01      	subs	r4, #1
 80137f8:	7822      	ldrb	r2, [r4, #0]
 80137fa:	2a30      	cmp	r2, #48	@ 0x30
 80137fc:	d0fa      	beq.n	80137f4 <_dtoa_r+0x698>
 80137fe:	001c      	movs	r4, r3
 8013800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013802:	9304      	str	r3, [sp, #16]
 8013804:	e73e      	b.n	8013684 <_dtoa_r+0x528>
 8013806:	2200      	movs	r2, #0
 8013808:	4b1b      	ldr	r3, [pc, #108]	@ (8013878 <_dtoa_r+0x71c>)
 801380a:	f7ee feb7 	bl	800257c <__aeabi_dmul>
 801380e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013810:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013812:	e7b9      	b.n	8013788 <_dtoa_r+0x62c>
 8013814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013816:	2b00      	cmp	r3, #0
 8013818:	d10c      	bne.n	8013834 <_dtoa_r+0x6d8>
 801381a:	9806      	ldr	r0, [sp, #24]
 801381c:	9907      	ldr	r1, [sp, #28]
 801381e:	2200      	movs	r2, #0
 8013820:	4b18      	ldr	r3, [pc, #96]	@ (8013884 <_dtoa_r+0x728>)
 8013822:	f7ee feab 	bl	800257c <__aeabi_dmul>
 8013826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013828:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801382a:	f7ec fe33 	bl	8000494 <__aeabi_dcmpge>
 801382e:	2800      	cmp	r0, #0
 8013830:	d100      	bne.n	8013834 <_dtoa_r+0x6d8>
 8013832:	e164      	b.n	8013afe <_dtoa_r+0x9a2>
 8013834:	2600      	movs	r6, #0
 8013836:	0037      	movs	r7, r6
 8013838:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801383a:	9c08      	ldr	r4, [sp, #32]
 801383c:	43db      	mvns	r3, r3
 801383e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013840:	2300      	movs	r3, #0
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	0031      	movs	r1, r6
 8013846:	9803      	ldr	r0, [sp, #12]
 8013848:	f000 fbc6 	bl	8013fd8 <_Bfree>
 801384c:	2f00      	cmp	r7, #0
 801384e:	d0d7      	beq.n	8013800 <_dtoa_r+0x6a4>
 8013850:	9b04      	ldr	r3, [sp, #16]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d005      	beq.n	8013862 <_dtoa_r+0x706>
 8013856:	42bb      	cmp	r3, r7
 8013858:	d003      	beq.n	8013862 <_dtoa_r+0x706>
 801385a:	0019      	movs	r1, r3
 801385c:	9803      	ldr	r0, [sp, #12]
 801385e:	f000 fbbb 	bl	8013fd8 <_Bfree>
 8013862:	0039      	movs	r1, r7
 8013864:	9803      	ldr	r0, [sp, #12]
 8013866:	f000 fbb7 	bl	8013fd8 <_Bfree>
 801386a:	e7c9      	b.n	8013800 <_dtoa_r+0x6a4>
 801386c:	08017418 	.word	0x08017418
 8013870:	080173f0 	.word	0x080173f0
 8013874:	3ff00000 	.word	0x3ff00000
 8013878:	40240000 	.word	0x40240000
 801387c:	401c0000 	.word	0x401c0000
 8013880:	fcc00000 	.word	0xfcc00000
 8013884:	40140000 	.word	0x40140000
 8013888:	3fe00000 	.word	0x3fe00000
 801388c:	9b04      	ldr	r3, [sp, #16]
 801388e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013890:	0023      	movs	r3, r4
 8013892:	001c      	movs	r4, r3
 8013894:	3b01      	subs	r3, #1
 8013896:	781a      	ldrb	r2, [r3, #0]
 8013898:	2a39      	cmp	r2, #57	@ 0x39
 801389a:	d108      	bne.n	80138ae <_dtoa_r+0x752>
 801389c:	9a08      	ldr	r2, [sp, #32]
 801389e:	429a      	cmp	r2, r3
 80138a0:	d1f7      	bne.n	8013892 <_dtoa_r+0x736>
 80138a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80138a4:	9908      	ldr	r1, [sp, #32]
 80138a6:	3201      	adds	r2, #1
 80138a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80138aa:	2230      	movs	r2, #48	@ 0x30
 80138ac:	700a      	strb	r2, [r1, #0]
 80138ae:	781a      	ldrb	r2, [r3, #0]
 80138b0:	3201      	adds	r2, #1
 80138b2:	701a      	strb	r2, [r3, #0]
 80138b4:	e7a4      	b.n	8013800 <_dtoa_r+0x6a4>
 80138b6:	2200      	movs	r2, #0
 80138b8:	4bc6      	ldr	r3, [pc, #792]	@ (8013bd4 <_dtoa_r+0xa78>)
 80138ba:	f7ee fe5f 	bl	800257c <__aeabi_dmul>
 80138be:	2200      	movs	r2, #0
 80138c0:	2300      	movs	r3, #0
 80138c2:	0006      	movs	r6, r0
 80138c4:	000f      	movs	r7, r1
 80138c6:	f7ec fdc1 	bl	800044c <__aeabi_dcmpeq>
 80138ca:	2800      	cmp	r0, #0
 80138cc:	d100      	bne.n	80138d0 <_dtoa_r+0x774>
 80138ce:	e6a1      	b.n	8013614 <_dtoa_r+0x4b8>
 80138d0:	e6d8      	b.n	8013684 <_dtoa_r+0x528>
 80138d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80138d4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80138d6:	9c06      	ldr	r4, [sp, #24]
 80138d8:	2f00      	cmp	r7, #0
 80138da:	d014      	beq.n	8013906 <_dtoa_r+0x7aa>
 80138dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80138de:	2a01      	cmp	r2, #1
 80138e0:	dd00      	ble.n	80138e4 <_dtoa_r+0x788>
 80138e2:	e0c8      	b.n	8013a76 <_dtoa_r+0x91a>
 80138e4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80138e6:	2a00      	cmp	r2, #0
 80138e8:	d100      	bne.n	80138ec <_dtoa_r+0x790>
 80138ea:	e0be      	b.n	8013a6a <_dtoa_r+0x90e>
 80138ec:	4aba      	ldr	r2, [pc, #744]	@ (8013bd8 <_dtoa_r+0xa7c>)
 80138ee:	189b      	adds	r3, r3, r2
 80138f0:	9a06      	ldr	r2, [sp, #24]
 80138f2:	2101      	movs	r1, #1
 80138f4:	18d2      	adds	r2, r2, r3
 80138f6:	9206      	str	r2, [sp, #24]
 80138f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80138fa:	9803      	ldr	r0, [sp, #12]
 80138fc:	18d3      	adds	r3, r2, r3
 80138fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8013900:	f000 fc6e 	bl	80141e0 <__i2b>
 8013904:	0007      	movs	r7, r0
 8013906:	2c00      	cmp	r4, #0
 8013908:	d00e      	beq.n	8013928 <_dtoa_r+0x7cc>
 801390a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801390c:	2b00      	cmp	r3, #0
 801390e:	dd0b      	ble.n	8013928 <_dtoa_r+0x7cc>
 8013910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013912:	0023      	movs	r3, r4
 8013914:	4294      	cmp	r4, r2
 8013916:	dd00      	ble.n	801391a <_dtoa_r+0x7be>
 8013918:	0013      	movs	r3, r2
 801391a:	9a06      	ldr	r2, [sp, #24]
 801391c:	1ae4      	subs	r4, r4, r3
 801391e:	1ad2      	subs	r2, r2, r3
 8013920:	9206      	str	r2, [sp, #24]
 8013922:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	930d      	str	r3, [sp, #52]	@ 0x34
 8013928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801392a:	2b00      	cmp	r3, #0
 801392c:	d01f      	beq.n	801396e <_dtoa_r+0x812>
 801392e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013930:	2b00      	cmp	r3, #0
 8013932:	d100      	bne.n	8013936 <_dtoa_r+0x7da>
 8013934:	e0b5      	b.n	8013aa2 <_dtoa_r+0x946>
 8013936:	2d00      	cmp	r5, #0
 8013938:	d010      	beq.n	801395c <_dtoa_r+0x800>
 801393a:	0039      	movs	r1, r7
 801393c:	002a      	movs	r2, r5
 801393e:	9803      	ldr	r0, [sp, #12]
 8013940:	f000 fd18 	bl	8014374 <__pow5mult>
 8013944:	9a05      	ldr	r2, [sp, #20]
 8013946:	0001      	movs	r1, r0
 8013948:	0007      	movs	r7, r0
 801394a:	9803      	ldr	r0, [sp, #12]
 801394c:	f000 fc60 	bl	8014210 <__multiply>
 8013950:	0006      	movs	r6, r0
 8013952:	9905      	ldr	r1, [sp, #20]
 8013954:	9803      	ldr	r0, [sp, #12]
 8013956:	f000 fb3f 	bl	8013fd8 <_Bfree>
 801395a:	9605      	str	r6, [sp, #20]
 801395c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801395e:	1b5a      	subs	r2, r3, r5
 8013960:	42ab      	cmp	r3, r5
 8013962:	d004      	beq.n	801396e <_dtoa_r+0x812>
 8013964:	9905      	ldr	r1, [sp, #20]
 8013966:	9803      	ldr	r0, [sp, #12]
 8013968:	f000 fd04 	bl	8014374 <__pow5mult>
 801396c:	9005      	str	r0, [sp, #20]
 801396e:	2101      	movs	r1, #1
 8013970:	9803      	ldr	r0, [sp, #12]
 8013972:	f000 fc35 	bl	80141e0 <__i2b>
 8013976:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013978:	0006      	movs	r6, r0
 801397a:	2b00      	cmp	r3, #0
 801397c:	d100      	bne.n	8013980 <_dtoa_r+0x824>
 801397e:	e1bc      	b.n	8013cfa <_dtoa_r+0xb9e>
 8013980:	001a      	movs	r2, r3
 8013982:	0001      	movs	r1, r0
 8013984:	9803      	ldr	r0, [sp, #12]
 8013986:	f000 fcf5 	bl	8014374 <__pow5mult>
 801398a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801398c:	0006      	movs	r6, r0
 801398e:	2500      	movs	r5, #0
 8013990:	2b01      	cmp	r3, #1
 8013992:	dc16      	bgt.n	80139c2 <_dtoa_r+0x866>
 8013994:	2500      	movs	r5, #0
 8013996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013998:	42ab      	cmp	r3, r5
 801399a:	d10e      	bne.n	80139ba <_dtoa_r+0x85e>
 801399c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801399e:	031b      	lsls	r3, r3, #12
 80139a0:	42ab      	cmp	r3, r5
 80139a2:	d10a      	bne.n	80139ba <_dtoa_r+0x85e>
 80139a4:	4b8d      	ldr	r3, [pc, #564]	@ (8013bdc <_dtoa_r+0xa80>)
 80139a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80139a8:	4213      	tst	r3, r2
 80139aa:	d006      	beq.n	80139ba <_dtoa_r+0x85e>
 80139ac:	9b06      	ldr	r3, [sp, #24]
 80139ae:	3501      	adds	r5, #1
 80139b0:	3301      	adds	r3, #1
 80139b2:	9306      	str	r3, [sp, #24]
 80139b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139b6:	3301      	adds	r3, #1
 80139b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80139ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80139bc:	2001      	movs	r0, #1
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d008      	beq.n	80139d4 <_dtoa_r+0x878>
 80139c2:	6933      	ldr	r3, [r6, #16]
 80139c4:	3303      	adds	r3, #3
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	18f3      	adds	r3, r6, r3
 80139ca:	6858      	ldr	r0, [r3, #4]
 80139cc:	f000 fbb8 	bl	8014140 <__hi0bits>
 80139d0:	2320      	movs	r3, #32
 80139d2:	1a18      	subs	r0, r3, r0
 80139d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139d6:	1818      	adds	r0, r3, r0
 80139d8:	0002      	movs	r2, r0
 80139da:	231f      	movs	r3, #31
 80139dc:	401a      	ands	r2, r3
 80139de:	4218      	tst	r0, r3
 80139e0:	d065      	beq.n	8013aae <_dtoa_r+0x952>
 80139e2:	3301      	adds	r3, #1
 80139e4:	1a9b      	subs	r3, r3, r2
 80139e6:	2b04      	cmp	r3, #4
 80139e8:	dd5d      	ble.n	8013aa6 <_dtoa_r+0x94a>
 80139ea:	231c      	movs	r3, #28
 80139ec:	1a9b      	subs	r3, r3, r2
 80139ee:	9a06      	ldr	r2, [sp, #24]
 80139f0:	18e4      	adds	r4, r4, r3
 80139f2:	18d2      	adds	r2, r2, r3
 80139f4:	9206      	str	r2, [sp, #24]
 80139f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139f8:	18d3      	adds	r3, r2, r3
 80139fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80139fc:	9b06      	ldr	r3, [sp, #24]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	dd05      	ble.n	8013a0e <_dtoa_r+0x8b2>
 8013a02:	001a      	movs	r2, r3
 8013a04:	9905      	ldr	r1, [sp, #20]
 8013a06:	9803      	ldr	r0, [sp, #12]
 8013a08:	f000 fd10 	bl	801442c <__lshift>
 8013a0c:	9005      	str	r0, [sp, #20]
 8013a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	dd05      	ble.n	8013a20 <_dtoa_r+0x8c4>
 8013a14:	0031      	movs	r1, r6
 8013a16:	001a      	movs	r2, r3
 8013a18:	9803      	ldr	r0, [sp, #12]
 8013a1a:	f000 fd07 	bl	801442c <__lshift>
 8013a1e:	0006      	movs	r6, r0
 8013a20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d045      	beq.n	8013ab2 <_dtoa_r+0x956>
 8013a26:	0031      	movs	r1, r6
 8013a28:	9805      	ldr	r0, [sp, #20]
 8013a2a:	f000 fd6b 	bl	8014504 <__mcmp>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	da3f      	bge.n	8013ab2 <_dtoa_r+0x956>
 8013a32:	9b04      	ldr	r3, [sp, #16]
 8013a34:	220a      	movs	r2, #10
 8013a36:	3b01      	subs	r3, #1
 8013a38:	930c      	str	r3, [sp, #48]	@ 0x30
 8013a3a:	9905      	ldr	r1, [sp, #20]
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	9803      	ldr	r0, [sp, #12]
 8013a40:	f000 faee 	bl	8014020 <__multadd>
 8013a44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a46:	9005      	str	r0, [sp, #20]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d100      	bne.n	8013a4e <_dtoa_r+0x8f2>
 8013a4c:	e15c      	b.n	8013d08 <_dtoa_r+0xbac>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	0039      	movs	r1, r7
 8013a52:	220a      	movs	r2, #10
 8013a54:	9803      	ldr	r0, [sp, #12]
 8013a56:	f000 fae3 	bl	8014020 <__multadd>
 8013a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a5c:	0007      	movs	r7, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	dc55      	bgt.n	8013b0e <_dtoa_r+0x9b2>
 8013a62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013a64:	2b02      	cmp	r3, #2
 8013a66:	dc2d      	bgt.n	8013ac4 <_dtoa_r+0x968>
 8013a68:	e051      	b.n	8013b0e <_dtoa_r+0x9b2>
 8013a6a:	2336      	movs	r3, #54	@ 0x36
 8013a6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013a6e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013a70:	9c06      	ldr	r4, [sp, #24]
 8013a72:	1a9b      	subs	r3, r3, r2
 8013a74:	e73c      	b.n	80138f0 <_dtoa_r+0x794>
 8013a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a78:	1e5d      	subs	r5, r3, #1
 8013a7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a7c:	42ab      	cmp	r3, r5
 8013a7e:	db08      	blt.n	8013a92 <_dtoa_r+0x936>
 8013a80:	1b5d      	subs	r5, r3, r5
 8013a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a84:	9c06      	ldr	r4, [sp, #24]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	db00      	blt.n	8013a8c <_dtoa_r+0x930>
 8013a8a:	e731      	b.n	80138f0 <_dtoa_r+0x794>
 8013a8c:	1ae4      	subs	r4, r4, r3
 8013a8e:	2300      	movs	r3, #0
 8013a90:	e72e      	b.n	80138f0 <_dtoa_r+0x794>
 8013a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013a96:	1aeb      	subs	r3, r5, r3
 8013a98:	18d3      	adds	r3, r2, r3
 8013a9a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8013a9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8013a9e:	2500      	movs	r5, #0
 8013aa0:	e7ef      	b.n	8013a82 <_dtoa_r+0x926>
 8013aa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013aa4:	e75e      	b.n	8013964 <_dtoa_r+0x808>
 8013aa6:	2b04      	cmp	r3, #4
 8013aa8:	d0a8      	beq.n	80139fc <_dtoa_r+0x8a0>
 8013aaa:	331c      	adds	r3, #28
 8013aac:	e79f      	b.n	80139ee <_dtoa_r+0x892>
 8013aae:	0013      	movs	r3, r2
 8013ab0:	e7fb      	b.n	8013aaa <_dtoa_r+0x94e>
 8013ab2:	9b04      	ldr	r3, [sp, #16]
 8013ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ab8:	930e      	str	r3, [sp, #56]	@ 0x38
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	dc23      	bgt.n	8013b06 <_dtoa_r+0x9aa>
 8013abe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	dd20      	ble.n	8013b06 <_dtoa_r+0x9aa>
 8013ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d000      	beq.n	8013acc <_dtoa_r+0x970>
 8013aca:	e6b5      	b.n	8013838 <_dtoa_r+0x6dc>
 8013acc:	0031      	movs	r1, r6
 8013ace:	2205      	movs	r2, #5
 8013ad0:	9803      	ldr	r0, [sp, #12]
 8013ad2:	f000 faa5 	bl	8014020 <__multadd>
 8013ad6:	0006      	movs	r6, r0
 8013ad8:	0001      	movs	r1, r0
 8013ada:	9805      	ldr	r0, [sp, #20]
 8013adc:	f000 fd12 	bl	8014504 <__mcmp>
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	dc00      	bgt.n	8013ae6 <_dtoa_r+0x98a>
 8013ae4:	e6a8      	b.n	8013838 <_dtoa_r+0x6dc>
 8013ae6:	9b08      	ldr	r3, [sp, #32]
 8013ae8:	9a08      	ldr	r2, [sp, #32]
 8013aea:	1c5c      	adds	r4, r3, #1
 8013aec:	2331      	movs	r3, #49	@ 0x31
 8013aee:	7013      	strb	r3, [r2, #0]
 8013af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013af2:	3301      	adds	r3, #1
 8013af4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013af6:	e6a3      	b.n	8013840 <_dtoa_r+0x6e4>
 8013af8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013afa:	0037      	movs	r7, r6
 8013afc:	e7f3      	b.n	8013ae6 <_dtoa_r+0x98a>
 8013afe:	9b04      	ldr	r3, [sp, #16]
 8013b00:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013b02:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b04:	e7f9      	b.n	8013afa <_dtoa_r+0x99e>
 8013b06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d100      	bne.n	8013b0e <_dtoa_r+0x9b2>
 8013b0c:	e100      	b.n	8013d10 <_dtoa_r+0xbb4>
 8013b0e:	2c00      	cmp	r4, #0
 8013b10:	dd05      	ble.n	8013b1e <_dtoa_r+0x9c2>
 8013b12:	0039      	movs	r1, r7
 8013b14:	0022      	movs	r2, r4
 8013b16:	9803      	ldr	r0, [sp, #12]
 8013b18:	f000 fc88 	bl	801442c <__lshift>
 8013b1c:	0007      	movs	r7, r0
 8013b1e:	0038      	movs	r0, r7
 8013b20:	2d00      	cmp	r5, #0
 8013b22:	d018      	beq.n	8013b56 <_dtoa_r+0x9fa>
 8013b24:	6879      	ldr	r1, [r7, #4]
 8013b26:	9803      	ldr	r0, [sp, #12]
 8013b28:	f000 fa12 	bl	8013f50 <_Balloc>
 8013b2c:	1e04      	subs	r4, r0, #0
 8013b2e:	d105      	bne.n	8013b3c <_dtoa_r+0x9e0>
 8013b30:	0022      	movs	r2, r4
 8013b32:	4b2b      	ldr	r3, [pc, #172]	@ (8013be0 <_dtoa_r+0xa84>)
 8013b34:	482b      	ldr	r0, [pc, #172]	@ (8013be4 <_dtoa_r+0xa88>)
 8013b36:	492c      	ldr	r1, [pc, #176]	@ (8013be8 <_dtoa_r+0xa8c>)
 8013b38:	f7ff fb25 	bl	8013186 <_dtoa_r+0x2a>
 8013b3c:	0039      	movs	r1, r7
 8013b3e:	693a      	ldr	r2, [r7, #16]
 8013b40:	310c      	adds	r1, #12
 8013b42:	3202      	adds	r2, #2
 8013b44:	0092      	lsls	r2, r2, #2
 8013b46:	300c      	adds	r0, #12
 8013b48:	f7ff fa70 	bl	801302c <memcpy>
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	0021      	movs	r1, r4
 8013b50:	9803      	ldr	r0, [sp, #12]
 8013b52:	f000 fc6b 	bl	801442c <__lshift>
 8013b56:	9b08      	ldr	r3, [sp, #32]
 8013b58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b5a:	9306      	str	r3, [sp, #24]
 8013b5c:	3b01      	subs	r3, #1
 8013b5e:	189b      	adds	r3, r3, r2
 8013b60:	2201      	movs	r2, #1
 8013b62:	9704      	str	r7, [sp, #16]
 8013b64:	0007      	movs	r7, r0
 8013b66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b6a:	4013      	ands	r3, r2
 8013b6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8013b6e:	0031      	movs	r1, r6
 8013b70:	9805      	ldr	r0, [sp, #20]
 8013b72:	f7ff fa64 	bl	801303e <quorem>
 8013b76:	9904      	ldr	r1, [sp, #16]
 8013b78:	0005      	movs	r5, r0
 8013b7a:	900a      	str	r0, [sp, #40]	@ 0x28
 8013b7c:	9805      	ldr	r0, [sp, #20]
 8013b7e:	f000 fcc1 	bl	8014504 <__mcmp>
 8013b82:	003a      	movs	r2, r7
 8013b84:	900d      	str	r0, [sp, #52]	@ 0x34
 8013b86:	0031      	movs	r1, r6
 8013b88:	9803      	ldr	r0, [sp, #12]
 8013b8a:	f000 fcd7 	bl	801453c <__mdiff>
 8013b8e:	2201      	movs	r2, #1
 8013b90:	68c3      	ldr	r3, [r0, #12]
 8013b92:	0004      	movs	r4, r0
 8013b94:	3530      	adds	r5, #48	@ 0x30
 8013b96:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d104      	bne.n	8013ba6 <_dtoa_r+0xa4a>
 8013b9c:	0001      	movs	r1, r0
 8013b9e:	9805      	ldr	r0, [sp, #20]
 8013ba0:	f000 fcb0 	bl	8014504 <__mcmp>
 8013ba4:	9009      	str	r0, [sp, #36]	@ 0x24
 8013ba6:	0021      	movs	r1, r4
 8013ba8:	9803      	ldr	r0, [sp, #12]
 8013baa:	f000 fa15 	bl	8013fd8 <_Bfree>
 8013bae:	9b06      	ldr	r3, [sp, #24]
 8013bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013bb2:	1c5c      	adds	r4, r3, #1
 8013bb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	d116      	bne.n	8013bec <_dtoa_r+0xa90>
 8013bbe:	2d39      	cmp	r5, #57	@ 0x39
 8013bc0:	d02f      	beq.n	8013c22 <_dtoa_r+0xac6>
 8013bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	dd01      	ble.n	8013bcc <_dtoa_r+0xa70>
 8013bc8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013bca:	3531      	adds	r5, #49	@ 0x31
 8013bcc:	9b06      	ldr	r3, [sp, #24]
 8013bce:	701d      	strb	r5, [r3, #0]
 8013bd0:	e638      	b.n	8013844 <_dtoa_r+0x6e8>
 8013bd2:	46c0      	nop			@ (mov r8, r8)
 8013bd4:	40240000 	.word	0x40240000
 8013bd8:	00000433 	.word	0x00000433
 8013bdc:	7ff00000 	.word	0x7ff00000
 8013be0:	08017375 	.word	0x08017375
 8013be4:	0801731d 	.word	0x0801731d
 8013be8:	000002ef 	.word	0x000002ef
 8013bec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	db04      	blt.n	8013bfc <_dtoa_r+0xaa0>
 8013bf2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013bf4:	4313      	orrs	r3, r2
 8013bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	d11e      	bne.n	8013c3a <_dtoa_r+0xade>
 8013bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	dde4      	ble.n	8013bcc <_dtoa_r+0xa70>
 8013c02:	9905      	ldr	r1, [sp, #20]
 8013c04:	2201      	movs	r2, #1
 8013c06:	9803      	ldr	r0, [sp, #12]
 8013c08:	f000 fc10 	bl	801442c <__lshift>
 8013c0c:	0031      	movs	r1, r6
 8013c0e:	9005      	str	r0, [sp, #20]
 8013c10:	f000 fc78 	bl	8014504 <__mcmp>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	dc02      	bgt.n	8013c1e <_dtoa_r+0xac2>
 8013c18:	d1d8      	bne.n	8013bcc <_dtoa_r+0xa70>
 8013c1a:	07eb      	lsls	r3, r5, #31
 8013c1c:	d5d6      	bpl.n	8013bcc <_dtoa_r+0xa70>
 8013c1e:	2d39      	cmp	r5, #57	@ 0x39
 8013c20:	d1d2      	bne.n	8013bc8 <_dtoa_r+0xa6c>
 8013c22:	2339      	movs	r3, #57	@ 0x39
 8013c24:	9a06      	ldr	r2, [sp, #24]
 8013c26:	7013      	strb	r3, [r2, #0]
 8013c28:	0023      	movs	r3, r4
 8013c2a:	001c      	movs	r4, r3
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	781a      	ldrb	r2, [r3, #0]
 8013c30:	2a39      	cmp	r2, #57	@ 0x39
 8013c32:	d04f      	beq.n	8013cd4 <_dtoa_r+0xb78>
 8013c34:	3201      	adds	r2, #1
 8013c36:	701a      	strb	r2, [r3, #0]
 8013c38:	e604      	b.n	8013844 <_dtoa_r+0x6e8>
 8013c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	dd03      	ble.n	8013c48 <_dtoa_r+0xaec>
 8013c40:	2d39      	cmp	r5, #57	@ 0x39
 8013c42:	d0ee      	beq.n	8013c22 <_dtoa_r+0xac6>
 8013c44:	3501      	adds	r5, #1
 8013c46:	e7c1      	b.n	8013bcc <_dtoa_r+0xa70>
 8013c48:	9b06      	ldr	r3, [sp, #24]
 8013c4a:	9a06      	ldr	r2, [sp, #24]
 8013c4c:	701d      	strb	r5, [r3, #0]
 8013c4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c50:	4293      	cmp	r3, r2
 8013c52:	d02a      	beq.n	8013caa <_dtoa_r+0xb4e>
 8013c54:	2300      	movs	r3, #0
 8013c56:	220a      	movs	r2, #10
 8013c58:	9905      	ldr	r1, [sp, #20]
 8013c5a:	9803      	ldr	r0, [sp, #12]
 8013c5c:	f000 f9e0 	bl	8014020 <__multadd>
 8013c60:	9b04      	ldr	r3, [sp, #16]
 8013c62:	9005      	str	r0, [sp, #20]
 8013c64:	42bb      	cmp	r3, r7
 8013c66:	d109      	bne.n	8013c7c <_dtoa_r+0xb20>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	220a      	movs	r2, #10
 8013c6c:	9904      	ldr	r1, [sp, #16]
 8013c6e:	9803      	ldr	r0, [sp, #12]
 8013c70:	f000 f9d6 	bl	8014020 <__multadd>
 8013c74:	9004      	str	r0, [sp, #16]
 8013c76:	0007      	movs	r7, r0
 8013c78:	9406      	str	r4, [sp, #24]
 8013c7a:	e778      	b.n	8013b6e <_dtoa_r+0xa12>
 8013c7c:	9904      	ldr	r1, [sp, #16]
 8013c7e:	2300      	movs	r3, #0
 8013c80:	220a      	movs	r2, #10
 8013c82:	9803      	ldr	r0, [sp, #12]
 8013c84:	f000 f9cc 	bl	8014020 <__multadd>
 8013c88:	2300      	movs	r3, #0
 8013c8a:	9004      	str	r0, [sp, #16]
 8013c8c:	220a      	movs	r2, #10
 8013c8e:	0039      	movs	r1, r7
 8013c90:	9803      	ldr	r0, [sp, #12]
 8013c92:	f000 f9c5 	bl	8014020 <__multadd>
 8013c96:	e7ee      	b.n	8013c76 <_dtoa_r+0xb1a>
 8013c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c9a:	2401      	movs	r4, #1
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	dd00      	ble.n	8013ca2 <_dtoa_r+0xb46>
 8013ca0:	001c      	movs	r4, r3
 8013ca2:	9b08      	ldr	r3, [sp, #32]
 8013ca4:	191c      	adds	r4, r3, r4
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	9304      	str	r3, [sp, #16]
 8013caa:	9905      	ldr	r1, [sp, #20]
 8013cac:	2201      	movs	r2, #1
 8013cae:	9803      	ldr	r0, [sp, #12]
 8013cb0:	f000 fbbc 	bl	801442c <__lshift>
 8013cb4:	0031      	movs	r1, r6
 8013cb6:	9005      	str	r0, [sp, #20]
 8013cb8:	f000 fc24 	bl	8014504 <__mcmp>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	dcb3      	bgt.n	8013c28 <_dtoa_r+0xacc>
 8013cc0:	d101      	bne.n	8013cc6 <_dtoa_r+0xb6a>
 8013cc2:	07ed      	lsls	r5, r5, #31
 8013cc4:	d4b0      	bmi.n	8013c28 <_dtoa_r+0xacc>
 8013cc6:	0023      	movs	r3, r4
 8013cc8:	001c      	movs	r4, r3
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	781a      	ldrb	r2, [r3, #0]
 8013cce:	2a30      	cmp	r2, #48	@ 0x30
 8013cd0:	d0fa      	beq.n	8013cc8 <_dtoa_r+0xb6c>
 8013cd2:	e5b7      	b.n	8013844 <_dtoa_r+0x6e8>
 8013cd4:	9a08      	ldr	r2, [sp, #32]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d1a7      	bne.n	8013c2a <_dtoa_r+0xace>
 8013cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013cdc:	3301      	adds	r3, #1
 8013cde:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ce0:	2331      	movs	r3, #49	@ 0x31
 8013ce2:	7013      	strb	r3, [r2, #0]
 8013ce4:	e5ae      	b.n	8013844 <_dtoa_r+0x6e8>
 8013ce6:	4b15      	ldr	r3, [pc, #84]	@ (8013d3c <_dtoa_r+0xbe0>)
 8013ce8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013cea:	9308      	str	r3, [sp, #32]
 8013cec:	4b14      	ldr	r3, [pc, #80]	@ (8013d40 <_dtoa_r+0xbe4>)
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	d001      	beq.n	8013cf6 <_dtoa_r+0xb9a>
 8013cf2:	f7ff fa7b 	bl	80131ec <_dtoa_r+0x90>
 8013cf6:	f7ff fa7b 	bl	80131f0 <_dtoa_r+0x94>
 8013cfa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	dc00      	bgt.n	8013d02 <_dtoa_r+0xba6>
 8013d00:	e648      	b.n	8013994 <_dtoa_r+0x838>
 8013d02:	2001      	movs	r0, #1
 8013d04:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8013d06:	e665      	b.n	80139d4 <_dtoa_r+0x878>
 8013d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	dc00      	bgt.n	8013d10 <_dtoa_r+0xbb4>
 8013d0e:	e6d6      	b.n	8013abe <_dtoa_r+0x962>
 8013d10:	2400      	movs	r4, #0
 8013d12:	0031      	movs	r1, r6
 8013d14:	9805      	ldr	r0, [sp, #20]
 8013d16:	f7ff f992 	bl	801303e <quorem>
 8013d1a:	9b08      	ldr	r3, [sp, #32]
 8013d1c:	3030      	adds	r0, #48	@ 0x30
 8013d1e:	5518      	strb	r0, [r3, r4]
 8013d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d22:	3401      	adds	r4, #1
 8013d24:	0005      	movs	r5, r0
 8013d26:	429c      	cmp	r4, r3
 8013d28:	dab6      	bge.n	8013c98 <_dtoa_r+0xb3c>
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	220a      	movs	r2, #10
 8013d2e:	9905      	ldr	r1, [sp, #20]
 8013d30:	9803      	ldr	r0, [sp, #12]
 8013d32:	f000 f975 	bl	8014020 <__multadd>
 8013d36:	9005      	str	r0, [sp, #20]
 8013d38:	e7eb      	b.n	8013d12 <_dtoa_r+0xbb6>
 8013d3a:	46c0      	nop			@ (mov r8, r8)
 8013d3c:	080172f9 	.word	0x080172f9
 8013d40:	08017301 	.word	0x08017301

08013d44 <_free_r>:
 8013d44:	b570      	push	{r4, r5, r6, lr}
 8013d46:	0005      	movs	r5, r0
 8013d48:	1e0c      	subs	r4, r1, #0
 8013d4a:	d010      	beq.n	8013d6e <_free_r+0x2a>
 8013d4c:	3c04      	subs	r4, #4
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	da00      	bge.n	8013d56 <_free_r+0x12>
 8013d54:	18e4      	adds	r4, r4, r3
 8013d56:	0028      	movs	r0, r5
 8013d58:	f000 f8ea 	bl	8013f30 <__malloc_lock>
 8013d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8013dd4 <_free_r+0x90>)
 8013d5e:	6813      	ldr	r3, [r2, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d105      	bne.n	8013d70 <_free_r+0x2c>
 8013d64:	6063      	str	r3, [r4, #4]
 8013d66:	6014      	str	r4, [r2, #0]
 8013d68:	0028      	movs	r0, r5
 8013d6a:	f000 f8e9 	bl	8013f40 <__malloc_unlock>
 8013d6e:	bd70      	pop	{r4, r5, r6, pc}
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	d908      	bls.n	8013d86 <_free_r+0x42>
 8013d74:	6820      	ldr	r0, [r4, #0]
 8013d76:	1821      	adds	r1, r4, r0
 8013d78:	428b      	cmp	r3, r1
 8013d7a:	d1f3      	bne.n	8013d64 <_free_r+0x20>
 8013d7c:	6819      	ldr	r1, [r3, #0]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	1809      	adds	r1, r1, r0
 8013d82:	6021      	str	r1, [r4, #0]
 8013d84:	e7ee      	b.n	8013d64 <_free_r+0x20>
 8013d86:	001a      	movs	r2, r3
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d001      	beq.n	8013d92 <_free_r+0x4e>
 8013d8e:	42a3      	cmp	r3, r4
 8013d90:	d9f9      	bls.n	8013d86 <_free_r+0x42>
 8013d92:	6811      	ldr	r1, [r2, #0]
 8013d94:	1850      	adds	r0, r2, r1
 8013d96:	42a0      	cmp	r0, r4
 8013d98:	d10b      	bne.n	8013db2 <_free_r+0x6e>
 8013d9a:	6820      	ldr	r0, [r4, #0]
 8013d9c:	1809      	adds	r1, r1, r0
 8013d9e:	1850      	adds	r0, r2, r1
 8013da0:	6011      	str	r1, [r2, #0]
 8013da2:	4283      	cmp	r3, r0
 8013da4:	d1e0      	bne.n	8013d68 <_free_r+0x24>
 8013da6:	6818      	ldr	r0, [r3, #0]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	1841      	adds	r1, r0, r1
 8013dac:	6011      	str	r1, [r2, #0]
 8013dae:	6053      	str	r3, [r2, #4]
 8013db0:	e7da      	b.n	8013d68 <_free_r+0x24>
 8013db2:	42a0      	cmp	r0, r4
 8013db4:	d902      	bls.n	8013dbc <_free_r+0x78>
 8013db6:	230c      	movs	r3, #12
 8013db8:	602b      	str	r3, [r5, #0]
 8013dba:	e7d5      	b.n	8013d68 <_free_r+0x24>
 8013dbc:	6820      	ldr	r0, [r4, #0]
 8013dbe:	1821      	adds	r1, r4, r0
 8013dc0:	428b      	cmp	r3, r1
 8013dc2:	d103      	bne.n	8013dcc <_free_r+0x88>
 8013dc4:	6819      	ldr	r1, [r3, #0]
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	1809      	adds	r1, r1, r0
 8013dca:	6021      	str	r1, [r4, #0]
 8013dcc:	6063      	str	r3, [r4, #4]
 8013dce:	6054      	str	r4, [r2, #4]
 8013dd0:	e7ca      	b.n	8013d68 <_free_r+0x24>
 8013dd2:	46c0      	nop			@ (mov r8, r8)
 8013dd4:	20007284 	.word	0x20007284

08013dd8 <malloc>:
 8013dd8:	b510      	push	{r4, lr}
 8013dda:	4b03      	ldr	r3, [pc, #12]	@ (8013de8 <malloc+0x10>)
 8013ddc:	0001      	movs	r1, r0
 8013dde:	6818      	ldr	r0, [r3, #0]
 8013de0:	f000 f826 	bl	8013e30 <_malloc_r>
 8013de4:	bd10      	pop	{r4, pc}
 8013de6:	46c0      	nop			@ (mov r8, r8)
 8013de8:	20000094 	.word	0x20000094

08013dec <sbrk_aligned>:
 8013dec:	b570      	push	{r4, r5, r6, lr}
 8013dee:	4e0f      	ldr	r6, [pc, #60]	@ (8013e2c <sbrk_aligned+0x40>)
 8013df0:	000d      	movs	r5, r1
 8013df2:	6831      	ldr	r1, [r6, #0]
 8013df4:	0004      	movs	r4, r0
 8013df6:	2900      	cmp	r1, #0
 8013df8:	d102      	bne.n	8013e00 <sbrk_aligned+0x14>
 8013dfa:	f001 fe47 	bl	8015a8c <_sbrk_r>
 8013dfe:	6030      	str	r0, [r6, #0]
 8013e00:	0029      	movs	r1, r5
 8013e02:	0020      	movs	r0, r4
 8013e04:	f001 fe42 	bl	8015a8c <_sbrk_r>
 8013e08:	1c43      	adds	r3, r0, #1
 8013e0a:	d103      	bne.n	8013e14 <sbrk_aligned+0x28>
 8013e0c:	2501      	movs	r5, #1
 8013e0e:	426d      	negs	r5, r5
 8013e10:	0028      	movs	r0, r5
 8013e12:	bd70      	pop	{r4, r5, r6, pc}
 8013e14:	2303      	movs	r3, #3
 8013e16:	1cc5      	adds	r5, r0, #3
 8013e18:	439d      	bics	r5, r3
 8013e1a:	42a8      	cmp	r0, r5
 8013e1c:	d0f8      	beq.n	8013e10 <sbrk_aligned+0x24>
 8013e1e:	1a29      	subs	r1, r5, r0
 8013e20:	0020      	movs	r0, r4
 8013e22:	f001 fe33 	bl	8015a8c <_sbrk_r>
 8013e26:	3001      	adds	r0, #1
 8013e28:	d1f2      	bne.n	8013e10 <sbrk_aligned+0x24>
 8013e2a:	e7ef      	b.n	8013e0c <sbrk_aligned+0x20>
 8013e2c:	20007280 	.word	0x20007280

08013e30 <_malloc_r>:
 8013e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e32:	2203      	movs	r2, #3
 8013e34:	1ccb      	adds	r3, r1, #3
 8013e36:	4393      	bics	r3, r2
 8013e38:	3308      	adds	r3, #8
 8013e3a:	0005      	movs	r5, r0
 8013e3c:	001f      	movs	r7, r3
 8013e3e:	2b0c      	cmp	r3, #12
 8013e40:	d234      	bcs.n	8013eac <_malloc_r+0x7c>
 8013e42:	270c      	movs	r7, #12
 8013e44:	42b9      	cmp	r1, r7
 8013e46:	d833      	bhi.n	8013eb0 <_malloc_r+0x80>
 8013e48:	0028      	movs	r0, r5
 8013e4a:	f000 f871 	bl	8013f30 <__malloc_lock>
 8013e4e:	4e37      	ldr	r6, [pc, #220]	@ (8013f2c <_malloc_r+0xfc>)
 8013e50:	6833      	ldr	r3, [r6, #0]
 8013e52:	001c      	movs	r4, r3
 8013e54:	2c00      	cmp	r4, #0
 8013e56:	d12f      	bne.n	8013eb8 <_malloc_r+0x88>
 8013e58:	0039      	movs	r1, r7
 8013e5a:	0028      	movs	r0, r5
 8013e5c:	f7ff ffc6 	bl	8013dec <sbrk_aligned>
 8013e60:	0004      	movs	r4, r0
 8013e62:	1c43      	adds	r3, r0, #1
 8013e64:	d15f      	bne.n	8013f26 <_malloc_r+0xf6>
 8013e66:	6834      	ldr	r4, [r6, #0]
 8013e68:	9400      	str	r4, [sp, #0]
 8013e6a:	9b00      	ldr	r3, [sp, #0]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d14a      	bne.n	8013f06 <_malloc_r+0xd6>
 8013e70:	2c00      	cmp	r4, #0
 8013e72:	d052      	beq.n	8013f1a <_malloc_r+0xea>
 8013e74:	6823      	ldr	r3, [r4, #0]
 8013e76:	0028      	movs	r0, r5
 8013e78:	18e3      	adds	r3, r4, r3
 8013e7a:	9900      	ldr	r1, [sp, #0]
 8013e7c:	9301      	str	r3, [sp, #4]
 8013e7e:	f001 fe05 	bl	8015a8c <_sbrk_r>
 8013e82:	9b01      	ldr	r3, [sp, #4]
 8013e84:	4283      	cmp	r3, r0
 8013e86:	d148      	bne.n	8013f1a <_malloc_r+0xea>
 8013e88:	6823      	ldr	r3, [r4, #0]
 8013e8a:	0028      	movs	r0, r5
 8013e8c:	1aff      	subs	r7, r7, r3
 8013e8e:	0039      	movs	r1, r7
 8013e90:	f7ff ffac 	bl	8013dec <sbrk_aligned>
 8013e94:	3001      	adds	r0, #1
 8013e96:	d040      	beq.n	8013f1a <_malloc_r+0xea>
 8013e98:	6823      	ldr	r3, [r4, #0]
 8013e9a:	19db      	adds	r3, r3, r7
 8013e9c:	6023      	str	r3, [r4, #0]
 8013e9e:	6833      	ldr	r3, [r6, #0]
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	2a00      	cmp	r2, #0
 8013ea4:	d133      	bne.n	8013f0e <_malloc_r+0xde>
 8013ea6:	9b00      	ldr	r3, [sp, #0]
 8013ea8:	6033      	str	r3, [r6, #0]
 8013eaa:	e019      	b.n	8013ee0 <_malloc_r+0xb0>
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	dac9      	bge.n	8013e44 <_malloc_r+0x14>
 8013eb0:	230c      	movs	r3, #12
 8013eb2:	602b      	str	r3, [r5, #0]
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013eb8:	6821      	ldr	r1, [r4, #0]
 8013eba:	1bc9      	subs	r1, r1, r7
 8013ebc:	d420      	bmi.n	8013f00 <_malloc_r+0xd0>
 8013ebe:	290b      	cmp	r1, #11
 8013ec0:	d90a      	bls.n	8013ed8 <_malloc_r+0xa8>
 8013ec2:	19e2      	adds	r2, r4, r7
 8013ec4:	6027      	str	r7, [r4, #0]
 8013ec6:	42a3      	cmp	r3, r4
 8013ec8:	d104      	bne.n	8013ed4 <_malloc_r+0xa4>
 8013eca:	6032      	str	r2, [r6, #0]
 8013ecc:	6863      	ldr	r3, [r4, #4]
 8013ece:	6011      	str	r1, [r2, #0]
 8013ed0:	6053      	str	r3, [r2, #4]
 8013ed2:	e005      	b.n	8013ee0 <_malloc_r+0xb0>
 8013ed4:	605a      	str	r2, [r3, #4]
 8013ed6:	e7f9      	b.n	8013ecc <_malloc_r+0x9c>
 8013ed8:	6862      	ldr	r2, [r4, #4]
 8013eda:	42a3      	cmp	r3, r4
 8013edc:	d10e      	bne.n	8013efc <_malloc_r+0xcc>
 8013ede:	6032      	str	r2, [r6, #0]
 8013ee0:	0028      	movs	r0, r5
 8013ee2:	f000 f82d 	bl	8013f40 <__malloc_unlock>
 8013ee6:	0020      	movs	r0, r4
 8013ee8:	2207      	movs	r2, #7
 8013eea:	300b      	adds	r0, #11
 8013eec:	1d23      	adds	r3, r4, #4
 8013eee:	4390      	bics	r0, r2
 8013ef0:	1ac2      	subs	r2, r0, r3
 8013ef2:	4298      	cmp	r0, r3
 8013ef4:	d0df      	beq.n	8013eb6 <_malloc_r+0x86>
 8013ef6:	1a1b      	subs	r3, r3, r0
 8013ef8:	50a3      	str	r3, [r4, r2]
 8013efa:	e7dc      	b.n	8013eb6 <_malloc_r+0x86>
 8013efc:	605a      	str	r2, [r3, #4]
 8013efe:	e7ef      	b.n	8013ee0 <_malloc_r+0xb0>
 8013f00:	0023      	movs	r3, r4
 8013f02:	6864      	ldr	r4, [r4, #4]
 8013f04:	e7a6      	b.n	8013e54 <_malloc_r+0x24>
 8013f06:	9c00      	ldr	r4, [sp, #0]
 8013f08:	6863      	ldr	r3, [r4, #4]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	e7ad      	b.n	8013e6a <_malloc_r+0x3a>
 8013f0e:	001a      	movs	r2, r3
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	42a3      	cmp	r3, r4
 8013f14:	d1fb      	bne.n	8013f0e <_malloc_r+0xde>
 8013f16:	2300      	movs	r3, #0
 8013f18:	e7da      	b.n	8013ed0 <_malloc_r+0xa0>
 8013f1a:	230c      	movs	r3, #12
 8013f1c:	0028      	movs	r0, r5
 8013f1e:	602b      	str	r3, [r5, #0]
 8013f20:	f000 f80e 	bl	8013f40 <__malloc_unlock>
 8013f24:	e7c6      	b.n	8013eb4 <_malloc_r+0x84>
 8013f26:	6007      	str	r7, [r0, #0]
 8013f28:	e7da      	b.n	8013ee0 <_malloc_r+0xb0>
 8013f2a:	46c0      	nop			@ (mov r8, r8)
 8013f2c:	20007284 	.word	0x20007284

08013f30 <__malloc_lock>:
 8013f30:	b510      	push	{r4, lr}
 8013f32:	4802      	ldr	r0, [pc, #8]	@ (8013f3c <__malloc_lock+0xc>)
 8013f34:	f7ff f86d 	bl	8013012 <__retarget_lock_acquire_recursive>
 8013f38:	bd10      	pop	{r4, pc}
 8013f3a:	46c0      	nop			@ (mov r8, r8)
 8013f3c:	2000727c 	.word	0x2000727c

08013f40 <__malloc_unlock>:
 8013f40:	b510      	push	{r4, lr}
 8013f42:	4802      	ldr	r0, [pc, #8]	@ (8013f4c <__malloc_unlock+0xc>)
 8013f44:	f7ff f866 	bl	8013014 <__retarget_lock_release_recursive>
 8013f48:	bd10      	pop	{r4, pc}
 8013f4a:	46c0      	nop			@ (mov r8, r8)
 8013f4c:	2000727c 	.word	0x2000727c

08013f50 <_Balloc>:
 8013f50:	b570      	push	{r4, r5, r6, lr}
 8013f52:	69c5      	ldr	r5, [r0, #28]
 8013f54:	0006      	movs	r6, r0
 8013f56:	000c      	movs	r4, r1
 8013f58:	2d00      	cmp	r5, #0
 8013f5a:	d10e      	bne.n	8013f7a <_Balloc+0x2a>
 8013f5c:	2010      	movs	r0, #16
 8013f5e:	f7ff ff3b 	bl	8013dd8 <malloc>
 8013f62:	1e02      	subs	r2, r0, #0
 8013f64:	61f0      	str	r0, [r6, #28]
 8013f66:	d104      	bne.n	8013f72 <_Balloc+0x22>
 8013f68:	216b      	movs	r1, #107	@ 0x6b
 8013f6a:	4b19      	ldr	r3, [pc, #100]	@ (8013fd0 <_Balloc+0x80>)
 8013f6c:	4819      	ldr	r0, [pc, #100]	@ (8013fd4 <_Balloc+0x84>)
 8013f6e:	f001 fda5 	bl	8015abc <__assert_func>
 8013f72:	6045      	str	r5, [r0, #4]
 8013f74:	6085      	str	r5, [r0, #8]
 8013f76:	6005      	str	r5, [r0, #0]
 8013f78:	60c5      	str	r5, [r0, #12]
 8013f7a:	69f5      	ldr	r5, [r6, #28]
 8013f7c:	68eb      	ldr	r3, [r5, #12]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d013      	beq.n	8013faa <_Balloc+0x5a>
 8013f82:	69f3      	ldr	r3, [r6, #28]
 8013f84:	00a2      	lsls	r2, r4, #2
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	189b      	adds	r3, r3, r2
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d118      	bne.n	8013fc2 <_Balloc+0x72>
 8013f90:	2101      	movs	r1, #1
 8013f92:	000d      	movs	r5, r1
 8013f94:	40a5      	lsls	r5, r4
 8013f96:	1d6a      	adds	r2, r5, #5
 8013f98:	0030      	movs	r0, r6
 8013f9a:	0092      	lsls	r2, r2, #2
 8013f9c:	f001 fdac 	bl	8015af8 <_calloc_r>
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	d00c      	beq.n	8013fbe <_Balloc+0x6e>
 8013fa4:	6044      	str	r4, [r0, #4]
 8013fa6:	6085      	str	r5, [r0, #8]
 8013fa8:	e00d      	b.n	8013fc6 <_Balloc+0x76>
 8013faa:	2221      	movs	r2, #33	@ 0x21
 8013fac:	2104      	movs	r1, #4
 8013fae:	0030      	movs	r0, r6
 8013fb0:	f001 fda2 	bl	8015af8 <_calloc_r>
 8013fb4:	69f3      	ldr	r3, [r6, #28]
 8013fb6:	60e8      	str	r0, [r5, #12]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d1e1      	bne.n	8013f82 <_Balloc+0x32>
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	bd70      	pop	{r4, r5, r6, pc}
 8013fc2:	6802      	ldr	r2, [r0, #0]
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	6103      	str	r3, [r0, #16]
 8013fca:	60c3      	str	r3, [r0, #12]
 8013fcc:	e7f8      	b.n	8013fc0 <_Balloc+0x70>
 8013fce:	46c0      	nop			@ (mov r8, r8)
 8013fd0:	08017306 	.word	0x08017306
 8013fd4:	08017386 	.word	0x08017386

08013fd8 <_Bfree>:
 8013fd8:	b570      	push	{r4, r5, r6, lr}
 8013fda:	69c6      	ldr	r6, [r0, #28]
 8013fdc:	0005      	movs	r5, r0
 8013fde:	000c      	movs	r4, r1
 8013fe0:	2e00      	cmp	r6, #0
 8013fe2:	d10e      	bne.n	8014002 <_Bfree+0x2a>
 8013fe4:	2010      	movs	r0, #16
 8013fe6:	f7ff fef7 	bl	8013dd8 <malloc>
 8013fea:	1e02      	subs	r2, r0, #0
 8013fec:	61e8      	str	r0, [r5, #28]
 8013fee:	d104      	bne.n	8013ffa <_Bfree+0x22>
 8013ff0:	218f      	movs	r1, #143	@ 0x8f
 8013ff2:	4b09      	ldr	r3, [pc, #36]	@ (8014018 <_Bfree+0x40>)
 8013ff4:	4809      	ldr	r0, [pc, #36]	@ (801401c <_Bfree+0x44>)
 8013ff6:	f001 fd61 	bl	8015abc <__assert_func>
 8013ffa:	6046      	str	r6, [r0, #4]
 8013ffc:	6086      	str	r6, [r0, #8]
 8013ffe:	6006      	str	r6, [r0, #0]
 8014000:	60c6      	str	r6, [r0, #12]
 8014002:	2c00      	cmp	r4, #0
 8014004:	d007      	beq.n	8014016 <_Bfree+0x3e>
 8014006:	69eb      	ldr	r3, [r5, #28]
 8014008:	6862      	ldr	r2, [r4, #4]
 801400a:	68db      	ldr	r3, [r3, #12]
 801400c:	0092      	lsls	r2, r2, #2
 801400e:	189b      	adds	r3, r3, r2
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	6022      	str	r2, [r4, #0]
 8014014:	601c      	str	r4, [r3, #0]
 8014016:	bd70      	pop	{r4, r5, r6, pc}
 8014018:	08017306 	.word	0x08017306
 801401c:	08017386 	.word	0x08017386

08014020 <__multadd>:
 8014020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014022:	000f      	movs	r7, r1
 8014024:	9001      	str	r0, [sp, #4]
 8014026:	000c      	movs	r4, r1
 8014028:	001e      	movs	r6, r3
 801402a:	2000      	movs	r0, #0
 801402c:	690d      	ldr	r5, [r1, #16]
 801402e:	3714      	adds	r7, #20
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	3001      	adds	r0, #1
 8014034:	b299      	uxth	r1, r3
 8014036:	4351      	muls	r1, r2
 8014038:	0c1b      	lsrs	r3, r3, #16
 801403a:	4353      	muls	r3, r2
 801403c:	1989      	adds	r1, r1, r6
 801403e:	0c0e      	lsrs	r6, r1, #16
 8014040:	199b      	adds	r3, r3, r6
 8014042:	0c1e      	lsrs	r6, r3, #16
 8014044:	b289      	uxth	r1, r1
 8014046:	041b      	lsls	r3, r3, #16
 8014048:	185b      	adds	r3, r3, r1
 801404a:	c708      	stmia	r7!, {r3}
 801404c:	4285      	cmp	r5, r0
 801404e:	dcef      	bgt.n	8014030 <__multadd+0x10>
 8014050:	2e00      	cmp	r6, #0
 8014052:	d022      	beq.n	801409a <__multadd+0x7a>
 8014054:	68a3      	ldr	r3, [r4, #8]
 8014056:	42ab      	cmp	r3, r5
 8014058:	dc19      	bgt.n	801408e <__multadd+0x6e>
 801405a:	6861      	ldr	r1, [r4, #4]
 801405c:	9801      	ldr	r0, [sp, #4]
 801405e:	3101      	adds	r1, #1
 8014060:	f7ff ff76 	bl	8013f50 <_Balloc>
 8014064:	1e07      	subs	r7, r0, #0
 8014066:	d105      	bne.n	8014074 <__multadd+0x54>
 8014068:	003a      	movs	r2, r7
 801406a:	21ba      	movs	r1, #186	@ 0xba
 801406c:	4b0c      	ldr	r3, [pc, #48]	@ (80140a0 <__multadd+0x80>)
 801406e:	480d      	ldr	r0, [pc, #52]	@ (80140a4 <__multadd+0x84>)
 8014070:	f001 fd24 	bl	8015abc <__assert_func>
 8014074:	0021      	movs	r1, r4
 8014076:	6922      	ldr	r2, [r4, #16]
 8014078:	310c      	adds	r1, #12
 801407a:	3202      	adds	r2, #2
 801407c:	0092      	lsls	r2, r2, #2
 801407e:	300c      	adds	r0, #12
 8014080:	f7fe ffd4 	bl	801302c <memcpy>
 8014084:	0021      	movs	r1, r4
 8014086:	9801      	ldr	r0, [sp, #4]
 8014088:	f7ff ffa6 	bl	8013fd8 <_Bfree>
 801408c:	003c      	movs	r4, r7
 801408e:	1d2b      	adds	r3, r5, #4
 8014090:	009b      	lsls	r3, r3, #2
 8014092:	18e3      	adds	r3, r4, r3
 8014094:	3501      	adds	r5, #1
 8014096:	605e      	str	r6, [r3, #4]
 8014098:	6125      	str	r5, [r4, #16]
 801409a:	0020      	movs	r0, r4
 801409c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801409e:	46c0      	nop			@ (mov r8, r8)
 80140a0:	08017375 	.word	0x08017375
 80140a4:	08017386 	.word	0x08017386

080140a8 <__s2b>:
 80140a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140aa:	0007      	movs	r7, r0
 80140ac:	0018      	movs	r0, r3
 80140ae:	000c      	movs	r4, r1
 80140b0:	3008      	adds	r0, #8
 80140b2:	2109      	movs	r1, #9
 80140b4:	9301      	str	r3, [sp, #4]
 80140b6:	0015      	movs	r5, r2
 80140b8:	f7ec f8cc 	bl	8000254 <__divsi3>
 80140bc:	2301      	movs	r3, #1
 80140be:	2100      	movs	r1, #0
 80140c0:	4283      	cmp	r3, r0
 80140c2:	db0a      	blt.n	80140da <__s2b+0x32>
 80140c4:	0038      	movs	r0, r7
 80140c6:	f7ff ff43 	bl	8013f50 <_Balloc>
 80140ca:	1e01      	subs	r1, r0, #0
 80140cc:	d108      	bne.n	80140e0 <__s2b+0x38>
 80140ce:	000a      	movs	r2, r1
 80140d0:	4b19      	ldr	r3, [pc, #100]	@ (8014138 <__s2b+0x90>)
 80140d2:	481a      	ldr	r0, [pc, #104]	@ (801413c <__s2b+0x94>)
 80140d4:	31d3      	adds	r1, #211	@ 0xd3
 80140d6:	f001 fcf1 	bl	8015abc <__assert_func>
 80140da:	005b      	lsls	r3, r3, #1
 80140dc:	3101      	adds	r1, #1
 80140de:	e7ef      	b.n	80140c0 <__s2b+0x18>
 80140e0:	9b08      	ldr	r3, [sp, #32]
 80140e2:	6143      	str	r3, [r0, #20]
 80140e4:	2301      	movs	r3, #1
 80140e6:	6103      	str	r3, [r0, #16]
 80140e8:	2d09      	cmp	r5, #9
 80140ea:	dd18      	ble.n	801411e <__s2b+0x76>
 80140ec:	0023      	movs	r3, r4
 80140ee:	3309      	adds	r3, #9
 80140f0:	001e      	movs	r6, r3
 80140f2:	9300      	str	r3, [sp, #0]
 80140f4:	1964      	adds	r4, r4, r5
 80140f6:	7833      	ldrb	r3, [r6, #0]
 80140f8:	220a      	movs	r2, #10
 80140fa:	0038      	movs	r0, r7
 80140fc:	3b30      	subs	r3, #48	@ 0x30
 80140fe:	f7ff ff8f 	bl	8014020 <__multadd>
 8014102:	3601      	adds	r6, #1
 8014104:	0001      	movs	r1, r0
 8014106:	42a6      	cmp	r6, r4
 8014108:	d1f5      	bne.n	80140f6 <__s2b+0x4e>
 801410a:	002c      	movs	r4, r5
 801410c:	9b00      	ldr	r3, [sp, #0]
 801410e:	3c08      	subs	r4, #8
 8014110:	191c      	adds	r4, r3, r4
 8014112:	002e      	movs	r6, r5
 8014114:	9b01      	ldr	r3, [sp, #4]
 8014116:	429e      	cmp	r6, r3
 8014118:	db04      	blt.n	8014124 <__s2b+0x7c>
 801411a:	0008      	movs	r0, r1
 801411c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801411e:	2509      	movs	r5, #9
 8014120:	340a      	adds	r4, #10
 8014122:	e7f6      	b.n	8014112 <__s2b+0x6a>
 8014124:	1b63      	subs	r3, r4, r5
 8014126:	5d9b      	ldrb	r3, [r3, r6]
 8014128:	220a      	movs	r2, #10
 801412a:	0038      	movs	r0, r7
 801412c:	3b30      	subs	r3, #48	@ 0x30
 801412e:	f7ff ff77 	bl	8014020 <__multadd>
 8014132:	3601      	adds	r6, #1
 8014134:	0001      	movs	r1, r0
 8014136:	e7ed      	b.n	8014114 <__s2b+0x6c>
 8014138:	08017375 	.word	0x08017375
 801413c:	08017386 	.word	0x08017386

08014140 <__hi0bits>:
 8014140:	2280      	movs	r2, #128	@ 0x80
 8014142:	0003      	movs	r3, r0
 8014144:	0252      	lsls	r2, r2, #9
 8014146:	2000      	movs	r0, #0
 8014148:	4293      	cmp	r3, r2
 801414a:	d201      	bcs.n	8014150 <__hi0bits+0x10>
 801414c:	041b      	lsls	r3, r3, #16
 801414e:	3010      	adds	r0, #16
 8014150:	2280      	movs	r2, #128	@ 0x80
 8014152:	0452      	lsls	r2, r2, #17
 8014154:	4293      	cmp	r3, r2
 8014156:	d201      	bcs.n	801415c <__hi0bits+0x1c>
 8014158:	3008      	adds	r0, #8
 801415a:	021b      	lsls	r3, r3, #8
 801415c:	2280      	movs	r2, #128	@ 0x80
 801415e:	0552      	lsls	r2, r2, #21
 8014160:	4293      	cmp	r3, r2
 8014162:	d201      	bcs.n	8014168 <__hi0bits+0x28>
 8014164:	3004      	adds	r0, #4
 8014166:	011b      	lsls	r3, r3, #4
 8014168:	2280      	movs	r2, #128	@ 0x80
 801416a:	05d2      	lsls	r2, r2, #23
 801416c:	4293      	cmp	r3, r2
 801416e:	d201      	bcs.n	8014174 <__hi0bits+0x34>
 8014170:	3002      	adds	r0, #2
 8014172:	009b      	lsls	r3, r3, #2
 8014174:	2b00      	cmp	r3, #0
 8014176:	db03      	blt.n	8014180 <__hi0bits+0x40>
 8014178:	3001      	adds	r0, #1
 801417a:	4213      	tst	r3, r2
 801417c:	d100      	bne.n	8014180 <__hi0bits+0x40>
 801417e:	2020      	movs	r0, #32
 8014180:	4770      	bx	lr

08014182 <__lo0bits>:
 8014182:	6803      	ldr	r3, [r0, #0]
 8014184:	0001      	movs	r1, r0
 8014186:	2207      	movs	r2, #7
 8014188:	0018      	movs	r0, r3
 801418a:	4010      	ands	r0, r2
 801418c:	4213      	tst	r3, r2
 801418e:	d00d      	beq.n	80141ac <__lo0bits+0x2a>
 8014190:	3a06      	subs	r2, #6
 8014192:	2000      	movs	r0, #0
 8014194:	4213      	tst	r3, r2
 8014196:	d105      	bne.n	80141a4 <__lo0bits+0x22>
 8014198:	3002      	adds	r0, #2
 801419a:	4203      	tst	r3, r0
 801419c:	d003      	beq.n	80141a6 <__lo0bits+0x24>
 801419e:	40d3      	lsrs	r3, r2
 80141a0:	0010      	movs	r0, r2
 80141a2:	600b      	str	r3, [r1, #0]
 80141a4:	4770      	bx	lr
 80141a6:	089b      	lsrs	r3, r3, #2
 80141a8:	600b      	str	r3, [r1, #0]
 80141aa:	e7fb      	b.n	80141a4 <__lo0bits+0x22>
 80141ac:	b29a      	uxth	r2, r3
 80141ae:	2a00      	cmp	r2, #0
 80141b0:	d101      	bne.n	80141b6 <__lo0bits+0x34>
 80141b2:	2010      	movs	r0, #16
 80141b4:	0c1b      	lsrs	r3, r3, #16
 80141b6:	b2da      	uxtb	r2, r3
 80141b8:	2a00      	cmp	r2, #0
 80141ba:	d101      	bne.n	80141c0 <__lo0bits+0x3e>
 80141bc:	3008      	adds	r0, #8
 80141be:	0a1b      	lsrs	r3, r3, #8
 80141c0:	071a      	lsls	r2, r3, #28
 80141c2:	d101      	bne.n	80141c8 <__lo0bits+0x46>
 80141c4:	3004      	adds	r0, #4
 80141c6:	091b      	lsrs	r3, r3, #4
 80141c8:	079a      	lsls	r2, r3, #30
 80141ca:	d101      	bne.n	80141d0 <__lo0bits+0x4e>
 80141cc:	3002      	adds	r0, #2
 80141ce:	089b      	lsrs	r3, r3, #2
 80141d0:	07da      	lsls	r2, r3, #31
 80141d2:	d4e9      	bmi.n	80141a8 <__lo0bits+0x26>
 80141d4:	3001      	adds	r0, #1
 80141d6:	085b      	lsrs	r3, r3, #1
 80141d8:	d1e6      	bne.n	80141a8 <__lo0bits+0x26>
 80141da:	2020      	movs	r0, #32
 80141dc:	e7e2      	b.n	80141a4 <__lo0bits+0x22>
	...

080141e0 <__i2b>:
 80141e0:	b510      	push	{r4, lr}
 80141e2:	000c      	movs	r4, r1
 80141e4:	2101      	movs	r1, #1
 80141e6:	f7ff feb3 	bl	8013f50 <_Balloc>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d107      	bne.n	80141fe <__i2b+0x1e>
 80141ee:	2146      	movs	r1, #70	@ 0x46
 80141f0:	4c05      	ldr	r4, [pc, #20]	@ (8014208 <__i2b+0x28>)
 80141f2:	0002      	movs	r2, r0
 80141f4:	4b05      	ldr	r3, [pc, #20]	@ (801420c <__i2b+0x2c>)
 80141f6:	0020      	movs	r0, r4
 80141f8:	31ff      	adds	r1, #255	@ 0xff
 80141fa:	f001 fc5f 	bl	8015abc <__assert_func>
 80141fe:	2301      	movs	r3, #1
 8014200:	6144      	str	r4, [r0, #20]
 8014202:	6103      	str	r3, [r0, #16]
 8014204:	bd10      	pop	{r4, pc}
 8014206:	46c0      	nop			@ (mov r8, r8)
 8014208:	08017386 	.word	0x08017386
 801420c:	08017375 	.word	0x08017375

08014210 <__multiply>:
 8014210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014212:	0014      	movs	r4, r2
 8014214:	690a      	ldr	r2, [r1, #16]
 8014216:	6923      	ldr	r3, [r4, #16]
 8014218:	000d      	movs	r5, r1
 801421a:	b08b      	sub	sp, #44	@ 0x2c
 801421c:	429a      	cmp	r2, r3
 801421e:	db02      	blt.n	8014226 <__multiply+0x16>
 8014220:	0023      	movs	r3, r4
 8014222:	000c      	movs	r4, r1
 8014224:	001d      	movs	r5, r3
 8014226:	6927      	ldr	r7, [r4, #16]
 8014228:	692e      	ldr	r6, [r5, #16]
 801422a:	6861      	ldr	r1, [r4, #4]
 801422c:	19bb      	adds	r3, r7, r6
 801422e:	9303      	str	r3, [sp, #12]
 8014230:	68a3      	ldr	r3, [r4, #8]
 8014232:	19ba      	adds	r2, r7, r6
 8014234:	4293      	cmp	r3, r2
 8014236:	da00      	bge.n	801423a <__multiply+0x2a>
 8014238:	3101      	adds	r1, #1
 801423a:	f7ff fe89 	bl	8013f50 <_Balloc>
 801423e:	9002      	str	r0, [sp, #8]
 8014240:	2800      	cmp	r0, #0
 8014242:	d106      	bne.n	8014252 <__multiply+0x42>
 8014244:	21b1      	movs	r1, #177	@ 0xb1
 8014246:	4b49      	ldr	r3, [pc, #292]	@ (801436c <__multiply+0x15c>)
 8014248:	4849      	ldr	r0, [pc, #292]	@ (8014370 <__multiply+0x160>)
 801424a:	9a02      	ldr	r2, [sp, #8]
 801424c:	0049      	lsls	r1, r1, #1
 801424e:	f001 fc35 	bl	8015abc <__assert_func>
 8014252:	9b02      	ldr	r3, [sp, #8]
 8014254:	2200      	movs	r2, #0
 8014256:	3314      	adds	r3, #20
 8014258:	469c      	mov	ip, r3
 801425a:	19bb      	adds	r3, r7, r6
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	4463      	add	r3, ip
 8014260:	9304      	str	r3, [sp, #16]
 8014262:	4663      	mov	r3, ip
 8014264:	9904      	ldr	r1, [sp, #16]
 8014266:	428b      	cmp	r3, r1
 8014268:	d32a      	bcc.n	80142c0 <__multiply+0xb0>
 801426a:	0023      	movs	r3, r4
 801426c:	00bf      	lsls	r7, r7, #2
 801426e:	3314      	adds	r3, #20
 8014270:	3514      	adds	r5, #20
 8014272:	9308      	str	r3, [sp, #32]
 8014274:	00b6      	lsls	r6, r6, #2
 8014276:	19db      	adds	r3, r3, r7
 8014278:	9305      	str	r3, [sp, #20]
 801427a:	19ab      	adds	r3, r5, r6
 801427c:	9309      	str	r3, [sp, #36]	@ 0x24
 801427e:	2304      	movs	r3, #4
 8014280:	9306      	str	r3, [sp, #24]
 8014282:	0023      	movs	r3, r4
 8014284:	9a05      	ldr	r2, [sp, #20]
 8014286:	3315      	adds	r3, #21
 8014288:	9501      	str	r5, [sp, #4]
 801428a:	429a      	cmp	r2, r3
 801428c:	d305      	bcc.n	801429a <__multiply+0x8a>
 801428e:	1b13      	subs	r3, r2, r4
 8014290:	3b15      	subs	r3, #21
 8014292:	089b      	lsrs	r3, r3, #2
 8014294:	3301      	adds	r3, #1
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	9306      	str	r3, [sp, #24]
 801429a:	9b01      	ldr	r3, [sp, #4]
 801429c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801429e:	4293      	cmp	r3, r2
 80142a0:	d310      	bcc.n	80142c4 <__multiply+0xb4>
 80142a2:	9b03      	ldr	r3, [sp, #12]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	dd05      	ble.n	80142b4 <__multiply+0xa4>
 80142a8:	9b04      	ldr	r3, [sp, #16]
 80142aa:	3b04      	subs	r3, #4
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d056      	beq.n	8014362 <__multiply+0x152>
 80142b4:	9b02      	ldr	r3, [sp, #8]
 80142b6:	9a03      	ldr	r2, [sp, #12]
 80142b8:	0018      	movs	r0, r3
 80142ba:	611a      	str	r2, [r3, #16]
 80142bc:	b00b      	add	sp, #44	@ 0x2c
 80142be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c0:	c304      	stmia	r3!, {r2}
 80142c2:	e7cf      	b.n	8014264 <__multiply+0x54>
 80142c4:	9b01      	ldr	r3, [sp, #4]
 80142c6:	6818      	ldr	r0, [r3, #0]
 80142c8:	b280      	uxth	r0, r0
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d01e      	beq.n	801430c <__multiply+0xfc>
 80142ce:	4667      	mov	r7, ip
 80142d0:	2500      	movs	r5, #0
 80142d2:	9e08      	ldr	r6, [sp, #32]
 80142d4:	ce02      	ldmia	r6!, {r1}
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	9307      	str	r3, [sp, #28]
 80142da:	b28b      	uxth	r3, r1
 80142dc:	4343      	muls	r3, r0
 80142de:	001a      	movs	r2, r3
 80142e0:	466b      	mov	r3, sp
 80142e2:	0c09      	lsrs	r1, r1, #16
 80142e4:	8b9b      	ldrh	r3, [r3, #28]
 80142e6:	4341      	muls	r1, r0
 80142e8:	18d3      	adds	r3, r2, r3
 80142ea:	9a07      	ldr	r2, [sp, #28]
 80142ec:	195b      	adds	r3, r3, r5
 80142ee:	0c12      	lsrs	r2, r2, #16
 80142f0:	1889      	adds	r1, r1, r2
 80142f2:	0c1a      	lsrs	r2, r3, #16
 80142f4:	188a      	adds	r2, r1, r2
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	0c15      	lsrs	r5, r2, #16
 80142fa:	0412      	lsls	r2, r2, #16
 80142fc:	431a      	orrs	r2, r3
 80142fe:	9b05      	ldr	r3, [sp, #20]
 8014300:	c704      	stmia	r7!, {r2}
 8014302:	42b3      	cmp	r3, r6
 8014304:	d8e6      	bhi.n	80142d4 <__multiply+0xc4>
 8014306:	4663      	mov	r3, ip
 8014308:	9a06      	ldr	r2, [sp, #24]
 801430a:	509d      	str	r5, [r3, r2]
 801430c:	9b01      	ldr	r3, [sp, #4]
 801430e:	6818      	ldr	r0, [r3, #0]
 8014310:	0c00      	lsrs	r0, r0, #16
 8014312:	d020      	beq.n	8014356 <__multiply+0x146>
 8014314:	4663      	mov	r3, ip
 8014316:	0025      	movs	r5, r4
 8014318:	4661      	mov	r1, ip
 801431a:	2700      	movs	r7, #0
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	3514      	adds	r5, #20
 8014320:	682a      	ldr	r2, [r5, #0]
 8014322:	680e      	ldr	r6, [r1, #0]
 8014324:	b292      	uxth	r2, r2
 8014326:	4342      	muls	r2, r0
 8014328:	0c36      	lsrs	r6, r6, #16
 801432a:	1992      	adds	r2, r2, r6
 801432c:	19d2      	adds	r2, r2, r7
 801432e:	0416      	lsls	r6, r2, #16
 8014330:	b29b      	uxth	r3, r3
 8014332:	431e      	orrs	r6, r3
 8014334:	600e      	str	r6, [r1, #0]
 8014336:	cd40      	ldmia	r5!, {r6}
 8014338:	684b      	ldr	r3, [r1, #4]
 801433a:	0c36      	lsrs	r6, r6, #16
 801433c:	4346      	muls	r6, r0
 801433e:	b29b      	uxth	r3, r3
 8014340:	0c12      	lsrs	r2, r2, #16
 8014342:	18f3      	adds	r3, r6, r3
 8014344:	189b      	adds	r3, r3, r2
 8014346:	9a05      	ldr	r2, [sp, #20]
 8014348:	0c1f      	lsrs	r7, r3, #16
 801434a:	3104      	adds	r1, #4
 801434c:	42aa      	cmp	r2, r5
 801434e:	d8e7      	bhi.n	8014320 <__multiply+0x110>
 8014350:	4662      	mov	r2, ip
 8014352:	9906      	ldr	r1, [sp, #24]
 8014354:	5053      	str	r3, [r2, r1]
 8014356:	9b01      	ldr	r3, [sp, #4]
 8014358:	3304      	adds	r3, #4
 801435a:	9301      	str	r3, [sp, #4]
 801435c:	2304      	movs	r3, #4
 801435e:	449c      	add	ip, r3
 8014360:	e79b      	b.n	801429a <__multiply+0x8a>
 8014362:	9b03      	ldr	r3, [sp, #12]
 8014364:	3b01      	subs	r3, #1
 8014366:	9303      	str	r3, [sp, #12]
 8014368:	e79b      	b.n	80142a2 <__multiply+0x92>
 801436a:	46c0      	nop			@ (mov r8, r8)
 801436c:	08017375 	.word	0x08017375
 8014370:	08017386 	.word	0x08017386

08014374 <__pow5mult>:
 8014374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014376:	2303      	movs	r3, #3
 8014378:	0015      	movs	r5, r2
 801437a:	0007      	movs	r7, r0
 801437c:	000e      	movs	r6, r1
 801437e:	401a      	ands	r2, r3
 8014380:	421d      	tst	r5, r3
 8014382:	d008      	beq.n	8014396 <__pow5mult+0x22>
 8014384:	4925      	ldr	r1, [pc, #148]	@ (801441c <__pow5mult+0xa8>)
 8014386:	3a01      	subs	r2, #1
 8014388:	0092      	lsls	r2, r2, #2
 801438a:	5852      	ldr	r2, [r2, r1]
 801438c:	2300      	movs	r3, #0
 801438e:	0031      	movs	r1, r6
 8014390:	f7ff fe46 	bl	8014020 <__multadd>
 8014394:	0006      	movs	r6, r0
 8014396:	10ad      	asrs	r5, r5, #2
 8014398:	d03d      	beq.n	8014416 <__pow5mult+0xa2>
 801439a:	69fc      	ldr	r4, [r7, #28]
 801439c:	2c00      	cmp	r4, #0
 801439e:	d10f      	bne.n	80143c0 <__pow5mult+0x4c>
 80143a0:	2010      	movs	r0, #16
 80143a2:	f7ff fd19 	bl	8013dd8 <malloc>
 80143a6:	1e02      	subs	r2, r0, #0
 80143a8:	61f8      	str	r0, [r7, #28]
 80143aa:	d105      	bne.n	80143b8 <__pow5mult+0x44>
 80143ac:	21b4      	movs	r1, #180	@ 0xb4
 80143ae:	4b1c      	ldr	r3, [pc, #112]	@ (8014420 <__pow5mult+0xac>)
 80143b0:	481c      	ldr	r0, [pc, #112]	@ (8014424 <__pow5mult+0xb0>)
 80143b2:	31ff      	adds	r1, #255	@ 0xff
 80143b4:	f001 fb82 	bl	8015abc <__assert_func>
 80143b8:	6044      	str	r4, [r0, #4]
 80143ba:	6084      	str	r4, [r0, #8]
 80143bc:	6004      	str	r4, [r0, #0]
 80143be:	60c4      	str	r4, [r0, #12]
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	689c      	ldr	r4, [r3, #8]
 80143c4:	9301      	str	r3, [sp, #4]
 80143c6:	2c00      	cmp	r4, #0
 80143c8:	d108      	bne.n	80143dc <__pow5mult+0x68>
 80143ca:	0038      	movs	r0, r7
 80143cc:	4916      	ldr	r1, [pc, #88]	@ (8014428 <__pow5mult+0xb4>)
 80143ce:	f7ff ff07 	bl	80141e0 <__i2b>
 80143d2:	9b01      	ldr	r3, [sp, #4]
 80143d4:	0004      	movs	r4, r0
 80143d6:	6098      	str	r0, [r3, #8]
 80143d8:	2300      	movs	r3, #0
 80143da:	6003      	str	r3, [r0, #0]
 80143dc:	2301      	movs	r3, #1
 80143de:	421d      	tst	r5, r3
 80143e0:	d00a      	beq.n	80143f8 <__pow5mult+0x84>
 80143e2:	0031      	movs	r1, r6
 80143e4:	0022      	movs	r2, r4
 80143e6:	0038      	movs	r0, r7
 80143e8:	f7ff ff12 	bl	8014210 <__multiply>
 80143ec:	0031      	movs	r1, r6
 80143ee:	9001      	str	r0, [sp, #4]
 80143f0:	0038      	movs	r0, r7
 80143f2:	f7ff fdf1 	bl	8013fd8 <_Bfree>
 80143f6:	9e01      	ldr	r6, [sp, #4]
 80143f8:	106d      	asrs	r5, r5, #1
 80143fa:	d00c      	beq.n	8014416 <__pow5mult+0xa2>
 80143fc:	6820      	ldr	r0, [r4, #0]
 80143fe:	2800      	cmp	r0, #0
 8014400:	d107      	bne.n	8014412 <__pow5mult+0x9e>
 8014402:	0022      	movs	r2, r4
 8014404:	0021      	movs	r1, r4
 8014406:	0038      	movs	r0, r7
 8014408:	f7ff ff02 	bl	8014210 <__multiply>
 801440c:	2300      	movs	r3, #0
 801440e:	6020      	str	r0, [r4, #0]
 8014410:	6003      	str	r3, [r0, #0]
 8014412:	0004      	movs	r4, r0
 8014414:	e7e2      	b.n	80143dc <__pow5mult+0x68>
 8014416:	0030      	movs	r0, r6
 8014418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801441a:	46c0      	nop			@ (mov r8, r8)
 801441c:	080173e0 	.word	0x080173e0
 8014420:	08017306 	.word	0x08017306
 8014424:	08017386 	.word	0x08017386
 8014428:	00000271 	.word	0x00000271

0801442c <__lshift>:
 801442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801442e:	000c      	movs	r4, r1
 8014430:	0016      	movs	r6, r2
 8014432:	6923      	ldr	r3, [r4, #16]
 8014434:	1157      	asrs	r7, r2, #5
 8014436:	b085      	sub	sp, #20
 8014438:	18fb      	adds	r3, r7, r3
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	3301      	adds	r3, #1
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	6849      	ldr	r1, [r1, #4]
 8014442:	68a3      	ldr	r3, [r4, #8]
 8014444:	9002      	str	r0, [sp, #8]
 8014446:	9a00      	ldr	r2, [sp, #0]
 8014448:	4293      	cmp	r3, r2
 801444a:	db10      	blt.n	801446e <__lshift+0x42>
 801444c:	9802      	ldr	r0, [sp, #8]
 801444e:	f7ff fd7f 	bl	8013f50 <_Balloc>
 8014452:	2300      	movs	r3, #0
 8014454:	0001      	movs	r1, r0
 8014456:	0005      	movs	r5, r0
 8014458:	001a      	movs	r2, r3
 801445a:	3114      	adds	r1, #20
 801445c:	4298      	cmp	r0, r3
 801445e:	d10c      	bne.n	801447a <__lshift+0x4e>
 8014460:	21ef      	movs	r1, #239	@ 0xef
 8014462:	002a      	movs	r2, r5
 8014464:	4b25      	ldr	r3, [pc, #148]	@ (80144fc <__lshift+0xd0>)
 8014466:	4826      	ldr	r0, [pc, #152]	@ (8014500 <__lshift+0xd4>)
 8014468:	0049      	lsls	r1, r1, #1
 801446a:	f001 fb27 	bl	8015abc <__assert_func>
 801446e:	3101      	adds	r1, #1
 8014470:	005b      	lsls	r3, r3, #1
 8014472:	e7e8      	b.n	8014446 <__lshift+0x1a>
 8014474:	0098      	lsls	r0, r3, #2
 8014476:	500a      	str	r2, [r1, r0]
 8014478:	3301      	adds	r3, #1
 801447a:	42bb      	cmp	r3, r7
 801447c:	dbfa      	blt.n	8014474 <__lshift+0x48>
 801447e:	43fb      	mvns	r3, r7
 8014480:	17db      	asrs	r3, r3, #31
 8014482:	401f      	ands	r7, r3
 8014484:	00bf      	lsls	r7, r7, #2
 8014486:	0023      	movs	r3, r4
 8014488:	201f      	movs	r0, #31
 801448a:	19c9      	adds	r1, r1, r7
 801448c:	0037      	movs	r7, r6
 801448e:	6922      	ldr	r2, [r4, #16]
 8014490:	3314      	adds	r3, #20
 8014492:	0092      	lsls	r2, r2, #2
 8014494:	189a      	adds	r2, r3, r2
 8014496:	4007      	ands	r7, r0
 8014498:	4206      	tst	r6, r0
 801449a:	d029      	beq.n	80144f0 <__lshift+0xc4>
 801449c:	3001      	adds	r0, #1
 801449e:	1bc0      	subs	r0, r0, r7
 80144a0:	9003      	str	r0, [sp, #12]
 80144a2:	468c      	mov	ip, r1
 80144a4:	2000      	movs	r0, #0
 80144a6:	681e      	ldr	r6, [r3, #0]
 80144a8:	40be      	lsls	r6, r7
 80144aa:	4306      	orrs	r6, r0
 80144ac:	4660      	mov	r0, ip
 80144ae:	c040      	stmia	r0!, {r6}
 80144b0:	4684      	mov	ip, r0
 80144b2:	9e03      	ldr	r6, [sp, #12]
 80144b4:	cb01      	ldmia	r3!, {r0}
 80144b6:	40f0      	lsrs	r0, r6
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d8f4      	bhi.n	80144a6 <__lshift+0x7a>
 80144bc:	0026      	movs	r6, r4
 80144be:	3615      	adds	r6, #21
 80144c0:	2304      	movs	r3, #4
 80144c2:	42b2      	cmp	r2, r6
 80144c4:	d304      	bcc.n	80144d0 <__lshift+0xa4>
 80144c6:	1b13      	subs	r3, r2, r4
 80144c8:	3b15      	subs	r3, #21
 80144ca:	089b      	lsrs	r3, r3, #2
 80144cc:	3301      	adds	r3, #1
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	50c8      	str	r0, [r1, r3]
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d002      	beq.n	80144dc <__lshift+0xb0>
 80144d6:	9b01      	ldr	r3, [sp, #4]
 80144d8:	3302      	adds	r3, #2
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	9b00      	ldr	r3, [sp, #0]
 80144de:	9802      	ldr	r0, [sp, #8]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	0021      	movs	r1, r4
 80144e4:	612b      	str	r3, [r5, #16]
 80144e6:	f7ff fd77 	bl	8013fd8 <_Bfree>
 80144ea:	0028      	movs	r0, r5
 80144ec:	b005      	add	sp, #20
 80144ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f0:	cb01      	ldmia	r3!, {r0}
 80144f2:	c101      	stmia	r1!, {r0}
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d8fb      	bhi.n	80144f0 <__lshift+0xc4>
 80144f8:	e7f0      	b.n	80144dc <__lshift+0xb0>
 80144fa:	46c0      	nop			@ (mov r8, r8)
 80144fc:	08017375 	.word	0x08017375
 8014500:	08017386 	.word	0x08017386

08014504 <__mcmp>:
 8014504:	b530      	push	{r4, r5, lr}
 8014506:	690b      	ldr	r3, [r1, #16]
 8014508:	6904      	ldr	r4, [r0, #16]
 801450a:	0002      	movs	r2, r0
 801450c:	1ae0      	subs	r0, r4, r3
 801450e:	429c      	cmp	r4, r3
 8014510:	d10f      	bne.n	8014532 <__mcmp+0x2e>
 8014512:	3214      	adds	r2, #20
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	3114      	adds	r1, #20
 8014518:	0014      	movs	r4, r2
 801451a:	18c9      	adds	r1, r1, r3
 801451c:	18d2      	adds	r2, r2, r3
 801451e:	3a04      	subs	r2, #4
 8014520:	3904      	subs	r1, #4
 8014522:	6815      	ldr	r5, [r2, #0]
 8014524:	680b      	ldr	r3, [r1, #0]
 8014526:	429d      	cmp	r5, r3
 8014528:	d004      	beq.n	8014534 <__mcmp+0x30>
 801452a:	2001      	movs	r0, #1
 801452c:	429d      	cmp	r5, r3
 801452e:	d200      	bcs.n	8014532 <__mcmp+0x2e>
 8014530:	3802      	subs	r0, #2
 8014532:	bd30      	pop	{r4, r5, pc}
 8014534:	4294      	cmp	r4, r2
 8014536:	d3f2      	bcc.n	801451e <__mcmp+0x1a>
 8014538:	e7fb      	b.n	8014532 <__mcmp+0x2e>
	...

0801453c <__mdiff>:
 801453c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801453e:	000c      	movs	r4, r1
 8014540:	b087      	sub	sp, #28
 8014542:	9000      	str	r0, [sp, #0]
 8014544:	0011      	movs	r1, r2
 8014546:	0020      	movs	r0, r4
 8014548:	0017      	movs	r7, r2
 801454a:	f7ff ffdb 	bl	8014504 <__mcmp>
 801454e:	1e05      	subs	r5, r0, #0
 8014550:	d110      	bne.n	8014574 <__mdiff+0x38>
 8014552:	0001      	movs	r1, r0
 8014554:	9800      	ldr	r0, [sp, #0]
 8014556:	f7ff fcfb 	bl	8013f50 <_Balloc>
 801455a:	1e02      	subs	r2, r0, #0
 801455c:	d104      	bne.n	8014568 <__mdiff+0x2c>
 801455e:	4b40      	ldr	r3, [pc, #256]	@ (8014660 <__mdiff+0x124>)
 8014560:	4840      	ldr	r0, [pc, #256]	@ (8014664 <__mdiff+0x128>)
 8014562:	4941      	ldr	r1, [pc, #260]	@ (8014668 <__mdiff+0x12c>)
 8014564:	f001 faaa 	bl	8015abc <__assert_func>
 8014568:	2301      	movs	r3, #1
 801456a:	6145      	str	r5, [r0, #20]
 801456c:	6103      	str	r3, [r0, #16]
 801456e:	0010      	movs	r0, r2
 8014570:	b007      	add	sp, #28
 8014572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014574:	2600      	movs	r6, #0
 8014576:	42b0      	cmp	r0, r6
 8014578:	da03      	bge.n	8014582 <__mdiff+0x46>
 801457a:	0023      	movs	r3, r4
 801457c:	003c      	movs	r4, r7
 801457e:	001f      	movs	r7, r3
 8014580:	3601      	adds	r6, #1
 8014582:	6861      	ldr	r1, [r4, #4]
 8014584:	9800      	ldr	r0, [sp, #0]
 8014586:	f7ff fce3 	bl	8013f50 <_Balloc>
 801458a:	1e02      	subs	r2, r0, #0
 801458c:	d103      	bne.n	8014596 <__mdiff+0x5a>
 801458e:	4b34      	ldr	r3, [pc, #208]	@ (8014660 <__mdiff+0x124>)
 8014590:	4834      	ldr	r0, [pc, #208]	@ (8014664 <__mdiff+0x128>)
 8014592:	4936      	ldr	r1, [pc, #216]	@ (801466c <__mdiff+0x130>)
 8014594:	e7e6      	b.n	8014564 <__mdiff+0x28>
 8014596:	6923      	ldr	r3, [r4, #16]
 8014598:	3414      	adds	r4, #20
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	009b      	lsls	r3, r3, #2
 801459e:	18e3      	adds	r3, r4, r3
 80145a0:	0021      	movs	r1, r4
 80145a2:	9401      	str	r4, [sp, #4]
 80145a4:	003c      	movs	r4, r7
 80145a6:	9302      	str	r3, [sp, #8]
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	3414      	adds	r4, #20
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	18e3      	adds	r3, r4, r3
 80145b0:	9303      	str	r3, [sp, #12]
 80145b2:	0003      	movs	r3, r0
 80145b4:	60c6      	str	r6, [r0, #12]
 80145b6:	468c      	mov	ip, r1
 80145b8:	2000      	movs	r0, #0
 80145ba:	3314      	adds	r3, #20
 80145bc:	9304      	str	r3, [sp, #16]
 80145be:	9305      	str	r3, [sp, #20]
 80145c0:	4663      	mov	r3, ip
 80145c2:	cb20      	ldmia	r3!, {r5}
 80145c4:	b2a9      	uxth	r1, r5
 80145c6:	000e      	movs	r6, r1
 80145c8:	469c      	mov	ip, r3
 80145ca:	cc08      	ldmia	r4!, {r3}
 80145cc:	0c2d      	lsrs	r5, r5, #16
 80145ce:	b299      	uxth	r1, r3
 80145d0:	1a71      	subs	r1, r6, r1
 80145d2:	1809      	adds	r1, r1, r0
 80145d4:	0c1b      	lsrs	r3, r3, #16
 80145d6:	1408      	asrs	r0, r1, #16
 80145d8:	1aeb      	subs	r3, r5, r3
 80145da:	181b      	adds	r3, r3, r0
 80145dc:	1418      	asrs	r0, r3, #16
 80145de:	b289      	uxth	r1, r1
 80145e0:	041b      	lsls	r3, r3, #16
 80145e2:	4319      	orrs	r1, r3
 80145e4:	9b05      	ldr	r3, [sp, #20]
 80145e6:	c302      	stmia	r3!, {r1}
 80145e8:	9305      	str	r3, [sp, #20]
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	42a3      	cmp	r3, r4
 80145ee:	d8e7      	bhi.n	80145c0 <__mdiff+0x84>
 80145f0:	0039      	movs	r1, r7
 80145f2:	9c03      	ldr	r4, [sp, #12]
 80145f4:	3115      	adds	r1, #21
 80145f6:	2304      	movs	r3, #4
 80145f8:	428c      	cmp	r4, r1
 80145fa:	d304      	bcc.n	8014606 <__mdiff+0xca>
 80145fc:	1be3      	subs	r3, r4, r7
 80145fe:	3b15      	subs	r3, #21
 8014600:	089b      	lsrs	r3, r3, #2
 8014602:	3301      	adds	r3, #1
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	9901      	ldr	r1, [sp, #4]
 8014608:	18cd      	adds	r5, r1, r3
 801460a:	9904      	ldr	r1, [sp, #16]
 801460c:	002e      	movs	r6, r5
 801460e:	18cb      	adds	r3, r1, r3
 8014610:	001f      	movs	r7, r3
 8014612:	9902      	ldr	r1, [sp, #8]
 8014614:	428e      	cmp	r6, r1
 8014616:	d311      	bcc.n	801463c <__mdiff+0x100>
 8014618:	9c02      	ldr	r4, [sp, #8]
 801461a:	1ee9      	subs	r1, r5, #3
 801461c:	2000      	movs	r0, #0
 801461e:	428c      	cmp	r4, r1
 8014620:	d304      	bcc.n	801462c <__mdiff+0xf0>
 8014622:	0021      	movs	r1, r4
 8014624:	3103      	adds	r1, #3
 8014626:	1b49      	subs	r1, r1, r5
 8014628:	0889      	lsrs	r1, r1, #2
 801462a:	0088      	lsls	r0, r1, #2
 801462c:	181b      	adds	r3, r3, r0
 801462e:	3b04      	subs	r3, #4
 8014630:	6819      	ldr	r1, [r3, #0]
 8014632:	2900      	cmp	r1, #0
 8014634:	d010      	beq.n	8014658 <__mdiff+0x11c>
 8014636:	9b00      	ldr	r3, [sp, #0]
 8014638:	6113      	str	r3, [r2, #16]
 801463a:	e798      	b.n	801456e <__mdiff+0x32>
 801463c:	4684      	mov	ip, r0
 801463e:	ce02      	ldmia	r6!, {r1}
 8014640:	b288      	uxth	r0, r1
 8014642:	4460      	add	r0, ip
 8014644:	1400      	asrs	r0, r0, #16
 8014646:	0c0c      	lsrs	r4, r1, #16
 8014648:	1904      	adds	r4, r0, r4
 801464a:	4461      	add	r1, ip
 801464c:	1420      	asrs	r0, r4, #16
 801464e:	b289      	uxth	r1, r1
 8014650:	0424      	lsls	r4, r4, #16
 8014652:	4321      	orrs	r1, r4
 8014654:	c702      	stmia	r7!, {r1}
 8014656:	e7dc      	b.n	8014612 <__mdiff+0xd6>
 8014658:	9900      	ldr	r1, [sp, #0]
 801465a:	3901      	subs	r1, #1
 801465c:	9100      	str	r1, [sp, #0]
 801465e:	e7e6      	b.n	801462e <__mdiff+0xf2>
 8014660:	08017375 	.word	0x08017375
 8014664:	08017386 	.word	0x08017386
 8014668:	00000237 	.word	0x00000237
 801466c:	00000245 	.word	0x00000245

08014670 <__ulp>:
 8014670:	b510      	push	{r4, lr}
 8014672:	2400      	movs	r4, #0
 8014674:	4b0c      	ldr	r3, [pc, #48]	@ (80146a8 <__ulp+0x38>)
 8014676:	4a0d      	ldr	r2, [pc, #52]	@ (80146ac <__ulp+0x3c>)
 8014678:	400b      	ands	r3, r1
 801467a:	189b      	adds	r3, r3, r2
 801467c:	42a3      	cmp	r3, r4
 801467e:	dc06      	bgt.n	801468e <__ulp+0x1e>
 8014680:	425b      	negs	r3, r3
 8014682:	151a      	asrs	r2, r3, #20
 8014684:	2a13      	cmp	r2, #19
 8014686:	dc05      	bgt.n	8014694 <__ulp+0x24>
 8014688:	2380      	movs	r3, #128	@ 0x80
 801468a:	031b      	lsls	r3, r3, #12
 801468c:	4113      	asrs	r3, r2
 801468e:	0019      	movs	r1, r3
 8014690:	0020      	movs	r0, r4
 8014692:	bd10      	pop	{r4, pc}
 8014694:	3a14      	subs	r2, #20
 8014696:	2401      	movs	r4, #1
 8014698:	2a1e      	cmp	r2, #30
 801469a:	dc02      	bgt.n	80146a2 <__ulp+0x32>
 801469c:	2480      	movs	r4, #128	@ 0x80
 801469e:	0624      	lsls	r4, r4, #24
 80146a0:	40d4      	lsrs	r4, r2
 80146a2:	2300      	movs	r3, #0
 80146a4:	e7f3      	b.n	801468e <__ulp+0x1e>
 80146a6:	46c0      	nop			@ (mov r8, r8)
 80146a8:	7ff00000 	.word	0x7ff00000
 80146ac:	fcc00000 	.word	0xfcc00000

080146b0 <__b2d>:
 80146b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146b2:	0006      	movs	r6, r0
 80146b4:	6903      	ldr	r3, [r0, #16]
 80146b6:	3614      	adds	r6, #20
 80146b8:	009b      	lsls	r3, r3, #2
 80146ba:	18f3      	adds	r3, r6, r3
 80146bc:	1f1d      	subs	r5, r3, #4
 80146be:	682c      	ldr	r4, [r5, #0]
 80146c0:	000f      	movs	r7, r1
 80146c2:	0020      	movs	r0, r4
 80146c4:	9301      	str	r3, [sp, #4]
 80146c6:	f7ff fd3b 	bl	8014140 <__hi0bits>
 80146ca:	2220      	movs	r2, #32
 80146cc:	1a12      	subs	r2, r2, r0
 80146ce:	603a      	str	r2, [r7, #0]
 80146d0:	0003      	movs	r3, r0
 80146d2:	4a1c      	ldr	r2, [pc, #112]	@ (8014744 <__b2d+0x94>)
 80146d4:	280a      	cmp	r0, #10
 80146d6:	dc15      	bgt.n	8014704 <__b2d+0x54>
 80146d8:	210b      	movs	r1, #11
 80146da:	0027      	movs	r7, r4
 80146dc:	1a09      	subs	r1, r1, r0
 80146de:	40cf      	lsrs	r7, r1
 80146e0:	433a      	orrs	r2, r7
 80146e2:	468c      	mov	ip, r1
 80146e4:	0011      	movs	r1, r2
 80146e6:	2200      	movs	r2, #0
 80146e8:	42ae      	cmp	r6, r5
 80146ea:	d202      	bcs.n	80146f2 <__b2d+0x42>
 80146ec:	9a01      	ldr	r2, [sp, #4]
 80146ee:	3a08      	subs	r2, #8
 80146f0:	6812      	ldr	r2, [r2, #0]
 80146f2:	3315      	adds	r3, #21
 80146f4:	409c      	lsls	r4, r3
 80146f6:	4663      	mov	r3, ip
 80146f8:	0027      	movs	r7, r4
 80146fa:	40da      	lsrs	r2, r3
 80146fc:	4317      	orrs	r7, r2
 80146fe:	0038      	movs	r0, r7
 8014700:	b003      	add	sp, #12
 8014702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014704:	2700      	movs	r7, #0
 8014706:	42ae      	cmp	r6, r5
 8014708:	d202      	bcs.n	8014710 <__b2d+0x60>
 801470a:	9d01      	ldr	r5, [sp, #4]
 801470c:	3d08      	subs	r5, #8
 801470e:	682f      	ldr	r7, [r5, #0]
 8014710:	210b      	movs	r1, #11
 8014712:	4249      	negs	r1, r1
 8014714:	468c      	mov	ip, r1
 8014716:	449c      	add	ip, r3
 8014718:	2b0b      	cmp	r3, #11
 801471a:	d010      	beq.n	801473e <__b2d+0x8e>
 801471c:	4661      	mov	r1, ip
 801471e:	2320      	movs	r3, #32
 8014720:	408c      	lsls	r4, r1
 8014722:	1a5b      	subs	r3, r3, r1
 8014724:	0039      	movs	r1, r7
 8014726:	40d9      	lsrs	r1, r3
 8014728:	430c      	orrs	r4, r1
 801472a:	4322      	orrs	r2, r4
 801472c:	0011      	movs	r1, r2
 801472e:	2200      	movs	r2, #0
 8014730:	42b5      	cmp	r5, r6
 8014732:	d901      	bls.n	8014738 <__b2d+0x88>
 8014734:	3d04      	subs	r5, #4
 8014736:	682a      	ldr	r2, [r5, #0]
 8014738:	4664      	mov	r4, ip
 801473a:	40a7      	lsls	r7, r4
 801473c:	e7dd      	b.n	80146fa <__b2d+0x4a>
 801473e:	4322      	orrs	r2, r4
 8014740:	0011      	movs	r1, r2
 8014742:	e7dc      	b.n	80146fe <__b2d+0x4e>
 8014744:	3ff00000 	.word	0x3ff00000

08014748 <__d2b>:
 8014748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801474a:	2101      	movs	r1, #1
 801474c:	0016      	movs	r6, r2
 801474e:	001f      	movs	r7, r3
 8014750:	f7ff fbfe 	bl	8013f50 <_Balloc>
 8014754:	1e04      	subs	r4, r0, #0
 8014756:	d105      	bne.n	8014764 <__d2b+0x1c>
 8014758:	0022      	movs	r2, r4
 801475a:	4b25      	ldr	r3, [pc, #148]	@ (80147f0 <__d2b+0xa8>)
 801475c:	4825      	ldr	r0, [pc, #148]	@ (80147f4 <__d2b+0xac>)
 801475e:	4926      	ldr	r1, [pc, #152]	@ (80147f8 <__d2b+0xb0>)
 8014760:	f001 f9ac 	bl	8015abc <__assert_func>
 8014764:	033b      	lsls	r3, r7, #12
 8014766:	007d      	lsls	r5, r7, #1
 8014768:	0b1b      	lsrs	r3, r3, #12
 801476a:	0d6d      	lsrs	r5, r5, #21
 801476c:	d002      	beq.n	8014774 <__d2b+0x2c>
 801476e:	2280      	movs	r2, #128	@ 0x80
 8014770:	0352      	lsls	r2, r2, #13
 8014772:	4313      	orrs	r3, r2
 8014774:	9301      	str	r3, [sp, #4]
 8014776:	2e00      	cmp	r6, #0
 8014778:	d025      	beq.n	80147c6 <__d2b+0x7e>
 801477a:	4668      	mov	r0, sp
 801477c:	9600      	str	r6, [sp, #0]
 801477e:	f7ff fd00 	bl	8014182 <__lo0bits>
 8014782:	9b01      	ldr	r3, [sp, #4]
 8014784:	9900      	ldr	r1, [sp, #0]
 8014786:	2800      	cmp	r0, #0
 8014788:	d01b      	beq.n	80147c2 <__d2b+0x7a>
 801478a:	2220      	movs	r2, #32
 801478c:	001e      	movs	r6, r3
 801478e:	1a12      	subs	r2, r2, r0
 8014790:	4096      	lsls	r6, r2
 8014792:	0032      	movs	r2, r6
 8014794:	40c3      	lsrs	r3, r0
 8014796:	430a      	orrs	r2, r1
 8014798:	6162      	str	r2, [r4, #20]
 801479a:	9301      	str	r3, [sp, #4]
 801479c:	9e01      	ldr	r6, [sp, #4]
 801479e:	61a6      	str	r6, [r4, #24]
 80147a0:	1e73      	subs	r3, r6, #1
 80147a2:	419e      	sbcs	r6, r3
 80147a4:	3601      	adds	r6, #1
 80147a6:	6126      	str	r6, [r4, #16]
 80147a8:	2d00      	cmp	r5, #0
 80147aa:	d014      	beq.n	80147d6 <__d2b+0x8e>
 80147ac:	2635      	movs	r6, #53	@ 0x35
 80147ae:	4b13      	ldr	r3, [pc, #76]	@ (80147fc <__d2b+0xb4>)
 80147b0:	18ed      	adds	r5, r5, r3
 80147b2:	9b08      	ldr	r3, [sp, #32]
 80147b4:	182d      	adds	r5, r5, r0
 80147b6:	601d      	str	r5, [r3, #0]
 80147b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147ba:	1a36      	subs	r6, r6, r0
 80147bc:	601e      	str	r6, [r3, #0]
 80147be:	0020      	movs	r0, r4
 80147c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80147c2:	6161      	str	r1, [r4, #20]
 80147c4:	e7ea      	b.n	801479c <__d2b+0x54>
 80147c6:	a801      	add	r0, sp, #4
 80147c8:	f7ff fcdb 	bl	8014182 <__lo0bits>
 80147cc:	9b01      	ldr	r3, [sp, #4]
 80147ce:	2601      	movs	r6, #1
 80147d0:	6163      	str	r3, [r4, #20]
 80147d2:	3020      	adds	r0, #32
 80147d4:	e7e7      	b.n	80147a6 <__d2b+0x5e>
 80147d6:	4b0a      	ldr	r3, [pc, #40]	@ (8014800 <__d2b+0xb8>)
 80147d8:	18c0      	adds	r0, r0, r3
 80147da:	9b08      	ldr	r3, [sp, #32]
 80147dc:	6018      	str	r0, [r3, #0]
 80147de:	4b09      	ldr	r3, [pc, #36]	@ (8014804 <__d2b+0xbc>)
 80147e0:	18f3      	adds	r3, r6, r3
 80147e2:	009b      	lsls	r3, r3, #2
 80147e4:	18e3      	adds	r3, r4, r3
 80147e6:	6958      	ldr	r0, [r3, #20]
 80147e8:	f7ff fcaa 	bl	8014140 <__hi0bits>
 80147ec:	0176      	lsls	r6, r6, #5
 80147ee:	e7e3      	b.n	80147b8 <__d2b+0x70>
 80147f0:	08017375 	.word	0x08017375
 80147f4:	08017386 	.word	0x08017386
 80147f8:	0000030f 	.word	0x0000030f
 80147fc:	fffffbcd 	.word	0xfffffbcd
 8014800:	fffffbce 	.word	0xfffffbce
 8014804:	3fffffff 	.word	0x3fffffff

08014808 <__ratio>:
 8014808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480a:	b087      	sub	sp, #28
 801480c:	000f      	movs	r7, r1
 801480e:	a904      	add	r1, sp, #16
 8014810:	0006      	movs	r6, r0
 8014812:	f7ff ff4d 	bl	80146b0 <__b2d>
 8014816:	9000      	str	r0, [sp, #0]
 8014818:	9101      	str	r1, [sp, #4]
 801481a:	9b00      	ldr	r3, [sp, #0]
 801481c:	9c01      	ldr	r4, [sp, #4]
 801481e:	0038      	movs	r0, r7
 8014820:	a905      	add	r1, sp, #20
 8014822:	9302      	str	r3, [sp, #8]
 8014824:	9403      	str	r4, [sp, #12]
 8014826:	f7ff ff43 	bl	80146b0 <__b2d>
 801482a:	000d      	movs	r5, r1
 801482c:	0002      	movs	r2, r0
 801482e:	000b      	movs	r3, r1
 8014830:	6930      	ldr	r0, [r6, #16]
 8014832:	6939      	ldr	r1, [r7, #16]
 8014834:	9e04      	ldr	r6, [sp, #16]
 8014836:	1a40      	subs	r0, r0, r1
 8014838:	9905      	ldr	r1, [sp, #20]
 801483a:	0140      	lsls	r0, r0, #5
 801483c:	1a71      	subs	r1, r6, r1
 801483e:	1841      	adds	r1, r0, r1
 8014840:	0508      	lsls	r0, r1, #20
 8014842:	2900      	cmp	r1, #0
 8014844:	dd08      	ble.n	8014858 <__ratio+0x50>
 8014846:	9901      	ldr	r1, [sp, #4]
 8014848:	1841      	adds	r1, r0, r1
 801484a:	9103      	str	r1, [sp, #12]
 801484c:	9802      	ldr	r0, [sp, #8]
 801484e:	9903      	ldr	r1, [sp, #12]
 8014850:	f7ed fa50 	bl	8001cf4 <__aeabi_ddiv>
 8014854:	b007      	add	sp, #28
 8014856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014858:	1a2b      	subs	r3, r5, r0
 801485a:	e7f7      	b.n	801484c <__ratio+0x44>

0801485c <__copybits>:
 801485c:	b570      	push	{r4, r5, r6, lr}
 801485e:	0014      	movs	r4, r2
 8014860:	0005      	movs	r5, r0
 8014862:	3901      	subs	r1, #1
 8014864:	6913      	ldr	r3, [r2, #16]
 8014866:	1149      	asrs	r1, r1, #5
 8014868:	3101      	adds	r1, #1
 801486a:	0089      	lsls	r1, r1, #2
 801486c:	3414      	adds	r4, #20
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	1841      	adds	r1, r0, r1
 8014872:	18e3      	adds	r3, r4, r3
 8014874:	42a3      	cmp	r3, r4
 8014876:	d80d      	bhi.n	8014894 <__copybits+0x38>
 8014878:	0014      	movs	r4, r2
 801487a:	3411      	adds	r4, #17
 801487c:	2500      	movs	r5, #0
 801487e:	429c      	cmp	r4, r3
 8014880:	d803      	bhi.n	801488a <__copybits+0x2e>
 8014882:	1a9b      	subs	r3, r3, r2
 8014884:	3b11      	subs	r3, #17
 8014886:	089b      	lsrs	r3, r3, #2
 8014888:	009d      	lsls	r5, r3, #2
 801488a:	2300      	movs	r3, #0
 801488c:	1940      	adds	r0, r0, r5
 801488e:	4281      	cmp	r1, r0
 8014890:	d803      	bhi.n	801489a <__copybits+0x3e>
 8014892:	bd70      	pop	{r4, r5, r6, pc}
 8014894:	cc40      	ldmia	r4!, {r6}
 8014896:	c540      	stmia	r5!, {r6}
 8014898:	e7ec      	b.n	8014874 <__copybits+0x18>
 801489a:	c008      	stmia	r0!, {r3}
 801489c:	e7f7      	b.n	801488e <__copybits+0x32>

0801489e <__any_on>:
 801489e:	0002      	movs	r2, r0
 80148a0:	6900      	ldr	r0, [r0, #16]
 80148a2:	b510      	push	{r4, lr}
 80148a4:	3214      	adds	r2, #20
 80148a6:	114b      	asrs	r3, r1, #5
 80148a8:	4298      	cmp	r0, r3
 80148aa:	db13      	blt.n	80148d4 <__any_on+0x36>
 80148ac:	dd0c      	ble.n	80148c8 <__any_on+0x2a>
 80148ae:	241f      	movs	r4, #31
 80148b0:	0008      	movs	r0, r1
 80148b2:	4020      	ands	r0, r4
 80148b4:	4221      	tst	r1, r4
 80148b6:	d007      	beq.n	80148c8 <__any_on+0x2a>
 80148b8:	0099      	lsls	r1, r3, #2
 80148ba:	588c      	ldr	r4, [r1, r2]
 80148bc:	0021      	movs	r1, r4
 80148be:	40c1      	lsrs	r1, r0
 80148c0:	4081      	lsls	r1, r0
 80148c2:	2001      	movs	r0, #1
 80148c4:	428c      	cmp	r4, r1
 80148c6:	d104      	bne.n	80148d2 <__any_on+0x34>
 80148c8:	009b      	lsls	r3, r3, #2
 80148ca:	18d3      	adds	r3, r2, r3
 80148cc:	4293      	cmp	r3, r2
 80148ce:	d803      	bhi.n	80148d8 <__any_on+0x3a>
 80148d0:	2000      	movs	r0, #0
 80148d2:	bd10      	pop	{r4, pc}
 80148d4:	0003      	movs	r3, r0
 80148d6:	e7f7      	b.n	80148c8 <__any_on+0x2a>
 80148d8:	3b04      	subs	r3, #4
 80148da:	6819      	ldr	r1, [r3, #0]
 80148dc:	2900      	cmp	r1, #0
 80148de:	d0f5      	beq.n	80148cc <__any_on+0x2e>
 80148e0:	2001      	movs	r0, #1
 80148e2:	e7f6      	b.n	80148d2 <__any_on+0x34>

080148e4 <sulp>:
 80148e4:	b570      	push	{r4, r5, r6, lr}
 80148e6:	0016      	movs	r6, r2
 80148e8:	000d      	movs	r5, r1
 80148ea:	f7ff fec1 	bl	8014670 <__ulp>
 80148ee:	2e00      	cmp	r6, #0
 80148f0:	d00d      	beq.n	801490e <sulp+0x2a>
 80148f2:	236b      	movs	r3, #107	@ 0x6b
 80148f4:	006a      	lsls	r2, r5, #1
 80148f6:	0d52      	lsrs	r2, r2, #21
 80148f8:	1a9b      	subs	r3, r3, r2
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	dd07      	ble.n	801490e <sulp+0x2a>
 80148fe:	2400      	movs	r4, #0
 8014900:	4a03      	ldr	r2, [pc, #12]	@ (8014910 <sulp+0x2c>)
 8014902:	051b      	lsls	r3, r3, #20
 8014904:	189d      	adds	r5, r3, r2
 8014906:	002b      	movs	r3, r5
 8014908:	0022      	movs	r2, r4
 801490a:	f7ed fe37 	bl	800257c <__aeabi_dmul>
 801490e:	bd70      	pop	{r4, r5, r6, pc}
 8014910:	3ff00000 	.word	0x3ff00000

08014914 <_strtod_l>:
 8014914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014916:	b0a3      	sub	sp, #140	@ 0x8c
 8014918:	921b      	str	r2, [sp, #108]	@ 0x6c
 801491a:	2200      	movs	r2, #0
 801491c:	2600      	movs	r6, #0
 801491e:	2700      	movs	r7, #0
 8014920:	9005      	str	r0, [sp, #20]
 8014922:	9109      	str	r1, [sp, #36]	@ 0x24
 8014924:	921e      	str	r2, [sp, #120]	@ 0x78
 8014926:	911d      	str	r1, [sp, #116]	@ 0x74
 8014928:	780a      	ldrb	r2, [r1, #0]
 801492a:	2a2b      	cmp	r2, #43	@ 0x2b
 801492c:	d053      	beq.n	80149d6 <_strtod_l+0xc2>
 801492e:	d83f      	bhi.n	80149b0 <_strtod_l+0x9c>
 8014930:	2a0d      	cmp	r2, #13
 8014932:	d839      	bhi.n	80149a8 <_strtod_l+0x94>
 8014934:	2a08      	cmp	r2, #8
 8014936:	d839      	bhi.n	80149ac <_strtod_l+0x98>
 8014938:	2a00      	cmp	r2, #0
 801493a:	d042      	beq.n	80149c2 <_strtod_l+0xae>
 801493c:	2200      	movs	r2, #0
 801493e:	9212      	str	r2, [sp, #72]	@ 0x48
 8014940:	2100      	movs	r1, #0
 8014942:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8014944:	910c      	str	r1, [sp, #48]	@ 0x30
 8014946:	782a      	ldrb	r2, [r5, #0]
 8014948:	2a30      	cmp	r2, #48	@ 0x30
 801494a:	d000      	beq.n	801494e <_strtod_l+0x3a>
 801494c:	e083      	b.n	8014a56 <_strtod_l+0x142>
 801494e:	786a      	ldrb	r2, [r5, #1]
 8014950:	3120      	adds	r1, #32
 8014952:	438a      	bics	r2, r1
 8014954:	2a58      	cmp	r2, #88	@ 0x58
 8014956:	d000      	beq.n	801495a <_strtod_l+0x46>
 8014958:	e073      	b.n	8014a42 <_strtod_l+0x12e>
 801495a:	9302      	str	r3, [sp, #8]
 801495c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801495e:	4a95      	ldr	r2, [pc, #596]	@ (8014bb4 <_strtod_l+0x2a0>)
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	ab1e      	add	r3, sp, #120	@ 0x78
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	9805      	ldr	r0, [sp, #20]
 8014968:	ab1f      	add	r3, sp, #124	@ 0x7c
 801496a:	a91d      	add	r1, sp, #116	@ 0x74
 801496c:	f001 f95a 	bl	8015c24 <__gethex>
 8014970:	230f      	movs	r3, #15
 8014972:	0002      	movs	r2, r0
 8014974:	401a      	ands	r2, r3
 8014976:	0004      	movs	r4, r0
 8014978:	9206      	str	r2, [sp, #24]
 801497a:	4218      	tst	r0, r3
 801497c:	d005      	beq.n	801498a <_strtod_l+0x76>
 801497e:	2a06      	cmp	r2, #6
 8014980:	d12b      	bne.n	80149da <_strtod_l+0xc6>
 8014982:	2300      	movs	r3, #0
 8014984:	3501      	adds	r5, #1
 8014986:	951d      	str	r5, [sp, #116]	@ 0x74
 8014988:	9312      	str	r3, [sp, #72]	@ 0x48
 801498a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801498c:	2b00      	cmp	r3, #0
 801498e:	d002      	beq.n	8014996 <_strtod_l+0x82>
 8014990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014992:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014994:	6013      	str	r3, [r2, #0]
 8014996:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014998:	2b00      	cmp	r3, #0
 801499a:	d019      	beq.n	80149d0 <_strtod_l+0xbc>
 801499c:	2380      	movs	r3, #128	@ 0x80
 801499e:	0030      	movs	r0, r6
 80149a0:	061b      	lsls	r3, r3, #24
 80149a2:	18f9      	adds	r1, r7, r3
 80149a4:	b023      	add	sp, #140	@ 0x8c
 80149a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149a8:	2a20      	cmp	r2, #32
 80149aa:	d1c7      	bne.n	801493c <_strtod_l+0x28>
 80149ac:	3101      	adds	r1, #1
 80149ae:	e7ba      	b.n	8014926 <_strtod_l+0x12>
 80149b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80149b2:	d1c3      	bne.n	801493c <_strtod_l+0x28>
 80149b4:	3a2c      	subs	r2, #44	@ 0x2c
 80149b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80149b8:	1c4a      	adds	r2, r1, #1
 80149ba:	921d      	str	r2, [sp, #116]	@ 0x74
 80149bc:	784a      	ldrb	r2, [r1, #1]
 80149be:	2a00      	cmp	r2, #0
 80149c0:	d1be      	bne.n	8014940 <_strtod_l+0x2c>
 80149c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80149c6:	2300      	movs	r3, #0
 80149c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80149ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d1df      	bne.n	8014990 <_strtod_l+0x7c>
 80149d0:	0030      	movs	r0, r6
 80149d2:	0039      	movs	r1, r7
 80149d4:	e7e6      	b.n	80149a4 <_strtod_l+0x90>
 80149d6:	2200      	movs	r2, #0
 80149d8:	e7ed      	b.n	80149b6 <_strtod_l+0xa2>
 80149da:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80149dc:	2a00      	cmp	r2, #0
 80149de:	d007      	beq.n	80149f0 <_strtod_l+0xdc>
 80149e0:	2135      	movs	r1, #53	@ 0x35
 80149e2:	a820      	add	r0, sp, #128	@ 0x80
 80149e4:	f7ff ff3a 	bl	801485c <__copybits>
 80149e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80149ea:	9805      	ldr	r0, [sp, #20]
 80149ec:	f7ff faf4 	bl	8013fd8 <_Bfree>
 80149f0:	9806      	ldr	r0, [sp, #24]
 80149f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80149f4:	3801      	subs	r0, #1
 80149f6:	2804      	cmp	r0, #4
 80149f8:	d806      	bhi.n	8014a08 <_strtod_l+0xf4>
 80149fa:	f7eb fb8d 	bl	8000118 <__gnu_thumb1_case_uqi>
 80149fe:	0312      	.short	0x0312
 8014a00:	1e1c      	.short	0x1e1c
 8014a02:	12          	.byte	0x12
 8014a03:	00          	.byte	0x00
 8014a04:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014a06:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8014a08:	05e4      	lsls	r4, r4, #23
 8014a0a:	d502      	bpl.n	8014a12 <_strtod_l+0xfe>
 8014a0c:	2380      	movs	r3, #128	@ 0x80
 8014a0e:	061b      	lsls	r3, r3, #24
 8014a10:	431f      	orrs	r7, r3
 8014a12:	4b69      	ldr	r3, [pc, #420]	@ (8014bb8 <_strtod_l+0x2a4>)
 8014a14:	423b      	tst	r3, r7
 8014a16:	d1b8      	bne.n	801498a <_strtod_l+0x76>
 8014a18:	f7fe fad0 	bl	8012fbc <__errno>
 8014a1c:	2322      	movs	r3, #34	@ 0x22
 8014a1e:	6003      	str	r3, [r0, #0]
 8014a20:	e7b3      	b.n	801498a <_strtod_l+0x76>
 8014a22:	4966      	ldr	r1, [pc, #408]	@ (8014bbc <_strtod_l+0x2a8>)
 8014a24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014a26:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014a28:	400a      	ands	r2, r1
 8014a2a:	4965      	ldr	r1, [pc, #404]	@ (8014bc0 <_strtod_l+0x2ac>)
 8014a2c:	185b      	adds	r3, r3, r1
 8014a2e:	051b      	lsls	r3, r3, #20
 8014a30:	431a      	orrs	r2, r3
 8014a32:	0017      	movs	r7, r2
 8014a34:	e7e8      	b.n	8014a08 <_strtod_l+0xf4>
 8014a36:	4f60      	ldr	r7, [pc, #384]	@ (8014bb8 <_strtod_l+0x2a4>)
 8014a38:	e7e6      	b.n	8014a08 <_strtod_l+0xf4>
 8014a3a:	2601      	movs	r6, #1
 8014a3c:	4f61      	ldr	r7, [pc, #388]	@ (8014bc4 <_strtod_l+0x2b0>)
 8014a3e:	4276      	negs	r6, r6
 8014a40:	e7e2      	b.n	8014a08 <_strtod_l+0xf4>
 8014a42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014a44:	1c5a      	adds	r2, r3, #1
 8014a46:	921d      	str	r2, [sp, #116]	@ 0x74
 8014a48:	785b      	ldrb	r3, [r3, #1]
 8014a4a:	2b30      	cmp	r3, #48	@ 0x30
 8014a4c:	d0f9      	beq.n	8014a42 <_strtod_l+0x12e>
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d09b      	beq.n	801498a <_strtod_l+0x76>
 8014a52:	2301      	movs	r3, #1
 8014a54:	930c      	str	r3, [sp, #48]	@ 0x30
 8014a56:	2500      	movs	r5, #0
 8014a58:	220a      	movs	r2, #10
 8014a5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014a5c:	950d      	str	r5, [sp, #52]	@ 0x34
 8014a5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014a60:	9508      	str	r5, [sp, #32]
 8014a62:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014a64:	7804      	ldrb	r4, [r0, #0]
 8014a66:	0023      	movs	r3, r4
 8014a68:	3b30      	subs	r3, #48	@ 0x30
 8014a6a:	b2d9      	uxtb	r1, r3
 8014a6c:	2909      	cmp	r1, #9
 8014a6e:	d927      	bls.n	8014ac0 <_strtod_l+0x1ac>
 8014a70:	2201      	movs	r2, #1
 8014a72:	4955      	ldr	r1, [pc, #340]	@ (8014bc8 <_strtod_l+0x2b4>)
 8014a74:	f000 fff8 	bl	8015a68 <strncmp>
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d031      	beq.n	8014ae0 <_strtod_l+0x1cc>
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	0023      	movs	r3, r4
 8014a80:	4684      	mov	ip, r0
 8014a82:	9a08      	ldr	r2, [sp, #32]
 8014a84:	900e      	str	r0, [sp, #56]	@ 0x38
 8014a86:	9206      	str	r2, [sp, #24]
 8014a88:	2220      	movs	r2, #32
 8014a8a:	0019      	movs	r1, r3
 8014a8c:	4391      	bics	r1, r2
 8014a8e:	000a      	movs	r2, r1
 8014a90:	2100      	movs	r1, #0
 8014a92:	9107      	str	r1, [sp, #28]
 8014a94:	2a45      	cmp	r2, #69	@ 0x45
 8014a96:	d000      	beq.n	8014a9a <_strtod_l+0x186>
 8014a98:	e0c0      	b.n	8014c1c <_strtod_l+0x308>
 8014a9a:	9b06      	ldr	r3, [sp, #24]
 8014a9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014a9e:	4303      	orrs	r3, r0
 8014aa0:	4313      	orrs	r3, r2
 8014aa2:	428b      	cmp	r3, r1
 8014aa4:	d08d      	beq.n	80149c2 <_strtod_l+0xae>
 8014aa6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014aaa:	3301      	adds	r3, #1
 8014aac:	931d      	str	r3, [sp, #116]	@ 0x74
 8014aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ab0:	785b      	ldrb	r3, [r3, #1]
 8014ab2:	2b2b      	cmp	r3, #43	@ 0x2b
 8014ab4:	d070      	beq.n	8014b98 <_strtod_l+0x284>
 8014ab6:	000c      	movs	r4, r1
 8014ab8:	2b2d      	cmp	r3, #45	@ 0x2d
 8014aba:	d173      	bne.n	8014ba4 <_strtod_l+0x290>
 8014abc:	2401      	movs	r4, #1
 8014abe:	e06c      	b.n	8014b9a <_strtod_l+0x286>
 8014ac0:	9908      	ldr	r1, [sp, #32]
 8014ac2:	2908      	cmp	r1, #8
 8014ac4:	dc09      	bgt.n	8014ada <_strtod_l+0x1c6>
 8014ac6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014ac8:	4351      	muls	r1, r2
 8014aca:	185b      	adds	r3, r3, r1
 8014acc:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ace:	9b08      	ldr	r3, [sp, #32]
 8014ad0:	3001      	adds	r0, #1
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	9308      	str	r3, [sp, #32]
 8014ad6:	901d      	str	r0, [sp, #116]	@ 0x74
 8014ad8:	e7c3      	b.n	8014a62 <_strtod_l+0x14e>
 8014ada:	4355      	muls	r5, r2
 8014adc:	195d      	adds	r5, r3, r5
 8014ade:	e7f6      	b.n	8014ace <_strtod_l+0x1ba>
 8014ae0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ae2:	1c5a      	adds	r2, r3, #1
 8014ae4:	921d      	str	r2, [sp, #116]	@ 0x74
 8014ae6:	9a08      	ldr	r2, [sp, #32]
 8014ae8:	785b      	ldrb	r3, [r3, #1]
 8014aea:	2a00      	cmp	r2, #0
 8014aec:	d03a      	beq.n	8014b64 <_strtod_l+0x250>
 8014aee:	900e      	str	r0, [sp, #56]	@ 0x38
 8014af0:	9206      	str	r2, [sp, #24]
 8014af2:	001a      	movs	r2, r3
 8014af4:	3a30      	subs	r2, #48	@ 0x30
 8014af6:	2a09      	cmp	r2, #9
 8014af8:	d912      	bls.n	8014b20 <_strtod_l+0x20c>
 8014afa:	2201      	movs	r2, #1
 8014afc:	4694      	mov	ip, r2
 8014afe:	e7c3      	b.n	8014a88 <_strtod_l+0x174>
 8014b00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b02:	3001      	adds	r0, #1
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	921d      	str	r2, [sp, #116]	@ 0x74
 8014b08:	785b      	ldrb	r3, [r3, #1]
 8014b0a:	2b30      	cmp	r3, #48	@ 0x30
 8014b0c:	d0f8      	beq.n	8014b00 <_strtod_l+0x1ec>
 8014b0e:	001a      	movs	r2, r3
 8014b10:	3a31      	subs	r2, #49	@ 0x31
 8014b12:	2a08      	cmp	r2, #8
 8014b14:	d83b      	bhi.n	8014b8e <_strtod_l+0x27a>
 8014b16:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b18:	2000      	movs	r0, #0
 8014b1a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014b1c:	9006      	str	r0, [sp, #24]
 8014b1e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8014b20:	001a      	movs	r2, r3
 8014b22:	1c41      	adds	r1, r0, #1
 8014b24:	3a30      	subs	r2, #48	@ 0x30
 8014b26:	2b30      	cmp	r3, #48	@ 0x30
 8014b28:	d016      	beq.n	8014b58 <_strtod_l+0x244>
 8014b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b2c:	185b      	adds	r3, r3, r1
 8014b2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8014b30:	9b06      	ldr	r3, [sp, #24]
 8014b32:	210a      	movs	r1, #10
 8014b34:	469c      	mov	ip, r3
 8014b36:	4484      	add	ip, r0
 8014b38:	459c      	cmp	ip, r3
 8014b3a:	d115      	bne.n	8014b68 <_strtod_l+0x254>
 8014b3c:	9906      	ldr	r1, [sp, #24]
 8014b3e:	9b06      	ldr	r3, [sp, #24]
 8014b40:	3101      	adds	r1, #1
 8014b42:	1809      	adds	r1, r1, r0
 8014b44:	181b      	adds	r3, r3, r0
 8014b46:	9106      	str	r1, [sp, #24]
 8014b48:	2b08      	cmp	r3, #8
 8014b4a:	dc19      	bgt.n	8014b80 <_strtod_l+0x26c>
 8014b4c:	230a      	movs	r3, #10
 8014b4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014b50:	434b      	muls	r3, r1
 8014b52:	2100      	movs	r1, #0
 8014b54:	18d3      	adds	r3, r2, r3
 8014b56:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b5a:	0008      	movs	r0, r1
 8014b5c:	1c5a      	adds	r2, r3, #1
 8014b5e:	921d      	str	r2, [sp, #116]	@ 0x74
 8014b60:	785b      	ldrb	r3, [r3, #1]
 8014b62:	e7c6      	b.n	8014af2 <_strtod_l+0x1de>
 8014b64:	9808      	ldr	r0, [sp, #32]
 8014b66:	e7d0      	b.n	8014b0a <_strtod_l+0x1f6>
 8014b68:	1c5c      	adds	r4, r3, #1
 8014b6a:	2b08      	cmp	r3, #8
 8014b6c:	dc04      	bgt.n	8014b78 <_strtod_l+0x264>
 8014b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b70:	434b      	muls	r3, r1
 8014b72:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b74:	0023      	movs	r3, r4
 8014b76:	e7df      	b.n	8014b38 <_strtod_l+0x224>
 8014b78:	2c10      	cmp	r4, #16
 8014b7a:	dcfb      	bgt.n	8014b74 <_strtod_l+0x260>
 8014b7c:	434d      	muls	r5, r1
 8014b7e:	e7f9      	b.n	8014b74 <_strtod_l+0x260>
 8014b80:	2100      	movs	r1, #0
 8014b82:	2b0f      	cmp	r3, #15
 8014b84:	dce8      	bgt.n	8014b58 <_strtod_l+0x244>
 8014b86:	230a      	movs	r3, #10
 8014b88:	435d      	muls	r5, r3
 8014b8a:	1955      	adds	r5, r2, r5
 8014b8c:	e7e4      	b.n	8014b58 <_strtod_l+0x244>
 8014b8e:	2200      	movs	r2, #0
 8014b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8014b92:	9206      	str	r2, [sp, #24]
 8014b94:	3201      	adds	r2, #1
 8014b96:	e7b1      	b.n	8014afc <_strtod_l+0x1e8>
 8014b98:	2400      	movs	r4, #0
 8014b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b9c:	3302      	adds	r3, #2
 8014b9e:	931d      	str	r3, [sp, #116]	@ 0x74
 8014ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ba2:	789b      	ldrb	r3, [r3, #2]
 8014ba4:	001a      	movs	r2, r3
 8014ba6:	3a30      	subs	r2, #48	@ 0x30
 8014ba8:	2a09      	cmp	r2, #9
 8014baa:	d913      	bls.n	8014bd4 <_strtod_l+0x2c0>
 8014bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bae:	921d      	str	r2, [sp, #116]	@ 0x74
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	e032      	b.n	8014c1a <_strtod_l+0x306>
 8014bb4:	080174f8 	.word	0x080174f8
 8014bb8:	7ff00000 	.word	0x7ff00000
 8014bbc:	ffefffff 	.word	0xffefffff
 8014bc0:	00000433 	.word	0x00000433
 8014bc4:	7fffffff 	.word	0x7fffffff
 8014bc8:	080174e0 	.word	0x080174e0
 8014bcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014bce:	1c5a      	adds	r2, r3, #1
 8014bd0:	921d      	str	r2, [sp, #116]	@ 0x74
 8014bd2:	785b      	ldrb	r3, [r3, #1]
 8014bd4:	2b30      	cmp	r3, #48	@ 0x30
 8014bd6:	d0f9      	beq.n	8014bcc <_strtod_l+0x2b8>
 8014bd8:	2200      	movs	r2, #0
 8014bda:	9207      	str	r2, [sp, #28]
 8014bdc:	001a      	movs	r2, r3
 8014bde:	3a31      	subs	r2, #49	@ 0x31
 8014be0:	2a08      	cmp	r2, #8
 8014be2:	d81b      	bhi.n	8014c1c <_strtod_l+0x308>
 8014be4:	3b30      	subs	r3, #48	@ 0x30
 8014be6:	9310      	str	r3, [sp, #64]	@ 0x40
 8014be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014bea:	9307      	str	r3, [sp, #28]
 8014bec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014bee:	1c59      	adds	r1, r3, #1
 8014bf0:	911d      	str	r1, [sp, #116]	@ 0x74
 8014bf2:	785b      	ldrb	r3, [r3, #1]
 8014bf4:	001a      	movs	r2, r3
 8014bf6:	3a30      	subs	r2, #48	@ 0x30
 8014bf8:	2a09      	cmp	r2, #9
 8014bfa:	d93a      	bls.n	8014c72 <_strtod_l+0x35e>
 8014bfc:	9a07      	ldr	r2, [sp, #28]
 8014bfe:	1a8a      	subs	r2, r1, r2
 8014c00:	49b4      	ldr	r1, [pc, #720]	@ (8014ed4 <_strtod_l+0x5c0>)
 8014c02:	9107      	str	r1, [sp, #28]
 8014c04:	2a08      	cmp	r2, #8
 8014c06:	dc04      	bgt.n	8014c12 <_strtod_l+0x2fe>
 8014c08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014c0a:	9207      	str	r2, [sp, #28]
 8014c0c:	428a      	cmp	r2, r1
 8014c0e:	dd00      	ble.n	8014c12 <_strtod_l+0x2fe>
 8014c10:	9107      	str	r1, [sp, #28]
 8014c12:	2c00      	cmp	r4, #0
 8014c14:	d002      	beq.n	8014c1c <_strtod_l+0x308>
 8014c16:	9a07      	ldr	r2, [sp, #28]
 8014c18:	4252      	negs	r2, r2
 8014c1a:	9207      	str	r2, [sp, #28]
 8014c1c:	9a06      	ldr	r2, [sp, #24]
 8014c1e:	2a00      	cmp	r2, #0
 8014c20:	d14d      	bne.n	8014cbe <_strtod_l+0x3aa>
 8014c22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014c24:	4310      	orrs	r0, r2
 8014c26:	d000      	beq.n	8014c2a <_strtod_l+0x316>
 8014c28:	e6af      	b.n	801498a <_strtod_l+0x76>
 8014c2a:	4662      	mov	r2, ip
 8014c2c:	2a00      	cmp	r2, #0
 8014c2e:	d000      	beq.n	8014c32 <_strtod_l+0x31e>
 8014c30:	e6c7      	b.n	80149c2 <_strtod_l+0xae>
 8014c32:	2b69      	cmp	r3, #105	@ 0x69
 8014c34:	d027      	beq.n	8014c86 <_strtod_l+0x372>
 8014c36:	dc23      	bgt.n	8014c80 <_strtod_l+0x36c>
 8014c38:	2b49      	cmp	r3, #73	@ 0x49
 8014c3a:	d024      	beq.n	8014c86 <_strtod_l+0x372>
 8014c3c:	2b4e      	cmp	r3, #78	@ 0x4e
 8014c3e:	d000      	beq.n	8014c42 <_strtod_l+0x32e>
 8014c40:	e6bf      	b.n	80149c2 <_strtod_l+0xae>
 8014c42:	49a5      	ldr	r1, [pc, #660]	@ (8014ed8 <_strtod_l+0x5c4>)
 8014c44:	a81d      	add	r0, sp, #116	@ 0x74
 8014c46:	f001 fa23 	bl	8016090 <__match>
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	d100      	bne.n	8014c50 <_strtod_l+0x33c>
 8014c4e:	e6b8      	b.n	80149c2 <_strtod_l+0xae>
 8014c50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	2b28      	cmp	r3, #40	@ 0x28
 8014c56:	d12c      	bne.n	8014cb2 <_strtod_l+0x39e>
 8014c58:	49a0      	ldr	r1, [pc, #640]	@ (8014edc <_strtod_l+0x5c8>)
 8014c5a:	aa20      	add	r2, sp, #128	@ 0x80
 8014c5c:	a81d      	add	r0, sp, #116	@ 0x74
 8014c5e:	f001 fa2b 	bl	80160b8 <__hexnan>
 8014c62:	2805      	cmp	r0, #5
 8014c64:	d125      	bne.n	8014cb2 <_strtod_l+0x39e>
 8014c66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c68:	4a9d      	ldr	r2, [pc, #628]	@ (8014ee0 <_strtod_l+0x5cc>)
 8014c6a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014c6c:	431a      	orrs	r2, r3
 8014c6e:	0017      	movs	r7, r2
 8014c70:	e68b      	b.n	801498a <_strtod_l+0x76>
 8014c72:	220a      	movs	r2, #10
 8014c74:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014c76:	434a      	muls	r2, r1
 8014c78:	18d2      	adds	r2, r2, r3
 8014c7a:	3a30      	subs	r2, #48	@ 0x30
 8014c7c:	9210      	str	r2, [sp, #64]	@ 0x40
 8014c7e:	e7b5      	b.n	8014bec <_strtod_l+0x2d8>
 8014c80:	2b6e      	cmp	r3, #110	@ 0x6e
 8014c82:	d0de      	beq.n	8014c42 <_strtod_l+0x32e>
 8014c84:	e69d      	b.n	80149c2 <_strtod_l+0xae>
 8014c86:	4997      	ldr	r1, [pc, #604]	@ (8014ee4 <_strtod_l+0x5d0>)
 8014c88:	a81d      	add	r0, sp, #116	@ 0x74
 8014c8a:	f001 fa01 	bl	8016090 <__match>
 8014c8e:	2800      	cmp	r0, #0
 8014c90:	d100      	bne.n	8014c94 <_strtod_l+0x380>
 8014c92:	e696      	b.n	80149c2 <_strtod_l+0xae>
 8014c94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c96:	4994      	ldr	r1, [pc, #592]	@ (8014ee8 <_strtod_l+0x5d4>)
 8014c98:	3b01      	subs	r3, #1
 8014c9a:	a81d      	add	r0, sp, #116	@ 0x74
 8014c9c:	931d      	str	r3, [sp, #116]	@ 0x74
 8014c9e:	f001 f9f7 	bl	8016090 <__match>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	d102      	bne.n	8014cac <_strtod_l+0x398>
 8014ca6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ca8:	3301      	adds	r3, #1
 8014caa:	931d      	str	r3, [sp, #116]	@ 0x74
 8014cac:	2600      	movs	r6, #0
 8014cae:	4f8c      	ldr	r7, [pc, #560]	@ (8014ee0 <_strtod_l+0x5cc>)
 8014cb0:	e66b      	b.n	801498a <_strtod_l+0x76>
 8014cb2:	488e      	ldr	r0, [pc, #568]	@ (8014eec <_strtod_l+0x5d8>)
 8014cb4:	f000 fefc 	bl	8015ab0 <nan>
 8014cb8:	0006      	movs	r6, r0
 8014cba:	000f      	movs	r7, r1
 8014cbc:	e665      	b.n	801498a <_strtod_l+0x76>
 8014cbe:	9b07      	ldr	r3, [sp, #28]
 8014cc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014cc2:	1a9b      	subs	r3, r3, r2
 8014cc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8014cc6:	9b08      	ldr	r3, [sp, #32]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d101      	bne.n	8014cd0 <_strtod_l+0x3bc>
 8014ccc:	9b06      	ldr	r3, [sp, #24]
 8014cce:	9308      	str	r3, [sp, #32]
 8014cd0:	9c06      	ldr	r4, [sp, #24]
 8014cd2:	2c10      	cmp	r4, #16
 8014cd4:	dd00      	ble.n	8014cd8 <_strtod_l+0x3c4>
 8014cd6:	2410      	movs	r4, #16
 8014cd8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8014cda:	f7ee fb3f 	bl	800335c <__aeabi_ui2d>
 8014cde:	9b06      	ldr	r3, [sp, #24]
 8014ce0:	0006      	movs	r6, r0
 8014ce2:	000f      	movs	r7, r1
 8014ce4:	2b09      	cmp	r3, #9
 8014ce6:	dc13      	bgt.n	8014d10 <_strtod_l+0x3fc>
 8014ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d100      	bne.n	8014cf0 <_strtod_l+0x3dc>
 8014cee:	e64c      	b.n	801498a <_strtod_l+0x76>
 8014cf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	dc00      	bgt.n	8014cf8 <_strtod_l+0x3e4>
 8014cf6:	e07e      	b.n	8014df6 <_strtod_l+0x4e2>
 8014cf8:	2b16      	cmp	r3, #22
 8014cfa:	dc63      	bgt.n	8014dc4 <_strtod_l+0x4b0>
 8014cfc:	497c      	ldr	r1, [pc, #496]	@ (8014ef0 <_strtod_l+0x5dc>)
 8014cfe:	00db      	lsls	r3, r3, #3
 8014d00:	18c9      	adds	r1, r1, r3
 8014d02:	0032      	movs	r2, r6
 8014d04:	6808      	ldr	r0, [r1, #0]
 8014d06:	6849      	ldr	r1, [r1, #4]
 8014d08:	003b      	movs	r3, r7
 8014d0a:	f7ed fc37 	bl	800257c <__aeabi_dmul>
 8014d0e:	e7d3      	b.n	8014cb8 <_strtod_l+0x3a4>
 8014d10:	0022      	movs	r2, r4
 8014d12:	4b77      	ldr	r3, [pc, #476]	@ (8014ef0 <_strtod_l+0x5dc>)
 8014d14:	3a09      	subs	r2, #9
 8014d16:	00d2      	lsls	r2, r2, #3
 8014d18:	189b      	adds	r3, r3, r2
 8014d1a:	681a      	ldr	r2, [r3, #0]
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	f7ed fc2d 	bl	800257c <__aeabi_dmul>
 8014d22:	0006      	movs	r6, r0
 8014d24:	0028      	movs	r0, r5
 8014d26:	000f      	movs	r7, r1
 8014d28:	f7ee fb18 	bl	800335c <__aeabi_ui2d>
 8014d2c:	000b      	movs	r3, r1
 8014d2e:	0002      	movs	r2, r0
 8014d30:	0039      	movs	r1, r7
 8014d32:	0030      	movs	r0, r6
 8014d34:	f7ec fc7a 	bl	800162c <__aeabi_dadd>
 8014d38:	9b06      	ldr	r3, [sp, #24]
 8014d3a:	0006      	movs	r6, r0
 8014d3c:	000f      	movs	r7, r1
 8014d3e:	2b0f      	cmp	r3, #15
 8014d40:	ddd2      	ble.n	8014ce8 <_strtod_l+0x3d4>
 8014d42:	9b06      	ldr	r3, [sp, #24]
 8014d44:	1b1c      	subs	r4, r3, r4
 8014d46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d48:	18e4      	adds	r4, r4, r3
 8014d4a:	2c00      	cmp	r4, #0
 8014d4c:	dc00      	bgt.n	8014d50 <_strtod_l+0x43c>
 8014d4e:	e09b      	b.n	8014e88 <_strtod_l+0x574>
 8014d50:	220f      	movs	r2, #15
 8014d52:	0023      	movs	r3, r4
 8014d54:	4013      	ands	r3, r2
 8014d56:	4214      	tst	r4, r2
 8014d58:	d00a      	beq.n	8014d70 <_strtod_l+0x45c>
 8014d5a:	4965      	ldr	r1, [pc, #404]	@ (8014ef0 <_strtod_l+0x5dc>)
 8014d5c:	00db      	lsls	r3, r3, #3
 8014d5e:	18c9      	adds	r1, r1, r3
 8014d60:	0032      	movs	r2, r6
 8014d62:	6808      	ldr	r0, [r1, #0]
 8014d64:	6849      	ldr	r1, [r1, #4]
 8014d66:	003b      	movs	r3, r7
 8014d68:	f7ed fc08 	bl	800257c <__aeabi_dmul>
 8014d6c:	0006      	movs	r6, r0
 8014d6e:	000f      	movs	r7, r1
 8014d70:	230f      	movs	r3, #15
 8014d72:	439c      	bics	r4, r3
 8014d74:	d073      	beq.n	8014e5e <_strtod_l+0x54a>
 8014d76:	3326      	adds	r3, #38	@ 0x26
 8014d78:	33ff      	adds	r3, #255	@ 0xff
 8014d7a:	429c      	cmp	r4, r3
 8014d7c:	dd4b      	ble.n	8014e16 <_strtod_l+0x502>
 8014d7e:	2300      	movs	r3, #0
 8014d80:	9306      	str	r3, [sp, #24]
 8014d82:	9307      	str	r3, [sp, #28]
 8014d84:	930d      	str	r3, [sp, #52]	@ 0x34
 8014d86:	9308      	str	r3, [sp, #32]
 8014d88:	2322      	movs	r3, #34	@ 0x22
 8014d8a:	2600      	movs	r6, #0
 8014d8c:	9a05      	ldr	r2, [sp, #20]
 8014d8e:	4f54      	ldr	r7, [pc, #336]	@ (8014ee0 <_strtod_l+0x5cc>)
 8014d90:	6013      	str	r3, [r2, #0]
 8014d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d94:	42b3      	cmp	r3, r6
 8014d96:	d100      	bne.n	8014d9a <_strtod_l+0x486>
 8014d98:	e5f7      	b.n	801498a <_strtod_l+0x76>
 8014d9a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8014d9c:	9805      	ldr	r0, [sp, #20]
 8014d9e:	f7ff f91b 	bl	8013fd8 <_Bfree>
 8014da2:	9908      	ldr	r1, [sp, #32]
 8014da4:	9805      	ldr	r0, [sp, #20]
 8014da6:	f7ff f917 	bl	8013fd8 <_Bfree>
 8014daa:	9907      	ldr	r1, [sp, #28]
 8014dac:	9805      	ldr	r0, [sp, #20]
 8014dae:	f7ff f913 	bl	8013fd8 <_Bfree>
 8014db2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014db4:	9805      	ldr	r0, [sp, #20]
 8014db6:	f7ff f90f 	bl	8013fd8 <_Bfree>
 8014dba:	9906      	ldr	r1, [sp, #24]
 8014dbc:	9805      	ldr	r0, [sp, #20]
 8014dbe:	f7ff f90b 	bl	8013fd8 <_Bfree>
 8014dc2:	e5e2      	b.n	801498a <_strtod_l+0x76>
 8014dc4:	2325      	movs	r3, #37	@ 0x25
 8014dc6:	9a06      	ldr	r2, [sp, #24]
 8014dc8:	1a9b      	subs	r3, r3, r2
 8014dca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	dbb8      	blt.n	8014d42 <_strtod_l+0x42e>
 8014dd0:	240f      	movs	r4, #15
 8014dd2:	9b06      	ldr	r3, [sp, #24]
 8014dd4:	4d46      	ldr	r5, [pc, #280]	@ (8014ef0 <_strtod_l+0x5dc>)
 8014dd6:	1ae4      	subs	r4, r4, r3
 8014dd8:	00e1      	lsls	r1, r4, #3
 8014dda:	1869      	adds	r1, r5, r1
 8014ddc:	0032      	movs	r2, r6
 8014dde:	6808      	ldr	r0, [r1, #0]
 8014de0:	6849      	ldr	r1, [r1, #4]
 8014de2:	003b      	movs	r3, r7
 8014de4:	f7ed fbca 	bl	800257c <__aeabi_dmul>
 8014de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dea:	1b1c      	subs	r4, r3, r4
 8014dec:	00e4      	lsls	r4, r4, #3
 8014dee:	192d      	adds	r5, r5, r4
 8014df0:	682a      	ldr	r2, [r5, #0]
 8014df2:	686b      	ldr	r3, [r5, #4]
 8014df4:	e789      	b.n	8014d0a <_strtod_l+0x3f6>
 8014df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014df8:	3316      	adds	r3, #22
 8014dfa:	dba2      	blt.n	8014d42 <_strtod_l+0x42e>
 8014dfc:	9907      	ldr	r1, [sp, #28]
 8014dfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e00:	4b3b      	ldr	r3, [pc, #236]	@ (8014ef0 <_strtod_l+0x5dc>)
 8014e02:	1a52      	subs	r2, r2, r1
 8014e04:	00d2      	lsls	r2, r2, #3
 8014e06:	189b      	adds	r3, r3, r2
 8014e08:	0030      	movs	r0, r6
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	0039      	movs	r1, r7
 8014e10:	f7ec ff70 	bl	8001cf4 <__aeabi_ddiv>
 8014e14:	e750      	b.n	8014cb8 <_strtod_l+0x3a4>
 8014e16:	2300      	movs	r3, #0
 8014e18:	0030      	movs	r0, r6
 8014e1a:	0039      	movs	r1, r7
 8014e1c:	4d35      	ldr	r5, [pc, #212]	@ (8014ef4 <_strtod_l+0x5e0>)
 8014e1e:	1124      	asrs	r4, r4, #4
 8014e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e22:	2c01      	cmp	r4, #1
 8014e24:	dc1e      	bgt.n	8014e64 <_strtod_l+0x550>
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d001      	beq.n	8014e2e <_strtod_l+0x51a>
 8014e2a:	0006      	movs	r6, r0
 8014e2c:	000f      	movs	r7, r1
 8014e2e:	4b32      	ldr	r3, [pc, #200]	@ (8014ef8 <_strtod_l+0x5e4>)
 8014e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e32:	18ff      	adds	r7, r7, r3
 8014e34:	4b2f      	ldr	r3, [pc, #188]	@ (8014ef4 <_strtod_l+0x5e0>)
 8014e36:	00d5      	lsls	r5, r2, #3
 8014e38:	195d      	adds	r5, r3, r5
 8014e3a:	0032      	movs	r2, r6
 8014e3c:	6828      	ldr	r0, [r5, #0]
 8014e3e:	6869      	ldr	r1, [r5, #4]
 8014e40:	003b      	movs	r3, r7
 8014e42:	f7ed fb9b 	bl	800257c <__aeabi_dmul>
 8014e46:	4b26      	ldr	r3, [pc, #152]	@ (8014ee0 <_strtod_l+0x5cc>)
 8014e48:	4a2c      	ldr	r2, [pc, #176]	@ (8014efc <_strtod_l+0x5e8>)
 8014e4a:	0006      	movs	r6, r0
 8014e4c:	400b      	ands	r3, r1
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d895      	bhi.n	8014d7e <_strtod_l+0x46a>
 8014e52:	4a2b      	ldr	r2, [pc, #172]	@ (8014f00 <_strtod_l+0x5ec>)
 8014e54:	4293      	cmp	r3, r2
 8014e56:	d913      	bls.n	8014e80 <_strtod_l+0x56c>
 8014e58:	2601      	movs	r6, #1
 8014e5a:	4f2a      	ldr	r7, [pc, #168]	@ (8014f04 <_strtod_l+0x5f0>)
 8014e5c:	4276      	negs	r6, r6
 8014e5e:	2300      	movs	r3, #0
 8014e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e62:	e086      	b.n	8014f72 <_strtod_l+0x65e>
 8014e64:	2201      	movs	r2, #1
 8014e66:	4214      	tst	r4, r2
 8014e68:	d004      	beq.n	8014e74 <_strtod_l+0x560>
 8014e6a:	682a      	ldr	r2, [r5, #0]
 8014e6c:	686b      	ldr	r3, [r5, #4]
 8014e6e:	f7ed fb85 	bl	800257c <__aeabi_dmul>
 8014e72:	2301      	movs	r3, #1
 8014e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e76:	1064      	asrs	r4, r4, #1
 8014e78:	3201      	adds	r2, #1
 8014e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e7c:	3508      	adds	r5, #8
 8014e7e:	e7d0      	b.n	8014e22 <_strtod_l+0x50e>
 8014e80:	23d4      	movs	r3, #212	@ 0xd4
 8014e82:	049b      	lsls	r3, r3, #18
 8014e84:	18cf      	adds	r7, r1, r3
 8014e86:	e7ea      	b.n	8014e5e <_strtod_l+0x54a>
 8014e88:	2c00      	cmp	r4, #0
 8014e8a:	d0e8      	beq.n	8014e5e <_strtod_l+0x54a>
 8014e8c:	4264      	negs	r4, r4
 8014e8e:	230f      	movs	r3, #15
 8014e90:	0022      	movs	r2, r4
 8014e92:	401a      	ands	r2, r3
 8014e94:	421c      	tst	r4, r3
 8014e96:	d00a      	beq.n	8014eae <_strtod_l+0x59a>
 8014e98:	4b15      	ldr	r3, [pc, #84]	@ (8014ef0 <_strtod_l+0x5dc>)
 8014e9a:	00d2      	lsls	r2, r2, #3
 8014e9c:	189b      	adds	r3, r3, r2
 8014e9e:	0030      	movs	r0, r6
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	0039      	movs	r1, r7
 8014ea6:	f7ec ff25 	bl	8001cf4 <__aeabi_ddiv>
 8014eaa:	0006      	movs	r6, r0
 8014eac:	000f      	movs	r7, r1
 8014eae:	1124      	asrs	r4, r4, #4
 8014eb0:	d0d5      	beq.n	8014e5e <_strtod_l+0x54a>
 8014eb2:	2c1f      	cmp	r4, #31
 8014eb4:	dd28      	ble.n	8014f08 <_strtod_l+0x5f4>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	9306      	str	r3, [sp, #24]
 8014eba:	9307      	str	r3, [sp, #28]
 8014ebc:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ebe:	9308      	str	r3, [sp, #32]
 8014ec0:	2322      	movs	r3, #34	@ 0x22
 8014ec2:	9a05      	ldr	r2, [sp, #20]
 8014ec4:	2600      	movs	r6, #0
 8014ec6:	6013      	str	r3, [r2, #0]
 8014ec8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014eca:	2700      	movs	r7, #0
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d000      	beq.n	8014ed2 <_strtod_l+0x5be>
 8014ed0:	e763      	b.n	8014d9a <_strtod_l+0x486>
 8014ed2:	e55a      	b.n	801498a <_strtod_l+0x76>
 8014ed4:	00004e1f 	.word	0x00004e1f
 8014ed8:	080172cd 	.word	0x080172cd
 8014edc:	080174e4 	.word	0x080174e4
 8014ee0:	7ff00000 	.word	0x7ff00000
 8014ee4:	080172c5 	.word	0x080172c5
 8014ee8:	080172fc 	.word	0x080172fc
 8014eec:	0801768d 	.word	0x0801768d
 8014ef0:	08017418 	.word	0x08017418
 8014ef4:	080173f0 	.word	0x080173f0
 8014ef8:	fcb00000 	.word	0xfcb00000
 8014efc:	7ca00000 	.word	0x7ca00000
 8014f00:	7c900000 	.word	0x7c900000
 8014f04:	7fefffff 	.word	0x7fefffff
 8014f08:	2310      	movs	r3, #16
 8014f0a:	0022      	movs	r2, r4
 8014f0c:	401a      	ands	r2, r3
 8014f0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f10:	421c      	tst	r4, r3
 8014f12:	d001      	beq.n	8014f18 <_strtod_l+0x604>
 8014f14:	335a      	adds	r3, #90	@ 0x5a
 8014f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f18:	0030      	movs	r0, r6
 8014f1a:	0039      	movs	r1, r7
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	4dbf      	ldr	r5, [pc, #764]	@ (801521c <_strtod_l+0x908>)
 8014f20:	2201      	movs	r2, #1
 8014f22:	4214      	tst	r4, r2
 8014f24:	d004      	beq.n	8014f30 <_strtod_l+0x61c>
 8014f26:	682a      	ldr	r2, [r5, #0]
 8014f28:	686b      	ldr	r3, [r5, #4]
 8014f2a:	f7ed fb27 	bl	800257c <__aeabi_dmul>
 8014f2e:	2301      	movs	r3, #1
 8014f30:	1064      	asrs	r4, r4, #1
 8014f32:	3508      	adds	r5, #8
 8014f34:	2c00      	cmp	r4, #0
 8014f36:	d1f3      	bne.n	8014f20 <_strtod_l+0x60c>
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d001      	beq.n	8014f40 <_strtod_l+0x62c>
 8014f3c:	0006      	movs	r6, r0
 8014f3e:	000f      	movs	r7, r1
 8014f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d00d      	beq.n	8014f62 <_strtod_l+0x64e>
 8014f46:	236b      	movs	r3, #107	@ 0x6b
 8014f48:	007a      	lsls	r2, r7, #1
 8014f4a:	0d52      	lsrs	r2, r2, #21
 8014f4c:	0039      	movs	r1, r7
 8014f4e:	1a9b      	subs	r3, r3, r2
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	dd06      	ble.n	8014f62 <_strtod_l+0x64e>
 8014f54:	2b1f      	cmp	r3, #31
 8014f56:	dd5a      	ble.n	801500e <_strtod_l+0x6fa>
 8014f58:	2600      	movs	r6, #0
 8014f5a:	2b34      	cmp	r3, #52	@ 0x34
 8014f5c:	dd50      	ble.n	8015000 <_strtod_l+0x6ec>
 8014f5e:	27dc      	movs	r7, #220	@ 0xdc
 8014f60:	04bf      	lsls	r7, r7, #18
 8014f62:	2200      	movs	r2, #0
 8014f64:	2300      	movs	r3, #0
 8014f66:	0030      	movs	r0, r6
 8014f68:	0039      	movs	r1, r7
 8014f6a:	f7eb fa6f 	bl	800044c <__aeabi_dcmpeq>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d1a1      	bne.n	8014eb6 <_strtod_l+0x5a2>
 8014f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014f74:	9a08      	ldr	r2, [sp, #32]
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014f7a:	9b06      	ldr	r3, [sp, #24]
 8014f7c:	9805      	ldr	r0, [sp, #20]
 8014f7e:	f7ff f893 	bl	80140a8 <__s2b>
 8014f82:	900d      	str	r0, [sp, #52]	@ 0x34
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d100      	bne.n	8014f8a <_strtod_l+0x676>
 8014f88:	e6f9      	b.n	8014d7e <_strtod_l+0x46a>
 8014f8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f8c:	9907      	ldr	r1, [sp, #28]
 8014f8e:	17da      	asrs	r2, r3, #31
 8014f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f92:	1a5b      	subs	r3, r3, r1
 8014f94:	401a      	ands	r2, r3
 8014f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014f9a:	43db      	mvns	r3, r3
 8014f9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014f9e:	17db      	asrs	r3, r3, #31
 8014fa0:	401a      	ands	r2, r3
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8014fa6:	9306      	str	r3, [sp, #24]
 8014fa8:	9307      	str	r3, [sp, #28]
 8014faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fac:	9805      	ldr	r0, [sp, #20]
 8014fae:	6859      	ldr	r1, [r3, #4]
 8014fb0:	f7fe ffce 	bl	8013f50 <_Balloc>
 8014fb4:	9008      	str	r0, [sp, #32]
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	d100      	bne.n	8014fbc <_strtod_l+0x6a8>
 8014fba:	e6e5      	b.n	8014d88 <_strtod_l+0x474>
 8014fbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fbe:	300c      	adds	r0, #12
 8014fc0:	0019      	movs	r1, r3
 8014fc2:	691a      	ldr	r2, [r3, #16]
 8014fc4:	310c      	adds	r1, #12
 8014fc6:	3202      	adds	r2, #2
 8014fc8:	0092      	lsls	r2, r2, #2
 8014fca:	f7fe f82f 	bl	801302c <memcpy>
 8014fce:	ab20      	add	r3, sp, #128	@ 0x80
 8014fd0:	9301      	str	r3, [sp, #4]
 8014fd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014fd4:	9300      	str	r3, [sp, #0]
 8014fd6:	0032      	movs	r2, r6
 8014fd8:	003b      	movs	r3, r7
 8014fda:	9805      	ldr	r0, [sp, #20]
 8014fdc:	9610      	str	r6, [sp, #64]	@ 0x40
 8014fde:	9711      	str	r7, [sp, #68]	@ 0x44
 8014fe0:	f7ff fbb2 	bl	8014748 <__d2b>
 8014fe4:	901e      	str	r0, [sp, #120]	@ 0x78
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d100      	bne.n	8014fec <_strtod_l+0x6d8>
 8014fea:	e6cd      	b.n	8014d88 <_strtod_l+0x474>
 8014fec:	2101      	movs	r1, #1
 8014fee:	9805      	ldr	r0, [sp, #20]
 8014ff0:	f7ff f8f6 	bl	80141e0 <__i2b>
 8014ff4:	9007      	str	r0, [sp, #28]
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d10e      	bne.n	8015018 <_strtod_l+0x704>
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	9307      	str	r3, [sp, #28]
 8014ffe:	e6c3      	b.n	8014d88 <_strtod_l+0x474>
 8015000:	234b      	movs	r3, #75	@ 0x4b
 8015002:	1a9a      	subs	r2, r3, r2
 8015004:	3b4c      	subs	r3, #76	@ 0x4c
 8015006:	4093      	lsls	r3, r2
 8015008:	4019      	ands	r1, r3
 801500a:	000f      	movs	r7, r1
 801500c:	e7a9      	b.n	8014f62 <_strtod_l+0x64e>
 801500e:	2201      	movs	r2, #1
 8015010:	4252      	negs	r2, r2
 8015012:	409a      	lsls	r2, r3
 8015014:	4016      	ands	r6, r2
 8015016:	e7a4      	b.n	8014f62 <_strtod_l+0x64e>
 8015018:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801501a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801501c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801501e:	1ad4      	subs	r4, r2, r3
 8015020:	2b00      	cmp	r3, #0
 8015022:	db01      	blt.n	8015028 <_strtod_l+0x714>
 8015024:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8015026:	195d      	adds	r5, r3, r5
 8015028:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801502a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801502c:	1a5b      	subs	r3, r3, r1
 801502e:	2136      	movs	r1, #54	@ 0x36
 8015030:	189b      	adds	r3, r3, r2
 8015032:	1a8a      	subs	r2, r1, r2
 8015034:	497a      	ldr	r1, [pc, #488]	@ (8015220 <_strtod_l+0x90c>)
 8015036:	2001      	movs	r0, #1
 8015038:	468c      	mov	ip, r1
 801503a:	2100      	movs	r1, #0
 801503c:	3b01      	subs	r3, #1
 801503e:	9116      	str	r1, [sp, #88]	@ 0x58
 8015040:	9014      	str	r0, [sp, #80]	@ 0x50
 8015042:	4563      	cmp	r3, ip
 8015044:	da06      	bge.n	8015054 <_strtod_l+0x740>
 8015046:	4661      	mov	r1, ip
 8015048:	1ac9      	subs	r1, r1, r3
 801504a:	1a52      	subs	r2, r2, r1
 801504c:	291f      	cmp	r1, #31
 801504e:	dc3f      	bgt.n	80150d0 <_strtod_l+0x7bc>
 8015050:	4088      	lsls	r0, r1
 8015052:	9014      	str	r0, [sp, #80]	@ 0x50
 8015054:	18ab      	adds	r3, r5, r2
 8015056:	930e      	str	r3, [sp, #56]	@ 0x38
 8015058:	18a4      	adds	r4, r4, r2
 801505a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801505c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801505e:	191c      	adds	r4, r3, r4
 8015060:	002b      	movs	r3, r5
 8015062:	4295      	cmp	r5, r2
 8015064:	dd00      	ble.n	8015068 <_strtod_l+0x754>
 8015066:	0013      	movs	r3, r2
 8015068:	42a3      	cmp	r3, r4
 801506a:	dd00      	ble.n	801506e <_strtod_l+0x75a>
 801506c:	0023      	movs	r3, r4
 801506e:	2b00      	cmp	r3, #0
 8015070:	dd04      	ble.n	801507c <_strtod_l+0x768>
 8015072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015074:	1ae4      	subs	r4, r4, r3
 8015076:	1ad2      	subs	r2, r2, r3
 8015078:	920e      	str	r2, [sp, #56]	@ 0x38
 801507a:	1aed      	subs	r5, r5, r3
 801507c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801507e:	2b00      	cmp	r3, #0
 8015080:	dd16      	ble.n	80150b0 <_strtod_l+0x79c>
 8015082:	001a      	movs	r2, r3
 8015084:	9907      	ldr	r1, [sp, #28]
 8015086:	9805      	ldr	r0, [sp, #20]
 8015088:	f7ff f974 	bl	8014374 <__pow5mult>
 801508c:	9007      	str	r0, [sp, #28]
 801508e:	2800      	cmp	r0, #0
 8015090:	d0b3      	beq.n	8014ffa <_strtod_l+0x6e6>
 8015092:	0001      	movs	r1, r0
 8015094:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8015096:	9805      	ldr	r0, [sp, #20]
 8015098:	f7ff f8ba 	bl	8014210 <__multiply>
 801509c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801509e:	2800      	cmp	r0, #0
 80150a0:	d100      	bne.n	80150a4 <_strtod_l+0x790>
 80150a2:	e671      	b.n	8014d88 <_strtod_l+0x474>
 80150a4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80150a6:	9805      	ldr	r0, [sp, #20]
 80150a8:	f7fe ff96 	bl	8013fd8 <_Bfree>
 80150ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80150ae:	931e      	str	r3, [sp, #120]	@ 0x78
 80150b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	dc12      	bgt.n	80150dc <_strtod_l+0x7c8>
 80150b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	dd18      	ble.n	80150ee <_strtod_l+0x7da>
 80150bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80150be:	9908      	ldr	r1, [sp, #32]
 80150c0:	9805      	ldr	r0, [sp, #20]
 80150c2:	f7ff f957 	bl	8014374 <__pow5mult>
 80150c6:	9008      	str	r0, [sp, #32]
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d110      	bne.n	80150ee <_strtod_l+0x7da>
 80150cc:	2300      	movs	r3, #0
 80150ce:	e65a      	b.n	8014d86 <_strtod_l+0x472>
 80150d0:	4954      	ldr	r1, [pc, #336]	@ (8015224 <_strtod_l+0x910>)
 80150d2:	1acb      	subs	r3, r1, r3
 80150d4:	0001      	movs	r1, r0
 80150d6:	4099      	lsls	r1, r3
 80150d8:	9116      	str	r1, [sp, #88]	@ 0x58
 80150da:	e7ba      	b.n	8015052 <_strtod_l+0x73e>
 80150dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80150de:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80150e0:	9805      	ldr	r0, [sp, #20]
 80150e2:	f7ff f9a3 	bl	801442c <__lshift>
 80150e6:	901e      	str	r0, [sp, #120]	@ 0x78
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d1e4      	bne.n	80150b6 <_strtod_l+0x7a2>
 80150ec:	e64c      	b.n	8014d88 <_strtod_l+0x474>
 80150ee:	2c00      	cmp	r4, #0
 80150f0:	dd07      	ble.n	8015102 <_strtod_l+0x7ee>
 80150f2:	0022      	movs	r2, r4
 80150f4:	9908      	ldr	r1, [sp, #32]
 80150f6:	9805      	ldr	r0, [sp, #20]
 80150f8:	f7ff f998 	bl	801442c <__lshift>
 80150fc:	9008      	str	r0, [sp, #32]
 80150fe:	2800      	cmp	r0, #0
 8015100:	d0e4      	beq.n	80150cc <_strtod_l+0x7b8>
 8015102:	2d00      	cmp	r5, #0
 8015104:	dd08      	ble.n	8015118 <_strtod_l+0x804>
 8015106:	002a      	movs	r2, r5
 8015108:	9907      	ldr	r1, [sp, #28]
 801510a:	9805      	ldr	r0, [sp, #20]
 801510c:	f7ff f98e 	bl	801442c <__lshift>
 8015110:	9007      	str	r0, [sp, #28]
 8015112:	2800      	cmp	r0, #0
 8015114:	d100      	bne.n	8015118 <_strtod_l+0x804>
 8015116:	e637      	b.n	8014d88 <_strtod_l+0x474>
 8015118:	9a08      	ldr	r2, [sp, #32]
 801511a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801511c:	9805      	ldr	r0, [sp, #20]
 801511e:	f7ff fa0d 	bl	801453c <__mdiff>
 8015122:	9006      	str	r0, [sp, #24]
 8015124:	2800      	cmp	r0, #0
 8015126:	d100      	bne.n	801512a <_strtod_l+0x816>
 8015128:	e62e      	b.n	8014d88 <_strtod_l+0x474>
 801512a:	68c3      	ldr	r3, [r0, #12]
 801512c:	9907      	ldr	r1, [sp, #28]
 801512e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015130:	2300      	movs	r3, #0
 8015132:	60c3      	str	r3, [r0, #12]
 8015134:	f7ff f9e6 	bl	8014504 <__mcmp>
 8015138:	2800      	cmp	r0, #0
 801513a:	da3b      	bge.n	80151b4 <_strtod_l+0x8a0>
 801513c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801513e:	4333      	orrs	r3, r6
 8015140:	d167      	bne.n	8015212 <_strtod_l+0x8fe>
 8015142:	033b      	lsls	r3, r7, #12
 8015144:	d165      	bne.n	8015212 <_strtod_l+0x8fe>
 8015146:	22d6      	movs	r2, #214	@ 0xd6
 8015148:	4b37      	ldr	r3, [pc, #220]	@ (8015228 <_strtod_l+0x914>)
 801514a:	04d2      	lsls	r2, r2, #19
 801514c:	403b      	ands	r3, r7
 801514e:	4293      	cmp	r3, r2
 8015150:	d95f      	bls.n	8015212 <_strtod_l+0x8fe>
 8015152:	9b06      	ldr	r3, [sp, #24]
 8015154:	695b      	ldr	r3, [r3, #20]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d103      	bne.n	8015162 <_strtod_l+0x84e>
 801515a:	9b06      	ldr	r3, [sp, #24]
 801515c:	691b      	ldr	r3, [r3, #16]
 801515e:	2b01      	cmp	r3, #1
 8015160:	dd57      	ble.n	8015212 <_strtod_l+0x8fe>
 8015162:	9906      	ldr	r1, [sp, #24]
 8015164:	2201      	movs	r2, #1
 8015166:	9805      	ldr	r0, [sp, #20]
 8015168:	f7ff f960 	bl	801442c <__lshift>
 801516c:	9907      	ldr	r1, [sp, #28]
 801516e:	9006      	str	r0, [sp, #24]
 8015170:	f7ff f9c8 	bl	8014504 <__mcmp>
 8015174:	2800      	cmp	r0, #0
 8015176:	dd4c      	ble.n	8015212 <_strtod_l+0x8fe>
 8015178:	4b2b      	ldr	r3, [pc, #172]	@ (8015228 <_strtod_l+0x914>)
 801517a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801517c:	403b      	ands	r3, r7
 801517e:	2a00      	cmp	r2, #0
 8015180:	d074      	beq.n	801526c <_strtod_l+0x958>
 8015182:	22d6      	movs	r2, #214	@ 0xd6
 8015184:	04d2      	lsls	r2, r2, #19
 8015186:	4293      	cmp	r3, r2
 8015188:	d870      	bhi.n	801526c <_strtod_l+0x958>
 801518a:	22dc      	movs	r2, #220	@ 0xdc
 801518c:	0492      	lsls	r2, r2, #18
 801518e:	4293      	cmp	r3, r2
 8015190:	d800      	bhi.n	8015194 <_strtod_l+0x880>
 8015192:	e695      	b.n	8014ec0 <_strtod_l+0x5ac>
 8015194:	0030      	movs	r0, r6
 8015196:	0039      	movs	r1, r7
 8015198:	4b24      	ldr	r3, [pc, #144]	@ (801522c <_strtod_l+0x918>)
 801519a:	2200      	movs	r2, #0
 801519c:	f7ed f9ee 	bl	800257c <__aeabi_dmul>
 80151a0:	4b21      	ldr	r3, [pc, #132]	@ (8015228 <_strtod_l+0x914>)
 80151a2:	0006      	movs	r6, r0
 80151a4:	000f      	movs	r7, r1
 80151a6:	420b      	tst	r3, r1
 80151a8:	d000      	beq.n	80151ac <_strtod_l+0x898>
 80151aa:	e5f6      	b.n	8014d9a <_strtod_l+0x486>
 80151ac:	2322      	movs	r3, #34	@ 0x22
 80151ae:	9a05      	ldr	r2, [sp, #20]
 80151b0:	6013      	str	r3, [r2, #0]
 80151b2:	e5f2      	b.n	8014d9a <_strtod_l+0x486>
 80151b4:	970e      	str	r7, [sp, #56]	@ 0x38
 80151b6:	2800      	cmp	r0, #0
 80151b8:	d175      	bne.n	80152a6 <_strtod_l+0x992>
 80151ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80151bc:	033b      	lsls	r3, r7, #12
 80151be:	0b1b      	lsrs	r3, r3, #12
 80151c0:	2a00      	cmp	r2, #0
 80151c2:	d039      	beq.n	8015238 <_strtod_l+0x924>
 80151c4:	4a1a      	ldr	r2, [pc, #104]	@ (8015230 <_strtod_l+0x91c>)
 80151c6:	4293      	cmp	r3, r2
 80151c8:	d138      	bne.n	801523c <_strtod_l+0x928>
 80151ca:	2101      	movs	r1, #1
 80151cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151ce:	4249      	negs	r1, r1
 80151d0:	0032      	movs	r2, r6
 80151d2:	0008      	movs	r0, r1
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00b      	beq.n	80151f0 <_strtod_l+0x8dc>
 80151d8:	24d4      	movs	r4, #212	@ 0xd4
 80151da:	4b13      	ldr	r3, [pc, #76]	@ (8015228 <_strtod_l+0x914>)
 80151dc:	0008      	movs	r0, r1
 80151de:	403b      	ands	r3, r7
 80151e0:	04e4      	lsls	r4, r4, #19
 80151e2:	42a3      	cmp	r3, r4
 80151e4:	d804      	bhi.n	80151f0 <_strtod_l+0x8dc>
 80151e6:	306c      	adds	r0, #108	@ 0x6c
 80151e8:	0d1b      	lsrs	r3, r3, #20
 80151ea:	1ac3      	subs	r3, r0, r3
 80151ec:	4099      	lsls	r1, r3
 80151ee:	0008      	movs	r0, r1
 80151f0:	4282      	cmp	r2, r0
 80151f2:	d123      	bne.n	801523c <_strtod_l+0x928>
 80151f4:	4b0f      	ldr	r3, [pc, #60]	@ (8015234 <_strtod_l+0x920>)
 80151f6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80151f8:	4299      	cmp	r1, r3
 80151fa:	d102      	bne.n	8015202 <_strtod_l+0x8ee>
 80151fc:	3201      	adds	r2, #1
 80151fe:	d100      	bne.n	8015202 <_strtod_l+0x8ee>
 8015200:	e5c2      	b.n	8014d88 <_strtod_l+0x474>
 8015202:	4b09      	ldr	r3, [pc, #36]	@ (8015228 <_strtod_l+0x914>)
 8015204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015206:	2600      	movs	r6, #0
 8015208:	401a      	ands	r2, r3
 801520a:	0013      	movs	r3, r2
 801520c:	2280      	movs	r2, #128	@ 0x80
 801520e:	0352      	lsls	r2, r2, #13
 8015210:	189f      	adds	r7, r3, r2
 8015212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015214:	2b00      	cmp	r3, #0
 8015216:	d1bd      	bne.n	8015194 <_strtod_l+0x880>
 8015218:	e5bf      	b.n	8014d9a <_strtod_l+0x486>
 801521a:	46c0      	nop			@ (mov r8, r8)
 801521c:	08017510 	.word	0x08017510
 8015220:	fffffc02 	.word	0xfffffc02
 8015224:	fffffbe2 	.word	0xfffffbe2
 8015228:	7ff00000 	.word	0x7ff00000
 801522c:	39500000 	.word	0x39500000
 8015230:	000fffff 	.word	0x000fffff
 8015234:	7fefffff 	.word	0x7fefffff
 8015238:	4333      	orrs	r3, r6
 801523a:	d09d      	beq.n	8015178 <_strtod_l+0x864>
 801523c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801523e:	2b00      	cmp	r3, #0
 8015240:	d01c      	beq.n	801527c <_strtod_l+0x968>
 8015242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015244:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015246:	4213      	tst	r3, r2
 8015248:	d0e3      	beq.n	8015212 <_strtod_l+0x8fe>
 801524a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801524c:	0030      	movs	r0, r6
 801524e:	0039      	movs	r1, r7
 8015250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015252:	2b00      	cmp	r3, #0
 8015254:	d016      	beq.n	8015284 <_strtod_l+0x970>
 8015256:	f7ff fb45 	bl	80148e4 <sulp>
 801525a:	0002      	movs	r2, r0
 801525c:	000b      	movs	r3, r1
 801525e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015260:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015262:	f7ec f9e3 	bl	800162c <__aeabi_dadd>
 8015266:	0006      	movs	r6, r0
 8015268:	000f      	movs	r7, r1
 801526a:	e7d2      	b.n	8015212 <_strtod_l+0x8fe>
 801526c:	2601      	movs	r6, #1
 801526e:	4a92      	ldr	r2, [pc, #584]	@ (80154b8 <_strtod_l+0xba4>)
 8015270:	4276      	negs	r6, r6
 8015272:	189b      	adds	r3, r3, r2
 8015274:	4a91      	ldr	r2, [pc, #580]	@ (80154bc <_strtod_l+0xba8>)
 8015276:	431a      	orrs	r2, r3
 8015278:	0017      	movs	r7, r2
 801527a:	e7ca      	b.n	8015212 <_strtod_l+0x8fe>
 801527c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801527e:	4233      	tst	r3, r6
 8015280:	d0c7      	beq.n	8015212 <_strtod_l+0x8fe>
 8015282:	e7e2      	b.n	801524a <_strtod_l+0x936>
 8015284:	f7ff fb2e 	bl	80148e4 <sulp>
 8015288:	0002      	movs	r2, r0
 801528a:	000b      	movs	r3, r1
 801528c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801528e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015290:	f7ed fc3c 	bl	8002b0c <__aeabi_dsub>
 8015294:	2200      	movs	r2, #0
 8015296:	2300      	movs	r3, #0
 8015298:	0006      	movs	r6, r0
 801529a:	000f      	movs	r7, r1
 801529c:	f7eb f8d6 	bl	800044c <__aeabi_dcmpeq>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d0b6      	beq.n	8015212 <_strtod_l+0x8fe>
 80152a4:	e60c      	b.n	8014ec0 <_strtod_l+0x5ac>
 80152a6:	9907      	ldr	r1, [sp, #28]
 80152a8:	9806      	ldr	r0, [sp, #24]
 80152aa:	f7ff faad 	bl	8014808 <__ratio>
 80152ae:	2380      	movs	r3, #128	@ 0x80
 80152b0:	2200      	movs	r2, #0
 80152b2:	05db      	lsls	r3, r3, #23
 80152b4:	0004      	movs	r4, r0
 80152b6:	000d      	movs	r5, r1
 80152b8:	f7eb f8d8 	bl	800046c <__aeabi_dcmple>
 80152bc:	2800      	cmp	r0, #0
 80152be:	d06c      	beq.n	801539a <_strtod_l+0xa86>
 80152c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d177      	bne.n	80153b6 <_strtod_l+0xaa2>
 80152c6:	2e00      	cmp	r6, #0
 80152c8:	d157      	bne.n	801537a <_strtod_l+0xa66>
 80152ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152cc:	031b      	lsls	r3, r3, #12
 80152ce:	d15a      	bne.n	8015386 <_strtod_l+0xa72>
 80152d0:	2200      	movs	r2, #0
 80152d2:	0020      	movs	r0, r4
 80152d4:	0029      	movs	r1, r5
 80152d6:	4b7a      	ldr	r3, [pc, #488]	@ (80154c0 <_strtod_l+0xbac>)
 80152d8:	f7eb f8be 	bl	8000458 <__aeabi_dcmplt>
 80152dc:	2800      	cmp	r0, #0
 80152de:	d159      	bne.n	8015394 <_strtod_l+0xa80>
 80152e0:	0020      	movs	r0, r4
 80152e2:	0029      	movs	r1, r5
 80152e4:	2200      	movs	r2, #0
 80152e6:	4b77      	ldr	r3, [pc, #476]	@ (80154c4 <_strtod_l+0xbb0>)
 80152e8:	f7ed f948 	bl	800257c <__aeabi_dmul>
 80152ec:	0004      	movs	r4, r0
 80152ee:	000d      	movs	r5, r1
 80152f0:	2380      	movs	r3, #128	@ 0x80
 80152f2:	061b      	lsls	r3, r3, #24
 80152f4:	18eb      	adds	r3, r5, r3
 80152f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80152f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80152fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80152fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152fe:	9214      	str	r2, [sp, #80]	@ 0x50
 8015300:	9315      	str	r3, [sp, #84]	@ 0x54
 8015302:	4a71      	ldr	r2, [pc, #452]	@ (80154c8 <_strtod_l+0xbb4>)
 8015304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015306:	4013      	ands	r3, r2
 8015308:	9316      	str	r3, [sp, #88]	@ 0x58
 801530a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801530c:	4b6f      	ldr	r3, [pc, #444]	@ (80154cc <_strtod_l+0xbb8>)
 801530e:	429a      	cmp	r2, r3
 8015310:	d000      	beq.n	8015314 <_strtod_l+0xa00>
 8015312:	e087      	b.n	8015424 <_strtod_l+0xb10>
 8015314:	4a6e      	ldr	r2, [pc, #440]	@ (80154d0 <_strtod_l+0xbbc>)
 8015316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015318:	4694      	mov	ip, r2
 801531a:	4463      	add	r3, ip
 801531c:	001f      	movs	r7, r3
 801531e:	0030      	movs	r0, r6
 8015320:	0019      	movs	r1, r3
 8015322:	f7ff f9a5 	bl	8014670 <__ulp>
 8015326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801532a:	f7ed f927 	bl	800257c <__aeabi_dmul>
 801532e:	0032      	movs	r2, r6
 8015330:	003b      	movs	r3, r7
 8015332:	f7ec f97b 	bl	800162c <__aeabi_dadd>
 8015336:	4a64      	ldr	r2, [pc, #400]	@ (80154c8 <_strtod_l+0xbb4>)
 8015338:	4b66      	ldr	r3, [pc, #408]	@ (80154d4 <_strtod_l+0xbc0>)
 801533a:	0006      	movs	r6, r0
 801533c:	400a      	ands	r2, r1
 801533e:	429a      	cmp	r2, r3
 8015340:	d940      	bls.n	80153c4 <_strtod_l+0xab0>
 8015342:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015344:	4a64      	ldr	r2, [pc, #400]	@ (80154d8 <_strtod_l+0xbc4>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d103      	bne.n	8015352 <_strtod_l+0xa3e>
 801534a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801534c:	3301      	adds	r3, #1
 801534e:	d100      	bne.n	8015352 <_strtod_l+0xa3e>
 8015350:	e51a      	b.n	8014d88 <_strtod_l+0x474>
 8015352:	2601      	movs	r6, #1
 8015354:	4f60      	ldr	r7, [pc, #384]	@ (80154d8 <_strtod_l+0xbc4>)
 8015356:	4276      	negs	r6, r6
 8015358:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801535a:	9805      	ldr	r0, [sp, #20]
 801535c:	f7fe fe3c 	bl	8013fd8 <_Bfree>
 8015360:	9908      	ldr	r1, [sp, #32]
 8015362:	9805      	ldr	r0, [sp, #20]
 8015364:	f7fe fe38 	bl	8013fd8 <_Bfree>
 8015368:	9907      	ldr	r1, [sp, #28]
 801536a:	9805      	ldr	r0, [sp, #20]
 801536c:	f7fe fe34 	bl	8013fd8 <_Bfree>
 8015370:	9906      	ldr	r1, [sp, #24]
 8015372:	9805      	ldr	r0, [sp, #20]
 8015374:	f7fe fe30 	bl	8013fd8 <_Bfree>
 8015378:	e617      	b.n	8014faa <_strtod_l+0x696>
 801537a:	2e01      	cmp	r6, #1
 801537c:	d103      	bne.n	8015386 <_strtod_l+0xa72>
 801537e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015380:	2b00      	cmp	r3, #0
 8015382:	d100      	bne.n	8015386 <_strtod_l+0xa72>
 8015384:	e59c      	b.n	8014ec0 <_strtod_l+0x5ac>
 8015386:	2300      	movs	r3, #0
 8015388:	4c54      	ldr	r4, [pc, #336]	@ (80154dc <_strtod_l+0xbc8>)
 801538a:	4d4d      	ldr	r5, [pc, #308]	@ (80154c0 <_strtod_l+0xbac>)
 801538c:	930a      	str	r3, [sp, #40]	@ 0x28
 801538e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015390:	2400      	movs	r4, #0
 8015392:	e7b2      	b.n	80152fa <_strtod_l+0x9e6>
 8015394:	2400      	movs	r4, #0
 8015396:	4d4b      	ldr	r5, [pc, #300]	@ (80154c4 <_strtod_l+0xbb0>)
 8015398:	e7aa      	b.n	80152f0 <_strtod_l+0x9dc>
 801539a:	0020      	movs	r0, r4
 801539c:	0029      	movs	r1, r5
 801539e:	4b49      	ldr	r3, [pc, #292]	@ (80154c4 <_strtod_l+0xbb0>)
 80153a0:	2200      	movs	r2, #0
 80153a2:	f7ed f8eb 	bl	800257c <__aeabi_dmul>
 80153a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80153a8:	0004      	movs	r4, r0
 80153aa:	000d      	movs	r5, r1
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d09f      	beq.n	80152f0 <_strtod_l+0x9dc>
 80153b0:	940a      	str	r4, [sp, #40]	@ 0x28
 80153b2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80153b4:	e7a1      	b.n	80152fa <_strtod_l+0x9e6>
 80153b6:	2300      	movs	r3, #0
 80153b8:	4c41      	ldr	r4, [pc, #260]	@ (80154c0 <_strtod_l+0xbac>)
 80153ba:	0025      	movs	r5, r4
 80153bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80153be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80153c0:	001c      	movs	r4, r3
 80153c2:	e79a      	b.n	80152fa <_strtod_l+0x9e6>
 80153c4:	23d4      	movs	r3, #212	@ 0xd4
 80153c6:	049b      	lsls	r3, r3, #18
 80153c8:	18cf      	adds	r7, r1, r3
 80153ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153cc:	9710      	str	r7, [sp, #64]	@ 0x40
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d1c2      	bne.n	8015358 <_strtod_l+0xa44>
 80153d2:	4b3d      	ldr	r3, [pc, #244]	@ (80154c8 <_strtod_l+0xbb4>)
 80153d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80153d6:	403b      	ands	r3, r7
 80153d8:	429a      	cmp	r2, r3
 80153da:	d1bd      	bne.n	8015358 <_strtod_l+0xa44>
 80153dc:	0020      	movs	r0, r4
 80153de:	0029      	movs	r1, r5
 80153e0:	f7eb f8f2 	bl	80005c8 <__aeabi_d2lz>
 80153e4:	f7eb f92a 	bl	800063c <__aeabi_l2d>
 80153e8:	0002      	movs	r2, r0
 80153ea:	000b      	movs	r3, r1
 80153ec:	0020      	movs	r0, r4
 80153ee:	0029      	movs	r1, r5
 80153f0:	f7ed fb8c 	bl	8002b0c <__aeabi_dsub>
 80153f4:	033c      	lsls	r4, r7, #12
 80153f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80153f8:	0b24      	lsrs	r4, r4, #12
 80153fa:	4334      	orrs	r4, r6
 80153fc:	900e      	str	r0, [sp, #56]	@ 0x38
 80153fe:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015400:	4a37      	ldr	r2, [pc, #220]	@ (80154e0 <_strtod_l+0xbcc>)
 8015402:	431c      	orrs	r4, r3
 8015404:	d052      	beq.n	80154ac <_strtod_l+0xb98>
 8015406:	4b37      	ldr	r3, [pc, #220]	@ (80154e4 <_strtod_l+0xbd0>)
 8015408:	f7eb f826 	bl	8000458 <__aeabi_dcmplt>
 801540c:	2800      	cmp	r0, #0
 801540e:	d000      	beq.n	8015412 <_strtod_l+0xafe>
 8015410:	e4c3      	b.n	8014d9a <_strtod_l+0x486>
 8015412:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015414:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015416:	4a34      	ldr	r2, [pc, #208]	@ (80154e8 <_strtod_l+0xbd4>)
 8015418:	4b2a      	ldr	r3, [pc, #168]	@ (80154c4 <_strtod_l+0xbb0>)
 801541a:	f7eb f831 	bl	8000480 <__aeabi_dcmpgt>
 801541e:	2800      	cmp	r0, #0
 8015420:	d09a      	beq.n	8015358 <_strtod_l+0xa44>
 8015422:	e4ba      	b.n	8014d9a <_strtod_l+0x486>
 8015424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015426:	2b00      	cmp	r3, #0
 8015428:	d02a      	beq.n	8015480 <_strtod_l+0xb6c>
 801542a:	23d4      	movs	r3, #212	@ 0xd4
 801542c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801542e:	04db      	lsls	r3, r3, #19
 8015430:	429a      	cmp	r2, r3
 8015432:	d825      	bhi.n	8015480 <_strtod_l+0xb6c>
 8015434:	0020      	movs	r0, r4
 8015436:	0029      	movs	r1, r5
 8015438:	4a2c      	ldr	r2, [pc, #176]	@ (80154ec <_strtod_l+0xbd8>)
 801543a:	4b2d      	ldr	r3, [pc, #180]	@ (80154f0 <_strtod_l+0xbdc>)
 801543c:	f7eb f816 	bl	800046c <__aeabi_dcmple>
 8015440:	2800      	cmp	r0, #0
 8015442:	d016      	beq.n	8015472 <_strtod_l+0xb5e>
 8015444:	0020      	movs	r0, r4
 8015446:	0029      	movs	r1, r5
 8015448:	f7eb f8a0 	bl	800058c <__aeabi_d2uiz>
 801544c:	2800      	cmp	r0, #0
 801544e:	d100      	bne.n	8015452 <_strtod_l+0xb3e>
 8015450:	3001      	adds	r0, #1
 8015452:	f7ed ff83 	bl	800335c <__aeabi_ui2d>
 8015456:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015458:	0004      	movs	r4, r0
 801545a:	000d      	movs	r5, r1
 801545c:	2b00      	cmp	r3, #0
 801545e:	d122      	bne.n	80154a6 <_strtod_l+0xb92>
 8015460:	2380      	movs	r3, #128	@ 0x80
 8015462:	061b      	lsls	r3, r3, #24
 8015464:	18cb      	adds	r3, r1, r3
 8015466:	9018      	str	r0, [sp, #96]	@ 0x60
 8015468:	9319      	str	r3, [sp, #100]	@ 0x64
 801546a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801546c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801546e:	9214      	str	r2, [sp, #80]	@ 0x50
 8015470:	9315      	str	r3, [sp, #84]	@ 0x54
 8015472:	22d6      	movs	r2, #214	@ 0xd6
 8015474:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015476:	04d2      	lsls	r2, r2, #19
 8015478:	189b      	adds	r3, r3, r2
 801547a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801547c:	1a9b      	subs	r3, r3, r2
 801547e:	9315      	str	r3, [sp, #84]	@ 0x54
 8015480:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015482:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015484:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015486:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015488:	f7ff f8f2 	bl	8014670 <__ulp>
 801548c:	0002      	movs	r2, r0
 801548e:	000b      	movs	r3, r1
 8015490:	0030      	movs	r0, r6
 8015492:	0039      	movs	r1, r7
 8015494:	f7ed f872 	bl	800257c <__aeabi_dmul>
 8015498:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801549a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801549c:	f7ec f8c6 	bl	800162c <__aeabi_dadd>
 80154a0:	0006      	movs	r6, r0
 80154a2:	000f      	movs	r7, r1
 80154a4:	e791      	b.n	80153ca <_strtod_l+0xab6>
 80154a6:	9418      	str	r4, [sp, #96]	@ 0x60
 80154a8:	9519      	str	r5, [sp, #100]	@ 0x64
 80154aa:	e7de      	b.n	801546a <_strtod_l+0xb56>
 80154ac:	4b11      	ldr	r3, [pc, #68]	@ (80154f4 <_strtod_l+0xbe0>)
 80154ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80154b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80154b2:	f7ea ffd1 	bl	8000458 <__aeabi_dcmplt>
 80154b6:	e7b2      	b.n	801541e <_strtod_l+0xb0a>
 80154b8:	fff00000 	.word	0xfff00000
 80154bc:	000fffff 	.word	0x000fffff
 80154c0:	3ff00000 	.word	0x3ff00000
 80154c4:	3fe00000 	.word	0x3fe00000
 80154c8:	7ff00000 	.word	0x7ff00000
 80154cc:	7fe00000 	.word	0x7fe00000
 80154d0:	fcb00000 	.word	0xfcb00000
 80154d4:	7c9fffff 	.word	0x7c9fffff
 80154d8:	7fefffff 	.word	0x7fefffff
 80154dc:	bff00000 	.word	0xbff00000
 80154e0:	94a03595 	.word	0x94a03595
 80154e4:	3fdfffff 	.word	0x3fdfffff
 80154e8:	35afe535 	.word	0x35afe535
 80154ec:	ffc00000 	.word	0xffc00000
 80154f0:	41dfffff 	.word	0x41dfffff
 80154f4:	3fcfffff 	.word	0x3fcfffff

080154f8 <_strtod_r>:
 80154f8:	b510      	push	{r4, lr}
 80154fa:	4b02      	ldr	r3, [pc, #8]	@ (8015504 <_strtod_r+0xc>)
 80154fc:	f7ff fa0a 	bl	8014914 <_strtod_l>
 8015500:	bd10      	pop	{r4, pc}
 8015502:	46c0      	nop			@ (mov r8, r8)
 8015504:	200000e4 	.word	0x200000e4

08015508 <_strtol_l.constprop.0>:
 8015508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801550a:	b085      	sub	sp, #20
 801550c:	0017      	movs	r7, r2
 801550e:	001e      	movs	r6, r3
 8015510:	9003      	str	r0, [sp, #12]
 8015512:	9101      	str	r1, [sp, #4]
 8015514:	2b24      	cmp	r3, #36	@ 0x24
 8015516:	d844      	bhi.n	80155a2 <_strtol_l.constprop.0+0x9a>
 8015518:	000c      	movs	r4, r1
 801551a:	2b01      	cmp	r3, #1
 801551c:	d041      	beq.n	80155a2 <_strtol_l.constprop.0+0x9a>
 801551e:	4b3d      	ldr	r3, [pc, #244]	@ (8015614 <_strtol_l.constprop.0+0x10c>)
 8015520:	2208      	movs	r2, #8
 8015522:	469c      	mov	ip, r3
 8015524:	0023      	movs	r3, r4
 8015526:	4661      	mov	r1, ip
 8015528:	781d      	ldrb	r5, [r3, #0]
 801552a:	3401      	adds	r4, #1
 801552c:	5d48      	ldrb	r0, [r1, r5]
 801552e:	0001      	movs	r1, r0
 8015530:	4011      	ands	r1, r2
 8015532:	4210      	tst	r0, r2
 8015534:	d1f6      	bne.n	8015524 <_strtol_l.constprop.0+0x1c>
 8015536:	2d2d      	cmp	r5, #45	@ 0x2d
 8015538:	d13a      	bne.n	80155b0 <_strtol_l.constprop.0+0xa8>
 801553a:	7825      	ldrb	r5, [r4, #0]
 801553c:	1c9c      	adds	r4, r3, #2
 801553e:	2301      	movs	r3, #1
 8015540:	9300      	str	r3, [sp, #0]
 8015542:	2210      	movs	r2, #16
 8015544:	0033      	movs	r3, r6
 8015546:	4393      	bics	r3, r2
 8015548:	d109      	bne.n	801555e <_strtol_l.constprop.0+0x56>
 801554a:	2d30      	cmp	r5, #48	@ 0x30
 801554c:	d136      	bne.n	80155bc <_strtol_l.constprop.0+0xb4>
 801554e:	2120      	movs	r1, #32
 8015550:	7823      	ldrb	r3, [r4, #0]
 8015552:	438b      	bics	r3, r1
 8015554:	2b58      	cmp	r3, #88	@ 0x58
 8015556:	d131      	bne.n	80155bc <_strtol_l.constprop.0+0xb4>
 8015558:	0016      	movs	r6, r2
 801555a:	7865      	ldrb	r5, [r4, #1]
 801555c:	3402      	adds	r4, #2
 801555e:	4a2e      	ldr	r2, [pc, #184]	@ (8015618 <_strtol_l.constprop.0+0x110>)
 8015560:	9b00      	ldr	r3, [sp, #0]
 8015562:	4694      	mov	ip, r2
 8015564:	4463      	add	r3, ip
 8015566:	0031      	movs	r1, r6
 8015568:	0018      	movs	r0, r3
 801556a:	9302      	str	r3, [sp, #8]
 801556c:	f7ea fe6e 	bl	800024c <__aeabi_uidivmod>
 8015570:	2200      	movs	r2, #0
 8015572:	4684      	mov	ip, r0
 8015574:	0010      	movs	r0, r2
 8015576:	002b      	movs	r3, r5
 8015578:	3b30      	subs	r3, #48	@ 0x30
 801557a:	2b09      	cmp	r3, #9
 801557c:	d825      	bhi.n	80155ca <_strtol_l.constprop.0+0xc2>
 801557e:	001d      	movs	r5, r3
 8015580:	42ae      	cmp	r6, r5
 8015582:	dd31      	ble.n	80155e8 <_strtol_l.constprop.0+0xe0>
 8015584:	1c53      	adds	r3, r2, #1
 8015586:	d009      	beq.n	801559c <_strtol_l.constprop.0+0x94>
 8015588:	2201      	movs	r2, #1
 801558a:	4252      	negs	r2, r2
 801558c:	4584      	cmp	ip, r0
 801558e:	d305      	bcc.n	801559c <_strtol_l.constprop.0+0x94>
 8015590:	d101      	bne.n	8015596 <_strtol_l.constprop.0+0x8e>
 8015592:	42a9      	cmp	r1, r5
 8015594:	db25      	blt.n	80155e2 <_strtol_l.constprop.0+0xda>
 8015596:	2201      	movs	r2, #1
 8015598:	4370      	muls	r0, r6
 801559a:	1828      	adds	r0, r5, r0
 801559c:	7825      	ldrb	r5, [r4, #0]
 801559e:	3401      	adds	r4, #1
 80155a0:	e7e9      	b.n	8015576 <_strtol_l.constprop.0+0x6e>
 80155a2:	f7fd fd0b 	bl	8012fbc <__errno>
 80155a6:	2316      	movs	r3, #22
 80155a8:	6003      	str	r3, [r0, #0]
 80155aa:	2000      	movs	r0, #0
 80155ac:	b005      	add	sp, #20
 80155ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155b0:	9100      	str	r1, [sp, #0]
 80155b2:	2d2b      	cmp	r5, #43	@ 0x2b
 80155b4:	d1c5      	bne.n	8015542 <_strtol_l.constprop.0+0x3a>
 80155b6:	7825      	ldrb	r5, [r4, #0]
 80155b8:	1c9c      	adds	r4, r3, #2
 80155ba:	e7c2      	b.n	8015542 <_strtol_l.constprop.0+0x3a>
 80155bc:	2e00      	cmp	r6, #0
 80155be:	d1ce      	bne.n	801555e <_strtol_l.constprop.0+0x56>
 80155c0:	3608      	adds	r6, #8
 80155c2:	2d30      	cmp	r5, #48	@ 0x30
 80155c4:	d0cb      	beq.n	801555e <_strtol_l.constprop.0+0x56>
 80155c6:	3602      	adds	r6, #2
 80155c8:	e7c9      	b.n	801555e <_strtol_l.constprop.0+0x56>
 80155ca:	002b      	movs	r3, r5
 80155cc:	3b41      	subs	r3, #65	@ 0x41
 80155ce:	2b19      	cmp	r3, #25
 80155d0:	d801      	bhi.n	80155d6 <_strtol_l.constprop.0+0xce>
 80155d2:	3d37      	subs	r5, #55	@ 0x37
 80155d4:	e7d4      	b.n	8015580 <_strtol_l.constprop.0+0x78>
 80155d6:	002b      	movs	r3, r5
 80155d8:	3b61      	subs	r3, #97	@ 0x61
 80155da:	2b19      	cmp	r3, #25
 80155dc:	d804      	bhi.n	80155e8 <_strtol_l.constprop.0+0xe0>
 80155de:	3d57      	subs	r5, #87	@ 0x57
 80155e0:	e7ce      	b.n	8015580 <_strtol_l.constprop.0+0x78>
 80155e2:	2201      	movs	r2, #1
 80155e4:	4252      	negs	r2, r2
 80155e6:	e7d9      	b.n	801559c <_strtol_l.constprop.0+0x94>
 80155e8:	1c53      	adds	r3, r2, #1
 80155ea:	d108      	bne.n	80155fe <_strtol_l.constprop.0+0xf6>
 80155ec:	2322      	movs	r3, #34	@ 0x22
 80155ee:	9a03      	ldr	r2, [sp, #12]
 80155f0:	9802      	ldr	r0, [sp, #8]
 80155f2:	6013      	str	r3, [r2, #0]
 80155f4:	2f00      	cmp	r7, #0
 80155f6:	d0d9      	beq.n	80155ac <_strtol_l.constprop.0+0xa4>
 80155f8:	1e63      	subs	r3, r4, #1
 80155fa:	9301      	str	r3, [sp, #4]
 80155fc:	e007      	b.n	801560e <_strtol_l.constprop.0+0x106>
 80155fe:	9b00      	ldr	r3, [sp, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d000      	beq.n	8015606 <_strtol_l.constprop.0+0xfe>
 8015604:	4240      	negs	r0, r0
 8015606:	2f00      	cmp	r7, #0
 8015608:	d0d0      	beq.n	80155ac <_strtol_l.constprop.0+0xa4>
 801560a:	2a00      	cmp	r2, #0
 801560c:	d1f4      	bne.n	80155f8 <_strtol_l.constprop.0+0xf0>
 801560e:	9b01      	ldr	r3, [sp, #4]
 8015610:	603b      	str	r3, [r7, #0]
 8015612:	e7cb      	b.n	80155ac <_strtol_l.constprop.0+0xa4>
 8015614:	08017539 	.word	0x08017539
 8015618:	7fffffff 	.word	0x7fffffff

0801561c <_strtol_r>:
 801561c:	b510      	push	{r4, lr}
 801561e:	f7ff ff73 	bl	8015508 <_strtol_l.constprop.0>
 8015622:	bd10      	pop	{r4, pc}

08015624 <__ssputs_r>:
 8015624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015626:	688e      	ldr	r6, [r1, #8]
 8015628:	b085      	sub	sp, #20
 801562a:	001f      	movs	r7, r3
 801562c:	000c      	movs	r4, r1
 801562e:	680b      	ldr	r3, [r1, #0]
 8015630:	9002      	str	r0, [sp, #8]
 8015632:	9203      	str	r2, [sp, #12]
 8015634:	42be      	cmp	r6, r7
 8015636:	d830      	bhi.n	801569a <__ssputs_r+0x76>
 8015638:	210c      	movs	r1, #12
 801563a:	5e62      	ldrsh	r2, [r4, r1]
 801563c:	2190      	movs	r1, #144	@ 0x90
 801563e:	00c9      	lsls	r1, r1, #3
 8015640:	420a      	tst	r2, r1
 8015642:	d028      	beq.n	8015696 <__ssputs_r+0x72>
 8015644:	2003      	movs	r0, #3
 8015646:	6921      	ldr	r1, [r4, #16]
 8015648:	1a5b      	subs	r3, r3, r1
 801564a:	9301      	str	r3, [sp, #4]
 801564c:	6963      	ldr	r3, [r4, #20]
 801564e:	4343      	muls	r3, r0
 8015650:	9801      	ldr	r0, [sp, #4]
 8015652:	0fdd      	lsrs	r5, r3, #31
 8015654:	18ed      	adds	r5, r5, r3
 8015656:	1c7b      	adds	r3, r7, #1
 8015658:	181b      	adds	r3, r3, r0
 801565a:	106d      	asrs	r5, r5, #1
 801565c:	42ab      	cmp	r3, r5
 801565e:	d900      	bls.n	8015662 <__ssputs_r+0x3e>
 8015660:	001d      	movs	r5, r3
 8015662:	0552      	lsls	r2, r2, #21
 8015664:	d528      	bpl.n	80156b8 <__ssputs_r+0x94>
 8015666:	0029      	movs	r1, r5
 8015668:	9802      	ldr	r0, [sp, #8]
 801566a:	f7fe fbe1 	bl	8013e30 <_malloc_r>
 801566e:	1e06      	subs	r6, r0, #0
 8015670:	d02c      	beq.n	80156cc <__ssputs_r+0xa8>
 8015672:	9a01      	ldr	r2, [sp, #4]
 8015674:	6921      	ldr	r1, [r4, #16]
 8015676:	f7fd fcd9 	bl	801302c <memcpy>
 801567a:	89a2      	ldrh	r2, [r4, #12]
 801567c:	4b18      	ldr	r3, [pc, #96]	@ (80156e0 <__ssputs_r+0xbc>)
 801567e:	401a      	ands	r2, r3
 8015680:	2380      	movs	r3, #128	@ 0x80
 8015682:	4313      	orrs	r3, r2
 8015684:	81a3      	strh	r3, [r4, #12]
 8015686:	9b01      	ldr	r3, [sp, #4]
 8015688:	6126      	str	r6, [r4, #16]
 801568a:	18f6      	adds	r6, r6, r3
 801568c:	6026      	str	r6, [r4, #0]
 801568e:	003e      	movs	r6, r7
 8015690:	6165      	str	r5, [r4, #20]
 8015692:	1aed      	subs	r5, r5, r3
 8015694:	60a5      	str	r5, [r4, #8]
 8015696:	42be      	cmp	r6, r7
 8015698:	d900      	bls.n	801569c <__ssputs_r+0x78>
 801569a:	003e      	movs	r6, r7
 801569c:	0032      	movs	r2, r6
 801569e:	9903      	ldr	r1, [sp, #12]
 80156a0:	6820      	ldr	r0, [r4, #0]
 80156a2:	f000 f9ce 	bl	8015a42 <memmove>
 80156a6:	2000      	movs	r0, #0
 80156a8:	68a3      	ldr	r3, [r4, #8]
 80156aa:	1b9b      	subs	r3, r3, r6
 80156ac:	60a3      	str	r3, [r4, #8]
 80156ae:	6823      	ldr	r3, [r4, #0]
 80156b0:	199b      	adds	r3, r3, r6
 80156b2:	6023      	str	r3, [r4, #0]
 80156b4:	b005      	add	sp, #20
 80156b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156b8:	002a      	movs	r2, r5
 80156ba:	9802      	ldr	r0, [sp, #8]
 80156bc:	f000 fdb6 	bl	801622c <_realloc_r>
 80156c0:	1e06      	subs	r6, r0, #0
 80156c2:	d1e0      	bne.n	8015686 <__ssputs_r+0x62>
 80156c4:	6921      	ldr	r1, [r4, #16]
 80156c6:	9802      	ldr	r0, [sp, #8]
 80156c8:	f7fe fb3c 	bl	8013d44 <_free_r>
 80156cc:	230c      	movs	r3, #12
 80156ce:	2001      	movs	r0, #1
 80156d0:	9a02      	ldr	r2, [sp, #8]
 80156d2:	4240      	negs	r0, r0
 80156d4:	6013      	str	r3, [r2, #0]
 80156d6:	89a2      	ldrh	r2, [r4, #12]
 80156d8:	3334      	adds	r3, #52	@ 0x34
 80156da:	4313      	orrs	r3, r2
 80156dc:	81a3      	strh	r3, [r4, #12]
 80156de:	e7e9      	b.n	80156b4 <__ssputs_r+0x90>
 80156e0:	fffffb7f 	.word	0xfffffb7f

080156e4 <_svfiprintf_r>:
 80156e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156e6:	b0a1      	sub	sp, #132	@ 0x84
 80156e8:	9003      	str	r0, [sp, #12]
 80156ea:	001d      	movs	r5, r3
 80156ec:	898b      	ldrh	r3, [r1, #12]
 80156ee:	000f      	movs	r7, r1
 80156f0:	0016      	movs	r6, r2
 80156f2:	061b      	lsls	r3, r3, #24
 80156f4:	d511      	bpl.n	801571a <_svfiprintf_r+0x36>
 80156f6:	690b      	ldr	r3, [r1, #16]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d10e      	bne.n	801571a <_svfiprintf_r+0x36>
 80156fc:	2140      	movs	r1, #64	@ 0x40
 80156fe:	f7fe fb97 	bl	8013e30 <_malloc_r>
 8015702:	6038      	str	r0, [r7, #0]
 8015704:	6138      	str	r0, [r7, #16]
 8015706:	2800      	cmp	r0, #0
 8015708:	d105      	bne.n	8015716 <_svfiprintf_r+0x32>
 801570a:	230c      	movs	r3, #12
 801570c:	9a03      	ldr	r2, [sp, #12]
 801570e:	6013      	str	r3, [r2, #0]
 8015710:	2001      	movs	r0, #1
 8015712:	4240      	negs	r0, r0
 8015714:	e0cf      	b.n	80158b6 <_svfiprintf_r+0x1d2>
 8015716:	2340      	movs	r3, #64	@ 0x40
 8015718:	617b      	str	r3, [r7, #20]
 801571a:	2300      	movs	r3, #0
 801571c:	ac08      	add	r4, sp, #32
 801571e:	6163      	str	r3, [r4, #20]
 8015720:	3320      	adds	r3, #32
 8015722:	7663      	strb	r3, [r4, #25]
 8015724:	3310      	adds	r3, #16
 8015726:	76a3      	strb	r3, [r4, #26]
 8015728:	9507      	str	r5, [sp, #28]
 801572a:	0035      	movs	r5, r6
 801572c:	782b      	ldrb	r3, [r5, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d001      	beq.n	8015736 <_svfiprintf_r+0x52>
 8015732:	2b25      	cmp	r3, #37	@ 0x25
 8015734:	d148      	bne.n	80157c8 <_svfiprintf_r+0xe4>
 8015736:	1bab      	subs	r3, r5, r6
 8015738:	9305      	str	r3, [sp, #20]
 801573a:	42b5      	cmp	r5, r6
 801573c:	d00b      	beq.n	8015756 <_svfiprintf_r+0x72>
 801573e:	0032      	movs	r2, r6
 8015740:	0039      	movs	r1, r7
 8015742:	9803      	ldr	r0, [sp, #12]
 8015744:	f7ff ff6e 	bl	8015624 <__ssputs_r>
 8015748:	3001      	adds	r0, #1
 801574a:	d100      	bne.n	801574e <_svfiprintf_r+0x6a>
 801574c:	e0ae      	b.n	80158ac <_svfiprintf_r+0x1c8>
 801574e:	6963      	ldr	r3, [r4, #20]
 8015750:	9a05      	ldr	r2, [sp, #20]
 8015752:	189b      	adds	r3, r3, r2
 8015754:	6163      	str	r3, [r4, #20]
 8015756:	782b      	ldrb	r3, [r5, #0]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d100      	bne.n	801575e <_svfiprintf_r+0x7a>
 801575c:	e0a6      	b.n	80158ac <_svfiprintf_r+0x1c8>
 801575e:	2201      	movs	r2, #1
 8015760:	2300      	movs	r3, #0
 8015762:	4252      	negs	r2, r2
 8015764:	6062      	str	r2, [r4, #4]
 8015766:	a904      	add	r1, sp, #16
 8015768:	3254      	adds	r2, #84	@ 0x54
 801576a:	1852      	adds	r2, r2, r1
 801576c:	1c6e      	adds	r6, r5, #1
 801576e:	6023      	str	r3, [r4, #0]
 8015770:	60e3      	str	r3, [r4, #12]
 8015772:	60a3      	str	r3, [r4, #8]
 8015774:	7013      	strb	r3, [r2, #0]
 8015776:	65a3      	str	r3, [r4, #88]	@ 0x58
 8015778:	4b54      	ldr	r3, [pc, #336]	@ (80158cc <_svfiprintf_r+0x1e8>)
 801577a:	2205      	movs	r2, #5
 801577c:	0018      	movs	r0, r3
 801577e:	7831      	ldrb	r1, [r6, #0]
 8015780:	9305      	str	r3, [sp, #20]
 8015782:	f7fd fc48 	bl	8013016 <memchr>
 8015786:	1c75      	adds	r5, r6, #1
 8015788:	2800      	cmp	r0, #0
 801578a:	d11f      	bne.n	80157cc <_svfiprintf_r+0xe8>
 801578c:	6822      	ldr	r2, [r4, #0]
 801578e:	06d3      	lsls	r3, r2, #27
 8015790:	d504      	bpl.n	801579c <_svfiprintf_r+0xb8>
 8015792:	2353      	movs	r3, #83	@ 0x53
 8015794:	a904      	add	r1, sp, #16
 8015796:	185b      	adds	r3, r3, r1
 8015798:	2120      	movs	r1, #32
 801579a:	7019      	strb	r1, [r3, #0]
 801579c:	0713      	lsls	r3, r2, #28
 801579e:	d504      	bpl.n	80157aa <_svfiprintf_r+0xc6>
 80157a0:	2353      	movs	r3, #83	@ 0x53
 80157a2:	a904      	add	r1, sp, #16
 80157a4:	185b      	adds	r3, r3, r1
 80157a6:	212b      	movs	r1, #43	@ 0x2b
 80157a8:	7019      	strb	r1, [r3, #0]
 80157aa:	7833      	ldrb	r3, [r6, #0]
 80157ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80157ae:	d016      	beq.n	80157de <_svfiprintf_r+0xfa>
 80157b0:	0035      	movs	r5, r6
 80157b2:	2100      	movs	r1, #0
 80157b4:	200a      	movs	r0, #10
 80157b6:	68e3      	ldr	r3, [r4, #12]
 80157b8:	782a      	ldrb	r2, [r5, #0]
 80157ba:	1c6e      	adds	r6, r5, #1
 80157bc:	3a30      	subs	r2, #48	@ 0x30
 80157be:	2a09      	cmp	r2, #9
 80157c0:	d950      	bls.n	8015864 <_svfiprintf_r+0x180>
 80157c2:	2900      	cmp	r1, #0
 80157c4:	d111      	bne.n	80157ea <_svfiprintf_r+0x106>
 80157c6:	e017      	b.n	80157f8 <_svfiprintf_r+0x114>
 80157c8:	3501      	adds	r5, #1
 80157ca:	e7af      	b.n	801572c <_svfiprintf_r+0x48>
 80157cc:	9b05      	ldr	r3, [sp, #20]
 80157ce:	6822      	ldr	r2, [r4, #0]
 80157d0:	1ac0      	subs	r0, r0, r3
 80157d2:	2301      	movs	r3, #1
 80157d4:	4083      	lsls	r3, r0
 80157d6:	4313      	orrs	r3, r2
 80157d8:	002e      	movs	r6, r5
 80157da:	6023      	str	r3, [r4, #0]
 80157dc:	e7cc      	b.n	8015778 <_svfiprintf_r+0x94>
 80157de:	9b07      	ldr	r3, [sp, #28]
 80157e0:	1d19      	adds	r1, r3, #4
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	9107      	str	r1, [sp, #28]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	db01      	blt.n	80157ee <_svfiprintf_r+0x10a>
 80157ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157ec:	e004      	b.n	80157f8 <_svfiprintf_r+0x114>
 80157ee:	425b      	negs	r3, r3
 80157f0:	60e3      	str	r3, [r4, #12]
 80157f2:	2302      	movs	r3, #2
 80157f4:	4313      	orrs	r3, r2
 80157f6:	6023      	str	r3, [r4, #0]
 80157f8:	782b      	ldrb	r3, [r5, #0]
 80157fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80157fc:	d10c      	bne.n	8015818 <_svfiprintf_r+0x134>
 80157fe:	786b      	ldrb	r3, [r5, #1]
 8015800:	2b2a      	cmp	r3, #42	@ 0x2a
 8015802:	d134      	bne.n	801586e <_svfiprintf_r+0x18a>
 8015804:	9b07      	ldr	r3, [sp, #28]
 8015806:	3502      	adds	r5, #2
 8015808:	1d1a      	adds	r2, r3, #4
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	9207      	str	r2, [sp, #28]
 801580e:	2b00      	cmp	r3, #0
 8015810:	da01      	bge.n	8015816 <_svfiprintf_r+0x132>
 8015812:	2301      	movs	r3, #1
 8015814:	425b      	negs	r3, r3
 8015816:	9309      	str	r3, [sp, #36]	@ 0x24
 8015818:	4e2d      	ldr	r6, [pc, #180]	@ (80158d0 <_svfiprintf_r+0x1ec>)
 801581a:	2203      	movs	r2, #3
 801581c:	0030      	movs	r0, r6
 801581e:	7829      	ldrb	r1, [r5, #0]
 8015820:	f7fd fbf9 	bl	8013016 <memchr>
 8015824:	2800      	cmp	r0, #0
 8015826:	d006      	beq.n	8015836 <_svfiprintf_r+0x152>
 8015828:	2340      	movs	r3, #64	@ 0x40
 801582a:	1b80      	subs	r0, r0, r6
 801582c:	4083      	lsls	r3, r0
 801582e:	6822      	ldr	r2, [r4, #0]
 8015830:	3501      	adds	r5, #1
 8015832:	4313      	orrs	r3, r2
 8015834:	6023      	str	r3, [r4, #0]
 8015836:	7829      	ldrb	r1, [r5, #0]
 8015838:	2206      	movs	r2, #6
 801583a:	4826      	ldr	r0, [pc, #152]	@ (80158d4 <_svfiprintf_r+0x1f0>)
 801583c:	1c6e      	adds	r6, r5, #1
 801583e:	7621      	strb	r1, [r4, #24]
 8015840:	f7fd fbe9 	bl	8013016 <memchr>
 8015844:	2800      	cmp	r0, #0
 8015846:	d038      	beq.n	80158ba <_svfiprintf_r+0x1d6>
 8015848:	4b23      	ldr	r3, [pc, #140]	@ (80158d8 <_svfiprintf_r+0x1f4>)
 801584a:	2b00      	cmp	r3, #0
 801584c:	d122      	bne.n	8015894 <_svfiprintf_r+0x1b0>
 801584e:	2207      	movs	r2, #7
 8015850:	9b07      	ldr	r3, [sp, #28]
 8015852:	3307      	adds	r3, #7
 8015854:	4393      	bics	r3, r2
 8015856:	3308      	adds	r3, #8
 8015858:	9307      	str	r3, [sp, #28]
 801585a:	6963      	ldr	r3, [r4, #20]
 801585c:	9a04      	ldr	r2, [sp, #16]
 801585e:	189b      	adds	r3, r3, r2
 8015860:	6163      	str	r3, [r4, #20]
 8015862:	e762      	b.n	801572a <_svfiprintf_r+0x46>
 8015864:	4343      	muls	r3, r0
 8015866:	0035      	movs	r5, r6
 8015868:	2101      	movs	r1, #1
 801586a:	189b      	adds	r3, r3, r2
 801586c:	e7a4      	b.n	80157b8 <_svfiprintf_r+0xd4>
 801586e:	2300      	movs	r3, #0
 8015870:	200a      	movs	r0, #10
 8015872:	0019      	movs	r1, r3
 8015874:	3501      	adds	r5, #1
 8015876:	6063      	str	r3, [r4, #4]
 8015878:	782a      	ldrb	r2, [r5, #0]
 801587a:	1c6e      	adds	r6, r5, #1
 801587c:	3a30      	subs	r2, #48	@ 0x30
 801587e:	2a09      	cmp	r2, #9
 8015880:	d903      	bls.n	801588a <_svfiprintf_r+0x1a6>
 8015882:	2b00      	cmp	r3, #0
 8015884:	d0c8      	beq.n	8015818 <_svfiprintf_r+0x134>
 8015886:	9109      	str	r1, [sp, #36]	@ 0x24
 8015888:	e7c6      	b.n	8015818 <_svfiprintf_r+0x134>
 801588a:	4341      	muls	r1, r0
 801588c:	0035      	movs	r5, r6
 801588e:	2301      	movs	r3, #1
 8015890:	1889      	adds	r1, r1, r2
 8015892:	e7f1      	b.n	8015878 <_svfiprintf_r+0x194>
 8015894:	aa07      	add	r2, sp, #28
 8015896:	9200      	str	r2, [sp, #0]
 8015898:	0021      	movs	r1, r4
 801589a:	003a      	movs	r2, r7
 801589c:	4b0f      	ldr	r3, [pc, #60]	@ (80158dc <_svfiprintf_r+0x1f8>)
 801589e:	9803      	ldr	r0, [sp, #12]
 80158a0:	f7fc fb6c 	bl	8011f7c <_printf_float>
 80158a4:	9004      	str	r0, [sp, #16]
 80158a6:	9b04      	ldr	r3, [sp, #16]
 80158a8:	3301      	adds	r3, #1
 80158aa:	d1d6      	bne.n	801585a <_svfiprintf_r+0x176>
 80158ac:	89bb      	ldrh	r3, [r7, #12]
 80158ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80158b0:	065b      	lsls	r3, r3, #25
 80158b2:	d500      	bpl.n	80158b6 <_svfiprintf_r+0x1d2>
 80158b4:	e72c      	b.n	8015710 <_svfiprintf_r+0x2c>
 80158b6:	b021      	add	sp, #132	@ 0x84
 80158b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158ba:	aa07      	add	r2, sp, #28
 80158bc:	9200      	str	r2, [sp, #0]
 80158be:	0021      	movs	r1, r4
 80158c0:	003a      	movs	r2, r7
 80158c2:	4b06      	ldr	r3, [pc, #24]	@ (80158dc <_svfiprintf_r+0x1f8>)
 80158c4:	9803      	ldr	r0, [sp, #12]
 80158c6:	f7fc fe07 	bl	80124d8 <_printf_i>
 80158ca:	e7eb      	b.n	80158a4 <_svfiprintf_r+0x1c0>
 80158cc:	08017639 	.word	0x08017639
 80158d0:	0801763f 	.word	0x0801763f
 80158d4:	08017643 	.word	0x08017643
 80158d8:	08011f7d 	.word	0x08011f7d
 80158dc:	08015625 	.word	0x08015625

080158e0 <__sflush_r>:
 80158e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158e2:	220c      	movs	r2, #12
 80158e4:	5e8b      	ldrsh	r3, [r1, r2]
 80158e6:	0005      	movs	r5, r0
 80158e8:	000c      	movs	r4, r1
 80158ea:	071a      	lsls	r2, r3, #28
 80158ec:	d456      	bmi.n	801599c <__sflush_r+0xbc>
 80158ee:	684a      	ldr	r2, [r1, #4]
 80158f0:	2a00      	cmp	r2, #0
 80158f2:	dc02      	bgt.n	80158fa <__sflush_r+0x1a>
 80158f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	dd4e      	ble.n	8015998 <__sflush_r+0xb8>
 80158fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80158fc:	2f00      	cmp	r7, #0
 80158fe:	d04b      	beq.n	8015998 <__sflush_r+0xb8>
 8015900:	2200      	movs	r2, #0
 8015902:	2080      	movs	r0, #128	@ 0x80
 8015904:	682e      	ldr	r6, [r5, #0]
 8015906:	602a      	str	r2, [r5, #0]
 8015908:	001a      	movs	r2, r3
 801590a:	0140      	lsls	r0, r0, #5
 801590c:	6a21      	ldr	r1, [r4, #32]
 801590e:	4002      	ands	r2, r0
 8015910:	4203      	tst	r3, r0
 8015912:	d033      	beq.n	801597c <__sflush_r+0x9c>
 8015914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015916:	89a3      	ldrh	r3, [r4, #12]
 8015918:	075b      	lsls	r3, r3, #29
 801591a:	d506      	bpl.n	801592a <__sflush_r+0x4a>
 801591c:	6863      	ldr	r3, [r4, #4]
 801591e:	1ad2      	subs	r2, r2, r3
 8015920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015922:	2b00      	cmp	r3, #0
 8015924:	d001      	beq.n	801592a <__sflush_r+0x4a>
 8015926:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015928:	1ad2      	subs	r2, r2, r3
 801592a:	2300      	movs	r3, #0
 801592c:	0028      	movs	r0, r5
 801592e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015930:	6a21      	ldr	r1, [r4, #32]
 8015932:	47b8      	blx	r7
 8015934:	89a2      	ldrh	r2, [r4, #12]
 8015936:	1c43      	adds	r3, r0, #1
 8015938:	d106      	bne.n	8015948 <__sflush_r+0x68>
 801593a:	6829      	ldr	r1, [r5, #0]
 801593c:	291d      	cmp	r1, #29
 801593e:	d846      	bhi.n	80159ce <__sflush_r+0xee>
 8015940:	4b29      	ldr	r3, [pc, #164]	@ (80159e8 <__sflush_r+0x108>)
 8015942:	410b      	asrs	r3, r1
 8015944:	07db      	lsls	r3, r3, #31
 8015946:	d442      	bmi.n	80159ce <__sflush_r+0xee>
 8015948:	2300      	movs	r3, #0
 801594a:	6063      	str	r3, [r4, #4]
 801594c:	6923      	ldr	r3, [r4, #16]
 801594e:	6023      	str	r3, [r4, #0]
 8015950:	04d2      	lsls	r2, r2, #19
 8015952:	d505      	bpl.n	8015960 <__sflush_r+0x80>
 8015954:	1c43      	adds	r3, r0, #1
 8015956:	d102      	bne.n	801595e <__sflush_r+0x7e>
 8015958:	682b      	ldr	r3, [r5, #0]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d100      	bne.n	8015960 <__sflush_r+0x80>
 801595e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015962:	602e      	str	r6, [r5, #0]
 8015964:	2900      	cmp	r1, #0
 8015966:	d017      	beq.n	8015998 <__sflush_r+0xb8>
 8015968:	0023      	movs	r3, r4
 801596a:	3344      	adds	r3, #68	@ 0x44
 801596c:	4299      	cmp	r1, r3
 801596e:	d002      	beq.n	8015976 <__sflush_r+0x96>
 8015970:	0028      	movs	r0, r5
 8015972:	f7fe f9e7 	bl	8013d44 <_free_r>
 8015976:	2300      	movs	r3, #0
 8015978:	6363      	str	r3, [r4, #52]	@ 0x34
 801597a:	e00d      	b.n	8015998 <__sflush_r+0xb8>
 801597c:	2301      	movs	r3, #1
 801597e:	0028      	movs	r0, r5
 8015980:	47b8      	blx	r7
 8015982:	0002      	movs	r2, r0
 8015984:	1c43      	adds	r3, r0, #1
 8015986:	d1c6      	bne.n	8015916 <__sflush_r+0x36>
 8015988:	682b      	ldr	r3, [r5, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d0c3      	beq.n	8015916 <__sflush_r+0x36>
 801598e:	2b1d      	cmp	r3, #29
 8015990:	d001      	beq.n	8015996 <__sflush_r+0xb6>
 8015992:	2b16      	cmp	r3, #22
 8015994:	d11a      	bne.n	80159cc <__sflush_r+0xec>
 8015996:	602e      	str	r6, [r5, #0]
 8015998:	2000      	movs	r0, #0
 801599a:	e01e      	b.n	80159da <__sflush_r+0xfa>
 801599c:	690e      	ldr	r6, [r1, #16]
 801599e:	2e00      	cmp	r6, #0
 80159a0:	d0fa      	beq.n	8015998 <__sflush_r+0xb8>
 80159a2:	680f      	ldr	r7, [r1, #0]
 80159a4:	600e      	str	r6, [r1, #0]
 80159a6:	1bba      	subs	r2, r7, r6
 80159a8:	9201      	str	r2, [sp, #4]
 80159aa:	2200      	movs	r2, #0
 80159ac:	079b      	lsls	r3, r3, #30
 80159ae:	d100      	bne.n	80159b2 <__sflush_r+0xd2>
 80159b0:	694a      	ldr	r2, [r1, #20]
 80159b2:	60a2      	str	r2, [r4, #8]
 80159b4:	9b01      	ldr	r3, [sp, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	ddee      	ble.n	8015998 <__sflush_r+0xb8>
 80159ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80159bc:	0032      	movs	r2, r6
 80159be:	001f      	movs	r7, r3
 80159c0:	0028      	movs	r0, r5
 80159c2:	9b01      	ldr	r3, [sp, #4]
 80159c4:	6a21      	ldr	r1, [r4, #32]
 80159c6:	47b8      	blx	r7
 80159c8:	2800      	cmp	r0, #0
 80159ca:	dc07      	bgt.n	80159dc <__sflush_r+0xfc>
 80159cc:	89a2      	ldrh	r2, [r4, #12]
 80159ce:	2340      	movs	r3, #64	@ 0x40
 80159d0:	2001      	movs	r0, #1
 80159d2:	4313      	orrs	r3, r2
 80159d4:	b21b      	sxth	r3, r3
 80159d6:	81a3      	strh	r3, [r4, #12]
 80159d8:	4240      	negs	r0, r0
 80159da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80159dc:	9b01      	ldr	r3, [sp, #4]
 80159de:	1836      	adds	r6, r6, r0
 80159e0:	1a1b      	subs	r3, r3, r0
 80159e2:	9301      	str	r3, [sp, #4]
 80159e4:	e7e6      	b.n	80159b4 <__sflush_r+0xd4>
 80159e6:	46c0      	nop			@ (mov r8, r8)
 80159e8:	dfbffffe 	.word	0xdfbffffe

080159ec <_fflush_r>:
 80159ec:	690b      	ldr	r3, [r1, #16]
 80159ee:	b570      	push	{r4, r5, r6, lr}
 80159f0:	0005      	movs	r5, r0
 80159f2:	000c      	movs	r4, r1
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d102      	bne.n	80159fe <_fflush_r+0x12>
 80159f8:	2500      	movs	r5, #0
 80159fa:	0028      	movs	r0, r5
 80159fc:	bd70      	pop	{r4, r5, r6, pc}
 80159fe:	2800      	cmp	r0, #0
 8015a00:	d004      	beq.n	8015a0c <_fflush_r+0x20>
 8015a02:	6a03      	ldr	r3, [r0, #32]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d101      	bne.n	8015a0c <_fflush_r+0x20>
 8015a08:	f7fd f912 	bl	8012c30 <__sinit>
 8015a0c:	220c      	movs	r2, #12
 8015a0e:	5ea3      	ldrsh	r3, [r4, r2]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d0f1      	beq.n	80159f8 <_fflush_r+0xc>
 8015a14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015a16:	07d2      	lsls	r2, r2, #31
 8015a18:	d404      	bmi.n	8015a24 <_fflush_r+0x38>
 8015a1a:	059b      	lsls	r3, r3, #22
 8015a1c:	d402      	bmi.n	8015a24 <_fflush_r+0x38>
 8015a1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a20:	f7fd faf7 	bl	8013012 <__retarget_lock_acquire_recursive>
 8015a24:	0028      	movs	r0, r5
 8015a26:	0021      	movs	r1, r4
 8015a28:	f7ff ff5a 	bl	80158e0 <__sflush_r>
 8015a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a2e:	0005      	movs	r5, r0
 8015a30:	07db      	lsls	r3, r3, #31
 8015a32:	d4e2      	bmi.n	80159fa <_fflush_r+0xe>
 8015a34:	89a3      	ldrh	r3, [r4, #12]
 8015a36:	059b      	lsls	r3, r3, #22
 8015a38:	d4df      	bmi.n	80159fa <_fflush_r+0xe>
 8015a3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a3c:	f7fd faea 	bl	8013014 <__retarget_lock_release_recursive>
 8015a40:	e7db      	b.n	80159fa <_fflush_r+0xe>

08015a42 <memmove>:
 8015a42:	b510      	push	{r4, lr}
 8015a44:	4288      	cmp	r0, r1
 8015a46:	d806      	bhi.n	8015a56 <memmove+0x14>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d008      	beq.n	8015a60 <memmove+0x1e>
 8015a4e:	5ccc      	ldrb	r4, [r1, r3]
 8015a50:	54c4      	strb	r4, [r0, r3]
 8015a52:	3301      	adds	r3, #1
 8015a54:	e7f9      	b.n	8015a4a <memmove+0x8>
 8015a56:	188b      	adds	r3, r1, r2
 8015a58:	4298      	cmp	r0, r3
 8015a5a:	d2f5      	bcs.n	8015a48 <memmove+0x6>
 8015a5c:	3a01      	subs	r2, #1
 8015a5e:	d200      	bcs.n	8015a62 <memmove+0x20>
 8015a60:	bd10      	pop	{r4, pc}
 8015a62:	5c8b      	ldrb	r3, [r1, r2]
 8015a64:	5483      	strb	r3, [r0, r2]
 8015a66:	e7f9      	b.n	8015a5c <memmove+0x1a>

08015a68 <strncmp>:
 8015a68:	b530      	push	{r4, r5, lr}
 8015a6a:	0005      	movs	r5, r0
 8015a6c:	1e10      	subs	r0, r2, #0
 8015a6e:	d00b      	beq.n	8015a88 <strncmp+0x20>
 8015a70:	2400      	movs	r4, #0
 8015a72:	3a01      	subs	r2, #1
 8015a74:	5d2b      	ldrb	r3, [r5, r4]
 8015a76:	5d08      	ldrb	r0, [r1, r4]
 8015a78:	4283      	cmp	r3, r0
 8015a7a:	d104      	bne.n	8015a86 <strncmp+0x1e>
 8015a7c:	42a2      	cmp	r2, r4
 8015a7e:	d002      	beq.n	8015a86 <strncmp+0x1e>
 8015a80:	3401      	adds	r4, #1
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d1f6      	bne.n	8015a74 <strncmp+0xc>
 8015a86:	1a18      	subs	r0, r3, r0
 8015a88:	bd30      	pop	{r4, r5, pc}
	...

08015a8c <_sbrk_r>:
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	b570      	push	{r4, r5, r6, lr}
 8015a90:	4d06      	ldr	r5, [pc, #24]	@ (8015aac <_sbrk_r+0x20>)
 8015a92:	0004      	movs	r4, r0
 8015a94:	0008      	movs	r0, r1
 8015a96:	602b      	str	r3, [r5, #0]
 8015a98:	f7f1 fd04 	bl	80074a4 <_sbrk>
 8015a9c:	1c43      	adds	r3, r0, #1
 8015a9e:	d103      	bne.n	8015aa8 <_sbrk_r+0x1c>
 8015aa0:	682b      	ldr	r3, [r5, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d000      	beq.n	8015aa8 <_sbrk_r+0x1c>
 8015aa6:	6023      	str	r3, [r4, #0]
 8015aa8:	bd70      	pop	{r4, r5, r6, pc}
 8015aaa:	46c0      	nop			@ (mov r8, r8)
 8015aac:	20007278 	.word	0x20007278

08015ab0 <nan>:
 8015ab0:	2000      	movs	r0, #0
 8015ab2:	4901      	ldr	r1, [pc, #4]	@ (8015ab8 <nan+0x8>)
 8015ab4:	4770      	bx	lr
 8015ab6:	46c0      	nop			@ (mov r8, r8)
 8015ab8:	7ff80000 	.word	0x7ff80000

08015abc <__assert_func>:
 8015abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015abe:	0014      	movs	r4, r2
 8015ac0:	001a      	movs	r2, r3
 8015ac2:	4b09      	ldr	r3, [pc, #36]	@ (8015ae8 <__assert_func+0x2c>)
 8015ac4:	0005      	movs	r5, r0
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	000e      	movs	r6, r1
 8015aca:	68d8      	ldr	r0, [r3, #12]
 8015acc:	4b07      	ldr	r3, [pc, #28]	@ (8015aec <__assert_func+0x30>)
 8015ace:	2c00      	cmp	r4, #0
 8015ad0:	d101      	bne.n	8015ad6 <__assert_func+0x1a>
 8015ad2:	4b07      	ldr	r3, [pc, #28]	@ (8015af0 <__assert_func+0x34>)
 8015ad4:	001c      	movs	r4, r3
 8015ad6:	4907      	ldr	r1, [pc, #28]	@ (8015af4 <__assert_func+0x38>)
 8015ad8:	9301      	str	r3, [sp, #4]
 8015ada:	9402      	str	r4, [sp, #8]
 8015adc:	002b      	movs	r3, r5
 8015ade:	9600      	str	r6, [sp, #0]
 8015ae0:	f000 fbe0 	bl	80162a4 <fiprintf>
 8015ae4:	f000 fbee 	bl	80162c4 <abort>
 8015ae8:	20000094 	.word	0x20000094
 8015aec:	08017652 	.word	0x08017652
 8015af0:	0801768d 	.word	0x0801768d
 8015af4:	0801765f 	.word	0x0801765f

08015af8 <_calloc_r>:
 8015af8:	b570      	push	{r4, r5, r6, lr}
 8015afa:	0c0b      	lsrs	r3, r1, #16
 8015afc:	0c15      	lsrs	r5, r2, #16
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d11e      	bne.n	8015b40 <_calloc_r+0x48>
 8015b02:	2d00      	cmp	r5, #0
 8015b04:	d10c      	bne.n	8015b20 <_calloc_r+0x28>
 8015b06:	b289      	uxth	r1, r1
 8015b08:	b294      	uxth	r4, r2
 8015b0a:	434c      	muls	r4, r1
 8015b0c:	0021      	movs	r1, r4
 8015b0e:	f7fe f98f 	bl	8013e30 <_malloc_r>
 8015b12:	1e05      	subs	r5, r0, #0
 8015b14:	d01a      	beq.n	8015b4c <_calloc_r+0x54>
 8015b16:	0022      	movs	r2, r4
 8015b18:	2100      	movs	r1, #0
 8015b1a:	f7fd f995 	bl	8012e48 <memset>
 8015b1e:	e016      	b.n	8015b4e <_calloc_r+0x56>
 8015b20:	1c2b      	adds	r3, r5, #0
 8015b22:	1c0c      	adds	r4, r1, #0
 8015b24:	b289      	uxth	r1, r1
 8015b26:	b292      	uxth	r2, r2
 8015b28:	434a      	muls	r2, r1
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	b2a1      	uxth	r1, r4
 8015b2e:	4359      	muls	r1, r3
 8015b30:	0c14      	lsrs	r4, r2, #16
 8015b32:	190c      	adds	r4, r1, r4
 8015b34:	0c23      	lsrs	r3, r4, #16
 8015b36:	d107      	bne.n	8015b48 <_calloc_r+0x50>
 8015b38:	0424      	lsls	r4, r4, #16
 8015b3a:	b292      	uxth	r2, r2
 8015b3c:	4314      	orrs	r4, r2
 8015b3e:	e7e5      	b.n	8015b0c <_calloc_r+0x14>
 8015b40:	2d00      	cmp	r5, #0
 8015b42:	d101      	bne.n	8015b48 <_calloc_r+0x50>
 8015b44:	1c14      	adds	r4, r2, #0
 8015b46:	e7ed      	b.n	8015b24 <_calloc_r+0x2c>
 8015b48:	230c      	movs	r3, #12
 8015b4a:	6003      	str	r3, [r0, #0]
 8015b4c:	2500      	movs	r5, #0
 8015b4e:	0028      	movs	r0, r5
 8015b50:	bd70      	pop	{r4, r5, r6, pc}

08015b52 <rshift>:
 8015b52:	0002      	movs	r2, r0
 8015b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b56:	6904      	ldr	r4, [r0, #16]
 8015b58:	b085      	sub	sp, #20
 8015b5a:	3214      	adds	r2, #20
 8015b5c:	114b      	asrs	r3, r1, #5
 8015b5e:	0016      	movs	r6, r2
 8015b60:	9302      	str	r3, [sp, #8]
 8015b62:	429c      	cmp	r4, r3
 8015b64:	dd31      	ble.n	8015bca <rshift+0x78>
 8015b66:	261f      	movs	r6, #31
 8015b68:	000f      	movs	r7, r1
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	00a5      	lsls	r5, r4, #2
 8015b6e:	18d3      	adds	r3, r2, r3
 8015b70:	4037      	ands	r7, r6
 8015b72:	1955      	adds	r5, r2, r5
 8015b74:	9300      	str	r3, [sp, #0]
 8015b76:	9701      	str	r7, [sp, #4]
 8015b78:	4231      	tst	r1, r6
 8015b7a:	d10d      	bne.n	8015b98 <rshift+0x46>
 8015b7c:	0016      	movs	r6, r2
 8015b7e:	0019      	movs	r1, r3
 8015b80:	428d      	cmp	r5, r1
 8015b82:	d836      	bhi.n	8015bf2 <rshift+0xa0>
 8015b84:	9b00      	ldr	r3, [sp, #0]
 8015b86:	2600      	movs	r6, #0
 8015b88:	3b03      	subs	r3, #3
 8015b8a:	429d      	cmp	r5, r3
 8015b8c:	d302      	bcc.n	8015b94 <rshift+0x42>
 8015b8e:	9b02      	ldr	r3, [sp, #8]
 8015b90:	1ae4      	subs	r4, r4, r3
 8015b92:	00a6      	lsls	r6, r4, #2
 8015b94:	1996      	adds	r6, r2, r6
 8015b96:	e018      	b.n	8015bca <rshift+0x78>
 8015b98:	2120      	movs	r1, #32
 8015b9a:	9e01      	ldr	r6, [sp, #4]
 8015b9c:	9f01      	ldr	r7, [sp, #4]
 8015b9e:	1b89      	subs	r1, r1, r6
 8015ba0:	9e00      	ldr	r6, [sp, #0]
 8015ba2:	9103      	str	r1, [sp, #12]
 8015ba4:	ce02      	ldmia	r6!, {r1}
 8015ba6:	4694      	mov	ip, r2
 8015ba8:	40f9      	lsrs	r1, r7
 8015baa:	42b5      	cmp	r5, r6
 8015bac:	d816      	bhi.n	8015bdc <rshift+0x8a>
 8015bae:	9b00      	ldr	r3, [sp, #0]
 8015bb0:	2600      	movs	r6, #0
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	429d      	cmp	r5, r3
 8015bb6:	d303      	bcc.n	8015bc0 <rshift+0x6e>
 8015bb8:	9b02      	ldr	r3, [sp, #8]
 8015bba:	1ae4      	subs	r4, r4, r3
 8015bbc:	00a6      	lsls	r6, r4, #2
 8015bbe:	3e04      	subs	r6, #4
 8015bc0:	1996      	adds	r6, r2, r6
 8015bc2:	6031      	str	r1, [r6, #0]
 8015bc4:	2900      	cmp	r1, #0
 8015bc6:	d000      	beq.n	8015bca <rshift+0x78>
 8015bc8:	3604      	adds	r6, #4
 8015bca:	1ab1      	subs	r1, r6, r2
 8015bcc:	1089      	asrs	r1, r1, #2
 8015bce:	6101      	str	r1, [r0, #16]
 8015bd0:	4296      	cmp	r6, r2
 8015bd2:	d101      	bne.n	8015bd8 <rshift+0x86>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	6143      	str	r3, [r0, #20]
 8015bd8:	b005      	add	sp, #20
 8015bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bdc:	6837      	ldr	r7, [r6, #0]
 8015bde:	9b03      	ldr	r3, [sp, #12]
 8015be0:	409f      	lsls	r7, r3
 8015be2:	430f      	orrs	r7, r1
 8015be4:	4661      	mov	r1, ip
 8015be6:	c180      	stmia	r1!, {r7}
 8015be8:	468c      	mov	ip, r1
 8015bea:	9b01      	ldr	r3, [sp, #4]
 8015bec:	ce02      	ldmia	r6!, {r1}
 8015bee:	40d9      	lsrs	r1, r3
 8015bf0:	e7db      	b.n	8015baa <rshift+0x58>
 8015bf2:	c980      	ldmia	r1!, {r7}
 8015bf4:	c680      	stmia	r6!, {r7}
 8015bf6:	e7c3      	b.n	8015b80 <rshift+0x2e>

08015bf8 <__hexdig_fun>:
 8015bf8:	0002      	movs	r2, r0
 8015bfa:	3a30      	subs	r2, #48	@ 0x30
 8015bfc:	0003      	movs	r3, r0
 8015bfe:	2a09      	cmp	r2, #9
 8015c00:	d802      	bhi.n	8015c08 <__hexdig_fun+0x10>
 8015c02:	3b20      	subs	r3, #32
 8015c04:	b2d8      	uxtb	r0, r3
 8015c06:	4770      	bx	lr
 8015c08:	0002      	movs	r2, r0
 8015c0a:	3a61      	subs	r2, #97	@ 0x61
 8015c0c:	2a05      	cmp	r2, #5
 8015c0e:	d801      	bhi.n	8015c14 <__hexdig_fun+0x1c>
 8015c10:	3b47      	subs	r3, #71	@ 0x47
 8015c12:	e7f7      	b.n	8015c04 <__hexdig_fun+0xc>
 8015c14:	001a      	movs	r2, r3
 8015c16:	3a41      	subs	r2, #65	@ 0x41
 8015c18:	2000      	movs	r0, #0
 8015c1a:	2a05      	cmp	r2, #5
 8015c1c:	d8f3      	bhi.n	8015c06 <__hexdig_fun+0xe>
 8015c1e:	3b27      	subs	r3, #39	@ 0x27
 8015c20:	e7f0      	b.n	8015c04 <__hexdig_fun+0xc>
	...

08015c24 <__gethex>:
 8015c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c26:	b089      	sub	sp, #36	@ 0x24
 8015c28:	9307      	str	r3, [sp, #28]
 8015c2a:	680b      	ldr	r3, [r1, #0]
 8015c2c:	9201      	str	r2, [sp, #4]
 8015c2e:	9003      	str	r0, [sp, #12]
 8015c30:	9106      	str	r1, [sp, #24]
 8015c32:	1c9a      	adds	r2, r3, #2
 8015c34:	0011      	movs	r1, r2
 8015c36:	3201      	adds	r2, #1
 8015c38:	1e50      	subs	r0, r2, #1
 8015c3a:	7800      	ldrb	r0, [r0, #0]
 8015c3c:	2830      	cmp	r0, #48	@ 0x30
 8015c3e:	d0f9      	beq.n	8015c34 <__gethex+0x10>
 8015c40:	1acb      	subs	r3, r1, r3
 8015c42:	3b02      	subs	r3, #2
 8015c44:	9305      	str	r3, [sp, #20]
 8015c46:	9100      	str	r1, [sp, #0]
 8015c48:	f7ff ffd6 	bl	8015bf8 <__hexdig_fun>
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	001d      	movs	r5, r3
 8015c50:	9302      	str	r3, [sp, #8]
 8015c52:	4298      	cmp	r0, r3
 8015c54:	d11e      	bne.n	8015c94 <__gethex+0x70>
 8015c56:	2201      	movs	r2, #1
 8015c58:	49a6      	ldr	r1, [pc, #664]	@ (8015ef4 <__gethex+0x2d0>)
 8015c5a:	9800      	ldr	r0, [sp, #0]
 8015c5c:	f7ff ff04 	bl	8015a68 <strncmp>
 8015c60:	0007      	movs	r7, r0
 8015c62:	42a8      	cmp	r0, r5
 8015c64:	d000      	beq.n	8015c68 <__gethex+0x44>
 8015c66:	e06a      	b.n	8015d3e <__gethex+0x11a>
 8015c68:	9b00      	ldr	r3, [sp, #0]
 8015c6a:	7858      	ldrb	r0, [r3, #1]
 8015c6c:	1c5c      	adds	r4, r3, #1
 8015c6e:	f7ff ffc3 	bl	8015bf8 <__hexdig_fun>
 8015c72:	2301      	movs	r3, #1
 8015c74:	9302      	str	r3, [sp, #8]
 8015c76:	42a8      	cmp	r0, r5
 8015c78:	d02f      	beq.n	8015cda <__gethex+0xb6>
 8015c7a:	9400      	str	r4, [sp, #0]
 8015c7c:	9b00      	ldr	r3, [sp, #0]
 8015c7e:	7818      	ldrb	r0, [r3, #0]
 8015c80:	2830      	cmp	r0, #48	@ 0x30
 8015c82:	d009      	beq.n	8015c98 <__gethex+0x74>
 8015c84:	f7ff ffb8 	bl	8015bf8 <__hexdig_fun>
 8015c88:	4242      	negs	r2, r0
 8015c8a:	4142      	adcs	r2, r0
 8015c8c:	2301      	movs	r3, #1
 8015c8e:	0025      	movs	r5, r4
 8015c90:	9202      	str	r2, [sp, #8]
 8015c92:	9305      	str	r3, [sp, #20]
 8015c94:	9c00      	ldr	r4, [sp, #0]
 8015c96:	e004      	b.n	8015ca2 <__gethex+0x7e>
 8015c98:	9b00      	ldr	r3, [sp, #0]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	9300      	str	r3, [sp, #0]
 8015c9e:	e7ed      	b.n	8015c7c <__gethex+0x58>
 8015ca0:	3401      	adds	r4, #1
 8015ca2:	7820      	ldrb	r0, [r4, #0]
 8015ca4:	f7ff ffa8 	bl	8015bf8 <__hexdig_fun>
 8015ca8:	1e07      	subs	r7, r0, #0
 8015caa:	d1f9      	bne.n	8015ca0 <__gethex+0x7c>
 8015cac:	2201      	movs	r2, #1
 8015cae:	0020      	movs	r0, r4
 8015cb0:	4990      	ldr	r1, [pc, #576]	@ (8015ef4 <__gethex+0x2d0>)
 8015cb2:	f7ff fed9 	bl	8015a68 <strncmp>
 8015cb6:	2800      	cmp	r0, #0
 8015cb8:	d10d      	bne.n	8015cd6 <__gethex+0xb2>
 8015cba:	2d00      	cmp	r5, #0
 8015cbc:	d106      	bne.n	8015ccc <__gethex+0xa8>
 8015cbe:	3401      	adds	r4, #1
 8015cc0:	0025      	movs	r5, r4
 8015cc2:	7820      	ldrb	r0, [r4, #0]
 8015cc4:	f7ff ff98 	bl	8015bf8 <__hexdig_fun>
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	d102      	bne.n	8015cd2 <__gethex+0xae>
 8015ccc:	1b2d      	subs	r5, r5, r4
 8015cce:	00af      	lsls	r7, r5, #2
 8015cd0:	e003      	b.n	8015cda <__gethex+0xb6>
 8015cd2:	3401      	adds	r4, #1
 8015cd4:	e7f5      	b.n	8015cc2 <__gethex+0x9e>
 8015cd6:	2d00      	cmp	r5, #0
 8015cd8:	d1f8      	bne.n	8015ccc <__gethex+0xa8>
 8015cda:	2220      	movs	r2, #32
 8015cdc:	7823      	ldrb	r3, [r4, #0]
 8015cde:	0026      	movs	r6, r4
 8015ce0:	4393      	bics	r3, r2
 8015ce2:	2b50      	cmp	r3, #80	@ 0x50
 8015ce4:	d11d      	bne.n	8015d22 <__gethex+0xfe>
 8015ce6:	7863      	ldrb	r3, [r4, #1]
 8015ce8:	2b2b      	cmp	r3, #43	@ 0x2b
 8015cea:	d02d      	beq.n	8015d48 <__gethex+0x124>
 8015cec:	2b2d      	cmp	r3, #45	@ 0x2d
 8015cee:	d02f      	beq.n	8015d50 <__gethex+0x12c>
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	1c66      	adds	r6, r4, #1
 8015cf4:	9304      	str	r3, [sp, #16]
 8015cf6:	7830      	ldrb	r0, [r6, #0]
 8015cf8:	f7ff ff7e 	bl	8015bf8 <__hexdig_fun>
 8015cfc:	1e43      	subs	r3, r0, #1
 8015cfe:	b2db      	uxtb	r3, r3
 8015d00:	0005      	movs	r5, r0
 8015d02:	2b18      	cmp	r3, #24
 8015d04:	d82a      	bhi.n	8015d5c <__gethex+0x138>
 8015d06:	7870      	ldrb	r0, [r6, #1]
 8015d08:	f7ff ff76 	bl	8015bf8 <__hexdig_fun>
 8015d0c:	1e43      	subs	r3, r0, #1
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	3601      	adds	r6, #1
 8015d12:	3d10      	subs	r5, #16
 8015d14:	2b18      	cmp	r3, #24
 8015d16:	d91d      	bls.n	8015d54 <__gethex+0x130>
 8015d18:	9b04      	ldr	r3, [sp, #16]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d000      	beq.n	8015d20 <__gethex+0xfc>
 8015d1e:	426d      	negs	r5, r5
 8015d20:	197f      	adds	r7, r7, r5
 8015d22:	9b06      	ldr	r3, [sp, #24]
 8015d24:	601e      	str	r6, [r3, #0]
 8015d26:	9b02      	ldr	r3, [sp, #8]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d019      	beq.n	8015d60 <__gethex+0x13c>
 8015d2c:	9b05      	ldr	r3, [sp, #20]
 8015d2e:	2606      	movs	r6, #6
 8015d30:	425a      	negs	r2, r3
 8015d32:	4153      	adcs	r3, r2
 8015d34:	425b      	negs	r3, r3
 8015d36:	401e      	ands	r6, r3
 8015d38:	0030      	movs	r0, r6
 8015d3a:	b009      	add	sp, #36	@ 0x24
 8015d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d3e:	2301      	movs	r3, #1
 8015d40:	2700      	movs	r7, #0
 8015d42:	9c00      	ldr	r4, [sp, #0]
 8015d44:	9302      	str	r3, [sp, #8]
 8015d46:	e7c8      	b.n	8015cda <__gethex+0xb6>
 8015d48:	2300      	movs	r3, #0
 8015d4a:	9304      	str	r3, [sp, #16]
 8015d4c:	1ca6      	adds	r6, r4, #2
 8015d4e:	e7d2      	b.n	8015cf6 <__gethex+0xd2>
 8015d50:	2301      	movs	r3, #1
 8015d52:	e7fa      	b.n	8015d4a <__gethex+0x126>
 8015d54:	230a      	movs	r3, #10
 8015d56:	435d      	muls	r5, r3
 8015d58:	182d      	adds	r5, r5, r0
 8015d5a:	e7d4      	b.n	8015d06 <__gethex+0xe2>
 8015d5c:	0026      	movs	r6, r4
 8015d5e:	e7e0      	b.n	8015d22 <__gethex+0xfe>
 8015d60:	9b00      	ldr	r3, [sp, #0]
 8015d62:	9902      	ldr	r1, [sp, #8]
 8015d64:	1ae3      	subs	r3, r4, r3
 8015d66:	3b01      	subs	r3, #1
 8015d68:	2b07      	cmp	r3, #7
 8015d6a:	dc0a      	bgt.n	8015d82 <__gethex+0x15e>
 8015d6c:	9803      	ldr	r0, [sp, #12]
 8015d6e:	f7fe f8ef 	bl	8013f50 <_Balloc>
 8015d72:	1e05      	subs	r5, r0, #0
 8015d74:	d108      	bne.n	8015d88 <__gethex+0x164>
 8015d76:	002a      	movs	r2, r5
 8015d78:	21e4      	movs	r1, #228	@ 0xe4
 8015d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8015ef8 <__gethex+0x2d4>)
 8015d7c:	485f      	ldr	r0, [pc, #380]	@ (8015efc <__gethex+0x2d8>)
 8015d7e:	f7ff fe9d 	bl	8015abc <__assert_func>
 8015d82:	3101      	adds	r1, #1
 8015d84:	105b      	asrs	r3, r3, #1
 8015d86:	e7ef      	b.n	8015d68 <__gethex+0x144>
 8015d88:	0003      	movs	r3, r0
 8015d8a:	3314      	adds	r3, #20
 8015d8c:	9302      	str	r3, [sp, #8]
 8015d8e:	9305      	str	r3, [sp, #20]
 8015d90:	2300      	movs	r3, #0
 8015d92:	001e      	movs	r6, r3
 8015d94:	9304      	str	r3, [sp, #16]
 8015d96:	9b00      	ldr	r3, [sp, #0]
 8015d98:	42a3      	cmp	r3, r4
 8015d9a:	d338      	bcc.n	8015e0e <__gethex+0x1ea>
 8015d9c:	9c05      	ldr	r4, [sp, #20]
 8015d9e:	9b02      	ldr	r3, [sp, #8]
 8015da0:	c440      	stmia	r4!, {r6}
 8015da2:	1ae4      	subs	r4, r4, r3
 8015da4:	10a4      	asrs	r4, r4, #2
 8015da6:	0030      	movs	r0, r6
 8015da8:	612c      	str	r4, [r5, #16]
 8015daa:	f7fe f9c9 	bl	8014140 <__hi0bits>
 8015dae:	9b01      	ldr	r3, [sp, #4]
 8015db0:	0164      	lsls	r4, r4, #5
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	1a26      	subs	r6, r4, r0
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	429e      	cmp	r6, r3
 8015dba:	dd52      	ble.n	8015e62 <__gethex+0x23e>
 8015dbc:	1af6      	subs	r6, r6, r3
 8015dbe:	0031      	movs	r1, r6
 8015dc0:	0028      	movs	r0, r5
 8015dc2:	f7fe fd6c 	bl	801489e <__any_on>
 8015dc6:	1e04      	subs	r4, r0, #0
 8015dc8:	d00f      	beq.n	8015dea <__gethex+0x1c6>
 8015dca:	2401      	movs	r4, #1
 8015dcc:	231f      	movs	r3, #31
 8015dce:	0020      	movs	r0, r4
 8015dd0:	1e72      	subs	r2, r6, #1
 8015dd2:	4013      	ands	r3, r2
 8015dd4:	4098      	lsls	r0, r3
 8015dd6:	0003      	movs	r3, r0
 8015dd8:	1151      	asrs	r1, r2, #5
 8015dda:	9802      	ldr	r0, [sp, #8]
 8015ddc:	0089      	lsls	r1, r1, #2
 8015dde:	5809      	ldr	r1, [r1, r0]
 8015de0:	4219      	tst	r1, r3
 8015de2:	d002      	beq.n	8015dea <__gethex+0x1c6>
 8015de4:	42a2      	cmp	r2, r4
 8015de6:	dc34      	bgt.n	8015e52 <__gethex+0x22e>
 8015de8:	2402      	movs	r4, #2
 8015dea:	0031      	movs	r1, r6
 8015dec:	0028      	movs	r0, r5
 8015dee:	f7ff feb0 	bl	8015b52 <rshift>
 8015df2:	19bf      	adds	r7, r7, r6
 8015df4:	9b01      	ldr	r3, [sp, #4]
 8015df6:	689b      	ldr	r3, [r3, #8]
 8015df8:	42bb      	cmp	r3, r7
 8015dfa:	da42      	bge.n	8015e82 <__gethex+0x25e>
 8015dfc:	0029      	movs	r1, r5
 8015dfe:	9803      	ldr	r0, [sp, #12]
 8015e00:	f7fe f8ea 	bl	8013fd8 <_Bfree>
 8015e04:	2300      	movs	r3, #0
 8015e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e08:	26a3      	movs	r6, #163	@ 0xa3
 8015e0a:	6013      	str	r3, [r2, #0]
 8015e0c:	e794      	b.n	8015d38 <__gethex+0x114>
 8015e0e:	3c01      	subs	r4, #1
 8015e10:	7823      	ldrb	r3, [r4, #0]
 8015e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8015e14:	d012      	beq.n	8015e3c <__gethex+0x218>
 8015e16:	9b04      	ldr	r3, [sp, #16]
 8015e18:	2b20      	cmp	r3, #32
 8015e1a:	d104      	bne.n	8015e26 <__gethex+0x202>
 8015e1c:	9b05      	ldr	r3, [sp, #20]
 8015e1e:	c340      	stmia	r3!, {r6}
 8015e20:	2600      	movs	r6, #0
 8015e22:	9305      	str	r3, [sp, #20]
 8015e24:	9604      	str	r6, [sp, #16]
 8015e26:	7820      	ldrb	r0, [r4, #0]
 8015e28:	f7ff fee6 	bl	8015bf8 <__hexdig_fun>
 8015e2c:	230f      	movs	r3, #15
 8015e2e:	4018      	ands	r0, r3
 8015e30:	9b04      	ldr	r3, [sp, #16]
 8015e32:	4098      	lsls	r0, r3
 8015e34:	3304      	adds	r3, #4
 8015e36:	4306      	orrs	r6, r0
 8015e38:	9304      	str	r3, [sp, #16]
 8015e3a:	e7ac      	b.n	8015d96 <__gethex+0x172>
 8015e3c:	9b00      	ldr	r3, [sp, #0]
 8015e3e:	42a3      	cmp	r3, r4
 8015e40:	d8e9      	bhi.n	8015e16 <__gethex+0x1f2>
 8015e42:	2201      	movs	r2, #1
 8015e44:	0020      	movs	r0, r4
 8015e46:	492b      	ldr	r1, [pc, #172]	@ (8015ef4 <__gethex+0x2d0>)
 8015e48:	f7ff fe0e 	bl	8015a68 <strncmp>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	d1e2      	bne.n	8015e16 <__gethex+0x1f2>
 8015e50:	e7a1      	b.n	8015d96 <__gethex+0x172>
 8015e52:	0028      	movs	r0, r5
 8015e54:	1eb1      	subs	r1, r6, #2
 8015e56:	f7fe fd22 	bl	801489e <__any_on>
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	d0c4      	beq.n	8015de8 <__gethex+0x1c4>
 8015e5e:	2403      	movs	r4, #3
 8015e60:	e7c3      	b.n	8015dea <__gethex+0x1c6>
 8015e62:	9b00      	ldr	r3, [sp, #0]
 8015e64:	2400      	movs	r4, #0
 8015e66:	429e      	cmp	r6, r3
 8015e68:	dac4      	bge.n	8015df4 <__gethex+0x1d0>
 8015e6a:	1b9e      	subs	r6, r3, r6
 8015e6c:	0029      	movs	r1, r5
 8015e6e:	0032      	movs	r2, r6
 8015e70:	9803      	ldr	r0, [sp, #12]
 8015e72:	f7fe fadb 	bl	801442c <__lshift>
 8015e76:	0003      	movs	r3, r0
 8015e78:	3314      	adds	r3, #20
 8015e7a:	0005      	movs	r5, r0
 8015e7c:	1bbf      	subs	r7, r7, r6
 8015e7e:	9302      	str	r3, [sp, #8]
 8015e80:	e7b8      	b.n	8015df4 <__gethex+0x1d0>
 8015e82:	9b01      	ldr	r3, [sp, #4]
 8015e84:	685e      	ldr	r6, [r3, #4]
 8015e86:	42be      	cmp	r6, r7
 8015e88:	dd6f      	ble.n	8015f6a <__gethex+0x346>
 8015e8a:	9b00      	ldr	r3, [sp, #0]
 8015e8c:	1bf6      	subs	r6, r6, r7
 8015e8e:	42b3      	cmp	r3, r6
 8015e90:	dc36      	bgt.n	8015f00 <__gethex+0x2dc>
 8015e92:	9b01      	ldr	r3, [sp, #4]
 8015e94:	68db      	ldr	r3, [r3, #12]
 8015e96:	2b02      	cmp	r3, #2
 8015e98:	d024      	beq.n	8015ee4 <__gethex+0x2c0>
 8015e9a:	2b03      	cmp	r3, #3
 8015e9c:	d026      	beq.n	8015eec <__gethex+0x2c8>
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	d117      	bne.n	8015ed2 <__gethex+0x2ae>
 8015ea2:	9b00      	ldr	r3, [sp, #0]
 8015ea4:	42b3      	cmp	r3, r6
 8015ea6:	d114      	bne.n	8015ed2 <__gethex+0x2ae>
 8015ea8:	2b01      	cmp	r3, #1
 8015eaa:	d10b      	bne.n	8015ec4 <__gethex+0x2a0>
 8015eac:	9b01      	ldr	r3, [sp, #4]
 8015eae:	9a07      	ldr	r2, [sp, #28]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	2662      	movs	r6, #98	@ 0x62
 8015eb4:	6013      	str	r3, [r2, #0]
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	9a02      	ldr	r2, [sp, #8]
 8015eba:	612b      	str	r3, [r5, #16]
 8015ebc:	6013      	str	r3, [r2, #0]
 8015ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ec0:	601d      	str	r5, [r3, #0]
 8015ec2:	e739      	b.n	8015d38 <__gethex+0x114>
 8015ec4:	9900      	ldr	r1, [sp, #0]
 8015ec6:	0028      	movs	r0, r5
 8015ec8:	3901      	subs	r1, #1
 8015eca:	f7fe fce8 	bl	801489e <__any_on>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d1ec      	bne.n	8015eac <__gethex+0x288>
 8015ed2:	0029      	movs	r1, r5
 8015ed4:	9803      	ldr	r0, [sp, #12]
 8015ed6:	f7fe f87f 	bl	8013fd8 <_Bfree>
 8015eda:	2300      	movs	r3, #0
 8015edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ede:	2650      	movs	r6, #80	@ 0x50
 8015ee0:	6013      	str	r3, [r2, #0]
 8015ee2:	e729      	b.n	8015d38 <__gethex+0x114>
 8015ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d1f3      	bne.n	8015ed2 <__gethex+0x2ae>
 8015eea:	e7df      	b.n	8015eac <__gethex+0x288>
 8015eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1dc      	bne.n	8015eac <__gethex+0x288>
 8015ef2:	e7ee      	b.n	8015ed2 <__gethex+0x2ae>
 8015ef4:	080174e0 	.word	0x080174e0
 8015ef8:	08017375 	.word	0x08017375
 8015efc:	0801768e 	.word	0x0801768e
 8015f00:	1e77      	subs	r7, r6, #1
 8015f02:	2c00      	cmp	r4, #0
 8015f04:	d12f      	bne.n	8015f66 <__gethex+0x342>
 8015f06:	2f00      	cmp	r7, #0
 8015f08:	d004      	beq.n	8015f14 <__gethex+0x2f0>
 8015f0a:	0039      	movs	r1, r7
 8015f0c:	0028      	movs	r0, r5
 8015f0e:	f7fe fcc6 	bl	801489e <__any_on>
 8015f12:	0004      	movs	r4, r0
 8015f14:	231f      	movs	r3, #31
 8015f16:	117a      	asrs	r2, r7, #5
 8015f18:	401f      	ands	r7, r3
 8015f1a:	3b1e      	subs	r3, #30
 8015f1c:	40bb      	lsls	r3, r7
 8015f1e:	9902      	ldr	r1, [sp, #8]
 8015f20:	0092      	lsls	r2, r2, #2
 8015f22:	5852      	ldr	r2, [r2, r1]
 8015f24:	421a      	tst	r2, r3
 8015f26:	d001      	beq.n	8015f2c <__gethex+0x308>
 8015f28:	2302      	movs	r3, #2
 8015f2a:	431c      	orrs	r4, r3
 8015f2c:	9b00      	ldr	r3, [sp, #0]
 8015f2e:	0031      	movs	r1, r6
 8015f30:	1b9b      	subs	r3, r3, r6
 8015f32:	2602      	movs	r6, #2
 8015f34:	0028      	movs	r0, r5
 8015f36:	9300      	str	r3, [sp, #0]
 8015f38:	f7ff fe0b 	bl	8015b52 <rshift>
 8015f3c:	9b01      	ldr	r3, [sp, #4]
 8015f3e:	685f      	ldr	r7, [r3, #4]
 8015f40:	2c00      	cmp	r4, #0
 8015f42:	d03f      	beq.n	8015fc4 <__gethex+0x3a0>
 8015f44:	9b01      	ldr	r3, [sp, #4]
 8015f46:	68db      	ldr	r3, [r3, #12]
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d010      	beq.n	8015f6e <__gethex+0x34a>
 8015f4c:	2b03      	cmp	r3, #3
 8015f4e:	d012      	beq.n	8015f76 <__gethex+0x352>
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	d106      	bne.n	8015f62 <__gethex+0x33e>
 8015f54:	07a2      	lsls	r2, r4, #30
 8015f56:	d504      	bpl.n	8015f62 <__gethex+0x33e>
 8015f58:	9a02      	ldr	r2, [sp, #8]
 8015f5a:	6812      	ldr	r2, [r2, #0]
 8015f5c:	4314      	orrs	r4, r2
 8015f5e:	421c      	tst	r4, r3
 8015f60:	d10c      	bne.n	8015f7c <__gethex+0x358>
 8015f62:	2310      	movs	r3, #16
 8015f64:	e02d      	b.n	8015fc2 <__gethex+0x39e>
 8015f66:	2401      	movs	r4, #1
 8015f68:	e7d4      	b.n	8015f14 <__gethex+0x2f0>
 8015f6a:	2601      	movs	r6, #1
 8015f6c:	e7e8      	b.n	8015f40 <__gethex+0x31c>
 8015f6e:	2301      	movs	r3, #1
 8015f70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015f72:	1a9b      	subs	r3, r3, r2
 8015f74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d0f2      	beq.n	8015f62 <__gethex+0x33e>
 8015f7c:	692b      	ldr	r3, [r5, #16]
 8015f7e:	2000      	movs	r0, #0
 8015f80:	9302      	str	r3, [sp, #8]
 8015f82:	009b      	lsls	r3, r3, #2
 8015f84:	9304      	str	r3, [sp, #16]
 8015f86:	002b      	movs	r3, r5
 8015f88:	9a04      	ldr	r2, [sp, #16]
 8015f8a:	3314      	adds	r3, #20
 8015f8c:	1899      	adds	r1, r3, r2
 8015f8e:	681a      	ldr	r2, [r3, #0]
 8015f90:	1c54      	adds	r4, r2, #1
 8015f92:	d01c      	beq.n	8015fce <__gethex+0x3aa>
 8015f94:	3201      	adds	r2, #1
 8015f96:	601a      	str	r2, [r3, #0]
 8015f98:	002b      	movs	r3, r5
 8015f9a:	3314      	adds	r3, #20
 8015f9c:	2e02      	cmp	r6, #2
 8015f9e:	d13f      	bne.n	8016020 <__gethex+0x3fc>
 8015fa0:	9a01      	ldr	r2, [sp, #4]
 8015fa2:	9900      	ldr	r1, [sp, #0]
 8015fa4:	6812      	ldr	r2, [r2, #0]
 8015fa6:	3a01      	subs	r2, #1
 8015fa8:	428a      	cmp	r2, r1
 8015faa:	d109      	bne.n	8015fc0 <__gethex+0x39c>
 8015fac:	000a      	movs	r2, r1
 8015fae:	201f      	movs	r0, #31
 8015fb0:	4010      	ands	r0, r2
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	4082      	lsls	r2, r0
 8015fb6:	1149      	asrs	r1, r1, #5
 8015fb8:	0089      	lsls	r1, r1, #2
 8015fba:	58cb      	ldr	r3, [r1, r3]
 8015fbc:	4213      	tst	r3, r2
 8015fbe:	d13d      	bne.n	801603c <__gethex+0x418>
 8015fc0:	2320      	movs	r3, #32
 8015fc2:	431e      	orrs	r6, r3
 8015fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fc6:	601d      	str	r5, [r3, #0]
 8015fc8:	9b07      	ldr	r3, [sp, #28]
 8015fca:	601f      	str	r7, [r3, #0]
 8015fcc:	e6b4      	b.n	8015d38 <__gethex+0x114>
 8015fce:	c301      	stmia	r3!, {r0}
 8015fd0:	4299      	cmp	r1, r3
 8015fd2:	d8dc      	bhi.n	8015f8e <__gethex+0x36a>
 8015fd4:	68ab      	ldr	r3, [r5, #8]
 8015fd6:	9a02      	ldr	r2, [sp, #8]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	db18      	blt.n	801600e <__gethex+0x3ea>
 8015fdc:	6869      	ldr	r1, [r5, #4]
 8015fde:	9803      	ldr	r0, [sp, #12]
 8015fe0:	3101      	adds	r1, #1
 8015fe2:	f7fd ffb5 	bl	8013f50 <_Balloc>
 8015fe6:	1e04      	subs	r4, r0, #0
 8015fe8:	d104      	bne.n	8015ff4 <__gethex+0x3d0>
 8015fea:	0022      	movs	r2, r4
 8015fec:	2184      	movs	r1, #132	@ 0x84
 8015fee:	4b1d      	ldr	r3, [pc, #116]	@ (8016064 <__gethex+0x440>)
 8015ff0:	481d      	ldr	r0, [pc, #116]	@ (8016068 <__gethex+0x444>)
 8015ff2:	e6c4      	b.n	8015d7e <__gethex+0x15a>
 8015ff4:	0029      	movs	r1, r5
 8015ff6:	692a      	ldr	r2, [r5, #16]
 8015ff8:	310c      	adds	r1, #12
 8015ffa:	3202      	adds	r2, #2
 8015ffc:	0092      	lsls	r2, r2, #2
 8015ffe:	300c      	adds	r0, #12
 8016000:	f7fd f814 	bl	801302c <memcpy>
 8016004:	0029      	movs	r1, r5
 8016006:	9803      	ldr	r0, [sp, #12]
 8016008:	f7fd ffe6 	bl	8013fd8 <_Bfree>
 801600c:	0025      	movs	r5, r4
 801600e:	692b      	ldr	r3, [r5, #16]
 8016010:	1c5a      	adds	r2, r3, #1
 8016012:	612a      	str	r2, [r5, #16]
 8016014:	2201      	movs	r2, #1
 8016016:	3304      	adds	r3, #4
 8016018:	009b      	lsls	r3, r3, #2
 801601a:	18eb      	adds	r3, r5, r3
 801601c:	605a      	str	r2, [r3, #4]
 801601e:	e7bb      	b.n	8015f98 <__gethex+0x374>
 8016020:	692a      	ldr	r2, [r5, #16]
 8016022:	9902      	ldr	r1, [sp, #8]
 8016024:	428a      	cmp	r2, r1
 8016026:	dd0b      	ble.n	8016040 <__gethex+0x41c>
 8016028:	2101      	movs	r1, #1
 801602a:	0028      	movs	r0, r5
 801602c:	f7ff fd91 	bl	8015b52 <rshift>
 8016030:	9b01      	ldr	r3, [sp, #4]
 8016032:	3701      	adds	r7, #1
 8016034:	689b      	ldr	r3, [r3, #8]
 8016036:	42bb      	cmp	r3, r7
 8016038:	da00      	bge.n	801603c <__gethex+0x418>
 801603a:	e6df      	b.n	8015dfc <__gethex+0x1d8>
 801603c:	2601      	movs	r6, #1
 801603e:	e7bf      	b.n	8015fc0 <__gethex+0x39c>
 8016040:	221f      	movs	r2, #31
 8016042:	9c00      	ldr	r4, [sp, #0]
 8016044:	9900      	ldr	r1, [sp, #0]
 8016046:	4014      	ands	r4, r2
 8016048:	4211      	tst	r1, r2
 801604a:	d0f7      	beq.n	801603c <__gethex+0x418>
 801604c:	9a04      	ldr	r2, [sp, #16]
 801604e:	189b      	adds	r3, r3, r2
 8016050:	3b04      	subs	r3, #4
 8016052:	6818      	ldr	r0, [r3, #0]
 8016054:	f7fe f874 	bl	8014140 <__hi0bits>
 8016058:	2320      	movs	r3, #32
 801605a:	1b1b      	subs	r3, r3, r4
 801605c:	4298      	cmp	r0, r3
 801605e:	dbe3      	blt.n	8016028 <__gethex+0x404>
 8016060:	e7ec      	b.n	801603c <__gethex+0x418>
 8016062:	46c0      	nop			@ (mov r8, r8)
 8016064:	08017375 	.word	0x08017375
 8016068:	0801768e 	.word	0x0801768e

0801606c <L_shift>:
 801606c:	2308      	movs	r3, #8
 801606e:	b570      	push	{r4, r5, r6, lr}
 8016070:	2520      	movs	r5, #32
 8016072:	1a9a      	subs	r2, r3, r2
 8016074:	0092      	lsls	r2, r2, #2
 8016076:	1aad      	subs	r5, r5, r2
 8016078:	6843      	ldr	r3, [r0, #4]
 801607a:	6804      	ldr	r4, [r0, #0]
 801607c:	001e      	movs	r6, r3
 801607e:	40ae      	lsls	r6, r5
 8016080:	40d3      	lsrs	r3, r2
 8016082:	4334      	orrs	r4, r6
 8016084:	6004      	str	r4, [r0, #0]
 8016086:	6043      	str	r3, [r0, #4]
 8016088:	3004      	adds	r0, #4
 801608a:	4288      	cmp	r0, r1
 801608c:	d3f4      	bcc.n	8016078 <L_shift+0xc>
 801608e:	bd70      	pop	{r4, r5, r6, pc}

08016090 <__match>:
 8016090:	b530      	push	{r4, r5, lr}
 8016092:	6803      	ldr	r3, [r0, #0]
 8016094:	780c      	ldrb	r4, [r1, #0]
 8016096:	3301      	adds	r3, #1
 8016098:	2c00      	cmp	r4, #0
 801609a:	d102      	bne.n	80160a2 <__match+0x12>
 801609c:	6003      	str	r3, [r0, #0]
 801609e:	2001      	movs	r0, #1
 80160a0:	bd30      	pop	{r4, r5, pc}
 80160a2:	781a      	ldrb	r2, [r3, #0]
 80160a4:	0015      	movs	r5, r2
 80160a6:	3d41      	subs	r5, #65	@ 0x41
 80160a8:	2d19      	cmp	r5, #25
 80160aa:	d800      	bhi.n	80160ae <__match+0x1e>
 80160ac:	3220      	adds	r2, #32
 80160ae:	3101      	adds	r1, #1
 80160b0:	42a2      	cmp	r2, r4
 80160b2:	d0ef      	beq.n	8016094 <__match+0x4>
 80160b4:	2000      	movs	r0, #0
 80160b6:	e7f3      	b.n	80160a0 <__match+0x10>

080160b8 <__hexnan>:
 80160b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160ba:	680b      	ldr	r3, [r1, #0]
 80160bc:	b08b      	sub	sp, #44	@ 0x2c
 80160be:	9201      	str	r2, [sp, #4]
 80160c0:	9901      	ldr	r1, [sp, #4]
 80160c2:	115a      	asrs	r2, r3, #5
 80160c4:	0092      	lsls	r2, r2, #2
 80160c6:	188a      	adds	r2, r1, r2
 80160c8:	9202      	str	r2, [sp, #8]
 80160ca:	0019      	movs	r1, r3
 80160cc:	221f      	movs	r2, #31
 80160ce:	4011      	ands	r1, r2
 80160d0:	9008      	str	r0, [sp, #32]
 80160d2:	9106      	str	r1, [sp, #24]
 80160d4:	4213      	tst	r3, r2
 80160d6:	d002      	beq.n	80160de <__hexnan+0x26>
 80160d8:	9b02      	ldr	r3, [sp, #8]
 80160da:	3304      	adds	r3, #4
 80160dc:	9302      	str	r3, [sp, #8]
 80160de:	9b02      	ldr	r3, [sp, #8]
 80160e0:	2500      	movs	r5, #0
 80160e2:	1f1f      	subs	r7, r3, #4
 80160e4:	003e      	movs	r6, r7
 80160e6:	003c      	movs	r4, r7
 80160e8:	9b08      	ldr	r3, [sp, #32]
 80160ea:	603d      	str	r5, [r7, #0]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	9507      	str	r5, [sp, #28]
 80160f0:	9305      	str	r3, [sp, #20]
 80160f2:	9503      	str	r5, [sp, #12]
 80160f4:	9b05      	ldr	r3, [sp, #20]
 80160f6:	3301      	adds	r3, #1
 80160f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80160fa:	9b05      	ldr	r3, [sp, #20]
 80160fc:	785b      	ldrb	r3, [r3, #1]
 80160fe:	9304      	str	r3, [sp, #16]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d028      	beq.n	8016156 <__hexnan+0x9e>
 8016104:	9804      	ldr	r0, [sp, #16]
 8016106:	f7ff fd77 	bl	8015bf8 <__hexdig_fun>
 801610a:	2800      	cmp	r0, #0
 801610c:	d155      	bne.n	80161ba <__hexnan+0x102>
 801610e:	9b04      	ldr	r3, [sp, #16]
 8016110:	2b20      	cmp	r3, #32
 8016112:	d819      	bhi.n	8016148 <__hexnan+0x90>
 8016114:	9b03      	ldr	r3, [sp, #12]
 8016116:	9a07      	ldr	r2, [sp, #28]
 8016118:	4293      	cmp	r3, r2
 801611a:	dd12      	ble.n	8016142 <__hexnan+0x8a>
 801611c:	42b4      	cmp	r4, r6
 801611e:	d206      	bcs.n	801612e <__hexnan+0x76>
 8016120:	2d07      	cmp	r5, #7
 8016122:	dc04      	bgt.n	801612e <__hexnan+0x76>
 8016124:	002a      	movs	r2, r5
 8016126:	0031      	movs	r1, r6
 8016128:	0020      	movs	r0, r4
 801612a:	f7ff ff9f 	bl	801606c <L_shift>
 801612e:	9b01      	ldr	r3, [sp, #4]
 8016130:	2508      	movs	r5, #8
 8016132:	429c      	cmp	r4, r3
 8016134:	d905      	bls.n	8016142 <__hexnan+0x8a>
 8016136:	1f26      	subs	r6, r4, #4
 8016138:	2500      	movs	r5, #0
 801613a:	0034      	movs	r4, r6
 801613c:	9b03      	ldr	r3, [sp, #12]
 801613e:	6035      	str	r5, [r6, #0]
 8016140:	9307      	str	r3, [sp, #28]
 8016142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016144:	9305      	str	r3, [sp, #20]
 8016146:	e7d5      	b.n	80160f4 <__hexnan+0x3c>
 8016148:	9b04      	ldr	r3, [sp, #16]
 801614a:	2b29      	cmp	r3, #41	@ 0x29
 801614c:	d15a      	bne.n	8016204 <__hexnan+0x14c>
 801614e:	9b05      	ldr	r3, [sp, #20]
 8016150:	9a08      	ldr	r2, [sp, #32]
 8016152:	3302      	adds	r3, #2
 8016154:	6013      	str	r3, [r2, #0]
 8016156:	9b03      	ldr	r3, [sp, #12]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d053      	beq.n	8016204 <__hexnan+0x14c>
 801615c:	42b4      	cmp	r4, r6
 801615e:	d206      	bcs.n	801616e <__hexnan+0xb6>
 8016160:	2d07      	cmp	r5, #7
 8016162:	dc04      	bgt.n	801616e <__hexnan+0xb6>
 8016164:	002a      	movs	r2, r5
 8016166:	0031      	movs	r1, r6
 8016168:	0020      	movs	r0, r4
 801616a:	f7ff ff7f 	bl	801606c <L_shift>
 801616e:	9b01      	ldr	r3, [sp, #4]
 8016170:	429c      	cmp	r4, r3
 8016172:	d936      	bls.n	80161e2 <__hexnan+0x12a>
 8016174:	001a      	movs	r2, r3
 8016176:	0023      	movs	r3, r4
 8016178:	cb02      	ldmia	r3!, {r1}
 801617a:	c202      	stmia	r2!, {r1}
 801617c:	429f      	cmp	r7, r3
 801617e:	d2fb      	bcs.n	8016178 <__hexnan+0xc0>
 8016180:	9b02      	ldr	r3, [sp, #8]
 8016182:	1c61      	adds	r1, r4, #1
 8016184:	1eda      	subs	r2, r3, #3
 8016186:	2304      	movs	r3, #4
 8016188:	4291      	cmp	r1, r2
 801618a:	d805      	bhi.n	8016198 <__hexnan+0xe0>
 801618c:	9b02      	ldr	r3, [sp, #8]
 801618e:	3b04      	subs	r3, #4
 8016190:	1b1b      	subs	r3, r3, r4
 8016192:	089b      	lsrs	r3, r3, #2
 8016194:	3301      	adds	r3, #1
 8016196:	009b      	lsls	r3, r3, #2
 8016198:	9a01      	ldr	r2, [sp, #4]
 801619a:	18d3      	adds	r3, r2, r3
 801619c:	2200      	movs	r2, #0
 801619e:	c304      	stmia	r3!, {r2}
 80161a0:	429f      	cmp	r7, r3
 80161a2:	d2fc      	bcs.n	801619e <__hexnan+0xe6>
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d104      	bne.n	80161b4 <__hexnan+0xfc>
 80161aa:	9b01      	ldr	r3, [sp, #4]
 80161ac:	429f      	cmp	r7, r3
 80161ae:	d127      	bne.n	8016200 <__hexnan+0x148>
 80161b0:	2301      	movs	r3, #1
 80161b2:	603b      	str	r3, [r7, #0]
 80161b4:	2005      	movs	r0, #5
 80161b6:	b00b      	add	sp, #44	@ 0x2c
 80161b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ba:	9b03      	ldr	r3, [sp, #12]
 80161bc:	3501      	adds	r5, #1
 80161be:	3301      	adds	r3, #1
 80161c0:	9303      	str	r3, [sp, #12]
 80161c2:	2d08      	cmp	r5, #8
 80161c4:	dd06      	ble.n	80161d4 <__hexnan+0x11c>
 80161c6:	9b01      	ldr	r3, [sp, #4]
 80161c8:	429c      	cmp	r4, r3
 80161ca:	d9ba      	bls.n	8016142 <__hexnan+0x8a>
 80161cc:	2300      	movs	r3, #0
 80161ce:	2501      	movs	r5, #1
 80161d0:	3c04      	subs	r4, #4
 80161d2:	6023      	str	r3, [r4, #0]
 80161d4:	220f      	movs	r2, #15
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	4010      	ands	r0, r2
 80161da:	011b      	lsls	r3, r3, #4
 80161dc:	4303      	orrs	r3, r0
 80161de:	6023      	str	r3, [r4, #0]
 80161e0:	e7af      	b.n	8016142 <__hexnan+0x8a>
 80161e2:	9b06      	ldr	r3, [sp, #24]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d0dd      	beq.n	80161a4 <__hexnan+0xec>
 80161e8:	2320      	movs	r3, #32
 80161ea:	9a06      	ldr	r2, [sp, #24]
 80161ec:	9902      	ldr	r1, [sp, #8]
 80161ee:	1a9b      	subs	r3, r3, r2
 80161f0:	2201      	movs	r2, #1
 80161f2:	4252      	negs	r2, r2
 80161f4:	40da      	lsrs	r2, r3
 80161f6:	3904      	subs	r1, #4
 80161f8:	680b      	ldr	r3, [r1, #0]
 80161fa:	4013      	ands	r3, r2
 80161fc:	600b      	str	r3, [r1, #0]
 80161fe:	e7d1      	b.n	80161a4 <__hexnan+0xec>
 8016200:	3f04      	subs	r7, #4
 8016202:	e7cf      	b.n	80161a4 <__hexnan+0xec>
 8016204:	2004      	movs	r0, #4
 8016206:	e7d6      	b.n	80161b6 <__hexnan+0xfe>

08016208 <__ascii_mbtowc>:
 8016208:	b082      	sub	sp, #8
 801620a:	2900      	cmp	r1, #0
 801620c:	d100      	bne.n	8016210 <__ascii_mbtowc+0x8>
 801620e:	a901      	add	r1, sp, #4
 8016210:	1e10      	subs	r0, r2, #0
 8016212:	d006      	beq.n	8016222 <__ascii_mbtowc+0x1a>
 8016214:	2b00      	cmp	r3, #0
 8016216:	d006      	beq.n	8016226 <__ascii_mbtowc+0x1e>
 8016218:	7813      	ldrb	r3, [r2, #0]
 801621a:	600b      	str	r3, [r1, #0]
 801621c:	7810      	ldrb	r0, [r2, #0]
 801621e:	1e43      	subs	r3, r0, #1
 8016220:	4198      	sbcs	r0, r3
 8016222:	b002      	add	sp, #8
 8016224:	4770      	bx	lr
 8016226:	2002      	movs	r0, #2
 8016228:	4240      	negs	r0, r0
 801622a:	e7fa      	b.n	8016222 <__ascii_mbtowc+0x1a>

0801622c <_realloc_r>:
 801622c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801622e:	0006      	movs	r6, r0
 8016230:	000c      	movs	r4, r1
 8016232:	0015      	movs	r5, r2
 8016234:	2900      	cmp	r1, #0
 8016236:	d105      	bne.n	8016244 <_realloc_r+0x18>
 8016238:	0011      	movs	r1, r2
 801623a:	f7fd fdf9 	bl	8013e30 <_malloc_r>
 801623e:	0004      	movs	r4, r0
 8016240:	0020      	movs	r0, r4
 8016242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016244:	2a00      	cmp	r2, #0
 8016246:	d103      	bne.n	8016250 <_realloc_r+0x24>
 8016248:	f7fd fd7c 	bl	8013d44 <_free_r>
 801624c:	2400      	movs	r4, #0
 801624e:	e7f7      	b.n	8016240 <_realloc_r+0x14>
 8016250:	f000 f83f 	bl	80162d2 <_malloc_usable_size_r>
 8016254:	0007      	movs	r7, r0
 8016256:	4285      	cmp	r5, r0
 8016258:	d802      	bhi.n	8016260 <_realloc_r+0x34>
 801625a:	0843      	lsrs	r3, r0, #1
 801625c:	42ab      	cmp	r3, r5
 801625e:	d3ef      	bcc.n	8016240 <_realloc_r+0x14>
 8016260:	0029      	movs	r1, r5
 8016262:	0030      	movs	r0, r6
 8016264:	f7fd fde4 	bl	8013e30 <_malloc_r>
 8016268:	9001      	str	r0, [sp, #4]
 801626a:	2800      	cmp	r0, #0
 801626c:	d0ee      	beq.n	801624c <_realloc_r+0x20>
 801626e:	002a      	movs	r2, r5
 8016270:	42bd      	cmp	r5, r7
 8016272:	d900      	bls.n	8016276 <_realloc_r+0x4a>
 8016274:	003a      	movs	r2, r7
 8016276:	0021      	movs	r1, r4
 8016278:	9801      	ldr	r0, [sp, #4]
 801627a:	f7fc fed7 	bl	801302c <memcpy>
 801627e:	0021      	movs	r1, r4
 8016280:	0030      	movs	r0, r6
 8016282:	f7fd fd5f 	bl	8013d44 <_free_r>
 8016286:	9c01      	ldr	r4, [sp, #4]
 8016288:	e7da      	b.n	8016240 <_realloc_r+0x14>

0801628a <__ascii_wctomb>:
 801628a:	0003      	movs	r3, r0
 801628c:	1e08      	subs	r0, r1, #0
 801628e:	d005      	beq.n	801629c <__ascii_wctomb+0x12>
 8016290:	2aff      	cmp	r2, #255	@ 0xff
 8016292:	d904      	bls.n	801629e <__ascii_wctomb+0x14>
 8016294:	228a      	movs	r2, #138	@ 0x8a
 8016296:	2001      	movs	r0, #1
 8016298:	601a      	str	r2, [r3, #0]
 801629a:	4240      	negs	r0, r0
 801629c:	4770      	bx	lr
 801629e:	2001      	movs	r0, #1
 80162a0:	700a      	strb	r2, [r1, #0]
 80162a2:	e7fb      	b.n	801629c <__ascii_wctomb+0x12>

080162a4 <fiprintf>:
 80162a4:	b40e      	push	{r1, r2, r3}
 80162a6:	b517      	push	{r0, r1, r2, r4, lr}
 80162a8:	4c05      	ldr	r4, [pc, #20]	@ (80162c0 <fiprintf+0x1c>)
 80162aa:	ab05      	add	r3, sp, #20
 80162ac:	cb04      	ldmia	r3!, {r2}
 80162ae:	0001      	movs	r1, r0
 80162b0:	6820      	ldr	r0, [r4, #0]
 80162b2:	9301      	str	r3, [sp, #4]
 80162b4:	f000 f83c 	bl	8016330 <_vfiprintf_r>
 80162b8:	bc1e      	pop	{r1, r2, r3, r4}
 80162ba:	bc08      	pop	{r3}
 80162bc:	b003      	add	sp, #12
 80162be:	4718      	bx	r3
 80162c0:	20000094 	.word	0x20000094

080162c4 <abort>:
 80162c4:	2006      	movs	r0, #6
 80162c6:	b510      	push	{r4, lr}
 80162c8:	f000 fa18 	bl	80166fc <raise>
 80162cc:	2001      	movs	r0, #1
 80162ce:	f7f1 f877 	bl	80073c0 <_exit>

080162d2 <_malloc_usable_size_r>:
 80162d2:	1f0b      	subs	r3, r1, #4
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	1f18      	subs	r0, r3, #4
 80162d8:	2b00      	cmp	r3, #0
 80162da:	da01      	bge.n	80162e0 <_malloc_usable_size_r+0xe>
 80162dc:	580b      	ldr	r3, [r1, r0]
 80162de:	18c0      	adds	r0, r0, r3
 80162e0:	4770      	bx	lr

080162e2 <__sfputc_r>:
 80162e2:	6893      	ldr	r3, [r2, #8]
 80162e4:	b510      	push	{r4, lr}
 80162e6:	3b01      	subs	r3, #1
 80162e8:	6093      	str	r3, [r2, #8]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	da04      	bge.n	80162f8 <__sfputc_r+0x16>
 80162ee:	6994      	ldr	r4, [r2, #24]
 80162f0:	42a3      	cmp	r3, r4
 80162f2:	db07      	blt.n	8016304 <__sfputc_r+0x22>
 80162f4:	290a      	cmp	r1, #10
 80162f6:	d005      	beq.n	8016304 <__sfputc_r+0x22>
 80162f8:	6813      	ldr	r3, [r2, #0]
 80162fa:	1c58      	adds	r0, r3, #1
 80162fc:	6010      	str	r0, [r2, #0]
 80162fe:	7019      	strb	r1, [r3, #0]
 8016300:	0008      	movs	r0, r1
 8016302:	bd10      	pop	{r4, pc}
 8016304:	f000 f930 	bl	8016568 <__swbuf_r>
 8016308:	0001      	movs	r1, r0
 801630a:	e7f9      	b.n	8016300 <__sfputc_r+0x1e>

0801630c <__sfputs_r>:
 801630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630e:	0006      	movs	r6, r0
 8016310:	000f      	movs	r7, r1
 8016312:	0014      	movs	r4, r2
 8016314:	18d5      	adds	r5, r2, r3
 8016316:	42ac      	cmp	r4, r5
 8016318:	d101      	bne.n	801631e <__sfputs_r+0x12>
 801631a:	2000      	movs	r0, #0
 801631c:	e007      	b.n	801632e <__sfputs_r+0x22>
 801631e:	7821      	ldrb	r1, [r4, #0]
 8016320:	003a      	movs	r2, r7
 8016322:	0030      	movs	r0, r6
 8016324:	f7ff ffdd 	bl	80162e2 <__sfputc_r>
 8016328:	3401      	adds	r4, #1
 801632a:	1c43      	adds	r3, r0, #1
 801632c:	d1f3      	bne.n	8016316 <__sfputs_r+0xa>
 801632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016330 <_vfiprintf_r>:
 8016330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016332:	b0a1      	sub	sp, #132	@ 0x84
 8016334:	000f      	movs	r7, r1
 8016336:	0015      	movs	r5, r2
 8016338:	001e      	movs	r6, r3
 801633a:	9003      	str	r0, [sp, #12]
 801633c:	2800      	cmp	r0, #0
 801633e:	d004      	beq.n	801634a <_vfiprintf_r+0x1a>
 8016340:	6a03      	ldr	r3, [r0, #32]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d101      	bne.n	801634a <_vfiprintf_r+0x1a>
 8016346:	f7fc fc73 	bl	8012c30 <__sinit>
 801634a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801634c:	07db      	lsls	r3, r3, #31
 801634e:	d405      	bmi.n	801635c <_vfiprintf_r+0x2c>
 8016350:	89bb      	ldrh	r3, [r7, #12]
 8016352:	059b      	lsls	r3, r3, #22
 8016354:	d402      	bmi.n	801635c <_vfiprintf_r+0x2c>
 8016356:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016358:	f7fc fe5b 	bl	8013012 <__retarget_lock_acquire_recursive>
 801635c:	89bb      	ldrh	r3, [r7, #12]
 801635e:	071b      	lsls	r3, r3, #28
 8016360:	d502      	bpl.n	8016368 <_vfiprintf_r+0x38>
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d113      	bne.n	8016390 <_vfiprintf_r+0x60>
 8016368:	0039      	movs	r1, r7
 801636a:	9803      	ldr	r0, [sp, #12]
 801636c:	f000 f93e 	bl	80165ec <__swsetup_r>
 8016370:	2800      	cmp	r0, #0
 8016372:	d00d      	beq.n	8016390 <_vfiprintf_r+0x60>
 8016374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016376:	07db      	lsls	r3, r3, #31
 8016378:	d503      	bpl.n	8016382 <_vfiprintf_r+0x52>
 801637a:	2001      	movs	r0, #1
 801637c:	4240      	negs	r0, r0
 801637e:	b021      	add	sp, #132	@ 0x84
 8016380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016382:	89bb      	ldrh	r3, [r7, #12]
 8016384:	059b      	lsls	r3, r3, #22
 8016386:	d4f8      	bmi.n	801637a <_vfiprintf_r+0x4a>
 8016388:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801638a:	f7fc fe43 	bl	8013014 <__retarget_lock_release_recursive>
 801638e:	e7f4      	b.n	801637a <_vfiprintf_r+0x4a>
 8016390:	2300      	movs	r3, #0
 8016392:	ac08      	add	r4, sp, #32
 8016394:	6163      	str	r3, [r4, #20]
 8016396:	3320      	adds	r3, #32
 8016398:	7663      	strb	r3, [r4, #25]
 801639a:	3310      	adds	r3, #16
 801639c:	76a3      	strb	r3, [r4, #26]
 801639e:	9607      	str	r6, [sp, #28]
 80163a0:	002e      	movs	r6, r5
 80163a2:	7833      	ldrb	r3, [r6, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d001      	beq.n	80163ac <_vfiprintf_r+0x7c>
 80163a8:	2b25      	cmp	r3, #37	@ 0x25
 80163aa:	d148      	bne.n	801643e <_vfiprintf_r+0x10e>
 80163ac:	1b73      	subs	r3, r6, r5
 80163ae:	9305      	str	r3, [sp, #20]
 80163b0:	42ae      	cmp	r6, r5
 80163b2:	d00b      	beq.n	80163cc <_vfiprintf_r+0x9c>
 80163b4:	002a      	movs	r2, r5
 80163b6:	0039      	movs	r1, r7
 80163b8:	9803      	ldr	r0, [sp, #12]
 80163ba:	f7ff ffa7 	bl	801630c <__sfputs_r>
 80163be:	3001      	adds	r0, #1
 80163c0:	d100      	bne.n	80163c4 <_vfiprintf_r+0x94>
 80163c2:	e0ae      	b.n	8016522 <_vfiprintf_r+0x1f2>
 80163c4:	6963      	ldr	r3, [r4, #20]
 80163c6:	9a05      	ldr	r2, [sp, #20]
 80163c8:	189b      	adds	r3, r3, r2
 80163ca:	6163      	str	r3, [r4, #20]
 80163cc:	7833      	ldrb	r3, [r6, #0]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d100      	bne.n	80163d4 <_vfiprintf_r+0xa4>
 80163d2:	e0a6      	b.n	8016522 <_vfiprintf_r+0x1f2>
 80163d4:	2201      	movs	r2, #1
 80163d6:	2300      	movs	r3, #0
 80163d8:	4252      	negs	r2, r2
 80163da:	6062      	str	r2, [r4, #4]
 80163dc:	a904      	add	r1, sp, #16
 80163de:	3254      	adds	r2, #84	@ 0x54
 80163e0:	1852      	adds	r2, r2, r1
 80163e2:	1c75      	adds	r5, r6, #1
 80163e4:	6023      	str	r3, [r4, #0]
 80163e6:	60e3      	str	r3, [r4, #12]
 80163e8:	60a3      	str	r3, [r4, #8]
 80163ea:	7013      	strb	r3, [r2, #0]
 80163ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 80163ee:	4b59      	ldr	r3, [pc, #356]	@ (8016554 <_vfiprintf_r+0x224>)
 80163f0:	2205      	movs	r2, #5
 80163f2:	0018      	movs	r0, r3
 80163f4:	7829      	ldrb	r1, [r5, #0]
 80163f6:	9305      	str	r3, [sp, #20]
 80163f8:	f7fc fe0d 	bl	8013016 <memchr>
 80163fc:	1c6e      	adds	r6, r5, #1
 80163fe:	2800      	cmp	r0, #0
 8016400:	d11f      	bne.n	8016442 <_vfiprintf_r+0x112>
 8016402:	6822      	ldr	r2, [r4, #0]
 8016404:	06d3      	lsls	r3, r2, #27
 8016406:	d504      	bpl.n	8016412 <_vfiprintf_r+0xe2>
 8016408:	2353      	movs	r3, #83	@ 0x53
 801640a:	a904      	add	r1, sp, #16
 801640c:	185b      	adds	r3, r3, r1
 801640e:	2120      	movs	r1, #32
 8016410:	7019      	strb	r1, [r3, #0]
 8016412:	0713      	lsls	r3, r2, #28
 8016414:	d504      	bpl.n	8016420 <_vfiprintf_r+0xf0>
 8016416:	2353      	movs	r3, #83	@ 0x53
 8016418:	a904      	add	r1, sp, #16
 801641a:	185b      	adds	r3, r3, r1
 801641c:	212b      	movs	r1, #43	@ 0x2b
 801641e:	7019      	strb	r1, [r3, #0]
 8016420:	782b      	ldrb	r3, [r5, #0]
 8016422:	2b2a      	cmp	r3, #42	@ 0x2a
 8016424:	d016      	beq.n	8016454 <_vfiprintf_r+0x124>
 8016426:	002e      	movs	r6, r5
 8016428:	2100      	movs	r1, #0
 801642a:	200a      	movs	r0, #10
 801642c:	68e3      	ldr	r3, [r4, #12]
 801642e:	7832      	ldrb	r2, [r6, #0]
 8016430:	1c75      	adds	r5, r6, #1
 8016432:	3a30      	subs	r2, #48	@ 0x30
 8016434:	2a09      	cmp	r2, #9
 8016436:	d950      	bls.n	80164da <_vfiprintf_r+0x1aa>
 8016438:	2900      	cmp	r1, #0
 801643a:	d111      	bne.n	8016460 <_vfiprintf_r+0x130>
 801643c:	e017      	b.n	801646e <_vfiprintf_r+0x13e>
 801643e:	3601      	adds	r6, #1
 8016440:	e7af      	b.n	80163a2 <_vfiprintf_r+0x72>
 8016442:	9b05      	ldr	r3, [sp, #20]
 8016444:	6822      	ldr	r2, [r4, #0]
 8016446:	1ac0      	subs	r0, r0, r3
 8016448:	2301      	movs	r3, #1
 801644a:	4083      	lsls	r3, r0
 801644c:	4313      	orrs	r3, r2
 801644e:	0035      	movs	r5, r6
 8016450:	6023      	str	r3, [r4, #0]
 8016452:	e7cc      	b.n	80163ee <_vfiprintf_r+0xbe>
 8016454:	9b07      	ldr	r3, [sp, #28]
 8016456:	1d19      	adds	r1, r3, #4
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	9107      	str	r1, [sp, #28]
 801645c:	2b00      	cmp	r3, #0
 801645e:	db01      	blt.n	8016464 <_vfiprintf_r+0x134>
 8016460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016462:	e004      	b.n	801646e <_vfiprintf_r+0x13e>
 8016464:	425b      	negs	r3, r3
 8016466:	60e3      	str	r3, [r4, #12]
 8016468:	2302      	movs	r3, #2
 801646a:	4313      	orrs	r3, r2
 801646c:	6023      	str	r3, [r4, #0]
 801646e:	7833      	ldrb	r3, [r6, #0]
 8016470:	2b2e      	cmp	r3, #46	@ 0x2e
 8016472:	d10c      	bne.n	801648e <_vfiprintf_r+0x15e>
 8016474:	7873      	ldrb	r3, [r6, #1]
 8016476:	2b2a      	cmp	r3, #42	@ 0x2a
 8016478:	d134      	bne.n	80164e4 <_vfiprintf_r+0x1b4>
 801647a:	9b07      	ldr	r3, [sp, #28]
 801647c:	3602      	adds	r6, #2
 801647e:	1d1a      	adds	r2, r3, #4
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	9207      	str	r2, [sp, #28]
 8016484:	2b00      	cmp	r3, #0
 8016486:	da01      	bge.n	801648c <_vfiprintf_r+0x15c>
 8016488:	2301      	movs	r3, #1
 801648a:	425b      	negs	r3, r3
 801648c:	9309      	str	r3, [sp, #36]	@ 0x24
 801648e:	4d32      	ldr	r5, [pc, #200]	@ (8016558 <_vfiprintf_r+0x228>)
 8016490:	2203      	movs	r2, #3
 8016492:	0028      	movs	r0, r5
 8016494:	7831      	ldrb	r1, [r6, #0]
 8016496:	f7fc fdbe 	bl	8013016 <memchr>
 801649a:	2800      	cmp	r0, #0
 801649c:	d006      	beq.n	80164ac <_vfiprintf_r+0x17c>
 801649e:	2340      	movs	r3, #64	@ 0x40
 80164a0:	1b40      	subs	r0, r0, r5
 80164a2:	4083      	lsls	r3, r0
 80164a4:	6822      	ldr	r2, [r4, #0]
 80164a6:	3601      	adds	r6, #1
 80164a8:	4313      	orrs	r3, r2
 80164aa:	6023      	str	r3, [r4, #0]
 80164ac:	7831      	ldrb	r1, [r6, #0]
 80164ae:	2206      	movs	r2, #6
 80164b0:	482a      	ldr	r0, [pc, #168]	@ (801655c <_vfiprintf_r+0x22c>)
 80164b2:	1c75      	adds	r5, r6, #1
 80164b4:	7621      	strb	r1, [r4, #24]
 80164b6:	f7fc fdae 	bl	8013016 <memchr>
 80164ba:	2800      	cmp	r0, #0
 80164bc:	d040      	beq.n	8016540 <_vfiprintf_r+0x210>
 80164be:	4b28      	ldr	r3, [pc, #160]	@ (8016560 <_vfiprintf_r+0x230>)
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d122      	bne.n	801650a <_vfiprintf_r+0x1da>
 80164c4:	2207      	movs	r2, #7
 80164c6:	9b07      	ldr	r3, [sp, #28]
 80164c8:	3307      	adds	r3, #7
 80164ca:	4393      	bics	r3, r2
 80164cc:	3308      	adds	r3, #8
 80164ce:	9307      	str	r3, [sp, #28]
 80164d0:	6963      	ldr	r3, [r4, #20]
 80164d2:	9a04      	ldr	r2, [sp, #16]
 80164d4:	189b      	adds	r3, r3, r2
 80164d6:	6163      	str	r3, [r4, #20]
 80164d8:	e762      	b.n	80163a0 <_vfiprintf_r+0x70>
 80164da:	4343      	muls	r3, r0
 80164dc:	002e      	movs	r6, r5
 80164de:	2101      	movs	r1, #1
 80164e0:	189b      	adds	r3, r3, r2
 80164e2:	e7a4      	b.n	801642e <_vfiprintf_r+0xfe>
 80164e4:	2300      	movs	r3, #0
 80164e6:	200a      	movs	r0, #10
 80164e8:	0019      	movs	r1, r3
 80164ea:	3601      	adds	r6, #1
 80164ec:	6063      	str	r3, [r4, #4]
 80164ee:	7832      	ldrb	r2, [r6, #0]
 80164f0:	1c75      	adds	r5, r6, #1
 80164f2:	3a30      	subs	r2, #48	@ 0x30
 80164f4:	2a09      	cmp	r2, #9
 80164f6:	d903      	bls.n	8016500 <_vfiprintf_r+0x1d0>
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d0c8      	beq.n	801648e <_vfiprintf_r+0x15e>
 80164fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80164fe:	e7c6      	b.n	801648e <_vfiprintf_r+0x15e>
 8016500:	4341      	muls	r1, r0
 8016502:	002e      	movs	r6, r5
 8016504:	2301      	movs	r3, #1
 8016506:	1889      	adds	r1, r1, r2
 8016508:	e7f1      	b.n	80164ee <_vfiprintf_r+0x1be>
 801650a:	aa07      	add	r2, sp, #28
 801650c:	9200      	str	r2, [sp, #0]
 801650e:	0021      	movs	r1, r4
 8016510:	003a      	movs	r2, r7
 8016512:	4b14      	ldr	r3, [pc, #80]	@ (8016564 <_vfiprintf_r+0x234>)
 8016514:	9803      	ldr	r0, [sp, #12]
 8016516:	f7fb fd31 	bl	8011f7c <_printf_float>
 801651a:	9004      	str	r0, [sp, #16]
 801651c:	9b04      	ldr	r3, [sp, #16]
 801651e:	3301      	adds	r3, #1
 8016520:	d1d6      	bne.n	80164d0 <_vfiprintf_r+0x1a0>
 8016522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016524:	07db      	lsls	r3, r3, #31
 8016526:	d405      	bmi.n	8016534 <_vfiprintf_r+0x204>
 8016528:	89bb      	ldrh	r3, [r7, #12]
 801652a:	059b      	lsls	r3, r3, #22
 801652c:	d402      	bmi.n	8016534 <_vfiprintf_r+0x204>
 801652e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016530:	f7fc fd70 	bl	8013014 <__retarget_lock_release_recursive>
 8016534:	89bb      	ldrh	r3, [r7, #12]
 8016536:	065b      	lsls	r3, r3, #25
 8016538:	d500      	bpl.n	801653c <_vfiprintf_r+0x20c>
 801653a:	e71e      	b.n	801637a <_vfiprintf_r+0x4a>
 801653c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801653e:	e71e      	b.n	801637e <_vfiprintf_r+0x4e>
 8016540:	aa07      	add	r2, sp, #28
 8016542:	9200      	str	r2, [sp, #0]
 8016544:	0021      	movs	r1, r4
 8016546:	003a      	movs	r2, r7
 8016548:	4b06      	ldr	r3, [pc, #24]	@ (8016564 <_vfiprintf_r+0x234>)
 801654a:	9803      	ldr	r0, [sp, #12]
 801654c:	f7fb ffc4 	bl	80124d8 <_printf_i>
 8016550:	e7e3      	b.n	801651a <_vfiprintf_r+0x1ea>
 8016552:	46c0      	nop			@ (mov r8, r8)
 8016554:	08017639 	.word	0x08017639
 8016558:	0801763f 	.word	0x0801763f
 801655c:	08017643 	.word	0x08017643
 8016560:	08011f7d 	.word	0x08011f7d
 8016564:	0801630d 	.word	0x0801630d

08016568 <__swbuf_r>:
 8016568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801656a:	0006      	movs	r6, r0
 801656c:	000d      	movs	r5, r1
 801656e:	0014      	movs	r4, r2
 8016570:	2800      	cmp	r0, #0
 8016572:	d004      	beq.n	801657e <__swbuf_r+0x16>
 8016574:	6a03      	ldr	r3, [r0, #32]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d101      	bne.n	801657e <__swbuf_r+0x16>
 801657a:	f7fc fb59 	bl	8012c30 <__sinit>
 801657e:	69a3      	ldr	r3, [r4, #24]
 8016580:	60a3      	str	r3, [r4, #8]
 8016582:	89a3      	ldrh	r3, [r4, #12]
 8016584:	071b      	lsls	r3, r3, #28
 8016586:	d502      	bpl.n	801658e <__swbuf_r+0x26>
 8016588:	6923      	ldr	r3, [r4, #16]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d109      	bne.n	80165a2 <__swbuf_r+0x3a>
 801658e:	0021      	movs	r1, r4
 8016590:	0030      	movs	r0, r6
 8016592:	f000 f82b 	bl	80165ec <__swsetup_r>
 8016596:	2800      	cmp	r0, #0
 8016598:	d003      	beq.n	80165a2 <__swbuf_r+0x3a>
 801659a:	2501      	movs	r5, #1
 801659c:	426d      	negs	r5, r5
 801659e:	0028      	movs	r0, r5
 80165a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165a2:	6923      	ldr	r3, [r4, #16]
 80165a4:	6820      	ldr	r0, [r4, #0]
 80165a6:	b2ef      	uxtb	r7, r5
 80165a8:	1ac0      	subs	r0, r0, r3
 80165aa:	6963      	ldr	r3, [r4, #20]
 80165ac:	b2ed      	uxtb	r5, r5
 80165ae:	4283      	cmp	r3, r0
 80165b0:	dc05      	bgt.n	80165be <__swbuf_r+0x56>
 80165b2:	0021      	movs	r1, r4
 80165b4:	0030      	movs	r0, r6
 80165b6:	f7ff fa19 	bl	80159ec <_fflush_r>
 80165ba:	2800      	cmp	r0, #0
 80165bc:	d1ed      	bne.n	801659a <__swbuf_r+0x32>
 80165be:	68a3      	ldr	r3, [r4, #8]
 80165c0:	3001      	adds	r0, #1
 80165c2:	3b01      	subs	r3, #1
 80165c4:	60a3      	str	r3, [r4, #8]
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	1c5a      	adds	r2, r3, #1
 80165ca:	6022      	str	r2, [r4, #0]
 80165cc:	701f      	strb	r7, [r3, #0]
 80165ce:	6963      	ldr	r3, [r4, #20]
 80165d0:	4283      	cmp	r3, r0
 80165d2:	d004      	beq.n	80165de <__swbuf_r+0x76>
 80165d4:	89a3      	ldrh	r3, [r4, #12]
 80165d6:	07db      	lsls	r3, r3, #31
 80165d8:	d5e1      	bpl.n	801659e <__swbuf_r+0x36>
 80165da:	2d0a      	cmp	r5, #10
 80165dc:	d1df      	bne.n	801659e <__swbuf_r+0x36>
 80165de:	0021      	movs	r1, r4
 80165e0:	0030      	movs	r0, r6
 80165e2:	f7ff fa03 	bl	80159ec <_fflush_r>
 80165e6:	2800      	cmp	r0, #0
 80165e8:	d0d9      	beq.n	801659e <__swbuf_r+0x36>
 80165ea:	e7d6      	b.n	801659a <__swbuf_r+0x32>

080165ec <__swsetup_r>:
 80165ec:	4b2d      	ldr	r3, [pc, #180]	@ (80166a4 <__swsetup_r+0xb8>)
 80165ee:	b570      	push	{r4, r5, r6, lr}
 80165f0:	0005      	movs	r5, r0
 80165f2:	6818      	ldr	r0, [r3, #0]
 80165f4:	000c      	movs	r4, r1
 80165f6:	2800      	cmp	r0, #0
 80165f8:	d004      	beq.n	8016604 <__swsetup_r+0x18>
 80165fa:	6a03      	ldr	r3, [r0, #32]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d101      	bne.n	8016604 <__swsetup_r+0x18>
 8016600:	f7fc fb16 	bl	8012c30 <__sinit>
 8016604:	230c      	movs	r3, #12
 8016606:	5ee2      	ldrsh	r2, [r4, r3]
 8016608:	0713      	lsls	r3, r2, #28
 801660a:	d423      	bmi.n	8016654 <__swsetup_r+0x68>
 801660c:	06d3      	lsls	r3, r2, #27
 801660e:	d407      	bmi.n	8016620 <__swsetup_r+0x34>
 8016610:	2309      	movs	r3, #9
 8016612:	602b      	str	r3, [r5, #0]
 8016614:	2340      	movs	r3, #64	@ 0x40
 8016616:	2001      	movs	r0, #1
 8016618:	4313      	orrs	r3, r2
 801661a:	81a3      	strh	r3, [r4, #12]
 801661c:	4240      	negs	r0, r0
 801661e:	e03a      	b.n	8016696 <__swsetup_r+0xaa>
 8016620:	0752      	lsls	r2, r2, #29
 8016622:	d513      	bpl.n	801664c <__swsetup_r+0x60>
 8016624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016626:	2900      	cmp	r1, #0
 8016628:	d008      	beq.n	801663c <__swsetup_r+0x50>
 801662a:	0023      	movs	r3, r4
 801662c:	3344      	adds	r3, #68	@ 0x44
 801662e:	4299      	cmp	r1, r3
 8016630:	d002      	beq.n	8016638 <__swsetup_r+0x4c>
 8016632:	0028      	movs	r0, r5
 8016634:	f7fd fb86 	bl	8013d44 <_free_r>
 8016638:	2300      	movs	r3, #0
 801663a:	6363      	str	r3, [r4, #52]	@ 0x34
 801663c:	2224      	movs	r2, #36	@ 0x24
 801663e:	89a3      	ldrh	r3, [r4, #12]
 8016640:	4393      	bics	r3, r2
 8016642:	81a3      	strh	r3, [r4, #12]
 8016644:	2300      	movs	r3, #0
 8016646:	6063      	str	r3, [r4, #4]
 8016648:	6923      	ldr	r3, [r4, #16]
 801664a:	6023      	str	r3, [r4, #0]
 801664c:	2308      	movs	r3, #8
 801664e:	89a2      	ldrh	r2, [r4, #12]
 8016650:	4313      	orrs	r3, r2
 8016652:	81a3      	strh	r3, [r4, #12]
 8016654:	6923      	ldr	r3, [r4, #16]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d10b      	bne.n	8016672 <__swsetup_r+0x86>
 801665a:	21a0      	movs	r1, #160	@ 0xa0
 801665c:	2280      	movs	r2, #128	@ 0x80
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	0089      	lsls	r1, r1, #2
 8016662:	0092      	lsls	r2, r2, #2
 8016664:	400b      	ands	r3, r1
 8016666:	4293      	cmp	r3, r2
 8016668:	d003      	beq.n	8016672 <__swsetup_r+0x86>
 801666a:	0021      	movs	r1, r4
 801666c:	0028      	movs	r0, r5
 801666e:	f000 f88f 	bl	8016790 <__smakebuf_r>
 8016672:	230c      	movs	r3, #12
 8016674:	5ee2      	ldrsh	r2, [r4, r3]
 8016676:	2101      	movs	r1, #1
 8016678:	0013      	movs	r3, r2
 801667a:	400b      	ands	r3, r1
 801667c:	420a      	tst	r2, r1
 801667e:	d00b      	beq.n	8016698 <__swsetup_r+0xac>
 8016680:	2300      	movs	r3, #0
 8016682:	60a3      	str	r3, [r4, #8]
 8016684:	6963      	ldr	r3, [r4, #20]
 8016686:	425b      	negs	r3, r3
 8016688:	61a3      	str	r3, [r4, #24]
 801668a:	2000      	movs	r0, #0
 801668c:	6923      	ldr	r3, [r4, #16]
 801668e:	4283      	cmp	r3, r0
 8016690:	d101      	bne.n	8016696 <__swsetup_r+0xaa>
 8016692:	0613      	lsls	r3, r2, #24
 8016694:	d4be      	bmi.n	8016614 <__swsetup_r+0x28>
 8016696:	bd70      	pop	{r4, r5, r6, pc}
 8016698:	0791      	lsls	r1, r2, #30
 801669a:	d400      	bmi.n	801669e <__swsetup_r+0xb2>
 801669c:	6963      	ldr	r3, [r4, #20]
 801669e:	60a3      	str	r3, [r4, #8]
 80166a0:	e7f3      	b.n	801668a <__swsetup_r+0x9e>
 80166a2:	46c0      	nop			@ (mov r8, r8)
 80166a4:	20000094 	.word	0x20000094

080166a8 <_raise_r>:
 80166a8:	b570      	push	{r4, r5, r6, lr}
 80166aa:	0004      	movs	r4, r0
 80166ac:	000d      	movs	r5, r1
 80166ae:	291f      	cmp	r1, #31
 80166b0:	d904      	bls.n	80166bc <_raise_r+0x14>
 80166b2:	2316      	movs	r3, #22
 80166b4:	6003      	str	r3, [r0, #0]
 80166b6:	2001      	movs	r0, #1
 80166b8:	4240      	negs	r0, r0
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
 80166bc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d004      	beq.n	80166cc <_raise_r+0x24>
 80166c2:	008a      	lsls	r2, r1, #2
 80166c4:	189b      	adds	r3, r3, r2
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	2a00      	cmp	r2, #0
 80166ca:	d108      	bne.n	80166de <_raise_r+0x36>
 80166cc:	0020      	movs	r0, r4
 80166ce:	f000 f831 	bl	8016734 <_getpid_r>
 80166d2:	002a      	movs	r2, r5
 80166d4:	0001      	movs	r1, r0
 80166d6:	0020      	movs	r0, r4
 80166d8:	f000 f81a 	bl	8016710 <_kill_r>
 80166dc:	e7ed      	b.n	80166ba <_raise_r+0x12>
 80166de:	2a01      	cmp	r2, #1
 80166e0:	d009      	beq.n	80166f6 <_raise_r+0x4e>
 80166e2:	1c51      	adds	r1, r2, #1
 80166e4:	d103      	bne.n	80166ee <_raise_r+0x46>
 80166e6:	2316      	movs	r3, #22
 80166e8:	6003      	str	r3, [r0, #0]
 80166ea:	2001      	movs	r0, #1
 80166ec:	e7e5      	b.n	80166ba <_raise_r+0x12>
 80166ee:	2100      	movs	r1, #0
 80166f0:	0028      	movs	r0, r5
 80166f2:	6019      	str	r1, [r3, #0]
 80166f4:	4790      	blx	r2
 80166f6:	2000      	movs	r0, #0
 80166f8:	e7df      	b.n	80166ba <_raise_r+0x12>
	...

080166fc <raise>:
 80166fc:	b510      	push	{r4, lr}
 80166fe:	4b03      	ldr	r3, [pc, #12]	@ (801670c <raise+0x10>)
 8016700:	0001      	movs	r1, r0
 8016702:	6818      	ldr	r0, [r3, #0]
 8016704:	f7ff ffd0 	bl	80166a8 <_raise_r>
 8016708:	bd10      	pop	{r4, pc}
 801670a:	46c0      	nop			@ (mov r8, r8)
 801670c:	20000094 	.word	0x20000094

08016710 <_kill_r>:
 8016710:	2300      	movs	r3, #0
 8016712:	b570      	push	{r4, r5, r6, lr}
 8016714:	4d06      	ldr	r5, [pc, #24]	@ (8016730 <_kill_r+0x20>)
 8016716:	0004      	movs	r4, r0
 8016718:	0008      	movs	r0, r1
 801671a:	0011      	movs	r1, r2
 801671c:	602b      	str	r3, [r5, #0]
 801671e:	f7f0 fe3f 	bl	80073a0 <_kill>
 8016722:	1c43      	adds	r3, r0, #1
 8016724:	d103      	bne.n	801672e <_kill_r+0x1e>
 8016726:	682b      	ldr	r3, [r5, #0]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d000      	beq.n	801672e <_kill_r+0x1e>
 801672c:	6023      	str	r3, [r4, #0]
 801672e:	bd70      	pop	{r4, r5, r6, pc}
 8016730:	20007278 	.word	0x20007278

08016734 <_getpid_r>:
 8016734:	b510      	push	{r4, lr}
 8016736:	f7f0 fe2d 	bl	8007394 <_getpid>
 801673a:	bd10      	pop	{r4, pc}

0801673c <__swhatbuf_r>:
 801673c:	b570      	push	{r4, r5, r6, lr}
 801673e:	000e      	movs	r6, r1
 8016740:	001d      	movs	r5, r3
 8016742:	230e      	movs	r3, #14
 8016744:	5ec9      	ldrsh	r1, [r1, r3]
 8016746:	0014      	movs	r4, r2
 8016748:	b096      	sub	sp, #88	@ 0x58
 801674a:	2900      	cmp	r1, #0
 801674c:	da0c      	bge.n	8016768 <__swhatbuf_r+0x2c>
 801674e:	89b2      	ldrh	r2, [r6, #12]
 8016750:	2380      	movs	r3, #128	@ 0x80
 8016752:	0011      	movs	r1, r2
 8016754:	4019      	ands	r1, r3
 8016756:	421a      	tst	r2, r3
 8016758:	d114      	bne.n	8016784 <__swhatbuf_r+0x48>
 801675a:	2380      	movs	r3, #128	@ 0x80
 801675c:	00db      	lsls	r3, r3, #3
 801675e:	2000      	movs	r0, #0
 8016760:	6029      	str	r1, [r5, #0]
 8016762:	6023      	str	r3, [r4, #0]
 8016764:	b016      	add	sp, #88	@ 0x58
 8016766:	bd70      	pop	{r4, r5, r6, pc}
 8016768:	466a      	mov	r2, sp
 801676a:	f000 f853 	bl	8016814 <_fstat_r>
 801676e:	2800      	cmp	r0, #0
 8016770:	dbed      	blt.n	801674e <__swhatbuf_r+0x12>
 8016772:	23f0      	movs	r3, #240	@ 0xf0
 8016774:	9901      	ldr	r1, [sp, #4]
 8016776:	021b      	lsls	r3, r3, #8
 8016778:	4019      	ands	r1, r3
 801677a:	4b04      	ldr	r3, [pc, #16]	@ (801678c <__swhatbuf_r+0x50>)
 801677c:	18c9      	adds	r1, r1, r3
 801677e:	424b      	negs	r3, r1
 8016780:	4159      	adcs	r1, r3
 8016782:	e7ea      	b.n	801675a <__swhatbuf_r+0x1e>
 8016784:	2100      	movs	r1, #0
 8016786:	2340      	movs	r3, #64	@ 0x40
 8016788:	e7e9      	b.n	801675e <__swhatbuf_r+0x22>
 801678a:	46c0      	nop			@ (mov r8, r8)
 801678c:	ffffe000 	.word	0xffffe000

08016790 <__smakebuf_r>:
 8016790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016792:	2602      	movs	r6, #2
 8016794:	898b      	ldrh	r3, [r1, #12]
 8016796:	0005      	movs	r5, r0
 8016798:	000c      	movs	r4, r1
 801679a:	b085      	sub	sp, #20
 801679c:	4233      	tst	r3, r6
 801679e:	d007      	beq.n	80167b0 <__smakebuf_r+0x20>
 80167a0:	0023      	movs	r3, r4
 80167a2:	3347      	adds	r3, #71	@ 0x47
 80167a4:	6023      	str	r3, [r4, #0]
 80167a6:	6123      	str	r3, [r4, #16]
 80167a8:	2301      	movs	r3, #1
 80167aa:	6163      	str	r3, [r4, #20]
 80167ac:	b005      	add	sp, #20
 80167ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167b0:	ab03      	add	r3, sp, #12
 80167b2:	aa02      	add	r2, sp, #8
 80167b4:	f7ff ffc2 	bl	801673c <__swhatbuf_r>
 80167b8:	9f02      	ldr	r7, [sp, #8]
 80167ba:	9001      	str	r0, [sp, #4]
 80167bc:	0039      	movs	r1, r7
 80167be:	0028      	movs	r0, r5
 80167c0:	f7fd fb36 	bl	8013e30 <_malloc_r>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d108      	bne.n	80167da <__smakebuf_r+0x4a>
 80167c8:	220c      	movs	r2, #12
 80167ca:	5ea3      	ldrsh	r3, [r4, r2]
 80167cc:	059a      	lsls	r2, r3, #22
 80167ce:	d4ed      	bmi.n	80167ac <__smakebuf_r+0x1c>
 80167d0:	2203      	movs	r2, #3
 80167d2:	4393      	bics	r3, r2
 80167d4:	431e      	orrs	r6, r3
 80167d6:	81a6      	strh	r6, [r4, #12]
 80167d8:	e7e2      	b.n	80167a0 <__smakebuf_r+0x10>
 80167da:	2380      	movs	r3, #128	@ 0x80
 80167dc:	89a2      	ldrh	r2, [r4, #12]
 80167de:	6020      	str	r0, [r4, #0]
 80167e0:	4313      	orrs	r3, r2
 80167e2:	81a3      	strh	r3, [r4, #12]
 80167e4:	9b03      	ldr	r3, [sp, #12]
 80167e6:	6120      	str	r0, [r4, #16]
 80167e8:	6167      	str	r7, [r4, #20]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d00c      	beq.n	8016808 <__smakebuf_r+0x78>
 80167ee:	0028      	movs	r0, r5
 80167f0:	230e      	movs	r3, #14
 80167f2:	5ee1      	ldrsh	r1, [r4, r3]
 80167f4:	f000 f820 	bl	8016838 <_isatty_r>
 80167f8:	2800      	cmp	r0, #0
 80167fa:	d005      	beq.n	8016808 <__smakebuf_r+0x78>
 80167fc:	2303      	movs	r3, #3
 80167fe:	89a2      	ldrh	r2, [r4, #12]
 8016800:	439a      	bics	r2, r3
 8016802:	3b02      	subs	r3, #2
 8016804:	4313      	orrs	r3, r2
 8016806:	81a3      	strh	r3, [r4, #12]
 8016808:	89a3      	ldrh	r3, [r4, #12]
 801680a:	9a01      	ldr	r2, [sp, #4]
 801680c:	4313      	orrs	r3, r2
 801680e:	81a3      	strh	r3, [r4, #12]
 8016810:	e7cc      	b.n	80167ac <__smakebuf_r+0x1c>
	...

08016814 <_fstat_r>:
 8016814:	2300      	movs	r3, #0
 8016816:	b570      	push	{r4, r5, r6, lr}
 8016818:	4d06      	ldr	r5, [pc, #24]	@ (8016834 <_fstat_r+0x20>)
 801681a:	0004      	movs	r4, r0
 801681c:	0008      	movs	r0, r1
 801681e:	0011      	movs	r1, r2
 8016820:	602b      	str	r3, [r5, #0]
 8016822:	f7f0 fe1d 	bl	8007460 <_fstat>
 8016826:	1c43      	adds	r3, r0, #1
 8016828:	d103      	bne.n	8016832 <_fstat_r+0x1e>
 801682a:	682b      	ldr	r3, [r5, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d000      	beq.n	8016832 <_fstat_r+0x1e>
 8016830:	6023      	str	r3, [r4, #0]
 8016832:	bd70      	pop	{r4, r5, r6, pc}
 8016834:	20007278 	.word	0x20007278

08016838 <_isatty_r>:
 8016838:	2300      	movs	r3, #0
 801683a:	b570      	push	{r4, r5, r6, lr}
 801683c:	4d06      	ldr	r5, [pc, #24]	@ (8016858 <_isatty_r+0x20>)
 801683e:	0004      	movs	r4, r0
 8016840:	0008      	movs	r0, r1
 8016842:	602b      	str	r3, [r5, #0]
 8016844:	f7f0 fe1a 	bl	800747c <_isatty>
 8016848:	1c43      	adds	r3, r0, #1
 801684a:	d103      	bne.n	8016854 <_isatty_r+0x1c>
 801684c:	682b      	ldr	r3, [r5, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d000      	beq.n	8016854 <_isatty_r+0x1c>
 8016852:	6023      	str	r3, [r4, #0]
 8016854:	bd70      	pop	{r4, r5, r6, pc}
 8016856:	46c0      	nop			@ (mov r8, r8)
 8016858:	20007278 	.word	0x20007278

0801685c <_init>:
 801685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801685e:	46c0      	nop			@ (mov r8, r8)
 8016860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016862:	bc08      	pop	{r3}
 8016864:	469e      	mov	lr, r3
 8016866:	4770      	bx	lr

08016868 <_fini>:
 8016868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801686a:	46c0      	nop			@ (mov r8, r8)
 801686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801686e:	bc08      	pop	{r3}
 8016870:	469e      	mov	lr, r3
 8016872:	4770      	bx	lr
 8016874:	0000      	movs	r0, r0
	...

08016878 <__FLASH_Program_Fast_veneer>:
 8016878:	b401      	push	{r0}
 801687a:	4802      	ldr	r0, [pc, #8]	@ (8016884 <__FLASH_Program_Fast_veneer+0xc>)
 801687c:	4684      	mov	ip, r0
 801687e:	bc01      	pop	{r0}
 8016880:	4760      	bx	ip
 8016882:	bf00      	nop
 8016884:	20000251 	.word	0x20000251

Disassembly of section .data:

20000000 <counter_ads_max>:
20000000:	00000032                                2...

20000004 <terminal_parser_state>:
20000004:	00000009                                ....

20000008 <config>:
	...
20000014:	00010000 00000000 00000000 00000000     ................
	...

2000004c <platform_number>:
2000004c:	00003030                                00..

20000050 <maxmin_timeout_ms>:
20000050:	0001d4c0                                ....

20000054 <in_window>:
20000054:	200003f8                                ... 

20000058 <current_debug_buffer_pointer>:
20000058:	200004ac                                ... 

2000005c <need_logging>:
2000005c:	00000001                                ....

20000060 <SENSORS_I2C>:
20000060:	200024b4                                .$. 

20000064 <ACCELEROMETER_SPI>:
20000064:	200025a0                                .%. 

20000068 <SystemCoreClock>:
20000068:	00f42400                                .$..

2000006c <debug_uart>:
2000006c:	20002814                                .(. 

20000070 <terminal_uart>:
20000070:	20002780                                .'. 

20000074 <uwTickPrio>:
20000074:	00000004                                ....

20000078 <uwTickFreq>:
20000078:	00000001                                ....

2000007c <uxCriticalNesting>:
2000007c:	aaaaaaaa                                ....

20000080 <tiny>:
20000080:	0da24260                                `B..

20000084 <one>:
20000084:	3f800000                                ...?

20000088 <__sglue>:
20000088:	00000000 00000003 2000713c              ........<q. 

20000094 <_impure_ptr>:
20000094:	20000098                                ... 

20000098 <_impure_data>:
20000098:	00000000 2000713c 200071a4 2000720c     ....<q. .q. .r. 
	...

200000e4 <__global_locale>:
200000e4:	00000043 00000000 00000000 00000000     C...............
	...
20000104:	00000043 00000000 00000000 00000000     C...............
	...
20000124:	00000043 00000000 00000000 00000000     C...............
	...
20000144:	00000043 00000000 00000000 00000000     C...............
	...
20000164:	00000043 00000000 00000000 00000000     C...............
	...
20000184:	00000043 00000000 00000000 00000000     C...............
	...
200001a4:	00000043 00000000 00000000 00000000     C...............
	...
200001c4:	0801628b 08016209 00000000 08017538     .b...b......8u..
200001d4:	080174e0 0801768d 0801768d 0801768d     .t...v...v...v..
200001e4:	0801768d 0801768d 0801768d 0801768d     .v...v...v...v..
200001f4:	0801768d 0801768d ffffffff ffffffff     .v...v..........
20000204:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2000022c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000250 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000250:	b580      	push	{r7, lr}
20000252:	b088      	sub	sp, #32
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
20000258:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000025a:	231f      	movs	r3, #31
2000025c:	18fb      	adds	r3, r7, r3
2000025e:	2200      	movs	r2, #0
20000260:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b1a      	ldr	r3, [pc, #104]	@ (200002d4 <FLASH_Program_Fast+0x84>)
2000026c:	695a      	ldr	r2, [r3, #20]
2000026e:	4b19      	ldr	r3, [pc, #100]	@ (200002d4 <FLASH_Program_Fast+0x84>)
20000270:	2180      	movs	r1, #128	@ 0x80
20000272:	02c9      	lsls	r1, r1, #11
20000274:	430a      	orrs	r2, r1
20000276:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000278:	f3ef 8310 	mrs	r3, PRIMASK
2000027c:	60fb      	str	r3, [r7, #12]
  return(result);
2000027e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000282:	b672      	cpsid	i
}
20000284:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000286:	e00f      	b.n	200002a8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000288:	697a      	ldr	r2, [r7, #20]
2000028a:	69bb      	ldr	r3, [r7, #24]
2000028c:	6812      	ldr	r2, [r2, #0]
2000028e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000290:	697b      	ldr	r3, [r7, #20]
20000292:	3304      	adds	r3, #4
20000294:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	3304      	adds	r3, #4
2000029a:	61bb      	str	r3, [r7, #24]
    index++;
2000029c:	211f      	movs	r1, #31
2000029e:	187b      	adds	r3, r7, r1
200002a0:	781a      	ldrb	r2, [r3, #0]
200002a2:	187b      	adds	r3, r7, r1
200002a4:	3201      	adds	r2, #1
200002a6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002a8:	231f      	movs	r3, #31
200002aa:	18fb      	adds	r3, r7, r3
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b3f      	cmp	r3, #63	@ 0x3f
200002b0:	d9ea      	bls.n	20000288 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200002b2:	46c0      	nop			@ (mov r8, r8)
200002b4:	4b07      	ldr	r3, [pc, #28]	@ (200002d4 <FLASH_Program_Fast+0x84>)
200002b6:	691a      	ldr	r2, [r3, #16]
200002b8:	2380      	movs	r3, #128	@ 0x80
200002ba:	025b      	lsls	r3, r3, #9
200002bc:	4013      	ands	r3, r2
200002be:	d1f9      	bne.n	200002b4 <FLASH_Program_Fast+0x64>
200002c0:	693b      	ldr	r3, [r7, #16]
200002c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002c4:	68bb      	ldr	r3, [r7, #8]
200002c6:	f383 8810 	msr	PRIMASK, r3
}
200002ca:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002cc:	46c0      	nop			@ (mov r8, r8)
200002ce:	46bd      	mov	sp, r7
200002d0:	b008      	add	sp, #32
200002d2:	bd80      	pop	{r7, pc}
200002d4:	40022000 	.word	0x40022000
