
nais_bk002_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016868  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c48  08016928  08016928  00017928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017570  08017570  000192dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017570  08017570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017578  08017578  000192dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017578  08017578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017580  08017580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08017584  00019000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00006fb4  200002e0  08017860  000192e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007294  08017860  0001a294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000192dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d77  00000000  00000000  00019304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000700b  00000000  00000000  0004b07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d0  00000000  00000000  00052088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c8a  00000000  00000000  00054558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023edb  00000000  00000000  000561e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032629  00000000  00000000  0007a0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1b2d  00000000  00000000  000ac6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cfc  00000000  00000000  0016e258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00177f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e0 	.word	0x200002e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080168fc 	.word	0x080168fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e4 	.word	0x200002e4
 8000104:	080168fc 	.word	0x080168fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f82b 	bl	8002498 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff6b 	bl	8002328 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f81d 	bl	8002498 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f813 	bl	8002498 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff95 	bl	80023b0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff8b 	bl	80023b0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcc7 	bl	8000e44 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc47 	bl	8000d54 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcb9 	bl	8000e44 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcaf 	bl	8000e44 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc55 	bl	8000da4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc4b 	bl	8000da4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f88c 	bl	8000668 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	@ 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f7ff ffd0 	bl	8000508 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 ffaf 	bl	80014d0 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	@ 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fdef 	bl	800115c <__aeabi_fsub>
 800057e:	f000 ffa7 	bl	80014d0 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__aeabi_d2uiz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 8000592:	0004      	movs	r4, r0
 8000594:	000d      	movs	r5, r1
 8000596:	f7ff ff7d 	bl	8000494 <__aeabi_dcmpge>
 800059a:	2800      	cmp	r0, #0
 800059c:	d104      	bne.n	80005a8 <__aeabi_d2uiz+0x1c>
 800059e:	0020      	movs	r0, r4
 80005a0:	0029      	movs	r1, r5
 80005a2:	f002 fe71 	bl	8003288 <__aeabi_d2iz>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f002 faac 	bl	8002b0c <__aeabi_dsub>
 80005b4:	f002 fe68 	bl	8003288 <__aeabi_d2iz>
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	061b      	lsls	r3, r3, #24
 80005bc:	469c      	mov	ip, r3
 80005be:	4460      	add	r0, ip
 80005c0:	e7f1      	b.n	80005a6 <__aeabi_d2uiz+0x1a>
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	41e00000 	.word	0x41e00000

080005c8 <__aeabi_d2lz>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	0004      	movs	r4, r0
 80005d0:	000d      	movs	r5, r1
 80005d2:	f7ff ff41 	bl	8000458 <__aeabi_dcmplt>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d108      	bne.n	80005ec <__aeabi_d2lz+0x24>
 80005da:	0020      	movs	r0, r4
 80005dc:	0029      	movs	r1, r5
 80005de:	f000 f80f 	bl	8000600 <__aeabi_d2ulz>
 80005e2:	0002      	movs	r2, r0
 80005e4:	000b      	movs	r3, r1
 80005e6:	0010      	movs	r0, r2
 80005e8:	0019      	movs	r1, r3
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	18e9      	adds	r1, r5, r3
 80005f2:	0020      	movs	r0, r4
 80005f4:	f000 f804 	bl	8000600 <__aeabi_d2ulz>
 80005f8:	2300      	movs	r3, #0
 80005fa:	4242      	negs	r2, r0
 80005fc:	418b      	sbcs	r3, r1
 80005fe:	e7f2      	b.n	80005e6 <__aeabi_d2lz+0x1e>

08000600 <__aeabi_d2ulz>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2200      	movs	r2, #0
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <__aeabi_d2ulz+0x34>)
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	f001 ffb7 	bl	800257c <__aeabi_dmul>
 800060e:	f7ff ffbd 	bl	800058c <__aeabi_d2uiz>
 8000612:	0006      	movs	r6, r0
 8000614:	f002 fea2 	bl	800335c <__aeabi_ui2d>
 8000618:	2200      	movs	r2, #0
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <__aeabi_d2ulz+0x38>)
 800061c:	f001 ffae 	bl	800257c <__aeabi_dmul>
 8000620:	0002      	movs	r2, r0
 8000622:	000b      	movs	r3, r1
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 fa70 	bl	8002b0c <__aeabi_dsub>
 800062c:	f7ff ffae 	bl	800058c <__aeabi_d2uiz>
 8000630:	0031      	movs	r1, r6
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	3df00000 	.word	0x3df00000
 8000638:	41f00000 	.word	0x41f00000

0800063c <__aeabi_l2d>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	0006      	movs	r6, r0
 8000640:	0008      	movs	r0, r1
 8000642:	f002 fe5d 	bl	8003300 <__aeabi_i2d>
 8000646:	2200      	movs	r2, #0
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <__aeabi_l2d+0x28>)
 800064a:	f001 ff97 	bl	800257c <__aeabi_dmul>
 800064e:	000d      	movs	r5, r1
 8000650:	0004      	movs	r4, r0
 8000652:	0030      	movs	r0, r6
 8000654:	f002 fe82 	bl	800335c <__aeabi_ui2d>
 8000658:	002b      	movs	r3, r5
 800065a:	0022      	movs	r2, r4
 800065c:	f000 ffe6 	bl	800162c <__aeabi_dadd>
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	41f00000 	.word	0x41f00000

08000668 <__udivmoddi4>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	4657      	mov	r7, sl
 800066c:	464e      	mov	r6, r9
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	b5e0      	push	{r5, r6, r7, lr}
 8000674:	0004      	movs	r4, r0
 8000676:	000d      	movs	r5, r1
 8000678:	4692      	mov	sl, r2
 800067a:	4699      	mov	r9, r3
 800067c:	b083      	sub	sp, #12
 800067e:	428b      	cmp	r3, r1
 8000680:	d830      	bhi.n	80006e4 <__udivmoddi4+0x7c>
 8000682:	d02d      	beq.n	80006e0 <__udivmoddi4+0x78>
 8000684:	4649      	mov	r1, r9
 8000686:	4650      	mov	r0, sl
 8000688:	f002 ff76 	bl	8003578 <__clzdi2>
 800068c:	0029      	movs	r1, r5
 800068e:	0006      	movs	r6, r0
 8000690:	0020      	movs	r0, r4
 8000692:	f002 ff71 	bl	8003578 <__clzdi2>
 8000696:	1a33      	subs	r3, r6, r0
 8000698:	4698      	mov	r8, r3
 800069a:	3b20      	subs	r3, #32
 800069c:	d434      	bmi.n	8000708 <__udivmoddi4+0xa0>
 800069e:	469b      	mov	fp, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	465a      	mov	r2, fp
 80006a4:	4093      	lsls	r3, r2
 80006a6:	4642      	mov	r2, r8
 80006a8:	001f      	movs	r7, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	4093      	lsls	r3, r2
 80006ae:	001e      	movs	r6, r3
 80006b0:	42af      	cmp	r7, r5
 80006b2:	d83b      	bhi.n	800072c <__udivmoddi4+0xc4>
 80006b4:	42af      	cmp	r7, r5
 80006b6:	d100      	bne.n	80006ba <__udivmoddi4+0x52>
 80006b8:	e079      	b.n	80007ae <__udivmoddi4+0x146>
 80006ba:	465b      	mov	r3, fp
 80006bc:	1ba4      	subs	r4, r4, r6
 80006be:	41bd      	sbcs	r5, r7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da00      	bge.n	80006c6 <__udivmoddi4+0x5e>
 80006c4:	e076      	b.n	80007b4 <__udivmoddi4+0x14c>
 80006c6:	2200      	movs	r2, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	465a      	mov	r2, fp
 80006d2:	4093      	lsls	r3, r2
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4642      	mov	r2, r8
 80006da:	4093      	lsls	r3, r2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	e029      	b.n	8000734 <__udivmoddi4+0xcc>
 80006e0:	4282      	cmp	r2, r0
 80006e2:	d9cf      	bls.n	8000684 <__udivmoddi4+0x1c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <__udivmoddi4+0x8e>
 80006f2:	601c      	str	r4, [r3, #0]
 80006f4:	605d      	str	r5, [r3, #4]
 80006f6:	9800      	ldr	r0, [sp, #0]
 80006f8:	9901      	ldr	r1, [sp, #4]
 80006fa:	b003      	add	sp, #12
 80006fc:	bcf0      	pop	{r4, r5, r6, r7}
 80006fe:	46bb      	mov	fp, r7
 8000700:	46b2      	mov	sl, r6
 8000702:	46a9      	mov	r9, r5
 8000704:	46a0      	mov	r8, r4
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000708:	4642      	mov	r2, r8
 800070a:	469b      	mov	fp, r3
 800070c:	2320      	movs	r3, #32
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	4652      	mov	r2, sl
 8000712:	40da      	lsrs	r2, r3
 8000714:	4641      	mov	r1, r8
 8000716:	0013      	movs	r3, r2
 8000718:	464a      	mov	r2, r9
 800071a:	408a      	lsls	r2, r1
 800071c:	0017      	movs	r7, r2
 800071e:	4642      	mov	r2, r8
 8000720:	431f      	orrs	r7, r3
 8000722:	4653      	mov	r3, sl
 8000724:	4093      	lsls	r3, r2
 8000726:	001e      	movs	r6, r3
 8000728:	42af      	cmp	r7, r5
 800072a:	d9c3      	bls.n	80006b4 <__udivmoddi4+0x4c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4643      	mov	r3, r8
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0d8      	beq.n	80006ec <__udivmoddi4+0x84>
 800073a:	07fb      	lsls	r3, r7, #31
 800073c:	0872      	lsrs	r2, r6, #1
 800073e:	431a      	orrs	r2, r3
 8000740:	4646      	mov	r6, r8
 8000742:	087b      	lsrs	r3, r7, #1
 8000744:	e00e      	b.n	8000764 <__udivmoddi4+0xfc>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d101      	bne.n	800074e <__udivmoddi4+0xe6>
 800074a:	42a2      	cmp	r2, r4
 800074c:	d80c      	bhi.n	8000768 <__udivmoddi4+0x100>
 800074e:	1aa4      	subs	r4, r4, r2
 8000750:	419d      	sbcs	r5, r3
 8000752:	2001      	movs	r0, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2100      	movs	r1, #0
 800075a:	3e01      	subs	r6, #1
 800075c:	1824      	adds	r4, r4, r0
 800075e:	414d      	adcs	r5, r1
 8000760:	2e00      	cmp	r6, #0
 8000762:	d006      	beq.n	8000772 <__udivmoddi4+0x10a>
 8000764:	42ab      	cmp	r3, r5
 8000766:	d9ee      	bls.n	8000746 <__udivmoddi4+0xde>
 8000768:	3e01      	subs	r6, #1
 800076a:	1924      	adds	r4, r4, r4
 800076c:	416d      	adcs	r5, r5
 800076e:	2e00      	cmp	r6, #0
 8000770:	d1f8      	bne.n	8000764 <__udivmoddi4+0xfc>
 8000772:	9800      	ldr	r0, [sp, #0]
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	465b      	mov	r3, fp
 8000778:	1900      	adds	r0, r0, r4
 800077a:	4169      	adcs	r1, r5
 800077c:	2b00      	cmp	r3, #0
 800077e:	db24      	blt.n	80007ca <__udivmoddi4+0x162>
 8000780:	002b      	movs	r3, r5
 8000782:	465a      	mov	r2, fp
 8000784:	4644      	mov	r4, r8
 8000786:	40d3      	lsrs	r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	40e2      	lsrs	r2, r4
 800078c:	001c      	movs	r4, r3
 800078e:	465b      	mov	r3, fp
 8000790:	0015      	movs	r5, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	db2a      	blt.n	80007ec <__udivmoddi4+0x184>
 8000796:	0026      	movs	r6, r4
 8000798:	409e      	lsls	r6, r3
 800079a:	0033      	movs	r3, r6
 800079c:	0026      	movs	r6, r4
 800079e:	4647      	mov	r7, r8
 80007a0:	40be      	lsls	r6, r7
 80007a2:	0032      	movs	r2, r6
 80007a4:	1a80      	subs	r0, r0, r2
 80007a6:	4199      	sbcs	r1, r3
 80007a8:	9000      	str	r0, [sp, #0]
 80007aa:	9101      	str	r1, [sp, #4]
 80007ac:	e79e      	b.n	80006ec <__udivmoddi4+0x84>
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d8bc      	bhi.n	800072c <__udivmoddi4+0xc4>
 80007b2:	e782      	b.n	80006ba <__udivmoddi4+0x52>
 80007b4:	4642      	mov	r2, r8
 80007b6:	2320      	movs	r3, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	40da      	lsrs	r2, r3
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	e785      	b.n	80006d6 <__udivmoddi4+0x6e>
 80007ca:	4642      	mov	r2, r8
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	4646      	mov	r6, r8
 80007d4:	409a      	lsls	r2, r3
 80007d6:	0023      	movs	r3, r4
 80007d8:	40f3      	lsrs	r3, r6
 80007da:	4644      	mov	r4, r8
 80007dc:	4313      	orrs	r3, r2
 80007de:	002a      	movs	r2, r5
 80007e0:	40e2      	lsrs	r2, r4
 80007e2:	001c      	movs	r4, r3
 80007e4:	465b      	mov	r3, fp
 80007e6:	0015      	movs	r5, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dad4      	bge.n	8000796 <__udivmoddi4+0x12e>
 80007ec:	4642      	mov	r2, r8
 80007ee:	002f      	movs	r7, r5
 80007f0:	2320      	movs	r3, #32
 80007f2:	0026      	movs	r6, r4
 80007f4:	4097      	lsls	r7, r2
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	40de      	lsrs	r6, r3
 80007fa:	003b      	movs	r3, r7
 80007fc:	4333      	orrs	r3, r6
 80007fe:	e7cd      	b.n	800079c <__udivmoddi4+0x134>

08000800 <__aeabi_fadd>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	46ce      	mov	lr, r9
 8000804:	4647      	mov	r7, r8
 8000806:	0243      	lsls	r3, r0, #9
 8000808:	0a5a      	lsrs	r2, r3, #9
 800080a:	024e      	lsls	r6, r1, #9
 800080c:	0045      	lsls	r5, r0, #1
 800080e:	0fc4      	lsrs	r4, r0, #31
 8000810:	0048      	lsls	r0, r1, #1
 8000812:	4691      	mov	r9, r2
 8000814:	0e2d      	lsrs	r5, r5, #24
 8000816:	0a72      	lsrs	r2, r6, #9
 8000818:	0e00      	lsrs	r0, r0, #24
 800081a:	4694      	mov	ip, r2
 800081c:	b580      	push	{r7, lr}
 800081e:	099b      	lsrs	r3, r3, #6
 8000820:	0fc9      	lsrs	r1, r1, #31
 8000822:	09b6      	lsrs	r6, r6, #6
 8000824:	1a2a      	subs	r2, r5, r0
 8000826:	428c      	cmp	r4, r1
 8000828:	d021      	beq.n	800086e <__aeabi_fadd+0x6e>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dd0d      	ble.n	800084a <__aeabi_fadd+0x4a>
 800082e:	2800      	cmp	r0, #0
 8000830:	d12d      	bne.n	800088e <__aeabi_fadd+0x8e>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x38>
 8000836:	e08d      	b.n	8000954 <__aeabi_fadd+0x154>
 8000838:	1e51      	subs	r1, r2, #1
 800083a:	2a01      	cmp	r2, #1
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x40>
 800083e:	e11d      	b.n	8000a7c <__aeabi_fadd+0x27c>
 8000840:	2aff      	cmp	r2, #255	@ 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x46>
 8000844:	e0ab      	b.n	800099e <__aeabi_fadd+0x19e>
 8000846:	000a      	movs	r2, r1
 8000848:	e027      	b.n	800089a <__aeabi_fadd+0x9a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d04d      	beq.n	80008ea <__aeabi_fadd+0xea>
 800084e:	1b42      	subs	r2, r0, r5
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x56>
 8000854:	e0cc      	b.n	80009f0 <__aeabi_fadd+0x1f0>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x5c>
 800085a:	e079      	b.n	8000950 <__aeabi_fadd+0x150>
 800085c:	1e54      	subs	r4, r2, #1
 800085e:	2a01      	cmp	r2, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x64>
 8000862:	e128      	b.n	8000ab6 <__aeabi_fadd+0x2b6>
 8000864:	2aff      	cmp	r2, #255	@ 0xff
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x6a>
 8000868:	e097      	b.n	800099a <__aeabi_fadd+0x19a>
 800086a:	0022      	movs	r2, r4
 800086c:	e0c5      	b.n	80009fa <__aeabi_fadd+0x1fa>
 800086e:	2a00      	cmp	r2, #0
 8000870:	dc00      	bgt.n	8000874 <__aeabi_fadd+0x74>
 8000872:	e096      	b.n	80009a2 <__aeabi_fadd+0x1a2>
 8000874:	2800      	cmp	r0, #0
 8000876:	d04f      	beq.n	8000918 <__aeabi_fadd+0x118>
 8000878:	2dff      	cmp	r5, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x7e>
 800087c:	e08f      	b.n	800099e <__aeabi_fadd+0x19e>
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	04c9      	lsls	r1, r1, #19
 8000882:	430e      	orrs	r6, r1
 8000884:	2a1b      	cmp	r2, #27
 8000886:	dd51      	ble.n	800092c <__aeabi_fadd+0x12c>
 8000888:	002a      	movs	r2, r5
 800088a:	3301      	adds	r3, #1
 800088c:	e018      	b.n	80008c0 <__aeabi_fadd+0xc0>
 800088e:	2dff      	cmp	r5, #255	@ 0xff
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x94>
 8000892:	e084      	b.n	800099e <__aeabi_fadd+0x19e>
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	04c9      	lsls	r1, r1, #19
 8000898:	430e      	orrs	r6, r1
 800089a:	2101      	movs	r1, #1
 800089c:	2a1b      	cmp	r2, #27
 800089e:	dc08      	bgt.n	80008b2 <__aeabi_fadd+0xb2>
 80008a0:	0031      	movs	r1, r6
 80008a2:	2020      	movs	r0, #32
 80008a4:	40d1      	lsrs	r1, r2
 80008a6:	1a82      	subs	r2, r0, r2
 80008a8:	4096      	lsls	r6, r2
 80008aa:	0032      	movs	r2, r6
 80008ac:	1e50      	subs	r0, r2, #1
 80008ae:	4182      	sbcs	r2, r0
 80008b0:	4311      	orrs	r1, r2
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	015a      	lsls	r2, r3, #5
 80008b6:	d459      	bmi.n	800096c <__aeabi_fadd+0x16c>
 80008b8:	2107      	movs	r1, #7
 80008ba:	002a      	movs	r2, r5
 80008bc:	4019      	ands	r1, r3
 80008be:	d049      	beq.n	8000954 <__aeabi_fadd+0x154>
 80008c0:	210f      	movs	r1, #15
 80008c2:	4019      	ands	r1, r3
 80008c4:	2904      	cmp	r1, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0xca>
 80008c8:	3304      	adds	r3, #4
 80008ca:	0159      	lsls	r1, r3, #5
 80008cc:	d542      	bpl.n	8000954 <__aeabi_fadd+0x154>
 80008ce:	1c50      	adds	r0, r2, #1
 80008d0:	2afe      	cmp	r2, #254	@ 0xfe
 80008d2:	d03a      	beq.n	800094a <__aeabi_fadd+0x14a>
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	b2c0      	uxtb	r0, r0
 80008d8:	0a5b      	lsrs	r3, r3, #9
 80008da:	05c0      	lsls	r0, r0, #23
 80008dc:	4318      	orrs	r0, r3
 80008de:	07e4      	lsls	r4, r4, #31
 80008e0:	4320      	orrs	r0, r4
 80008e2:	bcc0      	pop	{r6, r7}
 80008e4:	46b9      	mov	r9, r7
 80008e6:	46b0      	mov	r8, r6
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	20fe      	movs	r0, #254	@ 0xfe
 80008ec:	4680      	mov	r8, r0
 80008ee:	1c6f      	adds	r7, r5, #1
 80008f0:	0038      	movs	r0, r7
 80008f2:	4647      	mov	r7, r8
 80008f4:	4207      	tst	r7, r0
 80008f6:	d000      	beq.n	80008fa <__aeabi_fadd+0xfa>
 80008f8:	e08e      	b.n	8000a18 <__aeabi_fadd+0x218>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d000      	beq.n	8000900 <__aeabi_fadd+0x100>
 80008fe:	e0b4      	b.n	8000a6a <__aeabi_fadd+0x26a>
 8000900:	2b00      	cmp	r3, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x106>
 8000904:	e0db      	b.n	8000abe <__aeabi_fadd+0x2be>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d06c      	beq.n	80009e4 <__aeabi_fadd+0x1e4>
 800090a:	1b98      	subs	r0, r3, r6
 800090c:	0145      	lsls	r5, r0, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x112>
 8000910:	e0f7      	b.n	8000b02 <__aeabi_fadd+0x302>
 8000912:	000c      	movs	r4, r1
 8000914:	1af3      	subs	r3, r6, r3
 8000916:	e03d      	b.n	8000994 <__aeabi_fadd+0x194>
 8000918:	2e00      	cmp	r6, #0
 800091a:	d01b      	beq.n	8000954 <__aeabi_fadd+0x154>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x124>
 8000922:	e082      	b.n	8000a2a <__aeabi_fadd+0x22a>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d03a      	beq.n	800099e <__aeabi_fadd+0x19e>
 8000928:	000a      	movs	r2, r1
 800092a:	e7ab      	b.n	8000884 <__aeabi_fadd+0x84>
 800092c:	0031      	movs	r1, r6
 800092e:	2020      	movs	r0, #32
 8000930:	40d1      	lsrs	r1, r2
 8000932:	1a82      	subs	r2, r0, r2
 8000934:	4096      	lsls	r6, r2
 8000936:	0032      	movs	r2, r6
 8000938:	1e50      	subs	r0, r2, #1
 800093a:	4182      	sbcs	r2, r0
 800093c:	430a      	orrs	r2, r1
 800093e:	189b      	adds	r3, r3, r2
 8000940:	015a      	lsls	r2, r3, #5
 8000942:	d5b9      	bpl.n	80008b8 <__aeabi_fadd+0xb8>
 8000944:	1c6a      	adds	r2, r5, #1
 8000946:	2dfe      	cmp	r5, #254	@ 0xfe
 8000948:	d175      	bne.n	8000a36 <__aeabi_fadd+0x236>
 800094a:	20ff      	movs	r0, #255	@ 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7c4      	b.n	80008da <__aeabi_fadd+0xda>
 8000950:	000c      	movs	r4, r1
 8000952:	0033      	movs	r3, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	2aff      	cmp	r2, #255	@ 0xff
 8000958:	d146      	bne.n	80009e8 <__aeabi_fadd+0x1e8>
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f5      	beq.n	800094a <__aeabi_fadd+0x14a>
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	4313      	orrs	r3, r2
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e7b6      	b.n	80008da <__aeabi_fadd+0xda>
 800096c:	019f      	lsls	r7, r3, #6
 800096e:	09bf      	lsrs	r7, r7, #6
 8000970:	0038      	movs	r0, r7
 8000972:	f002 fde3 	bl	800353c <__clzsi2>
 8000976:	3805      	subs	r0, #5
 8000978:	4087      	lsls	r7, r0
 800097a:	4285      	cmp	r5, r0
 800097c:	dc24      	bgt.n	80009c8 <__aeabi_fadd+0x1c8>
 800097e:	003b      	movs	r3, r7
 8000980:	2120      	movs	r1, #32
 8000982:	1b42      	subs	r2, r0, r5
 8000984:	3201      	adds	r2, #1
 8000986:	40d3      	lsrs	r3, r2
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	4097      	lsls	r7, r2
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	4197      	sbcs	r7, r2
 8000990:	2200      	movs	r2, #0
 8000992:	433b      	orrs	r3, r7
 8000994:	0759      	lsls	r1, r3, #29
 8000996:	d193      	bne.n	80008c0 <__aeabi_fadd+0xc0>
 8000998:	e797      	b.n	80008ca <__aeabi_fadd+0xca>
 800099a:	000c      	movs	r4, r1
 800099c:	0033      	movs	r3, r6
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	e7db      	b.n	800095a <__aeabi_fadd+0x15a>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d014      	beq.n	80009d0 <__aeabi_fadd+0x1d0>
 80009a6:	1b42      	subs	r2, r0, r5
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d14b      	bne.n	8000a44 <__aeabi_fadd+0x244>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0d0      	beq.n	8000952 <__aeabi_fadd+0x152>
 80009b0:	1e51      	subs	r1, r2, #1
 80009b2:	2a01      	cmp	r2, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x1b8>
 80009b6:	e09e      	b.n	8000af6 <__aeabi_fadd+0x2f6>
 80009b8:	2aff      	cmp	r2, #255	@ 0xff
 80009ba:	d0ef      	beq.n	800099c <__aeabi_fadd+0x19c>
 80009bc:	000a      	movs	r2, r1
 80009be:	2a1b      	cmp	r2, #27
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fadd+0x282>
 80009c2:	0002      	movs	r2, r0
 80009c4:	1c73      	adds	r3, r6, #1
 80009c6:	e77b      	b.n	80008c0 <__aeabi_fadd+0xc0>
 80009c8:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <__aeabi_fadd+0x30c>)
 80009ca:	1a2a      	subs	r2, r5, r0
 80009cc:	403b      	ands	r3, r7
 80009ce:	e7e1      	b.n	8000994 <__aeabi_fadd+0x194>
 80009d0:	21fe      	movs	r1, #254	@ 0xfe
 80009d2:	1c6a      	adds	r2, r5, #1
 80009d4:	4211      	tst	r1, r2
 80009d6:	d13b      	bne.n	8000a50 <__aeabi_fadd+0x250>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d15d      	bne.n	8000a98 <__aeabi_fadd+0x298>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d07f      	beq.n	8000ae0 <__aeabi_fadd+0x2e0>
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d17f      	bne.n	8000ae4 <__aeabi_fadd+0x2e4>
 80009e4:	2200      	movs	r2, #0
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	b2d0      	uxtb	r0, r2
 80009ee:	e774      	b.n	80008da <__aeabi_fadd+0xda>
 80009f0:	28ff      	cmp	r0, #255	@ 0xff
 80009f2:	d0d2      	beq.n	800099a <__aeabi_fadd+0x19a>
 80009f4:	2480      	movs	r4, #128	@ 0x80
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	4323      	orrs	r3, r4
 80009fa:	2401      	movs	r4, #1
 80009fc:	2a1b      	cmp	r2, #27
 80009fe:	dc07      	bgt.n	8000a10 <__aeabi_fadd+0x210>
 8000a00:	001c      	movs	r4, r3
 8000a02:	2520      	movs	r5, #32
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	1aaa      	subs	r2, r5, r2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	1b33      	subs	r3, r6, r4
 8000a12:	0005      	movs	r5, r0
 8000a14:	000c      	movs	r4, r1
 8000a16:	e74d      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a18:	1b9f      	subs	r7, r3, r6
 8000a1a:	017a      	lsls	r2, r7, #5
 8000a1c:	d422      	bmi.n	8000a64 <__aeabi_fadd+0x264>
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d1a6      	bne.n	8000970 <__aeabi_fadd+0x170>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	2300      	movs	r3, #0
 8000a28:	e757      	b.n	80008da <__aeabi_fadd+0xda>
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	3201      	adds	r2, #1
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d400      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000a34:	e740      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000a36:	2101      	movs	r1, #1
 8000a38:	4835      	ldr	r0, [pc, #212]	@ (8000b10 <__aeabi_fadd+0x310>)
 8000a3a:	4019      	ands	r1, r3
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	4003      	ands	r3, r0
 8000a40:	430b      	orrs	r3, r1
 8000a42:	e7a7      	b.n	8000994 <__aeabi_fadd+0x194>
 8000a44:	28ff      	cmp	r0, #255	@ 0xff
 8000a46:	d0a9      	beq.n	800099c <__aeabi_fadd+0x19c>
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	04c9      	lsls	r1, r1, #19
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	e7b6      	b.n	80009be <__aeabi_fadd+0x1be>
 8000a50:	2aff      	cmp	r2, #255	@ 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fadd+0x256>
 8000a54:	e779      	b.n	800094a <__aeabi_fadd+0x14a>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	0759      	lsls	r1, r3, #29
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x260>
 8000a5e:	e72f      	b.n	80008c0 <__aeabi_fadd+0xc0>
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	e7c1      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000a64:	000c      	movs	r4, r1
 8000a66:	1af7      	subs	r7, r6, r3
 8000a68:	e782      	b.n	8000970 <__aeabi_fadd+0x170>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d12c      	bne.n	8000ac8 <__aeabi_fadd+0x2c8>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d193      	bne.n	800099a <__aeabi_fadd+0x19a>
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	2400      	movs	r4, #0
 8000a76:	20ff      	movs	r0, #255	@ 0xff
 8000a78:	03db      	lsls	r3, r3, #15
 8000a7a:	e72e      	b.n	80008da <__aeabi_fadd+0xda>
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	1b9b      	subs	r3, r3, r6
 8000a80:	e718      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a82:	0019      	movs	r1, r3
 8000a84:	2520      	movs	r5, #32
 8000a86:	40d1      	lsrs	r1, r2
 8000a88:	1aaa      	subs	r2, r5, r2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4193      	sbcs	r3, r2
 8000a90:	430b      	orrs	r3, r1
 8000a92:	0005      	movs	r5, r0
 8000a94:	199b      	adds	r3, r3, r6
 8000a96:	e753      	b.n	8000940 <__aeabi_fadd+0x140>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x29e>
 8000a9c:	e77e      	b.n	800099c <__aeabi_fadd+0x19c>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2a4>
 8000aa2:	e77c      	b.n	800099e <__aeabi_fadd+0x19e>
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	03d2      	lsls	r2, r2, #15
 8000aa8:	4591      	cmp	r9, r2
 8000aaa:	d302      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000aac:	4594      	cmp	ip, r2
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	e753      	b.n	800095e <__aeabi_fadd+0x15e>
 8000ab6:	000c      	movs	r4, r1
 8000ab8:	1af3      	subs	r3, r6, r3
 8000aba:	3501      	adds	r5, #1
 8000abc:	e6fa      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0af      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	0033      	movs	r3, r6
 8000ac6:	e78d      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_fadd+0x2ce>
 8000acc:	e767      	b.n	800099e <__aeabi_fadd+0x19e>
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	03d2      	lsls	r2, r2, #15
 8000ad2:	4591      	cmp	r9, r2
 8000ad4:	d3ed      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ad6:	4594      	cmp	ip, r2
 8000ad8:	d2eb      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ada:	000c      	movs	r4, r1
 8000adc:	0033      	movs	r3, r6
 8000ade:	e7e8      	b.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ae0:	0033      	movs	r3, r6
 8000ae2:	e77f      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ae4:	199b      	adds	r3, r3, r6
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0159      	lsls	r1, r3, #5
 8000aea:	d5b9      	bpl.n	8000a60 <__aeabi_fadd+0x260>
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <__aeabi_fadd+0x30c>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2201      	movs	r2, #1
 8000af4:	e778      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000af6:	199b      	adds	r3, r3, r6
 8000af8:	3201      	adds	r2, #1
 8000afa:	3501      	adds	r5, #1
 8000afc:	0159      	lsls	r1, r3, #5
 8000afe:	d49a      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000b00:	e6da      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d08d      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	e76e      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	fbffffff 	.word	0xfbffffff
 8000b10:	7dffffff 	.word	0x7dffffff

08000b14 <__aeabi_fdiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	464f      	mov	r7, r9
 8000b18:	4646      	mov	r6, r8
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	0244      	lsls	r4, r0, #9
 8000b1e:	b5c0      	push	{r6, r7, lr}
 8000b20:	0047      	lsls	r7, r0, #1
 8000b22:	1c0e      	adds	r6, r1, #0
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	0e3f      	lsrs	r7, r7, #24
 8000b28:	0fc5      	lsrs	r5, r0, #31
 8000b2a:	2f00      	cmp	r7, #0
 8000b2c:	d03c      	beq.n	8000ba8 <__aeabi_fdiv+0x94>
 8000b2e:	2fff      	cmp	r7, #255	@ 0xff
 8000b30:	d042      	beq.n	8000bb8 <__aeabi_fdiv+0xa4>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	4699      	mov	r9, r3
 8000b38:	469a      	mov	sl, r3
 8000b3a:	00e4      	lsls	r4, r4, #3
 8000b3c:	04d2      	lsls	r2, r2, #19
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	3f7f      	subs	r7, #127	@ 0x7f
 8000b42:	0273      	lsls	r3, r6, #9
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	4698      	mov	r8, r3
 8000b48:	0073      	lsls	r3, r6, #1
 8000b4a:	0e1b      	lsrs	r3, r3, #24
 8000b4c:	0ff6      	lsrs	r6, r6, #31
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d01b      	beq.n	8000b8a <__aeabi_fdiv+0x76>
 8000b52:	2bff      	cmp	r3, #255	@ 0xff
 8000b54:	d013      	beq.n	8000b7e <__aeabi_fdiv+0x6a>
 8000b56:	4642      	mov	r2, r8
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	04c9      	lsls	r1, r1, #19
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	2000      	movs	r0, #0
 8000b64:	3b7f      	subs	r3, #127	@ 0x7f
 8000b66:	0029      	movs	r1, r5
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	4071      	eors	r1, r6
 8000b6e:	b2c9      	uxtb	r1, r1
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fdiv+0x62>
 8000b74:	e0b5      	b.n	8000ce2 <__aeabi_fdiv+0x1ce>
 8000b76:	4a74      	ldr	r2, [pc, #464]	@ (8000d48 <__aeabi_fdiv+0x234>)
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	58d3      	ldr	r3, [r2, r3]
 8000b7c:	469f      	mov	pc, r3
 8000b7e:	4643      	mov	r3, r8
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d13f      	bne.n	8000c04 <__aeabi_fdiv+0xf0>
 8000b84:	3fff      	subs	r7, #255	@ 0xff
 8000b86:	3302      	adds	r3, #2
 8000b88:	e003      	b.n	8000b92 <__aeabi_fdiv+0x7e>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12d      	bne.n	8000bec <__aeabi_fdiv+0xd8>
 8000b90:	2301      	movs	r3, #1
 8000b92:	0029      	movs	r1, r5
 8000b94:	464a      	mov	r2, r9
 8000b96:	4071      	eors	r1, r6
 8000b98:	b2c9      	uxtb	r1, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	2a0e      	cmp	r2, #14
 8000b9e:	d838      	bhi.n	8000c12 <__aeabi_fdiv+0xfe>
 8000ba0:	486a      	ldr	r0, [pc, #424]	@ (8000d4c <__aeabi_fdiv+0x238>)
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	5882      	ldr	r2, [r0, r2]
 8000ba6:	4697      	mov	pc, r2
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	d113      	bne.n	8000bd4 <__aeabi_fdiv+0xc0>
 8000bac:	2304      	movs	r3, #4
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e7c4      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_fdiv+0xb4>
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	3b06      	subs	r3, #6
 8000bc2:	27ff      	movs	r7, #255	@ 0xff
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	e7bc      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bc8:	230c      	movs	r3, #12
 8000bca:	4699      	mov	r9, r3
 8000bcc:	3b09      	subs	r3, #9
 8000bce:	27ff      	movs	r7, #255	@ 0xff
 8000bd0:	469a      	mov	sl, r3
 8000bd2:	e7b6      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bd4:	0020      	movs	r0, r4
 8000bd6:	f002 fcb1 	bl	800353c <__clzsi2>
 8000bda:	2776      	movs	r7, #118	@ 0x76
 8000bdc:	1f43      	subs	r3, r0, #5
 8000bde:	409c      	lsls	r4, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	427f      	negs	r7, r7
 8000be4:	4699      	mov	r9, r3
 8000be6:	469a      	mov	sl, r3
 8000be8:	1a3f      	subs	r7, r7, r0
 8000bea:	e7aa      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bec:	4640      	mov	r0, r8
 8000bee:	f002 fca5 	bl	800353c <__clzsi2>
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	1f43      	subs	r3, r0, #5
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	2376      	movs	r3, #118	@ 0x76
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	4690      	mov	r8, r2
 8000c00:	2000      	movs	r0, #0
 8000c02:	e7b0      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c04:	2303      	movs	r3, #3
 8000c06:	464a      	mov	r2, r9
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	33fc      	adds	r3, #252	@ 0xfc
 8000c10:	e7a9      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c12:	000d      	movs	r5, r1
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	2200      	movs	r2, #0
 8000c18:	05c0      	lsls	r0, r0, #23
 8000c1a:	07ed      	lsls	r5, r5, #31
 8000c1c:	4310      	orrs	r0, r2
 8000c1e:	4328      	orrs	r0, r5
 8000c20:	bce0      	pop	{r5, r6, r7}
 8000c22:	46ba      	mov	sl, r7
 8000c24:	46b1      	mov	r9, r6
 8000c26:	46a8      	mov	r8, r5
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	000d      	movs	r5, r1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e7f2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c32:	4653      	mov	r3, sl
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d0ed      	beq.n	8000c14 <__aeabi_fdiv+0x100>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d033      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <__aeabi_fdiv+0x13a>
 8000c42:	2000      	movs	r0, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	e7e7      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c48:	0035      	movs	r5, r6
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d07a      	beq.n	8000d44 <__aeabi_fdiv+0x230>
 8000c4e:	003b      	movs	r3, r7
 8000c50:	337f      	adds	r3, #127	@ 0x7f
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd2d      	ble.n	8000cb2 <__aeabi_fdiv+0x19e>
 8000c56:	4642      	mov	r2, r8
 8000c58:	0752      	lsls	r2, r2, #29
 8000c5a:	d007      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	4641      	mov	r1, r8
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a04      	cmp	r2, #4
 8000c64:	d002      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c66:	2204      	movs	r2, #4
 8000c68:	4694      	mov	ip, r2
 8000c6a:	44e0      	add	r8, ip
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	d505      	bpl.n	8000c7e <__aeabi_fdiv+0x16a>
 8000c72:	4642      	mov	r2, r8
 8000c74:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <__aeabi_fdiv+0x23c>)
 8000c76:	401a      	ands	r2, r3
 8000c78:	003b      	movs	r3, r7
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	3380      	adds	r3, #128	@ 0x80
 8000c7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c80:	dcc8      	bgt.n	8000c14 <__aeabi_fdiv+0x100>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0192      	lsls	r2, r2, #6
 8000c86:	0a52      	lsrs	r2, r2, #9
 8000c88:	b2d8      	uxtb	r0, r3
 8000c8a:	e7c5      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	2500      	movs	r5, #0
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	03d2      	lsls	r2, r2, #15
 8000c94:	e7c0      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c96:	2280      	movs	r2, #128	@ 0x80
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	4214      	tst	r4, r2
 8000c9c:	d002      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	d049      	beq.n	8000d38 <__aeabi_fdiv+0x224>
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	03d2      	lsls	r2, r2, #15
 8000ca8:	4322      	orrs	r2, r4
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	20ff      	movs	r0, #255	@ 0xff
 8000cae:	0a52      	lsrs	r2, r2, #9
 8000cb0:	e7b2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b1b      	cmp	r3, #27
 8000cb8:	dcc3      	bgt.n	8000c42 <__aeabi_fdiv+0x12e>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	40da      	lsrs	r2, r3
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	379e      	adds	r7, #158	@ 0x9e
 8000cc2:	40bb      	lsls	r3, r7
 8000cc4:	1e59      	subs	r1, r3, #1
 8000cc6:	418b      	sbcs	r3, r1
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	0753      	lsls	r3, r2, #29
 8000ccc:	d004      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cce:	230f      	movs	r3, #15
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0153      	lsls	r3, r2, #5
 8000cda:	d529      	bpl.n	8000d30 <__aeabi_fdiv+0x21c>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e79a      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	0163      	lsls	r3, r4, #5
 8000ce6:	0155      	lsls	r5, r2, #5
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d215      	bcs.n	8000d18 <__aeabi_fdiv+0x204>
 8000cec:	201b      	movs	r0, #27
 8000cee:	2200      	movs	r2, #0
 8000cf0:	3f01      	subs	r7, #1
 8000cf2:	2601      	movs	r6, #1
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	db01      	blt.n	8000d02 <__aeabi_fdiv+0x1ee>
 8000cfe:	429d      	cmp	r5, r3
 8000d00:	d801      	bhi.n	8000d06 <__aeabi_fdiv+0x1f2>
 8000d02:	1b5b      	subs	r3, r3, r5
 8000d04:	4332      	orrs	r2, r6
 8000d06:	3801      	subs	r0, #1
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <__aeabi_fdiv+0x1e0>
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	4183      	sbcs	r3, r0
 8000d10:	4313      	orrs	r3, r2
 8000d12:	4698      	mov	r8, r3
 8000d14:	000d      	movs	r5, r1
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fdiv+0x13a>
 8000d18:	201a      	movs	r0, #26
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	1b5b      	subs	r3, r3, r5
 8000d1e:	e7e8      	b.n	8000cf2 <__aeabi_fdiv+0x1de>
 8000d20:	3b02      	subs	r3, #2
 8000d22:	425a      	negs	r2, r3
 8000d24:	4153      	adcs	r3, r2
 8000d26:	425b      	negs	r3, r3
 8000d28:	0035      	movs	r5, r6
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e773      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	2000      	movs	r0, #0
 8000d34:	0a52      	lsrs	r2, r2, #9
 8000d36:	e76f      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	0252      	lsls	r2, r2, #9
 8000d3c:	0035      	movs	r5, r6
 8000d3e:	20ff      	movs	r0, #255	@ 0xff
 8000d40:	0a52      	lsrs	r2, r2, #9
 8000d42:	e769      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d44:	4644      	mov	r4, r8
 8000d46:	e7ad      	b.n	8000ca4 <__aeabi_fdiv+0x190>
 8000d48:	08016f10 	.word	0x08016f10
 8000d4c:	08016f50 	.word	0x08016f50
 8000d50:	f7ffffff 	.word	0xf7ffffff

08000d54 <__eqsf2>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	024e      	lsls	r6, r1, #9
 8000d5a:	004c      	lsls	r4, r1, #1
 8000d5c:	0245      	lsls	r5, r0, #9
 8000d5e:	0a6d      	lsrs	r5, r5, #9
 8000d60:	0e12      	lsrs	r2, r2, #24
 8000d62:	0fc3      	lsrs	r3, r0, #31
 8000d64:	0a76      	lsrs	r6, r6, #9
 8000d66:	0e24      	lsrs	r4, r4, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d010      	beq.n	8000d90 <__eqsf2+0x3c>
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d00c      	beq.n	8000d8c <__eqsf2+0x38>
 8000d72:	2001      	movs	r0, #1
 8000d74:	42a2      	cmp	r2, r4
 8000d76:	d10a      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d78:	42b5      	cmp	r5, r6
 8000d7a:	d108      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d00f      	beq.n	8000da0 <__eqsf2+0x4c>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d104      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d84:	0028      	movs	r0, r5
 8000d86:	1e43      	subs	r3, r0, #1
 8000d88:	4198      	sbcs	r0, r3
 8000d8a:	e000      	b.n	8000d8e <__eqsf2+0x3a>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	2001      	movs	r0, #1
 8000d92:	2cff      	cmp	r4, #255	@ 0xff
 8000d94:	d1fb      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d96:	4335      	orrs	r5, r6
 8000d98:	d1f9      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d9a:	404b      	eors	r3, r1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	e7f6      	b.n	8000d8e <__eqsf2+0x3a>
 8000da0:	2000      	movs	r0, #0
 8000da2:	e7f4      	b.n	8000d8e <__eqsf2+0x3a>

08000da4 <__gesf2>:
 8000da4:	b530      	push	{r4, r5, lr}
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	0244      	lsls	r4, r0, #9
 8000daa:	024d      	lsls	r5, r1, #9
 8000dac:	0fc3      	lsrs	r3, r0, #31
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	0e12      	lsrs	r2, r2, #24
 8000db4:	0a6d      	lsrs	r5, r5, #9
 8000db6:	0e00      	lsrs	r0, r0, #24
 8000db8:	0fc9      	lsrs	r1, r1, #31
 8000dba:	2aff      	cmp	r2, #255	@ 0xff
 8000dbc:	d019      	beq.n	8000df2 <__gesf2+0x4e>
 8000dbe:	28ff      	cmp	r0, #255	@ 0xff
 8000dc0:	d00b      	beq.n	8000dda <__gesf2+0x36>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d11e      	bne.n	8000e04 <__gesf2+0x60>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d10b      	bne.n	8000de2 <__gesf2+0x3e>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d027      	beq.n	8000e1e <__gesf2+0x7a>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d134      	bne.n	8000e3c <__gesf2+0x98>
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d02f      	beq.n	8000e36 <__gesf2+0x92>
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	bd30      	pop	{r4, r5, pc}
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d128      	bne.n	8000e30 <__gesf2+0x8c>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d101      	bne.n	8000de6 <__gesf2+0x42>
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d0f5      	beq.n	8000dd2 <__gesf2+0x2e>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d107      	bne.n	8000dfa <__gesf2+0x56>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d023      	beq.n	8000e36 <__gesf2+0x92>
 8000dee:	0018      	movs	r0, r3
 8000df0:	e7f2      	b.n	8000dd8 <__gesf2+0x34>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d11c      	bne.n	8000e30 <__gesf2+0x8c>
 8000df6:	28ff      	cmp	r0, #255	@ 0xff
 8000df8:	d014      	beq.n	8000e24 <__gesf2+0x80>
 8000dfa:	1e58      	subs	r0, r3, #1
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	4018      	ands	r0, r3
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7e9      	b.n	8000dd8 <__gesf2+0x34>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d0f8      	beq.n	8000dfa <__gesf2+0x56>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d1f6      	bne.n	8000dfa <__gesf2+0x56>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	dcf4      	bgt.n	8000dfa <__gesf2+0x56>
 8000e10:	dbeb      	blt.n	8000dea <__gesf2+0x46>
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	d8f1      	bhi.n	8000dfa <__gesf2+0x56>
 8000e16:	2000      	movs	r0, #0
 8000e18:	42ac      	cmp	r4, r5
 8000e1a:	d2dd      	bcs.n	8000dd8 <__gesf2+0x34>
 8000e1c:	e7e5      	b.n	8000dea <__gesf2+0x46>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d0da      	beq.n	8000dd8 <__gesf2+0x34>
 8000e22:	e7ea      	b.n	8000dfa <__gesf2+0x56>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d103      	bne.n	8000e30 <__gesf2+0x8c>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d1e6      	bne.n	8000dfa <__gesf2+0x56>
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7d3      	b.n	8000dd8 <__gesf2+0x34>
 8000e30:	2002      	movs	r0, #2
 8000e32:	4240      	negs	r0, r0
 8000e34:	e7d0      	b.n	8000dd8 <__gesf2+0x34>
 8000e36:	2001      	movs	r0, #1
 8000e38:	4240      	negs	r0, r0
 8000e3a:	e7cd      	b.n	8000dd8 <__gesf2+0x34>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d0e8      	beq.n	8000e12 <__gesf2+0x6e>
 8000e40:	e7db      	b.n	8000dfa <__gesf2+0x56>
 8000e42:	46c0      	nop			@ (mov r8, r8)

08000e44 <__lesf2>:
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0244      	lsls	r4, r0, #9
 8000e4a:	024d      	lsls	r5, r1, #9
 8000e4c:	0fc3      	lsrs	r3, r0, #31
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	0a6d      	lsrs	r5, r5, #9
 8000e56:	0e00      	lsrs	r0, r0, #24
 8000e58:	0fc9      	lsrs	r1, r1, #31
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d01a      	beq.n	8000e94 <__lesf2+0x50>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d00e      	beq.n	8000e80 <__lesf2+0x3c>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d11e      	bne.n	8000ea4 <__lesf2+0x60>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d10e      	bne.n	8000e88 <__lesf2+0x44>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d02a      	beq.n	8000ec4 <__lesf2+0x80>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d00c      	beq.n	8000e8c <__lesf2+0x48>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d01d      	beq.n	8000eb2 <__lesf2+0x6e>
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	2302      	movs	r3, #2
 8000e7a:	4018      	ands	r0, r3
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e010      	b.n	8000ea2 <__lesf2+0x5e>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d10d      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d120      	bne.n	8000eca <__lesf2+0x86>
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d11e      	bne.n	8000eca <__lesf2+0x86>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d023      	beq.n	8000ed8 <__lesf2+0x94>
 8000e90:	0008      	movs	r0, r1
 8000e92:	e006      	b.n	8000ea2 <__lesf2+0x5e>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d103      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e98:	28ff      	cmp	r0, #255	@ 0xff
 8000e9a:	d1ec      	bne.n	8000e76 <__lesf2+0x32>
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d017      	beq.n	8000ed0 <__lesf2+0x8c>
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0e6      	beq.n	8000e76 <__lesf2+0x32>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1e4      	bne.n	8000e76 <__lesf2+0x32>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	dce2      	bgt.n	8000e76 <__lesf2+0x32>
 8000eb0:	db04      	blt.n	8000ebc <__lesf2+0x78>
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d8df      	bhi.n	8000e76 <__lesf2+0x32>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d2f2      	bcs.n	8000ea2 <__lesf2+0x5e>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <__lesf2+0x94>
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	e7ee      	b.n	8000ea2 <__lesf2+0x5e>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d0ec      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ec8:	e7d5      	b.n	8000e76 <__lesf2+0x32>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1d3      	bne.n	8000e76 <__lesf2+0x32>
 8000ece:	e7f5      	b.n	8000ebc <__lesf2+0x78>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d0e5      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ed6:	e7ce      	b.n	8000e76 <__lesf2+0x32>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4240      	negs	r0, r0
 8000edc:	e7e1      	b.n	8000ea2 <__lesf2+0x5e>
 8000ede:	46c0      	nop			@ (mov r8, r8)

08000ee0 <__aeabi_fmul>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	464f      	mov	r7, r9
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	46d6      	mov	lr, sl
 8000ee8:	0243      	lsls	r3, r0, #9
 8000eea:	0a5b      	lsrs	r3, r3, #9
 8000eec:	0045      	lsls	r5, r0, #1
 8000eee:	b5c0      	push	{r6, r7, lr}
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	1c0f      	adds	r7, r1, #0
 8000ef4:	0e2d      	lsrs	r5, r5, #24
 8000ef6:	0fc6      	lsrs	r6, r0, #31
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fmul+0x1e>
 8000efc:	e088      	b.n	8001010 <__aeabi_fmul+0x130>
 8000efe:	2dff      	cmp	r5, #255	@ 0xff
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fmul+0x24>
 8000f02:	e08d      	b.n	8001020 <__aeabi_fmul+0x140>
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4691      	mov	r9, r2
 8000f10:	4698      	mov	r8, r3
 8000f12:	469a      	mov	sl, r3
 8000f14:	3d7f      	subs	r5, #127	@ 0x7f
 8000f16:	027c      	lsls	r4, r7, #9
 8000f18:	007b      	lsls	r3, r7, #1
 8000f1a:	0a64      	lsrs	r4, r4, #9
 8000f1c:	0e1b      	lsrs	r3, r3, #24
 8000f1e:	0fff      	lsrs	r7, r7, #31
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d068      	beq.n	8000ff6 <__aeabi_fmul+0x116>
 8000f24:	2bff      	cmp	r3, #255	@ 0xff
 8000f26:	d021      	beq.n	8000f6c <__aeabi_fmul+0x8c>
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	00e4      	lsls	r4, r4, #3
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	4642      	mov	r2, r8
 8000f32:	3b7f      	subs	r3, #127	@ 0x7f
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	2100      	movs	r1, #0
 8000f38:	1c5d      	adds	r5, r3, #1
 8000f3a:	2a0a      	cmp	r2, #10
 8000f3c:	dc2e      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8000f3e:	407e      	eors	r6, r7
 8000f40:	4642      	mov	r2, r8
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	dc23      	bgt.n	8000f8e <__aeabi_fmul+0xae>
 8000f46:	3a01      	subs	r2, #1
 8000f48:	2a01      	cmp	r2, #1
 8000f4a:	d900      	bls.n	8000f4e <__aeabi_fmul+0x6e>
 8000f4c:	e0bd      	b.n	80010ca <__aeabi_fmul+0x1ea>
 8000f4e:	2902      	cmp	r1, #2
 8000f50:	d06e      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000f52:	2901      	cmp	r1, #1
 8000f54:	d12c      	bne.n	8000fb0 <__aeabi_fmul+0xd0>
 8000f56:	2000      	movs	r0, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	05c0      	lsls	r0, r0, #23
 8000f5c:	07f6      	lsls	r6, r6, #31
 8000f5e:	4310      	orrs	r0, r2
 8000f60:	4330      	orrs	r0, r6
 8000f62:	bce0      	pop	{r5, r6, r7}
 8000f64:	46ba      	mov	sl, r7
 8000f66:	46b1      	mov	r9, r6
 8000f68:	46a8      	mov	r8, r5
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	33ff      	adds	r3, #255	@ 0xff
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d065      	beq.n	8001040 <__aeabi_fmul+0x160>
 8000f74:	2203      	movs	r2, #3
 8000f76:	4641      	mov	r1, r8
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	0032      	movs	r2, r6
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	4688      	mov	r8, r1
 8000f80:	407a      	eors	r2, r7
 8000f82:	35ff      	adds	r5, #255	@ 0xff
 8000f84:	290a      	cmp	r1, #10
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_fmul+0xaa>
 8000f88:	e0d8      	b.n	800113c <__aeabi_fmul+0x25c>
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4640      	mov	r0, r8
 8000f90:	2201      	movs	r2, #1
 8000f92:	4082      	lsls	r2, r0
 8000f94:	20a6      	movs	r0, #166	@ 0xa6
 8000f96:	00c0      	lsls	r0, r0, #3
 8000f98:	4202      	tst	r2, r0
 8000f9a:	d020      	beq.n	8000fde <__aeabi_fmul+0xfe>
 8000f9c:	4653      	mov	r3, sl
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d046      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fmul+0xc8>
 8000fa6:	e0bb      	b.n	8001120 <__aeabi_fmul+0x240>
 8000fa8:	4651      	mov	r1, sl
 8000faa:	464c      	mov	r4, r9
 8000fac:	2901      	cmp	r1, #1
 8000fae:	d0d2      	beq.n	8000f56 <__aeabi_fmul+0x76>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	337f      	adds	r3, #127	@ 0x7f
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd70      	ble.n	800109a <__aeabi_fmul+0x1ba>
 8000fb8:	0762      	lsls	r2, r4, #29
 8000fba:	d004      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	4022      	ands	r2, r4
 8000fc0:	2a04      	cmp	r2, #4
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	0122      	lsls	r2, r4, #4
 8000fc8:	d503      	bpl.n	8000fd2 <__aeabi_fmul+0xf2>
 8000fca:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <__aeabi_fmul+0x278>)
 8000fcc:	401c      	ands	r4, r3
 8000fce:	002b      	movs	r3, r5
 8000fd0:	3380      	adds	r3, #128	@ 0x80
 8000fd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fd4:	dc2c      	bgt.n	8001030 <__aeabi_fmul+0x150>
 8000fd6:	01a2      	lsls	r2, r4, #6
 8000fd8:	0a52      	lsrs	r2, r2, #9
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	e7bd      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8000fde:	2090      	movs	r0, #144	@ 0x90
 8000fe0:	0080      	lsls	r0, r0, #2
 8000fe2:	4202      	tst	r2, r0
 8000fe4:	d127      	bne.n	8001036 <__aeabi_fmul+0x156>
 8000fe6:	38b9      	subs	r0, #185	@ 0xb9
 8000fe8:	38ff      	subs	r0, #255	@ 0xff
 8000fea:	4210      	tst	r0, r2
 8000fec:	d06d      	beq.n	80010ca <__aeabi_fmul+0x1ea>
 8000fee:	003e      	movs	r6, r7
 8000ff0:	46a1      	mov	r9, r4
 8000ff2:	468a      	mov	sl, r1
 8000ff4:	e7d2      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d141      	bne.n	800107e <__aeabi_fmul+0x19e>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4690      	mov	r8, r2
 8001002:	002b      	movs	r3, r5
 8001004:	4642      	mov	r2, r8
 8001006:	2101      	movs	r1, #1
 8001008:	1c5d      	adds	r5, r3, #1
 800100a:	2a0a      	cmp	r2, #10
 800100c:	dd97      	ble.n	8000f3e <__aeabi_fmul+0x5e>
 800100e:	e7c5      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d126      	bne.n	8001062 <__aeabi_fmul+0x182>
 8001014:	2304      	movs	r3, #4
 8001016:	4698      	mov	r8, r3
 8001018:	3b03      	subs	r3, #3
 800101a:	2500      	movs	r5, #0
 800101c:	469a      	mov	sl, r3
 800101e:	e77a      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <__aeabi_fmul+0x176>
 8001024:	2308      	movs	r3, #8
 8001026:	4698      	mov	r8, r3
 8001028:	3b06      	subs	r3, #6
 800102a:	25ff      	movs	r5, #255	@ 0xff
 800102c:	469a      	mov	sl, r3
 800102e:	e772      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001030:	20ff      	movs	r0, #255	@ 0xff
 8001032:	2200      	movs	r2, #0
 8001034:	e791      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	2600      	movs	r6, #0
 800103a:	20ff      	movs	r0, #255	@ 0xff
 800103c:	03d2      	lsls	r2, r2, #15
 800103e:	e78c      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001040:	4641      	mov	r1, r8
 8001042:	2202      	movs	r2, #2
 8001044:	3501      	adds	r5, #1
 8001046:	4311      	orrs	r1, r2
 8001048:	4688      	mov	r8, r1
 800104a:	35ff      	adds	r5, #255	@ 0xff
 800104c:	290a      	cmp	r1, #10
 800104e:	dca5      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8001050:	2102      	movs	r1, #2
 8001052:	407e      	eors	r6, r7
 8001054:	e774      	b.n	8000f40 <__aeabi_fmul+0x60>
 8001056:	230c      	movs	r3, #12
 8001058:	4698      	mov	r8, r3
 800105a:	3b09      	subs	r3, #9
 800105c:	25ff      	movs	r5, #255	@ 0xff
 800105e:	469a      	mov	sl, r3
 8001060:	e759      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001062:	0018      	movs	r0, r3
 8001064:	f002 fa6a 	bl	800353c <__clzsi2>
 8001068:	464a      	mov	r2, r9
 800106a:	1f43      	subs	r3, r0, #5
 800106c:	2576      	movs	r5, #118	@ 0x76
 800106e:	409a      	lsls	r2, r3
 8001070:	2300      	movs	r3, #0
 8001072:	426d      	negs	r5, r5
 8001074:	4691      	mov	r9, r2
 8001076:	4698      	mov	r8, r3
 8001078:	469a      	mov	sl, r3
 800107a:	1a2d      	subs	r5, r5, r0
 800107c:	e74b      	b.n	8000f16 <__aeabi_fmul+0x36>
 800107e:	0020      	movs	r0, r4
 8001080:	f002 fa5c 	bl	800353c <__clzsi2>
 8001084:	4642      	mov	r2, r8
 8001086:	1f43      	subs	r3, r0, #5
 8001088:	409c      	lsls	r4, r3
 800108a:	1a2b      	subs	r3, r5, r0
 800108c:	3b76      	subs	r3, #118	@ 0x76
 800108e:	2100      	movs	r1, #0
 8001090:	1c5d      	adds	r5, r3, #1
 8001092:	2a0a      	cmp	r2, #10
 8001094:	dc00      	bgt.n	8001098 <__aeabi_fmul+0x1b8>
 8001096:	e752      	b.n	8000f3e <__aeabi_fmul+0x5e>
 8001098:	e780      	b.n	8000f9c <__aeabi_fmul+0xbc>
 800109a:	2201      	movs	r2, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b1b      	cmp	r3, #27
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_fmul+0x1c4>
 80010a2:	e758      	b.n	8000f56 <__aeabi_fmul+0x76>
 80010a4:	359e      	adds	r5, #158	@ 0x9e
 80010a6:	0022      	movs	r2, r4
 80010a8:	40ac      	lsls	r4, r5
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	1e63      	subs	r3, r4, #1
 80010ae:	419c      	sbcs	r4, r3
 80010b0:	4322      	orrs	r2, r4
 80010b2:	0753      	lsls	r3, r2, #29
 80010b4:	d004      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010b6:	230f      	movs	r3, #15
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d000      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010be:	3204      	adds	r2, #4
 80010c0:	0153      	lsls	r3, r2, #5
 80010c2:	d537      	bpl.n	8001134 <__aeabi_fmul+0x254>
 80010c4:	2001      	movs	r0, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	e747      	b.n	8000f5a <__aeabi_fmul+0x7a>
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	464a      	mov	r2, r9
 80010ce:	0424      	lsls	r4, r4, #16
 80010d0:	0c24      	lsrs	r4, r4, #16
 80010d2:	0027      	movs	r7, r4
 80010d4:	0c10      	lsrs	r0, r2, #16
 80010d6:	0412      	lsls	r2, r2, #16
 80010d8:	0c12      	lsrs	r2, r2, #16
 80010da:	4344      	muls	r4, r0
 80010dc:	4357      	muls	r7, r2
 80010de:	4348      	muls	r0, r1
 80010e0:	4351      	muls	r1, r2
 80010e2:	0c3a      	lsrs	r2, r7, #16
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	1852      	adds	r2, r2, r1
 80010e8:	4294      	cmp	r4, r2
 80010ea:	d903      	bls.n	80010f4 <__aeabi_fmul+0x214>
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	0249      	lsls	r1, r1, #9
 80010f0:	468c      	mov	ip, r1
 80010f2:	4460      	add	r0, ip
 80010f4:	043f      	lsls	r7, r7, #16
 80010f6:	0411      	lsls	r1, r2, #16
 80010f8:	0c3f      	lsrs	r7, r7, #16
 80010fa:	19c9      	adds	r1, r1, r7
 80010fc:	018c      	lsls	r4, r1, #6
 80010fe:	1e67      	subs	r7, r4, #1
 8001100:	41bc      	sbcs	r4, r7
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	0e89      	lsrs	r1, r1, #26
 8001106:	1812      	adds	r2, r2, r0
 8001108:	430c      	orrs	r4, r1
 800110a:	0192      	lsls	r2, r2, #6
 800110c:	4314      	orrs	r4, r2
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	d50e      	bpl.n	8001130 <__aeabi_fmul+0x250>
 8001112:	2301      	movs	r3, #1
 8001114:	0862      	lsrs	r2, r4, #1
 8001116:	401c      	ands	r4, r3
 8001118:	4314      	orrs	r4, r2
 800111a:	e749      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 800111c:	003e      	movs	r6, r7
 800111e:	46a1      	mov	r9, r4
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	464b      	mov	r3, r9
 8001124:	03d2      	lsls	r2, r2, #15
 8001126:	431a      	orrs	r2, r3
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	20ff      	movs	r0, #255	@ 0xff
 800112c:	0a52      	lsrs	r2, r2, #9
 800112e:	e714      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001130:	001d      	movs	r5, r3
 8001132:	e73d      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 8001134:	0192      	lsls	r2, r2, #6
 8001136:	2000      	movs	r0, #0
 8001138:	0a52      	lsrs	r2, r2, #9
 800113a:	e70e      	b.n	8000f5a <__aeabi_fmul+0x7a>
 800113c:	290f      	cmp	r1, #15
 800113e:	d1ed      	bne.n	800111c <__aeabi_fmul+0x23c>
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	464b      	mov	r3, r9
 8001144:	03d2      	lsls	r2, r2, #15
 8001146:	4213      	tst	r3, r2
 8001148:	d0ea      	beq.n	8001120 <__aeabi_fmul+0x240>
 800114a:	4214      	tst	r4, r2
 800114c:	d1e8      	bne.n	8001120 <__aeabi_fmul+0x240>
 800114e:	003e      	movs	r6, r7
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	4322      	orrs	r2, r4
 8001154:	e701      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	f7ffffff 	.word	0xf7ffffff

0800115c <__aeabi_fsub>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	4647      	mov	r7, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	024e      	lsls	r6, r1, #9
 8001164:	0243      	lsls	r3, r0, #9
 8001166:	0045      	lsls	r5, r0, #1
 8001168:	0a72      	lsrs	r2, r6, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0048      	lsls	r0, r1, #1
 800116e:	b580      	push	{r7, lr}
 8001170:	4694      	mov	ip, r2
 8001172:	0a5f      	lsrs	r7, r3, #9
 8001174:	0e2d      	lsrs	r5, r5, #24
 8001176:	099b      	lsrs	r3, r3, #6
 8001178:	0e00      	lsrs	r0, r0, #24
 800117a:	0fc9      	lsrs	r1, r1, #31
 800117c:	09b6      	lsrs	r6, r6, #6
 800117e:	28ff      	cmp	r0, #255	@ 0xff
 8001180:	d024      	beq.n	80011cc <__aeabi_fsub+0x70>
 8001182:	2201      	movs	r2, #1
 8001184:	4051      	eors	r1, r2
 8001186:	1a2a      	subs	r2, r5, r0
 8001188:	428c      	cmp	r4, r1
 800118a:	d00f      	beq.n	80011ac <__aeabi_fsub+0x50>
 800118c:	2a00      	cmp	r2, #0
 800118e:	dc00      	bgt.n	8001192 <__aeabi_fsub+0x36>
 8001190:	e16a      	b.n	8001468 <__aeabi_fsub+0x30c>
 8001192:	2800      	cmp	r0, #0
 8001194:	d135      	bne.n	8001202 <__aeabi_fsub+0xa6>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x40>
 800119a:	e0a2      	b.n	80012e2 <__aeabi_fsub+0x186>
 800119c:	1e51      	subs	r1, r2, #1
 800119e:	2a01      	cmp	r2, #1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x48>
 80011a2:	e124      	b.n	80013ee <__aeabi_fsub+0x292>
 80011a4:	2aff      	cmp	r2, #255	@ 0xff
 80011a6:	d021      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011a8:	000a      	movs	r2, r1
 80011aa:	e02f      	b.n	800120c <__aeabi_fsub+0xb0>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_fsub+0x56>
 80011b0:	e167      	b.n	8001482 <__aeabi_fsub+0x326>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d05e      	beq.n	8001274 <__aeabi_fsub+0x118>
 80011b6:	2dff      	cmp	r5, #255	@ 0xff
 80011b8:	d018      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	04c9      	lsls	r1, r1, #19
 80011be:	430e      	orrs	r6, r1
 80011c0:	2a1b      	cmp	r2, #27
 80011c2:	dc00      	bgt.n	80011c6 <__aeabi_fsub+0x6a>
 80011c4:	e076      	b.n	80012b4 <__aeabi_fsub+0x158>
 80011c6:	002a      	movs	r2, r5
 80011c8:	3301      	adds	r3, #1
 80011ca:	e032      	b.n	8001232 <__aeabi_fsub+0xd6>
 80011cc:	002a      	movs	r2, r5
 80011ce:	3aff      	subs	r2, #255	@ 0xff
 80011d0:	4691      	mov	r9, r2
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d042      	beq.n	800125c <__aeabi_fsub+0x100>
 80011d6:	428c      	cmp	r4, r1
 80011d8:	d055      	beq.n	8001286 <__aeabi_fsub+0x12a>
 80011da:	464a      	mov	r2, r9
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x86>
 80011e0:	e09c      	b.n	800131c <__aeabi_fsub+0x1c0>
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x8c>
 80011e6:	e077      	b.n	80012d8 <__aeabi_fsub+0x17c>
 80011e8:	000c      	movs	r4, r1
 80011ea:	0033      	movs	r3, r6
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x98>
 80011f2:	e06e      	b.n	80012d2 <__aeabi_fsub+0x176>
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	03d2      	lsls	r2, r2, #15
 80011f8:	4313      	orrs	r3, r2
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	20ff      	movs	r0, #255	@ 0xff
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	e024      	b.n	800124c <__aeabi_fsub+0xf0>
 8001202:	2dff      	cmp	r5, #255	@ 0xff
 8001204:	d0f2      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	04c9      	lsls	r1, r1, #19
 800120a:	430e      	orrs	r6, r1
 800120c:	2101      	movs	r1, #1
 800120e:	2a1b      	cmp	r2, #27
 8001210:	dc08      	bgt.n	8001224 <__aeabi_fsub+0xc8>
 8001212:	0031      	movs	r1, r6
 8001214:	2020      	movs	r0, #32
 8001216:	40d1      	lsrs	r1, r2
 8001218:	1a82      	subs	r2, r0, r2
 800121a:	4096      	lsls	r6, r2
 800121c:	0032      	movs	r2, r6
 800121e:	1e50      	subs	r0, r2, #1
 8001220:	4182      	sbcs	r2, r0
 8001222:	4311      	orrs	r1, r2
 8001224:	1a5b      	subs	r3, r3, r1
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	d460      	bmi.n	80012ec <__aeabi_fsub+0x190>
 800122a:	2107      	movs	r1, #7
 800122c:	002a      	movs	r2, r5
 800122e:	4019      	ands	r1, r3
 8001230:	d057      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001232:	210f      	movs	r1, #15
 8001234:	4019      	ands	r1, r3
 8001236:	2904      	cmp	r1, #4
 8001238:	d000      	beq.n	800123c <__aeabi_fsub+0xe0>
 800123a:	3304      	adds	r3, #4
 800123c:	0159      	lsls	r1, r3, #5
 800123e:	d550      	bpl.n	80012e2 <__aeabi_fsub+0x186>
 8001240:	1c50      	adds	r0, r2, #1
 8001242:	2afe      	cmp	r2, #254	@ 0xfe
 8001244:	d045      	beq.n	80012d2 <__aeabi_fsub+0x176>
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	b2c0      	uxtb	r0, r0
 800124a:	0a5b      	lsrs	r3, r3, #9
 800124c:	05c0      	lsls	r0, r0, #23
 800124e:	4318      	orrs	r0, r3
 8001250:	07e4      	lsls	r4, r4, #31
 8001252:	4320      	orrs	r0, r4
 8001254:	bcc0      	pop	{r6, r7}
 8001256:	46b9      	mov	r9, r7
 8001258:	46b0      	mov	r8, r6
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125c:	2201      	movs	r2, #1
 800125e:	4051      	eors	r1, r2
 8001260:	428c      	cmp	r4, r1
 8001262:	d1ba      	bne.n	80011da <__aeabi_fsub+0x7e>
 8001264:	464a      	mov	r2, r9
 8001266:	2a00      	cmp	r2, #0
 8001268:	d010      	beq.n	800128c <__aeabi_fsub+0x130>
 800126a:	2d00      	cmp	r5, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_fsub+0x114>
 800126e:	e098      	b.n	80013a2 <__aeabi_fsub+0x246>
 8001270:	2300      	movs	r3, #0
 8001272:	e7bb      	b.n	80011ec <__aeabi_fsub+0x90>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d034      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001278:	1e51      	subs	r1, r2, #1
 800127a:	2a01      	cmp	r2, #1
 800127c:	d06e      	beq.n	800135c <__aeabi_fsub+0x200>
 800127e:	2aff      	cmp	r2, #255	@ 0xff
 8001280:	d0b4      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001282:	000a      	movs	r2, r1
 8001284:	e79c      	b.n	80011c0 <__aeabi_fsub+0x64>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x130>
 800128a:	e088      	b.n	800139e <__aeabi_fsub+0x242>
 800128c:	20fe      	movs	r0, #254	@ 0xfe
 800128e:	1c6a      	adds	r2, r5, #1
 8001290:	4210      	tst	r0, r2
 8001292:	d000      	beq.n	8001296 <__aeabi_fsub+0x13a>
 8001294:	e092      	b.n	80013bc <__aeabi_fsub+0x260>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d000      	beq.n	800129c <__aeabi_fsub+0x140>
 800129a:	e0a4      	b.n	80013e6 <__aeabi_fsub+0x28a>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x146>
 80012a0:	e0cb      	b.n	800143a <__aeabi_fsub+0x2de>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 80012a6:	e0ca      	b.n	800143e <__aeabi_fsub+0x2e2>
 80012a8:	2200      	movs	r2, #0
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	b2d0      	uxtb	r0, r2
 80012b2:	e7cb      	b.n	800124c <__aeabi_fsub+0xf0>
 80012b4:	0031      	movs	r1, r6
 80012b6:	2020      	movs	r0, #32
 80012b8:	40d1      	lsrs	r1, r2
 80012ba:	1a82      	subs	r2, r0, r2
 80012bc:	4096      	lsls	r6, r2
 80012be:	0032      	movs	r2, r6
 80012c0:	1e50      	subs	r0, r2, #1
 80012c2:	4182      	sbcs	r2, r0
 80012c4:	430a      	orrs	r2, r1
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	d5ae      	bpl.n	800122a <__aeabi_fsub+0xce>
 80012cc:	1c6a      	adds	r2, r5, #1
 80012ce:	2dfe      	cmp	r5, #254	@ 0xfe
 80012d0:	d14a      	bne.n	8001368 <__aeabi_fsub+0x20c>
 80012d2:	20ff      	movs	r0, #255	@ 0xff
 80012d4:	2300      	movs	r3, #0
 80012d6:	e7b9      	b.n	800124c <__aeabi_fsub+0xf0>
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d14b      	bne.n	8001376 <__aeabi_fsub+0x21a>
 80012de:	000c      	movs	r4, r1
 80012e0:	0033      	movs	r3, r6
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	2aff      	cmp	r2, #255	@ 0xff
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x18e>
 80012e8:	e781      	b.n	80011ee <__aeabi_fsub+0x92>
 80012ea:	e7df      	b.n	80012ac <__aeabi_fsub+0x150>
 80012ec:	019f      	lsls	r7, r3, #6
 80012ee:	09bf      	lsrs	r7, r7, #6
 80012f0:	0038      	movs	r0, r7
 80012f2:	f002 f923 	bl	800353c <__clzsi2>
 80012f6:	3805      	subs	r0, #5
 80012f8:	4087      	lsls	r7, r0
 80012fa:	4285      	cmp	r5, r0
 80012fc:	dc21      	bgt.n	8001342 <__aeabi_fsub+0x1e6>
 80012fe:	003b      	movs	r3, r7
 8001300:	2120      	movs	r1, #32
 8001302:	1b42      	subs	r2, r0, r5
 8001304:	3201      	adds	r2, #1
 8001306:	40d3      	lsrs	r3, r2
 8001308:	1a8a      	subs	r2, r1, r2
 800130a:	4097      	lsls	r7, r2
 800130c:	1e7a      	subs	r2, r7, #1
 800130e:	4197      	sbcs	r7, r2
 8001310:	2200      	movs	r2, #0
 8001312:	433b      	orrs	r3, r7
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x1be>
 8001318:	e78b      	b.n	8001232 <__aeabi_fsub+0xd6>
 800131a:	e78f      	b.n	800123c <__aeabi_fsub+0xe0>
 800131c:	20fe      	movs	r0, #254	@ 0xfe
 800131e:	1c6a      	adds	r2, r5, #1
 8001320:	4210      	tst	r0, r2
 8001322:	d112      	bne.n	800134a <__aeabi_fsub+0x1ee>
 8001324:	2d00      	cmp	r5, #0
 8001326:	d152      	bne.n	80013ce <__aeabi_fsub+0x272>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07c      	beq.n	8001426 <__aeabi_fsub+0x2ca>
 800132c:	2e00      	cmp	r6, #0
 800132e:	d0bb      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 8001330:	1b9a      	subs	r2, r3, r6
 8001332:	0150      	lsls	r0, r2, #5
 8001334:	d400      	bmi.n	8001338 <__aeabi_fsub+0x1dc>
 8001336:	e08b      	b.n	8001450 <__aeabi_fsub+0x2f4>
 8001338:	2401      	movs	r4, #1
 800133a:	2200      	movs	r2, #0
 800133c:	1af3      	subs	r3, r6, r3
 800133e:	400c      	ands	r4, r1
 8001340:	e7e8      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <__aeabi_fsub+0x340>)
 8001344:	1a2a      	subs	r2, r5, r0
 8001346:	403b      	ands	r3, r7
 8001348:	e7e4      	b.n	8001314 <__aeabi_fsub+0x1b8>
 800134a:	1b9f      	subs	r7, r3, r6
 800134c:	017a      	lsls	r2, r7, #5
 800134e:	d446      	bmi.n	80013de <__aeabi_fsub+0x282>
 8001350:	2f00      	cmp	r7, #0
 8001352:	d1cd      	bne.n	80012f0 <__aeabi_fsub+0x194>
 8001354:	2400      	movs	r4, #0
 8001356:	2000      	movs	r0, #0
 8001358:	2300      	movs	r3, #0
 800135a:	e777      	b.n	800124c <__aeabi_fsub+0xf0>
 800135c:	199b      	adds	r3, r3, r6
 800135e:	2501      	movs	r5, #1
 8001360:	3201      	adds	r2, #1
 8001362:	0159      	lsls	r1, r3, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x20c>
 8001366:	e760      	b.n	800122a <__aeabi_fsub+0xce>
 8001368:	2101      	movs	r1, #1
 800136a:	484d      	ldr	r0, [pc, #308]	@ (80014a0 <__aeabi_fsub+0x344>)
 800136c:	4019      	ands	r1, r3
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	4003      	ands	r3, r0
 8001372:	430b      	orrs	r3, r1
 8001374:	e7ce      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001376:	1e57      	subs	r7, r2, #1
 8001378:	2a01      	cmp	r2, #1
 800137a:	d05a      	beq.n	8001432 <__aeabi_fsub+0x2d6>
 800137c:	000c      	movs	r4, r1
 800137e:	2aff      	cmp	r2, #255	@ 0xff
 8001380:	d033      	beq.n	80013ea <__aeabi_fsub+0x28e>
 8001382:	2201      	movs	r2, #1
 8001384:	2f1b      	cmp	r7, #27
 8001386:	dc07      	bgt.n	8001398 <__aeabi_fsub+0x23c>
 8001388:	2120      	movs	r1, #32
 800138a:	1bc9      	subs	r1, r1, r7
 800138c:	001a      	movs	r2, r3
 800138e:	408b      	lsls	r3, r1
 8001390:	40fa      	lsrs	r2, r7
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	418b      	sbcs	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	0005      	movs	r5, r0
 800139a:	1ab3      	subs	r3, r6, r2
 800139c:	e743      	b.n	8001226 <__aeabi_fsub+0xca>
 800139e:	2d00      	cmp	r5, #0
 80013a0:	d123      	bne.n	80013ea <__aeabi_fsub+0x28e>
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d09b      	beq.n	80012e0 <__aeabi_fsub+0x184>
 80013a8:	1e51      	subs	r1, r2, #1
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d0d6      	beq.n	800135c <__aeabi_fsub+0x200>
 80013ae:	2aff      	cmp	r2, #255	@ 0xff
 80013b0:	d01b      	beq.n	80013ea <__aeabi_fsub+0x28e>
 80013b2:	291b      	cmp	r1, #27
 80013b4:	dd2c      	ble.n	8001410 <__aeabi_fsub+0x2b4>
 80013b6:	0002      	movs	r2, r0
 80013b8:	1c73      	adds	r3, r6, #1
 80013ba:	e73a      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013bc:	2aff      	cmp	r2, #255	@ 0xff
 80013be:	d088      	beq.n	80012d2 <__aeabi_fsub+0x176>
 80013c0:	199b      	adds	r3, r3, r6
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x26e>
 80013c8:	e733      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e76e      	b.n	80012ac <__aeabi_fsub+0x150>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d110      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d043      	beq.n	800145e <__aeabi_fsub+0x302>
 80013d6:	2401      	movs	r4, #1
 80013d8:	0033      	movs	r3, r6
 80013da:	400c      	ands	r4, r1
 80013dc:	e706      	b.n	80011ec <__aeabi_fsub+0x90>
 80013de:	2401      	movs	r4, #1
 80013e0:	1af7      	subs	r7, r6, r3
 80013e2:	400c      	ands	r4, r1
 80013e4:	e784      	b.n	80012f0 <__aeabi_fsub+0x194>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013ea:	0033      	movs	r3, r6
 80013ec:	e6fe      	b.n	80011ec <__aeabi_fsub+0x90>
 80013ee:	2501      	movs	r5, #1
 80013f0:	1b9b      	subs	r3, r3, r6
 80013f2:	e718      	b.n	8001226 <__aeabi_fsub+0xca>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_fsub+0x29e>
 80013f8:	e6f8      	b.n	80011ec <__aeabi_fsub+0x90>
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	03d2      	lsls	r2, r2, #15
 80013fe:	4297      	cmp	r7, r2
 8001400:	d304      	bcc.n	800140c <__aeabi_fsub+0x2b0>
 8001402:	4594      	cmp	ip, r2
 8001404:	d202      	bcs.n	800140c <__aeabi_fsub+0x2b0>
 8001406:	2401      	movs	r4, #1
 8001408:	0033      	movs	r3, r6
 800140a:	400c      	ands	r4, r1
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	e6f1      	b.n	80011f4 <__aeabi_fsub+0x98>
 8001410:	001a      	movs	r2, r3
 8001412:	2520      	movs	r5, #32
 8001414:	40ca      	lsrs	r2, r1
 8001416:	1a69      	subs	r1, r5, r1
 8001418:	408b      	lsls	r3, r1
 800141a:	1e59      	subs	r1, r3, #1
 800141c:	418b      	sbcs	r3, r1
 800141e:	4313      	orrs	r3, r2
 8001420:	0005      	movs	r5, r0
 8001422:	199b      	adds	r3, r3, r6
 8001424:	e750      	b.n	80012c8 <__aeabi_fsub+0x16c>
 8001426:	2e00      	cmp	r6, #0
 8001428:	d094      	beq.n	8001354 <__aeabi_fsub+0x1f8>
 800142a:	2401      	movs	r4, #1
 800142c:	0033      	movs	r3, r6
 800142e:	400c      	ands	r4, r1
 8001430:	e73a      	b.n	80012a8 <__aeabi_fsub+0x14c>
 8001432:	000c      	movs	r4, r1
 8001434:	2501      	movs	r5, #1
 8001436:	1af3      	subs	r3, r6, r3
 8001438:	e6f5      	b.n	8001226 <__aeabi_fsub+0xca>
 800143a:	0033      	movs	r3, r6
 800143c:	e734      	b.n	80012a8 <__aeabi_fsub+0x14c>
 800143e:	199b      	adds	r3, r3, r6
 8001440:	2200      	movs	r2, #0
 8001442:	0159      	lsls	r1, r3, #5
 8001444:	d5c1      	bpl.n	80013ca <__aeabi_fsub+0x26e>
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <__aeabi_fsub+0x340>)
 8001448:	4013      	ands	r3, r2
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	2201      	movs	r2, #1
 800144e:	e72d      	b.n	80012ac <__aeabi_fsub+0x150>
 8001450:	2a00      	cmp	r2, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_fsub+0x2fa>
 8001454:	e77e      	b.n	8001354 <__aeabi_fsub+0x1f8>
 8001456:	0013      	movs	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	e726      	b.n	80012ac <__aeabi_fsub+0x150>
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	2400      	movs	r4, #0
 8001462:	20ff      	movs	r0, #255	@ 0xff
 8001464:	03db      	lsls	r3, r3, #15
 8001466:	e6f1      	b.n	800124c <__aeabi_fsub+0xf0>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_fsub+0x312>
 800146c:	e756      	b.n	800131c <__aeabi_fsub+0x1c0>
 800146e:	1b47      	subs	r7, r0, r5
 8001470:	003a      	movs	r2, r7
 8001472:	2d00      	cmp	r5, #0
 8001474:	d100      	bne.n	8001478 <__aeabi_fsub+0x31c>
 8001476:	e730      	b.n	80012da <__aeabi_fsub+0x17e>
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	04d2      	lsls	r2, r2, #19
 800147c:	000c      	movs	r4, r1
 800147e:	4313      	orrs	r3, r2
 8001480:	e77f      	b.n	8001382 <__aeabi_fsub+0x226>
 8001482:	2a00      	cmp	r2, #0
 8001484:	d100      	bne.n	8001488 <__aeabi_fsub+0x32c>
 8001486:	e701      	b.n	800128c <__aeabi_fsub+0x130>
 8001488:	1b41      	subs	r1, r0, r5
 800148a:	2d00      	cmp	r5, #0
 800148c:	d101      	bne.n	8001492 <__aeabi_fsub+0x336>
 800148e:	000a      	movs	r2, r1
 8001490:	e788      	b.n	80013a4 <__aeabi_fsub+0x248>
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	04d2      	lsls	r2, r2, #19
 8001496:	4313      	orrs	r3, r2
 8001498:	e78b      	b.n	80013b2 <__aeabi_fsub+0x256>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	fbffffff 	.word	0xfbffffff
 80014a0:	7dffffff 	.word	0x7dffffff

080014a4 <__aeabi_fcmpun>:
 80014a4:	0243      	lsls	r3, r0, #9
 80014a6:	024a      	lsls	r2, r1, #9
 80014a8:	0040      	lsls	r0, r0, #1
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	0a5b      	lsrs	r3, r3, #9
 80014ae:	0a52      	lsrs	r2, r2, #9
 80014b0:	0e09      	lsrs	r1, r1, #24
 80014b2:	0e00      	lsrs	r0, r0, #24
 80014b4:	28ff      	cmp	r0, #255	@ 0xff
 80014b6:	d006      	beq.n	80014c6 <__aeabi_fcmpun+0x22>
 80014b8:	2000      	movs	r0, #0
 80014ba:	29ff      	cmp	r1, #255	@ 0xff
 80014bc:	d102      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014be:	1e53      	subs	r3, r2, #1
 80014c0:	419a      	sbcs	r2, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	4770      	bx	lr
 80014c6:	38fe      	subs	r0, #254	@ 0xfe
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1fb      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_fcmpun+0x14>
 80014ce:	46c0      	nop			@ (mov r8, r8)

080014d0 <__aeabi_f2iz>:
 80014d0:	0241      	lsls	r1, r0, #9
 80014d2:	0042      	lsls	r2, r0, #1
 80014d4:	0fc3      	lsrs	r3, r0, #31
 80014d6:	0a49      	lsrs	r1, r1, #9
 80014d8:	2000      	movs	r0, #0
 80014da:	0e12      	lsrs	r2, r2, #24
 80014dc:	2a7e      	cmp	r2, #126	@ 0x7e
 80014de:	dd03      	ble.n	80014e8 <__aeabi_f2iz+0x18>
 80014e0:	2a9d      	cmp	r2, #157	@ 0x9d
 80014e2:	dd02      	ble.n	80014ea <__aeabi_f2iz+0x1a>
 80014e4:	4a09      	ldr	r2, [pc, #36]	@ (800150c <__aeabi_f2iz+0x3c>)
 80014e6:	1898      	adds	r0, r3, r2
 80014e8:	4770      	bx	lr
 80014ea:	2080      	movs	r0, #128	@ 0x80
 80014ec:	0400      	lsls	r0, r0, #16
 80014ee:	4301      	orrs	r1, r0
 80014f0:	2a95      	cmp	r2, #149	@ 0x95
 80014f2:	dc07      	bgt.n	8001504 <__aeabi_f2iz+0x34>
 80014f4:	2096      	movs	r0, #150	@ 0x96
 80014f6:	1a82      	subs	r2, r0, r2
 80014f8:	40d1      	lsrs	r1, r2
 80014fa:	4248      	negs	r0, r1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <__aeabi_f2iz+0x18>
 8001500:	0008      	movs	r0, r1
 8001502:	e7f1      	b.n	80014e8 <__aeabi_f2iz+0x18>
 8001504:	3a96      	subs	r2, #150	@ 0x96
 8001506:	4091      	lsls	r1, r2
 8001508:	e7f7      	b.n	80014fa <__aeabi_f2iz+0x2a>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	7fffffff 	.word	0x7fffffff

08001510 <__aeabi_i2f>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	2800      	cmp	r0, #0
 8001514:	d013      	beq.n	800153e <__aeabi_i2f+0x2e>
 8001516:	17c3      	asrs	r3, r0, #31
 8001518:	18c5      	adds	r5, r0, r3
 800151a:	405d      	eors	r5, r3
 800151c:	0fc4      	lsrs	r4, r0, #31
 800151e:	0028      	movs	r0, r5
 8001520:	f002 f80c 	bl	800353c <__clzsi2>
 8001524:	239e      	movs	r3, #158	@ 0x9e
 8001526:	0001      	movs	r1, r0
 8001528:	1a1b      	subs	r3, r3, r0
 800152a:	2b96      	cmp	r3, #150	@ 0x96
 800152c:	dc0f      	bgt.n	800154e <__aeabi_i2f+0x3e>
 800152e:	2808      	cmp	r0, #8
 8001530:	d034      	beq.n	800159c <__aeabi_i2f+0x8c>
 8001532:	3908      	subs	r1, #8
 8001534:	408d      	lsls	r5, r1
 8001536:	026d      	lsls	r5, r5, #9
 8001538:	0a6d      	lsrs	r5, r5, #9
 800153a:	b2d8      	uxtb	r0, r3
 800153c:	e002      	b.n	8001544 <__aeabi_i2f+0x34>
 800153e:	2400      	movs	r4, #0
 8001540:	2000      	movs	r0, #0
 8001542:	2500      	movs	r5, #0
 8001544:	05c0      	lsls	r0, r0, #23
 8001546:	4328      	orrs	r0, r5
 8001548:	07e4      	lsls	r4, r4, #31
 800154a:	4320      	orrs	r0, r4
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	2b99      	cmp	r3, #153	@ 0x99
 8001550:	dc16      	bgt.n	8001580 <__aeabi_i2f+0x70>
 8001552:	1f42      	subs	r2, r0, #5
 8001554:	2805      	cmp	r0, #5
 8001556:	d000      	beq.n	800155a <__aeabi_i2f+0x4a>
 8001558:	4095      	lsls	r5, r2
 800155a:	002a      	movs	r2, r5
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <__aeabi_i2f+0x94>)
 800155e:	4002      	ands	r2, r0
 8001560:	076e      	lsls	r6, r5, #29
 8001562:	d009      	beq.n	8001578 <__aeabi_i2f+0x68>
 8001564:	260f      	movs	r6, #15
 8001566:	4035      	ands	r5, r6
 8001568:	2d04      	cmp	r5, #4
 800156a:	d005      	beq.n	8001578 <__aeabi_i2f+0x68>
 800156c:	3204      	adds	r2, #4
 800156e:	0155      	lsls	r5, r2, #5
 8001570:	d502      	bpl.n	8001578 <__aeabi_i2f+0x68>
 8001572:	239f      	movs	r3, #159	@ 0x9f
 8001574:	4002      	ands	r2, r0
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	0192      	lsls	r2, r2, #6
 800157a:	0a55      	lsrs	r5, r2, #9
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	e7e1      	b.n	8001544 <__aeabi_i2f+0x34>
 8001580:	2205      	movs	r2, #5
 8001582:	1a12      	subs	r2, r2, r0
 8001584:	0028      	movs	r0, r5
 8001586:	40d0      	lsrs	r0, r2
 8001588:	0002      	movs	r2, r0
 800158a:	0008      	movs	r0, r1
 800158c:	301b      	adds	r0, #27
 800158e:	4085      	lsls	r5, r0
 8001590:	0028      	movs	r0, r5
 8001592:	1e45      	subs	r5, r0, #1
 8001594:	41a8      	sbcs	r0, r5
 8001596:	4302      	orrs	r2, r0
 8001598:	0015      	movs	r5, r2
 800159a:	e7de      	b.n	800155a <__aeabi_i2f+0x4a>
 800159c:	026d      	lsls	r5, r5, #9
 800159e:	2096      	movs	r0, #150	@ 0x96
 80015a0:	0a6d      	lsrs	r5, r5, #9
 80015a2:	e7cf      	b.n	8001544 <__aeabi_i2f+0x34>
 80015a4:	fbffffff 	.word	0xfbffffff

080015a8 <__aeabi_ui2f>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	1e04      	subs	r4, r0, #0
 80015ac:	d00e      	beq.n	80015cc <__aeabi_ui2f+0x24>
 80015ae:	f001 ffc5 	bl	800353c <__clzsi2>
 80015b2:	239e      	movs	r3, #158	@ 0x9e
 80015b4:	0001      	movs	r1, r0
 80015b6:	1a1b      	subs	r3, r3, r0
 80015b8:	2b96      	cmp	r3, #150	@ 0x96
 80015ba:	dc0c      	bgt.n	80015d6 <__aeabi_ui2f+0x2e>
 80015bc:	2808      	cmp	r0, #8
 80015be:	d02f      	beq.n	8001620 <__aeabi_ui2f+0x78>
 80015c0:	3908      	subs	r1, #8
 80015c2:	408c      	lsls	r4, r1
 80015c4:	0264      	lsls	r4, r4, #9
 80015c6:	0a64      	lsrs	r4, r4, #9
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	e001      	b.n	80015d0 <__aeabi_ui2f+0x28>
 80015cc:	2000      	movs	r0, #0
 80015ce:	2400      	movs	r4, #0
 80015d0:	05c0      	lsls	r0, r0, #23
 80015d2:	4320      	orrs	r0, r4
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	2b99      	cmp	r3, #153	@ 0x99
 80015d8:	dc16      	bgt.n	8001608 <__aeabi_ui2f+0x60>
 80015da:	1f42      	subs	r2, r0, #5
 80015dc:	2805      	cmp	r0, #5
 80015de:	d000      	beq.n	80015e2 <__aeabi_ui2f+0x3a>
 80015e0:	4094      	lsls	r4, r2
 80015e2:	0022      	movs	r2, r4
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <__aeabi_ui2f+0x80>)
 80015e6:	4002      	ands	r2, r0
 80015e8:	0765      	lsls	r5, r4, #29
 80015ea:	d009      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015ec:	250f      	movs	r5, #15
 80015ee:	402c      	ands	r4, r5
 80015f0:	2c04      	cmp	r4, #4
 80015f2:	d005      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015f4:	3204      	adds	r2, #4
 80015f6:	0154      	lsls	r4, r2, #5
 80015f8:	d502      	bpl.n	8001600 <__aeabi_ui2f+0x58>
 80015fa:	239f      	movs	r3, #159	@ 0x9f
 80015fc:	4002      	ands	r2, r0
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	0192      	lsls	r2, r2, #6
 8001602:	0a54      	lsrs	r4, r2, #9
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	e7e3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001608:	0002      	movs	r2, r0
 800160a:	0020      	movs	r0, r4
 800160c:	321b      	adds	r2, #27
 800160e:	4090      	lsls	r0, r2
 8001610:	0002      	movs	r2, r0
 8001612:	1e50      	subs	r0, r2, #1
 8001614:	4182      	sbcs	r2, r0
 8001616:	2005      	movs	r0, #5
 8001618:	1a40      	subs	r0, r0, r1
 800161a:	40c4      	lsrs	r4, r0
 800161c:	4314      	orrs	r4, r2
 800161e:	e7e0      	b.n	80015e2 <__aeabi_ui2f+0x3a>
 8001620:	0264      	lsls	r4, r4, #9
 8001622:	2096      	movs	r0, #150	@ 0x96
 8001624:	0a64      	lsrs	r4, r4, #9
 8001626:	e7d3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001628:	fbffffff 	.word	0xfbffffff

0800162c <__aeabi_dadd>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4657      	mov	r7, sl
 8001630:	464e      	mov	r6, r9
 8001632:	4645      	mov	r5, r8
 8001634:	46de      	mov	lr, fp
 8001636:	b5e0      	push	{r5, r6, r7, lr}
 8001638:	b083      	sub	sp, #12
 800163a:	9000      	str	r0, [sp, #0]
 800163c:	9101      	str	r1, [sp, #4]
 800163e:	030c      	lsls	r4, r1, #12
 8001640:	004f      	lsls	r7, r1, #1
 8001642:	0fce      	lsrs	r6, r1, #31
 8001644:	0a61      	lsrs	r1, r4, #9
 8001646:	9c00      	ldr	r4, [sp, #0]
 8001648:	031d      	lsls	r5, r3, #12
 800164a:	0f64      	lsrs	r4, r4, #29
 800164c:	430c      	orrs	r4, r1
 800164e:	9900      	ldr	r1, [sp, #0]
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	00c8      	lsls	r0, r1, #3
 8001656:	0059      	lsls	r1, r3, #1
 8001658:	0d4b      	lsrs	r3, r1, #21
 800165a:	4699      	mov	r9, r3
 800165c:	9a00      	ldr	r2, [sp, #0]
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	0fd9      	lsrs	r1, r3, #31
 8001664:	0f53      	lsrs	r3, r2, #29
 8001666:	432b      	orrs	r3, r5
 8001668:	469a      	mov	sl, r3
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	0d7f      	lsrs	r7, r7, #21
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4694      	mov	ip, r2
 8001672:	464a      	mov	r2, r9
 8001674:	46b0      	mov	r8, r6
 8001676:	1aba      	subs	r2, r7, r2
 8001678:	428e      	cmp	r6, r1
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x52>
 800167c:	e0b0      	b.n	80017e0 <__aeabi_dadd+0x1b4>
 800167e:	2a00      	cmp	r2, #0
 8001680:	dc00      	bgt.n	8001684 <__aeabi_dadd+0x58>
 8001682:	e078      	b.n	8001776 <__aeabi_dadd+0x14a>
 8001684:	4649      	mov	r1, r9
 8001686:	2900      	cmp	r1, #0
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x60>
 800168a:	e0e9      	b.n	8001860 <__aeabi_dadd+0x234>
 800168c:	49c9      	ldr	r1, [pc, #804]	@ (80019b4 <__aeabi_dadd+0x388>)
 800168e:	428f      	cmp	r7, r1
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x68>
 8001692:	e195      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001694:	2501      	movs	r5, #1
 8001696:	2a38      	cmp	r2, #56	@ 0x38
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_dadd+0x9c>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	4653      	mov	r3, sl
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	430b      	orrs	r3, r1
 80016a2:	469a      	mov	sl, r3
 80016a4:	2a1f      	cmp	r2, #31
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dadd+0x7e>
 80016a8:	e1e7      	b.n	8001a7a <__aeabi_dadd+0x44e>
 80016aa:	2120      	movs	r1, #32
 80016ac:	4655      	mov	r5, sl
 80016ae:	1a8b      	subs	r3, r1, r2
 80016b0:	4661      	mov	r1, ip
 80016b2:	409d      	lsls	r5, r3
 80016b4:	40d1      	lsrs	r1, r2
 80016b6:	430d      	orrs	r5, r1
 80016b8:	4661      	mov	r1, ip
 80016ba:	4099      	lsls	r1, r3
 80016bc:	1e4b      	subs	r3, r1, #1
 80016be:	4199      	sbcs	r1, r3
 80016c0:	4653      	mov	r3, sl
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	430d      	orrs	r5, r1
 80016c6:	1ae4      	subs	r4, r4, r3
 80016c8:	1b45      	subs	r5, r0, r5
 80016ca:	42a8      	cmp	r0, r5
 80016cc:	4180      	sbcs	r0, r0
 80016ce:	4240      	negs	r0, r0
 80016d0:	1a24      	subs	r4, r4, r0
 80016d2:	0223      	lsls	r3, r4, #8
 80016d4:	d400      	bmi.n	80016d8 <__aeabi_dadd+0xac>
 80016d6:	e10f      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 80016d8:	0264      	lsls	r4, r4, #9
 80016da:	0a64      	lsrs	r4, r4, #9
 80016dc:	2c00      	cmp	r4, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0xb6>
 80016e0:	e139      	b.n	8001956 <__aeabi_dadd+0x32a>
 80016e2:	0020      	movs	r0, r4
 80016e4:	f001 ff2a 	bl	800353c <__clzsi2>
 80016e8:	0003      	movs	r3, r0
 80016ea:	3b08      	subs	r3, #8
 80016ec:	2120      	movs	r1, #32
 80016ee:	0028      	movs	r0, r5
 80016f0:	1aca      	subs	r2, r1, r3
 80016f2:	40d0      	lsrs	r0, r2
 80016f4:	409c      	lsls	r4, r3
 80016f6:	0002      	movs	r2, r0
 80016f8:	409d      	lsls	r5, r3
 80016fa:	4322      	orrs	r2, r4
 80016fc:	429f      	cmp	r7, r3
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dadd+0xd6>
 8001700:	e173      	b.n	80019ea <__aeabi_dadd+0x3be>
 8001702:	1bd8      	subs	r0, r3, r7
 8001704:	3001      	adds	r0, #1
 8001706:	1a09      	subs	r1, r1, r0
 8001708:	002c      	movs	r4, r5
 800170a:	408d      	lsls	r5, r1
 800170c:	40c4      	lsrs	r4, r0
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	0013      	movs	r3, r2
 8001714:	40c2      	lsrs	r2, r0
 8001716:	408b      	lsls	r3, r1
 8001718:	4325      	orrs	r5, r4
 800171a:	2700      	movs	r7, #0
 800171c:	0014      	movs	r4, r2
 800171e:	431d      	orrs	r5, r3
 8001720:	076b      	lsls	r3, r5, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dadd+0x10c>
 8001724:	230f      	movs	r3, #15
 8001726:	402b      	ands	r3, r5
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dadd+0x10c>
 800172c:	1d2b      	adds	r3, r5, #4
 800172e:	42ab      	cmp	r3, r5
 8001730:	41ad      	sbcs	r5, r5
 8001732:	426d      	negs	r5, r5
 8001734:	1964      	adds	r4, r4, r5
 8001736:	001d      	movs	r5, r3
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d400      	bmi.n	800173e <__aeabi_dadd+0x112>
 800173c:	e12d      	b.n	800199a <__aeabi_dadd+0x36e>
 800173e:	4a9d      	ldr	r2, [pc, #628]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001740:	3701      	adds	r7, #1
 8001742:	4297      	cmp	r7, r2
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x11c>
 8001746:	e0d3      	b.n	80018f0 <__aeabi_dadd+0x2c4>
 8001748:	4646      	mov	r6, r8
 800174a:	499b      	ldr	r1, [pc, #620]	@ (80019b8 <__aeabi_dadd+0x38c>)
 800174c:	08ed      	lsrs	r5, r5, #3
 800174e:	4021      	ands	r1, r4
 8001750:	074a      	lsls	r2, r1, #29
 8001752:	432a      	orrs	r2, r5
 8001754:	057c      	lsls	r4, r7, #21
 8001756:	024d      	lsls	r5, r1, #9
 8001758:	0b2d      	lsrs	r5, r5, #12
 800175a:	0d64      	lsrs	r4, r4, #21
 800175c:	0524      	lsls	r4, r4, #20
 800175e:	432c      	orrs	r4, r5
 8001760:	07f6      	lsls	r6, r6, #31
 8001762:	4334      	orrs	r4, r6
 8001764:	0010      	movs	r0, r2
 8001766:	0021      	movs	r1, r4
 8001768:	b003      	add	sp, #12
 800176a:	bcf0      	pop	{r4, r5, r6, r7}
 800176c:	46bb      	mov	fp, r7
 800176e:	46b2      	mov	sl, r6
 8001770:	46a9      	mov	r9, r5
 8001772:	46a0      	mov	r8, r4
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	2a00      	cmp	r2, #0
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x150>
 800177a:	e084      	b.n	8001886 <__aeabi_dadd+0x25a>
 800177c:	464a      	mov	r2, r9
 800177e:	1bd2      	subs	r2, r2, r7
 8001780:	2f00      	cmp	r7, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x15a>
 8001784:	e16d      	b.n	8001a62 <__aeabi_dadd+0x436>
 8001786:	0025      	movs	r5, r4
 8001788:	4305      	orrs	r5, r0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x162>
 800178c:	e127      	b.n	80019de <__aeabi_dadd+0x3b2>
 800178e:	1e56      	subs	r6, r2, #1
 8001790:	2a01      	cmp	r2, #1
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x16a>
 8001794:	e23b      	b.n	8001c0e <__aeabi_dadd+0x5e2>
 8001796:	4d87      	ldr	r5, [pc, #540]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001798:	42aa      	cmp	r2, r5
 800179a:	d100      	bne.n	800179e <__aeabi_dadd+0x172>
 800179c:	e26a      	b.n	8001c74 <__aeabi_dadd+0x648>
 800179e:	2501      	movs	r5, #1
 80017a0:	2e38      	cmp	r6, #56	@ 0x38
 80017a2:	dc12      	bgt.n	80017ca <__aeabi_dadd+0x19e>
 80017a4:	0032      	movs	r2, r6
 80017a6:	2a1f      	cmp	r2, #31
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dadd+0x180>
 80017aa:	e1f8      	b.n	8001b9e <__aeabi_dadd+0x572>
 80017ac:	2620      	movs	r6, #32
 80017ae:	0025      	movs	r5, r4
 80017b0:	1ab6      	subs	r6, r6, r2
 80017b2:	0007      	movs	r7, r0
 80017b4:	4653      	mov	r3, sl
 80017b6:	40b0      	lsls	r0, r6
 80017b8:	40d4      	lsrs	r4, r2
 80017ba:	40b5      	lsls	r5, r6
 80017bc:	40d7      	lsrs	r7, r2
 80017be:	1e46      	subs	r6, r0, #1
 80017c0:	41b0      	sbcs	r0, r6
 80017c2:	1b1b      	subs	r3, r3, r4
 80017c4:	469a      	mov	sl, r3
 80017c6:	433d      	orrs	r5, r7
 80017c8:	4305      	orrs	r5, r0
 80017ca:	4662      	mov	r2, ip
 80017cc:	1b55      	subs	r5, r2, r5
 80017ce:	45ac      	cmp	ip, r5
 80017d0:	4192      	sbcs	r2, r2
 80017d2:	4653      	mov	r3, sl
 80017d4:	4252      	negs	r2, r2
 80017d6:	000e      	movs	r6, r1
 80017d8:	464f      	mov	r7, r9
 80017da:	4688      	mov	r8, r1
 80017dc:	1a9c      	subs	r4, r3, r2
 80017de:	e778      	b.n	80016d2 <__aeabi_dadd+0xa6>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dadd+0x1ba>
 80017e4:	e08e      	b.n	8001904 <__aeabi_dadd+0x2d8>
 80017e6:	4649      	mov	r1, r9
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d175      	bne.n	80018d8 <__aeabi_dadd+0x2ac>
 80017ec:	4661      	mov	r1, ip
 80017ee:	4653      	mov	r3, sl
 80017f0:	4319      	orrs	r1, r3
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x1ca>
 80017f4:	e0f6      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 80017f6:	1e51      	subs	r1, r2, #1
 80017f8:	2a01      	cmp	r2, #1
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x1d2>
 80017fc:	e191      	b.n	8001b22 <__aeabi_dadd+0x4f6>
 80017fe:	4d6d      	ldr	r5, [pc, #436]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001800:	42aa      	cmp	r2, r5
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x1da>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001806:	2501      	movs	r5, #1
 8001808:	2938      	cmp	r1, #56	@ 0x38
 800180a:	dc14      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 800180c:	000a      	movs	r2, r1
 800180e:	2a1f      	cmp	r2, #31
 8001810:	dd00      	ble.n	8001814 <__aeabi_dadd+0x1e8>
 8001812:	e1a2      	b.n	8001b5a <__aeabi_dadd+0x52e>
 8001814:	2120      	movs	r1, #32
 8001816:	4653      	mov	r3, sl
 8001818:	1a89      	subs	r1, r1, r2
 800181a:	408b      	lsls	r3, r1
 800181c:	001d      	movs	r5, r3
 800181e:	4663      	mov	r3, ip
 8001820:	40d3      	lsrs	r3, r2
 8001822:	431d      	orrs	r5, r3
 8001824:	4663      	mov	r3, ip
 8001826:	408b      	lsls	r3, r1
 8001828:	0019      	movs	r1, r3
 800182a:	1e4b      	subs	r3, r1, #1
 800182c:	4199      	sbcs	r1, r3
 800182e:	4653      	mov	r3, sl
 8001830:	40d3      	lsrs	r3, r2
 8001832:	430d      	orrs	r5, r1
 8001834:	18e4      	adds	r4, r4, r3
 8001836:	182d      	adds	r5, r5, r0
 8001838:	4285      	cmp	r5, r0
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1824      	adds	r4, r4, r0
 8001840:	0223      	lsls	r3, r4, #8
 8001842:	d559      	bpl.n	80018f8 <__aeabi_dadd+0x2cc>
 8001844:	4b5b      	ldr	r3, [pc, #364]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001846:	3701      	adds	r7, #1
 8001848:	429f      	cmp	r7, r3
 800184a:	d051      	beq.n	80018f0 <__aeabi_dadd+0x2c4>
 800184c:	2101      	movs	r1, #1
 800184e:	4b5a      	ldr	r3, [pc, #360]	@ (80019b8 <__aeabi_dadd+0x38c>)
 8001850:	086a      	lsrs	r2, r5, #1
 8001852:	401c      	ands	r4, r3
 8001854:	4029      	ands	r1, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	07e5      	lsls	r5, r4, #31
 800185a:	4315      	orrs	r5, r2
 800185c:	0864      	lsrs	r4, r4, #1
 800185e:	e75f      	b.n	8001720 <__aeabi_dadd+0xf4>
 8001860:	4661      	mov	r1, ip
 8001862:	4653      	mov	r3, sl
 8001864:	4319      	orrs	r1, r3
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x23e>
 8001868:	e0bc      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 800186a:	1e51      	subs	r1, r2, #1
 800186c:	2a01      	cmp	r2, #1
 800186e:	d100      	bne.n	8001872 <__aeabi_dadd+0x246>
 8001870:	e164      	b.n	8001b3c <__aeabi_dadd+0x510>
 8001872:	4d50      	ldr	r5, [pc, #320]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001874:	42aa      	cmp	r2, r5
 8001876:	d100      	bne.n	800187a <__aeabi_dadd+0x24e>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dadd+0x524>
 800187a:	2501      	movs	r5, #1
 800187c:	2938      	cmp	r1, #56	@ 0x38
 800187e:	dd00      	ble.n	8001882 <__aeabi_dadd+0x256>
 8001880:	e722      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001882:	000a      	movs	r2, r1
 8001884:	e70e      	b.n	80016a4 <__aeabi_dadd+0x78>
 8001886:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <__aeabi_dadd+0x390>)
 8001888:	1c7d      	adds	r5, r7, #1
 800188a:	4215      	tst	r5, r2
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x264>
 800188e:	e0d0      	b.n	8001a32 <__aeabi_dadd+0x406>
 8001890:	0025      	movs	r5, r4
 8001892:	4662      	mov	r2, ip
 8001894:	4653      	mov	r3, sl
 8001896:	4305      	orrs	r5, r0
 8001898:	431a      	orrs	r2, r3
 800189a:	2f00      	cmp	r7, #0
 800189c:	d000      	beq.n	80018a0 <__aeabi_dadd+0x274>
 800189e:	e137      	b.n	8001b10 <__aeabi_dadd+0x4e4>
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x27a>
 80018a4:	e1a8      	b.n	8001bf8 <__aeabi_dadd+0x5cc>
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x280>
 80018aa:	e16a      	b.n	8001b82 <__aeabi_dadd+0x556>
 80018ac:	4663      	mov	r3, ip
 80018ae:	1ac5      	subs	r5, r0, r3
 80018b0:	4653      	mov	r3, sl
 80018b2:	1ae2      	subs	r2, r4, r3
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	419b      	sbcs	r3, r3
 80018b8:	425b      	negs	r3, r3
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dadd+0x296>
 80018c0:	e203      	b.n	8001cca <__aeabi_dadd+0x69e>
 80018c2:	4663      	mov	r3, ip
 80018c4:	1a1d      	subs	r5, r3, r0
 80018c6:	45ac      	cmp	ip, r5
 80018c8:	4192      	sbcs	r2, r2
 80018ca:	4653      	mov	r3, sl
 80018cc:	4252      	negs	r2, r2
 80018ce:	1b1c      	subs	r4, r3, r4
 80018d0:	000e      	movs	r6, r1
 80018d2:	4688      	mov	r8, r1
 80018d4:	1aa4      	subs	r4, r4, r2
 80018d6:	e723      	b.n	8001720 <__aeabi_dadd+0xf4>
 80018d8:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <__aeabi_dadd+0x388>)
 80018da:	428f      	cmp	r7, r1
 80018dc:	d070      	beq.n	80019c0 <__aeabi_dadd+0x394>
 80018de:	2501      	movs	r5, #1
 80018e0:	2a38      	cmp	r2, #56	@ 0x38
 80018e2:	dca8      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	4653      	mov	r3, sl
 80018e8:	0409      	lsls	r1, r1, #16
 80018ea:	430b      	orrs	r3, r1
 80018ec:	469a      	mov	sl, r3
 80018ee:	e78e      	b.n	800180e <__aeabi_dadd+0x1e2>
 80018f0:	003c      	movs	r4, r7
 80018f2:	2500      	movs	r5, #0
 80018f4:	2200      	movs	r2, #0
 80018f6:	e731      	b.n	800175c <__aeabi_dadd+0x130>
 80018f8:	2307      	movs	r3, #7
 80018fa:	402b      	ands	r3, r5
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dadd+0x2d6>
 8001900:	e710      	b.n	8001724 <__aeabi_dadd+0xf8>
 8001902:	e093      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001904:	2a00      	cmp	r2, #0
 8001906:	d074      	beq.n	80019f2 <__aeabi_dadd+0x3c6>
 8001908:	464a      	mov	r2, r9
 800190a:	1bd2      	subs	r2, r2, r7
 800190c:	2f00      	cmp	r7, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x2e6>
 8001910:	e0c7      	b.n	8001aa2 <__aeabi_dadd+0x476>
 8001912:	4928      	ldr	r1, [pc, #160]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001914:	4589      	cmp	r9, r1
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x2ee>
 8001918:	e185      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 800191a:	2501      	movs	r5, #1
 800191c:	2a38      	cmp	r2, #56	@ 0x38
 800191e:	dc12      	bgt.n	8001946 <__aeabi_dadd+0x31a>
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	0409      	lsls	r1, r1, #16
 8001924:	430c      	orrs	r4, r1
 8001926:	2a1f      	cmp	r2, #31
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0x300>
 800192a:	e1ab      	b.n	8001c84 <__aeabi_dadd+0x658>
 800192c:	2120      	movs	r1, #32
 800192e:	0025      	movs	r5, r4
 8001930:	1a89      	subs	r1, r1, r2
 8001932:	0007      	movs	r7, r0
 8001934:	4088      	lsls	r0, r1
 8001936:	408d      	lsls	r5, r1
 8001938:	40d7      	lsrs	r7, r2
 800193a:	1e41      	subs	r1, r0, #1
 800193c:	4188      	sbcs	r0, r1
 800193e:	40d4      	lsrs	r4, r2
 8001940:	433d      	orrs	r5, r7
 8001942:	4305      	orrs	r5, r0
 8001944:	44a2      	add	sl, r4
 8001946:	4465      	add	r5, ip
 8001948:	4565      	cmp	r5, ip
 800194a:	4192      	sbcs	r2, r2
 800194c:	4252      	negs	r2, r2
 800194e:	4452      	add	r2, sl
 8001950:	0014      	movs	r4, r2
 8001952:	464f      	mov	r7, r9
 8001954:	e774      	b.n	8001840 <__aeabi_dadd+0x214>
 8001956:	0028      	movs	r0, r5
 8001958:	f001 fdf0 	bl	800353c <__clzsi2>
 800195c:	0003      	movs	r3, r0
 800195e:	3318      	adds	r3, #24
 8001960:	2b1f      	cmp	r3, #31
 8001962:	dc00      	bgt.n	8001966 <__aeabi_dadd+0x33a>
 8001964:	e6c2      	b.n	80016ec <__aeabi_dadd+0xc0>
 8001966:	002a      	movs	r2, r5
 8001968:	3808      	subs	r0, #8
 800196a:	4082      	lsls	r2, r0
 800196c:	429f      	cmp	r7, r3
 800196e:	dd00      	ble.n	8001972 <__aeabi_dadd+0x346>
 8001970:	e0a9      	b.n	8001ac6 <__aeabi_dadd+0x49a>
 8001972:	1bdb      	subs	r3, r3, r7
 8001974:	1c58      	adds	r0, r3, #1
 8001976:	281f      	cmp	r0, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_dadd+0x350>
 800197a:	e1ac      	b.n	8001cd6 <__aeabi_dadd+0x6aa>
 800197c:	0015      	movs	r5, r2
 800197e:	3b1f      	subs	r3, #31
 8001980:	40dd      	lsrs	r5, r3
 8001982:	2820      	cmp	r0, #32
 8001984:	d005      	beq.n	8001992 <__aeabi_dadd+0x366>
 8001986:	2340      	movs	r3, #64	@ 0x40
 8001988:	1a1b      	subs	r3, r3, r0
 800198a:	409a      	lsls	r2, r3
 800198c:	1e53      	subs	r3, r2, #1
 800198e:	419a      	sbcs	r2, r3
 8001990:	4315      	orrs	r5, r2
 8001992:	2307      	movs	r3, #7
 8001994:	2700      	movs	r7, #0
 8001996:	402b      	ands	r3, r5
 8001998:	e7b0      	b.n	80018fc <__aeabi_dadd+0x2d0>
 800199a:	08ed      	lsrs	r5, r5, #3
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <__aeabi_dadd+0x388>)
 800199e:	0762      	lsls	r2, r4, #29
 80019a0:	432a      	orrs	r2, r5
 80019a2:	08e4      	lsrs	r4, r4, #3
 80019a4:	429f      	cmp	r7, r3
 80019a6:	d00f      	beq.n	80019c8 <__aeabi_dadd+0x39c>
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	0b25      	lsrs	r5, r4, #12
 80019ac:	057c      	lsls	r4, r7, #21
 80019ae:	0d64      	lsrs	r4, r4, #21
 80019b0:	e6d4      	b.n	800175c <__aeabi_dadd+0x130>
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	ff7fffff 	.word	0xff7fffff
 80019bc:	000007fe 	.word	0x000007fe
 80019c0:	08c0      	lsrs	r0, r0, #3
 80019c2:	0762      	lsls	r2, r4, #29
 80019c4:	4302      	orrs	r2, r0
 80019c6:	08e4      	lsrs	r4, r4, #3
 80019c8:	0013      	movs	r3, r2
 80019ca:	4323      	orrs	r3, r4
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3a4>
 80019ce:	e186      	b.n	8001cde <__aeabi_dadd+0x6b2>
 80019d0:	2580      	movs	r5, #128	@ 0x80
 80019d2:	032d      	lsls	r5, r5, #12
 80019d4:	4325      	orrs	r5, r4
 80019d6:	032d      	lsls	r5, r5, #12
 80019d8:	4cc3      	ldr	r4, [pc, #780]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 80019da:	0b2d      	lsrs	r5, r5, #12
 80019dc:	e6be      	b.n	800175c <__aeabi_dadd+0x130>
 80019de:	4660      	mov	r0, ip
 80019e0:	4654      	mov	r4, sl
 80019e2:	000e      	movs	r6, r1
 80019e4:	0017      	movs	r7, r2
 80019e6:	08c5      	lsrs	r5, r0, #3
 80019e8:	e7d8      	b.n	800199c <__aeabi_dadd+0x370>
 80019ea:	4cc0      	ldr	r4, [pc, #768]	@ (8001cec <__aeabi_dadd+0x6c0>)
 80019ec:	1aff      	subs	r7, r7, r3
 80019ee:	4014      	ands	r4, r2
 80019f0:	e696      	b.n	8001720 <__aeabi_dadd+0xf4>
 80019f2:	4abf      	ldr	r2, [pc, #764]	@ (8001cf0 <__aeabi_dadd+0x6c4>)
 80019f4:	1c79      	adds	r1, r7, #1
 80019f6:	4211      	tst	r1, r2
 80019f8:	d16b      	bne.n	8001ad2 <__aeabi_dadd+0x4a6>
 80019fa:	0022      	movs	r2, r4
 80019fc:	4302      	orrs	r2, r0
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dadd+0x3d8>
 8001a02:	e0db      	b.n	8001bbc <__aeabi_dadd+0x590>
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x3de>
 8001a08:	e12d      	b.n	8001c66 <__aeabi_dadd+0x63a>
 8001a0a:	4662      	mov	r2, ip
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x3e8>
 8001a12:	e0b6      	b.n	8001b82 <__aeabi_dadd+0x556>
 8001a14:	4663      	mov	r3, ip
 8001a16:	18c5      	adds	r5, r0, r3
 8001a18:	4285      	cmp	r5, r0
 8001a1a:	4180      	sbcs	r0, r0
 8001a1c:	4454      	add	r4, sl
 8001a1e:	4240      	negs	r0, r0
 8001a20:	1824      	adds	r4, r4, r0
 8001a22:	0223      	lsls	r3, r4, #8
 8001a24:	d502      	bpl.n	8001a2c <__aeabi_dadd+0x400>
 8001a26:	000f      	movs	r7, r1
 8001a28:	4bb0      	ldr	r3, [pc, #704]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001a2a:	401c      	ands	r4, r3
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	0028      	movs	r0, r5
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001a32:	4662      	mov	r2, ip
 8001a34:	1a85      	subs	r5, r0, r2
 8001a36:	42a8      	cmp	r0, r5
 8001a38:	4192      	sbcs	r2, r2
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	4691      	mov	r9, r2
 8001a40:	1ae3      	subs	r3, r4, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	d454      	bmi.n	8001afa <__aeabi_dadd+0x4ce>
 8001a50:	464a      	mov	r2, r9
 8001a52:	464c      	mov	r4, r9
 8001a54:	432a      	orrs	r2, r5
 8001a56:	d000      	beq.n	8001a5a <__aeabi_dadd+0x42e>
 8001a58:	e640      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2500      	movs	r5, #0
 8001a60:	e67c      	b.n	800175c <__aeabi_dadd+0x130>
 8001a62:	4da1      	ldr	r5, [pc, #644]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001a64:	45a9      	cmp	r9, r5
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x43e>
 8001a68:	e090      	b.n	8001b8c <__aeabi_dadd+0x560>
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	2a38      	cmp	r2, #56	@ 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dadd+0x446>
 8001a70:	e6ab      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001a72:	2580      	movs	r5, #128	@ 0x80
 8001a74:	042d      	lsls	r5, r5, #16
 8001a76:	432c      	orrs	r4, r5
 8001a78:	e695      	b.n	80017a6 <__aeabi_dadd+0x17a>
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	4655      	mov	r5, sl
 8001a7e:	3920      	subs	r1, #32
 8001a80:	40cd      	lsrs	r5, r1
 8001a82:	46a9      	mov	r9, r5
 8001a84:	2a20      	cmp	r2, #32
 8001a86:	d006      	beq.n	8001a96 <__aeabi_dadd+0x46a>
 8001a88:	2140      	movs	r1, #64	@ 0x40
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	1a8a      	subs	r2, r1, r2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	4662      	mov	r2, ip
 8001a92:	431a      	orrs	r2, r3
 8001a94:	4694      	mov	ip, r2
 8001a96:	4665      	mov	r5, ip
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	419d      	sbcs	r5, r3
 8001a9c:	464b      	mov	r3, r9
 8001a9e:	431d      	orrs	r5, r3
 8001aa0:	e612      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x47e>
 8001aa8:	e0c4      	b.n	8001c34 <__aeabi_dadd+0x608>
 8001aaa:	1e51      	subs	r1, r2, #1
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x486>
 8001ab0:	e0fb      	b.n	8001caa <__aeabi_dadd+0x67e>
 8001ab2:	4d8d      	ldr	r5, [pc, #564]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ab4:	42aa      	cmp	r2, r5
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dadd+0x48e>
 8001ab8:	e0b5      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 8001aba:	2501      	movs	r5, #1
 8001abc:	2938      	cmp	r1, #56	@ 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dadd+0x496>
 8001ac0:	e741      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	e72f      	b.n	8001926 <__aeabi_dadd+0x2fa>
 8001ac6:	4c89      	ldr	r4, [pc, #548]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001ac8:	1aff      	subs	r7, r7, r3
 8001aca:	4014      	ands	r4, r2
 8001acc:	0762      	lsls	r2, r4, #29
 8001ace:	08e4      	lsrs	r4, r4, #3
 8001ad0:	e76a      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001ad2:	4a85      	ldr	r2, [pc, #532]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ad4:	4291      	cmp	r1, r2
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dadd+0x4ae>
 8001ad8:	e0e3      	b.n	8001ca2 <__aeabi_dadd+0x676>
 8001ada:	4663      	mov	r3, ip
 8001adc:	18c2      	adds	r2, r0, r3
 8001ade:	4282      	cmp	r2, r0
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	0023      	movs	r3, r4
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	4453      	add	r3, sl
 8001ae8:	181b      	adds	r3, r3, r0
 8001aea:	07dd      	lsls	r5, r3, #31
 8001aec:	085c      	lsrs	r4, r3, #1
 8001aee:	2307      	movs	r3, #7
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	4315      	orrs	r5, r2
 8001af4:	000f      	movs	r7, r1
 8001af6:	402b      	ands	r3, r5
 8001af8:	e700      	b.n	80018fc <__aeabi_dadd+0x2d0>
 8001afa:	4663      	mov	r3, ip
 8001afc:	1a1d      	subs	r5, r3, r0
 8001afe:	45ac      	cmp	ip, r5
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	4653      	mov	r3, sl
 8001b04:	4252      	negs	r2, r2
 8001b06:	1b1c      	subs	r4, r3, r4
 8001b08:	000e      	movs	r6, r1
 8001b0a:	4688      	mov	r8, r1
 8001b0c:	1aa4      	subs	r4, r4, r2
 8001b0e:	e5e5      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001b10:	2d00      	cmp	r5, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dadd+0x4ea>
 8001b14:	e091      	b.n	8001c3a <__aeabi_dadd+0x60e>
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d138      	bne.n	8001b8c <__aeabi_dadd+0x560>
 8001b1a:	2480      	movs	r4, #128	@ 0x80
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	e756      	b.n	80019d0 <__aeabi_dadd+0x3a4>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c5      	adds	r5, r0, r3
 8001b26:	4285      	cmp	r5, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4454      	add	r4, sl
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	1824      	adds	r4, r4, r0
 8001b30:	2701      	movs	r7, #1
 8001b32:	0223      	lsls	r3, r4, #8
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dadd+0x50c>
 8001b36:	e6df      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 8001b38:	2702      	movs	r7, #2
 8001b3a:	e687      	b.n	800184c <__aeabi_dadd+0x220>
 8001b3c:	4663      	mov	r3, ip
 8001b3e:	1ac5      	subs	r5, r0, r3
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	4653      	mov	r3, sl
 8001b46:	4240      	negs	r0, r0
 8001b48:	1ae4      	subs	r4, r4, r3
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	1a24      	subs	r4, r4, r0
 8001b4e:	e5c0      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001b50:	0762      	lsls	r2, r4, #29
 8001b52:	08c0      	lsrs	r0, r0, #3
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08e4      	lsrs	r4, r4, #3
 8001b58:	e736      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	4653      	mov	r3, sl
 8001b5e:	3920      	subs	r1, #32
 8001b60:	40cb      	lsrs	r3, r1
 8001b62:	4699      	mov	r9, r3
 8001b64:	2a20      	cmp	r2, #32
 8001b66:	d006      	beq.n	8001b76 <__aeabi_dadd+0x54a>
 8001b68:	2140      	movs	r1, #64	@ 0x40
 8001b6a:	4653      	mov	r3, sl
 8001b6c:	1a8a      	subs	r2, r1, r2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	4662      	mov	r2, ip
 8001b72:	431a      	orrs	r2, r3
 8001b74:	4694      	mov	ip, r2
 8001b76:	4665      	mov	r5, ip
 8001b78:	1e6b      	subs	r3, r5, #1
 8001b7a:	419d      	sbcs	r5, r3
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	431d      	orrs	r5, r3
 8001b80:	e659      	b.n	8001836 <__aeabi_dadd+0x20a>
 8001b82:	0762      	lsls	r2, r4, #29
 8001b84:	08c0      	lsrs	r0, r0, #3
 8001b86:	4302      	orrs	r2, r0
 8001b88:	08e4      	lsrs	r4, r4, #3
 8001b8a:	e70d      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	075a      	lsls	r2, r3, #29
 8001b90:	4663      	mov	r3, ip
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	4653      	mov	r3, sl
 8001b96:	000e      	movs	r6, r1
 8001b98:	4302      	orrs	r2, r0
 8001b9a:	08dc      	lsrs	r4, r3, #3
 8001b9c:	e714      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	0026      	movs	r6, r4
 8001ba2:	3d20      	subs	r5, #32
 8001ba4:	40ee      	lsrs	r6, r5
 8001ba6:	2a20      	cmp	r2, #32
 8001ba8:	d003      	beq.n	8001bb2 <__aeabi_dadd+0x586>
 8001baa:	2540      	movs	r5, #64	@ 0x40
 8001bac:	1aaa      	subs	r2, r5, r2
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4320      	orrs	r0, r4
 8001bb2:	1e42      	subs	r2, r0, #1
 8001bb4:	4190      	sbcs	r0, r2
 8001bb6:	0005      	movs	r5, r0
 8001bb8:	4335      	orrs	r5, r6
 8001bba:	e606      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d07c      	beq.n	8001cba <__aeabi_dadd+0x68e>
 8001bc0:	4662      	mov	r2, ip
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dadd+0x5a0>
 8001bca:	e6fa      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001bcc:	0762      	lsls	r2, r4, #29
 8001bce:	4310      	orrs	r0, r2
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	08e4      	lsrs	r4, r4, #3
 8001bd4:	0312      	lsls	r2, r2, #12
 8001bd6:	4214      	tst	r4, r2
 8001bd8:	d008      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001bda:	08d9      	lsrs	r1, r3, #3
 8001bdc:	4211      	tst	r1, r2
 8001bde:	d105      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001be0:	4663      	mov	r3, ip
 8001be2:	08d8      	lsrs	r0, r3, #3
 8001be4:	4653      	mov	r3, sl
 8001be6:	000c      	movs	r4, r1
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	4318      	orrs	r0, r3
 8001bec:	0f42      	lsrs	r2, r0, #29
 8001bee:	00c0      	lsls	r0, r0, #3
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	e6e7      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x5d2>
 8001bfc:	e72d      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001bfe:	4663      	mov	r3, ip
 8001c00:	08d8      	lsrs	r0, r3, #3
 8001c02:	4653      	mov	r3, sl
 8001c04:	075a      	lsls	r2, r3, #29
 8001c06:	000e      	movs	r6, r1
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	08dc      	lsrs	r4, r3, #3
 8001c0c:	e6cc      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c0e:	4663      	mov	r3, ip
 8001c10:	1a1d      	subs	r5, r3, r0
 8001c12:	45ac      	cmp	ip, r5
 8001c14:	4192      	sbcs	r2, r2
 8001c16:	4653      	mov	r3, sl
 8001c18:	4252      	negs	r2, r2
 8001c1a:	1b1c      	subs	r4, r3, r4
 8001c1c:	000e      	movs	r6, r1
 8001c1e:	4688      	mov	r8, r1
 8001c20:	1aa4      	subs	r4, r4, r2
 8001c22:	3701      	adds	r7, #1
 8001c24:	e555      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001c26:	4663      	mov	r3, ip
 8001c28:	08d9      	lsrs	r1, r3, #3
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	075a      	lsls	r2, r3, #29
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	08dc      	lsrs	r4, r3, #3
 8001c32:	e6c9      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c34:	4660      	mov	r0, ip
 8001c36:	4654      	mov	r4, sl
 8001c38:	e6d4      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001c3a:	08c0      	lsrs	r0, r0, #3
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dadd+0x616>
 8001c40:	e6bf      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	4310      	orrs	r0, r2
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	0312      	lsls	r2, r2, #12
 8001c4c:	4214      	tst	r4, r2
 8001c4e:	d0cd      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001c50:	08dd      	lsrs	r5, r3, #3
 8001c52:	4215      	tst	r5, r2
 8001c54:	d1ca      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001c56:	4663      	mov	r3, ip
 8001c58:	08d8      	lsrs	r0, r3, #3
 8001c5a:	4653      	mov	r3, sl
 8001c5c:	075b      	lsls	r3, r3, #29
 8001c5e:	000e      	movs	r6, r1
 8001c60:	002c      	movs	r4, r5
 8001c62:	4318      	orrs	r0, r3
 8001c64:	e7c2      	b.n	8001bec <__aeabi_dadd+0x5c0>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e699      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c74:	4663      	mov	r3, ip
 8001c76:	08d8      	lsrs	r0, r3, #3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	075a      	lsls	r2, r3, #29
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	08dc      	lsrs	r4, r3, #3
 8001c82:	e6a1      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c84:	0011      	movs	r1, r2
 8001c86:	0027      	movs	r7, r4
 8001c88:	3920      	subs	r1, #32
 8001c8a:	40cf      	lsrs	r7, r1
 8001c8c:	2a20      	cmp	r2, #32
 8001c8e:	d003      	beq.n	8001c98 <__aeabi_dadd+0x66c>
 8001c90:	2140      	movs	r1, #64	@ 0x40
 8001c92:	1a8a      	subs	r2, r1, r2
 8001c94:	4094      	lsls	r4, r2
 8001c96:	4320      	orrs	r0, r4
 8001c98:	1e42      	subs	r2, r0, #1
 8001c9a:	4190      	sbcs	r0, r2
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	433d      	orrs	r5, r7
 8001ca0:	e651      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ca2:	000c      	movs	r4, r1
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	e558      	b.n	800175c <__aeabi_dadd+0x130>
 8001caa:	4460      	add	r0, ip
 8001cac:	4560      	cmp	r0, ip
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	4454      	add	r4, sl
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	18a4      	adds	r4, r4, r2
 8001cb8:	e73a      	b.n	8001b30 <__aeabi_dadd+0x504>
 8001cba:	4653      	mov	r3, sl
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08dc      	lsrs	r4, r3, #3
 8001cc8:	e67e      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001cca:	001a      	movs	r2, r3
 8001ccc:	001c      	movs	r4, r3
 8001cce:	432a      	orrs	r2, r5
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dadd+0x6a8>
 8001cd2:	e6ab      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001cd4:	e6c1      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	2500      	movs	r5, #0
 8001cda:	1a09      	subs	r1, r1, r0
 8001cdc:	e519      	b.n	8001712 <__aeabi_dadd+0xe6>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	4c01      	ldr	r4, [pc, #4]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ce4:	e53a      	b.n	800175c <__aeabi_dadd+0x130>
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	ff7fffff 	.word	0xff7fffff
 8001cf0:	000007fe 	.word	0x000007fe

08001cf4 <__aeabi_ddiv>:
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	46de      	mov	lr, fp
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	b087      	sub	sp, #28
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	030b      	lsls	r3, r1, #12
 8001d08:	0b1b      	lsrs	r3, r3, #12
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	0fca      	lsrs	r2, r1, #31
 8001d0e:	004b      	lsls	r3, r1, #1
 8001d10:	0004      	movs	r4, r0
 8001d12:	4680      	mov	r8, r0
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x28>
 8001d1a:	e16a      	b.n	8001ff2 <__aeabi_ddiv+0x2fe>
 8001d1c:	4ad4      	ldr	r2, [pc, #848]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x30>
 8001d22:	e18c      	b.n	800203e <__aeabi_ddiv+0x34a>
 8001d24:	4659      	mov	r1, fp
 8001d26:	0f42      	lsrs	r2, r0, #29
 8001d28:	00c9      	lsls	r1, r1, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0409      	lsls	r1, r1, #16
 8001d30:	4311      	orrs	r1, r2
 8001d32:	00c2      	lsls	r2, r0, #3
 8001d34:	4690      	mov	r8, r2
 8001d36:	4acf      	ldr	r2, [pc, #828]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d38:	4689      	mov	r9, r1
 8001d3a:	4692      	mov	sl, r2
 8001d3c:	449a      	add	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2400      	movs	r4, #0
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	9e00      	ldr	r6, [sp, #0]
 8001d46:	9f01      	ldr	r7, [sp, #4]
 8001d48:	033b      	lsls	r3, r7, #12
 8001d4a:	0b1b      	lsrs	r3, r3, #12
 8001d4c:	469b      	mov	fp, r3
 8001d4e:	007b      	lsls	r3, r7, #1
 8001d50:	0030      	movs	r0, r6
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	0ffd      	lsrs	r5, r7, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x68>
 8001d5a:	e128      	b.n	8001fae <__aeabi_ddiv+0x2ba>
 8001d5c:	4ac4      	ldr	r2, [pc, #784]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x70>
 8001d62:	e177      	b.n	8002054 <__aeabi_ddiv+0x360>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f72      	lsrs	r2, r6, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	468b      	mov	fp, r1
 8001d74:	49bf      	ldr	r1, [pc, #764]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d76:	00f2      	lsls	r2, r6, #3
 8001d78:	468c      	mov	ip, r1
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	4463      	add	r3, ip
 8001d7e:	1acb      	subs	r3, r1, r3
 8001d80:	469a      	mov	sl, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	9e02      	ldr	r6, [sp, #8]
 8001d86:	406e      	eors	r6, r5
 8001d88:	2c0f      	cmp	r4, #15
 8001d8a:	d827      	bhi.n	8001ddc <__aeabi_ddiv+0xe8>
 8001d8c:	49ba      	ldr	r1, [pc, #744]	@ (8002078 <__aeabi_ddiv+0x384>)
 8001d8e:	00a4      	lsls	r4, r4, #2
 8001d90:	5909      	ldr	r1, [r1, r4]
 8001d92:	468f      	mov	pc, r1
 8001d94:	46cb      	mov	fp, r9
 8001d96:	4642      	mov	r2, r8
 8001d98:	9e02      	ldr	r6, [sp, #8]
 8001d9a:	9b03      	ldr	r3, [sp, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d016      	beq.n	8001dce <__aeabi_ddiv+0xda>
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0xb2>
 8001da4:	e2a6      	b.n	80022f4 <__aeabi_ddiv+0x600>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d000      	beq.n	8001dac <__aeabi_ddiv+0xb8>
 8001daa:	e0df      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8001dac:	2200      	movs	r2, #0
 8001dae:	2300      	movs	r3, #0
 8001db0:	2400      	movs	r4, #0
 8001db2:	4690      	mov	r8, r2
 8001db4:	051b      	lsls	r3, r3, #20
 8001db6:	4323      	orrs	r3, r4
 8001db8:	07f6      	lsls	r6, r6, #31
 8001dba:	4333      	orrs	r3, r6
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	b007      	add	sp, #28
 8001dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc4:	46bb      	mov	fp, r7
 8001dc6:	46b2      	mov	sl, r6
 8001dc8:	46a9      	mov	r9, r5
 8001dca:	46a0      	mov	r8, r4
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001dd6:	e7ed      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001dd8:	002e      	movs	r6, r5
 8001dda:	e7df      	b.n	8001d9c <__aeabi_ddiv+0xa8>
 8001ddc:	45cb      	cmp	fp, r9
 8001dde:	d200      	bcs.n	8001de2 <__aeabi_ddiv+0xee>
 8001de0:	e1d4      	b.n	800218c <__aeabi_ddiv+0x498>
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xf2>
 8001de4:	e1cf      	b.n	8002186 <__aeabi_ddiv+0x492>
 8001de6:	2301      	movs	r3, #1
 8001de8:	425b      	negs	r3, r3
 8001dea:	469c      	mov	ip, r3
 8001dec:	4644      	mov	r4, r8
 8001dee:	4648      	mov	r0, r9
 8001df0:	2700      	movs	r7, #0
 8001df2:	44e2      	add	sl, ip
 8001df4:	465b      	mov	r3, fp
 8001df6:	0e15      	lsrs	r5, r2, #24
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	431d      	orrs	r5, r3
 8001dfc:	0c19      	lsrs	r1, r3, #16
 8001dfe:	042b      	lsls	r3, r5, #16
 8001e00:	0212      	lsls	r2, r2, #8
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	0c1d      	lsrs	r5, r3, #16
 8001e06:	4691      	mov	r9, r2
 8001e08:	9102      	str	r1, [sp, #8]
 8001e0a:	9503      	str	r5, [sp, #12]
 8001e0c:	f7fe fa1e 	bl	800024c <__aeabi_uidivmod>
 8001e10:	0002      	movs	r2, r0
 8001e12:	436a      	muls	r2, r5
 8001e14:	040b      	lsls	r3, r1, #16
 8001e16:	0c21      	lsrs	r1, r4, #16
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4319      	orrs	r1, r3
 8001e1c:	428a      	cmp	r2, r1
 8001e1e:	d909      	bls.n	8001e34 <__aeabi_ddiv+0x140>
 8001e20:	9d00      	ldr	r5, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	46ac      	mov	ip, r5
 8001e26:	425b      	negs	r3, r3
 8001e28:	4461      	add	r1, ip
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	44e0      	add	r8, ip
 8001e2e:	428d      	cmp	r5, r1
 8001e30:	d800      	bhi.n	8001e34 <__aeabi_ddiv+0x140>
 8001e32:	e1fb      	b.n	800222c <__aeabi_ddiv+0x538>
 8001e34:	1a88      	subs	r0, r1, r2
 8001e36:	9902      	ldr	r1, [sp, #8]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	9a03      	ldr	r2, [sp, #12]
 8001e3e:	0424      	lsls	r4, r4, #16
 8001e40:	4342      	muls	r2, r0
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	0c24      	lsrs	r4, r4, #16
 8001e46:	0003      	movs	r3, r0
 8001e48:	430c      	orrs	r4, r1
 8001e4a:	42a2      	cmp	r2, r4
 8001e4c:	d906      	bls.n	8001e5c <__aeabi_ddiv+0x168>
 8001e4e:	9900      	ldr	r1, [sp, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	468c      	mov	ip, r1
 8001e54:	4464      	add	r4, ip
 8001e56:	42a1      	cmp	r1, r4
 8001e58:	d800      	bhi.n	8001e5c <__aeabi_ddiv+0x168>
 8001e5a:	e1e1      	b.n	8002220 <__aeabi_ddiv+0x52c>
 8001e5c:	1aa0      	subs	r0, r4, r2
 8001e5e:	4642      	mov	r2, r8
 8001e60:	0412      	lsls	r2, r2, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4693      	mov	fp, r2
 8001e66:	464b      	mov	r3, r9
 8001e68:	4659      	mov	r1, fp
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	001d      	movs	r5, r3
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	040b      	lsls	r3, r1, #16
 8001e72:	4649      	mov	r1, r9
 8001e74:	0409      	lsls	r1, r1, #16
 8001e76:	0c09      	lsrs	r1, r1, #16
 8001e78:	000c      	movs	r4, r1
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	435c      	muls	r4, r3
 8001e7e:	0c12      	lsrs	r2, r2, #16
 8001e80:	436b      	muls	r3, r5
 8001e82:	4688      	mov	r8, r1
 8001e84:	4351      	muls	r1, r2
 8001e86:	436a      	muls	r2, r5
 8001e88:	0c25      	lsrs	r5, r4, #16
 8001e8a:	46ac      	mov	ip, r5
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	4463      	add	r3, ip
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d903      	bls.n	8001e9c <__aeabi_ddiv+0x1a8>
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4462      	add	r2, ip
 8001e9c:	0c19      	lsrs	r1, r3, #16
 8001e9e:	0424      	lsls	r4, r4, #16
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	0c24      	lsrs	r4, r4, #16
 8001ea4:	188a      	adds	r2, r1, r2
 8001ea6:	191c      	adds	r4, r3, r4
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	d302      	bcc.n	8001eb2 <__aeabi_ddiv+0x1be>
 8001eac:	d116      	bne.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eae:	42a7      	cmp	r7, r4
 8001eb0:	d214      	bcs.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	9d00      	ldr	r5, [sp, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	444f      	add	r7, r9
 8001eba:	9305      	str	r3, [sp, #20]
 8001ebc:	454f      	cmp	r7, r9
 8001ebe:	419b      	sbcs	r3, r3
 8001ec0:	46ac      	mov	ip, r5
 8001ec2:	425b      	negs	r3, r3
 8001ec4:	4463      	add	r3, ip
 8001ec6:	18c0      	adds	r0, r0, r3
 8001ec8:	4285      	cmp	r5, r0
 8001eca:	d300      	bcc.n	8001ece <__aeabi_ddiv+0x1da>
 8001ecc:	e1a1      	b.n	8002212 <__aeabi_ddiv+0x51e>
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	d900      	bls.n	8001ed4 <__aeabi_ddiv+0x1e0>
 8001ed2:	e1f6      	b.n	80022c2 <__aeabi_ddiv+0x5ce>
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8001ed6:	e1f1      	b.n	80022bc <__aeabi_ddiv+0x5c8>
 8001ed8:	9b05      	ldr	r3, [sp, #20]
 8001eda:	469b      	mov	fp, r3
 8001edc:	1b3c      	subs	r4, r7, r4
 8001ede:	42a7      	cmp	r7, r4
 8001ee0:	41bf      	sbcs	r7, r7
 8001ee2:	9d00      	ldr	r5, [sp, #0]
 8001ee4:	1a80      	subs	r0, r0, r2
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	4285      	cmp	r5, r0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_ddiv+0x1fc>
 8001eee:	e1d0      	b.n	8002292 <__aeabi_ddiv+0x59e>
 8001ef0:	9902      	ldr	r1, [sp, #8]
 8001ef2:	f7fe f9ab 	bl	800024c <__aeabi_uidivmod>
 8001ef6:	9a03      	ldr	r2, [sp, #12]
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	4342      	muls	r2, r0
 8001efc:	0c21      	lsrs	r1, r4, #16
 8001efe:	0007      	movs	r7, r0
 8001f00:	4319      	orrs	r1, r3
 8001f02:	428a      	cmp	r2, r1
 8001f04:	d900      	bls.n	8001f08 <__aeabi_ddiv+0x214>
 8001f06:	e178      	b.n	80021fa <__aeabi_ddiv+0x506>
 8001f08:	1a88      	subs	r0, r1, r2
 8001f0a:	9902      	ldr	r1, [sp, #8]
 8001f0c:	f7fe f99e 	bl	800024c <__aeabi_uidivmod>
 8001f10:	9a03      	ldr	r2, [sp, #12]
 8001f12:	0424      	lsls	r4, r4, #16
 8001f14:	4342      	muls	r2, r0
 8001f16:	0409      	lsls	r1, r1, #16
 8001f18:	0c24      	lsrs	r4, r4, #16
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	430c      	orrs	r4, r1
 8001f1e:	42a2      	cmp	r2, r4
 8001f20:	d900      	bls.n	8001f24 <__aeabi_ddiv+0x230>
 8001f22:	e15d      	b.n	80021e0 <__aeabi_ddiv+0x4ec>
 8001f24:	4641      	mov	r1, r8
 8001f26:	1aa4      	subs	r4, r4, r2
 8001f28:	043a      	lsls	r2, r7, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	9d04      	ldr	r5, [sp, #16]
 8001f2e:	0413      	lsls	r3, r2, #16
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	4359      	muls	r1, r3
 8001f34:	4647      	mov	r7, r8
 8001f36:	436b      	muls	r3, r5
 8001f38:	469c      	mov	ip, r3
 8001f3a:	0c10      	lsrs	r0, r2, #16
 8001f3c:	4347      	muls	r7, r0
 8001f3e:	0c0b      	lsrs	r3, r1, #16
 8001f40:	44bc      	add	ip, r7
 8001f42:	4463      	add	r3, ip
 8001f44:	4368      	muls	r0, r5
 8001f46:	429f      	cmp	r7, r3
 8001f48:	d903      	bls.n	8001f52 <__aeabi_ddiv+0x25e>
 8001f4a:	2580      	movs	r5, #128	@ 0x80
 8001f4c:	026d      	lsls	r5, r5, #9
 8001f4e:	46ac      	mov	ip, r5
 8001f50:	4460      	add	r0, ip
 8001f52:	0c1f      	lsrs	r7, r3, #16
 8001f54:	0409      	lsls	r1, r1, #16
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	0c09      	lsrs	r1, r1, #16
 8001f5a:	183f      	adds	r7, r7, r0
 8001f5c:	185b      	adds	r3, r3, r1
 8001f5e:	42bc      	cmp	r4, r7
 8001f60:	d200      	bcs.n	8001f64 <__aeabi_ddiv+0x270>
 8001f62:	e102      	b.n	800216a <__aeabi_ddiv+0x476>
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x274>
 8001f66:	e0fd      	b.n	8002164 <__aeabi_ddiv+0x470>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	4b43      	ldr	r3, [pc, #268]	@ (800207c <__aeabi_ddiv+0x388>)
 8001f6e:	4453      	add	r3, sl
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dc00      	bgt.n	8001f76 <__aeabi_ddiv+0x282>
 8001f74:	e0ae      	b.n	80020d4 <__aeabi_ddiv+0x3e0>
 8001f76:	0751      	lsls	r1, r2, #29
 8001f78:	d000      	beq.n	8001f7c <__aeabi_ddiv+0x288>
 8001f7a:	e198      	b.n	80022ae <__aeabi_ddiv+0x5ba>
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	01c9      	lsls	r1, r1, #7
 8001f80:	d506      	bpl.n	8001f90 <__aeabi_ddiv+0x29c>
 8001f82:	4659      	mov	r1, fp
 8001f84:	4b3e      	ldr	r3, [pc, #248]	@ (8002080 <__aeabi_ddiv+0x38c>)
 8001f86:	4019      	ands	r1, r3
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	468b      	mov	fp, r1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4453      	add	r3, sl
 8001f90:	493c      	ldr	r1, [pc, #240]	@ (8002084 <__aeabi_ddiv+0x390>)
 8001f92:	428b      	cmp	r3, r1
 8001f94:	dd00      	ble.n	8001f98 <__aeabi_ddiv+0x2a4>
 8001f96:	e71a      	b.n	8001dce <__aeabi_ddiv+0xda>
 8001f98:	4659      	mov	r1, fp
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	0749      	lsls	r1, r1, #29
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	465a      	mov	r2, fp
 8001fa2:	055b      	lsls	r3, r3, #21
 8001fa4:	0254      	lsls	r4, r2, #9
 8001fa6:	4688      	mov	r8, r1
 8001fa8:	0b24      	lsrs	r4, r4, #12
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	e702      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001fae:	465a      	mov	r2, fp
 8001fb0:	9b00      	ldr	r3, [sp, #0]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_ddiv+0x2c4>
 8001fb6:	e07e      	b.n	80020b6 <__aeabi_ddiv+0x3c2>
 8001fb8:	465b      	mov	r3, fp
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_ddiv+0x2cc>
 8001fbe:	e100      	b.n	80021c2 <__aeabi_ddiv+0x4ce>
 8001fc0:	4658      	mov	r0, fp
 8001fc2:	f001 fabb 	bl	800353c <__clzsi2>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3a0b      	subs	r2, #11
 8001fcc:	271d      	movs	r7, #29
 8001fce:	9e00      	ldr	r6, [sp, #0]
 8001fd0:	1aba      	subs	r2, r7, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	4658      	mov	r0, fp
 8001fd6:	40d6      	lsrs	r6, r2
 8001fd8:	3908      	subs	r1, #8
 8001fda:	4088      	lsls	r0, r1
 8001fdc:	0032      	movs	r2, r6
 8001fde:	4302      	orrs	r2, r0
 8001fe0:	4693      	mov	fp, r2
 8001fe2:	9a00      	ldr	r2, [sp, #0]
 8001fe4:	408a      	lsls	r2, r1
 8001fe6:	4928      	ldr	r1, [pc, #160]	@ (8002088 <__aeabi_ddiv+0x394>)
 8001fe8:	4453      	add	r3, sl
 8001fea:	468a      	mov	sl, r1
 8001fec:	449a      	add	sl, r3
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e6c8      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8001ff2:	465b      	mov	r3, fp
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	d056      	beq.n	80020a8 <__aeabi_ddiv+0x3b4>
 8001ffa:	465b      	mov	r3, fp
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x30e>
 8002000:	e0cd      	b.n	800219e <__aeabi_ddiv+0x4aa>
 8002002:	4658      	mov	r0, fp
 8002004:	f001 fa9a 	bl	800353c <__clzsi2>
 8002008:	230b      	movs	r3, #11
 800200a:	425b      	negs	r3, r3
 800200c:	469c      	mov	ip, r3
 800200e:	0002      	movs	r2, r0
 8002010:	4484      	add	ip, r0
 8002012:	4666      	mov	r6, ip
 8002014:	231d      	movs	r3, #29
 8002016:	1b9b      	subs	r3, r3, r6
 8002018:	0026      	movs	r6, r4
 800201a:	0011      	movs	r1, r2
 800201c:	4658      	mov	r0, fp
 800201e:	40de      	lsrs	r6, r3
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0033      	movs	r3, r6
 8002026:	4303      	orrs	r3, r0
 8002028:	4699      	mov	r9, r3
 800202a:	0023      	movs	r3, r4
 800202c:	408b      	lsls	r3, r1
 800202e:	4698      	mov	r8, r3
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <__aeabi_ddiv+0x398>)
 8002032:	2400      	movs	r4, #0
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	469a      	mov	sl, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	e682      	b.n	8001d44 <__aeabi_ddiv+0x50>
 800203e:	465a      	mov	r2, fp
 8002040:	4302      	orrs	r2, r0
 8002042:	4691      	mov	r9, r2
 8002044:	d12a      	bne.n	800209c <__aeabi_ddiv+0x3a8>
 8002046:	2200      	movs	r2, #0
 8002048:	469a      	mov	sl, r3
 800204a:	2302      	movs	r3, #2
 800204c:	4690      	mov	r8, r2
 800204e:	2408      	movs	r4, #8
 8002050:	9303      	str	r3, [sp, #12]
 8002052:	e677      	b.n	8001d44 <__aeabi_ddiv+0x50>
 8002054:	465a      	mov	r2, fp
 8002056:	9b00      	ldr	r3, [sp, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <__aeabi_ddiv+0x39c>)
 800205c:	469c      	mov	ip, r3
 800205e:	44e2      	add	sl, ip
 8002060:	2a00      	cmp	r2, #0
 8002062:	d117      	bne.n	8002094 <__aeabi_ddiv+0x3a0>
 8002064:	2302      	movs	r3, #2
 8002066:	431c      	orrs	r4, r3
 8002068:	2300      	movs	r3, #0
 800206a:	469b      	mov	fp, r3
 800206c:	3302      	adds	r3, #2
 800206e:	e689      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	fffffc01 	.word	0xfffffc01
 8002078:	08016f8c 	.word	0x08016f8c
 800207c:	000003ff 	.word	0x000003ff
 8002080:	feffffff 	.word	0xfeffffff
 8002084:	000007fe 	.word	0x000007fe
 8002088:	000003f3 	.word	0x000003f3
 800208c:	fffffc0d 	.word	0xfffffc0d
 8002090:	fffff801 	.word	0xfffff801
 8002094:	2303      	movs	r3, #3
 8002096:	0032      	movs	r2, r6
 8002098:	431c      	orrs	r4, r3
 800209a:	e673      	b.n	8001d84 <__aeabi_ddiv+0x90>
 800209c:	469a      	mov	sl, r3
 800209e:	2303      	movs	r3, #3
 80020a0:	46d9      	mov	r9, fp
 80020a2:	240c      	movs	r4, #12
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	e64d      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020a8:	2300      	movs	r3, #0
 80020aa:	4698      	mov	r8, r3
 80020ac:	469a      	mov	sl, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	2404      	movs	r4, #4
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	e646      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020b6:	2301      	movs	r3, #1
 80020b8:	431c      	orrs	r4, r3
 80020ba:	2300      	movs	r3, #0
 80020bc:	469b      	mov	fp, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	e660      	b.n	8001d84 <__aeabi_ddiv+0x90>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2480      	movs	r4, #128	@ 0x80
 80020c6:	4698      	mov	r8, r3
 80020c8:	2600      	movs	r6, #0
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <__aeabi_ddiv+0x620>)
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	e671      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 80020d0:	2201      	movs	r2, #1
 80020d2:	4252      	negs	r2, r2
 80020d4:	2101      	movs	r1, #1
 80020d6:	1ac9      	subs	r1, r1, r3
 80020d8:	2938      	cmp	r1, #56	@ 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_ddiv+0x3ea>
 80020dc:	e666      	b.n	8001dac <__aeabi_ddiv+0xb8>
 80020de:	291f      	cmp	r1, #31
 80020e0:	dc00      	bgt.n	80020e4 <__aeabi_ddiv+0x3f0>
 80020e2:	e0ab      	b.n	800223c <__aeabi_ddiv+0x548>
 80020e4:	201f      	movs	r0, #31
 80020e6:	4240      	negs	r0, r0
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	4658      	mov	r0, fp
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	0003      	movs	r3, r0
 80020f0:	2920      	cmp	r1, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_ddiv+0x40a>
 80020f4:	4658      	mov	r0, fp
 80020f6:	4988      	ldr	r1, [pc, #544]	@ (8002318 <__aeabi_ddiv+0x624>)
 80020f8:	4451      	add	r1, sl
 80020fa:	4088      	lsls	r0, r1
 80020fc:	4302      	orrs	r2, r0
 80020fe:	1e51      	subs	r1, r2, #1
 8002100:	418a      	sbcs	r2, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	2307      	movs	r3, #7
 8002106:	0019      	movs	r1, r3
 8002108:	2400      	movs	r4, #0
 800210a:	4011      	ands	r1, r2
 800210c:	4213      	tst	r3, r2
 800210e:	d00c      	beq.n	800212a <__aeabi_ddiv+0x436>
 8002110:	230f      	movs	r3, #15
 8002112:	4013      	ands	r3, r2
 8002114:	2b04      	cmp	r3, #4
 8002116:	d100      	bne.n	800211a <__aeabi_ddiv+0x426>
 8002118:	e0f9      	b.n	800230e <__aeabi_ddiv+0x61a>
 800211a:	1d11      	adds	r1, r2, #4
 800211c:	4291      	cmp	r1, r2
 800211e:	419b      	sbcs	r3, r3
 8002120:	000a      	movs	r2, r1
 8002122:	425b      	negs	r3, r3
 8002124:	0759      	lsls	r1, r3, #29
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	0b1c      	lsrs	r4, r3, #12
 800212a:	08d2      	lsrs	r2, r2, #3
 800212c:	430a      	orrs	r2, r1
 800212e:	4690      	mov	r8, r2
 8002130:	2300      	movs	r3, #0
 8002132:	e63f      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002134:	2480      	movs	r4, #128	@ 0x80
 8002136:	464b      	mov	r3, r9
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	4223      	tst	r3, r4
 800213c:	d009      	beq.n	8002152 <__aeabi_ddiv+0x45e>
 800213e:	465b      	mov	r3, fp
 8002140:	4223      	tst	r3, r4
 8002142:	d106      	bne.n	8002152 <__aeabi_ddiv+0x45e>
 8002144:	431c      	orrs	r4, r3
 8002146:	0324      	lsls	r4, r4, #12
 8002148:	002e      	movs	r6, r5
 800214a:	4690      	mov	r8, r2
 800214c:	4b71      	ldr	r3, [pc, #452]	@ (8002314 <__aeabi_ddiv+0x620>)
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	e630      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002152:	2480      	movs	r4, #128	@ 0x80
 8002154:	464b      	mov	r3, r9
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	431c      	orrs	r4, r3
 800215a:	0324      	lsls	r4, r4, #12
 800215c:	9e02      	ldr	r6, [sp, #8]
 800215e:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002160:	0b24      	lsrs	r4, r4, #12
 8002162:	e627      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_ddiv+0x476>
 8002168:	e700      	b.n	8001f6c <__aeabi_ddiv+0x278>
 800216a:	9800      	ldr	r0, [sp, #0]
 800216c:	1e51      	subs	r1, r2, #1
 800216e:	4684      	mov	ip, r0
 8002170:	4464      	add	r4, ip
 8002172:	4284      	cmp	r4, r0
 8002174:	d200      	bcs.n	8002178 <__aeabi_ddiv+0x484>
 8002176:	e084      	b.n	8002282 <__aeabi_ddiv+0x58e>
 8002178:	42bc      	cmp	r4, r7
 800217a:	d200      	bcs.n	800217e <__aeabi_ddiv+0x48a>
 800217c:	e0ae      	b.n	80022dc <__aeabi_ddiv+0x5e8>
 800217e:	d100      	bne.n	8002182 <__aeabi_ddiv+0x48e>
 8002180:	e0c1      	b.n	8002306 <__aeabi_ddiv+0x612>
 8002182:	000a      	movs	r2, r1
 8002184:	e6f0      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002186:	4542      	cmp	r2, r8
 8002188:	d900      	bls.n	800218c <__aeabi_ddiv+0x498>
 800218a:	e62c      	b.n	8001de6 <__aeabi_ddiv+0xf2>
 800218c:	464b      	mov	r3, r9
 800218e:	07dc      	lsls	r4, r3, #31
 8002190:	0858      	lsrs	r0, r3, #1
 8002192:	4643      	mov	r3, r8
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	431c      	orrs	r4, r3
 8002198:	4643      	mov	r3, r8
 800219a:	07df      	lsls	r7, r3, #31
 800219c:	e62a      	b.n	8001df4 <__aeabi_ddiv+0x100>
 800219e:	f001 f9cd 	bl	800353c <__clzsi2>
 80021a2:	2315      	movs	r3, #21
 80021a4:	469c      	mov	ip, r3
 80021a6:	4484      	add	ip, r0
 80021a8:	0002      	movs	r2, r0
 80021aa:	4663      	mov	r3, ip
 80021ac:	3220      	adds	r2, #32
 80021ae:	2b1c      	cmp	r3, #28
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_ddiv+0x4c0>
 80021b2:	e72e      	b.n	8002012 <__aeabi_ddiv+0x31e>
 80021b4:	0023      	movs	r3, r4
 80021b6:	3808      	subs	r0, #8
 80021b8:	4083      	lsls	r3, r0
 80021ba:	4699      	mov	r9, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	4698      	mov	r8, r3
 80021c0:	e736      	b.n	8002030 <__aeabi_ddiv+0x33c>
 80021c2:	f001 f9bb 	bl	800353c <__clzsi2>
 80021c6:	0002      	movs	r2, r0
 80021c8:	0003      	movs	r3, r0
 80021ca:	3215      	adds	r2, #21
 80021cc:	3320      	adds	r3, #32
 80021ce:	2a1c      	cmp	r2, #28
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_ddiv+0x4e0>
 80021d2:	e6fb      	b.n	8001fcc <__aeabi_ddiv+0x2d8>
 80021d4:	9900      	ldr	r1, [sp, #0]
 80021d6:	3808      	subs	r0, #8
 80021d8:	4081      	lsls	r1, r0
 80021da:	2200      	movs	r2, #0
 80021dc:	468b      	mov	fp, r1
 80021de:	e702      	b.n	8001fe6 <__aeabi_ddiv+0x2f2>
 80021e0:	9900      	ldr	r1, [sp, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	468c      	mov	ip, r1
 80021e6:	4464      	add	r4, ip
 80021e8:	42a1      	cmp	r1, r4
 80021ea:	d900      	bls.n	80021ee <__aeabi_ddiv+0x4fa>
 80021ec:	e69a      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021ee:	42a2      	cmp	r2, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x500>
 80021f2:	e697      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021f4:	1e83      	subs	r3, r0, #2
 80021f6:	4464      	add	r4, ip
 80021f8:	e694      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021fa:	46ac      	mov	ip, r5
 80021fc:	4461      	add	r1, ip
 80021fe:	3f01      	subs	r7, #1
 8002200:	428d      	cmp	r5, r1
 8002202:	d900      	bls.n	8002206 <__aeabi_ddiv+0x512>
 8002204:	e680      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002206:	428a      	cmp	r2, r1
 8002208:	d800      	bhi.n	800220c <__aeabi_ddiv+0x518>
 800220a:	e67d      	b.n	8001f08 <__aeabi_ddiv+0x214>
 800220c:	1e87      	subs	r7, r0, #2
 800220e:	4461      	add	r1, ip
 8002210:	e67a      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002212:	4285      	cmp	r5, r0
 8002214:	d000      	beq.n	8002218 <__aeabi_ddiv+0x524>
 8002216:	e65f      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8002218:	45b9      	cmp	r9, r7
 800221a:	d900      	bls.n	800221e <__aeabi_ddiv+0x52a>
 800221c:	e65c      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 800221e:	e656      	b.n	8001ece <__aeabi_ddiv+0x1da>
 8002220:	42a2      	cmp	r2, r4
 8002222:	d800      	bhi.n	8002226 <__aeabi_ddiv+0x532>
 8002224:	e61a      	b.n	8001e5c <__aeabi_ddiv+0x168>
 8002226:	1e83      	subs	r3, r0, #2
 8002228:	4464      	add	r4, ip
 800222a:	e617      	b.n	8001e5c <__aeabi_ddiv+0x168>
 800222c:	428a      	cmp	r2, r1
 800222e:	d800      	bhi.n	8002232 <__aeabi_ddiv+0x53e>
 8002230:	e600      	b.n	8001e34 <__aeabi_ddiv+0x140>
 8002232:	46ac      	mov	ip, r5
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4698      	mov	r8, r3
 8002238:	4461      	add	r1, ip
 800223a:	e5fb      	b.n	8001e34 <__aeabi_ddiv+0x140>
 800223c:	4837      	ldr	r0, [pc, #220]	@ (800231c <__aeabi_ddiv+0x628>)
 800223e:	0014      	movs	r4, r2
 8002240:	4450      	add	r0, sl
 8002242:	4082      	lsls	r2, r0
 8002244:	465b      	mov	r3, fp
 8002246:	0017      	movs	r7, r2
 8002248:	4083      	lsls	r3, r0
 800224a:	40cc      	lsrs	r4, r1
 800224c:	1e7a      	subs	r2, r7, #1
 800224e:	4197      	sbcs	r7, r2
 8002250:	4323      	orrs	r3, r4
 8002252:	433b      	orrs	r3, r7
 8002254:	001a      	movs	r2, r3
 8002256:	465b      	mov	r3, fp
 8002258:	40cb      	lsrs	r3, r1
 800225a:	0751      	lsls	r1, r2, #29
 800225c:	d009      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 800225e:	210f      	movs	r1, #15
 8002260:	4011      	ands	r1, r2
 8002262:	2904      	cmp	r1, #4
 8002264:	d005      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 8002266:	1d11      	adds	r1, r2, #4
 8002268:	4291      	cmp	r1, r2
 800226a:	4192      	sbcs	r2, r2
 800226c:	4252      	negs	r2, r2
 800226e:	189b      	adds	r3, r3, r2
 8002270:	000a      	movs	r2, r1
 8002272:	0219      	lsls	r1, r3, #8
 8002274:	d400      	bmi.n	8002278 <__aeabi_ddiv+0x584>
 8002276:	e755      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002278:	2200      	movs	r2, #0
 800227a:	2301      	movs	r3, #1
 800227c:	2400      	movs	r4, #0
 800227e:	4690      	mov	r8, r2
 8002280:	e598      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002282:	000a      	movs	r2, r1
 8002284:	42bc      	cmp	r4, r7
 8002286:	d000      	beq.n	800228a <__aeabi_ddiv+0x596>
 8002288:	e66e      	b.n	8001f68 <__aeabi_ddiv+0x274>
 800228a:	454b      	cmp	r3, r9
 800228c:	d000      	beq.n	8002290 <__aeabi_ddiv+0x59c>
 800228e:	e66b      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002290:	e66c      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <__aeabi_ddiv+0x62c>)
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <__aeabi_ddiv+0x630>)
 8002296:	4453      	add	r3, sl
 8002298:	4592      	cmp	sl, r2
 800229a:	da00      	bge.n	800229e <__aeabi_ddiv+0x5aa>
 800229c:	e718      	b.n	80020d0 <__aeabi_ddiv+0x3dc>
 800229e:	2101      	movs	r1, #1
 80022a0:	4249      	negs	r1, r1
 80022a2:	1d0a      	adds	r2, r1, #4
 80022a4:	428a      	cmp	r2, r1
 80022a6:	4189      	sbcs	r1, r1
 80022a8:	4249      	negs	r1, r1
 80022aa:	448b      	add	fp, r1
 80022ac:	e666      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022ae:	210f      	movs	r1, #15
 80022b0:	4011      	ands	r1, r2
 80022b2:	2904      	cmp	r1, #4
 80022b4:	d100      	bne.n	80022b8 <__aeabi_ddiv+0x5c4>
 80022b6:	e661      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022b8:	0011      	movs	r1, r2
 80022ba:	e7f2      	b.n	80022a2 <__aeabi_ddiv+0x5ae>
 80022bc:	42bc      	cmp	r4, r7
 80022be:	d800      	bhi.n	80022c2 <__aeabi_ddiv+0x5ce>
 80022c0:	e60a      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 80022c2:	2302      	movs	r3, #2
 80022c4:	425b      	negs	r3, r3
 80022c6:	469c      	mov	ip, r3
 80022c8:	9900      	ldr	r1, [sp, #0]
 80022ca:	444f      	add	r7, r9
 80022cc:	454f      	cmp	r7, r9
 80022ce:	419b      	sbcs	r3, r3
 80022d0:	44e3      	add	fp, ip
 80022d2:	468c      	mov	ip, r1
 80022d4:	425b      	negs	r3, r3
 80022d6:	4463      	add	r3, ip
 80022d8:	18c0      	adds	r0, r0, r3
 80022da:	e5ff      	b.n	8001edc <__aeabi_ddiv+0x1e8>
 80022dc:	4649      	mov	r1, r9
 80022de:	9d00      	ldr	r5, [sp, #0]
 80022e0:	0048      	lsls	r0, r1, #1
 80022e2:	4548      	cmp	r0, r9
 80022e4:	4189      	sbcs	r1, r1
 80022e6:	46ac      	mov	ip, r5
 80022e8:	4249      	negs	r1, r1
 80022ea:	4461      	add	r1, ip
 80022ec:	4681      	mov	r9, r0
 80022ee:	3a02      	subs	r2, #2
 80022f0:	1864      	adds	r4, r4, r1
 80022f2:	e7c7      	b.n	8002284 <__aeabi_ddiv+0x590>
 80022f4:	2480      	movs	r4, #128	@ 0x80
 80022f6:	465b      	mov	r3, fp
 80022f8:	0324      	lsls	r4, r4, #12
 80022fa:	431c      	orrs	r4, r3
 80022fc:	0324      	lsls	r4, r4, #12
 80022fe:	4690      	mov	r8, r2
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002302:	0b24      	lsrs	r4, r4, #12
 8002304:	e556      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002306:	4599      	cmp	r9, r3
 8002308:	d3e8      	bcc.n	80022dc <__aeabi_ddiv+0x5e8>
 800230a:	000a      	movs	r2, r1
 800230c:	e7bd      	b.n	800228a <__aeabi_ddiv+0x596>
 800230e:	2300      	movs	r3, #0
 8002310:	e708      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	0000043e 	.word	0x0000043e
 800231c:	0000041e 	.word	0x0000041e
 8002320:	000003ff 	.word	0x000003ff
 8002324:	fffffc02 	.word	0xfffffc02

08002328 <__eqdf2>:
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	4657      	mov	r7, sl
 800232c:	46de      	mov	lr, fp
 800232e:	464e      	mov	r6, r9
 8002330:	4645      	mov	r5, r8
 8002332:	b5e0      	push	{r5, r6, r7, lr}
 8002334:	000d      	movs	r5, r1
 8002336:	0004      	movs	r4, r0
 8002338:	0fe8      	lsrs	r0, r5, #31
 800233a:	4683      	mov	fp, r0
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0fd8      	lsrs	r0, r3, #31
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	4682      	mov	sl, r0
 8002344:	4819      	ldr	r0, [pc, #100]	@ (80023ac <__eqdf2+0x84>)
 8002346:	468c      	mov	ip, r1
 8002348:	031f      	lsls	r7, r3, #12
 800234a:	0069      	lsls	r1, r5, #1
 800234c:	005e      	lsls	r6, r3, #1
 800234e:	0d49      	lsrs	r1, r1, #21
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0d76      	lsrs	r6, r6, #21
 8002354:	4281      	cmp	r1, r0
 8002356:	d018      	beq.n	800238a <__eqdf2+0x62>
 8002358:	4286      	cmp	r6, r0
 800235a:	d00f      	beq.n	800237c <__eqdf2+0x54>
 800235c:	2001      	movs	r0, #1
 800235e:	42b1      	cmp	r1, r6
 8002360:	d10d      	bne.n	800237e <__eqdf2+0x56>
 8002362:	45bc      	cmp	ip, r7
 8002364:	d10b      	bne.n	800237e <__eqdf2+0x56>
 8002366:	4294      	cmp	r4, r2
 8002368:	d109      	bne.n	800237e <__eqdf2+0x56>
 800236a:	45d3      	cmp	fp, sl
 800236c:	d01c      	beq.n	80023a8 <__eqdf2+0x80>
 800236e:	2900      	cmp	r1, #0
 8002370:	d105      	bne.n	800237e <__eqdf2+0x56>
 8002372:	4660      	mov	r0, ip
 8002374:	4320      	orrs	r0, r4
 8002376:	1e43      	subs	r3, r0, #1
 8002378:	4198      	sbcs	r0, r3
 800237a:	e000      	b.n	800237e <__eqdf2+0x56>
 800237c:	2001      	movs	r0, #1
 800237e:	bcf0      	pop	{r4, r5, r6, r7}
 8002380:	46bb      	mov	fp, r7
 8002382:	46b2      	mov	sl, r6
 8002384:	46a9      	mov	r9, r5
 8002386:	46a0      	mov	r8, r4
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2001      	movs	r0, #1
 800238c:	428e      	cmp	r6, r1
 800238e:	d1f6      	bne.n	800237e <__eqdf2+0x56>
 8002390:	4661      	mov	r1, ip
 8002392:	4339      	orrs	r1, r7
 8002394:	000f      	movs	r7, r1
 8002396:	4317      	orrs	r7, r2
 8002398:	4327      	orrs	r7, r4
 800239a:	d1f0      	bne.n	800237e <__eqdf2+0x56>
 800239c:	465b      	mov	r3, fp
 800239e:	4652      	mov	r2, sl
 80023a0:	1a98      	subs	r0, r3, r2
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e7ea      	b.n	800237e <__eqdf2+0x56>
 80023a8:	2000      	movs	r0, #0
 80023aa:	e7e8      	b.n	800237e <__eqdf2+0x56>
 80023ac:	000007ff 	.word	0x000007ff

080023b0 <__gedf2>:
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	4657      	mov	r7, sl
 80023b4:	464e      	mov	r6, r9
 80023b6:	4645      	mov	r5, r8
 80023b8:	46de      	mov	lr, fp
 80023ba:	b5e0      	push	{r5, r6, r7, lr}
 80023bc:	000d      	movs	r5, r1
 80023be:	030f      	lsls	r7, r1, #12
 80023c0:	0b39      	lsrs	r1, r7, #12
 80023c2:	b083      	sub	sp, #12
 80023c4:	0004      	movs	r4, r0
 80023c6:	4680      	mov	r8, r0
 80023c8:	9101      	str	r1, [sp, #4]
 80023ca:	0058      	lsls	r0, r3, #1
 80023cc:	0fe9      	lsrs	r1, r5, #31
 80023ce:	4f31      	ldr	r7, [pc, #196]	@ (8002494 <__gedf2+0xe4>)
 80023d0:	0d40      	lsrs	r0, r0, #21
 80023d2:	468c      	mov	ip, r1
 80023d4:	006e      	lsls	r6, r5, #1
 80023d6:	0319      	lsls	r1, r3, #12
 80023d8:	4682      	mov	sl, r0
 80023da:	4691      	mov	r9, r2
 80023dc:	0d76      	lsrs	r6, r6, #21
 80023de:	0b09      	lsrs	r1, r1, #12
 80023e0:	0fd8      	lsrs	r0, r3, #31
 80023e2:	42be      	cmp	r6, r7
 80023e4:	d01f      	beq.n	8002426 <__gedf2+0x76>
 80023e6:	45ba      	cmp	sl, r7
 80023e8:	d00f      	beq.n	800240a <__gedf2+0x5a>
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d12f      	bne.n	800244e <__gedf2+0x9e>
 80023ee:	4655      	mov	r5, sl
 80023f0:	9e01      	ldr	r6, [sp, #4]
 80023f2:	4334      	orrs	r4, r6
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	d127      	bne.n	8002448 <__gedf2+0x98>
 80023f8:	430a      	orrs	r2, r1
 80023fa:	d03a      	beq.n	8002472 <__gedf2+0xc2>
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d145      	bne.n	800248c <__gedf2+0xdc>
 8002400:	2800      	cmp	r0, #0
 8002402:	d11a      	bne.n	800243a <__gedf2+0x8a>
 8002404:	2001      	movs	r0, #1
 8002406:	4240      	negs	r0, r0
 8002408:	e017      	b.n	800243a <__gedf2+0x8a>
 800240a:	4311      	orrs	r1, r2
 800240c:	d13b      	bne.n	8002486 <__gedf2+0xd6>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d102      	bne.n	8002418 <__gedf2+0x68>
 8002412:	9f01      	ldr	r7, [sp, #4]
 8002414:	4327      	orrs	r7, r4
 8002416:	d0f3      	beq.n	8002400 <__gedf2+0x50>
 8002418:	4584      	cmp	ip, r0
 800241a:	d109      	bne.n	8002430 <__gedf2+0x80>
 800241c:	4663      	mov	r3, ip
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <__gedf2+0x54>
 8002422:	4660      	mov	r0, ip
 8002424:	e009      	b.n	800243a <__gedf2+0x8a>
 8002426:	9f01      	ldr	r7, [sp, #4]
 8002428:	4327      	orrs	r7, r4
 800242a:	d12c      	bne.n	8002486 <__gedf2+0xd6>
 800242c:	45b2      	cmp	sl, r6
 800242e:	d024      	beq.n	800247a <__gedf2+0xca>
 8002430:	4663      	mov	r3, ip
 8002432:	2002      	movs	r0, #2
 8002434:	3b01      	subs	r3, #1
 8002436:	4018      	ands	r0, r3
 8002438:	3801      	subs	r0, #1
 800243a:	b003      	add	sp, #12
 800243c:	bcf0      	pop	{r4, r5, r6, r7}
 800243e:	46bb      	mov	fp, r7
 8002440:	46b2      	mov	sl, r6
 8002442:	46a9      	mov	r9, r5
 8002444:	46a0      	mov	r8, r4
 8002446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002448:	2c00      	cmp	r4, #0
 800244a:	d0d9      	beq.n	8002400 <__gedf2+0x50>
 800244c:	e7e4      	b.n	8002418 <__gedf2+0x68>
 800244e:	4654      	mov	r4, sl
 8002450:	2c00      	cmp	r4, #0
 8002452:	d0ed      	beq.n	8002430 <__gedf2+0x80>
 8002454:	4584      	cmp	ip, r0
 8002456:	d1eb      	bne.n	8002430 <__gedf2+0x80>
 8002458:	4556      	cmp	r6, sl
 800245a:	dce9      	bgt.n	8002430 <__gedf2+0x80>
 800245c:	dbde      	blt.n	800241c <__gedf2+0x6c>
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	428b      	cmp	r3, r1
 8002462:	d8e5      	bhi.n	8002430 <__gedf2+0x80>
 8002464:	d1da      	bne.n	800241c <__gedf2+0x6c>
 8002466:	45c8      	cmp	r8, r9
 8002468:	d8e2      	bhi.n	8002430 <__gedf2+0x80>
 800246a:	2000      	movs	r0, #0
 800246c:	45c8      	cmp	r8, r9
 800246e:	d2e4      	bcs.n	800243a <__gedf2+0x8a>
 8002470:	e7d4      	b.n	800241c <__gedf2+0x6c>
 8002472:	2000      	movs	r0, #0
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0e0      	beq.n	800243a <__gedf2+0x8a>
 8002478:	e7da      	b.n	8002430 <__gedf2+0x80>
 800247a:	4311      	orrs	r1, r2
 800247c:	d103      	bne.n	8002486 <__gedf2+0xd6>
 800247e:	4584      	cmp	ip, r0
 8002480:	d1d6      	bne.n	8002430 <__gedf2+0x80>
 8002482:	2000      	movs	r0, #0
 8002484:	e7d9      	b.n	800243a <__gedf2+0x8a>
 8002486:	2002      	movs	r0, #2
 8002488:	4240      	negs	r0, r0
 800248a:	e7d6      	b.n	800243a <__gedf2+0x8a>
 800248c:	4584      	cmp	ip, r0
 800248e:	d0e6      	beq.n	800245e <__gedf2+0xae>
 8002490:	e7ce      	b.n	8002430 <__gedf2+0x80>
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	000007ff 	.word	0x000007ff

08002498 <__ledf2>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	464e      	mov	r6, r9
 800249e:	4645      	mov	r5, r8
 80024a0:	46de      	mov	lr, fp
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	000d      	movs	r5, r1
 80024a6:	030f      	lsls	r7, r1, #12
 80024a8:	0004      	movs	r4, r0
 80024aa:	4680      	mov	r8, r0
 80024ac:	0fe8      	lsrs	r0, r5, #31
 80024ae:	0b39      	lsrs	r1, r7, #12
 80024b0:	4684      	mov	ip, r0
 80024b2:	b083      	sub	sp, #12
 80024b4:	0058      	lsls	r0, r3, #1
 80024b6:	4f30      	ldr	r7, [pc, #192]	@ (8002578 <__ledf2+0xe0>)
 80024b8:	0d40      	lsrs	r0, r0, #21
 80024ba:	9101      	str	r1, [sp, #4]
 80024bc:	031e      	lsls	r6, r3, #12
 80024be:	0069      	lsls	r1, r5, #1
 80024c0:	4682      	mov	sl, r0
 80024c2:	4691      	mov	r9, r2
 80024c4:	0d49      	lsrs	r1, r1, #21
 80024c6:	0b36      	lsrs	r6, r6, #12
 80024c8:	0fd8      	lsrs	r0, r3, #31
 80024ca:	42b9      	cmp	r1, r7
 80024cc:	d020      	beq.n	8002510 <__ledf2+0x78>
 80024ce:	45ba      	cmp	sl, r7
 80024d0:	d00f      	beq.n	80024f2 <__ledf2+0x5a>
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d12b      	bne.n	800252e <__ledf2+0x96>
 80024d6:	9901      	ldr	r1, [sp, #4]
 80024d8:	430c      	orrs	r4, r1
 80024da:	4651      	mov	r1, sl
 80024dc:	2900      	cmp	r1, #0
 80024de:	d137      	bne.n	8002550 <__ledf2+0xb8>
 80024e0:	4332      	orrs	r2, r6
 80024e2:	d038      	beq.n	8002556 <__ledf2+0xbe>
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d144      	bne.n	8002572 <__ledf2+0xda>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d119      	bne.n	8002520 <__ledf2+0x88>
 80024ec:	2001      	movs	r0, #1
 80024ee:	4240      	negs	r0, r0
 80024f0:	e016      	b.n	8002520 <__ledf2+0x88>
 80024f2:	4316      	orrs	r6, r2
 80024f4:	d113      	bne.n	800251e <__ledf2+0x86>
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d102      	bne.n	8002500 <__ledf2+0x68>
 80024fa:	9f01      	ldr	r7, [sp, #4]
 80024fc:	4327      	orrs	r7, r4
 80024fe:	d0f3      	beq.n	80024e8 <__ledf2+0x50>
 8002500:	4584      	cmp	ip, r0
 8002502:	d020      	beq.n	8002546 <__ledf2+0xae>
 8002504:	4663      	mov	r3, ip
 8002506:	2002      	movs	r0, #2
 8002508:	3b01      	subs	r3, #1
 800250a:	4018      	ands	r0, r3
 800250c:	3801      	subs	r0, #1
 800250e:	e007      	b.n	8002520 <__ledf2+0x88>
 8002510:	9f01      	ldr	r7, [sp, #4]
 8002512:	4327      	orrs	r7, r4
 8002514:	d103      	bne.n	800251e <__ledf2+0x86>
 8002516:	458a      	cmp	sl, r1
 8002518:	d1f4      	bne.n	8002504 <__ledf2+0x6c>
 800251a:	4316      	orrs	r6, r2
 800251c:	d01f      	beq.n	800255e <__ledf2+0xc6>
 800251e:	2002      	movs	r0, #2
 8002520:	b003      	add	sp, #12
 8002522:	bcf0      	pop	{r4, r5, r6, r7}
 8002524:	46bb      	mov	fp, r7
 8002526:	46b2      	mov	sl, r6
 8002528:	46a9      	mov	r9, r5
 800252a:	46a0      	mov	r8, r4
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252e:	4654      	mov	r4, sl
 8002530:	2c00      	cmp	r4, #0
 8002532:	d0e7      	beq.n	8002504 <__ledf2+0x6c>
 8002534:	4584      	cmp	ip, r0
 8002536:	d1e5      	bne.n	8002504 <__ledf2+0x6c>
 8002538:	4551      	cmp	r1, sl
 800253a:	dce3      	bgt.n	8002504 <__ledf2+0x6c>
 800253c:	db03      	blt.n	8002546 <__ledf2+0xae>
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	42b3      	cmp	r3, r6
 8002542:	d8df      	bhi.n	8002504 <__ledf2+0x6c>
 8002544:	d00f      	beq.n	8002566 <__ledf2+0xce>
 8002546:	4663      	mov	r3, ip
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0cf      	beq.n	80024ec <__ledf2+0x54>
 800254c:	4660      	mov	r0, ip
 800254e:	e7e7      	b.n	8002520 <__ledf2+0x88>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d0c9      	beq.n	80024e8 <__ledf2+0x50>
 8002554:	e7d4      	b.n	8002500 <__ledf2+0x68>
 8002556:	2000      	movs	r0, #0
 8002558:	2c00      	cmp	r4, #0
 800255a:	d0e1      	beq.n	8002520 <__ledf2+0x88>
 800255c:	e7d2      	b.n	8002504 <__ledf2+0x6c>
 800255e:	4584      	cmp	ip, r0
 8002560:	d1d0      	bne.n	8002504 <__ledf2+0x6c>
 8002562:	2000      	movs	r0, #0
 8002564:	e7dc      	b.n	8002520 <__ledf2+0x88>
 8002566:	45c8      	cmp	r8, r9
 8002568:	d8cc      	bhi.n	8002504 <__ledf2+0x6c>
 800256a:	2000      	movs	r0, #0
 800256c:	45c8      	cmp	r8, r9
 800256e:	d2d7      	bcs.n	8002520 <__ledf2+0x88>
 8002570:	e7e9      	b.n	8002546 <__ledf2+0xae>
 8002572:	4584      	cmp	ip, r0
 8002574:	d0e3      	beq.n	800253e <__ledf2+0xa6>
 8002576:	e7c5      	b.n	8002504 <__ledf2+0x6c>
 8002578:	000007ff 	.word	0x000007ff

0800257c <__aeabi_dmul>:
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	4657      	mov	r7, sl
 8002580:	46de      	mov	lr, fp
 8002582:	464e      	mov	r6, r9
 8002584:	4645      	mov	r5, r8
 8002586:	b5e0      	push	{r5, r6, r7, lr}
 8002588:	001f      	movs	r7, r3
 800258a:	030b      	lsls	r3, r1, #12
 800258c:	0b1b      	lsrs	r3, r3, #12
 800258e:	0016      	movs	r6, r2
 8002590:	469a      	mov	sl, r3
 8002592:	0fca      	lsrs	r2, r1, #31
 8002594:	004b      	lsls	r3, r1, #1
 8002596:	0004      	movs	r4, r0
 8002598:	4693      	mov	fp, r2
 800259a:	b087      	sub	sp, #28
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x26>
 80025a0:	e0d5      	b.n	800274e <__aeabi_dmul+0x1d2>
 80025a2:	4abb      	ldr	r2, [pc, #748]	@ (8002890 <__aeabi_dmul+0x314>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x2e>
 80025a8:	e0f8      	b.n	800279c <__aeabi_dmul+0x220>
 80025aa:	4651      	mov	r1, sl
 80025ac:	0f42      	lsrs	r2, r0, #29
 80025ae:	00c9      	lsls	r1, r1, #3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	0409      	lsls	r1, r1, #16
 80025b6:	4311      	orrs	r1, r2
 80025b8:	00c2      	lsls	r2, r0, #3
 80025ba:	4691      	mov	r9, r2
 80025bc:	4ab5      	ldr	r2, [pc, #724]	@ (8002894 <__aeabi_dmul+0x318>)
 80025be:	468a      	mov	sl, r1
 80025c0:	189d      	adds	r5, r3, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	4698      	mov	r8, r3
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	033c      	lsls	r4, r7, #12
 80025ca:	007b      	lsls	r3, r7, #1
 80025cc:	0ffa      	lsrs	r2, r7, #31
 80025ce:	0030      	movs	r0, r6
 80025d0:	0b24      	lsrs	r4, r4, #12
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0x5e>
 80025d8:	e096      	b.n	8002708 <__aeabi_dmul+0x18c>
 80025da:	4aad      	ldr	r2, [pc, #692]	@ (8002890 <__aeabi_dmul+0x314>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d031      	beq.n	8002644 <__aeabi_dmul+0xc8>
 80025e0:	0f72      	lsrs	r2, r6, #29
 80025e2:	00e4      	lsls	r4, r4, #3
 80025e4:	4322      	orrs	r2, r4
 80025e6:	2480      	movs	r4, #128	@ 0x80
 80025e8:	0424      	lsls	r4, r4, #16
 80025ea:	4314      	orrs	r4, r2
 80025ec:	4aa9      	ldr	r2, [pc, #676]	@ (8002894 <__aeabi_dmul+0x318>)
 80025ee:	00f0      	lsls	r0, r6, #3
 80025f0:	4694      	mov	ip, r2
 80025f2:	4463      	add	r3, ip
 80025f4:	195b      	adds	r3, r3, r5
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	4642      	mov	r2, r8
 80025fc:	2600      	movs	r6, #0
 80025fe:	2a0a      	cmp	r2, #10
 8002600:	dc42      	bgt.n	8002688 <__aeabi_dmul+0x10c>
 8002602:	465a      	mov	r2, fp
 8002604:	9900      	ldr	r1, [sp, #0]
 8002606:	404a      	eors	r2, r1
 8002608:	4693      	mov	fp, r2
 800260a:	4642      	mov	r2, r8
 800260c:	2a02      	cmp	r2, #2
 800260e:	dc32      	bgt.n	8002676 <__aeabi_dmul+0xfa>
 8002610:	3a01      	subs	r2, #1
 8002612:	2a01      	cmp	r2, #1
 8002614:	d900      	bls.n	8002618 <__aeabi_dmul+0x9c>
 8002616:	e149      	b.n	80028ac <__aeabi_dmul+0x330>
 8002618:	2e02      	cmp	r6, #2
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0xa2>
 800261c:	e0ca      	b.n	80027b4 <__aeabi_dmul+0x238>
 800261e:	2e01      	cmp	r6, #1
 8002620:	d13d      	bne.n	800269e <__aeabi_dmul+0x122>
 8002622:	2300      	movs	r3, #0
 8002624:	2400      	movs	r4, #0
 8002626:	2200      	movs	r2, #0
 8002628:	0010      	movs	r0, r2
 800262a:	465a      	mov	r2, fp
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4323      	orrs	r3, r4
 8002630:	07d2      	lsls	r2, r2, #31
 8002632:	4313      	orrs	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	b007      	add	sp, #28
 8002638:	bcf0      	pop	{r4, r5, r6, r7}
 800263a:	46bb      	mov	fp, r7
 800263c:	46b2      	mov	sl, r6
 800263e:	46a9      	mov	r9, r5
 8002640:	46a0      	mov	r8, r4
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002644:	4b92      	ldr	r3, [pc, #584]	@ (8002890 <__aeabi_dmul+0x314>)
 8002646:	4326      	orrs	r6, r4
 8002648:	18eb      	adds	r3, r5, r3
 800264a:	2e00      	cmp	r6, #0
 800264c:	d100      	bne.n	8002650 <__aeabi_dmul+0xd4>
 800264e:	e0bb      	b.n	80027c8 <__aeabi_dmul+0x24c>
 8002650:	2203      	movs	r2, #3
 8002652:	4641      	mov	r1, r8
 8002654:	4311      	orrs	r1, r2
 8002656:	465a      	mov	r2, fp
 8002658:	4688      	mov	r8, r1
 800265a:	9900      	ldr	r1, [sp, #0]
 800265c:	404a      	eors	r2, r1
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0109      	lsls	r1, r1, #4
 8002662:	468c      	mov	ip, r1
 8002664:	0029      	movs	r1, r5
 8002666:	4461      	add	r1, ip
 8002668:	9101      	str	r1, [sp, #4]
 800266a:	4641      	mov	r1, r8
 800266c:	290a      	cmp	r1, #10
 800266e:	dd00      	ble.n	8002672 <__aeabi_dmul+0xf6>
 8002670:	e233      	b.n	8002ada <__aeabi_dmul+0x55e>
 8002672:	4693      	mov	fp, r2
 8002674:	2603      	movs	r6, #3
 8002676:	4642      	mov	r2, r8
 8002678:	2701      	movs	r7, #1
 800267a:	4097      	lsls	r7, r2
 800267c:	21a6      	movs	r1, #166	@ 0xa6
 800267e:	003a      	movs	r2, r7
 8002680:	00c9      	lsls	r1, r1, #3
 8002682:	400a      	ands	r2, r1
 8002684:	420f      	tst	r7, r1
 8002686:	d031      	beq.n	80026ec <__aeabi_dmul+0x170>
 8002688:	9e02      	ldr	r6, [sp, #8]
 800268a:	2e02      	cmp	r6, #2
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0x114>
 800268e:	e235      	b.n	8002afc <__aeabi_dmul+0x580>
 8002690:	2e03      	cmp	r6, #3
 8002692:	d100      	bne.n	8002696 <__aeabi_dmul+0x11a>
 8002694:	e1d2      	b.n	8002a3c <__aeabi_dmul+0x4c0>
 8002696:	4654      	mov	r4, sl
 8002698:	4648      	mov	r0, r9
 800269a:	2e01      	cmp	r6, #1
 800269c:	d0c1      	beq.n	8002622 <__aeabi_dmul+0xa6>
 800269e:	9a01      	ldr	r2, [sp, #4]
 80026a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002898 <__aeabi_dmul+0x31c>)
 80026a2:	4694      	mov	ip, r2
 80026a4:	4463      	add	r3, ip
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dc00      	bgt.n	80026ac <__aeabi_dmul+0x130>
 80026aa:	e0c0      	b.n	800282e <__aeabi_dmul+0x2b2>
 80026ac:	0742      	lsls	r2, r0, #29
 80026ae:	d009      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b0:	220f      	movs	r2, #15
 80026b2:	4002      	ands	r2, r0
 80026b4:	2a04      	cmp	r2, #4
 80026b6:	d005      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b8:	1d02      	adds	r2, r0, #4
 80026ba:	4282      	cmp	r2, r0
 80026bc:	4180      	sbcs	r0, r0
 80026be:	4240      	negs	r0, r0
 80026c0:	1824      	adds	r4, r4, r0
 80026c2:	0010      	movs	r0, r2
 80026c4:	01e2      	lsls	r2, r4, #7
 80026c6:	d506      	bpl.n	80026d6 <__aeabi_dmul+0x15a>
 80026c8:	4b74      	ldr	r3, [pc, #464]	@ (800289c <__aeabi_dmul+0x320>)
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	401c      	ands	r4, r3
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	4694      	mov	ip, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4463      	add	r3, ip
 80026d6:	4a72      	ldr	r2, [pc, #456]	@ (80028a0 <__aeabi_dmul+0x324>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	dc6b      	bgt.n	80027b4 <__aeabi_dmul+0x238>
 80026dc:	0762      	lsls	r2, r4, #29
 80026de:	08c0      	lsrs	r0, r0, #3
 80026e0:	0264      	lsls	r4, r4, #9
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4302      	orrs	r2, r0
 80026e6:	0b24      	lsrs	r4, r4, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e79d      	b.n	8002628 <__aeabi_dmul+0xac>
 80026ec:	2190      	movs	r1, #144	@ 0x90
 80026ee:	0089      	lsls	r1, r1, #2
 80026f0:	420f      	tst	r7, r1
 80026f2:	d163      	bne.n	80027bc <__aeabi_dmul+0x240>
 80026f4:	2288      	movs	r2, #136	@ 0x88
 80026f6:	423a      	tst	r2, r7
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0x180>
 80026fa:	e0d7      	b.n	80028ac <__aeabi_dmul+0x330>
 80026fc:	9b00      	ldr	r3, [sp, #0]
 80026fe:	46a2      	mov	sl, r4
 8002700:	469b      	mov	fp, r3
 8002702:	4681      	mov	r9, r0
 8002704:	9602      	str	r6, [sp, #8]
 8002706:	e7bf      	b.n	8002688 <__aeabi_dmul+0x10c>
 8002708:	0023      	movs	r3, r4
 800270a:	4333      	orrs	r3, r6
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0x194>
 800270e:	e07f      	b.n	8002810 <__aeabi_dmul+0x294>
 8002710:	2c00      	cmp	r4, #0
 8002712:	d100      	bne.n	8002716 <__aeabi_dmul+0x19a>
 8002714:	e1ad      	b.n	8002a72 <__aeabi_dmul+0x4f6>
 8002716:	0020      	movs	r0, r4
 8002718:	f000 ff10 	bl	800353c <__clzsi2>
 800271c:	0002      	movs	r2, r0
 800271e:	0003      	movs	r3, r0
 8002720:	3a0b      	subs	r2, #11
 8002722:	201d      	movs	r0, #29
 8002724:	0019      	movs	r1, r3
 8002726:	1a82      	subs	r2, r0, r2
 8002728:	0030      	movs	r0, r6
 800272a:	3908      	subs	r1, #8
 800272c:	40d0      	lsrs	r0, r2
 800272e:	408c      	lsls	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	0030      	movs	r0, r6
 8002734:	4088      	lsls	r0, r1
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002738:	1aeb      	subs	r3, r5, r3
 800273a:	4694      	mov	ip, r2
 800273c:	4463      	add	r3, ip
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	4642      	mov	r2, r8
 8002744:	2600      	movs	r6, #0
 8002746:	2a0a      	cmp	r2, #10
 8002748:	dc00      	bgt.n	800274c <__aeabi_dmul+0x1d0>
 800274a:	e75a      	b.n	8002602 <__aeabi_dmul+0x86>
 800274c:	e79c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800274e:	4653      	mov	r3, sl
 8002750:	4303      	orrs	r3, r0
 8002752:	4699      	mov	r9, r3
 8002754:	d054      	beq.n	8002800 <__aeabi_dmul+0x284>
 8002756:	4653      	mov	r3, sl
 8002758:	2b00      	cmp	r3, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x1e2>
 800275c:	e177      	b.n	8002a4e <__aeabi_dmul+0x4d2>
 800275e:	4650      	mov	r0, sl
 8002760:	f000 feec 	bl	800353c <__clzsi2>
 8002764:	230b      	movs	r3, #11
 8002766:	425b      	negs	r3, r3
 8002768:	469c      	mov	ip, r3
 800276a:	0002      	movs	r2, r0
 800276c:	4484      	add	ip, r0
 800276e:	0011      	movs	r1, r2
 8002770:	4650      	mov	r0, sl
 8002772:	3908      	subs	r1, #8
 8002774:	4088      	lsls	r0, r1
 8002776:	231d      	movs	r3, #29
 8002778:	4680      	mov	r8, r0
 800277a:	4660      	mov	r0, ip
 800277c:	1a1b      	subs	r3, r3, r0
 800277e:	0020      	movs	r0, r4
 8002780:	40d8      	lsrs	r0, r3
 8002782:	0003      	movs	r3, r0
 8002784:	4640      	mov	r0, r8
 8002786:	4303      	orrs	r3, r0
 8002788:	469a      	mov	sl, r3
 800278a:	0023      	movs	r3, r4
 800278c:	408b      	lsls	r3, r1
 800278e:	4699      	mov	r9, r3
 8002790:	2300      	movs	r3, #0
 8002792:	4d44      	ldr	r5, [pc, #272]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002794:	4698      	mov	r8, r3
 8002796:	1aad      	subs	r5, r5, r2
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	e715      	b.n	80025c8 <__aeabi_dmul+0x4c>
 800279c:	4652      	mov	r2, sl
 800279e:	4302      	orrs	r2, r0
 80027a0:	4691      	mov	r9, r2
 80027a2:	d126      	bne.n	80027f2 <__aeabi_dmul+0x276>
 80027a4:	2200      	movs	r2, #0
 80027a6:	001d      	movs	r5, r3
 80027a8:	2302      	movs	r3, #2
 80027aa:	4692      	mov	sl, r2
 80027ac:	3208      	adds	r2, #8
 80027ae:	4690      	mov	r8, r2
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	e709      	b.n	80025c8 <__aeabi_dmul+0x4c>
 80027b4:	2400      	movs	r4, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <__aeabi_dmul+0x314>)
 80027ba:	e735      	b.n	8002628 <__aeabi_dmul+0xac>
 80027bc:	2300      	movs	r3, #0
 80027be:	2480      	movs	r4, #128	@ 0x80
 80027c0:	469b      	mov	fp, r3
 80027c2:	0324      	lsls	r4, r4, #12
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <__aeabi_dmul+0x314>)
 80027c6:	e72f      	b.n	8002628 <__aeabi_dmul+0xac>
 80027c8:	2202      	movs	r2, #2
 80027ca:	4641      	mov	r1, r8
 80027cc:	4311      	orrs	r1, r2
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4694      	mov	ip, r2
 80027d4:	002a      	movs	r2, r5
 80027d6:	4462      	add	r2, ip
 80027d8:	4688      	mov	r8, r1
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	290a      	cmp	r1, #10
 80027de:	dd00      	ble.n	80027e2 <__aeabi_dmul+0x266>
 80027e0:	e752      	b.n	8002688 <__aeabi_dmul+0x10c>
 80027e2:	465a      	mov	r2, fp
 80027e4:	2000      	movs	r0, #0
 80027e6:	9900      	ldr	r1, [sp, #0]
 80027e8:	0004      	movs	r4, r0
 80027ea:	404a      	eors	r2, r1
 80027ec:	4693      	mov	fp, r2
 80027ee:	2602      	movs	r6, #2
 80027f0:	e70b      	b.n	800260a <__aeabi_dmul+0x8e>
 80027f2:	220c      	movs	r2, #12
 80027f4:	001d      	movs	r5, r3
 80027f6:	2303      	movs	r3, #3
 80027f8:	4681      	mov	r9, r0
 80027fa:	4690      	mov	r8, r2
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	e6e3      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002800:	2300      	movs	r3, #0
 8002802:	469a      	mov	sl, r3
 8002804:	3304      	adds	r3, #4
 8002806:	4698      	mov	r8, r3
 8002808:	3b03      	subs	r3, #3
 800280a:	2500      	movs	r5, #0
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	e6db      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002810:	4642      	mov	r2, r8
 8002812:	3301      	adds	r3, #1
 8002814:	431a      	orrs	r2, r3
 8002816:	002b      	movs	r3, r5
 8002818:	4690      	mov	r8, r2
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	9201      	str	r2, [sp, #4]
 800281e:	4642      	mov	r2, r8
 8002820:	2400      	movs	r4, #0
 8002822:	2000      	movs	r0, #0
 8002824:	2601      	movs	r6, #1
 8002826:	2a0a      	cmp	r2, #10
 8002828:	dc00      	bgt.n	800282c <__aeabi_dmul+0x2b0>
 800282a:	e6ea      	b.n	8002602 <__aeabi_dmul+0x86>
 800282c:	e72c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800282e:	2201      	movs	r2, #1
 8002830:	1ad2      	subs	r2, r2, r3
 8002832:	2a38      	cmp	r2, #56	@ 0x38
 8002834:	dd00      	ble.n	8002838 <__aeabi_dmul+0x2bc>
 8002836:	e6f4      	b.n	8002622 <__aeabi_dmul+0xa6>
 8002838:	2a1f      	cmp	r2, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dmul+0x2c2>
 800283c:	e12a      	b.n	8002a94 <__aeabi_dmul+0x518>
 800283e:	211f      	movs	r1, #31
 8002840:	4249      	negs	r1, r1
 8002842:	1acb      	subs	r3, r1, r3
 8002844:	0021      	movs	r1, r4
 8002846:	40d9      	lsrs	r1, r3
 8002848:	000b      	movs	r3, r1
 800284a:	2a20      	cmp	r2, #32
 800284c:	d005      	beq.n	800285a <__aeabi_dmul+0x2de>
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <__aeabi_dmul+0x32c>)
 8002850:	9d01      	ldr	r5, [sp, #4]
 8002852:	4694      	mov	ip, r2
 8002854:	4465      	add	r5, ip
 8002856:	40ac      	lsls	r4, r5
 8002858:	4320      	orrs	r0, r4
 800285a:	1e42      	subs	r2, r0, #1
 800285c:	4190      	sbcs	r0, r2
 800285e:	4318      	orrs	r0, r3
 8002860:	2307      	movs	r3, #7
 8002862:	0019      	movs	r1, r3
 8002864:	2400      	movs	r4, #0
 8002866:	4001      	ands	r1, r0
 8002868:	4203      	tst	r3, r0
 800286a:	d00c      	beq.n	8002886 <__aeabi_dmul+0x30a>
 800286c:	230f      	movs	r3, #15
 800286e:	4003      	ands	r3, r0
 8002870:	2b04      	cmp	r3, #4
 8002872:	d100      	bne.n	8002876 <__aeabi_dmul+0x2fa>
 8002874:	e140      	b.n	8002af8 <__aeabi_dmul+0x57c>
 8002876:	1d03      	adds	r3, r0, #4
 8002878:	4283      	cmp	r3, r0
 800287a:	41a4      	sbcs	r4, r4
 800287c:	0018      	movs	r0, r3
 800287e:	4264      	negs	r4, r4
 8002880:	0761      	lsls	r1, r4, #29
 8002882:	0264      	lsls	r4, r4, #9
 8002884:	0b24      	lsrs	r4, r4, #12
 8002886:	08c2      	lsrs	r2, r0, #3
 8002888:	2300      	movs	r3, #0
 800288a:	430a      	orrs	r2, r1
 800288c:	e6cc      	b.n	8002628 <__aeabi_dmul+0xac>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	000007ff 	.word	0x000007ff
 8002894:	fffffc01 	.word	0xfffffc01
 8002898:	000003ff 	.word	0x000003ff
 800289c:	feffffff 	.word	0xfeffffff
 80028a0:	000007fe 	.word	0x000007fe
 80028a4:	fffffc0d 	.word	0xfffffc0d
 80028a8:	0000043e 	.word	0x0000043e
 80028ac:	4649      	mov	r1, r9
 80028ae:	464a      	mov	r2, r9
 80028b0:	0409      	lsls	r1, r1, #16
 80028b2:	0c09      	lsrs	r1, r1, #16
 80028b4:	000d      	movs	r5, r1
 80028b6:	0c16      	lsrs	r6, r2, #16
 80028b8:	0c02      	lsrs	r2, r0, #16
 80028ba:	0400      	lsls	r0, r0, #16
 80028bc:	0c00      	lsrs	r0, r0, #16
 80028be:	4345      	muls	r5, r0
 80028c0:	46ac      	mov	ip, r5
 80028c2:	0005      	movs	r5, r0
 80028c4:	4375      	muls	r5, r6
 80028c6:	46a8      	mov	r8, r5
 80028c8:	0015      	movs	r5, r2
 80028ca:	000f      	movs	r7, r1
 80028cc:	4375      	muls	r5, r6
 80028ce:	9200      	str	r2, [sp, #0]
 80028d0:	9502      	str	r5, [sp, #8]
 80028d2:	002a      	movs	r2, r5
 80028d4:	9d00      	ldr	r5, [sp, #0]
 80028d6:	436f      	muls	r7, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	0c2d      	lsrs	r5, r5, #16
 80028dc:	46a9      	mov	r9, r5
 80028de:	4447      	add	r7, r8
 80028e0:	444f      	add	r7, r9
 80028e2:	45b8      	cmp	r8, r7
 80028e4:	d905      	bls.n	80028f2 <__aeabi_dmul+0x376>
 80028e6:	0015      	movs	r5, r2
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	0252      	lsls	r2, r2, #9
 80028ec:	4690      	mov	r8, r2
 80028ee:	4445      	add	r5, r8
 80028f0:	9502      	str	r5, [sp, #8]
 80028f2:	0c3d      	lsrs	r5, r7, #16
 80028f4:	9503      	str	r5, [sp, #12]
 80028f6:	4665      	mov	r5, ip
 80028f8:	042d      	lsls	r5, r5, #16
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	0c2d      	lsrs	r5, r5, #16
 80028fe:	46ac      	mov	ip, r5
 8002900:	003d      	movs	r5, r7
 8002902:	4465      	add	r5, ip
 8002904:	9504      	str	r5, [sp, #16]
 8002906:	0c25      	lsrs	r5, r4, #16
 8002908:	0424      	lsls	r4, r4, #16
 800290a:	0c24      	lsrs	r4, r4, #16
 800290c:	46ac      	mov	ip, r5
 800290e:	0025      	movs	r5, r4
 8002910:	4375      	muls	r5, r6
 8002912:	46a8      	mov	r8, r5
 8002914:	4665      	mov	r5, ip
 8002916:	000f      	movs	r7, r1
 8002918:	4369      	muls	r1, r5
 800291a:	4441      	add	r1, r8
 800291c:	4689      	mov	r9, r1
 800291e:	4367      	muls	r7, r4
 8002920:	0c39      	lsrs	r1, r7, #16
 8002922:	4449      	add	r1, r9
 8002924:	436e      	muls	r6, r5
 8002926:	4588      	cmp	r8, r1
 8002928:	d903      	bls.n	8002932 <__aeabi_dmul+0x3b6>
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	0252      	lsls	r2, r2, #9
 800292e:	4690      	mov	r8, r2
 8002930:	4446      	add	r6, r8
 8002932:	0c0d      	lsrs	r5, r1, #16
 8002934:	46a8      	mov	r8, r5
 8002936:	0035      	movs	r5, r6
 8002938:	4445      	add	r5, r8
 800293a:	9505      	str	r5, [sp, #20]
 800293c:	9d03      	ldr	r5, [sp, #12]
 800293e:	043f      	lsls	r7, r7, #16
 8002940:	46a8      	mov	r8, r5
 8002942:	0c3f      	lsrs	r7, r7, #16
 8002944:	0409      	lsls	r1, r1, #16
 8002946:	19c9      	adds	r1, r1, r7
 8002948:	4488      	add	r8, r1
 800294a:	4645      	mov	r5, r8
 800294c:	9503      	str	r5, [sp, #12]
 800294e:	4655      	mov	r5, sl
 8002950:	042e      	lsls	r6, r5, #16
 8002952:	0c36      	lsrs	r6, r6, #16
 8002954:	0c2f      	lsrs	r7, r5, #16
 8002956:	0035      	movs	r5, r6
 8002958:	4345      	muls	r5, r0
 800295a:	4378      	muls	r0, r7
 800295c:	4681      	mov	r9, r0
 800295e:	0038      	movs	r0, r7
 8002960:	46a8      	mov	r8, r5
 8002962:	0c2d      	lsrs	r5, r5, #16
 8002964:	46aa      	mov	sl, r5
 8002966:	9a00      	ldr	r2, [sp, #0]
 8002968:	4350      	muls	r0, r2
 800296a:	4372      	muls	r2, r6
 800296c:	444a      	add	r2, r9
 800296e:	4452      	add	r2, sl
 8002970:	4591      	cmp	r9, r2
 8002972:	d903      	bls.n	800297c <__aeabi_dmul+0x400>
 8002974:	2580      	movs	r5, #128	@ 0x80
 8002976:	026d      	lsls	r5, r5, #9
 8002978:	46a9      	mov	r9, r5
 800297a:	4448      	add	r0, r9
 800297c:	0c15      	lsrs	r5, r2, #16
 800297e:	46a9      	mov	r9, r5
 8002980:	4645      	mov	r5, r8
 8002982:	042d      	lsls	r5, r5, #16
 8002984:	0c2d      	lsrs	r5, r5, #16
 8002986:	46a8      	mov	r8, r5
 8002988:	4665      	mov	r5, ip
 800298a:	437d      	muls	r5, r7
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	4448      	add	r0, r9
 8002990:	4490      	add	r8, r2
 8002992:	46a9      	mov	r9, r5
 8002994:	0032      	movs	r2, r6
 8002996:	4665      	mov	r5, ip
 8002998:	4362      	muls	r2, r4
 800299a:	436e      	muls	r6, r5
 800299c:	437c      	muls	r4, r7
 800299e:	0c17      	lsrs	r7, r2, #16
 80029a0:	1936      	adds	r6, r6, r4
 80029a2:	19bf      	adds	r7, r7, r6
 80029a4:	42bc      	cmp	r4, r7
 80029a6:	d903      	bls.n	80029b0 <__aeabi_dmul+0x434>
 80029a8:	2480      	movs	r4, #128	@ 0x80
 80029aa:	0264      	lsls	r4, r4, #9
 80029ac:	46a4      	mov	ip, r4
 80029ae:	44e1      	add	r9, ip
 80029b0:	9c02      	ldr	r4, [sp, #8]
 80029b2:	9e03      	ldr	r6, [sp, #12]
 80029b4:	46a4      	mov	ip, r4
 80029b6:	9d05      	ldr	r5, [sp, #20]
 80029b8:	4466      	add	r6, ip
 80029ba:	428e      	cmp	r6, r1
 80029bc:	4189      	sbcs	r1, r1
 80029be:	46ac      	mov	ip, r5
 80029c0:	0412      	lsls	r2, r2, #16
 80029c2:	043c      	lsls	r4, r7, #16
 80029c4:	0c12      	lsrs	r2, r2, #16
 80029c6:	18a2      	adds	r2, r4, r2
 80029c8:	4462      	add	r2, ip
 80029ca:	4249      	negs	r1, r1
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4446      	add	r6, r8
 80029d0:	46a4      	mov	ip, r4
 80029d2:	4546      	cmp	r6, r8
 80029d4:	41a4      	sbcs	r4, r4
 80029d6:	4682      	mov	sl, r0
 80029d8:	4264      	negs	r4, r4
 80029da:	46a0      	mov	r8, r4
 80029dc:	42aa      	cmp	r2, r5
 80029de:	4192      	sbcs	r2, r2
 80029e0:	458c      	cmp	ip, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	44e2      	add	sl, ip
 80029e6:	44d0      	add	r8, sl
 80029e8:	4249      	negs	r1, r1
 80029ea:	4252      	negs	r2, r2
 80029ec:	430a      	orrs	r2, r1
 80029ee:	45a0      	cmp	r8, r4
 80029f0:	41a4      	sbcs	r4, r4
 80029f2:	4582      	cmp	sl, r0
 80029f4:	4189      	sbcs	r1, r1
 80029f6:	4264      	negs	r4, r4
 80029f8:	4249      	negs	r1, r1
 80029fa:	430c      	orrs	r4, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	0c3f      	lsrs	r7, r7, #16
 8002a00:	19d2      	adds	r2, r2, r7
 8002a02:	1912      	adds	r2, r2, r4
 8002a04:	0dcc      	lsrs	r4, r1, #23
 8002a06:	9904      	ldr	r1, [sp, #16]
 8002a08:	0270      	lsls	r0, r6, #9
 8002a0a:	4308      	orrs	r0, r1
 8002a0c:	1e41      	subs	r1, r0, #1
 8002a0e:	4188      	sbcs	r0, r1
 8002a10:	4641      	mov	r1, r8
 8002a12:	444a      	add	r2, r9
 8002a14:	0df6      	lsrs	r6, r6, #23
 8002a16:	0252      	lsls	r2, r2, #9
 8002a18:	4330      	orrs	r0, r6
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	4314      	orrs	r4, r2
 8002a1e:	4308      	orrs	r0, r1
 8002a20:	01d2      	lsls	r2, r2, #7
 8002a22:	d535      	bpl.n	8002a90 <__aeabi_dmul+0x514>
 8002a24:	2201      	movs	r2, #1
 8002a26:	0843      	lsrs	r3, r0, #1
 8002a28:	4002      	ands	r2, r0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	07e0      	lsls	r0, r4, #31
 8002a2e:	4318      	orrs	r0, r3
 8002a30:	0864      	lsrs	r4, r4, #1
 8002a32:	e634      	b.n	800269e <__aeabi_dmul+0x122>
 8002a34:	9b00      	ldr	r3, [sp, #0]
 8002a36:	46a2      	mov	sl, r4
 8002a38:	469b      	mov	fp, r3
 8002a3a:	4681      	mov	r9, r0
 8002a3c:	2480      	movs	r4, #128	@ 0x80
 8002a3e:	4653      	mov	r3, sl
 8002a40:	0324      	lsls	r4, r4, #12
 8002a42:	431c      	orrs	r4, r3
 8002a44:	0324      	lsls	r4, r4, #12
 8002a46:	464a      	mov	r2, r9
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002a4a:	0b24      	lsrs	r4, r4, #12
 8002a4c:	e5ec      	b.n	8002628 <__aeabi_dmul+0xac>
 8002a4e:	f000 fd75 	bl	800353c <__clzsi2>
 8002a52:	2315      	movs	r3, #21
 8002a54:	469c      	mov	ip, r3
 8002a56:	4484      	add	ip, r0
 8002a58:	0002      	movs	r2, r0
 8002a5a:	4663      	mov	r3, ip
 8002a5c:	3220      	adds	r2, #32
 8002a5e:	2b1c      	cmp	r3, #28
 8002a60:	dc00      	bgt.n	8002a64 <__aeabi_dmul+0x4e8>
 8002a62:	e684      	b.n	800276e <__aeabi_dmul+0x1f2>
 8002a64:	2300      	movs	r3, #0
 8002a66:	4699      	mov	r9, r3
 8002a68:	0023      	movs	r3, r4
 8002a6a:	3808      	subs	r0, #8
 8002a6c:	4083      	lsls	r3, r0
 8002a6e:	469a      	mov	sl, r3
 8002a70:	e68e      	b.n	8002790 <__aeabi_dmul+0x214>
 8002a72:	f000 fd63 	bl	800353c <__clzsi2>
 8002a76:	0002      	movs	r2, r0
 8002a78:	0003      	movs	r3, r0
 8002a7a:	3215      	adds	r2, #21
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	2a1c      	cmp	r2, #28
 8002a80:	dc00      	bgt.n	8002a84 <__aeabi_dmul+0x508>
 8002a82:	e64e      	b.n	8002722 <__aeabi_dmul+0x1a6>
 8002a84:	0002      	movs	r2, r0
 8002a86:	0034      	movs	r4, r6
 8002a88:	3a08      	subs	r2, #8
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4094      	lsls	r4, r2
 8002a8e:	e652      	b.n	8002736 <__aeabi_dmul+0x1ba>
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	e604      	b.n	800269e <__aeabi_dmul+0x122>
 8002a94:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <__aeabi_dmul+0x58c>)
 8002a96:	0021      	movs	r1, r4
 8002a98:	469c      	mov	ip, r3
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	9d01      	ldr	r5, [sp, #4]
 8002a9e:	40d3      	lsrs	r3, r2
 8002aa0:	4465      	add	r5, ip
 8002aa2:	40a9      	lsls	r1, r5
 8002aa4:	4319      	orrs	r1, r3
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	40ab      	lsls	r3, r5
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	4183      	sbcs	r3, r0
 8002aae:	4319      	orrs	r1, r3
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	40d4      	lsrs	r4, r2
 8002ab4:	074b      	lsls	r3, r1, #29
 8002ab6:	d009      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ab8:	230f      	movs	r3, #15
 8002aba:	400b      	ands	r3, r1
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d005      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ac0:	1d0b      	adds	r3, r1, #4
 8002ac2:	428b      	cmp	r3, r1
 8002ac4:	4180      	sbcs	r0, r0
 8002ac6:	4240      	negs	r0, r0
 8002ac8:	1824      	adds	r4, r4, r0
 8002aca:	0018      	movs	r0, r3
 8002acc:	0223      	lsls	r3, r4, #8
 8002ace:	d400      	bmi.n	8002ad2 <__aeabi_dmul+0x556>
 8002ad0:	e6d6      	b.n	8002880 <__aeabi_dmul+0x304>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	e5a6      	b.n	8002628 <__aeabi_dmul+0xac>
 8002ada:	290f      	cmp	r1, #15
 8002adc:	d1aa      	bne.n	8002a34 <__aeabi_dmul+0x4b8>
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	421a      	tst	r2, r3
 8002ae6:	d0a9      	beq.n	8002a3c <__aeabi_dmul+0x4c0>
 8002ae8:	421c      	tst	r4, r3
 8002aea:	d1a7      	bne.n	8002a3c <__aeabi_dmul+0x4c0>
 8002aec:	431c      	orrs	r4, r3
 8002aee:	9b00      	ldr	r3, [sp, #0]
 8002af0:	0002      	movs	r2, r0
 8002af2:	469b      	mov	fp, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002af6:	e597      	b.n	8002628 <__aeabi_dmul+0xac>
 8002af8:	2400      	movs	r4, #0
 8002afa:	e6c1      	b.n	8002880 <__aeabi_dmul+0x304>
 8002afc:	2400      	movs	r4, #0
 8002afe:	4b01      	ldr	r3, [pc, #4]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002b00:	0022      	movs	r2, r4
 8002b02:	e591      	b.n	8002628 <__aeabi_dmul+0xac>
 8002b04:	000007ff 	.word	0x000007ff
 8002b08:	0000041e 	.word	0x0000041e

08002b0c <__aeabi_dsub>:
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	464e      	mov	r6, r9
 8002b10:	4645      	mov	r5, r8
 8002b12:	46de      	mov	lr, fp
 8002b14:	4657      	mov	r7, sl
 8002b16:	b5e0      	push	{r5, r6, r7, lr}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	9000      	str	r0, [sp, #0]
 8002b1c:	9101      	str	r1, [sp, #4]
 8002b1e:	030c      	lsls	r4, r1, #12
 8002b20:	004f      	lsls	r7, r1, #1
 8002b22:	0fce      	lsrs	r6, r1, #31
 8002b24:	0a61      	lsrs	r1, r4, #9
 8002b26:	9c00      	ldr	r4, [sp, #0]
 8002b28:	46b0      	mov	r8, r6
 8002b2a:	0f64      	lsrs	r4, r4, #29
 8002b2c:	430c      	orrs	r4, r1
 8002b2e:	9900      	ldr	r1, [sp, #0]
 8002b30:	0d7f      	lsrs	r7, r7, #21
 8002b32:	00c8      	lsls	r0, r1, #3
 8002b34:	0011      	movs	r1, r2
 8002b36:	001a      	movs	r2, r3
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	469c      	mov	ip, r3
 8002b3c:	9100      	str	r1, [sp, #0]
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	0051      	lsls	r1, r2, #1
 8002b42:	0d4b      	lsrs	r3, r1, #21
 8002b44:	4699      	mov	r9, r3
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	9d00      	ldr	r5, [sp, #0]
 8002b4a:	0fd9      	lsrs	r1, r3, #31
 8002b4c:	4663      	mov	r3, ip
 8002b4e:	0f6a      	lsrs	r2, r5, #29
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	4313      	orrs	r3, r2
 8002b54:	00ea      	lsls	r2, r5, #3
 8002b56:	4694      	mov	ip, r2
 8002b58:	4693      	mov	fp, r2
 8002b5a:	4ac1      	ldr	r2, [pc, #772]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002b5c:	9003      	str	r0, [sp, #12]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	4591      	cmp	r9, r2
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x5a>
 8002b64:	e0cd      	b.n	8002d02 <__aeabi_dsub+0x1f6>
 8002b66:	2501      	movs	r5, #1
 8002b68:	4069      	eors	r1, r5
 8002b6a:	464d      	mov	r5, r9
 8002b6c:	1b7d      	subs	r5, r7, r5
 8002b6e:	46aa      	mov	sl, r5
 8002b70:	428e      	cmp	r6, r1
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x6a>
 8002b74:	e080      	b.n	8002c78 <__aeabi_dsub+0x16c>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	dc00      	bgt.n	8002b7c <__aeabi_dsub+0x70>
 8002b7a:	e335      	b.n	80031e8 <__aeabi_dsub+0x6dc>
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x78>
 8002b82:	e0df      	b.n	8002d44 <__aeabi_dsub+0x238>
 8002b84:	4297      	cmp	r7, r2
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x7e>
 8002b88:	e194      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002b8a:	4652      	mov	r2, sl
 8002b8c:	2501      	movs	r5, #1
 8002b8e:	2a38      	cmp	r2, #56	@ 0x38
 8002b90:	dc19      	bgt.n	8002bc6 <__aeabi_dsub+0xba>
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	9b02      	ldr	r3, [sp, #8]
 8002b96:	0412      	lsls	r2, r2, #16
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	4652      	mov	r2, sl
 8002b9e:	2a1f      	cmp	r2, #31
 8002ba0:	dd00      	ble.n	8002ba4 <__aeabi_dsub+0x98>
 8002ba2:	e1e3      	b.n	8002f6c <__aeabi_dsub+0x460>
 8002ba4:	4653      	mov	r3, sl
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	4661      	mov	r1, ip
 8002baa:	9d02      	ldr	r5, [sp, #8]
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	4095      	lsls	r5, r2
 8002bb0:	40d9      	lsrs	r1, r3
 8002bb2:	430d      	orrs	r5, r1
 8002bb4:	4661      	mov	r1, ip
 8002bb6:	4091      	lsls	r1, r2
 8002bb8:	000a      	movs	r2, r1
 8002bba:	1e51      	subs	r1, r2, #1
 8002bbc:	418a      	sbcs	r2, r1
 8002bbe:	4315      	orrs	r5, r2
 8002bc0:	9a02      	ldr	r2, [sp, #8]
 8002bc2:	40da      	lsrs	r2, r3
 8002bc4:	1aa4      	subs	r4, r4, r2
 8002bc6:	1b45      	subs	r5, r0, r5
 8002bc8:	42a8      	cmp	r0, r5
 8002bca:	4180      	sbcs	r0, r0
 8002bcc:	4240      	negs	r0, r0
 8002bce:	1a24      	subs	r4, r4, r0
 8002bd0:	0223      	lsls	r3, r4, #8
 8002bd2:	d400      	bmi.n	8002bd6 <__aeabi_dsub+0xca>
 8002bd4:	e13d      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002bd6:	0264      	lsls	r4, r4, #9
 8002bd8:	0a64      	lsrs	r4, r4, #9
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0xd4>
 8002bde:	e147      	b.n	8002e70 <__aeabi_dsub+0x364>
 8002be0:	0020      	movs	r0, r4
 8002be2:	f000 fcab 	bl	800353c <__clzsi2>
 8002be6:	0003      	movs	r3, r0
 8002be8:	3b08      	subs	r3, #8
 8002bea:	2120      	movs	r1, #32
 8002bec:	0028      	movs	r0, r5
 8002bee:	1aca      	subs	r2, r1, r3
 8002bf0:	40d0      	lsrs	r0, r2
 8002bf2:	409c      	lsls	r4, r3
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	409d      	lsls	r5, r3
 8002bf8:	4322      	orrs	r2, r4
 8002bfa:	429f      	cmp	r7, r3
 8002bfc:	dd00      	ble.n	8002c00 <__aeabi_dsub+0xf4>
 8002bfe:	e177      	b.n	8002ef0 <__aeabi_dsub+0x3e4>
 8002c00:	1bd8      	subs	r0, r3, r7
 8002c02:	3001      	adds	r0, #1
 8002c04:	1a09      	subs	r1, r1, r0
 8002c06:	002c      	movs	r4, r5
 8002c08:	408d      	lsls	r5, r1
 8002c0a:	40c4      	lsrs	r4, r0
 8002c0c:	1e6b      	subs	r3, r5, #1
 8002c0e:	419d      	sbcs	r5, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	40c2      	lsrs	r2, r0
 8002c14:	408b      	lsls	r3, r1
 8002c16:	4325      	orrs	r5, r4
 8002c18:	2700      	movs	r7, #0
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	431d      	orrs	r5, r3
 8002c1e:	076b      	lsls	r3, r5, #29
 8002c20:	d009      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c22:	230f      	movs	r3, #15
 8002c24:	402b      	ands	r3, r5
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d005      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c2a:	1d2b      	adds	r3, r5, #4
 8002c2c:	42ab      	cmp	r3, r5
 8002c2e:	41ad      	sbcs	r5, r5
 8002c30:	426d      	negs	r5, r5
 8002c32:	1964      	adds	r4, r4, r5
 8002c34:	001d      	movs	r5, r3
 8002c36:	0223      	lsls	r3, r4, #8
 8002c38:	d400      	bmi.n	8002c3c <__aeabi_dsub+0x130>
 8002c3a:	e140      	b.n	8002ebe <__aeabi_dsub+0x3b2>
 8002c3c:	4a88      	ldr	r2, [pc, #544]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002c3e:	3701      	adds	r7, #1
 8002c40:	4297      	cmp	r7, r2
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dsub+0x13a>
 8002c44:	e101      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002c46:	2601      	movs	r6, #1
 8002c48:	4643      	mov	r3, r8
 8002c4a:	4986      	ldr	r1, [pc, #536]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002c4c:	08ed      	lsrs	r5, r5, #3
 8002c4e:	4021      	ands	r1, r4
 8002c50:	074a      	lsls	r2, r1, #29
 8002c52:	432a      	orrs	r2, r5
 8002c54:	057c      	lsls	r4, r7, #21
 8002c56:	024d      	lsls	r5, r1, #9
 8002c58:	0b2d      	lsrs	r5, r5, #12
 8002c5a:	0d64      	lsrs	r4, r4, #21
 8002c5c:	401e      	ands	r6, r3
 8002c5e:	0524      	lsls	r4, r4, #20
 8002c60:	432c      	orrs	r4, r5
 8002c62:	07f6      	lsls	r6, r6, #31
 8002c64:	4334      	orrs	r4, r6
 8002c66:	0010      	movs	r0, r2
 8002c68:	0021      	movs	r1, r4
 8002c6a:	b005      	add	sp, #20
 8002c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c6e:	46bb      	mov	fp, r7
 8002c70:	46b2      	mov	sl, r6
 8002c72:	46a9      	mov	r9, r5
 8002c74:	46a0      	mov	r8, r4
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x172>
 8002c7c:	e2d0      	b.n	8003220 <__aeabi_dsub+0x714>
 8002c7e:	4649      	mov	r1, r9
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x17a>
 8002c84:	e0d4      	b.n	8002e30 <__aeabi_dsub+0x324>
 8002c86:	4661      	mov	r1, ip
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x184>
 8002c8e:	e12b      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002c90:	1e69      	subs	r1, r5, #1
 8002c92:	2d01      	cmp	r5, #1
 8002c94:	d100      	bne.n	8002c98 <__aeabi_dsub+0x18c>
 8002c96:	e1d9      	b.n	800304c <__aeabi_dsub+0x540>
 8002c98:	4295      	cmp	r5, r2
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x192>
 8002c9c:	e10a      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002c9e:	2501      	movs	r5, #1
 8002ca0:	2938      	cmp	r1, #56	@ 0x38
 8002ca2:	dc17      	bgt.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002ca4:	468a      	mov	sl, r1
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	2b1f      	cmp	r3, #31
 8002caa:	dd00      	ble.n	8002cae <__aeabi_dsub+0x1a2>
 8002cac:	e1e7      	b.n	800307e <__aeabi_dsub+0x572>
 8002cae:	2220      	movs	r2, #32
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	9b02      	ldr	r3, [sp, #8]
 8002cb4:	4661      	mov	r1, ip
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	001d      	movs	r5, r3
 8002cba:	4653      	mov	r3, sl
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	430d      	orrs	r5, r1
 8002cc6:	1e51      	subs	r1, r2, #1
 8002cc8:	418a      	sbcs	r2, r1
 8002cca:	4653      	mov	r3, sl
 8002ccc:	4315      	orrs	r5, r2
 8002cce:	9a02      	ldr	r2, [sp, #8]
 8002cd0:	40da      	lsrs	r2, r3
 8002cd2:	18a4      	adds	r4, r4, r2
 8002cd4:	182d      	adds	r5, r5, r0
 8002cd6:	4285      	cmp	r5, r0
 8002cd8:	4180      	sbcs	r0, r0
 8002cda:	4240      	negs	r0, r0
 8002cdc:	1824      	adds	r4, r4, r0
 8002cde:	0223      	lsls	r3, r4, #8
 8002ce0:	d400      	bmi.n	8002ce4 <__aeabi_dsub+0x1d8>
 8002ce2:	e0b6      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002ce6:	3701      	adds	r7, #1
 8002ce8:	429f      	cmp	r7, r3
 8002cea:	d100      	bne.n	8002cee <__aeabi_dsub+0x1e2>
 8002cec:	e0ad      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002cf2:	086a      	lsrs	r2, r5, #1
 8002cf4:	401c      	ands	r4, r3
 8002cf6:	4029      	ands	r1, r5
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	07e5      	lsls	r5, r4, #31
 8002cfc:	4315      	orrs	r5, r2
 8002cfe:	0864      	lsrs	r4, r4, #1
 8002d00:	e78d      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002d02:	4a59      	ldr	r2, [pc, #356]	@ (8002e68 <__aeabi_dsub+0x35c>)
 8002d04:	9b02      	ldr	r3, [sp, #8]
 8002d06:	4692      	mov	sl, r2
 8002d08:	4662      	mov	r2, ip
 8002d0a:	44ba      	add	sl, r7
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	d02c      	beq.n	8002d6a <__aeabi_dsub+0x25e>
 8002d10:	428e      	cmp	r6, r1
 8002d12:	d02e      	beq.n	8002d72 <__aeabi_dsub+0x266>
 8002d14:	4652      	mov	r2, sl
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d060      	beq.n	8002ddc <__aeabi_dsub+0x2d0>
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d100      	bne.n	8002d20 <__aeabi_dsub+0x214>
 8002d1e:	e0db      	b.n	8002ed8 <__aeabi_dsub+0x3cc>
 8002d20:	4663      	mov	r3, ip
 8002d22:	000e      	movs	r6, r1
 8002d24:	9c02      	ldr	r4, [sp, #8]
 8002d26:	08d8      	lsrs	r0, r3, #3
 8002d28:	0762      	lsls	r2, r4, #29
 8002d2a:	4302      	orrs	r2, r0
 8002d2c:	08e4      	lsrs	r4, r4, #3
 8002d2e:	0013      	movs	r3, r2
 8002d30:	4323      	orrs	r3, r4
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x22a>
 8002d34:	e254      	b.n	80031e0 <__aeabi_dsub+0x6d4>
 8002d36:	2580      	movs	r5, #128	@ 0x80
 8002d38:	032d      	lsls	r5, r5, #12
 8002d3a:	4325      	orrs	r5, r4
 8002d3c:	032d      	lsls	r5, r5, #12
 8002d3e:	4c48      	ldr	r4, [pc, #288]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d40:	0b2d      	lsrs	r5, r5, #12
 8002d42:	e78c      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002d44:	4661      	mov	r1, ip
 8002d46:	9b02      	ldr	r3, [sp, #8]
 8002d48:	4319      	orrs	r1, r3
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x242>
 8002d4c:	e0cc      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002d4e:	0029      	movs	r1, r5
 8002d50:	3901      	subs	r1, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x24c>
 8002d56:	e188      	b.n	800306a <__aeabi_dsub+0x55e>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x252>
 8002d5c:	e0aa      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dd00      	ble.n	8002d66 <__aeabi_dsub+0x25a>
 8002d64:	e72f      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002d66:	468a      	mov	sl, r1
 8002d68:	e718      	b.n	8002b9c <__aeabi_dsub+0x90>
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4051      	eors	r1, r2
 8002d6e:	428e      	cmp	r6, r1
 8002d70:	d1d0      	bne.n	8002d14 <__aeabi_dsub+0x208>
 8002d72:	4653      	mov	r3, sl
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x26e>
 8002d78:	e0be      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	d000      	beq.n	8002d80 <__aeabi_dsub+0x274>
 8002d7e:	e138      	b.n	8002ff2 <__aeabi_dsub+0x4e6>
 8002d80:	46ca      	mov	sl, r9
 8002d82:	0022      	movs	r2, r4
 8002d84:	4302      	orrs	r2, r0
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x27e>
 8002d88:	e1e2      	b.n	8003150 <__aeabi_dsub+0x644>
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	1e59      	subs	r1, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d100      	bne.n	8002d94 <__aeabi_dsub+0x288>
 8002d92:	e20d      	b.n	80031b0 <__aeabi_dsub+0x6a4>
 8002d94:	4a32      	ldr	r2, [pc, #200]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d96:	4592      	cmp	sl, r2
 8002d98:	d100      	bne.n	8002d9c <__aeabi_dsub+0x290>
 8002d9a:	e1d2      	b.n	8003142 <__aeabi_dsub+0x636>
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	2938      	cmp	r1, #56	@ 0x38
 8002da0:	dc13      	bgt.n	8002dca <__aeabi_dsub+0x2be>
 8002da2:	291f      	cmp	r1, #31
 8002da4:	dd00      	ble.n	8002da8 <__aeabi_dsub+0x29c>
 8002da6:	e1ee      	b.n	8003186 <__aeabi_dsub+0x67a>
 8002da8:	2220      	movs	r2, #32
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	1a52      	subs	r2, r2, r1
 8002dae:	0025      	movs	r5, r4
 8002db0:	0007      	movs	r7, r0
 8002db2:	469a      	mov	sl, r3
 8002db4:	40cc      	lsrs	r4, r1
 8002db6:	4090      	lsls	r0, r2
 8002db8:	4095      	lsls	r5, r2
 8002dba:	40cf      	lsrs	r7, r1
 8002dbc:	44a2      	add	sl, r4
 8002dbe:	1e42      	subs	r2, r0, #1
 8002dc0:	4190      	sbcs	r0, r2
 8002dc2:	4653      	mov	r3, sl
 8002dc4:	432f      	orrs	r7, r5
 8002dc6:	4307      	orrs	r7, r0
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	003d      	movs	r5, r7
 8002dcc:	4465      	add	r5, ip
 8002dce:	4565      	cmp	r5, ip
 8002dd0:	4192      	sbcs	r2, r2
 8002dd2:	9b02      	ldr	r3, [sp, #8]
 8002dd4:	4252      	negs	r2, r2
 8002dd6:	464f      	mov	r7, r9
 8002dd8:	18d4      	adds	r4, r2, r3
 8002dda:	e780      	b.n	8002cde <__aeabi_dsub+0x1d2>
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <__aeabi_dsub+0x360>)
 8002dde:	1c7d      	adds	r5, r7, #1
 8002de0:	4215      	tst	r5, r2
 8002de2:	d000      	beq.n	8002de6 <__aeabi_dsub+0x2da>
 8002de4:	e0aa      	b.n	8002f3c <__aeabi_dsub+0x430>
 8002de6:	4662      	mov	r2, ip
 8002de8:	0025      	movs	r5, r4
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	4305      	orrs	r5, r0
 8002dee:	431a      	orrs	r2, r3
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	d000      	beq.n	8002df6 <__aeabi_dsub+0x2ea>
 8002df4:	e0f5      	b.n	8002fe2 <__aeabi_dsub+0x4d6>
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x2f0>
 8002dfa:	e16b      	b.n	80030d4 <__aeabi_dsub+0x5c8>
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d100      	bne.n	8002e02 <__aeabi_dsub+0x2f6>
 8002e00:	e152      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002e02:	4663      	mov	r3, ip
 8002e04:	1ac5      	subs	r5, r0, r3
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	1ae2      	subs	r2, r4, r3
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	419b      	sbcs	r3, r3
 8002e0e:	425b      	negs	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	d400      	bmi.n	8002e18 <__aeabi_dsub+0x30c>
 8002e16:	e1d5      	b.n	80031c4 <__aeabi_dsub+0x6b8>
 8002e18:	4663      	mov	r3, ip
 8002e1a:	1a1d      	subs	r5, r3, r0
 8002e1c:	45ac      	cmp	ip, r5
 8002e1e:	4192      	sbcs	r2, r2
 8002e20:	2601      	movs	r6, #1
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	4252      	negs	r2, r2
 8002e26:	1b1c      	subs	r4, r3, r4
 8002e28:	4688      	mov	r8, r1
 8002e2a:	1aa4      	subs	r4, r4, r2
 8002e2c:	400e      	ands	r6, r1
 8002e2e:	e6f6      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002e30:	4297      	cmp	r7, r2
 8002e32:	d03f      	beq.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002e34:	4652      	mov	r2, sl
 8002e36:	2501      	movs	r5, #1
 8002e38:	2a38      	cmp	r2, #56	@ 0x38
 8002e3a:	dd00      	ble.n	8002e3e <__aeabi_dsub+0x332>
 8002e3c:	e74a      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	9b02      	ldr	r3, [sp, #8]
 8002e42:	0412      	lsls	r2, r2, #16
 8002e44:	4313      	orrs	r3, r2
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	e72d      	b.n	8002ca6 <__aeabi_dsub+0x19a>
 8002e4a:	003c      	movs	r4, r7
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	e705      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002e52:	2307      	movs	r3, #7
 8002e54:	402b      	ands	r3, r5
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x350>
 8002e5a:	e6e2      	b.n	8002c22 <__aeabi_dsub+0x116>
 8002e5c:	e06b      	b.n	8002f36 <__aeabi_dsub+0x42a>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	000007ff 	.word	0x000007ff
 8002e64:	ff7fffff 	.word	0xff7fffff
 8002e68:	fffff801 	.word	0xfffff801
 8002e6c:	000007fe 	.word	0x000007fe
 8002e70:	0028      	movs	r0, r5
 8002e72:	f000 fb63 	bl	800353c <__clzsi2>
 8002e76:	0003      	movs	r3, r0
 8002e78:	3318      	adds	r3, #24
 8002e7a:	2b1f      	cmp	r3, #31
 8002e7c:	dc00      	bgt.n	8002e80 <__aeabi_dsub+0x374>
 8002e7e:	e6b4      	b.n	8002bea <__aeabi_dsub+0xde>
 8002e80:	002a      	movs	r2, r5
 8002e82:	3808      	subs	r0, #8
 8002e84:	4082      	lsls	r2, r0
 8002e86:	429f      	cmp	r7, r3
 8002e88:	dd00      	ble.n	8002e8c <__aeabi_dsub+0x380>
 8002e8a:	e0b9      	b.n	8003000 <__aeabi_dsub+0x4f4>
 8002e8c:	1bdb      	subs	r3, r3, r7
 8002e8e:	1c58      	adds	r0, r3, #1
 8002e90:	281f      	cmp	r0, #31
 8002e92:	dc00      	bgt.n	8002e96 <__aeabi_dsub+0x38a>
 8002e94:	e1a0      	b.n	80031d8 <__aeabi_dsub+0x6cc>
 8002e96:	0015      	movs	r5, r2
 8002e98:	3b1f      	subs	r3, #31
 8002e9a:	40dd      	lsrs	r5, r3
 8002e9c:	2820      	cmp	r0, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x3a0>
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	1e53      	subs	r3, r2, #1
 8002ea8:	419a      	sbcs	r2, r3
 8002eaa:	4315      	orrs	r5, r2
 8002eac:	2307      	movs	r3, #7
 8002eae:	2700      	movs	r7, #0
 8002eb0:	402b      	ands	r3, r5
 8002eb2:	e7d0      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8002eb4:	08c0      	lsrs	r0, r0, #3
 8002eb6:	0762      	lsls	r2, r4, #29
 8002eb8:	4302      	orrs	r2, r0
 8002eba:	08e4      	lsrs	r4, r4, #3
 8002ebc:	e737      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ebe:	08ea      	lsrs	r2, r5, #3
 8002ec0:	0763      	lsls	r3, r4, #29
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4bd3      	ldr	r3, [pc, #844]	@ (8003214 <__aeabi_dsub+0x708>)
 8002ec6:	08e4      	lsrs	r4, r4, #3
 8002ec8:	429f      	cmp	r7, r3
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x3c2>
 8002ecc:	e72f      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ece:	0324      	lsls	r4, r4, #12
 8002ed0:	0b25      	lsrs	r5, r4, #12
 8002ed2:	057c      	lsls	r4, r7, #21
 8002ed4:	0d64      	lsrs	r4, r4, #21
 8002ed6:	e6c2      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002ed8:	46ca      	mov	sl, r9
 8002eda:	0022      	movs	r2, r4
 8002edc:	4302      	orrs	r2, r0
 8002ede:	d158      	bne.n	8002f92 <__aeabi_dsub+0x486>
 8002ee0:	4663      	mov	r3, ip
 8002ee2:	000e      	movs	r6, r1
 8002ee4:	9c02      	ldr	r4, [sp, #8]
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	4657      	mov	r7, sl
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	e7e7      	b.n	8002ec0 <__aeabi_dsub+0x3b4>
 8002ef0:	4cc9      	ldr	r4, [pc, #804]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002ef2:	1aff      	subs	r7, r7, r3
 8002ef4:	4014      	ands	r4, r2
 8002ef6:	e692      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002ef8:	4dc8      	ldr	r5, [pc, #800]	@ (800321c <__aeabi_dsub+0x710>)
 8002efa:	1c7a      	adds	r2, r7, #1
 8002efc:	422a      	tst	r2, r5
 8002efe:	d000      	beq.n	8002f02 <__aeabi_dsub+0x3f6>
 8002f00:	e084      	b.n	800300c <__aeabi_dsub+0x500>
 8002f02:	0022      	movs	r2, r4
 8002f04:	4302      	orrs	r2, r0
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d000      	beq.n	8002f0c <__aeabi_dsub+0x400>
 8002f0a:	e0ef      	b.n	80030ec <__aeabi_dsub+0x5e0>
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x406>
 8002f10:	e0e5      	b.n	80030de <__aeabi_dsub+0x5d2>
 8002f12:	4662      	mov	r2, ip
 8002f14:	9902      	ldr	r1, [sp, #8]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	d100      	bne.n	8002f1c <__aeabi_dsub+0x410>
 8002f1a:	e0c5      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002f1c:	4663      	mov	r3, ip
 8002f1e:	18c5      	adds	r5, r0, r3
 8002f20:	468c      	mov	ip, r1
 8002f22:	4285      	cmp	r5, r0
 8002f24:	4180      	sbcs	r0, r0
 8002f26:	4464      	add	r4, ip
 8002f28:	4240      	negs	r0, r0
 8002f2a:	1824      	adds	r4, r4, r0
 8002f2c:	0223      	lsls	r3, r4, #8
 8002f2e:	d502      	bpl.n	8002f36 <__aeabi_dsub+0x42a>
 8002f30:	4bb9      	ldr	r3, [pc, #740]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002f32:	3701      	adds	r7, #1
 8002f34:	401c      	ands	r4, r3
 8002f36:	46ba      	mov	sl, r7
 8002f38:	9503      	str	r5, [sp, #12]
 8002f3a:	e7d5      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002f3c:	4662      	mov	r2, ip
 8002f3e:	1a85      	subs	r5, r0, r2
 8002f40:	42a8      	cmp	r0, r5
 8002f42:	4192      	sbcs	r2, r2
 8002f44:	4252      	negs	r2, r2
 8002f46:	4691      	mov	r9, r2
 8002f48:	9b02      	ldr	r3, [sp, #8]
 8002f4a:	1ae3      	subs	r3, r4, r3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1ad2      	subs	r2, r2, r3
 8002f52:	0013      	movs	r3, r2
 8002f54:	4691      	mov	r9, r2
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	d46c      	bmi.n	8003034 <__aeabi_dsub+0x528>
 8002f5a:	464a      	mov	r2, r9
 8002f5c:	464c      	mov	r4, r9
 8002f5e:	432a      	orrs	r2, r5
 8002f60:	d000      	beq.n	8002f64 <__aeabi_dsub+0x458>
 8002f62:	e63a      	b.n	8002bda <__aeabi_dsub+0xce>
 8002f64:	2600      	movs	r6, #0
 8002f66:	2400      	movs	r4, #0
 8002f68:	2500      	movs	r5, #0
 8002f6a:	e678      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002f6c:	9902      	ldr	r1, [sp, #8]
 8002f6e:	4653      	mov	r3, sl
 8002f70:	000d      	movs	r5, r1
 8002f72:	3a20      	subs	r2, #32
 8002f74:	40d5      	lsrs	r5, r2
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d006      	beq.n	8002f88 <__aeabi_dsub+0x47c>
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	000b      	movs	r3, r1
 8002f80:	4093      	lsls	r3, r2
 8002f82:	4662      	mov	r2, ip
 8002f84:	431a      	orrs	r2, r3
 8002f86:	4693      	mov	fp, r2
 8002f88:	465b      	mov	r3, fp
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	4193      	sbcs	r3, r2
 8002f8e:	431d      	orrs	r5, r3
 8002f90:	e619      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002f92:	4653      	mov	r3, sl
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d100      	bne.n	8002f9c <__aeabi_dsub+0x490>
 8002f9a:	e0c6      	b.n	800312a <__aeabi_dsub+0x61e>
 8002f9c:	4e9d      	ldr	r6, [pc, #628]	@ (8003214 <__aeabi_dsub+0x708>)
 8002f9e:	45b2      	cmp	sl, r6
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x498>
 8002fa2:	e6bd      	b.n	8002d20 <__aeabi_dsub+0x214>
 8002fa4:	4688      	mov	r8, r1
 8002fa6:	000e      	movs	r6, r1
 8002fa8:	2501      	movs	r5, #1
 8002faa:	2a38      	cmp	r2, #56	@ 0x38
 8002fac:	dc10      	bgt.n	8002fd0 <__aeabi_dsub+0x4c4>
 8002fae:	2a1f      	cmp	r2, #31
 8002fb0:	dc7f      	bgt.n	80030b2 <__aeabi_dsub+0x5a6>
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	0025      	movs	r5, r4
 8002fb6:	1a89      	subs	r1, r1, r2
 8002fb8:	0007      	movs	r7, r0
 8002fba:	4088      	lsls	r0, r1
 8002fbc:	408d      	lsls	r5, r1
 8002fbe:	40d7      	lsrs	r7, r2
 8002fc0:	40d4      	lsrs	r4, r2
 8002fc2:	1e41      	subs	r1, r0, #1
 8002fc4:	4188      	sbcs	r0, r1
 8002fc6:	9b02      	ldr	r3, [sp, #8]
 8002fc8:	433d      	orrs	r5, r7
 8002fca:	1b1b      	subs	r3, r3, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	4662      	mov	r2, ip
 8002fd2:	1b55      	subs	r5, r2, r5
 8002fd4:	45ac      	cmp	ip, r5
 8002fd6:	4192      	sbcs	r2, r2
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4252      	negs	r2, r2
 8002fdc:	464f      	mov	r7, r9
 8002fde:	1a9c      	subs	r4, r3, r2
 8002fe0:	e5f6      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	d000      	beq.n	8002fe8 <__aeabi_dsub+0x4dc>
 8002fe6:	e0b7      	b.n	8003158 <__aeabi_dsub+0x64c>
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d100      	bne.n	8002fee <__aeabi_dsub+0x4e2>
 8002fec:	e0f0      	b.n	80031d0 <__aeabi_dsub+0x6c4>
 8002fee:	2601      	movs	r6, #1
 8002ff0:	400e      	ands	r6, r1
 8002ff2:	4663      	mov	r3, ip
 8002ff4:	9802      	ldr	r0, [sp, #8]
 8002ff6:	08d9      	lsrs	r1, r3, #3
 8002ff8:	0742      	lsls	r2, r0, #29
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	08c4      	lsrs	r4, r0, #3
 8002ffe:	e696      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003000:	4c85      	ldr	r4, [pc, #532]	@ (8003218 <__aeabi_dsub+0x70c>)
 8003002:	1aff      	subs	r7, r7, r3
 8003004:	4014      	ands	r4, r2
 8003006:	0762      	lsls	r2, r4, #29
 8003008:	08e4      	lsrs	r4, r4, #3
 800300a:	e760      	b.n	8002ece <__aeabi_dsub+0x3c2>
 800300c:	4981      	ldr	r1, [pc, #516]	@ (8003214 <__aeabi_dsub+0x708>)
 800300e:	428a      	cmp	r2, r1
 8003010:	d100      	bne.n	8003014 <__aeabi_dsub+0x508>
 8003012:	e0c9      	b.n	80031a8 <__aeabi_dsub+0x69c>
 8003014:	4663      	mov	r3, ip
 8003016:	18c1      	adds	r1, r0, r3
 8003018:	4281      	cmp	r1, r0
 800301a:	4180      	sbcs	r0, r0
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	4240      	negs	r0, r0
 8003020:	18e3      	adds	r3, r4, r3
 8003022:	181b      	adds	r3, r3, r0
 8003024:	07dd      	lsls	r5, r3, #31
 8003026:	085c      	lsrs	r4, r3, #1
 8003028:	2307      	movs	r3, #7
 800302a:	0849      	lsrs	r1, r1, #1
 800302c:	430d      	orrs	r5, r1
 800302e:	0017      	movs	r7, r2
 8003030:	402b      	ands	r3, r5
 8003032:	e710      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8003034:	4663      	mov	r3, ip
 8003036:	1a1d      	subs	r5, r3, r0
 8003038:	45ac      	cmp	ip, r5
 800303a:	4192      	sbcs	r2, r2
 800303c:	2601      	movs	r6, #1
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	4252      	negs	r2, r2
 8003042:	1b1c      	subs	r4, r3, r4
 8003044:	4688      	mov	r8, r1
 8003046:	1aa4      	subs	r4, r4, r2
 8003048:	400e      	ands	r6, r1
 800304a:	e5c6      	b.n	8002bda <__aeabi_dsub+0xce>
 800304c:	4663      	mov	r3, ip
 800304e:	18c5      	adds	r5, r0, r3
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	4285      	cmp	r5, r0
 8003054:	4180      	sbcs	r0, r0
 8003056:	469c      	mov	ip, r3
 8003058:	4240      	negs	r0, r0
 800305a:	4464      	add	r4, ip
 800305c:	1824      	adds	r4, r4, r0
 800305e:	2701      	movs	r7, #1
 8003060:	0223      	lsls	r3, r4, #8
 8003062:	d400      	bmi.n	8003066 <__aeabi_dsub+0x55a>
 8003064:	e6f5      	b.n	8002e52 <__aeabi_dsub+0x346>
 8003066:	2702      	movs	r7, #2
 8003068:	e641      	b.n	8002cee <__aeabi_dsub+0x1e2>
 800306a:	4663      	mov	r3, ip
 800306c:	1ac5      	subs	r5, r0, r3
 800306e:	42a8      	cmp	r0, r5
 8003070:	4180      	sbcs	r0, r0
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	4240      	negs	r0, r0
 8003076:	1ae4      	subs	r4, r4, r3
 8003078:	2701      	movs	r7, #1
 800307a:	1a24      	subs	r4, r4, r0
 800307c:	e5a8      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 800307e:	9d02      	ldr	r5, [sp, #8]
 8003080:	4652      	mov	r2, sl
 8003082:	002b      	movs	r3, r5
 8003084:	3a20      	subs	r2, #32
 8003086:	40d3      	lsrs	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	4653      	mov	r3, sl
 800308c:	2b20      	cmp	r3, #32
 800308e:	d006      	beq.n	800309e <__aeabi_dsub+0x592>
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	002b      	movs	r3, r5
 8003096:	4093      	lsls	r3, r2
 8003098:	4662      	mov	r2, ip
 800309a:	431a      	orrs	r2, r3
 800309c:	4693      	mov	fp, r2
 800309e:	465d      	mov	r5, fp
 80030a0:	1e6b      	subs	r3, r5, #1
 80030a2:	419d      	sbcs	r5, r3
 80030a4:	430d      	orrs	r5, r1
 80030a6:	e615      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 80030a8:	0762      	lsls	r2, r4, #29
 80030aa:	08c0      	lsrs	r0, r0, #3
 80030ac:	4302      	orrs	r2, r0
 80030ae:	08e4      	lsrs	r4, r4, #3
 80030b0:	e70d      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030b2:	0011      	movs	r1, r2
 80030b4:	0027      	movs	r7, r4
 80030b6:	3920      	subs	r1, #32
 80030b8:	40cf      	lsrs	r7, r1
 80030ba:	2a20      	cmp	r2, #32
 80030bc:	d005      	beq.n	80030ca <__aeabi_dsub+0x5be>
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	1a8a      	subs	r2, r1, r2
 80030c2:	4094      	lsls	r4, r2
 80030c4:	0025      	movs	r5, r4
 80030c6:	4305      	orrs	r5, r0
 80030c8:	9503      	str	r5, [sp, #12]
 80030ca:	9d03      	ldr	r5, [sp, #12]
 80030cc:	1e6a      	subs	r2, r5, #1
 80030ce:	4195      	sbcs	r5, r2
 80030d0:	433d      	orrs	r5, r7
 80030d2:	e77d      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d100      	bne.n	80030da <__aeabi_dsub+0x5ce>
 80030d8:	e744      	b.n	8002f64 <__aeabi_dsub+0x458>
 80030da:	2601      	movs	r6, #1
 80030dc:	400e      	ands	r6, r1
 80030de:	4663      	mov	r3, ip
 80030e0:	08d9      	lsrs	r1, r3, #3
 80030e2:	9b02      	ldr	r3, [sp, #8]
 80030e4:	075a      	lsls	r2, r3, #29
 80030e6:	430a      	orrs	r2, r1
 80030e8:	08dc      	lsrs	r4, r3, #3
 80030ea:	e6f0      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d028      	beq.n	8003142 <__aeabi_dsub+0x636>
 80030f0:	4662      	mov	r2, ip
 80030f2:	9f02      	ldr	r7, [sp, #8]
 80030f4:	08c0      	lsrs	r0, r0, #3
 80030f6:	433a      	orrs	r2, r7
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x5f0>
 80030fa:	e6dc      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 80030fc:	0762      	lsls	r2, r4, #29
 80030fe:	4310      	orrs	r0, r2
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	08e4      	lsrs	r4, r4, #3
 8003104:	0312      	lsls	r2, r2, #12
 8003106:	4214      	tst	r4, r2
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x612>
 800310a:	08fd      	lsrs	r5, r7, #3
 800310c:	4215      	tst	r5, r2
 800310e:	d106      	bne.n	800311e <__aeabi_dsub+0x612>
 8003110:	4663      	mov	r3, ip
 8003112:	2601      	movs	r6, #1
 8003114:	002c      	movs	r4, r5
 8003116:	08d8      	lsrs	r0, r3, #3
 8003118:	077b      	lsls	r3, r7, #29
 800311a:	4318      	orrs	r0, r3
 800311c:	400e      	ands	r6, r1
 800311e:	0f42      	lsrs	r2, r0, #29
 8003120:	00c0      	lsls	r0, r0, #3
 8003122:	08c0      	lsrs	r0, r0, #3
 8003124:	0752      	lsls	r2, r2, #29
 8003126:	4302      	orrs	r2, r0
 8003128:	e601      	b.n	8002d2e <__aeabi_dsub+0x222>
 800312a:	4663      	mov	r3, ip
 800312c:	1a1d      	subs	r5, r3, r0
 800312e:	45ac      	cmp	ip, r5
 8003130:	4192      	sbcs	r2, r2
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4252      	negs	r2, r2
 8003136:	1b1c      	subs	r4, r3, r4
 8003138:	000e      	movs	r6, r1
 800313a:	4688      	mov	r8, r1
 800313c:	2701      	movs	r7, #1
 800313e:	1aa4      	subs	r4, r4, r2
 8003140:	e546      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8003142:	4663      	mov	r3, ip
 8003144:	08d9      	lsrs	r1, r3, #3
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	075a      	lsls	r2, r3, #29
 800314a:	430a      	orrs	r2, r1
 800314c:	08dc      	lsrs	r4, r3, #3
 800314e:	e5ee      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003150:	4663      	mov	r3, ip
 8003152:	9c02      	ldr	r4, [sp, #8]
 8003154:	9303      	str	r3, [sp, #12]
 8003156:	e6c7      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8003158:	08c0      	lsrs	r0, r0, #3
 800315a:	2a00      	cmp	r2, #0
 800315c:	d100      	bne.n	8003160 <__aeabi_dsub+0x654>
 800315e:	e6aa      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 8003160:	0762      	lsls	r2, r4, #29
 8003162:	4310      	orrs	r0, r2
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	08e4      	lsrs	r4, r4, #3
 8003168:	0312      	lsls	r2, r2, #12
 800316a:	4214      	tst	r4, r2
 800316c:	d0d7      	beq.n	800311e <__aeabi_dsub+0x612>
 800316e:	9f02      	ldr	r7, [sp, #8]
 8003170:	08fd      	lsrs	r5, r7, #3
 8003172:	4215      	tst	r5, r2
 8003174:	d1d3      	bne.n	800311e <__aeabi_dsub+0x612>
 8003176:	4663      	mov	r3, ip
 8003178:	2601      	movs	r6, #1
 800317a:	08d8      	lsrs	r0, r3, #3
 800317c:	077b      	lsls	r3, r7, #29
 800317e:	002c      	movs	r4, r5
 8003180:	4318      	orrs	r0, r3
 8003182:	400e      	ands	r6, r1
 8003184:	e7cb      	b.n	800311e <__aeabi_dsub+0x612>
 8003186:	000a      	movs	r2, r1
 8003188:	0027      	movs	r7, r4
 800318a:	3a20      	subs	r2, #32
 800318c:	40d7      	lsrs	r7, r2
 800318e:	2920      	cmp	r1, #32
 8003190:	d005      	beq.n	800319e <__aeabi_dsub+0x692>
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	1a52      	subs	r2, r2, r1
 8003196:	4094      	lsls	r4, r2
 8003198:	0025      	movs	r5, r4
 800319a:	4305      	orrs	r5, r0
 800319c:	9503      	str	r5, [sp, #12]
 800319e:	9d03      	ldr	r5, [sp, #12]
 80031a0:	1e6a      	subs	r2, r5, #1
 80031a2:	4195      	sbcs	r5, r2
 80031a4:	432f      	orrs	r7, r5
 80031a6:	e610      	b.n	8002dca <__aeabi_dsub+0x2be>
 80031a8:	0014      	movs	r4, r2
 80031aa:	2500      	movs	r5, #0
 80031ac:	2200      	movs	r2, #0
 80031ae:	e556      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031b0:	9b02      	ldr	r3, [sp, #8]
 80031b2:	4460      	add	r0, ip
 80031b4:	4699      	mov	r9, r3
 80031b6:	4560      	cmp	r0, ip
 80031b8:	4192      	sbcs	r2, r2
 80031ba:	444c      	add	r4, r9
 80031bc:	4252      	negs	r2, r2
 80031be:	0005      	movs	r5, r0
 80031c0:	18a4      	adds	r4, r4, r2
 80031c2:	e74c      	b.n	800305e <__aeabi_dsub+0x552>
 80031c4:	001a      	movs	r2, r3
 80031c6:	001c      	movs	r4, r3
 80031c8:	432a      	orrs	r2, r5
 80031ca:	d000      	beq.n	80031ce <__aeabi_dsub+0x6c2>
 80031cc:	e6b3      	b.n	8002f36 <__aeabi_dsub+0x42a>
 80031ce:	e6c9      	b.n	8002f64 <__aeabi_dsub+0x458>
 80031d0:	2480      	movs	r4, #128	@ 0x80
 80031d2:	2600      	movs	r6, #0
 80031d4:	0324      	lsls	r4, r4, #12
 80031d6:	e5ae      	b.n	8002d36 <__aeabi_dsub+0x22a>
 80031d8:	2120      	movs	r1, #32
 80031da:	2500      	movs	r5, #0
 80031dc:	1a09      	subs	r1, r1, r0
 80031de:	e517      	b.n	8002c10 <__aeabi_dsub+0x104>
 80031e0:	2200      	movs	r2, #0
 80031e2:	2500      	movs	r5, #0
 80031e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003214 <__aeabi_dsub+0x708>)
 80031e6:	e53a      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	d100      	bne.n	80031ee <__aeabi_dsub+0x6e2>
 80031ec:	e5f6      	b.n	8002ddc <__aeabi_dsub+0x2d0>
 80031ee:	464b      	mov	r3, r9
 80031f0:	1bda      	subs	r2, r3, r7
 80031f2:	4692      	mov	sl, r2
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	d100      	bne.n	80031fa <__aeabi_dsub+0x6ee>
 80031f8:	e66f      	b.n	8002eda <__aeabi_dsub+0x3ce>
 80031fa:	2a38      	cmp	r2, #56	@ 0x38
 80031fc:	dc05      	bgt.n	800320a <__aeabi_dsub+0x6fe>
 80031fe:	2680      	movs	r6, #128	@ 0x80
 8003200:	0436      	lsls	r6, r6, #16
 8003202:	4334      	orrs	r4, r6
 8003204:	4688      	mov	r8, r1
 8003206:	000e      	movs	r6, r1
 8003208:	e6d1      	b.n	8002fae <__aeabi_dsub+0x4a2>
 800320a:	4688      	mov	r8, r1
 800320c:	000e      	movs	r6, r1
 800320e:	2501      	movs	r5, #1
 8003210:	e6de      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	000007ff 	.word	0x000007ff
 8003218:	ff7fffff 	.word	0xff7fffff
 800321c:	000007fe 	.word	0x000007fe
 8003220:	2d00      	cmp	r5, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x71a>
 8003224:	e668      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8003226:	464b      	mov	r3, r9
 8003228:	1bd9      	subs	r1, r3, r7
 800322a:	2f00      	cmp	r7, #0
 800322c:	d101      	bne.n	8003232 <__aeabi_dsub+0x726>
 800322e:	468a      	mov	sl, r1
 8003230:	e5a7      	b.n	8002d82 <__aeabi_dsub+0x276>
 8003232:	2701      	movs	r7, #1
 8003234:	2938      	cmp	r1, #56	@ 0x38
 8003236:	dd00      	ble.n	800323a <__aeabi_dsub+0x72e>
 8003238:	e5c7      	b.n	8002dca <__aeabi_dsub+0x2be>
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	0412      	lsls	r2, r2, #16
 800323e:	4314      	orrs	r4, r2
 8003240:	e5af      	b.n	8002da2 <__aeabi_dsub+0x296>
 8003242:	46c0      	nop			@ (mov r8, r8)

08003244 <__aeabi_dcmpun>:
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	46c6      	mov	lr, r8
 8003248:	031e      	lsls	r6, r3, #12
 800324a:	0b36      	lsrs	r6, r6, #12
 800324c:	46b0      	mov	r8, r6
 800324e:	4e0d      	ldr	r6, [pc, #52]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003250:	030c      	lsls	r4, r1, #12
 8003252:	004d      	lsls	r5, r1, #1
 8003254:	005f      	lsls	r7, r3, #1
 8003256:	b500      	push	{lr}
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d6d      	lsrs	r5, r5, #21
 800325c:	0d7f      	lsrs	r7, r7, #21
 800325e:	42b5      	cmp	r5, r6
 8003260:	d00b      	beq.n	800327a <__aeabi_dcmpun+0x36>
 8003262:	4908      	ldr	r1, [pc, #32]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003264:	2000      	movs	r0, #0
 8003266:	428f      	cmp	r7, r1
 8003268:	d104      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 800326a:	4646      	mov	r6, r8
 800326c:	4316      	orrs	r6, r2
 800326e:	0030      	movs	r0, r6
 8003270:	1e43      	subs	r3, r0, #1
 8003272:	4198      	sbcs	r0, r3
 8003274:	bc80      	pop	{r7}
 8003276:	46b8      	mov	r8, r7
 8003278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800327a:	4304      	orrs	r4, r0
 800327c:	2001      	movs	r0, #1
 800327e:	2c00      	cmp	r4, #0
 8003280:	d1f8      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 8003282:	e7ee      	b.n	8003262 <__aeabi_dcmpun+0x1e>
 8003284:	000007ff 	.word	0x000007ff

08003288 <__aeabi_d2iz>:
 8003288:	000b      	movs	r3, r1
 800328a:	0002      	movs	r2, r0
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d16      	ldr	r5, [pc, #88]	@ (80032e8 <__aeabi_d2iz+0x60>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	b082      	sub	sp, #8
 8003294:	0049      	lsls	r1, r1, #1
 8003296:	2000      	movs	r0, #0
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	0b24      	lsrs	r4, r4, #12
 800329e:	0d49      	lsrs	r1, r1, #21
 80032a0:	0fde      	lsrs	r6, r3, #31
 80032a2:	42a9      	cmp	r1, r5
 80032a4:	dd04      	ble.n	80032b0 <__aeabi_d2iz+0x28>
 80032a6:	4811      	ldr	r0, [pc, #68]	@ (80032ec <__aeabi_d2iz+0x64>)
 80032a8:	4281      	cmp	r1, r0
 80032aa:	dd03      	ble.n	80032b4 <__aeabi_d2iz+0x2c>
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <__aeabi_d2iz+0x68>)
 80032ae:	18f0      	adds	r0, r6, r3
 80032b0:	b002      	add	sp, #8
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	2080      	movs	r0, #128	@ 0x80
 80032b6:	0340      	lsls	r0, r0, #13
 80032b8:	4320      	orrs	r0, r4
 80032ba:	4c0e      	ldr	r4, [pc, #56]	@ (80032f4 <__aeabi_d2iz+0x6c>)
 80032bc:	1a64      	subs	r4, r4, r1
 80032be:	2c1f      	cmp	r4, #31
 80032c0:	dd08      	ble.n	80032d4 <__aeabi_d2iz+0x4c>
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <__aeabi_d2iz+0x70>)
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	40d8      	lsrs	r0, r3
 80032c8:	0003      	movs	r3, r0
 80032ca:	4258      	negs	r0, r3
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	d1ef      	bne.n	80032b0 <__aeabi_d2iz+0x28>
 80032d0:	0018      	movs	r0, r3
 80032d2:	e7ed      	b.n	80032b0 <__aeabi_d2iz+0x28>
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <__aeabi_d2iz+0x74>)
 80032d6:	9a00      	ldr	r2, [sp, #0]
 80032d8:	469c      	mov	ip, r3
 80032da:	0003      	movs	r3, r0
 80032dc:	4461      	add	r1, ip
 80032de:	408b      	lsls	r3, r1
 80032e0:	40e2      	lsrs	r2, r4
 80032e2:	4313      	orrs	r3, r2
 80032e4:	e7f1      	b.n	80032ca <__aeabi_d2iz+0x42>
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	000003fe 	.word	0x000003fe
 80032ec:	0000041d 	.word	0x0000041d
 80032f0:	7fffffff 	.word	0x7fffffff
 80032f4:	00000433 	.word	0x00000433
 80032f8:	00000413 	.word	0x00000413
 80032fc:	fffffbed 	.word	0xfffffbed

08003300 <__aeabi_i2d>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2800      	cmp	r0, #0
 8003304:	d016      	beq.n	8003334 <__aeabi_i2d+0x34>
 8003306:	17c3      	asrs	r3, r0, #31
 8003308:	18c5      	adds	r5, r0, r3
 800330a:	405d      	eors	r5, r3
 800330c:	0fc4      	lsrs	r4, r0, #31
 800330e:	0028      	movs	r0, r5
 8003310:	f000 f914 	bl	800353c <__clzsi2>
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <__aeabi_i2d+0x58>)
 8003316:	1a1b      	subs	r3, r3, r0
 8003318:	055b      	lsls	r3, r3, #21
 800331a:	0d5b      	lsrs	r3, r3, #21
 800331c:	280a      	cmp	r0, #10
 800331e:	dc14      	bgt.n	800334a <__aeabi_i2d+0x4a>
 8003320:	0002      	movs	r2, r0
 8003322:	002e      	movs	r6, r5
 8003324:	3215      	adds	r2, #21
 8003326:	4096      	lsls	r6, r2
 8003328:	220b      	movs	r2, #11
 800332a:	1a12      	subs	r2, r2, r0
 800332c:	40d5      	lsrs	r5, r2
 800332e:	032d      	lsls	r5, r5, #12
 8003330:	0b2d      	lsrs	r5, r5, #12
 8003332:	e003      	b.n	800333c <__aeabi_i2d+0x3c>
 8003334:	2400      	movs	r4, #0
 8003336:	2300      	movs	r3, #0
 8003338:	2500      	movs	r5, #0
 800333a:	2600      	movs	r6, #0
 800333c:	051b      	lsls	r3, r3, #20
 800333e:	432b      	orrs	r3, r5
 8003340:	07e4      	lsls	r4, r4, #31
 8003342:	4323      	orrs	r3, r4
 8003344:	0030      	movs	r0, r6
 8003346:	0019      	movs	r1, r3
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	380b      	subs	r0, #11
 800334c:	4085      	lsls	r5, r0
 800334e:	032d      	lsls	r5, r5, #12
 8003350:	2600      	movs	r6, #0
 8003352:	0b2d      	lsrs	r5, r5, #12
 8003354:	e7f2      	b.n	800333c <__aeabi_i2d+0x3c>
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	0000041e 	.word	0x0000041e

0800335c <__aeabi_ui2d>:
 800335c:	b510      	push	{r4, lr}
 800335e:	1e04      	subs	r4, r0, #0
 8003360:	d010      	beq.n	8003384 <__aeabi_ui2d+0x28>
 8003362:	f000 f8eb 	bl	800353c <__clzsi2>
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <__aeabi_ui2d+0x44>)
 8003368:	1a1b      	subs	r3, r3, r0
 800336a:	055b      	lsls	r3, r3, #21
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	280a      	cmp	r0, #10
 8003370:	dc0f      	bgt.n	8003392 <__aeabi_ui2d+0x36>
 8003372:	220b      	movs	r2, #11
 8003374:	0021      	movs	r1, r4
 8003376:	1a12      	subs	r2, r2, r0
 8003378:	40d1      	lsrs	r1, r2
 800337a:	3015      	adds	r0, #21
 800337c:	030a      	lsls	r2, r1, #12
 800337e:	4084      	lsls	r4, r0
 8003380:	0b12      	lsrs	r2, r2, #12
 8003382:	e001      	b.n	8003388 <__aeabi_ui2d+0x2c>
 8003384:	2300      	movs	r3, #0
 8003386:	2200      	movs	r2, #0
 8003388:	051b      	lsls	r3, r3, #20
 800338a:	4313      	orrs	r3, r2
 800338c:	0020      	movs	r0, r4
 800338e:	0019      	movs	r1, r3
 8003390:	bd10      	pop	{r4, pc}
 8003392:	0022      	movs	r2, r4
 8003394:	380b      	subs	r0, #11
 8003396:	4082      	lsls	r2, r0
 8003398:	0312      	lsls	r2, r2, #12
 800339a:	2400      	movs	r4, #0
 800339c:	0b12      	lsrs	r2, r2, #12
 800339e:	e7f3      	b.n	8003388 <__aeabi_ui2d+0x2c>
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_f2d>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	0242      	lsls	r2, r0, #9
 80033a8:	0043      	lsls	r3, r0, #1
 80033aa:	0fc4      	lsrs	r4, r0, #31
 80033ac:	20fe      	movs	r0, #254	@ 0xfe
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	1c59      	adds	r1, r3, #1
 80033b2:	0a55      	lsrs	r5, r2, #9
 80033b4:	4208      	tst	r0, r1
 80033b6:	d00c      	beq.n	80033d2 <__aeabi_f2d+0x2e>
 80033b8:	21e0      	movs	r1, #224	@ 0xe0
 80033ba:	0089      	lsls	r1, r1, #2
 80033bc:	468c      	mov	ip, r1
 80033be:	076d      	lsls	r5, r5, #29
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	4463      	add	r3, ip
 80033c4:	051b      	lsls	r3, r3, #20
 80033c6:	4313      	orrs	r3, r2
 80033c8:	07e4      	lsls	r4, r4, #31
 80033ca:	4323      	orrs	r3, r4
 80033cc:	0028      	movs	r0, r5
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <__aeabi_f2d+0x5c>
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	d01b      	beq.n	8003412 <__aeabi_f2d+0x6e>
 80033da:	0028      	movs	r0, r5
 80033dc:	f000 f8ae 	bl	800353c <__clzsi2>
 80033e0:	280a      	cmp	r0, #10
 80033e2:	dc1c      	bgt.n	800341e <__aeabi_f2d+0x7a>
 80033e4:	230b      	movs	r3, #11
 80033e6:	002a      	movs	r2, r5
 80033e8:	1a1b      	subs	r3, r3, r0
 80033ea:	40da      	lsrs	r2, r3
 80033ec:	0003      	movs	r3, r0
 80033ee:	3315      	adds	r3, #21
 80033f0:	409d      	lsls	r5, r3
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <__aeabi_f2d+0x88>)
 80033f4:	0312      	lsls	r2, r2, #12
 80033f6:	1a1b      	subs	r3, r3, r0
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	0b12      	lsrs	r2, r2, #12
 80033fc:	0d5b      	lsrs	r3, r3, #21
 80033fe:	e7e1      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003400:	2d00      	cmp	r5, #0
 8003402:	d009      	beq.n	8003418 <__aeabi_f2d+0x74>
 8003404:	0b13      	lsrs	r3, r2, #12
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	0312      	lsls	r2, r2, #12
 800340a:	431a      	orrs	r2, r3
 800340c:	076d      	lsls	r5, r5, #29
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <__aeabi_f2d+0x8c>)
 8003410:	e7d8      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003412:	2300      	movs	r3, #0
 8003414:	2200      	movs	r2, #0
 8003416:	e7d5      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003418:	2200      	movs	r2, #0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <__aeabi_f2d+0x8c>)
 800341c:	e7d2      	b.n	80033c4 <__aeabi_f2d+0x20>
 800341e:	0003      	movs	r3, r0
 8003420:	002a      	movs	r2, r5
 8003422:	3b0b      	subs	r3, #11
 8003424:	409a      	lsls	r2, r3
 8003426:	2500      	movs	r5, #0
 8003428:	e7e3      	b.n	80033f2 <__aeabi_f2d+0x4e>
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	00000389 	.word	0x00000389
 8003430:	000007ff 	.word	0x000007ff

08003434 <__aeabi_d2f>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	004b      	lsls	r3, r1, #1
 8003438:	030f      	lsls	r7, r1, #12
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	4c3b      	ldr	r4, [pc, #236]	@ (800352c <__aeabi_d2f+0xf8>)
 800343e:	0f45      	lsrs	r5, r0, #29
 8003440:	b083      	sub	sp, #12
 8003442:	0a7f      	lsrs	r7, r7, #9
 8003444:	1c5e      	adds	r6, r3, #1
 8003446:	432f      	orrs	r7, r5
 8003448:	9000      	str	r0, [sp, #0]
 800344a:	9101      	str	r1, [sp, #4]
 800344c:	0fca      	lsrs	r2, r1, #31
 800344e:	00c5      	lsls	r5, r0, #3
 8003450:	4226      	tst	r6, r4
 8003452:	d00b      	beq.n	800346c <__aeabi_d2f+0x38>
 8003454:	4936      	ldr	r1, [pc, #216]	@ (8003530 <__aeabi_d2f+0xfc>)
 8003456:	185c      	adds	r4, r3, r1
 8003458:	2cfe      	cmp	r4, #254	@ 0xfe
 800345a:	dd13      	ble.n	8003484 <__aeabi_d2f+0x50>
 800345c:	20ff      	movs	r0, #255	@ 0xff
 800345e:	2300      	movs	r3, #0
 8003460:	05c0      	lsls	r0, r0, #23
 8003462:	4318      	orrs	r0, r3
 8003464:	07d2      	lsls	r2, r2, #31
 8003466:	4310      	orrs	r0, r2
 8003468:	b003      	add	sp, #12
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <__aeabi_d2f+0x42>
 8003470:	2000      	movs	r0, #0
 8003472:	2300      	movs	r3, #0
 8003474:	e7f4      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003476:	433d      	orrs	r5, r7
 8003478:	d0f0      	beq.n	800345c <__aeabi_d2f+0x28>
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	03db      	lsls	r3, r3, #15
 800347e:	20ff      	movs	r0, #255	@ 0xff
 8003480:	433b      	orrs	r3, r7
 8003482:	e7ed      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003484:	2c00      	cmp	r4, #0
 8003486:	dd14      	ble.n	80034b2 <__aeabi_d2f+0x7e>
 8003488:	9b00      	ldr	r3, [sp, #0]
 800348a:	00ff      	lsls	r7, r7, #3
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	4183      	sbcs	r3, r0
 8003492:	0f69      	lsrs	r1, r5, #29
 8003494:	433b      	orrs	r3, r7
 8003496:	430b      	orrs	r3, r1
 8003498:	0759      	lsls	r1, r3, #29
 800349a:	d041      	beq.n	8003520 <__aeabi_d2f+0xec>
 800349c:	210f      	movs	r1, #15
 800349e:	4019      	ands	r1, r3
 80034a0:	2904      	cmp	r1, #4
 80034a2:	d028      	beq.n	80034f6 <__aeabi_d2f+0xc2>
 80034a4:	3304      	adds	r3, #4
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	d525      	bpl.n	80034f6 <__aeabi_d2f+0xc2>
 80034aa:	3401      	adds	r4, #1
 80034ac:	2300      	movs	r3, #0
 80034ae:	b2e0      	uxtb	r0, r4
 80034b0:	e7d6      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034b2:	0021      	movs	r1, r4
 80034b4:	3117      	adds	r1, #23
 80034b6:	dbdb      	blt.n	8003470 <__aeabi_d2f+0x3c>
 80034b8:	2180      	movs	r1, #128	@ 0x80
 80034ba:	201e      	movs	r0, #30
 80034bc:	0409      	lsls	r1, r1, #16
 80034be:	4339      	orrs	r1, r7
 80034c0:	1b00      	subs	r0, r0, r4
 80034c2:	281f      	cmp	r0, #31
 80034c4:	dd1b      	ble.n	80034fe <__aeabi_d2f+0xca>
 80034c6:	2602      	movs	r6, #2
 80034c8:	4276      	negs	r6, r6
 80034ca:	1b34      	subs	r4, r6, r4
 80034cc:	000e      	movs	r6, r1
 80034ce:	40e6      	lsrs	r6, r4
 80034d0:	0034      	movs	r4, r6
 80034d2:	2820      	cmp	r0, #32
 80034d4:	d004      	beq.n	80034e0 <__aeabi_d2f+0xac>
 80034d6:	4817      	ldr	r0, [pc, #92]	@ (8003534 <__aeabi_d2f+0x100>)
 80034d8:	4684      	mov	ip, r0
 80034da:	4463      	add	r3, ip
 80034dc:	4099      	lsls	r1, r3
 80034de:	430d      	orrs	r5, r1
 80034e0:	002b      	movs	r3, r5
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	418b      	sbcs	r3, r1
 80034e6:	4323      	orrs	r3, r4
 80034e8:	0759      	lsls	r1, r3, #29
 80034ea:	d015      	beq.n	8003518 <__aeabi_d2f+0xe4>
 80034ec:	210f      	movs	r1, #15
 80034ee:	2400      	movs	r4, #0
 80034f0:	4019      	ands	r1, r3
 80034f2:	2904      	cmp	r1, #4
 80034f4:	d117      	bne.n	8003526 <__aeabi_d2f+0xf2>
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	0a5b      	lsrs	r3, r3, #9
 80034fa:	b2e0      	uxtb	r0, r4
 80034fc:	e7b0      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034fe:	4c0e      	ldr	r4, [pc, #56]	@ (8003538 <__aeabi_d2f+0x104>)
 8003500:	191c      	adds	r4, r3, r4
 8003502:	002b      	movs	r3, r5
 8003504:	40a5      	lsls	r5, r4
 8003506:	40c3      	lsrs	r3, r0
 8003508:	40a1      	lsls	r1, r4
 800350a:	1e68      	subs	r0, r5, #1
 800350c:	4185      	sbcs	r5, r0
 800350e:	4329      	orrs	r1, r5
 8003510:	430b      	orrs	r3, r1
 8003512:	2400      	movs	r4, #0
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d1c1      	bne.n	800349c <__aeabi_d2f+0x68>
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	2000      	movs	r0, #0
 800351c:	0a5b      	lsrs	r3, r3, #9
 800351e:	e79f      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	b2e0      	uxtb	r0, r4
 8003524:	e79c      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003526:	3304      	adds	r3, #4
 8003528:	e7e5      	b.n	80034f6 <__aeabi_d2f+0xc2>
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	000007fe 	.word	0x000007fe
 8003530:	fffffc80 	.word	0xfffffc80
 8003534:	fffffca2 	.word	0xfffffca2
 8003538:	fffffc82 	.word	0xfffffc82

0800353c <__clzsi2>:
 800353c:	211c      	movs	r1, #28
 800353e:	2301      	movs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4298      	cmp	r0, r3
 8003544:	d301      	bcc.n	800354a <__clzsi2+0xe>
 8003546:	0c00      	lsrs	r0, r0, #16
 8003548:	3910      	subs	r1, #16
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	4298      	cmp	r0, r3
 800354e:	d301      	bcc.n	8003554 <__clzsi2+0x18>
 8003550:	0a00      	lsrs	r0, r0, #8
 8003552:	3908      	subs	r1, #8
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	4298      	cmp	r0, r3
 8003558:	d301      	bcc.n	800355e <__clzsi2+0x22>
 800355a:	0900      	lsrs	r0, r0, #4
 800355c:	3904      	subs	r1, #4
 800355e:	a202      	add	r2, pc, #8	@ (adr r2, 8003568 <__clzsi2+0x2c>)
 8003560:	5c10      	ldrb	r0, [r2, r0]
 8003562:	1840      	adds	r0, r0, r1
 8003564:	4770      	bx	lr
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	02020304 	.word	0x02020304
 800356c:	01010101 	.word	0x01010101
	...

08003578 <__clzdi2>:
 8003578:	b510      	push	{r4, lr}
 800357a:	2900      	cmp	r1, #0
 800357c:	d103      	bne.n	8003586 <__clzdi2+0xe>
 800357e:	f7ff ffdd 	bl	800353c <__clzsi2>
 8003582:	3020      	adds	r0, #32
 8003584:	e002      	b.n	800358c <__clzdi2+0x14>
 8003586:	0008      	movs	r0, r1
 8003588:	f7ff ffd8 	bl	800353c <__clzsi2>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)

08003590 <set_ADS_pins>:
				  GPIO_TypeDef *pdwn_port,
				  uint16_t in_pin,
				  uint16_t out_pin,
				  uint16_t pdwdn_pin,
				  void(*f)(int))
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	001a      	movs	r2, r3
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	801a      	strh	r2, [r3, #0]
	IN_PORT = in_port;
 80035a2:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <set_ADS_pins+0x50>)
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]
	OUT_PORT = out_port;
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <set_ADS_pins+0x54>)
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
	PDWN_PORT=pdwn_port;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <set_ADS_pins+0x58>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
	IN_PIN=in_pin;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <set_ADS_pins+0x5c>)
 80035b6:	1cba      	adds	r2, r7, #2
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
	OUT_PIN=out_pin;
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <set_ADS_pins+0x60>)
 80035be:	2318      	movs	r3, #24
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	8013      	strh	r3, [r2, #0]
	PDWDN_PIN=pdwdn_pin;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <set_ADS_pins+0x64>)
 80035c8:	221c      	movs	r2, #28
 80035ca:	18ba      	adds	r2, r7, r2
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	801a      	strh	r2, [r3, #0]
	ads_callback = f;
 80035d0:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <set_ADS_pins+0x68>)
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000318 	.word	0x20000318
 80035e4:	2000031c 	.word	0x2000031c
 80035e8:	20000320 	.word	0x20000320
 80035ec:	20000324 	.word	0x20000324
 80035f0:	20000326 	.word	0x20000326
 80035f4:	20000328 	.word	0x20000328
 80035f8:	2000032c 	.word	0x2000032c

080035fc <Timer_Event>:

void Timer_Event() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0

	MISO_Val=HAL_GPIO_ReadPin(IN_PORT, IN_PIN);
 8003600:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <Timer_Event+0x11c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b45      	ldr	r3, [pc, #276]	@ (800371c <Timer_Event+0x120>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	0019      	movs	r1, r3
 800360a:	0010      	movs	r0, r2
 800360c:	f005 f90e 	bl	800882c <HAL_GPIO_ReadPin>
 8003610:	0003      	movs	r3, r0
 8003612:	001a      	movs	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <Timer_Event+0x124>)
 8003616:	601a      	str	r2, [r3, #0]
	if (counter_ads==0 && MISO_Val==1){
 8003618:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <Timer_Event+0x128>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <Timer_Event+0x2e>
 8003620:	4b3f      	ldr	r3, [pc, #252]	@ (8003720 <Timer_Event+0x124>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d100      	bne.n	800362a <Timer_Event+0x2e>
 8003628:	e072      	b.n	8003710 <Timer_Event+0x114>
		return;
	}
	if (counter_ads==0){
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <Timer_Event+0x128>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <Timer_Event+0x40>
		//TIM->ARR=((Period_htim+1)*10)-1;
		TIM->ARR=Period_htim;
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <Timer_Event+0x12c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3d      	ldr	r2, [pc, #244]	@ (800372c <Timer_Event+0x130>)
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
	}
	if (counter_ads%2==0){
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <Timer_Event+0x128>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d10d      	bne.n	8003664 <Timer_Event+0x68>
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_SET);
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <Timer_Event+0x134>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <Timer_Event+0x138>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	0019      	movs	r1, r3
 8003654:	f005 f907 	bl	8008866 <HAL_GPIO_WritePin>
		counter_ads++;
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <Timer_Event+0x128>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <Timer_Event+0x128>)
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e026      	b.n	80036b2 <Timer_Event+0xb6>
	}
	else{
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 8003664:	4b32      	ldr	r3, [pc, #200]	@ (8003730 <Timer_Event+0x134>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <Timer_Event+0x138>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	0019      	movs	r1, r3
 8003670:	f005 f8f9 	bl	8008866 <HAL_GPIO_WritePin>
		if (counter_ads_max-2>=counter_ads){
 8003674:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <Timer_Event+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <Timer_Event+0x128>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	dd0d      	ble.n	800369e <Timer_Event+0xa2>
			value_ads|=(MISO_Val<<23-bit_ads);//23-bit_ads отзеркаливаем значение value_ads
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <Timer_Event+0x124>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <Timer_Event+0x140>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2117      	movs	r1, #23
 800368c:	1acb      	subs	r3, r1, r3
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	001a      	movs	r2, r3
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <Timer_Event+0x144>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	431a      	orrs	r2, r3
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <Timer_Event+0x144>)
 800369c:	601a      	str	r2, [r3, #0]

		}

		counter_ads++;
 800369e:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <Timer_Event+0x128>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003724 <Timer_Event+0x128>)
 80036a6:	601a      	str	r2, [r3, #0]
		bit_ads++;
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <Timer_Event+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <Timer_Event+0x140>)
 80036b0:	601a      	str	r2, [r3, #0]
	}
	if(counter_ads==counter_ads_max){
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <Timer_Event+0x128>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <Timer_Event+0x13c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d129      	bne.n	8003712 <Timer_Event+0x116>
		//HAL_TIM_Base_Stop_IT(htim);
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <Timer_Event+0x134>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <Timer_Event+0x138>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	0019      	movs	r1, r3
 80036ca:	f005 f8cc 	bl	8008866 <HAL_GPIO_WritePin>
		if (ads_callback != NULL)
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <Timer_Event+0x148>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <Timer_Event+0xe6>
		{
			ads_callback(value_ads);
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <Timer_Event+0x148>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <Timer_Event+0x144>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0018      	movs	r0, r3
 80036e0:	4790      	blx	r2
		}

		TIM->ARR=((TIM->ARR+1)*10)-1;
 80036e2:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <Timer_Event+0x12c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	0013      	movs	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <Timer_Event+0x12c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
		counter_ads=0;
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <Timer_Event+0x128>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
		value_ads=0;
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <Timer_Event+0x144>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
		bit_ads=0;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <Timer_Event+0x140>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e000      	b.n	8003712 <Timer_Event+0x116>
		return;
 8003710:	46c0      	nop			@ (mov r8, r8)
		//HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_RESET);
	}
}
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000318 	.word	0x20000318
 800371c:	20000324 	.word	0x20000324
 8003720:	20000300 	.word	0x20000300
 8003724:	200002fc 	.word	0x200002fc
 8003728:	20000314 	.word	0x20000314
 800372c:	20000310 	.word	0x20000310
 8003730:	2000031c 	.word	0x2000031c
 8003734:	20000326 	.word	0x20000326
 8003738:	20000000 	.word	0x20000000
 800373c:	20000304 	.word	0x20000304
 8003740:	20000308 	.word	0x20000308
 8003744:	2000032c 	.word	0x2000032c

08003748 <Start_read>:
void Start_read(TIM_HandleTypeDef *htim_ptr, TIM_TypeDef *TIM_ads){
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_SET);
 8003752:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <Start_read+0x70>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <Start_read+0x74>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	0019      	movs	r1, r3
 800375e:	f005 f882 	bl	8008866 <HAL_GPIO_WritePin>
	if (counter_ads>0&&counter_ads<counter_ads_max){
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <Start_read+0x78>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dd05      	ble.n	8003776 <Start_read+0x2e>
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <Start_read+0x78>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <Start_read+0x7c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	db1c      	blt.n	80037b0 <Start_read+0x68>
		return;
	}
	htim = htim_ptr;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <Start_read+0x80>)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
	TIM = TIM_ads;
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <Start_read+0x84>)
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
	Period_htim=htim->Init.Period;
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <Start_read+0x80>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <Start_read+0x88>)
 800378a:	601a      	str	r2, [r3, #0]
	counter_ads=0;
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <Start_read+0x78>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
	value_ads=0;
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <Start_read+0x8c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
	bit_ads=0;
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <Start_read+0x90>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <Start_read+0x94>)
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <Start_read+0x98>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	0019      	movs	r1, r3
 80037aa:	f005 f85c 	bl	8008866 <HAL_GPIO_WritePin>
 80037ae:	e000      	b.n	80037b2 <Start_read+0x6a>
		return;
 80037b0:	46c0      	nop			@ (mov r8, r8)
	//HAL_TIM_Base_Start_IT(htim);
}
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000320 	.word	0x20000320
 80037bc:	20000328 	.word	0x20000328
 80037c0:	200002fc 	.word	0x200002fc
 80037c4:	20000000 	.word	0x20000000
 80037c8:	2000030c 	.word	0x2000030c
 80037cc:	20000314 	.word	0x20000314
 80037d0:	20000310 	.word	0x20000310
 80037d4:	20000308 	.word	0x20000308
 80037d8:	20000304 	.word	0x20000304
 80037dc:	2000031c 	.word	0x2000031c
 80037e0:	20000326 	.word	0x20000326

080037e4 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "main.h"
#define CONFIGURATION_START_ADDR 0x0801f800
void clearFlash(){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0

	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstPage = 63;//flash memory sector
 80037ea:	233f      	movs	r3, #63	@ 0x3f
 80037ec:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfPages = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
	//uint32_t Flash_BANK = 1;

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <clearFlash+0x58>)
 80037f4:	2202      	movs	r2, #2
 80037f6:	601a      	str	r2, [r3, #0]
	//EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.Page = FirstPage;
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <clearFlash+0x58>)
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <clearFlash+0x58>)
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	60da      	str	r2, [r3, #12]
	uint32_t PageError = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Lock();
 8003808:	f004 fd6e 	bl	80082e8 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800380c:	f004 fd48 	bl	80082a0 <HAL_FLASH_Unlock>
	//FLASH_PageErase(FLASH_BANK_1,FirstPage);
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8003810:	003a      	movs	r2, r7
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <clearFlash+0x58>)
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f004 fe00 	bl	800841c <HAL_FLASHEx_Erase>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d006      	beq.n	800382e <clearFlash+0x4a>
		/*Error occurred while sector erase.
User can add here some code to deal with this error.
SectorError will contain the faulty sector and then to know the code error on this sector,
user can call function 'HAL_FLASH_GetError()'
		 */
		uint32_t errorcode = HAL_FLASH_GetError();
 8003820:	f004 fd84 	bl	800832c <HAL_FLASH_GetError>
 8003824:	0003      	movs	r3, r0
 8003826:	607b      	str	r3, [r7, #4]
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();
		osDelay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f00b fd48 	bl	800f2be <osDelay>
	}
	//CLEAR_BIT(FLASH->CR, FLASH_CR_PER);

	HAL_FLASH_Lock();
 800382e:	f004 fd5b 	bl	80082e8 <HAL_FLASH_Lock>

}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000330 	.word	0x20000330

08003840 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(uint8_t* data, int size, int offset) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <WriteDeviceAddressOffset+0x70>)
 8003850:	4694      	mov	ip, r2
 8003852:	4463      	add	r3, ip
 8003854:	623b      	str	r3, [r7, #32]
	HAL_FLASH_Lock();
 8003856:	f004 fd47 	bl	80082e8 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800385a:	f004 fd21 	bl	80082a0 <HAL_FLASH_Unlock>
	//osDelay(10);
	for (int i = 0; i<size; i+=8){
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	e01b      	b.n	800389c <WriteDeviceAddressOffset+0x5c>
		uint64_t data_64 = *(uint64_t*)(&data[i]);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61ba      	str	r2, [r7, #24]
 8003870:	61fb      	str	r3, [r7, #28]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address+i, data_64) != HAL_OK){
 8003872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	18d1      	adds	r1, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2001      	movs	r0, #1
 800387e:	f004 fcc1 	bl	8008204 <HAL_FLASH_Program>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d007      	beq.n	8003896 <WriteDeviceAddressOffset+0x56>
User can add here some code to deal with this error */
			/*
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			uint32_t errorcode = HAL_FLASH_GetError();
 8003886:	f004 fd51 	bl	800832c <HAL_FLASH_GetError>
 800388a:	0003      	movs	r3, r0
 800388c:	617b      	str	r3, [r7, #20]
			osDelay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f00b fd15 	bl	800f2be <osDelay>
			break;
 8003894:	e006      	b.n	80038a4 <WriteDeviceAddressOffset+0x64>
	for (int i = 0; i<size; i+=8){
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3308      	adds	r3, #8
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbdf      	blt.n	8003864 <WriteDeviceAddressOffset+0x24>
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80038a4:	f004 fd20 	bl	80082e8 <HAL_FLASH_Lock>
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b00a      	add	sp, #40	@ 0x28
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0801f800 	.word	0x0801f800

080038b4 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(uint8_t* Dout, int size, int offset)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <ReadDeviceAddressOffset+0x48>)
 80038c4:	4694      	mov	ip, r2
 80038c6:	4463      	add	r3, ip
 80038c8:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00c      	b.n	80038ea <ReadDeviceAddressOffset+0x36>
		Dout[i] = *(__IO uint8_t*)(Address+i);
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	0019      	movs	r1, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	780a      	ldrb	r2, [r1, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbee      	blt.n	80038d0 <ReadDeviceAddressOffset+0x1c>
	}
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	0801f800 	.word	0x0801f800

08003900 <get_platform_number>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void check_errors();

void get_platform_number() {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
//	}
//
//	platform_number.number_ch = '0' + platform_number.number;
//
//	debug("PLATFORM NUMBER: %d \r\n", platform_number.number);
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN Init */

	g_mesQueue = xQueueCreate(2, 22);
 8003912:	2200      	movs	r2, #0
 8003914:	2116      	movs	r1, #22
 8003916:	2002      	movs	r0, #2
 8003918:	f00b ff37 	bl	800f78a <xQueueGenericCreate>
 800391c:	0002      	movs	r2, r0
 800391e:	4b6f      	ldr	r3, [pc, #444]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003920:	601a      	str	r2, [r3, #0]
	serial_number =(uint16_t)(crc32b((uint8_t *)UID_BASE, 8));
 8003922:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003924:	2108      	movs	r1, #8
 8003926:	0018      	movs	r0, r3
 8003928:	f003 fa86 	bl	8006e38 <crc32b>
 800392c:	0003      	movs	r3, r0
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae4 <MX_FREERTOS_Init+0x1d8>)
 8003932:	801a      	strh	r2, [r3, #0]
	serial_number_control = abs((int16_t)serial_number);
 8003934:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae4 <MX_FREERTOS_Init+0x1d8>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b21b      	sxth	r3, r3
 800393a:	17da      	asrs	r2, r3, #31
 800393c:	189b      	adds	r3, r3, r2
 800393e:	4053      	eors	r3, r2
 8003940:	b29b      	uxth	r3, r3
 8003942:	b21a      	sxth	r2, r3
 8003944:	4b68      	ldr	r3, [pc, #416]	@ (8003ae8 <MX_FREERTOS_Init+0x1dc>)
 8003946:	801a      	strh	r2, [r3, #0]
	ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003948:	4b68      	ldr	r3, [pc, #416]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b68      	ldr	r3, [pc, #416]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 800394e:	2108      	movs	r1, #8
 8003950:	0018      	movs	r0, r3
 8003952:	f7ff ffaf 	bl	80038b4 <ReadDeviceAddressOffset>
	//memset(transmitting_command, 0, sizeof(transmitting_command));
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003956:	e016      	b.n	8003986 <MX_FREERTOS_Init+0x7a>
	{
		if(offset>=248){
 8003958:	4b64      	ldr	r3, [pc, #400]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2bf7      	cmp	r3, #247	@ 0xf7
 800395e:	dd05      	ble.n	800396c <MX_FREERTOS_Init+0x60>
//
			offset=0;
 8003960:	4b62      	ldr	r3, [pc, #392]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
			clearFlash();
 8003966:	f7ff ff3d 	bl	80037e4 <clearFlash>
			break;
 800396a:	e010      	b.n	800398e <MX_FREERTOS_Init+0x82>
		}
		offset+=sizeof(sensor_inf);
 800396c:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	001a      	movs	r2, r3
 8003974:	4b5d      	ldr	r3, [pc, #372]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 8003976:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003978:	4b5c      	ldr	r3, [pc, #368]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b5c      	ldr	r3, [pc, #368]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 800397e:	2108      	movs	r1, #8
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff ff97 	bl	80038b4 <ReadDeviceAddressOffset>
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003986:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2bff      	cmp	r3, #255	@ 0xff
 800398c:	d1e4      	bne.n	8003958 <MX_FREERTOS_Init+0x4c>
	}
	if(offset<8){
 800398e:	4b57      	ldr	r3, [pc, #348]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b07      	cmp	r3, #7
 8003994:	dc1c      	bgt.n	80039d0 <MX_FREERTOS_Init+0xc4>

		//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
		memset(&sensor_inf, 0, sizeof(sensor_inf));
 8003996:	4b56      	ldr	r3, [pc, #344]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 8003998:	2208      	movs	r2, #8
 800399a:	2100      	movs	r1, #0
 800399c:	0018      	movs	r0, r3
 800399e:	f00f faa3 	bl	8012ee8 <memset>
		sensor_inf.platform_adr[0]='0';
 80039a2:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 80039a4:	2230      	movs	r2, #48	@ 0x30
 80039a6:	701a      	strb	r2, [r3, #0]
		sensor_inf.platform_adr[1]='1';
 80039a8:	4b51      	ldr	r3, [pc, #324]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 80039aa:	2231      	movs	r2, #49	@ 0x31
 80039ac:	705a      	strb	r2, [r3, #1]
		sensor_inf.received_BDR=38400;
 80039ae:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 80039b0:	2296      	movs	r2, #150	@ 0x96
 80039b2:	0212      	lsls	r2, r2, #8
 80039b4:	605a      	str	r2, [r3, #4]
		WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80039b6:	4b4d      	ldr	r3, [pc, #308]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 80039bc:	2108      	movs	r1, #8
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff ff3e 	bl	8003840 <WriteDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 80039c4:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	001a      	movs	r2, r3
 80039cc:	4b47      	ldr	r3, [pc, #284]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039ce:	601a      	str	r2, [r3, #0]
	}
	if(offset>=8){
 80039d0:	4b46      	ldr	r3, [pc, #280]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b07      	cmp	r3, #7
 80039d6:	dd12      	ble.n	80039fe <MX_FREERTOS_Init+0xf2>

		offset-=sizeof(sensor_inf);
 80039d8:	4b44      	ldr	r3, [pc, #272]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3b08      	subs	r3, #8
 80039de:	001a      	movs	r2, r3
 80039e0:	4b42      	ldr	r3, [pc, #264]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039e2:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80039e4:	4b41      	ldr	r3, [pc, #260]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 80039ea:	2108      	movs	r1, #8
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff ff61 	bl	80038b4 <ReadDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 80039f2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	001a      	movs	r2, r3
 80039fa:	4b3c      	ldr	r3, [pc, #240]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 80039fc:	601a      	str	r2, [r3, #0]
	}

	 while (!(USART2->ISR & USART_ISR_TC)) {
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	4b3c      	ldr	r3, [pc, #240]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	2240      	movs	r2, #64	@ 0x40
 8003a06:	4013      	ands	r3, r2
 8003a08:	d0fa      	beq.n	8003a00 <MX_FREERTOS_Init+0xf4>
	 // Ожидание, пока передача завершится
	 }

	 // Отключаем USART перед изменением настроек
	 USART2->CR1 &= ~USART_CR1_UE;
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b39      	ldr	r3, [pc, #228]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a10:	2101      	movs	r1, #1
 8003a12:	438a      	bics	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
     // �?зменение скорости
	 USART2->BRR = (SystemCoreClock+12800) / sensor_inf.received_BDR;
 8003a16:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <MX_FREERTOS_Init+0x1ec>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	22c8      	movs	r2, #200	@ 0xc8
 8003a1c:	0192      	lsls	r2, r2, #6
 8003a1e:	189a      	adds	r2, r3, r2
 8003a20:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4c33      	ldr	r4, [pc, #204]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a26:	0019      	movs	r1, r3
 8003a28:	0010      	movs	r0, r2
 8003a2a:	f7fc fb89 	bl	8000140 <__udivsi3>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	60e3      	str	r3, [r4, #12]
	 // Включаем USART обратно
	 USART2->CR1 |= USART_CR1_UE;
 8003a32:	4b30      	ldr	r3, [pc, #192]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]

	//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
	//offset+=sizeof(sensor_inf);
	//clearFlash();
	//WriteDeviceAddressOffset((uint8_t*)&sensor_inf, sizeof(sensor_inf), offset);
	sensorsState.hdc_fail = 0;
 8003a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003afc <MX_FREERTOS_Init+0x1f0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
	sensorsState.lps_fail = 0;
 8003a44:	4b2d      	ldr	r3, [pc, #180]	@ (8003afc <MX_FREERTOS_Init+0x1f0>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	705a      	strb	r2, [r3, #1]
	 set_ADS_pins(GPIOA,
 8003a4a:	23a0      	movs	r3, #160	@ 0xa0
 8003a4c:	05da      	lsls	r2, r3, #23
 8003a4e:	23a0      	movs	r3, #160	@ 0xa0
 8003a50:	05d9      	lsls	r1, r3, #23
 8003a52:	23a0      	movs	r3, #160	@ 0xa0
 8003a54:	05d8      	lsls	r0, r3, #23
 8003a56:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <MX_FREERTOS_Init+0x1f4>)
 8003a58:	9302      	str	r3, [sp, #8]
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	2302      	movs	r3, #2
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2301      	movs	r3, #1
 8003a64:	f7ff fd94 	bl	8003590 <set_ADS_pins>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of maximumsPeriodTimer */
  maximumsPeriodTimerHandle = osTimerNew(maximumsPeriodTimer_callback, osTimerPeriodic, NULL, &maximumsPeriodTimer_attributes);
 8003a68:	4b26      	ldr	r3, [pc, #152]	@ (8003b04 <MX_FREERTOS_Init+0x1f8>)
 8003a6a:	4827      	ldr	r0, [pc, #156]	@ (8003b08 <MX_FREERTOS_Init+0x1fc>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2101      	movs	r1, #1
 8003a70:	f00b fc58 	bl	800f324 <osTimerNew>
 8003a74:	0002      	movs	r2, r0
 8003a76:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <MX_FREERTOS_Init+0x200>)
 8003a78:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of debugTask */
  debugTaskHandle = osThreadNew(StartDebugTask, NULL, &debugTask_attributes);
 8003a7a:	4a25      	ldr	r2, [pc, #148]	@ (8003b10 <MX_FREERTOS_Init+0x204>)
 8003a7c:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <MX_FREERTOS_Init+0x208>)
 8003a7e:	2100      	movs	r1, #0
 8003a80:	0018      	movs	r0, r3
 8003a82:	f00b fb85 	bl	800f190 <osThreadNew>
 8003a86:	0002      	movs	r2, r0
 8003a88:	4b23      	ldr	r3, [pc, #140]	@ (8003b18 <MX_FREERTOS_Init+0x20c>)
 8003a8a:	601a      	str	r2, [r3, #0]

  /* creation of rxCommandsTask */
  rxCommandsTaskHandle = osThreadNew(StartTaskRxCommands, NULL, &rxCommandsTask_attributes);
 8003a8c:	4a23      	ldr	r2, [pc, #140]	@ (8003b1c <MX_FREERTOS_Init+0x210>)
 8003a8e:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <MX_FREERTOS_Init+0x214>)
 8003a90:	2100      	movs	r1, #0
 8003a92:	0018      	movs	r0, r3
 8003a94:	f00b fb7c 	bl	800f190 <osThreadNew>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <MX_FREERTOS_Init+0x218>)
 8003a9c:	601a      	str	r2, [r3, #0]

  /* creation of accelTask */
  accelTaskHandle = osThreadNew(StartTaskAccelerometer, NULL, &accelTask_attributes);
 8003a9e:	4a22      	ldr	r2, [pc, #136]	@ (8003b28 <MX_FREERTOS_Init+0x21c>)
 8003aa0:	4b22      	ldr	r3, [pc, #136]	@ (8003b2c <MX_FREERTOS_Init+0x220>)
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f00b fb73 	bl	800f190 <osThreadNew>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <MX_FREERTOS_Init+0x224>)
 8003aae:	601a      	str	r2, [r3, #0]

  /* creation of sensorsPolling */
  sensorsPollingHandle = osThreadNew(StartSensorsPolling, NULL, &sensorsPolling_attributes);
 8003ab0:	4a20      	ldr	r2, [pc, #128]	@ (8003b34 <MX_FREERTOS_Init+0x228>)
 8003ab2:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <MX_FREERTOS_Init+0x22c>)
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f00b fb6a 	bl	800f190 <osThreadNew>
 8003abc:	0002      	movs	r2, r0
 8003abe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <MX_FREERTOS_Init+0x230>)
 8003ac0:	601a      	str	r2, [r3, #0]

  /* creation of ADS1232Task */
  ADS1232TaskHandle = osThreadNew(StartADS1232Task, NULL, &ADS1232Task_attributes);
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b40 <MX_FREERTOS_Init+0x234>)
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b44 <MX_FREERTOS_Init+0x238>)
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f00b fb61 	bl	800f190 <osThreadNew>
 8003ace:	0002      	movs	r2, r0
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b48 <MX_FREERTOS_Init+0x23c>)
 8003ad2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b001      	add	sp, #4
 8003ada:	bd90      	pop	{r4, r7, pc}
 8003adc:	200003c4 	.word	0x200003c4
 8003ae0:	1fff7590 	.word	0x1fff7590
 8003ae4:	200003b4 	.word	0x200003b4
 8003ae8:	200003b6 	.word	0x200003b6
 8003aec:	200003b0 	.word	0x200003b0
 8003af0:	200003a8 	.word	0x200003a8
 8003af4:	40004400 	.word	0x40004400
 8003af8:	2000006c 	.word	0x2000006c
 8003afc:	20000340 	.word	0x20000340
 8003b00:	08004ff5 	.word	0x08004ff5
 8003b04:	08017080 	.word	0x08017080
 8003b08:	08004c35 	.word	0x08004c35
 8003b0c:	200003dc 	.word	0x200003dc
 8003b10:	08016fcc 	.word	0x08016fcc
 8003b14:	08003b4d 	.word	0x08003b4d
 8003b18:	200003c8 	.word	0x200003c8
 8003b1c:	08016ff0 	.word	0x08016ff0
 8003b20:	08003e11 	.word	0x08003e11
 8003b24:	200003cc 	.word	0x200003cc
 8003b28:	08017014 	.word	0x08017014
 8003b2c:	080049e9 	.word	0x080049e9
 8003b30:	200003d0 	.word	0x200003d0
 8003b34:	08017038 	.word	0x08017038
 8003b38:	08004b25 	.word	0x08004b25
 8003b3c:	200003d4 	.word	0x200003d4
 8003b40:	0801705c 	.word	0x0801705c
 8003b44:	08004c09 	.word	0x08004c09
 8003b48:	200003d8 	.word	0x200003d8

08003b4c <StartDebugTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	46de      	mov	lr, fp
 8003b50:	4657      	mov	r7, sl
 8003b52:	464e      	mov	r6, r9
 8003b54:	4645      	mov	r5, r8
 8003b56:	b5e0      	push	{r5, r6, r7, lr}
 8003b58:	b0e3      	sub	sp, #396	@ 0x18c
 8003b5a:	af12      	add	r7, sp, #72	@ 0x48
 8003b5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartDebugTask */

  /* Infinite loop */
	check_errors();
 8003b5e:	f001 f9f9 	bl	8004f54 <check_errors>

	get_platform_number();
 8003b62:	f7ff fecd 	bl	8003900 <get_platform_number>

	osTimerStart(maximumsPeriodTimerHandle, timer_period);	// запуск таймера с периодом срабатывания 10 минут
 8003b66:	4b9d      	ldr	r3, [pc, #628]	@ (8003ddc <StartDebugTask+0x290>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a9d      	ldr	r2, [pc, #628]	@ (8003de0 <StartDebugTask+0x294>)
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f00b fc5e 	bl	800f430 <osTimerStart>
//	debug("\r\nSN: %05d\r\n", serial_number);
//	debug("\r\nMax mediums timer set to %d ms\r\n", timer_period);

	if (!debug_enabled()) {
 8003b74:	f001 ffcc 	bl	8005b10 <debug_enabled>
 8003b78:	1e03      	subs	r3, r0, #0
 8003b7a:	d137      	bne.n	8003bec <StartDebugTask+0xa0>

		uint8_t message_sn[64] = { 0, };
 8003b7c:	4b99      	ldr	r3, [pc, #612]	@ (8003de4 <StartDebugTask+0x298>)
 8003b7e:	228c      	movs	r2, #140	@ 0x8c
 8003b80:	0052      	lsls	r2, r2, #1
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	2228      	movs	r2, #40	@ 0x28
 8003b86:	4694      	mov	ip, r2
 8003b88:	44bc      	add	ip, r7
 8003b8a:	4463      	add	r3, ip
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	3304      	adds	r3, #4
 8003b92:	223c      	movs	r2, #60	@ 0x3c
 8003b94:	2100      	movs	r1, #0
 8003b96:	0018      	movs	r0, r3
 8003b98:	f00f f9a6 	bl	8012ee8 <memset>
		memset(message_sn, 0, sizeof(message_sn));
 8003b9c:	2408      	movs	r4, #8
 8003b9e:	2528      	movs	r5, #40	@ 0x28
 8003ba0:	1963      	adds	r3, r4, r5
 8003ba2:	19db      	adds	r3, r3, r7
 8003ba4:	2240      	movs	r2, #64	@ 0x40
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f00f f99d 	bl	8012ee8 <memset>

		int size = snprintf((char *)message_sn, sizeof(message_sn), "SN: %05d \r\n", serial_number);
 8003bae:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <StartDebugTask+0x29c>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	4a8e      	ldr	r2, [pc, #568]	@ (8003dec <StartDebugTask+0x2a0>)
 8003bb4:	1961      	adds	r1, r4, r5
 8003bb6:	19c8      	adds	r0, r1, r7
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	f00f f8bd 	bl	8012d38 <sniprintf>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	228a      	movs	r2, #138	@ 0x8a
 8003bc2:	0052      	lsls	r2, r2, #1
 8003bc4:	1951      	adds	r1, r2, r5
 8003bc6:	19c9      	adds	r1, r1, r7
 8003bc8:	600b      	str	r3, [r1, #0]

		if (size > 0) {
 8003bca:	0029      	movs	r1, r5
 8003bcc:	1853      	adds	r3, r2, r1
 8003bce:	19db      	adds	r3, r3, r7
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	dd0a      	ble.n	8003bec <StartDebugTask+0xa0>
			HAL_UART_Transmit(debug_uart, message_sn, size, 100);
 8003bd6:	4b86      	ldr	r3, [pc, #536]	@ (8003df0 <StartDebugTask+0x2a4>)
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	1853      	adds	r3, r2, r1
 8003bdc:	19db      	adds	r3, r3, r7
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	1863      	adds	r3, r4, r1
 8003be4:	19d9      	adds	r1, r3, r7
 8003be6:	2364      	movs	r3, #100	@ 0x64
 8003be8:	f008 fd74 	bl	800c6d4 <HAL_UART_Transmit>
		}

	}

	vTaskDelay(100);
 8003bec:	2064      	movs	r0, #100	@ 0x64
 8003bee:	f00c fb49 	bl	8010284 <vTaskDelay>

	for (;;) {

		send_debug_messages();
 8003bf2:	f002 f837 	bl	8005c64 <send_debug_messages>

		if (!debug_enabled()) {
 8003bf6:	f001 ff8b 	bl	8005b10 <debug_enabled>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d000      	beq.n	8003c00 <StartDebugTask+0xb4>
 8003bfe:	e0e3      	b.n	8003dc8 <StartDebugTask+0x27c>

			float max_acceleration = fmax(
					round_and_limit_float(get_max_positive_acceleration()),
 8003c00:	f001 fed8 	bl	80059b4 <get_max_positive_acceleration>
 8003c04:	1c03      	adds	r3, r0, #0
 8003c06:	1c18      	adds	r0, r3, #0
 8003c08:	f001 fefc 	bl	8005a04 <round_and_limit_float>
 8003c0c:	1c03      	adds	r3, r0, #0
			float max_acceleration = fmax(
 8003c0e:	1c18      	adds	r0, r3, #0
 8003c10:	f7ff fbc8 	bl	80033a4 <__aeabi_f2d>
 8003c14:	0004      	movs	r4, r0
 8003c16:	000d      	movs	r5, r1
					round_and_limit_float(get_max_negative_acceleration()));
 8003c18:	f001 fed6 	bl	80059c8 <get_max_negative_acceleration>
 8003c1c:	1c03      	adds	r3, r0, #0
 8003c1e:	1c18      	adds	r0, r3, #0
 8003c20:	f001 fef0 	bl	8005a04 <round_and_limit_float>
 8003c24:	1c03      	adds	r3, r0, #0
			float max_acceleration = fmax(
 8003c26:	1c18      	adds	r0, r3, #0
 8003c28:	f7ff fbbc 	bl	80033a4 <__aeabi_f2d>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	000b      	movs	r3, r1
 8003c30:	0020      	movs	r0, r4
 8003c32:	0029      	movs	r1, r5
 8003c34:	f00d fef3 	bl	8011a1e <fmax>
 8003c38:	0002      	movs	r2, r0
 8003c3a:	000b      	movs	r3, r1
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	f7ff fbf8 	bl	8003434 <__aeabi_d2f>
 8003c44:	1c03      	adds	r3, r0, #0
 8003c46:	2686      	movs	r6, #134	@ 0x86
 8003c48:	0076      	lsls	r6, r6, #1
 8003c4a:	2428      	movs	r4, #40	@ 0x28
 8003c4c:	1932      	adds	r2, r6, r4
 8003c4e:	19d2      	adds	r2, r2, r7
 8003c50:	6013      	str	r3, [r2, #0]

			float maximum_move = fmax(
					round_and_limit_float(get_max_positive_move()),
 8003c52:	f001 fec3 	bl	80059dc <get_max_positive_move>
 8003c56:	1c03      	adds	r3, r0, #0
 8003c58:	1c18      	adds	r0, r3, #0
 8003c5a:	f001 fed3 	bl	8005a04 <round_and_limit_float>
 8003c5e:	1c03      	adds	r3, r0, #0
			float maximum_move = fmax(
 8003c60:	1c18      	adds	r0, r3, #0
 8003c62:	f7ff fb9f 	bl	80033a4 <__aeabi_f2d>
 8003c66:	0004      	movs	r4, r0
 8003c68:	000d      	movs	r5, r1
					round_and_limit_float(get_max_negative_move()));
 8003c6a:	f001 fec1 	bl	80059f0 <get_max_negative_move>
 8003c6e:	1c03      	adds	r3, r0, #0
 8003c70:	1c18      	adds	r0, r3, #0
 8003c72:	f001 fec7 	bl	8005a04 <round_and_limit_float>
 8003c76:	1c03      	adds	r3, r0, #0
			float maximum_move = fmax(
 8003c78:	1c18      	adds	r0, r3, #0
 8003c7a:	f7ff fb93 	bl	80033a4 <__aeabi_f2d>
 8003c7e:	0002      	movs	r2, r0
 8003c80:	000b      	movs	r3, r1
 8003c82:	0020      	movs	r0, r4
 8003c84:	0029      	movs	r1, r5
 8003c86:	f00d feca 	bl	8011a1e <fmax>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	000b      	movs	r3, r1
 8003c8e:	0010      	movs	r0, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	f7ff fbcf 	bl	8003434 <__aeabi_d2f>
 8003c96:	1c03      	adds	r3, r0, #0
 8003c98:	2584      	movs	r5, #132	@ 0x84
 8003c9a:	006d      	lsls	r5, r5, #1
 8003c9c:	2428      	movs	r4, #40	@ 0x28
 8003c9e:	192a      	adds	r2, r5, r4
 8003ca0:	19d2      	adds	r2, r2, r7
 8003ca2:	6013      	str	r3, [r2, #0]

			uint8_t message[256] = { 0, };
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8003de4 <StartDebugTask+0x298>)
 8003ca6:	228c      	movs	r2, #140	@ 0x8c
 8003ca8:	0052      	lsls	r2, r2, #1
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	2228      	movs	r2, #40	@ 0x28
 8003cae:	4694      	mov	ip, r2
 8003cb0:	44bc      	add	ip, r7
 8003cb2:	4463      	add	r3, ip
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	22fc      	movs	r2, #252	@ 0xfc
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f00f f912 	bl	8012ee8 <memset>
			memset(message, 0, sizeof(message));
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	005a      	lsls	r2, r3, #1
 8003cc8:	2308      	movs	r3, #8
 8003cca:	191b      	adds	r3, r3, r4
 8003ccc:	19db      	adds	r3, r3, r7
 8003cce:	2100      	movs	r1, #0
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f00f f909 	bl	8012ee8 <memset>

			int size = snprintf((char *)message, sizeof(message),
				"ACCEL: 0x%08X, LENGTH: 0x%08X, MAX_ACCEL: 0x%08X, MAX_LENGTH: 0x%08X, PRESSURE: %.2f HUMIDITY: %d, TEMP %.2f\r\n\nACCEL: %06.2f,     LENGTH: %06.2f,     MAX_ACCEL: %06.2f,     MAX_LENGTH: %06.2f\r\n\n",
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003cd6:	0034      	movs	r4, r6
 8003cd8:	2628      	movs	r6, #40	@ 0x28
 8003cda:	19a3      	adds	r3, r4, r6
 8003cdc:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4693      	mov	fp, r2
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003ce2:	19ab      	adds	r3, r5, r6
 8003ce4:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4690      	mov	r8, r2
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003cea:	4b42      	ldr	r3, [pc, #264]	@ (8003df4 <StartDebugTask+0x2a8>)
			int size = snprintf((char *)message, sizeof(message),
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4691      	mov	r9, r2
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003cf0:	4b41      	ldr	r3, [pc, #260]	@ (8003df8 <StartDebugTask+0x2ac>)
			int size = snprintf((char *)message, sizeof(message),
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4692      	mov	sl, r2
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003cf6:	4b41      	ldr	r3, [pc, #260]	@ (8003dfc <StartDebugTask+0x2b0>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	1c18      	adds	r0, r3, #0
 8003cfc:	f7ff fb52 	bl	80033a4 <__aeabi_f2d>
			int size = snprintf((char *)message, sizeof(message),
 8003d00:	2200      	movs	r2, #0
 8003d02:	4b3f      	ldr	r3, [pc, #252]	@ (8003e00 <StartDebugTask+0x2b4>)
 8003d04:	f7fd fff6 	bl	8001cf4 <__aeabi_ddiv>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	000b      	movs	r3, r1
 8003d0c:	623a      	str	r2, [r7, #32]
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003d10:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <StartDebugTask+0x2b8>)
 8003d12:	689b      	ldr	r3, [r3, #8]
			int size = snprintf((char *)message, sizeof(message),
 8003d14:	1c18      	adds	r0, r3, #0
 8003d16:	f7ff fb45 	bl	80033a4 <__aeabi_f2d>
 8003d1a:	61b8      	str	r0, [r7, #24]
 8003d1c:	61f9      	str	r1, [r7, #28]
				HDC_config.last_temperature,
 8003d1e:	4b39      	ldr	r3, [pc, #228]	@ (8003e04 <StartDebugTask+0x2b8>)
 8003d20:	685b      	ldr	r3, [r3, #4]
			int size = snprintf((char *)message, sizeof(message),
 8003d22:	1c18      	adds	r0, r3, #0
 8003d24:	f7ff fb3e 	bl	80033a4 <__aeabi_f2d>
 8003d28:	6138      	str	r0, [r7, #16]
 8003d2a:	6179      	str	r1, [r7, #20]
 8003d2c:	19a3      	adds	r3, r4, r6
 8003d2e:	19d9      	adds	r1, r3, r7
 8003d30:	680b      	ldr	r3, [r1, #0]
 8003d32:	1c18      	adds	r0, r3, #0
 8003d34:	f7ff fb36 	bl	80033a4 <__aeabi_f2d>
 8003d38:	60b8      	str	r0, [r7, #8]
 8003d3a:	60f9      	str	r1, [r7, #12]
 8003d3c:	19aa      	adds	r2, r5, r6
 8003d3e:	19d1      	adds	r1, r2, r7
 8003d40:	680b      	ldr	r3, [r1, #0]
 8003d42:	1c18      	adds	r0, r3, #0
 8003d44:	f7ff fb2e 	bl	80033a4 <__aeabi_f2d>
 8003d48:	6038      	str	r0, [r7, #0]
 8003d4a:	6079      	str	r1, [r7, #4]
 8003d4c:	4b29      	ldr	r3, [pc, #164]	@ (8003df4 <StartDebugTask+0x2a8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	1c18      	adds	r0, r3, #0
 8003d52:	f7ff fb27 	bl	80033a4 <__aeabi_f2d>
 8003d56:	0004      	movs	r4, r0
 8003d58:	000d      	movs	r5, r1
 8003d5a:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <StartDebugTask+0x2ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	1c18      	adds	r0, r3, #0
 8003d60:	f7ff fb20 	bl	80033a4 <__aeabi_f2d>
 8003d64:	4a28      	ldr	r2, [pc, #160]	@ (8003e08 <StartDebugTask+0x2bc>)
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	005e      	lsls	r6, r3, #1
 8003d6a:	46b4      	mov	ip, r6
 8003d6c:	2608      	movs	r6, #8
 8003d6e:	2328      	movs	r3, #40	@ 0x28
 8003d70:	18f3      	adds	r3, r6, r3
 8003d72:	19de      	adds	r6, r3, r7
 8003d74:	9010      	str	r0, [sp, #64]	@ 0x40
 8003d76:	9111      	str	r1, [sp, #68]	@ 0x44
 8003d78:	940e      	str	r4, [sp, #56]	@ 0x38
 8003d7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	687c      	ldr	r4, [r7, #4]
 8003d80:	930c      	str	r3, [sp, #48]	@ 0x30
 8003d82:	940d      	str	r4, [sp, #52]	@ 0x34
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	68fc      	ldr	r4, [r7, #12]
 8003d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	697c      	ldr	r4, [r7, #20]
 8003d90:	9308      	str	r3, [sp, #32]
 8003d92:	9409      	str	r4, [sp, #36]	@ 0x24
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	69fc      	ldr	r4, [r7, #28]
 8003d98:	9306      	str	r3, [sp, #24]
 8003d9a:	9407      	str	r4, [sp, #28]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	9405      	str	r4, [sp, #20]
 8003da4:	4653      	mov	r3, sl
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	464b      	mov	r3, r9
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	4643      	mov	r3, r8
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	465b      	mov	r3, fp
 8003db2:	4661      	mov	r1, ip
 8003db4:	0030      	movs	r0, r6
 8003db6:	f00e ffbf 	bl	8012d38 <sniprintf>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	2288      	movs	r2, #136	@ 0x88
 8003dbe:	0052      	lsls	r2, r2, #1
 8003dc0:	2628      	movs	r6, #40	@ 0x28
 8003dc2:	1992      	adds	r2, r2, r6
 8003dc4:	19d2      	adds	r2, r2, r7
 8003dc6:	6013      	str	r3, [r2, #0]
//			//	HAL_UART_Transmit(debug_uart, message, size, 100);
//			}

		}

		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8003dc8:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <StartDebugTask+0x2c0>)
 8003dca:	2108      	movs	r1, #8
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f004 fd67 	bl	80088a0 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8003dd2:	2064      	movs	r0, #100	@ 0x64
 8003dd4:	f00c fa56 	bl	8010284 <vTaskDelay>
		send_debug_messages();
 8003dd8:	e70b      	b.n	8003bf2 <StartDebugTask+0xa6>
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	200003dc 	.word	0x200003dc
 8003de0:	000927c0 	.word	0x000927c0
 8003de4:	fffffef0 	.word	0xfffffef0
 8003de8:	200003b4 	.word	0x200003b4
 8003dec:	08016980 	.word	0x08016980
 8003df0:	20000070 	.word	0x20000070
 8003df4:	200003c0 	.word	0x200003c0
 8003df8:	200003bc 	.word	0x200003bc
 8003dfc:	20000394 	.word	0x20000394
 8003e00:	40900000 	.word	0x40900000
 8003e04:	2000039c 	.word	0x2000039c
 8003e08:	0801698c 	.word	0x0801698c
 8003e0c:	50000c00 	.word	0x50000c00

08003e10 <StartTaskRxCommands>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRxCommands */
void StartTaskRxCommands(void *argument)
{
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e12:	46de      	mov	lr, fp
 8003e14:	4657      	mov	r7, sl
 8003e16:	464e      	mov	r6, r9
 8003e18:	4645      	mov	r5, r8
 8003e1a:	b5e0      	push	{r5, r6, r7, lr}
 8003e1c:	b0c7      	sub	sp, #284	@ 0x11c
 8003e1e:	af14      	add	r7, sp, #80	@ 0x50
 8003e20:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartTaskRxCommands */
	/* Infinite loop */
	uint32_t ulNotifiedValue;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 500 );
 8003e22:	23fa      	movs	r3, #250	@ 0xfa
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2290      	movs	r2, #144	@ 0x90
 8003e28:	2128      	movs	r1, #40	@ 0x28
 8003e2a:	1852      	adds	r2, r2, r1
 8003e2c:	19d2      	adds	r2, r2, r7
 8003e2e:	6013      	str	r3, [r2, #0]
	memset(received_command, 0x0, sizeof(received_command));
 8003e30:	4bf6      	ldr	r3, [pc, #984]	@ (800420c <StartTaskRxCommands+0x3fc>)
 8003e32:	2216      	movs	r2, #22
 8003e34:	2100      	movs	r1, #0
 8003e36:	0018      	movs	r0, r3
 8003e38:	f00f f856 	bl	8012ee8 <memset>
	memset(transmitting_command, 0x0, sizeof(transmitting_command));
 8003e3c:	4bf4      	ldr	r3, [pc, #976]	@ (8004210 <StartTaskRxCommands+0x400>)
 8003e3e:	2216      	movs	r2, #22
 8003e40:	2100      	movs	r1, #0
 8003e42:	0018      	movs	r0, r3
 8003e44:	f00f f850 	bl	8012ee8 <memset>

	//receive(terminal_uart, received_command, 1);
	  receive(terminal_uart, RX_command_buff, 1);
 8003e48:	4bf2      	ldr	r3, [pc, #968]	@ (8004214 <StartTaskRxCommands+0x404>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	49f2      	ldr	r1, [pc, #968]	@ (8004218 <StartTaskRxCommands+0x408>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	0018      	movs	r0, r3
 8003e52:	f001 fee0 	bl	8005c16 <receive>
	for (;;) {

//		    ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );

		    if( uxQueueMessagesWaiting(g_mesQueue) == 0 )
 8003e56:	4bf1      	ldr	r3, [pc, #964]	@ (800421c <StartTaskRxCommands+0x40c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f00b fee6 	bl	800fc2c <uxQueueMessagesWaiting>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d101      	bne.n	8003e68 <StartTaskRxCommands+0x58>
 8003e64:	f000 fd98 	bl	8004998 <StartTaskRxCommands+0xb88>
		    	continue;
			}


		    uint8_t receive_buf[22];
		    xQueueReceive(g_mesQueue, receive_buf, 0);
 8003e68:	4bec      	ldr	r3, [pc, #944]	@ (800421c <StartTaskRxCommands+0x40c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2464      	movs	r4, #100	@ 0x64
 8003e6e:	2628      	movs	r6, #40	@ 0x28
 8003e70:	19a2      	adds	r2, r4, r6
 8003e72:	19d1      	adds	r1, r2, r7
 8003e74:	2200      	movs	r2, #0
 8003e76:	0018      	movs	r0, r3
 8003e78:	f00b fe20 	bl	800fabc <xQueueReceive>
			HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8003e7c:	4be8      	ldr	r3, [pc, #928]	@ (8004220 <StartTaskRxCommands+0x410>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2108      	movs	r1, #8
 8003e82:	0018      	movs	r0, r3
 8003e84:	f004 fcef 	bl	8008866 <HAL_GPIO_WritePin>

			debug("Received <<%s>>\r\n", receive_buf);
 8003e88:	19a3      	adds	r3, r4, r6
 8003e8a:	19da      	adds	r2, r3, r7
 8003e8c:	4be5      	ldr	r3, [pc, #916]	@ (8004224 <StartTaskRxCommands+0x414>)
 8003e8e:	0011      	movs	r1, r2
 8003e90:	0018      	movs	r0, r3
 8003e92:	f001 fe43 	bl	8005b1c <debug>
//			if (strlen(receive_buf)==0){
//
//				osDelay(1);
//			}
			if (terminal_parser_state == PARSER_S4x) { // если посылка S4x;
 8003e96:	4be4      	ldr	r3, [pc, #912]	@ (8004228 <StartTaskRxCommands+0x418>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d000      	beq.n	8003ea0 <StartTaskRxCommands+0x90>
 8003e9e:	e13c      	b.n	800411a <StartTaskRxCommands+0x30a>

				float maximum = fmax(
						round_and_limit_float(get_max_positive_move()),
 8003ea0:	f001 fd9c 	bl	80059dc <get_max_positive_move>
 8003ea4:	1c03      	adds	r3, r0, #0
 8003ea6:	1c18      	adds	r0, r3, #0
 8003ea8:	f001 fdac 	bl	8005a04 <round_and_limit_float>
 8003eac:	1c03      	adds	r3, r0, #0
				float maximum = fmax(
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f7ff fa78 	bl	80033a4 <__aeabi_f2d>
 8003eb4:	0004      	movs	r4, r0
 8003eb6:	000d      	movs	r5, r1
						round_and_limit_float(get_max_negative_move()));
 8003eb8:	f001 fd9a 	bl	80059f0 <get_max_negative_move>
 8003ebc:	1c03      	adds	r3, r0, #0
 8003ebe:	1c18      	adds	r0, r3, #0
 8003ec0:	f001 fda0 	bl	8005a04 <round_and_limit_float>
 8003ec4:	1c03      	adds	r3, r0, #0
				float maximum = fmax(
 8003ec6:	1c18      	adds	r0, r3, #0
 8003ec8:	f7ff fa6c 	bl	80033a4 <__aeabi_f2d>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	000b      	movs	r3, r1
 8003ed0:	0020      	movs	r0, r4
 8003ed2:	0029      	movs	r1, r5
 8003ed4:	f00d fda3 	bl	8011a1e <fmax>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	000b      	movs	r3, r1
 8003edc:	0010      	movs	r0, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	f7ff faa8 	bl	8003434 <__aeabi_d2f>
 8003ee4:	1c03      	adds	r3, r0, #0
 8003ee6:	2288      	movs	r2, #136	@ 0x88
 8003ee8:	18ba      	adds	r2, r7, r2
 8003eea:	6013      	str	r3, [r2, #0]

				float max_acceleration = fmax(
						round_and_limit_float(get_max_positive_acceleration()),
 8003eec:	f001 fd62 	bl	80059b4 <get_max_positive_acceleration>
 8003ef0:	1c03      	adds	r3, r0, #0
 8003ef2:	1c18      	adds	r0, r3, #0
 8003ef4:	f001 fd86 	bl	8005a04 <round_and_limit_float>
 8003ef8:	1c03      	adds	r3, r0, #0
				float max_acceleration = fmax(
 8003efa:	1c18      	adds	r0, r3, #0
 8003efc:	f7ff fa52 	bl	80033a4 <__aeabi_f2d>
 8003f00:	0004      	movs	r4, r0
 8003f02:	000d      	movs	r5, r1
						round_and_limit_float(get_max_negative_acceleration()));
 8003f04:	f001 fd60 	bl	80059c8 <get_max_negative_acceleration>
 8003f08:	1c03      	adds	r3, r0, #0
 8003f0a:	1c18      	adds	r0, r3, #0
 8003f0c:	f001 fd7a 	bl	8005a04 <round_and_limit_float>
 8003f10:	1c03      	adds	r3, r0, #0
				float max_acceleration = fmax(
 8003f12:	1c18      	adds	r0, r3, #0
 8003f14:	f7ff fa46 	bl	80033a4 <__aeabi_f2d>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	000b      	movs	r3, r1
 8003f1c:	0020      	movs	r0, r4
 8003f1e:	0029      	movs	r1, r5
 8003f20:	f00d fd7d 	bl	8011a1e <fmax>
 8003f24:	0002      	movs	r2, r0
 8003f26:	000b      	movs	r3, r1
 8003f28:	0010      	movs	r0, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	f7ff fa82 	bl	8003434 <__aeabi_d2f>
 8003f30:	1c03      	adds	r3, r0, #0
 8003f32:	2284      	movs	r2, #132	@ 0x84
 8003f34:	18ba      	adds	r2, r7, r2
 8003f36:	6013      	str	r3, [r2, #0]

				uint8_t flags = 0;
 8003f38:	208f      	movs	r0, #143	@ 0x8f
 8003f3a:	1983      	adds	r3, r0, r6
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8003f42:	4bba      	ldr	r3, [pc, #744]	@ (800422c <StartTaskRxCommands+0x41c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	0019      	movs	r1, r3
 8003f48:	1983      	adds	r3, r0, r6
 8003f4a:	19db      	adds	r3, r3, r7
 8003f4c:	1982      	adds	r2, r0, r6
 8003f4e:	19d2      	adds	r2, r2, r7
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 8003f56:	4bb6      	ldr	r3, [pc, #728]	@ (8004230 <StartTaskRxCommands+0x420>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	b25a      	sxtb	r2, r3
 8003f5e:	1983      	adds	r3, r0, r6
 8003f60:	19db      	adds	r3, r3, r7
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b25b      	sxtb	r3, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b25a      	sxtb	r2, r3
 8003f6a:	1983      	adds	r3, r0, r6
 8003f6c:	19db      	adds	r3, r3, r7
 8003f6e:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8003f70:	4baf      	ldr	r3, [pc, #700]	@ (8004230 <StartTaskRxCommands+0x420>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <StartTaskRxCommands+0x16e>
 8003f78:	4bad      	ldr	r3, [pc, #692]	@ (8004230 <StartTaskRxCommands+0x420>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]

					transmitting_command[0] = HDC_config.last_temperature;
 8003f7e:	4bad      	ldr	r3, [pc, #692]	@ (8004234 <StartTaskRxCommands+0x424>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	1c18      	adds	r0, r3, #0
 8003f84:	f7fc faea 	bl	800055c <__aeabi_f2uiz>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4ba0      	ldr	r3, [pc, #640]	@ (8004210 <StartTaskRxCommands+0x400>)
 8003f8e:	701a      	strb	r2, [r3, #0]
					transmitting_command[1] = HDC_config.last_humidity;
 8003f90:	4ba8      	ldr	r3, [pc, #672]	@ (8004234 <StartTaskRxCommands+0x424>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	1c18      	adds	r0, r3, #0
 8003f96:	f7fc fae1 	bl	800055c <__aeabi_f2uiz>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004210 <StartTaskRxCommands+0x400>)
 8003fa0:	705a      	strb	r2, [r3, #1]
					transmitting_command[2] = flags;
 8003fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8004210 <StartTaskRxCommands+0x400>)
 8003fa4:	228f      	movs	r2, #143	@ 0x8f
 8003fa6:	2128      	movs	r1, #40	@ 0x28
 8003fa8:	1852      	adds	r2, r2, r1
 8003faa:	19d2      	adds	r2, r2, r7
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	709a      	strb	r2, [r3, #2]
					transmitting_command[3] = (((LPS_data.last_pressure / 1000) - 0.5) / 1.5 * 100);
 8003fb0:	4ba1      	ldr	r3, [pc, #644]	@ (8004238 <StartTaskRxCommands+0x428>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	49a1      	ldr	r1, [pc, #644]	@ (800423c <StartTaskRxCommands+0x42c>)
 8003fb6:	1c18      	adds	r0, r3, #0
 8003fb8:	f7fc fdac 	bl	8000b14 <__aeabi_fdiv>
 8003fbc:	1c03      	adds	r3, r0, #0
 8003fbe:	1c18      	adds	r0, r3, #0
 8003fc0:	f7ff f9f0 	bl	80033a4 <__aeabi_f2d>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4b9e      	ldr	r3, [pc, #632]	@ (8004240 <StartTaskRxCommands+0x430>)
 8003fc8:	f7fe fda0 	bl	8002b0c <__aeabi_dsub>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	000b      	movs	r3, r1
 8003fd0:	0010      	movs	r0, r2
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4b9b      	ldr	r3, [pc, #620]	@ (8004244 <StartTaskRxCommands+0x434>)
 8003fd8:	f7fd fe8c 	bl	8001cf4 <__aeabi_ddiv>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	000b      	movs	r3, r1
 8003fe0:	0010      	movs	r0, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4b98      	ldr	r3, [pc, #608]	@ (8004248 <StartTaskRxCommands+0x438>)
 8003fe8:	f7fe fac8 	bl	800257c <__aeabi_dmul>
 8003fec:	0002      	movs	r2, r0
 8003fee:	000b      	movs	r3, r1
 8003ff0:	0010      	movs	r0, r2
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	f7fc faca 	bl	800058c <__aeabi_d2uiz>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	4b84      	ldr	r3, [pc, #528]	@ (8004210 <StartTaskRxCommands+0x400>)
 8003ffe:	70da      	strb	r2, [r3, #3]

					memcpy(&transmitting_command[4], &maximum, 4);
 8004000:	2388      	movs	r3, #136	@ 0x88
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b82      	ldr	r3, [pc, #520]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004008:	605a      	str	r2, [r3, #4]
					memcpy(&transmitting_command[8], &max_acceleration, 4);
 800400a:	2384      	movs	r3, #132	@ 0x84
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b7f      	ldr	r3, [pc, #508]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004012:	609a      	str	r2, [r3, #8]
					memcpy(&transmitting_command[12], &maximum_move_in_period, 4);
 8004014:	4b8d      	ldr	r3, [pc, #564]	@ (800424c <StartTaskRxCommands+0x43c>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b7d      	ldr	r3, [pc, #500]	@ (8004210 <StartTaskRxCommands+0x400>)
 800401a:	60da      	str	r2, [r3, #12]
					memcpy(&transmitting_command[16], &max_acceleration_in_period, 4);
 800401c:	4b8c      	ldr	r3, [pc, #560]	@ (8004250 <StartTaskRxCommands+0x440>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b7b      	ldr	r3, [pc, #492]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004022:	611a      	str	r2, [r3, #16]
					memcpy(&transmitting_command[20], &serial_number_control, 2);
 8004024:	4b8b      	ldr	r3, [pc, #556]	@ (8004254 <StartTaskRxCommands+0x444>)
 8004026:	881a      	ldrh	r2, [r3, #0]
 8004028:	4b79      	ldr	r3, [pc, #484]	@ (8004210 <StartTaskRxCommands+0x400>)
 800402a:	829a      	strh	r2, [r3, #20]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800402c:	4b7c      	ldr	r3, [pc, #496]	@ (8004220 <StartTaskRxCommands+0x410>)
 800402e:	2201      	movs	r2, #1
 8004030:	2110      	movs	r1, #16
 8004032:	0018      	movs	r0, r3
 8004034:	f004 fc17 	bl	8008866 <HAL_GPIO_WritePin>

					HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 22);
 8004038:	4b76      	ldr	r3, [pc, #472]	@ (8004214 <StartTaskRxCommands+0x404>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4974      	ldr	r1, [pc, #464]	@ (8004210 <StartTaskRxCommands+0x400>)
 800403e:	2216      	movs	r2, #22
 8004040:	0018      	movs	r0, r3
 8004042:	f008 fbeb 	bl	800c81c <HAL_UART_Transmit_IT>

					//memset(transmitting_command, 0, sizeof(transmitting_command));
				//	memset(receive_buf, 0, sizeof(receive_buf));
					terminal_parser_state =	PARSER_EMPT;
 8004046:	4b78      	ldr	r3, [pc, #480]	@ (8004228 <StartTaskRxCommands+0x418>)
 8004048:	220a      	movs	r2, #10
 800404a:	701a      	strb	r2, [r3, #0]

					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
							transmitting_command[0], transmitting_command[1],
 800404c:	4b70      	ldr	r3, [pc, #448]	@ (8004210 <StartTaskRxCommands+0x400>)
 800404e:	781b      	ldrb	r3, [r3, #0]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
							transmitting_command[0], transmitting_command[1],
 8004052:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004054:	785b      	ldrb	r3, [r3, #1]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
							transmitting_command[2], transmitting_command[3],
 8004058:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <StartTaskRxCommands+0x400>)
 800405a:	789b      	ldrb	r3, [r3, #2]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800405c:	623b      	str	r3, [r7, #32]
							transmitting_command[2], transmitting_command[3],
 800405e:	4b6c      	ldr	r3, [pc, #432]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004060:	78db      	ldrb	r3, [r3, #3]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004062:	469b      	mov	fp, r3
							transmitting_command[4], transmitting_command[5],
 8004064:	4b6a      	ldr	r3, [pc, #424]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004066:	791b      	ldrb	r3, [r3, #4]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004068:	61fb      	str	r3, [r7, #28]
							transmitting_command[4], transmitting_command[5],
 800406a:	4b69      	ldr	r3, [pc, #420]	@ (8004210 <StartTaskRxCommands+0x400>)
 800406c:	795b      	ldrb	r3, [r3, #5]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800406e:	61bb      	str	r3, [r7, #24]
							transmitting_command[6], transmitting_command[7],
 8004070:	4b67      	ldr	r3, [pc, #412]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004072:	799b      	ldrb	r3, [r3, #6]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004074:	617b      	str	r3, [r7, #20]
							transmitting_command[6], transmitting_command[7],
 8004076:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004078:	79db      	ldrb	r3, [r3, #7]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800407a:	613b      	str	r3, [r7, #16]
							transmitting_command[8], transmitting_command[9],
 800407c:	4b64      	ldr	r3, [pc, #400]	@ (8004210 <StartTaskRxCommands+0x400>)
 800407e:	7a1b      	ldrb	r3, [r3, #8]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004080:	60fb      	str	r3, [r7, #12]
							transmitting_command[8], transmitting_command[9],
 8004082:	4b63      	ldr	r3, [pc, #396]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004084:	7a5b      	ldrb	r3, [r3, #9]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004086:	60bb      	str	r3, [r7, #8]
							transmitting_command[10], transmitting_command[11],
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <StartTaskRxCommands+0x400>)
 800408a:	7a9b      	ldrb	r3, [r3, #10]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800408c:	607b      	str	r3, [r7, #4]
							transmitting_command[10], transmitting_command[11],
 800408e:	4b60      	ldr	r3, [pc, #384]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004090:	7adb      	ldrb	r3, [r3, #11]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004092:	603b      	str	r3, [r7, #0]
							transmitting_command[12], transmitting_command[13],
 8004094:	4b5e      	ldr	r3, [pc, #376]	@ (8004210 <StartTaskRxCommands+0x400>)
 8004096:	7b1b      	ldrb	r3, [r3, #12]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004098:	469a      	mov	sl, r3
							transmitting_command[12], transmitting_command[13],
 800409a:	4b5d      	ldr	r3, [pc, #372]	@ (8004210 <StartTaskRxCommands+0x400>)
 800409c:	7b5b      	ldrb	r3, [r3, #13]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800409e:	4699      	mov	r9, r3
							transmitting_command[14], transmitting_command[15],
 80040a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040a2:	7b9b      	ldrb	r3, [r3, #14]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040a4:	4698      	mov	r8, r3
							transmitting_command[14], transmitting_command[15],
 80040a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040a8:	7bdb      	ldrb	r3, [r3, #15]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040aa:	469c      	mov	ip, r3
							transmitting_command[16], transmitting_command[17],
 80040ac:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040ae:	7c1b      	ldrb	r3, [r3, #16]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040b0:	001e      	movs	r6, r3
							transmitting_command[16], transmitting_command[17],
 80040b2:	4b57      	ldr	r3, [pc, #348]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040b4:	7c5b      	ldrb	r3, [r3, #17]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040b6:	001d      	movs	r5, r3
							transmitting_command[18], transmitting_command[19],
 80040b8:	4b55      	ldr	r3, [pc, #340]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040ba:	7c9b      	ldrb	r3, [r3, #18]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040bc:	001c      	movs	r4, r3
							transmitting_command[18], transmitting_command[19],
 80040be:	4b54      	ldr	r3, [pc, #336]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040c0:	7cdb      	ldrb	r3, [r3, #19]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040c2:	0019      	movs	r1, r3
							transmitting_command[20], transmitting_command[21]);
 80040c4:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040c6:	7d1b      	ldrb	r3, [r3, #20]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040c8:	001a      	movs	r2, r3
							transmitting_command[20], transmitting_command[21]);
 80040ca:	4b51      	ldr	r3, [pc, #324]	@ (8004210 <StartTaskRxCommands+0x400>)
 80040cc:	7d5b      	ldrb	r3, [r3, #21]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ce:	4862      	ldr	r0, [pc, #392]	@ (8004258 <StartTaskRxCommands+0x448>)
 80040d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80040d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80040d4:	9110      	str	r1, [sp, #64]	@ 0x40
 80040d6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80040d8:	950e      	str	r5, [sp, #56]	@ 0x38
 80040da:	960d      	str	r6, [sp, #52]	@ 0x34
 80040dc:	4664      	mov	r4, ip
 80040de:	940c      	str	r4, [sp, #48]	@ 0x30
 80040e0:	4644      	mov	r4, r8
 80040e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80040e4:	464c      	mov	r4, r9
 80040e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80040e8:	4654      	mov	r4, sl
 80040ea:	9409      	str	r4, [sp, #36]	@ 0x24
 80040ec:	683c      	ldr	r4, [r7, #0]
 80040ee:	9408      	str	r4, [sp, #32]
 80040f0:	687c      	ldr	r4, [r7, #4]
 80040f2:	9407      	str	r4, [sp, #28]
 80040f4:	68bc      	ldr	r4, [r7, #8]
 80040f6:	9406      	str	r4, [sp, #24]
 80040f8:	68fc      	ldr	r4, [r7, #12]
 80040fa:	9405      	str	r4, [sp, #20]
 80040fc:	693c      	ldr	r4, [r7, #16]
 80040fe:	9404      	str	r4, [sp, #16]
 8004100:	697c      	ldr	r4, [r7, #20]
 8004102:	9403      	str	r4, [sp, #12]
 8004104:	69bc      	ldr	r4, [r7, #24]
 8004106:	9402      	str	r4, [sp, #8]
 8004108:	69fc      	ldr	r4, [r7, #28]
 800410a:	9401      	str	r4, [sp, #4]
 800410c:	465c      	mov	r4, fp
 800410e:	9400      	str	r4, [sp, #0]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004116:	f001 fd01 	bl	8005b1c <debug>

			}

			if (terminal_parser_state == PARSER_Sxx) { // если посылка S0x;
 800411a:	4b43      	ldr	r3, [pc, #268]	@ (8004228 <StartTaskRxCommands+0x418>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d000      	beq.n	8004124 <StartTaskRxCommands+0x314>
 8004122:	e143      	b.n	80043ac <StartTaskRxCommands+0x59c>

				uint8_t flags = 0;
 8004124:	208e      	movs	r0, #142	@ 0x8e
 8004126:	2428      	movs	r4, #40	@ 0x28
 8004128:	1903      	adds	r3, r0, r4
 800412a:	19db      	adds	r3, r3, r7
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8004130:	4b3e      	ldr	r3, [pc, #248]	@ (800422c <StartTaskRxCommands+0x41c>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	0019      	movs	r1, r3
 8004136:	1903      	adds	r3, r0, r4
 8004138:	19db      	adds	r3, r3, r7
 800413a:	1902      	adds	r2, r0, r4
 800413c:	19d2      	adds	r2, r2, r7
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 8004144:	4b3a      	ldr	r3, [pc, #232]	@ (8004230 <StartTaskRxCommands+0x420>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	b25a      	sxtb	r2, r3
 800414c:	1903      	adds	r3, r0, r4
 800414e:	19db      	adds	r3, r3, r7
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b25b      	sxtb	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b25a      	sxtb	r2, r3
 8004158:	1903      	adds	r3, r0, r4
 800415a:	19db      	adds	r3, r3, r7
 800415c:	701a      	strb	r2, [r3, #0]
				if (is_error)
 800415e:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <StartTaskRxCommands+0x420>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <StartTaskRxCommands+0x35c>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004166:	4b32      	ldr	r3, [pc, #200]	@ (8004230 <StartTaskRxCommands+0x420>)
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]

				if (MSV == 0 && ADR == 0 && MSV0 == 0) {
 800416c:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <StartTaskRxCommands+0x44c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <StartTaskRxCommands+0x37a>
 8004174:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <StartTaskRxCommands+0x450>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <StartTaskRxCommands+0x37a>
 800417c:	4b39      	ldr	r3, [pc, #228]	@ (8004264 <StartTaskRxCommands+0x454>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <StartTaskRxCommands+0x37a>

					IDN = 1;
 8004184:	4b38      	ldr	r3, [pc, #224]	@ (8004268 <StartTaskRxCommands+0x458>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

				}

				if (MSV0 == 1 && ADR == 0) {// Анализируем третий символ, отвечающий за конкретный БК
 800418a:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <StartTaskRxCommands+0x454>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d000      	beq.n	8004194 <StartTaskRxCommands+0x384>
 8004192:	e084      	b.n	800429e <StartTaskRxCommands+0x48e>
 8004194:	4b32      	ldr	r3, [pc, #200]	@ (8004260 <StartTaskRxCommands+0x450>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d000      	beq.n	800419e <StartTaskRxCommands+0x38e>
 800419c:	e07f      	b.n	800429e <StartTaskRxCommands+0x48e>
					IDN = 0;
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <StartTaskRxCommands+0x458>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
					uint8_t buf[4] = { 0, 0, 0, 0 };
 80041a4:	2158      	movs	r1, #88	@ 0x58
 80041a6:	2528      	movs	r5, #40	@ 0x28
 80041a8:	194b      	adds	r3, r1, r5
 80041aa:	19db      	adds	r3, r3, r7
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
					//uint32_t val = (ads_val*100)/421 ;
					//uint32_t val = (8388607*100)/421 ;
					//uint32_t val =  1401366;
					uint32_t val = (ads_val);
 80041b0:	4b2e      	ldr	r3, [pc, #184]	@ (800426c <StartTaskRxCommands+0x45c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2088      	movs	r0, #136	@ 0x88
 80041b6:	1942      	adds	r2, r0, r5
 80041b8:	19d2      	adds	r2, r2, r7
 80041ba:	6013      	str	r3, [r2, #0]
					//	отправ	EE FF 0B 00
					//0x78730B00;
					buf[3] = (val >> (2 * 8)) & 0xFF;
 80041bc:	1943      	adds	r3, r0, r5
 80041be:	19db      	adds	r3, r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	194b      	adds	r3, r1, r5
 80041c8:	19db      	adds	r3, r3, r7
 80041ca:	70da      	strb	r2, [r3, #3]
					buf[2] = (val >> (1 * 8)) & 0xFF;
 80041cc:	1943      	adds	r3, r0, r5
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	194b      	adds	r3, r1, r5
 80041d8:	19db      	adds	r3, r3, r7
 80041da:	709a      	strb	r2, [r3, #2]
					buf[1] = (val >> (0 * 8)) & 0xFF;
 80041dc:	1943      	adds	r3, r0, r5
 80041de:	19db      	adds	r3, r3, r7
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	000c      	movs	r4, r1
 80041e6:	1963      	adds	r3, r4, r5
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	705a      	strb	r2, [r3, #1]
					buf[0] = buf[1] ^ buf[2] ^ buf[3];
 80041ec:	1963      	adds	r3, r4, r5
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	785a      	ldrb	r2, [r3, #1]
 80041f2:	1963      	adds	r3, r4, r5
 80041f4:	19db      	adds	r3, r3, r7
 80041f6:	789b      	ldrb	r3, [r3, #2]
 80041f8:	4053      	eors	r3, r2
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	1963      	adds	r3, r4, r5
 80041fe:	19db      	adds	r3, r3, r7
 8004200:	78db      	ldrb	r3, [r3, #3]
 8004202:	4053      	eors	r3, r2
 8004204:	b2da      	uxtb	r2, r3
 8004206:	1963      	adds	r3, r4, r5
 8004208:	e032      	b.n	8004270 <StartTaskRxCommands+0x460>
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	2000035c 	.word	0x2000035c
 8004210:	20000344 	.word	0x20000344
 8004214:	20000074 	.word	0x20000074
 8004218:	2000037c 	.word	0x2000037c
 800421c:	200003c4 	.word	0x200003c4
 8004220:	50000c00 	.word	0x50000c00
 8004224:	08016a50 	.word	0x08016a50
 8004228:	20000004 	.word	0x20000004
 800422c:	200003b9 	.word	0x200003b9
 8004230:	200003b8 	.word	0x200003b8
 8004234:	2000039c 	.word	0x2000039c
 8004238:	20000394 	.word	0x20000394
 800423c:	447a0000 	.word	0x447a0000
 8004240:	3fe00000 	.word	0x3fe00000
 8004244:	3ff80000 	.word	0x3ff80000
 8004248:	40590000 	.word	0x40590000
 800424c:	200003bc 	.word	0x200003bc
 8004250:	200003c0 	.word	0x200003c0
 8004254:	200003b6 	.word	0x200003b6
 8004258:	08016a64 	.word	0x08016a64
 800425c:	20000388 	.word	0x20000388
 8004260:	2000038c 	.word	0x2000038c
 8004264:	20000384 	.word	0x20000384
 8004268:	20000378 	.word	0x20000378
 800426c:	20000374 	.word	0x20000374
 8004270:	19db      	adds	r3, r3, r7
 8004272:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004274:	4bcc      	ldr	r3, [pc, #816]	@ (80045a8 <StartTaskRxCommands+0x798>)
 8004276:	2201      	movs	r2, #1
 8004278:	2110      	movs	r1, #16
 800427a:	0018      	movs	r0, r3
 800427c:	f004 faf3 	bl	8008866 <HAL_GPIO_WritePin>

					HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 8004280:	4bca      	ldr	r3, [pc, #808]	@ (80045ac <StartTaskRxCommands+0x79c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1962      	adds	r2, r4, r5
 8004286:	19d1      	adds	r1, r2, r7
 8004288:	2204      	movs	r2, #4
 800428a:	0018      	movs	r0, r3
 800428c:	f008 fac6 	bl	800c81c <HAL_UART_Transmit_IT>
					debug("Transmit to terminal: <%x>", buf);
 8004290:	1963      	adds	r3, r4, r5
 8004292:	19da      	adds	r2, r3, r7
 8004294:	4bc6      	ldr	r3, [pc, #792]	@ (80045b0 <StartTaskRxCommands+0x7a0>)
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f001 fc3f 	bl	8005b1c <debug>
				}
				if (ADR == 1 && MSV0 == 0) {// Анализируем третий символ, отвечающий за конкретный БК
 800429e:	4bc5      	ldr	r3, [pc, #788]	@ (80045b4 <StartTaskRxCommands+0x7a4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d127      	bne.n	80042f6 <StartTaskRxCommands+0x4e6>
 80042a6:	4bc4      	ldr	r3, [pc, #784]	@ (80045b8 <StartTaskRxCommands+0x7a8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d123      	bne.n	80042f6 <StartTaskRxCommands+0x4e6>
					char str_adr[20];
					sprintf(str_adr, "%c%c\r\n", sensor_inf.platform_adr[0],
 80042ae:	4bc3      	ldr	r3, [pc, #780]	@ (80045bc <StartTaskRxCommands+0x7ac>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	001a      	movs	r2, r3
							sensor_inf.platform_adr[1]);
 80042b4:	4bc1      	ldr	r3, [pc, #772]	@ (80045bc <StartTaskRxCommands+0x7ac>)
 80042b6:	785b      	ldrb	r3, [r3, #1]
					sprintf(str_adr, "%c%c\r\n", sensor_inf.platform_adr[0],
 80042b8:	49c1      	ldr	r1, [pc, #772]	@ (80045c0 <StartTaskRxCommands+0x7b0>)
 80042ba:	2544      	movs	r5, #68	@ 0x44
 80042bc:	2628      	movs	r6, #40	@ 0x28
 80042be:	19a8      	adds	r0, r5, r6
 80042c0:	19c0      	adds	r0, r0, r7
 80042c2:	f00e fd6d 	bl	8012da0 <siprintf>

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80042c6:	4bb8      	ldr	r3, [pc, #736]	@ (80045a8 <StartTaskRxCommands+0x798>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	2110      	movs	r1, #16
 80042cc:	0018      	movs	r0, r3
 80042ce:	f004 faca 	bl	8008866 <HAL_GPIO_WritePin>
					HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_adr,
 80042d2:	4bb6      	ldr	r3, [pc, #728]	@ (80045ac <StartTaskRxCommands+0x79c>)
 80042d4:	681c      	ldr	r4, [r3, #0]
							strlen(str_adr));
 80042d6:	19ab      	adds	r3, r5, r6
 80042d8:	19db      	adds	r3, r3, r7
 80042da:	0018      	movs	r0, r3
 80042dc:	f7fb ff14 	bl	8000108 <strlen>
 80042e0:	0003      	movs	r3, r0
					HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_adr,
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	19ab      	adds	r3, r5, r6
 80042e6:	19db      	adds	r3, r3, r7
 80042e8:	0019      	movs	r1, r3
 80042ea:	0020      	movs	r0, r4
 80042ec:	f008 fa96 	bl	800c81c <HAL_UART_Transmit_IT>

					ADR = 0;
 80042f0:	4bb0      	ldr	r3, [pc, #704]	@ (80045b4 <StartTaskRxCommands+0x7a4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
				}
				if (MSV == 1 && ADR == 0 && MSV0 == 0) {// Анализируем третий символ, отвечающий за конкретный БК
 80042f6:	4bb3      	ldr	r3, [pc, #716]	@ (80045c4 <StartTaskRxCommands+0x7b4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d153      	bne.n	80043a6 <StartTaskRxCommands+0x596>
 80042fe:	4bad      	ldr	r3, [pc, #692]	@ (80045b4 <StartTaskRxCommands+0x7a4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d14f      	bne.n	80043a6 <StartTaskRxCommands+0x596>
 8004306:	4bac      	ldr	r3, [pc, #688]	@ (80045b8 <StartTaskRxCommands+0x7a8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d14b      	bne.n	80043a6 <StartTaskRxCommands+0x596>

					uint8_t buf[4] = { 0, 0, 0, 0 };
 800430e:	2140      	movs	r1, #64	@ 0x40
 8004310:	2528      	movs	r5, #40	@ 0x28
 8004312:	194b      	adds	r3, r1, r5
 8004314:	19db      	adds	r3, r3, r7
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
					//uint32_t val = (ads_val*100)/421 ;
					//uint32_t val = (8388607*100)/421 ;
					//uint32_t val =  1401366;
					uint32_t val = (ads_val);
 800431a:	4bab      	ldr	r3, [pc, #684]	@ (80045c8 <StartTaskRxCommands+0x7b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2084      	movs	r0, #132	@ 0x84
 8004320:	1942      	adds	r2, r0, r5
 8004322:	19d2      	adds	r2, r2, r7
 8004324:	6013      	str	r3, [r2, #0]
					//	отправ	EE FF 0B 00
					//0x78730B00;
					buf[3] = (val >> (2 * 8)) & 0xFF;
 8004326:	1943      	adds	r3, r0, r5
 8004328:	19db      	adds	r3, r3, r7
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2da      	uxtb	r2, r3
 8004330:	194b      	adds	r3, r1, r5
 8004332:	19db      	adds	r3, r3, r7
 8004334:	70da      	strb	r2, [r3, #3]
					buf[2] = (val >> (1 * 8)) & 0xFF;
 8004336:	1943      	adds	r3, r0, r5
 8004338:	19db      	adds	r3, r3, r7
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	b2da      	uxtb	r2, r3
 8004340:	194b      	adds	r3, r1, r5
 8004342:	19db      	adds	r3, r3, r7
 8004344:	709a      	strb	r2, [r3, #2]
					buf[1] = (val >> (0 * 8)) & 0xFF;
 8004346:	1943      	adds	r3, r0, r5
 8004348:	19db      	adds	r3, r3, r7
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	000c      	movs	r4, r1
 8004350:	1963      	adds	r3, r4, r5
 8004352:	19db      	adds	r3, r3, r7
 8004354:	705a      	strb	r2, [r3, #1]
					buf[0] = buf[1] ^ buf[2] ^ buf[3];
 8004356:	1963      	adds	r3, r4, r5
 8004358:	19db      	adds	r3, r3, r7
 800435a:	785a      	ldrb	r2, [r3, #1]
 800435c:	1963      	adds	r3, r4, r5
 800435e:	19db      	adds	r3, r3, r7
 8004360:	789b      	ldrb	r3, [r3, #2]
 8004362:	4053      	eors	r3, r2
 8004364:	b2da      	uxtb	r2, r3
 8004366:	1963      	adds	r3, r4, r5
 8004368:	19db      	adds	r3, r3, r7
 800436a:	78db      	ldrb	r3, [r3, #3]
 800436c:	4053      	eors	r3, r2
 800436e:	b2da      	uxtb	r2, r3
 8004370:	1963      	adds	r3, r4, r5
 8004372:	19db      	adds	r3, r3, r7
 8004374:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004376:	4b8c      	ldr	r3, [pc, #560]	@ (80045a8 <StartTaskRxCommands+0x798>)
 8004378:	2201      	movs	r2, #1
 800437a:	2110      	movs	r1, #16
 800437c:	0018      	movs	r0, r3
 800437e:	f004 fa72 	bl	8008866 <HAL_GPIO_WritePin>
					HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 8004382:	4b8a      	ldr	r3, [pc, #552]	@ (80045ac <StartTaskRxCommands+0x79c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1962      	adds	r2, r4, r5
 8004388:	19d1      	adds	r1, r2, r7
 800438a:	2204      	movs	r2, #4
 800438c:	0018      	movs	r0, r3
 800438e:	f008 fa45 	bl	800c81c <HAL_UART_Transmit_IT>
					debug("Transmit to terminal: <%x>", buf);
 8004392:	1963      	adds	r3, r4, r5
 8004394:	19da      	adds	r2, r3, r7
 8004396:	4b86      	ldr	r3, [pc, #536]	@ (80045b0 <StartTaskRxCommands+0x7a0>)
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f001 fbbe 	bl	8005b1c <debug>

					MSV = 0;
 80043a0:	4b88      	ldr	r3, [pc, #544]	@ (80045c4 <StartTaskRxCommands+0x7b4>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
				}

				//		memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 80043a6:	4b89      	ldr	r3, [pc, #548]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 80043a8:	220a      	movs	r2, #10
 80043aa:	701a      	strb	r2, [r3, #0]
			}

			if (terminal_parser_state == PARSER_MSV70) { // если посылка Sxx;
 80043ac:	4b87      	ldr	r3, [pc, #540]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d12f      	bne.n	8004414 <StartTaskRxCommands+0x604>

				uint8_t flags = 0;
 80043b4:	2083      	movs	r0, #131	@ 0x83
 80043b6:	2428      	movs	r4, #40	@ 0x28
 80043b8:	1903      	adds	r3, r0, r4
 80043ba:	19db      	adds	r3, r3, r7
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80043c0:	4b83      	ldr	r3, [pc, #524]	@ (80045d0 <StartTaskRxCommands+0x7c0>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	0019      	movs	r1, r3
 80043c6:	1903      	adds	r3, r0, r4
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	1902      	adds	r2, r0, r4
 80043cc:	19d2      	adds	r2, r2, r7
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80043d4:	4b7f      	ldr	r3, [pc, #508]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	b25a      	sxtb	r2, r3
 80043dc:	1903      	adds	r3, r0, r4
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b25a      	sxtb	r2, r3
 80043e8:	1903      	adds	r3, r0, r4
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	701a      	strb	r2, [r3, #0]
				if (is_error)
 80043ee:	4b79      	ldr	r3, [pc, #484]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <StartTaskRxCommands+0x5ec>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 80043f6:	4b77      	ldr	r3, [pc, #476]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]

				// Анализируем третий символ, отвечающий за конкретный БК

				MSV0 = 1;
 80043fc:	4b6e      	ldr	r3, [pc, #440]	@ (80045b8 <StartTaskRxCommands+0x7a8>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
				//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
				debug("Transmit to terminal: <%x>", &MSV0);
 8004402:	4a6d      	ldr	r2, [pc, #436]	@ (80045b8 <StartTaskRxCommands+0x7a8>)
 8004404:	4b6a      	ldr	r3, [pc, #424]	@ (80045b0 <StartTaskRxCommands+0x7a0>)
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f001 fb87 	bl	8005b1c <debug>
				//	memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 800440e:	4b6f      	ldr	r3, [pc, #444]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 8004410:	220a      	movs	r2, #10
 8004412:	701a      	strb	r2, [r3, #0]

			}

			if (terminal_parser_state == PARSER_MSV7) { // если посылка Sxx;
 8004414:	4b6d      	ldr	r3, [pc, #436]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b05      	cmp	r3, #5
 800441a:	d12f      	bne.n	800447c <StartTaskRxCommands+0x66c>



					uint8_t flags = 0;
 800441c:	2082      	movs	r0, #130	@ 0x82
 800441e:	2428      	movs	r4, #40	@ 0x28
 8004420:	1903      	adds	r3, r0, r4
 8004422:	19db      	adds	r3, r3, r7
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
					flags |= (case_opened << 0);
 8004428:	4b69      	ldr	r3, [pc, #420]	@ (80045d0 <StartTaskRxCommands+0x7c0>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	0019      	movs	r1, r3
 800442e:	1903      	adds	r3, r0, r4
 8004430:	19db      	adds	r3, r3, r7
 8004432:	1902      	adds	r2, r0, r4
 8004434:	19d2      	adds	r2, r2, r7
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	701a      	strb	r2, [r3, #0]
					flags |= (is_error << 1);
 800443c:	4b65      	ldr	r3, [pc, #404]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	b25a      	sxtb	r2, r3
 8004444:	1903      	adds	r3, r0, r4
 8004446:	19db      	adds	r3, r3, r7
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b25b      	sxtb	r3, r3
 800444c:	4313      	orrs	r3, r2
 800444e:	b25a      	sxtb	r2, r3
 8004450:	1903      	adds	r3, r0, r4
 8004452:	19db      	adds	r3, r3, r7
 8004454:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8004456:	4b5f      	ldr	r3, [pc, #380]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <StartTaskRxCommands+0x654>
 800445e:	4b5d      	ldr	r3, [pc, #372]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]

						// Анализируем третий символ, отвечающий за конкретный БК

						MSV=1;
 8004464:	4b57      	ldr	r3, [pc, #348]	@ (80045c4 <StartTaskRxCommands+0x7b4>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
				//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
				debug("Transmit to terminal: <%x>",&MSV);
 800446a:	4a56      	ldr	r2, [pc, #344]	@ (80045c4 <StartTaskRxCommands+0x7b4>)
 800446c:	4b50      	ldr	r3, [pc, #320]	@ (80045b0 <StartTaskRxCommands+0x7a0>)
 800446e:	0011      	movs	r1, r2
 8004470:	0018      	movs	r0, r3
 8004472:	f001 fb53 	bl	8005b1c <debug>
			//	memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state =	PARSER_EMPT;
 8004476:	4b55      	ldr	r3, [pc, #340]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 8004478:	220a      	movs	r2, #10
 800447a:	701a      	strb	r2, [r3, #0]

			}

			if (terminal_parser_state == PARSER_STP) { // если посылка Sxx;
 800447c:	4b53      	ldr	r3, [pc, #332]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b09      	cmp	r3, #9
 8004482:	d12f      	bne.n	80044e4 <StartTaskRxCommands+0x6d4>
				uint8_t flags = 0;
 8004484:	2081      	movs	r0, #129	@ 0x81
 8004486:	2428      	movs	r4, #40	@ 0x28
 8004488:	1903      	adds	r3, r0, r4
 800448a:	19db      	adds	r3, r3, r7
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8004490:	4b4f      	ldr	r3, [pc, #316]	@ (80045d0 <StartTaskRxCommands+0x7c0>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	0019      	movs	r1, r3
 8004496:	1903      	adds	r3, r0, r4
 8004498:	19db      	adds	r3, r3, r7
 800449a:	1902      	adds	r2, r0, r4
 800449c:	19d2      	adds	r2, r2, r7
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80044a4:	4b4b      	ldr	r3, [pc, #300]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	b25a      	sxtb	r2, r3
 80044ac:	1903      	adds	r3, r0, r4
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b25b      	sxtb	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b25a      	sxtb	r2, r3
 80044b8:	1903      	adds	r3, r0, r4
 80044ba:	19db      	adds	r3, r3, r7
 80044bc:	701a      	strb	r2, [r3, #0]
			     if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 80044be:	4b45      	ldr	r3, [pc, #276]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <StartTaskRxCommands+0x6bc>
 80044c6:	4b43      	ldr	r3, [pc, #268]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]

				// Анализируем третий символ, отвечающий за конкретный БК
			    ADR=0;
 80044cc:	4b39      	ldr	r3, [pc, #228]	@ (80045b4 <StartTaskRxCommands+0x7a4>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
			    MSV=0;
 80044d2:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <StartTaskRxCommands+0x7b4>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
				MSV0=0;
 80044d8:	4b37      	ldr	r3, [pc, #220]	@ (80045b8 <StartTaskRxCommands+0x7a8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
				//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
			//	memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state =	PARSER_EMPT;
 80044de:	4b3b      	ldr	r3, [pc, #236]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 80044e0:	220a      	movs	r2, #10
 80044e2:	701a      	strb	r2, [r3, #0]

			}


			if (terminal_parser_state == PARSER_ADR7) { // если посылка S0x;
 80044e4:	4b39      	ldr	r3, [pc, #228]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d129      	bne.n	8004540 <StartTaskRxCommands+0x730>

				uint8_t flags = 0;
 80044ec:	2080      	movs	r0, #128	@ 0x80
 80044ee:	2428      	movs	r4, #40	@ 0x28
 80044f0:	1903      	adds	r3, r0, r4
 80044f2:	19db      	adds	r3, r3, r7
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80044f8:	4b35      	ldr	r3, [pc, #212]	@ (80045d0 <StartTaskRxCommands+0x7c0>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	0019      	movs	r1, r3
 80044fe:	1903      	adds	r3, r0, r4
 8004500:	19db      	adds	r3, r3, r7
 8004502:	1902      	adds	r2, r0, r4
 8004504:	19d2      	adds	r2, r2, r7
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 800450c:	4b31      	ldr	r3, [pc, #196]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	b25a      	sxtb	r2, r3
 8004514:	1903      	adds	r3, r0, r4
 8004516:	19db      	adds	r3, r3, r7
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b25b      	sxtb	r3, r3
 800451c:	4313      	orrs	r3, r2
 800451e:	b25a      	sxtb	r2, r3
 8004520:	1903      	adds	r3, r0, r4
 8004522:	19db      	adds	r3, r3, r7
 8004524:	701a      	strb	r2, [r3, #0]
				if (is_error)
 8004526:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <StartTaskRxCommands+0x724>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 800452e:	4b29      	ldr	r3, [pc, #164]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]

				// Анализируем третий символ, отвечающий за конкретный БК
				ADR = 1;
 8004534:	4b1f      	ldr	r3, [pc, #124]	@ (80045b4 <StartTaskRxCommands+0x7a4>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
				//	memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 800453a:	4b24      	ldr	r3, [pc, #144]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 800453c:	220a      	movs	r2, #10
 800453e:	701a      	strb	r2, [r3, #0]

			}

			if (terminal_parser_state == PARSER_ADRNUM) { // если посылка S0x;
 8004540:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <StartTaskRxCommands+0x7bc>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d000      	beq.n	800454a <StartTaskRxCommands+0x73a>
 8004548:	e0b5      	b.n	80046b6 <StartTaskRxCommands+0x8a6>

				uint8_t flags = 0;
 800454a:	207f      	movs	r0, #127	@ 0x7f
 800454c:	2428      	movs	r4, #40	@ 0x28
 800454e:	1903      	adds	r3, r0, r4
 8004550:	19db      	adds	r3, r3, r7
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8004556:	4b1e      	ldr	r3, [pc, #120]	@ (80045d0 <StartTaskRxCommands+0x7c0>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	0019      	movs	r1, r3
 800455c:	1903      	adds	r3, r0, r4
 800455e:	19db      	adds	r3, r3, r7
 8004560:	1902      	adds	r2, r0, r4
 8004562:	19d2      	adds	r2, r2, r7
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 800456a:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	b25a      	sxtb	r2, r3
 8004572:	1903      	adds	r3, r0, r4
 8004574:	19db      	adds	r3, r3, r7
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b25b      	sxtb	r3, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	b25a      	sxtb	r2, r3
 800457e:	1903      	adds	r3, r0, r4
 8004580:	19db      	adds	r3, r3, r7
 8004582:	701a      	strb	r2, [r3, #0]
				if (is_error)
 8004584:	4b13      	ldr	r3, [pc, #76]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <StartTaskRxCommands+0x782>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 800458c:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <StartTaskRxCommands+0x7c4>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
				received_number = 0;
 8004592:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <StartTaskRxCommands+0x7c8>)
 8004594:	2200      	movs	r2, #0
 8004596:	801a      	strh	r2, [r3, #0]
				for (int i = 7; i < 14; i++) {
 8004598:	2307      	movs	r3, #7
 800459a:	229c      	movs	r2, #156	@ 0x9c
 800459c:	2128      	movs	r1, #40	@ 0x28
 800459e:	1852      	adds	r2, r2, r1
 80045a0:	19d2      	adds	r2, r2, r7
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e04c      	b.n	8004640 <StartTaskRxCommands+0x830>
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	50000c00 	.word	0x50000c00
 80045ac:	20000074 	.word	0x20000074
 80045b0:	08016af0 	.word	0x08016af0
 80045b4:	2000038c 	.word	0x2000038c
 80045b8:	20000384 	.word	0x20000384
 80045bc:	200003a8 	.word	0x200003a8
 80045c0:	08016b0c 	.word	0x08016b0c
 80045c4:	20000388 	.word	0x20000388
 80045c8:	20000374 	.word	0x20000374
 80045cc:	20000004 	.word	0x20000004
 80045d0:	200003b9 	.word	0x200003b9
 80045d4:	200003b8 	.word	0x200003b8
 80045d8:	20000372 	.word	0x20000372
					if (receive_buf[i] >= '0' && receive_buf[i] <= '9') {
 80045dc:	2164      	movs	r1, #100	@ 0x64
 80045de:	2428      	movs	r4, #40	@ 0x28
 80045e0:	190b      	adds	r3, r1, r4
 80045e2:	19da      	adds	r2, r3, r7
 80045e4:	209c      	movs	r0, #156	@ 0x9c
 80045e6:	1903      	adds	r3, r0, r4
 80045e8:	19db      	adds	r3, r3, r7
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	18d3      	adds	r3, r2, r3
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80045f2:	d91c      	bls.n	800462e <StartTaskRxCommands+0x81e>
 80045f4:	190b      	adds	r3, r1, r4
 80045f6:	19da      	adds	r2, r3, r7
 80045f8:	1903      	adds	r3, r0, r4
 80045fa:	19db      	adds	r3, r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	18d3      	adds	r3, r2, r3
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b39      	cmp	r3, #57	@ 0x39
 8004604:	d813      	bhi.n	800462e <StartTaskRxCommands+0x81e>
						received_number = received_number * 10
								+ (receive_buf[i] - '0');
 8004606:	4be6      	ldr	r3, [pc, #920]	@ (80049a0 <StartTaskRxCommands+0xb90>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	1c1a      	adds	r2, r3, #0
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	18d3      	adds	r3, r2, r3
 8004610:	18db      	adds	r3, r3, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	190a      	adds	r2, r1, r4
 8004616:	19d1      	adds	r1, r2, r7
 8004618:	1902      	adds	r2, r0, r4
 800461a:	19d2      	adds	r2, r2, r7
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	188a      	adds	r2, r1, r2
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	189b      	adds	r3, r3, r2
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b30      	subs	r3, #48	@ 0x30
 8004628:	b29a      	uxth	r2, r3
						received_number = received_number * 10
 800462a:	4bdd      	ldr	r3, [pc, #884]	@ (80049a0 <StartTaskRxCommands+0xb90>)
 800462c:	801a      	strh	r2, [r3, #0]
				for (int i = 7; i < 14; i++) {
 800462e:	229c      	movs	r2, #156	@ 0x9c
 8004630:	2128      	movs	r1, #40	@ 0x28
 8004632:	1853      	adds	r3, r2, r1
 8004634:	19db      	adds	r3, r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	1852      	adds	r2, r2, r1
 800463c:	19d2      	adds	r2, r2, r7
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	239c      	movs	r3, #156	@ 0x9c
 8004642:	2428      	movs	r4, #40	@ 0x28
 8004644:	191b      	adds	r3, r3, r4
 8004646:	19db      	adds	r3, r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b0d      	cmp	r3, #13
 800464c:	ddc6      	ble.n	80045dc <StartTaskRxCommands+0x7cc>
					}

				}

				// Проверка serial_number
				if (received_number == serial_number) {
 800464e:	4bd4      	ldr	r3, [pc, #848]	@ (80049a0 <StartTaskRxCommands+0xb90>)
 8004650:	881a      	ldrh	r2, [r3, #0]
 8004652:	4bd4      	ldr	r3, [pc, #848]	@ (80049a4 <StartTaskRxCommands+0xb94>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d12a      	bne.n	80046b0 <StartTaskRxCommands+0x8a0>
					memset(sensor_inf.platform_adr, '0',
 800465a:	4bd3      	ldr	r3, [pc, #844]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 800465c:	2202      	movs	r2, #2
 800465e:	2130      	movs	r1, #48	@ 0x30
 8004660:	0018      	movs	r0, r3
 8004662:	f00e fc41 	bl	8012ee8 <memset>
							sizeof(sensor_inf.platform_adr));
					sensor_inf.platform_adr[0] = receive_buf[3];
 8004666:	2164      	movs	r1, #100	@ 0x64
 8004668:	190b      	adds	r3, r1, r4
 800466a:	19db      	adds	r3, r3, r7
 800466c:	78da      	ldrb	r2, [r3, #3]
 800466e:	4bce      	ldr	r3, [pc, #824]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 8004670:	701a      	strb	r2, [r3, #0]
					sensor_inf.platform_adr[1] = receive_buf[4];
 8004672:	190b      	adds	r3, r1, r4
 8004674:	19db      	adds	r3, r3, r7
 8004676:	791a      	ldrb	r2, [r3, #4]
 8004678:	4bcb      	ldr	r3, [pc, #812]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 800467a:	705a      	strb	r2, [r3, #1]
					// clearFlash();
					//offset=0;
					if (offset >= 248) {
 800467c:	4bcb      	ldr	r3, [pc, #812]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2bf7      	cmp	r3, #247	@ 0xf7
 8004682:	dd04      	ble.n	800468e <StartTaskRxCommands+0x87e>

						offset = 0;
 8004684:	4bc9      	ldr	r3, [pc, #804]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
						clearFlash();
 800468a:	f7ff f8ab 	bl	80037e4 <clearFlash>
					}
					taskENTER_CRITICAL();
 800468e:	f00c ff37 	bl	8011500 <vPortEnterCritical>
					WriteDeviceAddressOffset((uint8_t*) &sensor_inf,
 8004692:	4bc6      	ldr	r3, [pc, #792]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4bc4      	ldr	r3, [pc, #784]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 8004698:	2108      	movs	r1, #8
 800469a:	0018      	movs	r0, r3
 800469c:	f7ff f8d0 	bl	8003840 <WriteDeviceAddressOffset>
							sizeof(sensor_inf), offset);
					taskEXIT_CRITICAL();
 80046a0:	f00c ff40 	bl	8011524 <vPortExitCritical>

					offset += sizeof(sensor_inf);
 80046a4:	4bc1      	ldr	r3, [pc, #772]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	001a      	movs	r2, r3
 80046ac:	4bbf      	ldr	r3, [pc, #764]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 80046ae:	601a      	str	r2, [r3, #0]
				}
				//	 memset(receive_buf, 0, sizeof(receive_buf));
				//sensor_inf.crc_platform=(uint8_t)(crc32b((uint8_t *)sensor_inf.platform_adr, 2));
				terminal_parser_state = PARSER_EMPT;
 80046b0:	4bbf      	ldr	r3, [pc, #764]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 80046b2:	220a      	movs	r2, #10
 80046b4:	701a      	strb	r2, [r3, #0]

			}

			if (terminal_parser_state == PARSER_BDR) { // если посылка S0x;
 80046b6:	4bbe      	ldr	r3, [pc, #760]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d000      	beq.n	80046c0 <StartTaskRxCommands+0x8b0>
 80046be:	e0d2      	b.n	8004866 <StartTaskRxCommands+0xa56>

				uint8_t flags = 0;
 80046c0:	207e      	movs	r0, #126	@ 0x7e
 80046c2:	2428      	movs	r4, #40	@ 0x28
 80046c4:	1903      	adds	r3, r0, r4
 80046c6:	19db      	adds	r3, r3, r7
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80046cc:	4bb9      	ldr	r3, [pc, #740]	@ (80049b4 <StartTaskRxCommands+0xba4>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	0019      	movs	r1, r3
 80046d2:	1903      	adds	r3, r0, r4
 80046d4:	19db      	adds	r3, r3, r7
 80046d6:	1902      	adds	r2, r0, r4
 80046d8:	19d2      	adds	r2, r2, r7
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80046e0:	4bb5      	ldr	r3, [pc, #724]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	b25a      	sxtb	r2, r3
 80046e8:	1903      	adds	r3, r0, r4
 80046ea:	19db      	adds	r3, r3, r7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b25a      	sxtb	r2, r3
 80046f4:	1903      	adds	r3, r0, r4
 80046f6:	19db      	adds	r3, r3, r7
 80046f8:	701a      	strb	r2, [r3, #0]
				if (is_error)
 80046fa:	4baf      	ldr	r3, [pc, #700]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <StartTaskRxCommands+0x8f8>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004702:	4bad      	ldr	r3, [pc, #692]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
				sensor_inf.received_BDR = 0;
 8004708:	4ba7      	ldr	r3, [pc, #668]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 800470a:	2200      	movs	r2, #0
 800470c:	605a      	str	r2, [r3, #4]

				for (int i = 0; i < 22; i++) {
 800470e:	2300      	movs	r3, #0
 8004710:	2298      	movs	r2, #152	@ 0x98
 8004712:	2128      	movs	r1, #40	@ 0x28
 8004714:	1852      	adds	r2, r2, r1
 8004716:	19d2      	adds	r2, r2, r7
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e029      	b.n	8004770 <StartTaskRxCommands+0x960>
					if (receive_buf[i] != ';') {
 800471c:	2364      	movs	r3, #100	@ 0x64
 800471e:	2128      	movs	r1, #40	@ 0x28
 8004720:	185b      	adds	r3, r3, r1
 8004722:	19da      	adds	r2, r3, r7
 8004724:	2398      	movs	r3, #152	@ 0x98
 8004726:	185b      	adds	r3, r3, r1
 8004728:	19db      	adds	r3, r3, r7
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b3b      	cmp	r3, #59	@ 0x3b
 8004732:	d004      	beq.n	800473e <StartTaskRxCommands+0x92e>
						END_Cmd = END_Cmd + 1;
 8004734:	4ba1      	ldr	r3, [pc, #644]	@ (80049bc <StartTaskRxCommands+0xbac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	4ba0      	ldr	r3, [pc, #640]	@ (80049bc <StartTaskRxCommands+0xbac>)
 800473c:	601a      	str	r2, [r3, #0]
					}
					if (receive_buf[i] == ';') {
 800473e:	2364      	movs	r3, #100	@ 0x64
 8004740:	2028      	movs	r0, #40	@ 0x28
 8004742:	181b      	adds	r3, r3, r0
 8004744:	19da      	adds	r2, r3, r7
 8004746:	2198      	movs	r1, #152	@ 0x98
 8004748:	180b      	adds	r3, r1, r0
 800474a:	19db      	adds	r3, r3, r7
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	18d3      	adds	r3, r2, r3
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b3b      	cmp	r3, #59	@ 0x3b
 8004754:	d103      	bne.n	800475e <StartTaskRxCommands+0x94e>
						i = 22;
 8004756:	2316      	movs	r3, #22
 8004758:	180a      	adds	r2, r1, r0
 800475a:	19d2      	adds	r2, r2, r7
 800475c:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 22; i++) {
 800475e:	2298      	movs	r2, #152	@ 0x98
 8004760:	2128      	movs	r1, #40	@ 0x28
 8004762:	1853      	adds	r3, r2, r1
 8004764:	19db      	adds	r3, r3, r7
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	1852      	adds	r2, r2, r1
 800476c:	19d2      	adds	r2, r2, r7
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	2398      	movs	r3, #152	@ 0x98
 8004772:	2128      	movs	r1, #40	@ 0x28
 8004774:	185b      	adds	r3, r3, r1
 8004776:	19db      	adds	r3, r3, r7
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b15      	cmp	r3, #21
 800477c:	ddce      	ble.n	800471c <StartTaskRxCommands+0x90c>
					}
				}

				for (int i = 3; i < END_Cmd; i++) {
 800477e:	2303      	movs	r3, #3
 8004780:	2294      	movs	r2, #148	@ 0x94
 8004782:	1852      	adds	r2, r2, r1
 8004784:	19d2      	adds	r2, r2, r7
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e030      	b.n	80047ec <StartTaskRxCommands+0x9dc>
					if (receive_buf[i] >= '0' && receive_buf[i] <= '9') {
 800478a:	2064      	movs	r0, #100	@ 0x64
 800478c:	2528      	movs	r5, #40	@ 0x28
 800478e:	1943      	adds	r3, r0, r5
 8004790:	19da      	adds	r2, r3, r7
 8004792:	2494      	movs	r4, #148	@ 0x94
 8004794:	1963      	adds	r3, r4, r5
 8004796:	19db      	adds	r3, r3, r7
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b2f      	cmp	r3, #47	@ 0x2f
 80047a0:	d91b      	bls.n	80047da <StartTaskRxCommands+0x9ca>
 80047a2:	1943      	adds	r3, r0, r5
 80047a4:	19da      	adds	r2, r3, r7
 80047a6:	1963      	adds	r3, r4, r5
 80047a8:	19db      	adds	r3, r3, r7
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b39      	cmp	r3, #57	@ 0x39
 80047b2:	d812      	bhi.n	80047da <StartTaskRxCommands+0x9ca>
						sensor_inf.received_BDR = sensor_inf.received_BDR * 10
 80047b4:	4b7c      	ldr	r3, [pc, #496]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	0013      	movs	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	0019      	movs	r1, r3
								+ (receive_buf[i] - '0');
 80047c2:	1943      	adds	r3, r0, r5
 80047c4:	19da      	adds	r2, r3, r7
 80047c6:	1963      	adds	r3, r4, r5
 80047c8:	19db      	adds	r3, r3, r7
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	18d3      	adds	r3, r2, r3
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	18cb      	adds	r3, r1, r3
 80047d2:	3b30      	subs	r3, #48	@ 0x30
 80047d4:	001a      	movs	r2, r3
						sensor_inf.received_BDR = sensor_inf.received_BDR * 10
 80047d6:	4b74      	ldr	r3, [pc, #464]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 80047d8:	605a      	str	r2, [r3, #4]
				for (int i = 3; i < END_Cmd; i++) {
 80047da:	2294      	movs	r2, #148	@ 0x94
 80047dc:	2128      	movs	r1, #40	@ 0x28
 80047de:	1853      	adds	r3, r2, r1
 80047e0:	19db      	adds	r3, r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	1852      	adds	r2, r2, r1
 80047e8:	19d2      	adds	r2, r2, r7
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <StartTaskRxCommands+0xbac>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2294      	movs	r2, #148	@ 0x94
 80047f2:	2128      	movs	r1, #40	@ 0x28
 80047f4:	1852      	adds	r2, r2, r1
 80047f6:	19d2      	adds	r2, r2, r7
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	dbc5      	blt.n	800478a <StartTaskRxCommands+0x97a>
					}

				}

				while (!(USART2->ISR & USART_ISR_TC)) {
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <StartTaskRxCommands+0xbb0>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	2240      	movs	r2, #64	@ 0x40
 8004806:	4013      	ands	r3, r2
 8004808:	d0fa      	beq.n	8004800 <StartTaskRxCommands+0x9f0>
					// Ожидание, пока передача завершится
				}

				// Отключаем USART перед изменением настроек
				USART2->CR1 &= ~USART_CR1_UE;
 800480a:	4b6d      	ldr	r3, [pc, #436]	@ (80049c0 <StartTaskRxCommands+0xbb0>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b6c      	ldr	r3, [pc, #432]	@ (80049c0 <StartTaskRxCommands+0xbb0>)
 8004810:	2101      	movs	r1, #1
 8004812:	438a      	bics	r2, r1
 8004814:	601a      	str	r2, [r3, #0]

				// �?зменение скорости
				USART2->BRR = (SystemCoreClock + 12800) / sensor_inf.received_BDR;
 8004816:	4b6b      	ldr	r3, [pc, #428]	@ (80049c4 <StartTaskRxCommands+0xbb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	22c8      	movs	r2, #200	@ 0xc8
 800481c:	0192      	lsls	r2, r2, #6
 800481e:	189a      	adds	r2, r3, r2
 8004820:	4b61      	ldr	r3, [pc, #388]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4c66      	ldr	r4, [pc, #408]	@ (80049c0 <StartTaskRxCommands+0xbb0>)
 8004826:	0019      	movs	r1, r3
 8004828:	0010      	movs	r0, r2
 800482a:	f7fb fc89 	bl	8000140 <__udivsi3>
 800482e:	0003      	movs	r3, r0
 8004830:	60e3      	str	r3, [r4, #12]

				// Включаем USART обратно
				USART2->CR1 |= USART_CR1_UE;
 8004832:	4b63      	ldr	r3, [pc, #396]	@ (80049c0 <StartTaskRxCommands+0xbb0>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b62      	ldr	r3, [pc, #392]	@ (80049c0 <StartTaskRxCommands+0xbb0>)
 8004838:	2101      	movs	r1, #1
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]

				taskENTER_CRITICAL();
 800483e:	f00c fe5f 	bl	8011500 <vPortEnterCritical>
				WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf),
 8004842:	4b5a      	ldr	r3, [pc, #360]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b58      	ldr	r3, [pc, #352]	@ (80049a8 <StartTaskRxCommands+0xb98>)
 8004848:	2108      	movs	r1, #8
 800484a:	0018      	movs	r0, r3
 800484c:	f7fe fff8 	bl	8003840 <WriteDeviceAddressOffset>
						offset);
				taskEXIT_CRITICAL();
 8004850:	f00c fe68 	bl	8011524 <vPortExitCritical>
				offset += sizeof(sensor_inf);
 8004854:	4b55      	ldr	r3, [pc, #340]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	001a      	movs	r2, r3
 800485c:	4b53      	ldr	r3, [pc, #332]	@ (80049ac <StartTaskRxCommands+0xb9c>)
 800485e:	601a      	str	r2, [r3, #0]
				//    memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 8004860:	4b53      	ldr	r3, [pc, #332]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 8004862:	220a      	movs	r2, #10
 8004864:	701a      	strb	r2, [r3, #0]

			}



			if (terminal_parser_state == PARSER_IDN7) { // если посылка S0x;
 8004866:	4b52      	ldr	r3, [pc, #328]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d154      	bne.n	8004918 <StartTaskRxCommands+0xb08>

				uint8_t flags = 0;
 800486e:	207d      	movs	r0, #125	@ 0x7d
 8004870:	2428      	movs	r4, #40	@ 0x28
 8004872:	1903      	adds	r3, r0, r4
 8004874:	19db      	adds	r3, r3, r7
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 800487a:	4b4e      	ldr	r3, [pc, #312]	@ (80049b4 <StartTaskRxCommands+0xba4>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	0019      	movs	r1, r3
 8004880:	1903      	adds	r3, r0, r4
 8004882:	19db      	adds	r3, r3, r7
 8004884:	1902      	adds	r2, r0, r4
 8004886:	19d2      	adds	r2, r2, r7
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 800488e:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	b25a      	sxtb	r2, r3
 8004896:	1903      	adds	r3, r0, r4
 8004898:	19db      	adds	r3, r3, r7
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b25b      	sxtb	r3, r3
 800489e:	4313      	orrs	r3, r2
 80048a0:	b25a      	sxtb	r2, r3
 80048a2:	1903      	adds	r3, r0, r4
 80048a4:	19db      	adds	r3, r3, r7
 80048a6:	701a      	strb	r2, [r3, #0]
				if (is_error)
 80048a8:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <StartTaskRxCommands+0xaa6>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 80048b0:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
				if (IDN == 1) {
 80048b6:	4b44      	ldr	r3, [pc, #272]	@ (80049c8 <StartTaskRxCommands+0xbb8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d12c      	bne.n	8004918 <StartTaskRxCommands+0xb08>
					uint8_t str_idn[50];
					memset(str_idn, 0, sizeof(str_idn));
 80048be:	250c      	movs	r5, #12
 80048c0:	2628      	movs	r6, #40	@ 0x28
 80048c2:	19ab      	adds	r3, r5, r6
 80048c4:	19db      	adds	r3, r3, r7
 80048c6:	2232      	movs	r2, #50	@ 0x32
 80048c8:	2100      	movs	r1, #0
 80048ca:	0018      	movs	r0, r3
 80048cc:	f00e fb0c 	bl	8012ee8 <memset>
					sprintf(str_idn, "CAS,BCA5/5kg     ,%d,P80\r\n", serial_number);
 80048d0:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <StartTaskRxCommands+0xb94>)
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	001a      	movs	r2, r3
 80048d6:	493d      	ldr	r1, [pc, #244]	@ (80049cc <StartTaskRxCommands+0xbbc>)
 80048d8:	19ab      	adds	r3, r5, r6
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	0018      	movs	r0, r3
 80048de:	f00e fa5f 	bl	8012da0 <siprintf>

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80048e2:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <StartTaskRxCommands+0xbc0>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	2110      	movs	r1, #16
 80048e8:	0018      	movs	r0, r3
 80048ea:	f003 ffbc 	bl	8008866 <HAL_GPIO_WritePin>
					HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_idn,
 80048ee:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <StartTaskRxCommands+0xbc4>)
 80048f0:	681c      	ldr	r4, [r3, #0]
							strlen(str_idn));
 80048f2:	19ab      	adds	r3, r5, r6
 80048f4:	19db      	adds	r3, r3, r7
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7fb fc06 	bl	8000108 <strlen>
 80048fc:	0003      	movs	r3, r0
					HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_idn,
 80048fe:	b29a      	uxth	r2, r3
 8004900:	19ab      	adds	r3, r5, r6
 8004902:	19db      	adds	r3, r3, r7
 8004904:	0019      	movs	r1, r3
 8004906:	0020      	movs	r0, r4
 8004908:	f007 ff88 	bl	800c81c <HAL_UART_Transmit_IT>
					IDN = 0;
 800490c:	4b2e      	ldr	r3, [pc, #184]	@ (80049c8 <StartTaskRxCommands+0xbb8>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
					//		memset(receive_buf, 0, sizeof(receive_buf));
					terminal_parser_state = PARSER_EMPT;
 8004912:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 8004914:	220a      	movs	r2, #10
 8004916:	701a      	strb	r2, [r3, #0]
					//debug("Transmit to terminal: <%x>", &str_idn);
				}
			}

			if (terminal_parser_state == PARSER_DEGREE) // запрос угла наклона B0x
 8004918:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b0b      	cmp	r3, #11
 800491e:	d135      	bne.n	800498c <StartTaskRxCommands+0xb7c>
			{
				if (is_error)
 8004920:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <StartTaskRxCommands+0xb1e>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004928:	4b23      	ldr	r3, [pc, #140]	@ (80049b8 <StartTaskRxCommands+0xba8>)
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]

				char str_degree[50];
				memset(str_degree, 0, sizeof(str_degree));
 800492e:	240c      	movs	r4, #12
 8004930:	2628      	movs	r6, #40	@ 0x28
 8004932:	19a3      	adds	r3, r4, r6
 8004934:	19db      	adds	r3, r3, r7
 8004936:	2232      	movs	r2, #50	@ 0x32
 8004938:	2100      	movs	r1, #0
 800493a:	0018      	movs	r0, r3
 800493c:	f00e fad4 	bl	8012ee8 <memset>
				sprintf(str_degree, "%f\r\n", config.degree);
 8004940:	4b25      	ldr	r3, [pc, #148]	@ (80049d8 <StartTaskRxCommands+0xbc8>)
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	1c18      	adds	r0, r3, #0
 8004946:	f7fe fd2d 	bl	80033a4 <__aeabi_f2d>
 800494a:	0002      	movs	r2, r0
 800494c:	000b      	movs	r3, r1
 800494e:	4923      	ldr	r1, [pc, #140]	@ (80049dc <StartTaskRxCommands+0xbcc>)
 8004950:	0025      	movs	r5, r4
 8004952:	19a8      	adds	r0, r5, r6
 8004954:	19c0      	adds	r0, r0, r7
 8004956:	f00e fa23 	bl	8012da0 <siprintf>

				//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
				debug("Transmit to terminal: <%x>", &str_degree);
 800495a:	19ab      	adds	r3, r5, r6
 800495c:	19da      	adds	r2, r3, r7
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <StartTaskRxCommands+0xbd0>)
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f001 f8da 	bl	8005b1c <debug>
				HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_degree, strlen(str_degree));
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <StartTaskRxCommands+0xbc4>)
 800496a:	681c      	ldr	r4, [r3, #0]
 800496c:	19ab      	adds	r3, r5, r6
 800496e:	19db      	adds	r3, r3, r7
 8004970:	0018      	movs	r0, r3
 8004972:	f7fb fbc9 	bl	8000108 <strlen>
 8004976:	0003      	movs	r3, r0
 8004978:	b29a      	uxth	r2, r3
 800497a:	19ab      	adds	r3, r5, r6
 800497c:	19db      	adds	r3, r3, r7
 800497e:	0019      	movs	r1, r3
 8004980:	0020      	movs	r0, r4
 8004982:	f007 ff4b 	bl	800c81c <HAL_UART_Transmit_IT>
				//	memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 8004986:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <StartTaskRxCommands+0xba0>)
 8004988:	220a      	movs	r2, #10
 800498a:	701a      	strb	r2, [r3, #0]
			}
			//memset(receive_buf, 0, sizeof(receive_buf));
			//receive(terminal_uart, receive_buf, 1);
			//receive(terminal_uart, RX_command_buff, 1);
			debug("Receive from task\r\n");
 800498c:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <StartTaskRxCommands+0xbd4>)
 800498e:	0018      	movs	r0, r3
 8004990:	f001 f8c4 	bl	8005b1c <debug>
 8004994:	f7ff fa5f 	bl	8003e56 <StartTaskRxCommands+0x46>
		    	continue;
 8004998:	46c0      	nop			@ (mov r8, r8)
	for (;;) {
 800499a:	f7ff fa5c 	bl	8003e56 <StartTaskRxCommands+0x46>
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	20000372 	.word	0x20000372
 80049a4:	200003b4 	.word	0x200003b4
 80049a8:	200003a8 	.word	0x200003a8
 80049ac:	200003b0 	.word	0x200003b0
 80049b0:	20000004 	.word	0x20000004
 80049b4:	200003b9 	.word	0x200003b9
 80049b8:	200003b8 	.word	0x200003b8
 80049bc:	20000390 	.word	0x20000390
 80049c0:	40004400 	.word	0x40004400
 80049c4:	2000006c 	.word	0x2000006c
 80049c8:	20000378 	.word	0x20000378
 80049cc:	08016b14 	.word	0x08016b14
 80049d0:	50000c00 	.word	0x50000c00
 80049d4:	20000074 	.word	0x20000074
 80049d8:	20000008 	.word	0x20000008
 80049dc:	08016b30 	.word	0x08016b30
 80049e0:	08016af0 	.word	0x08016af0
 80049e4:	08016b38 	.word	0x08016b38

080049e8 <StartTaskAccelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAccelerometer */
void StartTaskAccelerometer(void *argument)
{
 80049e8:	b5b0      	push	{r4, r5, r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAccelerometer */
  /* Infinite loop */
	if(lis331dlh_init_spi(&config, ACCELEROMETER_SPI, ACCEL_CS_GPIO_Port, ACCEL_CS_Pin)) {
 80049f0:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <StartTaskAccelerometer+0x128>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <StartTaskAccelerometer+0x12c>)
 80049fa:	4847      	ldr	r0, [pc, #284]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 80049fc:	f001 fe18 	bl	8006630 <lis331dlh_init_spi>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d001      	beq.n	8004a08 <StartTaskAccelerometer+0x20>
		//debug("LIS331DLH DOESN'T WORK OR DOESN'T SOLDERED");
		HardFault_Handler();
 8004a04:	f002 fd1a 	bl	800743c <HardFault_Handler>
	}
	lis331dlh_update_config(&config);
 8004a08:	4b43      	ldr	r3, [pc, #268]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f001 ff55 	bl	80068ba <lis331dlh_update_config>

//	lis331dlh_print_config(&config);
	// нахождение угла наклона
	find_degree(&config);
 8004a10:	4b41      	ldr	r3, [pc, #260]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 fb58 	bl	80050c8 <find_degree>

	while (1) {

		// проверка готовности
		lis331dlh_read_status(&config);
 8004a18:	4b3f      	ldr	r3, [pc, #252]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f001 ff7d 	bl	800691a <lis331dlh_read_status>
		check_overrun(&config);
 8004a20:	4b3d      	ldr	r3, [pc, #244]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fc6a 	bl	80052fc <check_overrun>

		if (is_measurement_ready(&config)) {
 8004a28:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fc80 	bl	8005330 <is_measurement_ready>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d00b      	beq.n	8004a4c <StartTaskAccelerometer+0x64>
			// обновление данных с датчика ускорения
			lis331dlh_update_accelaration(&config);
 8004a34:	4b38      	ldr	r3, [pc, #224]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a36:	0018      	movs	r0, r3
 8004a38:	f001 feac 	bl	8006794 <lis331dlh_update_accelaration>

			// сброс максимумом и минимумов по таймерам
			reset_move_maximums();
 8004a3c:	f000 ff94 	bl	8005968 <reset_move_maximums>
			reset_acceleration_maximums();
 8004a40:	f000 ff6c 	bl	800591c <reset_acceleration_maximums>

			// алгоритм вычисления длины перемещений
			calc_length(&config);
 8004a44:	4b34      	ldr	r3, [pc, #208]	@ (8004b18 <StartTaskAccelerometer+0x130>)
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 fecc 	bl	80057e4 <calc_length>
		}

		vTaskDelay(5);
 8004a4c:	2005      	movs	r0, #5
 8004a4e:	f00b fc19 	bl	8010284 <vTaskDelay>

		float maximum = fmax(
				round_and_limit_float(get_max_positive_move()),
 8004a52:	f000 ffc3 	bl	80059dc <get_max_positive_move>
 8004a56:	1c03      	adds	r3, r0, #0
 8004a58:	1c18      	adds	r0, r3, #0
 8004a5a:	f000 ffd3 	bl	8005a04 <round_and_limit_float>
 8004a5e:	1c03      	adds	r3, r0, #0
		float maximum = fmax(
 8004a60:	1c18      	adds	r0, r3, #0
 8004a62:	f7fe fc9f 	bl	80033a4 <__aeabi_f2d>
 8004a66:	0004      	movs	r4, r0
 8004a68:	000d      	movs	r5, r1
				round_and_limit_float(get_max_negative_move()));
 8004a6a:	f000 ffc1 	bl	80059f0 <get_max_negative_move>
 8004a6e:	1c03      	adds	r3, r0, #0
 8004a70:	1c18      	adds	r0, r3, #0
 8004a72:	f000 ffc7 	bl	8005a04 <round_and_limit_float>
 8004a76:	1c03      	adds	r3, r0, #0
		float maximum = fmax(
 8004a78:	1c18      	adds	r0, r3, #0
 8004a7a:	f7fe fc93 	bl	80033a4 <__aeabi_f2d>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	000b      	movs	r3, r1
 8004a82:	0020      	movs	r0, r4
 8004a84:	0029      	movs	r1, r5
 8004a86:	f00c ffca 	bl	8011a1e <fmax>
 8004a8a:	0002      	movs	r2, r0
 8004a8c:	000b      	movs	r3, r1
 8004a8e:	0010      	movs	r0, r2
 8004a90:	0019      	movs	r1, r3
 8004a92:	f7fe fccf 	bl	8003434 <__aeabi_d2f>
 8004a96:	1c03      	adds	r3, r0, #0
 8004a98:	60fb      	str	r3, [r7, #12]

		float max_acceleration = fmax(
				round_and_limit_float(get_max_positive_acceleration()),
 8004a9a:	f000 ff8b 	bl	80059b4 <get_max_positive_acceleration>
 8004a9e:	1c03      	adds	r3, r0, #0
 8004aa0:	1c18      	adds	r0, r3, #0
 8004aa2:	f000 ffaf 	bl	8005a04 <round_and_limit_float>
 8004aa6:	1c03      	adds	r3, r0, #0
		float max_acceleration = fmax(
 8004aa8:	1c18      	adds	r0, r3, #0
 8004aaa:	f7fe fc7b 	bl	80033a4 <__aeabi_f2d>
 8004aae:	0004      	movs	r4, r0
 8004ab0:	000d      	movs	r5, r1
				round_and_limit_float(get_max_negative_acceleration()));
 8004ab2:	f000 ff89 	bl	80059c8 <get_max_negative_acceleration>
 8004ab6:	1c03      	adds	r3, r0, #0
 8004ab8:	1c18      	adds	r0, r3, #0
 8004aba:	f000 ffa3 	bl	8005a04 <round_and_limit_float>
 8004abe:	1c03      	adds	r3, r0, #0
		float max_acceleration = fmax(
 8004ac0:	1c18      	adds	r0, r3, #0
 8004ac2:	f7fe fc6f 	bl	80033a4 <__aeabi_f2d>
 8004ac6:	0002      	movs	r2, r0
 8004ac8:	000b      	movs	r3, r1
 8004aca:	0020      	movs	r0, r4
 8004acc:	0029      	movs	r1, r5
 8004ace:	f00c ffa6 	bl	8011a1e <fmax>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	000b      	movs	r3, r1
 8004ad6:	0010      	movs	r0, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	f7fe fcab 	bl	8003434 <__aeabi_d2f>
 8004ade:	1c03      	adds	r3, r0, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
//			maximum_move_in_period = 0;
//			max_acceleration_in_period = 0;
		//	debug("\r\nTaskAccelerometer: Timer resetted. maximum_in_period = %f max_acceleration_in_period = %f \r\n", maximum_move_in_period, max_acceleration_in_period);
		}

		if(maximum > maximum_move_in_period) maximum_move_in_period = maximum;
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <StartTaskAccelerometer+0x134>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1c19      	adds	r1, r3, #0
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7fb fd03 	bl	80004f4 <__aeabi_fcmpgt>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d002      	beq.n	8004af8 <StartTaskAccelerometer+0x110>
 8004af2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b1c <StartTaskAccelerometer+0x134>)
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	601a      	str	r2, [r3, #0]
		if(max_acceleration > max_acceleration_in_period) max_acceleration_in_period = max_acceleration;
 8004af8:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <StartTaskAccelerometer+0x138>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1c19      	adds	r1, r3, #0
 8004afe:	68b8      	ldr	r0, [r7, #8]
 8004b00:	f7fb fcf8 	bl	80004f4 <__aeabi_fcmpgt>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d002      	beq.n	8004b0e <StartTaskAccelerometer+0x126>
 8004b08:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <StartTaskAccelerometer+0x138>)
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	601a      	str	r2, [r3, #0]
	while (1) {
 8004b0e:	e783      	b.n	8004a18 <StartTaskAccelerometer+0x30>
 8004b10:	20000068 	.word	0x20000068
 8004b14:	50000400 	.word	0x50000400
 8004b18:	20000008 	.word	0x20000008
 8004b1c:	200003bc 	.word	0x200003bc
 8004b20:	200003c0 	.word	0x200003c0

08004b24 <StartSensorsPolling>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsPolling */
void StartSensorsPolling(void *argument)
{
 8004b24:	b5b0      	push	{r4, r5, r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsPolling */
 /* Infinite loop */

	//vTaskDelay(200);
	taskENTER_CRITICAL();
 8004b2c:	f00c fce8 	bl	8011500 <vPortEnterCritical>
	if(!hdc1080_init(SENSORS_I2C, HDC_config.temperature_resolution, HDC_config.humidity_resolution)) {
 8004b30:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf0 <StartSensorsPolling+0xcc>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf4 <StartSensorsPolling+0xd0>)
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf4 <StartSensorsPolling+0xd0>)
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	f001 fa87 	bl	8006050 <hdc1080_init>
 8004b42:	0003      	movs	r3, r0
 8004b44:	001a      	movs	r2, r3
 8004b46:	2301      	movs	r3, #1
 8004b48:	4053      	eors	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <StartSensorsPolling+0x30>
		//debug("HDC1080 DOESN'T WORK OR DOESN'T SOLDERED");
		HardFault_Handler();
 8004b50:	f002 fc74 	bl	800743c <HardFault_Handler>
	}

	if(!lps22hb_init(SENSORS_I2C)) {
 8004b54:	4b26      	ldr	r3, [pc, #152]	@ (8004bf0 <StartSensorsPolling+0xcc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f001 ff53 	bl	8006a04 <lps22hb_init>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	001a      	movs	r2, r3
 8004b62:	2301      	movs	r3, #1
 8004b64:	4053      	eors	r3, r2
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <StartSensorsPolling+0x4c>
		//debug("LPS22HB DOESN'T WORK OR DOESN'T SOLDERED");
		HardFault_Handler();
 8004b6c:	f002 fc66 	bl	800743c <HardFault_Handler>
	}
	taskEXIT_CRITICAL();
 8004b70:	f00c fcd8 	bl	8011524 <vPortExitCritical>
			osDelay(200);
 8004b74:	20c8      	movs	r0, #200	@ 0xc8
 8004b76:	f00a fba2 	bl	800f2be <osDelay>

	for (;;) {

		uint8_t status = lps22hb_get_status(&config);
 8004b7a:	250f      	movs	r5, #15
 8004b7c:	197c      	adds	r4, r7, r5
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <StartSensorsPolling+0xd4>)
 8004b80:	0018      	movs	r0, r3
 8004b82:	f001 ffaf 	bl	8006ae4 <lps22hb_get_status>
 8004b86:	0003      	movs	r3, r0
 8004b88:	7023      	strb	r3, [r4, #0]
		lps22hb_check_pressure_overrun(status);
 8004b8a:	002c      	movs	r4, r5
 8004b8c:	193b      	adds	r3, r7, r4
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f001 ffb9 	bl	8006b08 <lps22hb_check_pressure_overrun>
		lps22hb_check_temperature_overrun(status);
 8004b96:	193b      	adds	r3, r7, r4
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f001 ffd8 	bl	8006b50 <lps22hb_check_temperature_overrun>

		if (lps22hb_check_pressure_data_available(status) && lps22hb_check_temperature_data_available(status))
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f001 fff7 	bl	8006b98 <lps22hb_check_pressure_data_available>
 8004baa:	1e03      	subs	r3, r0, #0
 8004bac:	d01c      	beq.n	8004be8 <StartSensorsPolling+0xc4>
 8004bae:	193b      	adds	r3, r7, r4
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f002 f801 	bl	8006bba <lps22hb_check_temperature_data_available>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d015      	beq.n	8004be8 <StartSensorsPolling+0xc4>
		{
			hdc1080_start_measurement(&HDC_config.last_temperature, &HDC_config.last_humidity);
 8004bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004bfc <StartSensorsPolling+0xd8>)
 8004bbe:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <StartSensorsPolling+0xdc>)
 8004bc0:	0011      	movs	r1, r2
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f001 fab6 	bl	8006134 <hdc1080_start_measurement>
						//debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
//								HDC_config.last_temperature,
//								HDC_config.last_humidity);

						LPS_data.last_pressure = lps22hb_read_pressure();
 8004bc8:	f002 f808 	bl	8006bdc <lps22hb_read_pressure>
 8004bcc:	1c02      	adds	r2, r0, #0
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <StartSensorsPolling+0xe0>)
 8004bd0:	605a      	str	r2, [r3, #4]
						LPS_data.last_temperature = lps22hb_read_temperature();
 8004bd2:	f002 f86b 	bl	8006cac <lps22hb_read_temperature>
 8004bd6:	1c02      	adds	r2, r0, #0
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <StartSensorsPolling+0xe0>)
 8004bda:	601a      	str	r2, [r3, #0]
//			LPS_data.last_temperature = lps22hb_read_temperature();
//			debug("LPS22HB RAW TEMP: 0x%4x RAW PRESSURE: 0x%4x\r\n",
//					LPS_data.last_temperature,
//					LPS_data.last_pressure);

			vTaskDelay(1000);
 8004bdc:	23fa      	movs	r3, #250	@ 0xfa
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	0018      	movs	r0, r3
 8004be2:	f00b fb4f 	bl	8010284 <vTaskDelay>
 8004be6:	e002      	b.n	8004bee <StartSensorsPolling+0xca>
//														HAL_UART_Transmit (&huart3, last_temperatureLps_prin, len4, 100);


		}
		else {
			vTaskDelay(10);
 8004be8:	200a      	movs	r0, #10
 8004bea:	f00b fb4b 	bl	8010284 <vTaskDelay>
	for (;;) {
 8004bee:	e7c4      	b.n	8004b7a <StartSensorsPolling+0x56>
 8004bf0:	20000064 	.word	0x20000064
 8004bf4:	2000039c 	.word	0x2000039c
 8004bf8:	20000008 	.word	0x20000008
 8004bfc:	200003a4 	.word	0x200003a4
 8004c00:	200003a0 	.word	0x200003a0
 8004c04:	20000394 	.word	0x20000394

08004c08 <StartADS1232Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADS1232Task */
void StartADS1232Task(void *argument)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADS1232Task */
  /* Infinite loop */

	HAL_TIM_Base_Start_IT(&htim2);
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <StartADS1232Task+0x28>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f007 f8fe 	bl	800be14 <HAL_TIM_Base_Start_IT>
	Start_read(&htim2, TIM2);
 8004c18:	2380      	movs	r3, #128	@ 0x80
 8004c1a:	05da      	lsls	r2, r3, #23
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <StartADS1232Task+0x28>)
 8004c1e:	0011      	movs	r1, r2
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7fe fd91 	bl	8003748 <Start_read>

  for(;;)
  {
	 // Start_read(&htim2, TIM2);
	      vTaskDelay(100);
 8004c26:	2064      	movs	r0, #100	@ 0x64
 8004c28:	f00b fb2c 	bl	8010284 <vTaskDelay>
 8004c2c:	e7fb      	b.n	8004c26 <StartADS1232Task+0x1e>
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	200026ac 	.word	0x200026ac

08004c34 <maximumsPeriodTimer_callback>:
  /* USER CODE END StartADS1232Task */
}

/* maximumsPeriodTimer_callback function */
void maximumsPeriodTimer_callback(void *argument)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN maximumsPeriodTimer_callback */
	//debug("\r\n===Timer 10 minutes: reloaded===\r\n");
	period_expired = true;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	@ (8004c4c <maximumsPeriodTimer_callback+0x18>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
  /* USER CODE END maximumsPeriodTimer_callback */
}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b002      	add	sp, #8
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	200003ba 	.word	0x200003ba

08004c50 <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения приема данных
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

	//BaseType_t xHigherPriorityTaskWoken;
	//xHigherPriorityTaskWoken = pdFALSE;

	if(huart == &huart2) {
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4ba3      	ldr	r3, [pc, #652]	@ (8004ee8 <HAL_UART_RxCpltCallback+0x298>)
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d000      	beq.n	8004c62 <HAL_UART_RxCpltCallback+0x12>
 8004c60:	e13d      	b.n	8004ede <HAL_UART_RxCpltCallback+0x28e>

//			if (RX_command_buff[0] == 0){
//				osDelay(1);
//			}

			if ((RX_command_buff[0] == 'S'||RX_command_buff[0] == 'M'||RX_command_buff[0] == 'I'||RX_command_buff[0] == 'B'||RX_command_buff[0] == 'A')&&RX_command_count==0) {
 8004c62:	4ba2      	ldr	r3, [pc, #648]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b53      	cmp	r3, #83	@ 0x53
 8004c68:	d00f      	beq.n	8004c8a <HAL_UART_RxCpltCallback+0x3a>
 8004c6a:	4ba0      	ldr	r3, [pc, #640]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b4d      	cmp	r3, #77	@ 0x4d
 8004c70:	d00b      	beq.n	8004c8a <HAL_UART_RxCpltCallback+0x3a>
 8004c72:	4b9e      	ldr	r3, [pc, #632]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b49      	cmp	r3, #73	@ 0x49
 8004c78:	d007      	beq.n	8004c8a <HAL_UART_RxCpltCallback+0x3a>
 8004c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b42      	cmp	r3, #66	@ 0x42
 8004c80:	d003      	beq.n	8004c8a <HAL_UART_RxCpltCallback+0x3a>
 8004c82:	4b9a      	ldr	r3, [pc, #616]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b41      	cmp	r3, #65	@ 0x41
 8004c88:	d10f      	bne.n	8004caa <HAL_UART_RxCpltCallback+0x5a>
 8004c8a:	4b99      	ldr	r3, [pc, #612]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_UART_RxCpltCallback+0x5a>
				received_command[RX_command_count]=RX_command_buff[0];
 8004c92:	4b97      	ldr	r3, [pc, #604]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a95      	ldr	r2, [pc, #596]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004c98:	7811      	ldrb	r1, [r2, #0]
 8004c9a:	4a96      	ldr	r2, [pc, #600]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004c9c:	54d1      	strb	r1, [r2, r3]
				RX_command_count=RX_command_count+1;
 8004c9e:	4b94      	ldr	r3, [pc, #592]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	4b92      	ldr	r3, [pc, #584]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e103      	b.n	8004eb2 <HAL_UART_RxCpltCallback+0x262>
			}
			else if (RX_command_buff[0]!= ';'&&RX_command_count!=0&&RX_command_count<=17) {
 8004caa:	4b90      	ldr	r3, [pc, #576]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b3b      	cmp	r3, #59	@ 0x3b
 8004cb0:	d013      	beq.n	8004cda <HAL_UART_RxCpltCallback+0x8a>
 8004cb2:	4b8f      	ldr	r3, [pc, #572]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00f      	beq.n	8004cda <HAL_UART_RxCpltCallback+0x8a>
 8004cba:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b11      	cmp	r3, #17
 8004cc0:	dc0b      	bgt.n	8004cda <HAL_UART_RxCpltCallback+0x8a>
				received_command[RX_command_count]=RX_command_buff[0];
 8004cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a89      	ldr	r2, [pc, #548]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004cc8:	7811      	ldrb	r1, [r2, #0]
 8004cca:	4a8a      	ldr	r2, [pc, #552]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004ccc:	54d1      	strb	r1, [r2, r3]
				RX_command_count=RX_command_count+1;
 8004cce:	4b88      	ldr	r3, [pc, #544]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	4b86      	ldr	r3, [pc, #536]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e0eb      	b.n	8004eb2 <HAL_UART_RxCpltCallback+0x262>
			}
			else if (RX_command_buff[0]== ';'&&RX_command_count!=0) {
 8004cda:	4b84      	ldr	r3, [pc, #528]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b3b      	cmp	r3, #59	@ 0x3b
 8004ce0:	d000      	beq.n	8004ce4 <HAL_UART_RxCpltCallback+0x94>
 8004ce2:	e0e6      	b.n	8004eb2 <HAL_UART_RxCpltCallback+0x262>
 8004ce4:	4b82      	ldr	r3, [pc, #520]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d100      	bne.n	8004cee <HAL_UART_RxCpltCallback+0x9e>
 8004cec:	e0e1      	b.n	8004eb2 <HAL_UART_RxCpltCallback+0x262>
				received_command[RX_command_count]=RX_command_buff[0];
 8004cee:	4b80      	ldr	r3, [pc, #512]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004cf4:	7811      	ldrb	r1, [r2, #0]
 8004cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004cf8:	54d1      	strb	r1, [r2, r3]
				RX_command_count=0;
 8004cfa:	4b7d      	ldr	r3, [pc, #500]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]



				if (received_command[0]=='S'){
 8004d00:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b53      	cmp	r3, #83	@ 0x53
 8004d06:	d137      	bne.n	8004d78 <HAL_UART_RxCpltCallback+0x128>

					if (received_command[1]=='4'&&received_command[2]==platform_number.number_ch){
 8004d08:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b34      	cmp	r3, #52	@ 0x34
 8004d0e:	d109      	bne.n	8004d24 <HAL_UART_RxCpltCallback+0xd4>
 8004d10:	4b78      	ldr	r3, [pc, #480]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d12:	789a      	ldrb	r2, [r3, #2]
 8004d14:	4b78      	ldr	r3, [pc, #480]	@ (8004ef8 <HAL_UART_RxCpltCallback+0x2a8>)
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d103      	bne.n	8004d24 <HAL_UART_RxCpltCallback+0xd4>

						terminal_parser_state = PARSER_S4x;
 8004d1c:	4b77      	ldr	r3, [pc, #476]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e0b6      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>

					}
					else if (received_command[1]==sensor_inf.platform_adr[0]&& (received_command[2]==(sensor_inf.platform_adr[1]))){
 8004d24:	4b73      	ldr	r3, [pc, #460]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d26:	785a      	ldrb	r2, [r3, #1]
 8004d28:	4b75      	ldr	r3, [pc, #468]	@ (8004f00 <HAL_UART_RxCpltCallback+0x2b0>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d109      	bne.n	8004d44 <HAL_UART_RxCpltCallback+0xf4>
 8004d30:	4b70      	ldr	r3, [pc, #448]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d32:	789a      	ldrb	r2, [r3, #2]
 8004d34:	4b72      	ldr	r3, [pc, #456]	@ (8004f00 <HAL_UART_RxCpltCallback+0x2b0>)
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d103      	bne.n	8004d44 <HAL_UART_RxCpltCallback+0xf4>

						terminal_parser_state = PARSER_Sxx;
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e0a6      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
					}
					else if (received_command[1]=='9'&&received_command[2]=='8'){
 8004d44:	4b6b      	ldr	r3, [pc, #428]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b39      	cmp	r3, #57	@ 0x39
 8004d4a:	d107      	bne.n	8004d5c <HAL_UART_RxCpltCallback+0x10c>
 8004d4c:	4b69      	ldr	r3, [pc, #420]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d4e:	789b      	ldrb	r3, [r3, #2]
 8004d50:	2b38      	cmp	r3, #56	@ 0x38
 8004d52:	d103      	bne.n	8004d5c <HAL_UART_RxCpltCallback+0x10c>

						terminal_parser_state = PARSER_S98; //(Ничего не отвечаем)
 8004d54:	4b69      	ldr	r3, [pc, #420]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004d56:	2202      	movs	r2, #2
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e09a      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
					}
					else if (received_command[1]=='T'&&received_command[2]=='P'){
 8004d5c:	4b65      	ldr	r3, [pc, #404]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b54      	cmp	r3, #84	@ 0x54
 8004d62:	d000      	beq.n	8004d66 <HAL_UART_RxCpltCallback+0x116>
 8004d64:	e095      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
 8004d66:	4b63      	ldr	r3, [pc, #396]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	2b50      	cmp	r3, #80	@ 0x50
 8004d6c:	d000      	beq.n	8004d70 <HAL_UART_RxCpltCallback+0x120>
 8004d6e:	e090      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>

						terminal_parser_state = PARSER_STP; //(становка передачи сбрасываем MSV?0)
 8004d70:	4b62      	ldr	r3, [pc, #392]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004d72:	2209      	movs	r2, #9
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e08c      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
					}
				}
				else if (received_command[0]=='M'&&received_command[1]=='S'&&received_command[2]=='V'&&received_command[3]=='?'&&received_command[4]=='0') {
 8004d78:	4b5e      	ldr	r3, [pc, #376]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b4d      	cmp	r3, #77	@ 0x4d
 8004d7e:	d113      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x158>
 8004d80:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b53      	cmp	r3, #83	@ 0x53
 8004d86:	d10f      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x158>
 8004d88:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d8a:	789b      	ldrb	r3, [r3, #2]
 8004d8c:	2b56      	cmp	r3, #86	@ 0x56
 8004d8e:	d10b      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x158>
 8004d90:	4b58      	ldr	r3, [pc, #352]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d96:	d107      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x158>
 8004d98:	4b56      	ldr	r3, [pc, #344]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004d9a:	791b      	ldrb	r3, [r3, #4]
 8004d9c:	2b30      	cmp	r3, #48	@ 0x30
 8004d9e:	d103      	bne.n	8004da8 <HAL_UART_RxCpltCallback+0x158>

					terminal_parser_state = PARSER_MSV70;
 8004da0:	4b56      	ldr	r3, [pc, #344]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004da2:	2203      	movs	r2, #3
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e074      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
				}
				else if (received_command[0]=='M'&&received_command[1]=='S'&&received_command[2]=='V'&&received_command[3]=='?'&&received_command[4]!='0') {
 8004da8:	4b52      	ldr	r3, [pc, #328]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b4d      	cmp	r3, #77	@ 0x4d
 8004dae:	d113      	bne.n	8004dd8 <HAL_UART_RxCpltCallback+0x188>
 8004db0:	4b50      	ldr	r3, [pc, #320]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b53      	cmp	r3, #83	@ 0x53
 8004db6:	d10f      	bne.n	8004dd8 <HAL_UART_RxCpltCallback+0x188>
 8004db8:	4b4e      	ldr	r3, [pc, #312]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	2b56      	cmp	r3, #86	@ 0x56
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_UART_RxCpltCallback+0x188>
 8004dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004dc2:	78db      	ldrb	r3, [r3, #3]
 8004dc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dc6:	d107      	bne.n	8004dd8 <HAL_UART_RxCpltCallback+0x188>
 8004dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004dca:	791b      	ldrb	r3, [r3, #4]
 8004dcc:	2b30      	cmp	r3, #48	@ 0x30
 8004dce:	d003      	beq.n	8004dd8 <HAL_UART_RxCpltCallback+0x188>

					terminal_parser_state = PARSER_MSV7;
 8004dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004dd2:	2205      	movs	r2, #5
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e05c      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
				}
				else if (received_command[0]=='I'&&received_command[1]=='D'&&received_command[2]=='N'&&received_command[3]=='?') {
 8004dd8:	4b46      	ldr	r3, [pc, #280]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b49      	cmp	r3, #73	@ 0x49
 8004dde:	d10f      	bne.n	8004e00 <HAL_UART_RxCpltCallback+0x1b0>
 8004de0:	4b44      	ldr	r3, [pc, #272]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b44      	cmp	r3, #68	@ 0x44
 8004de6:	d10b      	bne.n	8004e00 <HAL_UART_RxCpltCallback+0x1b0>
 8004de8:	4b42      	ldr	r3, [pc, #264]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004dea:	789b      	ldrb	r3, [r3, #2]
 8004dec:	2b4e      	cmp	r3, #78	@ 0x4e
 8004dee:	d107      	bne.n	8004e00 <HAL_UART_RxCpltCallback+0x1b0>
 8004df0:	4b40      	ldr	r3, [pc, #256]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	2b3f      	cmp	r3, #63	@ 0x3f
 8004df6:	d103      	bne.n	8004e00 <HAL_UART_RxCpltCallback+0x1b0>

					terminal_parser_state = PARSER_IDN7;
 8004df8:	4b40      	ldr	r3, [pc, #256]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004dfa:	2206      	movs	r2, #6
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e048      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
				}
				else if (received_command[0]=='A'&&received_command[1]=='D'&&received_command[2]=='R'&&received_command[3]=='?') {
 8004e00:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b41      	cmp	r3, #65	@ 0x41
 8004e06:	d10f      	bne.n	8004e28 <HAL_UART_RxCpltCallback+0x1d8>
 8004e08:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b44      	cmp	r3, #68	@ 0x44
 8004e0e:	d10b      	bne.n	8004e28 <HAL_UART_RxCpltCallback+0x1d8>
 8004e10:	4b38      	ldr	r3, [pc, #224]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	2b52      	cmp	r3, #82	@ 0x52
 8004e16:	d107      	bne.n	8004e28 <HAL_UART_RxCpltCallback+0x1d8>
 8004e18:	4b36      	ldr	r3, [pc, #216]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e1a:	78db      	ldrb	r3, [r3, #3]
 8004e1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e1e:	d103      	bne.n	8004e28 <HAL_UART_RxCpltCallback+0x1d8>

					terminal_parser_state = PARSER_ADR7;
 8004e20:	4b36      	ldr	r3, [pc, #216]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004e22:	2207      	movs	r2, #7
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	e034      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
				}
				else if (received_command[0]=='A'&&received_command[1]=='D'&&received_command[2]=='R'&&received_command[3]!='?') {
 8004e28:	4b32      	ldr	r3, [pc, #200]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b41      	cmp	r3, #65	@ 0x41
 8004e2e:	d10f      	bne.n	8004e50 <HAL_UART_RxCpltCallback+0x200>
 8004e30:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b44      	cmp	r3, #68	@ 0x44
 8004e36:	d10b      	bne.n	8004e50 <HAL_UART_RxCpltCallback+0x200>
 8004e38:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e3a:	789b      	ldrb	r3, [r3, #2]
 8004e3c:	2b52      	cmp	r3, #82	@ 0x52
 8004e3e:	d107      	bne.n	8004e50 <HAL_UART_RxCpltCallback+0x200>
 8004e40:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e42:	78db      	ldrb	r3, [r3, #3]
 8004e44:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e46:	d003      	beq.n	8004e50 <HAL_UART_RxCpltCallback+0x200>

					terminal_parser_state = PARSER_ADRNUM;
 8004e48:	4b2c      	ldr	r3, [pc, #176]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e020      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
					}
				else if (received_command[0]=='B'&&received_command[1]=='D'&&received_command[2]=='R') {
 8004e50:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b42      	cmp	r3, #66	@ 0x42
 8004e56:	d10b      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x220>
 8004e58:	4b26      	ldr	r3, [pc, #152]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b44      	cmp	r3, #68	@ 0x44
 8004e5e:	d107      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x220>
 8004e60:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e62:	789b      	ldrb	r3, [r3, #2]
 8004e64:	2b52      	cmp	r3, #82	@ 0x52
 8004e66:	d103      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x220>

				     terminal_parser_state = PARSER_BDR;
 8004e68:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e010      	b.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
				}
				else if (received_command[0]=='B'&&received_command[1]=='0'&&received_command[2]==platform_number.number_ch) {
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b42      	cmp	r3, #66	@ 0x42
 8004e76:	d10c      	bne.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
 8004e78:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b30      	cmp	r3, #48	@ 0x30
 8004e7e:	d108      	bne.n	8004e92 <HAL_UART_RxCpltCallback+0x242>
 8004e80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e82:	789a      	ldrb	r2, [r3, #2]
 8004e84:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef8 <HAL_UART_RxCpltCallback+0x2a8>)
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d102      	bne.n	8004e92 <HAL_UART_RxCpltCallback+0x242>

					 terminal_parser_state = PARSER_DEGREE;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004e8e:	220b      	movs	r2, #11
 8004e90:	701a      	strb	r2, [r3, #0]
				}

				RX_command_count = 0;
 8004e92:	4b17      	ldr	r3, [pc, #92]	@ (8004ef0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
			//	RX_command_buff[0] = 0;
				//vTaskNotifyGiveFromISR( rxCommandsTaskHandle, &xHigherPriorityTaskWoken );
				xQueueSendToBack(g_mesQueue, received_command, 0);
 8004e98:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <HAL_UART_RxCpltCallback+0x2b4>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	4915      	ldr	r1, [pc, #84]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f00a fccc 	bl	800f83e <xQueueGenericSend>
				memset(received_command,0,sizeof(received_command));
 8004ea6:	4b13      	ldr	r3, [pc, #76]	@ (8004ef4 <HAL_UART_RxCpltCallback+0x2a4>)
 8004ea8:	2216      	movs	r2, #22
 8004eaa:	2100      	movs	r1, #0
 8004eac:	0018      	movs	r0, r3
 8004eae:	f00e f81b 	bl	8012ee8 <memset>
			}
		extended_debug("New state = %d\r\n", terminal_parser_state);
 8004eb2:	4b12      	ldr	r3, [pc, #72]	@ (8004efc <HAL_UART_RxCpltCallback+0x2ac>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <HAL_UART_RxCpltCallback+0x2b8>)
 8004eba:	0011      	movs	r1, r2
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 fea1 	bl	8005c04 <extended_debug>
		RX_command_buff[0] = 0;
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(terminal_uart, RX_command_buff, 1);
 8004ec8:	4b10      	ldr	r3, [pc, #64]	@ (8004f0c <HAL_UART_RxCpltCallback+0x2bc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4907      	ldr	r1, [pc, #28]	@ (8004eec <HAL_UART_RxCpltCallback+0x29c>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f007 fd4b 	bl	800c96c <HAL_UART_Receive_IT>
		extended_debug("Receive from handler\r\n");
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <HAL_UART_RxCpltCallback+0x2c0>)
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 fe93 	bl	8005c04 <extended_debug>
		}



}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	2000278c 	.word	0x2000278c
 8004eec:	2000037c 	.word	0x2000037c
 8004ef0:	20000380 	.word	0x20000380
 8004ef4:	2000035c 	.word	0x2000035c
 8004ef8:	20000050 	.word	0x20000050
 8004efc:	20000004 	.word	0x20000004
 8004f00:	200003a8 	.word	0x200003a8
 8004f04:	200003c4 	.word	0x200003c4
 8004f08:	08016b4c 	.word	0x08016b4c
 8004f0c:	20000074 	.word	0x20000074
 8004f10:	08016b60 	.word	0x08016b60

08004f14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения передачи данных
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 ) {
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <HAL_UART_TxCpltCallback+0x34>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d105      	bne.n	8004f30 <HAL_UART_TxCpltCallback+0x1c>
		//osDelay(1);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004f24:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <HAL_UART_TxCpltCallback+0x38>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	2110      	movs	r1, #16
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f003 fc9b 	bl	8008866 <HAL_GPIO_WritePin>
	}
	if (huart == debug_uart) {
 8004f30:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <HAL_UART_TxCpltCallback+0x3c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_TxCpltCallback+0x2a>
		reset_debug_variables();
 8004f3a:	f000 fd8b 	bl	8005a54 <reset_debug_variables>
	}
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b002      	add	sp, #8
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	2000278c 	.word	0x2000278c
 8004f4c:	50000c00 	.word	0x50000c00
 8004f50:	20000070 	.word	0x20000070

08004f54 <check_errors>:

void check_errors() {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xBBBB){
 8004f58:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <check_errors+0x84>)
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f005 ffc6 	bl	800aeee <HAL_RTCEx_BKUPRead>
 8004f62:	0003      	movs	r3, r0
 8004f64:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <check_errors+0x88>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d114      	bne.n	8004f94 <check_errors+0x40>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <check_errors+0x8c>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2104      	movs	r1, #4
 8004f70:	0018      	movs	r0, r3
 8004f72:	f003 fc78 	bl	8008866 <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 8004f76:	f004 ff17 	bl	8009da8 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004f7a:	4b17      	ldr	r3, [pc, #92]	@ (8004fd8 <check_errors+0x84>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	0018      	movs	r0, r3
 8004f82:	f005 ff97 	bl	800aeb4 <HAL_RTCEx_BKUPWrite>
		is_error = true;
 8004f86:	4b17      	ldr	r3, [pc, #92]	@ (8004fe4 <check_errors+0x90>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: HardFault ====================\r\n");
 8004f8c:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <check_errors+0x94>)
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f000 fdc4 	bl	8005b1c <debug>
	}

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xAAAA){
 8004f94:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <check_errors+0x84>)
 8004f96:	2100      	movs	r1, #0
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f005 ffa8 	bl	800aeee <HAL_RTCEx_BKUPRead>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	4a12      	ldr	r2, [pc, #72]	@ (8004fec <check_errors+0x98>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d114      	bne.n	8004fd0 <check_errors+0x7c>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <check_errors+0x8c>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	2104      	movs	r1, #4
 8004fac:	0018      	movs	r0, r3
 8004fae:	f003 fc5a 	bl	8008866 <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 8004fb2:	f004 fef9 	bl	8009da8 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <check_errors+0x84>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2100      	movs	r1, #0
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f005 ff79 	bl	800aeb4 <HAL_RTCEx_BKUPWrite>
		is_error = true;
 8004fc2:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <check_errors+0x90>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: ErrorHandler ====================\r\n");
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <check_errors+0x9c>)
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 fda6 	bl	8005b1c <debug>
	}
}
 8004fd0:	46c0      	nop			@ (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	2000251c 	.word	0x2000251c
 8004fdc:	0000bbbb 	.word	0x0000bbbb
 8004fe0:	50000c00 	.word	0x50000c00
 8004fe4:	200003b8 	.word	0x200003b8
 8004fe8:	08016b78 	.word	0x08016b78
 8004fec:	0000aaaa 	.word	0x0000aaaa
 8004ff0:	08016bc0 	.word	0x08016bc0

08004ff4 <ADS_Callback>:
void ADS_Callback(uint32_t value){
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b090      	sub	sp, #64	@ 0x40
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

	 ads_val = value;
 8004ffc:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <ADS_Callback+0x2c>)
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
		char ADS_val_prin[50]; //size of the number
		int len5 =  sprintf(ADS_val_prin, "ADS_VAL: %d\n\r", ads_val);
 8005002:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <ADS_Callback+0x2c>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4907      	ldr	r1, [pc, #28]	@ (8005024 <ADS_Callback+0x30>)
 8005008:	2308      	movs	r3, #8
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	0018      	movs	r0, r3
 800500e:	f00d fec7 	bl	8012da0 <siprintf>
 8005012:	0003      	movs	r3, r0
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c

		//HAL_UART_Transmit (&huart3, ADS_val_prin, len5, 100);

}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b010      	add	sp, #64	@ 0x40
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	20000374 	.word	0x20000374
 8005024:	08016c08 	.word	0x08016c08

08005028 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	1c18      	adds	r0, r3, #0
 8005038:	46bd      	mov	sp, r7
 800503a:	b002      	add	sp, #8
 800503c:	bd80      	pop	{r7, pc}

0800503e <_ZSt4fmaxff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	1c11      	adds	r1, r2, #0
 800504e:	1c18      	adds	r0, r3, #0
 8005050:	f00c fd36 	bl	8011ac0 <fmaxf>
 8005054:	1c03      	adds	r3, r0, #0
 8005056:	1c18      	adds	r0, r3, #0
 8005058:	46bd      	mov	sp, r7
 800505a:	b002      	add	sp, #8
 800505c:	bd80      	pop	{r7, pc}

0800505e <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	1c11      	adds	r1, r2, #0
 800506e:	1c18      	adds	r0, r3, #0
 8005070:	f00c fd3c 	bl	8011aec <fminf>
 8005074:	1c03      	adds	r3, r0, #0
 8005076:	1c18      	adds	r0, r3, #0
 8005078:	46bd      	mov	sp, r7
 800507a:	b002      	add	sp, #8
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <_Z21get_acceleration_dataP11lis331dlh_t>:
// поправочный коэффициент на наклон
float incline_factor = 0;


// функция получения ускорения по рабочей оси
int32_t get_acceleration_data(lis331dlh_t * config) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

	if(config->axis_select_x_z == AXIS_X) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	7d1b      	ldrb	r3, [r3, #20]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <_Z21get_acceleration_dataP11lis331dlh_t+0x16>
		return config->accelarations.x;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	e012      	b.n	80050bc <_Z21get_acceleration_dataP11lis331dlh_t+0x3c>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7d1b      	ldrb	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <_Z21get_acceleration_dataP11lis331dlh_t+0x24>
		return config->accelarations.z;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a2:	e00b      	b.n	80050bc <_Z21get_acceleration_dataP11lis331dlh_t+0x3c>
	}

	if(config->axis_select_x_z == AXIS_Y) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7d1b      	ldrb	r3, [r3, #20]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d102      	bne.n	80050b2 <_Z21get_acceleration_dataP11lis331dlh_t+0x32>
		return config->accelarations.y;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b0:	e004      	b.n	80050bc <_Z21get_acceleration_dataP11lis331dlh_t+0x3c>
	}

	debug("ERROR: wrong axis selected!");
 80050b2:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <_Z21get_acceleration_dataP11lis331dlh_t+0x44>)
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 fd31 	bl	8005b1c <debug>
	return 0;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	08016c18 	.word	0x08016c18

080050c8 <find_degree>:


// нахождение угла наклона платы относительно целевой оси
void find_degree(lis331dlh_t * config) {
 80050c8:	b5b0      	push	{r4, r5, r7, lr}
 80050ca:	b08c      	sub	sp, #48	@ 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	int32_t summ = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float vector = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	int count = 50;
 80050d8:	2332      	movs	r3, #50	@ 0x32
 80050da:	623b      	str	r3, [r7, #32]

	uint32_t timer = HAL_GetTick();
 80050dc:	f002 feb4 	bl	8007e48 <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < count;) {
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e8:	e04b      	b.n	8005182 <find_degree+0xba>
		lis331dlh_read_status(config);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f001 fc14 	bl	800691a <lis331dlh_read_status>
		if (is_measurement_ready(config)) {					// если данные готовы
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 f91b 	bl	8005330 <is_measurement_ready>
 80050fa:	0003      	movs	r3, r0
 80050fc:	1e5a      	subs	r2, r3, #1
 80050fe:	4193      	sbcs	r3, r2
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02d      	beq.n	8005162 <find_degree+0x9a>
			lis331dlh_update_accelaration(config);			// обновление данных
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f001 fb43 	bl	8006794 <lis331dlh_update_accelaration>
			summ += get_acceleration_data(config);			// вытаскиваем ускорение по конкретной оси
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0018      	movs	r0, r3
 8005112:	f7ff ffb5 	bl	8005080 <_Z21get_acceleration_dataP11lis331dlh_t>
 8005116:	0002      	movs	r2, r0
 8005118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511a:	189b      	adds	r3, r3, r2
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	435a      	muls	r2, r3
						+ config->accelarations.y * config->accelarations.y
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005130:	434b      	muls	r3, r1
 8005132:	18d2      	adds	r2, r2, r3
						+ config->accelarations.z * config->accelarations.z);	// вычисление длины вектора
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513c:	434b      	muls	r3, r1
 800513e:	18d3      	adds	r3, r2, r3
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 8005140:	0018      	movs	r0, r3
 8005142:	f7fc f9e5 	bl	8001510 <__aeabi_i2f>
 8005146:	1c03      	adds	r3, r0, #0
 8005148:	1c18      	adds	r0, r3, #0
 800514a:	f00c fc49 	bl	80119e0 <sqrtf>
 800514e:	1c03      	adds	r3, r0, #0
 8005150:	1c19      	adds	r1, r3, #0
 8005152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005154:	f7fb fb54 	bl	8000800 <__aeabi_fadd>
 8005158:	1c03      	adds	r3, r0, #0
 800515a:	62bb      	str	r3, [r7, #40]	@ 0x28
			++i;
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	3301      	adds	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		uint32_t time_passed = HAL_GetTick() - timer;
 8005162:	f002 fe71 	bl	8007e48 <HAL_GetTick>
 8005166:	0002      	movs	r2, r0
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	60fb      	str	r3, [r7, #12]
		if (time_passed > 1000) {
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	23fa      	movs	r3, #250	@ 0xfa
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d904      	bls.n	8005182 <find_degree+0xba>
			debug("LIS331 timeout error");
 8005178:	4b54      	ldr	r3, [pc, #336]	@ (80052cc <find_degree+0x204>)
 800517a:	0018      	movs	r0, r3
 800517c:	f000 fcce 	bl	8005b1c <debug>
			return;
 8005180:	e0a1      	b.n	80052c6 <find_degree+0x1fe>
	for (int i = 0; i < count;) {
 8005182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	429a      	cmp	r2, r3
 8005188:	dbaf      	blt.n	80050ea <find_degree+0x22>
		}  // выход, если датчик не отвечает
	}

    float sinus = fabs(summ) / vector;
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fc4d 	bl	8005a2c <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8005192:	0004      	movs	r4, r0
 8005194:	000d      	movs	r5, r1
 8005196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005198:	f7fe f904 	bl	80033a4 <__aeabi_f2d>
 800519c:	0002      	movs	r2, r0
 800519e:	000b      	movs	r3, r1
 80051a0:	0020      	movs	r0, r4
 80051a2:	0029      	movs	r1, r5
 80051a4:	f7fc fda6 	bl	8001cf4 <__aeabi_ddiv>
 80051a8:	0002      	movs	r2, r0
 80051aa:	000b      	movs	r3, r1
 80051ac:	0010      	movs	r0, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	f7fe f940 	bl	8003434 <__aeabi_d2f>
 80051b4:	1c03      	adds	r3, r0, #0
 80051b6:	61bb      	str	r3, [r7, #24]

	if (sinus > 0.001) {
 80051b8:	69b8      	ldr	r0, [r7, #24]
 80051ba:	f7fe f8f3 	bl	80033a4 <__aeabi_f2d>
 80051be:	4a44      	ldr	r2, [pc, #272]	@ (80052d0 <find_degree+0x208>)
 80051c0:	4b44      	ldr	r3, [pc, #272]	@ (80052d4 <find_degree+0x20c>)
 80051c2:	f7fb f95d 	bl	8000480 <__aeabi_dcmpgt>
 80051c6:	1e03      	subs	r3, r0, #0
 80051c8:	d075      	beq.n	80052b6 <find_degree+0x1ee>
		config->degree = asinf(sinus) * 180 / M_PI;	// нахождение арксинуса и преобразование из радиан в градусы
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1c18      	adds	r0, r3, #0
 80051ce:	f00c fbe7 	bl	80119a0 <asinf>
 80051d2:	1c03      	adds	r3, r0, #0
 80051d4:	4940      	ldr	r1, [pc, #256]	@ (80052d8 <find_degree+0x210>)
 80051d6:	1c18      	adds	r0, r3, #0
 80051d8:	f7fb fe82 	bl	8000ee0 <__aeabi_fmul>
 80051dc:	1c03      	adds	r3, r0, #0
 80051de:	1c18      	adds	r0, r3, #0
 80051e0:	f7fe f8e0 	bl	80033a4 <__aeabi_f2d>
 80051e4:	4a3d      	ldr	r2, [pc, #244]	@ (80052dc <find_degree+0x214>)
 80051e6:	4b3e      	ldr	r3, [pc, #248]	@ (80052e0 <find_degree+0x218>)
 80051e8:	f7fc fd84 	bl	8001cf4 <__aeabi_ddiv>
 80051ec:	0002      	movs	r2, r0
 80051ee:	000b      	movs	r3, r1
 80051f0:	0010      	movs	r0, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	f7fe f91e 	bl	8003434 <__aeabi_d2f>
 80051f8:	1c02      	adds	r2, r0, #0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44
		float mean_axis = fabs(summ) / (float)count;
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	0018      	movs	r0, r3
 8005202:	f000 fc13 	bl	8005a2c <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8005206:	0004      	movs	r4, r0
 8005208:	000d      	movs	r5, r1
 800520a:	6a38      	ldr	r0, [r7, #32]
 800520c:	f7fc f980 	bl	8001510 <__aeabi_i2f>
 8005210:	1c03      	adds	r3, r0, #0
 8005212:	1c18      	adds	r0, r3, #0
 8005214:	f7fe f8c6 	bl	80033a4 <__aeabi_f2d>
 8005218:	0002      	movs	r2, r0
 800521a:	000b      	movs	r3, r1
 800521c:	0020      	movs	r0, r4
 800521e:	0029      	movs	r1, r5
 8005220:	f7fc fd68 	bl	8001cf4 <__aeabi_ddiv>
 8005224:	0002      	movs	r2, r0
 8005226:	000b      	movs	r3, r1
 8005228:	0010      	movs	r0, r2
 800522a:	0019      	movs	r1, r3
 800522c:	f7fe f902 	bl	8003434 <__aeabi_d2f>
 8005230:	1c03      	adds	r3, r0, #0
 8005232:	617b      	str	r3, [r7, #20]
		float mean_vector = vector / (float)count;
 8005234:	6a38      	ldr	r0, [r7, #32]
 8005236:	f7fc f96b 	bl	8001510 <__aeabi_i2f>
 800523a:	1c03      	adds	r3, r0, #0
 800523c:	1c19      	adds	r1, r3, #0
 800523e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005240:	f7fb fc68 	bl	8000b14 <__aeabi_fdiv>
 8005244:	1c03      	adds	r3, r0, #0
 8005246:	613b      	str	r3, [r7, #16]
		incline_factor = 1 + mean_axis / mean_vector;	// вычисление поправочного коэффициента на угол наклона
 8005248:	6939      	ldr	r1, [r7, #16]
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7fb fc62 	bl	8000b14 <__aeabi_fdiv>
 8005250:	1c03      	adds	r3, r0, #0
 8005252:	21fe      	movs	r1, #254	@ 0xfe
 8005254:	0589      	lsls	r1, r1, #22
 8005256:	1c18      	adds	r0, r3, #0
 8005258:	f7fb fad2 	bl	8000800 <__aeabi_fadd>
 800525c:	1c03      	adds	r3, r0, #0
 800525e:	1c1a      	adds	r2, r3, #0
 8005260:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <find_degree+0x21c>)
 8005262:	601a      	str	r2, [r3, #0]

		debug("Mean = %f\r\n", mean_axis);
 8005264:	6978      	ldr	r0, [r7, #20]
 8005266:	f7fe f89d 	bl	80033a4 <__aeabi_f2d>
 800526a:	0002      	movs	r2, r0
 800526c:	000b      	movs	r3, r1
 800526e:	491e      	ldr	r1, [pc, #120]	@ (80052e8 <find_degree+0x220>)
 8005270:	0008      	movs	r0, r1
 8005272:	f000 fc53 	bl	8005b1c <debug>
		debug("Full = %f\r\n", mean_vector);
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f7fe f894 	bl	80033a4 <__aeabi_f2d>
 800527c:	0002      	movs	r2, r0
 800527e:	000b      	movs	r3, r1
 8005280:	491a      	ldr	r1, [pc, #104]	@ (80052ec <find_degree+0x224>)
 8005282:	0008      	movs	r0, r1
 8005284:	f000 fc4a 	bl	8005b1c <debug>
		debug("degree = %f\r\n", config->degree);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528c:	1c18      	adds	r0, r3, #0
 800528e:	f7fe f889 	bl	80033a4 <__aeabi_f2d>
 8005292:	0002      	movs	r2, r0
 8005294:	000b      	movs	r3, r1
 8005296:	4916      	ldr	r1, [pc, #88]	@ (80052f0 <find_degree+0x228>)
 8005298:	0008      	movs	r0, r1
 800529a:	f000 fc3f 	bl	8005b1c <debug>
		debug("incline factor = %f\r\n", incline_factor);
 800529e:	4b11      	ldr	r3, [pc, #68]	@ (80052e4 <find_degree+0x21c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	1c18      	adds	r0, r3, #0
 80052a4:	f7fe f87e 	bl	80033a4 <__aeabi_f2d>
 80052a8:	0002      	movs	r2, r0
 80052aa:	000b      	movs	r3, r1
 80052ac:	4911      	ldr	r1, [pc, #68]	@ (80052f4 <find_degree+0x22c>)
 80052ae:	0008      	movs	r0, r1
 80052b0:	f000 fc34 	bl	8005b1c <debug>
 80052b4:	e007      	b.n	80052c6 <find_degree+0x1fe>
	}
	else {
		debug("Incline factor > 2. Error!");
 80052b6:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <find_degree+0x230>)
 80052b8:	0018      	movs	r0, r3
 80052ba:	f000 fc2f 	bl	8005b1c <debug>
		incline_factor = 2;
 80052be:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <find_degree+0x21c>)
 80052c0:	2280      	movs	r2, #128	@ 0x80
 80052c2:	05d2      	lsls	r2, r2, #23
 80052c4:	601a      	str	r2, [r3, #0]
	}

}
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b00c      	add	sp, #48	@ 0x30
 80052ca:	bdb0      	pop	{r4, r5, r7, pc}
 80052cc:	08016c34 	.word	0x08016c34
 80052d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80052d4:	3f50624d 	.word	0x3f50624d
 80052d8:	43340000 	.word	0x43340000
 80052dc:	54442d18 	.word	0x54442d18
 80052e0:	400921fb 	.word	0x400921fb
 80052e4:	200004b4 	.word	0x200004b4
 80052e8:	08016c4c 	.word	0x08016c4c
 80052ec:	08016c58 	.word	0x08016c58
 80052f0:	08016c64 	.word	0x08016c64
 80052f4:	08016c74 	.word	0x08016c74
 80052f8:	08016c8c 	.word	0x08016c8c

080052fc <check_overrun>:

// проверка, что данные ускорений не были перезаписаны
void check_overrun(lis331dlh_t * config) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	if ((config->status_register & 0xF0) > 0) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7f1b      	ldrb	r3, [r3, #28]
 8005308:	001a      	movs	r2, r3
 800530a:	23f0      	movs	r3, #240	@ 0xf0
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd07      	ble.n	8005322 <check_overrun+0x26>
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_SET);
		debug("Acceleration data overrun! SR %02x\r\n", config->status_register);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7f1b      	ldrb	r3, [r3, #28]
 8005316:	001a      	movs	r2, r3
 8005318:	4b04      	ldr	r3, [pc, #16]	@ (800532c <check_overrun+0x30>)
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f000 fbfd 	bl	8005b1c <debug>
//		HAL_UART_Transmit_IT(debug_uart, (uint8_t*)"XYZ Overrun\r\n", 13);
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_RESET);
	}
}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b002      	add	sp, #8
 8005328:	bd80      	pop	{r7, pc}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	08016ca8 	.word	0x08016ca8

08005330 <is_measurement_ready>:

// проверка, что данные готовы для считывания
uint8_t is_measurement_ready(lis331dlh_t * config) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	return config->status_register & 0x08;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7f1b      	ldrb	r3, [r3, #28]
 800533c:	2208      	movs	r2, #8
 800533e:	4013      	ands	r3, r2
 8005340:	b2db      	uxtb	r3, r3
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b002      	add	sp, #8
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <_Z14save_in_windowf>:

// сохранение данных в "окне" за последние 400 мс.
// Важно учитывать, что запись данных круговая
void save_in_window(float value) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	size_t window_position = (in_window - window);
 8005354:	4b1f      	ldr	r3, [pc, #124]	@ (80053d4 <_Z14save_in_windowf+0x88>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b1f      	ldr	r3, [pc, #124]	@ (80053d8 <_Z14save_in_windowf+0x8c>)
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	109b      	asrs	r3, r3, #2
 800535e:	60fb      	str	r3, [r7, #12]
	if (window_position == WINDOW_SIZE) {
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b28      	cmp	r3, #40	@ 0x28
 8005364:	d105      	bne.n	8005372 <_Z14save_in_windowf+0x26>
		in_window = window;
 8005366:	4b1b      	ldr	r3, [pc, #108]	@ (80053d4 <_Z14save_in_windowf+0x88>)
 8005368:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <_Z14save_in_windowf+0x8c>)
 800536a:	601a      	str	r2, [r3, #0]
		window_ready = 1;
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <_Z14save_in_windowf+0x90>)
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
	}

	if (!window_ready) {
 8005372:	4b1a      	ldr	r3, [pc, #104]	@ (80053dc <_Z14save_in_windowf+0x90>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <_Z14save_in_windowf+0x3a>
		++window_value_counts;
 800537a:	4b19      	ldr	r3, [pc, #100]	@ (80053e0 <_Z14save_in_windowf+0x94>)
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	4b17      	ldr	r3, [pc, #92]	@ (80053e0 <_Z14save_in_windowf+0x94>)
 8005384:	801a      	strh	r2, [r3, #0]
	}

	part_sum -= *in_window;
 8005386:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <_Z14save_in_windowf+0x98>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <_Z14save_in_windowf+0x88>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	1ad2      	subs	r2, r2, r3
 8005392:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <_Z14save_in_windowf+0x98>)
 8005394:	601a      	str	r2, [r3, #0]
	*in_window++ = value;
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f89a 	bl	80014d0 <__aeabi_f2iz>
 800539c:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <_Z14save_in_windowf+0x88>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1d19      	adds	r1, r3, #4
 80053a2:	4a0c      	ldr	r2, [pc, #48]	@ (80053d4 <_Z14save_in_windowf+0x88>)
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	6018      	str	r0, [r3, #0]
	part_sum += value;
 80053a8:	4b0e      	ldr	r3, [pc, #56]	@ (80053e4 <_Z14save_in_windowf+0x98>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7fc f8af 	bl	8001510 <__aeabi_i2f>
 80053b2:	1c03      	adds	r3, r0, #0
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	1c18      	adds	r0, r3, #0
 80053b8:	f7fb fa22 	bl	8000800 <__aeabi_fadd>
 80053bc:	1c03      	adds	r3, r0, #0
 80053be:	1c18      	adds	r0, r3, #0
 80053c0:	f7fc f886 	bl	80014d0 <__aeabi_f2iz>
 80053c4:	0002      	movs	r2, r0
 80053c6:	4b07      	ldr	r3, [pc, #28]	@ (80053e4 <_Z14save_in_windowf+0x98>)
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	20000058 	.word	0x20000058
 80053d8:	20000404 	.word	0x20000404
 80053dc:	200003fe 	.word	0x200003fe
 80053e0:	200004a4 	.word	0x200004a4
 80053e4:	200004a8 	.word	0x200004a8

080053e8 <_Z26get_mean_value_from_windowv>:

float get_mean_value_from_window() {
 80053e8:	b5b0      	push	{r4, r5, r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	return part_sum / (float)window_value_counts;
 80053ec:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <_Z26get_mean_value_from_windowv+0x2c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7fc f88d 	bl	8001510 <__aeabi_i2f>
 80053f6:	1c04      	adds	r4, r0, #0
 80053f8:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <_Z26get_mean_value_from_windowv+0x30>)
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fc f8d3 	bl	80015a8 <__aeabi_ui2f>
 8005402:	1c03      	adds	r3, r0, #0
 8005404:	1c19      	adds	r1, r3, #0
 8005406:	1c20      	adds	r0, r4, #0
 8005408:	f7fb fb84 	bl	8000b14 <__aeabi_fdiv>
 800540c:	1c03      	adds	r3, r0, #0
}
 800540e:	1c18      	adds	r0, r3, #0
 8005410:	46bd      	mov	sp, r7
 8005412:	bdb0      	pop	{r4, r5, r7, pc}
 8005414:	200004a8 	.word	0x200004a8
 8005418:	200004a4 	.word	0x200004a4

0800541c <is_need_stop_measuring>:

// проверка, что пора остановить измерения
// есть два главных условия для этого:
// 		измерение происходит дольше 400 мс (это означает, что платформа уже остановилась)
//		изменение знака скорости (это означает, что платформа прошла точку экстремума)
uint8_t is_need_stop_measuring() {
 800541c:	b5b0      	push	{r4, r5, r7, lr}
 800541e:	af00      	add	r7, sp, #0
	return measuring_started && (watchdog == WINDOW_SIZE || is_positive_speed ^ (speed > 0));
 8005420:	4b0f      	ldr	r3, [pc, #60]	@ (8005460 <is_need_stop_measuring+0x44>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <is_need_stop_measuring+0x3c>
 8005428:	4b0e      	ldr	r3, [pc, #56]	@ (8005464 <is_need_stop_measuring+0x48>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	2b28      	cmp	r3, #40	@ 0x28
 800542e:	d011      	beq.n	8005454 <is_need_stop_measuring+0x38>
 8005430:	4b0d      	ldr	r3, [pc, #52]	@ (8005468 <is_need_stop_measuring+0x4c>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	001c      	movs	r4, r3
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <is_need_stop_measuring+0x50>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	1c15      	adds	r5, r2, #0
 800543e:	2100      	movs	r1, #0
 8005440:	1c18      	adds	r0, r3, #0
 8005442:	f7fb f857 	bl	80004f4 <__aeabi_fcmpgt>
 8005446:	1e03      	subs	r3, r0, #0
 8005448:	d101      	bne.n	800544e <is_need_stop_measuring+0x32>
 800544a:	2300      	movs	r3, #0
 800544c:	1c1d      	adds	r5, r3, #0
 800544e:	b2eb      	uxtb	r3, r5
 8005450:	429c      	cmp	r4, r3
 8005452:	d001      	beq.n	8005458 <is_need_stop_measuring+0x3c>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <is_need_stop_measuring+0x3e>
 8005458:	2300      	movs	r3, #0
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	bdb0      	pop	{r4, r5, r7, pc}
 8005460:	200003fd 	.word	0x200003fd
 8005464:	20000400 	.word	0x20000400
 8005468:	200003fc 	.word	0x200003fc
 800546c:	200003f4 	.word	0x200003f4

08005470 <get_real_length>:

// преобразование длины из "попугаев" в мм
// 		9.8 - ускорение 1g
//		1000 - преобразование единиц измерений
//		1024 - соответствует 1g при использовании диапазона 2G
float get_real_length() {
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
	return length * 9.8 / (float)1000 / (float)1024;
 8005474:	4b11      	ldr	r3, [pc, #68]	@ (80054bc <get_real_length+0x4c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	1c18      	adds	r0, r3, #0
 800547a:	f7fd ff93 	bl	80033a4 <__aeabi_f2d>
 800547e:	4a10      	ldr	r2, [pc, #64]	@ (80054c0 <get_real_length+0x50>)
 8005480:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <get_real_length+0x54>)
 8005482:	f7fd f87b 	bl	800257c <__aeabi_dmul>
 8005486:	0002      	movs	r2, r0
 8005488:	000b      	movs	r3, r1
 800548a:	0010      	movs	r0, r2
 800548c:	0019      	movs	r1, r3
 800548e:	2200      	movs	r2, #0
 8005490:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <get_real_length+0x58>)
 8005492:	f7fc fc2f 	bl	8001cf4 <__aeabi_ddiv>
 8005496:	0002      	movs	r2, r0
 8005498:	000b      	movs	r3, r1
 800549a:	0010      	movs	r0, r2
 800549c:	0019      	movs	r1, r3
 800549e:	2200      	movs	r2, #0
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <get_real_length+0x5c>)
 80054a2:	f7fc fc27 	bl	8001cf4 <__aeabi_ddiv>
 80054a6:	0002      	movs	r2, r0
 80054a8:	000b      	movs	r3, r1
 80054aa:	0010      	movs	r0, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	f7fd ffc1 	bl	8003434 <__aeabi_d2f>
 80054b2:	1c03      	adds	r3, r0, #0
}
 80054b4:	1c18      	adds	r0, r3, #0
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	200003f8 	.word	0x200003f8
 80054c0:	9999999a 	.word	0x9999999a
 80054c4:	40239999 	.word	0x40239999
 80054c8:	408f4000 	.word	0x408f4000
 80054cc:	40900000 	.word	0x40900000

080054d0 <is_measuring_meaningful>:

// проверка данных на корректность. условия два:
// 		перемещения меньше 1 считаем погрешностью
// 		должно быть готово "окно" для вычисления сдивига
uint8_t is_measuring_meaningful(float real_length) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	return window_ready && (fabs(real_length) > 1.001f);
 80054d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <is_measuring_meaningful+0x34>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <is_measuring_meaningful+0x2a>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	1c18      	adds	r0, r3, #0
 80054e4:	f7ff fda0 	bl	8005028 <_ZSt4fabsf>
 80054e8:	1c03      	adds	r3, r0, #0
 80054ea:	4907      	ldr	r1, [pc, #28]	@ (8005508 <is_measuring_meaningful+0x38>)
 80054ec:	1c18      	adds	r0, r3, #0
 80054ee:	f7fb f801 	bl	80004f4 <__aeabi_fcmpgt>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d001      	beq.n	80054fa <is_measuring_meaningful+0x2a>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <is_measuring_meaningful+0x2c>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	0018      	movs	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200003fe 	.word	0x200003fe
 8005508:	3f8020c5 	.word	0x3f8020c5

0800550c <reset_variables>:

// сброс переменных
void reset_variables() {
 800550c:	b5b0      	push	{r4, r5, r7, lr}
 800550e:	af00      	add	r7, sp, #0
	if (watchdog == WINDOW_SIZE) {
 8005510:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <reset_variables+0x54>)
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2b28      	cmp	r3, #40	@ 0x28
 8005516:	d102      	bne.n	800551e <reset_variables+0x12>
		speed = 0;
 8005518:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <reset_variables+0x58>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
	}

	measuring_started = 0;
 800551e:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <reset_variables+0x5c>)
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
	length = 0;
 8005524:	4b11      	ldr	r3, [pc, #68]	@ (800556c <reset_variables+0x60>)
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
	watchdog = 0;
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <reset_variables+0x54>)
 800552c:	2200      	movs	r2, #0
 800552e:	801a      	strh	r2, [r3, #0]
	is_positive_speed = fabs(speed) > 0;
 8005530:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <reset_variables+0x58>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	1c18      	adds	r0, r3, #0
 8005536:	f7ff fd77 	bl	8005028 <_ZSt4fabsf>
 800553a:	1c03      	adds	r3, r0, #0
 800553c:	2201      	movs	r2, #1
 800553e:	1c14      	adds	r4, r2, #0
 8005540:	2100      	movs	r1, #0
 8005542:	1c18      	adds	r0, r3, #0
 8005544:	f7fa ffd6 	bl	80004f4 <__aeabi_fcmpgt>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d101      	bne.n	8005550 <reset_variables+0x44>
 800554c:	2300      	movs	r3, #0
 800554e:	1c1c      	adds	r4, r3, #0
 8005550:	b2e3      	uxtb	r3, r4
 8005552:	001a      	movs	r2, r3
 8005554:	4b06      	ldr	r3, [pc, #24]	@ (8005570 <reset_variables+0x64>)
 8005556:	701a      	strb	r2, [r3, #0]
}
 8005558:	46c0      	nop			@ (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	bdb0      	pop	{r4, r5, r7, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	20000400 	.word	0x20000400
 8005564:	200003f4 	.word	0x200003f4
 8005568:	200003fd 	.word	0x200003fd
 800556c:	200003f8 	.word	0x200003f8
 8005570:	200003fc 	.word	0x200003fc

08005574 <check_positive_speed>:

// проверяем направление движения
void check_positive_speed() {
 8005574:	b5b0      	push	{r4, r5, r7, lr}
 8005576:	af00      	add	r7, sp, #0
	if (fabs(speed) < 0.001) {
 8005578:	4b1e      	ldr	r3, [pc, #120]	@ (80055f4 <check_positive_speed+0x80>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1c18      	adds	r0, r3, #0
 800557e:	f7ff fd53 	bl	8005028 <_ZSt4fabsf>
 8005582:	1c03      	adds	r3, r0, #0
 8005584:	1c18      	adds	r0, r3, #0
 8005586:	f7fd ff0d 	bl	80033a4 <__aeabi_f2d>
 800558a:	2301      	movs	r3, #1
 800558c:	1c1c      	adds	r4, r3, #0
 800558e:	4a1a      	ldr	r2, [pc, #104]	@ (80055f8 <check_positive_speed+0x84>)
 8005590:	4b1a      	ldr	r3, [pc, #104]	@ (80055fc <check_positive_speed+0x88>)
 8005592:	f7fa ff61 	bl	8000458 <__aeabi_dcmplt>
 8005596:	1e03      	subs	r3, r0, #0
 8005598:	d101      	bne.n	800559e <check_positive_speed+0x2a>
 800559a:	2300      	movs	r3, #0
 800559c:	1c1c      	adds	r4, r3, #0
 800559e:	b2e3      	uxtb	r3, r4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d013      	beq.n	80055cc <check_positive_speed+0x58>
		is_positive_speed = acceleration > 0.0f;
 80055a4:	4b16      	ldr	r3, [pc, #88]	@ (8005600 <check_positive_speed+0x8c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2201      	movs	r2, #1
 80055aa:	1c14      	adds	r4, r2, #0
 80055ac:	2100      	movs	r1, #0
 80055ae:	1c18      	adds	r0, r3, #0
 80055b0:	f7fa ffa0 	bl	80004f4 <__aeabi_fcmpgt>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d101      	bne.n	80055bc <check_positive_speed+0x48>
 80055b8:	2300      	movs	r3, #0
 80055ba:	1c1c      	adds	r4, r3, #0
 80055bc:	b2e3      	uxtb	r3, r4
 80055be:	001a      	movs	r2, r3
 80055c0:	4b10      	ldr	r3, [pc, #64]	@ (8005604 <check_positive_speed+0x90>)
 80055c2:	701a      	strb	r2, [r3, #0]
		speed = 0.0f;
 80055c4:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <check_positive_speed+0x80>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
	}
	else {
		is_positive_speed = speed > 0.0f;
	}
}
 80055ca:	e00f      	b.n	80055ec <check_positive_speed+0x78>
		is_positive_speed = speed > 0.0f;
 80055cc:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <check_positive_speed+0x80>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	1c14      	adds	r4, r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	1c18      	adds	r0, r3, #0
 80055d8:	f7fa ff8c 	bl	80004f4 <__aeabi_fcmpgt>
 80055dc:	1e03      	subs	r3, r0, #0
 80055de:	d101      	bne.n	80055e4 <check_positive_speed+0x70>
 80055e0:	2300      	movs	r3, #0
 80055e2:	1c1c      	adds	r4, r3, #0
 80055e4:	b2e3      	uxtb	r3, r4
 80055e6:	001a      	movs	r2, r3
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <check_positive_speed+0x90>)
 80055ea:	701a      	strb	r2, [r3, #0]
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bdb0      	pop	{r4, r5, r7, pc}
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	200003f4 	.word	0x200003f4
 80055f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80055fc:	3f50624d 	.word	0x3f50624d
 8005600:	200003f0 	.word	0x200003f0
 8005604:	200003fc 	.word	0x200003fc

08005608 <_Z23update_speed_and_lengthP11lis331dlh_t>:

// интегрирование ускорения и скорости
void update_speed_and_length(lis331dlh_t * config) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	if (measuring_started) {
 8005610:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <_Z23update_speed_and_lengthP11lis331dlh_t+0x74>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02d      	beq.n	8005674 <_Z23update_speed_and_lengthP11lis331dlh_t+0x6c>
		speed += acceleration * config->range_factor;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	4b18      	ldr	r3, [pc, #96]	@ (8005680 <_Z23update_speed_and_lengthP11lis331dlh_t+0x78>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	1c19      	adds	r1, r3, #0
 8005622:	1c10      	adds	r0, r2, #0
 8005624:	f7fb fc5c 	bl	8000ee0 <__aeabi_fmul>
 8005628:	1c03      	adds	r3, r0, #0
 800562a:	1c1a      	adds	r2, r3, #0
 800562c:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1c19      	adds	r1, r3, #0
 8005632:	1c10      	adds	r0, r2, #0
 8005634:	f7fb f8e4 	bl	8000800 <__aeabi_fadd>
 8005638:	1c03      	adds	r3, r0, #0
 800563a:	1c1a      	adds	r2, r3, #0
 800563c:	4b11      	ldr	r3, [pc, #68]	@ (8005684 <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 800563e:	601a      	str	r2, [r3, #0]
		length += speed * config->range_factor;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1c19      	adds	r1, r3, #0
 800564a:	1c10      	adds	r0, r2, #0
 800564c:	f7fb fc48 	bl	8000ee0 <__aeabi_fmul>
 8005650:	1c03      	adds	r3, r0, #0
 8005652:	1c1a      	adds	r2, r3, #0
 8005654:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	1c19      	adds	r1, r3, #0
 800565a:	1c10      	adds	r0, r2, #0
 800565c:	f7fb f8d0 	bl	8000800 <__aeabi_fadd>
 8005660:	1c03      	adds	r3, r0, #0
 8005662:	1c1a      	adds	r2, r3, #0
 8005664:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 8005666:	601a      	str	r2, [r3, #0]
		++watchdog;
 8005668:	4b08      	ldr	r3, [pc, #32]	@ (800568c <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	4b06      	ldr	r3, [pc, #24]	@ (800568c <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 8005672:	801a      	strh	r2, [r3, #0]
	}
}
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200003fd 	.word	0x200003fd
 8005680:	200003f0 	.word	0x200003f0
 8005684:	200003f4 	.word	0x200003f4
 8005688:	200003f8 	.word	0x200003f8
 800568c:	20000400 	.word	0x20000400

08005690 <print_result>:

// дебажная печать результатов вычислений
void print_result(float real_length) {
 8005690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005692:	b08f      	sub	sp, #60	@ 0x3c
 8005694:	af08      	add	r7, sp, #32
 8005696:	6178      	str	r0, [r7, #20]
	if (is_measuring_meaningful(real_length)) {
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1c18      	adds	r0, r3, #0
 800569c:	f7ff ff18 	bl	80054d0 <is_measuring_meaningful>
 80056a0:	0003      	movs	r3, r0
 80056a2:	1e5a      	subs	r2, r3, #1
 80056a4:	4193      	sbcs	r3, r2
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d02b      	beq.n	8005704 <print_result+0x74>
		debug("LENGTH = %f, speed = %f, watchdog = %lu, max = %.2f, min = %.2f\r\n",
 80056ac:	6978      	ldr	r0, [r7, #20]
 80056ae:	f7fd fe79 	bl	80033a4 <__aeabi_f2d>
 80056b2:	60b8      	str	r0, [r7, #8]
 80056b4:	60f9      	str	r1, [r7, #12]
 80056b6:	4b15      	ldr	r3, [pc, #84]	@ (800570c <print_result+0x7c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1c18      	adds	r0, r3, #0
 80056bc:	f7fd fe72 	bl	80033a4 <__aeabi_f2d>
 80056c0:	0004      	movs	r4, r0
 80056c2:	000d      	movs	r5, r1
 80056c4:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <print_result+0x80>)
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	001e      	movs	r6, r3
 80056ca:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <print_result+0x84>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1c18      	adds	r0, r3, #0
 80056d0:	f7fd fe68 	bl	80033a4 <__aeabi_f2d>
 80056d4:	6038      	str	r0, [r7, #0]
 80056d6:	6079      	str	r1, [r7, #4]
 80056d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <print_result+0x88>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1c18      	adds	r0, r3, #0
 80056de:	f7fd fe61 	bl	80033a4 <__aeabi_f2d>
 80056e2:	0002      	movs	r2, r0
 80056e4:	000b      	movs	r3, r1
 80056e6:	490d      	ldr	r1, [pc, #52]	@ (800571c <print_result+0x8c>)
 80056e8:	9206      	str	r2, [sp, #24]
 80056ea:	9307      	str	r3, [sp, #28]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	9204      	str	r2, [sp, #16]
 80056f2:	9305      	str	r3, [sp, #20]
 80056f4:	9602      	str	r6, [sp, #8]
 80056f6:	9400      	str	r4, [sp, #0]
 80056f8:	9501      	str	r5, [sp, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	0008      	movs	r0, r1
 8005700:	f000 fa0c 	bl	8005b1c <debug>
			real_length, speed, watchdog, max_positive_move, max_negative_move);
	}
}
 8005704:	46c0      	nop			@ (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b007      	add	sp, #28
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	200003f4 	.word	0x200003f4
 8005710:	20000400 	.word	0x20000400
 8005714:	200003e0 	.word	0x200003e0
 8005718:	200003e4 	.word	0x200003e4
 800571c:	08016cd0 	.word	0x08016cd0

08005720 <_Z25find_maxmin_accelerationsv>:

void find_maxmin_accelerations() {
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
	float real_acceleration = acceleration * 9.8 / (float)1024;
 8005726:	4b28      	ldr	r3, [pc, #160]	@ (80057c8 <_Z25find_maxmin_accelerationsv+0xa8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	1c18      	adds	r0, r3, #0
 800572c:	f7fd fe3a 	bl	80033a4 <__aeabi_f2d>
 8005730:	4a26      	ldr	r2, [pc, #152]	@ (80057cc <_Z25find_maxmin_accelerationsv+0xac>)
 8005732:	4b27      	ldr	r3, [pc, #156]	@ (80057d0 <_Z25find_maxmin_accelerationsv+0xb0>)
 8005734:	f7fc ff22 	bl	800257c <__aeabi_dmul>
 8005738:	0002      	movs	r2, r0
 800573a:	000b      	movs	r3, r1
 800573c:	0010      	movs	r0, r2
 800573e:	0019      	movs	r1, r3
 8005740:	2200      	movs	r2, #0
 8005742:	4b24      	ldr	r3, [pc, #144]	@ (80057d4 <_Z25find_maxmin_accelerationsv+0xb4>)
 8005744:	f7fc fad6 	bl	8001cf4 <__aeabi_ddiv>
 8005748:	0002      	movs	r2, r0
 800574a:	000b      	movs	r3, r1
 800574c:	0010      	movs	r0, r2
 800574e:	0019      	movs	r1, r3
 8005750:	f7fd fe70 	bl	8003434 <__aeabi_d2f>
 8005754:	1c03      	adds	r3, r0, #0
 8005756:	607b      	str	r3, [r7, #4]
	if (max_positive_acceleration < real_acceleration) {
 8005758:	4b1f      	ldr	r3, [pc, #124]	@ (80057d8 <_Z25find_maxmin_accelerationsv+0xb8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	1c19      	adds	r1, r3, #0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fa fec8 	bl	80004f4 <__aeabi_fcmpgt>
 8005764:	1e03      	subs	r3, r0, #0
 8005766:	d007      	beq.n	8005778 <_Z25find_maxmin_accelerationsv+0x58>
		max_positive_acceleration = real_acceleration;
 8005768:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <_Z25find_maxmin_accelerationsv+0xb8>)
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 800576e:	f002 fb6b 	bl	8007e48 <HAL_GetTick>
 8005772:	0002      	movs	r2, r0
 8005774:	4b19      	ldr	r3, [pc, #100]	@ (80057dc <_Z25find_maxmin_accelerationsv+0xbc>)
 8005776:	601a      	str	r2, [r3, #0]
	}

	if (max_negative_acceleration > real_acceleration) {
 8005778:	4b19      	ldr	r3, [pc, #100]	@ (80057e0 <_Z25find_maxmin_accelerationsv+0xc0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c19      	adds	r1, r3, #0
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fa fea4 	bl	80004cc <__aeabi_fcmplt>
 8005784:	1e03      	subs	r3, r0, #0
 8005786:	d007      	beq.n	8005798 <_Z25find_maxmin_accelerationsv+0x78>
		max_negative_acceleration = real_acceleration;
 8005788:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <_Z25find_maxmin_accelerationsv+0xc0>)
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 800578e:	f002 fb5b 	bl	8007e48 <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <_Z25find_maxmin_accelerationsv+0xbc>)
 8005796:	601a      	str	r2, [r3, #0]
	}

	max_positive_acceleration = fmax(max_positive_acceleration, real_acceleration);
 8005798:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <_Z25find_maxmin_accelerationsv+0xb8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	1c11      	adds	r1, r2, #0
 80057a0:	1c18      	adds	r0, r3, #0
 80057a2:	f7ff fc4c 	bl	800503e <_ZSt4fmaxff>
 80057a6:	1c02      	adds	r2, r0, #0
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <_Z25find_maxmin_accelerationsv+0xb8>)
 80057aa:	601a      	str	r2, [r3, #0]
	max_negative_acceleration = fmin(max_negative_acceleration, real_acceleration);
 80057ac:	4b0c      	ldr	r3, [pc, #48]	@ (80057e0 <_Z25find_maxmin_accelerationsv+0xc0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	1c11      	adds	r1, r2, #0
 80057b4:	1c18      	adds	r0, r3, #0
 80057b6:	f7ff fc52 	bl	800505e <_ZSt4fminff>
 80057ba:	1c02      	adds	r2, r0, #0
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <_Z25find_maxmin_accelerationsv+0xc0>)
 80057be:	601a      	str	r2, [r3, #0]

}
 80057c0:	46c0      	nop			@ (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b002      	add	sp, #8
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200003f0 	.word	0x200003f0
 80057cc:	9999999a 	.word	0x9999999a
 80057d0:	40239999 	.word	0x40239999
 80057d4:	40900000 	.word	0x40900000
 80057d8:	200003e8 	.word	0x200003e8
 80057dc:	200004b0 	.word	0x200004b0
 80057e0:	200003ec 	.word	0x200003ec

080057e4 <calc_length>:

// основной алгоритм вычисления длины перемещений
void calc_length(lis331dlh_t * config) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
//	debug("Get data\r\n");
	// получение данных ускорений
	acceleration = get_acceleration_data(config);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff fc46 	bl	8005080 <_Z21get_acceleration_dataP11lis331dlh_t>
 80057f4:	0003      	movs	r3, r0
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7fb fe8a 	bl	8001510 <__aeabi_i2f>
 80057fc:	1c02      	adds	r2, r0, #0
 80057fe:	4b40      	ldr	r3, [pc, #256]	@ (8005900 <calc_length+0x11c>)
 8005800:	601a      	str	r2, [r3, #0]

	// сохранение значения в окне на 40мс для вычисления среднего для компенсации
	// репроекции осей при движении
	save_in_window(acceleration);
 8005802:	4b3f      	ldr	r3, [pc, #252]	@ (8005900 <calc_length+0x11c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1c18      	adds	r0, r3, #0
 8005808:	f7ff fda0 	bl	800534c <_Z14save_in_windowf>

	// вычитание среднего значения за последние 400 мс
	// необходимо для исключения ускорение свободного падения
	// и компенсации ошибки репроекции осей
	acceleration -= get_mean_value_from_window();
 800580c:	f7ff fdec 	bl	80053e8 <_Z26get_mean_value_from_windowv>
 8005810:	1c02      	adds	r2, r0, #0
 8005812:	4b3b      	ldr	r3, [pc, #236]	@ (8005900 <calc_length+0x11c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1c11      	adds	r1, r2, #0
 8005818:	1c18      	adds	r0, r3, #0
 800581a:	f7fb fc9f 	bl	800115c <__aeabi_fsub>
 800581e:	1c03      	adds	r3, r0, #0
 8005820:	1c1a      	adds	r2, r3, #0
 8005822:	4b37      	ldr	r3, [pc, #220]	@ (8005900 <calc_length+0x11c>)
 8005824:	601a      	str	r2, [r3, #0]
	// компенсация угла наклона
	acceleration *= incline_factor;
 8005826:	4b36      	ldr	r3, [pc, #216]	@ (8005900 <calc_length+0x11c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b36      	ldr	r3, [pc, #216]	@ (8005904 <calc_length+0x120>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	1c19      	adds	r1, r3, #0
 8005830:	1c10      	adds	r0, r2, #0
 8005832:	f7fb fb55 	bl	8000ee0 <__aeabi_fmul>
 8005836:	1c03      	adds	r3, r0, #0
 8005838:	1c1a      	adds	r2, r3, #0
 800583a:	4b31      	ldr	r3, [pc, #196]	@ (8005900 <calc_length+0x11c>)
 800583c:	601a      	str	r2, [r3, #0]

	// нахождение максимумов и минимумов ускорений
	find_maxmin_accelerations();
 800583e:	f7ff ff6f 	bl	8005720 <_Z25find_maxmin_accelerationsv>

	// старт измерений происходит при значении ускорения больше 5
	// число 5.0 подобрано эмпирическим путем и является компромиссом
	// между точностью и ложными срабатываниями
	if (!measuring_started && fabs(acceleration) > 5.0f) {
 8005842:	4b31      	ldr	r3, [pc, #196]	@ (8005908 <calc_length+0x124>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10d      	bne.n	8005866 <calc_length+0x82>
 800584a:	4b2d      	ldr	r3, [pc, #180]	@ (8005900 <calc_length+0x11c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1c18      	adds	r0, r3, #0
 8005850:	f7ff fbea 	bl	8005028 <_ZSt4fabsf>
 8005854:	1c03      	adds	r3, r0, #0
 8005856:	492d      	ldr	r1, [pc, #180]	@ (800590c <calc_length+0x128>)
 8005858:	1c18      	adds	r0, r3, #0
 800585a:	f7fa fe4b 	bl	80004f4 <__aeabi_fcmpgt>
 800585e:	1e03      	subs	r3, r0, #0
 8005860:	d001      	beq.n	8005866 <calc_length+0x82>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <calc_length+0x84>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <calc_length+0x92>
		// флаг начала измерений
		measuring_started = 1;
 800586c:	4b26      	ldr	r3, [pc, #152]	@ (8005908 <calc_length+0x124>)
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
		// проверка направления (необходимо для остановки измерений)
		check_positive_speed();
 8005872:	f7ff fe7f 	bl	8005574 <check_positive_speed>
	}


//	debug("Integrate\r\n");
	// интегрирование
	update_speed_and_length(config);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0018      	movs	r0, r3
 800587a:	f7ff fec5 	bl	8005608 <_Z23update_speed_and_lengthP11lis331dlh_t>

	// проверка условий остановки
	if (is_need_stop_measuring()) {
 800587e:	f7ff fdcd 	bl	800541c <is_need_stop_measuring>
 8005882:	0003      	movs	r3, r0
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	4193      	sbcs	r3, r2
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d033      	beq.n	80058f6 <calc_length+0x112>
		// преобразование сырых данных в систему счисления
		float real_length = get_real_length();
 800588e:	f7ff fdef 	bl	8005470 <get_real_length>
 8005892:	1c03      	adds	r3, r0, #0
 8005894:	60fb      	str	r3, [r7, #12]

		// нахождение максимумов и минимумов по перемещениям
		if (is_measuring_meaningful(real_length)) {
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1c18      	adds	r0, r3, #0
 800589a:	f7ff fe19 	bl	80054d0 <is_measuring_meaningful>
 800589e:	0003      	movs	r3, r0
 80058a0:	1e5a      	subs	r2, r3, #1
 80058a2:	4193      	sbcs	r3, r2
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01f      	beq.n	80058ea <calc_length+0x106>
			if (max_positive_move < real_length) {
 80058aa:	4b19      	ldr	r3, [pc, #100]	@ (8005910 <calc_length+0x12c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	1c19      	adds	r1, r3, #0
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7fa fe1f 	bl	80004f4 <__aeabi_fcmpgt>
 80058b6:	1e03      	subs	r3, r0, #0
 80058b8:	d007      	beq.n	80058ca <calc_length+0xe6>
				max_positive_move = real_length;
 80058ba:	4b15      	ldr	r3, [pc, #84]	@ (8005910 <calc_length+0x12c>)
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 80058c0:	f002 fac2 	bl	8007e48 <HAL_GetTick>
 80058c4:	0002      	movs	r2, r0
 80058c6:	4b13      	ldr	r3, [pc, #76]	@ (8005914 <calc_length+0x130>)
 80058c8:	601a      	str	r2, [r3, #0]
			}

			if (max_negative_move > real_length) {
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <calc_length+0x134>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	1c19      	adds	r1, r3, #0
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7fa fdfb 	bl	80004cc <__aeabi_fcmplt>
 80058d6:	1e03      	subs	r3, r0, #0
 80058d8:	d007      	beq.n	80058ea <calc_length+0x106>
				max_negative_move = real_length;
 80058da:	4b0f      	ldr	r3, [pc, #60]	@ (8005918 <calc_length+0x134>)
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 80058e0:	f002 fab2 	bl	8007e48 <HAL_GetTick>
 80058e4:	0002      	movs	r2, r0
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <calc_length+0x130>)
 80058e8:	601a      	str	r2, [r3, #0]
			}
		}
		print_result(real_length);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1c18      	adds	r0, r3, #0
 80058ee:	f7ff fecf 	bl	8005690 <print_result>
		reset_variables();
 80058f2:	f7ff fe0b 	bl	800550c <reset_variables>
	}
//	debug("Return\r\n");
}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b004      	add	sp, #16
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	200003f0 	.word	0x200003f0
 8005904:	200004b4 	.word	0x200004b4
 8005908:	200003fd 	.word	0x200003fd
 800590c:	40a00000 	.word	0x40a00000
 8005910:	200003e0 	.word	0x200003e0
 8005914:	200004ac 	.word	0x200004ac
 8005918:	200003e4 	.word	0x200003e4

0800591c <reset_acceleration_maximums>:

// сброс максимумом ускорений
void reset_acceleration_maximums() {
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - acceleration_timestamp) > maxmin_timeout_ms) {
 8005920:	f002 fa92 	bl	8007e48 <HAL_GetTick>
 8005924:	0002      	movs	r2, r0
 8005926:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <reset_acceleration_maximums+0x3c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	4b0b      	ldr	r3, [pc, #44]	@ (800595c <reset_acceleration_maximums+0x40>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4293      	cmp	r3, r2
 8005932:	419b      	sbcs	r3, r3
 8005934:	425b      	negs	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <reset_acceleration_maximums+0x36>
		acceleration_timestamp = HAL_GetTick();
 800593c:	f002 fa84 	bl	8007e48 <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <reset_acceleration_maximums+0x3c>)
 8005944:	601a      	str	r2, [r3, #0]

		max_positive_acceleration = 0.0f;
 8005946:	4b06      	ldr	r3, [pc, #24]	@ (8005960 <reset_acceleration_maximums+0x44>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
		max_negative_acceleration = 0.0f;
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <reset_acceleration_maximums+0x48>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
	}
}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	200004b0 	.word	0x200004b0
 800595c:	20000054 	.word	0x20000054
 8005960:	200003e8 	.word	0x200003e8
 8005964:	200003ec 	.word	0x200003ec

08005968 <reset_move_maximums>:

// сброс максимумом по перемещениям
void reset_move_maximums() {
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - move_timestamp) > maxmin_timeout_ms) {
 800596c:	f002 fa6c 	bl	8007e48 <HAL_GetTick>
 8005970:	0002      	movs	r2, r0
 8005972:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <reset_move_maximums+0x3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <reset_move_maximums+0x40>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4293      	cmp	r3, r2
 800597e:	419b      	sbcs	r3, r3
 8005980:	425b      	negs	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <reset_move_maximums+0x36>
		move_timestamp = HAL_GetTick();
 8005988:	f002 fa5e 	bl	8007e48 <HAL_GetTick>
 800598c:	0002      	movs	r2, r0
 800598e:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <reset_move_maximums+0x3c>)
 8005990:	601a      	str	r2, [r3, #0]

		max_positive_move = 0.0f;
 8005992:	4b06      	ldr	r3, [pc, #24]	@ (80059ac <reset_move_maximums+0x44>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
		max_negative_move = 0.0f;
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <reset_move_maximums+0x48>)
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
	}
}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	200004ac 	.word	0x200004ac
 80059a8:	20000054 	.word	0x20000054
 80059ac:	200003e0 	.word	0x200003e0
 80059b0:	200003e4 	.word	0x200003e4

080059b4 <get_max_positive_acceleration>:

// получить максимум ускорения в +
float get_max_positive_acceleration() {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
	return max_positive_acceleration;
 80059b8:	4b02      	ldr	r3, [pc, #8]	@ (80059c4 <get_max_positive_acceleration+0x10>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	1c18      	adds	r0, r3, #0
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	200003e8 	.word	0x200003e8

080059c8 <get_max_negative_acceleration>:


// получить максимум ускорения в -
float get_max_negative_acceleration() {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	return max_negative_acceleration;
 80059cc:	4b02      	ldr	r3, [pc, #8]	@ (80059d8 <get_max_negative_acceleration+0x10>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	1c18      	adds	r0, r3, #0
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	200003ec 	.word	0x200003ec

080059dc <get_max_positive_move>:

// получить максимум перемещения в +
float get_max_positive_move() {
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
	return max_positive_move;
 80059e0:	4b02      	ldr	r3, [pc, #8]	@ (80059ec <get_max_positive_move+0x10>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	1c18      	adds	r0, r3, #0
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	200003e0 	.word	0x200003e0

080059f0 <get_max_negative_move>:

// получить максимум перемещения в -
float get_max_negative_move() {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
	return max_negative_move;
 80059f4:	4b02      	ldr	r3, [pc, #8]	@ (8005a00 <get_max_negative_move+0x10>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	1c18      	adds	r0, r3, #0
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	200003e4 	.word	0x200003e4

08005a04 <round_and_limit_float>:
	}

	return (uint8_t)fmin(roundf(value), limit);
}

float round_and_limit_float(float value) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	if (value < 0) {
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fa fd5c 	bl	80004cc <__aeabi_fcmplt>
 8005a14:	1e03      	subs	r3, r0, #0
 8005a16:	d004      	beq.n	8005a22 <round_and_limit_float+0x1e>
		value *= -1;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2280      	movs	r2, #128	@ 0x80
 8005a1c:	0612      	lsls	r2, r2, #24
 8005a1e:	4053      	eors	r3, r2
 8005a20:	607b      	str	r3, [r7, #4]
	}

	return value;
 8005a22:	687b      	ldr	r3, [r7, #4]
}
 8005a24:	1c18      	adds	r0, r3, #0
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fd fc63 	bl	8003300 <__aeabi_i2d>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	000b      	movs	r3, r1
 8005a3e:	0011      	movs	r1, r2
 8005a40:	000c      	movs	r4, r1
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	085d      	lsrs	r5, r3, #1
 8005a46:	0022      	movs	r2, r4
 8005a48:	002b      	movs	r3, r5
 8005a4a:	0010      	movs	r0, r2
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b002      	add	sp, #8
 8005a52:	bdb0      	pop	{r4, r5, r7, pc}

08005a54 <reset_debug_variables>:


bool need_logging = true;


void reset_debug_variables() {
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	af00      	add	r7, sp, #0
	if (current_debug_buffer_pointer == last_trasmited_debug_buffer) {
 8005a58:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <reset_debug_variables+0x54>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4b13      	ldr	r3, [pc, #76]	@ (8005aac <reset_debug_variables+0x58>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d10d      	bne.n	8005a80 <reset_debug_variables+0x2c>
		need_logging = true;
 8005a64:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <reset_debug_variables+0x5c>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
		memset(debug_buffer, 0, DEBUG_BUFFER_SIZE);
 8005a6a:	2380      	movs	r3, #128	@ 0x80
 8005a6c:	019a      	lsls	r2, r3, #6
 8005a6e:	4b11      	ldr	r3, [pc, #68]	@ (8005ab4 <reset_debug_variables+0x60>)
 8005a70:	2100      	movs	r1, #0
 8005a72:	0018      	movs	r0, r3
 8005a74:	f00d fa38 	bl	8012ee8 <memset>
		current_debug_buffer_pointer = debug_buffer;
 8005a78:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <reset_debug_variables+0x54>)
 8005a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab4 <reset_debug_variables+0x60>)
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e00b      	b.n	8005a98 <reset_debug_variables+0x44>
	}
	else {
		transmit(
 8005a80:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <reset_debug_variables+0x64>)
 8005a82:	681c      	ldr	r4, [r3, #0]
 8005a84:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <reset_debug_variables+0x58>)
 8005a86:	681d      	ldr	r5, [r3, #0]
 8005a88:	f000 f832 	bl	8005af0 <get_debug_buffer_length_to_send>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	001a      	movs	r2, r3
 8005a90:	0029      	movs	r1, r5
 8005a92:	0020      	movs	r0, r4
 8005a94:	f000 f8d4 	bl	8005c40 <transmit>
			debug_uart, last_trasmited_debug_buffer,
			get_debug_buffer_length_to_send()
		);
	}
	last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005a98:	4b03      	ldr	r3, [pc, #12]	@ (8005aa8 <reset_debug_variables+0x54>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	4b03      	ldr	r3, [pc, #12]	@ (8005aac <reset_debug_variables+0x58>)
 8005a9e:	601a      	str	r2, [r3, #0]
}
 8005aa0:	46c0      	nop			@ (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	2000005c 	.word	0x2000005c
 8005aac:	200024b8 	.word	0x200024b8
 8005ab0:	20000060 	.word	0x20000060
 8005ab4:	200004b8 	.word	0x200004b8
 8005ab8:	20000070 	.word	0x20000070

08005abc <get_free_debug_buffer_size>:


inline size_t get_free_debug_buffer_size() {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
	int32_t size = (int32_t)debug_buffer + (int32_t)DEBUG_BUFFER_SIZE - (int32_t)current_debug_buffer_pointer;
 8005ac2:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <get_free_debug_buffer_size+0x2c>)
 8005ac4:	2280      	movs	r2, #128	@ 0x80
 8005ac6:	0192      	lsls	r2, r2, #6
 8005ac8:	189a      	adds	r2, r3, r2
 8005aca:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <get_free_debug_buffer_size+0x30>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	607b      	str	r3, [r7, #4]

	if (size < 0) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da01      	bge.n	8005adc <get_free_debug_buffer_size+0x20>
		size = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	607b      	str	r3, [r7, #4]
	}

	return static_cast<size_t>(size);
 8005adc:	687b      	ldr	r3, [r7, #4]
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b002      	add	sp, #8
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
 8005ae8:	200004b8 	.word	0x200004b8
 8005aec:	2000005c 	.word	0x2000005c

08005af0 <get_debug_buffer_length_to_send>:

inline uint16_t get_debug_buffer_length_to_send() {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
//	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
//	size = std::min(size, MAX_DEBUG_MESSAGE_SIZE);
	return current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005af4:	4b04      	ldr	r3, [pc, #16]	@ (8005b08 <get_debug_buffer_length_to_send+0x18>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <get_debug_buffer_length_to_send+0x1c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	b29b      	uxth	r3, r3
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	2000005c 	.word	0x2000005c
 8005b0c:	200024b8 	.word	0x200024b8

08005b10 <debug_enabled>:

uint8_t debug_enabled() {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
	return DEBUG_ENABLED;
 8005b14:	2301      	movs	r3, #1
}
 8005b16:	0018      	movs	r0, r3
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <debug>:

void debug(const char * message, ...) {
 8005b1c:	b40f      	push	{r0, r1, r2, r3}
 8005b1e:	b590      	push	{r4, r7, lr}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
	if constexpr (DEBUG_ENABLED) {
		size_t max_buffer_size = get_free_debug_buffer_size();
 8005b24:	f7ff ffca 	bl	8005abc <get_free_debug_buffer_size>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	60bb      	str	r3, [r7, #8]

		if (max_buffer_size > 0) {
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d058      	beq.n	8005be4 <debug+0xc8>
			int16_t recorded = snprintf((char *)current_debug_buffer_pointer, max_buffer_size, "%lu ms: ", HAL_GetTick());
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <debug+0xdc>)
 8005b34:	681c      	ldr	r4, [r3, #0]
 8005b36:	f002 f987 	bl	8007e48 <HAL_GetTick>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005bfc <debug+0xe0>)
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	0020      	movs	r0, r4
 8005b42:	f00d f8f9 	bl	8012d38 <sniprintf>
 8005b46:	0002      	movs	r2, r0
 8005b48:	1dbb      	adds	r3, r7, #6
 8005b4a:	801a      	strh	r2, [r3, #0]

			uint16_t length = recorded > 0 ? (uint16_t)recorded : 0;
 8005b4c:	1dbb      	adds	r3, r7, #6
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b21a      	sxth	r2, r3
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	da00      	bge.n	8005b58 <debug+0x3c>
 8005b56:	2300      	movs	r3, #0
 8005b58:	b21a      	sxth	r2, r3
 8005b5a:	210e      	movs	r1, #14
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	801a      	strh	r2, [r3, #0]
//			uint16_t length = 0;

			if (max_buffer_size > length) {
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d93e      	bls.n	8005be8 <debug+0xcc>
				max_buffer_size -= length;
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	60bb      	str	r3, [r7, #8]

				va_list args;
				va_start (args, message);
 8005b74:	2324      	movs	r3, #36	@ 0x24
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	603b      	str	r3, [r7, #0]
				recorded = vsnprintf((char *)(current_debug_buffer_pointer + length), max_buffer_size, message, args);
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf8 <debug+0xdc>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	18d0      	adds	r0, r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6a3a      	ldr	r2, [r7, #32]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	f00d f9a1 	bl	8012ed0 <vsniprintf>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	1dbb      	adds	r3, r7, #6
 8005b92:	801a      	strh	r2, [r3, #0]
				va_end (args);

				if (recorded > 0) {
 8005b94:	1dbb      	adds	r3, r7, #6
 8005b96:	2200      	movs	r2, #0
 8005b98:	5e9b      	ldrsh	r3, [r3, r2]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dd11      	ble.n	8005bc2 <debug+0xa6>
					length += recorded < (int16_t)max_buffer_size ? recorded : max_buffer_size;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	1dba      	adds	r2, r7, #6
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	5e52      	ldrsh	r2, [r2, r1]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	db02      	blt.n	8005bb2 <debug+0x96>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	e001      	b.n	8005bb6 <debug+0x9a>
 8005bb2:	1dbb      	adds	r3, r7, #6
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	210e      	movs	r1, #14
 8005bb8:	187a      	adds	r2, r7, r1
 8005bba:	1879      	adds	r1, r7, r1
 8005bbc:	8809      	ldrh	r1, [r1, #0]
 8005bbe:	185b      	adds	r3, r3, r1
 8005bc0:	8013      	strh	r3, [r2, #0]
				}

				current_debug_buffer_pointer += length;
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <debug+0xdc>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	230e      	movs	r3, #14
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	18d2      	adds	r2, r2, r3
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <debug+0xdc>)
 8005bd0:	601a      	str	r2, [r3, #0]

				if (current_debug_buffer_pointer > (debug_buffer + 8192)) {
 8005bd2:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <debug+0xdc>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <debug+0xe4>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d905      	bls.n	8005be8 <debug+0xcc>
					current_debug_buffer_pointer = debug_buffer + 8192;
 8005bdc:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <debug+0xe4>)
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <debug+0xdc>)
 8005be0:	601a      	str	r2, [r3, #0]
		}
		else {
			reset_debug_variables();
		}
	}
}
 8005be2:	e001      	b.n	8005be8 <debug+0xcc>
			reset_debug_variables();
 8005be4:	f7ff ff36 	bl	8005a54 <reset_debug_variables>
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b005      	add	sp, #20
 8005bee:	bc90      	pop	{r4, r7}
 8005bf0:	bc08      	pop	{r3}
 8005bf2:	b004      	add	sp, #16
 8005bf4:	4718      	bx	r3
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	2000005c 	.word	0x2000005c
 8005bfc:	08016d14 	.word	0x08016d14
 8005c00:	200024b8 	.word	0x200024b8

08005c04 <extended_debug>:

void extended_debug(const char * message, ...) {
 8005c04:	b40f      	push	{r0, r1, r2, r3}
 8005c06:	b580      	push	{r7, lr}
 8005c08:	af00      	add	r7, sp, #0
		va_list args;
		va_start (args, message);
		debug(message, args);
		va_end (args);
	}
}
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	bc08      	pop	{r3}
 8005c12:	b004      	add	sp, #16
 8005c14:	4718      	bx	r3

08005c16 <receive>:
//
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)str, len, 100);
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)res, 10, 100);
//}

void receive(uart_t * uart, uint8_t * buffer, size_t size) {
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
	HAL_UART_AbortReceive(uart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f006 feff 	bl	800ca28 <HAL_UART_AbortReceive>

	HAL_UART_Receive_IT(uart, buffer, size);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f006 fe9a 	bl	800c96c <HAL_UART_Receive_IT>
}
 8005c38:	46c0      	nop			@ (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b004      	add	sp, #16
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <transmit>:

void transmit(uart_t * uart, uint8_t * buffer, uint16_t size) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	1dbb      	adds	r3, r7, #6
 8005c4c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(uart, buffer, size);
 8005c4e:	1dbb      	adds	r3, r7, #6
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f006 fde0 	bl	800c81c <HAL_UART_Transmit_IT>
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b004      	add	sp, #16
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <send_debug_messages>:

void send_debug_messages() {
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
	uint16_t size = get_debug_buffer_length_to_send();
 8005c6a:	1dbc      	adds	r4, r7, #6
 8005c6c:	f7ff ff40 	bl	8005af0 <get_debug_buffer_length_to_send>
 8005c70:	0003      	movs	r3, r0
 8005c72:	8023      	strh	r3, [r4, #0]

	if (need_logging && size > 0) {
 8005c74:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb0 <send_debug_messages+0x4c>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d015      	beq.n	8005ca8 <send_debug_messages+0x44>
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d011      	beq.n	8005ca8 <send_debug_messages+0x44>
		transmit(debug_uart, debug_buffer, size);
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <send_debug_messages+0x50>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	1dbb      	adds	r3, r7, #6
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <send_debug_messages+0x54>)
 8005c8e:	0019      	movs	r1, r3
 8005c90:	f7ff ffd6 	bl	8005c40 <transmit>
		need_logging = false;
 8005c94:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <send_debug_messages+0x4c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
		last_trasmited_debug_buffer += size;
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <send_debug_messages+0x58>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	1dbb      	adds	r3, r7, #6
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	18d2      	adds	r2, r2, r3
 8005ca4:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <send_debug_messages+0x58>)
 8005ca6:	601a      	str	r2, [r3, #0]
	}
}
 8005ca8:	46c0      	nop			@ (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b003      	add	sp, #12
 8005cae:	bd90      	pop	{r4, r7, pc}
 8005cb0:	20000060 	.word	0x20000060
 8005cb4:	20000070 	.word	0x20000070
 8005cb8:	200004b8 	.word	0x200004b8
 8005cbc:	200024b8 	.word	0x200024b8

08005cc0 <send_all_debug_buffer_blocking>:

void send_all_debug_buffer_blocking() {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <send_all_debug_buffer_blocking+0x2c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <send_all_debug_buffer_blocking+0x30>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(debug_uart, debug_buffer, size, 100);
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <send_all_debug_buffer_blocking+0x34>)
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	4907      	ldr	r1, [pc, #28]	@ (8005cf8 <send_all_debug_buffer_blocking+0x38>)
 8005cdc:	2364      	movs	r3, #100	@ 0x64
 8005cde:	f006 fcf9 	bl	800c6d4 <HAL_UART_Transmit>
}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b002      	add	sp, #8
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	2000005c 	.word	0x2000005c
 8005cf0:	200024b8 	.word	0x200024b8
 8005cf4:	20000070 	.word	0x20000070
 8005cf8:	200004b8 	.word	0x200004b8

08005cfc <_Z41__static_initialization_and_destruction_0ii>:
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4a05      	ldr	r2, [pc, #20]	@ (8005d24 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d103      	bne.n	8005d1c <_Z41__static_initialization_and_destruction_0ii+0x20>
uint8_t * last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005d14:	4b04      	ldr	r3, [pc, #16]	@ (8005d28 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b04      	ldr	r3, [pc, #16]	@ (8005d2c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8005d1a:	601a      	str	r2, [r3, #0]
}
 8005d1c:	46c0      	nop			@ (mov r8, r8)
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b002      	add	sp, #8
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	0000ffff 	.word	0x0000ffff
 8005d28:	2000005c 	.word	0x2000005c
 8005d2c:	200024b8 	.word	0x200024b8

08005d30 <_GLOBAL__sub_I_receive_buffer>:
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <_GLOBAL__sub_I_receive_buffer+0x14>)
 8005d36:	0019      	movs	r1, r3
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f7ff ffdf 	bl	8005cfc <_Z41__static_initialization_and_destruction_0ii>
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	0000ffff 	.word	0x0000ffff

08005d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b08b      	sub	sp, #44	@ 0x2c
 8005d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d4e:	2414      	movs	r4, #20
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	0018      	movs	r0, r3
 8005d54:	2314      	movs	r3, #20
 8005d56:	001a      	movs	r2, r3
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f00d f8c5 	bl	8012ee8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d5e:	4bb6      	ldr	r3, [pc, #728]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d62:	4bb5      	ldr	r3, [pc, #724]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d64:	2104      	movs	r1, #4
 8005d66:	430a      	orrs	r2, r1
 8005d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d6a:	4bb3      	ldr	r3, [pc, #716]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6e:	2204      	movs	r2, #4
 8005d70:	4013      	ands	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d76:	4bb0      	ldr	r3, [pc, #704]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7a:	4baf      	ldr	r3, [pc, #700]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d7c:	2120      	movs	r1, #32
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d82:	4bad      	ldr	r3, [pc, #692]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	2220      	movs	r2, #32
 8005d88:	4013      	ands	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8e:	4baa      	ldr	r3, [pc, #680]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d92:	4ba9      	ldr	r3, [pc, #676]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d94:	2101      	movs	r1, #1
 8005d96:	430a      	orrs	r2, r1
 8005d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d9a:	4ba7      	ldr	r3, [pc, #668]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4013      	ands	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005da6:	4ba4      	ldr	r3, [pc, #656]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005daa:	4ba3      	ldr	r3, [pc, #652]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005dac:	2102      	movs	r1, #2
 8005dae:	430a      	orrs	r2, r1
 8005db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005db2:	4ba1      	ldr	r3, [pc, #644]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db6:	2202      	movs	r2, #2
 8005db8:	4013      	ands	r3, r2
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dc2:	4b9d      	ldr	r3, [pc, #628]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005dc4:	2108      	movs	r1, #8
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dca:	4b9b      	ldr	r3, [pc, #620]	@ (8006038 <MX_GPIO_Init+0x2f0>)
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dce:	2208      	movs	r2, #8
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GAIN1_Pin|GAIN0_Pin, GPIO_PIN_SET);
 8005dd6:	4b99      	ldr	r3, [pc, #612]	@ (800603c <MX_GPIO_Init+0x2f4>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2103      	movs	r1, #3
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f002 fd42 	bl	8008866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|TEMP_Pin|FLASH_NSS_Pin|DBG_GPIO1_Pin, GPIO_PIN_RESET);
 8005de2:	23a3      	movs	r3, #163	@ 0xa3
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4895      	ldr	r0, [pc, #596]	@ (800603c <MX_GPIO_Init+0x2f4>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	0019      	movs	r1, r3
 8005dec:	f002 fd3b 	bl	8008866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCLK_Pin|SPEED_Pin|FLASH_HOLD_Pin, GPIO_PIN_RESET);
 8005df0:	4993      	ldr	r1, [pc, #588]	@ (8006040 <MX_GPIO_Init+0x2f8>)
 8005df2:	23a0      	movs	r3, #160	@ 0xa0
 8005df4:	05db      	lsls	r3, r3, #23
 8005df6:	2200      	movs	r2, #0
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f002 fd34 	bl	8008866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDWN_GPIO_Port, PDWN_Pin, GPIO_PIN_SET);
 8005dfe:	23a0      	movs	r3, #160	@ 0xa0
 8005e00:	05db      	lsls	r3, r3, #23
 8005e02:	2201      	movs	r2, #1
 8005e04:	2104      	movs	r1, #4
 8005e06:	0018      	movs	r0, r3
 8005e08:	f002 fd2d 	bl	8008866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	015b      	lsls	r3, r3, #5
 8005e10:	488c      	ldr	r0, [pc, #560]	@ (8006044 <MX_GPIO_Init+0x2fc>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	0019      	movs	r1, r3
 8005e16:	f002 fd26 	bl	8008866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_WP_Pin|DBG_GPIO2_Pin|LED_ERROR_Pin|LED_STATUS_Pin
 8005e1a:	498b      	ldr	r1, [pc, #556]	@ (8006048 <MX_GPIO_Init+0x300>)
 8005e1c:	4b8b      	ldr	r3, [pc, #556]	@ (800604c <MX_GPIO_Init+0x304>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	0018      	movs	r0, r3
 8005e22:	f002 fd20 	bl	8008866 <HAL_GPIO_WritePin>
                          |USART2DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GAIN1_Pin|GAIN0_Pin;
 8005e26:	193b      	adds	r3, r7, r4
 8005e28:	2203      	movs	r2, #3
 8005e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e2c:	193b      	adds	r3, r7, r4
 8005e2e:	2201      	movs	r2, #1
 8005e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e32:	193b      	adds	r3, r7, r4
 8005e34:	2201      	movs	r2, #1
 8005e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e38:	193b      	adds	r3, r7, r4
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e3e:	193b      	adds	r3, r7, r4
 8005e40:	4a7e      	ldr	r2, [pc, #504]	@ (800603c <MX_GPIO_Init+0x2f4>)
 8005e42:	0019      	movs	r1, r3
 8005e44:	0010      	movs	r0, r2
 8005e46:	f002 fb8d 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A0_Pin|TEMP_Pin;
 8005e4a:	193b      	adds	r3, r7, r4
 8005e4c:	220c      	movs	r2, #12
 8005e4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e50:	193b      	adds	r3, r7, r4
 8005e52:	2201      	movs	r2, #1
 8005e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e56:	193b      	adds	r3, r7, r4
 8005e58:	2202      	movs	r2, #2
 8005e5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e5c:	193b      	adds	r3, r7, r4
 8005e5e:	2200      	movs	r2, #0
 8005e60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e62:	193b      	adds	r3, r7, r4
 8005e64:	4a75      	ldr	r2, [pc, #468]	@ (800603c <MX_GPIO_Init+0x2f4>)
 8005e66:	0019      	movs	r1, r3
 8005e68:	0010      	movs	r0, r2
 8005e6a:	f002 fb7b 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY_DROUT_Pin;
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e74:	193b      	adds	r3, r7, r4
 8005e76:	2200      	movs	r2, #0
 8005e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7a:	193b      	adds	r3, r7, r4
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DRDY_DROUT_GPIO_Port, &GPIO_InitStruct);
 8005e80:	193a      	adds	r2, r7, r4
 8005e82:	23a0      	movs	r3, #160	@ 0xa0
 8005e84:	05db      	lsls	r3, r3, #23
 8005e86:	0011      	movs	r1, r2
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f002 fb6b 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SCLK_Pin|SPEED_Pin;
 8005e8e:	193b      	adds	r3, r7, r4
 8005e90:	220a      	movs	r2, #10
 8005e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e94:	193b      	adds	r3, r7, r4
 8005e96:	2201      	movs	r2, #1
 8005e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea0:	193b      	adds	r3, r7, r4
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea6:	193a      	adds	r2, r7, r4
 8005ea8:	23a0      	movs	r3, #160	@ 0xa0
 8005eaa:	05db      	lsls	r3, r3, #23
 8005eac:	0011      	movs	r1, r2
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f002 fb58 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDWN_Pin;
 8005eb4:	193b      	adds	r3, r7, r4
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ec0:	193b      	adds	r3, r7, r4
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec6:	193b      	adds	r3, r7, r4
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PDWN_GPIO_Port, &GPIO_InitStruct);
 8005ecc:	193a      	adds	r2, r7, r4
 8005ece:	23a0      	movs	r3, #160	@ 0xa0
 8005ed0:	05db      	lsls	r3, r3, #23
 8005ed2:	0011      	movs	r1, r2
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f002 fb45 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_Z_SELECT_Pin;
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ee0:	193b      	adds	r3, r7, r4
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ee6:	193b      	adds	r3, r7, r4
 8005ee8:	2201      	movs	r2, #1
 8005eea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(X_Z_SELECT_GPIO_Port, &GPIO_InitStruct);
 8005eec:	193b      	adds	r3, r7, r4
 8005eee:	4a55      	ldr	r2, [pc, #340]	@ (8006044 <MX_GPIO_Init+0x2fc>)
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	0010      	movs	r0, r2
 8005ef4:	f002 fb36 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 8005ef8:	0021      	movs	r1, r4
 8005efa:	187b      	adds	r3, r7, r1
 8005efc:	2280      	movs	r2, #128	@ 0x80
 8005efe:	0152      	lsls	r2, r2, #5
 8005f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f02:	000c      	movs	r4, r1
 8005f04:	193b      	adds	r3, r7, r4
 8005f06:	2201      	movs	r2, #1
 8005f08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0a:	193b      	adds	r3, r7, r4
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f10:	193b      	adds	r3, r7, r4
 8005f12:	2200      	movs	r2, #0
 8005f14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 8005f16:	193b      	adds	r3, r7, r4
 8005f18:	4a4a      	ldr	r2, [pc, #296]	@ (8006044 <MX_GPIO_Init+0x2fc>)
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	0010      	movs	r0, r2
 8005f1e:	f002 fb21 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin;
 8005f22:	193b      	adds	r3, r7, r4
 8005f24:	2280      	movs	r2, #128	@ 0x80
 8005f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f28:	193b      	adds	r3, r7, r4
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2e:	193b      	adds	r3, r7, r4
 8005f30:	2200      	movs	r2, #0
 8005f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f34:	193b      	adds	r3, r7, r4
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_NSS_GPIO_Port, &GPIO_InitStruct);
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800603c <MX_GPIO_Init+0x2f4>)
 8005f3e:	0019      	movs	r1, r3
 8005f40:	0010      	movs	r0, r2
 8005f42:	f002 fb0f 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 8005f46:	0021      	movs	r1, r4
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	2283      	movs	r2, #131	@ 0x83
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f50:	000c      	movs	r4, r1
 8005f52:	193b      	adds	r3, r7, r4
 8005f54:	2201      	movs	r2, #1
 8005f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f58:	193b      	adds	r3, r7, r4
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5e:	193b      	adds	r3, r7, r4
 8005f60:	2200      	movs	r2, #0
 8005f62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f64:	193b      	adds	r3, r7, r4
 8005f66:	4a39      	ldr	r2, [pc, #228]	@ (800604c <MX_GPIO_Init+0x304>)
 8005f68:	0019      	movs	r1, r3
 8005f6a:	0010      	movs	r0, r2
 8005f6c:	f002 fafa 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_HOLD_Pin;
 8005f70:	0021      	movs	r1, r4
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	2280      	movs	r2, #128	@ 0x80
 8005f76:	00d2      	lsls	r2, r2, #3
 8005f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f7a:	000c      	movs	r4, r1
 8005f7c:	193b      	adds	r3, r7, r4
 8005f7e:	2201      	movs	r2, #1
 8005f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f82:	193b      	adds	r3, r7, r4
 8005f84:	2200      	movs	r2, #0
 8005f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f88:	193b      	adds	r3, r7, r4
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_HOLD_GPIO_Port, &GPIO_InitStruct);
 8005f8e:	193a      	adds	r2, r7, r4
 8005f90:	23a0      	movs	r3, #160	@ 0xa0
 8005f92:	05db      	lsls	r3, r3, #23
 8005f94:	0011      	movs	r1, r2
 8005f96:	0018      	movs	r0, r3
 8005f98:	f002 fae4 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO1_Pin;
 8005f9c:	0021      	movs	r1, r4
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	2280      	movs	r2, #128	@ 0x80
 8005fa2:	0092      	lsls	r2, r2, #2
 8005fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fa6:	000c      	movs	r4, r1
 8005fa8:	193b      	adds	r3, r7, r4
 8005faa:	2201      	movs	r2, #1
 8005fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fae:	193b      	adds	r3, r7, r4
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb4:	193b      	adds	r3, r7, r4
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8005fba:	193b      	adds	r3, r7, r4
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800603c <MX_GPIO_Init+0x2f4>)
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	0010      	movs	r0, r2
 8005fc2:	f002 facf 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_pin_3_Pin;
 8005fc6:	193b      	adds	r3, r7, r4
 8005fc8:	2201      	movs	r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fcc:	193b      	adds	r3, r7, r4
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fd2:	193b      	adds	r3, r7, r4
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Test_pin_3_GPIO_Port, &GPIO_InitStruct);
 8005fd8:	193b      	adds	r3, r7, r4
 8005fda:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <MX_GPIO_Init+0x304>)
 8005fdc:	0019      	movs	r1, r3
 8005fde:	0010      	movs	r0, r2
 8005fe0:	f002 fac0 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO2_Pin;
 8005fe4:	193b      	adds	r3, r7, r4
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fea:	193b      	adds	r3, r7, r4
 8005fec:	2201      	movs	r2, #1
 8005fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	193b      	adds	r3, r7, r4
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff6:	193b      	adds	r3, r7, r4
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	4a13      	ldr	r2, [pc, #76]	@ (800604c <MX_GPIO_Init+0x304>)
 8006000:	0019      	movs	r1, r3
 8006002:	0010      	movs	r0, r2
 8006004:	f002 faae 	bl	8008564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2DE_Pin;
 8006008:	0021      	movs	r1, r4
 800600a:	187b      	adds	r3, r7, r1
 800600c:	2210      	movs	r2, #16
 800600e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006010:	187b      	adds	r3, r7, r1
 8006012:	2201      	movs	r2, #1
 8006014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006016:	187b      	adds	r3, r7, r1
 8006018:	2202      	movs	r2, #2
 800601a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800601c:	187b      	adds	r3, r7, r1
 800601e:	2200      	movs	r2, #0
 8006020:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USART2DE_GPIO_Port, &GPIO_InitStruct);
 8006022:	187b      	adds	r3, r7, r1
 8006024:	4a09      	ldr	r2, [pc, #36]	@ (800604c <MX_GPIO_Init+0x304>)
 8006026:	0019      	movs	r1, r3
 8006028:	0010      	movs	r0, r2
 800602a:	f002 fa9b 	bl	8008564 <HAL_GPIO_Init>

}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b00b      	add	sp, #44	@ 0x2c
 8006034:	bd90      	pop	{r4, r7, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	40021000 	.word	0x40021000
 800603c:	50000800 	.word	0x50000800
 8006040:	0000040a 	.word	0x0000040a
 8006044:	50000400 	.word	0x50000400
 8006048:	0000021e 	.word	0x0000021e
 800604c:	50000c00 	.word	0x50000c00

08006050 <hdc1080_init>:
#include "sensors_state.h"
#include "debug.h"

I2C_HandleTypeDef* hi2c_hdc1080;

bool hdc1080_init(I2C_HandleTypeDef* _hi2c_hdc1080, Temp_Reso Temperature_Resolution_x_bit, Humi_Reso Humidity_Resolution_x_bit)	{
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006052:	b089      	sub	sp, #36	@ 0x24
 8006054:	af04      	add	r7, sp, #16
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	0008      	movs	r0, r1
 800605a:	0011      	movs	r1, r2
 800605c:	1cfb      	adds	r3, r7, #3
 800605e:	1c02      	adds	r2, r0, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	1cbb      	adds	r3, r7, #2
 8006064:	1c0a      	adds	r2, r1, #0
 8006066:	701a      	strb	r2, [r3, #0]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value = 0x1000;
 8006068:	210e      	movs	r1, #14
 800606a:	187b      	adds	r3, r7, r1
 800606c:	2280      	movs	r2, #128	@ 0x80
 800606e:	0152      	lsls	r2, r2, #5
 8006070:	801a      	strh	r2, [r3, #0]
	uint8_t data_send[2];
	hi2c_hdc1080 = _hi2c_hdc1080;
 8006072:	4b2f      	ldr	r3, [pc, #188]	@ (8006130 <hdc1080_init+0xe0>)
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit) {
 8006078:	1cfb      	adds	r3, r7, #3
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d106      	bne.n	800608e <hdc1080_init+0x3e>
		config_reg_value |= (1 << 10); //11 bit
 8006080:	187b      	adds	r3, r7, r1
 8006082:	187a      	adds	r2, r7, r1
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	2180      	movs	r1, #128	@ 0x80
 8006088:	00c9      	lsls	r1, r1, #3
 800608a:	430a      	orrs	r2, r1
 800608c:	801a      	strh	r2, [r3, #0]
	}

	switch(Humidity_Resolution_x_bit) {
 800608e:	1cbb      	adds	r3, r7, #2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d00d      	beq.n	80060b2 <hdc1080_init+0x62>
 8006096:	dc16      	bgt.n	80060c6 <hdc1080_init+0x76>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d013      	beq.n	80060c4 <hdc1080_init+0x74>
 800609c:	2b01      	cmp	r3, #1
 800609e:	d112      	bne.n	80060c6 <hdc1080_init+0x76>
		case Humidity_Resolution_11_bit:
			config_reg_value |= (1 << 8);
 80060a0:	220e      	movs	r2, #14
 80060a2:	18bb      	adds	r3, r7, r2
 80060a4:	18ba      	adds	r2, r7, r2
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	2180      	movs	r1, #128	@ 0x80
 80060aa:	0049      	lsls	r1, r1, #1
 80060ac:	430a      	orrs	r2, r1
 80060ae:	801a      	strh	r2, [r3, #0]
			break;
 80060b0:	e009      	b.n	80060c6 <hdc1080_init+0x76>
		case Humidity_Resolution_8_bit:
			config_reg_value |= (1 << 9);
 80060b2:	220e      	movs	r2, #14
 80060b4:	18bb      	adds	r3, r7, r2
 80060b6:	18ba      	adds	r2, r7, r2
 80060b8:	8812      	ldrh	r2, [r2, #0]
 80060ba:	2180      	movs	r1, #128	@ 0x80
 80060bc:	0089      	lsls	r1, r1, #2
 80060be:	430a      	orrs	r2, r1
 80060c0:	801a      	strh	r2, [r3, #0]
			break;
 80060c2:	e000      	b.n	80060c6 <hdc1080_init+0x76>
		case Humidity_Resolution_14_bit:
			break;
 80060c4:	46c0      	nop			@ (mov r8, r8)
	}

	data_send[0] = (config_reg_value >> 8);
 80060c6:	210e      	movs	r1, #14
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	2508      	movs	r5, #8
 80060d4:	197b      	adds	r3, r7, r5
 80060d6:	701a      	strb	r2, [r3, #0]
	data_send[1] = (config_reg_value & 0x00ff);
 80060d8:	187b      	adds	r3, r7, r1
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	197b      	adds	r3, r7, r5
 80060e0:	705a      	strb	r2, [r3, #1]


	HAL_StatusTypeDef status = HAL_OK;
 80060e2:	260d      	movs	r6, #13
 80060e4:	19bb      	adds	r3, r7, r6
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(hi2c_hdc1080, HDC_1080_ADDR, 10, 100);
 80060ea:	4b11      	ldr	r3, [pc, #68]	@ (8006130 <hdc1080_init+0xe0>)
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	19bc      	adds	r4, r7, r6
 80060f0:	2364      	movs	r3, #100	@ 0x64
 80060f2:	220a      	movs	r2, #10
 80060f4:	2180      	movs	r1, #128	@ 0x80
 80060f6:	f003 f929 	bl	800934c <HAL_I2C_IsDeviceReady>
 80060fa:	0003      	movs	r3, r0
 80060fc:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) {
 80060fe:	19bb      	adds	r3, r7, r6
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <hdc1080_init+0xd6>
		HAL_I2C_Mem_Write(hi2c_hdc1080, HDC_1080_ADDR, Configuration_register_add, I2C_MEMADD_SIZE_8BIT, data_send, 2, 1000);
 8006106:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <hdc1080_init+0xe0>)
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	23fa      	movs	r3, #250	@ 0xfa
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	2302      	movs	r3, #2
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	197b      	adds	r3, r7, r5
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2301      	movs	r3, #1
 800611a:	2202      	movs	r2, #2
 800611c:	2180      	movs	r1, #128	@ 0x80
 800611e:	f002 feb3 	bl	8008e88 <HAL_I2C_Mem_Write>
		return true;
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <hdc1080_init+0xd8>
	} else {
		return false;
 8006126:	2300      	movs	r3, #0
	}
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b005      	add	sp, #20
 800612e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006130:	200024bc 	.word	0x200024bc

08006134 <hdc1080_start_measurement>:


int8_t hdc1080_start_measurement(float * temperature, float * humidity)	{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b089      	sub	sp, #36	@ 0x24
 8006138:	af02      	add	r7, sp, #8
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]

	uint8_t receive_data[4];
	uint16_t temp_x, humi_x;
	uint8_t send_data = Temperature_register_add;
 800613e:	210f      	movs	r1, #15
 8006140:	187b      	adds	r3, r7, r1
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(hi2c_hdc1080, HDC_1080_ADDR, &send_data, 1, 100);
 8006146:	4b3a      	ldr	r3, [pc, #232]	@ (8006230 <hdc1080_start_measurement+0xfc>)
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	187a      	adds	r2, r7, r1
 800614c:	2364      	movs	r3, #100	@ 0x64
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2301      	movs	r3, #1
 8006152:	2180      	movs	r1, #128	@ 0x80
 8006154:	f002 fc66 	bl	8008a24 <HAL_I2C_Master_Transmit>

 	vTaskDelay(20);
 8006158:	2014      	movs	r0, #20
 800615a:	f00a f893 	bl	8010284 <vTaskDelay>

	/* Read temperature and humidity */
 	HAL_I2C_Master_Receive(hi2c_hdc1080, HDC_1080_ADDR, receive_data, 4, 100);
 800615e:	4b34      	ldr	r3, [pc, #208]	@ (8006230 <hdc1080_start_measurement+0xfc>)
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	2410      	movs	r4, #16
 8006164:	193a      	adds	r2, r7, r4
 8006166:	2364      	movs	r3, #100	@ 0x64
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	2304      	movs	r3, #4
 800616c:	2180      	movs	r1, #128	@ 0x80
 800616e:	f002 fd83 	bl	8008c78 <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0] << 8) | receive_data[1]);
 8006172:	0021      	movs	r1, r4
 8006174:	187b      	adds	r3, r7, r1
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	b21a      	sxth	r2, r3
 800617c:	187b      	adds	r3, r7, r1
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	b21b      	sxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b21a      	sxth	r2, r3
 8006186:	2016      	movs	r0, #22
 8006188:	183b      	adds	r3, r7, r0
 800618a:	801a      	strh	r2, [r3, #0]
	humi_x =((receive_data[2] << 8) | receive_data[3]);
 800618c:	187b      	adds	r3, r7, r1
 800618e:	789b      	ldrb	r3, [r3, #2]
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	b21a      	sxth	r2, r3
 8006194:	187b      	adds	r3, r7, r1
 8006196:	78db      	ldrb	r3, [r3, #3]
 8006198:	b21b      	sxth	r3, r3
 800619a:	4313      	orrs	r3, r2
 800619c:	b21a      	sxth	r2, r3
 800619e:	2414      	movs	r4, #20
 80061a0:	193b      	adds	r3, r7, r4
 80061a2:	801a      	strh	r2, [r3, #0]

	*temperature=((temp_x / 65536.0) * 165.0) - 40.0;
 80061a4:	183b      	adds	r3, r7, r0
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7fd f8a9 	bl	8003300 <__aeabi_i2d>
 80061ae:	2200      	movs	r2, #0
 80061b0:	4b20      	ldr	r3, [pc, #128]	@ (8006234 <hdc1080_start_measurement+0x100>)
 80061b2:	f7fb fd9f 	bl	8001cf4 <__aeabi_ddiv>
 80061b6:	0002      	movs	r2, r0
 80061b8:	000b      	movs	r3, r1
 80061ba:	0010      	movs	r0, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <hdc1080_start_measurement+0x104>)
 80061c2:	f7fc f9db 	bl	800257c <__aeabi_dmul>
 80061c6:	0002      	movs	r2, r0
 80061c8:	000b      	movs	r3, r1
 80061ca:	0010      	movs	r0, r2
 80061cc:	0019      	movs	r1, r3
 80061ce:	2200      	movs	r2, #0
 80061d0:	4b1a      	ldr	r3, [pc, #104]	@ (800623c <hdc1080_start_measurement+0x108>)
 80061d2:	f7fc fc9b 	bl	8002b0c <__aeabi_dsub>
 80061d6:	0002      	movs	r2, r0
 80061d8:	000b      	movs	r3, r1
 80061da:	0010      	movs	r0, r2
 80061dc:	0019      	movs	r1, r3
 80061de:	f7fd f929 	bl	8003434 <__aeabi_d2f>
 80061e2:	1c02      	adds	r2, r0, #0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]
	*humidity=(uint8_t)((humi_x / 65536.0) * 100.0);
 80061e8:	193b      	adds	r3, r7, r4
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7fd f887 	bl	8003300 <__aeabi_i2d>
 80061f2:	2200      	movs	r2, #0
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <hdc1080_start_measurement+0x100>)
 80061f6:	f7fb fd7d 	bl	8001cf4 <__aeabi_ddiv>
 80061fa:	0002      	movs	r2, r0
 80061fc:	000b      	movs	r3, r1
 80061fe:	0010      	movs	r0, r2
 8006200:	0019      	movs	r1, r3
 8006202:	2200      	movs	r2, #0
 8006204:	4b0e      	ldr	r3, [pc, #56]	@ (8006240 <hdc1080_start_measurement+0x10c>)
 8006206:	f7fc f9b9 	bl	800257c <__aeabi_dmul>
 800620a:	0002      	movs	r2, r0
 800620c:	000b      	movs	r3, r1
 800620e:	0010      	movs	r0, r2
 8006210:	0019      	movs	r1, r3
 8006212:	f7fa f9bb 	bl	800058c <__aeabi_d2uiz>
 8006216:	0003      	movs	r3, r0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	0018      	movs	r0, r3
 800621c:	f7fb f9c4 	bl	80015a8 <__aeabi_ui2f>
 8006220:	1c02      	adds	r2, r0, #0
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	601a      	str	r2, [r3, #0]

	return true;
 8006226:	2301      	movs	r3, #1
}
 8006228:	0018      	movs	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	b007      	add	sp, #28
 800622e:	bd90      	pop	{r4, r7, pc}
 8006230:	200024bc 	.word	0x200024bc
 8006234:	40f00000 	.word	0x40f00000
 8006238:	4064a000 	.word	0x4064a000
 800623c:	40440000 	.word	0x40440000
 8006240:	40590000 	.word	0x40590000

08006244 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006248:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <MX_I2C2_Init+0x74>)
 800624a:	4a1c      	ldr	r2, [pc, #112]	@ (80062bc <MX_I2C2_Init+0x78>)
 800624c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800624e:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006250:	4a1b      	ldr	r2, [pc, #108]	@ (80062c0 <MX_I2C2_Init+0x7c>)
 8006252:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006254:	4b18      	ldr	r3, [pc, #96]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006256:	2200      	movs	r2, #0
 8006258:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <MX_I2C2_Init+0x74>)
 800625c:	2201      	movs	r2, #1
 800625e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006260:	4b15      	ldr	r3, [pc, #84]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006262:	2200      	movs	r2, #0
 8006264:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006266:	4b14      	ldr	r3, [pc, #80]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006268:	2200      	movs	r2, #0
 800626a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800626c:	4b12      	ldr	r3, [pc, #72]	@ (80062b8 <MX_I2C2_Init+0x74>)
 800626e:	2200      	movs	r2, #0
 8006270:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006272:	4b11      	ldr	r3, [pc, #68]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006278:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <MX_I2C2_Init+0x74>)
 800627a:	2200      	movs	r2, #0
 800627c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800627e:	4b0e      	ldr	r3, [pc, #56]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006280:	0018      	movs	r0, r3
 8006282:	f002 fb29 	bl	80088d8 <HAL_I2C_Init>
 8006286:	1e03      	subs	r3, r0, #0
 8006288:	d001      	beq.n	800628e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800628a:	f000 fe2d 	bl	8006ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800628e:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <MX_I2C2_Init+0x74>)
 8006290:	2100      	movs	r1, #0
 8006292:	0018      	movs	r0, r3
 8006294:	f003 fcf0 	bl	8009c78 <HAL_I2CEx_ConfigAnalogFilter>
 8006298:	1e03      	subs	r3, r0, #0
 800629a:	d001      	beq.n	80062a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800629c:	f000 fe24 	bl	8006ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <MX_I2C2_Init+0x74>)
 80062a2:	2100      	movs	r1, #0
 80062a4:	0018      	movs	r0, r3
 80062a6:	f003 fd33 	bl	8009d10 <HAL_I2CEx_ConfigDigitalFilter>
 80062aa:	1e03      	subs	r3, r0, #0
 80062ac:	d001      	beq.n	80062b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80062ae:	f000 fe1b 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80062b2:	46c0      	nop			@ (mov r8, r8)
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200024c0 	.word	0x200024c0
 80062bc:	40005800 	.word	0x40005800
 80062c0:	10707dbc 	.word	0x10707dbc

080062c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b08b      	sub	sp, #44	@ 0x2c
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062cc:	2414      	movs	r4, #20
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	0018      	movs	r0, r3
 80062d2:	2314      	movs	r3, #20
 80062d4:	001a      	movs	r2, r3
 80062d6:	2100      	movs	r1, #0
 80062d8:	f00c fe06 	bl	8012ee8 <memset>
  if(i2cHandle->Instance==I2C2)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <HAL_I2C_MspInit+0x8c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d130      	bne.n	8006348 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006354 <HAL_I2C_MspInit+0x90>)
 80062e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <HAL_I2C_MspInit+0x90>)
 80062ec:	2102      	movs	r1, #2
 80062ee:	430a      	orrs	r2, r1
 80062f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80062f2:	4b18      	ldr	r3, [pc, #96]	@ (8006354 <HAL_I2C_MspInit+0x90>)
 80062f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f6:	2202      	movs	r2, #2
 80062f8:	4013      	ands	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C2_SCL_Pin|SENSOR_I2C2_SDA_Pin;
 80062fe:	193b      	adds	r3, r7, r4
 8006300:	22c0      	movs	r2, #192	@ 0xc0
 8006302:	01d2      	lsls	r2, r2, #7
 8006304:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006306:	0021      	movs	r1, r4
 8006308:	187b      	adds	r3, r7, r1
 800630a:	2212      	movs	r2, #18
 800630c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630e:	187b      	adds	r3, r7, r1
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006314:	187b      	adds	r3, r7, r1
 8006316:	2200      	movs	r2, #0
 8006318:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800631a:	187b      	adds	r3, r7, r1
 800631c:	2206      	movs	r2, #6
 800631e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006320:	187b      	adds	r3, r7, r1
 8006322:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <HAL_I2C_MspInit+0x94>)
 8006324:	0019      	movs	r1, r3
 8006326:	0010      	movs	r0, r2
 8006328:	f002 f91c 	bl	8008564 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800632c:	4b09      	ldr	r3, [pc, #36]	@ (8006354 <HAL_I2C_MspInit+0x90>)
 800632e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006330:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <HAL_I2C_MspInit+0x90>)
 8006332:	2180      	movs	r1, #128	@ 0x80
 8006334:	03c9      	lsls	r1, r1, #15
 8006336:	430a      	orrs	r2, r1
 8006338:	63da      	str	r2, [r3, #60]	@ 0x3c
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_I2C_MspInit+0x90>)
 800633c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800633e:	2380      	movs	r3, #128	@ 0x80
 8006340:	03db      	lsls	r3, r3, #15
 8006342:	4013      	ands	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006348:	46c0      	nop			@ (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	b00b      	add	sp, #44	@ 0x2c
 800634e:	bd90      	pop	{r4, r7, pc}
 8006350:	40005800 	.word	0x40005800
 8006354:	40021000 	.word	0x40021000
 8006358:	50000400 	.word	0x50000400

0800635c <DATA_RATE_TO_TIME>:
	}

	return range_value;
}

float DATA_RATE_TO_TIME(data_rate_t data_rate) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	0002      	movs	r2, r0
 8006364:	1dfb      	adds	r3, r7, #7
 8006366:	701a      	strb	r2, [r3, #0]
	float integral_factor = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

	switch(data_rate) {
 800636c:	1dfb      	adds	r3, r7, #7
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b03      	cmp	r3, #3
 8006372:	d008      	beq.n	8006386 <DATA_RATE_TO_TIME+0x2a>
 8006374:	dc14      	bgt.n	80063a0 <DATA_RATE_TO_TIME+0x44>
 8006376:	2b02      	cmp	r3, #2
 8006378:	d00f      	beq.n	800639a <DATA_RATE_TO_TIME+0x3e>
 800637a:	dc11      	bgt.n	80063a0 <DATA_RATE_TO_TIME+0x44>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <DATA_RATE_TO_TIME+0x38>
 8006380:	2b01      	cmp	r3, #1
 8006382:	d004      	beq.n	800638e <DATA_RATE_TO_TIME+0x32>
 8006384:	e00c      	b.n	80063a0 <DATA_RATE_TO_TIME+0x44>
	case DATA_RATE_1000:
		integral_factor = 1;
 8006386:	23fe      	movs	r3, #254	@ 0xfe
 8006388:	059b      	lsls	r3, r3, #22
 800638a:	60fb      	str	r3, [r7, #12]
		break;
 800638c:	e008      	b.n	80063a0 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_100:
		integral_factor = 10;
 800638e:	4b07      	ldr	r3, [pc, #28]	@ (80063ac <DATA_RATE_TO_TIME+0x50>)
 8006390:	60fb      	str	r3, [r7, #12]
		break;
 8006392:	e005      	b.n	80063a0 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_50:
		integral_factor = 20;
 8006394:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <DATA_RATE_TO_TIME+0x54>)
 8006396:	60fb      	str	r3, [r7, #12]
		break;
 8006398:	e002      	b.n	80063a0 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_400:
		integral_factor = 2.5;
 800639a:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <DATA_RATE_TO_TIME+0x58>)
 800639c:	60fb      	str	r3, [r7, #12]
		break;
 800639e:	46c0      	nop			@ (mov r8, r8)
	}

	return integral_factor;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	1c18      	adds	r0, r3, #0
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b004      	add	sp, #16
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	41200000 	.word	0x41200000
 80063b0:	41a00000 	.word	0x41a00000
 80063b4:	40200000 	.word	0x40200000

080063b8 <_Z11chip_selectP11lis331dlh_t>:

void chip_select(lis331dlh_t * config) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_RESET);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6898      	ldr	r0, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	899b      	ldrh	r3, [r3, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	0019      	movs	r1, r3
 80063cc:	f002 fa4b 	bl	8008866 <HAL_GPIO_WritePin>
}
 80063d0:	46c0      	nop			@ (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_Z13chip_deselectP11lis331dlh_t>:


void chip_deselect(lis331dlh_t * config) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_SET);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6898      	ldr	r0, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	899b      	ldrh	r3, [r3, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	0019      	movs	r1, r3
 80063ec:	f002 fa3b 	bl	8008866 <HAL_GPIO_WritePin>
}
 80063f0:	46c0      	nop			@ (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b002      	add	sp, #8
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <_Z13read_registerP11lis331dlh_thPhh>:


void read_register(
	lis331dlh_t * config, uint8_t address,
	uint8_t * for_receive, uint8_t receive_length = 1
) {
 80063f8:	b5b0      	push	{r4, r5, r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	0008      	movs	r0, r1
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	0019      	movs	r1, r3
 8006406:	240b      	movs	r4, #11
 8006408:	193b      	adds	r3, r7, r4
 800640a:	1c02      	adds	r2, r0, #0
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	250a      	movs	r5, #10
 8006410:	197b      	adds	r3, r7, r5
 8006412:	1c0a      	adds	r2, r1, #0
 8006414:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d020      	beq.n	8006460 <_Z13read_registerP11lis331dlh_thPhh+0x68>
		chip_select(config);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0018      	movs	r0, r3
 8006422:	f7ff ffc9 	bl	80063b8 <_Z11chip_selectP11lis331dlh_t>

		address |= 0xC0;
 8006426:	193b      	adds	r3, r7, r4
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2240      	movs	r2, #64	@ 0x40
 800642c:	4252      	negs	r2, r2
 800642e:	4313      	orrs	r3, r2
 8006430:	b2da      	uxtb	r2, r3
 8006432:	193b      	adds	r3, r7, r4
 8006434:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	1939      	adds	r1, r7, r4
 800643c:	2364      	movs	r3, #100	@ 0x64
 800643e:	2201      	movs	r2, #1
 8006440:	f004 fe28 	bl	800b094 <HAL_SPI_Transmit>
		HAL_SPI_Receive(config->spi, for_receive, receive_length, 100);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	197b      	adds	r3, r7, r5
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b29a      	uxth	r2, r3
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	2364      	movs	r3, #100	@ 0x64
 8006452:	f004 ff7f 	bl	800b354 <HAL_SPI_Receive>

		chip_deselect(config);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	0018      	movs	r0, r3
 800645a:	f7ff ffbd 	bl	80063d8 <_Z13chip_deselectP11lis331dlh_t>
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
//			HAL_Delay(1);
		}
	}
}
 800645e:	e031      	b.n	80064c4 <_Z13read_registerP11lis331dlh_thPhh+0xcc>
		for (uint8_t i = 0; i < receive_length; ++i) {
 8006460:	2317      	movs	r3, #23
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e024      	b.n	80064b4 <_Z13read_registerP11lis331dlh_thPhh+0xbc>
			uint8_t current = address++;
 800646a:	200b      	movs	r0, #11
 800646c:	183b      	adds	r3, r7, r0
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	b2d1      	uxtb	r1, r2
 8006474:	183a      	adds	r2, r7, r0
 8006476:	7011      	strb	r1, [r2, #0]
 8006478:	2116      	movs	r1, #22
 800647a:	187a      	adds	r2, r7, r1
 800647c:	7013      	strb	r3, [r2, #0]
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6858      	ldr	r0, [r3, #4]
 8006482:	187a      	adds	r2, r7, r1
 8006484:	2332      	movs	r3, #50	@ 0x32
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	2301      	movs	r3, #1
 800648a:	2132      	movs	r1, #50	@ 0x32
 800648c:	f002 faca 	bl	8008a24 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6858      	ldr	r0, [r3, #4]
 8006494:	2417      	movs	r4, #23
 8006496:	193b      	adds	r3, r7, r4
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	18d2      	adds	r2, r2, r3
 800649e:	2332      	movs	r3, #50	@ 0x32
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	2301      	movs	r3, #1
 80064a4:	2132      	movs	r1, #50	@ 0x32
 80064a6:	f002 fbe7 	bl	8008c78 <HAL_I2C_Master_Receive>
		for (uint8_t i = 0; i < receive_length; ++i) {
 80064aa:	193b      	adds	r3, r7, r4
 80064ac:	193a      	adds	r2, r7, r4
 80064ae:	7812      	ldrb	r2, [r2, #0]
 80064b0:	3201      	adds	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	2317      	movs	r3, #23
 80064b6:	18fa      	adds	r2, r7, r3
 80064b8:	230a      	movs	r3, #10
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	7812      	ldrb	r2, [r2, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3d2      	bcc.n	800646a <_Z13read_registerP11lis331dlh_thPhh+0x72>
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b006      	add	sp, #24
 80064ca:	bdb0      	pop	{r4, r5, r7, pc}

080064cc <_Z14write_registerP11lis331dlh_thh>:


void write_register(lis331dlh_t * config, uint8_t address, uint8_t value) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	0008      	movs	r0, r1
 80064d6:	0011      	movs	r1, r2
 80064d8:	1cfb      	adds	r3, r7, #3
 80064da:	1c02      	adds	r2, r0, #0
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	1cbb      	adds	r3, r7, #2
 80064e0:	1c0a      	adds	r2, r1, #0
 80064e2:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d016      	beq.n	800651a <_Z14write_registerP11lis331dlh_thh+0x4e>
		chip_select(config);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f7ff ff62 	bl	80063b8 <_Z11chip_selectP11lis331dlh_t>

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	1cf9      	adds	r1, r7, #3
 80064fa:	2364      	movs	r3, #100	@ 0x64
 80064fc:	2201      	movs	r2, #1
 80064fe:	f004 fdc9 	bl	800b094 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(config->spi, &value, 1, 10);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	1cb9      	adds	r1, r7, #2
 8006508:	230a      	movs	r3, #10
 800650a:	2201      	movs	r2, #1
 800650c:	f004 fdc2 	bl	800b094 <HAL_SPI_Transmit>

		chip_deselect(config);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0018      	movs	r0, r3
 8006514:	f7ff ff60 	bl	80063d8 <_Z13chip_deselectP11lis331dlh_t>
	}
	else {
		uint8_t buffer[] = { address, value };
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
	}
}
 8006518:	e011      	b.n	800653e <_Z14write_registerP11lis331dlh_thh+0x72>
		uint8_t buffer[] = { address, value };
 800651a:	1cfb      	adds	r3, r7, #3
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	210c      	movs	r1, #12
 8006520:	187b      	adds	r3, r7, r1
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	1cbb      	adds	r3, r7, #2
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	187b      	adds	r3, r7, r1
 800652a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6858      	ldr	r0, [r3, #4]
 8006530:	187a      	adds	r2, r7, r1
 8006532:	2364      	movs	r3, #100	@ 0x64
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2302      	movs	r3, #2
 8006538:	2132      	movs	r1, #50	@ 0x32
 800653a:	f002 fa73 	bl	8008a24 <HAL_I2C_Master_Transmit>
}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	46bd      	mov	sp, r7
 8006542:	b004      	add	sp, #16
 8006544:	bd80      	pop	{r7, pc}

08006546 <_Z24lis331dlh_check_presenceP11lis331dlh_t>:

int lis331dlh_check_presence(lis331dlh_t * config) {
 8006546:	b590      	push	{r4, r7, lr}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]

	uint8_t lis331_who_am_i_contents;

	read_register(config, WHO_AM_I, &lis331_who_am_i_contents);
 800654e:	240f      	movs	r4, #15
 8006550:	193a      	adds	r2, r7, r4
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	2301      	movs	r3, #1
 8006556:	210f      	movs	r1, #15
 8006558:	f7ff ff4e 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>

	return(lis331_who_am_i_contents != WHO_AM_I_VALUE);
 800655c:	193b      	adds	r3, r7, r4
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	3b32      	subs	r3, #50	@ 0x32
 8006562:	1e5a      	subs	r2, r3, #1
 8006564:	4193      	sbcs	r3, r2
 8006566:	b2db      	uxtb	r3, r3
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b005      	add	sp, #20
 800656e:	bd90      	pop	{r4, r7, pc}

08006570 <_Z14lis331dlh_initP11lis331dlh_t>:

int lis331dlh_init(lis331dlh_t * config) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

	if(lis331dlh_check_presence(config)) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff ffe3 	bl	8006546 <_Z24lis331dlh_check_presenceP11lis331dlh_t>
 8006580:	0003      	movs	r3, r0
 8006582:	1e5a      	subs	r2, r3, #1
 8006584:	4193      	sbcs	r3, r2
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <_Z14lis331dlh_initP11lis331dlh_t+0x20>
		return 1;
 800658c:	2301      	movs	r3, #1
 800658e:	e04a      	b.n	8006626 <_Z14lis331dlh_initP11lis331dlh_t+0xb6>
	}

	config->range_factor = DATA_RATE_TO_TIME(config->data_rate);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7b9b      	ldrb	r3, [r3, #14]
 8006594:	0018      	movs	r0, r3
 8006596:	f7ff fee1 	bl	800635c <DATA_RATE_TO_TIME>
 800659a:	1c02      	adds	r2, r0, #0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	611a      	str	r2, [r3, #16]

	lis331dlh_update_config(config);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	0018      	movs	r0, r3
 80065a4:	f000 f989 	bl	80068ba <lis331dlh_update_config>

//	config->control_registers[0] &= !(0b11 << 3);
//	config->control_registers[0] |= 0x27 | (config->data_rate << 3);

	config->control_registers[0] = 0x27 | (config->data_rate << 3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7b9b      	ldrb	r3, [r3, #14]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	2227      	movs	r2, #39	@ 0x27
 80065b2:	4313      	orrs	r3, r2
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	759a      	strb	r2, [r3, #22]

//	config->control_registers[1] &= !(0b10011);
//	config->control_registers[1] |= (0 << 4) | 0b00;

	config->control_registers[1] = 0;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	75da      	strb	r2, [r3, #23]

//	config->control_registers[3] &= !(0b11 << 5);
//	config->control_registers[3] |= (config->range << 4) | (1 << 7);

	config->control_registers[3] = (config->range << 4) | (1 << 7);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7bdb      	ldrb	r3, [r3, #15]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	2280      	movs	r2, #128	@ 0x80
 80065cc:	4252      	negs	r2, r2
 80065ce:	4313      	orrs	r3, r2
 80065d0:	b25b      	sxtb	r3, r3
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	765a      	strb	r2, [r3, #25]

	write_register(config, CTRL_REG1, config->control_registers[0]);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7d9a      	ldrb	r2, [r3, #22]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2120      	movs	r1, #32
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7ff ff73 	bl	80064cc <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG2, config->control_registers[1]);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7dda      	ldrb	r2, [r3, #23]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2121      	movs	r1, #33	@ 0x21
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7ff ff6c 	bl	80064cc <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG3, config->control_registers[2]);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	7e1a      	ldrb	r2, [r3, #24]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2122      	movs	r1, #34	@ 0x22
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff ff65 	bl	80064cc <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG4, config->control_registers[3]);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	7e5a      	ldrb	r2, [r3, #25]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2123      	movs	r1, #35	@ 0x23
 800660a:	0018      	movs	r0, r3
 800660c:	f7ff ff5e 	bl	80064cc <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG5, config->control_registers[4]);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7e9a      	ldrb	r2, [r3, #26]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2124      	movs	r1, #36	@ 0x24
 8006618:	0018      	movs	r0, r3
 800661a:	f7ff ff57 	bl	80064cc <_Z14write_registerP11lis331dlh_thh>

	HAL_Delay(10);
 800661e:	200a      	movs	r0, #10
 8006620:	f001 fc1c 	bl	8007e5c <HAL_Delay>

	return 0;
 8006624:	2300      	movs	r3, #0
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b002      	add	sp, #8
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <lis331dlh_init_spi>:

int lis331dlh_init_spi(
		lis331dlh_t * config,  SPI_HandleTypeDef * spi,
		GPIO_TypeDef * port, uint16_t pin
) {
 8006630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	001a      	movs	r2, r3
 800663e:	1cbb      	adds	r3, r7, #2
 8006640:	801a      	strh	r2, [r3, #0]
	config->spi = spi;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	601a      	str	r2, [r3, #0]
	config->chip_select_port = port;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
	config->chip_select_pin = pin;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1cba      	adds	r2, r7, #2
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	819a      	strh	r2, [r3, #12]



	if(lis331dlh_init(config)) {
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	0018      	movs	r0, r3
 800665a:	f7ff ff89 	bl	8006570 <_Z14lis331dlh_initP11lis331dlh_t>
 800665e:	0003      	movs	r3, r0
 8006660:	1e5a      	subs	r2, r3, #1
 8006662:	4193      	sbcs	r3, r2
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <lis331dlh_init_spi+0x3e>
		return 1;
 800666a:	2301      	movs	r3, #1
 800666c:	e06b      	b.n	8006746 <lis331dlh_init_spi+0x116>
	}

	int16_t x,y,z;

	lis331dlh_update_accelaration_local(config, &x, &y, &z);
 800666e:	2512      	movs	r5, #18
 8006670:	197b      	adds	r3, r7, r5
 8006672:	2614      	movs	r6, #20
 8006674:	19ba      	adds	r2, r7, r6
 8006676:	2416      	movs	r4, #22
 8006678:	1939      	adds	r1, r7, r4
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f8d6 	bl	800682c <lis331dlh_update_accelaration_local>

	x = abs(x);
 8006680:	0021      	movs	r1, r4
 8006682:	187b      	adds	r3, r7, r1
 8006684:	2200      	movs	r2, #0
 8006686:	5e9b      	ldrsh	r3, [r3, r2]
 8006688:	17da      	asrs	r2, r3, #31
 800668a:	189b      	adds	r3, r3, r2
 800668c:	4053      	eors	r3, r2
 800668e:	b29b      	uxth	r3, r3
 8006690:	b21a      	sxth	r2, r3
 8006692:	187b      	adds	r3, r7, r1
 8006694:	801a      	strh	r2, [r3, #0]

	y = abs(y);
 8006696:	0030      	movs	r0, r6
 8006698:	183b      	adds	r3, r7, r0
 800669a:	2200      	movs	r2, #0
 800669c:	5e9b      	ldrsh	r3, [r3, r2]
 800669e:	17da      	asrs	r2, r3, #31
 80066a0:	189b      	adds	r3, r3, r2
 80066a2:	4053      	eors	r3, r2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	b21a      	sxth	r2, r3
 80066a8:	183b      	adds	r3, r7, r0
 80066aa:	801a      	strh	r2, [r3, #0]

	z = abs(z);
 80066ac:	197b      	adds	r3, r7, r5
 80066ae:	2200      	movs	r2, #0
 80066b0:	5e9b      	ldrsh	r3, [r3, r2]
 80066b2:	17da      	asrs	r2, r3, #31
 80066b4:	189b      	adds	r3, r3, r2
 80066b6:	4053      	eors	r3, r2
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	b21a      	sxth	r2, r3
 80066bc:	197b      	adds	r3, r7, r5
 80066be:	801a      	strh	r2, [r3, #0]

	config->axis_select_x_z =  (x >= y && x >= z) ? AXIS_X :
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	2200      	movs	r2, #0
 80066c4:	5e9a      	ldrsh	r2, [r3, r2]
 80066c6:	183b      	adds	r3, r7, r0
 80066c8:	2000      	movs	r0, #0
 80066ca:	5e1b      	ldrsh	r3, [r3, r0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	db07      	blt.n	80066e0 <lis331dlh_init_spi+0xb0>
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	2200      	movs	r2, #0
 80066d4:	5e9a      	ldrsh	r2, [r3, r2]
 80066d6:	197b      	adds	r3, r7, r5
 80066d8:	2100      	movs	r1, #0
 80066da:	5e5b      	ldrsh	r3, [r3, r1]
 80066dc:	429a      	cmp	r2, r3
 80066de:	da16      	bge.n	800670e <lis331dlh_init_spi+0xde>
							  ((y >= x && y >= z) ? AXIS_Y :
 80066e0:	2114      	movs	r1, #20
 80066e2:	187b      	adds	r3, r7, r1
 80066e4:	2200      	movs	r2, #0
 80066e6:	5e9a      	ldrsh	r2, [r3, r2]
 80066e8:	2316      	movs	r3, #22
 80066ea:	18fb      	adds	r3, r7, r3
 80066ec:	2000      	movs	r0, #0
 80066ee:	5e1b      	ldrsh	r3, [r3, r0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	db0a      	blt.n	800670a <lis331dlh_init_spi+0xda>
 80066f4:	187b      	adds	r3, r7, r1
 80066f6:	2200      	movs	r2, #0
 80066f8:	5e9a      	ldrsh	r2, [r3, r2]
 80066fa:	2312      	movs	r3, #18
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	2100      	movs	r1, #0
 8006700:	5e5b      	ldrsh	r3, [r3, r1]
 8006702:	429a      	cmp	r2, r3
 8006704:	db01      	blt.n	800670a <lis331dlh_init_spi+0xda>
 8006706:	2302      	movs	r3, #2
	config->axis_select_x_z =  (x >= y && x >= z) ? AXIS_X :
 8006708:	e002      	b.n	8006710 <lis331dlh_init_spi+0xe0>
							  ((y >= x && y >= z) ? AXIS_Y :
 800670a:	2300      	movs	r3, #0
	config->axis_select_x_z =  (x >= y && x >= z) ? AXIS_X :
 800670c:	e000      	b.n	8006710 <lis331dlh_init_spi+0xe0>
 800670e:	2301      	movs	r3, #1
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	7513      	strb	r3, [r2, #20]
							  AXIS_Z);

	if(config->axis_select_x_z == AXIS_X) {
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	7d1b      	ldrb	r3, [r3, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d103      	bne.n	8006724 <lis331dlh_init_spi+0xf4>
		debug("AXIS SELECTED: X\r\n");
 800671c:	4b0c      	ldr	r3, [pc, #48]	@ (8006750 <lis331dlh_init_spi+0x120>)
 800671e:	0018      	movs	r0, r3
 8006720:	f7ff f9fc 	bl	8005b1c <debug>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	7d1b      	ldrb	r3, [r3, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d103      	bne.n	8006734 <lis331dlh_init_spi+0x104>
		debug("AXIS SELECTED: Z\r\n");
 800672c:	4b09      	ldr	r3, [pc, #36]	@ (8006754 <lis331dlh_init_spi+0x124>)
 800672e:	0018      	movs	r0, r3
 8006730:	f7ff f9f4 	bl	8005b1c <debug>
	}

	if(config->axis_select_x_z == AXIS_Y) {
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	7d1b      	ldrb	r3, [r3, #20]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d103      	bne.n	8006744 <lis331dlh_init_spi+0x114>
		debug("AXIS SELECTED: Y\r\n");
 800673c:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <lis331dlh_init_spi+0x128>)
 800673e:	0018      	movs	r0, r3
 8006740:	f7ff f9ec 	bl	8005b1c <debug>
	}

	return 0;
 8006744:	2300      	movs	r3, #0
}
 8006746:	0018      	movs	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	b007      	add	sp, #28
 800674c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	08016d20 	.word	0x08016d20
 8006754:	08016d34 	.word	0x08016d34
 8006758:	08016d48 	.word	0x08016d48

0800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>:

	return 0;
}


inline int16_t get_scaled_accelaration(uint8_t low_byte, uint8_t high_byte, acceleration_range_t range) {
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	0004      	movs	r4, r0
 8006764:	0008      	movs	r0, r1
 8006766:	0011      	movs	r1, r2
 8006768:	1dfb      	adds	r3, r7, #7
 800676a:	1c22      	adds	r2, r4, #0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	1dbb      	adds	r3, r7, #6
 8006770:	1c02      	adds	r2, r0, #0
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	1d7b      	adds	r3, r7, #5
 8006776:	1c0a      	adds	r2, r1, #0
 8006778:	701a      	strb	r2, [r3, #0]
	return static_cast<int16_t>(high_byte << 8 | low_byte); 		// 12 бит число представлено в виде
 800677a:	1dbb      	adds	r3, r7, #6
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	b21a      	sxth	r2, r3
 8006782:	1dfb      	adds	r3, r7, #7
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b21b      	sxth	r3, r3
 8006788:	4313      	orrs	r3, r2
 800678a:	b21b      	sxth	r3, r3
																	// 16 бит и младшие 4 бита - нулевые
}
 800678c:	0018      	movs	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	b003      	add	sp, #12
 8006792:	bd90      	pop	{r4, r7, pc}

08006794 <lis331dlh_update_accelaration>:

int lis331dlh_update_accelaration(lis331dlh_t * config) {
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	read_register(config, OUT_X_L, &config->out_x_low, 6);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	331d      	adds	r3, #29
 80067a0:	001a      	movs	r2, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	2306      	movs	r3, #6
 80067a6:	2128      	movs	r1, #40	@ 0x28
 80067a8:	f7ff fe26 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>

	config->accelarations = {
		HAL_GetTick(),
 80067ac:	f001 fb4c 	bl	8007e48 <HAL_GetTick>
 80067b0:	0004      	movs	r4, r0
		get_scaled_accelaration(config->out_x_low, config->out_x_high, config->range) / 16,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7f58      	ldrb	r0, [r3, #29]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	7f99      	ldrb	r1, [r3, #30]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7bdb      	ldrb	r3, [r3, #15]
 80067be:	001a      	movs	r2, r3
 80067c0:	f7ff ffcc 	bl	800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 80067c4:	1e03      	subs	r3, r0, #0
 80067c6:	da00      	bge.n	80067ca <lis331dlh_update_accelaration+0x36>
 80067c8:	330f      	adds	r3, #15
 80067ca:	111b      	asrs	r3, r3, #4
 80067cc:	b21b      	sxth	r3, r3
 80067ce:	001e      	movs	r6, r3
		get_scaled_accelaration(config->out_y_low, config->out_y_high, config->range) / 16,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	7fd8      	ldrb	r0, [r3, #31]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	5c99      	ldrb	r1, [r3, r2]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7bdb      	ldrb	r3, [r3, #15]
 80067de:	001a      	movs	r2, r3
 80067e0:	f7ff ffbc 	bl	800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 80067e4:	1e03      	subs	r3, r0, #0
 80067e6:	da00      	bge.n	80067ea <lis331dlh_update_accelaration+0x56>
 80067e8:	330f      	adds	r3, #15
 80067ea:	111b      	asrs	r3, r3, #4
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	001d      	movs	r5, r3
		get_scaled_accelaration(config->out_z_low, config->out_z_high, config->range) / 16,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2221      	movs	r2, #33	@ 0x21
 80067f4:	5c98      	ldrb	r0, [r3, r2]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2222      	movs	r2, #34	@ 0x22
 80067fa:	5c99      	ldrb	r1, [r3, r2]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7bdb      	ldrb	r3, [r3, #15]
 8006800:	001a      	movs	r2, r3
 8006802:	f7ff ffab 	bl	800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006806:	1e03      	subs	r3, r0, #0
 8006808:	da00      	bge.n	800680c <lis331dlh_update_accelaration+0x78>
 800680a:	330f      	adds	r3, #15
 800680c:	111b      	asrs	r3, r3, #4
 800680e:	b21b      	sxth	r3, r3
 8006810:	001a      	movs	r2, r3
	config->accelarations = {
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	62dc      	str	r4, [r3, #44]	@ 0x2c
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	631e      	str	r6, [r3, #48]	@ 0x30
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	635d      	str	r5, [r3, #52]	@ 0x34
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	639a      	str	r2, [r3, #56]	@ 0x38
	};

	return 0;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b003      	add	sp, #12
 800682a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800682c <lis331dlh_update_accelaration_local>:


int lis331dlh_update_accelaration_local(lis331dlh_t * config, int16_t *x, int16_t *y, int16_t *z) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
	read_register(config, OUT_X_L, &config->out_x_low, 6);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	331d      	adds	r3, #29
 800683e:	001a      	movs	r2, r3
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	2306      	movs	r3, #6
 8006844:	2128      	movs	r1, #40	@ 0x28
 8006846:	f7ff fdd7 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>

	*x = get_scaled_accelaration(config->out_x_low, config->out_x_high, config->range) / 16;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	7f58      	ldrb	r0, [r3, #29]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	7f99      	ldrb	r1, [r3, #30]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	7bdb      	ldrb	r3, [r3, #15]
 8006856:	001a      	movs	r2, r3
 8006858:	f7ff ff80 	bl	800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 800685c:	1e03      	subs	r3, r0, #0
 800685e:	da00      	bge.n	8006862 <lis331dlh_update_accelaration_local+0x36>
 8006860:	330f      	adds	r3, #15
 8006862:	111b      	asrs	r3, r3, #4
 8006864:	b21a      	sxth	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	801a      	strh	r2, [r3, #0]
	*y = get_scaled_accelaration(config->out_y_low, config->out_y_high, config->range) / 16;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	7fd8      	ldrb	r0, [r3, #31]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	5c99      	ldrb	r1, [r3, r2]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	7bdb      	ldrb	r3, [r3, #15]
 8006878:	001a      	movs	r2, r3
 800687a:	f7ff ff6f 	bl	800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 800687e:	1e03      	subs	r3, r0, #0
 8006880:	da00      	bge.n	8006884 <lis331dlh_update_accelaration_local+0x58>
 8006882:	330f      	adds	r3, #15
 8006884:	111b      	asrs	r3, r3, #4
 8006886:	b21a      	sxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	801a      	strh	r2, [r3, #0]
	*z = get_scaled_accelaration(config->out_z_low, config->out_z_high, config->range) / 16;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2221      	movs	r2, #33	@ 0x21
 8006890:	5c98      	ldrb	r0, [r3, r2]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2222      	movs	r2, #34	@ 0x22
 8006896:	5c99      	ldrb	r1, [r3, r2]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	7bdb      	ldrb	r3, [r3, #15]
 800689c:	001a      	movs	r2, r3
 800689e:	f7ff ff5d 	bl	800675c <_Z23get_scaled_accelarationhh20acceleration_range_t>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	da00      	bge.n	80068a8 <lis331dlh_update_accelaration_local+0x7c>
 80068a6:	330f      	adds	r3, #15
 80068a8:	111b      	asrs	r3, r3, #4
 80068aa:	b21a      	sxth	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	801a      	strh	r2, [r3, #0]

	return 0;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b004      	add	sp, #16
 80068b8:	bd80      	pop	{r7, pc}

080068ba <lis331dlh_update_config>:


void lis331dlh_update_config(lis331dlh_t * config) {
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
	read_register(config, WHO_AM_I, &config->device_id);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3315      	adds	r3, #21
 80068c6:	001a      	movs	r2, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	2301      	movs	r3, #1
 80068cc:	210f      	movs	r1, #15
 80068ce:	f7ff fd93 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, STATUS_REG, &config->status_register);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	331c      	adds	r3, #28
 80068d6:	001a      	movs	r2, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	2301      	movs	r3, #1
 80068dc:	2127      	movs	r1, #39	@ 0x27
 80068de:	f7ff fd8b 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>

	read_register(config, CTRL_REG1, (uint8_t *)&config->control_registers,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3316      	adds	r3, #22
 80068e6:	001a      	movs	r2, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	2305      	movs	r3, #5
 80068ec:	2120      	movs	r1, #32
 80068ee:	f7ff fd83 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>
			sizeof(config->control_registers));

	read_register(config, INT1_CFG, (uint8_t *)&config->interrupt_1, sizeof(interrupt_register_t));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3323      	adds	r3, #35	@ 0x23
 80068f6:	001a      	movs	r2, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	2304      	movs	r3, #4
 80068fc:	2130      	movs	r1, #48	@ 0x30
 80068fe:	f7ff fd7b 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, INT2_CFG, (uint8_t *)&config->interrupt_2, sizeof(interrupt_register_t));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3327      	adds	r3, #39	@ 0x27
 8006906:	001a      	movs	r2, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	2304      	movs	r3, #4
 800690c:	2134      	movs	r1, #52	@ 0x34
 800690e:	f7ff fd73 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>
}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}

0800691a <lis331dlh_read_status>:


uint8_t lis331dlh_read_status(lis331dlh_t * config) {
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
	read_register(config, STATUS_REG, &config->status_register);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	331c      	adds	r3, #28
 8006926:	001a      	movs	r2, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	2301      	movs	r3, #1
 800692c:	2127      	movs	r1, #39	@ 0x27
 800692e:	f7ff fd63 	bl	80063f8 <_Z13read_registerP11lis331dlh_thPhh>
	return config->status_register;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	7f1b      	ldrb	r3, [r3, #28]
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b002      	add	sp, #8
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <_Z15SENSOR_IO_Writehhh>:

#include "lps22.h"

I2C_HandleTypeDef * i2c;

void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value){
 8006940:	b590      	push	{r4, r7, lr}
 8006942:	b087      	sub	sp, #28
 8006944:	af02      	add	r7, sp, #8
 8006946:	0004      	movs	r4, r0
 8006948:	0008      	movs	r0, r1
 800694a:	0011      	movs	r1, r2
 800694c:	1dfb      	adds	r3, r7, #7
 800694e:	1c22      	adds	r2, r4, #0
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	1dbb      	adds	r3, r7, #6
 8006954:	1c02      	adds	r2, r0, #0
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	1d7b      	adds	r3, r7, #5
 800695a:	1c0a      	adds	r2, r1, #0
 800695c:	701a      	strb	r2, [r3, #0]

	uint8_t data[] = {Reg, Value};
 800695e:	240c      	movs	r4, #12
 8006960:	193b      	adds	r3, r7, r4
 8006962:	1dba      	adds	r2, r7, #6
 8006964:	7812      	ldrb	r2, [r2, #0]
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	193b      	adds	r3, r7, r4
 800696a:	1d7a      	adds	r2, r7, #5
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(SENSORS_I2C, Addr, data, 2, 100);
 8006970:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <_Z15SENSOR_IO_Writehhh+0x50>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	1dfb      	adds	r3, r7, #7
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b299      	uxth	r1, r3
 800697a:	193a      	adds	r2, r7, r4
 800697c:	2364      	movs	r3, #100	@ 0x64
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2302      	movs	r3, #2
 8006982:	f002 f84f 	bl	8008a24 <HAL_I2C_Master_Transmit>
}
 8006986:	46c0      	nop			@ (mov r8, r8)
 8006988:	46bd      	mov	sp, r7
 800698a:	b005      	add	sp, #20
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	46c0      	nop			@ (mov r8, r8)
 8006990:	20000064 	.word	0x20000064

08006994 <_Z14SENSOR_IO_ReadhhPh>:

uint8_t  SENSOR_IO_Read(uint8_t Addr, uint8_t Reg, uint8_t* state = NULL){
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	b089      	sub	sp, #36	@ 0x24
 8006998:	af04      	add	r7, sp, #16
 800699a:	603a      	str	r2, [r7, #0]
 800699c:	1dfb      	adds	r3, r7, #7
 800699e:	1c02      	adds	r2, r0, #0
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	1dbb      	adds	r3, r7, #6
 80069a4:	1c0a      	adds	r2, r1, #0
 80069a6:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 80069a8:	250e      	movs	r5, #14
 80069aa:	197b      	adds	r3, r7, r5
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
	uint8_t st = HAL_I2C_Mem_Read(SENSORS_I2C, Addr, Reg, 1, &data, 1, 100);
 80069b0:	4b13      	ldr	r3, [pc, #76]	@ (8006a00 <_Z14SENSOR_IO_ReadhhPh+0x6c>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	1dfb      	adds	r3, r7, #7
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	b299      	uxth	r1, r3
 80069ba:	1dbb      	adds	r3, r7, #6
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	260f      	movs	r6, #15
 80069c2:	19bc      	adds	r4, r7, r6
 80069c4:	2364      	movs	r3, #100	@ 0x64
 80069c6:	9302      	str	r3, [sp, #8]
 80069c8:	2301      	movs	r3, #1
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	197b      	adds	r3, r7, r5
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	2301      	movs	r3, #1
 80069d2:	f002 fb87 	bl	80090e4 <HAL_I2C_Mem_Read>
 80069d6:	0003      	movs	r3, r0
 80069d8:	7023      	strb	r3, [r4, #0]

	if(state != NULL) *state = (st == HAL_OK);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <_Z14SENSOR_IO_ReadhhPh+0x5c>
 80069e0:	19bb      	adds	r3, r7, r6
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	425a      	negs	r2, r3
 80069e6:	4153      	adcs	r3, r2
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	001a      	movs	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	701a      	strb	r2, [r3, #0]

	return data;
 80069f0:	230e      	movs	r3, #14
 80069f2:	18fb      	adds	r3, r7, r3
 80069f4:	781b      	ldrb	r3, [r3, #0]
}
 80069f6:	0018      	movs	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b005      	add	sp, #20
 80069fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	20000064 	.word	0x20000064

08006a04 <lps22hb_init>:

bool lps22hb_init(I2C_HandleTypeDef * i2c_handler){
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

	i2c = i2c_handler;
 8006a0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ae0 <lps22hb_init+0xdc>)
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(i2c, LPS_LOWER_ADDRESS, 3, 1000) != HAL_OK) return false;
 8006a12:	4b33      	ldr	r3, [pc, #204]	@ (8006ae0 <lps22hb_init+0xdc>)
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	23fa      	movs	r3, #250	@ 0xfa
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	21b8      	movs	r1, #184	@ 0xb8
 8006a1e:	f002 fc95 	bl	800934c <HAL_I2C_IsDeviceReady>
 8006a22:	0003      	movs	r3, r0
 8006a24:	1e5a      	subs	r2, r3, #1
 8006a26:	4193      	sbcs	r3, r2
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <lps22hb_init+0x2e>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e052      	b.n	8006ad8 <lps22hb_init+0xd4>

	uint8_t tmp;

	/* Set Power mode */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_RES_CONF_REG);
 8006a32:	250f      	movs	r5, #15
 8006a34:	197c      	adds	r4, r7, r5
 8006a36:	2200      	movs	r2, #0
 8006a38:	211a      	movs	r1, #26
 8006a3a:	20b8      	movs	r0, #184	@ 0xb8
 8006a3c:	f7ff ffaa 	bl	8006994 <_Z14SENSOR_IO_ReadhhPh>
 8006a40:	0003      	movs	r3, r0
 8006a42:	7023      	strb	r3, [r4, #0]

	tmp &= ~LPS22HB_LCEN_MASK;
 8006a44:	0028      	movs	r0, r5
 8006a46:	183b      	adds	r3, r7, r0
 8006a48:	183a      	adds	r2, r7, r0
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	438a      	bics	r2, r1
 8006a50:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x01; /* Set low current mode */
 8006a52:	183b      	adds	r3, r7, r0
 8006a54:	183a      	adds	r2, r7, r0
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	2101      	movs	r1, #1
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	701a      	strb	r2, [r3, #0]

	/* Read CTRL_REG1 */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1);
 8006a5e:	0005      	movs	r5, r0
 8006a60:	183c      	adds	r4, r7, r0
 8006a62:	2200      	movs	r2, #0
 8006a64:	2110      	movs	r1, #16
 8006a66:	20b8      	movs	r0, #184	@ 0xb8
 8006a68:	f7ff ff94 	bl	8006994 <_Z14SENSOR_IO_ReadhhPh>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	7023      	strb	r3, [r4, #0]

	/* Set default ODR */
	tmp &= ~LPS22HB_ODR_MASK;
 8006a70:	0028      	movs	r0, r5
 8006a72:	183b      	adds	r3, r7, r0
 8006a74:	183a      	adds	r2, r7, r0
 8006a76:	7812      	ldrb	r2, [r2, #0]
 8006a78:	2170      	movs	r1, #112	@ 0x70
 8006a7a:	438a      	bics	r2, r1
 8006a7c:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x20; /* Set ODR to 10Hz */
 8006a7e:	183b      	adds	r3, r7, r0
 8006a80:	183a      	adds	r2, r7, r0
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	2120      	movs	r1, #32
 8006a86:	430a      	orrs	r2, r1
 8006a88:	701a      	strb	r2, [r3, #0]

	/* Enable BDU */
	tmp &= ~LPS22HB_BDU_MASK;
 8006a8a:	183b      	adds	r3, r7, r0
 8006a8c:	183a      	adds	r2, r7, r0
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	2102      	movs	r1, #2
 8006a92:	438a      	bics	r2, r1
 8006a94:	701a      	strb	r2, [r3, #0]
	tmp |= ((uint8_t)0x02);
 8006a96:	183b      	adds	r3, r7, r0
 8006a98:	183a      	adds	r2, r7, r0
 8006a9a:	7812      	ldrb	r2, [r2, #0]
 8006a9c:	2102      	movs	r1, #2
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	701a      	strb	r2, [r3, #0]

	/* Apply settings to CTRL_REG1 */
	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1, tmp);
 8006aa2:	0005      	movs	r5, r0
 8006aa4:	197b      	adds	r3, r7, r5
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	001a      	movs	r2, r3
 8006aaa:	2110      	movs	r1, #16
 8006aac:	20b8      	movs	r0, #184	@ 0xb8
 8006aae:	f7ff ff47 	bl	8006940 <_Z15SENSOR_IO_Writehhh>


	// включаем работу DATA_READY пина
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3);
 8006ab2:	197c      	adds	r4, r7, r5
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2112      	movs	r1, #18
 8006ab8:	20b8      	movs	r0, #184	@ 0xb8
 8006aba:	f7ff ff6b 	bl	8006994 <_Z14SENSOR_IO_ReadhhPh>
 8006abe:	0003      	movs	r3, r0
 8006ac0:	7023      	strb	r3, [r4, #0]

	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3, tmp | LPS22HB_DRDY_MASK);
 8006ac2:	197b      	adds	r3, r7, r5
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	001a      	movs	r2, r3
 8006ace:	2112      	movs	r1, #18
 8006ad0:	20b8      	movs	r0, #184	@ 0xb8
 8006ad2:	f7ff ff35 	bl	8006940 <_Z15SENSOR_IO_Writehhh>

	return true;
 8006ad6:	2301      	movs	r3, #1
}
 8006ad8:	0018      	movs	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b004      	add	sp, #16
 8006ade:	bdb0      	pop	{r4, r5, r7, pc}
 8006ae0:	20002514 	.word	0x20002514

08006ae4 <lps22hb_get_status>:


uint8_t lps22hb_get_status() {
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
	uint8_t status = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_STATUS_REG);
 8006aea:	1dfc      	adds	r4, r7, #7
 8006aec:	2200      	movs	r2, #0
 8006aee:	2127      	movs	r1, #39	@ 0x27
 8006af0:	20b8      	movs	r0, #184	@ 0xb8
 8006af2:	f7ff ff4f 	bl	8006994 <_Z14SENSOR_IO_ReadhhPh>
 8006af6:	0003      	movs	r3, r0
 8006af8:	7023      	strb	r3, [r4, #0]
	return status;
 8006afa:	1dfb      	adds	r3, r7, #7
 8006afc:	781b      	ldrb	r3, [r3, #0]
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b003      	add	sp, #12
 8006b04:	bd90      	pop	{r4, r7, pc}
	...

08006b08 <lps22hb_check_pressure_overrun>:

bool lps22hb_check_pressure_overrun(uint8_t status) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	0002      	movs	r2, r0
 8006b10:	1dfb      	adds	r3, r7, #7
 8006b12:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x10;
 8006b14:	1dfb      	adds	r3, r7, #7
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2210      	movs	r2, #16
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	200f      	movs	r0, #15
 8006b1e:	183b      	adds	r3, r7, r0
 8006b20:	1e51      	subs	r1, r2, #1
 8006b22:	418a      	sbcs	r2, r1
 8006b24:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 8006b26:	183b      	adds	r3, r7, r0
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <lps22hb_check_pressure_overrun+0x34>
		debug("Pressure data overrun! SR %02x\r\n", status);
 8006b2e:	1dfb      	adds	r3, r7, #7
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <lps22hb_check_pressure_overrun+0x44>)
 8006b34:	0011      	movs	r1, r2
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7fe fff0 	bl	8005b1c <debug>
	}

	return is_overrun;
 8006b3c:	230f      	movs	r3, #15
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	781b      	ldrb	r3, [r3, #0]
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b004      	add	sp, #16
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	08016e50 	.word	0x08016e50

08006b50 <lps22hb_check_temperature_overrun>:

bool lps22hb_check_temperature_overrun(uint8_t status) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	0002      	movs	r2, r0
 8006b58:	1dfb      	adds	r3, r7, #7
 8006b5a:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x20;
 8006b5c:	1dfb      	adds	r3, r7, #7
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2220      	movs	r2, #32
 8006b62:	401a      	ands	r2, r3
 8006b64:	200f      	movs	r0, #15
 8006b66:	183b      	adds	r3, r7, r0
 8006b68:	1e51      	subs	r1, r2, #1
 8006b6a:	418a      	sbcs	r2, r1
 8006b6c:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 8006b6e:	183b      	adds	r3, r7, r0
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d006      	beq.n	8006b84 <lps22hb_check_temperature_overrun+0x34>
		debug("Temperature data overrun! SR %02x\r\n", status);
 8006b76:	1dfb      	adds	r3, r7, #7
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <lps22hb_check_temperature_overrun+0x44>)
 8006b7c:	0011      	movs	r1, r2
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7fe ffcc 	bl	8005b1c <debug>
	}

	return is_overrun;
 8006b84:	230f      	movs	r3, #15
 8006b86:	18fb      	adds	r3, r7, r3
 8006b88:	781b      	ldrb	r3, [r3, #0]
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b004      	add	sp, #16
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	46c0      	nop			@ (mov r8, r8)
 8006b94:	08016e74 	.word	0x08016e74

08006b98 <lps22hb_check_pressure_data_available>:

bool lps22hb_check_pressure_data_available(uint8_t status) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	0002      	movs	r2, r0
 8006ba0:	1dfb      	adds	r3, r7, #7
 8006ba2:	701a      	strb	r2, [r3, #0]
	return status & 0x01;
 8006ba4:	1dfb      	adds	r3, r7, #7
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	1e5a      	subs	r2, r3, #1
 8006bae:	4193      	sbcs	r3, r2
 8006bb0:	b2db      	uxtb	r3, r3
}
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b002      	add	sp, #8
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <lps22hb_check_temperature_data_available>:

bool lps22hb_check_temperature_data_available(uint8_t status) {
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	0002      	movs	r2, r0
 8006bc2:	1dfb      	adds	r3, r7, #7
 8006bc4:	701a      	strb	r2, [r3, #0]
	return status & 0x02;
 8006bc6:	1dfb      	adds	r3, r7, #7
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	4013      	ands	r3, r2
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	4193      	sbcs	r3, r2
 8006bd2:	b2db      	uxtb	r3, r3
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <lps22hb_read_pressure>:
	  return ctrl;
}

int32_t raw_press = 0;

float lps22hb_read_pressure(){
 8006bdc:	b5b0      	push	{r4, r5, r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0

	uint8_t buffer[3];
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8006be2:	230f      	movs	r3, #15
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	e013      	b.n	8006c14 <lps22hb_read_pressure+0x38>
		buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_PRESS_OUT_XL_REG + i));
 8006bec:	250f      	movs	r5, #15
 8006bee:	197b      	adds	r3, r7, r5
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	3328      	adds	r3, #40	@ 0x28
 8006bf4:	b2d9      	uxtb	r1, r3
 8006bf6:	197b      	adds	r3, r7, r5
 8006bf8:	781c      	ldrb	r4, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	20b8      	movs	r0, #184	@ 0xb8
 8006bfe:	f7ff fec9 	bl	8006994 <_Z14SENSOR_IO_ReadhhPh>
 8006c02:	0003      	movs	r3, r0
 8006c04:	001a      	movs	r2, r3
 8006c06:	003b      	movs	r3, r7
 8006c08:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8006c0a:	197b      	adds	r3, r7, r5
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	197b      	adds	r3, r7, r5
 8006c10:	3201      	adds	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	230f      	movs	r3, #15
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d9e6      	bls.n	8006bec <lps22hb_read_pressure+0x10>
	}

	/* Build the raw data */
	uint32_t tmp = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	e00e      	b.n	8006c46 <lps22hb_read_pressure+0x6a>
		tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8006c28:	003a      	movs	r2, r7
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	18d3      	adds	r3, r2, r3
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	001a      	movs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	409a      	lsls	r2, r3
 8006c38:	0013      	movs	r3, r2
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3301      	adds	r3, #1
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	dded      	ble.n	8006c28 <lps22hb_read_pressure+0x4c>
	}

	/* convert the 2's complement 24 bit to 2's complement 32 bit */
	if(tmp & 0x00800000) {
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	2380      	movs	r3, #128	@ 0x80
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	4013      	ands	r3, r2
 8006c54:	d004      	beq.n	8006c60 <lps22hb_read_pressure+0x84>
		tmp |= 0xFF000000;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	22ff      	movs	r2, #255	@ 0xff
 8006c5a:	0612      	lsls	r2, r2, #24
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
	}

	raw_press = ((int32_t)tmp);
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca0 <lps22hb_read_pressure+0xc4>)
 8006c64:	601a      	str	r2, [r3, #0]
	raw_press = (raw_press * 100) / 4096;
 8006c66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca0 <lps22hb_read_pressure+0xc4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2264      	movs	r2, #100	@ 0x64
 8006c6c:	4353      	muls	r3, r2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da02      	bge.n	8006c78 <lps22hb_read_pressure+0x9c>
 8006c72:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca4 <lps22hb_read_pressure+0xc8>)
 8006c74:	4694      	mov	ip, r2
 8006c76:	4463      	add	r3, ip
 8006c78:	131b      	asrs	r3, r3, #12
 8006c7a:	001a      	movs	r2, r3
 8006c7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ca0 <lps22hb_read_pressure+0xc4>)
 8006c7e:	601a      	str	r2, [r3, #0]

	return (float)((float)raw_press / 100.0f);
 8006c80:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <lps22hb_read_pressure+0xc4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f7fa fc43 	bl	8001510 <__aeabi_i2f>
 8006c8a:	1c03      	adds	r3, r0, #0
 8006c8c:	4906      	ldr	r1, [pc, #24]	@ (8006ca8 <lps22hb_read_pressure+0xcc>)
 8006c8e:	1c18      	adds	r0, r3, #0
 8006c90:	f7f9 ff40 	bl	8000b14 <__aeabi_fdiv>
 8006c94:	1c03      	adds	r3, r0, #0
}
 8006c96:	1c18      	adds	r0, r3, #0
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b004      	add	sp, #16
 8006c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	20002518 	.word	0x20002518
 8006ca4:	00000fff 	.word	0x00000fff
 8006ca8:	42c80000 	.word	0x42c80000

08006cac <lps22hb_read_temperature>:

float lps22hb_read_temperature(){
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
	  int16_t raw_data;
	  uint8_t buffer[2];
	  uint16_t tmp;
	  uint8_t i;

	  for(i = 0; i < 2; i++)
 8006cb2:	1dfb      	adds	r3, r7, #7
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e012      	b.n	8006ce0 <lps22hb_read_temperature+0x34>
	  {
	    buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_TEMP_OUT_L_REG + i));
 8006cba:	1dfb      	adds	r3, r7, #7
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	332b      	adds	r3, #43	@ 0x2b
 8006cc0:	b2d9      	uxtb	r1, r3
 8006cc2:	1dfb      	adds	r3, r7, #7
 8006cc4:	781c      	ldrb	r4, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	20b8      	movs	r0, #184	@ 0xb8
 8006cca:	f7ff fe63 	bl	8006994 <_Z14SENSOR_IO_ReadhhPh>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	003b      	movs	r3, r7
 8006cd4:	551a      	strb	r2, [r3, r4]
	  for(i = 0; i < 2; i++)
 8006cd6:	1dfb      	adds	r3, r7, #7
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	1dfb      	adds	r3, r7, #7
 8006cdc:	3201      	adds	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	1dfb      	adds	r3, r7, #7
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d9e8      	bls.n	8006cba <lps22hb_read_temperature+0xe>
	  }

	  /* Build the raw tmp */
	  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8006ce8:	003b      	movs	r3, r7
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	003b      	movs	r3, r7
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	1852      	adds	r2, r2, r1
 8006cfa:	801a      	strh	r2, [r3, #0]

	  raw_data = (tmp * 10) / 100;
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	210a      	movs	r1, #10
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7f9 faa6 	bl	8000254 <__divsi3>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	1cbb      	adds	r3, r7, #2
 8006d0e:	801a      	strh	r2, [r3, #0]

	  return ((float)(raw_data / 10.0f));
 8006d10:	1cbb      	adds	r3, r7, #2
 8006d12:	2200      	movs	r2, #0
 8006d14:	5e9b      	ldrsh	r3, [r3, r2]
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7fa fbfa 	bl	8001510 <__aeabi_i2f>
 8006d1c:	1c03      	adds	r3, r0, #0
 8006d1e:	4904      	ldr	r1, [pc, #16]	@ (8006d30 <lps22hb_read_temperature+0x84>)
 8006d20:	1c18      	adds	r0, r3, #0
 8006d22:	f7f9 fef7 	bl	8000b14 <__aeabi_fdiv>
 8006d26:	1c03      	adds	r3, r0, #0
}
 8006d28:	1c18      	adds	r0, r3, #0
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b003      	add	sp, #12
 8006d2e:	bd90      	pop	{r4, r7, pc}
 8006d30:	41200000 	.word	0x41200000

08006d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d38:	f001 f854 	bl	8007de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d3c:	f000 f81e 	bl	8006d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d40:	f7ff f802 	bl	8005d48 <MX_GPIO_Init>
  MX_I2C2_Init();
 8006d44:	f7ff fa7e 	bl	8006244 <MX_I2C2_Init>
  MX_SPI1_Init();
 8006d48:	f000 f968 	bl	800701c <MX_SPI1_Init>
  MX_SPI2_Init();
 8006d4c:	f000 f9a4 	bl	8007098 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8006d50:	f000 fdc2 	bl	80078d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006d54:	f000 fe10 	bl	8007978 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006d58:	f000 fe5e 	bl	8007a18 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8006d5c:	f000 fcbc 	bl	80076d8 <MX_TIM1_Init>
  MX_RTC_Init();
 8006d60:	f000 f8f0 	bl	8006f44 <MX_RTC_Init>
  MX_USART4_UART_Init();
 8006d64:	f000 fe8c 	bl	8007a80 <MX_USART4_UART_Init>
  MX_TIM2_Init();
 8006d68:	f000 fd12 	bl	8007790 <MX_TIM2_Init>
 // debug("\r\n\r\nInited\r\n");
 // HAL_UART_Transmit_IT(terminal_uart, "123456789\r\n", 12);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006d6c:	f008 f9c8 	bl	800f100 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8006d70:	f7fc fdcc 	bl	800390c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006d74:	f008 f9e6 	bl	800f144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006d78:	46c0      	nop			@ (mov r8, r8)
 8006d7a:	e7fd      	b.n	8006d78 <main+0x44>

08006d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b093      	sub	sp, #76	@ 0x4c
 8006d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d82:	2410      	movs	r4, #16
 8006d84:	193b      	adds	r3, r7, r4
 8006d86:	0018      	movs	r0, r3
 8006d88:	2338      	movs	r3, #56	@ 0x38
 8006d8a:	001a      	movs	r2, r3
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	f00c f8ab 	bl	8012ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d92:	003b      	movs	r3, r7
 8006d94:	0018      	movs	r0, r3
 8006d96:	2310      	movs	r3, #16
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f00c f8a4 	bl	8012ee8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006da0:	2380      	movs	r3, #128	@ 0x80
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	0018      	movs	r0, r3
 8006da6:	f003 f80d 	bl	8009dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006daa:	193b      	adds	r3, r7, r4
 8006dac:	2209      	movs	r2, #9
 8006dae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006db0:	193b      	adds	r3, r7, r4
 8006db2:	2280      	movs	r2, #128	@ 0x80
 8006db4:	0252      	lsls	r2, r2, #9
 8006db6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006db8:	0021      	movs	r1, r4
 8006dba:	187b      	adds	r3, r7, r1
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006dc0:	187b      	adds	r3, r7, r1
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006dc6:	187b      	adds	r3, r7, r1
 8006dc8:	2203      	movs	r2, #3
 8006dca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006dcc:	187b      	adds	r3, r7, r1
 8006dce:	2200      	movs	r2, #0
 8006dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8006dd2:	187b      	adds	r3, r7, r1
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	2280      	movs	r2, #128	@ 0x80
 8006ddc:	0292      	lsls	r2, r2, #10
 8006dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006de0:	187b      	adds	r3, r7, r1
 8006de2:	22a0      	movs	r2, #160	@ 0xa0
 8006de4:	0512      	lsls	r2, r2, #20
 8006de6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8006de8:	187b      	adds	r3, r7, r1
 8006dea:	2280      	movs	r2, #128	@ 0x80
 8006dec:	05d2      	lsls	r2, r2, #23
 8006dee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006df0:	187b      	adds	r3, r7, r1
 8006df2:	0018      	movs	r0, r3
 8006df4:	f003 f832 	bl	8009e5c <HAL_RCC_OscConfig>
 8006df8:	1e03      	subs	r3, r0, #0
 8006dfa:	d001      	beq.n	8006e00 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006dfc:	f000 f874 	bl	8006ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e00:	003b      	movs	r3, r7
 8006e02:	2207      	movs	r2, #7
 8006e04:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e06:	003b      	movs	r3, r7
 8006e08:	2202      	movs	r2, #2
 8006e0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e0c:	003b      	movs	r3, r7
 8006e0e:	2200      	movs	r2, #0
 8006e10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006e12:	003b      	movs	r3, r7
 8006e14:	2200      	movs	r2, #0
 8006e16:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e18:	003b      	movs	r3, r7
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f003 fb37 	bl	800a490 <HAL_RCC_ClockConfig>
 8006e22:	1e03      	subs	r3, r0, #0
 8006e24:	d001      	beq.n	8006e2a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006e26:	f000 f85f 	bl	8006ee8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8006e2a:	f003 fd05 	bl	800a838 <HAL_RCC_EnableCSS>
}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b013      	add	sp, #76	@ 0x4c
 8006e34:	bd90      	pop	{r4, r7, pc}
	...

08006e38 <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
     int i, j;
     uint32_t byte, crc, mask;

     i = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
     crc = 0xFFFFFFFF;
 8006e46:	2301      	movs	r3, #1
 8006e48:	425b      	negs	r3, r3
 8006e4a:	617b      	str	r3, [r7, #20]
     for(int k = 0; k<size;k++) {
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e023      	b.n	8006e9a <crc32b+0x62>
        byte = message[k];            // Get next byte.
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	18d3      	adds	r3, r2, r3
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
        crc = crc ^ byte;
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4053      	eors	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8006e64:	2307      	movs	r3, #7
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	e00e      	b.n	8006e88 <crc32b+0x50>
           mask = -(crc & 1);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	4013      	ands	r3, r2
 8006e70:	425b      	negs	r3, r3
 8006e72:	60bb      	str	r3, [r7, #8]
           crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	085a      	lsrs	r2, r3, #1
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	490d      	ldr	r1, [pc, #52]	@ (8006eb0 <crc32b+0x78>)
 8006e7c:	400b      	ands	r3, r1
 8006e7e:	4053      	eors	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	daed      	bge.n	8006e6a <crc32b+0x32>
        }
        i = i + 1;
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	3301      	adds	r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
     for(int k = 0; k<size;k++) {
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3301      	adds	r3, #1
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d8d7      	bhi.n	8006e52 <crc32b+0x1a>
     }
     return ~crc;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	43db      	mvns	r3, r3
  }
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b008      	add	sp, #32
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	edb88320 	.word	0xedb88320

08006eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a08      	ldr	r2, [pc, #32]	@ (8006ee4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006ec6:	f000 ffad 	bl	8007e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	2380      	movs	r3, #128	@ 0x80
 8006ed0:	05db      	lsls	r3, r3, #23
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d101      	bne.n	8006eda <HAL_TIM_PeriodElapsedCallback+0x26>

  	  Timer_Event();
 8006ed6:	f7fc fb91 	bl	80035fc <Timer_Event>
  }
  /* USER CODE END Callback 1 */
}
 8006eda:	46c0      	nop			@ (mov r8, r8)
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b002      	add	sp, #8
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	40014800 	.word	0x40014800

08006ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006eec:	b672      	cpsid	i
}
 8006eee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_PWR_EnableBkUpAccess();
 8006ef0:	f002 ff5a 	bl	8009da8 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xAAAA);
 8006ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8006f30 <Error_Handler+0x48>)
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f34 <Error_Handler+0x4c>)
 8006ef8:	2100      	movs	r1, #0
 8006efa:	0018      	movs	r0, r3
 8006efc:	f003 ffda 	bl	800aeb4 <HAL_RTCEx_BKUPWrite>

	debug("==========\r\n");
 8006f00:	4b0d      	ldr	r3, [pc, #52]	@ (8006f38 <Error_Handler+0x50>)
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7fe fe0a 	bl	8005b1c <debug>
	debug("ERROR HANDLER\r\n");
 8006f08:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <Error_Handler+0x54>)
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7fe fe06 	bl	8005b1c <debug>
	debug("==========\r\n");
 8006f10:	4b09      	ldr	r3, [pc, #36]	@ (8006f38 <Error_Handler+0x50>)
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7fe fe02 	bl	8005b1c <debug>

	send_all_debug_buffer_blocking();
 8006f18:	f7fe fed2 	bl	8005cc0 <send_all_debug_buffer_blocking>

	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8006f1c:	4b08      	ldr	r3, [pc, #32]	@ (8006f40 <Error_Handler+0x58>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	2104      	movs	r1, #4
 8006f22:	0018      	movs	r0, r3
 8006f24:	f001 fc9f 	bl	8008866 <HAL_GPIO_WritePin>

	HAL_NVIC_SystemReset();
 8006f28:	f001 f891 	bl	800804e <HAL_NVIC_SystemReset>

  while (1)
 8006f2c:	46c0      	nop			@ (mov r8, r8)
 8006f2e:	e7fd      	b.n	8006f2c <Error_Handler+0x44>
 8006f30:	0000aaaa 	.word	0x0000aaaa
 8006f34:	2000251c 	.word	0x2000251c
 8006f38:	08016e98 	.word	0x08016e98
 8006f3c:	08016ea8 	.word	0x08016ea8
 8006f40:	50000c00 	.word	0x50000c00

08006f44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006f48:	4b13      	ldr	r3, [pc, #76]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f4a:	4a14      	ldr	r2, [pc, #80]	@ (8006f9c <MX_RTC_Init+0x58>)
 8006f4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006f4e:	4b12      	ldr	r3, [pc, #72]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8006f54:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f56:	227f      	movs	r2, #127	@ 0x7f
 8006f58:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f5c:	22ff      	movs	r2, #255	@ 0xff
 8006f5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006f60:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006f66:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006f72:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f74:	2280      	movs	r2, #128	@ 0x80
 8006f76:	05d2      	lsls	r2, r2, #23
 8006f78:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8006f7a:	4b07      	ldr	r3, [pc, #28]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006f80:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <MX_RTC_Init+0x54>)
 8006f82:	0018      	movs	r0, r3
 8006f84:	f003 fe48 	bl	800ac18 <HAL_RTC_Init>
 8006f88:	1e03      	subs	r3, r0, #0
 8006f8a:	d001      	beq.n	8006f90 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8006f8c:	f7ff ffac 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006f90:	46c0      	nop			@ (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	2000251c 	.word	0x2000251c
 8006f9c:	40002800 	.word	0x40002800

08006fa0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b091      	sub	sp, #68	@ 0x44
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fa8:	240c      	movs	r4, #12
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	0018      	movs	r0, r3
 8006fae:	2334      	movs	r3, #52	@ 0x34
 8006fb0:	001a      	movs	r2, r3
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f00b ff98 	bl	8012ee8 <memset>
  if(rtcHandle->Instance==RTC)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <HAL_RTC_MspInit+0x74>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d124      	bne.n	800700c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006fc2:	193b      	adds	r3, r7, r4
 8006fc4:	2280      	movs	r2, #128	@ 0x80
 8006fc6:	0292      	lsls	r2, r2, #10
 8006fc8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006fca:	193b      	adds	r3, r7, r4
 8006fcc:	2280      	movs	r2, #128	@ 0x80
 8006fce:	0092      	lsls	r2, r2, #2
 8006fd0:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f003 fc67 	bl	800a8a8 <HAL_RCCEx_PeriphCLKConfig>
 8006fda:	1e03      	subs	r3, r0, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006fde:	f7ff ff83 	bl	8006ee8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <HAL_RTC_MspInit+0x78>)
 8006fe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8007018 <HAL_RTC_MspInit+0x78>)
 8006fe8:	2180      	movs	r1, #128	@ 0x80
 8006fea:	0209      	lsls	r1, r1, #8
 8006fec:	430a      	orrs	r2, r1
 8006fee:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006ff0:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <HAL_RTC_MspInit+0x78>)
 8006ff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff4:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <HAL_RTC_MspInit+0x78>)
 8006ff6:	2180      	movs	r1, #128	@ 0x80
 8006ff8:	00c9      	lsls	r1, r1, #3
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ffe:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <HAL_RTC_MspInit+0x78>)
 8007000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007002:	2380      	movs	r3, #128	@ 0x80
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4013      	ands	r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800700c:	46c0      	nop			@ (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b011      	add	sp, #68	@ 0x44
 8007012:	bd90      	pop	{r4, r7, pc}
 8007014:	40002800 	.word	0x40002800
 8007018:	40021000 	.word	0x40021000

0800701c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007020:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <MX_SPI1_Init+0x78>)
 8007024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007026:	4b1a      	ldr	r3, [pc, #104]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007028:	2282      	movs	r2, #130	@ 0x82
 800702a:	0052      	lsls	r2, r2, #1
 800702c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800702e:	4b18      	ldr	r3, [pc, #96]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007030:	2200      	movs	r2, #0
 8007032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007034:	4b16      	ldr	r3, [pc, #88]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007036:	22e0      	movs	r2, #224	@ 0xe0
 8007038:	00d2      	lsls	r2, r2, #3
 800703a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800703c:	4b14      	ldr	r3, [pc, #80]	@ (8007090 <MX_SPI1_Init+0x74>)
 800703e:	2200      	movs	r2, #0
 8007040:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007042:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007044:	2200      	movs	r2, #0
 8007046:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007048:	4b11      	ldr	r3, [pc, #68]	@ (8007090 <MX_SPI1_Init+0x74>)
 800704a:	2280      	movs	r2, #128	@ 0x80
 800704c:	0092      	lsls	r2, r2, #2
 800704e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007050:	4b0f      	ldr	r3, [pc, #60]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007052:	2200      	movs	r2, #0
 8007054:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007056:	4b0e      	ldr	r3, [pc, #56]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007058:	2200      	movs	r2, #0
 800705a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800705c:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <MX_SPI1_Init+0x74>)
 800705e:	2200      	movs	r2, #0
 8007060:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007062:	4b0b      	ldr	r3, [pc, #44]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007064:	2200      	movs	r2, #0
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007068:	4b09      	ldr	r3, [pc, #36]	@ (8007090 <MX_SPI1_Init+0x74>)
 800706a:	2207      	movs	r2, #7
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800706e:	4b08      	ldr	r3, [pc, #32]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007074:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <MX_SPI1_Init+0x74>)
 8007076:	2208      	movs	r2, #8
 8007078:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800707a:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <MX_SPI1_Init+0x74>)
 800707c:	0018      	movs	r0, r3
 800707e:	f003 ff51 	bl	800af24 <HAL_SPI_Init>
 8007082:	1e03      	subs	r3, r0, #0
 8007084:	d001      	beq.n	800708a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007086:	f7ff ff2f 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20002548 	.word	0x20002548
 8007094:	40013000 	.word	0x40013000

08007098 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800709c:	4b1b      	ldr	r3, [pc, #108]	@ (800710c <MX_SPI2_Init+0x74>)
 800709e:	4a1c      	ldr	r2, [pc, #112]	@ (8007110 <MX_SPI2_Init+0x78>)
 80070a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80070a2:	4b1a      	ldr	r3, [pc, #104]	@ (800710c <MX_SPI2_Init+0x74>)
 80070a4:	2282      	movs	r2, #130	@ 0x82
 80070a6:	0052      	lsls	r2, r2, #1
 80070a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80070aa:	4b18      	ldr	r3, [pc, #96]	@ (800710c <MX_SPI2_Init+0x74>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80070b0:	4b16      	ldr	r3, [pc, #88]	@ (800710c <MX_SPI2_Init+0x74>)
 80070b2:	22e0      	movs	r2, #224	@ 0xe0
 80070b4:	00d2      	lsls	r2, r2, #3
 80070b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <MX_SPI2_Init+0x74>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070be:	4b13      	ldr	r3, [pc, #76]	@ (800710c <MX_SPI2_Init+0x74>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80070c4:	4b11      	ldr	r3, [pc, #68]	@ (800710c <MX_SPI2_Init+0x74>)
 80070c6:	2280      	movs	r2, #128	@ 0x80
 80070c8:	0092      	lsls	r2, r2, #2
 80070ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80070cc:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <MX_SPI2_Init+0x74>)
 80070ce:	2210      	movs	r2, #16
 80070d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070d2:	4b0e      	ldr	r3, [pc, #56]	@ (800710c <MX_SPI2_Init+0x74>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80070d8:	4b0c      	ldr	r3, [pc, #48]	@ (800710c <MX_SPI2_Init+0x74>)
 80070da:	2200      	movs	r2, #0
 80070dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070de:	4b0b      	ldr	r3, [pc, #44]	@ (800710c <MX_SPI2_Init+0x74>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80070e4:	4b09      	ldr	r3, [pc, #36]	@ (800710c <MX_SPI2_Init+0x74>)
 80070e6:	2207      	movs	r2, #7
 80070e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80070ea:	4b08      	ldr	r3, [pc, #32]	@ (800710c <MX_SPI2_Init+0x74>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <MX_SPI2_Init+0x74>)
 80070f2:	2208      	movs	r2, #8
 80070f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80070f6:	4b05      	ldr	r3, [pc, #20]	@ (800710c <MX_SPI2_Init+0x74>)
 80070f8:	0018      	movs	r0, r3
 80070fa:	f003 ff13 	bl	800af24 <HAL_SPI_Init>
 80070fe:	1e03      	subs	r3, r0, #0
 8007100:	d001      	beq.n	8007106 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8007102:	f7ff fef1 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200025ac 	.word	0x200025ac
 8007110:	40003800 	.word	0x40003800

08007114 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b08d      	sub	sp, #52	@ 0x34
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800711c:	241c      	movs	r4, #28
 800711e:	193b      	adds	r3, r7, r4
 8007120:	0018      	movs	r0, r3
 8007122:	2314      	movs	r3, #20
 8007124:	001a      	movs	r2, r3
 8007126:	2100      	movs	r1, #0
 8007128:	f00b fede 	bl	8012ee8 <memset>
  if(spiHandle->Instance==SPI1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5f      	ldr	r2, [pc, #380]	@ (80072b0 <HAL_SPI_MspInit+0x19c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d154      	bne.n	80071e0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007136:	4b5f      	ldr	r3, [pc, #380]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007138:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800713a:	4b5e      	ldr	r3, [pc, #376]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 800713c:	2180      	movs	r1, #128	@ 0x80
 800713e:	0149      	lsls	r1, r1, #5
 8007140:	430a      	orrs	r2, r1
 8007142:	641a      	str	r2, [r3, #64]	@ 0x40
 8007144:	4b5b      	ldr	r3, [pc, #364]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	015b      	lsls	r3, r3, #5
 800714c:	4013      	ands	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007152:	4b58      	ldr	r3, [pc, #352]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007156:	4b57      	ldr	r3, [pc, #348]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007158:	2108      	movs	r1, #8
 800715a:	430a      	orrs	r2, r1
 800715c:	635a      	str	r2, [r3, #52]	@ 0x34
 800715e:	4b55      	ldr	r3, [pc, #340]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007162:	2208      	movs	r2, #8
 8007164:	4013      	ands	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800716a:	4b52      	ldr	r3, [pc, #328]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 800716c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800716e:	4b51      	ldr	r3, [pc, #324]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007170:	2101      	movs	r1, #1
 8007172:	430a      	orrs	r2, r1
 8007174:	635a      	str	r2, [r3, #52]	@ 0x34
 8007176:	4b4f      	ldr	r3, [pc, #316]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717a:	2201      	movs	r2, #1
 800717c:	4013      	ands	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
 8007182:	193b      	adds	r3, r7, r4
 8007184:	2280      	movs	r2, #128	@ 0x80
 8007186:	0052      	lsls	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800718a:	193b      	adds	r3, r7, r4
 800718c:	2202      	movs	r2, #2
 800718e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007190:	193b      	adds	r3, r7, r4
 8007192:	2200      	movs	r2, #0
 8007194:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007196:	193b      	adds	r3, r7, r4
 8007198:	2203      	movs	r2, #3
 800719a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 800719c:	193b      	adds	r3, r7, r4
 800719e:	2201      	movs	r2, #1
 80071a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
 80071a2:	193b      	adds	r3, r7, r4
 80071a4:	4a44      	ldr	r2, [pc, #272]	@ (80072b8 <HAL_SPI_MspInit+0x1a4>)
 80071a6:	0019      	movs	r1, r3
 80071a8:	0010      	movs	r0, r2
 80071aa:	f001 f9db 	bl	8008564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
 80071ae:	0021      	movs	r1, r4
 80071b0:	187b      	adds	r3, r7, r1
 80071b2:	22c0      	movs	r2, #192	@ 0xc0
 80071b4:	0152      	lsls	r2, r2, #5
 80071b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b8:	187b      	adds	r3, r7, r1
 80071ba:	2202      	movs	r2, #2
 80071bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071be:	187b      	adds	r3, r7, r1
 80071c0:	2200      	movs	r2, #0
 80071c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c4:	187b      	adds	r3, r7, r1
 80071c6:	2203      	movs	r2, #3
 80071c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80071ca:	187b      	adds	r3, r7, r1
 80071cc:	2200      	movs	r2, #0
 80071ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071d0:	187a      	adds	r2, r7, r1
 80071d2:	23a0      	movs	r3, #160	@ 0xa0
 80071d4:	05db      	lsls	r3, r3, #23
 80071d6:	0011      	movs	r1, r2
 80071d8:	0018      	movs	r0, r3
 80071da:	f001 f9c3 	bl	8008564 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80071de:	e063      	b.n	80072a8 <HAL_SPI_MspInit+0x194>
  else if(spiHandle->Instance==SPI2)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a35      	ldr	r2, [pc, #212]	@ (80072bc <HAL_SPI_MspInit+0x1a8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d15e      	bne.n	80072a8 <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071ea:	4b32      	ldr	r3, [pc, #200]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 80071ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 80071f0:	2180      	movs	r1, #128	@ 0x80
 80071f2:	01c9      	lsls	r1, r1, #7
 80071f4:	430a      	orrs	r2, r1
 80071f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071f8:	4b2e      	ldr	r3, [pc, #184]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 80071fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	01db      	lsls	r3, r3, #7
 8007200:	4013      	ands	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007206:	4b2b      	ldr	r3, [pc, #172]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800720a:	4b2a      	ldr	r3, [pc, #168]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 800720c:	2102      	movs	r1, #2
 800720e:	430a      	orrs	r2, r1
 8007210:	635a      	str	r2, [r3, #52]	@ 0x34
 8007212:	4b28      	ldr	r3, [pc, #160]	@ (80072b4 <HAL_SPI_MspInit+0x1a0>)
 8007214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007216:	2202      	movs	r2, #2
 8007218:	4013      	ands	r3, r2
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_MISO_Pin;
 800721e:	241c      	movs	r4, #28
 8007220:	193b      	adds	r3, r7, r4
 8007222:	2204      	movs	r2, #4
 8007224:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007226:	193b      	adds	r3, r7, r4
 8007228:	2202      	movs	r2, #2
 800722a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722c:	193b      	adds	r3, r7, r4
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007232:	193b      	adds	r3, r7, r4
 8007234:	2203      	movs	r2, #3
 8007236:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8007238:	193b      	adds	r3, r7, r4
 800723a:	2201      	movs	r2, #1
 800723c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MISO_GPIO_Port, &GPIO_InitStruct);
 800723e:	193b      	adds	r3, r7, r4
 8007240:	4a1f      	ldr	r2, [pc, #124]	@ (80072c0 <HAL_SPI_MspInit+0x1ac>)
 8007242:	0019      	movs	r1, r3
 8007244:	0010      	movs	r0, r2
 8007246:	f001 f98d 	bl	8008564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_SCK_Pin;
 800724a:	0021      	movs	r1, r4
 800724c:	187b      	adds	r3, r7, r1
 800724e:	2280      	movs	r2, #128	@ 0x80
 8007250:	00d2      	lsls	r2, r2, #3
 8007252:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007254:	000c      	movs	r4, r1
 8007256:	193b      	adds	r3, r7, r4
 8007258:	2202      	movs	r2, #2
 800725a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725c:	193b      	adds	r3, r7, r4
 800725e:	2200      	movs	r2, #0
 8007260:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007262:	193b      	adds	r3, r7, r4
 8007264:	2203      	movs	r2, #3
 8007266:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007268:	193b      	adds	r3, r7, r4
 800726a:	2205      	movs	r2, #5
 800726c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_SCK_GPIO_Port, &GPIO_InitStruct);
 800726e:	193b      	adds	r3, r7, r4
 8007270:	4a13      	ldr	r2, [pc, #76]	@ (80072c0 <HAL_SPI_MspInit+0x1ac>)
 8007272:	0019      	movs	r1, r3
 8007274:	0010      	movs	r0, r2
 8007276:	f001 f975 	bl	8008564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_MOSI_Pin;
 800727a:	0021      	movs	r1, r4
 800727c:	187b      	adds	r3, r7, r1
 800727e:	2280      	movs	r2, #128	@ 0x80
 8007280:	0112      	lsls	r2, r2, #4
 8007282:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007284:	187b      	adds	r3, r7, r1
 8007286:	2202      	movs	r2, #2
 8007288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728a:	187b      	adds	r3, r7, r1
 800728c:	2200      	movs	r2, #0
 800728e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007290:	187b      	adds	r3, r7, r1
 8007292:	2203      	movs	r2, #3
 8007294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007296:	187b      	adds	r3, r7, r1
 8007298:	2200      	movs	r2, #0
 800729a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MOSI_GPIO_Port, &GPIO_InitStruct);
 800729c:	187b      	adds	r3, r7, r1
 800729e:	4a08      	ldr	r2, [pc, #32]	@ (80072c0 <HAL_SPI_MspInit+0x1ac>)
 80072a0:	0019      	movs	r1, r3
 80072a2:	0010      	movs	r0, r2
 80072a4:	f001 f95e 	bl	8008564 <HAL_GPIO_Init>
}
 80072a8:	46c0      	nop			@ (mov r8, r8)
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b00d      	add	sp, #52	@ 0x34
 80072ae:	bd90      	pop	{r4, r7, pc}
 80072b0:	40013000 	.word	0x40013000
 80072b4:	40021000 	.word	0x40021000
 80072b8:	50000c00 	.word	0x50000c00
 80072bc:	40003800 	.word	0x40003800
 80072c0:	50000400 	.word	0x50000400

080072c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072ca:	4b15      	ldr	r3, [pc, #84]	@ (8007320 <HAL_MspInit+0x5c>)
 80072cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072ce:	4b14      	ldr	r3, [pc, #80]	@ (8007320 <HAL_MspInit+0x5c>)
 80072d0:	2101      	movs	r1, #1
 80072d2:	430a      	orrs	r2, r1
 80072d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80072d6:	4b12      	ldr	r3, [pc, #72]	@ (8007320 <HAL_MspInit+0x5c>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072da:	2201      	movs	r2, #1
 80072dc:	4013      	ands	r3, r2
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007320 <HAL_MspInit+0x5c>)
 80072e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <HAL_MspInit+0x5c>)
 80072e8:	2180      	movs	r1, #128	@ 0x80
 80072ea:	0549      	lsls	r1, r1, #21
 80072ec:	430a      	orrs	r2, r1
 80072ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <HAL_MspInit+0x5c>)
 80072f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072f4:	2380      	movs	r3, #128	@ 0x80
 80072f6:	055b      	lsls	r3, r3, #21
 80072f8:	4013      	ands	r3, r2
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80072fe:	2302      	movs	r3, #2
 8007300:	425b      	negs	r3, r3
 8007302:	2200      	movs	r2, #0
 8007304:	2103      	movs	r1, #3
 8007306:	0018      	movs	r0, r3
 8007308:	f000 fe7c 	bl	8008004 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800730c:	23c0      	movs	r3, #192	@ 0xc0
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	0018      	movs	r0, r3
 8007312:	f000 fdc7 	bl	8007ea4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	46bd      	mov	sp, r7
 800731a:	b002      	add	sp, #8
 800731c:	bd80      	pop	{r7, pc}
 800731e:	46c0      	nop			@ (mov r8, r8)
 8007320:	40021000 	.word	0x40021000

08007324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007324:	b5b0      	push	{r4, r5, r7, lr}
 8007326:	b08c      	sub	sp, #48	@ 0x30
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800732c:	232b      	movs	r3, #43	@ 0x2b
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8007334:	4b38      	ldr	r3, [pc, #224]	@ (8007418 <HAL_InitTick+0xf4>)
 8007336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007338:	4b37      	ldr	r3, [pc, #220]	@ (8007418 <HAL_InitTick+0xf4>)
 800733a:	2180      	movs	r1, #128	@ 0x80
 800733c:	02c9      	lsls	r1, r1, #11
 800733e:	430a      	orrs	r2, r1
 8007340:	641a      	str	r2, [r3, #64]	@ 0x40
 8007342:	4b35      	ldr	r3, [pc, #212]	@ (8007418 <HAL_InitTick+0xf4>)
 8007344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007346:	2380      	movs	r3, #128	@ 0x80
 8007348:	02db      	lsls	r3, r3, #11
 800734a:	4013      	ands	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007350:	230c      	movs	r3, #12
 8007352:	18fa      	adds	r2, r7, r3
 8007354:	2410      	movs	r4, #16
 8007356:	193b      	adds	r3, r7, r4
 8007358:	0011      	movs	r1, r2
 800735a:	0018      	movs	r0, r3
 800735c:	f003 fa42 	bl	800a7e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007360:	193b      	adds	r3, r7, r4
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800736c:	f003 fa24 	bl	800a7b8 <HAL_RCC_GetPCLK1Freq>
 8007370:	0003      	movs	r3, r0
 8007372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007374:	e004      	b.n	8007380 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007376:	f003 fa1f 	bl	800a7b8 <HAL_RCC_GetPCLK1Freq>
 800737a:	0003      	movs	r3, r0
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007382:	4926      	ldr	r1, [pc, #152]	@ (800741c <HAL_InitTick+0xf8>)
 8007384:	0018      	movs	r0, r3
 8007386:	f7f8 fedb 	bl	8000140 <__udivsi3>
 800738a:	0003      	movs	r3, r0
 800738c:	3b01      	subs	r3, #1
 800738e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8007390:	4b23      	ldr	r3, [pc, #140]	@ (8007420 <HAL_InitTick+0xfc>)
 8007392:	4a24      	ldr	r2, [pc, #144]	@ (8007424 <HAL_InitTick+0x100>)
 8007394:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8007396:	4b22      	ldr	r3, [pc, #136]	@ (8007420 <HAL_InitTick+0xfc>)
 8007398:	4a23      	ldr	r2, [pc, #140]	@ (8007428 <HAL_InitTick+0x104>)
 800739a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800739c:	4b20      	ldr	r3, [pc, #128]	@ (8007420 <HAL_InitTick+0xfc>)
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80073a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007420 <HAL_InitTick+0xfc>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007420 <HAL_InitTick+0xfc>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007420 <HAL_InitTick+0xfc>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80073b4:	252b      	movs	r5, #43	@ 0x2b
 80073b6:	197c      	adds	r4, r7, r5
 80073b8:	4b19      	ldr	r3, [pc, #100]	@ (8007420 <HAL_InitTick+0xfc>)
 80073ba:	0018      	movs	r0, r3
 80073bc:	f004 fcd2 	bl	800bd64 <HAL_TIM_Base_Init>
 80073c0:	0003      	movs	r3, r0
 80073c2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80073c4:	197b      	adds	r3, r7, r5
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11e      	bne.n	800740a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80073cc:	197c      	adds	r4, r7, r5
 80073ce:	4b14      	ldr	r3, [pc, #80]	@ (8007420 <HAL_InitTick+0xfc>)
 80073d0:	0018      	movs	r0, r3
 80073d2:	f004 fd1f 	bl	800be14 <HAL_TIM_Base_Start_IT>
 80073d6:	0003      	movs	r3, r0
 80073d8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80073da:	197b      	adds	r3, r7, r5
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d113      	bne.n	800740a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80073e2:	2016      	movs	r0, #22
 80073e4:	f000 fe23 	bl	800802e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d809      	bhi.n	8007402 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	0019      	movs	r1, r3
 80073f4:	2016      	movs	r0, #22
 80073f6:	f000 fe05 	bl	8008004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80073fa:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <HAL_InitTick+0x108>)
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e003      	b.n	800740a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8007402:	232b      	movs	r3, #43	@ 0x2b
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	2201      	movs	r2, #1
 8007408:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800740a:	232b      	movs	r3, #43	@ 0x2b
 800740c:	18fb      	adds	r3, r7, r3
 800740e:	781b      	ldrb	r3, [r3, #0]
}
 8007410:	0018      	movs	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	b00c      	add	sp, #48	@ 0x30
 8007416:	bdb0      	pop	{r4, r5, r7, pc}
 8007418:	40021000 	.word	0x40021000
 800741c:	000f4240 	.word	0x000f4240
 8007420:	20002610 	.word	0x20002610
 8007424:	40014800 	.word	0x40014800
 8007428:	000003e7 	.word	0x000003e7
 800742c:	20000078 	.word	0x20000078

08007430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8007434:	f003 fa0e 	bl	800a854 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007438:	46c0      	nop			@ (mov r8, r8)
 800743a:	e7fd      	b.n	8007438 <NMI_Handler+0x8>

0800743c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8007440:	4b17      	ldr	r3, [pc, #92]	@ (80074a0 <HardFault_Handler+0x64>)
 8007442:	2201      	movs	r2, #1
 8007444:	2104      	movs	r1, #4
 8007446:	0018      	movs	r0, r3
 8007448:	f001 fa0d 	bl	8008866 <HAL_GPIO_WritePin>
	HAL_PWR_EnableBkUpAccess();
 800744c:	f002 fcac 	bl	8009da8 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 8007450:	4a14      	ldr	r2, [pc, #80]	@ (80074a4 <HardFault_Handler+0x68>)
 8007452:	4b15      	ldr	r3, [pc, #84]	@ (80074a8 <HardFault_Handler+0x6c>)
 8007454:	2100      	movs	r1, #0
 8007456:	0018      	movs	r0, r3
 8007458:	f003 fd2c 	bl	800aeb4 <HAL_RTCEx_BKUPWrite>

	if (debug_enabled()) {
 800745c:	f7fe fb58 	bl	8005b10 <debug_enabled>
 8007460:	1e03      	subs	r3, r0, #0
 8007462:	d010      	beq.n	8007486 <HardFault_Handler+0x4a>
		debug("==========");
 8007464:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <HardFault_Handler+0x70>)
 8007466:	0018      	movs	r0, r3
 8007468:	f7fe fb58 	bl	8005b1c <debug>
		debug("HARD FAULT");
 800746c:	4b10      	ldr	r3, [pc, #64]	@ (80074b0 <HardFault_Handler+0x74>)
 800746e:	0018      	movs	r0, r3
 8007470:	f7fe fb54 	bl	8005b1c <debug>
		debug("==========");
 8007474:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <HardFault_Handler+0x70>)
 8007476:	0018      	movs	r0, r3
 8007478:	f7fe fb50 	bl	8005b1c <debug>

		send_all_debug_buffer_blocking();
 800747c:	f7fe fc20 	bl	8005cc0 <send_all_debug_buffer_blocking>
		HAL_NVIC_SystemReset();
 8007480:	f000 fde5 	bl	800804e <HAL_NVIC_SystemReset>
 8007484:	e009      	b.n	800749a <HardFault_Handler+0x5e>
	}
	else {
		HAL_PWR_EnableBkUpAccess();
 8007486:	f002 fc8f 	bl	8009da8 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 800748a:	4a06      	ldr	r2, [pc, #24]	@ (80074a4 <HardFault_Handler+0x68>)
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <HardFault_Handler+0x6c>)
 800748e:	2100      	movs	r1, #0
 8007490:	0018      	movs	r0, r3
 8007492:	f003 fd0f 	bl	800aeb4 <HAL_RTCEx_BKUPWrite>
//		HAL_Delay(200);
		HAL_NVIC_SystemReset();		//Software Reset
 8007496:	f000 fdda 	bl	800804e <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  vTaskSuspendAll();
 800749a:	f008 ff79 	bl	8010390 <vTaskSuspendAll>
 800749e:	e7fc      	b.n	800749a <HardFault_Handler+0x5e>
 80074a0:	50000c00 	.word	0x50000c00
 80074a4:	0000bbbb 	.word	0x0000bbbb
 80074a8:	2000251c 	.word	0x2000251c
 80074ac:	08016eb8 	.word	0x08016eb8
 80074b0:	08016ec4 	.word	0x08016ec4

080074b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80074b8:	4b03      	ldr	r3, [pc, #12]	@ (80074c8 <TIM2_IRQHandler+0x14>)
 80074ba:	0018      	movs	r0, r3
 80074bc:	f004 fd06 	bl	800becc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80074c0:	46c0      	nop			@ (mov r8, r8)
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	46c0      	nop			@ (mov r8, r8)
 80074c8:	200026ac 	.word	0x200026ac

080074cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80074d0:	4b03      	ldr	r3, [pc, #12]	@ (80074e0 <TIM17_IRQHandler+0x14>)
 80074d2:	0018      	movs	r0, r3
 80074d4:	f004 fcfa 	bl	800becc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80074d8:	46c0      	nop			@ (mov r8, r8)
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	20002610 	.word	0x20002610

080074e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	extended_debug("USART1_IRQHandler\r\n");
 80074e8:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <USART1_IRQHandler+0x1c>)
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7fe fb8a 	bl	8005c04 <extended_debug>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80074f0:	4b04      	ldr	r3, [pc, #16]	@ (8007504 <USART1_IRQHandler+0x20>)
 80074f2:	0018      	movs	r0, r3
 80074f4:	f005 fb4c 	bl	800cb90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80074f8:	46c0      	nop			@ (mov r8, r8)
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	08016ed0 	.word	0x08016ed0
 8007504:	200026f8 	.word	0x200026f8

08007508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	extended_debug("USART2_IRQHandler\r\n");
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <USART2_IRQHandler+0x1c>)
 800750e:	0018      	movs	r0, r3
 8007510:	f7fe fb78 	bl	8005c04 <extended_debug>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007514:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <USART2_IRQHandler+0x20>)
 8007516:	0018      	movs	r0, r3
 8007518:	f005 fb3a 	bl	800cb90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800751c:	46c0      	nop			@ (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	08016ee4 	.word	0x08016ee4
 8007528:	2000278c 	.word	0x2000278c

0800752c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */
//	debug("USART3_4_LPUART1_IRQHandler\r\n");
  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <USART3_4_LPUART1_IRQHandler+0x1c>)
 8007532:	0018      	movs	r0, r3
 8007534:	f005 fb2c 	bl	800cb90 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8007538:	4b04      	ldr	r3, [pc, #16]	@ (800754c <USART3_4_LPUART1_IRQHandler+0x20>)
 800753a:	0018      	movs	r0, r3
 800753c:	f005 fb28 	bl	800cb90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8007540:	46c0      	nop			@ (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	20002820 	.word	0x20002820
 800754c:	200028b4 	.word	0x200028b4

08007550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  return 1;
 8007554:	2301      	movs	r3, #1
}
 8007556:	0018      	movs	r0, r3
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <_kill>:

int _kill(int pid, int sig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007566:	f00b fd79 	bl	801305c <__errno>
 800756a:	0003      	movs	r3, r0
 800756c:	2216      	movs	r2, #22
 800756e:	601a      	str	r2, [r3, #0]
  return -1;
 8007570:	2301      	movs	r3, #1
 8007572:	425b      	negs	r3, r3
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	b002      	add	sp, #8
 800757a:	bd80      	pop	{r7, pc}

0800757c <_exit>:

void _exit (int status)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007584:	2301      	movs	r3, #1
 8007586:	425a      	negs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	0011      	movs	r1, r2
 800758c:	0018      	movs	r0, r3
 800758e:	f7ff ffe5 	bl	800755c <_kill>
  while (1) {}    /* Make sure we hang here */
 8007592:	46c0      	nop			@ (mov r8, r8)
 8007594:	e7fd      	b.n	8007592 <_exit+0x16>

08007596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e00a      	b.n	80075be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80075a8:	e000      	b.n	80075ac <_read+0x16>
 80075aa:	bf00      	nop
 80075ac:	0001      	movs	r1, r0
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	60ba      	str	r2, [r7, #8]
 80075b4:	b2ca      	uxtb	r2, r1
 80075b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3301      	adds	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	dbf0      	blt.n	80075a8 <_read+0x12>
  }

  return len;
 80075c6:	687b      	ldr	r3, [r7, #4]
}
 80075c8:	0018      	movs	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b006      	add	sp, #24
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e009      	b.n	80075f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	60ba      	str	r2, [r7, #8]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	0018      	movs	r0, r3
 80075ec:	e000      	b.n	80075f0 <_write+0x20>
 80075ee:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3301      	adds	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	dbf1      	blt.n	80075e2 <_write+0x12>
  }
  return len;
 80075fe:	687b      	ldr	r3, [r7, #4]
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b006      	add	sp, #24
 8007606:	bd80      	pop	{r7, pc}

08007608 <_close>:

int _close(int file)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007610:	2301      	movs	r3, #1
 8007612:	425b      	negs	r3, r3
}
 8007614:	0018      	movs	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	b002      	add	sp, #8
 800761a:	bd80      	pop	{r7, pc}

0800761c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2280      	movs	r2, #128	@ 0x80
 800762a:	0192      	lsls	r2, r2, #6
 800762c:	605a      	str	r2, [r3, #4]
  return 0;
 800762e:	2300      	movs	r3, #0
}
 8007630:	0018      	movs	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	b002      	add	sp, #8
 8007636:	bd80      	pop	{r7, pc}

08007638 <_isatty>:

int _isatty(int file)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007640:	2301      	movs	r3, #1
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b002      	add	sp, #8
 8007648:	bd80      	pop	{r7, pc}

0800764a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007656:	2300      	movs	r3, #0
}
 8007658:	0018      	movs	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	b004      	add	sp, #16
 800765e:	bd80      	pop	{r7, pc}

08007660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007668:	4a14      	ldr	r2, [pc, #80]	@ (80076bc <_sbrk+0x5c>)
 800766a:	4b15      	ldr	r3, [pc, #84]	@ (80076c0 <_sbrk+0x60>)
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007674:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <_sbrk+0x64>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800767c:	4b11      	ldr	r3, [pc, #68]	@ (80076c4 <_sbrk+0x64>)
 800767e:	4a12      	ldr	r2, [pc, #72]	@ (80076c8 <_sbrk+0x68>)
 8007680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007682:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <_sbrk+0x64>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	18d3      	adds	r3, r2, r3
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d207      	bcs.n	80076a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007690:	f00b fce4 	bl	801305c <__errno>
 8007694:	0003      	movs	r3, r0
 8007696:	220c      	movs	r2, #12
 8007698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800769a:	2301      	movs	r3, #1
 800769c:	425b      	negs	r3, r3
 800769e:	e009      	b.n	80076b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076a0:	4b08      	ldr	r3, [pc, #32]	@ (80076c4 <_sbrk+0x64>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076a6:	4b07      	ldr	r3, [pc, #28]	@ (80076c4 <_sbrk+0x64>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	18d2      	adds	r2, r2, r3
 80076ae:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <_sbrk+0x64>)
 80076b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	0018      	movs	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b006      	add	sp, #24
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20009000 	.word	0x20009000
 80076c0:	00000400 	.word	0x00000400
 80076c4:	2000265c 	.word	0x2000265c
 80076c8:	20007298 	.word	0x20007298

080076cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80076d0:	46c0      	nop			@ (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076de:	2310      	movs	r3, #16
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	0018      	movs	r0, r3
 80076e4:	2310      	movs	r3, #16
 80076e6:	001a      	movs	r2, r3
 80076e8:	2100      	movs	r1, #0
 80076ea:	f00b fbfd 	bl	8012ee8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076ee:	1d3b      	adds	r3, r7, #4
 80076f0:	0018      	movs	r0, r3
 80076f2:	230c      	movs	r3, #12
 80076f4:	001a      	movs	r2, r3
 80076f6:	2100      	movs	r1, #0
 80076f8:	f00b fbf6 	bl	8012ee8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80076fc:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <MX_TIM1_Init+0xac>)
 80076fe:	4a22      	ldr	r2, [pc, #136]	@ (8007788 <MX_TIM1_Init+0xb0>)
 8007700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8007702:	4b20      	ldr	r3, [pc, #128]	@ (8007784 <MX_TIM1_Init+0xac>)
 8007704:	223f      	movs	r2, #63	@ 0x3f
 8007706:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007708:	4b1e      	ldr	r3, [pc, #120]	@ (8007784 <MX_TIM1_Init+0xac>)
 800770a:	2200      	movs	r2, #0
 800770c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800770e:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <MX_TIM1_Init+0xac>)
 8007710:	4a1e      	ldr	r2, [pc, #120]	@ (800778c <MX_TIM1_Init+0xb4>)
 8007712:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007714:	4b1b      	ldr	r3, [pc, #108]	@ (8007784 <MX_TIM1_Init+0xac>)
 8007716:	2200      	movs	r2, #0
 8007718:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800771a:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <MX_TIM1_Init+0xac>)
 800771c:	2200      	movs	r2, #0
 800771e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007720:	4b18      	ldr	r3, [pc, #96]	@ (8007784 <MX_TIM1_Init+0xac>)
 8007722:	2200      	movs	r2, #0
 8007724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007726:	4b17      	ldr	r3, [pc, #92]	@ (8007784 <MX_TIM1_Init+0xac>)
 8007728:	0018      	movs	r0, r3
 800772a:	f004 fb1b 	bl	800bd64 <HAL_TIM_Base_Init>
 800772e:	1e03      	subs	r3, r0, #0
 8007730:	d001      	beq.n	8007736 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8007732:	f7ff fbd9 	bl	8006ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007736:	2110      	movs	r1, #16
 8007738:	187b      	adds	r3, r7, r1
 800773a:	2280      	movs	r2, #128	@ 0x80
 800773c:	0152      	lsls	r2, r2, #5
 800773e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007740:	187a      	adds	r2, r7, r1
 8007742:	4b10      	ldr	r3, [pc, #64]	@ (8007784 <MX_TIM1_Init+0xac>)
 8007744:	0011      	movs	r1, r2
 8007746:	0018      	movs	r0, r3
 8007748:	f004 fcc8 	bl	800c0dc <HAL_TIM_ConfigClockSource>
 800774c:	1e03      	subs	r3, r0, #0
 800774e:	d001      	beq.n	8007754 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007750:	f7ff fbca 	bl	8006ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007754:	1d3b      	adds	r3, r7, #4
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	2200      	movs	r2, #0
 800775e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	2200      	movs	r2, #0
 8007764:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007766:	1d3a      	adds	r2, r7, #4
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <MX_TIM1_Init+0xac>)
 800776a:	0011      	movs	r1, r2
 800776c:	0018      	movs	r0, r3
 800776e:	f004 fed5 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8007772:	1e03      	subs	r3, r0, #0
 8007774:	d001      	beq.n	800777a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8007776:	f7ff fbb7 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	46bd      	mov	sp, r7
 800777e:	b008      	add	sp, #32
 8007780:	bd80      	pop	{r7, pc}
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	20002660 	.word	0x20002660
 8007788:	40012c00 	.word	0x40012c00
 800778c:	0000ffff 	.word	0x0000ffff

08007790 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007796:	2310      	movs	r3, #16
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	0018      	movs	r0, r3
 800779c:	2310      	movs	r3, #16
 800779e:	001a      	movs	r2, r3
 80077a0:	2100      	movs	r1, #0
 80077a2:	f00b fba1 	bl	8012ee8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077a6:	1d3b      	adds	r3, r7, #4
 80077a8:	0018      	movs	r0, r3
 80077aa:	230c      	movs	r3, #12
 80077ac:	001a      	movs	r2, r3
 80077ae:	2100      	movs	r1, #0
 80077b0:	f00b fb9a 	bl	8012ee8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80077b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077b6:	2280      	movs	r2, #128	@ 0x80
 80077b8:	05d2      	lsls	r2, r2, #23
 80077ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80077bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077be:	223f      	movs	r2, #63	@ 0x3f
 80077c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80077c8:	4b19      	ldr	r3, [pc, #100]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077ca:	2263      	movs	r2, #99	@ 0x63
 80077cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077ce:	4b18      	ldr	r3, [pc, #96]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077d4:	4b16      	ldr	r3, [pc, #88]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80077da:	4b15      	ldr	r3, [pc, #84]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077dc:	0018      	movs	r0, r3
 80077de:	f004 fac1 	bl	800bd64 <HAL_TIM_Base_Init>
 80077e2:	1e03      	subs	r3, r0, #0
 80077e4:	d001      	beq.n	80077ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80077e6:	f7ff fb7f 	bl	8006ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077ea:	2110      	movs	r1, #16
 80077ec:	187b      	adds	r3, r7, r1
 80077ee:	2280      	movs	r2, #128	@ 0x80
 80077f0:	0152      	lsls	r2, r2, #5
 80077f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80077f4:	187a      	adds	r2, r7, r1
 80077f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007830 <MX_TIM2_Init+0xa0>)
 80077f8:	0011      	movs	r1, r2
 80077fa:	0018      	movs	r0, r3
 80077fc:	f004 fc6e 	bl	800c0dc <HAL_TIM_ConfigClockSource>
 8007800:	1e03      	subs	r3, r0, #0
 8007802:	d001      	beq.n	8007808 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007804:	f7ff fb70 	bl	8006ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007814:	1d3a      	adds	r2, r7, #4
 8007816:	4b06      	ldr	r3, [pc, #24]	@ (8007830 <MX_TIM2_Init+0xa0>)
 8007818:	0011      	movs	r1, r2
 800781a:	0018      	movs	r0, r3
 800781c:	f004 fe7e 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8007820:	1e03      	subs	r3, r0, #0
 8007822:	d001      	beq.n	8007828 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8007824:	f7ff fb60 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007828:	46c0      	nop			@ (mov r8, r8)
 800782a:	46bd      	mov	sp, r7
 800782c:	b008      	add	sp, #32
 800782e:	bd80      	pop	{r7, pc}
 8007830:	200026ac 	.word	0x200026ac

08007834 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007834:	b590      	push	{r4, r7, lr}
 8007836:	b093      	sub	sp, #76	@ 0x4c
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800783c:	2414      	movs	r4, #20
 800783e:	193b      	adds	r3, r7, r4
 8007840:	0018      	movs	r0, r3
 8007842:	2334      	movs	r3, #52	@ 0x34
 8007844:	001a      	movs	r2, r3
 8007846:	2100      	movs	r1, #0
 8007848:	f00b fb4e 	bl	8012ee8 <memset>
  if(tim_baseHandle->Instance==TIM1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	@ (80078d0 <HAL_TIM_Base_MspInit+0x9c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d11d      	bne.n	8007892 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8007856:	193b      	adds	r3, r7, r4
 8007858:	2280      	movs	r2, #128	@ 0x80
 800785a:	0392      	lsls	r2, r2, #14
 800785c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800785e:	193b      	adds	r3, r7, r4
 8007860:	2200      	movs	r2, #0
 8007862:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007864:	193b      	adds	r3, r7, r4
 8007866:	0018      	movs	r0, r3
 8007868:	f003 f81e 	bl	800a8a8 <HAL_RCCEx_PeriphCLKConfig>
 800786c:	1e03      	subs	r3, r0, #0
 800786e:	d001      	beq.n	8007874 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8007870:	f7ff fb3a 	bl	8006ee8 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007874:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <HAL_TIM_Base_MspInit+0xa0>)
 8007876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007878:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <HAL_TIM_Base_MspInit+0xa0>)
 800787a:	2180      	movs	r1, #128	@ 0x80
 800787c:	0109      	lsls	r1, r1, #4
 800787e:	430a      	orrs	r2, r1
 8007880:	641a      	str	r2, [r3, #64]	@ 0x40
 8007882:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <HAL_TIM_Base_MspInit+0xa0>)
 8007884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007886:	2380      	movs	r3, #128	@ 0x80
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4013      	ands	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007890:	e019      	b.n	80078c6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	2380      	movs	r3, #128	@ 0x80
 8007898:	05db      	lsls	r3, r3, #23
 800789a:	429a      	cmp	r2, r3
 800789c:	d113      	bne.n	80078c6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <HAL_TIM_Base_MspInit+0xa0>)
 80078a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078a2:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <HAL_TIM_Base_MspInit+0xa0>)
 80078a4:	2101      	movs	r1, #1
 80078a6:	430a      	orrs	r2, r1
 80078a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80078aa:	4b0a      	ldr	r3, [pc, #40]	@ (80078d4 <HAL_TIM_Base_MspInit+0xa0>)
 80078ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ae:	2201      	movs	r2, #1
 80078b0:	4013      	ands	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80078b6:	2200      	movs	r2, #0
 80078b8:	2103      	movs	r1, #3
 80078ba:	200f      	movs	r0, #15
 80078bc:	f000 fba2 	bl	8008004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80078c0:	200f      	movs	r0, #15
 80078c2:	f000 fbb4 	bl	800802e <HAL_NVIC_EnableIRQ>
}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b013      	add	sp, #76	@ 0x4c
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	46c0      	nop			@ (mov r8, r8)
 80078d0:	40012c00 	.word	0x40012c00
 80078d4:	40021000 	.word	0x40021000

080078d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80078dc:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 80078de:	4a25      	ldr	r2, [pc, #148]	@ (8007974 <MX_USART1_UART_Init+0x9c>)
 80078e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80078e2:	4b23      	ldr	r3, [pc, #140]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 80078e4:	22e1      	movs	r2, #225	@ 0xe1
 80078e6:	0252      	lsls	r2, r2, #9
 80078e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80078ea:	4b21      	ldr	r3, [pc, #132]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80078f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80078f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80078fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 80078fe:	220c      	movs	r2, #12
 8007900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007902:	4b1b      	ldr	r3, [pc, #108]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 8007904:	2200      	movs	r2, #0
 8007906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007908:	4b19      	ldr	r3, [pc, #100]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 800790a:	2200      	movs	r2, #0
 800790c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800790e:	4b18      	ldr	r3, [pc, #96]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 8007910:	2200      	movs	r2, #0
 8007912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007914:	4b16      	ldr	r3, [pc, #88]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 8007916:	2200      	movs	r2, #0
 8007918:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800791a:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 800791c:	2200      	movs	r2, #0
 800791e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8007920:	4813      	ldr	r0, [pc, #76]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 8007922:	2300      	movs	r3, #0
 8007924:	2200      	movs	r2, #0
 8007926:	2100      	movs	r1, #0
 8007928:	f007 f97e 	bl	800ec28 <HAL_RS485Ex_Init>
 800792c:	1e03      	subs	r3, r0, #0
 800792e:	d001      	beq.n	8007934 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8007930:	f7ff fada 	bl	8006ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007934:	4b0e      	ldr	r3, [pc, #56]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 8007936:	2100      	movs	r1, #0
 8007938:	0018      	movs	r0, r3
 800793a:	f007 fa77 	bl	800ee2c <HAL_UARTEx_SetTxFifoThreshold>
 800793e:	1e03      	subs	r3, r0, #0
 8007940:	d001      	beq.n	8007946 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8007942:	f7ff fad1 	bl	8006ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007946:	4b0a      	ldr	r3, [pc, #40]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 8007948:	2100      	movs	r1, #0
 800794a:	0018      	movs	r0, r3
 800794c:	f007 faae 	bl	800eeac <HAL_UARTEx_SetRxFifoThreshold>
 8007950:	1e03      	subs	r3, r0, #0
 8007952:	d001      	beq.n	8007958 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8007954:	f7ff fac8 	bl	8006ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <MX_USART1_UART_Init+0x98>)
 800795a:	0018      	movs	r0, r3
 800795c:	f007 fa2c 	bl	800edb8 <HAL_UARTEx_DisableFifoMode>
 8007960:	1e03      	subs	r3, r0, #0
 8007962:	d001      	beq.n	8007968 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8007964:	f7ff fac0 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007968:	46c0      	nop			@ (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	46c0      	nop			@ (mov r8, r8)
 8007970:	200026f8 	.word	0x200026f8
 8007974:	40013800 	.word	0x40013800

08007978 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800797c:	4b24      	ldr	r3, [pc, #144]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 800797e:	4a25      	ldr	r2, [pc, #148]	@ (8007a14 <MX_USART2_UART_Init+0x9c>)
 8007980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8007982:	4b23      	ldr	r3, [pc, #140]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 8007984:	2296      	movs	r2, #150	@ 0x96
 8007986:	0212      	lsls	r2, r2, #8
 8007988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800798a:	4b21      	ldr	r3, [pc, #132]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 800798c:	2280      	movs	r2, #128	@ 0x80
 800798e:	0152      	lsls	r2, r2, #5
 8007990:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007992:	4b1f      	ldr	r3, [pc, #124]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 8007994:	2200      	movs	r2, #0
 8007996:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8007998:	4b1d      	ldr	r3, [pc, #116]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 800799a:	2280      	movs	r2, #128	@ 0x80
 800799c:	00d2      	lsls	r2, r2, #3
 800799e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80079a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079a2:	220c      	movs	r2, #12
 80079a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80079ac:	4b18      	ldr	r3, [pc, #96]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80079b2:	4b17      	ldr	r3, [pc, #92]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80079b8:	4b15      	ldr	r3, [pc, #84]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079be:	4b14      	ldr	r3, [pc, #80]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80079c4:	4b12      	ldr	r3, [pc, #72]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079c6:	0018      	movs	r0, r3
 80079c8:	f004 fe2e 	bl	800c628 <HAL_UART_Init>
 80079cc:	1e03      	subs	r3, r0, #0
 80079ce:	d001      	beq.n	80079d4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80079d0:	f7ff fa8a 	bl	8006ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079d6:	2100      	movs	r1, #0
 80079d8:	0018      	movs	r0, r3
 80079da:	f007 fa27 	bl	800ee2c <HAL_UARTEx_SetTxFifoThreshold>
 80079de:	1e03      	subs	r3, r0, #0
 80079e0:	d001      	beq.n	80079e6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80079e2:	f7ff fa81 	bl	8006ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079e8:	2100      	movs	r1, #0
 80079ea:	0018      	movs	r0, r3
 80079ec:	f007 fa5e 	bl	800eeac <HAL_UARTEx_SetRxFifoThreshold>
 80079f0:	1e03      	subs	r3, r0, #0
 80079f2:	d001      	beq.n	80079f8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80079f4:	f7ff fa78 	bl	8006ee8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80079f8:	4b05      	ldr	r3, [pc, #20]	@ (8007a10 <MX_USART2_UART_Init+0x98>)
 80079fa:	0018      	movs	r0, r3
 80079fc:	f007 f99e 	bl	800ed3c <HAL_UARTEx_EnableFifoMode>
 8007a00:	1e03      	subs	r3, r0, #0
 8007a02:	d001      	beq.n	8007a08 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8007a04:	f7ff fa70 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007a08:	46c0      	nop			@ (mov r8, r8)
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	2000278c 	.word	0x2000278c
 8007a14:	40004400 	.word	0x40004400

08007a18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007a1c:	4b16      	ldr	r3, [pc, #88]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a1e:	4a17      	ldr	r2, [pc, #92]	@ (8007a7c <MX_USART3_UART_Init+0x64>)
 8007a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007a22:	4b15      	ldr	r3, [pc, #84]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a24:	22e1      	movs	r2, #225	@ 0xe1
 8007a26:	0252      	lsls	r2, r2, #9
 8007a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007a2a:	4b13      	ldr	r3, [pc, #76]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a30:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007a36:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a3e:	220c      	movs	r2, #12
 8007a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a42:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a48:	4b0b      	ldr	r3, [pc, #44]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007a54:	4b08      	ldr	r3, [pc, #32]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a5a:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007a60:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <MX_USART3_UART_Init+0x60>)
 8007a62:	0018      	movs	r0, r3
 8007a64:	f004 fde0 	bl	800c628 <HAL_UART_Init>
 8007a68:	1e03      	subs	r3, r0, #0
 8007a6a:	d001      	beq.n	8007a70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007a6c:	f7ff fa3c 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007a70:	46c0      	nop			@ (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			@ (mov r8, r8)
 8007a78:	20002820 	.word	0x20002820
 8007a7c:	40004800 	.word	0x40004800

08007a80 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8007a84:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007a86:	4a17      	ldr	r2, [pc, #92]	@ (8007ae4 <MX_USART4_UART_Init+0x64>)
 8007a88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007a8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007a8c:	22e1      	movs	r2, #225	@ 0xe1
 8007a8e:	0252      	lsls	r2, r2, #9
 8007a90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007a98:	4b11      	ldr	r3, [pc, #68]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007aa6:	220c      	movs	r2, #12
 8007aa8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007abc:	4b08      	ldr	r3, [pc, #32]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ac2:	4b07      	ldr	r3, [pc, #28]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007ac8:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <MX_USART4_UART_Init+0x60>)
 8007aca:	0018      	movs	r0, r3
 8007acc:	f004 fdac 	bl	800c628 <HAL_UART_Init>
 8007ad0:	1e03      	subs	r3, r0, #0
 8007ad2:	d001      	beq.n	8007ad8 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8007ad4:	f7ff fa08 	bl	8006ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007ad8:	46c0      	nop			@ (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	200028b4 	.word	0x200028b4
 8007ae4:	40004c00 	.word	0x40004c00

08007ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b09d      	sub	sp, #116	@ 0x74
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007af0:	235c      	movs	r3, #92	@ 0x5c
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	0018      	movs	r0, r3
 8007af6:	2314      	movs	r3, #20
 8007af8:	001a      	movs	r2, r3
 8007afa:	2100      	movs	r1, #0
 8007afc:	f00b f9f4 	bl	8012ee8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b00:	2428      	movs	r4, #40	@ 0x28
 8007b02:	193b      	adds	r3, r7, r4
 8007b04:	0018      	movs	r0, r3
 8007b06:	2334      	movs	r3, #52	@ 0x34
 8007b08:	001a      	movs	r2, r3
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	f00b f9ec 	bl	8012ee8 <memset>
  if(uartHandle->Instance==USART1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a96      	ldr	r2, [pc, #600]	@ (8007d70 <HAL_UART_MspInit+0x288>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d15c      	bne.n	8007bd4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007b1a:	193b      	adds	r3, r7, r4
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007b20:	193b      	adds	r3, r7, r4
 8007b22:	2200      	movs	r2, #0
 8007b24:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b26:	193b      	adds	r3, r7, r4
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f002 febd 	bl	800a8a8 <HAL_RCCEx_PeriphCLKConfig>
 8007b2e:	1e03      	subs	r3, r0, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007b32:	f7ff f9d9 	bl	8006ee8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007b36:	4b8f      	ldr	r3, [pc, #572]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b3a:	4b8e      	ldr	r3, [pc, #568]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007b3c:	2180      	movs	r1, #128	@ 0x80
 8007b3e:	01c9      	lsls	r1, r1, #7
 8007b40:	430a      	orrs	r2, r1
 8007b42:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b44:	4b8b      	ldr	r3, [pc, #556]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b48:	2380      	movs	r3, #128	@ 0x80
 8007b4a:	01db      	lsls	r3, r3, #7
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b52:	4b88      	ldr	r3, [pc, #544]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b56:	4b87      	ldr	r3, [pc, #540]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007b58:	2102      	movs	r1, #2
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b5e:	4b85      	ldr	r3, [pc, #532]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b62:	2202      	movs	r2, #2
 8007b64:	4013      	ands	r3, r2
 8007b66:	623b      	str	r3, [r7, #32]
 8007b68:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b6a:	245c      	movs	r4, #92	@ 0x5c
 8007b6c:	193b      	adds	r3, r7, r4
 8007b6e:	2208      	movs	r2, #8
 8007b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b72:	193b      	adds	r3, r7, r4
 8007b74:	2202      	movs	r2, #2
 8007b76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b78:	193b      	adds	r3, r7, r4
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b7e:	193b      	adds	r3, r7, r4
 8007b80:	2200      	movs	r2, #0
 8007b82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007b84:	193b      	adds	r3, r7, r4
 8007b86:	2204      	movs	r2, #4
 8007b88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b8a:	193b      	adds	r3, r7, r4
 8007b8c:	4a7a      	ldr	r2, [pc, #488]	@ (8007d78 <HAL_UART_MspInit+0x290>)
 8007b8e:	0019      	movs	r1, r3
 8007b90:	0010      	movs	r0, r2
 8007b92:	f000 fce7 	bl	8008564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b96:	0021      	movs	r1, r4
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	22c0      	movs	r2, #192	@ 0xc0
 8007b9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9e:	187b      	adds	r3, r7, r1
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	187b      	adds	r3, r7, r1
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007baa:	187b      	adds	r3, r7, r1
 8007bac:	2200      	movs	r2, #0
 8007bae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bb6:	187b      	adds	r3, r7, r1
 8007bb8:	4a6f      	ldr	r2, [pc, #444]	@ (8007d78 <HAL_UART_MspInit+0x290>)
 8007bba:	0019      	movs	r1, r3
 8007bbc:	0010      	movs	r0, r2
 8007bbe:	f000 fcd1 	bl	8008564 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	201b      	movs	r0, #27
 8007bc8:	f000 fa1c 	bl	8008004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007bcc:	201b      	movs	r0, #27
 8007bce:	f000 fa2e 	bl	800802e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007bd2:	e0c9      	b.n	8007d68 <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART2)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a68      	ldr	r2, [pc, #416]	@ (8007d7c <HAL_UART_MspInit+0x294>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d147      	bne.n	8007c6e <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007bde:	2128      	movs	r1, #40	@ 0x28
 8007be0:	187b      	adds	r3, r7, r1
 8007be2:	2202      	movs	r2, #2
 8007be4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007be6:	187b      	adds	r3, r7, r1
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f002 fe5a 	bl	800a8a8 <HAL_RCCEx_PeriphCLKConfig>
 8007bf4:	1e03      	subs	r3, r0, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_UART_MspInit+0x114>
      Error_Handler();
 8007bf8:	f7ff f976 	bl	8006ee8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007bfc:	4b5d      	ldr	r3, [pc, #372]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c00:	4b5c      	ldr	r3, [pc, #368]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c02:	2180      	movs	r1, #128	@ 0x80
 8007c04:	0289      	lsls	r1, r1, #10
 8007c06:	430a      	orrs	r2, r1
 8007c08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c0e:	2380      	movs	r3, #128	@ 0x80
 8007c10:	029b      	lsls	r3, r3, #10
 8007c12:	4013      	ands	r3, r2
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c18:	4b56      	ldr	r3, [pc, #344]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c1c:	4b55      	ldr	r3, [pc, #340]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c1e:	2108      	movs	r1, #8
 8007c20:	430a      	orrs	r2, r1
 8007c22:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c24:	4b53      	ldr	r3, [pc, #332]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c28:	2208      	movs	r2, #8
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007c30:	215c      	movs	r1, #92	@ 0x5c
 8007c32:	187b      	adds	r3, r7, r1
 8007c34:	2260      	movs	r2, #96	@ 0x60
 8007c36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c38:	187b      	adds	r3, r7, r1
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3e:	187b      	adds	r3, r7, r1
 8007c40:	2200      	movs	r2, #0
 8007c42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c44:	187b      	adds	r3, r7, r1
 8007c46:	2200      	movs	r2, #0
 8007c48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8007c4a:	187b      	adds	r3, r7, r1
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c50:	187b      	adds	r3, r7, r1
 8007c52:	4a4b      	ldr	r2, [pc, #300]	@ (8007d80 <HAL_UART_MspInit+0x298>)
 8007c54:	0019      	movs	r1, r3
 8007c56:	0010      	movs	r0, r2
 8007c58:	f000 fc84 	bl	8008564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2103      	movs	r1, #3
 8007c60:	201c      	movs	r0, #28
 8007c62:	f000 f9cf 	bl	8008004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007c66:	201c      	movs	r0, #28
 8007c68:	f000 f9e1 	bl	800802e <HAL_NVIC_EnableIRQ>
}
 8007c6c:	e07c      	b.n	8007d68 <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART3)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a44      	ldr	r2, [pc, #272]	@ (8007d84 <HAL_UART_MspInit+0x29c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d139      	bne.n	8007cec <HAL_UART_MspInit+0x204>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007c78:	4b3e      	ldr	r3, [pc, #248]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c7e:	2180      	movs	r1, #128	@ 0x80
 8007c80:	02c9      	lsls	r1, r1, #11
 8007c82:	430a      	orrs	r2, r1
 8007c84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007c86:	4b3b      	ldr	r3, [pc, #236]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c8a:	2380      	movs	r3, #128	@ 0x80
 8007c8c:	02db      	lsls	r3, r3, #11
 8007c8e:	4013      	ands	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c94:	4b37      	ldr	r3, [pc, #220]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c98:	4b36      	ldr	r3, [pc, #216]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ca0:	4b34      	ldr	r3, [pc, #208]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]
 8007caa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007cac:	215c      	movs	r1, #92	@ 0x5c
 8007cae:	187b      	adds	r3, r7, r1
 8007cb0:	22c0      	movs	r2, #192	@ 0xc0
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb6:	187b      	adds	r3, r7, r1
 8007cb8:	2202      	movs	r2, #2
 8007cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbc:	187b      	adds	r3, r7, r1
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007cc8:	187b      	adds	r3, r7, r1
 8007cca:	2204      	movs	r2, #4
 8007ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cce:	187b      	adds	r3, r7, r1
 8007cd0:	4a29      	ldr	r2, [pc, #164]	@ (8007d78 <HAL_UART_MspInit+0x290>)
 8007cd2:	0019      	movs	r1, r3
 8007cd4:	0010      	movs	r0, r2
 8007cd6:	f000 fc45 	bl	8008564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2103      	movs	r1, #3
 8007cde:	201d      	movs	r0, #29
 8007ce0:	f000 f990 	bl	8008004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007ce4:	201d      	movs	r0, #29
 8007ce6:	f000 f9a2 	bl	800802e <HAL_NVIC_EnableIRQ>
}
 8007cea:	e03d      	b.n	8007d68 <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART4)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a25      	ldr	r2, [pc, #148]	@ (8007d88 <HAL_UART_MspInit+0x2a0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d138      	bne.n	8007d68 <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007cfc:	2180      	movs	r1, #128	@ 0x80
 8007cfe:	0309      	lsls	r1, r1, #12
 8007d00:	430a      	orrs	r2, r1
 8007d02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007d04:	4b1b      	ldr	r3, [pc, #108]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d08:	2380      	movs	r3, #128	@ 0x80
 8007d0a:	031b      	lsls	r3, r3, #12
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d12:	4b18      	ldr	r3, [pc, #96]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d16:	4b17      	ldr	r3, [pc, #92]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007d18:	2104      	movs	r1, #4
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d1e:	4b15      	ldr	r3, [pc, #84]	@ (8007d74 <HAL_UART_MspInit+0x28c>)
 8007d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d22:	2204      	movs	r2, #4
 8007d24:	4013      	ands	r3, r2
 8007d26:	60bb      	str	r3, [r7, #8]
 8007d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8007d2a:	215c      	movs	r1, #92	@ 0x5c
 8007d2c:	187b      	adds	r3, r7, r1
 8007d2e:	22c0      	movs	r2, #192	@ 0xc0
 8007d30:	0112      	lsls	r2, r2, #4
 8007d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d34:	187b      	adds	r3, r7, r1
 8007d36:	2202      	movs	r2, #2
 8007d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3a:	187b      	adds	r3, r7, r1
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	2200      	movs	r2, #0
 8007d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 8007d46:	187b      	adds	r3, r7, r1
 8007d48:	2201      	movs	r2, #1
 8007d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d4c:	187b      	adds	r3, r7, r1
 8007d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007d8c <HAL_UART_MspInit+0x2a4>)
 8007d50:	0019      	movs	r1, r3
 8007d52:	0010      	movs	r0, r2
 8007d54:	f000 fc06 	bl	8008564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2103      	movs	r1, #3
 8007d5c:	201d      	movs	r0, #29
 8007d5e:	f000 f951 	bl	8008004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007d62:	201d      	movs	r0, #29
 8007d64:	f000 f963 	bl	800802e <HAL_NVIC_EnableIRQ>
}
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b01d      	add	sp, #116	@ 0x74
 8007d6e:	bd90      	pop	{r4, r7, pc}
 8007d70:	40013800 	.word	0x40013800
 8007d74:	40021000 	.word	0x40021000
 8007d78:	50000400 	.word	0x50000400
 8007d7c:	40004400 	.word	0x40004400
 8007d80:	50000c00 	.word	0x50000c00
 8007d84:	40004800 	.word	0x40004800
 8007d88:	40004c00 	.word	0x40004c00
 8007d8c:	50000800 	.word	0x50000800

08007d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007d90:	480d      	ldr	r0, [pc, #52]	@ (8007dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007d94:	f7ff fc9a 	bl	80076cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d98:	480c      	ldr	r0, [pc, #48]	@ (8007dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8007d9a:	490d      	ldr	r1, [pc, #52]	@ (8007dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd4 <LoopForever+0xe>)
  movs r3, #0
 8007d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007da0:	e002      	b.n	8007da8 <LoopCopyDataInit>

08007da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007da6:	3304      	adds	r3, #4

08007da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007dac:	d3f9      	bcc.n	8007da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007dae:	4a0a      	ldr	r2, [pc, #40]	@ (8007dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007db0:	4c0a      	ldr	r4, [pc, #40]	@ (8007ddc <LoopForever+0x16>)
  movs r3, #0
 8007db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007db4:	e001      	b.n	8007dba <LoopFillZerobss>

08007db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007db8:	3204      	adds	r2, #4

08007dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007dbc:	d3fb      	bcc.n	8007db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007dbe:	f00b f953 	bl	8013068 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007dc2:	f7fe ffb7 	bl	8006d34 <main>

08007dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8007dc6:	e7fe      	b.n	8007dc6 <LoopForever>
  ldr   r0, =_estack
 8007dc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007dd0:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8007dd4:	08017584 	.word	0x08017584
  ldr r2, =_sbss
 8007dd8:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8007ddc:	20007294 	.word	0x20007294

08007de0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007de0:	e7fe      	b.n	8007de0 <ADC1_COMP_IRQHandler>
	...

08007de4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007dea:	1dfb      	adds	r3, r7, #7
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007df0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <HAL_Init+0x3c>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <HAL_Init+0x3c>)
 8007df6:	2180      	movs	r1, #128	@ 0x80
 8007df8:	0049      	lsls	r1, r1, #1
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007dfe:	2003      	movs	r0, #3
 8007e00:	f7ff fa90 	bl	8007324 <HAL_InitTick>
 8007e04:	1e03      	subs	r3, r0, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007e08:	1dfb      	adds	r3, r7, #7
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e001      	b.n	8007e14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007e10:	f7ff fa58 	bl	80072c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007e14:	1dfb      	adds	r3, r7, #7
 8007e16:	781b      	ldrb	r3, [r3, #0]
}
 8007e18:	0018      	movs	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b002      	add	sp, #8
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40022000 	.word	0x40022000

08007e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <HAL_IncTick+0x1c>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	001a      	movs	r2, r3
 8007e2e:	4b05      	ldr	r3, [pc, #20]	@ (8007e44 <HAL_IncTick+0x20>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	18d2      	adds	r2, r2, r3
 8007e34:	4b03      	ldr	r3, [pc, #12]	@ (8007e44 <HAL_IncTick+0x20>)
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	46c0      	nop			@ (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	2000007c 	.word	0x2000007c
 8007e44:	20002948 	.word	0x20002948

08007e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8007e4c:	4b02      	ldr	r3, [pc, #8]	@ (8007e58 <HAL_GetTick+0x10>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
}
 8007e50:	0018      	movs	r0, r3
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	20002948 	.word	0x20002948

08007e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e64:	f7ff fff0 	bl	8007e48 <HAL_GetTick>
 8007e68:	0003      	movs	r3, r0
 8007e6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	d005      	beq.n	8007e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea0 <HAL_Delay+0x44>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	189b      	adds	r3, r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e82:	46c0      	nop			@ (mov r8, r8)
 8007e84:	f7ff ffe0 	bl	8007e48 <HAL_GetTick>
 8007e88:	0002      	movs	r2, r0
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d8f7      	bhi.n	8007e84 <HAL_Delay+0x28>
  {
  }
}
 8007e94:	46c0      	nop			@ (mov r8, r8)
 8007e96:	46c0      	nop			@ (mov r8, r8)
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b004      	add	sp, #16
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	2000007c 	.word	0x2000007c

08007ea4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a06      	ldr	r2, [pc, #24]	@ (8007ecc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	0019      	movs	r1, r3
 8007eb6:	4b04      	ldr	r3, [pc, #16]	@ (8007ec8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]
}
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b002      	add	sp, #8
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	fffff9ff 	.word	0xfffff9ff

08007ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	0002      	movs	r2, r0
 8007ed8:	1dfb      	adds	r3, r7, #7
 8007eda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007edc:	1dfb      	adds	r3, r7, #7
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ee2:	d809      	bhi.n	8007ef8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ee4:	1dfb      	adds	r3, r7, #7
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	001a      	movs	r2, r3
 8007eea:	231f      	movs	r3, #31
 8007eec:	401a      	ands	r2, r3
 8007eee:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <__NVIC_EnableIRQ+0x30>)
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4091      	lsls	r1, r2
 8007ef4:	000a      	movs	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b002      	add	sp, #8
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	e000e100 	.word	0xe000e100

08007f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	0002      	movs	r2, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	1dfb      	adds	r3, r7, #7
 8007f10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f12:	1dfb      	adds	r3, r7, #7
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f18:	d828      	bhi.n	8007f6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8007fd8 <__NVIC_SetPriority+0xd4>)
 8007f1c:	1dfb      	adds	r3, r7, #7
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b25b      	sxtb	r3, r3
 8007f22:	089b      	lsrs	r3, r3, #2
 8007f24:	33c0      	adds	r3, #192	@ 0xc0
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	589b      	ldr	r3, [r3, r2]
 8007f2a:	1dfa      	adds	r2, r7, #7
 8007f2c:	7812      	ldrb	r2, [r2, #0]
 8007f2e:	0011      	movs	r1, r2
 8007f30:	2203      	movs	r2, #3
 8007f32:	400a      	ands	r2, r1
 8007f34:	00d2      	lsls	r2, r2, #3
 8007f36:	21ff      	movs	r1, #255	@ 0xff
 8007f38:	4091      	lsls	r1, r2
 8007f3a:	000a      	movs	r2, r1
 8007f3c:	43d2      	mvns	r2, r2
 8007f3e:	401a      	ands	r2, r3
 8007f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	22ff      	movs	r2, #255	@ 0xff
 8007f48:	401a      	ands	r2, r3
 8007f4a:	1dfb      	adds	r3, r7, #7
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	0018      	movs	r0, r3
 8007f50:	2303      	movs	r3, #3
 8007f52:	4003      	ands	r3, r0
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f58:	481f      	ldr	r0, [pc, #124]	@ (8007fd8 <__NVIC_SetPriority+0xd4>)
 8007f5a:	1dfb      	adds	r3, r7, #7
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b25b      	sxtb	r3, r3
 8007f60:	089b      	lsrs	r3, r3, #2
 8007f62:	430a      	orrs	r2, r1
 8007f64:	33c0      	adds	r3, #192	@ 0xc0
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007f6a:	e031      	b.n	8007fd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007fdc <__NVIC_SetPriority+0xd8>)
 8007f6e:	1dfb      	adds	r3, r7, #7
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	0019      	movs	r1, r3
 8007f74:	230f      	movs	r3, #15
 8007f76:	400b      	ands	r3, r1
 8007f78:	3b08      	subs	r3, #8
 8007f7a:	089b      	lsrs	r3, r3, #2
 8007f7c:	3306      	adds	r3, #6
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	18d3      	adds	r3, r2, r3
 8007f82:	3304      	adds	r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	1dfa      	adds	r2, r7, #7
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	400a      	ands	r2, r1
 8007f90:	00d2      	lsls	r2, r2, #3
 8007f92:	21ff      	movs	r1, #255	@ 0xff
 8007f94:	4091      	lsls	r1, r2
 8007f96:	000a      	movs	r2, r1
 8007f98:	43d2      	mvns	r2, r2
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	22ff      	movs	r2, #255	@ 0xff
 8007fa4:	401a      	ands	r2, r3
 8007fa6:	1dfb      	adds	r3, r7, #7
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	0018      	movs	r0, r3
 8007fac:	2303      	movs	r3, #3
 8007fae:	4003      	ands	r3, r0
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fb4:	4809      	ldr	r0, [pc, #36]	@ (8007fdc <__NVIC_SetPriority+0xd8>)
 8007fb6:	1dfb      	adds	r3, r7, #7
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	001c      	movs	r4, r3
 8007fbc:	230f      	movs	r3, #15
 8007fbe:	4023      	ands	r3, r4
 8007fc0:	3b08      	subs	r3, #8
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	3306      	adds	r3, #6
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	18c3      	adds	r3, r0, r3
 8007fcc:	3304      	adds	r3, #4
 8007fce:	601a      	str	r2, [r3, #0]
}
 8007fd0:	46c0      	nop			@ (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b003      	add	sp, #12
 8007fd6:	bd90      	pop	{r4, r7, pc}
 8007fd8:	e000e100 	.word	0xe000e100
 8007fdc:	e000ed00 	.word	0xe000ed00

08007fe0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007fe4:	f3bf 8f4f 	dsb	sy
}
 8007fe8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fea:	4b04      	ldr	r3, [pc, #16]	@ (8007ffc <__NVIC_SystemReset+0x1c>)
 8007fec:	4a04      	ldr	r2, [pc, #16]	@ (8008000 <__NVIC_SystemReset+0x20>)
 8007fee:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ff0:	f3bf 8f4f 	dsb	sy
}
 8007ff4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	e7fd      	b.n	8007ff6 <__NVIC_SystemReset+0x16>
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	e000ed00 	.word	0xe000ed00
 8008000:	05fa0004 	.word	0x05fa0004

08008004 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	210f      	movs	r1, #15
 8008010:	187b      	adds	r3, r7, r1
 8008012:	1c02      	adds	r2, r0, #0
 8008014:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	187b      	adds	r3, r7, r1
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b25b      	sxtb	r3, r3
 800801e:	0011      	movs	r1, r2
 8008020:	0018      	movs	r0, r3
 8008022:	f7ff ff6f 	bl	8007f04 <__NVIC_SetPriority>
}
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	46bd      	mov	sp, r7
 800802a:	b004      	add	sp, #16
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	0002      	movs	r2, r0
 8008036:	1dfb      	adds	r3, r7, #7
 8008038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800803a:	1dfb      	adds	r3, r7, #7
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b25b      	sxtb	r3, r3
 8008040:	0018      	movs	r0, r3
 8008042:	f7ff ff45 	bl	8007ed0 <__NVIC_EnableIRQ>
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b002      	add	sp, #8
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008052:	f7ff ffc5 	bl	8007fe0 <__NVIC_SystemReset>
	...

08008058 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e050      	b.n	800810c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2225      	movs	r2, #37	@ 0x25
 800806e:	5c9b      	ldrb	r3, [r3, r2]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d008      	beq.n	8008088 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2204      	movs	r2, #4
 800807a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2224      	movs	r2, #36	@ 0x24
 8008080:	2100      	movs	r1, #0
 8008082:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e041      	b.n	800810c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	210e      	movs	r1, #14
 8008094:	438a      	bics	r2, r1
 8008096:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a2:	491c      	ldr	r1, [pc, #112]	@ (8008114 <HAL_DMA_Abort+0xbc>)
 80080a4:	400a      	ands	r2, r1
 80080a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2101      	movs	r1, #1
 80080b4:	438a      	bics	r2, r1
 80080b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80080b8:	4b17      	ldr	r3, [pc, #92]	@ (8008118 <HAL_DMA_Abort+0xc0>)
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c0:	221c      	movs	r2, #28
 80080c2:	4013      	ands	r3, r2
 80080c4:	2201      	movs	r2, #1
 80080c6:	409a      	lsls	r2, r3
 80080c8:	4b13      	ldr	r3, [pc, #76]	@ (8008118 <HAL_DMA_Abort+0xc0>)
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80080d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ea:	490a      	ldr	r1, [pc, #40]	@ (8008114 <HAL_DMA_Abort+0xbc>)
 80080ec:	400a      	ands	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80080f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2225      	movs	r2, #37	@ 0x25
 80080fe:	2101      	movs	r1, #1
 8008100:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2224      	movs	r2, #36	@ 0x24
 8008106:	2100      	movs	r1, #0
 8008108:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	0018      	movs	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	b002      	add	sp, #8
 8008112:	bd80      	pop	{r7, pc}
 8008114:	fffffeff 	.word	0xfffffeff
 8008118:	40020000 	.word	0x40020000

0800811c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008124:	210f      	movs	r1, #15
 8008126:	187b      	adds	r3, r7, r1
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2225      	movs	r2, #37	@ 0x25
 8008130:	5c9b      	ldrb	r3, [r3, r2]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d006      	beq.n	8008146 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2204      	movs	r2, #4
 800813c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800813e:	187b      	adds	r3, r7, r1
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e049      	b.n	80081da <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	210e      	movs	r1, #14
 8008152:	438a      	bics	r2, r1
 8008154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2101      	movs	r1, #1
 8008162:	438a      	bics	r2, r1
 8008164:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008170:	491d      	ldr	r1, [pc, #116]	@ (80081e8 <HAL_DMA_Abort_IT+0xcc>)
 8008172:	400a      	ands	r2, r1
 8008174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008176:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <HAL_DMA_Abort_IT+0xd0>)
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817e:	221c      	movs	r2, #28
 8008180:	4013      	ands	r3, r2
 8008182:	2201      	movs	r2, #1
 8008184:	409a      	lsls	r2, r3
 8008186:	4b19      	ldr	r3, [pc, #100]	@ (80081ec <HAL_DMA_Abort_IT+0xd0>)
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008194:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a8:	490f      	ldr	r1, [pc, #60]	@ (80081e8 <HAL_DMA_Abort_IT+0xcc>)
 80081aa:	400a      	ands	r2, r1
 80081ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80081b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2225      	movs	r2, #37	@ 0x25
 80081bc:	2101      	movs	r1, #1
 80081be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2224      	movs	r2, #36	@ 0x24
 80081c4:	2100      	movs	r1, #0
 80081c6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	0010      	movs	r0, r2
 80081d8:	4798      	blx	r3
    }
  }
  return status;
 80081da:	230f      	movs	r3, #15
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	781b      	ldrb	r3, [r3, #0]
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b004      	add	sp, #16
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	fffffeff 	.word	0xfffffeff
 80081ec:	40020000 	.word	0x40020000

080081f0 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80081fc:	0018      	movs	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008204:	b5b0      	push	{r4, r5, r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	603a      	str	r2, [r7, #0]
 8008210:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008212:	4b21      	ldr	r3, [pc, #132]	@ (8008298 <HAL_FLASH_Program+0x94>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <HAL_FLASH_Program+0x1a>
 800821a:	2302      	movs	r3, #2
 800821c:	e038      	b.n	8008290 <HAL_FLASH_Program+0x8c>
 800821e:	4b1e      	ldr	r3, [pc, #120]	@ (8008298 <HAL_FLASH_Program+0x94>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008224:	4b1c      	ldr	r3, [pc, #112]	@ (8008298 <HAL_FLASH_Program+0x94>)
 8008226:	2200      	movs	r2, #0
 8008228:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800822a:	2517      	movs	r5, #23
 800822c:	197c      	adds	r4, r7, r5
 800822e:	23fa      	movs	r3, #250	@ 0xfa
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	0018      	movs	r0, r3
 8008234:	f000 f884 	bl	8008340 <FLASH_WaitForLastOperation>
 8008238:	0003      	movs	r3, r0
 800823a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800823c:	197b      	adds	r3, r7, r5
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d11f      	bne.n	8008284 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d106      	bne.n	8008258 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	0008      	movs	r0, r1
 8008252:	f000 f8c3 	bl	80083dc <FLASH_Program_DoubleWord>
 8008256:	e005      	b.n	8008264 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	0011      	movs	r1, r2
 800825e:	0018      	movs	r0, r3
 8008260:	f00e fb5a 	bl	8016918 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008264:	2317      	movs	r3, #23
 8008266:	18fc      	adds	r4, r7, r3
 8008268:	23fa      	movs	r3, #250	@ 0xfa
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	0018      	movs	r0, r3
 800826e:	f000 f867 	bl	8008340 <FLASH_WaitForLastOperation>
 8008272:	0003      	movs	r3, r0
 8008274:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008276:	4b09      	ldr	r3, [pc, #36]	@ (800829c <HAL_FLASH_Program+0x98>)
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	43d9      	mvns	r1, r3
 800827e:	4b07      	ldr	r3, [pc, #28]	@ (800829c <HAL_FLASH_Program+0x98>)
 8008280:	400a      	ands	r2, r1
 8008282:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008284:	4b04      	ldr	r3, [pc, #16]	@ (8008298 <HAL_FLASH_Program+0x94>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800828a:	2317      	movs	r3, #23
 800828c:	18fb      	adds	r3, r7, r3
 800828e:	781b      	ldrb	r3, [r3, #0]
}
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b006      	add	sp, #24
 8008296:	bdb0      	pop	{r4, r5, r7, pc}
 8008298:	2000294c 	.word	0x2000294c
 800829c:	40022000 	.word	0x40022000

080082a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80082a6:	1dfb      	adds	r3, r7, #7
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80082ac:	4b0b      	ldr	r3, [pc, #44]	@ (80082dc <HAL_FLASH_Unlock+0x3c>)
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0c      	bge.n	80082ce <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80082b4:	4b09      	ldr	r3, [pc, #36]	@ (80082dc <HAL_FLASH_Unlock+0x3c>)
 80082b6:	4a0a      	ldr	r2, [pc, #40]	@ (80082e0 <HAL_FLASH_Unlock+0x40>)
 80082b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80082ba:	4b08      	ldr	r3, [pc, #32]	@ (80082dc <HAL_FLASH_Unlock+0x3c>)
 80082bc:	4a09      	ldr	r2, [pc, #36]	@ (80082e4 <HAL_FLASH_Unlock+0x44>)
 80082be:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80082c0:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <HAL_FLASH_Unlock+0x3c>)
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	da02      	bge.n	80082ce <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80082c8:	1dfb      	adds	r3, r7, #7
 80082ca:	2201      	movs	r2, #1
 80082cc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	781b      	ldrb	r3, [r3, #0]
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b002      	add	sp, #8
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	40022000 	.word	0x40022000
 80082e0:	45670123 	.word	0x45670123
 80082e4:	cdef89ab 	.word	0xcdef89ab

080082e8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80082ee:	1dfb      	adds	r3, r7, #7
 80082f0:	2201      	movs	r2, #1
 80082f2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80082f4:	23fa      	movs	r3, #250	@ 0xfa
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	0018      	movs	r0, r3
 80082fa:	f000 f821 	bl	8008340 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80082fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008328 <HAL_FLASH_Lock+0x40>)
 8008300:	695a      	ldr	r2, [r3, #20]
 8008302:	4b09      	ldr	r3, [pc, #36]	@ (8008328 <HAL_FLASH_Lock+0x40>)
 8008304:	2180      	movs	r1, #128	@ 0x80
 8008306:	0609      	lsls	r1, r1, #24
 8008308:	430a      	orrs	r2, r1
 800830a:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800830c:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <HAL_FLASH_Lock+0x40>)
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	da02      	bge.n	800831a <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008314:	1dfb      	adds	r3, r7, #7
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800831a:	1dfb      	adds	r3, r7, #7
 800831c:	781b      	ldrb	r3, [r3, #0]
}
 800831e:	0018      	movs	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	b002      	add	sp, #8
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	40022000 	.word	0x40022000

0800832c <HAL_FLASH_GetError>:
  *            @arg @ref HAL_FLASH_ERROR_OPTV Option validity error
  *            @arg @ref HAL_FLASH_ERROR_ECCD two ECC errors have been detected
  * @note (*) availability depends on devices
  */
uint32_t HAL_FLASH_GetError(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8008330:	4b02      	ldr	r3, [pc, #8]	@ (800833c <HAL_FLASH_GetError+0x10>)
 8008332:	685b      	ldr	r3, [r3, #4]
}
 8008334:	0018      	movs	r0, r3
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	2000294c 	.word	0x2000294c

08008340 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008348:	f7ff fd7e 	bl	8007e48 <HAL_GetTick>
 800834c:	0003      	movs	r3, r0
 800834e:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008350:	2380      	movs	r3, #128	@ 0x80
 8008352:	025b      	lsls	r3, r3, #9
 8008354:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8008356:	e00c      	b.n	8008372 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3301      	adds	r3, #1
 800835c:	d009      	beq.n	8008372 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800835e:	f7ff fd73 	bl	8007e48 <HAL_GetTick>
 8008362:	0002      	movs	r2, r0
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d801      	bhi.n	8008372 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e028      	b.n	80083c4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8008372:	4b16      	ldr	r3, [pc, #88]	@ (80083cc <FLASH_WaitForLastOperation+0x8c>)
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	4013      	ands	r3, r2
 800837a:	d1ed      	bne.n	8008358 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800837c:	4b13      	ldr	r3, [pc, #76]	@ (80083cc <FLASH_WaitForLastOperation+0x8c>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4a13      	ldr	r2, [pc, #76]	@ (80083d0 <FLASH_WaitForLastOperation+0x90>)
 8008382:	4013      	ands	r3, r2
 8008384:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8008386:	4b11      	ldr	r3, [pc, #68]	@ (80083cc <FLASH_WaitForLastOperation+0x8c>)
 8008388:	4a12      	ldr	r2, [pc, #72]	@ (80083d4 <FLASH_WaitForLastOperation+0x94>)
 800838a:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d011      	beq.n	80083b6 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008392:	4b11      	ldr	r3, [pc, #68]	@ (80083d8 <FLASH_WaitForLastOperation+0x98>)
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e013      	b.n	80083c4 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3301      	adds	r3, #1
 80083a0:	d009      	beq.n	80083b6 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80083a2:	f7ff fd51 	bl	8007e48 <HAL_GetTick>
 80083a6:	0002      	movs	r2, r0
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d801      	bhi.n	80083b6 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e006      	b.n	80083c4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80083b6:	4b05      	ldr	r3, [pc, #20]	@ (80083cc <FLASH_WaitForLastOperation+0x8c>)
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	2380      	movs	r3, #128	@ 0x80
 80083bc:	02db      	lsls	r3, r3, #11
 80083be:	4013      	ands	r3, r2
 80083c0:	d1ec      	bne.n	800839c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b004      	add	sp, #16
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40022000 	.word	0x40022000
 80083d0:	0000c3fa 	.word	0x0000c3fa
 80083d4:	0000c3fb 	.word	0x0000c3fb
 80083d8:	2000294c 	.word	0x2000294c

080083dc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80083dc:	b5b0      	push	{r4, r5, r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	603a      	str	r2, [r7, #0]
 80083e6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80083e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008418 <FLASH_Program_DoubleWord+0x3c>)
 80083ea:	695a      	ldr	r2, [r3, #20]
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <FLASH_Program_DoubleWord+0x3c>)
 80083ee:	2101      	movs	r1, #1
 80083f0:	430a      	orrs	r2, r1
 80083f2:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80083fa:	f3bf 8f6f 	isb	sy
}
 80083fe:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	001c      	movs	r4, r3
 8008404:	2300      	movs	r3, #0
 8008406:	001d      	movs	r5, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3304      	adds	r3, #4
 800840c:	0022      	movs	r2, r4
 800840e:	601a      	str	r2, [r3, #0]
}
 8008410:	46c0      	nop			@ (mov r8, r8)
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bdb0      	pop	{r4, r5, r7, pc}
 8008418:	40022000 	.word	0x40022000

0800841c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008426:	4b35      	ldr	r3, [pc, #212]	@ (80084fc <HAL_FLASHEx_Erase+0xe0>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_FLASHEx_Erase+0x16>
 800842e:	2302      	movs	r3, #2
 8008430:	e05f      	b.n	80084f2 <HAL_FLASHEx_Erase+0xd6>
 8008432:	4b32      	ldr	r3, [pc, #200]	@ (80084fc <HAL_FLASHEx_Erase+0xe0>)
 8008434:	2201      	movs	r2, #1
 8008436:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008438:	4b30      	ldr	r3, [pc, #192]	@ (80084fc <HAL_FLASHEx_Erase+0xe0>)
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800843e:	250f      	movs	r5, #15
 8008440:	197c      	adds	r4, r7, r5
 8008442:	23fa      	movs	r3, #250	@ 0xfa
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	0018      	movs	r0, r3
 8008448:	f7ff ff7a 	bl	8008340 <FLASH_WaitForLastOperation>
 800844c:	0003      	movs	r3, r0
 800844e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008450:	002c      	movs	r4, r5
 8008452:	193b      	adds	r3, r7, r4
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d145      	bne.n	80084e6 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2204      	movs	r2, #4
 800845e:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b04      	cmp	r3, #4
 8008466:	d10d      	bne.n	8008484 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	0018      	movs	r0, r3
 800846e:	f000 f849 	bl	8008504 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008472:	193c      	adds	r4, r7, r4
 8008474:	23fa      	movs	r3, #250	@ 0xfa
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	0018      	movs	r0, r3
 800847a:	f7ff ff61 	bl	8008340 <FLASH_WaitForLastOperation>
 800847e:	0003      	movs	r3, r0
 8008480:	7023      	strb	r3, [r4, #0]
 8008482:	e030      	b.n	80084e6 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2201      	movs	r2, #1
 8008488:	4252      	negs	r2, r2
 800848a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	60bb      	str	r3, [r7, #8]
 8008492:	e01a      	b.n	80084ca <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f000 f845 	bl	800852c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80084a2:	250f      	movs	r5, #15
 80084a4:	197c      	adds	r4, r7, r5
 80084a6:	23fa      	movs	r3, #250	@ 0xfa
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	0018      	movs	r0, r3
 80084ac:	f7ff ff48 	bl	8008340 <FLASH_WaitForLastOperation>
 80084b0:	0003      	movs	r3, r0
 80084b2:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80084b4:	197b      	adds	r3, r7, r5
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	601a      	str	r2, [r3, #0]
          break;
 80084c2:	e00a      	b.n	80084da <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	3301      	adds	r3, #1
 80084c8:	60bb      	str	r3, [r7, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	18d3      	adds	r3, r2, r3
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d3dc      	bcc.n	8008494 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80084da:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <HAL_FLASHEx_Erase+0xe4>)
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	4b08      	ldr	r3, [pc, #32]	@ (8008500 <HAL_FLASHEx_Erase+0xe4>)
 80084e0:	2102      	movs	r1, #2
 80084e2:	438a      	bics	r2, r1
 80084e4:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80084e6:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <HAL_FLASHEx_Erase+0xe0>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80084ec:	230f      	movs	r3, #15
 80084ee:	18fb      	adds	r3, r7, r3
 80084f0:	781b      	ldrb	r3, [r3, #0]
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b004      	add	sp, #16
 80084f8:	bdb0      	pop	{r4, r5, r7, pc}
 80084fa:	46c0      	nop			@ (mov r8, r8)
 80084fc:	2000294c 	.word	0x2000294c
 8008500:	40022000 	.word	0x40022000

08008504 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <FLASH_MassErase+0x24>)
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	431a      	orrs	r2, r3
 8008514:	4b04      	ldr	r3, [pc, #16]	@ (8008528 <FLASH_MassErase+0x24>)
 8008516:	2180      	movs	r1, #128	@ 0x80
 8008518:	0249      	lsls	r1, r1, #9
 800851a:	430a      	orrs	r2, r1
 800851c:	615a      	str	r2, [r3, #20]
}
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	46bd      	mov	sp, r7
 8008522:	b002      	add	sp, #8
 8008524:	bd80      	pop	{r7, pc}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	40022000 	.word	0x40022000

0800852c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008536:	4b08      	ldr	r3, [pc, #32]	@ (8008558 <FLASH_PageErase+0x2c>)
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	4a08      	ldr	r2, [pc, #32]	@ (800855c <FLASH_PageErase+0x30>)
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	00da      	lsls	r2, r3, #3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	431a      	orrs	r2, r3
 8008548:	4b03      	ldr	r3, [pc, #12]	@ (8008558 <FLASH_PageErase+0x2c>)
 800854a:	4905      	ldr	r1, [pc, #20]	@ (8008560 <FLASH_PageErase+0x34>)
 800854c:	430a      	orrs	r2, r1
 800854e:	615a      	str	r2, [r3, #20]
}
 8008550:	46c0      	nop			@ (mov r8, r8)
 8008552:	46bd      	mov	sp, r7
 8008554:	b004      	add	sp, #16
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40022000 	.word	0x40022000
 800855c:	ffffe007 	.word	0xffffe007
 8008560:	00010002 	.word	0x00010002

08008564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800856e:	2300      	movs	r3, #0
 8008570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008572:	e147      	b.n	8008804 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2101      	movs	r1, #1
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4091      	lsls	r1, r2
 800857e:	000a      	movs	r2, r1
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d100      	bne.n	800858c <HAL_GPIO_Init+0x28>
 800858a:	e138      	b.n	80087fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2203      	movs	r2, #3
 8008592:	4013      	ands	r3, r2
 8008594:	2b01      	cmp	r3, #1
 8008596:	d005      	beq.n	80085a4 <HAL_GPIO_Init+0x40>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	2203      	movs	r2, #3
 800859e:	4013      	ands	r3, r2
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d130      	bne.n	8008606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	2203      	movs	r2, #3
 80085b0:	409a      	lsls	r2, r3
 80085b2:	0013      	movs	r3, r2
 80085b4:	43da      	mvns	r2, r3
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	4013      	ands	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	409a      	lsls	r2, r3
 80085c6:	0013      	movs	r3, r2
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085da:	2201      	movs	r2, #1
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	409a      	lsls	r2, r3
 80085e0:	0013      	movs	r3, r2
 80085e2:	43da      	mvns	r2, r3
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	4013      	ands	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	091b      	lsrs	r3, r3, #4
 80085f0:	2201      	movs	r2, #1
 80085f2:	401a      	ands	r2, r3
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	409a      	lsls	r2, r3
 80085f8:	0013      	movs	r3, r2
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2203      	movs	r2, #3
 800860c:	4013      	ands	r3, r2
 800860e:	2b03      	cmp	r3, #3
 8008610:	d017      	beq.n	8008642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	2203      	movs	r2, #3
 800861e:	409a      	lsls	r2, r3
 8008620:	0013      	movs	r3, r2
 8008622:	43da      	mvns	r2, r3
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4013      	ands	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	409a      	lsls	r2, r3
 8008634:	0013      	movs	r3, r2
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2203      	movs	r2, #3
 8008648:	4013      	ands	r3, r2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d123      	bne.n	8008696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	08da      	lsrs	r2, r3, #3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3208      	adds	r2, #8
 8008656:	0092      	lsls	r2, r2, #2
 8008658:	58d3      	ldr	r3, [r2, r3]
 800865a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2207      	movs	r2, #7
 8008660:	4013      	ands	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	220f      	movs	r2, #15
 8008666:	409a      	lsls	r2, r3
 8008668:	0013      	movs	r3, r2
 800866a:	43da      	mvns	r2, r3
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4013      	ands	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691a      	ldr	r2, [r3, #16]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2107      	movs	r1, #7
 800867a:	400b      	ands	r3, r1
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	409a      	lsls	r2, r3
 8008680:	0013      	movs	r3, r2
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	08da      	lsrs	r2, r3, #3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3208      	adds	r2, #8
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	6939      	ldr	r1, [r7, #16]
 8008694:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	2203      	movs	r2, #3
 80086a2:	409a      	lsls	r2, r3
 80086a4:	0013      	movs	r3, r2
 80086a6:	43da      	mvns	r2, r3
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4013      	ands	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2203      	movs	r2, #3
 80086b4:	401a      	ands	r2, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	409a      	lsls	r2, r3
 80086bc:	0013      	movs	r3, r2
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	23c0      	movs	r3, #192	@ 0xc0
 80086d0:	029b      	lsls	r3, r3, #10
 80086d2:	4013      	ands	r3, r2
 80086d4:	d100      	bne.n	80086d8 <HAL_GPIO_Init+0x174>
 80086d6:	e092      	b.n	80087fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80086d8:	4a50      	ldr	r2, [pc, #320]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	089b      	lsrs	r3, r3, #2
 80086de:	3318      	adds	r3, #24
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	589b      	ldr	r3, [r3, r2]
 80086e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2203      	movs	r2, #3
 80086ea:	4013      	ands	r3, r2
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	220f      	movs	r2, #15
 80086f0:	409a      	lsls	r2, r3
 80086f2:	0013      	movs	r3, r2
 80086f4:	43da      	mvns	r2, r3
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	4013      	ands	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	23a0      	movs	r3, #160	@ 0xa0
 8008700:	05db      	lsls	r3, r3, #23
 8008702:	429a      	cmp	r2, r3
 8008704:	d013      	beq.n	800872e <HAL_GPIO_Init+0x1ca>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a45      	ldr	r2, [pc, #276]	@ (8008820 <HAL_GPIO_Init+0x2bc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00d      	beq.n	800872a <HAL_GPIO_Init+0x1c6>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a44      	ldr	r2, [pc, #272]	@ (8008824 <HAL_GPIO_Init+0x2c0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d007      	beq.n	8008726 <HAL_GPIO_Init+0x1c2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a43      	ldr	r2, [pc, #268]	@ (8008828 <HAL_GPIO_Init+0x2c4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <HAL_GPIO_Init+0x1be>
 800871e:	2303      	movs	r3, #3
 8008720:	e006      	b.n	8008730 <HAL_GPIO_Init+0x1cc>
 8008722:	2305      	movs	r3, #5
 8008724:	e004      	b.n	8008730 <HAL_GPIO_Init+0x1cc>
 8008726:	2302      	movs	r3, #2
 8008728:	e002      	b.n	8008730 <HAL_GPIO_Init+0x1cc>
 800872a:	2301      	movs	r3, #1
 800872c:	e000      	b.n	8008730 <HAL_GPIO_Init+0x1cc>
 800872e:	2300      	movs	r3, #0
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	2103      	movs	r1, #3
 8008734:	400a      	ands	r2, r1
 8008736:	00d2      	lsls	r2, r2, #3
 8008738:	4093      	lsls	r3, r2
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008740:	4936      	ldr	r1, [pc, #216]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	089b      	lsrs	r3, r3, #2
 8008746:	3318      	adds	r3, #24
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800874e:	4b33      	ldr	r3, [pc, #204]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	43da      	mvns	r2, r3
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	4013      	ands	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	2380      	movs	r3, #128	@ 0x80
 8008764:	035b      	lsls	r3, r3, #13
 8008766:	4013      	ands	r3, r2
 8008768:	d003      	beq.n	8008772 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008772:	4b2a      	ldr	r3, [pc, #168]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008778:	4b28      	ldr	r3, [pc, #160]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	43da      	mvns	r2, r3
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4013      	ands	r3, r2
 8008786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	2380      	movs	r3, #128	@ 0x80
 800878e:	039b      	lsls	r3, r3, #14
 8008790:	4013      	ands	r3, r2
 8008792:	d003      	beq.n	800879c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800879c:	4b1f      	ldr	r3, [pc, #124]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80087a2:	4a1e      	ldr	r2, [pc, #120]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 80087a4:	2384      	movs	r3, #132	@ 0x84
 80087a6:	58d3      	ldr	r3, [r2, r3]
 80087a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	43da      	mvns	r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	4013      	ands	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	2380      	movs	r3, #128	@ 0x80
 80087ba:	029b      	lsls	r3, r3, #10
 80087bc:	4013      	ands	r3, r2
 80087be:	d003      	beq.n	80087c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80087c8:	4914      	ldr	r1, [pc, #80]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 80087ca:	2284      	movs	r2, #132	@ 0x84
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80087d0:	4a12      	ldr	r2, [pc, #72]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 80087d2:	2380      	movs	r3, #128	@ 0x80
 80087d4:	58d3      	ldr	r3, [r2, r3]
 80087d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	43da      	mvns	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4013      	ands	r3, r2
 80087e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	2380      	movs	r3, #128	@ 0x80
 80087e8:	025b      	lsls	r3, r3, #9
 80087ea:	4013      	ands	r3, r2
 80087ec:	d003      	beq.n	80087f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80087f6:	4909      	ldr	r1, [pc, #36]	@ (800881c <HAL_GPIO_Init+0x2b8>)
 80087f8:	2280      	movs	r2, #128	@ 0x80
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	3301      	adds	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	40da      	lsrs	r2, r3
 800880c:	1e13      	subs	r3, r2, #0
 800880e:	d000      	beq.n	8008812 <HAL_GPIO_Init+0x2ae>
 8008810:	e6b0      	b.n	8008574 <HAL_GPIO_Init+0x10>
  }
}
 8008812:	46c0      	nop			@ (mov r8, r8)
 8008814:	46c0      	nop			@ (mov r8, r8)
 8008816:	46bd      	mov	sp, r7
 8008818:	b006      	add	sp, #24
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40021800 	.word	0x40021800
 8008820:	50000400 	.word	0x50000400
 8008824:	50000800 	.word	0x50000800
 8008828:	50000c00 	.word	0x50000c00

0800882c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	000a      	movs	r2, r1
 8008836:	1cbb      	adds	r3, r7, #2
 8008838:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	1cba      	adds	r2, r7, #2
 8008840:	8812      	ldrh	r2, [r2, #0]
 8008842:	4013      	ands	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008846:	230f      	movs	r3, #15
 8008848:	18fb      	adds	r3, r7, r3
 800884a:	2201      	movs	r2, #1
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	e003      	b.n	8008858 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008850:	230f      	movs	r3, #15
 8008852:	18fb      	adds	r3, r7, r3
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008858:	230f      	movs	r3, #15
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	781b      	ldrb	r3, [r3, #0]
}
 800885e:	0018      	movs	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	b004      	add	sp, #16
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	0008      	movs	r0, r1
 8008870:	0011      	movs	r1, r2
 8008872:	1cbb      	adds	r3, r7, #2
 8008874:	1c02      	adds	r2, r0, #0
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	1c7b      	adds	r3, r7, #1
 800887a:	1c0a      	adds	r2, r1, #0
 800887c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800887e:	1c7b      	adds	r3, r7, #1
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d004      	beq.n	8008890 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008886:	1cbb      	adds	r3, r7, #2
 8008888:	881a      	ldrh	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800888e:	e003      	b.n	8008898 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008890:	1cbb      	adds	r3, r7, #2
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008898:	46c0      	nop			@ (mov r8, r8)
 800889a:	46bd      	mov	sp, r7
 800889c:	b002      	add	sp, #8
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	000a      	movs	r2, r1
 80088aa:	1cbb      	adds	r3, r7, #2
 80088ac:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80088b4:	1cbb      	adds	r3, r7, #2
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4013      	ands	r3, r2
 80088bc:	041a      	lsls	r2, r3, #16
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	1cb9      	adds	r1, r7, #2
 80088c4:	8809      	ldrh	r1, [r1, #0]
 80088c6:	400b      	ands	r3, r1
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	619a      	str	r2, [r3, #24]
}
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	46bd      	mov	sp, r7
 80088d2:	b004      	add	sp, #16
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e08f      	b.n	8008a0a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2241      	movs	r2, #65	@ 0x41
 80088ee:	5c9b      	ldrb	r3, [r3, r2]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d107      	bne.n	8008906 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2240      	movs	r2, #64	@ 0x40
 80088fa:	2100      	movs	r1, #0
 80088fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	0018      	movs	r0, r3
 8008902:	f7fd fcdf 	bl	80062c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2241      	movs	r2, #65	@ 0x41
 800890a:	2124      	movs	r1, #36	@ 0x24
 800890c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2101      	movs	r1, #1
 800891a:	438a      	bics	r2, r1
 800891c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	493b      	ldr	r1, [pc, #236]	@ (8008a14 <HAL_I2C_Init+0x13c>)
 8008928:	400a      	ands	r2, r1
 800892a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4938      	ldr	r1, [pc, #224]	@ (8008a18 <HAL_I2C_Init+0x140>)
 8008938:	400a      	ands	r2, r1
 800893a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d108      	bne.n	8008956 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2180      	movs	r1, #128	@ 0x80
 800894e:	0209      	lsls	r1, r1, #8
 8008950:	430a      	orrs	r2, r1
 8008952:	609a      	str	r2, [r3, #8]
 8008954:	e007      	b.n	8008966 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2184      	movs	r1, #132	@ 0x84
 8008960:	0209      	lsls	r1, r1, #8
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d109      	bne.n	8008982 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2180      	movs	r1, #128	@ 0x80
 800897a:	0109      	lsls	r1, r1, #4
 800897c:	430a      	orrs	r2, r1
 800897e:	605a      	str	r2, [r3, #4]
 8008980:	e007      	b.n	8008992 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4923      	ldr	r1, [pc, #140]	@ (8008a1c <HAL_I2C_Init+0x144>)
 800898e:	400a      	ands	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4920      	ldr	r1, [pc, #128]	@ (8008a20 <HAL_I2C_Init+0x148>)
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	491a      	ldr	r1, [pc, #104]	@ (8008a18 <HAL_I2C_Init+0x140>)
 80089ae:	400a      	ands	r2, r1
 80089b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69d9      	ldr	r1, [r3, #28]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2101      	movs	r1, #1
 80089e8:	430a      	orrs	r2, r1
 80089ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2241      	movs	r2, #65	@ 0x41
 80089f6:	2120      	movs	r1, #32
 80089f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2242      	movs	r2, #66	@ 0x42
 8008a04:	2100      	movs	r1, #0
 8008a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b002      	add	sp, #8
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	46c0      	nop			@ (mov r8, r8)
 8008a14:	f0ffffff 	.word	0xf0ffffff
 8008a18:	ffff7fff 	.word	0xffff7fff
 8008a1c:	fffff7ff 	.word	0xfffff7ff
 8008a20:	02008000 	.word	0x02008000

08008a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b089      	sub	sp, #36	@ 0x24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	0008      	movs	r0, r1
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	0019      	movs	r1, r3
 8008a32:	230a      	movs	r3, #10
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	1c02      	adds	r2, r0, #0
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	2308      	movs	r3, #8
 8008a3c:	18fb      	adds	r3, r7, r3
 8008a3e:	1c0a      	adds	r2, r1, #0
 8008a40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2241      	movs	r2, #65	@ 0x41
 8008a46:	5c9b      	ldrb	r3, [r3, r2]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d000      	beq.n	8008a50 <HAL_I2C_Master_Transmit+0x2c>
 8008a4e:	e10a      	b.n	8008c66 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2240      	movs	r2, #64	@ 0x40
 8008a54:	5c9b      	ldrb	r3, [r3, r2]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <HAL_I2C_Master_Transmit+0x3a>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e104      	b.n	8008c68 <HAL_I2C_Master_Transmit+0x244>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2240      	movs	r2, #64	@ 0x40
 8008a62:	2101      	movs	r1, #1
 8008a64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a66:	f7ff f9ef 	bl	8007e48 <HAL_GetTick>
 8008a6a:	0003      	movs	r3, r0
 8008a6c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a6e:	2380      	movs	r3, #128	@ 0x80
 8008a70:	0219      	lsls	r1, r3, #8
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2319      	movs	r3, #25
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f000 fe4a 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8008a80:	1e03      	subs	r3, r0, #0
 8008a82:	d001      	beq.n	8008a88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e0ef      	b.n	8008c68 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2241      	movs	r2, #65	@ 0x41
 8008a8c:	2121      	movs	r1, #33	@ 0x21
 8008a8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2242      	movs	r2, #66	@ 0x42
 8008a94:	2110      	movs	r1, #16
 8008a96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2208      	movs	r2, #8
 8008aa8:	18ba      	adds	r2, r7, r2
 8008aaa:	8812      	ldrh	r2, [r2, #0]
 8008aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2bff      	cmp	r3, #255	@ 0xff
 8008abc:	d906      	bls.n	8008acc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	22ff      	movs	r2, #255	@ 0xff
 8008ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008ac4:	2380      	movs	r3, #128	@ 0x80
 8008ac6:	045b      	lsls	r3, r3, #17
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	e007      	b.n	8008adc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008ad6:	2380      	movs	r3, #128	@ 0x80
 8008ad8:	049b      	lsls	r3, r3, #18
 8008ada:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d027      	beq.n	8008b34 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	697c      	ldr	r4, [r7, #20]
 8008b20:	230a      	movs	r3, #10
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	8819      	ldrh	r1, [r3, #0]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	4b51      	ldr	r3, [pc, #324]	@ (8008c70 <HAL_I2C_Master_Transmit+0x24c>)
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	0023      	movs	r3, r4
 8008b2e:	f001 f869 	bl	8009c04 <I2C_TransferConfig>
 8008b32:	e06f      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	697c      	ldr	r4, [r7, #20]
 8008b3c:	230a      	movs	r3, #10
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	8819      	ldrh	r1, [r3, #0]
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	4b4a      	ldr	r3, [pc, #296]	@ (8008c70 <HAL_I2C_Master_Transmit+0x24c>)
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	0023      	movs	r3, r4
 8008b4a:	f001 f85b 	bl	8009c04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008b4e:	e061      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 fe34 	bl	80097c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b5c:	1e03      	subs	r3, r0, #0
 8008b5e:	d001      	beq.n	8008b64 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e081      	b.n	8008c68 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d03a      	beq.n	8008c14 <HAL_I2C_Master_Transmit+0x1f0>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d136      	bne.n	8008c14 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	0013      	movs	r3, r2
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2180      	movs	r1, #128	@ 0x80
 8008bb4:	f000 fdae 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8008bb8:	1e03      	subs	r3, r0, #0
 8008bba:	d001      	beq.n	8008bc0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e053      	b.n	8008c68 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2bff      	cmp	r3, #255	@ 0xff
 8008bc8:	d911      	bls.n	8008bee <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	22ff      	movs	r2, #255	@ 0xff
 8008bce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	2380      	movs	r3, #128	@ 0x80
 8008bd8:	045c      	lsls	r4, r3, #17
 8008bda:	230a      	movs	r3, #10
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	8819      	ldrh	r1, [r3, #0]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	0023      	movs	r3, r4
 8008be8:	f001 f80c 	bl	8009c04 <I2C_TransferConfig>
 8008bec:	e012      	b.n	8008c14 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	2380      	movs	r3, #128	@ 0x80
 8008c00:	049c      	lsls	r4, r3, #18
 8008c02:	230a      	movs	r3, #10
 8008c04:	18fb      	adds	r3, r7, r3
 8008c06:	8819      	ldrh	r1, [r3, #0]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	0023      	movs	r3, r4
 8008c10:	f000 fff8 	bl	8009c04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d198      	bne.n	8008b50 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	0018      	movs	r0, r3
 8008c26:	f000 fe13 	bl	8009850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c2a:	1e03      	subs	r3, r0, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e01a      	b.n	8008c68 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2220      	movs	r2, #32
 8008c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	490b      	ldr	r1, [pc, #44]	@ (8008c74 <HAL_I2C_Master_Transmit+0x250>)
 8008c46:	400a      	ands	r2, r1
 8008c48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2241      	movs	r2, #65	@ 0x41
 8008c4e:	2120      	movs	r1, #32
 8008c50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2242      	movs	r2, #66	@ 0x42
 8008c56:	2100      	movs	r1, #0
 8008c58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2240      	movs	r2, #64	@ 0x40
 8008c5e:	2100      	movs	r1, #0
 8008c60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e000      	b.n	8008c68 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
  }
}
 8008c68:	0018      	movs	r0, r3
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	b007      	add	sp, #28
 8008c6e:	bd90      	pop	{r4, r7, pc}
 8008c70:	80002000 	.word	0x80002000
 8008c74:	fe00e800 	.word	0xfe00e800

08008c78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b089      	sub	sp, #36	@ 0x24
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	0008      	movs	r0, r1
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	0019      	movs	r1, r3
 8008c86:	230a      	movs	r3, #10
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	1c02      	adds	r2, r0, #0
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	2308      	movs	r3, #8
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	1c0a      	adds	r2, r1, #0
 8008c94:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2241      	movs	r2, #65	@ 0x41
 8008c9a:	5c9b      	ldrb	r3, [r3, r2]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d000      	beq.n	8008ca4 <HAL_I2C_Master_Receive+0x2c>
 8008ca2:	e0e8      	b.n	8008e76 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2240      	movs	r2, #64	@ 0x40
 8008ca8:	5c9b      	ldrb	r3, [r3, r2]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <HAL_I2C_Master_Receive+0x3a>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e0e2      	b.n	8008e78 <HAL_I2C_Master_Receive+0x200>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2240      	movs	r2, #64	@ 0x40
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008cba:	f7ff f8c5 	bl	8007e48 <HAL_GetTick>
 8008cbe:	0003      	movs	r3, r0
 8008cc0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cc2:	2380      	movs	r3, #128	@ 0x80
 8008cc4:	0219      	lsls	r1, r3, #8
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	2319      	movs	r3, #25
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f000 fd20 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8008cd4:	1e03      	subs	r3, r0, #0
 8008cd6:	d001      	beq.n	8008cdc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0cd      	b.n	8008e78 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2241      	movs	r2, #65	@ 0x41
 8008ce0:	2122      	movs	r1, #34	@ 0x22
 8008ce2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2242      	movs	r2, #66	@ 0x42
 8008ce8:	2110      	movs	r1, #16
 8008cea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	18ba      	adds	r2, r7, r2
 8008cfe:	8812      	ldrh	r2, [r2, #0]
 8008d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	2bff      	cmp	r3, #255	@ 0xff
 8008d10:	d911      	bls.n	8008d36 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	22ff      	movs	r2, #255	@ 0xff
 8008d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	2380      	movs	r3, #128	@ 0x80
 8008d20:	045c      	lsls	r4, r3, #17
 8008d22:	230a      	movs	r3, #10
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	8819      	ldrh	r1, [r3, #0]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	4b55      	ldr	r3, [pc, #340]	@ (8008e80 <HAL_I2C_Master_Receive+0x208>)
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	0023      	movs	r3, r4
 8008d30:	f000 ff68 	bl	8009c04 <I2C_TransferConfig>
 8008d34:	e076      	b.n	8008e24 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	2380      	movs	r3, #128	@ 0x80
 8008d48:	049c      	lsls	r4, r3, #18
 8008d4a:	230a      	movs	r3, #10
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	8819      	ldrh	r1, [r3, #0]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	4b4b      	ldr	r3, [pc, #300]	@ (8008e80 <HAL_I2C_Master_Receive+0x208>)
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	0023      	movs	r3, r4
 8008d58:	f000 ff54 	bl	8009c04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008d5c:	e062      	b.n	8008e24 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	0018      	movs	r0, r3
 8008d66:	f000 fdb7 	bl	80098d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d6a:	1e03      	subs	r3, r0, #0
 8008d6c:	d001      	beq.n	8008d72 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e082      	b.n	8008e78 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d03a      	beq.n	8008e24 <HAL_I2C_Master_Receive+0x1ac>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d136      	bne.n	8008e24 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	0013      	movs	r3, r2
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2180      	movs	r1, #128	@ 0x80
 8008dc4:	f000 fca6 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8008dc8:	1e03      	subs	r3, r0, #0
 8008dca:	d001      	beq.n	8008dd0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e053      	b.n	8008e78 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2bff      	cmp	r3, #255	@ 0xff
 8008dd8:	d911      	bls.n	8008dfe <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	22ff      	movs	r2, #255	@ 0xff
 8008dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	2380      	movs	r3, #128	@ 0x80
 8008de8:	045c      	lsls	r4, r3, #17
 8008dea:	230a      	movs	r3, #10
 8008dec:	18fb      	adds	r3, r7, r3
 8008dee:	8819      	ldrh	r1, [r3, #0]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	2300      	movs	r3, #0
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	0023      	movs	r3, r4
 8008df8:	f000 ff04 	bl	8009c04 <I2C_TransferConfig>
 8008dfc:	e012      	b.n	8008e24 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	2380      	movs	r3, #128	@ 0x80
 8008e10:	049c      	lsls	r4, r3, #18
 8008e12:	230a      	movs	r3, #10
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	8819      	ldrh	r1, [r3, #0]
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	0023      	movs	r3, r4
 8008e20:	f000 fef0 	bl	8009c04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d197      	bne.n	8008d5e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	0018      	movs	r0, r3
 8008e36:	f000 fd0b 	bl	8009850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e3a:	1e03      	subs	r3, r0, #0
 8008e3c:	d001      	beq.n	8008e42 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e01a      	b.n	8008e78 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2220      	movs	r2, #32
 8008e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	490b      	ldr	r1, [pc, #44]	@ (8008e84 <HAL_I2C_Master_Receive+0x20c>)
 8008e56:	400a      	ands	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2241      	movs	r2, #65	@ 0x41
 8008e5e:	2120      	movs	r1, #32
 8008e60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2242      	movs	r2, #66	@ 0x42
 8008e66:	2100      	movs	r1, #0
 8008e68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2240      	movs	r2, #64	@ 0x40
 8008e6e:	2100      	movs	r1, #0
 8008e70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e000      	b.n	8008e78 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
  }
}
 8008e78:	0018      	movs	r0, r3
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	b007      	add	sp, #28
 8008e7e:	bd90      	pop	{r4, r7, pc}
 8008e80:	80002400 	.word	0x80002400
 8008e84:	fe00e800 	.word	0xfe00e800

08008e88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e88:	b590      	push	{r4, r7, lr}
 8008e8a:	b089      	sub	sp, #36	@ 0x24
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	000c      	movs	r4, r1
 8008e92:	0010      	movs	r0, r2
 8008e94:	0019      	movs	r1, r3
 8008e96:	230a      	movs	r3, #10
 8008e98:	18fb      	adds	r3, r7, r3
 8008e9a:	1c22      	adds	r2, r4, #0
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	2308      	movs	r3, #8
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	1c02      	adds	r2, r0, #0
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	1dbb      	adds	r3, r7, #6
 8008ea8:	1c0a      	adds	r2, r1, #0
 8008eaa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2241      	movs	r2, #65	@ 0x41
 8008eb0:	5c9b      	ldrb	r3, [r3, r2]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d000      	beq.n	8008eba <HAL_I2C_Mem_Write+0x32>
 8008eb8:	e10c      	b.n	80090d4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <HAL_I2C_Mem_Write+0x42>
 8008ec0:	232c      	movs	r3, #44	@ 0x2c
 8008ec2:	18fb      	adds	r3, r7, r3
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d105      	bne.n	8008ed6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2280      	movs	r2, #128	@ 0x80
 8008ece:	0092      	lsls	r2, r2, #2
 8008ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e0ff      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2240      	movs	r2, #64	@ 0x40
 8008eda:	5c9b      	ldrb	r3, [r3, r2]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_I2C_Mem_Write+0x5c>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e0f8      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2240      	movs	r2, #64	@ 0x40
 8008ee8:	2101      	movs	r1, #1
 8008eea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008eec:	f7fe ffac 	bl	8007e48 <HAL_GetTick>
 8008ef0:	0003      	movs	r3, r0
 8008ef2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ef4:	2380      	movs	r3, #128	@ 0x80
 8008ef6:	0219      	lsls	r1, r3, #8
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	2319      	movs	r3, #25
 8008f00:	2201      	movs	r2, #1
 8008f02:	f000 fc07 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8008f06:	1e03      	subs	r3, r0, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0e3      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2241      	movs	r2, #65	@ 0x41
 8008f12:	2121      	movs	r1, #33	@ 0x21
 8008f14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2242      	movs	r2, #66	@ 0x42
 8008f1a:	2140      	movs	r1, #64	@ 0x40
 8008f1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	222c      	movs	r2, #44	@ 0x2c
 8008f2e:	18ba      	adds	r2, r7, r2
 8008f30:	8812      	ldrh	r2, [r2, #0]
 8008f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f3a:	1dbb      	adds	r3, r7, #6
 8008f3c:	881c      	ldrh	r4, [r3, #0]
 8008f3e:	2308      	movs	r3, #8
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	881a      	ldrh	r2, [r3, #0]
 8008f44:	230a      	movs	r3, #10
 8008f46:	18fb      	adds	r3, r7, r3
 8008f48:	8819      	ldrh	r1, [r3, #0]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	0023      	movs	r3, r4
 8008f56:	f000 faf5 	bl	8009544 <I2C_RequestMemoryWrite>
 8008f5a:	1e03      	subs	r3, r0, #0
 8008f5c:	d005      	beq.n	8008f6a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2240      	movs	r2, #64	@ 0x40
 8008f62:	2100      	movs	r1, #0
 8008f64:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0b5      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	2bff      	cmp	r3, #255	@ 0xff
 8008f72:	d911      	bls.n	8008f98 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	22ff      	movs	r2, #255	@ 0xff
 8008f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	2380      	movs	r3, #128	@ 0x80
 8008f82:	045c      	lsls	r4, r3, #17
 8008f84:	230a      	movs	r3, #10
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	8819      	ldrh	r1, [r3, #0]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	0023      	movs	r3, r4
 8008f92:	f000 fe37 	bl	8009c04 <I2C_TransferConfig>
 8008f96:	e012      	b.n	8008fbe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	2380      	movs	r3, #128	@ 0x80
 8008faa:	049c      	lsls	r4, r3, #18
 8008fac:	230a      	movs	r3, #10
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	8819      	ldrh	r1, [r3, #0]
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	0023      	movs	r3, r4
 8008fba:	f000 fe23 	bl	8009c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f000 fbfd 	bl	80097c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fca:	1e03      	subs	r3, r0, #0
 8008fcc:	d001      	beq.n	8008fd2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e081      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd6:	781a      	ldrb	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d03a      	beq.n	8009082 <HAL_I2C_Mem_Write+0x1fa>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009010:	2b00      	cmp	r3, #0
 8009012:	d136      	bne.n	8009082 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	0013      	movs	r3, r2
 800901e:	2200      	movs	r2, #0
 8009020:	2180      	movs	r1, #128	@ 0x80
 8009022:	f000 fb77 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8009026:	1e03      	subs	r3, r0, #0
 8009028:	d001      	beq.n	800902e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e053      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009032:	b29b      	uxth	r3, r3
 8009034:	2bff      	cmp	r3, #255	@ 0xff
 8009036:	d911      	bls.n	800905c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	22ff      	movs	r2, #255	@ 0xff
 800903c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009042:	b2da      	uxtb	r2, r3
 8009044:	2380      	movs	r3, #128	@ 0x80
 8009046:	045c      	lsls	r4, r3, #17
 8009048:	230a      	movs	r3, #10
 800904a:	18fb      	adds	r3, r7, r3
 800904c:	8819      	ldrh	r1, [r3, #0]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	0023      	movs	r3, r4
 8009056:	f000 fdd5 	bl	8009c04 <I2C_TransferConfig>
 800905a:	e012      	b.n	8009082 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800906a:	b2da      	uxtb	r2, r3
 800906c:	2380      	movs	r3, #128	@ 0x80
 800906e:	049c      	lsls	r4, r3, #18
 8009070:	230a      	movs	r3, #10
 8009072:	18fb      	adds	r3, r7, r3
 8009074:	8819      	ldrh	r1, [r3, #0]
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	2300      	movs	r3, #0
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	0023      	movs	r3, r4
 800907e:	f000 fdc1 	bl	8009c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009086:	b29b      	uxth	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d198      	bne.n	8008fbe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	0018      	movs	r0, r3
 8009094:	f000 fbdc 	bl	8009850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009098:	1e03      	subs	r3, r0, #0
 800909a:	d001      	beq.n	80090a0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e01a      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2220      	movs	r2, #32
 80090a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	490b      	ldr	r1, [pc, #44]	@ (80090e0 <HAL_I2C_Mem_Write+0x258>)
 80090b4:	400a      	ands	r2, r1
 80090b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2241      	movs	r2, #65	@ 0x41
 80090bc:	2120      	movs	r1, #32
 80090be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2242      	movs	r2, #66	@ 0x42
 80090c4:	2100      	movs	r1, #0
 80090c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2240      	movs	r2, #64	@ 0x40
 80090cc:	2100      	movs	r1, #0
 80090ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e000      	b.n	80090d6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80090d4:	2302      	movs	r3, #2
  }
}
 80090d6:	0018      	movs	r0, r3
 80090d8:	46bd      	mov	sp, r7
 80090da:	b007      	add	sp, #28
 80090dc:	bd90      	pop	{r4, r7, pc}
 80090de:	46c0      	nop			@ (mov r8, r8)
 80090e0:	fe00e800 	.word	0xfe00e800

080090e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e4:	b590      	push	{r4, r7, lr}
 80090e6:	b089      	sub	sp, #36	@ 0x24
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	000c      	movs	r4, r1
 80090ee:	0010      	movs	r0, r2
 80090f0:	0019      	movs	r1, r3
 80090f2:	230a      	movs	r3, #10
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	1c22      	adds	r2, r4, #0
 80090f8:	801a      	strh	r2, [r3, #0]
 80090fa:	2308      	movs	r3, #8
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	1c02      	adds	r2, r0, #0
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	1dbb      	adds	r3, r7, #6
 8009104:	1c0a      	adds	r2, r1, #0
 8009106:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2241      	movs	r2, #65	@ 0x41
 800910c:	5c9b      	ldrb	r3, [r3, r2]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b20      	cmp	r3, #32
 8009112:	d000      	beq.n	8009116 <HAL_I2C_Mem_Read+0x32>
 8009114:	e110      	b.n	8009338 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8009116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <HAL_I2C_Mem_Read+0x42>
 800911c:	232c      	movs	r3, #44	@ 0x2c
 800911e:	18fb      	adds	r3, r7, r3
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2280      	movs	r2, #128	@ 0x80
 800912a:	0092      	lsls	r2, r2, #2
 800912c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e103      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2240      	movs	r2, #64	@ 0x40
 8009136:	5c9b      	ldrb	r3, [r3, r2]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_I2C_Mem_Read+0x5c>
 800913c:	2302      	movs	r3, #2
 800913e:	e0fc      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2240      	movs	r2, #64	@ 0x40
 8009144:	2101      	movs	r1, #1
 8009146:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009148:	f7fe fe7e 	bl	8007e48 <HAL_GetTick>
 800914c:	0003      	movs	r3, r0
 800914e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009150:	2380      	movs	r3, #128	@ 0x80
 8009152:	0219      	lsls	r1, r3, #8
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	2319      	movs	r3, #25
 800915c:	2201      	movs	r2, #1
 800915e:	f000 fad9 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 8009162:	1e03      	subs	r3, r0, #0
 8009164:	d001      	beq.n	800916a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e0e7      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2241      	movs	r2, #65	@ 0x41
 800916e:	2122      	movs	r1, #34	@ 0x22
 8009170:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2242      	movs	r2, #66	@ 0x42
 8009176:	2140      	movs	r1, #64	@ 0x40
 8009178:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009184:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	222c      	movs	r2, #44	@ 0x2c
 800918a:	18ba      	adds	r2, r7, r2
 800918c:	8812      	ldrh	r2, [r2, #0]
 800918e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009196:	1dbb      	adds	r3, r7, #6
 8009198:	881c      	ldrh	r4, [r3, #0]
 800919a:	2308      	movs	r3, #8
 800919c:	18fb      	adds	r3, r7, r3
 800919e:	881a      	ldrh	r2, [r3, #0]
 80091a0:	230a      	movs	r3, #10
 80091a2:	18fb      	adds	r3, r7, r3
 80091a4:	8819      	ldrh	r1, [r3, #0]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	0023      	movs	r3, r4
 80091b2:	f000 fa2b 	bl	800960c <I2C_RequestMemoryRead>
 80091b6:	1e03      	subs	r3, r0, #0
 80091b8:	d005      	beq.n	80091c6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2240      	movs	r2, #64	@ 0x40
 80091be:	2100      	movs	r1, #0
 80091c0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e0b9      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	2bff      	cmp	r3, #255	@ 0xff
 80091ce:	d911      	bls.n	80091f4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	22ff      	movs	r2, #255	@ 0xff
 80091d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	2380      	movs	r3, #128	@ 0x80
 80091de:	045c      	lsls	r4, r3, #17
 80091e0:	230a      	movs	r3, #10
 80091e2:	18fb      	adds	r3, r7, r3
 80091e4:	8819      	ldrh	r1, [r3, #0]
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	4b56      	ldr	r3, [pc, #344]	@ (8009344 <HAL_I2C_Mem_Read+0x260>)
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	0023      	movs	r3, r4
 80091ee:	f000 fd09 	bl	8009c04 <I2C_TransferConfig>
 80091f2:	e012      	b.n	800921a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009202:	b2da      	uxtb	r2, r3
 8009204:	2380      	movs	r3, #128	@ 0x80
 8009206:	049c      	lsls	r4, r3, #18
 8009208:	230a      	movs	r3, #10
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	8819      	ldrh	r1, [r3, #0]
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	4b4c      	ldr	r3, [pc, #304]	@ (8009344 <HAL_I2C_Mem_Read+0x260>)
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	0023      	movs	r3, r4
 8009216:	f000 fcf5 	bl	8009c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800921a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	0013      	movs	r3, r2
 8009224:	2200      	movs	r2, #0
 8009226:	2104      	movs	r1, #4
 8009228:	f000 fa74 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 800922c:	1e03      	subs	r3, r0, #0
 800922e:	d001      	beq.n	8009234 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e082      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d03a      	beq.n	80092e6 <HAL_I2C_Mem_Read+0x202>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009274:	2b00      	cmp	r3, #0
 8009276:	d136      	bne.n	80092e6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	0013      	movs	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	2180      	movs	r1, #128	@ 0x80
 8009286:	f000 fa45 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 800928a:	1e03      	subs	r3, r0, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e053      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009296:	b29b      	uxth	r3, r3
 8009298:	2bff      	cmp	r3, #255	@ 0xff
 800929a:	d911      	bls.n	80092c0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	22ff      	movs	r2, #255	@ 0xff
 80092a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	2380      	movs	r3, #128	@ 0x80
 80092aa:	045c      	lsls	r4, r3, #17
 80092ac:	230a      	movs	r3, #10
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	8819      	ldrh	r1, [r3, #0]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	2300      	movs	r3, #0
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	0023      	movs	r3, r4
 80092ba:	f000 fca3 	bl	8009c04 <I2C_TransferConfig>
 80092be:	e012      	b.n	80092e6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	049c      	lsls	r4, r3, #18
 80092d4:	230a      	movs	r3, #10
 80092d6:	18fb      	adds	r3, r7, r3
 80092d8:	8819      	ldrh	r1, [r3, #0]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	2300      	movs	r3, #0
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	0023      	movs	r3, r4
 80092e2:	f000 fc8f 	bl	8009c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d194      	bne.n	800921a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 faaa 	bl	8009850 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092fc:	1e03      	subs	r3, r0, #0
 80092fe:	d001      	beq.n	8009304 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e01a      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2220      	movs	r2, #32
 800930a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	490c      	ldr	r1, [pc, #48]	@ (8009348 <HAL_I2C_Mem_Read+0x264>)
 8009318:	400a      	ands	r2, r1
 800931a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2241      	movs	r2, #65	@ 0x41
 8009320:	2120      	movs	r1, #32
 8009322:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2242      	movs	r2, #66	@ 0x42
 8009328:	2100      	movs	r1, #0
 800932a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2240      	movs	r2, #64	@ 0x40
 8009330:	2100      	movs	r1, #0
 8009332:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	e000      	b.n	800933a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8009338:	2302      	movs	r3, #2
  }
}
 800933a:	0018      	movs	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	b007      	add	sp, #28
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	46c0      	nop			@ (mov r8, r8)
 8009344:	80002400 	.word	0x80002400
 8009348:	fe00e800 	.word	0xfe00e800

0800934c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	@ 0x28
 8009350:	af02      	add	r7, sp, #8
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	607a      	str	r2, [r7, #4]
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	230a      	movs	r3, #10
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	1c0a      	adds	r2, r1, #0
 800935e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2241      	movs	r2, #65	@ 0x41
 8009368:	5c9b      	ldrb	r3, [r3, r2]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b20      	cmp	r3, #32
 800936e:	d000      	beq.n	8009372 <HAL_I2C_IsDeviceReady+0x26>
 8009370:	e0df      	b.n	8009532 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	699a      	ldr	r2, [r3, #24]
 8009378:	2380      	movs	r3, #128	@ 0x80
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	401a      	ands	r2, r3
 800937e:	2380      	movs	r3, #128	@ 0x80
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	429a      	cmp	r2, r3
 8009384:	d101      	bne.n	800938a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8009386:	2302      	movs	r3, #2
 8009388:	e0d4      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2240      	movs	r2, #64	@ 0x40
 800938e:	5c9b      	ldrb	r3, [r3, r2]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_I2C_IsDeviceReady+0x4c>
 8009394:	2302      	movs	r3, #2
 8009396:	e0cd      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2240      	movs	r2, #64	@ 0x40
 800939c:	2101      	movs	r1, #1
 800939e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2241      	movs	r2, #65	@ 0x41
 80093a4:	2124      	movs	r1, #36	@ 0x24
 80093a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d107      	bne.n	80093c6 <HAL_I2C_IsDeviceReady+0x7a>
 80093b6:	230a      	movs	r3, #10
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	059b      	lsls	r3, r3, #22
 80093be:	0d9b      	lsrs	r3, r3, #22
 80093c0:	4a5e      	ldr	r2, [pc, #376]	@ (800953c <HAL_I2C_IsDeviceReady+0x1f0>)
 80093c2:	431a      	orrs	r2, r3
 80093c4:	e006      	b.n	80093d4 <HAL_I2C_IsDeviceReady+0x88>
 80093c6:	230a      	movs	r3, #10
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	059b      	lsls	r3, r3, #22
 80093ce:	0d9b      	lsrs	r3, r3, #22
 80093d0:	4a5b      	ldr	r2, [pc, #364]	@ (8009540 <HAL_I2C_IsDeviceReady+0x1f4>)
 80093d2:	431a      	orrs	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80093da:	f7fe fd35 	bl	8007e48 <HAL_GetTick>
 80093de:	0003      	movs	r3, r0
 80093e0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	2220      	movs	r2, #32
 80093ea:	4013      	ands	r3, r2
 80093ec:	3b20      	subs	r3, #32
 80093ee:	425a      	negs	r2, r3
 80093f0:	4153      	adcs	r3, r2
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	231f      	movs	r3, #31
 80093f6:	18fb      	adds	r3, r7, r3
 80093f8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	2210      	movs	r2, #16
 8009402:	4013      	ands	r3, r2
 8009404:	3b10      	subs	r3, #16
 8009406:	425a      	negs	r2, r3
 8009408:	4153      	adcs	r3, r2
 800940a:	b2da      	uxtb	r2, r3
 800940c:	231e      	movs	r3, #30
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009412:	e035      	b.n	8009480 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	3301      	adds	r3, #1
 8009418:	d01a      	beq.n	8009450 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800941a:	f7fe fd15 	bl	8007e48 <HAL_GetTick>
 800941e:	0002      	movs	r2, r0
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d302      	bcc.n	8009430 <HAL_I2C_IsDeviceReady+0xe4>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10f      	bne.n	8009450 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2241      	movs	r2, #65	@ 0x41
 8009434:	2120      	movs	r1, #32
 8009436:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943c:	2220      	movs	r2, #32
 800943e:	431a      	orrs	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2240      	movs	r2, #64	@ 0x40
 8009448:	2100      	movs	r1, #0
 800944a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e071      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	2220      	movs	r2, #32
 8009458:	4013      	ands	r3, r2
 800945a:	3b20      	subs	r3, #32
 800945c:	425a      	negs	r2, r3
 800945e:	4153      	adcs	r3, r2
 8009460:	b2da      	uxtb	r2, r3
 8009462:	231f      	movs	r3, #31
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	2210      	movs	r2, #16
 8009470:	4013      	ands	r3, r2
 8009472:	3b10      	subs	r3, #16
 8009474:	425a      	negs	r2, r3
 8009476:	4153      	adcs	r3, r2
 8009478:	b2da      	uxtb	r2, r3
 800947a:	231e      	movs	r3, #30
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009480:	231f      	movs	r3, #31
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <HAL_I2C_IsDeviceReady+0x148>
 800948a:	231e      	movs	r3, #30
 800948c:	18fb      	adds	r3, r7, r3
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0bf      	beq.n	8009414 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	2210      	movs	r2, #16
 800949c:	4013      	ands	r3, r2
 800949e:	2b10      	cmp	r3, #16
 80094a0:	d01a      	beq.n	80094d8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	0013      	movs	r3, r2
 80094ac:	2200      	movs	r2, #0
 80094ae:	2120      	movs	r1, #32
 80094b0:	f000 f930 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 80094b4:	1e03      	subs	r3, r0, #0
 80094b6:	d001      	beq.n	80094bc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e03b      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2220      	movs	r2, #32
 80094c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2241      	movs	r2, #65	@ 0x41
 80094c8:	2120      	movs	r1, #32
 80094ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2240      	movs	r2, #64	@ 0x40
 80094d0:	2100      	movs	r1, #0
 80094d2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	e02d      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	0013      	movs	r3, r2
 80094e2:	2200      	movs	r2, #0
 80094e4:	2120      	movs	r1, #32
 80094e6:	f000 f915 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 80094ea:	1e03      	subs	r3, r0, #0
 80094ec:	d001      	beq.n	80094f2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e020      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2210      	movs	r2, #16
 80094f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2220      	movs	r2, #32
 8009500:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	3301      	adds	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d900      	bls.n	8009512 <HAL_I2C_IsDeviceReady+0x1c6>
 8009510:	e74d      	b.n	80093ae <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2241      	movs	r2, #65	@ 0x41
 8009516:	2120      	movs	r1, #32
 8009518:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800951e:	2220      	movs	r2, #32
 8009520:	431a      	orrs	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2240      	movs	r2, #64	@ 0x40
 800952a:	2100      	movs	r1, #0
 800952c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e000      	b.n	8009534 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8009532:	2302      	movs	r3, #2
  }
}
 8009534:	0018      	movs	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	b008      	add	sp, #32
 800953a:	bd80      	pop	{r7, pc}
 800953c:	02002000 	.word	0x02002000
 8009540:	02002800 	.word	0x02002800

08009544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009544:	b5b0      	push	{r4, r5, r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af02      	add	r7, sp, #8
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	000c      	movs	r4, r1
 800954e:	0010      	movs	r0, r2
 8009550:	0019      	movs	r1, r3
 8009552:	250a      	movs	r5, #10
 8009554:	197b      	adds	r3, r7, r5
 8009556:	1c22      	adds	r2, r4, #0
 8009558:	801a      	strh	r2, [r3, #0]
 800955a:	2308      	movs	r3, #8
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	1c02      	adds	r2, r0, #0
 8009560:	801a      	strh	r2, [r3, #0]
 8009562:	1dbb      	adds	r3, r7, #6
 8009564:	1c0a      	adds	r2, r1, #0
 8009566:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009568:	1dbb      	adds	r3, r7, #6
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b2da      	uxtb	r2, r3
 800956e:	2380      	movs	r3, #128	@ 0x80
 8009570:	045c      	lsls	r4, r3, #17
 8009572:	197b      	adds	r3, r7, r5
 8009574:	8819      	ldrh	r1, [r3, #0]
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	4b23      	ldr	r3, [pc, #140]	@ (8009608 <I2C_RequestMemoryWrite+0xc4>)
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	0023      	movs	r3, r4
 800957e:	f000 fb41 	bl	8009c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009584:	6a39      	ldr	r1, [r7, #32]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	0018      	movs	r0, r3
 800958a:	f000 f91b 	bl	80097c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800958e:	1e03      	subs	r3, r0, #0
 8009590:	d001      	beq.n	8009596 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e033      	b.n	80095fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009596:	1dbb      	adds	r3, r7, #6
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d107      	bne.n	80095ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800959e:	2308      	movs	r3, #8
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80095ac:	e019      	b.n	80095e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095ae:	2308      	movs	r3, #8
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	0a1b      	lsrs	r3, r3, #8
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c2:	6a39      	ldr	r1, [r7, #32]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	0018      	movs	r0, r3
 80095c8:	f000 f8fc 	bl	80097c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80095cc:	1e03      	subs	r3, r0, #0
 80095ce:	d001      	beq.n	80095d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e014      	b.n	80095fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095d4:	2308      	movs	r3, #8
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80095e2:	6a3a      	ldr	r2, [r7, #32]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	0013      	movs	r3, r2
 80095ec:	2200      	movs	r2, #0
 80095ee:	2180      	movs	r1, #128	@ 0x80
 80095f0:	f000 f890 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 80095f4:	1e03      	subs	r3, r0, #0
 80095f6:	d001      	beq.n	80095fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	0018      	movs	r0, r3
 8009600:	46bd      	mov	sp, r7
 8009602:	b004      	add	sp, #16
 8009604:	bdb0      	pop	{r4, r5, r7, pc}
 8009606:	46c0      	nop			@ (mov r8, r8)
 8009608:	80002000 	.word	0x80002000

0800960c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800960c:	b5b0      	push	{r4, r5, r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	000c      	movs	r4, r1
 8009616:	0010      	movs	r0, r2
 8009618:	0019      	movs	r1, r3
 800961a:	250a      	movs	r5, #10
 800961c:	197b      	adds	r3, r7, r5
 800961e:	1c22      	adds	r2, r4, #0
 8009620:	801a      	strh	r2, [r3, #0]
 8009622:	2308      	movs	r3, #8
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	1c02      	adds	r2, r0, #0
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	1dbb      	adds	r3, r7, #6
 800962c:	1c0a      	adds	r2, r1, #0
 800962e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009630:	1dbb      	adds	r3, r7, #6
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b2da      	uxtb	r2, r3
 8009636:	197b      	adds	r3, r7, r5
 8009638:	8819      	ldrh	r1, [r3, #0]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	4b23      	ldr	r3, [pc, #140]	@ (80096cc <I2C_RequestMemoryRead+0xc0>)
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	2300      	movs	r3, #0
 8009642:	f000 fadf 	bl	8009c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009648:	6a39      	ldr	r1, [r7, #32]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	0018      	movs	r0, r3
 800964e:	f000 f8b9 	bl	80097c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009652:	1e03      	subs	r3, r0, #0
 8009654:	d001      	beq.n	800965a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e033      	b.n	80096c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800965a:	1dbb      	adds	r3, r7, #6
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d107      	bne.n	8009672 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009662:	2308      	movs	r3, #8
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009670:	e019      	b.n	80096a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009672:	2308      	movs	r3, #8
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	b29b      	uxth	r3, r3
 800967c:	b2da      	uxtb	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009686:	6a39      	ldr	r1, [r7, #32]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	0018      	movs	r0, r3
 800968c:	f000 f89a 	bl	80097c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009690:	1e03      	subs	r3, r0, #0
 8009692:	d001      	beq.n	8009698 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e014      	b.n	80096c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009698:	2308      	movs	r3, #8
 800969a:	18fb      	adds	r3, r7, r3
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80096a6:	6a3a      	ldr	r2, [r7, #32]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	0013      	movs	r3, r2
 80096b0:	2200      	movs	r2, #0
 80096b2:	2140      	movs	r1, #64	@ 0x40
 80096b4:	f000 f82e 	bl	8009714 <I2C_WaitOnFlagUntilTimeout>
 80096b8:	1e03      	subs	r3, r0, #0
 80096ba:	d001      	beq.n	80096c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	0018      	movs	r0, r3
 80096c4:	46bd      	mov	sp, r7
 80096c6:	b004      	add	sp, #16
 80096c8:	bdb0      	pop	{r4, r5, r7, pc}
 80096ca:	46c0      	nop			@ (mov r8, r8)
 80096cc:	80002000 	.word	0x80002000

080096d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2202      	movs	r2, #2
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d103      	bne.n	80096ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	2201      	movs	r2, #1
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d007      	beq.n	800970c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699a      	ldr	r2, [r3, #24]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2101      	movs	r1, #1
 8009708:	430a      	orrs	r2, r1
 800970a:	619a      	str	r2, [r3, #24]
  }
}
 800970c:	46c0      	nop			@ (mov r8, r8)
 800970e:	46bd      	mov	sp, r7
 8009710:	b002      	add	sp, #8
 8009712:	bd80      	pop	{r7, pc}

08009714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	1dfb      	adds	r3, r7, #7
 8009722:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009724:	e03a      	b.n	800979c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	0018      	movs	r0, r3
 800972e:	f000 f971 	bl	8009a14 <I2C_IsErrorOccurred>
 8009732:	1e03      	subs	r3, r0, #0
 8009734:	d001      	beq.n	800973a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e040      	b.n	80097bc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	3301      	adds	r3, #1
 800973e:	d02d      	beq.n	800979c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009740:	f7fe fb82 	bl	8007e48 <HAL_GetTick>
 8009744:	0002      	movs	r2, r0
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d302      	bcc.n	8009756 <I2C_WaitOnFlagUntilTimeout+0x42>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d122      	bne.n	800979c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	4013      	ands	r3, r2
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	425a      	negs	r2, r3
 8009766:	4153      	adcs	r3, r2
 8009768:	b2db      	uxtb	r3, r3
 800976a:	001a      	movs	r2, r3
 800976c:	1dfb      	adds	r3, r7, #7
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d113      	bne.n	800979c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009778:	2220      	movs	r2, #32
 800977a:	431a      	orrs	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2241      	movs	r2, #65	@ 0x41
 8009784:	2120      	movs	r1, #32
 8009786:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2242      	movs	r2, #66	@ 0x42
 800978c:	2100      	movs	r1, #0
 800978e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2240      	movs	r2, #64	@ 0x40
 8009794:	2100      	movs	r1, #0
 8009796:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e00f      	b.n	80097bc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	4013      	ands	r3, r2
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	425a      	negs	r2, r3
 80097ac:	4153      	adcs	r3, r2
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	001a      	movs	r2, r3
 80097b2:	1dfb      	adds	r3, r7, #7
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d0b5      	beq.n	8009726 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	0018      	movs	r0, r3
 80097be:	46bd      	mov	sp, r7
 80097c0:	b004      	add	sp, #16
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097d0:	e032      	b.n	8009838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	0018      	movs	r0, r3
 80097da:	f000 f91b 	bl	8009a14 <I2C_IsErrorOccurred>
 80097de:	1e03      	subs	r3, r0, #0
 80097e0:	d001      	beq.n	80097e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e030      	b.n	8009848 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3301      	adds	r3, #1
 80097ea:	d025      	beq.n	8009838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ec:	f7fe fb2c 	bl	8007e48 <HAL_GetTick>
 80097f0:	0002      	movs	r2, r0
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d302      	bcc.n	8009802 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11a      	bne.n	8009838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	2202      	movs	r2, #2
 800980a:	4013      	ands	r3, r2
 800980c:	2b02      	cmp	r3, #2
 800980e:	d013      	beq.n	8009838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009814:	2220      	movs	r2, #32
 8009816:	431a      	orrs	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2241      	movs	r2, #65	@ 0x41
 8009820:	2120      	movs	r1, #32
 8009822:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2242      	movs	r2, #66	@ 0x42
 8009828:	2100      	movs	r1, #0
 800982a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2240      	movs	r2, #64	@ 0x40
 8009830:	2100      	movs	r1, #0
 8009832:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e007      	b.n	8009848 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	2202      	movs	r2, #2
 8009840:	4013      	ands	r3, r2
 8009842:	2b02      	cmp	r3, #2
 8009844:	d1c5      	bne.n	80097d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	0018      	movs	r0, r3
 800984a:	46bd      	mov	sp, r7
 800984c:	b004      	add	sp, #16
 800984e:	bd80      	pop	{r7, pc}

08009850 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800985c:	e02f      	b.n	80098be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	0018      	movs	r0, r3
 8009866:	f000 f8d5 	bl	8009a14 <I2C_IsErrorOccurred>
 800986a:	1e03      	subs	r3, r0, #0
 800986c:	d001      	beq.n	8009872 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e02d      	b.n	80098ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009872:	f7fe fae9 	bl	8007e48 <HAL_GetTick>
 8009876:	0002      	movs	r2, r0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	429a      	cmp	r2, r3
 8009880:	d302      	bcc.n	8009888 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d11a      	bne.n	80098be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	2220      	movs	r2, #32
 8009890:	4013      	ands	r3, r2
 8009892:	2b20      	cmp	r3, #32
 8009894:	d013      	beq.n	80098be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989a:	2220      	movs	r2, #32
 800989c:	431a      	orrs	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2241      	movs	r2, #65	@ 0x41
 80098a6:	2120      	movs	r1, #32
 80098a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2242      	movs	r2, #66	@ 0x42
 80098ae:	2100      	movs	r1, #0
 80098b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2240      	movs	r2, #64	@ 0x40
 80098b6:	2100      	movs	r1, #0
 80098b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e007      	b.n	80098ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2220      	movs	r2, #32
 80098c6:	4013      	ands	r3, r2
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	d1c8      	bne.n	800985e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	0018      	movs	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b004      	add	sp, #16
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e4:	2317      	movs	r3, #23
 80098e6:	18fb      	adds	r3, r7, r3
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80098ec:	e07b      	b.n	80099e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	0018      	movs	r0, r3
 80098f6:	f000 f88d 	bl	8009a14 <I2C_IsErrorOccurred>
 80098fa:	1e03      	subs	r3, r0, #0
 80098fc:	d003      	beq.n	8009906 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80098fe:	2317      	movs	r3, #23
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	2201      	movs	r2, #1
 8009904:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	2220      	movs	r2, #32
 800990e:	4013      	ands	r3, r2
 8009910:	2b20      	cmp	r3, #32
 8009912:	d140      	bne.n	8009996 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009914:	2117      	movs	r1, #23
 8009916:	187b      	adds	r3, r7, r1
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d13b      	bne.n	8009996 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	2204      	movs	r2, #4
 8009926:	4013      	ands	r3, r2
 8009928:	2b04      	cmp	r3, #4
 800992a:	d106      	bne.n	800993a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009934:	187b      	adds	r3, r7, r1
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2210      	movs	r2, #16
 8009942:	4013      	ands	r3, r2
 8009944:	2b10      	cmp	r3, #16
 8009946:	d123      	bne.n	8009990 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2210      	movs	r2, #16
 800994e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2204      	movs	r2, #4
 8009954:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2220      	movs	r2, #32
 800995c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4929      	ldr	r1, [pc, #164]	@ (8009a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800996a:	400a      	ands	r2, r1
 800996c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2241      	movs	r2, #65	@ 0x41
 8009972:	2120      	movs	r1, #32
 8009974:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2242      	movs	r2, #66	@ 0x42
 800997a:	2100      	movs	r1, #0
 800997c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2240      	movs	r2, #64	@ 0x40
 8009982:	2100      	movs	r1, #0
 8009984:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009986:	2317      	movs	r3, #23
 8009988:	18fb      	adds	r3, r7, r3
 800998a:	2201      	movs	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	e002      	b.n	8009996 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009996:	f7fe fa57 	bl	8007e48 <HAL_GetTick>
 800999a:	0002      	movs	r2, r0
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d302      	bcc.n	80099ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80099ac:	2017      	movs	r0, #23
 80099ae:	183b      	adds	r3, r7, r0
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d117      	bne.n	80099e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2204      	movs	r2, #4
 80099be:	4013      	ands	r3, r2
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d010      	beq.n	80099e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c8:	2220      	movs	r2, #32
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2241      	movs	r2, #65	@ 0x41
 80099d4:	2120      	movs	r1, #32
 80099d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2240      	movs	r2, #64	@ 0x40
 80099dc:	2100      	movs	r1, #0
 80099de:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80099e0:	183b      	adds	r3, r7, r0
 80099e2:	2201      	movs	r2, #1
 80099e4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	2204      	movs	r2, #4
 80099ee:	4013      	ands	r3, r2
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	d005      	beq.n	8009a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80099f4:	2317      	movs	r3, #23
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d100      	bne.n	8009a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80099fe:	e776      	b.n	80098ee <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009a00:	2317      	movs	r3, #23
 8009a02:	18fb      	adds	r3, r7, r3
 8009a04:	781b      	ldrb	r3, [r3, #0]
}
 8009a06:	0018      	movs	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	b006      	add	sp, #24
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	46c0      	nop			@ (mov r8, r8)
 8009a10:	fe00e800 	.word	0xfe00e800

08009a14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08a      	sub	sp, #40	@ 0x28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a20:	2327      	movs	r3, #39	@ 0x27
 8009a22:	18fb      	adds	r3, r7, r3
 8009a24:	2200      	movs	r2, #0
 8009a26:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2210      	movs	r2, #16
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	d100      	bne.n	8009a42 <I2C_IsErrorOccurred+0x2e>
 8009a40:	e079      	b.n	8009b36 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2210      	movs	r2, #16
 8009a48:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a4a:	e057      	b.n	8009afc <I2C_IsErrorOccurred+0xe8>
 8009a4c:	2227      	movs	r2, #39	@ 0x27
 8009a4e:	18bb      	adds	r3, r7, r2
 8009a50:	18ba      	adds	r2, r7, r2
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	d04f      	beq.n	8009afc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a5c:	f7fe f9f4 	bl	8007e48 <HAL_GetTick>
 8009a60:	0002      	movs	r2, r0
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <I2C_IsErrorOccurred+0x5e>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d144      	bne.n	8009afc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	2380      	movs	r3, #128	@ 0x80
 8009a7a:	01db      	lsls	r3, r3, #7
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a80:	2013      	movs	r0, #19
 8009a82:	183b      	adds	r3, r7, r0
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	2142      	movs	r1, #66	@ 0x42
 8009a88:	5c52      	ldrb	r2, [r2, r1]
 8009a8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	2380      	movs	r3, #128	@ 0x80
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	401a      	ands	r2, r3
 8009a98:	2380      	movs	r3, #128	@ 0x80
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d126      	bne.n	8009aee <I2C_IsErrorOccurred+0xda>
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	2380      	movs	r3, #128	@ 0x80
 8009aa4:	01db      	lsls	r3, r3, #7
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d021      	beq.n	8009aee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8009aaa:	183b      	adds	r3, r7, r0
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d01d      	beq.n	8009aee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2180      	movs	r1, #128	@ 0x80
 8009abe:	01c9      	lsls	r1, r1, #7
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ac4:	f7fe f9c0 	bl	8007e48 <HAL_GetTick>
 8009ac8:	0003      	movs	r3, r0
 8009aca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009acc:	e00f      	b.n	8009aee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009ace:	f7fe f9bb 	bl	8007e48 <HAL_GetTick>
 8009ad2:	0002      	movs	r2, r0
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b19      	cmp	r3, #25
 8009ada:	d908      	bls.n	8009aee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ae4:	2327      	movs	r3, #39	@ 0x27
 8009ae6:	18fb      	adds	r3, r7, r3
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]

              break;
 8009aec:	e006      	b.n	8009afc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	2220      	movs	r2, #32
 8009af6:	4013      	ands	r3, r2
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d1e8      	bne.n	8009ace <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	2220      	movs	r2, #32
 8009b04:	4013      	ands	r3, r2
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d004      	beq.n	8009b14 <I2C_IsErrorOccurred+0x100>
 8009b0a:	2327      	movs	r3, #39	@ 0x27
 8009b0c:	18fb      	adds	r3, r7, r3
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d09b      	beq.n	8009a4c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b14:	2327      	movs	r3, #39	@ 0x27
 8009b16:	18fb      	adds	r3, r7, r3
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d103      	bne.n	8009b26 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2220      	movs	r2, #32
 8009b24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b2e:	2327      	movs	r3, #39	@ 0x27
 8009b30:	18fb      	adds	r3, r7, r3
 8009b32:	2201      	movs	r2, #1
 8009b34:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	2380      	movs	r3, #128	@ 0x80
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	4013      	ands	r3, r2
 8009b46:	d00c      	beq.n	8009b62 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2280      	movs	r2, #128	@ 0x80
 8009b56:	0052      	lsls	r2, r2, #1
 8009b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b5a:	2327      	movs	r3, #39	@ 0x27
 8009b5c:	18fb      	adds	r3, r7, r3
 8009b5e:	2201      	movs	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	2380      	movs	r3, #128	@ 0x80
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d00c      	beq.n	8009b86 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	2208      	movs	r2, #8
 8009b70:	4313      	orrs	r3, r2
 8009b72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2280      	movs	r2, #128	@ 0x80
 8009b7a:	00d2      	lsls	r2, r2, #3
 8009b7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b7e:	2327      	movs	r3, #39	@ 0x27
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	2201      	movs	r2, #1
 8009b84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	2380      	movs	r3, #128	@ 0x80
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	d00c      	beq.n	8009baa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2202      	movs	r2, #2
 8009b94:	4313      	orrs	r3, r2
 8009b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2280      	movs	r2, #128	@ 0x80
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ba2:	2327      	movs	r3, #39	@ 0x27
 8009ba4:	18fb      	adds	r3, r7, r3
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009baa:	2327      	movs	r3, #39	@ 0x27
 8009bac:	18fb      	adds	r3, r7, r3
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01d      	beq.n	8009bf0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f7ff fd8a 	bl	80096d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	490e      	ldr	r1, [pc, #56]	@ (8009c00 <I2C_IsErrorOccurred+0x1ec>)
 8009bc8:	400a      	ands	r2, r1
 8009bca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2241      	movs	r2, #65	@ 0x41
 8009bdc:	2120      	movs	r1, #32
 8009bde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2242      	movs	r2, #66	@ 0x42
 8009be4:	2100      	movs	r1, #0
 8009be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2240      	movs	r2, #64	@ 0x40
 8009bec:	2100      	movs	r1, #0
 8009bee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009bf0:	2327      	movs	r3, #39	@ 0x27
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	781b      	ldrb	r3, [r3, #0]
}
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b00a      	add	sp, #40	@ 0x28
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	46c0      	nop			@ (mov r8, r8)
 8009c00:	fe00e800 	.word	0xfe00e800

08009c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	0008      	movs	r0, r1
 8009c0e:	0011      	movs	r1, r2
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	240a      	movs	r4, #10
 8009c14:	193b      	adds	r3, r7, r4
 8009c16:	1c02      	adds	r2, r0, #0
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	2009      	movs	r0, #9
 8009c1c:	183b      	adds	r3, r7, r0
 8009c1e:	1c0a      	adds	r2, r1, #0
 8009c20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c22:	193b      	adds	r3, r7, r4
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	059b      	lsls	r3, r3, #22
 8009c28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c2a:	183b      	adds	r3, r7, r0
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	0419      	lsls	r1, r3, #16
 8009c30:	23ff      	movs	r3, #255	@ 0xff
 8009c32:	041b      	lsls	r3, r3, #16
 8009c34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c4e:	0d51      	lsrs	r1, r2, #21
 8009c50:	2280      	movs	r2, #128	@ 0x80
 8009c52:	00d2      	lsls	r2, r2, #3
 8009c54:	400a      	ands	r2, r1
 8009c56:	4907      	ldr	r1, [pc, #28]	@ (8009c74 <I2C_TransferConfig+0x70>)
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	43d2      	mvns	r2, r2
 8009c5c:	401a      	ands	r2, r3
 8009c5e:	0011      	movs	r1, r2
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c6a:	46c0      	nop			@ (mov r8, r8)
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	b007      	add	sp, #28
 8009c70:	bd90      	pop	{r4, r7, pc}
 8009c72:	46c0      	nop			@ (mov r8, r8)
 8009c74:	03ff63ff 	.word	0x03ff63ff

08009c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2241      	movs	r2, #65	@ 0x41
 8009c86:	5c9b      	ldrb	r3, [r3, r2]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	d138      	bne.n	8009d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2240      	movs	r2, #64	@ 0x40
 8009c92:	5c9b      	ldrb	r3, [r3, r2]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e032      	b.n	8009d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2240      	movs	r2, #64	@ 0x40
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2241      	movs	r2, #65	@ 0x41
 8009ca8:	2124      	movs	r1, #36	@ 0x24
 8009caa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	438a      	bics	r2, r1
 8009cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4911      	ldr	r1, [pc, #68]	@ (8009d0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009cc8:	400a      	ands	r2, r1
 8009cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2241      	movs	r2, #65	@ 0x41
 8009cf0:	2120      	movs	r1, #32
 8009cf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2240      	movs	r2, #64	@ 0x40
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e000      	b.n	8009d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d00:	2302      	movs	r3, #2
  }
}
 8009d02:	0018      	movs	r0, r3
 8009d04:	46bd      	mov	sp, r7
 8009d06:	b002      	add	sp, #8
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	46c0      	nop			@ (mov r8, r8)
 8009d0c:	ffffefff 	.word	0xffffefff

08009d10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2241      	movs	r2, #65	@ 0x41
 8009d1e:	5c9b      	ldrb	r3, [r3, r2]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d139      	bne.n	8009d9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2240      	movs	r2, #64	@ 0x40
 8009d2a:	5c9b      	ldrb	r3, [r3, r2]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e033      	b.n	8009d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2240      	movs	r2, #64	@ 0x40
 8009d38:	2101      	movs	r1, #1
 8009d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2241      	movs	r2, #65	@ 0x41
 8009d40:	2124      	movs	r1, #36	@ 0x24
 8009d42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2101      	movs	r1, #1
 8009d50:	438a      	bics	r2, r1
 8009d52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a11      	ldr	r2, [pc, #68]	@ (8009da4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2101      	movs	r1, #1
 8009d82:	430a      	orrs	r2, r1
 8009d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2241      	movs	r2, #65	@ 0x41
 8009d8a:	2120      	movs	r1, #32
 8009d8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2240      	movs	r2, #64	@ 0x40
 8009d92:	2100      	movs	r1, #0
 8009d94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e000      	b.n	8009d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d9a:	2302      	movs	r3, #2
  }
}
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b004      	add	sp, #16
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	fffff0ff 	.word	0xfffff0ff

08009da8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dac:	4b04      	ldr	r3, [pc, #16]	@ (8009dc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	4b03      	ldr	r3, [pc, #12]	@ (8009dc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009db2:	2180      	movs	r1, #128	@ 0x80
 8009db4:	0049      	lsls	r1, r1, #1
 8009db6:	430a      	orrs	r2, r1
 8009db8:	601a      	str	r2, [r3, #0]
}
 8009dba:	46c0      	nop			@ (mov r8, r8)
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	40007000 	.word	0x40007000

08009dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009dcc:	4b19      	ldr	r3, [pc, #100]	@ (8009e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a19      	ldr	r2, [pc, #100]	@ (8009e38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	0019      	movs	r1, r3
 8009dd6:	4b17      	ldr	r3, [pc, #92]	@ (8009e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	2380      	movs	r3, #128	@ 0x80
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d11f      	bne.n	8009e28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009de8:	4b14      	ldr	r3, [pc, #80]	@ (8009e3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	0013      	movs	r3, r2
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	189b      	adds	r3, r3, r2
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	4912      	ldr	r1, [pc, #72]	@ (8009e40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009df6:	0018      	movs	r0, r3
 8009df8:	f7f6 f9a2 	bl	8000140 <__udivsi3>
 8009dfc:	0003      	movs	r3, r0
 8009dfe:	3301      	adds	r3, #1
 8009e00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e02:	e008      	b.n	8009e16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e001      	b.n	8009e16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e009      	b.n	8009e2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e16:	4b07      	ldr	r3, [pc, #28]	@ (8009e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009e18:	695a      	ldr	r2, [r3, #20]
 8009e1a:	2380      	movs	r3, #128	@ 0x80
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	401a      	ands	r2, r3
 8009e20:	2380      	movs	r3, #128	@ 0x80
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d0ed      	beq.n	8009e04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b004      	add	sp, #16
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	46c0      	nop			@ (mov r8, r8)
 8009e34:	40007000 	.word	0x40007000
 8009e38:	fffff9ff 	.word	0xfffff9ff
 8009e3c:	2000006c 	.word	0x2000006c
 8009e40:	000f4240 	.word	0x000f4240

08009e44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009e48:	4b03      	ldr	r3, [pc, #12]	@ (8009e58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	23e0      	movs	r3, #224	@ 0xe0
 8009e4e:	01db      	lsls	r3, r3, #7
 8009e50:	4013      	ands	r3, r2
}
 8009e52:	0018      	movs	r0, r3
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40021000 	.word	0x40021000

08009e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e2fe      	b.n	800a46c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2201      	movs	r2, #1
 8009e74:	4013      	ands	r3, r2
 8009e76:	d100      	bne.n	8009e7a <HAL_RCC_OscConfig+0x1e>
 8009e78:	e07c      	b.n	8009f74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e7a:	4bc3      	ldr	r3, [pc, #780]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2238      	movs	r2, #56	@ 0x38
 8009e80:	4013      	ands	r3, r2
 8009e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e84:	4bc0      	ldr	r3, [pc, #768]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2203      	movs	r2, #3
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b10      	cmp	r3, #16
 8009e92:	d102      	bne.n	8009e9a <HAL_RCC_OscConfig+0x3e>
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d002      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d10b      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ea0:	4bb9      	ldr	r3, [pc, #740]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	2380      	movs	r3, #128	@ 0x80
 8009ea6:	029b      	lsls	r3, r3, #10
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	d062      	beq.n	8009f72 <HAL_RCC_OscConfig+0x116>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d15e      	bne.n	8009f72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e2d9      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	2380      	movs	r3, #128	@ 0x80
 8009ebe:	025b      	lsls	r3, r3, #9
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d107      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x78>
 8009ec4:	4bb0      	ldr	r3, [pc, #704]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	4baf      	ldr	r3, [pc, #700]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009eca:	2180      	movs	r1, #128	@ 0x80
 8009ecc:	0249      	lsls	r1, r1, #9
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e020      	b.n	8009f16 <HAL_RCC_OscConfig+0xba>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	23a0      	movs	r3, #160	@ 0xa0
 8009eda:	02db      	lsls	r3, r3, #11
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d10e      	bne.n	8009efe <HAL_RCC_OscConfig+0xa2>
 8009ee0:	4ba9      	ldr	r3, [pc, #676]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	4ba8      	ldr	r3, [pc, #672]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ee6:	2180      	movs	r1, #128	@ 0x80
 8009ee8:	02c9      	lsls	r1, r1, #11
 8009eea:	430a      	orrs	r2, r1
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	4ba6      	ldr	r3, [pc, #664]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4ba5      	ldr	r3, [pc, #660]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ef4:	2180      	movs	r1, #128	@ 0x80
 8009ef6:	0249      	lsls	r1, r1, #9
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	e00b      	b.n	8009f16 <HAL_RCC_OscConfig+0xba>
 8009efe:	4ba2      	ldr	r3, [pc, #648]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4ba1      	ldr	r3, [pc, #644]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f04:	49a1      	ldr	r1, [pc, #644]	@ (800a18c <HAL_RCC_OscConfig+0x330>)
 8009f06:	400a      	ands	r2, r1
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	4b9f      	ldr	r3, [pc, #636]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4b9e      	ldr	r3, [pc, #632]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f10:	499f      	ldr	r1, [pc, #636]	@ (800a190 <HAL_RCC_OscConfig+0x334>)
 8009f12:	400a      	ands	r2, r1
 8009f14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d014      	beq.n	8009f48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1e:	f7fd ff93 	bl	8007e48 <HAL_GetTick>
 8009f22:	0003      	movs	r3, r0
 8009f24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f26:	e008      	b.n	8009f3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f28:	f7fd ff8e 	bl	8007e48 <HAL_GetTick>
 8009f2c:	0002      	movs	r2, r0
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b64      	cmp	r3, #100	@ 0x64
 8009f34:	d901      	bls.n	8009f3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e298      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f3a:	4b93      	ldr	r3, [pc, #588]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	2380      	movs	r3, #128	@ 0x80
 8009f40:	029b      	lsls	r3, r3, #10
 8009f42:	4013      	ands	r3, r2
 8009f44:	d0f0      	beq.n	8009f28 <HAL_RCC_OscConfig+0xcc>
 8009f46:	e015      	b.n	8009f74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f48:	f7fd ff7e 	bl	8007e48 <HAL_GetTick>
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f52:	f7fd ff79 	bl	8007e48 <HAL_GetTick>
 8009f56:	0002      	movs	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b64      	cmp	r3, #100	@ 0x64
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e283      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f64:	4b88      	ldr	r3, [pc, #544]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	2380      	movs	r3, #128	@ 0x80
 8009f6a:	029b      	lsls	r3, r3, #10
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	d1f0      	bne.n	8009f52 <HAL_RCC_OscConfig+0xf6>
 8009f70:	e000      	b.n	8009f74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	d100      	bne.n	8009f80 <HAL_RCC_OscConfig+0x124>
 8009f7e:	e099      	b.n	800a0b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f80:	4b81      	ldr	r3, [pc, #516]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	2238      	movs	r2, #56	@ 0x38
 8009f86:	4013      	ands	r3, r2
 8009f88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f8a:	4b7f      	ldr	r3, [pc, #508]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	2203      	movs	r2, #3
 8009f90:	4013      	ands	r3, r2
 8009f92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d102      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x144>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d002      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d135      	bne.n	800a012 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fa6:	4b78      	ldr	r3, [pc, #480]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	2380      	movs	r3, #128	@ 0x80
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	4013      	ands	r3, r2
 8009fb0:	d005      	beq.n	8009fbe <HAL_RCC_OscConfig+0x162>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e256      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fbe:	4b72      	ldr	r3, [pc, #456]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	4a74      	ldr	r2, [pc, #464]	@ (800a194 <HAL_RCC_OscConfig+0x338>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	0019      	movs	r1, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	021a      	lsls	r2, r3, #8
 8009fce:	4b6e      	ldr	r3, [pc, #440]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d112      	bne.n	800a000 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009fda:	4b6b      	ldr	r3, [pc, #428]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a6e      	ldr	r2, [pc, #440]	@ (800a198 <HAL_RCC_OscConfig+0x33c>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	0019      	movs	r1, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	4b67      	ldr	r3, [pc, #412]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009fea:	430a      	orrs	r2, r1
 8009fec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009fee:	4b66      	ldr	r3, [pc, #408]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	0adb      	lsrs	r3, r3, #11
 8009ff4:	2207      	movs	r2, #7
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	4a68      	ldr	r2, [pc, #416]	@ (800a19c <HAL_RCC_OscConfig+0x340>)
 8009ffa:	40da      	lsrs	r2, r3
 8009ffc:	4b68      	ldr	r3, [pc, #416]	@ (800a1a0 <HAL_RCC_OscConfig+0x344>)
 8009ffe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a000:	4b68      	ldr	r3, [pc, #416]	@ (800a1a4 <HAL_RCC_OscConfig+0x348>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	0018      	movs	r0, r3
 800a006:	f7fd f98d 	bl	8007324 <HAL_InitTick>
 800a00a:	1e03      	subs	r3, r0, #0
 800a00c:	d051      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e22c      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d030      	beq.n	800a07c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a01a:	4b5b      	ldr	r3, [pc, #364]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a5e      	ldr	r2, [pc, #376]	@ (800a198 <HAL_RCC_OscConfig+0x33c>)
 800a020:	4013      	ands	r3, r2
 800a022:	0019      	movs	r1, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691a      	ldr	r2, [r3, #16]
 800a028:	4b57      	ldr	r3, [pc, #348]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a02a:	430a      	orrs	r2, r1
 800a02c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a02e:	4b56      	ldr	r3, [pc, #344]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	4b55      	ldr	r3, [pc, #340]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a034:	2180      	movs	r1, #128	@ 0x80
 800a036:	0049      	lsls	r1, r1, #1
 800a038:	430a      	orrs	r2, r1
 800a03a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03c:	f7fd ff04 	bl	8007e48 <HAL_GetTick>
 800a040:	0003      	movs	r3, r0
 800a042:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a046:	f7fd feff 	bl	8007e48 <HAL_GetTick>
 800a04a:	0002      	movs	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e209      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a058:	4b4b      	ldr	r3, [pc, #300]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	2380      	movs	r3, #128	@ 0x80
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	4013      	ands	r3, r2
 800a062:	d0f0      	beq.n	800a046 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a064:	4b48      	ldr	r3, [pc, #288]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a4a      	ldr	r2, [pc, #296]	@ (800a194 <HAL_RCC_OscConfig+0x338>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	0019      	movs	r1, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	021a      	lsls	r2, r3, #8
 800a074:	4b44      	ldr	r3, [pc, #272]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a076:	430a      	orrs	r2, r1
 800a078:	605a      	str	r2, [r3, #4]
 800a07a:	e01b      	b.n	800a0b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a07c:	4b42      	ldr	r3, [pc, #264]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	4b41      	ldr	r3, [pc, #260]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a082:	4949      	ldr	r1, [pc, #292]	@ (800a1a8 <HAL_RCC_OscConfig+0x34c>)
 800a084:	400a      	ands	r2, r1
 800a086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a088:	f7fd fede 	bl	8007e48 <HAL_GetTick>
 800a08c:	0003      	movs	r3, r0
 800a08e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a090:	e008      	b.n	800a0a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a092:	f7fd fed9 	bl	8007e48 <HAL_GetTick>
 800a096:	0002      	movs	r2, r0
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d901      	bls.n	800a0a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e1e3      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0a4:	4b38      	ldr	r3, [pc, #224]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	2380      	movs	r3, #128	@ 0x80
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	d1f0      	bne.n	800a092 <HAL_RCC_OscConfig+0x236>
 800a0b0:	e000      	b.n	800a0b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2208      	movs	r2, #8
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	d047      	beq.n	800a14e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a0be:	4b32      	ldr	r3, [pc, #200]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	2238      	movs	r2, #56	@ 0x38
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	2b18      	cmp	r3, #24
 800a0c8:	d10a      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a0ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a0cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	d03c      	beq.n	800a14e <HAL_RCC_OscConfig+0x2f2>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d138      	bne.n	800a14e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e1c5      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d019      	beq.n	800a11c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a0e8:	4b27      	ldr	r3, [pc, #156]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a0ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a0ec:	4b26      	ldr	r3, [pc, #152]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f4:	f7fd fea8 	bl	8007e48 <HAL_GetTick>
 800a0f8:	0003      	movs	r3, r0
 800a0fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0fc:	e008      	b.n	800a110 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0fe:	f7fd fea3 	bl	8007e48 <HAL_GetTick>
 800a102:	0002      	movs	r2, r0
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d901      	bls.n	800a110 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e1ad      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a110:	4b1d      	ldr	r3, [pc, #116]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a114:	2202      	movs	r2, #2
 800a116:	4013      	ands	r3, r2
 800a118:	d0f1      	beq.n	800a0fe <HAL_RCC_OscConfig+0x2a2>
 800a11a:	e018      	b.n	800a14e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a11c:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a11e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a120:	4b19      	ldr	r3, [pc, #100]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a122:	2101      	movs	r1, #1
 800a124:	438a      	bics	r2, r1
 800a126:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a128:	f7fd fe8e 	bl	8007e48 <HAL_GetTick>
 800a12c:	0003      	movs	r3, r0
 800a12e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a130:	e008      	b.n	800a144 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a132:	f7fd fe89 	bl	8007e48 <HAL_GetTick>
 800a136:	0002      	movs	r2, r0
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d901      	bls.n	800a144 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e193      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a144:	4b10      	ldr	r3, [pc, #64]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a148:	2202      	movs	r2, #2
 800a14a:	4013      	ands	r3, r2
 800a14c:	d1f1      	bne.n	800a132 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2204      	movs	r2, #4
 800a154:	4013      	ands	r3, r2
 800a156:	d100      	bne.n	800a15a <HAL_RCC_OscConfig+0x2fe>
 800a158:	e0c6      	b.n	800a2e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a15a:	231f      	movs	r3, #31
 800a15c:	18fb      	adds	r3, r7, r3
 800a15e:	2200      	movs	r2, #0
 800a160:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a162:	4b09      	ldr	r3, [pc, #36]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2238      	movs	r2, #56	@ 0x38
 800a168:	4013      	ands	r3, r2
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d11e      	bne.n	800a1ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a16e:	4b06      	ldr	r3, [pc, #24]	@ (800a188 <HAL_RCC_OscConfig+0x32c>)
 800a170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a172:	2202      	movs	r2, #2
 800a174:	4013      	ands	r3, r2
 800a176:	d100      	bne.n	800a17a <HAL_RCC_OscConfig+0x31e>
 800a178:	e0b6      	b.n	800a2e8 <HAL_RCC_OscConfig+0x48c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d000      	beq.n	800a184 <HAL_RCC_OscConfig+0x328>
 800a182:	e0b1      	b.n	800a2e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e171      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
 800a188:	40021000 	.word	0x40021000
 800a18c:	fffeffff 	.word	0xfffeffff
 800a190:	fffbffff 	.word	0xfffbffff
 800a194:	ffff80ff 	.word	0xffff80ff
 800a198:	ffffc7ff 	.word	0xffffc7ff
 800a19c:	00f42400 	.word	0x00f42400
 800a1a0:	2000006c 	.word	0x2000006c
 800a1a4:	20000078 	.word	0x20000078
 800a1a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a1ac:	4bb1      	ldr	r3, [pc, #708]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a1ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1b0:	2380      	movs	r3, #128	@ 0x80
 800a1b2:	055b      	lsls	r3, r3, #21
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	d101      	bne.n	800a1bc <HAL_RCC_OscConfig+0x360>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <HAL_RCC_OscConfig+0x362>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a1c2:	4bac      	ldr	r3, [pc, #688]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a1c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1c6:	4bab      	ldr	r3, [pc, #684]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a1c8:	2180      	movs	r1, #128	@ 0x80
 800a1ca:	0549      	lsls	r1, r1, #21
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a1d0:	4ba8      	ldr	r3, [pc, #672]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a1d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1d4:	2380      	movs	r3, #128	@ 0x80
 800a1d6:	055b      	lsls	r3, r3, #21
 800a1d8:	4013      	ands	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a1de:	231f      	movs	r3, #31
 800a1e0:	18fb      	adds	r3, r7, r3
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1e6:	4ba4      	ldr	r3, [pc, #656]	@ (800a478 <HAL_RCC_OscConfig+0x61c>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	2380      	movs	r3, #128	@ 0x80
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	d11a      	bne.n	800a228 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1f2:	4ba1      	ldr	r3, [pc, #644]	@ (800a478 <HAL_RCC_OscConfig+0x61c>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4ba0      	ldr	r3, [pc, #640]	@ (800a478 <HAL_RCC_OscConfig+0x61c>)
 800a1f8:	2180      	movs	r1, #128	@ 0x80
 800a1fa:	0049      	lsls	r1, r1, #1
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a200:	f7fd fe22 	bl	8007e48 <HAL_GetTick>
 800a204:	0003      	movs	r3, r0
 800a206:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a208:	e008      	b.n	800a21c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a20a:	f7fd fe1d 	bl	8007e48 <HAL_GetTick>
 800a20e:	0002      	movs	r2, r0
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e127      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a21c:	4b96      	ldr	r3, [pc, #600]	@ (800a478 <HAL_RCC_OscConfig+0x61c>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	2380      	movs	r3, #128	@ 0x80
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4013      	ands	r3, r2
 800a226:	d0f0      	beq.n	800a20a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d106      	bne.n	800a23e <HAL_RCC_OscConfig+0x3e2>
 800a230:	4b90      	ldr	r3, [pc, #576]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a232:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a234:	4b8f      	ldr	r3, [pc, #572]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a236:	2101      	movs	r1, #1
 800a238:	430a      	orrs	r2, r1
 800a23a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a23c:	e01c      	b.n	800a278 <HAL_RCC_OscConfig+0x41c>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	2b05      	cmp	r3, #5
 800a244:	d10c      	bne.n	800a260 <HAL_RCC_OscConfig+0x404>
 800a246:	4b8b      	ldr	r3, [pc, #556]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a248:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a24a:	4b8a      	ldr	r3, [pc, #552]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a24c:	2104      	movs	r1, #4
 800a24e:	430a      	orrs	r2, r1
 800a250:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a252:	4b88      	ldr	r3, [pc, #544]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a254:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a256:	4b87      	ldr	r3, [pc, #540]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a258:	2101      	movs	r1, #1
 800a25a:	430a      	orrs	r2, r1
 800a25c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a25e:	e00b      	b.n	800a278 <HAL_RCC_OscConfig+0x41c>
 800a260:	4b84      	ldr	r3, [pc, #528]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a262:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a264:	4b83      	ldr	r3, [pc, #524]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a266:	2101      	movs	r1, #1
 800a268:	438a      	bics	r2, r1
 800a26a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a26c:	4b81      	ldr	r3, [pc, #516]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a26e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a270:	4b80      	ldr	r3, [pc, #512]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a272:	2104      	movs	r1, #4
 800a274:	438a      	bics	r2, r1
 800a276:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d014      	beq.n	800a2aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a280:	f7fd fde2 	bl	8007e48 <HAL_GetTick>
 800a284:	0003      	movs	r3, r0
 800a286:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a288:	e009      	b.n	800a29e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a28a:	f7fd fddd 	bl	8007e48 <HAL_GetTick>
 800a28e:	0002      	movs	r2, r0
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	4a79      	ldr	r2, [pc, #484]	@ (800a47c <HAL_RCC_OscConfig+0x620>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d901      	bls.n	800a29e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e0e6      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a29e:	4b75      	ldr	r3, [pc, #468]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a2a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	d0f0      	beq.n	800a28a <HAL_RCC_OscConfig+0x42e>
 800a2a8:	e013      	b.n	800a2d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2aa:	f7fd fdcd 	bl	8007e48 <HAL_GetTick>
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2b2:	e009      	b.n	800a2c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2b4:	f7fd fdc8 	bl	8007e48 <HAL_GetTick>
 800a2b8:	0002      	movs	r2, r0
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	4a6f      	ldr	r2, [pc, #444]	@ (800a47c <HAL_RCC_OscConfig+0x620>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d901      	bls.n	800a2c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e0d1      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2c8:	4b6a      	ldr	r3, [pc, #424]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a2ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	d1f0      	bne.n	800a2b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a2d2:	231f      	movs	r3, #31
 800a2d4:	18fb      	adds	r3, r7, r3
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d105      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a2dc:	4b65      	ldr	r3, [pc, #404]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a2de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2e0:	4b64      	ldr	r3, [pc, #400]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a2e2:	4967      	ldr	r1, [pc, #412]	@ (800a480 <HAL_RCC_OscConfig+0x624>)
 800a2e4:	400a      	ands	r2, r1
 800a2e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d100      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x496>
 800a2f0:	e0bb      	b.n	800a46a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2f2:	4b60      	ldr	r3, [pc, #384]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	2238      	movs	r2, #56	@ 0x38
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	d100      	bne.n	800a300 <HAL_RCC_OscConfig+0x4a4>
 800a2fe:	e07b      	b.n	800a3f8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d156      	bne.n	800a3b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a308:	4b5a      	ldr	r3, [pc, #360]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4b59      	ldr	r3, [pc, #356]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a30e:	495d      	ldr	r1, [pc, #372]	@ (800a484 <HAL_RCC_OscConfig+0x628>)
 800a310:	400a      	ands	r2, r1
 800a312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a314:	f7fd fd98 	bl	8007e48 <HAL_GetTick>
 800a318:	0003      	movs	r3, r0
 800a31a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a31c:	e008      	b.n	800a330 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a31e:	f7fd fd93 	bl	8007e48 <HAL_GetTick>
 800a322:	0002      	movs	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e09d      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a330:	4b50      	ldr	r3, [pc, #320]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	2380      	movs	r3, #128	@ 0x80
 800a336:	049b      	lsls	r3, r3, #18
 800a338:	4013      	ands	r3, r2
 800a33a:	d1f0      	bne.n	800a31e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a33c:	4b4d      	ldr	r3, [pc, #308]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	4a51      	ldr	r2, [pc, #324]	@ (800a488 <HAL_RCC_OscConfig+0x62c>)
 800a342:	4013      	ands	r3, r2
 800a344:	0019      	movs	r1, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35c:	431a      	orrs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a362:	431a      	orrs	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a368:	431a      	orrs	r2, r3
 800a36a:	4b42      	ldr	r3, [pc, #264]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a36c:	430a      	orrs	r2, r1
 800a36e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a370:	4b40      	ldr	r3, [pc, #256]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	4b3f      	ldr	r3, [pc, #252]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a376:	2180      	movs	r1, #128	@ 0x80
 800a378:	0449      	lsls	r1, r1, #17
 800a37a:	430a      	orrs	r2, r1
 800a37c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a37e:	4b3d      	ldr	r3, [pc, #244]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	4b3c      	ldr	r3, [pc, #240]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a384:	2180      	movs	r1, #128	@ 0x80
 800a386:	0549      	lsls	r1, r1, #21
 800a388:	430a      	orrs	r2, r1
 800a38a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a38c:	f7fd fd5c 	bl	8007e48 <HAL_GetTick>
 800a390:	0003      	movs	r3, r0
 800a392:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a394:	e008      	b.n	800a3a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a396:	f7fd fd57 	bl	8007e48 <HAL_GetTick>
 800a39a:	0002      	movs	r2, r0
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d901      	bls.n	800a3a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e061      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3a8:	4b32      	ldr	r3, [pc, #200]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	2380      	movs	r3, #128	@ 0x80
 800a3ae:	049b      	lsls	r3, r3, #18
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	d0f0      	beq.n	800a396 <HAL_RCC_OscConfig+0x53a>
 800a3b4:	e059      	b.n	800a46a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3b6:	4b2f      	ldr	r3, [pc, #188]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4b2e      	ldr	r3, [pc, #184]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a3bc:	4931      	ldr	r1, [pc, #196]	@ (800a484 <HAL_RCC_OscConfig+0x628>)
 800a3be:	400a      	ands	r2, r1
 800a3c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3c2:	f7fd fd41 	bl	8007e48 <HAL_GetTick>
 800a3c6:	0003      	movs	r3, r0
 800a3c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3ca:	e008      	b.n	800a3de <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3cc:	f7fd fd3c 	bl	8007e48 <HAL_GetTick>
 800a3d0:	0002      	movs	r2, r0
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d901      	bls.n	800a3de <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e046      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3de:	4b25      	ldr	r3, [pc, #148]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	2380      	movs	r3, #128	@ 0x80
 800a3e4:	049b      	lsls	r3, r3, #18
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	d1f0      	bne.n	800a3cc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a3ea:	4b22      	ldr	r3, [pc, #136]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a3ec:	68da      	ldr	r2, [r3, #12]
 800a3ee:	4b21      	ldr	r3, [pc, #132]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a3f0:	4926      	ldr	r1, [pc, #152]	@ (800a48c <HAL_RCC_OscConfig+0x630>)
 800a3f2:	400a      	ands	r2, r1
 800a3f4:	60da      	str	r2, [r3, #12]
 800a3f6:	e038      	b.n	800a46a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d101      	bne.n	800a404 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e033      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a404:	4b1b      	ldr	r3, [pc, #108]	@ (800a474 <HAL_RCC_OscConfig+0x618>)
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2203      	movs	r2, #3
 800a40e:	401a      	ands	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	429a      	cmp	r2, r3
 800a416:	d126      	bne.n	800a466 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2270      	movs	r2, #112	@ 0x70
 800a41c:	401a      	ands	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a422:	429a      	cmp	r2, r3
 800a424:	d11f      	bne.n	800a466 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	23fe      	movs	r3, #254	@ 0xfe
 800a42a:	01db      	lsls	r3, r3, #7
 800a42c:	401a      	ands	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a432:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a434:	429a      	cmp	r2, r3
 800a436:	d116      	bne.n	800a466 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	23f8      	movs	r3, #248	@ 0xf8
 800a43c:	039b      	lsls	r3, r3, #14
 800a43e:	401a      	ands	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a444:	429a      	cmp	r2, r3
 800a446:	d10e      	bne.n	800a466 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	23e0      	movs	r3, #224	@ 0xe0
 800a44c:	051b      	lsls	r3, r3, #20
 800a44e:	401a      	ands	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a454:	429a      	cmp	r2, r3
 800a456:	d106      	bne.n	800a466 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	0f5b      	lsrs	r3, r3, #29
 800a45c:	075a      	lsls	r2, r3, #29
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a462:	429a      	cmp	r2, r3
 800a464:	d001      	beq.n	800a46a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	0018      	movs	r0, r3
 800a46e:	46bd      	mov	sp, r7
 800a470:	b008      	add	sp, #32
 800a472:	bd80      	pop	{r7, pc}
 800a474:	40021000 	.word	0x40021000
 800a478:	40007000 	.word	0x40007000
 800a47c:	00001388 	.word	0x00001388
 800a480:	efffffff 	.word	0xefffffff
 800a484:	feffffff 	.word	0xfeffffff
 800a488:	11c1808c 	.word	0x11c1808c
 800a48c:	eefefffc 	.word	0xeefefffc

0800a490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0e9      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a4a4:	4b76      	ldr	r3, [pc, #472]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d91e      	bls.n	800a4f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4b2:	4b73      	ldr	r3, [pc, #460]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2207      	movs	r2, #7
 800a4b8:	4393      	bics	r3, r2
 800a4ba:	0019      	movs	r1, r3
 800a4bc:	4b70      	ldr	r3, [pc, #448]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a4c4:	f7fd fcc0 	bl	8007e48 <HAL_GetTick>
 800a4c8:	0003      	movs	r3, r0
 800a4ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a4cc:	e009      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4ce:	f7fd fcbb 	bl	8007e48 <HAL_GetTick>
 800a4d2:	0002      	movs	r2, r0
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	4a6a      	ldr	r2, [pc, #424]	@ (800a684 <HAL_RCC_ClockConfig+0x1f4>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d901      	bls.n	800a4e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e0ca      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a4e2:	4b67      	ldr	r3, [pc, #412]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2207      	movs	r2, #7
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d1ee      	bne.n	800a4ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d015      	beq.n	800a526 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2204      	movs	r2, #4
 800a500:	4013      	ands	r3, r2
 800a502:	d006      	beq.n	800a512 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a504:	4b60      	ldr	r3, [pc, #384]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	4b5f      	ldr	r3, [pc, #380]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a50a:	21e0      	movs	r1, #224	@ 0xe0
 800a50c:	01c9      	lsls	r1, r1, #7
 800a50e:	430a      	orrs	r2, r1
 800a510:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a512:	4b5d      	ldr	r3, [pc, #372]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	4a5d      	ldr	r2, [pc, #372]	@ (800a68c <HAL_RCC_ClockConfig+0x1fc>)
 800a518:	4013      	ands	r3, r2
 800a51a:	0019      	movs	r1, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	4b59      	ldr	r3, [pc, #356]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a522:	430a      	orrs	r2, r1
 800a524:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2201      	movs	r2, #1
 800a52c:	4013      	ands	r3, r2
 800a52e:	d057      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d107      	bne.n	800a548 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a538:	4b53      	ldr	r3, [pc, #332]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	2380      	movs	r3, #128	@ 0x80
 800a53e:	029b      	lsls	r3, r3, #10
 800a540:	4013      	ands	r3, r2
 800a542:	d12b      	bne.n	800a59c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e097      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d107      	bne.n	800a560 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a550:	4b4d      	ldr	r3, [pc, #308]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	2380      	movs	r3, #128	@ 0x80
 800a556:	049b      	lsls	r3, r3, #18
 800a558:	4013      	ands	r3, r2
 800a55a:	d11f      	bne.n	800a59c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e08b      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d107      	bne.n	800a578 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a568:	4b47      	ldr	r3, [pc, #284]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	2380      	movs	r3, #128	@ 0x80
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	4013      	ands	r3, r2
 800a572:	d113      	bne.n	800a59c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e07f      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d106      	bne.n	800a58e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a580:	4b41      	ldr	r3, [pc, #260]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a584:	2202      	movs	r2, #2
 800a586:	4013      	ands	r3, r2
 800a588:	d108      	bne.n	800a59c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e074      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a58e:	4b3e      	ldr	r3, [pc, #248]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a592:	2202      	movs	r2, #2
 800a594:	4013      	ands	r3, r2
 800a596:	d101      	bne.n	800a59c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e06d      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a59c:	4b3a      	ldr	r3, [pc, #232]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	4393      	bics	r3, r2
 800a5a4:	0019      	movs	r1, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	4b37      	ldr	r3, [pc, #220]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b0:	f7fd fc4a 	bl	8007e48 <HAL_GetTick>
 800a5b4:	0003      	movs	r3, r0
 800a5b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5b8:	e009      	b.n	800a5ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5ba:	f7fd fc45 	bl	8007e48 <HAL_GetTick>
 800a5be:	0002      	movs	r2, r0
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	4a2f      	ldr	r2, [pc, #188]	@ (800a684 <HAL_RCC_ClockConfig+0x1f4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e054      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5ce:	4b2e      	ldr	r3, [pc, #184]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	2238      	movs	r2, #56	@ 0x38
 800a5d4:	401a      	ands	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d1ec      	bne.n	800a5ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5e0:	4b27      	ldr	r3, [pc, #156]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2207      	movs	r2, #7
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d21e      	bcs.n	800a62c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ee:	4b24      	ldr	r3, [pc, #144]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2207      	movs	r2, #7
 800a5f4:	4393      	bics	r3, r2
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	4b21      	ldr	r3, [pc, #132]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a600:	f7fd fc22 	bl	8007e48 <HAL_GetTick>
 800a604:	0003      	movs	r3, r0
 800a606:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a608:	e009      	b.n	800a61e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a60a:	f7fd fc1d 	bl	8007e48 <HAL_GetTick>
 800a60e:	0002      	movs	r2, r0
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	4a1b      	ldr	r2, [pc, #108]	@ (800a684 <HAL_RCC_ClockConfig+0x1f4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d901      	bls.n	800a61e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e02c      	b.n	800a678 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a61e:	4b18      	ldr	r3, [pc, #96]	@ (800a680 <HAL_RCC_ClockConfig+0x1f0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2207      	movs	r2, #7
 800a624:	4013      	ands	r3, r2
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d1ee      	bne.n	800a60a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2204      	movs	r2, #4
 800a632:	4013      	ands	r3, r2
 800a634:	d009      	beq.n	800a64a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a636:	4b14      	ldr	r3, [pc, #80]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	4a15      	ldr	r2, [pc, #84]	@ (800a690 <HAL_RCC_ClockConfig+0x200>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	0019      	movs	r1, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	4b10      	ldr	r3, [pc, #64]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a646:	430a      	orrs	r2, r1
 800a648:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a64a:	f000 f829 	bl	800a6a0 <HAL_RCC_GetSysClockFreq>
 800a64e:	0001      	movs	r1, r0
 800a650:	4b0d      	ldr	r3, [pc, #52]	@ (800a688 <HAL_RCC_ClockConfig+0x1f8>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	0a1b      	lsrs	r3, r3, #8
 800a656:	220f      	movs	r2, #15
 800a658:	401a      	ands	r2, r3
 800a65a:	4b0e      	ldr	r3, [pc, #56]	@ (800a694 <HAL_RCC_ClockConfig+0x204>)
 800a65c:	0092      	lsls	r2, r2, #2
 800a65e:	58d3      	ldr	r3, [r2, r3]
 800a660:	221f      	movs	r2, #31
 800a662:	4013      	ands	r3, r2
 800a664:	000a      	movs	r2, r1
 800a666:	40da      	lsrs	r2, r3
 800a668:	4b0b      	ldr	r3, [pc, #44]	@ (800a698 <HAL_RCC_ClockConfig+0x208>)
 800a66a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a66c:	4b0b      	ldr	r3, [pc, #44]	@ (800a69c <HAL_RCC_ClockConfig+0x20c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	0018      	movs	r0, r3
 800a672:	f7fc fe57 	bl	8007324 <HAL_InitTick>
 800a676:	0003      	movs	r3, r0
}
 800a678:	0018      	movs	r0, r3
 800a67a:	46bd      	mov	sp, r7
 800a67c:	b004      	add	sp, #16
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	40022000 	.word	0x40022000
 800a684:	00001388 	.word	0x00001388
 800a688:	40021000 	.word	0x40021000
 800a68c:	fffff0ff 	.word	0xfffff0ff
 800a690:	ffff8fff 	.word	0xffff8fff
 800a694:	08017090 	.word	0x08017090
 800a698:	2000006c 	.word	0x2000006c
 800a69c:	20000078 	.word	0x20000078

0800a6a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6a6:	4b3c      	ldr	r3, [pc, #240]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	2238      	movs	r2, #56	@ 0x38
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	d10f      	bne.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a6b0:	4b39      	ldr	r3, [pc, #228]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	0adb      	lsrs	r3, r3, #11
 800a6b6:	2207      	movs	r2, #7
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	409a      	lsls	r2, r3
 800a6be:	0013      	movs	r3, r2
 800a6c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	4835      	ldr	r0, [pc, #212]	@ (800a79c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a6c6:	f7f5 fd3b 	bl	8000140 <__udivsi3>
 800a6ca:	0003      	movs	r3, r0
 800a6cc:	613b      	str	r3, [r7, #16]
 800a6ce:	e05d      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a6d0:	4b31      	ldr	r3, [pc, #196]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	2238      	movs	r2, #56	@ 0x38
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d102      	bne.n	800a6e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6dc:	4b30      	ldr	r3, [pc, #192]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a6de:	613b      	str	r3, [r7, #16]
 800a6e0:	e054      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	2238      	movs	r2, #56	@ 0x38
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	2b10      	cmp	r3, #16
 800a6ec:	d138      	bne.n	800a760 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a6ee:	4b2a      	ldr	r3, [pc, #168]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6f8:	4b27      	ldr	r3, [pc, #156]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	091b      	lsrs	r3, r3, #4
 800a6fe:	2207      	movs	r2, #7
 800a700:	4013      	ands	r3, r2
 800a702:	3301      	adds	r3, #1
 800a704:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d10d      	bne.n	800a728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	4824      	ldr	r0, [pc, #144]	@ (800a7a0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a710:	f7f5 fd16 	bl	8000140 <__udivsi3>
 800a714:	0003      	movs	r3, r0
 800a716:	0019      	movs	r1, r3
 800a718:	4b1f      	ldr	r3, [pc, #124]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	0a1b      	lsrs	r3, r3, #8
 800a71e:	227f      	movs	r2, #127	@ 0x7f
 800a720:	4013      	ands	r3, r2
 800a722:	434b      	muls	r3, r1
 800a724:	617b      	str	r3, [r7, #20]
        break;
 800a726:	e00d      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a728:	68b9      	ldr	r1, [r7, #8]
 800a72a:	481c      	ldr	r0, [pc, #112]	@ (800a79c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a72c:	f7f5 fd08 	bl	8000140 <__udivsi3>
 800a730:	0003      	movs	r3, r0
 800a732:	0019      	movs	r1, r3
 800a734:	4b18      	ldr	r3, [pc, #96]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	0a1b      	lsrs	r3, r3, #8
 800a73a:	227f      	movs	r2, #127	@ 0x7f
 800a73c:	4013      	ands	r3, r2
 800a73e:	434b      	muls	r3, r1
 800a740:	617b      	str	r3, [r7, #20]
        break;
 800a742:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a744:	4b14      	ldr	r3, [pc, #80]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	0f5b      	lsrs	r3, r3, #29
 800a74a:	2207      	movs	r2, #7
 800a74c:	4013      	ands	r3, r2
 800a74e:	3301      	adds	r3, #1
 800a750:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a752:	6879      	ldr	r1, [r7, #4]
 800a754:	6978      	ldr	r0, [r7, #20]
 800a756:	f7f5 fcf3 	bl	8000140 <__udivsi3>
 800a75a:	0003      	movs	r3, r0
 800a75c:	613b      	str	r3, [r7, #16]
 800a75e:	e015      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a760:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	2238      	movs	r2, #56	@ 0x38
 800a766:	4013      	ands	r3, r2
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d103      	bne.n	800a774 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a76c:	2380      	movs	r3, #128	@ 0x80
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	613b      	str	r3, [r7, #16]
 800a772:	e00b      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a774:	4b08      	ldr	r3, [pc, #32]	@ (800a798 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	2238      	movs	r2, #56	@ 0x38
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b18      	cmp	r3, #24
 800a77e:	d103      	bne.n	800a788 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a780:	23fa      	movs	r3, #250	@ 0xfa
 800a782:	01db      	lsls	r3, r3, #7
 800a784:	613b      	str	r3, [r7, #16]
 800a786:	e001      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a78c:	693b      	ldr	r3, [r7, #16]
}
 800a78e:	0018      	movs	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	b006      	add	sp, #24
 800a794:	bd80      	pop	{r7, pc}
 800a796:	46c0      	nop			@ (mov r8, r8)
 800a798:	40021000 	.word	0x40021000
 800a79c:	00f42400 	.word	0x00f42400
 800a7a0:	00b71b00 	.word	0x00b71b00

0800a7a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7a8:	4b02      	ldr	r3, [pc, #8]	@ (800a7b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
}
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	46c0      	nop			@ (mov r8, r8)
 800a7b4:	2000006c 	.word	0x2000006c

0800a7b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7b8:	b5b0      	push	{r4, r5, r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a7bc:	f7ff fff2 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 800a7c0:	0004      	movs	r4, r0
 800a7c2:	f7ff fb3f 	bl	8009e44 <LL_RCC_GetAPB1Prescaler>
 800a7c6:	0003      	movs	r3, r0
 800a7c8:	0b1a      	lsrs	r2, r3, #12
 800a7ca:	4b05      	ldr	r3, [pc, #20]	@ (800a7e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7cc:	0092      	lsls	r2, r2, #2
 800a7ce:	58d3      	ldr	r3, [r2, r3]
 800a7d0:	221f      	movs	r2, #31
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	40dc      	lsrs	r4, r3
 800a7d6:	0023      	movs	r3, r4
}
 800a7d8:	0018      	movs	r0, r3
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a7de:	46c0      	nop			@ (mov r8, r8)
 800a7e0:	080170d0 	.word	0x080170d0

0800a7e4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2207      	movs	r2, #7
 800a7f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a830 <HAL_RCC_GetClockConfig+0x4c>)
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2207      	movs	r2, #7
 800a7fa:	401a      	ands	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a800:	4b0b      	ldr	r3, [pc, #44]	@ (800a830 <HAL_RCC_GetClockConfig+0x4c>)
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	23f0      	movs	r3, #240	@ 0xf0
 800a806:	011b      	lsls	r3, r3, #4
 800a808:	401a      	ands	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800a80e:	4b08      	ldr	r3, [pc, #32]	@ (800a830 <HAL_RCC_GetClockConfig+0x4c>)
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	23e0      	movs	r3, #224	@ 0xe0
 800a814:	01db      	lsls	r3, r3, #7
 800a816:	401a      	ands	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a81c:	4b05      	ldr	r3, [pc, #20]	@ (800a834 <HAL_RCC_GetClockConfig+0x50>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2207      	movs	r2, #7
 800a822:	401a      	ands	r2, r3
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	601a      	str	r2, [r3, #0]
}
 800a828:	46c0      	nop			@ (mov r8, r8)
 800a82a:	46bd      	mov	sp, r7
 800a82c:	b002      	add	sp, #8
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40021000 	.word	0x40021000
 800a834:	40022000 	.word	0x40022000

0800a838 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a83c:	4b04      	ldr	r3, [pc, #16]	@ (800a850 <HAL_RCC_EnableCSS+0x18>)
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	4b03      	ldr	r3, [pc, #12]	@ (800a850 <HAL_RCC_EnableCSS+0x18>)
 800a842:	2180      	movs	r1, #128	@ 0x80
 800a844:	0309      	lsls	r1, r1, #12
 800a846:	430a      	orrs	r2, r1
 800a848:	601a      	str	r2, [r3, #0]
}
 800a84a:	46c0      	nop			@ (mov r8, r8)
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	40021000 	.word	0x40021000

0800a854 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 800a85a:	4b0d      	ldr	r3, [pc, #52]	@ (800a890 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800a860:	4b0b      	ldr	r3, [pc, #44]	@ (800a890 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	22c0      	movs	r2, #192	@ 0xc0
 800a866:	0092      	lsls	r2, r2, #2
 800a868:	400a      	ands	r2, r1
 800a86a:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	2380      	movs	r3, #128	@ 0x80
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	4013      	ands	r3, r2
 800a874:	d001      	beq.n	800a87a <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a876:	f000 f80d 	bl	800a894 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	2380      	movs	r3, #128	@ 0x80
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4013      	ands	r3, r2
 800a882:	d001      	beq.n	800a888 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800a884:	f000 f80b 	bl	800a89e <HAL_RCC_LSECSSCallback>
  }
}
 800a888:	46c0      	nop			@ (mov r8, r8)
 800a88a:	46bd      	mov	sp, r7
 800a88c:	b002      	add	sp, #8
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40021000 	.word	0x40021000

0800a894 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a898:	46c0      	nop			@ (mov r8, r8)
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800a8a2:	46c0      	nop			@ (mov r8, r8)
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a8b0:	2313      	movs	r3, #19
 800a8b2:	18fb      	adds	r3, r7, r3
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8b8:	2312      	movs	r3, #18
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	2380      	movs	r3, #128	@ 0x80
 800a8c6:	029b      	lsls	r3, r3, #10
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	d100      	bne.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a8cc:	e0a3      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8ce:	2011      	movs	r0, #17
 800a8d0:	183b      	adds	r3, r7, r0
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8d6:	4bc3      	ldr	r3, [pc, #780]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8da:	2380      	movs	r3, #128	@ 0x80
 800a8dc:	055b      	lsls	r3, r3, #21
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d110      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8e2:	4bc0      	ldr	r3, [pc, #768]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8e6:	4bbf      	ldr	r3, [pc, #764]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8e8:	2180      	movs	r1, #128	@ 0x80
 800a8ea:	0549      	lsls	r1, r1, #21
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a8f0:	4bbc      	ldr	r3, [pc, #752]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8f4:	2380      	movs	r3, #128	@ 0x80
 800a8f6:	055b      	lsls	r3, r3, #21
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	60bb      	str	r3, [r7, #8]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8fe:	183b      	adds	r3, r7, r0
 800a900:	2201      	movs	r2, #1
 800a902:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a904:	4bb8      	ldr	r3, [pc, #736]	@ (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	4bb7      	ldr	r3, [pc, #732]	@ (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a90a:	2180      	movs	r1, #128	@ 0x80
 800a90c:	0049      	lsls	r1, r1, #1
 800a90e:	430a      	orrs	r2, r1
 800a910:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a912:	f7fd fa99 	bl	8007e48 <HAL_GetTick>
 800a916:	0003      	movs	r3, r0
 800a918:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a91a:	e00b      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a91c:	f7fd fa94 	bl	8007e48 <HAL_GetTick>
 800a920:	0002      	movs	r2, r0
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d904      	bls.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a92a:	2313      	movs	r3, #19
 800a92c:	18fb      	adds	r3, r7, r3
 800a92e:	2203      	movs	r2, #3
 800a930:	701a      	strb	r2, [r3, #0]
        break;
 800a932:	e005      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a934:	4bac      	ldr	r3, [pc, #688]	@ (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	2380      	movs	r3, #128	@ 0x80
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	4013      	ands	r3, r2
 800a93e:	d0ed      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a940:	2313      	movs	r3, #19
 800a942:	18fb      	adds	r3, r7, r3
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d154      	bne.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a94a:	4ba6      	ldr	r3, [pc, #664]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a94c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a94e:	23c0      	movs	r3, #192	@ 0xc0
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4013      	ands	r3, r2
 800a954:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d019      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	429a      	cmp	r2, r3
 800a964:	d014      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a966:	4b9f      	ldr	r3, [pc, #636]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a96a:	4aa0      	ldr	r2, [pc, #640]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a96c:	4013      	ands	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a970:	4b9c      	ldr	r3, [pc, #624]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a972:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a974:	4b9b      	ldr	r3, [pc, #620]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a976:	2180      	movs	r1, #128	@ 0x80
 800a978:	0249      	lsls	r1, r1, #9
 800a97a:	430a      	orrs	r2, r1
 800a97c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a97e:	4b99      	ldr	r3, [pc, #612]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a980:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a982:	4b98      	ldr	r3, [pc, #608]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a984:	499a      	ldr	r1, [pc, #616]	@ (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800a986:	400a      	ands	r2, r1
 800a988:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a98a:	4b96      	ldr	r3, [pc, #600]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2201      	movs	r2, #1
 800a994:	4013      	ands	r3, r2
 800a996:	d016      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a998:	f7fd fa56 	bl	8007e48 <HAL_GetTick>
 800a99c:	0003      	movs	r3, r0
 800a99e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9a0:	e00c      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9a2:	f7fd fa51 	bl	8007e48 <HAL_GetTick>
 800a9a6:	0002      	movs	r2, r0
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	4a91      	ldr	r2, [pc, #580]	@ (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d904      	bls.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a9b2:	2313      	movs	r3, #19
 800a9b4:	18fb      	adds	r3, r7, r3
 800a9b6:	2203      	movs	r2, #3
 800a9b8:	701a      	strb	r2, [r3, #0]
            break;
 800a9ba:	e004      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9bc:	4b89      	ldr	r3, [pc, #548]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	d0ed      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a9c6:	2313      	movs	r3, #19
 800a9c8:	18fb      	adds	r3, r7, r3
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9d0:	4b84      	ldr	r3, [pc, #528]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9d4:	4a85      	ldr	r2, [pc, #532]	@ (800abec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	0019      	movs	r1, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9de:	4b81      	ldr	r3, [pc, #516]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9e4:	e00c      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a9e6:	2312      	movs	r3, #18
 800a9e8:	18fb      	adds	r3, r7, r3
 800a9ea:	2213      	movs	r2, #19
 800a9ec:	18ba      	adds	r2, r7, r2
 800a9ee:	7812      	ldrb	r2, [r2, #0]
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e005      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f4:	2312      	movs	r3, #18
 800a9f6:	18fb      	adds	r3, r7, r3
 800a9f8:	2213      	movs	r2, #19
 800a9fa:	18ba      	adds	r2, r7, r2
 800a9fc:	7812      	ldrb	r2, [r2, #0]
 800a9fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa00:	2311      	movs	r3, #17
 800aa02:	18fb      	adds	r3, r7, r3
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d105      	bne.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa0a:	4b76      	ldr	r3, [pc, #472]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa0e:	4b75      	ldr	r3, [pc, #468]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa10:	4979      	ldr	r1, [pc, #484]	@ (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800aa12:	400a      	ands	r2, r1
 800aa14:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	d009      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa20:	4b70      	ldr	r3, [pc, #448]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa24:	2203      	movs	r2, #3
 800aa26:	4393      	bics	r3, r2
 800aa28:	0019      	movs	r1, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	4b6d      	ldr	r3, [pc, #436]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa30:	430a      	orrs	r2, r1
 800aa32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d009      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa3e:	4b69      	ldr	r3, [pc, #420]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa42:	220c      	movs	r2, #12
 800aa44:	4393      	bics	r3, r2
 800aa46:	0019      	movs	r1, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	4b65      	ldr	r3, [pc, #404]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2210      	movs	r2, #16
 800aa58:	4013      	ands	r3, r2
 800aa5a:	d009      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa5c:	4b61      	ldr	r3, [pc, #388]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa60:	4a66      	ldr	r2, [pc, #408]	@ (800abfc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	0019      	movs	r1, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	4b5e      	ldr	r3, [pc, #376]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	2380      	movs	r3, #128	@ 0x80
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4013      	ands	r3, r2
 800aa7a:	d009      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa7c:	4b59      	ldr	r3, [pc, #356]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa80:	4a5f      	ldr	r2, [pc, #380]	@ (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800aa82:	4013      	ands	r3, r2
 800aa84:	0019      	movs	r1, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	699a      	ldr	r2, [r3, #24]
 800aa8a:	4b56      	ldr	r3, [pc, #344]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	2380      	movs	r3, #128	@ 0x80
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	4013      	ands	r3, r2
 800aa9a:	d009      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa9c:	4b51      	ldr	r3, [pc, #324]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa0:	4a58      	ldr	r2, [pc, #352]	@ (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	0019      	movs	r1, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69da      	ldr	r2, [r3, #28]
 800aaaa:	4b4e      	ldr	r3, [pc, #312]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aaac:	430a      	orrs	r2, r1
 800aaae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2220      	movs	r2, #32
 800aab6:	4013      	ands	r3, r2
 800aab8:	d009      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aaba:	4b4a      	ldr	r3, [pc, #296]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aabe:	4a52      	ldr	r2, [pc, #328]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	0019      	movs	r1, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	4b46      	ldr	r3, [pc, #280]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aaca:	430a      	orrs	r2, r1
 800aacc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	2380      	movs	r3, #128	@ 0x80
 800aad4:	01db      	lsls	r3, r3, #7
 800aad6:	4013      	ands	r3, r2
 800aad8:	d015      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aada:	4b42      	ldr	r3, [pc, #264]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	0899      	lsrs	r1, r3, #2
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1a      	ldr	r2, [r3, #32]
 800aae6:	4b3f      	ldr	r3, [pc, #252]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aae8:	430a      	orrs	r2, r1
 800aaea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1a      	ldr	r2, [r3, #32]
 800aaf0:	2380      	movs	r3, #128	@ 0x80
 800aaf2:	05db      	lsls	r3, r3, #23
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d106      	bne.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aaf8:	4b3a      	ldr	r3, [pc, #232]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	4b39      	ldr	r3, [pc, #228]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aafe:	2180      	movs	r1, #128	@ 0x80
 800ab00:	0249      	lsls	r1, r1, #9
 800ab02:	430a      	orrs	r2, r1
 800ab04:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	2380      	movs	r3, #128	@ 0x80
 800ab0c:	031b      	lsls	r3, r3, #12
 800ab0e:	4013      	ands	r3, r2
 800ab10:	d009      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab12:	4b34      	ldr	r3, [pc, #208]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab16:	2240      	movs	r2, #64	@ 0x40
 800ab18:	4393      	bics	r3, r2
 800ab1a:	0019      	movs	r1, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab20:	4b30      	ldr	r3, [pc, #192]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab22:	430a      	orrs	r2, r1
 800ab24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	2380      	movs	r3, #128	@ 0x80
 800ab2c:	039b      	lsls	r3, r3, #14
 800ab2e:	4013      	ands	r3, r2
 800ab30:	d016      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800ab32:	4b2c      	ldr	r3, [pc, #176]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab36:	4a35      	ldr	r2, [pc, #212]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	0019      	movs	r1, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab40:	4b28      	ldr	r3, [pc, #160]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab42:	430a      	orrs	r2, r1
 800ab44:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab4a:	2380      	movs	r3, #128	@ 0x80
 800ab4c:	03db      	lsls	r3, r3, #15
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d106      	bne.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ab52:	4b24      	ldr	r3, [pc, #144]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab54:	68da      	ldr	r2, [r3, #12]
 800ab56:	4b23      	ldr	r3, [pc, #140]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab58:	2180      	movs	r1, #128	@ 0x80
 800ab5a:	0449      	lsls	r1, r1, #17
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	2380      	movs	r3, #128	@ 0x80
 800ab66:	03db      	lsls	r3, r3, #15
 800ab68:	4013      	ands	r3, r2
 800ab6a:	d016      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800ab6c:	4b1d      	ldr	r3, [pc, #116]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab70:	4a27      	ldr	r2, [pc, #156]	@ (800ac10 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800ab72:	4013      	ands	r3, r2
 800ab74:	0019      	movs	r1, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7a:	4b1a      	ldr	r3, [pc, #104]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab84:	2380      	movs	r3, #128	@ 0x80
 800ab86:	045b      	lsls	r3, r3, #17
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d106      	bne.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ab8c:	4b15      	ldr	r3, [pc, #84]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	4b14      	ldr	r3, [pc, #80]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ab92:	2180      	movs	r1, #128	@ 0x80
 800ab94:	0449      	lsls	r1, r1, #17
 800ab96:	430a      	orrs	r2, r1
 800ab98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	2380      	movs	r3, #128	@ 0x80
 800aba0:	011b      	lsls	r3, r3, #4
 800aba2:	4013      	ands	r3, r2
 800aba4:	d016      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800aba6:	4b0f      	ldr	r3, [pc, #60]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abaa:	4a1a      	ldr	r2, [pc, #104]	@ (800ac14 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800abac:	4013      	ands	r3, r2
 800abae:	0019      	movs	r1, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	695a      	ldr	r2, [r3, #20]
 800abb4:	4b0b      	ldr	r3, [pc, #44]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abb6:	430a      	orrs	r2, r1
 800abb8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	695a      	ldr	r2, [r3, #20]
 800abbe:	2380      	movs	r3, #128	@ 0x80
 800abc0:	01db      	lsls	r3, r3, #7
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d106      	bne.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800abc6:	4b07      	ldr	r3, [pc, #28]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abc8:	68da      	ldr	r2, [r3, #12]
 800abca:	4b06      	ldr	r3, [pc, #24]	@ (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800abcc:	2180      	movs	r1, #128	@ 0x80
 800abce:	0249      	lsls	r1, r1, #9
 800abd0:	430a      	orrs	r2, r1
 800abd2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800abd4:	2312      	movs	r3, #18
 800abd6:	18fb      	adds	r3, r7, r3
 800abd8:	781b      	ldrb	r3, [r3, #0]
}
 800abda:	0018      	movs	r0, r3
 800abdc:	46bd      	mov	sp, r7
 800abde:	b006      	add	sp, #24
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	46c0      	nop			@ (mov r8, r8)
 800abe4:	40021000 	.word	0x40021000
 800abe8:	40007000 	.word	0x40007000
 800abec:	fffffcff 	.word	0xfffffcff
 800abf0:	fffeffff 	.word	0xfffeffff
 800abf4:	00001388 	.word	0x00001388
 800abf8:	efffffff 	.word	0xefffffff
 800abfc:	fffff3ff 	.word	0xfffff3ff
 800ac00:	fff3ffff 	.word	0xfff3ffff
 800ac04:	ffcfffff 	.word	0xffcfffff
 800ac08:	ffffcfff 	.word	0xffffcfff
 800ac0c:	ffbfffff 	.word	0xffbfffff
 800ac10:	feffffff 	.word	0xfeffffff
 800ac14:	ffff3fff 	.word	0xffff3fff

0800ac18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ac18:	b5b0      	push	{r4, r5, r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac20:	230f      	movs	r3, #15
 800ac22:	18fb      	adds	r3, r7, r3
 800ac24:	2201      	movs	r2, #1
 800ac26:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d100      	bne.n	800ac30 <HAL_RTC_Init+0x18>
 800ac2e:	e08c      	b.n	800ad4a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2229      	movs	r2, #41	@ 0x29
 800ac34:	5c9b      	ldrb	r3, [r3, r2]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2228      	movs	r2, #40	@ 0x28
 800ac40:	2100      	movs	r1, #0
 800ac42:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2288      	movs	r2, #136	@ 0x88
 800ac48:	0212      	lsls	r2, r2, #8
 800ac4a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	0018      	movs	r0, r3
 800ac50:	f7fc f9a6 	bl	8006fa0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2229      	movs	r2, #41	@ 0x29
 800ac58:	2102      	movs	r1, #2
 800ac5a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	2210      	movs	r2, #16
 800ac64:	4013      	ands	r3, r2
 800ac66:	2b10      	cmp	r3, #16
 800ac68:	d062      	beq.n	800ad30 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	22ca      	movs	r2, #202	@ 0xca
 800ac70:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2253      	movs	r2, #83	@ 0x53
 800ac78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ac7a:	250f      	movs	r5, #15
 800ac7c:	197c      	adds	r4, r7, r5
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	0018      	movs	r0, r3
 800ac82:	f000 f891 	bl	800ada8 <RTC_EnterInitMode>
 800ac86:	0003      	movs	r3, r0
 800ac88:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800ac8a:	0028      	movs	r0, r5
 800ac8c:	183b      	adds	r3, r7, r0
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d12c      	bne.n	800acee <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	492e      	ldr	r1, [pc, #184]	@ (800ad58 <HAL_RTC_Init+0x140>)
 800aca0:	400a      	ands	r2, r1
 800aca2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6999      	ldr	r1, [r3, #24]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	431a      	orrs	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6912      	ldr	r2, [r2, #16]
 800acca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6919      	ldr	r1, [r3, #16]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	041a      	lsls	r2, r3, #16
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ace0:	183c      	adds	r4, r7, r0
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	0018      	movs	r0, r3
 800ace6:	f000 f8a1 	bl	800ae2c <RTC_ExitInitMode>
 800acea:	0003      	movs	r3, r0
 800acec:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800acee:	230f      	movs	r3, #15
 800acf0:	18fb      	adds	r3, r7, r3
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d116      	bne.n	800ad26 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	699a      	ldr	r2, [r3, #24]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	00d2      	lsls	r2, r2, #3
 800ad04:	08d2      	lsrs	r2, r2, #3
 800ad06:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6999      	ldr	r1, [r3, #24]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	22ff      	movs	r2, #255	@ 0xff
 800ad2c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad2e:	e003      	b.n	800ad38 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ad30:	230f      	movs	r3, #15
 800ad32:	18fb      	adds	r3, r7, r3
 800ad34:	2200      	movs	r2, #0
 800ad36:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800ad38:	230f      	movs	r3, #15
 800ad3a:	18fb      	adds	r3, r7, r3
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d103      	bne.n	800ad4a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2229      	movs	r2, #41	@ 0x29
 800ad46:	2101      	movs	r1, #1
 800ad48:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800ad4a:	230f      	movs	r3, #15
 800ad4c:	18fb      	adds	r3, r7, r3
 800ad4e:	781b      	ldrb	r3, [r3, #0]
}
 800ad50:	0018      	movs	r0, r3
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b004      	add	sp, #16
 800ad56:	bdb0      	pop	{r4, r5, r7, pc}
 800ad58:	fb8fffbf 	.word	0xfb8fffbf

0800ad5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a0e      	ldr	r2, [pc, #56]	@ (800ada4 <HAL_RTC_WaitForSynchro+0x48>)
 800ad6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ad6c:	f7fd f86c 	bl	8007e48 <HAL_GetTick>
 800ad70:	0003      	movs	r3, r0
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ad74:	e00a      	b.n	800ad8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad76:	f7fd f867 	bl	8007e48 <HAL_GetTick>
 800ad7a:	0002      	movs	r2, r0
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	1ad2      	subs	r2, r2, r3
 800ad80:	23fa      	movs	r3, #250	@ 0xfa
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d901      	bls.n	800ad8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e006      	b.n	800ad9a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	2220      	movs	r2, #32
 800ad94:	4013      	ands	r3, r2
 800ad96:	d0ee      	beq.n	800ad76 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b004      	add	sp, #16
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	0001005f 	.word	0x0001005f

0800ada8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800adb0:	230f      	movs	r3, #15
 800adb2:	18fb      	adds	r3, r7, r3
 800adb4:	2200      	movs	r2, #0
 800adb6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2240      	movs	r2, #64	@ 0x40
 800adc0:	4013      	ands	r3, r2
 800adc2:	d12c      	bne.n	800ae1e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68da      	ldr	r2, [r3, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2180      	movs	r1, #128	@ 0x80
 800add0:	430a      	orrs	r2, r1
 800add2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800add4:	f7fd f838 	bl	8007e48 <HAL_GetTick>
 800add8:	0003      	movs	r3, r0
 800adda:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800addc:	e014      	b.n	800ae08 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800adde:	f7fd f833 	bl	8007e48 <HAL_GetTick>
 800ade2:	0002      	movs	r2, r0
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	1ad2      	subs	r2, r2, r3
 800ade8:	200f      	movs	r0, #15
 800adea:	183b      	adds	r3, r7, r0
 800adec:	1839      	adds	r1, r7, r0
 800adee:	7809      	ldrb	r1, [r1, #0]
 800adf0:	7019      	strb	r1, [r3, #0]
 800adf2:	23fa      	movs	r3, #250	@ 0xfa
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d906      	bls.n	800ae08 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800adfa:	183b      	adds	r3, r7, r0
 800adfc:	2203      	movs	r2, #3
 800adfe:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2229      	movs	r2, #41	@ 0x29
 800ae04:	2103      	movs	r1, #3
 800ae06:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	2240      	movs	r2, #64	@ 0x40
 800ae10:	4013      	ands	r3, r2
 800ae12:	d104      	bne.n	800ae1e <RTC_EnterInitMode+0x76>
 800ae14:	230f      	movs	r3, #15
 800ae16:	18fb      	adds	r3, r7, r3
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d1df      	bne.n	800adde <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ae1e:	230f      	movs	r3, #15
 800ae20:	18fb      	adds	r3, r7, r3
 800ae22:	781b      	ldrb	r3, [r3, #0]
}
 800ae24:	0018      	movs	r0, r3
 800ae26:	46bd      	mov	sp, r7
 800ae28:	b004      	add	sp, #16
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae34:	240f      	movs	r4, #15
 800ae36:	193b      	adds	r3, r7, r4
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ae3c:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae42:	2180      	movs	r1, #128	@ 0x80
 800ae44:	438a      	bics	r2, r1
 800ae46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ae48:	4b19      	ldr	r3, [pc, #100]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	4013      	ands	r3, r2
 800ae50:	d10d      	bne.n	800ae6e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	0018      	movs	r0, r3
 800ae56:	f7ff ff81 	bl	800ad5c <HAL_RTC_WaitForSynchro>
 800ae5a:	1e03      	subs	r3, r0, #0
 800ae5c:	d021      	beq.n	800aea2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2229      	movs	r2, #41	@ 0x29
 800ae62:	2103      	movs	r1, #3
 800ae64:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ae66:	193b      	adds	r3, r7, r4
 800ae68:	2203      	movs	r2, #3
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	e019      	b.n	800aea2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae6e:	4b10      	ldr	r3, [pc, #64]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae70:	699a      	ldr	r2, [r3, #24]
 800ae72:	4b0f      	ldr	r3, [pc, #60]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae74:	2120      	movs	r1, #32
 800ae76:	438a      	bics	r2, r1
 800ae78:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f7ff ff6d 	bl	800ad5c <HAL_RTC_WaitForSynchro>
 800ae82:	1e03      	subs	r3, r0, #0
 800ae84:	d007      	beq.n	800ae96 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2229      	movs	r2, #41	@ 0x29
 800ae8a:	2103      	movs	r1, #3
 800ae8c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ae8e:	230f      	movs	r3, #15
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	2203      	movs	r2, #3
 800ae94:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae96:	4b06      	ldr	r3, [pc, #24]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae98:	699a      	ldr	r2, [r3, #24]
 800ae9a:	4b05      	ldr	r3, [pc, #20]	@ (800aeb0 <RTC_ExitInitMode+0x84>)
 800ae9c:	2120      	movs	r1, #32
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	619a      	str	r2, [r3, #24]
  }

  return status;
 800aea2:	230f      	movs	r3, #15
 800aea4:	18fb      	adds	r3, r7, r3
 800aea6:	781b      	ldrb	r3, [r3, #0]
}
 800aea8:	0018      	movs	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b005      	add	sp, #20
 800aeae:	bd90      	pop	{r4, r7, pc}
 800aeb0:	40002800 	.word	0x40002800

0800aeb4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	001a      	movs	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	18d3      	adds	r3, r2, r3
 800aecc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	3301      	adds	r3, #1
 800aed2:	33ff      	adds	r3, #255	@ 0xff
 800aed4:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	18d3      	adds	r3, r2, r3
 800aede:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]
}
 800aee6:	46c0      	nop			@ (mov r8, r8)
 800aee8:	46bd      	mov	sp, r7
 800aeea:	b006      	add	sp, #24
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	001a      	movs	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	18d3      	adds	r3, r2, r3
 800af04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	33ff      	adds	r3, #255	@ 0xff
 800af0c:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	18d3      	adds	r3, r2, r3
 800af16:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	681b      	ldr	r3, [r3, #0]
}
 800af1c:	0018      	movs	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	b004      	add	sp, #16
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e0a8      	b.n	800b088 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d109      	bne.n	800af52 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	2382      	movs	r3, #130	@ 0x82
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	429a      	cmp	r2, r3
 800af48:	d009      	beq.n	800af5e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	61da      	str	r2, [r3, #28]
 800af50:	e005      	b.n	800af5e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	225d      	movs	r2, #93	@ 0x5d
 800af68:	5c9b      	ldrb	r3, [r3, r2]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d107      	bne.n	800af80 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	225c      	movs	r2, #92	@ 0x5c
 800af74:	2100      	movs	r1, #0
 800af76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	0018      	movs	r0, r3
 800af7c:	f7fc f8ca 	bl	8007114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	225d      	movs	r2, #93	@ 0x5d
 800af84:	2102      	movs	r1, #2
 800af86:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2140      	movs	r1, #64	@ 0x40
 800af94:	438a      	bics	r2, r1
 800af96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68da      	ldr	r2, [r3, #12]
 800af9c:	23e0      	movs	r3, #224	@ 0xe0
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d902      	bls.n	800afaa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	e002      	b.n	800afb0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800afaa:	2380      	movs	r3, #128	@ 0x80
 800afac:	015b      	lsls	r3, r3, #5
 800afae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	23f0      	movs	r3, #240	@ 0xf0
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	429a      	cmp	r2, r3
 800afba:	d008      	beq.n	800afce <HAL_SPI_Init+0xaa>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68da      	ldr	r2, [r3, #12]
 800afc0:	23e0      	movs	r3, #224	@ 0xe0
 800afc2:	00db      	lsls	r3, r3, #3
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d002      	beq.n	800afce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	2382      	movs	r3, #130	@ 0x82
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	401a      	ands	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6899      	ldr	r1, [r3, #8]
 800afdc:	2384      	movs	r3, #132	@ 0x84
 800afde:	021b      	lsls	r3, r3, #8
 800afe0:	400b      	ands	r3, r1
 800afe2:	431a      	orrs	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	2102      	movs	r1, #2
 800afea:	400b      	ands	r3, r1
 800afec:	431a      	orrs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	2101      	movs	r1, #1
 800aff4:	400b      	ands	r3, r1
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6999      	ldr	r1, [r3, #24]
 800affc:	2380      	movs	r3, #128	@ 0x80
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	400b      	ands	r3, r1
 800b002:	431a      	orrs	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	2138      	movs	r1, #56	@ 0x38
 800b00a:	400b      	ands	r3, r1
 800b00c:	431a      	orrs	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	2180      	movs	r1, #128	@ 0x80
 800b014:	400b      	ands	r3, r1
 800b016:	431a      	orrs	r2, r3
 800b018:	0011      	movs	r1, r2
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b01e:	2380      	movs	r3, #128	@ 0x80
 800b020:	019b      	lsls	r3, r3, #6
 800b022:	401a      	ands	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	0c1b      	lsrs	r3, r3, #16
 800b032:	2204      	movs	r2, #4
 800b034:	401a      	ands	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b03a:	2110      	movs	r1, #16
 800b03c:	400b      	ands	r3, r1
 800b03e:	431a      	orrs	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b044:	2108      	movs	r1, #8
 800b046:	400b      	ands	r3, r1
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68d9      	ldr	r1, [r3, #12]
 800b04e:	23f0      	movs	r3, #240	@ 0xf0
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	400b      	ands	r3, r1
 800b054:	431a      	orrs	r2, r3
 800b056:	0011      	movs	r1, r2
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	2380      	movs	r3, #128	@ 0x80
 800b05c:	015b      	lsls	r3, r3, #5
 800b05e:	401a      	ands	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4907      	ldr	r1, [pc, #28]	@ (800b090 <HAL_SPI_Init+0x16c>)
 800b074:	400a      	ands	r2, r1
 800b076:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	225d      	movs	r2, #93	@ 0x5d
 800b082:	2101      	movs	r1, #1
 800b084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	0018      	movs	r0, r3
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b004      	add	sp, #16
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	fffff7ff 	.word	0xfffff7ff

0800b094 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	1dbb      	adds	r3, r7, #6
 800b0a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b0a4:	231f      	movs	r3, #31
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	225c      	movs	r2, #92	@ 0x5c
 800b0b0:	5c9b      	ldrb	r3, [r3, r2]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <HAL_SPI_Transmit+0x26>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	e147      	b.n	800b34a <HAL_SPI_Transmit+0x2b6>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	225c      	movs	r2, #92	@ 0x5c
 800b0be:	2101      	movs	r1, #1
 800b0c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0c2:	f7fc fec1 	bl	8007e48 <HAL_GetTick>
 800b0c6:	0003      	movs	r3, r0
 800b0c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b0ca:	2316      	movs	r3, #22
 800b0cc:	18fb      	adds	r3, r7, r3
 800b0ce:	1dba      	adds	r2, r7, #6
 800b0d0:	8812      	ldrh	r2, [r2, #0]
 800b0d2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	225d      	movs	r2, #93	@ 0x5d
 800b0d8:	5c9b      	ldrb	r3, [r3, r2]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d004      	beq.n	800b0ea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b0e0:	231f      	movs	r3, #31
 800b0e2:	18fb      	adds	r3, r7, r3
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	701a      	strb	r2, [r3, #0]
    goto error;
 800b0e8:	e128      	b.n	800b33c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <HAL_SPI_Transmit+0x64>
 800b0f0:	1dbb      	adds	r3, r7, #6
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b0f8:	231f      	movs	r3, #31
 800b0fa:	18fb      	adds	r3, r7, r3
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
    goto error;
 800b100:	e11c      	b.n	800b33c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	225d      	movs	r2, #93	@ 0x5d
 800b106:	2103      	movs	r1, #3
 800b108:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	1dba      	adds	r2, r7, #6
 800b11a:	8812      	ldrh	r2, [r2, #0]
 800b11c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1dba      	adds	r2, r7, #6
 800b122:	8812      	ldrh	r2, [r2, #0]
 800b124:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2244      	movs	r2, #68	@ 0x44
 800b130:	2100      	movs	r1, #0
 800b132:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2246      	movs	r2, #70	@ 0x46
 800b138:	2100      	movs	r1, #0
 800b13a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	2380      	movs	r3, #128	@ 0x80
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	429a      	cmp	r2, r3
 800b152:	d110      	bne.n	800b176 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2140      	movs	r1, #64	@ 0x40
 800b160:	438a      	bics	r2, r1
 800b162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2180      	movs	r1, #128	@ 0x80
 800b170:	01c9      	lsls	r1, r1, #7
 800b172:	430a      	orrs	r2, r1
 800b174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2240      	movs	r2, #64	@ 0x40
 800b17e:	4013      	ands	r3, r2
 800b180:	2b40      	cmp	r3, #64	@ 0x40
 800b182:	d007      	beq.n	800b194 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2140      	movs	r1, #64	@ 0x40
 800b190:	430a      	orrs	r2, r1
 800b192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68da      	ldr	r2, [r3, #12]
 800b198:	23e0      	movs	r3, #224	@ 0xe0
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d952      	bls.n	800b246 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <HAL_SPI_Transmit+0x11e>
 800b1a8:	2316      	movs	r3, #22
 800b1aa:	18fb      	adds	r3, r7, r3
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d143      	bne.n	800b23a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b6:	881a      	ldrh	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c2:	1c9a      	adds	r2, r3, #2
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1d6:	e030      	b.n	800b23a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	2202      	movs	r2, #2
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d112      	bne.n	800b20c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ea:	881a      	ldrh	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f6:	1c9a      	adds	r2, r3, #2
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	b29a      	uxth	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b20a:	e016      	b.n	800b23a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b20c:	f7fc fe1c 	bl	8007e48 <HAL_GetTick>
 800b210:	0002      	movs	r2, r0
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d802      	bhi.n	800b222 <HAL_SPI_Transmit+0x18e>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	3301      	adds	r3, #1
 800b220:	d102      	bne.n	800b228 <HAL_SPI_Transmit+0x194>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d108      	bne.n	800b23a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b228:	231f      	movs	r3, #31
 800b22a:	18fb      	adds	r3, r7, r3
 800b22c:	2203      	movs	r2, #3
 800b22e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	225d      	movs	r2, #93	@ 0x5d
 800b234:	2101      	movs	r1, #1
 800b236:	5499      	strb	r1, [r3, r2]
          goto error;
 800b238:	e080      	b.n	800b33c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b23e:	b29b      	uxth	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1c9      	bne.n	800b1d8 <HAL_SPI_Transmit+0x144>
 800b244:	e053      	b.n	800b2ee <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <HAL_SPI_Transmit+0x1c4>
 800b24e:	2316      	movs	r3, #22
 800b250:	18fb      	adds	r3, r7, r3
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d145      	bne.n	800b2e4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	330c      	adds	r3, #12
 800b262:	7812      	ldrb	r2, [r2, #0]
 800b264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b274:	b29b      	uxth	r3, r3
 800b276:	3b01      	subs	r3, #1
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b27e:	e031      	b.n	800b2e4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	2202      	movs	r2, #2
 800b288:	4013      	ands	r3, r2
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d113      	bne.n	800b2b6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	330c      	adds	r3, #12
 800b298:	7812      	ldrb	r2, [r2, #0]
 800b29a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a0:	1c5a      	adds	r2, r3, #1
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b2b4:	e016      	b.n	800b2e4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2b6:	f7fc fdc7 	bl	8007e48 <HAL_GetTick>
 800b2ba:	0002      	movs	r2, r0
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d802      	bhi.n	800b2cc <HAL_SPI_Transmit+0x238>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	d102      	bne.n	800b2d2 <HAL_SPI_Transmit+0x23e>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d108      	bne.n	800b2e4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b2d2:	231f      	movs	r3, #31
 800b2d4:	18fb      	adds	r3, r7, r3
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	225d      	movs	r2, #93	@ 0x5d
 800b2de:	2101      	movs	r1, #1
 800b2e0:	5499      	strb	r1, [r3, r2]
          goto error;
 800b2e2:	e02b      	b.n	800b33c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1c8      	bne.n	800b280 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	0018      	movs	r0, r3
 800b2f6:	f000 fcef 	bl	800bcd8 <SPI_EndRxTxTransaction>
 800b2fa:	1e03      	subs	r3, r0, #0
 800b2fc:	d002      	beq.n	800b304 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2220      	movs	r2, #32
 800b302:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b30c:	2300      	movs	r3, #0
 800b30e:	613b      	str	r3, [r7, #16]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	613b      	str	r3, [r7, #16]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	613b      	str	r3, [r7, #16]
 800b320:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b326:	2b00      	cmp	r3, #0
 800b328:	d004      	beq.n	800b334 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b32a:	231f      	movs	r3, #31
 800b32c:	18fb      	adds	r3, r7, r3
 800b32e:	2201      	movs	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	e003      	b.n	800b33c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	225d      	movs	r2, #93	@ 0x5d
 800b338:	2101      	movs	r1, #1
 800b33a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	225c      	movs	r2, #92	@ 0x5c
 800b340:	2100      	movs	r1, #0
 800b342:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b344:	231f      	movs	r3, #31
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	781b      	ldrb	r3, [r3, #0]
}
 800b34a:	0018      	movs	r0, r3
 800b34c:	46bd      	mov	sp, r7
 800b34e:	b008      	add	sp, #32
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b089      	sub	sp, #36	@ 0x24
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	1dbb      	adds	r3, r7, #6
 800b362:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b364:	2117      	movs	r1, #23
 800b366:	187b      	adds	r3, r7, r1
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	225d      	movs	r2, #93	@ 0x5d
 800b370:	5c9b      	ldrb	r3, [r3, r2]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b01      	cmp	r3, #1
 800b376:	d003      	beq.n	800b380 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800b378:	187b      	adds	r3, r7, r1
 800b37a:	2202      	movs	r2, #2
 800b37c:	701a      	strb	r2, [r3, #0]
    goto error;
 800b37e:	e12b      	b.n	800b5d8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	2382      	movs	r3, #130	@ 0x82
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	429a      	cmp	r2, r3
 800b38a:	d113      	bne.n	800b3b4 <HAL_SPI_Receive+0x60>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10f      	bne.n	800b3b4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	225d      	movs	r2, #93	@ 0x5d
 800b398:	2104      	movs	r1, #4
 800b39a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b39c:	1dbb      	adds	r3, r7, #6
 800b39e:	881c      	ldrh	r4, [r3, #0]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	68b9      	ldr	r1, [r7, #8]
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	0023      	movs	r3, r4
 800b3ac:	f000 f924 	bl	800b5f8 <HAL_SPI_TransmitReceive>
 800b3b0:	0003      	movs	r3, r0
 800b3b2:	e118      	b.n	800b5e6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	225c      	movs	r2, #92	@ 0x5c
 800b3b8:	5c9b      	ldrb	r3, [r3, r2]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d101      	bne.n	800b3c2 <HAL_SPI_Receive+0x6e>
 800b3be:	2302      	movs	r3, #2
 800b3c0:	e111      	b.n	800b5e6 <HAL_SPI_Receive+0x292>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	225c      	movs	r2, #92	@ 0x5c
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ca:	f7fc fd3d 	bl	8007e48 <HAL_GetTick>
 800b3ce:	0003      	movs	r3, r0
 800b3d0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d003      	beq.n	800b3e0 <HAL_SPI_Receive+0x8c>
 800b3d8:	1dbb      	adds	r3, r7, #6
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800b3e0:	2317      	movs	r3, #23
 800b3e2:	18fb      	adds	r3, r7, r3
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	701a      	strb	r2, [r3, #0]
    goto error;
 800b3e8:	e0f6      	b.n	800b5d8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	225d      	movs	r2, #93	@ 0x5d
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	1dba      	adds	r2, r7, #6
 800b402:	2144      	movs	r1, #68	@ 0x44
 800b404:	8812      	ldrh	r2, [r2, #0]
 800b406:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	1dba      	adds	r2, r7, #6
 800b40c:	2146      	movs	r1, #70	@ 0x46
 800b40e:	8812      	ldrh	r2, [r2, #0]
 800b410:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	23e0      	movs	r3, #224	@ 0xe0
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	429a      	cmp	r2, r3
 800b43a:	d908      	bls.n	800b44e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	496a      	ldr	r1, [pc, #424]	@ (800b5f0 <HAL_SPI_Receive+0x29c>)
 800b448:	400a      	ands	r2, r1
 800b44a:	605a      	str	r2, [r3, #4]
 800b44c:	e008      	b.n	800b460 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685a      	ldr	r2, [r3, #4]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2180      	movs	r1, #128	@ 0x80
 800b45a:	0149      	lsls	r1, r1, #5
 800b45c:	430a      	orrs	r2, r1
 800b45e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	689a      	ldr	r2, [r3, #8]
 800b464:	2380      	movs	r3, #128	@ 0x80
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	429a      	cmp	r2, r3
 800b46a:	d10f      	bne.n	800b48c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2140      	movs	r1, #64	@ 0x40
 800b478:	438a      	bics	r2, r1
 800b47a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	495b      	ldr	r1, [pc, #364]	@ (800b5f4 <HAL_SPI_Receive+0x2a0>)
 800b488:	400a      	ands	r2, r1
 800b48a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2240      	movs	r2, #64	@ 0x40
 800b494:	4013      	ands	r3, r2
 800b496:	2b40      	cmp	r3, #64	@ 0x40
 800b498:	d007      	beq.n	800b4aa <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2140      	movs	r1, #64	@ 0x40
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	23e0      	movs	r3, #224	@ 0xe0
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d900      	bls.n	800b4b8 <HAL_SPI_Receive+0x164>
 800b4b6:	e071      	b.n	800b59c <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b4b8:	e035      	b.n	800b526 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d117      	bne.n	800b4f8 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	001a      	movs	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2246      	movs	r2, #70	@ 0x46
 800b4e8:	5a9b      	ldrh	r3, [r3, r2]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b299      	uxth	r1, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2246      	movs	r2, #70	@ 0x46
 800b4f4:	5299      	strh	r1, [r3, r2]
 800b4f6:	e016      	b.n	800b526 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4f8:	f7fc fca6 	bl	8007e48 <HAL_GetTick>
 800b4fc:	0002      	movs	r2, r0
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d802      	bhi.n	800b50e <HAL_SPI_Receive+0x1ba>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	d102      	bne.n	800b514 <HAL_SPI_Receive+0x1c0>
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d108      	bne.n	800b526 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800b514:	2317      	movs	r3, #23
 800b516:	18fb      	adds	r3, r7, r3
 800b518:	2203      	movs	r2, #3
 800b51a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	225d      	movs	r2, #93	@ 0x5d
 800b520:	2101      	movs	r1, #1
 800b522:	5499      	strb	r1, [r3, r2]
          goto error;
 800b524:	e058      	b.n	800b5d8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2246      	movs	r2, #70	@ 0x46
 800b52a:	5a9b      	ldrh	r3, [r3, r2]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1c3      	bne.n	800b4ba <HAL_SPI_Receive+0x166>
 800b532:	e039      	b.n	800b5a8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	2201      	movs	r2, #1
 800b53c:	4013      	ands	r3, r2
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d115      	bne.n	800b56e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54c:	b292      	uxth	r2, r2
 800b54e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b554:	1c9a      	adds	r2, r3, #2
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2246      	movs	r2, #70	@ 0x46
 800b55e:	5a9b      	ldrh	r3, [r3, r2]
 800b560:	b29b      	uxth	r3, r3
 800b562:	3b01      	subs	r3, #1
 800b564:	b299      	uxth	r1, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2246      	movs	r2, #70	@ 0x46
 800b56a:	5299      	strh	r1, [r3, r2]
 800b56c:	e016      	b.n	800b59c <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b56e:	f7fc fc6b 	bl	8007e48 <HAL_GetTick>
 800b572:	0002      	movs	r2, r0
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d802      	bhi.n	800b584 <HAL_SPI_Receive+0x230>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	d102      	bne.n	800b58a <HAL_SPI_Receive+0x236>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d108      	bne.n	800b59c <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800b58a:	2317      	movs	r3, #23
 800b58c:	18fb      	adds	r3, r7, r3
 800b58e:	2203      	movs	r2, #3
 800b590:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	225d      	movs	r2, #93	@ 0x5d
 800b596:	2101      	movs	r1, #1
 800b598:	5499      	strb	r1, [r3, r2]
          goto error;
 800b59a:	e01d      	b.n	800b5d8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2246      	movs	r2, #70	@ 0x46
 800b5a0:	5a9b      	ldrh	r3, [r3, r2]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1c5      	bne.n	800b534 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	f000 fb34 	bl	800bc1c <SPI_EndRxTransaction>
 800b5b4:	1e03      	subs	r3, r0, #0
 800b5b6:	d002      	beq.n	800b5be <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800b5c6:	2317      	movs	r3, #23
 800b5c8:	18fb      	adds	r3, r7, r3
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	e003      	b.n	800b5d8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	225d      	movs	r2, #93	@ 0x5d
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	225c      	movs	r2, #92	@ 0x5c
 800b5dc:	2100      	movs	r1, #0
 800b5de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b5e0:	2317      	movs	r3, #23
 800b5e2:	18fb      	adds	r3, r7, r3
 800b5e4:	781b      	ldrb	r3, [r3, #0]
}
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	b007      	add	sp, #28
 800b5ec:	bd90      	pop	{r4, r7, pc}
 800b5ee:	46c0      	nop			@ (mov r8, r8)
 800b5f0:	ffffefff 	.word	0xffffefff
 800b5f4:	ffffbfff 	.word	0xffffbfff

0800b5f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	001a      	movs	r2, r3
 800b606:	1cbb      	adds	r3, r7, #2
 800b608:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b60a:	2301      	movs	r3, #1
 800b60c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b60e:	2323      	movs	r3, #35	@ 0x23
 800b610:	18fb      	adds	r3, r7, r3
 800b612:	2200      	movs	r2, #0
 800b614:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	225c      	movs	r2, #92	@ 0x5c
 800b61a:	5c9b      	ldrb	r3, [r3, r2]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d101      	bne.n	800b624 <HAL_SPI_TransmitReceive+0x2c>
 800b620:	2302      	movs	r3, #2
 800b622:	e1c4      	b.n	800b9ae <HAL_SPI_TransmitReceive+0x3b6>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	225c      	movs	r2, #92	@ 0x5c
 800b628:	2101      	movs	r1, #1
 800b62a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b62c:	f7fc fc0c 	bl	8007e48 <HAL_GetTick>
 800b630:	0003      	movs	r3, r0
 800b632:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b634:	201b      	movs	r0, #27
 800b636:	183b      	adds	r3, r7, r0
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	215d      	movs	r1, #93	@ 0x5d
 800b63c:	5c52      	ldrb	r2, [r2, r1]
 800b63e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b646:	2312      	movs	r3, #18
 800b648:	18fb      	adds	r3, r7, r3
 800b64a:	1cba      	adds	r2, r7, #2
 800b64c:	8812      	ldrh	r2, [r2, #0]
 800b64e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b650:	183b      	adds	r3, r7, r0
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d011      	beq.n	800b67c <HAL_SPI_TransmitReceive+0x84>
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	2382      	movs	r3, #130	@ 0x82
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	429a      	cmp	r2, r3
 800b660:	d107      	bne.n	800b672 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d103      	bne.n	800b672 <HAL_SPI_TransmitReceive+0x7a>
 800b66a:	183b      	adds	r3, r7, r0
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d004      	beq.n	800b67c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b672:	2323      	movs	r3, #35	@ 0x23
 800b674:	18fb      	adds	r3, r7, r3
 800b676:	2202      	movs	r2, #2
 800b678:	701a      	strb	r2, [r3, #0]
    goto error;
 800b67a:	e191      	b.n	800b9a0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d006      	beq.n	800b690 <HAL_SPI_TransmitReceive+0x98>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_SPI_TransmitReceive+0x98>
 800b688:	1cbb      	adds	r3, r7, #2
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d104      	bne.n	800b69a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b690:	2323      	movs	r3, #35	@ 0x23
 800b692:	18fb      	adds	r3, r7, r3
 800b694:	2201      	movs	r2, #1
 800b696:	701a      	strb	r2, [r3, #0]
    goto error;
 800b698:	e182      	b.n	800b9a0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	225d      	movs	r2, #93	@ 0x5d
 800b69e:	5c9b      	ldrb	r3, [r3, r2]
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d003      	beq.n	800b6ae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	225d      	movs	r2, #93	@ 0x5d
 800b6aa:	2105      	movs	r1, #5
 800b6ac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	1cba      	adds	r2, r7, #2
 800b6be:	2146      	movs	r1, #70	@ 0x46
 800b6c0:	8812      	ldrh	r2, [r2, #0]
 800b6c2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	1cba      	adds	r2, r7, #2
 800b6c8:	2144      	movs	r1, #68	@ 0x44
 800b6ca:	8812      	ldrh	r2, [r2, #0]
 800b6cc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	1cba      	adds	r2, r7, #2
 800b6d8:	8812      	ldrh	r2, [r2, #0]
 800b6da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	1cba      	adds	r2, r7, #2
 800b6e0:	8812      	ldrh	r2, [r2, #0]
 800b6e2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	23e0      	movs	r3, #224	@ 0xe0
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d908      	bls.n	800b70e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	49ac      	ldr	r1, [pc, #688]	@ (800b9b8 <HAL_SPI_TransmitReceive+0x3c0>)
 800b708:	400a      	ands	r2, r1
 800b70a:	605a      	str	r2, [r3, #4]
 800b70c:	e008      	b.n	800b720 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2180      	movs	r1, #128	@ 0x80
 800b71a:	0149      	lsls	r1, r1, #5
 800b71c:	430a      	orrs	r2, r1
 800b71e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2240      	movs	r2, #64	@ 0x40
 800b728:	4013      	ands	r3, r2
 800b72a:	2b40      	cmp	r3, #64	@ 0x40
 800b72c:	d007      	beq.n	800b73e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2140      	movs	r1, #64	@ 0x40
 800b73a:	430a      	orrs	r2, r1
 800b73c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	23e0      	movs	r3, #224	@ 0xe0
 800b744:	00db      	lsls	r3, r3, #3
 800b746:	429a      	cmp	r2, r3
 800b748:	d800      	bhi.n	800b74c <HAL_SPI_TransmitReceive+0x154>
 800b74a:	e083      	b.n	800b854 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d005      	beq.n	800b760 <HAL_SPI_TransmitReceive+0x168>
 800b754:	2312      	movs	r3, #18
 800b756:	18fb      	adds	r3, r7, r3
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d000      	beq.n	800b760 <HAL_SPI_TransmitReceive+0x168>
 800b75e:	e06d      	b.n	800b83c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b764:	881a      	ldrh	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b770:	1c9a      	adds	r2, r3, #2
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b784:	e05a      	b.n	800b83c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	2202      	movs	r2, #2
 800b78e:	4013      	ands	r3, r2
 800b790:	2b02      	cmp	r3, #2
 800b792:	d11b      	bne.n	800b7cc <HAL_SPI_TransmitReceive+0x1d4>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b798:	b29b      	uxth	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d016      	beq.n	800b7cc <HAL_SPI_TransmitReceive+0x1d4>
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d113      	bne.n	800b7cc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7a8:	881a      	ldrh	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	1c9a      	adds	r2, r3, #2
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d11c      	bne.n	800b814 <HAL_SPI_TransmitReceive+0x21c>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2246      	movs	r2, #70	@ 0x46
 800b7de:	5a9b      	ldrh	r3, [r3, r2]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d016      	beq.n	800b814 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68da      	ldr	r2, [r3, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7f0:	b292      	uxth	r2, r2
 800b7f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7f8:	1c9a      	adds	r2, r3, #2
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2246      	movs	r2, #70	@ 0x46
 800b802:	5a9b      	ldrh	r3, [r3, r2]
 800b804:	b29b      	uxth	r3, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	b299      	uxth	r1, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2246      	movs	r2, #70	@ 0x46
 800b80e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b810:	2301      	movs	r3, #1
 800b812:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b814:	f7fc fb18 	bl	8007e48 <HAL_GetTick>
 800b818:	0002      	movs	r2, r0
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b820:	429a      	cmp	r2, r3
 800b822:	d80b      	bhi.n	800b83c <HAL_SPI_TransmitReceive+0x244>
 800b824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b826:	3301      	adds	r3, #1
 800b828:	d008      	beq.n	800b83c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800b82a:	2323      	movs	r3, #35	@ 0x23
 800b82c:	18fb      	adds	r3, r7, r3
 800b82e:	2203      	movs	r2, #3
 800b830:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	225d      	movs	r2, #93	@ 0x5d
 800b836:	2101      	movs	r1, #1
 800b838:	5499      	strb	r1, [r3, r2]
        goto error;
 800b83a:	e0b1      	b.n	800b9a0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b840:	b29b      	uxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d19f      	bne.n	800b786 <HAL_SPI_TransmitReceive+0x18e>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2246      	movs	r2, #70	@ 0x46
 800b84a:	5a9b      	ldrh	r3, [r3, r2]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d199      	bne.n	800b786 <HAL_SPI_TransmitReceive+0x18e>
 800b852:	e089      	b.n	800b968 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d005      	beq.n	800b868 <HAL_SPI_TransmitReceive+0x270>
 800b85c:	2312      	movs	r3, #18
 800b85e:	18fb      	adds	r3, r7, r3
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d000      	beq.n	800b868 <HAL_SPI_TransmitReceive+0x270>
 800b866:	e074      	b.n	800b952 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	330c      	adds	r3, #12
 800b872:	7812      	ldrb	r2, [r2, #0]
 800b874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b884:	b29b      	uxth	r3, r3
 800b886:	3b01      	subs	r3, #1
 800b888:	b29a      	uxth	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b88e:	e060      	b.n	800b952 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	2202      	movs	r2, #2
 800b898:	4013      	ands	r3, r2
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d11c      	bne.n	800b8d8 <HAL_SPI_TransmitReceive+0x2e0>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d017      	beq.n	800b8d8 <HAL_SPI_TransmitReceive+0x2e0>
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d114      	bne.n	800b8d8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	330c      	adds	r3, #12
 800b8b8:	7812      	ldrb	r2, [r2, #0]
 800b8ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d11e      	bne.n	800b924 <HAL_SPI_TransmitReceive+0x32c>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2246      	movs	r2, #70	@ 0x46
 800b8ea:	5a9b      	ldrh	r3, [r3, r2]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d018      	beq.n	800b924 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	330c      	adds	r3, #12
 800b8f8:	001a      	movs	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	b2d2      	uxtb	r2, r2
 800b902:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2246      	movs	r2, #70	@ 0x46
 800b912:	5a9b      	ldrh	r3, [r3, r2]
 800b914:	b29b      	uxth	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	b299      	uxth	r1, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2246      	movs	r2, #70	@ 0x46
 800b91e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b920:	2301      	movs	r3, #1
 800b922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b924:	f7fc fa90 	bl	8007e48 <HAL_GetTick>
 800b928:	0002      	movs	r2, r0
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b930:	429a      	cmp	r2, r3
 800b932:	d802      	bhi.n	800b93a <HAL_SPI_TransmitReceive+0x342>
 800b934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b936:	3301      	adds	r3, #1
 800b938:	d102      	bne.n	800b940 <HAL_SPI_TransmitReceive+0x348>
 800b93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d108      	bne.n	800b952 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800b940:	2323      	movs	r3, #35	@ 0x23
 800b942:	18fb      	adds	r3, r7, r3
 800b944:	2203      	movs	r2, #3
 800b946:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	225d      	movs	r2, #93	@ 0x5d
 800b94c:	2101      	movs	r1, #1
 800b94e:	5499      	strb	r1, [r3, r2]
        goto error;
 800b950:	e026      	b.n	800b9a0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b956:	b29b      	uxth	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d199      	bne.n	800b890 <HAL_SPI_TransmitReceive+0x298>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2246      	movs	r2, #70	@ 0x46
 800b960:	5a9b      	ldrh	r3, [r3, r2]
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d193      	bne.n	800b890 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b968:	69fa      	ldr	r2, [r7, #28]
 800b96a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	0018      	movs	r0, r3
 800b970:	f000 f9b2 	bl	800bcd8 <SPI_EndRxTxTransaction>
 800b974:	1e03      	subs	r3, r0, #0
 800b976:	d006      	beq.n	800b986 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800b978:	2323      	movs	r3, #35	@ 0x23
 800b97a:	18fb      	adds	r3, r7, r3
 800b97c:	2201      	movs	r2, #1
 800b97e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2220      	movs	r2, #32
 800b984:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800b98e:	2323      	movs	r3, #35	@ 0x23
 800b990:	18fb      	adds	r3, r7, r3
 800b992:	2201      	movs	r2, #1
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	e003      	b.n	800b9a0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	225d      	movs	r2, #93	@ 0x5d
 800b99c:	2101      	movs	r1, #1
 800b99e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	225c      	movs	r2, #92	@ 0x5c
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b9a8:	2323      	movs	r3, #35	@ 0x23
 800b9aa:	18fb      	adds	r3, r7, r3
 800b9ac:	781b      	ldrb	r3, [r3, #0]
}
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b00a      	add	sp, #40	@ 0x28
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	46c0      	nop			@ (mov r8, r8)
 800b9b8:	ffffefff 	.word	0xffffefff

0800b9bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	1dfb      	adds	r3, r7, #7
 800b9ca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b9cc:	f7fc fa3c 	bl	8007e48 <HAL_GetTick>
 800b9d0:	0002      	movs	r2, r0
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	1a9b      	subs	r3, r3, r2
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	18d3      	adds	r3, r2, r3
 800b9da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9dc:	f7fc fa34 	bl	8007e48 <HAL_GetTick>
 800b9e0:	0003      	movs	r3, r0
 800b9e2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9e4:	4b3a      	ldr	r3, [pc, #232]	@ (800bad0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	015b      	lsls	r3, r3, #5
 800b9ea:	0d1b      	lsrs	r3, r3, #20
 800b9ec:	69fa      	ldr	r2, [r7, #28]
 800b9ee:	4353      	muls	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9f2:	e058      	b.n	800baa6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	d055      	beq.n	800baa6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9fa:	f7fc fa25 	bl	8007e48 <HAL_GetTick>
 800b9fe:	0002      	movs	r2, r0
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d902      	bls.n	800ba10 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d142      	bne.n	800ba96 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	21e0      	movs	r1, #224	@ 0xe0
 800ba1c:	438a      	bics	r2, r1
 800ba1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	2382      	movs	r3, #130	@ 0x82
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d113      	bne.n	800ba54 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	2380      	movs	r3, #128	@ 0x80
 800ba32:	021b      	lsls	r3, r3, #8
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d005      	beq.n	800ba44 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	2380      	movs	r3, #128	@ 0x80
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d107      	bne.n	800ba54 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2140      	movs	r1, #64	@ 0x40
 800ba50:	438a      	bics	r2, r1
 800ba52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba58:	2380      	movs	r3, #128	@ 0x80
 800ba5a:	019b      	lsls	r3, r3, #6
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d110      	bne.n	800ba82 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	491a      	ldr	r1, [pc, #104]	@ (800bad4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ba6c:	400a      	ands	r2, r1
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2180      	movs	r1, #128	@ 0x80
 800ba7c:	0189      	lsls	r1, r1, #6
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	225d      	movs	r2, #93	@ 0x5d
 800ba86:	2101      	movs	r1, #1
 800ba88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	225c      	movs	r2, #92	@ 0x5c
 800ba8e:	2100      	movs	r1, #0
 800ba90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e017      	b.n	800bac6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	4013      	ands	r3, r2
 800bab0:	68ba      	ldr	r2, [r7, #8]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	425a      	negs	r2, r3
 800bab6:	4153      	adcs	r3, r2
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	001a      	movs	r2, r3
 800babc:	1dfb      	adds	r3, r7, #7
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d197      	bne.n	800b9f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	0018      	movs	r0, r3
 800bac8:	46bd      	mov	sp, r7
 800baca:	b008      	add	sp, #32
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	46c0      	nop			@ (mov r8, r8)
 800bad0:	2000006c 	.word	0x2000006c
 800bad4:	ffffdfff 	.word	0xffffdfff

0800bad8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08a      	sub	sp, #40	@ 0x28
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bae6:	2317      	movs	r3, #23
 800bae8:	18fb      	adds	r3, r7, r3
 800baea:	2200      	movs	r2, #0
 800baec:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800baee:	f7fc f9ab 	bl	8007e48 <HAL_GetTick>
 800baf2:	0002      	movs	r2, r0
 800baf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	18d3      	adds	r3, r2, r3
 800bafc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800bafe:	f7fc f9a3 	bl	8007e48 <HAL_GetTick>
 800bb02:	0003      	movs	r3, r0
 800bb04:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	330c      	adds	r3, #12
 800bb0c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bb0e:	4b41      	ldr	r3, [pc, #260]	@ (800bc14 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	0013      	movs	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	189b      	adds	r3, r3, r2
 800bb18:	00da      	lsls	r2, r3, #3
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	0d1b      	lsrs	r3, r3, #20
 800bb1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb20:	4353      	muls	r3, r2
 800bb22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bb24:	e068      	b.n	800bbf8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	23c0      	movs	r3, #192	@ 0xc0
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d10a      	bne.n	800bb46 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d107      	bne.n	800bb46 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	2117      	movs	r1, #23
 800bb3e:	187b      	adds	r3, r7, r1
 800bb40:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bb42:	187b      	adds	r3, r7, r1
 800bb44:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	d055      	beq.n	800bbf8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb4c:	f7fc f97c 	bl	8007e48 <HAL_GetTick>
 800bb50:	0002      	movs	r2, r0
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d902      	bls.n	800bb62 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d142      	bne.n	800bbe8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	21e0      	movs	r1, #224	@ 0xe0
 800bb6e:	438a      	bics	r2, r1
 800bb70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	2382      	movs	r3, #130	@ 0x82
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d113      	bne.n	800bba6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	689a      	ldr	r2, [r3, #8]
 800bb82:	2380      	movs	r3, #128	@ 0x80
 800bb84:	021b      	lsls	r3, r3, #8
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d005      	beq.n	800bb96 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	689a      	ldr	r2, [r3, #8]
 800bb8e:	2380      	movs	r3, #128	@ 0x80
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d107      	bne.n	800bba6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2140      	movs	r1, #64	@ 0x40
 800bba2:	438a      	bics	r2, r1
 800bba4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbaa:	2380      	movs	r3, #128	@ 0x80
 800bbac:	019b      	lsls	r3, r3, #6
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d110      	bne.n	800bbd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4916      	ldr	r1, [pc, #88]	@ (800bc18 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800bbbe:	400a      	ands	r2, r1
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2180      	movs	r1, #128	@ 0x80
 800bbce:	0189      	lsls	r1, r1, #6
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	225d      	movs	r2, #93	@ 0x5d
 800bbd8:	2101      	movs	r1, #1
 800bbda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	225c      	movs	r2, #92	@ 0x5c
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e010      	b.n	800bc0a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	4013      	ands	r3, r2
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d18e      	bne.n	800bb26 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	b00a      	add	sp, #40	@ 0x28
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	2000006c 	.word	0x2000006c
 800bc18:	ffffdfff 	.word	0xffffdfff

0800bc1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	2382      	movs	r3, #130	@ 0x82
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d113      	bne.n	800bc5c <SPI_EndRxTransaction+0x40>
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	2380      	movs	r3, #128	@ 0x80
 800bc3a:	021b      	lsls	r3, r3, #8
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d005      	beq.n	800bc4c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	2380      	movs	r3, #128	@ 0x80
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d107      	bne.n	800bc5c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2140      	movs	r1, #64	@ 0x40
 800bc58:	438a      	bics	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	0013      	movs	r3, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	2180      	movs	r1, #128	@ 0x80
 800bc6a:	f7ff fea7 	bl	800b9bc <SPI_WaitFlagStateUntilTimeout>
 800bc6e:	1e03      	subs	r3, r0, #0
 800bc70:	d007      	beq.n	800bc82 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc76:	2220      	movs	r2, #32
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e026      	b.n	800bcd0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	2382      	movs	r3, #130	@ 0x82
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d11f      	bne.n	800bcce <SPI_EndRxTransaction+0xb2>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	2380      	movs	r3, #128	@ 0x80
 800bc94:	021b      	lsls	r3, r3, #8
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d005      	beq.n	800bca6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	2380      	movs	r3, #128	@ 0x80
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d113      	bne.n	800bcce <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	23c0      	movs	r3, #192	@ 0xc0
 800bcaa:	00d9      	lsls	r1, r3, #3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	0013      	movs	r3, r2
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f7ff ff0f 	bl	800bad8 <SPI_WaitFifoStateUntilTimeout>
 800bcba:	1e03      	subs	r3, r0, #0
 800bcbc:	d007      	beq.n	800bcce <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	431a      	orrs	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e000      	b.n	800bcd0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	b004      	add	sp, #16
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af02      	add	r7, sp, #8
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	23c0      	movs	r3, #192	@ 0xc0
 800bce8:	0159      	lsls	r1, r3, #5
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	0013      	movs	r3, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f7ff fef0 	bl	800bad8 <SPI_WaitFifoStateUntilTimeout>
 800bcf8:	1e03      	subs	r3, r0, #0
 800bcfa:	d007      	beq.n	800bd0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd00:	2220      	movs	r2, #32
 800bd02:	431a      	orrs	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e027      	b.n	800bd5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	0013      	movs	r3, r2
 800bd16:	2200      	movs	r2, #0
 800bd18:	2180      	movs	r1, #128	@ 0x80
 800bd1a:	f7ff fe4f 	bl	800b9bc <SPI_WaitFlagStateUntilTimeout>
 800bd1e:	1e03      	subs	r3, r0, #0
 800bd20:	d007      	beq.n	800bd32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd26:	2220      	movs	r2, #32
 800bd28:	431a      	orrs	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e014      	b.n	800bd5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	23c0      	movs	r3, #192	@ 0xc0
 800bd36:	00d9      	lsls	r1, r3, #3
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	0013      	movs	r3, r2
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7ff fec9 	bl	800bad8 <SPI_WaitFifoStateUntilTimeout>
 800bd46:	1e03      	subs	r3, r0, #0
 800bd48:	d007      	beq.n	800bd5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd4e:	2220      	movs	r2, #32
 800bd50:	431a      	orrs	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e000      	b.n	800bd5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	b004      	add	sp, #16
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e04a      	b.n	800be0c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	223d      	movs	r2, #61	@ 0x3d
 800bd7a:	5c9b      	ldrb	r3, [r3, r2]
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d107      	bne.n	800bd92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	223c      	movs	r2, #60	@ 0x3c
 800bd86:	2100      	movs	r1, #0
 800bd88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	0018      	movs	r0, r3
 800bd8e:	f7fb fd51 	bl	8007834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	223d      	movs	r2, #61	@ 0x3d
 800bd96:	2102      	movs	r1, #2
 800bd98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	3304      	adds	r3, #4
 800bda2:	0019      	movs	r1, r3
 800bda4:	0010      	movs	r0, r2
 800bda6:	f000 fa8f 	bl	800c2c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2248      	movs	r2, #72	@ 0x48
 800bdae:	2101      	movs	r1, #1
 800bdb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	223e      	movs	r2, #62	@ 0x3e
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	5499      	strb	r1, [r3, r2]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	223f      	movs	r2, #63	@ 0x3f
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	5499      	strb	r1, [r3, r2]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2240      	movs	r2, #64	@ 0x40
 800bdc6:	2101      	movs	r1, #1
 800bdc8:	5499      	strb	r1, [r3, r2]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2241      	movs	r2, #65	@ 0x41
 800bdce:	2101      	movs	r1, #1
 800bdd0:	5499      	strb	r1, [r3, r2]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2242      	movs	r2, #66	@ 0x42
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	5499      	strb	r1, [r3, r2]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2243      	movs	r2, #67	@ 0x43
 800bdde:	2101      	movs	r1, #1
 800bde0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2244      	movs	r2, #68	@ 0x44
 800bde6:	2101      	movs	r1, #1
 800bde8:	5499      	strb	r1, [r3, r2]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2245      	movs	r2, #69	@ 0x45
 800bdee:	2101      	movs	r1, #1
 800bdf0:	5499      	strb	r1, [r3, r2]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2246      	movs	r2, #70	@ 0x46
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	5499      	strb	r1, [r3, r2]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2247      	movs	r2, #71	@ 0x47
 800bdfe:	2101      	movs	r1, #1
 800be00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	223d      	movs	r2, #61	@ 0x3d
 800be06:	2101      	movs	r1, #1
 800be08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	0018      	movs	r0, r3
 800be0e:	46bd      	mov	sp, r7
 800be10:	b002      	add	sp, #8
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	223d      	movs	r2, #61	@ 0x3d
 800be20:	5c9b      	ldrb	r3, [r3, r2]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b01      	cmp	r3, #1
 800be26:	d001      	beq.n	800be2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	e042      	b.n	800beb2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	223d      	movs	r2, #61	@ 0x3d
 800be30:	2102      	movs	r1, #2
 800be32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68da      	ldr	r2, [r3, #12]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2101      	movs	r1, #1
 800be40:	430a      	orrs	r2, r1
 800be42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a1c      	ldr	r2, [pc, #112]	@ (800bebc <HAL_TIM_Base_Start_IT+0xa8>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d00f      	beq.n	800be6e <HAL_TIM_Base_Start_IT+0x5a>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	2380      	movs	r3, #128	@ 0x80
 800be54:	05db      	lsls	r3, r3, #23
 800be56:	429a      	cmp	r2, r3
 800be58:	d009      	beq.n	800be6e <HAL_TIM_Base_Start_IT+0x5a>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a18      	ldr	r2, [pc, #96]	@ (800bec0 <HAL_TIM_Base_Start_IT+0xac>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d004      	beq.n	800be6e <HAL_TIM_Base_Start_IT+0x5a>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a16      	ldr	r2, [pc, #88]	@ (800bec4 <HAL_TIM_Base_Start_IT+0xb0>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d116      	bne.n	800be9c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	4a14      	ldr	r2, [pc, #80]	@ (800bec8 <HAL_TIM_Base_Start_IT+0xb4>)
 800be76:	4013      	ands	r3, r2
 800be78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b06      	cmp	r3, #6
 800be7e:	d016      	beq.n	800beae <HAL_TIM_Base_Start_IT+0x9a>
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	2380      	movs	r3, #128	@ 0x80
 800be84:	025b      	lsls	r3, r3, #9
 800be86:	429a      	cmp	r2, r3
 800be88:	d011      	beq.n	800beae <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2101      	movs	r1, #1
 800be96:	430a      	orrs	r2, r1
 800be98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be9a:	e008      	b.n	800beae <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2101      	movs	r1, #1
 800bea8:	430a      	orrs	r2, r1
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	e000      	b.n	800beb0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beae:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	0018      	movs	r0, r3
 800beb4:	46bd      	mov	sp, r7
 800beb6:	b004      	add	sp, #16
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	46c0      	nop			@ (mov r8, r8)
 800bebc:	40012c00 	.word	0x40012c00
 800bec0:	40000400 	.word	0x40000400
 800bec4:	40014000 	.word	0x40014000
 800bec8:	00010007 	.word	0x00010007

0800becc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2202      	movs	r2, #2
 800bee8:	4013      	ands	r3, r2
 800beea:	d021      	beq.n	800bf30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2202      	movs	r2, #2
 800bef0:	4013      	ands	r3, r2
 800bef2:	d01d      	beq.n	800bf30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2203      	movs	r2, #3
 800befa:	4252      	negs	r2, r2
 800befc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	2203      	movs	r2, #3
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	d004      	beq.n	800bf1a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	0018      	movs	r0, r3
 800bf14:	f000 f9c0 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
 800bf18:	e007      	b.n	800bf2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	0018      	movs	r0, r3
 800bf1e:	f000 f9b3 	bl	800c288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	0018      	movs	r0, r3
 800bf26:	f000 f9bf 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2204      	movs	r2, #4
 800bf34:	4013      	ands	r3, r2
 800bf36:	d022      	beq.n	800bf7e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2204      	movs	r2, #4
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	d01e      	beq.n	800bf7e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2205      	movs	r2, #5
 800bf46:	4252      	negs	r2, r2
 800bf48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699a      	ldr	r2, [r3, #24]
 800bf56:	23c0      	movs	r3, #192	@ 0xc0
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	d004      	beq.n	800bf68 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	0018      	movs	r0, r3
 800bf62:	f000 f999 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
 800bf66:	e007      	b.n	800bf78 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f000 f98c 	bl	800c288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	0018      	movs	r0, r3
 800bf74:	f000 f998 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2208      	movs	r2, #8
 800bf82:	4013      	ands	r3, r2
 800bf84:	d021      	beq.n	800bfca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2208      	movs	r2, #8
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	d01d      	beq.n	800bfca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2209      	movs	r2, #9
 800bf94:	4252      	negs	r2, r2
 800bf96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	2203      	movs	r2, #3
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	d004      	beq.n	800bfb4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	0018      	movs	r0, r3
 800bfae:	f000 f973 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
 800bfb2:	e007      	b.n	800bfc4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	0018      	movs	r0, r3
 800bfb8:	f000 f966 	bl	800c288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	f000 f972 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2210      	movs	r2, #16
 800bfce:	4013      	ands	r3, r2
 800bfd0:	d022      	beq.n	800c018 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2210      	movs	r2, #16
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	d01e      	beq.n	800c018 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2211      	movs	r2, #17
 800bfe0:	4252      	negs	r2, r2
 800bfe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	69da      	ldr	r2, [r3, #28]
 800bff0:	23c0      	movs	r3, #192	@ 0xc0
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4013      	ands	r3, r2
 800bff6:	d004      	beq.n	800c002 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	0018      	movs	r0, r3
 800bffc:	f000 f94c 	bl	800c298 <HAL_TIM_IC_CaptureCallback>
 800c000:	e007      	b.n	800c012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	0018      	movs	r0, r3
 800c006:	f000 f93f 	bl	800c288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	0018      	movs	r0, r3
 800c00e:	f000 f94b 	bl	800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2201      	movs	r2, #1
 800c01c:	4013      	ands	r3, r2
 800c01e:	d00c      	beq.n	800c03a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2201      	movs	r2, #1
 800c024:	4013      	ands	r3, r2
 800c026:	d008      	beq.n	800c03a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2202      	movs	r2, #2
 800c02e:	4252      	negs	r2, r2
 800c030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	0018      	movs	r0, r3
 800c036:	f7fa ff3d 	bl	8006eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2280      	movs	r2, #128	@ 0x80
 800c03e:	4013      	ands	r3, r2
 800c040:	d104      	bne.n	800c04c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	2380      	movs	r3, #128	@ 0x80
 800c046:	019b      	lsls	r3, r3, #6
 800c048:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c04a:	d00b      	beq.n	800c064 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2280      	movs	r2, #128	@ 0x80
 800c050:	4013      	ands	r3, r2
 800c052:	d007      	beq.n	800c064 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a1e      	ldr	r2, [pc, #120]	@ (800c0d4 <HAL_TIM_IRQHandler+0x208>)
 800c05a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	0018      	movs	r0, r3
 800c060:	f000 fad2 	bl	800c608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	2380      	movs	r3, #128	@ 0x80
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	4013      	ands	r3, r2
 800c06c:	d00b      	beq.n	800c086 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2280      	movs	r2, #128	@ 0x80
 800c072:	4013      	ands	r3, r2
 800c074:	d007      	beq.n	800c086 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a17      	ldr	r2, [pc, #92]	@ (800c0d8 <HAL_TIM_IRQHandler+0x20c>)
 800c07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	0018      	movs	r0, r3
 800c082:	f000 fac9 	bl	800c618 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2240      	movs	r2, #64	@ 0x40
 800c08a:	4013      	ands	r3, r2
 800c08c:	d00c      	beq.n	800c0a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2240      	movs	r2, #64	@ 0x40
 800c092:	4013      	ands	r3, r2
 800c094:	d008      	beq.n	800c0a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2241      	movs	r2, #65	@ 0x41
 800c09c:	4252      	negs	r2, r2
 800c09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	0018      	movs	r0, r3
 800c0a4:	f000 f908 	bl	800c2b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	d00c      	beq.n	800c0ca <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	d008      	beq.n	800c0ca <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2221      	movs	r2, #33	@ 0x21
 800c0be:	4252      	negs	r2, r2
 800c0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f000 fa97 	bl	800c5f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0ca:	46c0      	nop			@ (mov r8, r8)
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	b004      	add	sp, #16
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	46c0      	nop			@ (mov r8, r8)
 800c0d4:	ffffdf7f 	.word	0xffffdf7f
 800c0d8:	fffffeff 	.word	0xfffffeff

0800c0dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0e6:	230f      	movs	r3, #15
 800c0e8:	18fb      	adds	r3, r7, r3
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	223c      	movs	r2, #60	@ 0x3c
 800c0f2:	5c9b      	ldrb	r3, [r3, r2]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d101      	bne.n	800c0fc <HAL_TIM_ConfigClockSource+0x20>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	e0bc      	b.n	800c276 <HAL_TIM_ConfigClockSource+0x19a>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	223c      	movs	r2, #60	@ 0x3c
 800c100:	2101      	movs	r1, #1
 800c102:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	223d      	movs	r2, #61	@ 0x3d
 800c108:	2102      	movs	r1, #2
 800c10a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	4a5a      	ldr	r2, [pc, #360]	@ (800c280 <HAL_TIM_ConfigClockSource+0x1a4>)
 800c118:	4013      	ands	r3, r2
 800c11a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	4a59      	ldr	r2, [pc, #356]	@ (800c284 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c120:	4013      	ands	r3, r2
 800c122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2280      	movs	r2, #128	@ 0x80
 800c132:	0192      	lsls	r2, r2, #6
 800c134:	4293      	cmp	r3, r2
 800c136:	d040      	beq.n	800c1ba <HAL_TIM_ConfigClockSource+0xde>
 800c138:	2280      	movs	r2, #128	@ 0x80
 800c13a:	0192      	lsls	r2, r2, #6
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d900      	bls.n	800c142 <HAL_TIM_ConfigClockSource+0x66>
 800c140:	e088      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c142:	2280      	movs	r2, #128	@ 0x80
 800c144:	0152      	lsls	r2, r2, #5
 800c146:	4293      	cmp	r3, r2
 800c148:	d100      	bne.n	800c14c <HAL_TIM_ConfigClockSource+0x70>
 800c14a:	e088      	b.n	800c25e <HAL_TIM_ConfigClockSource+0x182>
 800c14c:	2280      	movs	r2, #128	@ 0x80
 800c14e:	0152      	lsls	r2, r2, #5
 800c150:	4293      	cmp	r3, r2
 800c152:	d900      	bls.n	800c156 <HAL_TIM_ConfigClockSource+0x7a>
 800c154:	e07e      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c156:	2b70      	cmp	r3, #112	@ 0x70
 800c158:	d018      	beq.n	800c18c <HAL_TIM_ConfigClockSource+0xb0>
 800c15a:	d900      	bls.n	800c15e <HAL_TIM_ConfigClockSource+0x82>
 800c15c:	e07a      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c15e:	2b60      	cmp	r3, #96	@ 0x60
 800c160:	d04f      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x126>
 800c162:	d900      	bls.n	800c166 <HAL_TIM_ConfigClockSource+0x8a>
 800c164:	e076      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c166:	2b50      	cmp	r3, #80	@ 0x50
 800c168:	d03b      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x106>
 800c16a:	d900      	bls.n	800c16e <HAL_TIM_ConfigClockSource+0x92>
 800c16c:	e072      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c16e:	2b40      	cmp	r3, #64	@ 0x40
 800c170:	d057      	beq.n	800c222 <HAL_TIM_ConfigClockSource+0x146>
 800c172:	d900      	bls.n	800c176 <HAL_TIM_ConfigClockSource+0x9a>
 800c174:	e06e      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c176:	2b30      	cmp	r3, #48	@ 0x30
 800c178:	d063      	beq.n	800c242 <HAL_TIM_ConfigClockSource+0x166>
 800c17a:	d86b      	bhi.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c17c:	2b20      	cmp	r3, #32
 800c17e:	d060      	beq.n	800c242 <HAL_TIM_ConfigClockSource+0x166>
 800c180:	d868      	bhi.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
 800c182:	2b00      	cmp	r3, #0
 800c184:	d05d      	beq.n	800c242 <HAL_TIM_ConfigClockSource+0x166>
 800c186:	2b10      	cmp	r3, #16
 800c188:	d05b      	beq.n	800c242 <HAL_TIM_ConfigClockSource+0x166>
 800c18a:	e063      	b.n	800c254 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c19c:	f000 f99e 	bl	800c4dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2277      	movs	r2, #119	@ 0x77
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	609a      	str	r2, [r3, #8]
      break;
 800c1b8:	e052      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1ca:	f000 f987 	bl	800c4dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2180      	movs	r1, #128	@ 0x80
 800c1da:	01c9      	lsls	r1, r1, #7
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	609a      	str	r2, [r3, #8]
      break;
 800c1e0:	e03e      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ee:	001a      	movs	r2, r3
 800c1f0:	f000 f8f8 	bl	800c3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2150      	movs	r1, #80	@ 0x50
 800c1fa:	0018      	movs	r0, r3
 800c1fc:	f000 f952 	bl	800c4a4 <TIM_ITRx_SetConfig>
      break;
 800c200:	e02e      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c20e:	001a      	movs	r2, r3
 800c210:	f000 f916 	bl	800c440 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2160      	movs	r1, #96	@ 0x60
 800c21a:	0018      	movs	r0, r3
 800c21c:	f000 f942 	bl	800c4a4 <TIM_ITRx_SetConfig>
      break;
 800c220:	e01e      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c22e:	001a      	movs	r2, r3
 800c230:	f000 f8d8 	bl	800c3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2140      	movs	r1, #64	@ 0x40
 800c23a:	0018      	movs	r0, r3
 800c23c:	f000 f932 	bl	800c4a4 <TIM_ITRx_SetConfig>
      break;
 800c240:	e00e      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	0019      	movs	r1, r3
 800c24c:	0010      	movs	r0, r2
 800c24e:	f000 f929 	bl	800c4a4 <TIM_ITRx_SetConfig>
      break;
 800c252:	e005      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c254:	230f      	movs	r3, #15
 800c256:	18fb      	adds	r3, r7, r3
 800c258:	2201      	movs	r2, #1
 800c25a:	701a      	strb	r2, [r3, #0]
      break;
 800c25c:	e000      	b.n	800c260 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c25e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	223d      	movs	r2, #61	@ 0x3d
 800c264:	2101      	movs	r1, #1
 800c266:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	223c      	movs	r2, #60	@ 0x3c
 800c26c:	2100      	movs	r1, #0
 800c26e:	5499      	strb	r1, [r3, r2]

  return status;
 800c270:	230f      	movs	r3, #15
 800c272:	18fb      	adds	r3, r7, r3
 800c274:	781b      	ldrb	r3, [r3, #0]
}
 800c276:	0018      	movs	r0, r3
 800c278:	46bd      	mov	sp, r7
 800c27a:	b004      	add	sp, #16
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	46c0      	nop			@ (mov r8, r8)
 800c280:	ffceff88 	.word	0xffceff88
 800c284:	ffff00ff 	.word	0xffff00ff

0800c288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b002      	add	sp, #8
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2a0:	46c0      	nop			@ (mov r8, r8)
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	b002      	add	sp, #8
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2b0:	46c0      	nop			@ (mov r8, r8)
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	b002      	add	sp, #8
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2c0:	46c0      	nop			@ (mov r8, r8)
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	b002      	add	sp, #8
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a3b      	ldr	r2, [pc, #236]	@ (800c3c8 <TIM_Base_SetConfig+0x100>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d008      	beq.n	800c2f2 <TIM_Base_SetConfig+0x2a>
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	2380      	movs	r3, #128	@ 0x80
 800c2e4:	05db      	lsls	r3, r3, #23
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d003      	beq.n	800c2f2 <TIM_Base_SetConfig+0x2a>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a37      	ldr	r2, [pc, #220]	@ (800c3cc <TIM_Base_SetConfig+0x104>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d108      	bne.n	800c304 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2270      	movs	r2, #112	@ 0x70
 800c2f6:	4393      	bics	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	4313      	orrs	r3, r2
 800c302:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a30      	ldr	r2, [pc, #192]	@ (800c3c8 <TIM_Base_SetConfig+0x100>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d018      	beq.n	800c33e <TIM_Base_SetConfig+0x76>
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	2380      	movs	r3, #128	@ 0x80
 800c310:	05db      	lsls	r3, r3, #23
 800c312:	429a      	cmp	r2, r3
 800c314:	d013      	beq.n	800c33e <TIM_Base_SetConfig+0x76>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a2c      	ldr	r2, [pc, #176]	@ (800c3cc <TIM_Base_SetConfig+0x104>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00f      	beq.n	800c33e <TIM_Base_SetConfig+0x76>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a2b      	ldr	r2, [pc, #172]	@ (800c3d0 <TIM_Base_SetConfig+0x108>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00b      	beq.n	800c33e <TIM_Base_SetConfig+0x76>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a2a      	ldr	r2, [pc, #168]	@ (800c3d4 <TIM_Base_SetConfig+0x10c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d007      	beq.n	800c33e <TIM_Base_SetConfig+0x76>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a29      	ldr	r2, [pc, #164]	@ (800c3d8 <TIM_Base_SetConfig+0x110>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d003      	beq.n	800c33e <TIM_Base_SetConfig+0x76>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a28      	ldr	r2, [pc, #160]	@ (800c3dc <TIM_Base_SetConfig+0x114>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d108      	bne.n	800c350 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4a27      	ldr	r2, [pc, #156]	@ (800c3e0 <TIM_Base_SetConfig+0x118>)
 800c342:	4013      	ands	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2280      	movs	r2, #128	@ 0x80
 800c354:	4393      	bics	r3, r2
 800c356:	001a      	movs	r2, r3
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	689a      	ldr	r2, [r3, #8]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a13      	ldr	r2, [pc, #76]	@ (800c3c8 <TIM_Base_SetConfig+0x100>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d00b      	beq.n	800c396 <TIM_Base_SetConfig+0xce>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a14      	ldr	r2, [pc, #80]	@ (800c3d4 <TIM_Base_SetConfig+0x10c>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d007      	beq.n	800c396 <TIM_Base_SetConfig+0xce>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a13      	ldr	r2, [pc, #76]	@ (800c3d8 <TIM_Base_SetConfig+0x110>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d003      	beq.n	800c396 <TIM_Base_SetConfig+0xce>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a12      	ldr	r2, [pc, #72]	@ (800c3dc <TIM_Base_SetConfig+0x114>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d103      	bne.n	800c39e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	691a      	ldr	r2, [r3, #16]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d106      	bne.n	800c3be <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	4393      	bics	r3, r2
 800c3b8:	001a      	movs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	611a      	str	r2, [r3, #16]
  }
}
 800c3be:	46c0      	nop			@ (mov r8, r8)
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	b004      	add	sp, #16
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	46c0      	nop			@ (mov r8, r8)
 800c3c8:	40012c00 	.word	0x40012c00
 800c3cc:	40000400 	.word	0x40000400
 800c3d0:	40002000 	.word	0x40002000
 800c3d4:	40014000 	.word	0x40014000
 800c3d8:	40014400 	.word	0x40014400
 800c3dc:	40014800 	.word	0x40014800
 800c3e0:	fffffcff 	.word	0xfffffcff

0800c3e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6a1b      	ldr	r3, [r3, #32]
 800c3f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4393      	bics	r3, r2
 800c3fe:	001a      	movs	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	22f0      	movs	r2, #240	@ 0xf0
 800c40e:	4393      	bics	r3, r2
 800c410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	011b      	lsls	r3, r3, #4
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	220a      	movs	r2, #10
 800c420:	4393      	bics	r3, r2
 800c422:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	4313      	orrs	r3, r2
 800c42a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	621a      	str	r2, [r3, #32]
}
 800c438:	46c0      	nop			@ (mov r8, r8)
 800c43a:	46bd      	mov	sp, r7
 800c43c:	b006      	add	sp, #24
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	2210      	movs	r2, #16
 800c458:	4393      	bics	r3, r2
 800c45a:	001a      	movs	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	4a0d      	ldr	r2, [pc, #52]	@ (800c4a0 <TIM_TI2_ConfigInputStage+0x60>)
 800c46a:	4013      	ands	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	031b      	lsls	r3, r3, #12
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	4313      	orrs	r3, r2
 800c476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	22a0      	movs	r2, #160	@ 0xa0
 800c47c:	4393      	bics	r3, r2
 800c47e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	011b      	lsls	r3, r3, #4
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	621a      	str	r2, [r3, #32]
}
 800c496:	46c0      	nop			@ (mov r8, r8)
 800c498:	46bd      	mov	sp, r7
 800c49a:	b006      	add	sp, #24
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	46c0      	nop			@ (mov r8, r8)
 800c4a0:	ffff0fff 	.word	0xffff0fff

0800c4a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4a08      	ldr	r2, [pc, #32]	@ (800c4d8 <TIM_ITRx_SetConfig+0x34>)
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	2207      	movs	r2, #7
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	609a      	str	r2, [r3, #8]
}
 800c4ce:	46c0      	nop			@ (mov r8, r8)
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	b004      	add	sp, #16
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	46c0      	nop			@ (mov r8, r8)
 800c4d8:	ffcfff8f 	.word	0xffcfff8f

0800c4dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	4a09      	ldr	r2, [pc, #36]	@ (800c518 <TIM_ETR_SetConfig+0x3c>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	021a      	lsls	r2, r3, #8
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	431a      	orrs	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	4313      	orrs	r3, r2
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	4313      	orrs	r3, r2
 800c508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	609a      	str	r2, [r3, #8]
}
 800c510:	46c0      	nop			@ (mov r8, r8)
 800c512:	46bd      	mov	sp, r7
 800c514:	b006      	add	sp, #24
 800c516:	bd80      	pop	{r7, pc}
 800c518:	ffff00ff 	.word	0xffff00ff

0800c51c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	223c      	movs	r2, #60	@ 0x3c
 800c52a:	5c9b      	ldrb	r3, [r3, r2]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d101      	bne.n	800c534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c530:	2302      	movs	r3, #2
 800c532:	e055      	b.n	800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	223c      	movs	r2, #60	@ 0x3c
 800c538:	2101      	movs	r1, #1
 800c53a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	223d      	movs	r2, #61	@ 0x3d
 800c540:	2102      	movs	r1, #2
 800c542:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a23      	ldr	r2, [pc, #140]	@ (800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d108      	bne.n	800c570 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	4a22      	ldr	r2, [pc, #136]	@ (800c5ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c562:	4013      	ands	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2270      	movs	r2, #112	@ 0x70
 800c574:	4393      	bics	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	4313      	orrs	r3, r2
 800c580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a16      	ldr	r2, [pc, #88]	@ (800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d00f      	beq.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	2380      	movs	r3, #128	@ 0x80
 800c59a:	05db      	lsls	r3, r3, #23
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d009      	beq.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a12      	ldr	r2, [pc, #72]	@ (800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d004      	beq.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a11      	ldr	r2, [pc, #68]	@ (800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d10c      	bne.n	800c5ce <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	2280      	movs	r2, #128	@ 0x80
 800c5b8:	4393      	bics	r3, r2
 800c5ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	223d      	movs	r2, #61	@ 0x3d
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	223c      	movs	r2, #60	@ 0x3c
 800c5da:	2100      	movs	r1, #0
 800c5dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	b004      	add	sp, #16
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	40012c00 	.word	0x40012c00
 800c5ec:	ff0fffff 	.word	0xff0fffff
 800c5f0:	40000400 	.word	0x40000400
 800c5f4:	40014000 	.word	0x40014000

0800c5f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c600:	46c0      	nop			@ (mov r8, r8)
 800c602:	46bd      	mov	sp, r7
 800c604:	b002      	add	sp, #8
 800c606:	bd80      	pop	{r7, pc}

0800c608 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c610:	46c0      	nop			@ (mov r8, r8)
 800c612:	46bd      	mov	sp, r7
 800c614:	b002      	add	sp, #8
 800c616:	bd80      	pop	{r7, pc}

0800c618 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c620:	46c0      	nop			@ (mov r8, r8)
 800c622:	46bd      	mov	sp, r7
 800c624:	b002      	add	sp, #8
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e046      	b.n	800c6c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2288      	movs	r2, #136	@ 0x88
 800c63e:	589b      	ldr	r3, [r3, r2]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d107      	bne.n	800c654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2284      	movs	r2, #132	@ 0x84
 800c648:	2100      	movs	r1, #0
 800c64a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	0018      	movs	r0, r3
 800c650:	f7fb fa4a 	bl	8007ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2288      	movs	r2, #136	@ 0x88
 800c658:	2124      	movs	r1, #36	@ 0x24
 800c65a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2101      	movs	r1, #1
 800c668:	438a      	bics	r2, r1
 800c66a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c670:	2b00      	cmp	r3, #0
 800c672:	d003      	beq.n	800c67c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	0018      	movs	r0, r3
 800c678:	f001 f882 	bl	800d780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	0018      	movs	r0, r3
 800c680:	f000 fdc0 	bl	800d204 <UART_SetConfig>
 800c684:	0003      	movs	r3, r0
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e01c      	b.n	800c6c8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	685a      	ldr	r2, [r3, #4]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	490d      	ldr	r1, [pc, #52]	@ (800c6d0 <HAL_UART_Init+0xa8>)
 800c69a:	400a      	ands	r2, r1
 800c69c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	212a      	movs	r1, #42	@ 0x2a
 800c6aa:	438a      	bics	r2, r1
 800c6ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f001 f911 	bl	800d8e8 <UART_CheckIdleState>
 800c6c6:	0003      	movs	r3, r0
}
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	b002      	add	sp, #8
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	ffffb7ff 	.word	0xffffb7ff

0800c6d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08a      	sub	sp, #40	@ 0x28
 800c6d8:	af02      	add	r7, sp, #8
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	603b      	str	r3, [r7, #0]
 800c6e0:	1dbb      	adds	r3, r7, #6
 800c6e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2288      	movs	r2, #136	@ 0x88
 800c6e8:	589b      	ldr	r3, [r3, r2]
 800c6ea:	2b20      	cmp	r3, #32
 800c6ec:	d000      	beq.n	800c6f0 <HAL_UART_Transmit+0x1c>
 800c6ee:	e090      	b.n	800c812 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <HAL_UART_Transmit+0x2a>
 800c6f6:	1dbb      	adds	r3, r7, #6
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e088      	b.n	800c814 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	689a      	ldr	r2, [r3, #8]
 800c706:	2380      	movs	r3, #128	@ 0x80
 800c708:	015b      	lsls	r3, r3, #5
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d109      	bne.n	800c722 <HAL_UART_Transmit+0x4e>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d105      	bne.n	800c722 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2201      	movs	r2, #1
 800c71a:	4013      	ands	r3, r2
 800c71c:	d001      	beq.n	800c722 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e078      	b.n	800c814 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2290      	movs	r2, #144	@ 0x90
 800c726:	2100      	movs	r1, #0
 800c728:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2288      	movs	r2, #136	@ 0x88
 800c72e:	2121      	movs	r1, #33	@ 0x21
 800c730:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c732:	f7fb fb89 	bl	8007e48 <HAL_GetTick>
 800c736:	0003      	movs	r3, r0
 800c738:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	1dba      	adds	r2, r7, #6
 800c73e:	2154      	movs	r1, #84	@ 0x54
 800c740:	8812      	ldrh	r2, [r2, #0]
 800c742:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	1dba      	adds	r2, r7, #6
 800c748:	2156      	movs	r1, #86	@ 0x56
 800c74a:	8812      	ldrh	r2, [r2, #0]
 800c74c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	689a      	ldr	r2, [r3, #8]
 800c752:	2380      	movs	r3, #128	@ 0x80
 800c754:	015b      	lsls	r3, r3, #5
 800c756:	429a      	cmp	r2, r3
 800c758:	d108      	bne.n	800c76c <HAL_UART_Transmit+0x98>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d104      	bne.n	800c76c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	61bb      	str	r3, [r7, #24]
 800c76a:	e003      	b.n	800c774 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c770:	2300      	movs	r3, #0
 800c772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c774:	e030      	b.n	800c7d8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	0013      	movs	r3, r2
 800c780:	2200      	movs	r2, #0
 800c782:	2180      	movs	r1, #128	@ 0x80
 800c784:	f001 f95a 	bl	800da3c <UART_WaitOnFlagUntilTimeout>
 800c788:	1e03      	subs	r3, r0, #0
 800c78a:	d005      	beq.n	800c798 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2288      	movs	r2, #136	@ 0x88
 800c790:	2120      	movs	r1, #32
 800c792:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e03d      	b.n	800c814 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10b      	bne.n	800c7b6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	001a      	movs	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	05d2      	lsls	r2, r2, #23
 800c7aa:	0dd2      	lsrs	r2, r2, #23
 800c7ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	3302      	adds	r3, #2
 800c7b2:	61bb      	str	r3, [r7, #24]
 800c7b4:	e007      	b.n	800c7c6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	781a      	ldrb	r2, [r3, #0]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2256      	movs	r2, #86	@ 0x56
 800c7ca:	5a9b      	ldrh	r3, [r3, r2]
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	b299      	uxth	r1, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2256      	movs	r2, #86	@ 0x56
 800c7d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2256      	movs	r2, #86	@ 0x56
 800c7dc:	5a9b      	ldrh	r3, [r3, r2]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1c8      	bne.n	800c776 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	0013      	movs	r3, r2
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2140      	movs	r1, #64	@ 0x40
 800c7f2:	f001 f923 	bl	800da3c <UART_WaitOnFlagUntilTimeout>
 800c7f6:	1e03      	subs	r3, r0, #0
 800c7f8:	d005      	beq.n	800c806 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2288      	movs	r2, #136	@ 0x88
 800c7fe:	2120      	movs	r1, #32
 800c800:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e006      	b.n	800c814 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2288      	movs	r2, #136	@ 0x88
 800c80a:	2120      	movs	r1, #32
 800c80c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	e000      	b.n	800c814 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800c812:	2302      	movs	r3, #2
  }
}
 800c814:	0018      	movs	r0, r3
 800c816:	46bd      	mov	sp, r7
 800c818:	b008      	add	sp, #32
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b08c      	sub	sp, #48	@ 0x30
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	1dbb      	adds	r3, r7, #6
 800c828:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2288      	movs	r2, #136	@ 0x88
 800c82e:	589b      	ldr	r3, [r3, r2]
 800c830:	2b20      	cmp	r3, #32
 800c832:	d000      	beq.n	800c836 <HAL_UART_Transmit_IT+0x1a>
 800c834:	e08d      	b.n	800c952 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <HAL_UART_Transmit_IT+0x28>
 800c83c:	1dbb      	adds	r3, r7, #6
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e085      	b.n	800c954 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	2380      	movs	r3, #128	@ 0x80
 800c84e:	015b      	lsls	r3, r3, #5
 800c850:	429a      	cmp	r2, r3
 800c852:	d109      	bne.n	800c868 <HAL_UART_Transmit_IT+0x4c>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d105      	bne.n	800c868 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2201      	movs	r2, #1
 800c860:	4013      	ands	r3, r2
 800c862:	d001      	beq.n	800c868 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e075      	b.n	800c954 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	1dba      	adds	r2, r7, #6
 800c872:	2154      	movs	r1, #84	@ 0x54
 800c874:	8812      	ldrh	r2, [r2, #0]
 800c876:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	1dba      	adds	r2, r7, #6
 800c87c:	2156      	movs	r1, #86	@ 0x56
 800c87e:	8812      	ldrh	r2, [r2, #0]
 800c880:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2290      	movs	r2, #144	@ 0x90
 800c88c:	2100      	movs	r1, #0
 800c88e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2288      	movs	r2, #136	@ 0x88
 800c894:	2121      	movs	r1, #33	@ 0x21
 800c896:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c89c:	2380      	movs	r3, #128	@ 0x80
 800c89e:	059b      	lsls	r3, r3, #22
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d12a      	bne.n	800c8fa <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	2380      	movs	r3, #128	@ 0x80
 800c8aa:	015b      	lsls	r3, r3, #5
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d107      	bne.n	800c8c0 <HAL_UART_Transmit_IT+0xa4>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d103      	bne.n	800c8c0 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4a28      	ldr	r2, [pc, #160]	@ (800c95c <HAL_UART_Transmit_IT+0x140>)
 800c8bc:	679a      	str	r2, [r3, #120]	@ 0x78
 800c8be:	e002      	b.n	800c8c6 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4a27      	ldr	r2, [pc, #156]	@ (800c960 <HAL_UART_Transmit_IT+0x144>)
 800c8c4:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8c6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ca:	61fb      	str	r3, [r7, #28]
  return(result);
 800c8cc:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	f383 8810 	msr	PRIMASK, r3
}
 800c8da:	46c0      	nop			@ (mov r8, r8)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689a      	ldr	r2, [r3, #8]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2180      	movs	r1, #128	@ 0x80
 800c8e8:	0409      	lsls	r1, r1, #16
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	609a      	str	r2, [r3, #8]
 800c8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f4:	f383 8810 	msr	PRIMASK, r3
}
 800c8f8:	e029      	b.n	800c94e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	689a      	ldr	r2, [r3, #8]
 800c8fe:	2380      	movs	r3, #128	@ 0x80
 800c900:	015b      	lsls	r3, r3, #5
 800c902:	429a      	cmp	r2, r3
 800c904:	d107      	bne.n	800c916 <HAL_UART_Transmit_IT+0xfa>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d103      	bne.n	800c916 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	4a14      	ldr	r2, [pc, #80]	@ (800c964 <HAL_UART_Transmit_IT+0x148>)
 800c912:	679a      	str	r2, [r3, #120]	@ 0x78
 800c914:	e002      	b.n	800c91c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	4a13      	ldr	r2, [pc, #76]	@ (800c968 <HAL_UART_Transmit_IT+0x14c>)
 800c91a:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c91c:	f3ef 8310 	mrs	r3, PRIMASK
 800c920:	613b      	str	r3, [r7, #16]
  return(result);
 800c922:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c926:	2301      	movs	r3, #1
 800c928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f383 8810 	msr	PRIMASK, r3
}
 800c930:	46c0      	nop			@ (mov r8, r8)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2180      	movs	r1, #128	@ 0x80
 800c93e:	430a      	orrs	r2, r1
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c944:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	f383 8810 	msr	PRIMASK, r3
}
 800c94c:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	e000      	b.n	800c954 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800c952:	2302      	movs	r3, #2
  }
}
 800c954:	0018      	movs	r0, r3
 800c956:	46bd      	mov	sp, r7
 800c958:	b00c      	add	sp, #48	@ 0x30
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	0800e0bd 	.word	0x0800e0bd
 800c960:	0800dfd1 	.word	0x0800dfd1
 800c964:	0800df13 	.word	0x0800df13
 800c968:	0800de5f 	.word	0x0800de5f

0800c96c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	1dbb      	adds	r3, r7, #6
 800c978:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	228c      	movs	r2, #140	@ 0x8c
 800c97e:	589b      	ldr	r3, [r3, r2]
 800c980:	2b20      	cmp	r3, #32
 800c982:	d14a      	bne.n	800ca1a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <HAL_UART_Receive_IT+0x26>
 800c98a:	1dbb      	adds	r3, r7, #6
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e042      	b.n	800ca1c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	689a      	ldr	r2, [r3, #8]
 800c99a:	2380      	movs	r3, #128	@ 0x80
 800c99c:	015b      	lsls	r3, r3, #5
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d109      	bne.n	800c9b6 <HAL_UART_Receive_IT+0x4a>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d105      	bne.n	800c9b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	d001      	beq.n	800c9b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e032      	b.n	800ca1c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a18      	ldr	r2, [pc, #96]	@ (800ca24 <HAL_UART_Receive_IT+0xb8>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d020      	beq.n	800ca08 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	2380      	movs	r3, #128	@ 0x80
 800c9ce:	041b      	lsls	r3, r3, #16
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	d019      	beq.n	800ca08 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c9da:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9dc:	61fb      	str	r3, [r7, #28]
 800c9de:	2301      	movs	r3, #1
 800c9e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f383 8810 	msr	PRIMASK, r3
}
 800c9e8:	46c0      	nop			@ (mov r8, r8)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2180      	movs	r1, #128	@ 0x80
 800c9f6:	04c9      	lsls	r1, r1, #19
 800c9f8:	430a      	orrs	r2, r1
 800c9fa:	601a      	str	r2, [r3, #0]
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	f383 8810 	msr	PRIMASK, r3
}
 800ca06:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ca08:	1dbb      	adds	r3, r7, #6
 800ca0a:	881a      	ldrh	r2, [r3, #0]
 800ca0c:	68b9      	ldr	r1, [r7, #8]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	0018      	movs	r0, r3
 800ca12:	f001 f883 	bl	800db1c <UART_Start_Receive_IT>
 800ca16:	0003      	movs	r3, r0
 800ca18:	e000      	b.n	800ca1c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ca1a:	2302      	movs	r3, #2
  }
}
 800ca1c:	0018      	movs	r0, r3
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	b008      	add	sp, #32
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	40008000 	.word	0x40008000

0800ca28 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b092      	sub	sp, #72	@ 0x48
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca30:	f3ef 8310 	mrs	r3, PRIMASK
 800ca34:	623b      	str	r3, [r7, #32]
  return(result);
 800ca36:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800ca38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	f383 8810 	msr	PRIMASK, r3
}
 800ca44:	46c0      	nop			@ (mov r8, r8)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	494d      	ldr	r1, [pc, #308]	@ (800cb88 <HAL_UART_AbortReceive+0x160>)
 800ca52:	400a      	ands	r2, r1
 800ca54:	601a      	str	r2, [r3, #0]
 800ca56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca5c:	f383 8810 	msr	PRIMASK, r3
}
 800ca60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca62:	f3ef 8310 	mrs	r3, PRIMASK
 800ca66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800ca6a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	f383 8810 	msr	PRIMASK, r3
}
 800ca76:	46c0      	nop			@ (mov r8, r8)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	689a      	ldr	r2, [r3, #8]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4942      	ldr	r1, [pc, #264]	@ (800cb8c <HAL_UART_AbortReceive+0x164>)
 800ca84:	400a      	ands	r2, r1
 800ca86:	609a      	str	r2, [r3, #8]
 800ca88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8e:	f383 8810 	msr	PRIMASK, r3
}
 800ca92:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d118      	bne.n	800cace <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca9c:	f3ef 8310 	mrs	r3, PRIMASK
 800caa0:	617b      	str	r3, [r7, #20]
  return(result);
 800caa2:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800caa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800caa6:	2301      	movs	r3, #1
 800caa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	f383 8810 	msr	PRIMASK, r3
}
 800cab0:	46c0      	nop			@ (mov r8, r8)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2110      	movs	r1, #16
 800cabe:	438a      	bics	r2, r1
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	f383 8810 	msr	PRIMASK, r3
}
 800cacc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	2240      	movs	r2, #64	@ 0x40
 800cad6:	4013      	ands	r3, r2
 800cad8:	2b40      	cmp	r3, #64	@ 0x40
 800cada:	d139      	bne.n	800cb50 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cadc:	f3ef 8310 	mrs	r3, PRIMASK
 800cae0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cae2:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cae6:	2301      	movs	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f383 8810 	msr	PRIMASK, r3
}
 800caf0:	46c0      	nop			@ (mov r8, r8)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689a      	ldr	r2, [r3, #8]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2140      	movs	r1, #64	@ 0x40
 800cafe:	438a      	bics	r2, r1
 800cb00:	609a      	str	r2, [r3, #8]
 800cb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	f383 8810 	msr	PRIMASK, r3
}
 800cb0c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2280      	movs	r2, #128	@ 0x80
 800cb12:	589b      	ldr	r3, [r3, r2]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d01b      	beq.n	800cb50 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2280      	movs	r2, #128	@ 0x80
 800cb1c:	589b      	ldr	r3, [r3, r2]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2280      	movs	r2, #128	@ 0x80
 800cb26:	589b      	ldr	r3, [r3, r2]
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f7fb fa95 	bl	8008058 <HAL_DMA_Abort>
 800cb2e:	1e03      	subs	r3, r0, #0
 800cb30:	d00e      	beq.n	800cb50 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2280      	movs	r2, #128	@ 0x80
 800cb36:	589b      	ldr	r3, [r3, r2]
 800cb38:	0018      	movs	r0, r3
 800cb3a:	f7fb fb59 	bl	80081f0 <HAL_DMA_GetError>
 800cb3e:	0003      	movs	r3, r0
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d105      	bne.n	800cb50 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2290      	movs	r2, #144	@ 0x90
 800cb48:	2110      	movs	r1, #16
 800cb4a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e017      	b.n	800cb80 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	225e      	movs	r2, #94	@ 0x5e
 800cb54:	2100      	movs	r1, #0
 800cb56:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	220f      	movs	r2, #15
 800cb5e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	699a      	ldr	r2, [r3, #24]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2108      	movs	r1, #8
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	228c      	movs	r2, #140	@ 0x8c
 800cb74:	2120      	movs	r1, #32
 800cb76:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	0018      	movs	r0, r3
 800cb82:	46bd      	mov	sp, r7
 800cb84:	b012      	add	sp, #72	@ 0x48
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	fffffedf 	.word	0xfffffedf
 800cb8c:	effffffe 	.word	0xeffffffe

0800cb90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb90:	b5b0      	push	{r4, r5, r7, lr}
 800cb92:	b0aa      	sub	sp, #168	@ 0xa8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	22a4      	movs	r2, #164	@ 0xa4
 800cba0:	18b9      	adds	r1, r7, r2
 800cba2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	20a0      	movs	r0, #160	@ 0xa0
 800cbac:	1839      	adds	r1, r7, r0
 800cbae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	249c      	movs	r4, #156	@ 0x9c
 800cbb8:	1939      	adds	r1, r7, r4
 800cbba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbbc:	0011      	movs	r1, r2
 800cbbe:	18bb      	adds	r3, r7, r2
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4aa2      	ldr	r2, [pc, #648]	@ (800ce4c <HAL_UART_IRQHandler+0x2bc>)
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	2298      	movs	r2, #152	@ 0x98
 800cbc8:	18bd      	adds	r5, r7, r2
 800cbca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800cbcc:	18bb      	adds	r3, r7, r2
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d11a      	bne.n	800cc0a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbd4:	187b      	adds	r3, r7, r1
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2220      	movs	r2, #32
 800cbda:	4013      	ands	r3, r2
 800cbdc:	d015      	beq.n	800cc0a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbde:	183b      	adds	r3, r7, r0
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	d105      	bne.n	800cbf4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbe8:	193b      	adds	r3, r7, r4
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	2380      	movs	r3, #128	@ 0x80
 800cbee:	055b      	lsls	r3, r3, #21
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	d00a      	beq.n	800cc0a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d100      	bne.n	800cbfe <HAL_UART_IRQHandler+0x6e>
 800cbfc:	e2dc      	b.n	800d1b8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	0010      	movs	r0, r2
 800cc06:	4798      	blx	r3
      }
      return;
 800cc08:	e2d6      	b.n	800d1b8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc0a:	2398      	movs	r3, #152	@ 0x98
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d100      	bne.n	800cc16 <HAL_UART_IRQHandler+0x86>
 800cc14:	e122      	b.n	800ce5c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc16:	239c      	movs	r3, #156	@ 0x9c
 800cc18:	18fb      	adds	r3, r7, r3
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a8c      	ldr	r2, [pc, #560]	@ (800ce50 <HAL_UART_IRQHandler+0x2c0>)
 800cc1e:	4013      	ands	r3, r2
 800cc20:	d106      	bne.n	800cc30 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc22:	23a0      	movs	r3, #160	@ 0xa0
 800cc24:	18fb      	adds	r3, r7, r3
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a8a      	ldr	r2, [pc, #552]	@ (800ce54 <HAL_UART_IRQHandler+0x2c4>)
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	d100      	bne.n	800cc30 <HAL_UART_IRQHandler+0xa0>
 800cc2e:	e115      	b.n	800ce5c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc30:	23a4      	movs	r3, #164	@ 0xa4
 800cc32:	18fb      	adds	r3, r7, r3
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2201      	movs	r2, #1
 800cc38:	4013      	ands	r3, r2
 800cc3a:	d012      	beq.n	800cc62 <HAL_UART_IRQHandler+0xd2>
 800cc3c:	23a0      	movs	r3, #160	@ 0xa0
 800cc3e:	18fb      	adds	r3, r7, r3
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	2380      	movs	r3, #128	@ 0x80
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	4013      	ands	r3, r2
 800cc48:	d00b      	beq.n	800cc62 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2290      	movs	r2, #144	@ 0x90
 800cc56:	589b      	ldr	r3, [r3, r2]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	431a      	orrs	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2190      	movs	r1, #144	@ 0x90
 800cc60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc62:	23a4      	movs	r3, #164	@ 0xa4
 800cc64:	18fb      	adds	r3, r7, r3
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	d011      	beq.n	800cc92 <HAL_UART_IRQHandler+0x102>
 800cc6e:	239c      	movs	r3, #156	@ 0x9c
 800cc70:	18fb      	adds	r3, r7, r3
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2201      	movs	r2, #1
 800cc76:	4013      	ands	r3, r2
 800cc78:	d00b      	beq.n	800cc92 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2290      	movs	r2, #144	@ 0x90
 800cc86:	589b      	ldr	r3, [r3, r2]
 800cc88:	2204      	movs	r2, #4
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2190      	movs	r1, #144	@ 0x90
 800cc90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc92:	23a4      	movs	r3, #164	@ 0xa4
 800cc94:	18fb      	adds	r3, r7, r3
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2204      	movs	r2, #4
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	d011      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x132>
 800cc9e:	239c      	movs	r3, #156	@ 0x9c
 800cca0:	18fb      	adds	r3, r7, r3
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2201      	movs	r2, #1
 800cca6:	4013      	ands	r3, r2
 800cca8:	d00b      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2204      	movs	r2, #4
 800ccb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2290      	movs	r2, #144	@ 0x90
 800ccb6:	589b      	ldr	r3, [r3, r2]
 800ccb8:	2202      	movs	r2, #2
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2190      	movs	r1, #144	@ 0x90
 800ccc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccc2:	23a4      	movs	r3, #164	@ 0xa4
 800ccc4:	18fb      	adds	r3, r7, r3
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2208      	movs	r2, #8
 800ccca:	4013      	ands	r3, r2
 800cccc:	d017      	beq.n	800ccfe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccce:	23a0      	movs	r3, #160	@ 0xa0
 800ccd0:	18fb      	adds	r3, r7, r3
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	d105      	bne.n	800cce6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ccda:	239c      	movs	r3, #156	@ 0x9c
 800ccdc:	18fb      	adds	r3, r7, r3
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a5b      	ldr	r2, [pc, #364]	@ (800ce50 <HAL_UART_IRQHandler+0x2c0>)
 800cce2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cce4:	d00b      	beq.n	800ccfe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2208      	movs	r2, #8
 800ccec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2290      	movs	r2, #144	@ 0x90
 800ccf2:	589b      	ldr	r3, [r3, r2]
 800ccf4:	2208      	movs	r2, #8
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2190      	movs	r1, #144	@ 0x90
 800ccfc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccfe:	23a4      	movs	r3, #164	@ 0xa4
 800cd00:	18fb      	adds	r3, r7, r3
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	2380      	movs	r3, #128	@ 0x80
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	4013      	ands	r3, r2
 800cd0a:	d013      	beq.n	800cd34 <HAL_UART_IRQHandler+0x1a4>
 800cd0c:	23a0      	movs	r3, #160	@ 0xa0
 800cd0e:	18fb      	adds	r3, r7, r3
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	2380      	movs	r3, #128	@ 0x80
 800cd14:	04db      	lsls	r3, r3, #19
 800cd16:	4013      	ands	r3, r2
 800cd18:	d00c      	beq.n	800cd34 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2280      	movs	r2, #128	@ 0x80
 800cd20:	0112      	lsls	r2, r2, #4
 800cd22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2290      	movs	r2, #144	@ 0x90
 800cd28:	589b      	ldr	r3, [r3, r2]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2190      	movs	r1, #144	@ 0x90
 800cd32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2290      	movs	r2, #144	@ 0x90
 800cd38:	589b      	ldr	r3, [r3, r2]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d100      	bne.n	800cd40 <HAL_UART_IRQHandler+0x1b0>
 800cd3e:	e23d      	b.n	800d1bc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd40:	23a4      	movs	r3, #164	@ 0xa4
 800cd42:	18fb      	adds	r3, r7, r3
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2220      	movs	r2, #32
 800cd48:	4013      	ands	r3, r2
 800cd4a:	d015      	beq.n	800cd78 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd4c:	23a0      	movs	r3, #160	@ 0xa0
 800cd4e:	18fb      	adds	r3, r7, r3
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2220      	movs	r2, #32
 800cd54:	4013      	ands	r3, r2
 800cd56:	d106      	bne.n	800cd66 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd58:	239c      	movs	r3, #156	@ 0x9c
 800cd5a:	18fb      	adds	r3, r7, r3
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	2380      	movs	r3, #128	@ 0x80
 800cd60:	055b      	lsls	r3, r3, #21
 800cd62:	4013      	ands	r3, r2
 800cd64:	d008      	beq.n	800cd78 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d004      	beq.n	800cd78 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	0010      	movs	r0, r2
 800cd76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2290      	movs	r2, #144	@ 0x90
 800cd7c:	589b      	ldr	r3, [r3, r2]
 800cd7e:	2194      	movs	r1, #148	@ 0x94
 800cd80:	187a      	adds	r2, r7, r1
 800cd82:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	2240      	movs	r2, #64	@ 0x40
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	2b40      	cmp	r3, #64	@ 0x40
 800cd90:	d004      	beq.n	800cd9c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd92:	187b      	adds	r3, r7, r1
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2228      	movs	r2, #40	@ 0x28
 800cd98:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd9a:	d04c      	beq.n	800ce36 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	0018      	movs	r0, r3
 800cda0:	f000 ffe0 	bl	800dd64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	2240      	movs	r2, #64	@ 0x40
 800cdac:	4013      	ands	r3, r2
 800cdae:	2b40      	cmp	r3, #64	@ 0x40
 800cdb0:	d13c      	bne.n	800ce2c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdb2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdb6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800cdb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdba:	2090      	movs	r0, #144	@ 0x90
 800cdbc:	183a      	adds	r2, r7, r0
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdc6:	f383 8810 	msr	PRIMASK, r3
}
 800cdca:	46c0      	nop			@ (mov r8, r8)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	689a      	ldr	r2, [r3, #8]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2140      	movs	r1, #64	@ 0x40
 800cdd8:	438a      	bics	r2, r1
 800cdda:	609a      	str	r2, [r3, #8]
 800cddc:	183b      	adds	r3, r7, r0
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cde2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cde4:	f383 8810 	msr	PRIMASK, r3
}
 800cde8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2280      	movs	r2, #128	@ 0x80
 800cdee:	589b      	ldr	r3, [r3, r2]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d016      	beq.n	800ce22 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2280      	movs	r2, #128	@ 0x80
 800cdf8:	589b      	ldr	r3, [r3, r2]
 800cdfa:	4a17      	ldr	r2, [pc, #92]	@ (800ce58 <HAL_UART_IRQHandler+0x2c8>)
 800cdfc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2280      	movs	r2, #128	@ 0x80
 800ce02:	589b      	ldr	r3, [r3, r2]
 800ce04:	0018      	movs	r0, r3
 800ce06:	f7fb f989 	bl	800811c <HAL_DMA_Abort_IT>
 800ce0a:	1e03      	subs	r3, r0, #0
 800ce0c:	d01c      	beq.n	800ce48 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2280      	movs	r2, #128	@ 0x80
 800ce12:	589b      	ldr	r3, [r3, r2]
 800ce14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	2180      	movs	r1, #128	@ 0x80
 800ce1a:	5852      	ldr	r2, [r2, r1]
 800ce1c:	0010      	movs	r0, r2
 800ce1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce20:	e012      	b.n	800ce48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	0018      	movs	r0, r3
 800ce26:	f000 f9d9 	bl	800d1dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce2a:	e00d      	b.n	800ce48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	0018      	movs	r0, r3
 800ce30:	f000 f9d4 	bl	800d1dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce34:	e008      	b.n	800ce48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	0018      	movs	r0, r3
 800ce3a:	f000 f9cf 	bl	800d1dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2290      	movs	r2, #144	@ 0x90
 800ce42:	2100      	movs	r1, #0
 800ce44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800ce46:	e1b9      	b.n	800d1bc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce48:	46c0      	nop			@ (mov r8, r8)
    return;
 800ce4a:	e1b7      	b.n	800d1bc <HAL_UART_IRQHandler+0x62c>
 800ce4c:	0000080f 	.word	0x0000080f
 800ce50:	10000001 	.word	0x10000001
 800ce54:	04000120 	.word	0x04000120
 800ce58:	0800de31 	.word	0x0800de31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d000      	beq.n	800ce66 <HAL_UART_IRQHandler+0x2d6>
 800ce64:	e13e      	b.n	800d0e4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce66:	23a4      	movs	r3, #164	@ 0xa4
 800ce68:	18fb      	adds	r3, r7, r3
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2210      	movs	r2, #16
 800ce6e:	4013      	ands	r3, r2
 800ce70:	d100      	bne.n	800ce74 <HAL_UART_IRQHandler+0x2e4>
 800ce72:	e137      	b.n	800d0e4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce74:	23a0      	movs	r3, #160	@ 0xa0
 800ce76:	18fb      	adds	r3, r7, r3
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2210      	movs	r2, #16
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	d100      	bne.n	800ce82 <HAL_UART_IRQHandler+0x2f2>
 800ce80:	e130      	b.n	800d0e4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2210      	movs	r2, #16
 800ce88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	2240      	movs	r2, #64	@ 0x40
 800ce92:	4013      	ands	r3, r2
 800ce94:	2b40      	cmp	r3, #64	@ 0x40
 800ce96:	d000      	beq.n	800ce9a <HAL_UART_IRQHandler+0x30a>
 800ce98:	e0a4      	b.n	800cfe4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2280      	movs	r2, #128	@ 0x80
 800ce9e:	589b      	ldr	r3, [r3, r2]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	217e      	movs	r1, #126	@ 0x7e
 800cea6:	187b      	adds	r3, r7, r1
 800cea8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800ceaa:	187b      	adds	r3, r7, r1
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d100      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x324>
 800ceb2:	e185      	b.n	800d1c0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	225c      	movs	r2, #92	@ 0x5c
 800ceb8:	5a9b      	ldrh	r3, [r3, r2]
 800ceba:	187a      	adds	r2, r7, r1
 800cebc:	8812      	ldrh	r2, [r2, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d300      	bcc.n	800cec4 <HAL_UART_IRQHandler+0x334>
 800cec2:	e17d      	b.n	800d1c0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	187a      	adds	r2, r7, r1
 800cec8:	215e      	movs	r1, #94	@ 0x5e
 800ceca:	8812      	ldrh	r2, [r2, #0]
 800cecc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2280      	movs	r2, #128	@ 0x80
 800ced2:	589b      	ldr	r3, [r3, r2]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2220      	movs	r2, #32
 800ceda:	4013      	ands	r3, r2
 800cedc:	d170      	bne.n	800cfc0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cede:	f3ef 8310 	mrs	r3, PRIMASK
 800cee2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cee6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cee8:	2301      	movs	r3, #1
 800ceea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceee:	f383 8810 	msr	PRIMASK, r3
}
 800cef2:	46c0      	nop			@ (mov r8, r8)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	49b4      	ldr	r1, [pc, #720]	@ (800d1d0 <HAL_UART_IRQHandler+0x640>)
 800cf00:	400a      	ands	r2, r1
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0a:	f383 8810 	msr	PRIMASK, r3
}
 800cf0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf10:	f3ef 8310 	mrs	r3, PRIMASK
 800cf14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800cf16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf18:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf20:	f383 8810 	msr	PRIMASK, r3
}
 800cf24:	46c0      	nop			@ (mov r8, r8)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2101      	movs	r1, #1
 800cf32:	438a      	bics	r2, r1
 800cf34:	609a      	str	r2, [r3, #8]
 800cf36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf3c:	f383 8810 	msr	PRIMASK, r3
}
 800cf40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf42:	f3ef 8310 	mrs	r3, PRIMASK
 800cf46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800cf48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf4a:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf52:	f383 8810 	msr	PRIMASK, r3
}
 800cf56:	46c0      	nop			@ (mov r8, r8)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	689a      	ldr	r2, [r3, #8]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2140      	movs	r1, #64	@ 0x40
 800cf64:	438a      	bics	r2, r1
 800cf66:	609a      	str	r2, [r3, #8]
 800cf68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf6e:	f383 8810 	msr	PRIMASK, r3
}
 800cf72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	228c      	movs	r2, #140	@ 0x8c
 800cf78:	2120      	movs	r1, #32
 800cf7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf82:	f3ef 8310 	mrs	r3, PRIMASK
 800cf86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800cf88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf92:	f383 8810 	msr	PRIMASK, r3
}
 800cf96:	46c0      	nop			@ (mov r8, r8)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2110      	movs	r1, #16
 800cfa4:	438a      	bics	r2, r1
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfae:	f383 8810 	msr	PRIMASK, r3
}
 800cfb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2280      	movs	r2, #128	@ 0x80
 800cfb8:	589b      	ldr	r3, [r3, r2]
 800cfba:	0018      	movs	r0, r3
 800cfbc:	f7fb f84c 	bl	8008058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	225c      	movs	r2, #92	@ 0x5c
 800cfca:	5a9a      	ldrh	r2, [r3, r2]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	215e      	movs	r1, #94	@ 0x5e
 800cfd0:	5a5b      	ldrh	r3, [r3, r1]
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	0011      	movs	r1, r2
 800cfdc:	0018      	movs	r0, r3
 800cfde:	f000 f905 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfe2:	e0ed      	b.n	800d1c0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	225c      	movs	r2, #92	@ 0x5c
 800cfe8:	5a99      	ldrh	r1, [r3, r2]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	225e      	movs	r2, #94	@ 0x5e
 800cfee:	5a9b      	ldrh	r3, [r3, r2]
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	208e      	movs	r0, #142	@ 0x8e
 800cff4:	183b      	adds	r3, r7, r0
 800cff6:	1a8a      	subs	r2, r1, r2
 800cff8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	225e      	movs	r2, #94	@ 0x5e
 800cffe:	5a9b      	ldrh	r3, [r3, r2]
 800d000:	b29b      	uxth	r3, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	d100      	bne.n	800d008 <HAL_UART_IRQHandler+0x478>
 800d006:	e0dd      	b.n	800d1c4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d008:	183b      	adds	r3, r7, r0
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d100      	bne.n	800d012 <HAL_UART_IRQHandler+0x482>
 800d010:	e0d8      	b.n	800d1c4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d012:	f3ef 8310 	mrs	r3, PRIMASK
 800d016:	60fb      	str	r3, [r7, #12]
  return(result);
 800d018:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d01a:	2488      	movs	r4, #136	@ 0x88
 800d01c:	193a      	adds	r2, r7, r4
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	2301      	movs	r3, #1
 800d022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	f383 8810 	msr	PRIMASK, r3
}
 800d02a:	46c0      	nop			@ (mov r8, r8)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4967      	ldr	r1, [pc, #412]	@ (800d1d4 <HAL_UART_IRQHandler+0x644>)
 800d038:	400a      	ands	r2, r1
 800d03a:	601a      	str	r2, [r3, #0]
 800d03c:	193b      	adds	r3, r7, r4
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f383 8810 	msr	PRIMASK, r3
}
 800d048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d04a:	f3ef 8310 	mrs	r3, PRIMASK
 800d04e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d050:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d052:	2484      	movs	r4, #132	@ 0x84
 800d054:	193a      	adds	r2, r7, r4
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	2301      	movs	r3, #1
 800d05a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	f383 8810 	msr	PRIMASK, r3
}
 800d062:	46c0      	nop			@ (mov r8, r8)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	689a      	ldr	r2, [r3, #8]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	495a      	ldr	r1, [pc, #360]	@ (800d1d8 <HAL_UART_IRQHandler+0x648>)
 800d070:	400a      	ands	r2, r1
 800d072:	609a      	str	r2, [r3, #8]
 800d074:	193b      	adds	r3, r7, r4
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	f383 8810 	msr	PRIMASK, r3
}
 800d080:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	228c      	movs	r2, #140	@ 0x8c
 800d086:	2120      	movs	r1, #32
 800d088:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d096:	f3ef 8310 	mrs	r3, PRIMASK
 800d09a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d09e:	2480      	movs	r4, #128	@ 0x80
 800d0a0:	193a      	adds	r2, r7, r4
 800d0a2:	6013      	str	r3, [r2, #0]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0aa:	f383 8810 	msr	PRIMASK, r3
}
 800d0ae:	46c0      	nop			@ (mov r8, r8)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2110      	movs	r1, #16
 800d0bc:	438a      	bics	r2, r1
 800d0be:	601a      	str	r2, [r3, #0]
 800d0c0:	193b      	adds	r3, r7, r4
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c8:	f383 8810 	msr	PRIMASK, r3
}
 800d0cc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0d4:	183b      	adds	r3, r7, r0
 800d0d6:	881a      	ldrh	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	0011      	movs	r1, r2
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f000 f885 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0e2:	e06f      	b.n	800d1c4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0e4:	23a4      	movs	r3, #164	@ 0xa4
 800d0e6:	18fb      	adds	r3, r7, r3
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	2380      	movs	r3, #128	@ 0x80
 800d0ec:	035b      	lsls	r3, r3, #13
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	d010      	beq.n	800d114 <HAL_UART_IRQHandler+0x584>
 800d0f2:	239c      	movs	r3, #156	@ 0x9c
 800d0f4:	18fb      	adds	r3, r7, r3
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	2380      	movs	r3, #128	@ 0x80
 800d0fa:	03db      	lsls	r3, r3, #15
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	d009      	beq.n	800d114 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2280      	movs	r2, #128	@ 0x80
 800d106:	0352      	lsls	r2, r2, #13
 800d108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	0018      	movs	r0, r3
 800d10e:	f001 fdfd 	bl	800ed0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d112:	e05a      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d114:	23a4      	movs	r3, #164	@ 0xa4
 800d116:	18fb      	adds	r3, r7, r3
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2280      	movs	r2, #128	@ 0x80
 800d11c:	4013      	ands	r3, r2
 800d11e:	d016      	beq.n	800d14e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d120:	23a0      	movs	r3, #160	@ 0xa0
 800d122:	18fb      	adds	r3, r7, r3
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2280      	movs	r2, #128	@ 0x80
 800d128:	4013      	ands	r3, r2
 800d12a:	d106      	bne.n	800d13a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d12c:	239c      	movs	r3, #156	@ 0x9c
 800d12e:	18fb      	adds	r3, r7, r3
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	2380      	movs	r3, #128	@ 0x80
 800d134:	041b      	lsls	r3, r3, #16
 800d136:	4013      	ands	r3, r2
 800d138:	d009      	beq.n	800d14e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d042      	beq.n	800d1c8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	0010      	movs	r0, r2
 800d14a:	4798      	blx	r3
    }
    return;
 800d14c:	e03c      	b.n	800d1c8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d14e:	23a4      	movs	r3, #164	@ 0xa4
 800d150:	18fb      	adds	r3, r7, r3
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2240      	movs	r2, #64	@ 0x40
 800d156:	4013      	ands	r3, r2
 800d158:	d00a      	beq.n	800d170 <HAL_UART_IRQHandler+0x5e0>
 800d15a:	23a0      	movs	r3, #160	@ 0xa0
 800d15c:	18fb      	adds	r3, r7, r3
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2240      	movs	r2, #64	@ 0x40
 800d162:	4013      	ands	r3, r2
 800d164:	d004      	beq.n	800d170 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	0018      	movs	r0, r3
 800d16a:	f001 f821 	bl	800e1b0 <UART_EndTransmit_IT>
    return;
 800d16e:	e02c      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d170:	23a4      	movs	r3, #164	@ 0xa4
 800d172:	18fb      	adds	r3, r7, r3
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	2380      	movs	r3, #128	@ 0x80
 800d178:	041b      	lsls	r3, r3, #16
 800d17a:	4013      	ands	r3, r2
 800d17c:	d00b      	beq.n	800d196 <HAL_UART_IRQHandler+0x606>
 800d17e:	23a0      	movs	r3, #160	@ 0xa0
 800d180:	18fb      	adds	r3, r7, r3
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	2380      	movs	r3, #128	@ 0x80
 800d186:	05db      	lsls	r3, r3, #23
 800d188:	4013      	ands	r3, r2
 800d18a:	d004      	beq.n	800d196 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	0018      	movs	r0, r3
 800d190:	f001 fdcc 	bl	800ed2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d194:	e019      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d196:	23a4      	movs	r3, #164	@ 0xa4
 800d198:	18fb      	adds	r3, r7, r3
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	2380      	movs	r3, #128	@ 0x80
 800d19e:	045b      	lsls	r3, r3, #17
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	d012      	beq.n	800d1ca <HAL_UART_IRQHandler+0x63a>
 800d1a4:	23a0      	movs	r3, #160	@ 0xa0
 800d1a6:	18fb      	adds	r3, r7, r3
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	da0d      	bge.n	800d1ca <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f001 fdb3 	bl	800ed1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1b6:	e008      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
      return;
 800d1b8:	46c0      	nop			@ (mov r8, r8)
 800d1ba:	e006      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
    return;
 800d1bc:	46c0      	nop			@ (mov r8, r8)
 800d1be:	e004      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
      return;
 800d1c0:	46c0      	nop			@ (mov r8, r8)
 800d1c2:	e002      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
      return;
 800d1c4:	46c0      	nop			@ (mov r8, r8)
 800d1c6:	e000      	b.n	800d1ca <HAL_UART_IRQHandler+0x63a>
    return;
 800d1c8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	b02a      	add	sp, #168	@ 0xa8
 800d1ce:	bdb0      	pop	{r4, r5, r7, pc}
 800d1d0:	fffffeff 	.word	0xfffffeff
 800d1d4:	fffffedf 	.word	0xfffffedf
 800d1d8:	effffffe 	.word	0xeffffffe

0800d1dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1e4:	46c0      	nop			@ (mov r8, r8)
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	b002      	add	sp, #8
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	000a      	movs	r2, r1
 800d1f6:	1cbb      	adds	r3, r7, #2
 800d1f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1fa:	46c0      	nop			@ (mov r8, r8)
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	b002      	add	sp, #8
 800d200:	bd80      	pop	{r7, pc}
	...

0800d204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d204:	b5b0      	push	{r4, r5, r7, lr}
 800d206:	b090      	sub	sp, #64	@ 0x40
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d20c:	231a      	movs	r3, #26
 800d20e:	2220      	movs	r2, #32
 800d210:	189b      	adds	r3, r3, r2
 800d212:	19db      	adds	r3, r3, r7
 800d214:	2200      	movs	r2, #0
 800d216:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21a:	689a      	ldr	r2, [r3, #8]
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	431a      	orrs	r2, r3
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	431a      	orrs	r2, r3
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	69db      	ldr	r3, [r3, #28]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4aaf      	ldr	r2, [pc, #700]	@ (800d4f4 <UART_SetConfig+0x2f0>)
 800d238:	4013      	ands	r3, r2
 800d23a:	0019      	movs	r1, r3
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d242:	430b      	orrs	r3, r1
 800d244:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4aaa      	ldr	r2, [pc, #680]	@ (800d4f8 <UART_SetConfig+0x2f4>)
 800d24e:	4013      	ands	r3, r2
 800d250:	0018      	movs	r0, r3
 800d252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d254:	68d9      	ldr	r1, [r3, #12]
 800d256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	0003      	movs	r3, r0
 800d25c:	430b      	orrs	r3, r1
 800d25e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4aa4      	ldr	r2, [pc, #656]	@ (800d4fc <UART_SetConfig+0x2f8>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d004      	beq.n	800d27a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d272:	6a1b      	ldr	r3, [r3, #32]
 800d274:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d276:	4313      	orrs	r3, r2
 800d278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	4a9f      	ldr	r2, [pc, #636]	@ (800d500 <UART_SetConfig+0x2fc>)
 800d282:	4013      	ands	r3, r2
 800d284:	0019      	movs	r1, r3
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28c:	430b      	orrs	r3, r1
 800d28e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d296:	220f      	movs	r2, #15
 800d298:	4393      	bics	r3, r2
 800d29a:	0018      	movs	r0, r3
 800d29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	0003      	movs	r3, r0
 800d2a6:	430b      	orrs	r3, r1
 800d2a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a95      	ldr	r2, [pc, #596]	@ (800d504 <UART_SetConfig+0x300>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d131      	bne.n	800d318 <UART_SetConfig+0x114>
 800d2b4:	4b94      	ldr	r3, [pc, #592]	@ (800d508 <UART_SetConfig+0x304>)
 800d2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b03      	cmp	r3, #3
 800d2be:	d01d      	beq.n	800d2fc <UART_SetConfig+0xf8>
 800d2c0:	d823      	bhi.n	800d30a <UART_SetConfig+0x106>
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d00c      	beq.n	800d2e0 <UART_SetConfig+0xdc>
 800d2c6:	d820      	bhi.n	800d30a <UART_SetConfig+0x106>
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <UART_SetConfig+0xce>
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d00e      	beq.n	800d2ee <UART_SetConfig+0xea>
 800d2d0:	e01b      	b.n	800d30a <UART_SetConfig+0x106>
 800d2d2:	231b      	movs	r3, #27
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	189b      	adds	r3, r3, r2
 800d2d8:	19db      	adds	r3, r3, r7
 800d2da:	2200      	movs	r2, #0
 800d2dc:	701a      	strb	r2, [r3, #0]
 800d2de:	e0b4      	b.n	800d44a <UART_SetConfig+0x246>
 800d2e0:	231b      	movs	r3, #27
 800d2e2:	2220      	movs	r2, #32
 800d2e4:	189b      	adds	r3, r3, r2
 800d2e6:	19db      	adds	r3, r3, r7
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	e0ad      	b.n	800d44a <UART_SetConfig+0x246>
 800d2ee:	231b      	movs	r3, #27
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	189b      	adds	r3, r3, r2
 800d2f4:	19db      	adds	r3, r3, r7
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	e0a6      	b.n	800d44a <UART_SetConfig+0x246>
 800d2fc:	231b      	movs	r3, #27
 800d2fe:	2220      	movs	r2, #32
 800d300:	189b      	adds	r3, r3, r2
 800d302:	19db      	adds	r3, r3, r7
 800d304:	2208      	movs	r2, #8
 800d306:	701a      	strb	r2, [r3, #0]
 800d308:	e09f      	b.n	800d44a <UART_SetConfig+0x246>
 800d30a:	231b      	movs	r3, #27
 800d30c:	2220      	movs	r2, #32
 800d30e:	189b      	adds	r3, r3, r2
 800d310:	19db      	adds	r3, r3, r7
 800d312:	2210      	movs	r2, #16
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	e098      	b.n	800d44a <UART_SetConfig+0x246>
 800d318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a7b      	ldr	r2, [pc, #492]	@ (800d50c <UART_SetConfig+0x308>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d131      	bne.n	800d386 <UART_SetConfig+0x182>
 800d322:	4b79      	ldr	r3, [pc, #484]	@ (800d508 <UART_SetConfig+0x304>)
 800d324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d326:	220c      	movs	r2, #12
 800d328:	4013      	ands	r3, r2
 800d32a:	2b0c      	cmp	r3, #12
 800d32c:	d01d      	beq.n	800d36a <UART_SetConfig+0x166>
 800d32e:	d823      	bhi.n	800d378 <UART_SetConfig+0x174>
 800d330:	2b08      	cmp	r3, #8
 800d332:	d00c      	beq.n	800d34e <UART_SetConfig+0x14a>
 800d334:	d820      	bhi.n	800d378 <UART_SetConfig+0x174>
 800d336:	2b00      	cmp	r3, #0
 800d338:	d002      	beq.n	800d340 <UART_SetConfig+0x13c>
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d00e      	beq.n	800d35c <UART_SetConfig+0x158>
 800d33e:	e01b      	b.n	800d378 <UART_SetConfig+0x174>
 800d340:	231b      	movs	r3, #27
 800d342:	2220      	movs	r2, #32
 800d344:	189b      	adds	r3, r3, r2
 800d346:	19db      	adds	r3, r3, r7
 800d348:	2200      	movs	r2, #0
 800d34a:	701a      	strb	r2, [r3, #0]
 800d34c:	e07d      	b.n	800d44a <UART_SetConfig+0x246>
 800d34e:	231b      	movs	r3, #27
 800d350:	2220      	movs	r2, #32
 800d352:	189b      	adds	r3, r3, r2
 800d354:	19db      	adds	r3, r3, r7
 800d356:	2202      	movs	r2, #2
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	e076      	b.n	800d44a <UART_SetConfig+0x246>
 800d35c:	231b      	movs	r3, #27
 800d35e:	2220      	movs	r2, #32
 800d360:	189b      	adds	r3, r3, r2
 800d362:	19db      	adds	r3, r3, r7
 800d364:	2204      	movs	r2, #4
 800d366:	701a      	strb	r2, [r3, #0]
 800d368:	e06f      	b.n	800d44a <UART_SetConfig+0x246>
 800d36a:	231b      	movs	r3, #27
 800d36c:	2220      	movs	r2, #32
 800d36e:	189b      	adds	r3, r3, r2
 800d370:	19db      	adds	r3, r3, r7
 800d372:	2208      	movs	r2, #8
 800d374:	701a      	strb	r2, [r3, #0]
 800d376:	e068      	b.n	800d44a <UART_SetConfig+0x246>
 800d378:	231b      	movs	r3, #27
 800d37a:	2220      	movs	r2, #32
 800d37c:	189b      	adds	r3, r3, r2
 800d37e:	19db      	adds	r3, r3, r7
 800d380:	2210      	movs	r2, #16
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	e061      	b.n	800d44a <UART_SetConfig+0x246>
 800d386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a61      	ldr	r2, [pc, #388]	@ (800d510 <UART_SetConfig+0x30c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d106      	bne.n	800d39e <UART_SetConfig+0x19a>
 800d390:	231b      	movs	r3, #27
 800d392:	2220      	movs	r2, #32
 800d394:	189b      	adds	r3, r3, r2
 800d396:	19db      	adds	r3, r3, r7
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
 800d39c:	e055      	b.n	800d44a <UART_SetConfig+0x246>
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a5c      	ldr	r2, [pc, #368]	@ (800d514 <UART_SetConfig+0x310>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d106      	bne.n	800d3b6 <UART_SetConfig+0x1b2>
 800d3a8:	231b      	movs	r3, #27
 800d3aa:	2220      	movs	r2, #32
 800d3ac:	189b      	adds	r3, r3, r2
 800d3ae:	19db      	adds	r3, r3, r7
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	e049      	b.n	800d44a <UART_SetConfig+0x246>
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a50      	ldr	r2, [pc, #320]	@ (800d4fc <UART_SetConfig+0x2f8>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d13e      	bne.n	800d43e <UART_SetConfig+0x23a>
 800d3c0:	4b51      	ldr	r3, [pc, #324]	@ (800d508 <UART_SetConfig+0x304>)
 800d3c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3c4:	23c0      	movs	r3, #192	@ 0xc0
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	22c0      	movs	r2, #192	@ 0xc0
 800d3cc:	0112      	lsls	r2, r2, #4
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d027      	beq.n	800d422 <UART_SetConfig+0x21e>
 800d3d2:	22c0      	movs	r2, #192	@ 0xc0
 800d3d4:	0112      	lsls	r2, r2, #4
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d82a      	bhi.n	800d430 <UART_SetConfig+0x22c>
 800d3da:	2280      	movs	r2, #128	@ 0x80
 800d3dc:	0112      	lsls	r2, r2, #4
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d011      	beq.n	800d406 <UART_SetConfig+0x202>
 800d3e2:	2280      	movs	r2, #128	@ 0x80
 800d3e4:	0112      	lsls	r2, r2, #4
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d822      	bhi.n	800d430 <UART_SetConfig+0x22c>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <UART_SetConfig+0x1f4>
 800d3ee:	2280      	movs	r2, #128	@ 0x80
 800d3f0:	00d2      	lsls	r2, r2, #3
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d00e      	beq.n	800d414 <UART_SetConfig+0x210>
 800d3f6:	e01b      	b.n	800d430 <UART_SetConfig+0x22c>
 800d3f8:	231b      	movs	r3, #27
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	189b      	adds	r3, r3, r2
 800d3fe:	19db      	adds	r3, r3, r7
 800d400:	2200      	movs	r2, #0
 800d402:	701a      	strb	r2, [r3, #0]
 800d404:	e021      	b.n	800d44a <UART_SetConfig+0x246>
 800d406:	231b      	movs	r3, #27
 800d408:	2220      	movs	r2, #32
 800d40a:	189b      	adds	r3, r3, r2
 800d40c:	19db      	adds	r3, r3, r7
 800d40e:	2202      	movs	r2, #2
 800d410:	701a      	strb	r2, [r3, #0]
 800d412:	e01a      	b.n	800d44a <UART_SetConfig+0x246>
 800d414:	231b      	movs	r3, #27
 800d416:	2220      	movs	r2, #32
 800d418:	189b      	adds	r3, r3, r2
 800d41a:	19db      	adds	r3, r3, r7
 800d41c:	2204      	movs	r2, #4
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	e013      	b.n	800d44a <UART_SetConfig+0x246>
 800d422:	231b      	movs	r3, #27
 800d424:	2220      	movs	r2, #32
 800d426:	189b      	adds	r3, r3, r2
 800d428:	19db      	adds	r3, r3, r7
 800d42a:	2208      	movs	r2, #8
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	e00c      	b.n	800d44a <UART_SetConfig+0x246>
 800d430:	231b      	movs	r3, #27
 800d432:	2220      	movs	r2, #32
 800d434:	189b      	adds	r3, r3, r2
 800d436:	19db      	adds	r3, r3, r7
 800d438:	2210      	movs	r2, #16
 800d43a:	701a      	strb	r2, [r3, #0]
 800d43c:	e005      	b.n	800d44a <UART_SetConfig+0x246>
 800d43e:	231b      	movs	r3, #27
 800d440:	2220      	movs	r2, #32
 800d442:	189b      	adds	r3, r3, r2
 800d444:	19db      	adds	r3, r3, r7
 800d446:	2210      	movs	r2, #16
 800d448:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a2b      	ldr	r2, [pc, #172]	@ (800d4fc <UART_SetConfig+0x2f8>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d000      	beq.n	800d456 <UART_SetConfig+0x252>
 800d454:	e0a9      	b.n	800d5aa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d456:	231b      	movs	r3, #27
 800d458:	2220      	movs	r2, #32
 800d45a:	189b      	adds	r3, r3, r2
 800d45c:	19db      	adds	r3, r3, r7
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2b08      	cmp	r3, #8
 800d462:	d015      	beq.n	800d490 <UART_SetConfig+0x28c>
 800d464:	dc18      	bgt.n	800d498 <UART_SetConfig+0x294>
 800d466:	2b04      	cmp	r3, #4
 800d468:	d00d      	beq.n	800d486 <UART_SetConfig+0x282>
 800d46a:	dc15      	bgt.n	800d498 <UART_SetConfig+0x294>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <UART_SetConfig+0x272>
 800d470:	2b02      	cmp	r3, #2
 800d472:	d005      	beq.n	800d480 <UART_SetConfig+0x27c>
 800d474:	e010      	b.n	800d498 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d476:	f7fd f99f 	bl	800a7b8 <HAL_RCC_GetPCLK1Freq>
 800d47a:	0003      	movs	r3, r0
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d47e:	e014      	b.n	800d4aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d480:	4b25      	ldr	r3, [pc, #148]	@ (800d518 <UART_SetConfig+0x314>)
 800d482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d484:	e011      	b.n	800d4aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d486:	f7fd f90b 	bl	800a6a0 <HAL_RCC_GetSysClockFreq>
 800d48a:	0003      	movs	r3, r0
 800d48c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d48e:	e00c      	b.n	800d4aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d490:	2380      	movs	r3, #128	@ 0x80
 800d492:	021b      	lsls	r3, r3, #8
 800d494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d496:	e008      	b.n	800d4aa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800d498:	2300      	movs	r3, #0
 800d49a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d49c:	231a      	movs	r3, #26
 800d49e:	2220      	movs	r2, #32
 800d4a0:	189b      	adds	r3, r3, r2
 800d4a2:	19db      	adds	r3, r3, r7
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]
        break;
 800d4a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d100      	bne.n	800d4b2 <UART_SetConfig+0x2ae>
 800d4b0:	e14b      	b.n	800d74a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4b6:	4b19      	ldr	r3, [pc, #100]	@ (800d51c <UART_SetConfig+0x318>)
 800d4b8:	0052      	lsls	r2, r2, #1
 800d4ba:	5ad3      	ldrh	r3, [r2, r3]
 800d4bc:	0019      	movs	r1, r3
 800d4be:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d4c0:	f7f2 fe3e 	bl	8000140 <__udivsi3>
 800d4c4:	0003      	movs	r3, r0
 800d4c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	0013      	movs	r3, r2
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	189b      	adds	r3, r3, r2
 800d4d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d305      	bcc.n	800d4e4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d91d      	bls.n	800d520 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800d4e4:	231a      	movs	r3, #26
 800d4e6:	2220      	movs	r2, #32
 800d4e8:	189b      	adds	r3, r3, r2
 800d4ea:	19db      	adds	r3, r3, r7
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	e12b      	b.n	800d74a <UART_SetConfig+0x546>
 800d4f2:	46c0      	nop			@ (mov r8, r8)
 800d4f4:	cfff69f3 	.word	0xcfff69f3
 800d4f8:	ffffcfff 	.word	0xffffcfff
 800d4fc:	40008000 	.word	0x40008000
 800d500:	11fff4ff 	.word	0x11fff4ff
 800d504:	40013800 	.word	0x40013800
 800d508:	40021000 	.word	0x40021000
 800d50c:	40004400 	.word	0x40004400
 800d510:	40004800 	.word	0x40004800
 800d514:	40004c00 	.word	0x40004c00
 800d518:	00f42400 	.word	0x00f42400
 800d51c:	080170f0 	.word	0x080170f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d522:	61bb      	str	r3, [r7, #24]
 800d524:	2300      	movs	r3, #0
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d52c:	4b92      	ldr	r3, [pc, #584]	@ (800d778 <UART_SetConfig+0x574>)
 800d52e:	0052      	lsls	r2, r2, #1
 800d530:	5ad3      	ldrh	r3, [r2, r3]
 800d532:	613b      	str	r3, [r7, #16]
 800d534:	2300      	movs	r3, #0
 800d536:	617b      	str	r3, [r7, #20]
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	69b8      	ldr	r0, [r7, #24]
 800d53e:	69f9      	ldr	r1, [r7, #28]
 800d540:	f7f2 ffec 	bl	800051c <__aeabi_uldivmod>
 800d544:	0002      	movs	r2, r0
 800d546:	000b      	movs	r3, r1
 800d548:	0e11      	lsrs	r1, r2, #24
 800d54a:	021d      	lsls	r5, r3, #8
 800d54c:	430d      	orrs	r5, r1
 800d54e:	0214      	lsls	r4, r2, #8
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	085b      	lsrs	r3, r3, #1
 800d556:	60bb      	str	r3, [r7, #8]
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]
 800d55c:	68b8      	ldr	r0, [r7, #8]
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	1900      	adds	r0, r0, r4
 800d562:	4169      	adcs	r1, r5
 800d564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	603b      	str	r3, [r7, #0]
 800d56a:	2300      	movs	r3, #0
 800d56c:	607b      	str	r3, [r7, #4]
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f7f2 ffd3 	bl	800051c <__aeabi_uldivmod>
 800d576:	0002      	movs	r2, r0
 800d578:	000b      	movs	r3, r1
 800d57a:	0013      	movs	r3, r2
 800d57c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d57e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d580:	23c0      	movs	r3, #192	@ 0xc0
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	429a      	cmp	r2, r3
 800d586:	d309      	bcc.n	800d59c <UART_SetConfig+0x398>
 800d588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d58a:	2380      	movs	r3, #128	@ 0x80
 800d58c:	035b      	lsls	r3, r3, #13
 800d58e:	429a      	cmp	r2, r3
 800d590:	d204      	bcs.n	800d59c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800d592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d598:	60da      	str	r2, [r3, #12]
 800d59a:	e0d6      	b.n	800d74a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800d59c:	231a      	movs	r3, #26
 800d59e:	2220      	movs	r2, #32
 800d5a0:	189b      	adds	r3, r3, r2
 800d5a2:	19db      	adds	r3, r3, r7
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	701a      	strb	r2, [r3, #0]
 800d5a8:	e0cf      	b.n	800d74a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	69da      	ldr	r2, [r3, #28]
 800d5ae:	2380      	movs	r3, #128	@ 0x80
 800d5b0:	021b      	lsls	r3, r3, #8
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d000      	beq.n	800d5b8 <UART_SetConfig+0x3b4>
 800d5b6:	e070      	b.n	800d69a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800d5b8:	231b      	movs	r3, #27
 800d5ba:	2220      	movs	r2, #32
 800d5bc:	189b      	adds	r3, r3, r2
 800d5be:	19db      	adds	r3, r3, r7
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	d015      	beq.n	800d5f2 <UART_SetConfig+0x3ee>
 800d5c6:	dc18      	bgt.n	800d5fa <UART_SetConfig+0x3f6>
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	d00d      	beq.n	800d5e8 <UART_SetConfig+0x3e4>
 800d5cc:	dc15      	bgt.n	800d5fa <UART_SetConfig+0x3f6>
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <UART_SetConfig+0x3d4>
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d005      	beq.n	800d5e2 <UART_SetConfig+0x3de>
 800d5d6:	e010      	b.n	800d5fa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5d8:	f7fd f8ee 	bl	800a7b8 <HAL_RCC_GetPCLK1Freq>
 800d5dc:	0003      	movs	r3, r0
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5e0:	e014      	b.n	800d60c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5e2:	4b66      	ldr	r3, [pc, #408]	@ (800d77c <UART_SetConfig+0x578>)
 800d5e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5e6:	e011      	b.n	800d60c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5e8:	f7fd f85a 	bl	800a6a0 <HAL_RCC_GetSysClockFreq>
 800d5ec:	0003      	movs	r3, r0
 800d5ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5f0:	e00c      	b.n	800d60c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5f2:	2380      	movs	r3, #128	@ 0x80
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5f8:	e008      	b.n	800d60c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d5fe:	231a      	movs	r3, #26
 800d600:	2220      	movs	r2, #32
 800d602:	189b      	adds	r3, r3, r2
 800d604:	19db      	adds	r3, r3, r7
 800d606:	2201      	movs	r2, #1
 800d608:	701a      	strb	r2, [r3, #0]
        break;
 800d60a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d100      	bne.n	800d614 <UART_SetConfig+0x410>
 800d612:	e09a      	b.n	800d74a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d618:	4b57      	ldr	r3, [pc, #348]	@ (800d778 <UART_SetConfig+0x574>)
 800d61a:	0052      	lsls	r2, r2, #1
 800d61c:	5ad3      	ldrh	r3, [r2, r3]
 800d61e:	0019      	movs	r1, r3
 800d620:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d622:	f7f2 fd8d 	bl	8000140 <__udivsi3>
 800d626:	0003      	movs	r3, r0
 800d628:	005a      	lsls	r2, r3, #1
 800d62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	085b      	lsrs	r3, r3, #1
 800d630:	18d2      	adds	r2, r2, r3
 800d632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	0019      	movs	r1, r3
 800d638:	0010      	movs	r0, r2
 800d63a:	f7f2 fd81 	bl	8000140 <__udivsi3>
 800d63e:	0003      	movs	r3, r0
 800d640:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	2b0f      	cmp	r3, #15
 800d646:	d921      	bls.n	800d68c <UART_SetConfig+0x488>
 800d648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d64a:	2380      	movs	r3, #128	@ 0x80
 800d64c:	025b      	lsls	r3, r3, #9
 800d64e:	429a      	cmp	r2, r3
 800d650:	d21c      	bcs.n	800d68c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d654:	b29a      	uxth	r2, r3
 800d656:	200e      	movs	r0, #14
 800d658:	2420      	movs	r4, #32
 800d65a:	1903      	adds	r3, r0, r4
 800d65c:	19db      	adds	r3, r3, r7
 800d65e:	210f      	movs	r1, #15
 800d660:	438a      	bics	r2, r1
 800d662:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	b29b      	uxth	r3, r3
 800d66a:	2207      	movs	r2, #7
 800d66c:	4013      	ands	r3, r2
 800d66e:	b299      	uxth	r1, r3
 800d670:	1903      	adds	r3, r0, r4
 800d672:	19db      	adds	r3, r3, r7
 800d674:	1902      	adds	r2, r0, r4
 800d676:	19d2      	adds	r2, r2, r7
 800d678:	8812      	ldrh	r2, [r2, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	1902      	adds	r2, r0, r4
 800d684:	19d2      	adds	r2, r2, r7
 800d686:	8812      	ldrh	r2, [r2, #0]
 800d688:	60da      	str	r2, [r3, #12]
 800d68a:	e05e      	b.n	800d74a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800d68c:	231a      	movs	r3, #26
 800d68e:	2220      	movs	r2, #32
 800d690:	189b      	adds	r3, r3, r2
 800d692:	19db      	adds	r3, r3, r7
 800d694:	2201      	movs	r2, #1
 800d696:	701a      	strb	r2, [r3, #0]
 800d698:	e057      	b.n	800d74a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d69a:	231b      	movs	r3, #27
 800d69c:	2220      	movs	r2, #32
 800d69e:	189b      	adds	r3, r3, r2
 800d6a0:	19db      	adds	r3, r3, r7
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b08      	cmp	r3, #8
 800d6a6:	d015      	beq.n	800d6d4 <UART_SetConfig+0x4d0>
 800d6a8:	dc18      	bgt.n	800d6dc <UART_SetConfig+0x4d8>
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	d00d      	beq.n	800d6ca <UART_SetConfig+0x4c6>
 800d6ae:	dc15      	bgt.n	800d6dc <UART_SetConfig+0x4d8>
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <UART_SetConfig+0x4b6>
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d005      	beq.n	800d6c4 <UART_SetConfig+0x4c0>
 800d6b8:	e010      	b.n	800d6dc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6ba:	f7fd f87d 	bl	800a7b8 <HAL_RCC_GetPCLK1Freq>
 800d6be:	0003      	movs	r3, r0
 800d6c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6c2:	e014      	b.n	800d6ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6c4:	4b2d      	ldr	r3, [pc, #180]	@ (800d77c <UART_SetConfig+0x578>)
 800d6c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6c8:	e011      	b.n	800d6ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6ca:	f7fc ffe9 	bl	800a6a0 <HAL_RCC_GetSysClockFreq>
 800d6ce:	0003      	movs	r3, r0
 800d6d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6d2:	e00c      	b.n	800d6ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6d4:	2380      	movs	r3, #128	@ 0x80
 800d6d6:	021b      	lsls	r3, r3, #8
 800d6d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6da:	e008      	b.n	800d6ee <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d6e0:	231a      	movs	r3, #26
 800d6e2:	2220      	movs	r2, #32
 800d6e4:	189b      	adds	r3, r3, r2
 800d6e6:	19db      	adds	r3, r3, r7
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	701a      	strb	r2, [r3, #0]
        break;
 800d6ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d02a      	beq.n	800d74a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6f8:	4b1f      	ldr	r3, [pc, #124]	@ (800d778 <UART_SetConfig+0x574>)
 800d6fa:	0052      	lsls	r2, r2, #1
 800d6fc:	5ad3      	ldrh	r3, [r2, r3]
 800d6fe:	0019      	movs	r1, r3
 800d700:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d702:	f7f2 fd1d 	bl	8000140 <__udivsi3>
 800d706:	0003      	movs	r3, r0
 800d708:	001a      	movs	r2, r3
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	085b      	lsrs	r3, r3, #1
 800d710:	18d2      	adds	r2, r2, r3
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	0019      	movs	r1, r3
 800d718:	0010      	movs	r0, r2
 800d71a:	f7f2 fd11 	bl	8000140 <__udivsi3>
 800d71e:	0003      	movs	r3, r0
 800d720:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	2b0f      	cmp	r3, #15
 800d726:	d90a      	bls.n	800d73e <UART_SetConfig+0x53a>
 800d728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d72a:	2380      	movs	r3, #128	@ 0x80
 800d72c:	025b      	lsls	r3, r3, #9
 800d72e:	429a      	cmp	r2, r3
 800d730:	d205      	bcs.n	800d73e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d734:	b29a      	uxth	r2, r3
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60da      	str	r2, [r3, #12]
 800d73c:	e005      	b.n	800d74a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800d73e:	231a      	movs	r3, #26
 800d740:	2220      	movs	r2, #32
 800d742:	189b      	adds	r3, r3, r2
 800d744:	19db      	adds	r3, r3, r7
 800d746:	2201      	movs	r2, #1
 800d748:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74c:	226a      	movs	r2, #106	@ 0x6a
 800d74e:	2101      	movs	r1, #1
 800d750:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d754:	2268      	movs	r2, #104	@ 0x68
 800d756:	2101      	movs	r1, #1
 800d758:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75c:	2200      	movs	r2, #0
 800d75e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d762:	2200      	movs	r2, #0
 800d764:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d766:	231a      	movs	r3, #26
 800d768:	2220      	movs	r2, #32
 800d76a:	189b      	adds	r3, r3, r2
 800d76c:	19db      	adds	r3, r3, r7
 800d76e:	781b      	ldrb	r3, [r3, #0]
}
 800d770:	0018      	movs	r0, r3
 800d772:	46bd      	mov	sp, r7
 800d774:	b010      	add	sp, #64	@ 0x40
 800d776:	bdb0      	pop	{r4, r5, r7, pc}
 800d778:	080170f0 	.word	0x080170f0
 800d77c:	00f42400 	.word	0x00f42400

0800d780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d78c:	2208      	movs	r2, #8
 800d78e:	4013      	ands	r3, r2
 800d790:	d00b      	beq.n	800d7aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	4a4a      	ldr	r2, [pc, #296]	@ (800d8c4 <UART_AdvFeatureConfig+0x144>)
 800d79a:	4013      	ands	r3, r2
 800d79c:	0019      	movs	r1, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	430a      	orrs	r2, r1
 800d7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	d00b      	beq.n	800d7cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	4a43      	ldr	r2, [pc, #268]	@ (800d8c8 <UART_AdvFeatureConfig+0x148>)
 800d7bc:	4013      	ands	r3, r2
 800d7be:	0019      	movs	r1, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	430a      	orrs	r2, r1
 800d7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d0:	2202      	movs	r2, #2
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	d00b      	beq.n	800d7ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4a3b      	ldr	r2, [pc, #236]	@ (800d8cc <UART_AdvFeatureConfig+0x14c>)
 800d7de:	4013      	ands	r3, r2
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f2:	2204      	movs	r2, #4
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	d00b      	beq.n	800d810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	4a34      	ldr	r2, [pc, #208]	@ (800d8d0 <UART_AdvFeatureConfig+0x150>)
 800d800:	4013      	ands	r3, r2
 800d802:	0019      	movs	r1, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d814:	2210      	movs	r2, #16
 800d816:	4013      	ands	r3, r2
 800d818:	d00b      	beq.n	800d832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	4a2c      	ldr	r2, [pc, #176]	@ (800d8d4 <UART_AdvFeatureConfig+0x154>)
 800d822:	4013      	ands	r3, r2
 800d824:	0019      	movs	r1, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	430a      	orrs	r2, r1
 800d830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d836:	2220      	movs	r2, #32
 800d838:	4013      	ands	r3, r2
 800d83a:	d00b      	beq.n	800d854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4a25      	ldr	r2, [pc, #148]	@ (800d8d8 <UART_AdvFeatureConfig+0x158>)
 800d844:	4013      	ands	r3, r2
 800d846:	0019      	movs	r1, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d858:	2240      	movs	r2, #64	@ 0x40
 800d85a:	4013      	ands	r3, r2
 800d85c:	d01d      	beq.n	800d89a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	4a1d      	ldr	r2, [pc, #116]	@ (800d8dc <UART_AdvFeatureConfig+0x15c>)
 800d866:	4013      	ands	r3, r2
 800d868:	0019      	movs	r1, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	430a      	orrs	r2, r1
 800d874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d87a:	2380      	movs	r3, #128	@ 0x80
 800d87c:	035b      	lsls	r3, r3, #13
 800d87e:	429a      	cmp	r2, r3
 800d880:	d10b      	bne.n	800d89a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	4a15      	ldr	r2, [pc, #84]	@ (800d8e0 <UART_AdvFeatureConfig+0x160>)
 800d88a:	4013      	ands	r3, r2
 800d88c:	0019      	movs	r1, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	430a      	orrs	r2, r1
 800d898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d89e:	2280      	movs	r2, #128	@ 0x80
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	d00b      	beq.n	800d8bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	4a0e      	ldr	r2, [pc, #56]	@ (800d8e4 <UART_AdvFeatureConfig+0x164>)
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	0019      	movs	r1, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	430a      	orrs	r2, r1
 800d8ba:	605a      	str	r2, [r3, #4]
  }
}
 800d8bc:	46c0      	nop			@ (mov r8, r8)
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	b002      	add	sp, #8
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	ffff7fff 	.word	0xffff7fff
 800d8c8:	fffdffff 	.word	0xfffdffff
 800d8cc:	fffeffff 	.word	0xfffeffff
 800d8d0:	fffbffff 	.word	0xfffbffff
 800d8d4:	ffffefff 	.word	0xffffefff
 800d8d8:	ffffdfff 	.word	0xffffdfff
 800d8dc:	ffefffff 	.word	0xffefffff
 800d8e0:	ff9fffff 	.word	0xff9fffff
 800d8e4:	fff7ffff 	.word	0xfff7ffff

0800d8e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b092      	sub	sp, #72	@ 0x48
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2290      	movs	r2, #144	@ 0x90
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8f8:	f7fa faa6 	bl	8007e48 <HAL_GetTick>
 800d8fc:	0003      	movs	r3, r0
 800d8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2208      	movs	r2, #8
 800d908:	4013      	ands	r3, r2
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	d12d      	bne.n	800d96a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d910:	2280      	movs	r2, #128	@ 0x80
 800d912:	0391      	lsls	r1, r2, #14
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	4a47      	ldr	r2, [pc, #284]	@ (800da34 <UART_CheckIdleState+0x14c>)
 800d918:	9200      	str	r2, [sp, #0]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f000 f88e 	bl	800da3c <UART_WaitOnFlagUntilTimeout>
 800d920:	1e03      	subs	r3, r0, #0
 800d922:	d022      	beq.n	800d96a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d924:	f3ef 8310 	mrs	r3, PRIMASK
 800d928:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d92c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d92e:	2301      	movs	r3, #1
 800d930:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d934:	f383 8810 	msr	PRIMASK, r3
}
 800d938:	46c0      	nop			@ (mov r8, r8)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2180      	movs	r1, #128	@ 0x80
 800d946:	438a      	bics	r2, r1
 800d948:	601a      	str	r2, [r3, #0]
 800d94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d950:	f383 8810 	msr	PRIMASK, r3
}
 800d954:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2288      	movs	r2, #136	@ 0x88
 800d95a:	2120      	movs	r1, #32
 800d95c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2284      	movs	r2, #132	@ 0x84
 800d962:	2100      	movs	r1, #0
 800d964:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d966:	2303      	movs	r3, #3
 800d968:	e060      	b.n	800da2c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2204      	movs	r2, #4
 800d972:	4013      	ands	r3, r2
 800d974:	2b04      	cmp	r3, #4
 800d976:	d146      	bne.n	800da06 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d97a:	2280      	movs	r2, #128	@ 0x80
 800d97c:	03d1      	lsls	r1, r2, #15
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	4a2c      	ldr	r2, [pc, #176]	@ (800da34 <UART_CheckIdleState+0x14c>)
 800d982:	9200      	str	r2, [sp, #0]
 800d984:	2200      	movs	r2, #0
 800d986:	f000 f859 	bl	800da3c <UART_WaitOnFlagUntilTimeout>
 800d98a:	1e03      	subs	r3, r0, #0
 800d98c:	d03b      	beq.n	800da06 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d98e:	f3ef 8310 	mrs	r3, PRIMASK
 800d992:	60fb      	str	r3, [r7, #12]
  return(result);
 800d994:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d996:	637b      	str	r3, [r7, #52]	@ 0x34
 800d998:	2301      	movs	r3, #1
 800d99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f383 8810 	msr	PRIMASK, r3
}
 800d9a2:	46c0      	nop			@ (mov r8, r8)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4922      	ldr	r1, [pc, #136]	@ (800da38 <UART_CheckIdleState+0x150>)
 800d9b0:	400a      	ands	r2, r1
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f383 8810 	msr	PRIMASK, r3
}
 800d9be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	f383 8810 	msr	PRIMASK, r3
}
 800d9d4:	46c0      	nop			@ (mov r8, r8)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	689a      	ldr	r2, [r3, #8]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	438a      	bics	r2, r1
 800d9e4:	609a      	str	r2, [r3, #8]
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	f383 8810 	msr	PRIMASK, r3
}
 800d9f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	228c      	movs	r2, #140	@ 0x8c
 800d9f6:	2120      	movs	r1, #32
 800d9f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2284      	movs	r2, #132	@ 0x84
 800d9fe:	2100      	movs	r1, #0
 800da00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da02:	2303      	movs	r3, #3
 800da04:	e012      	b.n	800da2c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2288      	movs	r2, #136	@ 0x88
 800da0a:	2120      	movs	r1, #32
 800da0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	228c      	movs	r2, #140	@ 0x8c
 800da12:	2120      	movs	r1, #32
 800da14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2284      	movs	r2, #132	@ 0x84
 800da26:	2100      	movs	r1, #0
 800da28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	0018      	movs	r0, r3
 800da2e:	46bd      	mov	sp, r7
 800da30:	b010      	add	sp, #64	@ 0x40
 800da32:	bd80      	pop	{r7, pc}
 800da34:	01ffffff 	.word	0x01ffffff
 800da38:	fffffedf 	.word	0xfffffedf

0800da3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	1dfb      	adds	r3, r7, #7
 800da4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da4c:	e051      	b.n	800daf2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	3301      	adds	r3, #1
 800da52:	d04e      	beq.n	800daf2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da54:	f7fa f9f8 	bl	8007e48 <HAL_GetTick>
 800da58:	0002      	movs	r2, r0
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	69ba      	ldr	r2, [r7, #24]
 800da60:	429a      	cmp	r2, r3
 800da62:	d302      	bcc.n	800da6a <UART_WaitOnFlagUntilTimeout+0x2e>
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d101      	bne.n	800da6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e051      	b.n	800db12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2204      	movs	r2, #4
 800da76:	4013      	ands	r3, r2
 800da78:	d03b      	beq.n	800daf2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2b80      	cmp	r3, #128	@ 0x80
 800da7e:	d038      	beq.n	800daf2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b40      	cmp	r3, #64	@ 0x40
 800da84:	d035      	beq.n	800daf2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	2208      	movs	r2, #8
 800da8e:	4013      	ands	r3, r2
 800da90:	2b08      	cmp	r3, #8
 800da92:	d111      	bne.n	800dab8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2208      	movs	r2, #8
 800da9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	0018      	movs	r0, r3
 800daa0:	f000 f960 	bl	800dd64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2290      	movs	r2, #144	@ 0x90
 800daa8:	2108      	movs	r1, #8
 800daaa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2284      	movs	r2, #132	@ 0x84
 800dab0:	2100      	movs	r1, #0
 800dab2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	e02c      	b.n	800db12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	69da      	ldr	r2, [r3, #28]
 800dabe:	2380      	movs	r3, #128	@ 0x80
 800dac0:	011b      	lsls	r3, r3, #4
 800dac2:	401a      	ands	r2, r3
 800dac4:	2380      	movs	r3, #128	@ 0x80
 800dac6:	011b      	lsls	r3, r3, #4
 800dac8:	429a      	cmp	r2, r3
 800daca:	d112      	bne.n	800daf2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2280      	movs	r2, #128	@ 0x80
 800dad2:	0112      	lsls	r2, r2, #4
 800dad4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	0018      	movs	r0, r3
 800dada:	f000 f943 	bl	800dd64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2290      	movs	r2, #144	@ 0x90
 800dae2:	2120      	movs	r1, #32
 800dae4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2284      	movs	r2, #132	@ 0x84
 800daea:	2100      	movs	r1, #0
 800daec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e00f      	b.n	800db12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	69db      	ldr	r3, [r3, #28]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	4013      	ands	r3, r2
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	425a      	negs	r2, r3
 800db02:	4153      	adcs	r3, r2
 800db04:	b2db      	uxtb	r3, r3
 800db06:	001a      	movs	r2, r3
 800db08:	1dfb      	adds	r3, r7, #7
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d09e      	beq.n	800da4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	0018      	movs	r0, r3
 800db14:	46bd      	mov	sp, r7
 800db16:	b004      	add	sp, #16
 800db18:	bd80      	pop	{r7, pc}
	...

0800db1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b098      	sub	sp, #96	@ 0x60
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	1dbb      	adds	r3, r7, #6
 800db28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	1dba      	adds	r2, r7, #6
 800db34:	215c      	movs	r1, #92	@ 0x5c
 800db36:	8812      	ldrh	r2, [r2, #0]
 800db38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1dba      	adds	r2, r7, #6
 800db3e:	215e      	movs	r1, #94	@ 0x5e
 800db40:	8812      	ldrh	r2, [r2, #0]
 800db42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	689a      	ldr	r2, [r3, #8]
 800db4e:	2380      	movs	r3, #128	@ 0x80
 800db50:	015b      	lsls	r3, r3, #5
 800db52:	429a      	cmp	r2, r3
 800db54:	d10d      	bne.n	800db72 <UART_Start_Receive_IT+0x56>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d104      	bne.n	800db68 <UART_Start_Receive_IT+0x4c>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2260      	movs	r2, #96	@ 0x60
 800db62:	497b      	ldr	r1, [pc, #492]	@ (800dd50 <UART_Start_Receive_IT+0x234>)
 800db64:	5299      	strh	r1, [r3, r2]
 800db66:	e02e      	b.n	800dbc6 <UART_Start_Receive_IT+0xaa>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2260      	movs	r2, #96	@ 0x60
 800db6c:	21ff      	movs	r1, #255	@ 0xff
 800db6e:	5299      	strh	r1, [r3, r2]
 800db70:	e029      	b.n	800dbc6 <UART_Start_Receive_IT+0xaa>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10d      	bne.n	800db96 <UART_Start_Receive_IT+0x7a>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d104      	bne.n	800db8c <UART_Start_Receive_IT+0x70>
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2260      	movs	r2, #96	@ 0x60
 800db86:	21ff      	movs	r1, #255	@ 0xff
 800db88:	5299      	strh	r1, [r3, r2]
 800db8a:	e01c      	b.n	800dbc6 <UART_Start_Receive_IT+0xaa>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2260      	movs	r2, #96	@ 0x60
 800db90:	217f      	movs	r1, #127	@ 0x7f
 800db92:	5299      	strh	r1, [r3, r2]
 800db94:	e017      	b.n	800dbc6 <UART_Start_Receive_IT+0xaa>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	689a      	ldr	r2, [r3, #8]
 800db9a:	2380      	movs	r3, #128	@ 0x80
 800db9c:	055b      	lsls	r3, r3, #21
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d10d      	bne.n	800dbbe <UART_Start_Receive_IT+0xa2>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	691b      	ldr	r3, [r3, #16]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d104      	bne.n	800dbb4 <UART_Start_Receive_IT+0x98>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2260      	movs	r2, #96	@ 0x60
 800dbae:	217f      	movs	r1, #127	@ 0x7f
 800dbb0:	5299      	strh	r1, [r3, r2]
 800dbb2:	e008      	b.n	800dbc6 <UART_Start_Receive_IT+0xaa>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2260      	movs	r2, #96	@ 0x60
 800dbb8:	213f      	movs	r1, #63	@ 0x3f
 800dbba:	5299      	strh	r1, [r3, r2]
 800dbbc:	e003      	b.n	800dbc6 <UART_Start_Receive_IT+0xaa>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2260      	movs	r2, #96	@ 0x60
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2290      	movs	r2, #144	@ 0x90
 800dbca:	2100      	movs	r1, #0
 800dbcc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	228c      	movs	r2, #140	@ 0x8c
 800dbd2:	2122      	movs	r1, #34	@ 0x22
 800dbd4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbd6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbda:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800dbdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbe6:	f383 8810 	msr	PRIMASK, r3
}
 800dbea:	46c0      	nop			@ (mov r8, r8)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	689a      	ldr	r2, [r3, #8]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2101      	movs	r1, #1
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	609a      	str	r2, [r3, #8]
 800dbfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc02:	f383 8810 	msr	PRIMASK, r3
}
 800dc06:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dc0c:	2380      	movs	r3, #128	@ 0x80
 800dc0e:	059b      	lsls	r3, r3, #22
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d150      	bne.n	800dcb6 <UART_Start_Receive_IT+0x19a>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2268      	movs	r2, #104	@ 0x68
 800dc18:	5a9b      	ldrh	r3, [r3, r2]
 800dc1a:	1dba      	adds	r2, r7, #6
 800dc1c:	8812      	ldrh	r2, [r2, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d349      	bcc.n	800dcb6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	689a      	ldr	r2, [r3, #8]
 800dc26:	2380      	movs	r3, #128	@ 0x80
 800dc28:	015b      	lsls	r3, r3, #5
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d107      	bne.n	800dc3e <UART_Start_Receive_IT+0x122>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d103      	bne.n	800dc3e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	4a46      	ldr	r2, [pc, #280]	@ (800dd54 <UART_Start_Receive_IT+0x238>)
 800dc3a:	675a      	str	r2, [r3, #116]	@ 0x74
 800dc3c:	e002      	b.n	800dc44 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	4a45      	ldr	r2, [pc, #276]	@ (800dd58 <UART_Start_Receive_IT+0x23c>)
 800dc42:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d019      	beq.n	800dc80 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc50:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800dc52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc54:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc56:	2301      	movs	r3, #1
 800dc58:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5c:	f383 8810 	msr	PRIMASK, r3
}
 800dc60:	46c0      	nop			@ (mov r8, r8)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2180      	movs	r1, #128	@ 0x80
 800dc6e:	0049      	lsls	r1, r1, #1
 800dc70:	430a      	orrs	r2, r1
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc7a:	f383 8810 	msr	PRIMASK, r3
}
 800dc7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc80:	f3ef 8310 	mrs	r3, PRIMASK
 800dc84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800dc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc88:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc90:	f383 8810 	msr	PRIMASK, r3
}
 800dc94:	46c0      	nop			@ (mov r8, r8)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689a      	ldr	r2, [r3, #8]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2180      	movs	r1, #128	@ 0x80
 800dca2:	0549      	lsls	r1, r1, #21
 800dca4:	430a      	orrs	r2, r1
 800dca6:	609a      	str	r2, [r3, #8]
 800dca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcaa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcae:	f383 8810 	msr	PRIMASK, r3
}
 800dcb2:	46c0      	nop			@ (mov r8, r8)
 800dcb4:	e047      	b.n	800dd46 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	689a      	ldr	r2, [r3, #8]
 800dcba:	2380      	movs	r3, #128	@ 0x80
 800dcbc:	015b      	lsls	r3, r3, #5
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d107      	bne.n	800dcd2 <UART_Start_Receive_IT+0x1b6>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d103      	bne.n	800dcd2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	4a23      	ldr	r2, [pc, #140]	@ (800dd5c <UART_Start_Receive_IT+0x240>)
 800dcce:	675a      	str	r2, [r3, #116]	@ 0x74
 800dcd0:	e002      	b.n	800dcd8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	4a22      	ldr	r2, [pc, #136]	@ (800dd60 <UART_Start_Receive_IT+0x244>)
 800dcd6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d019      	beq.n	800dd14 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce0:	f3ef 8310 	mrs	r3, PRIMASK
 800dce4:	61fb      	str	r3, [r7, #28]
  return(result);
 800dce6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcea:	2301      	movs	r3, #1
 800dcec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	f383 8810 	msr	PRIMASK, r3
}
 800dcf4:	46c0      	nop			@ (mov r8, r8)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2190      	movs	r1, #144	@ 0x90
 800dd02:	0049      	lsls	r1, r1, #1
 800dd04:	430a      	orrs	r2, r1
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0e:	f383 8810 	msr	PRIMASK, r3
}
 800dd12:	e018      	b.n	800dd46 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd14:	f3ef 8310 	mrs	r3, PRIMASK
 800dd18:	613b      	str	r3, [r7, #16]
  return(result);
 800dd1a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dd1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd1e:	2301      	movs	r3, #1
 800dd20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f383 8810 	msr	PRIMASK, r3
}
 800dd28:	46c0      	nop			@ (mov r8, r8)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2120      	movs	r1, #32
 800dd36:	430a      	orrs	r2, r1
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	f383 8810 	msr	PRIMASK, r3
}
 800dd44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	0018      	movs	r0, r3
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	b018      	add	sp, #96	@ 0x60
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	000001ff 	.word	0x000001ff
 800dd54:	0800e8d1 	.word	0x0800e8d1
 800dd58:	0800e591 	.word	0x0800e591
 800dd5c:	0800e3cd 	.word	0x0800e3cd
 800dd60:	0800e209 	.word	0x0800e209

0800dd64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08e      	sub	sp, #56	@ 0x38
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd6c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd70:	617b      	str	r3, [r7, #20]
  return(result);
 800dd72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd74:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd76:	2301      	movs	r3, #1
 800dd78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	f383 8810 	msr	PRIMASK, r3
}
 800dd80:	46c0      	nop			@ (mov r8, r8)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4926      	ldr	r1, [pc, #152]	@ (800de28 <UART_EndRxTransfer+0xc4>)
 800dd8e:	400a      	ands	r2, r1
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	f383 8810 	msr	PRIMASK, r3
}
 800dd9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd9e:	f3ef 8310 	mrs	r3, PRIMASK
 800dda2:	623b      	str	r3, [r7, #32]
  return(result);
 800dda4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dda6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dda8:	2301      	movs	r3, #1
 800ddaa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddae:	f383 8810 	msr	PRIMASK, r3
}
 800ddb2:	46c0      	nop			@ (mov r8, r8)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	491b      	ldr	r1, [pc, #108]	@ (800de2c <UART_EndRxTransfer+0xc8>)
 800ddc0:	400a      	ands	r2, r1
 800ddc2:	609a      	str	r2, [r3, #8]
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddca:	f383 8810 	msr	PRIMASK, r3
}
 800ddce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d118      	bne.n	800de0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddd8:	f3ef 8310 	mrs	r3, PRIMASK
 800dddc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dde0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dde2:	2301      	movs	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f383 8810 	msr	PRIMASK, r3
}
 800ddec:	46c0      	nop			@ (mov r8, r8)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2110      	movs	r1, #16
 800ddfa:	438a      	bics	r2, r1
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	f383 8810 	msr	PRIMASK, r3
}
 800de08:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	228c      	movs	r2, #140	@ 0x8c
 800de0e:	2120      	movs	r1, #32
 800de10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800de1e:	46c0      	nop			@ (mov r8, r8)
 800de20:	46bd      	mov	sp, r7
 800de22:	b00e      	add	sp, #56	@ 0x38
 800de24:	bd80      	pop	{r7, pc}
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	fffffedf 	.word	0xfffffedf
 800de2c:	effffffe 	.word	0xeffffffe

0800de30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	225e      	movs	r2, #94	@ 0x5e
 800de42:	2100      	movs	r1, #0
 800de44:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2256      	movs	r2, #86	@ 0x56
 800de4a:	2100      	movs	r1, #0
 800de4c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	0018      	movs	r0, r3
 800de52:	f7ff f9c3 	bl	800d1dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de56:	46c0      	nop			@ (mov r8, r8)
 800de58:	46bd      	mov	sp, r7
 800de5a:	b004      	add	sp, #16
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b08a      	sub	sp, #40	@ 0x28
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2288      	movs	r2, #136	@ 0x88
 800de6a:	589b      	ldr	r3, [r3, r2]
 800de6c:	2b21      	cmp	r3, #33	@ 0x21
 800de6e:	d14c      	bne.n	800df0a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2256      	movs	r2, #86	@ 0x56
 800de74:	5a9b      	ldrh	r3, [r3, r2]
 800de76:	b29b      	uxth	r3, r3
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d132      	bne.n	800dee2 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de7c:	f3ef 8310 	mrs	r3, PRIMASK
 800de80:	60bb      	str	r3, [r7, #8]
  return(result);
 800de82:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800de84:	627b      	str	r3, [r7, #36]	@ 0x24
 800de86:	2301      	movs	r3, #1
 800de88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f383 8810 	msr	PRIMASK, r3
}
 800de90:	46c0      	nop			@ (mov r8, r8)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2180      	movs	r1, #128	@ 0x80
 800de9e:	438a      	bics	r2, r1
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	f383 8810 	msr	PRIMASK, r3
}
 800deac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deae:	f3ef 8310 	mrs	r3, PRIMASK
 800deb2:	617b      	str	r3, [r7, #20]
  return(result);
 800deb4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800deb6:	623b      	str	r3, [r7, #32]
 800deb8:	2301      	movs	r3, #1
 800deba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	f383 8810 	msr	PRIMASK, r3
}
 800dec2:	46c0      	nop			@ (mov r8, r8)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2140      	movs	r1, #64	@ 0x40
 800ded0:	430a      	orrs	r2, r1
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	f383 8810 	msr	PRIMASK, r3
}
 800dede:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dee0:	e013      	b.n	800df0a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dee6:	781a      	ldrb	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2256      	movs	r2, #86	@ 0x56
 800defc:	5a9b      	ldrh	r3, [r3, r2]
 800defe:	b29b      	uxth	r3, r3
 800df00:	3b01      	subs	r3, #1
 800df02:	b299      	uxth	r1, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2256      	movs	r2, #86	@ 0x56
 800df08:	5299      	strh	r1, [r3, r2]
}
 800df0a:	46c0      	nop			@ (mov r8, r8)
 800df0c:	46bd      	mov	sp, r7
 800df0e:	b00a      	add	sp, #40	@ 0x28
 800df10:	bd80      	pop	{r7, pc}

0800df12 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b08c      	sub	sp, #48	@ 0x30
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2288      	movs	r2, #136	@ 0x88
 800df1e:	589b      	ldr	r3, [r3, r2]
 800df20:	2b21      	cmp	r3, #33	@ 0x21
 800df22:	d151      	bne.n	800dfc8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2256      	movs	r2, #86	@ 0x56
 800df28:	5a9b      	ldrh	r3, [r3, r2]
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d132      	bne.n	800df96 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df30:	f3ef 8310 	mrs	r3, PRIMASK
 800df34:	60fb      	str	r3, [r7, #12]
  return(result);
 800df36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800df38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df3a:	2301      	movs	r3, #1
 800df3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	f383 8810 	msr	PRIMASK, r3
}
 800df44:	46c0      	nop			@ (mov r8, r8)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2180      	movs	r1, #128	@ 0x80
 800df52:	438a      	bics	r2, r1
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	f383 8810 	msr	PRIMASK, r3
}
 800df60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df62:	f3ef 8310 	mrs	r3, PRIMASK
 800df66:	61bb      	str	r3, [r7, #24]
  return(result);
 800df68:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800df6c:	2301      	movs	r3, #1
 800df6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	f383 8810 	msr	PRIMASK, r3
}
 800df76:	46c0      	nop			@ (mov r8, r8)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2140      	movs	r1, #64	@ 0x40
 800df84:	430a      	orrs	r2, r1
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	f383 8810 	msr	PRIMASK, r3
}
 800df92:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800df94:	e018      	b.n	800dfc8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800df9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	001a      	movs	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	05d2      	lsls	r2, r2, #23
 800dfa8:	0dd2      	lsrs	r2, r2, #23
 800dfaa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfb0:	1c9a      	adds	r2, r3, #2
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2256      	movs	r2, #86	@ 0x56
 800dfba:	5a9b      	ldrh	r3, [r3, r2]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	b299      	uxth	r1, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2256      	movs	r2, #86	@ 0x56
 800dfc6:	5299      	strh	r1, [r3, r2]
}
 800dfc8:	46c0      	nop			@ (mov r8, r8)
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	b00c      	add	sp, #48	@ 0x30
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08c      	sub	sp, #48	@ 0x30
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2288      	movs	r2, #136	@ 0x88
 800dfdc:	589b      	ldr	r3, [r3, r2]
 800dfde:	2b21      	cmp	r3, #33	@ 0x21
 800dfe0:	d165      	bne.n	800e0ae <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dfe2:	232e      	movs	r3, #46	@ 0x2e
 800dfe4:	18fb      	adds	r3, r7, r3
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	216a      	movs	r1, #106	@ 0x6a
 800dfea:	5a52      	ldrh	r2, [r2, r1]
 800dfec:	801a      	strh	r2, [r3, #0]
 800dfee:	e059      	b.n	800e0a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2256      	movs	r2, #86	@ 0x56
 800dff4:	5a9b      	ldrh	r3, [r3, r2]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d133      	bne.n	800e064 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dffc:	f3ef 8310 	mrs	r3, PRIMASK
 800e000:	60fb      	str	r3, [r7, #12]
  return(result);
 800e002:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e004:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e006:	2301      	movs	r3, #1
 800e008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	f383 8810 	msr	PRIMASK, r3
}
 800e010:	46c0      	nop			@ (mov r8, r8)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	689a      	ldr	r2, [r3, #8]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4926      	ldr	r1, [pc, #152]	@ (800e0b8 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800e01e:	400a      	ands	r2, r1
 800e020:	609a      	str	r2, [r3, #8]
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f383 8810 	msr	PRIMASK, r3
}
 800e02c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e02e:	f3ef 8310 	mrs	r3, PRIMASK
 800e032:	61bb      	str	r3, [r7, #24]
  return(result);
 800e034:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e036:	627b      	str	r3, [r7, #36]	@ 0x24
 800e038:	2301      	movs	r3, #1
 800e03a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	f383 8810 	msr	PRIMASK, r3
}
 800e042:	46c0      	nop			@ (mov r8, r8)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2140      	movs	r1, #64	@ 0x40
 800e050:	430a      	orrs	r2, r1
 800e052:	601a      	str	r2, [r3, #0]
 800e054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e056:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e058:	6a3b      	ldr	r3, [r7, #32]
 800e05a:	f383 8810 	msr	PRIMASK, r3
}
 800e05e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800e060:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800e062:	e024      	b.n	800e0ae <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	69db      	ldr	r3, [r3, #28]
 800e06a:	2280      	movs	r2, #128	@ 0x80
 800e06c:	4013      	ands	r3, r2
 800e06e:	d013      	beq.n	800e098 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e074:	781a      	ldrb	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e080:	1c5a      	adds	r2, r3, #1
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2256      	movs	r2, #86	@ 0x56
 800e08a:	5a9b      	ldrh	r3, [r3, r2]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	3b01      	subs	r3, #1
 800e090:	b299      	uxth	r1, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2256      	movs	r2, #86	@ 0x56
 800e096:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e098:	212e      	movs	r1, #46	@ 0x2e
 800e09a:	187b      	adds	r3, r7, r1
 800e09c:	881a      	ldrh	r2, [r3, #0]
 800e09e:	187b      	adds	r3, r7, r1
 800e0a0:	3a01      	subs	r2, #1
 800e0a2:	801a      	strh	r2, [r3, #0]
 800e0a4:	232e      	movs	r3, #46	@ 0x2e
 800e0a6:	18fb      	adds	r3, r7, r3
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1a0      	bne.n	800dff0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800e0ae:	46c0      	nop			@ (mov r8, r8)
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	b00c      	add	sp, #48	@ 0x30
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	46c0      	nop			@ (mov r8, r8)
 800e0b8:	ff7fffff 	.word	0xff7fffff

0800e0bc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08c      	sub	sp, #48	@ 0x30
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2288      	movs	r2, #136	@ 0x88
 800e0c8:	589b      	ldr	r3, [r3, r2]
 800e0ca:	2b21      	cmp	r3, #33	@ 0x21
 800e0cc:	d16a      	bne.n	800e1a4 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e0ce:	232e      	movs	r3, #46	@ 0x2e
 800e0d0:	18fb      	adds	r3, r7, r3
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	216a      	movs	r1, #106	@ 0x6a
 800e0d6:	5a52      	ldrh	r2, [r2, r1]
 800e0d8:	801a      	strh	r2, [r3, #0]
 800e0da:	e05e      	b.n	800e19a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2256      	movs	r2, #86	@ 0x56
 800e0e0:	5a9b      	ldrh	r3, [r3, r2]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d133      	bne.n	800e150 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e8:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0ee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e0f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f383 8810 	msr	PRIMASK, r3
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689a      	ldr	r2, [r3, #8]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4928      	ldr	r1, [pc, #160]	@ (800e1ac <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800e10a:	400a      	ands	r2, r1
 800e10c:	609a      	str	r2, [r3, #8]
 800e10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	f383 8810 	msr	PRIMASK, r3
}
 800e118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e11a:	f3ef 8310 	mrs	r3, PRIMASK
 800e11e:	617b      	str	r3, [r7, #20]
  return(result);
 800e120:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e122:	623b      	str	r3, [r7, #32]
 800e124:	2301      	movs	r3, #1
 800e126:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	f383 8810 	msr	PRIMASK, r3
}
 800e12e:	46c0      	nop			@ (mov r8, r8)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2140      	movs	r1, #64	@ 0x40
 800e13c:	430a      	orrs	r2, r1
 800e13e:	601a      	str	r2, [r3, #0]
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	f383 8810 	msr	PRIMASK, r3
}
 800e14a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800e14c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800e14e:	e029      	b.n	800e1a4 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	2280      	movs	r2, #128	@ 0x80
 800e158:	4013      	ands	r3, r2
 800e15a:	d018      	beq.n	800e18e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e160:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	001a      	movs	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	05d2      	lsls	r2, r2, #23
 800e16e:	0dd2      	lsrs	r2, r2, #23
 800e170:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e176:	1c9a      	adds	r2, r3, #2
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2256      	movs	r2, #86	@ 0x56
 800e180:	5a9b      	ldrh	r3, [r3, r2]
 800e182:	b29b      	uxth	r3, r3
 800e184:	3b01      	subs	r3, #1
 800e186:	b299      	uxth	r1, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2256      	movs	r2, #86	@ 0x56
 800e18c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e18e:	212e      	movs	r1, #46	@ 0x2e
 800e190:	187b      	adds	r3, r7, r1
 800e192:	881a      	ldrh	r2, [r3, #0]
 800e194:	187b      	adds	r3, r7, r1
 800e196:	3a01      	subs	r2, #1
 800e198:	801a      	strh	r2, [r3, #0]
 800e19a:	232e      	movs	r3, #46	@ 0x2e
 800e19c:	18fb      	adds	r3, r7, r3
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d19b      	bne.n	800e0dc <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800e1a4:	46c0      	nop			@ (mov r8, r8)
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	b00c      	add	sp, #48	@ 0x30
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	ff7fffff 	.word	0xff7fffff

0800e1b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b086      	sub	sp, #24
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1be:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1c0:	617b      	str	r3, [r7, #20]
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f383 8810 	msr	PRIMASK, r3
}
 800e1cc:	46c0      	nop			@ (mov r8, r8)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2140      	movs	r1, #64	@ 0x40
 800e1da:	438a      	bics	r2, r1
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	f383 8810 	msr	PRIMASK, r3
}
 800e1e8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2288      	movs	r2, #136	@ 0x88
 800e1ee:	2120      	movs	r1, #32
 800e1f0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	0018      	movs	r0, r3
 800e1fc:	f7f6 fe8a 	bl	8004f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e200:	46c0      	nop			@ (mov r8, r8)
 800e202:	46bd      	mov	sp, r7
 800e204:	b006      	add	sp, #24
 800e206:	bd80      	pop	{r7, pc}

0800e208 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b094      	sub	sp, #80	@ 0x50
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e210:	204e      	movs	r0, #78	@ 0x4e
 800e212:	183b      	adds	r3, r7, r0
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	2160      	movs	r1, #96	@ 0x60
 800e218:	5a52      	ldrh	r2, [r2, r1]
 800e21a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	228c      	movs	r2, #140	@ 0x8c
 800e220:	589b      	ldr	r3, [r3, r2]
 800e222:	2b22      	cmp	r3, #34	@ 0x22
 800e224:	d000      	beq.n	800e228 <UART_RxISR_8BIT+0x20>
 800e226:	e0bf      	b.n	800e3a8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e22e:	214c      	movs	r1, #76	@ 0x4c
 800e230:	187b      	adds	r3, r7, r1
 800e232:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e234:	187b      	adds	r3, r7, r1
 800e236:	881b      	ldrh	r3, [r3, #0]
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	183b      	adds	r3, r7, r0
 800e23c:	881b      	ldrh	r3, [r3, #0]
 800e23e:	b2d9      	uxtb	r1, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e244:	400a      	ands	r2, r1
 800e246:	b2d2      	uxtb	r2, r2
 800e248:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	225e      	movs	r2, #94	@ 0x5e
 800e258:	5a9b      	ldrh	r3, [r3, r2]
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	3b01      	subs	r3, #1
 800e25e:	b299      	uxth	r1, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	225e      	movs	r2, #94	@ 0x5e
 800e264:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	225e      	movs	r2, #94	@ 0x5e
 800e26a:	5a9b      	ldrh	r3, [r3, r2]
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d000      	beq.n	800e274 <UART_RxISR_8BIT+0x6c>
 800e272:	e0a1      	b.n	800e3b8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e274:	f3ef 8310 	mrs	r3, PRIMASK
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e27c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e27e:	2301      	movs	r3, #1
 800e280:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e284:	f383 8810 	msr	PRIMASK, r3
}
 800e288:	46c0      	nop			@ (mov r8, r8)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	494a      	ldr	r1, [pc, #296]	@ (800e3c0 <UART_RxISR_8BIT+0x1b8>)
 800e296:	400a      	ands	r2, r1
 800e298:	601a      	str	r2, [r3, #0]
 800e29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a0:	f383 8810 	msr	PRIMASK, r3
}
 800e2a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e2aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2b6:	f383 8810 	msr	PRIMASK, r3
}
 800e2ba:	46c0      	nop			@ (mov r8, r8)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	689a      	ldr	r2, [r3, #8]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	438a      	bics	r2, r1
 800e2ca:	609a      	str	r2, [r3, #8]
 800e2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d2:	f383 8810 	msr	PRIMASK, r3
}
 800e2d6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	228c      	movs	r2, #140	@ 0x8c
 800e2dc:	2120      	movs	r1, #32
 800e2de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a34      	ldr	r2, [pc, #208]	@ (800e3c4 <UART_RxISR_8BIT+0x1bc>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d01f      	beq.n	800e336 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	2380      	movs	r3, #128	@ 0x80
 800e2fe:	041b      	lsls	r3, r3, #16
 800e300:	4013      	ands	r3, r2
 800e302:	d018      	beq.n	800e336 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e304:	f3ef 8310 	mrs	r3, PRIMASK
 800e308:	61bb      	str	r3, [r7, #24]
  return(result);
 800e30a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e30c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e30e:	2301      	movs	r3, #1
 800e310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	f383 8810 	msr	PRIMASK, r3
}
 800e318:	46c0      	nop			@ (mov r8, r8)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4928      	ldr	r1, [pc, #160]	@ (800e3c8 <UART_RxISR_8BIT+0x1c0>)
 800e326:	400a      	ands	r2, r1
 800e328:	601a      	str	r2, [r3, #0]
 800e32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e32c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	f383 8810 	msr	PRIMASK, r3
}
 800e334:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d12f      	bne.n	800e39e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e344:	f3ef 8310 	mrs	r3, PRIMASK
 800e348:	60fb      	str	r3, [r7, #12]
  return(result);
 800e34a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e34e:	2301      	movs	r3, #1
 800e350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f383 8810 	msr	PRIMASK, r3
}
 800e358:	46c0      	nop			@ (mov r8, r8)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2110      	movs	r1, #16
 800e366:	438a      	bics	r2, r1
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e36c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f383 8810 	msr	PRIMASK, r3
}
 800e374:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	69db      	ldr	r3, [r3, #28]
 800e37c:	2210      	movs	r2, #16
 800e37e:	4013      	ands	r3, r2
 800e380:	2b10      	cmp	r3, #16
 800e382:	d103      	bne.n	800e38c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2210      	movs	r2, #16
 800e38a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	225c      	movs	r2, #92	@ 0x5c
 800e390:	5a9a      	ldrh	r2, [r3, r2]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	0011      	movs	r1, r2
 800e396:	0018      	movs	r0, r3
 800e398:	f7fe ff28 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e39c:	e00c      	b.n	800e3b8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	0018      	movs	r0, r3
 800e3a2:	f7f6 fc55 	bl	8004c50 <HAL_UART_RxCpltCallback>
}
 800e3a6:	e007      	b.n	800e3b8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	699a      	ldr	r2, [r3, #24]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2108      	movs	r1, #8
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	619a      	str	r2, [r3, #24]
}
 800e3b8:	46c0      	nop			@ (mov r8, r8)
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	b014      	add	sp, #80	@ 0x50
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	fffffedf 	.word	0xfffffedf
 800e3c4:	40008000 	.word	0x40008000
 800e3c8:	fbffffff 	.word	0xfbffffff

0800e3cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b094      	sub	sp, #80	@ 0x50
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e3d4:	204e      	movs	r0, #78	@ 0x4e
 800e3d6:	183b      	adds	r3, r7, r0
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	2160      	movs	r1, #96	@ 0x60
 800e3dc:	5a52      	ldrh	r2, [r2, r1]
 800e3de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	228c      	movs	r2, #140	@ 0x8c
 800e3e4:	589b      	ldr	r3, [r3, r2]
 800e3e6:	2b22      	cmp	r3, #34	@ 0x22
 800e3e8:	d000      	beq.n	800e3ec <UART_RxISR_16BIT+0x20>
 800e3ea:	e0bf      	b.n	800e56c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3f2:	214c      	movs	r1, #76	@ 0x4c
 800e3f4:	187b      	adds	r3, r7, r1
 800e3f6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800e3fe:	187b      	adds	r3, r7, r1
 800e400:	183a      	adds	r2, r7, r0
 800e402:	881b      	ldrh	r3, [r3, #0]
 800e404:	8812      	ldrh	r2, [r2, #0]
 800e406:	4013      	ands	r3, r2
 800e408:	b29a      	uxth	r2, r3
 800e40a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e40c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e412:	1c9a      	adds	r2, r3, #2
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	225e      	movs	r2, #94	@ 0x5e
 800e41c:	5a9b      	ldrh	r3, [r3, r2]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	3b01      	subs	r3, #1
 800e422:	b299      	uxth	r1, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	225e      	movs	r2, #94	@ 0x5e
 800e428:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	225e      	movs	r2, #94	@ 0x5e
 800e42e:	5a9b      	ldrh	r3, [r3, r2]
 800e430:	b29b      	uxth	r3, r3
 800e432:	2b00      	cmp	r3, #0
 800e434:	d000      	beq.n	800e438 <UART_RxISR_16BIT+0x6c>
 800e436:	e0a1      	b.n	800e57c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e438:	f3ef 8310 	mrs	r3, PRIMASK
 800e43c:	623b      	str	r3, [r7, #32]
  return(result);
 800e43e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e440:	647b      	str	r3, [r7, #68]	@ 0x44
 800e442:	2301      	movs	r3, #1
 800e444:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	f383 8810 	msr	PRIMASK, r3
}
 800e44c:	46c0      	nop			@ (mov r8, r8)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	494a      	ldr	r1, [pc, #296]	@ (800e584 <UART_RxISR_16BIT+0x1b8>)
 800e45a:	400a      	ands	r2, r1
 800e45c:	601a      	str	r2, [r3, #0]
 800e45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e460:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e464:	f383 8810 	msr	PRIMASK, r3
}
 800e468:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e46a:	f3ef 8310 	mrs	r3, PRIMASK
 800e46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e472:	643b      	str	r3, [r7, #64]	@ 0x40
 800e474:	2301      	movs	r3, #1
 800e476:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e47a:	f383 8810 	msr	PRIMASK, r3
}
 800e47e:	46c0      	nop			@ (mov r8, r8)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	689a      	ldr	r2, [r3, #8]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2101      	movs	r1, #1
 800e48c:	438a      	bics	r2, r1
 800e48e:	609a      	str	r2, [r3, #8]
 800e490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e492:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e496:	f383 8810 	msr	PRIMASK, r3
}
 800e49a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	228c      	movs	r2, #140	@ 0x8c
 800e4a0:	2120      	movs	r1, #32
 800e4a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a34      	ldr	r2, [pc, #208]	@ (800e588 <UART_RxISR_16BIT+0x1bc>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d01f      	beq.n	800e4fa <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	2380      	movs	r3, #128	@ 0x80
 800e4c2:	041b      	lsls	r3, r3, #16
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	d018      	beq.n	800e4fa <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e4cc:	617b      	str	r3, [r7, #20]
  return(result);
 800e4ce:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	f383 8810 	msr	PRIMASK, r3
}
 800e4dc:	46c0      	nop			@ (mov r8, r8)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4928      	ldr	r1, [pc, #160]	@ (800e58c <UART_RxISR_16BIT+0x1c0>)
 800e4ea:	400a      	ands	r2, r1
 800e4ec:	601a      	str	r2, [r3, #0]
 800e4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	f383 8810 	msr	PRIMASK, r3
}
 800e4f8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d12f      	bne.n	800e562 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e508:	f3ef 8310 	mrs	r3, PRIMASK
 800e50c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e50e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e510:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e512:	2301      	movs	r3, #1
 800e514:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f383 8810 	msr	PRIMASK, r3
}
 800e51c:	46c0      	nop			@ (mov r8, r8)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2110      	movs	r1, #16
 800e52a:	438a      	bics	r2, r1
 800e52c:	601a      	str	r2, [r3, #0]
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f383 8810 	msr	PRIMASK, r3
}
 800e538:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	69db      	ldr	r3, [r3, #28]
 800e540:	2210      	movs	r2, #16
 800e542:	4013      	ands	r3, r2
 800e544:	2b10      	cmp	r3, #16
 800e546:	d103      	bne.n	800e550 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2210      	movs	r2, #16
 800e54e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	225c      	movs	r2, #92	@ 0x5c
 800e554:	5a9a      	ldrh	r2, [r3, r2]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	0011      	movs	r1, r2
 800e55a:	0018      	movs	r0, r3
 800e55c:	f7fe fe46 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e560:	e00c      	b.n	800e57c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	0018      	movs	r0, r3
 800e566:	f7f6 fb73 	bl	8004c50 <HAL_UART_RxCpltCallback>
}
 800e56a:	e007      	b.n	800e57c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	699a      	ldr	r2, [r3, #24]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2108      	movs	r1, #8
 800e578:	430a      	orrs	r2, r1
 800e57a:	619a      	str	r2, [r3, #24]
}
 800e57c:	46c0      	nop			@ (mov r8, r8)
 800e57e:	46bd      	mov	sp, r7
 800e580:	b014      	add	sp, #80	@ 0x50
 800e582:	bd80      	pop	{r7, pc}
 800e584:	fffffedf 	.word	0xfffffedf
 800e588:	40008000 	.word	0x40008000
 800e58c:	fbffffff 	.word	0xfbffffff

0800e590 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b0a0      	sub	sp, #128	@ 0x80
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e598:	237a      	movs	r3, #122	@ 0x7a
 800e59a:	18fb      	adds	r3, r7, r3
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	2160      	movs	r1, #96	@ 0x60
 800e5a0:	5a52      	ldrh	r2, [r2, r1]
 800e5a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	69db      	ldr	r3, [r3, #28]
 800e5aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	228c      	movs	r2, #140	@ 0x8c
 800e5c0:	589b      	ldr	r3, [r3, r2]
 800e5c2:	2b22      	cmp	r3, #34	@ 0x22
 800e5c4:	d000      	beq.n	800e5c8 <UART_RxISR_8BIT_FIFOEN+0x38>
 800e5c6:	e16a      	b.n	800e89e <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e5c8:	236e      	movs	r3, #110	@ 0x6e
 800e5ca:	18fb      	adds	r3, r7, r3
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	2168      	movs	r1, #104	@ 0x68
 800e5d0:	5a52      	ldrh	r2, [r2, r1]
 800e5d2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5d4:	e111      	b.n	800e7fa <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5dc:	216c      	movs	r1, #108	@ 0x6c
 800e5de:	187b      	adds	r3, r7, r1
 800e5e0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e5e2:	187b      	adds	r3, r7, r1
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	237a      	movs	r3, #122	@ 0x7a
 800e5ea:	18fb      	adds	r3, r7, r3
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	b2d9      	uxtb	r1, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5f4:	400a      	ands	r2, r1
 800e5f6:	b2d2      	uxtb	r2, r2
 800e5f8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	225e      	movs	r2, #94	@ 0x5e
 800e608:	5a9b      	ldrh	r3, [r3, r2]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	3b01      	subs	r3, #1
 800e60e:	b299      	uxth	r1, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	225e      	movs	r2, #94	@ 0x5e
 800e614:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e61e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e620:	2207      	movs	r2, #7
 800e622:	4013      	ands	r3, r2
 800e624:	d049      	beq.n	800e6ba <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e628:	2201      	movs	r2, #1
 800e62a:	4013      	ands	r3, r2
 800e62c:	d010      	beq.n	800e650 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e62e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e630:	2380      	movs	r3, #128	@ 0x80
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	4013      	ands	r3, r2
 800e636:	d00b      	beq.n	800e650 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2201      	movs	r2, #1
 800e63e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2290      	movs	r2, #144	@ 0x90
 800e644:	589b      	ldr	r3, [r3, r2]
 800e646:	2201      	movs	r2, #1
 800e648:	431a      	orrs	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2190      	movs	r1, #144	@ 0x90
 800e64e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e652:	2202      	movs	r2, #2
 800e654:	4013      	ands	r3, r2
 800e656:	d00f      	beq.n	800e678 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e65a:	2201      	movs	r2, #1
 800e65c:	4013      	ands	r3, r2
 800e65e:	d00b      	beq.n	800e678 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2202      	movs	r2, #2
 800e666:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2290      	movs	r2, #144	@ 0x90
 800e66c:	589b      	ldr	r3, [r3, r2]
 800e66e:	2204      	movs	r2, #4
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2190      	movs	r1, #144	@ 0x90
 800e676:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e67a:	2204      	movs	r2, #4
 800e67c:	4013      	ands	r3, r2
 800e67e:	d00f      	beq.n	800e6a0 <UART_RxISR_8BIT_FIFOEN+0x110>
 800e680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e682:	2201      	movs	r2, #1
 800e684:	4013      	ands	r3, r2
 800e686:	d00b      	beq.n	800e6a0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2204      	movs	r2, #4
 800e68e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2290      	movs	r2, #144	@ 0x90
 800e694:	589b      	ldr	r3, [r3, r2]
 800e696:	2202      	movs	r2, #2
 800e698:	431a      	orrs	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2190      	movs	r1, #144	@ 0x90
 800e69e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2290      	movs	r2, #144	@ 0x90
 800e6a4:	589b      	ldr	r3, [r3, r2]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d007      	beq.n	800e6ba <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f7fe fd95 	bl	800d1dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2290      	movs	r2, #144	@ 0x90
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	225e      	movs	r2, #94	@ 0x5e
 800e6be:	5a9b      	ldrh	r3, [r3, r2]
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d000      	beq.n	800e6c8 <UART_RxISR_8BIT_FIFOEN+0x138>
 800e6c6:	e098      	b.n	800e7fa <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d8:	f383 8810 	msr	PRIMASK, r3
}
 800e6dc:	46c0      	nop			@ (mov r8, r8)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4973      	ldr	r1, [pc, #460]	@ (800e8b8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800e6ea:	400a      	ands	r2, r1
 800e6ec:	601a      	str	r2, [r3, #0]
 800e6ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6f0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6f4:	f383 8810 	msr	PRIMASK, r3
}
 800e6f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e6fe:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800e700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e702:	667b      	str	r3, [r7, #100]	@ 0x64
 800e704:	2301      	movs	r3, #1
 800e706:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e70a:	f383 8810 	msr	PRIMASK, r3
}
 800e70e:	46c0      	nop			@ (mov r8, r8)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	689a      	ldr	r2, [r3, #8]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4968      	ldr	r1, [pc, #416]	@ (800e8bc <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800e71c:	400a      	ands	r2, r1
 800e71e:	609a      	str	r2, [r3, #8]
 800e720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e726:	f383 8810 	msr	PRIMASK, r3
}
 800e72a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	228c      	movs	r2, #140	@ 0x8c
 800e730:	2120      	movs	r1, #32
 800e732:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a5e      	ldr	r2, [pc, #376]	@ (800e8c0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d01f      	beq.n	800e78a <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	2380      	movs	r3, #128	@ 0x80
 800e752:	041b      	lsls	r3, r3, #16
 800e754:	4013      	ands	r3, r2
 800e756:	d018      	beq.n	800e78a <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e758:	f3ef 8310 	mrs	r3, PRIMASK
 800e75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e760:	663b      	str	r3, [r7, #96]	@ 0x60
 800e762:	2301      	movs	r3, #1
 800e764:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	f383 8810 	msr	PRIMASK, r3
}
 800e76c:	46c0      	nop			@ (mov r8, r8)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4952      	ldr	r1, [pc, #328]	@ (800e8c4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800e77a:	400a      	ands	r2, r1
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e780:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e784:	f383 8810 	msr	PRIMASK, r3
}
 800e788:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d12f      	bne.n	800e7f2 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e798:	f3ef 8310 	mrs	r3, PRIMASK
 800e79c:	623b      	str	r3, [r7, #32]
  return(result);
 800e79e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a8:	f383 8810 	msr	PRIMASK, r3
}
 800e7ac:	46c0      	nop			@ (mov r8, r8)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2110      	movs	r1, #16
 800e7ba:	438a      	bics	r2, r1
 800e7bc:	601a      	str	r2, [r3, #0]
 800e7be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c4:	f383 8810 	msr	PRIMASK, r3
}
 800e7c8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	69db      	ldr	r3, [r3, #28]
 800e7d0:	2210      	movs	r2, #16
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	2b10      	cmp	r3, #16
 800e7d6:	d103      	bne.n	800e7e0 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2210      	movs	r2, #16
 800e7de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	225c      	movs	r2, #92	@ 0x5c
 800e7e4:	5a9a      	ldrh	r2, [r3, r2]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	0011      	movs	r1, r2
 800e7ea:	0018      	movs	r0, r3
 800e7ec:	f7fe fcfe 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
 800e7f0:	e003      	b.n	800e7fa <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	0018      	movs	r0, r3
 800e7f6:	f7f6 fa2b 	bl	8004c50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e7fa:	236e      	movs	r3, #110	@ 0x6e
 800e7fc:	18fb      	adds	r3, r7, r3
 800e7fe:	881b      	ldrh	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d004      	beq.n	800e80e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800e804:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e806:	2220      	movs	r2, #32
 800e808:	4013      	ands	r3, r2
 800e80a:	d000      	beq.n	800e80e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800e80c:	e6e3      	b.n	800e5d6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e80e:	205a      	movs	r0, #90	@ 0x5a
 800e810:	183b      	adds	r3, r7, r0
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	215e      	movs	r1, #94	@ 0x5e
 800e816:	5a52      	ldrh	r2, [r2, r1]
 800e818:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e81a:	0001      	movs	r1, r0
 800e81c:	187b      	adds	r3, r7, r1
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d044      	beq.n	800e8ae <UART_RxISR_8BIT_FIFOEN+0x31e>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2268      	movs	r2, #104	@ 0x68
 800e828:	5a9b      	ldrh	r3, [r3, r2]
 800e82a:	187a      	adds	r2, r7, r1
 800e82c:	8812      	ldrh	r2, [r2, #0]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d23d      	bcs.n	800e8ae <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e832:	f3ef 8310 	mrs	r3, PRIMASK
 800e836:	60bb      	str	r3, [r7, #8]
  return(result);
 800e838:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e83a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e83c:	2301      	movs	r3, #1
 800e83e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f383 8810 	msr	PRIMASK, r3
}
 800e846:	46c0      	nop			@ (mov r8, r8)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	491d      	ldr	r1, [pc, #116]	@ (800e8c8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 800e854:	400a      	ands	r2, r1
 800e856:	609a      	str	r2, [r3, #8]
 800e858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e85a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	f383 8810 	msr	PRIMASK, r3
}
 800e862:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a19      	ldr	r2, [pc, #100]	@ (800e8cc <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800e868:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e86a:	f3ef 8310 	mrs	r3, PRIMASK
 800e86e:	617b      	str	r3, [r7, #20]
  return(result);
 800e870:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e872:	653b      	str	r3, [r7, #80]	@ 0x50
 800e874:	2301      	movs	r3, #1
 800e876:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	f383 8810 	msr	PRIMASK, r3
}
 800e87e:	46c0      	nop			@ (mov r8, r8)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2120      	movs	r1, #32
 800e88c:	430a      	orrs	r2, r1
 800e88e:	601a      	str	r2, [r3, #0]
 800e890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e892:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	f383 8810 	msr	PRIMASK, r3
}
 800e89a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e89c:	e007      	b.n	800e8ae <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	699a      	ldr	r2, [r3, #24]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2108      	movs	r1, #8
 800e8aa:	430a      	orrs	r2, r1
 800e8ac:	619a      	str	r2, [r3, #24]
}
 800e8ae:	46c0      	nop			@ (mov r8, r8)
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b020      	add	sp, #128	@ 0x80
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	46c0      	nop			@ (mov r8, r8)
 800e8b8:	fffffeff 	.word	0xfffffeff
 800e8bc:	effffffe 	.word	0xeffffffe
 800e8c0:	40008000 	.word	0x40008000
 800e8c4:	fbffffff 	.word	0xfbffffff
 800e8c8:	efffffff 	.word	0xefffffff
 800e8cc:	0800e209 	.word	0x0800e209

0800e8d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b0a2      	sub	sp, #136	@ 0x88
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e8d8:	2382      	movs	r3, #130	@ 0x82
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	2160      	movs	r1, #96	@ 0x60
 800e8e0:	5a52      	ldrh	r2, [r2, r1]
 800e8e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	69db      	ldr	r3, [r3, #28]
 800e8ea:	2284      	movs	r2, #132	@ 0x84
 800e8ec:	18ba      	adds	r2, r7, r2
 800e8ee:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	228c      	movs	r2, #140	@ 0x8c
 800e904:	589b      	ldr	r3, [r3, r2]
 800e906:	2b22      	cmp	r3, #34	@ 0x22
 800e908:	d000      	beq.n	800e90c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800e90a:	e174      	b.n	800ebf6 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e90c:	2376      	movs	r3, #118	@ 0x76
 800e90e:	18fb      	adds	r3, r7, r3
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	2168      	movs	r1, #104	@ 0x68
 800e914:	5a52      	ldrh	r2, [r2, r1]
 800e916:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e918:	e119      	b.n	800eb4e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e920:	2174      	movs	r1, #116	@ 0x74
 800e922:	187b      	adds	r3, r7, r1
 800e924:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e92a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800e92c:	187b      	adds	r3, r7, r1
 800e92e:	2282      	movs	r2, #130	@ 0x82
 800e930:	18ba      	adds	r2, r7, r2
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	8812      	ldrh	r2, [r2, #0]
 800e936:	4013      	ands	r3, r2
 800e938:	b29a      	uxth	r2, r3
 800e93a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e93c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e942:	1c9a      	adds	r2, r3, #2
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	225e      	movs	r2, #94	@ 0x5e
 800e94c:	5a9b      	ldrh	r3, [r3, r2]
 800e94e:	b29b      	uxth	r3, r3
 800e950:	3b01      	subs	r3, #1
 800e952:	b299      	uxth	r1, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	225e      	movs	r2, #94	@ 0x5e
 800e958:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69db      	ldr	r3, [r3, #28]
 800e960:	2184      	movs	r1, #132	@ 0x84
 800e962:	187a      	adds	r2, r7, r1
 800e964:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e966:	187b      	adds	r3, r7, r1
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2207      	movs	r2, #7
 800e96c:	4013      	ands	r3, r2
 800e96e:	d04e      	beq.n	800ea0e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e970:	187b      	adds	r3, r7, r1
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2201      	movs	r2, #1
 800e976:	4013      	ands	r3, r2
 800e978:	d010      	beq.n	800e99c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800e97a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e97c:	2380      	movs	r3, #128	@ 0x80
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	4013      	ands	r3, r2
 800e982:	d00b      	beq.n	800e99c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2201      	movs	r2, #1
 800e98a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2290      	movs	r2, #144	@ 0x90
 800e990:	589b      	ldr	r3, [r3, r2]
 800e992:	2201      	movs	r2, #1
 800e994:	431a      	orrs	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2190      	movs	r1, #144	@ 0x90
 800e99a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e99c:	2384      	movs	r3, #132	@ 0x84
 800e99e:	18fb      	adds	r3, r7, r3
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2202      	movs	r2, #2
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	d00f      	beq.n	800e9c8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800e9a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	d00b      	beq.n	800e9c8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2202      	movs	r2, #2
 800e9b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2290      	movs	r2, #144	@ 0x90
 800e9bc:	589b      	ldr	r3, [r3, r2]
 800e9be:	2204      	movs	r2, #4
 800e9c0:	431a      	orrs	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2190      	movs	r1, #144	@ 0x90
 800e9c6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9c8:	2384      	movs	r3, #132	@ 0x84
 800e9ca:	18fb      	adds	r3, r7, r3
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2204      	movs	r2, #4
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	d00f      	beq.n	800e9f4 <UART_RxISR_16BIT_FIFOEN+0x124>
 800e9d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	4013      	ands	r3, r2
 800e9da:	d00b      	beq.n	800e9f4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2204      	movs	r2, #4
 800e9e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2290      	movs	r2, #144	@ 0x90
 800e9e8:	589b      	ldr	r3, [r3, r2]
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	431a      	orrs	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2190      	movs	r1, #144	@ 0x90
 800e9f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2290      	movs	r2, #144	@ 0x90
 800e9f8:	589b      	ldr	r3, [r3, r2]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	0018      	movs	r0, r3
 800ea02:	f7fe fbeb 	bl	800d1dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2290      	movs	r2, #144	@ 0x90
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	225e      	movs	r2, #94	@ 0x5e
 800ea12:	5a9b      	ldrh	r3, [r3, r2]
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d000      	beq.n	800ea1c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800ea1a:	e098      	b.n	800eb4e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ea20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ea22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ea26:	2301      	movs	r3, #1
 800ea28:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea2c:	f383 8810 	msr	PRIMASK, r3
}
 800ea30:	46c0      	nop			@ (mov r8, r8)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4974      	ldr	r1, [pc, #464]	@ (800ec10 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800ea3e:	400a      	ands	r2, r1
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea44:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea48:	f383 8810 	msr	PRIMASK, r3
}
 800ea4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800ea54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ea58:	2301      	movs	r3, #1
 800ea5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea5e:	f383 8810 	msr	PRIMASK, r3
}
 800ea62:	46c0      	nop			@ (mov r8, r8)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	689a      	ldr	r2, [r3, #8]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4969      	ldr	r1, [pc, #420]	@ (800ec14 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800ea70:	400a      	ands	r2, r1
 800ea72:	609a      	str	r2, [r3, #8]
 800ea74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea76:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea7a:	f383 8810 	msr	PRIMASK, r3
}
 800ea7e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	228c      	movs	r2, #140	@ 0x8c
 800ea84:	2120      	movs	r1, #32
 800ea86:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a5f      	ldr	r2, [pc, #380]	@ (800ec18 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d01f      	beq.n	800eade <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	2380      	movs	r3, #128	@ 0x80
 800eaa6:	041b      	lsls	r3, r3, #16
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	d018      	beq.n	800eade <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaac:	f3ef 8310 	mrs	r3, PRIMASK
 800eab0:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800eab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eab4:	667b      	str	r3, [r7, #100]	@ 0x64
 800eab6:	2301      	movs	r3, #1
 800eab8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eabc:	f383 8810 	msr	PRIMASK, r3
}
 800eac0:	46c0      	nop			@ (mov r8, r8)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4953      	ldr	r1, [pc, #332]	@ (800ec1c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800eace:	400a      	ands	r2, r1
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ead4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ead6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead8:	f383 8810 	msr	PRIMASK, r3
}
 800eadc:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d12f      	bne.n	800eb46 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaec:	f3ef 8310 	mrs	r3, PRIMASK
 800eaf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaf4:	663b      	str	r3, [r7, #96]	@ 0x60
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eafc:	f383 8810 	msr	PRIMASK, r3
}
 800eb00:	46c0      	nop			@ (mov r8, r8)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2110      	movs	r1, #16
 800eb0e:	438a      	bics	r2, r1
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb18:	f383 8810 	msr	PRIMASK, r3
}
 800eb1c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	69db      	ldr	r3, [r3, #28]
 800eb24:	2210      	movs	r2, #16
 800eb26:	4013      	ands	r3, r2
 800eb28:	2b10      	cmp	r3, #16
 800eb2a:	d103      	bne.n	800eb34 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2210      	movs	r2, #16
 800eb32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	225c      	movs	r2, #92	@ 0x5c
 800eb38:	5a9a      	ldrh	r2, [r3, r2]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	0011      	movs	r1, r2
 800eb3e:	0018      	movs	r0, r3
 800eb40:	f7fe fb54 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
 800eb44:	e003      	b.n	800eb4e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	0018      	movs	r0, r3
 800eb4a:	f7f6 f881 	bl	8004c50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb4e:	2376      	movs	r3, #118	@ 0x76
 800eb50:	18fb      	adds	r3, r7, r3
 800eb52:	881b      	ldrh	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d006      	beq.n	800eb66 <UART_RxISR_16BIT_FIFOEN+0x296>
 800eb58:	2384      	movs	r3, #132	@ 0x84
 800eb5a:	18fb      	adds	r3, r7, r3
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2220      	movs	r2, #32
 800eb60:	4013      	ands	r3, r2
 800eb62:	d000      	beq.n	800eb66 <UART_RxISR_16BIT_FIFOEN+0x296>
 800eb64:	e6d9      	b.n	800e91a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb66:	205e      	movs	r0, #94	@ 0x5e
 800eb68:	183b      	adds	r3, r7, r0
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	215e      	movs	r1, #94	@ 0x5e
 800eb6e:	5a52      	ldrh	r2, [r2, r1]
 800eb70:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb72:	0001      	movs	r1, r0
 800eb74:	187b      	adds	r3, r7, r1
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d044      	beq.n	800ec06 <UART_RxISR_16BIT_FIFOEN+0x336>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2268      	movs	r2, #104	@ 0x68
 800eb80:	5a9b      	ldrh	r3, [r3, r2]
 800eb82:	187a      	adds	r2, r7, r1
 800eb84:	8812      	ldrh	r2, [r2, #0]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d23d      	bcs.n	800ec06 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb8a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb90:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb94:	2301      	movs	r3, #1
 800eb96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	f383 8810 	msr	PRIMASK, r3
}
 800eb9e:	46c0      	nop			@ (mov r8, r8)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689a      	ldr	r2, [r3, #8]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	491d      	ldr	r1, [pc, #116]	@ (800ec20 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800ebac:	400a      	ands	r2, r1
 800ebae:	609a      	str	r2, [r3, #8]
 800ebb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f383 8810 	msr	PRIMASK, r3
}
 800ebba:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	4a19      	ldr	r2, [pc, #100]	@ (800ec24 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800ebc0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebc2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebc6:	61bb      	str	r3, [r7, #24]
  return(result);
 800ebc8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ebca:	657b      	str	r3, [r7, #84]	@ 0x54
 800ebcc:	2301      	movs	r3, #1
 800ebce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	f383 8810 	msr	PRIMASK, r3
}
 800ebd6:	46c0      	nop			@ (mov r8, r8)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2120      	movs	r1, #32
 800ebe4:	430a      	orrs	r2, r1
 800ebe6:	601a      	str	r2, [r3, #0]
 800ebe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebec:	6a3b      	ldr	r3, [r7, #32]
 800ebee:	f383 8810 	msr	PRIMASK, r3
}
 800ebf2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebf4:	e007      	b.n	800ec06 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	699a      	ldr	r2, [r3, #24]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2108      	movs	r1, #8
 800ec02:	430a      	orrs	r2, r1
 800ec04:	619a      	str	r2, [r3, #24]
}
 800ec06:	46c0      	nop			@ (mov r8, r8)
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	b022      	add	sp, #136	@ 0x88
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	46c0      	nop			@ (mov r8, r8)
 800ec10:	fffffeff 	.word	0xfffffeff
 800ec14:	effffffe 	.word	0xeffffffe
 800ec18:	40008000 	.word	0x40008000
 800ec1c:	fbffffff 	.word	0xfbffffff
 800ec20:	efffffff 	.word	0xefffffff
 800ec24:	0800e3cd 	.word	0x0800e3cd

0800ec28 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d101      	bne.n	800ec40 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e05d      	b.n	800ecfc <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2288      	movs	r2, #136	@ 0x88
 800ec44:	589b      	ldr	r3, [r3, r2]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d107      	bne.n	800ec5a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2284      	movs	r2, #132	@ 0x84
 800ec4e:	2100      	movs	r1, #0
 800ec50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	0018      	movs	r0, r3
 800ec56:	f7f8 ff47 	bl	8007ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2288      	movs	r2, #136	@ 0x88
 800ec5e:	2124      	movs	r1, #36	@ 0x24
 800ec60:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	438a      	bics	r2, r1
 800ec70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d003      	beq.n	800ec82 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	0018      	movs	r0, r3
 800ec7e:	f7fe fd7f 	bl	800d780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	0018      	movs	r0, r3
 800ec86:	f7fe fabd 	bl	800d204 <UART_SetConfig>
 800ec8a:	0003      	movs	r3, r0
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d101      	bne.n	800ec94 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e033      	b.n	800ecfc <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	689a      	ldr	r2, [r3, #8]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2180      	movs	r1, #128	@ 0x80
 800eca0:	01c9      	lsls	r1, r1, #7
 800eca2:	430a      	orrs	r2, r1
 800eca4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	4a15      	ldr	r2, [pc, #84]	@ (800ed04 <HAL_RS485Ex_Init+0xdc>)
 800ecae:	4013      	ands	r3, r2
 800ecb0:	0019      	movs	r1, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	055b      	lsls	r3, r3, #21
 800ecc0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	041b      	lsls	r3, r3, #16
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a0d      	ldr	r2, [pc, #52]	@ (800ed08 <HAL_RS485Ex_Init+0xe0>)
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	0019      	movs	r1, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	430a      	orrs	r2, r1
 800ece0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2101      	movs	r1, #1
 800ecee:	430a      	orrs	r2, r1
 800ecf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	0018      	movs	r0, r3
 800ecf6:	f7fe fdf7 	bl	800d8e8 <UART_CheckIdleState>
 800ecfa:	0003      	movs	r3, r0
}
 800ecfc:	0018      	movs	r0, r3
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	b006      	add	sp, #24
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	ffff7fff 	.word	0xffff7fff
 800ed08:	fc00ffff 	.word	0xfc00ffff

0800ed0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ed14:	46c0      	nop			@ (mov r8, r8)
 800ed16:	46bd      	mov	sp, r7
 800ed18:	b002      	add	sp, #8
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ed24:	46c0      	nop			@ (mov r8, r8)
 800ed26:	46bd      	mov	sp, r7
 800ed28:	b002      	add	sp, #8
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ed34:	46c0      	nop			@ (mov r8, r8)
 800ed36:	46bd      	mov	sp, r7
 800ed38:	b002      	add	sp, #8
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2284      	movs	r2, #132	@ 0x84
 800ed48:	5c9b      	ldrb	r3, [r3, r2]
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d101      	bne.n	800ed52 <HAL_UARTEx_EnableFifoMode+0x16>
 800ed4e:	2302      	movs	r3, #2
 800ed50:	e02d      	b.n	800edae <HAL_UARTEx_EnableFifoMode+0x72>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2284      	movs	r2, #132	@ 0x84
 800ed56:	2101      	movs	r1, #1
 800ed58:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2288      	movs	r2, #136	@ 0x88
 800ed5e:	2124      	movs	r1, #36	@ 0x24
 800ed60:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2101      	movs	r1, #1
 800ed76:	438a      	bics	r2, r1
 800ed78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2280      	movs	r2, #128	@ 0x80
 800ed7e:	0592      	lsls	r2, r2, #22
 800ed80:	4313      	orrs	r3, r2
 800ed82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2280      	movs	r2, #128	@ 0x80
 800ed88:	0592      	lsls	r2, r2, #22
 800ed8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	0018      	movs	r0, r3
 800ed98:	f000 f8ca 	bl	800ef30 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2288      	movs	r2, #136	@ 0x88
 800eda0:	2120      	movs	r1, #32
 800eda2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2284      	movs	r2, #132	@ 0x84
 800eda8:	2100      	movs	r1, #0
 800edaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	0018      	movs	r0, r3
 800edb0:	46bd      	mov	sp, r7
 800edb2:	b004      	add	sp, #16
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2284      	movs	r2, #132	@ 0x84
 800edc4:	5c9b      	ldrb	r3, [r3, r2]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d101      	bne.n	800edce <HAL_UARTEx_DisableFifoMode+0x16>
 800edca:	2302      	movs	r3, #2
 800edcc:	e027      	b.n	800ee1e <HAL_UARTEx_DisableFifoMode+0x66>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2284      	movs	r2, #132	@ 0x84
 800edd2:	2101      	movs	r1, #1
 800edd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2288      	movs	r2, #136	@ 0x88
 800edda:	2124      	movs	r1, #36	@ 0x24
 800eddc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2101      	movs	r1, #1
 800edf2:	438a      	bics	r2, r1
 800edf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	4a0b      	ldr	r2, [pc, #44]	@ (800ee28 <HAL_UARTEx_DisableFifoMode+0x70>)
 800edfa:	4013      	ands	r3, r2
 800edfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2288      	movs	r2, #136	@ 0x88
 800ee10:	2120      	movs	r1, #32
 800ee12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2284      	movs	r2, #132	@ 0x84
 800ee18:	2100      	movs	r1, #0
 800ee1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	0018      	movs	r0, r3
 800ee20:	46bd      	mov	sp, r7
 800ee22:	b004      	add	sp, #16
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	46c0      	nop			@ (mov r8, r8)
 800ee28:	dfffffff 	.word	0xdfffffff

0800ee2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2284      	movs	r2, #132	@ 0x84
 800ee3a:	5c9b      	ldrb	r3, [r3, r2]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d101      	bne.n	800ee44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee40:	2302      	movs	r3, #2
 800ee42:	e02e      	b.n	800eea2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2284      	movs	r2, #132	@ 0x84
 800ee48:	2101      	movs	r1, #1
 800ee4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2288      	movs	r2, #136	@ 0x88
 800ee50:	2124      	movs	r1, #36	@ 0x24
 800ee52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	2101      	movs	r1, #1
 800ee68:	438a      	bics	r2, r1
 800ee6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	08d9      	lsrs	r1, r3, #3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	683a      	ldr	r2, [r7, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	0018      	movs	r0, r3
 800ee84:	f000 f854 	bl	800ef30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2288      	movs	r2, #136	@ 0x88
 800ee94:	2120      	movs	r1, #32
 800ee96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2284      	movs	r2, #132	@ 0x84
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	0018      	movs	r0, r3
 800eea4:	46bd      	mov	sp, r7
 800eea6:	b004      	add	sp, #16
 800eea8:	bd80      	pop	{r7, pc}
	...

0800eeac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2284      	movs	r2, #132	@ 0x84
 800eeba:	5c9b      	ldrb	r3, [r3, r2]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d101      	bne.n	800eec4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eec0:	2302      	movs	r3, #2
 800eec2:	e02f      	b.n	800ef24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2284      	movs	r2, #132	@ 0x84
 800eec8:	2101      	movs	r1, #1
 800eeca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2288      	movs	r2, #136	@ 0x88
 800eed0:	2124      	movs	r1, #36	@ 0x24
 800eed2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2101      	movs	r1, #1
 800eee8:	438a      	bics	r2, r1
 800eeea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	4a0e      	ldr	r2, [pc, #56]	@ (800ef2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800eef4:	4013      	ands	r3, r2
 800eef6:	0019      	movs	r1, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	0018      	movs	r0, r3
 800ef06:	f000 f813 	bl	800ef30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2288      	movs	r2, #136	@ 0x88
 800ef16:	2120      	movs	r1, #32
 800ef18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2284      	movs	r2, #132	@ 0x84
 800ef1e:	2100      	movs	r1, #0
 800ef20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	0018      	movs	r0, r3
 800ef26:	46bd      	mov	sp, r7
 800ef28:	b004      	add	sp, #16
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	f1ffffff 	.word	0xf1ffffff

0800ef30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d108      	bne.n	800ef52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	226a      	movs	r2, #106	@ 0x6a
 800ef44:	2101      	movs	r1, #1
 800ef46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2268      	movs	r2, #104	@ 0x68
 800ef4c:	2101      	movs	r1, #1
 800ef4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef50:	e043      	b.n	800efda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef52:	260f      	movs	r6, #15
 800ef54:	19bb      	adds	r3, r7, r6
 800ef56:	2208      	movs	r2, #8
 800ef58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef5a:	200e      	movs	r0, #14
 800ef5c:	183b      	adds	r3, r7, r0
 800ef5e:	2208      	movs	r2, #8
 800ef60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	0e5b      	lsrs	r3, r3, #25
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	240d      	movs	r4, #13
 800ef6e:	193b      	adds	r3, r7, r4
 800ef70:	2107      	movs	r1, #7
 800ef72:	400a      	ands	r2, r1
 800ef74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	0f5b      	lsrs	r3, r3, #29
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	250c      	movs	r5, #12
 800ef82:	197b      	adds	r3, r7, r5
 800ef84:	2107      	movs	r1, #7
 800ef86:	400a      	ands	r2, r1
 800ef88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef8a:	183b      	adds	r3, r7, r0
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	197a      	adds	r2, r7, r5
 800ef90:	7812      	ldrb	r2, [r2, #0]
 800ef92:	4914      	ldr	r1, [pc, #80]	@ (800efe4 <UARTEx_SetNbDataToProcess+0xb4>)
 800ef94:	5c8a      	ldrb	r2, [r1, r2]
 800ef96:	435a      	muls	r2, r3
 800ef98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef9a:	197b      	adds	r3, r7, r5
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	4a12      	ldr	r2, [pc, #72]	@ (800efe8 <UARTEx_SetNbDataToProcess+0xb8>)
 800efa0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efa2:	0019      	movs	r1, r3
 800efa4:	f7f1 f956 	bl	8000254 <__divsi3>
 800efa8:	0003      	movs	r3, r0
 800efaa:	b299      	uxth	r1, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	226a      	movs	r2, #106	@ 0x6a
 800efb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efb2:	19bb      	adds	r3, r7, r6
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	193a      	adds	r2, r7, r4
 800efb8:	7812      	ldrb	r2, [r2, #0]
 800efba:	490a      	ldr	r1, [pc, #40]	@ (800efe4 <UARTEx_SetNbDataToProcess+0xb4>)
 800efbc:	5c8a      	ldrb	r2, [r1, r2]
 800efbe:	435a      	muls	r2, r3
 800efc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800efc2:	193b      	adds	r3, r7, r4
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	4a08      	ldr	r2, [pc, #32]	@ (800efe8 <UARTEx_SetNbDataToProcess+0xb8>)
 800efc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efca:	0019      	movs	r1, r3
 800efcc:	f7f1 f942 	bl	8000254 <__divsi3>
 800efd0:	0003      	movs	r3, r0
 800efd2:	b299      	uxth	r1, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2268      	movs	r2, #104	@ 0x68
 800efd8:	5299      	strh	r1, [r3, r2]
}
 800efda:	46c0      	nop			@ (mov r8, r8)
 800efdc:	46bd      	mov	sp, r7
 800efde:	b005      	add	sp, #20
 800efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efe2:	46c0      	nop			@ (mov r8, r8)
 800efe4:	08017108 	.word	0x08017108
 800efe8:	08017110 	.word	0x08017110

0800efec <__NVIC_SetPriority>:
{
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	0002      	movs	r2, r0
 800eff4:	6039      	str	r1, [r7, #0]
 800eff6:	1dfb      	adds	r3, r7, #7
 800eff8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800effa:	1dfb      	adds	r3, r7, #7
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	2b7f      	cmp	r3, #127	@ 0x7f
 800f000:	d828      	bhi.n	800f054 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f002:	4a2f      	ldr	r2, [pc, #188]	@ (800f0c0 <__NVIC_SetPriority+0xd4>)
 800f004:	1dfb      	adds	r3, r7, #7
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	b25b      	sxtb	r3, r3
 800f00a:	089b      	lsrs	r3, r3, #2
 800f00c:	33c0      	adds	r3, #192	@ 0xc0
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	589b      	ldr	r3, [r3, r2]
 800f012:	1dfa      	adds	r2, r7, #7
 800f014:	7812      	ldrb	r2, [r2, #0]
 800f016:	0011      	movs	r1, r2
 800f018:	2203      	movs	r2, #3
 800f01a:	400a      	ands	r2, r1
 800f01c:	00d2      	lsls	r2, r2, #3
 800f01e:	21ff      	movs	r1, #255	@ 0xff
 800f020:	4091      	lsls	r1, r2
 800f022:	000a      	movs	r2, r1
 800f024:	43d2      	mvns	r2, r2
 800f026:	401a      	ands	r2, r3
 800f028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	019b      	lsls	r3, r3, #6
 800f02e:	22ff      	movs	r2, #255	@ 0xff
 800f030:	401a      	ands	r2, r3
 800f032:	1dfb      	adds	r3, r7, #7
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	0018      	movs	r0, r3
 800f038:	2303      	movs	r3, #3
 800f03a:	4003      	ands	r3, r0
 800f03c:	00db      	lsls	r3, r3, #3
 800f03e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f040:	481f      	ldr	r0, [pc, #124]	@ (800f0c0 <__NVIC_SetPriority+0xd4>)
 800f042:	1dfb      	adds	r3, r7, #7
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	b25b      	sxtb	r3, r3
 800f048:	089b      	lsrs	r3, r3, #2
 800f04a:	430a      	orrs	r2, r1
 800f04c:	33c0      	adds	r3, #192	@ 0xc0
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	501a      	str	r2, [r3, r0]
}
 800f052:	e031      	b.n	800f0b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f054:	4a1b      	ldr	r2, [pc, #108]	@ (800f0c4 <__NVIC_SetPriority+0xd8>)
 800f056:	1dfb      	adds	r3, r7, #7
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	0019      	movs	r1, r3
 800f05c:	230f      	movs	r3, #15
 800f05e:	400b      	ands	r3, r1
 800f060:	3b08      	subs	r3, #8
 800f062:	089b      	lsrs	r3, r3, #2
 800f064:	3306      	adds	r3, #6
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	18d3      	adds	r3, r2, r3
 800f06a:	3304      	adds	r3, #4
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	1dfa      	adds	r2, r7, #7
 800f070:	7812      	ldrb	r2, [r2, #0]
 800f072:	0011      	movs	r1, r2
 800f074:	2203      	movs	r2, #3
 800f076:	400a      	ands	r2, r1
 800f078:	00d2      	lsls	r2, r2, #3
 800f07a:	21ff      	movs	r1, #255	@ 0xff
 800f07c:	4091      	lsls	r1, r2
 800f07e:	000a      	movs	r2, r1
 800f080:	43d2      	mvns	r2, r2
 800f082:	401a      	ands	r2, r3
 800f084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	019b      	lsls	r3, r3, #6
 800f08a:	22ff      	movs	r2, #255	@ 0xff
 800f08c:	401a      	ands	r2, r3
 800f08e:	1dfb      	adds	r3, r7, #7
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	0018      	movs	r0, r3
 800f094:	2303      	movs	r3, #3
 800f096:	4003      	ands	r3, r0
 800f098:	00db      	lsls	r3, r3, #3
 800f09a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f09c:	4809      	ldr	r0, [pc, #36]	@ (800f0c4 <__NVIC_SetPriority+0xd8>)
 800f09e:	1dfb      	adds	r3, r7, #7
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	001c      	movs	r4, r3
 800f0a4:	230f      	movs	r3, #15
 800f0a6:	4023      	ands	r3, r4
 800f0a8:	3b08      	subs	r3, #8
 800f0aa:	089b      	lsrs	r3, r3, #2
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	3306      	adds	r3, #6
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	18c3      	adds	r3, r0, r3
 800f0b4:	3304      	adds	r3, #4
 800f0b6:	601a      	str	r2, [r3, #0]
}
 800f0b8:	46c0      	nop			@ (mov r8, r8)
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	b003      	add	sp, #12
 800f0be:	bd90      	pop	{r4, r7, pc}
 800f0c0:	e000e100 	.word	0xe000e100
 800f0c4:	e000ed00 	.word	0xe000ed00

0800f0c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f0cc:	4b05      	ldr	r3, [pc, #20]	@ (800f0e4 <SysTick_Handler+0x1c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f0d0:	f001 fcf2 	bl	8010ab8 <xTaskGetSchedulerState>
 800f0d4:	0003      	movs	r3, r0
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d001      	beq.n	800f0de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f0da:	f002 fa6d 	bl	80115b8 <xPortSysTickHandler>
  }
}
 800f0de:	46c0      	nop			@ (mov r8, r8)
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	e000e010 	.word	0xe000e010

0800f0e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f0ec:	2305      	movs	r3, #5
 800f0ee:	425b      	negs	r3, r3
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	0018      	movs	r0, r3
 800f0f4:	f7ff ff7a 	bl	800efec <__NVIC_SetPriority>
#endif
}
 800f0f8:	46c0      	nop			@ (mov r8, r8)
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f106:	f3ef 8305 	mrs	r3, IPSR
 800f10a:	603b      	str	r3, [r7, #0]
  return(result);
 800f10c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d003      	beq.n	800f11a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f112:	2306      	movs	r3, #6
 800f114:	425b      	negs	r3, r3
 800f116:	607b      	str	r3, [r7, #4]
 800f118:	e00c      	b.n	800f134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f11a:	4b09      	ldr	r3, [pc, #36]	@ (800f140 <osKernelInitialize+0x40>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d105      	bne.n	800f12e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f122:	4b07      	ldr	r3, [pc, #28]	@ (800f140 <osKernelInitialize+0x40>)
 800f124:	2201      	movs	r2, #1
 800f126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f128:	2300      	movs	r3, #0
 800f12a:	607b      	str	r3, [r7, #4]
 800f12c:	e002      	b.n	800f134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f12e:	2301      	movs	r3, #1
 800f130:	425b      	negs	r3, r3
 800f132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f134:	687b      	ldr	r3, [r7, #4]
}
 800f136:	0018      	movs	r0, r3
 800f138:	46bd      	mov	sp, r7
 800f13a:	b002      	add	sp, #8
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	46c0      	nop			@ (mov r8, r8)
 800f140:	20002968 	.word	0x20002968

0800f144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f14a:	f3ef 8305 	mrs	r3, IPSR
 800f14e:	603b      	str	r3, [r7, #0]
  return(result);
 800f150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f152:	2b00      	cmp	r3, #0
 800f154:	d003      	beq.n	800f15e <osKernelStart+0x1a>
    stat = osErrorISR;
 800f156:	2306      	movs	r3, #6
 800f158:	425b      	negs	r3, r3
 800f15a:	607b      	str	r3, [r7, #4]
 800f15c:	e010      	b.n	800f180 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f15e:	4b0b      	ldr	r3, [pc, #44]	@ (800f18c <osKernelStart+0x48>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d109      	bne.n	800f17a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f166:	f7ff ffbf 	bl	800f0e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f16a:	4b08      	ldr	r3, [pc, #32]	@ (800f18c <osKernelStart+0x48>)
 800f16c:	2202      	movs	r2, #2
 800f16e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f170:	f001 f8ae 	bl	80102d0 <vTaskStartScheduler>
      stat = osOK;
 800f174:	2300      	movs	r3, #0
 800f176:	607b      	str	r3, [r7, #4]
 800f178:	e002      	b.n	800f180 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f17a:	2301      	movs	r3, #1
 800f17c:	425b      	negs	r3, r3
 800f17e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f180:	687b      	ldr	r3, [r7, #4]
}
 800f182:	0018      	movs	r0, r3
 800f184:	46bd      	mov	sp, r7
 800f186:	b002      	add	sp, #8
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	46c0      	nop			@ (mov r8, r8)
 800f18c:	20002968 	.word	0x20002968

0800f190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f190:	b5b0      	push	{r4, r5, r7, lr}
 800f192:	b08e      	sub	sp, #56	@ 0x38
 800f194:	af04      	add	r7, sp, #16
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f19c:	2300      	movs	r3, #0
 800f19e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1a0:	f3ef 8305 	mrs	r3, IPSR
 800f1a4:	617b      	str	r3, [r7, #20]
  return(result);
 800f1a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d000      	beq.n	800f1ae <osThreadNew+0x1e>
 800f1ac:	e082      	b.n	800f2b4 <osThreadNew+0x124>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d100      	bne.n	800f1b6 <osThreadNew+0x26>
 800f1b4:	e07e      	b.n	800f2b4 <osThreadNew+0x124>
    stack = configMINIMAL_STACK_SIZE;
 800f1b6:	2380      	movs	r3, #128	@ 0x80
 800f1b8:	005b      	lsls	r3, r3, #1
 800f1ba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f1bc:	2318      	movs	r3, #24
 800f1be:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	425b      	negs	r3, r3
 800f1c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d044      	beq.n	800f25a <osThreadNew+0xca>
      if (attr->name != NULL) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <osThreadNew+0x4e>
        name = attr->name;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	699b      	ldr	r3, [r3, #24]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <osThreadNew+0x5c>
        prio = (UBaseType_t)attr->priority;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d007      	beq.n	800f202 <osThreadNew+0x72>
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	2b38      	cmp	r3, #56	@ 0x38
 800f1f6:	d804      	bhi.n	800f202 <osThreadNew+0x72>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	4013      	ands	r3, r2
 800f200:	d001      	beq.n	800f206 <osThreadNew+0x76>
        return (NULL);
 800f202:	2300      	movs	r3, #0
 800f204:	e057      	b.n	800f2b6 <osThreadNew+0x126>
      }

      if (attr->stack_size > 0U) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	695b      	ldr	r3, [r3, #20]
 800f212:	089b      	lsrs	r3, r3, #2
 800f214:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00e      	beq.n	800f23c <osThreadNew+0xac>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	2ba7      	cmp	r3, #167	@ 0xa7
 800f224:	d90a      	bls.n	800f23c <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d006      	beq.n	800f23c <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	695b      	ldr	r3, [r3, #20]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d002      	beq.n	800f23c <osThreadNew+0xac>
        mem = 1;
 800f236:	2301      	movs	r3, #1
 800f238:	61bb      	str	r3, [r7, #24]
 800f23a:	e010      	b.n	800f25e <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10c      	bne.n	800f25e <osThreadNew+0xce>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d108      	bne.n	800f25e <osThreadNew+0xce>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d104      	bne.n	800f25e <osThreadNew+0xce>
          mem = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	61bb      	str	r3, [r7, #24]
 800f258:	e001      	b.n	800f25e <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d112      	bne.n	800f28a <osThreadNew+0xfa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f26c:	68bd      	ldr	r5, [r7, #8]
 800f26e:	6a3c      	ldr	r4, [r7, #32]
 800f270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	9302      	str	r3, [sp, #8]
 800f276:	9201      	str	r2, [sp, #4]
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	9300      	str	r3, [sp, #0]
 800f27c:	002b      	movs	r3, r5
 800f27e:	0022      	movs	r2, r4
 800f280:	f000 fe63 	bl	800ff4a <xTaskCreateStatic>
 800f284:	0003      	movs	r3, r0
 800f286:	613b      	str	r3, [r7, #16]
 800f288:	e014      	b.n	800f2b4 <osThreadNew+0x124>
      #endif
    }
    else {
      if (mem == 0) {
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d111      	bne.n	800f2b4 <osThreadNew+0x124>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f290:	6a3b      	ldr	r3, [r7, #32]
 800f292:	b29a      	uxth	r2, r3
 800f294:	68bc      	ldr	r4, [r7, #8]
 800f296:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	2310      	movs	r3, #16
 800f29c:	18fb      	adds	r3, r7, r3
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	0023      	movs	r3, r4
 800f2a6:	f000 fe97 	bl	800ffd8 <xTaskCreate>
 800f2aa:	0003      	movs	r3, r0
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d001      	beq.n	800f2b4 <osThreadNew+0x124>
            hTask = NULL;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f2b4:	693b      	ldr	r3, [r7, #16]
}
 800f2b6:	0018      	movs	r0, r3
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	b00a      	add	sp, #40	@ 0x28
 800f2bc:	bdb0      	pop	{r4, r5, r7, pc}

0800f2be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b084      	sub	sp, #16
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2c6:	f3ef 8305 	mrs	r3, IPSR
 800f2ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <osDelay+0x1c>
    stat = osErrorISR;
 800f2d2:	2306      	movs	r3, #6
 800f2d4:	425b      	negs	r3, r3
 800f2d6:	60fb      	str	r3, [r7, #12]
 800f2d8:	e008      	b.n	800f2ec <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d003      	beq.n	800f2ec <osDelay+0x2e>
      vTaskDelay(ticks);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	0018      	movs	r0, r3
 800f2e8:	f000 ffcc 	bl	8010284 <vTaskDelay>
    }
  }

  return (stat);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
}
 800f2ee:	0018      	movs	r0, r3
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	b004      	add	sp, #16
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	0018      	movs	r0, r3
 800f302:	f002 f84b 	bl	801139c <pvTimerGetTimerID>
 800f306:	0003      	movs	r3, r0
 800f308:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d005      	beq.n	800f31c <TimerCallback+0x26>
    callb->func (callb->arg);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	0018      	movs	r0, r3
 800f31a:	4790      	blx	r2
  }
}
 800f31c:	46c0      	nop			@ (mov r8, r8)
 800f31e:	46bd      	mov	sp, r7
 800f320:	b004      	add	sp, #16
 800f322:	bd80      	pop	{r7, pc}

0800f324 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f324:	b590      	push	{r4, r7, lr}
 800f326:	b08d      	sub	sp, #52	@ 0x34
 800f328:	af02      	add	r7, sp, #8
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	607a      	str	r2, [r7, #4]
 800f32e:	603b      	str	r3, [r7, #0]
 800f330:	240b      	movs	r4, #11
 800f332:	193b      	adds	r3, r7, r4
 800f334:	1c0a      	adds	r2, r1, #0
 800f336:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f338:	2300      	movs	r3, #0
 800f33a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f33c:	f3ef 8305 	mrs	r3, IPSR
 800f340:	613b      	str	r3, [r7, #16]
  return(result);
 800f342:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f344:	2b00      	cmp	r3, #0
 800f346:	d000      	beq.n	800f34a <osTimerNew+0x26>
 800f348:	e06b      	b.n	800f422 <osTimerNew+0xfe>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d100      	bne.n	800f352 <osTimerNew+0x2e>
 800f350:	e067      	b.n	800f422 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f352:	2008      	movs	r0, #8
 800f354:	f002 f96c 	bl	8011630 <pvPortMalloc>
 800f358:	0003      	movs	r3, r0
 800f35a:	617b      	str	r3, [r7, #20]

    if (callb != NULL) {
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d05f      	beq.n	800f422 <osTimerNew+0xfe>
      callb->func = func;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f36e:	193b      	adds	r3, r7, r4
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d102      	bne.n	800f37c <osTimerNew+0x58>
        reload = pdFALSE;
 800f376:	2300      	movs	r3, #0
 800f378:	61fb      	str	r3, [r7, #28]
 800f37a:	e001      	b.n	800f380 <osTimerNew+0x5c>
      } else {
        reload = pdTRUE;
 800f37c:	2301      	movs	r3, #1
 800f37e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f380:	2301      	movs	r3, #1
 800f382:	425b      	negs	r3, r3
 800f384:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f386:	2300      	movs	r3, #0
 800f388:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d01c      	beq.n	800f3ca <osTimerNew+0xa6>
        if (attr->name != NULL) {
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d002      	beq.n	800f39e <osTimerNew+0x7a>
          name = attr->name;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d006      	beq.n	800f3b4 <osTimerNew+0x90>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	2b2b      	cmp	r3, #43	@ 0x2b
 800f3ac:	d902      	bls.n	800f3b4 <osTimerNew+0x90>
          mem = 1;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	61bb      	str	r3, [r7, #24]
 800f3b2:	e00c      	b.n	800f3ce <osTimerNew+0xaa>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d108      	bne.n	800f3ce <osTimerNew+0xaa>
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d104      	bne.n	800f3ce <osTimerNew+0xaa>
            mem = 0;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	61bb      	str	r3, [r7, #24]
 800f3c8:	e001      	b.n	800f3ce <osTimerNew+0xaa>
          }
        }
      }
      else {
        mem = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d10e      	bne.n	800f3f2 <osTimerNew+0xce>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	6979      	ldr	r1, [r7, #20]
 800f3da:	69fa      	ldr	r2, [r7, #28]
 800f3dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	4b12      	ldr	r3, [pc, #72]	@ (800f42c <osTimerNew+0x108>)
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	000b      	movs	r3, r1
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	f001 fc97 	bl	8010d1a <xTimerCreateStatic>
 800f3ec:	0003      	movs	r3, r0
 800f3ee:	623b      	str	r3, [r7, #32]
 800f3f0:	e00d      	b.n	800f40e <osTimerNew+0xea>
        #endif
      }
      else {
        if (mem == 0) {
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10a      	bne.n	800f40e <osTimerNew+0xea>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f3f8:	6979      	ldr	r1, [r7, #20]
 800f3fa:	69fa      	ldr	r2, [r7, #28]
 800f3fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f42c <osTimerNew+0x108>)
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	000b      	movs	r3, r1
 800f404:	2101      	movs	r1, #1
 800f406:	f001 fc65 	bl	8010cd4 <xTimerCreate>
 800f40a:	0003      	movs	r3, r0
 800f40c:	623b      	str	r3, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f40e:	6a3b      	ldr	r3, [r7, #32]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d106      	bne.n	800f422 <osTimerNew+0xfe>
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <osTimerNew+0xfe>
        vPortFree (callb);
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	0018      	movs	r0, r3
 800f41e:	f002 f9b7 	bl	8011790 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f422:	6a3b      	ldr	r3, [r7, #32]
}
 800f424:	0018      	movs	r0, r3
 800f426:	46bd      	mov	sp, r7
 800f428:	b00b      	add	sp, #44	@ 0x2c
 800f42a:	bd90      	pop	{r4, r7, pc}
 800f42c:	0800f2f7 	.word	0x0800f2f7

0800f430 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f430:	b580      	push	{r7, lr}
 800f432:	b088      	sub	sp, #32
 800f434:	af02      	add	r7, sp, #8
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f43e:	f3ef 8305 	mrs	r3, IPSR
 800f442:	60fb      	str	r3, [r7, #12]
  return(result);
 800f444:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <osTimerStart+0x22>
    stat = osErrorISR;
 800f44a:	2306      	movs	r3, #6
 800f44c:	425b      	negs	r3, r3
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	e017      	b.n	800f482 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d103      	bne.n	800f460 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f458:	2304      	movs	r3, #4
 800f45a:	425b      	negs	r3, r3
 800f45c:	617b      	str	r3, [r7, #20]
 800f45e:	e010      	b.n	800f482 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	6938      	ldr	r0, [r7, #16]
 800f464:	2300      	movs	r3, #0
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	2300      	movs	r3, #0
 800f46a:	2104      	movs	r1, #4
 800f46c:	f001 fcb8 	bl	8010de0 <xTimerGenericCommand>
 800f470:	0003      	movs	r3, r0
 800f472:	2b01      	cmp	r3, #1
 800f474:	d102      	bne.n	800f47c <osTimerStart+0x4c>
      stat = osOK;
 800f476:	2300      	movs	r3, #0
 800f478:	617b      	str	r3, [r7, #20]
 800f47a:	e002      	b.n	800f482 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f47c:	2303      	movs	r3, #3
 800f47e:	425b      	negs	r3, r3
 800f480:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f482:	697b      	ldr	r3, [r7, #20]
}
 800f484:	0018      	movs	r0, r3
 800f486:	46bd      	mov	sp, r7
 800f488:	b006      	add	sp, #24
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4a06      	ldr	r2, [pc, #24]	@ (800f4b4 <vApplicationGetIdleTaskMemory+0x28>)
 800f49c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	4a05      	ldr	r2, [pc, #20]	@ (800f4b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f4a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2280      	movs	r2, #128	@ 0x80
 800f4a8:	0052      	lsls	r2, r2, #1
 800f4aa:	601a      	str	r2, [r3, #0]
}
 800f4ac:	46c0      	nop			@ (mov r8, r8)
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	b004      	add	sp, #16
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	2000296c 	.word	0x2000296c
 800f4b8:	20002a14 	.word	0x20002a14

0800f4bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	60f8      	str	r0, [r7, #12]
 800f4c4:	60b9      	str	r1, [r7, #8]
 800f4c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	4a06      	ldr	r2, [pc, #24]	@ (800f4e4 <vApplicationGetTimerTaskMemory+0x28>)
 800f4cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	4a05      	ldr	r2, [pc, #20]	@ (800f4e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800f4d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2280      	movs	r2, #128	@ 0x80
 800f4d8:	0092      	lsls	r2, r2, #2
 800f4da:	601a      	str	r2, [r3, #0]
}
 800f4dc:	46c0      	nop			@ (mov r8, r8)
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	b004      	add	sp, #16
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	20002e14 	.word	0x20002e14
 800f4e8:	20002ebc 	.word	0x20002ebc

0800f4ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3308      	adds	r3, #8
 800f4f8:	001a      	movs	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2201      	movs	r2, #1
 800f502:	4252      	negs	r2, r2
 800f504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	3308      	adds	r3, #8
 800f50a:	001a      	movs	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3308      	adds	r3, #8
 800f514:	001a      	movs	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f520:	46c0      	nop			@ (mov r8, r8)
 800f522:	46bd      	mov	sp, r7
 800f524:	b002      	add	sp, #8
 800f526:	bd80      	pop	{r7, pc}

0800f528 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f536:	46c0      	nop			@ (mov r8, r8)
 800f538:	46bd      	mov	sp, r7
 800f53a:	b002      	add	sp, #8
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b084      	sub	sp, #16
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	689a      	ldr	r2, [r3, #8]
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	1c5a      	adds	r2, r3, #1
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	601a      	str	r2, [r3, #0]
}
 800f57a:	46c0      	nop			@ (mov r8, r8)
 800f57c:	46bd      	mov	sp, r7
 800f57e:	b004      	add	sp, #16
 800f580:	bd80      	pop	{r7, pc}

0800f582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b084      	sub	sp, #16
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	3301      	adds	r3, #1
 800f596:	d103      	bne.n	800f5a0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	e00c      	b.n	800f5ba <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	3308      	adds	r3, #8
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	e002      	b.n	800f5ae <vListInsert+0x2c>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	60fb      	str	r3, [r7, #12]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d2f6      	bcs.n	800f5a8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	601a      	str	r2, [r3, #0]
}
 800f5e6:	46c0      	nop			@ (mov r8, r8)
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	b004      	add	sp, #16
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b084      	sub	sp, #16
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	6892      	ldr	r2, [r2, #8]
 800f604:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	6852      	ldr	r2, [r2, #4]
 800f60e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	429a      	cmp	r2, r3
 800f618:	d103      	bne.n	800f622 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	689a      	ldr	r2, [r3, #8]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	1e5a      	subs	r2, r3, #1
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
}
 800f636:	0018      	movs	r0, r3
 800f638:	46bd      	mov	sp, r7
 800f63a:	b004      	add	sp, #16
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b084      	sub	sp, #16
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d102      	bne.n	800f658 <xQueueGenericReset+0x1a>
 800f652:	b672      	cpsid	i
 800f654:	46c0      	nop			@ (mov r8, r8)
 800f656:	e7fd      	b.n	800f654 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800f658:	f001 ff52 	bl	8011500 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f668:	434b      	muls	r3, r1
 800f66a:	18d2      	adds	r2, r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f686:	1e59      	subs	r1, r3, #1
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f68c:	434b      	muls	r3, r1
 800f68e:	18d2      	adds	r2, r2, r3
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2244      	movs	r2, #68	@ 0x44
 800f698:	21ff      	movs	r1, #255	@ 0xff
 800f69a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2245      	movs	r2, #69	@ 0x45
 800f6a0:	21ff      	movs	r1, #255	@ 0xff
 800f6a2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10d      	bne.n	800f6c6 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d013      	beq.n	800f6da <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	3310      	adds	r3, #16
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f001 f862 	bl	8010780 <xTaskRemoveFromEventList>
 800f6bc:	1e03      	subs	r3, r0, #0
 800f6be:	d00c      	beq.n	800f6da <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f6c0:	f001 ff0e 	bl	80114e0 <vPortYield>
 800f6c4:	e009      	b.n	800f6da <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	3310      	adds	r3, #16
 800f6ca:	0018      	movs	r0, r3
 800f6cc:	f7ff ff0e 	bl	800f4ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	3324      	adds	r3, #36	@ 0x24
 800f6d4:	0018      	movs	r0, r3
 800f6d6:	f7ff ff09 	bl	800f4ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6da:	f001 ff23 	bl	8011524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6de:	2301      	movs	r3, #1
}
 800f6e0:	0018      	movs	r0, r3
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	b004      	add	sp, #16
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f6e8:	b590      	push	{r4, r7, lr}
 800f6ea:	b089      	sub	sp, #36	@ 0x24
 800f6ec:	af02      	add	r7, sp, #8
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
 800f6f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d102      	bne.n	800f702 <xQueueGenericCreateStatic+0x1a>
 800f6fc:	b672      	cpsid	i
 800f6fe:	46c0      	nop			@ (mov r8, r8)
 800f700:	e7fd      	b.n	800f6fe <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d102      	bne.n	800f70e <xQueueGenericCreateStatic+0x26>
 800f708:	b672      	cpsid	i
 800f70a:	46c0      	nop			@ (mov r8, r8)
 800f70c:	e7fd      	b.n	800f70a <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <xQueueGenericCreateStatic+0x32>
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <xQueueGenericCreateStatic+0x36>
 800f71a:	2301      	movs	r3, #1
 800f71c:	e000      	b.n	800f720 <xQueueGenericCreateStatic+0x38>
 800f71e:	2300      	movs	r3, #0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <xQueueGenericCreateStatic+0x42>
 800f724:	b672      	cpsid	i
 800f726:	46c0      	nop			@ (mov r8, r8)
 800f728:	e7fd      	b.n	800f726 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d102      	bne.n	800f736 <xQueueGenericCreateStatic+0x4e>
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <xQueueGenericCreateStatic+0x52>
 800f736:	2301      	movs	r3, #1
 800f738:	e000      	b.n	800f73c <xQueueGenericCreateStatic+0x54>
 800f73a:	2300      	movs	r3, #0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d102      	bne.n	800f746 <xQueueGenericCreateStatic+0x5e>
 800f740:	b672      	cpsid	i
 800f742:	46c0      	nop			@ (mov r8, r8)
 800f744:	e7fd      	b.n	800f742 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f746:	2350      	movs	r3, #80	@ 0x50
 800f748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b50      	cmp	r3, #80	@ 0x50
 800f74e:	d002      	beq.n	800f756 <xQueueGenericCreateStatic+0x6e>
 800f750:	b672      	cpsid	i
 800f752:	46c0      	nop			@ (mov r8, r8)
 800f754:	e7fd      	b.n	800f752 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f756:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00e      	beq.n	800f780 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2246      	movs	r2, #70	@ 0x46
 800f766:	2101      	movs	r1, #1
 800f768:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f76a:	2328      	movs	r3, #40	@ 0x28
 800f76c:	18fb      	adds	r3, r7, r3
 800f76e:	781c      	ldrb	r4, [r3, #0]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	68b9      	ldr	r1, [r7, #8]
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	0023      	movs	r3, r4
 800f77c:	f000 f838 	bl	800f7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f780:	697b      	ldr	r3, [r7, #20]
	}
 800f782:	0018      	movs	r0, r3
 800f784:	46bd      	mov	sp, r7
 800f786:	b007      	add	sp, #28
 800f788:	bd90      	pop	{r4, r7, pc}

0800f78a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f78a:	b590      	push	{r4, r7, lr}
 800f78c:	b08b      	sub	sp, #44	@ 0x2c
 800f78e:	af02      	add	r7, sp, #8
 800f790:	60f8      	str	r0, [r7, #12]
 800f792:	60b9      	str	r1, [r7, #8]
 800f794:	1dfb      	adds	r3, r7, #7
 800f796:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d102      	bne.n	800f7a4 <xQueueGenericCreate+0x1a>
 800f79e:	b672      	cpsid	i
 800f7a0:	46c0      	nop			@ (mov r8, r8)
 800f7a2:	e7fd      	b.n	800f7a0 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	68ba      	ldr	r2, [r7, #8]
 800f7a8:	4353      	muls	r3, r2
 800f7aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	3350      	adds	r3, #80	@ 0x50
 800f7b0:	0018      	movs	r0, r3
 800f7b2:	f001 ff3d 	bl	8011630 <pvPortMalloc>
 800f7b6:	0003      	movs	r3, r0
 800f7b8:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d012      	beq.n	800f7e6 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	3350      	adds	r3, #80	@ 0x50
 800f7c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	2246      	movs	r2, #70	@ 0x46
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f7d2:	1dfb      	adds	r3, r7, #7
 800f7d4:	781c      	ldrb	r4, [r3, #0]
 800f7d6:	697a      	ldr	r2, [r7, #20]
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	0023      	movs	r3, r4
 800f7e2:	f000 f805 	bl	800f7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f7e6:	69bb      	ldr	r3, [r7, #24]
	}
 800f7e8:	0018      	movs	r0, r3
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	b009      	add	sp, #36	@ 0x24
 800f7ee:	bd90      	pop	{r4, r7, pc}

0800f7f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	001a      	movs	r2, r3
 800f7fe:	1cfb      	adds	r3, r7, #3
 800f800:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d103      	bne.n	800f810 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	69ba      	ldr	r2, [r7, #24]
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	e002      	b.n	800f816 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	2101      	movs	r1, #1
 800f826:	0018      	movs	r0, r3
 800f828:	f7ff ff09 	bl	800f63e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	1cfa      	adds	r2, r7, #3
 800f830:	214c      	movs	r1, #76	@ 0x4c
 800f832:	7812      	ldrb	r2, [r2, #0]
 800f834:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f836:	46c0      	nop			@ (mov r8, r8)
 800f838:	46bd      	mov	sp, r7
 800f83a:	b004      	add	sp, #16
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b08a      	sub	sp, #40	@ 0x28
 800f842:	af00      	add	r7, sp, #0
 800f844:	60f8      	str	r0, [r7, #12]
 800f846:	60b9      	str	r1, [r7, #8]
 800f848:	607a      	str	r2, [r7, #4]
 800f84a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f84c:	2300      	movs	r3, #0
 800f84e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d102      	bne.n	800f860 <xQueueGenericSend+0x22>
 800f85a:	b672      	cpsid	i
 800f85c:	46c0      	nop			@ (mov r8, r8)
 800f85e:	e7fd      	b.n	800f85c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d103      	bne.n	800f86e <xQueueGenericSend+0x30>
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d101      	bne.n	800f872 <xQueueGenericSend+0x34>
 800f86e:	2301      	movs	r3, #1
 800f870:	e000      	b.n	800f874 <xQueueGenericSend+0x36>
 800f872:	2300      	movs	r3, #0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d102      	bne.n	800f87e <xQueueGenericSend+0x40>
 800f878:	b672      	cpsid	i
 800f87a:	46c0      	nop			@ (mov r8, r8)
 800f87c:	e7fd      	b.n	800f87a <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b02      	cmp	r3, #2
 800f882:	d103      	bne.n	800f88c <xQueueGenericSend+0x4e>
 800f884:	6a3b      	ldr	r3, [r7, #32]
 800f886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d101      	bne.n	800f890 <xQueueGenericSend+0x52>
 800f88c:	2301      	movs	r3, #1
 800f88e:	e000      	b.n	800f892 <xQueueGenericSend+0x54>
 800f890:	2300      	movs	r3, #0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d102      	bne.n	800f89c <xQueueGenericSend+0x5e>
 800f896:	b672      	cpsid	i
 800f898:	46c0      	nop			@ (mov r8, r8)
 800f89a:	e7fd      	b.n	800f898 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f89c:	f001 f90c 	bl	8010ab8 <xTaskGetSchedulerState>
 800f8a0:	1e03      	subs	r3, r0, #0
 800f8a2:	d102      	bne.n	800f8aa <xQueueGenericSend+0x6c>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <xQueueGenericSend+0x70>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e000      	b.n	800f8b0 <xQueueGenericSend+0x72>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d102      	bne.n	800f8ba <xQueueGenericSend+0x7c>
 800f8b4:	b672      	cpsid	i
 800f8b6:	46c0      	nop			@ (mov r8, r8)
 800f8b8:	e7fd      	b.n	800f8b6 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8ba:	f001 fe21 	bl	8011500 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8be:	6a3b      	ldr	r3, [r7, #32]
 800f8c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d302      	bcc.n	800f8d0 <xQueueGenericSend+0x92>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d11e      	bne.n	800f90e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	68b9      	ldr	r1, [r7, #8]
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	0018      	movs	r0, r3
 800f8d8:	f000 f9be 	bl	800fc58 <prvCopyDataToQueue>
 800f8dc:	0003      	movs	r3, r0
 800f8de:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d009      	beq.n	800f8fc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	3324      	adds	r3, #36	@ 0x24
 800f8ec:	0018      	movs	r0, r3
 800f8ee:	f000 ff47 	bl	8010780 <xTaskRemoveFromEventList>
 800f8f2:	1e03      	subs	r3, r0, #0
 800f8f4:	d007      	beq.n	800f906 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f8f6:	f001 fdf3 	bl	80114e0 <vPortYield>
 800f8fa:	e004      	b.n	800f906 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f902:	f001 fded 	bl	80114e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f906:	f001 fe0d 	bl	8011524 <vPortExitCritical>
				return pdPASS;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e05b      	b.n	800f9c6 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d103      	bne.n	800f91c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f914:	f001 fe06 	bl	8011524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	e054      	b.n	800f9c6 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d106      	bne.n	800f930 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f922:	2314      	movs	r3, #20
 800f924:	18fb      	adds	r3, r7, r3
 800f926:	0018      	movs	r0, r3
 800f928:	f000 ff88 	bl	801083c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f92c:	2301      	movs	r3, #1
 800f92e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f930:	f001 fdf8 	bl	8011524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f934:	f000 fd2c 	bl	8010390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f938:	f001 fde2 	bl	8011500 <vPortEnterCritical>
 800f93c:	6a3b      	ldr	r3, [r7, #32]
 800f93e:	2244      	movs	r2, #68	@ 0x44
 800f940:	5c9b      	ldrb	r3, [r3, r2]
 800f942:	b25b      	sxtb	r3, r3
 800f944:	3301      	adds	r3, #1
 800f946:	d103      	bne.n	800f950 <xQueueGenericSend+0x112>
 800f948:	6a3b      	ldr	r3, [r7, #32]
 800f94a:	2244      	movs	r2, #68	@ 0x44
 800f94c:	2100      	movs	r1, #0
 800f94e:	5499      	strb	r1, [r3, r2]
 800f950:	6a3b      	ldr	r3, [r7, #32]
 800f952:	2245      	movs	r2, #69	@ 0x45
 800f954:	5c9b      	ldrb	r3, [r3, r2]
 800f956:	b25b      	sxtb	r3, r3
 800f958:	3301      	adds	r3, #1
 800f95a:	d103      	bne.n	800f964 <xQueueGenericSend+0x126>
 800f95c:	6a3b      	ldr	r3, [r7, #32]
 800f95e:	2245      	movs	r2, #69	@ 0x45
 800f960:	2100      	movs	r1, #0
 800f962:	5499      	strb	r1, [r3, r2]
 800f964:	f001 fdde 	bl	8011524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f968:	1d3a      	adds	r2, r7, #4
 800f96a:	2314      	movs	r3, #20
 800f96c:	18fb      	adds	r3, r7, r3
 800f96e:	0011      	movs	r1, r2
 800f970:	0018      	movs	r0, r3
 800f972:	f000 ff77 	bl	8010864 <xTaskCheckForTimeOut>
 800f976:	1e03      	subs	r3, r0, #0
 800f978:	d11e      	bne.n	800f9b8 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	0018      	movs	r0, r3
 800f97e:	f000 fa70 	bl	800fe62 <prvIsQueueFull>
 800f982:	1e03      	subs	r3, r0, #0
 800f984:	d011      	beq.n	800f9aa <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	3310      	adds	r3, #16
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	0011      	movs	r1, r2
 800f98e:	0018      	movs	r0, r3
 800f990:	f000 feae 	bl	80106f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f994:	6a3b      	ldr	r3, [r7, #32]
 800f996:	0018      	movs	r0, r3
 800f998:	f000 f9ef 	bl	800fd7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f99c:	f000 fd04 	bl	80103a8 <xTaskResumeAll>
 800f9a0:	1e03      	subs	r3, r0, #0
 800f9a2:	d18a      	bne.n	800f8ba <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800f9a4:	f001 fd9c 	bl	80114e0 <vPortYield>
 800f9a8:	e787      	b.n	800f8ba <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	0018      	movs	r0, r3
 800f9ae:	f000 f9e4 	bl	800fd7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9b2:	f000 fcf9 	bl	80103a8 <xTaskResumeAll>
 800f9b6:	e780      	b.n	800f8ba <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f9b8:	6a3b      	ldr	r3, [r7, #32]
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	f000 f9dd 	bl	800fd7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9c0:	f000 fcf2 	bl	80103a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f9c4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f9c6:	0018      	movs	r0, r3
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	b00a      	add	sp, #40	@ 0x28
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f9ce:	b590      	push	{r4, r7, lr}
 800f9d0:	b08b      	sub	sp, #44	@ 0x2c
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	60f8      	str	r0, [r7, #12]
 800f9d6:	60b9      	str	r1, [r7, #8]
 800f9d8:	607a      	str	r2, [r7, #4]
 800f9da:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f9e0:	6a3b      	ldr	r3, [r7, #32]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d102      	bne.n	800f9ec <xQueueGenericSendFromISR+0x1e>
 800f9e6:	b672      	cpsid	i
 800f9e8:	46c0      	nop			@ (mov r8, r8)
 800f9ea:	e7fd      	b.n	800f9e8 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d103      	bne.n	800f9fa <xQueueGenericSendFromISR+0x2c>
 800f9f2:	6a3b      	ldr	r3, [r7, #32]
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d101      	bne.n	800f9fe <xQueueGenericSendFromISR+0x30>
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e000      	b.n	800fa00 <xQueueGenericSendFromISR+0x32>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d102      	bne.n	800fa0a <xQueueGenericSendFromISR+0x3c>
 800fa04:	b672      	cpsid	i
 800fa06:	46c0      	nop			@ (mov r8, r8)
 800fa08:	e7fd      	b.n	800fa06 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b02      	cmp	r3, #2
 800fa0e:	d103      	bne.n	800fa18 <xQueueGenericSendFromISR+0x4a>
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d101      	bne.n	800fa1c <xQueueGenericSendFromISR+0x4e>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e000      	b.n	800fa1e <xQueueGenericSendFromISR+0x50>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d102      	bne.n	800fa28 <xQueueGenericSendFromISR+0x5a>
 800fa22:	b672      	cpsid	i
 800fa24:	46c0      	nop			@ (mov r8, r8)
 800fa26:	e7fd      	b.n	800fa24 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa28:	f001 fd94 	bl	8011554 <ulSetInterruptMaskFromISR>
 800fa2c:	0003      	movs	r3, r0
 800fa2e:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa34:	6a3b      	ldr	r3, [r7, #32]
 800fa36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d302      	bcc.n	800fa42 <xQueueGenericSendFromISR+0x74>
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d131      	bne.n	800faa6 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa42:	241b      	movs	r4, #27
 800fa44:	193b      	adds	r3, r7, r4
 800fa46:	6a3a      	ldr	r2, [r7, #32]
 800fa48:	2145      	movs	r1, #69	@ 0x45
 800fa4a:	5c52      	ldrb	r2, [r2, r1]
 800fa4c:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa52:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	0018      	movs	r0, r3
 800fa5c:	f000 f8fc 	bl	800fc58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa60:	193b      	adds	r3, r7, r4
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	b25b      	sxtb	r3, r3
 800fa66:	3301      	adds	r3, #1
 800fa68:	d111      	bne.n	800fa8e <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d016      	beq.n	800faa0 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	3324      	adds	r3, #36	@ 0x24
 800fa76:	0018      	movs	r0, r3
 800fa78:	f000 fe82 	bl	8010780 <xTaskRemoveFromEventList>
 800fa7c:	1e03      	subs	r3, r0, #0
 800fa7e:	d00f      	beq.n	800faa0 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00c      	beq.n	800faa0 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	601a      	str	r2, [r3, #0]
 800fa8c:	e008      	b.n	800faa0 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fa8e:	231b      	movs	r3, #27
 800fa90:	18fb      	adds	r3, r7, r3
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	3301      	adds	r3, #1
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	b259      	sxtb	r1, r3
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	2245      	movs	r2, #69	@ 0x45
 800fa9e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800faa0:	2301      	movs	r3, #1
 800faa2:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800faa4:	e001      	b.n	800faaa <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800faa6:	2300      	movs	r3, #0
 800faa8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	0018      	movs	r0, r3
 800faae:	f001 fd57 	bl	8011560 <vClearInterruptMaskFromISR>

	return xReturn;
 800fab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fab4:	0018      	movs	r0, r3
 800fab6:	46bd      	mov	sp, r7
 800fab8:	b00b      	add	sp, #44	@ 0x2c
 800faba:	bd90      	pop	{r4, r7, pc}

0800fabc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b08a      	sub	sp, #40	@ 0x28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fac8:	2300      	movs	r3, #0
 800faca:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fad0:	6a3b      	ldr	r3, [r7, #32]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d102      	bne.n	800fadc <xQueueReceive+0x20>
 800fad6:	b672      	cpsid	i
 800fad8:	46c0      	nop			@ (mov r8, r8)
 800fada:	e7fd      	b.n	800fad8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d103      	bne.n	800faea <xQueueReceive+0x2e>
 800fae2:	6a3b      	ldr	r3, [r7, #32]
 800fae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <xQueueReceive+0x32>
 800faea:	2301      	movs	r3, #1
 800faec:	e000      	b.n	800faf0 <xQueueReceive+0x34>
 800faee:	2300      	movs	r3, #0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <xQueueReceive+0x3e>
 800faf4:	b672      	cpsid	i
 800faf6:	46c0      	nop			@ (mov r8, r8)
 800faf8:	e7fd      	b.n	800faf6 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fafa:	f000 ffdd 	bl	8010ab8 <xTaskGetSchedulerState>
 800fafe:	1e03      	subs	r3, r0, #0
 800fb00:	d102      	bne.n	800fb08 <xQueueReceive+0x4c>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d101      	bne.n	800fb0c <xQueueReceive+0x50>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e000      	b.n	800fb0e <xQueueReceive+0x52>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d102      	bne.n	800fb18 <xQueueReceive+0x5c>
 800fb12:	b672      	cpsid	i
 800fb14:	46c0      	nop			@ (mov r8, r8)
 800fb16:	e7fd      	b.n	800fb14 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb18:	f001 fcf2 	bl	8011500 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb20:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d01a      	beq.n	800fb5e <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	6a3b      	ldr	r3, [r7, #32]
 800fb2c:	0011      	movs	r1, r2
 800fb2e:	0018      	movs	r0, r3
 800fb30:	f000 f8fd 	bl	800fd2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	1e5a      	subs	r2, r3, #1
 800fb38:	6a3b      	ldr	r3, [r7, #32]
 800fb3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	691b      	ldr	r3, [r3, #16]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d008      	beq.n	800fb56 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	3310      	adds	r3, #16
 800fb48:	0018      	movs	r0, r3
 800fb4a:	f000 fe19 	bl	8010780 <xTaskRemoveFromEventList>
 800fb4e:	1e03      	subs	r3, r0, #0
 800fb50:	d001      	beq.n	800fb56 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb52:	f001 fcc5 	bl	80114e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb56:	f001 fce5 	bl	8011524 <vPortExitCritical>
				return pdPASS;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e062      	b.n	800fc24 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d103      	bne.n	800fb6c <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb64:	f001 fcde 	bl	8011524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	e05b      	b.n	800fc24 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d106      	bne.n	800fb80 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb72:	2314      	movs	r3, #20
 800fb74:	18fb      	adds	r3, r7, r3
 800fb76:	0018      	movs	r0, r3
 800fb78:	f000 fe60 	bl	801083c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb80:	f001 fcd0 	bl	8011524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb84:	f000 fc04 	bl	8010390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb88:	f001 fcba 	bl	8011500 <vPortEnterCritical>
 800fb8c:	6a3b      	ldr	r3, [r7, #32]
 800fb8e:	2244      	movs	r2, #68	@ 0x44
 800fb90:	5c9b      	ldrb	r3, [r3, r2]
 800fb92:	b25b      	sxtb	r3, r3
 800fb94:	3301      	adds	r3, #1
 800fb96:	d103      	bne.n	800fba0 <xQueueReceive+0xe4>
 800fb98:	6a3b      	ldr	r3, [r7, #32]
 800fb9a:	2244      	movs	r2, #68	@ 0x44
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	5499      	strb	r1, [r3, r2]
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	2245      	movs	r2, #69	@ 0x45
 800fba4:	5c9b      	ldrb	r3, [r3, r2]
 800fba6:	b25b      	sxtb	r3, r3
 800fba8:	3301      	adds	r3, #1
 800fbaa:	d103      	bne.n	800fbb4 <xQueueReceive+0xf8>
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	2245      	movs	r2, #69	@ 0x45
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	5499      	strb	r1, [r3, r2]
 800fbb4:	f001 fcb6 	bl	8011524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbb8:	1d3a      	adds	r2, r7, #4
 800fbba:	2314      	movs	r3, #20
 800fbbc:	18fb      	adds	r3, r7, r3
 800fbbe:	0011      	movs	r1, r2
 800fbc0:	0018      	movs	r0, r3
 800fbc2:	f000 fe4f 	bl	8010864 <xTaskCheckForTimeOut>
 800fbc6:	1e03      	subs	r3, r0, #0
 800fbc8:	d11e      	bne.n	800fc08 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbca:	6a3b      	ldr	r3, [r7, #32]
 800fbcc:	0018      	movs	r0, r3
 800fbce:	f000 f932 	bl	800fe36 <prvIsQueueEmpty>
 800fbd2:	1e03      	subs	r3, r0, #0
 800fbd4:	d011      	beq.n	800fbfa <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbd6:	6a3b      	ldr	r3, [r7, #32]
 800fbd8:	3324      	adds	r3, #36	@ 0x24
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	0011      	movs	r1, r2
 800fbde:	0018      	movs	r0, r3
 800fbe0:	f000 fd86 	bl	80106f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbe4:	6a3b      	ldr	r3, [r7, #32]
 800fbe6:	0018      	movs	r0, r3
 800fbe8:	f000 f8c7 	bl	800fd7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbec:	f000 fbdc 	bl	80103a8 <xTaskResumeAll>
 800fbf0:	1e03      	subs	r3, r0, #0
 800fbf2:	d191      	bne.n	800fb18 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800fbf4:	f001 fc74 	bl	80114e0 <vPortYield>
 800fbf8:	e78e      	b.n	800fb18 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fbfa:	6a3b      	ldr	r3, [r7, #32]
 800fbfc:	0018      	movs	r0, r3
 800fbfe:	f000 f8bc 	bl	800fd7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc02:	f000 fbd1 	bl	80103a8 <xTaskResumeAll>
 800fc06:	e787      	b.n	800fb18 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	0018      	movs	r0, r3
 800fc0c:	f000 f8b5 	bl	800fd7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc10:	f000 fbca 	bl	80103a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	0018      	movs	r0, r3
 800fc18:	f000 f90d 	bl	800fe36 <prvIsQueueEmpty>
 800fc1c:	1e03      	subs	r3, r0, #0
 800fc1e:	d100      	bne.n	800fc22 <xQueueReceive+0x166>
 800fc20:	e77a      	b.n	800fb18 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc24:	0018      	movs	r0, r3
 800fc26:	46bd      	mov	sp, r7
 800fc28:	b00a      	add	sp, #40	@ 0x28
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d102      	bne.n	800fc40 <uxQueueMessagesWaiting+0x14>
 800fc3a:	b672      	cpsid	i
 800fc3c:	46c0      	nop			@ (mov r8, r8)
 800fc3e:	e7fd      	b.n	800fc3c <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800fc40:	f001 fc5e 	bl	8011500 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc48:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800fc4a:	f001 fc6b 	bl	8011524 <vPortExitCritical>

	return uxReturn;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800fc50:	0018      	movs	r0, r3
 800fc52:	46bd      	mov	sp, r7
 800fc54:	b004      	add	sp, #16
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b086      	sub	sp, #24
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fc64:	2300      	movs	r3, #0
 800fc66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d10e      	bne.n	800fc94 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d14e      	bne.n	800fd1c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	0018      	movs	r0, r3
 800fc84:	f000 ff34 	bl	8010af0 <xTaskPriorityDisinherit>
 800fc88:	0003      	movs	r3, r0
 800fc8a:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	609a      	str	r2, [r3, #8]
 800fc92:	e043      	b.n	800fd1c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d119      	bne.n	800fcce <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6858      	ldr	r0, [r3, #4]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	0019      	movs	r1, r3
 800fca6:	f003 fa11 	bl	80130cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	685a      	ldr	r2, [r3, #4]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcb2:	18d2      	adds	r2, r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d32b      	bcc.n	800fd1c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	605a      	str	r2, [r3, #4]
 800fccc:	e026      	b.n	800fd1c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	68d8      	ldr	r0, [r3, #12]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	0019      	movs	r1, r3
 800fcda:	f003 f9f7 	bl	80130cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fce6:	425b      	negs	r3, r3
 800fce8:	18d2      	adds	r2, r2, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	68da      	ldr	r2, [r3, #12]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d207      	bcs.n	800fd0a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	689a      	ldr	r2, [r3, #8]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd02:	425b      	negs	r3, r3
 800fd04:	18d2      	adds	r2, r2, r3
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b02      	cmp	r3, #2
 800fd0e:	d105      	bne.n	800fd1c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d002      	beq.n	800fd1c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fd24:	697b      	ldr	r3, [r7, #20]
}
 800fd26:	0018      	movs	r0, r3
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	b006      	add	sp, #24
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b082      	sub	sp, #8
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d018      	beq.n	800fd72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	68da      	ldr	r2, [r3, #12]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd48:	18d2      	adds	r2, r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	68da      	ldr	r2, [r3, #12]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d303      	bcc.n	800fd62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	68d9      	ldr	r1, [r3, #12]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	0018      	movs	r0, r3
 800fd6e:	f003 f9ad 	bl	80130cc <memcpy>
	}
}
 800fd72:	46c0      	nop			@ (mov r8, r8)
 800fd74:	46bd      	mov	sp, r7
 800fd76:	b002      	add	sp, #8
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fd82:	f001 fbbd 	bl	8011500 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fd86:	230f      	movs	r3, #15
 800fd88:	18fb      	adds	r3, r7, r3
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	2145      	movs	r1, #69	@ 0x45
 800fd8e:	5c52      	ldrb	r2, [r2, r1]
 800fd90:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd92:	e013      	b.n	800fdbc <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d016      	beq.n	800fdca <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3324      	adds	r3, #36	@ 0x24
 800fda0:	0018      	movs	r0, r3
 800fda2:	f000 fced 	bl	8010780 <xTaskRemoveFromEventList>
 800fda6:	1e03      	subs	r3, r0, #0
 800fda8:	d001      	beq.n	800fdae <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fdaa:	f000 fdad 	bl	8010908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fdae:	210f      	movs	r1, #15
 800fdb0:	187b      	adds	r3, r7, r1
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	187b      	adds	r3, r7, r1
 800fdba:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fdbc:	230f      	movs	r3, #15
 800fdbe:	18fb      	adds	r3, r7, r3
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	b25b      	sxtb	r3, r3
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	dce5      	bgt.n	800fd94 <prvUnlockQueue+0x1a>
 800fdc8:	e000      	b.n	800fdcc <prvUnlockQueue+0x52>
					break;
 800fdca:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2245      	movs	r2, #69	@ 0x45
 800fdd0:	21ff      	movs	r1, #255	@ 0xff
 800fdd2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800fdd4:	f001 fba6 	bl	8011524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fdd8:	f001 fb92 	bl	8011500 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fddc:	230e      	movs	r3, #14
 800fdde:	18fb      	adds	r3, r7, r3
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	2144      	movs	r1, #68	@ 0x44
 800fde4:	5c52      	ldrb	r2, [r2, r1]
 800fde6:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fde8:	e013      	b.n	800fe12 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d016      	beq.n	800fe20 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3310      	adds	r3, #16
 800fdf6:	0018      	movs	r0, r3
 800fdf8:	f000 fcc2 	bl	8010780 <xTaskRemoveFromEventList>
 800fdfc:	1e03      	subs	r3, r0, #0
 800fdfe:	d001      	beq.n	800fe04 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800fe00:	f000 fd82 	bl	8010908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fe04:	210e      	movs	r1, #14
 800fe06:	187b      	adds	r3, r7, r1
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	b2da      	uxtb	r2, r3
 800fe0e:	187b      	adds	r3, r7, r1
 800fe10:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe12:	230e      	movs	r3, #14
 800fe14:	18fb      	adds	r3, r7, r3
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	b25b      	sxtb	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	dce5      	bgt.n	800fdea <prvUnlockQueue+0x70>
 800fe1e:	e000      	b.n	800fe22 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800fe20:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2244      	movs	r2, #68	@ 0x44
 800fe26:	21ff      	movs	r1, #255	@ 0xff
 800fe28:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800fe2a:	f001 fb7b 	bl	8011524 <vPortExitCritical>
}
 800fe2e:	46c0      	nop			@ (mov r8, r8)
 800fe30:	46bd      	mov	sp, r7
 800fe32:	b004      	add	sp, #16
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b084      	sub	sp, #16
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe3e:	f001 fb5f 	bl	8011500 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d102      	bne.n	800fe50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	60fb      	str	r3, [r7, #12]
 800fe4e:	e001      	b.n	800fe54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fe50:	2300      	movs	r3, #0
 800fe52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fe54:	f001 fb66 	bl	8011524 <vPortExitCritical>

	return xReturn;
 800fe58:	68fb      	ldr	r3, [r7, #12]
}
 800fe5a:	0018      	movs	r0, r3
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	b004      	add	sp, #16
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b084      	sub	sp, #16
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe6a:	f001 fb49 	bl	8011500 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d102      	bne.n	800fe80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	60fb      	str	r3, [r7, #12]
 800fe7e:	e001      	b.n	800fe84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fe80:	2300      	movs	r3, #0
 800fe82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fe84:	f001 fb4e 	bl	8011524 <vPortExitCritical>

	return xReturn;
 800fe88:	68fb      	ldr	r3, [r7, #12]
}
 800fe8a:	0018      	movs	r0, r3
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	b004      	add	sp, #16
 800fe90:	bd80      	pop	{r7, pc}
	...

0800fe94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe9e:	2300      	movs	r3, #0
 800fea0:	60fb      	str	r3, [r7, #12]
 800fea2:	e015      	b.n	800fed0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fea4:	4b0e      	ldr	r3, [pc, #56]	@ (800fee0 <vQueueAddToRegistry+0x4c>)
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	00d2      	lsls	r2, r2, #3
 800feaa:	58d3      	ldr	r3, [r2, r3]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d10c      	bne.n	800feca <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800feb0:	4b0b      	ldr	r3, [pc, #44]	@ (800fee0 <vQueueAddToRegistry+0x4c>)
 800feb2:	68fa      	ldr	r2, [r7, #12]
 800feb4:	00d2      	lsls	r2, r2, #3
 800feb6:	6839      	ldr	r1, [r7, #0]
 800feb8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800feba:	4a09      	ldr	r2, [pc, #36]	@ (800fee0 <vQueueAddToRegistry+0x4c>)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	00db      	lsls	r3, r3, #3
 800fec0:	18d3      	adds	r3, r2, r3
 800fec2:	3304      	adds	r3, #4
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fec8:	e006      	b.n	800fed8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	3301      	adds	r3, #1
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2b07      	cmp	r3, #7
 800fed4:	d9e6      	bls.n	800fea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fed6:	46c0      	nop			@ (mov r8, r8)
 800fed8:	46c0      	nop			@ (mov r8, r8)
 800feda:	46bd      	mov	sp, r7
 800fedc:	b004      	add	sp, #16
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	200036bc 	.word	0x200036bc

0800fee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b086      	sub	sp, #24
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fef4:	f001 fb04 	bl	8011500 <vPortEnterCritical>
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	2244      	movs	r2, #68	@ 0x44
 800fefc:	5c9b      	ldrb	r3, [r3, r2]
 800fefe:	b25b      	sxtb	r3, r3
 800ff00:	3301      	adds	r3, #1
 800ff02:	d103      	bne.n	800ff0c <vQueueWaitForMessageRestricted+0x28>
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	2244      	movs	r2, #68	@ 0x44
 800ff08:	2100      	movs	r1, #0
 800ff0a:	5499      	strb	r1, [r3, r2]
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	2245      	movs	r2, #69	@ 0x45
 800ff10:	5c9b      	ldrb	r3, [r3, r2]
 800ff12:	b25b      	sxtb	r3, r3
 800ff14:	3301      	adds	r3, #1
 800ff16:	d103      	bne.n	800ff20 <vQueueWaitForMessageRestricted+0x3c>
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2245      	movs	r2, #69	@ 0x45
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	5499      	strb	r1, [r3, r2]
 800ff20:	f001 fb00 	bl	8011524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d106      	bne.n	800ff3a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	3324      	adds	r3, #36	@ 0x24
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	68b9      	ldr	r1, [r7, #8]
 800ff34:	0018      	movs	r0, r3
 800ff36:	f000 fbfb 	bl	8010730 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	0018      	movs	r0, r3
 800ff3e:	f7ff ff1c 	bl	800fd7a <prvUnlockQueue>
	}
 800ff42:	46c0      	nop			@ (mov r8, r8)
 800ff44:	46bd      	mov	sp, r7
 800ff46:	b006      	add	sp, #24
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ff4a:	b590      	push	{r4, r7, lr}
 800ff4c:	b08d      	sub	sp, #52	@ 0x34
 800ff4e:	af04      	add	r7, sp, #16
 800ff50:	60f8      	str	r0, [r7, #12]
 800ff52:	60b9      	str	r1, [r7, #8]
 800ff54:	607a      	str	r2, [r7, #4]
 800ff56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ff58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d102      	bne.n	800ff64 <xTaskCreateStatic+0x1a>
 800ff5e:	b672      	cpsid	i
 800ff60:	46c0      	nop			@ (mov r8, r8)
 800ff62:	e7fd      	b.n	800ff60 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800ff64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d102      	bne.n	800ff70 <xTaskCreateStatic+0x26>
 800ff6a:	b672      	cpsid	i
 800ff6c:	46c0      	nop			@ (mov r8, r8)
 800ff6e:	e7fd      	b.n	800ff6c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ff70:	23a8      	movs	r3, #168	@ 0xa8
 800ff72:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	2ba8      	cmp	r3, #168	@ 0xa8
 800ff78:	d002      	beq.n	800ff80 <xTaskCreateStatic+0x36>
 800ff7a:	b672      	cpsid	i
 800ff7c:	46c0      	nop			@ (mov r8, r8)
 800ff7e:	e7fd      	b.n	800ff7c <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ff80:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ff82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d020      	beq.n	800ffca <xTaskCreateStatic+0x80>
 800ff88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d01d      	beq.n	800ffca <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff90:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	22a5      	movs	r2, #165	@ 0xa5
 800ff9c:	2102      	movs	r1, #2
 800ff9e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ffa0:	683c      	ldr	r4, [r7, #0]
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	68b9      	ldr	r1, [r7, #8]
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	9303      	str	r3, [sp, #12]
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	9302      	str	r3, [sp, #8]
 800ffb0:	2318      	movs	r3, #24
 800ffb2:	18fb      	adds	r3, r7, r3
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb8:	9300      	str	r3, [sp, #0]
 800ffba:	0023      	movs	r3, r4
 800ffbc:	f000 f858 	bl	8010070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	0018      	movs	r0, r3
 800ffc4:	f000 f8f6 	bl	80101b4 <prvAddNewTaskToReadyList>
 800ffc8:	e001      	b.n	800ffce <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ffce:	69bb      	ldr	r3, [r7, #24]
	}
 800ffd0:	0018      	movs	r0, r3
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	b009      	add	sp, #36	@ 0x24
 800ffd6:	bd90      	pop	{r4, r7, pc}

0800ffd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ffd8:	b590      	push	{r4, r7, lr}
 800ffda:	b08d      	sub	sp, #52	@ 0x34
 800ffdc:	af04      	add	r7, sp, #16
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	1dbb      	adds	r3, r7, #6
 800ffe6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ffe8:	1dbb      	adds	r3, r7, #6
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	0018      	movs	r0, r3
 800fff0:	f001 fb1e 	bl	8011630 <pvPortMalloc>
 800fff4:	0003      	movs	r3, r0
 800fff6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d010      	beq.n	8010020 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fffe:	20a8      	movs	r0, #168	@ 0xa8
 8010000:	f001 fb16 	bl	8011630 <pvPortMalloc>
 8010004:	0003      	movs	r3, r0
 8010006:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d003      	beq.n	8010016 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	697a      	ldr	r2, [r7, #20]
 8010012:	631a      	str	r2, [r3, #48]	@ 0x30
 8010014:	e006      	b.n	8010024 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	0018      	movs	r0, r3
 801001a:	f001 fbb9 	bl	8011790 <vPortFree>
 801001e:	e001      	b.n	8010024 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010020:	2300      	movs	r3, #0
 8010022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d01a      	beq.n	8010060 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	22a5      	movs	r2, #165	@ 0xa5
 801002e:	2100      	movs	r1, #0
 8010030:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010032:	1dbb      	adds	r3, r7, #6
 8010034:	881a      	ldrh	r2, [r3, #0]
 8010036:	683c      	ldr	r4, [r7, #0]
 8010038:	68b9      	ldr	r1, [r7, #8]
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	2300      	movs	r3, #0
 801003e:	9303      	str	r3, [sp, #12]
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	9302      	str	r3, [sp, #8]
 8010044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010046:	9301      	str	r3, [sp, #4]
 8010048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	0023      	movs	r3, r4
 801004e:	f000 f80f 	bl	8010070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010052:	69fb      	ldr	r3, [r7, #28]
 8010054:	0018      	movs	r0, r3
 8010056:	f000 f8ad 	bl	80101b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801005a:	2301      	movs	r3, #1
 801005c:	61bb      	str	r3, [r7, #24]
 801005e:	e002      	b.n	8010066 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010060:	2301      	movs	r3, #1
 8010062:	425b      	negs	r3, r3
 8010064:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010066:	69bb      	ldr	r3, [r7, #24]
	}
 8010068:	0018      	movs	r0, r3
 801006a:	46bd      	mov	sp, r7
 801006c:	b009      	add	sp, #36	@ 0x24
 801006e:	bd90      	pop	{r4, r7, pc}

08010070 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801007e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010080:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	001a      	movs	r2, r3
 8010088:	21a5      	movs	r1, #165	@ 0xa5
 801008a:	f002 ff2d 	bl	8012ee8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801008e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4943      	ldr	r1, [pc, #268]	@ (80101a4 <prvInitialiseNewTask+0x134>)
 8010096:	468c      	mov	ip, r1
 8010098:	4463      	add	r3, ip
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	18d3      	adds	r3, r2, r3
 801009e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	2207      	movs	r2, #7
 80100a4:	4393      	bics	r3, r2
 80100a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	2207      	movs	r2, #7
 80100ac:	4013      	ands	r3, r2
 80100ae:	d002      	beq.n	80100b6 <prvInitialiseNewTask+0x46>
 80100b0:	b672      	cpsid	i
 80100b2:	46c0      	nop			@ (mov r8, r8)
 80100b4:	e7fd      	b.n	80100b2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d020      	beq.n	80100fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100bc:	2300      	movs	r3, #0
 80100be:	617b      	str	r3, [r7, #20]
 80100c0:	e013      	b.n	80100ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80100c2:	68ba      	ldr	r2, [r7, #8]
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	18d3      	adds	r3, r2, r3
 80100c8:	7818      	ldrb	r0, [r3, #0]
 80100ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100cc:	2134      	movs	r1, #52	@ 0x34
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	18d3      	adds	r3, r2, r3
 80100d2:	185b      	adds	r3, r3, r1
 80100d4:	1c02      	adds	r2, r0, #0
 80100d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80100d8:	68ba      	ldr	r2, [r7, #8]
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	18d3      	adds	r3, r2, r3
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d006      	beq.n	80100f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	3301      	adds	r3, #1
 80100e8:	617b      	str	r3, [r7, #20]
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	2b0f      	cmp	r3, #15
 80100ee:	d9e8      	bls.n	80100c2 <prvInitialiseNewTask+0x52>
 80100f0:	e000      	b.n	80100f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80100f2:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80100f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f6:	2243      	movs	r2, #67	@ 0x43
 80100f8:	2100      	movs	r1, #0
 80100fa:	5499      	strb	r1, [r3, r2]
 80100fc:	e003      	b.n	8010106 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80100fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010100:	2234      	movs	r2, #52	@ 0x34
 8010102:	2100      	movs	r1, #0
 8010104:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010106:	6a3b      	ldr	r3, [r7, #32]
 8010108:	2b37      	cmp	r3, #55	@ 0x37
 801010a:	d901      	bls.n	8010110 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801010c:	2337      	movs	r3, #55	@ 0x37
 801010e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010112:	6a3a      	ldr	r2, [r7, #32]
 8010114:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010118:	6a3a      	ldr	r2, [r7, #32]
 801011a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801011c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801011e:	2200      	movs	r2, #0
 8010120:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010124:	3304      	adds	r3, #4
 8010126:	0018      	movs	r0, r3
 8010128:	f7ff f9fe 	bl	800f528 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801012c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801012e:	3318      	adds	r3, #24
 8010130:	0018      	movs	r0, r3
 8010132:	f7ff f9f9 	bl	800f528 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801013a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	2238      	movs	r2, #56	@ 0x38
 8010140:	1ad2      	subs	r2, r2, r3
 8010142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010144:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801014a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801014c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014e:	22a0      	movs	r2, #160	@ 0xa0
 8010150:	2100      	movs	r1, #0
 8010152:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010156:	22a4      	movs	r2, #164	@ 0xa4
 8010158:	2100      	movs	r1, #0
 801015a:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801015c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015e:	3354      	adds	r3, #84	@ 0x54
 8010160:	224c      	movs	r2, #76	@ 0x4c
 8010162:	2100      	movs	r1, #0
 8010164:	0018      	movs	r0, r3
 8010166:	f002 febf 	bl	8012ee8 <memset>
 801016a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801016c:	4a0e      	ldr	r2, [pc, #56]	@ (80101a8 <prvInitialiseNewTask+0x138>)
 801016e:	659a      	str	r2, [r3, #88]	@ 0x58
 8010170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010172:	4a0e      	ldr	r2, [pc, #56]	@ (80101ac <prvInitialiseNewTask+0x13c>)
 8010174:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010178:	4a0d      	ldr	r2, [pc, #52]	@ (80101b0 <prvInitialiseNewTask+0x140>)
 801017a:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801017c:	683a      	ldr	r2, [r7, #0]
 801017e:	68f9      	ldr	r1, [r7, #12]
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	0018      	movs	r0, r3
 8010184:	f001 f922 	bl	80113cc <pxPortInitialiseStack>
 8010188:	0002      	movs	r2, r0
 801018a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801018c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801018e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801019a:	46c0      	nop			@ (mov r8, r8)
 801019c:	46bd      	mov	sp, r7
 801019e:	b006      	add	sp, #24
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	46c0      	nop			@ (mov r8, r8)
 80101a4:	3fffffff 	.word	0x3fffffff
 80101a8:	20007148 	.word	0x20007148
 80101ac:	200071b0 	.word	0x200071b0
 80101b0:	20007218 	.word	0x20007218

080101b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80101bc:	f001 f9a0 	bl	8011500 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80101c0:	4b2a      	ldr	r3, [pc, #168]	@ (801026c <prvAddNewTaskToReadyList+0xb8>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	1c5a      	adds	r2, r3, #1
 80101c6:	4b29      	ldr	r3, [pc, #164]	@ (801026c <prvAddNewTaskToReadyList+0xb8>)
 80101c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80101ca:	4b29      	ldr	r3, [pc, #164]	@ (8010270 <prvAddNewTaskToReadyList+0xbc>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d109      	bne.n	80101e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80101d2:	4b27      	ldr	r3, [pc, #156]	@ (8010270 <prvAddNewTaskToReadyList+0xbc>)
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80101d8:	4b24      	ldr	r3, [pc, #144]	@ (801026c <prvAddNewTaskToReadyList+0xb8>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d110      	bne.n	8010202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80101e0:	f000 fbac 	bl	801093c <prvInitialiseTaskLists>
 80101e4:	e00d      	b.n	8010202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80101e6:	4b23      	ldr	r3, [pc, #140]	@ (8010274 <prvAddNewTaskToReadyList+0xc0>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d109      	bne.n	8010202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80101ee:	4b20      	ldr	r3, [pc, #128]	@ (8010270 <prvAddNewTaskToReadyList+0xbc>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d802      	bhi.n	8010202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80101fc:	4b1c      	ldr	r3, [pc, #112]	@ (8010270 <prvAddNewTaskToReadyList+0xbc>)
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010202:	4b1d      	ldr	r3, [pc, #116]	@ (8010278 <prvAddNewTaskToReadyList+0xc4>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	4b1b      	ldr	r3, [pc, #108]	@ (8010278 <prvAddNewTaskToReadyList+0xc4>)
 801020a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801020c:	4b1a      	ldr	r3, [pc, #104]	@ (8010278 <prvAddNewTaskToReadyList+0xc4>)
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010218:	4b18      	ldr	r3, [pc, #96]	@ (801027c <prvAddNewTaskToReadyList+0xc8>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	429a      	cmp	r2, r3
 801021e:	d903      	bls.n	8010228 <prvAddNewTaskToReadyList+0x74>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010224:	4b15      	ldr	r3, [pc, #84]	@ (801027c <prvAddNewTaskToReadyList+0xc8>)
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801022c:	0013      	movs	r3, r2
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	189b      	adds	r3, r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4a12      	ldr	r2, [pc, #72]	@ (8010280 <prvAddNewTaskToReadyList+0xcc>)
 8010236:	189a      	adds	r2, r3, r2
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3304      	adds	r3, #4
 801023c:	0019      	movs	r1, r3
 801023e:	0010      	movs	r0, r2
 8010240:	f7ff f97d 	bl	800f53e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010244:	f001 f96e 	bl	8011524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010248:	4b0a      	ldr	r3, [pc, #40]	@ (8010274 <prvAddNewTaskToReadyList+0xc0>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d008      	beq.n	8010262 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010250:	4b07      	ldr	r3, [pc, #28]	@ (8010270 <prvAddNewTaskToReadyList+0xbc>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025a:	429a      	cmp	r2, r3
 801025c:	d201      	bcs.n	8010262 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801025e:	f001 f93f 	bl	80114e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010262:	46c0      	nop			@ (mov r8, r8)
 8010264:	46bd      	mov	sp, r7
 8010266:	b002      	add	sp, #8
 8010268:	bd80      	pop	{r7, pc}
 801026a:	46c0      	nop			@ (mov r8, r8)
 801026c:	20003bd0 	.word	0x20003bd0
 8010270:	200036fc 	.word	0x200036fc
 8010274:	20003bdc 	.word	0x20003bdc
 8010278:	20003bec 	.word	0x20003bec
 801027c:	20003bd8 	.word	0x20003bd8
 8010280:	20003700 	.word	0x20003700

08010284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801028c:	2300      	movs	r3, #0
 801028e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d011      	beq.n	80102ba <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010296:	4b0d      	ldr	r3, [pc, #52]	@ (80102cc <vTaskDelay+0x48>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d002      	beq.n	80102a4 <vTaskDelay+0x20>
 801029e:	b672      	cpsid	i
 80102a0:	46c0      	nop			@ (mov r8, r8)
 80102a2:	e7fd      	b.n	80102a0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80102a4:	f000 f874 	bl	8010390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2100      	movs	r1, #0
 80102ac:	0018      	movs	r0, r3
 80102ae:	f000 fc7d 	bl	8010bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80102b2:	f000 f879 	bl	80103a8 <xTaskResumeAll>
 80102b6:	0003      	movs	r3, r0
 80102b8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d101      	bne.n	80102c4 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80102c0:	f001 f90e 	bl	80114e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102c4:	46c0      	nop			@ (mov r8, r8)
 80102c6:	46bd      	mov	sp, r7
 80102c8:	b004      	add	sp, #16
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	20003bf8 	.word	0x20003bf8

080102d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b089      	sub	sp, #36	@ 0x24
 80102d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80102d6:	2300      	movs	r3, #0
 80102d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80102da:	2300      	movs	r3, #0
 80102dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80102de:	003a      	movs	r2, r7
 80102e0:	1d39      	adds	r1, r7, #4
 80102e2:	2308      	movs	r3, #8
 80102e4:	18fb      	adds	r3, r7, r3
 80102e6:	0018      	movs	r0, r3
 80102e8:	f7ff f8d0 	bl	800f48c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80102ec:	683c      	ldr	r4, [r7, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	491f      	ldr	r1, [pc, #124]	@ (8010370 <vTaskStartScheduler+0xa0>)
 80102f4:	481f      	ldr	r0, [pc, #124]	@ (8010374 <vTaskStartScheduler+0xa4>)
 80102f6:	9202      	str	r2, [sp, #8]
 80102f8:	9301      	str	r3, [sp, #4]
 80102fa:	2300      	movs	r3, #0
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	2300      	movs	r3, #0
 8010300:	0022      	movs	r2, r4
 8010302:	f7ff fe22 	bl	800ff4a <xTaskCreateStatic>
 8010306:	0002      	movs	r2, r0
 8010308:	4b1b      	ldr	r3, [pc, #108]	@ (8010378 <vTaskStartScheduler+0xa8>)
 801030a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801030c:	4b1a      	ldr	r3, [pc, #104]	@ (8010378 <vTaskStartScheduler+0xa8>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010314:	2301      	movs	r3, #1
 8010316:	60fb      	str	r3, [r7, #12]
 8010318:	e001      	b.n	801031e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801031a:	2300      	movs	r3, #0
 801031c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d103      	bne.n	801032c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8010324:	f000 fc96 	bl	8010c54 <xTimerCreateTimerTask>
 8010328:	0003      	movs	r3, r0
 801032a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d113      	bne.n	801035a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8010332:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010334:	4b11      	ldr	r3, [pc, #68]	@ (801037c <vTaskStartScheduler+0xac>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	3354      	adds	r3, #84	@ 0x54
 801033a:	001a      	movs	r2, r3
 801033c:	4b10      	ldr	r3, [pc, #64]	@ (8010380 <vTaskStartScheduler+0xb0>)
 801033e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010340:	4b10      	ldr	r3, [pc, #64]	@ (8010384 <vTaskStartScheduler+0xb4>)
 8010342:	2201      	movs	r2, #1
 8010344:	4252      	negs	r2, r2
 8010346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010348:	4b0f      	ldr	r3, [pc, #60]	@ (8010388 <vTaskStartScheduler+0xb8>)
 801034a:	2201      	movs	r2, #1
 801034c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801034e:	4b0f      	ldr	r3, [pc, #60]	@ (801038c <vTaskStartScheduler+0xbc>)
 8010350:	2200      	movs	r2, #0
 8010352:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010354:	f001 f8a0 	bl	8011498 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010358:	e005      	b.n	8010366 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	3301      	adds	r3, #1
 801035e:	d102      	bne.n	8010366 <vTaskStartScheduler+0x96>
 8010360:	b672      	cpsid	i
 8010362:	46c0      	nop			@ (mov r8, r8)
 8010364:	e7fd      	b.n	8010362 <vTaskStartScheduler+0x92>
}
 8010366:	46c0      	nop			@ (mov r8, r8)
 8010368:	46bd      	mov	sp, r7
 801036a:	b005      	add	sp, #20
 801036c:	bd90      	pop	{r4, r7, pc}
 801036e:	46c0      	nop			@ (mov r8, r8)
 8010370:	08016ef8 	.word	0x08016ef8
 8010374:	0801091d 	.word	0x0801091d
 8010378:	20003bf4 	.word	0x20003bf4
 801037c:	200036fc 	.word	0x200036fc
 8010380:	20000098 	.word	0x20000098
 8010384:	20003bf0 	.word	0x20003bf0
 8010388:	20003bdc 	.word	0x20003bdc
 801038c:	20003bd4 	.word	0x20003bd4

08010390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010394:	4b03      	ldr	r3, [pc, #12]	@ (80103a4 <vTaskSuspendAll+0x14>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	4b02      	ldr	r3, [pc, #8]	@ (80103a4 <vTaskSuspendAll+0x14>)
 801039c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801039e:	46c0      	nop			@ (mov r8, r8)
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	20003bf8 	.word	0x20003bf8

080103a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80103b2:	2300      	movs	r3, #0
 80103b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80103b6:	4b3a      	ldr	r3, [pc, #232]	@ (80104a0 <xTaskResumeAll+0xf8>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d102      	bne.n	80103c4 <xTaskResumeAll+0x1c>
 80103be:	b672      	cpsid	i
 80103c0:	46c0      	nop			@ (mov r8, r8)
 80103c2:	e7fd      	b.n	80103c0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80103c4:	f001 f89c 	bl	8011500 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80103c8:	4b35      	ldr	r3, [pc, #212]	@ (80104a0 <xTaskResumeAll+0xf8>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	1e5a      	subs	r2, r3, #1
 80103ce:	4b34      	ldr	r3, [pc, #208]	@ (80104a0 <xTaskResumeAll+0xf8>)
 80103d0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103d2:	4b33      	ldr	r3, [pc, #204]	@ (80104a0 <xTaskResumeAll+0xf8>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d15b      	bne.n	8010492 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80103da:	4b32      	ldr	r3, [pc, #200]	@ (80104a4 <xTaskResumeAll+0xfc>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d057      	beq.n	8010492 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103e2:	e02f      	b.n	8010444 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103e4:	4b30      	ldr	r3, [pc, #192]	@ (80104a8 <xTaskResumeAll+0x100>)
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	3318      	adds	r3, #24
 80103f0:	0018      	movs	r0, r3
 80103f2:	f7ff f8fc 	bl	800f5ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	3304      	adds	r3, #4
 80103fa:	0018      	movs	r0, r3
 80103fc:	f7ff f8f7 	bl	800f5ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010404:	4b29      	ldr	r3, [pc, #164]	@ (80104ac <xTaskResumeAll+0x104>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	429a      	cmp	r2, r3
 801040a:	d903      	bls.n	8010414 <xTaskResumeAll+0x6c>
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010410:	4b26      	ldr	r3, [pc, #152]	@ (80104ac <xTaskResumeAll+0x104>)
 8010412:	601a      	str	r2, [r3, #0]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010418:	0013      	movs	r3, r2
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	189b      	adds	r3, r3, r2
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4a23      	ldr	r2, [pc, #140]	@ (80104b0 <xTaskResumeAll+0x108>)
 8010422:	189a      	adds	r2, r3, r2
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	3304      	adds	r3, #4
 8010428:	0019      	movs	r1, r3
 801042a:	0010      	movs	r0, r2
 801042c:	f7ff f887 	bl	800f53e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010434:	4b1f      	ldr	r3, [pc, #124]	@ (80104b4 <xTaskResumeAll+0x10c>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801043a:	429a      	cmp	r2, r3
 801043c:	d302      	bcc.n	8010444 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801043e:	4b1e      	ldr	r3, [pc, #120]	@ (80104b8 <xTaskResumeAll+0x110>)
 8010440:	2201      	movs	r2, #1
 8010442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010444:	4b18      	ldr	r3, [pc, #96]	@ (80104a8 <xTaskResumeAll+0x100>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1cb      	bne.n	80103e4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d001      	beq.n	8010456 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010452:	f000 fb13 	bl	8010a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010456:	4b19      	ldr	r3, [pc, #100]	@ (80104bc <xTaskResumeAll+0x114>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00f      	beq.n	8010482 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010462:	f000 f83b 	bl	80104dc <xTaskIncrementTick>
 8010466:	1e03      	subs	r3, r0, #0
 8010468:	d002      	beq.n	8010470 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 801046a:	4b13      	ldr	r3, [pc, #76]	@ (80104b8 <xTaskResumeAll+0x110>)
 801046c:	2201      	movs	r2, #1
 801046e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	3b01      	subs	r3, #1
 8010474:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d1f2      	bne.n	8010462 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801047c:	4b0f      	ldr	r3, [pc, #60]	@ (80104bc <xTaskResumeAll+0x114>)
 801047e:	2200      	movs	r2, #0
 8010480:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010482:	4b0d      	ldr	r3, [pc, #52]	@ (80104b8 <xTaskResumeAll+0x110>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d003      	beq.n	8010492 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801048a:	2301      	movs	r3, #1
 801048c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801048e:	f001 f827 	bl	80114e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010492:	f001 f847 	bl	8011524 <vPortExitCritical>

	return xAlreadyYielded;
 8010496:	68bb      	ldr	r3, [r7, #8]
}
 8010498:	0018      	movs	r0, r3
 801049a:	46bd      	mov	sp, r7
 801049c:	b004      	add	sp, #16
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	20003bf8 	.word	0x20003bf8
 80104a4:	20003bd0 	.word	0x20003bd0
 80104a8:	20003b90 	.word	0x20003b90
 80104ac:	20003bd8 	.word	0x20003bd8
 80104b0:	20003700 	.word	0x20003700
 80104b4:	200036fc 	.word	0x200036fc
 80104b8:	20003be4 	.word	0x20003be4
 80104bc:	20003be0 	.word	0x20003be0

080104c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80104c6:	4b04      	ldr	r3, [pc, #16]	@ (80104d8 <xTaskGetTickCount+0x18>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80104cc:	687b      	ldr	r3, [r7, #4]
}
 80104ce:	0018      	movs	r0, r3
 80104d0:	46bd      	mov	sp, r7
 80104d2:	b002      	add	sp, #8
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	46c0      	nop			@ (mov r8, r8)
 80104d8:	20003bd4 	.word	0x20003bd4

080104dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80104e2:	2300      	movs	r3, #0
 80104e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104e6:	4b4a      	ldr	r3, [pc, #296]	@ (8010610 <xTaskIncrementTick+0x134>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d000      	beq.n	80104f0 <xTaskIncrementTick+0x14>
 80104ee:	e085      	b.n	80105fc <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80104f0:	4b48      	ldr	r3, [pc, #288]	@ (8010614 <xTaskIncrementTick+0x138>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3301      	adds	r3, #1
 80104f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80104f8:	4b46      	ldr	r3, [pc, #280]	@ (8010614 <xTaskIncrementTick+0x138>)
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d118      	bne.n	8010536 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010504:	4b44      	ldr	r3, [pc, #272]	@ (8010618 <xTaskIncrementTick+0x13c>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d002      	beq.n	8010514 <xTaskIncrementTick+0x38>
 801050e:	b672      	cpsid	i
 8010510:	46c0      	nop			@ (mov r8, r8)
 8010512:	e7fd      	b.n	8010510 <xTaskIncrementTick+0x34>
 8010514:	4b40      	ldr	r3, [pc, #256]	@ (8010618 <xTaskIncrementTick+0x13c>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	4b40      	ldr	r3, [pc, #256]	@ (801061c <xTaskIncrementTick+0x140>)
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	4b3e      	ldr	r3, [pc, #248]	@ (8010618 <xTaskIncrementTick+0x13c>)
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	4b3e      	ldr	r3, [pc, #248]	@ (801061c <xTaskIncrementTick+0x140>)
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	601a      	str	r2, [r3, #0]
 8010528:	4b3d      	ldr	r3, [pc, #244]	@ (8010620 <xTaskIncrementTick+0x144>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	1c5a      	adds	r2, r3, #1
 801052e:	4b3c      	ldr	r3, [pc, #240]	@ (8010620 <xTaskIncrementTick+0x144>)
 8010530:	601a      	str	r2, [r3, #0]
 8010532:	f000 faa3 	bl	8010a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010536:	4b3b      	ldr	r3, [pc, #236]	@ (8010624 <xTaskIncrementTick+0x148>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	693a      	ldr	r2, [r7, #16]
 801053c:	429a      	cmp	r2, r3
 801053e:	d349      	bcc.n	80105d4 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010540:	4b35      	ldr	r3, [pc, #212]	@ (8010618 <xTaskIncrementTick+0x13c>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d104      	bne.n	8010554 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801054a:	4b36      	ldr	r3, [pc, #216]	@ (8010624 <xTaskIncrementTick+0x148>)
 801054c:	2201      	movs	r2, #1
 801054e:	4252      	negs	r2, r2
 8010550:	601a      	str	r2, [r3, #0]
					break;
 8010552:	e03f      	b.n	80105d4 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010554:	4b30      	ldr	r3, [pc, #192]	@ (8010618 <xTaskIncrementTick+0x13c>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	68db      	ldr	r3, [r3, #12]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	429a      	cmp	r2, r3
 801056a:	d203      	bcs.n	8010574 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801056c:	4b2d      	ldr	r3, [pc, #180]	@ (8010624 <xTaskIncrementTick+0x148>)
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010572:	e02f      	b.n	80105d4 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	3304      	adds	r3, #4
 8010578:	0018      	movs	r0, r3
 801057a:	f7ff f838 	bl	800f5ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010582:	2b00      	cmp	r3, #0
 8010584:	d004      	beq.n	8010590 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	3318      	adds	r3, #24
 801058a:	0018      	movs	r0, r3
 801058c:	f7ff f82f 	bl	800f5ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010594:	4b24      	ldr	r3, [pc, #144]	@ (8010628 <xTaskIncrementTick+0x14c>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	d903      	bls.n	80105a4 <xTaskIncrementTick+0xc8>
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105a0:	4b21      	ldr	r3, [pc, #132]	@ (8010628 <xTaskIncrementTick+0x14c>)
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105a8:	0013      	movs	r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	189b      	adds	r3, r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4a1e      	ldr	r2, [pc, #120]	@ (801062c <xTaskIncrementTick+0x150>)
 80105b2:	189a      	adds	r2, r3, r2
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	3304      	adds	r3, #4
 80105b8:	0019      	movs	r1, r3
 80105ba:	0010      	movs	r0, r2
 80105bc:	f7fe ffbf 	bl	800f53e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105c4:	4b1a      	ldr	r3, [pc, #104]	@ (8010630 <xTaskIncrementTick+0x154>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d3b8      	bcc.n	8010540 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80105ce:	2301      	movs	r3, #1
 80105d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105d2:	e7b5      	b.n	8010540 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80105d4:	4b16      	ldr	r3, [pc, #88]	@ (8010630 <xTaskIncrementTick+0x154>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105da:	4914      	ldr	r1, [pc, #80]	@ (801062c <xTaskIncrementTick+0x150>)
 80105dc:	0013      	movs	r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	189b      	adds	r3, r3, r2
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	585b      	ldr	r3, [r3, r1]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d901      	bls.n	80105ee <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 80105ea:	2301      	movs	r3, #1
 80105ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80105ee:	4b11      	ldr	r3, [pc, #68]	@ (8010634 <xTaskIncrementTick+0x158>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d007      	beq.n	8010606 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80105f6:	2301      	movs	r3, #1
 80105f8:	617b      	str	r3, [r7, #20]
 80105fa:	e004      	b.n	8010606 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80105fc:	4b0e      	ldr	r3, [pc, #56]	@ (8010638 <xTaskIncrementTick+0x15c>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	1c5a      	adds	r2, r3, #1
 8010602:	4b0d      	ldr	r3, [pc, #52]	@ (8010638 <xTaskIncrementTick+0x15c>)
 8010604:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010606:	697b      	ldr	r3, [r7, #20]
}
 8010608:	0018      	movs	r0, r3
 801060a:	46bd      	mov	sp, r7
 801060c:	b006      	add	sp, #24
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20003bf8 	.word	0x20003bf8
 8010614:	20003bd4 	.word	0x20003bd4
 8010618:	20003b88 	.word	0x20003b88
 801061c:	20003b8c 	.word	0x20003b8c
 8010620:	20003be8 	.word	0x20003be8
 8010624:	20003bf0 	.word	0x20003bf0
 8010628:	20003bd8 	.word	0x20003bd8
 801062c:	20003700 	.word	0x20003700
 8010630:	200036fc 	.word	0x200036fc
 8010634:	20003be4 	.word	0x20003be4
 8010638:	20003be0 	.word	0x20003be0

0801063c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010642:	4b25      	ldr	r3, [pc, #148]	@ (80106d8 <vTaskSwitchContext+0x9c>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d003      	beq.n	8010652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801064a:	4b24      	ldr	r3, [pc, #144]	@ (80106dc <vTaskSwitchContext+0xa0>)
 801064c:	2201      	movs	r2, #1
 801064e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010650:	e03e      	b.n	80106d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010652:	4b22      	ldr	r3, [pc, #136]	@ (80106dc <vTaskSwitchContext+0xa0>)
 8010654:	2200      	movs	r2, #0
 8010656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010658:	4b21      	ldr	r3, [pc, #132]	@ (80106e0 <vTaskSwitchContext+0xa4>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	607b      	str	r3, [r7, #4]
 801065e:	e008      	b.n	8010672 <vTaskSwitchContext+0x36>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d102      	bne.n	801066c <vTaskSwitchContext+0x30>
 8010666:	b672      	cpsid	i
 8010668:	46c0      	nop			@ (mov r8, r8)
 801066a:	e7fd      	b.n	8010668 <vTaskSwitchContext+0x2c>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	3b01      	subs	r3, #1
 8010670:	607b      	str	r3, [r7, #4]
 8010672:	491c      	ldr	r1, [pc, #112]	@ (80106e4 <vTaskSwitchContext+0xa8>)
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	0013      	movs	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	189b      	adds	r3, r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	585b      	ldr	r3, [r3, r1]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d0ed      	beq.n	8010660 <vTaskSwitchContext+0x24>
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	0013      	movs	r3, r2
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	189b      	adds	r3, r3, r2
 801068c:	009b      	lsls	r3, r3, #2
 801068e:	4a15      	ldr	r2, [pc, #84]	@ (80106e4 <vTaskSwitchContext+0xa8>)
 8010690:	189b      	adds	r3, r3, r2
 8010692:	603b      	str	r3, [r7, #0]
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	685a      	ldr	r2, [r3, #4]
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	605a      	str	r2, [r3, #4]
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	685a      	ldr	r2, [r3, #4]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	3308      	adds	r3, #8
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d104      	bne.n	80106b4 <vTaskSwitchContext+0x78>
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	685a      	ldr	r2, [r3, #4]
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	605a      	str	r2, [r3, #4]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	68da      	ldr	r2, [r3, #12]
 80106ba:	4b0b      	ldr	r3, [pc, #44]	@ (80106e8 <vTaskSwitchContext+0xac>)
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	4b08      	ldr	r3, [pc, #32]	@ (80106e0 <vTaskSwitchContext+0xa4>)
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80106c4:	4b08      	ldr	r3, [pc, #32]	@ (80106e8 <vTaskSwitchContext+0xac>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	3354      	adds	r3, #84	@ 0x54
 80106ca:	001a      	movs	r2, r3
 80106cc:	4b07      	ldr	r3, [pc, #28]	@ (80106ec <vTaskSwitchContext+0xb0>)
 80106ce:	601a      	str	r2, [r3, #0]
}
 80106d0:	46c0      	nop			@ (mov r8, r8)
 80106d2:	46bd      	mov	sp, r7
 80106d4:	b002      	add	sp, #8
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	20003bf8 	.word	0x20003bf8
 80106dc:	20003be4 	.word	0x20003be4
 80106e0:	20003bd8 	.word	0x20003bd8
 80106e4:	20003700 	.word	0x20003700
 80106e8:	200036fc 	.word	0x200036fc
 80106ec:	20000098 	.word	0x20000098

080106f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d102      	bne.n	8010706 <vTaskPlaceOnEventList+0x16>
 8010700:	b672      	cpsid	i
 8010702:	46c0      	nop			@ (mov r8, r8)
 8010704:	e7fd      	b.n	8010702 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010706:	4b09      	ldr	r3, [pc, #36]	@ (801072c <vTaskPlaceOnEventList+0x3c>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	3318      	adds	r3, #24
 801070c:	001a      	movs	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	0011      	movs	r1, r2
 8010712:	0018      	movs	r0, r3
 8010714:	f7fe ff35 	bl	800f582 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	2101      	movs	r1, #1
 801071c:	0018      	movs	r0, r3
 801071e:	f000 fa45 	bl	8010bac <prvAddCurrentTaskToDelayedList>
}
 8010722:	46c0      	nop			@ (mov r8, r8)
 8010724:	46bd      	mov	sp, r7
 8010726:	b002      	add	sp, #8
 8010728:	bd80      	pop	{r7, pc}
 801072a:	46c0      	nop			@ (mov r8, r8)
 801072c:	200036fc 	.word	0x200036fc

08010730 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d102      	bne.n	8010748 <vTaskPlaceOnEventListRestricted+0x18>
 8010742:	b672      	cpsid	i
 8010744:	46c0      	nop			@ (mov r8, r8)
 8010746:	e7fd      	b.n	8010744 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010748:	4b0c      	ldr	r3, [pc, #48]	@ (801077c <vTaskPlaceOnEventListRestricted+0x4c>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	3318      	adds	r3, #24
 801074e:	001a      	movs	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	0011      	movs	r1, r2
 8010754:	0018      	movs	r0, r3
 8010756:	f7fe fef2 	bl	800f53e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d002      	beq.n	8010766 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8010760:	2301      	movs	r3, #1
 8010762:	425b      	negs	r3, r3
 8010764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	0011      	movs	r1, r2
 801076c:	0018      	movs	r0, r3
 801076e:	f000 fa1d 	bl	8010bac <prvAddCurrentTaskToDelayedList>
	}
 8010772:	46c0      	nop			@ (mov r8, r8)
 8010774:	46bd      	mov	sp, r7
 8010776:	b004      	add	sp, #16
 8010778:	bd80      	pop	{r7, pc}
 801077a:	46c0      	nop			@ (mov r8, r8)
 801077c:	200036fc 	.word	0x200036fc

08010780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d102      	bne.n	801079c <xTaskRemoveFromEventList+0x1c>
 8010796:	b672      	cpsid	i
 8010798:	46c0      	nop			@ (mov r8, r8)
 801079a:	e7fd      	b.n	8010798 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	3318      	adds	r3, #24
 80107a0:	0018      	movs	r0, r3
 80107a2:	f7fe ff24 	bl	800f5ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107a6:	4b1f      	ldr	r3, [pc, #124]	@ (8010824 <xTaskRemoveFromEventList+0xa4>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d11d      	bne.n	80107ea <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	3304      	adds	r3, #4
 80107b2:	0018      	movs	r0, r3
 80107b4:	f7fe ff1b 	bl	800f5ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010828 <xTaskRemoveFromEventList+0xa8>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d903      	bls.n	80107cc <xTaskRemoveFromEventList+0x4c>
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c8:	4b17      	ldr	r3, [pc, #92]	@ (8010828 <xTaskRemoveFromEventList+0xa8>)
 80107ca:	601a      	str	r2, [r3, #0]
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107d0:	0013      	movs	r3, r2
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	189b      	adds	r3, r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	4a14      	ldr	r2, [pc, #80]	@ (801082c <xTaskRemoveFromEventList+0xac>)
 80107da:	189a      	adds	r2, r3, r2
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	3304      	adds	r3, #4
 80107e0:	0019      	movs	r1, r3
 80107e2:	0010      	movs	r0, r2
 80107e4:	f7fe feab 	bl	800f53e <vListInsertEnd>
 80107e8:	e007      	b.n	80107fa <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	3318      	adds	r3, #24
 80107ee:	001a      	movs	r2, r3
 80107f0:	4b0f      	ldr	r3, [pc, #60]	@ (8010830 <xTaskRemoveFromEventList+0xb0>)
 80107f2:	0011      	movs	r1, r2
 80107f4:	0018      	movs	r0, r3
 80107f6:	f7fe fea2 	bl	800f53e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010834 <xTaskRemoveFromEventList+0xb4>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010804:	429a      	cmp	r2, r3
 8010806:	d905      	bls.n	8010814 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010808:	2301      	movs	r3, #1
 801080a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801080c:	4b0a      	ldr	r3, [pc, #40]	@ (8010838 <xTaskRemoveFromEventList+0xb8>)
 801080e:	2201      	movs	r2, #1
 8010810:	601a      	str	r2, [r3, #0]
 8010812:	e001      	b.n	8010818 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8010814:	2300      	movs	r3, #0
 8010816:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8010818:	68fb      	ldr	r3, [r7, #12]
}
 801081a:	0018      	movs	r0, r3
 801081c:	46bd      	mov	sp, r7
 801081e:	b004      	add	sp, #16
 8010820:	bd80      	pop	{r7, pc}
 8010822:	46c0      	nop			@ (mov r8, r8)
 8010824:	20003bf8 	.word	0x20003bf8
 8010828:	20003bd8 	.word	0x20003bd8
 801082c:	20003700 	.word	0x20003700
 8010830:	20003b90 	.word	0x20003b90
 8010834:	200036fc 	.word	0x200036fc
 8010838:	20003be4 	.word	0x20003be4

0801083c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010844:	4b05      	ldr	r3, [pc, #20]	@ (801085c <vTaskInternalSetTimeOutState+0x20>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801084c:	4b04      	ldr	r3, [pc, #16]	@ (8010860 <vTaskInternalSetTimeOutState+0x24>)
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	605a      	str	r2, [r3, #4]
}
 8010854:	46c0      	nop			@ (mov r8, r8)
 8010856:	46bd      	mov	sp, r7
 8010858:	b002      	add	sp, #8
 801085a:	bd80      	pop	{r7, pc}
 801085c:	20003be8 	.word	0x20003be8
 8010860:	20003bd4 	.word	0x20003bd4

08010864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <xTaskCheckForTimeOut+0x16>
 8010874:	b672      	cpsid	i
 8010876:	46c0      	nop			@ (mov r8, r8)
 8010878:	e7fd      	b.n	8010876 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <xTaskCheckForTimeOut+0x22>
 8010880:	b672      	cpsid	i
 8010882:	46c0      	nop			@ (mov r8, r8)
 8010884:	e7fd      	b.n	8010882 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8010886:	f000 fe3b 	bl	8011500 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801088a:	4b1d      	ldr	r3, [pc, #116]	@ (8010900 <xTaskCheckForTimeOut+0x9c>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3301      	adds	r3, #1
 80108a0:	d102      	bne.n	80108a8 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108a2:	2300      	movs	r3, #0
 80108a4:	617b      	str	r3, [r7, #20]
 80108a6:	e024      	b.n	80108f2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	4b15      	ldr	r3, [pc, #84]	@ (8010904 <xTaskCheckForTimeOut+0xa0>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d007      	beq.n	80108c4 <xTaskCheckForTimeOut+0x60>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	693a      	ldr	r2, [r7, #16]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d302      	bcc.n	80108c4 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108be:	2301      	movs	r3, #1
 80108c0:	617b      	str	r3, [r7, #20]
 80108c2:	e016      	b.n	80108f2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d20c      	bcs.n	80108e8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	1ad2      	subs	r2, r2, r3
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	0018      	movs	r0, r3
 80108de:	f7ff ffad 	bl	801083c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80108e2:	2300      	movs	r3, #0
 80108e4:	617b      	str	r3, [r7, #20]
 80108e6:	e004      	b.n	80108f2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2200      	movs	r2, #0
 80108ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80108ee:	2301      	movs	r3, #1
 80108f0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80108f2:	f000 fe17 	bl	8011524 <vPortExitCritical>

	return xReturn;
 80108f6:	697b      	ldr	r3, [r7, #20]
}
 80108f8:	0018      	movs	r0, r3
 80108fa:	46bd      	mov	sp, r7
 80108fc:	b006      	add	sp, #24
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	20003bd4 	.word	0x20003bd4
 8010904:	20003be8 	.word	0x20003be8

08010908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801090c:	4b02      	ldr	r3, [pc, #8]	@ (8010918 <vTaskMissedYield+0x10>)
 801090e:	2201      	movs	r2, #1
 8010910:	601a      	str	r2, [r3, #0]
}
 8010912:	46c0      	nop			@ (mov r8, r8)
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	20003be4 	.word	0x20003be4

0801091c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010924:	f000 f84e 	bl	80109c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010928:	4b03      	ldr	r3, [pc, #12]	@ (8010938 <prvIdleTask+0x1c>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d9f9      	bls.n	8010924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010930:	f000 fdd6 	bl	80114e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010934:	e7f6      	b.n	8010924 <prvIdleTask+0x8>
 8010936:	46c0      	nop			@ (mov r8, r8)
 8010938:	20003700 	.word	0x20003700

0801093c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010942:	2300      	movs	r3, #0
 8010944:	607b      	str	r3, [r7, #4]
 8010946:	e00c      	b.n	8010962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	0013      	movs	r3, r2
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	189b      	adds	r3, r3, r2
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	4a14      	ldr	r2, [pc, #80]	@ (80109a4 <prvInitialiseTaskLists+0x68>)
 8010954:	189b      	adds	r3, r3, r2
 8010956:	0018      	movs	r0, r3
 8010958:	f7fe fdc8 	bl	800f4ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	3301      	adds	r3, #1
 8010960:	607b      	str	r3, [r7, #4]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b37      	cmp	r3, #55	@ 0x37
 8010966:	d9ef      	bls.n	8010948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010968:	4b0f      	ldr	r3, [pc, #60]	@ (80109a8 <prvInitialiseTaskLists+0x6c>)
 801096a:	0018      	movs	r0, r3
 801096c:	f7fe fdbe 	bl	800f4ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010970:	4b0e      	ldr	r3, [pc, #56]	@ (80109ac <prvInitialiseTaskLists+0x70>)
 8010972:	0018      	movs	r0, r3
 8010974:	f7fe fdba 	bl	800f4ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010978:	4b0d      	ldr	r3, [pc, #52]	@ (80109b0 <prvInitialiseTaskLists+0x74>)
 801097a:	0018      	movs	r0, r3
 801097c:	f7fe fdb6 	bl	800f4ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010980:	4b0c      	ldr	r3, [pc, #48]	@ (80109b4 <prvInitialiseTaskLists+0x78>)
 8010982:	0018      	movs	r0, r3
 8010984:	f7fe fdb2 	bl	800f4ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010988:	4b0b      	ldr	r3, [pc, #44]	@ (80109b8 <prvInitialiseTaskLists+0x7c>)
 801098a:	0018      	movs	r0, r3
 801098c:	f7fe fdae 	bl	800f4ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010990:	4b0a      	ldr	r3, [pc, #40]	@ (80109bc <prvInitialiseTaskLists+0x80>)
 8010992:	4a05      	ldr	r2, [pc, #20]	@ (80109a8 <prvInitialiseTaskLists+0x6c>)
 8010994:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010996:	4b0a      	ldr	r3, [pc, #40]	@ (80109c0 <prvInitialiseTaskLists+0x84>)
 8010998:	4a04      	ldr	r2, [pc, #16]	@ (80109ac <prvInitialiseTaskLists+0x70>)
 801099a:	601a      	str	r2, [r3, #0]
}
 801099c:	46c0      	nop			@ (mov r8, r8)
 801099e:	46bd      	mov	sp, r7
 80109a0:	b002      	add	sp, #8
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20003700 	.word	0x20003700
 80109a8:	20003b60 	.word	0x20003b60
 80109ac:	20003b74 	.word	0x20003b74
 80109b0:	20003b90 	.word	0x20003b90
 80109b4:	20003ba4 	.word	0x20003ba4
 80109b8:	20003bbc 	.word	0x20003bbc
 80109bc:	20003b88 	.word	0x20003b88
 80109c0:	20003b8c 	.word	0x20003b8c

080109c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109ca:	e01a      	b.n	8010a02 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80109cc:	f000 fd98 	bl	8011500 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109d0:	4b10      	ldr	r3, [pc, #64]	@ (8010a14 <prvCheckTasksWaitingTermination+0x50>)
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	3304      	adds	r3, #4
 80109dc:	0018      	movs	r0, r3
 80109de:	f7fe fe06 	bl	800f5ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80109e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010a18 <prvCheckTasksWaitingTermination+0x54>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	1e5a      	subs	r2, r3, #1
 80109e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010a18 <prvCheckTasksWaitingTermination+0x54>)
 80109ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80109ec:	4b0b      	ldr	r3, [pc, #44]	@ (8010a1c <prvCheckTasksWaitingTermination+0x58>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	4b0a      	ldr	r3, [pc, #40]	@ (8010a1c <prvCheckTasksWaitingTermination+0x58>)
 80109f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80109f6:	f000 fd95 	bl	8011524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	0018      	movs	r0, r3
 80109fe:	f000 f80f 	bl	8010a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a02:	4b06      	ldr	r3, [pc, #24]	@ (8010a1c <prvCheckTasksWaitingTermination+0x58>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1e0      	bne.n	80109cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a0a:	46c0      	nop			@ (mov r8, r8)
 8010a0c:	46c0      	nop			@ (mov r8, r8)
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	b002      	add	sp, #8
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	20003ba4 	.word	0x20003ba4
 8010a18:	20003bd0 	.word	0x20003bd0
 8010a1c:	20003bb8 	.word	0x20003bb8

08010a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	3354      	adds	r3, #84	@ 0x54
 8010a2c:	0018      	movs	r0, r3
 8010a2e:	f002 fa79 	bl	8012f24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	22a5      	movs	r2, #165	@ 0xa5
 8010a36:	5c9b      	ldrb	r3, [r3, r2]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d109      	bne.n	8010a50 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a40:	0018      	movs	r0, r3
 8010a42:	f000 fea5 	bl	8011790 <vPortFree>
				vPortFree( pxTCB );
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	0018      	movs	r0, r3
 8010a4a:	f000 fea1 	bl	8011790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a4e:	e011      	b.n	8010a74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	22a5      	movs	r2, #165	@ 0xa5
 8010a54:	5c9b      	ldrb	r3, [r3, r2]
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d104      	bne.n	8010a64 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	0018      	movs	r0, r3
 8010a5e:	f000 fe97 	bl	8011790 <vPortFree>
	}
 8010a62:	e007      	b.n	8010a74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	22a5      	movs	r2, #165	@ 0xa5
 8010a68:	5c9b      	ldrb	r3, [r3, r2]
 8010a6a:	2b02      	cmp	r3, #2
 8010a6c:	d002      	beq.n	8010a74 <prvDeleteTCB+0x54>
 8010a6e:	b672      	cpsid	i
 8010a70:	46c0      	nop			@ (mov r8, r8)
 8010a72:	e7fd      	b.n	8010a70 <prvDeleteTCB+0x50>
	}
 8010a74:	46c0      	nop			@ (mov r8, r8)
 8010a76:	46bd      	mov	sp, r7
 8010a78:	b002      	add	sp, #8
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a82:	4b0b      	ldr	r3, [pc, #44]	@ (8010ab0 <prvResetNextTaskUnblockTime+0x34>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d104      	bne.n	8010a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a8c:	4b09      	ldr	r3, [pc, #36]	@ (8010ab4 <prvResetNextTaskUnblockTime+0x38>)
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4252      	negs	r2, r2
 8010a92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010a94:	e008      	b.n	8010aa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a96:	4b06      	ldr	r3, [pc, #24]	@ (8010ab0 <prvResetNextTaskUnblockTime+0x34>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	4b03      	ldr	r3, [pc, #12]	@ (8010ab4 <prvResetNextTaskUnblockTime+0x38>)
 8010aa6:	601a      	str	r2, [r3, #0]
}
 8010aa8:	46c0      	nop			@ (mov r8, r8)
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	b002      	add	sp, #8
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	20003b88 	.word	0x20003b88
 8010ab4:	20003bf0 	.word	0x20003bf0

08010ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010abe:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae8 <xTaskGetSchedulerState+0x30>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d102      	bne.n	8010acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	607b      	str	r3, [r7, #4]
 8010aca:	e008      	b.n	8010ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010acc:	4b07      	ldr	r3, [pc, #28]	@ (8010aec <xTaskGetSchedulerState+0x34>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d102      	bne.n	8010ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ad4:	2302      	movs	r3, #2
 8010ad6:	607b      	str	r3, [r7, #4]
 8010ad8:	e001      	b.n	8010ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010ada:	2300      	movs	r3, #0
 8010adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010ade:	687b      	ldr	r3, [r7, #4]
	}
 8010ae0:	0018      	movs	r0, r3
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	b002      	add	sp, #8
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	20003bdc 	.word	0x20003bdc
 8010aec:	20003bf8 	.word	0x20003bf8

08010af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010afc:	2300      	movs	r3, #0
 8010afe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d046      	beq.n	8010b94 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010b06:	4b26      	ldr	r3, [pc, #152]	@ (8010ba0 <xTaskPriorityDisinherit+0xb0>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68ba      	ldr	r2, [r7, #8]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d002      	beq.n	8010b16 <xTaskPriorityDisinherit+0x26>
 8010b10:	b672      	cpsid	i
 8010b12:	46c0      	nop			@ (mov r8, r8)
 8010b14:	e7fd      	b.n	8010b12 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d102      	bne.n	8010b24 <xTaskPriorityDisinherit+0x34>
 8010b1e:	b672      	cpsid	i
 8010b20:	46c0      	nop			@ (mov r8, r8)
 8010b22:	e7fd      	b.n	8010b20 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b28:	1e5a      	subs	r2, r3, #1
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d02c      	beq.n	8010b94 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d128      	bne.n	8010b94 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	3304      	adds	r3, #4
 8010b46:	0018      	movs	r0, r3
 8010b48:	f7fe fd51 	bl	800f5ee <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b58:	2238      	movs	r2, #56	@ 0x38
 8010b5a:	1ad2      	subs	r2, r2, r3
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b64:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba4 <xTaskPriorityDisinherit+0xb4>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d903      	bls.n	8010b74 <xTaskPriorityDisinherit+0x84>
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b70:	4b0c      	ldr	r3, [pc, #48]	@ (8010ba4 <xTaskPriorityDisinherit+0xb4>)
 8010b72:	601a      	str	r2, [r3, #0]
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b78:	0013      	movs	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	189b      	adds	r3, r3, r2
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	4a09      	ldr	r2, [pc, #36]	@ (8010ba8 <xTaskPriorityDisinherit+0xb8>)
 8010b82:	189a      	adds	r2, r3, r2
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3304      	adds	r3, #4
 8010b88:	0019      	movs	r1, r3
 8010b8a:	0010      	movs	r0, r2
 8010b8c:	f7fe fcd7 	bl	800f53e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010b90:	2301      	movs	r3, #1
 8010b92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010b94:	68fb      	ldr	r3, [r7, #12]
	}
 8010b96:	0018      	movs	r0, r3
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	b004      	add	sp, #16
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	46c0      	nop			@ (mov r8, r8)
 8010ba0:	200036fc 	.word	0x200036fc
 8010ba4:	20003bd8 	.word	0x20003bd8
 8010ba8:	20003700 	.word	0x20003700

08010bac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010bb6:	4b21      	ldr	r3, [pc, #132]	@ (8010c3c <prvAddCurrentTaskToDelayedList+0x90>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bbc:	4b20      	ldr	r3, [pc, #128]	@ (8010c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	3304      	adds	r3, #4
 8010bc2:	0018      	movs	r0, r3
 8010bc4:	f7fe fd13 	bl	800f5ee <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	d10b      	bne.n	8010be6 <prvAddCurrentTaskToDelayedList+0x3a>
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d008      	beq.n	8010be6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8010c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	1d1a      	adds	r2, r3, #4
 8010bda:	4b1a      	ldr	r3, [pc, #104]	@ (8010c44 <prvAddCurrentTaskToDelayedList+0x98>)
 8010bdc:	0011      	movs	r1, r2
 8010bde:	0018      	movs	r0, r3
 8010be0:	f7fe fcad 	bl	800f53e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010be4:	e026      	b.n	8010c34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	18d3      	adds	r3, r2, r3
 8010bec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010bee:	4b14      	ldr	r3, [pc, #80]	@ (8010c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	68ba      	ldr	r2, [r7, #8]
 8010bf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d209      	bcs.n	8010c12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bfe:	4b12      	ldr	r3, [pc, #72]	@ (8010c48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	4b0f      	ldr	r3, [pc, #60]	@ (8010c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	3304      	adds	r3, #4
 8010c08:	0019      	movs	r1, r3
 8010c0a:	0010      	movs	r0, r2
 8010c0c:	f7fe fcb9 	bl	800f582 <vListInsert>
}
 8010c10:	e010      	b.n	8010c34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c12:	4b0e      	ldr	r3, [pc, #56]	@ (8010c4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	4b0a      	ldr	r3, [pc, #40]	@ (8010c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	3304      	adds	r3, #4
 8010c1c:	0019      	movs	r1, r3
 8010c1e:	0010      	movs	r0, r2
 8010c20:	f7fe fcaf 	bl	800f582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c24:	4b0a      	ldr	r3, [pc, #40]	@ (8010c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68ba      	ldr	r2, [r7, #8]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d202      	bcs.n	8010c34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010c2e:	4b08      	ldr	r3, [pc, #32]	@ (8010c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	601a      	str	r2, [r3, #0]
}
 8010c34:	46c0      	nop			@ (mov r8, r8)
 8010c36:	46bd      	mov	sp, r7
 8010c38:	b004      	add	sp, #16
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	20003bd4 	.word	0x20003bd4
 8010c40:	200036fc 	.word	0x200036fc
 8010c44:	20003bbc 	.word	0x20003bbc
 8010c48:	20003b8c 	.word	0x20003b8c
 8010c4c:	20003b88 	.word	0x20003b88
 8010c50:	20003bf0 	.word	0x20003bf0

08010c54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b089      	sub	sp, #36	@ 0x24
 8010c58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010c5e:	f000 fb5b 	bl	8011318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010c62:	4b18      	ldr	r3, [pc, #96]	@ (8010cc4 <xTimerCreateTimerTask+0x70>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d020      	beq.n	8010cac <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010c72:	003a      	movs	r2, r7
 8010c74:	1d39      	adds	r1, r7, #4
 8010c76:	2308      	movs	r3, #8
 8010c78:	18fb      	adds	r3, r7, r3
 8010c7a:	0018      	movs	r0, r3
 8010c7c:	f7fe fc1e 	bl	800f4bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010c80:	683c      	ldr	r4, [r7, #0]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	4910      	ldr	r1, [pc, #64]	@ (8010cc8 <xTimerCreateTimerTask+0x74>)
 8010c88:	4810      	ldr	r0, [pc, #64]	@ (8010ccc <xTimerCreateTimerTask+0x78>)
 8010c8a:	9202      	str	r2, [sp, #8]
 8010c8c:	9301      	str	r3, [sp, #4]
 8010c8e:	2300      	movs	r3, #0
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	2300      	movs	r3, #0
 8010c94:	0022      	movs	r2, r4
 8010c96:	f7ff f958 	bl	800ff4a <xTaskCreateStatic>
 8010c9a:	0002      	movs	r2, r0
 8010c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8010cd0 <xTimerCreateTimerTask+0x7c>)
 8010c9e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8010cd0 <xTimerCreateTimerTask+0x7c>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d102      	bne.n	8010cb8 <xTimerCreateTimerTask+0x64>
 8010cb2:	b672      	cpsid	i
 8010cb4:	46c0      	nop			@ (mov r8, r8)
 8010cb6:	e7fd      	b.n	8010cb4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
}
 8010cba:	0018      	movs	r0, r3
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	b005      	add	sp, #20
 8010cc0:	bd90      	pop	{r4, r7, pc}
 8010cc2:	46c0      	nop			@ (mov r8, r8)
 8010cc4:	20003c2c 	.word	0x20003c2c
 8010cc8:	08016f00 	.word	0x08016f00
 8010ccc:	08010f05 	.word	0x08010f05
 8010cd0:	20003c30 	.word	0x20003c30

08010cd4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010cd4:	b590      	push	{r4, r7, lr}
 8010cd6:	b089      	sub	sp, #36	@ 0x24
 8010cd8:	af02      	add	r7, sp, #8
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
 8010ce0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010ce2:	202c      	movs	r0, #44	@ 0x2c
 8010ce4:	f000 fca4 	bl	8011630 <pvPortMalloc>
 8010ce8:	0003      	movs	r3, r0
 8010cea:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00e      	beq.n	8010d10 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	2228      	movs	r2, #40	@ 0x28
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010cfa:	683c      	ldr	r4, [r7, #0]
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	68b9      	ldr	r1, [r7, #8]
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	9301      	str	r3, [sp, #4]
 8010d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	0023      	movs	r3, r4
 8010d0c:	f000 f834 	bl	8010d78 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010d10:	697b      	ldr	r3, [r7, #20]
	}
 8010d12:	0018      	movs	r0, r3
 8010d14:	46bd      	mov	sp, r7
 8010d16:	b007      	add	sp, #28
 8010d18:	bd90      	pop	{r4, r7, pc}

08010d1a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010d1a:	b590      	push	{r4, r7, lr}
 8010d1c:	b089      	sub	sp, #36	@ 0x24
 8010d1e:	af02      	add	r7, sp, #8
 8010d20:	60f8      	str	r0, [r7, #12]
 8010d22:	60b9      	str	r1, [r7, #8]
 8010d24:	607a      	str	r2, [r7, #4]
 8010d26:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010d28:	232c      	movs	r3, #44	@ 0x2c
 8010d2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	2b2c      	cmp	r3, #44	@ 0x2c
 8010d30:	d002      	beq.n	8010d38 <xTimerCreateStatic+0x1e>
 8010d32:	b672      	cpsid	i
 8010d34:	46c0      	nop			@ (mov r8, r8)
 8010d36:	e7fd      	b.n	8010d34 <xTimerCreateStatic+0x1a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010d38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d102      	bne.n	8010d46 <xTimerCreateStatic+0x2c>
 8010d40:	b672      	cpsid	i
 8010d42:	46c0      	nop			@ (mov r8, r8)
 8010d44:	e7fd      	b.n	8010d42 <xTimerCreateStatic+0x28>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d48:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00e      	beq.n	8010d6e <xTimerCreateStatic+0x54>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	2228      	movs	r2, #40	@ 0x28
 8010d54:	2102      	movs	r1, #2
 8010d56:	5499      	strb	r1, [r3, r2]

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010d58:	683c      	ldr	r4, [r7, #0]
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	9301      	str	r3, [sp, #4]
 8010d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	0023      	movs	r3, r4
 8010d6a:	f000 f805 	bl	8010d78 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010d6e:	697b      	ldr	r3, [r7, #20]
	}
 8010d70:	0018      	movs	r0, r3
 8010d72:	46bd      	mov	sp, r7
 8010d74:	b007      	add	sp, #28
 8010d76:	bd90      	pop	{r4, r7, pc}

08010d78 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
 8010d84:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <prvInitialiseNewTimer+0x1a>
 8010d8c:	b672      	cpsid	i
 8010d8e:	46c0      	nop			@ (mov r8, r8)
 8010d90:	e7fd      	b.n	8010d8e <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d01e      	beq.n	8010dd6 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010d98:	f000 fabe 	bl	8011318 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	68ba      	ldr	r2, [r7, #8]
 8010da6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	69ba      	ldr	r2, [r7, #24]
 8010db2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	3304      	adds	r3, #4
 8010db8:	0018      	movs	r0, r3
 8010dba:	f7fe fbb5 	bl	800f528 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d008      	beq.n	8010dd6 <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	2228      	movs	r2, #40	@ 0x28
 8010dc8:	5c9b      	ldrb	r3, [r3, r2]
 8010dca:	2204      	movs	r2, #4
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	b2d9      	uxtb	r1, r3
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	2228      	movs	r2, #40	@ 0x28
 8010dd4:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010dd6:	46c0      	nop			@ (mov r8, r8)
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	b004      	add	sp, #16
 8010ddc:	bd80      	pop	{r7, pc}
	...

08010de0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010de0:	b590      	push	{r4, r7, lr}
 8010de2:	b08b      	sub	sp, #44	@ 0x2c
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]
 8010dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d102      	bne.n	8010dfe <xTimerGenericCommand+0x1e>
 8010df8:	b672      	cpsid	i
 8010dfa:	46c0      	nop			@ (mov r8, r8)
 8010dfc:	e7fd      	b.n	8010dfa <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8010e74 <xTimerGenericCommand+0x94>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d030      	beq.n	8010e68 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010e06:	2414      	movs	r4, #20
 8010e08:	193b      	adds	r3, r7, r4
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010e0e:	193b      	adds	r3, r7, r4
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010e14:	193b      	adds	r3, r7, r4
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2b05      	cmp	r3, #5
 8010e1e:	dc19      	bgt.n	8010e54 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010e20:	f7ff fe4a 	bl	8010ab8 <xTaskGetSchedulerState>
 8010e24:	0003      	movs	r3, r0
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	d109      	bne.n	8010e3e <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010e2a:	4b12      	ldr	r3, [pc, #72]	@ (8010e74 <xTimerGenericCommand+0x94>)
 8010e2c:	6818      	ldr	r0, [r3, #0]
 8010e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e30:	1939      	adds	r1, r7, r4
 8010e32:	2300      	movs	r3, #0
 8010e34:	f7fe fd03 	bl	800f83e <xQueueGenericSend>
 8010e38:	0003      	movs	r3, r0
 8010e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e3c:	e014      	b.n	8010e68 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e74 <xTimerGenericCommand+0x94>)
 8010e40:	6818      	ldr	r0, [r3, #0]
 8010e42:	2314      	movs	r3, #20
 8010e44:	18f9      	adds	r1, r7, r3
 8010e46:	2300      	movs	r3, #0
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f7fe fcf8 	bl	800f83e <xQueueGenericSend>
 8010e4e:	0003      	movs	r3, r0
 8010e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e52:	e009      	b.n	8010e68 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010e54:	4b07      	ldr	r3, [pc, #28]	@ (8010e74 <xTimerGenericCommand+0x94>)
 8010e56:	6818      	ldr	r0, [r3, #0]
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	2314      	movs	r3, #20
 8010e5c:	18f9      	adds	r1, r7, r3
 8010e5e:	2300      	movs	r3, #0
 8010e60:	f7fe fdb5 	bl	800f9ce <xQueueGenericSendFromISR>
 8010e64:	0003      	movs	r3, r0
 8010e66:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010e6a:	0018      	movs	r0, r3
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	b00b      	add	sp, #44	@ 0x2c
 8010e70:	bd90      	pop	{r4, r7, pc}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	20003c2c 	.word	0x20003c2c

08010e78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e82:	4b1f      	ldr	r3, [pc, #124]	@ (8010f00 <prvProcessExpiredTimer+0x88>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3304      	adds	r3, #4
 8010e90:	0018      	movs	r0, r3
 8010e92:	f7fe fbac 	bl	800f5ee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2228      	movs	r2, #40	@ 0x28
 8010e9a:	5c9b      	ldrb	r3, [r3, r2]
 8010e9c:	001a      	movs	r2, r3
 8010e9e:	2304      	movs	r3, #4
 8010ea0:	4013      	ands	r3, r2
 8010ea2:	d01a      	beq.n	8010eda <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	699a      	ldr	r2, [r3, #24]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	18d1      	adds	r1, r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	683a      	ldr	r2, [r7, #0]
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f000 f8c7 	bl	8011044 <prvInsertTimerInActiveList>
 8010eb6:	1e03      	subs	r3, r0, #0
 8010eb8:	d018      	beq.n	8010eec <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	f7ff ff8b 	bl	8010de0 <xTimerGenericCommand>
 8010eca:	0003      	movs	r3, r0
 8010ecc:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10b      	bne.n	8010eec <prvProcessExpiredTimer+0x74>
 8010ed4:	b672      	cpsid	i
 8010ed6:	46c0      	nop			@ (mov r8, r8)
 8010ed8:	e7fd      	b.n	8010ed6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2228      	movs	r2, #40	@ 0x28
 8010ede:	5c9b      	ldrb	r3, [r3, r2]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	4393      	bics	r3, r2
 8010ee4:	b2d9      	uxtb	r1, r3
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2228      	movs	r2, #40	@ 0x28
 8010eea:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	6a1b      	ldr	r3, [r3, #32]
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	0010      	movs	r0, r2
 8010ef4:	4798      	blx	r3
}
 8010ef6:	46c0      	nop			@ (mov r8, r8)
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	b004      	add	sp, #16
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	46c0      	nop			@ (mov r8, r8)
 8010f00:	20003c24 	.word	0x20003c24

08010f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f0c:	2308      	movs	r3, #8
 8010f0e:	18fb      	adds	r3, r7, r3
 8010f10:	0018      	movs	r0, r3
 8010f12:	f000 f855 	bl	8010fc0 <prvGetNextExpireTime>
 8010f16:	0003      	movs	r3, r0
 8010f18:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	0011      	movs	r1, r2
 8010f20:	0018      	movs	r0, r3
 8010f22:	f000 f805 	bl	8010f30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010f26:	f000 f8cf 	bl	80110c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f2a:	46c0      	nop			@ (mov r8, r8)
 8010f2c:	e7ee      	b.n	8010f0c <prvTimerTask+0x8>
	...

08010f30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010f3a:	f7ff fa29 	bl	8010390 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f3e:	2308      	movs	r3, #8
 8010f40:	18fb      	adds	r3, r7, r3
 8010f42:	0018      	movs	r0, r3
 8010f44:	f000 f85e 	bl	8011004 <prvSampleTimeNow>
 8010f48:	0003      	movs	r3, r0
 8010f4a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d12b      	bne.n	8010faa <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d10c      	bne.n	8010f72 <prvProcessTimerOrBlockTask+0x42>
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d808      	bhi.n	8010f72 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8010f60:	f7ff fa22 	bl	80103a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	0011      	movs	r1, r2
 8010f6a:	0018      	movs	r0, r3
 8010f6c:	f7ff ff84 	bl	8010e78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010f70:	e01d      	b.n	8010fae <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d008      	beq.n	8010f8a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010f78:	4b0f      	ldr	r3, [pc, #60]	@ (8010fb8 <prvProcessTimerOrBlockTask+0x88>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d101      	bne.n	8010f86 <prvProcessTimerOrBlockTask+0x56>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e000      	b.n	8010f88 <prvProcessTimerOrBlockTask+0x58>
 8010f86:	2300      	movs	r3, #0
 8010f88:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8010fbc <prvProcessTimerOrBlockTask+0x8c>)
 8010f8c:	6818      	ldr	r0, [r3, #0]
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	1ad3      	subs	r3, r2, r3
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	0019      	movs	r1, r3
 8010f98:	f7fe ffa4 	bl	800fee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010f9c:	f7ff fa04 	bl	80103a8 <xTaskResumeAll>
 8010fa0:	1e03      	subs	r3, r0, #0
 8010fa2:	d104      	bne.n	8010fae <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8010fa4:	f000 fa9c 	bl	80114e0 <vPortYield>
}
 8010fa8:	e001      	b.n	8010fae <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8010faa:	f7ff f9fd 	bl	80103a8 <xTaskResumeAll>
}
 8010fae:	46c0      	nop			@ (mov r8, r8)
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	b004      	add	sp, #16
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	46c0      	nop			@ (mov r8, r8)
 8010fb8:	20003c28 	.word	0x20003c28
 8010fbc:	20003c2c 	.word	0x20003c2c

08010fc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8011000 <prvGetNextExpireTime+0x40>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <prvGetNextExpireTime+0x16>
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	e000      	b.n	8010fd8 <prvGetNextExpireTime+0x18>
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d105      	bne.n	8010ff0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010fe4:	4b06      	ldr	r3, [pc, #24]	@ (8011000 <prvGetNextExpireTime+0x40>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	60fb      	str	r3, [r7, #12]
 8010fee:	e001      	b.n	8010ff4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
}
 8010ff6:	0018      	movs	r0, r3
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	b004      	add	sp, #16
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	46c0      	nop			@ (mov r8, r8)
 8011000:	20003c24 	.word	0x20003c24

08011004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801100c:	f7ff fa58 	bl	80104c0 <xTaskGetTickCount>
 8011010:	0003      	movs	r3, r0
 8011012:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8011014:	4b0a      	ldr	r3, [pc, #40]	@ (8011040 <prvSampleTimeNow+0x3c>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	429a      	cmp	r2, r3
 801101c:	d205      	bcs.n	801102a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801101e:	f000 f91d 	bl	801125c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2201      	movs	r2, #1
 8011026:	601a      	str	r2, [r3, #0]
 8011028:	e002      	b.n	8011030 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011030:	4b03      	ldr	r3, [pc, #12]	@ (8011040 <prvSampleTimeNow+0x3c>)
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8011036:	68fb      	ldr	r3, [r7, #12]
}
 8011038:	0018      	movs	r0, r3
 801103a:	46bd      	mov	sp, r7
 801103c:	b004      	add	sp, #16
 801103e:	bd80      	pop	{r7, pc}
 8011040:	20003c34 	.word	0x20003c34

08011044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011052:	2300      	movs	r3, #0
 8011054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	429a      	cmp	r2, r3
 8011068:	d812      	bhi.n	8011090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	1ad2      	subs	r2, r2, r3
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	699b      	ldr	r3, [r3, #24]
 8011074:	429a      	cmp	r2, r3
 8011076:	d302      	bcc.n	801107e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011078:	2301      	movs	r3, #1
 801107a:	617b      	str	r3, [r7, #20]
 801107c:	e01b      	b.n	80110b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801107e:	4b10      	ldr	r3, [pc, #64]	@ (80110c0 <prvInsertTimerInActiveList+0x7c>)
 8011080:	681a      	ldr	r2, [r3, #0]
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	3304      	adds	r3, #4
 8011086:	0019      	movs	r1, r3
 8011088:	0010      	movs	r0, r2
 801108a:	f7fe fa7a 	bl	800f582 <vListInsert>
 801108e:	e012      	b.n	80110b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	429a      	cmp	r2, r3
 8011096:	d206      	bcs.n	80110a6 <prvInsertTimerInActiveList+0x62>
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	429a      	cmp	r2, r3
 801109e:	d302      	bcc.n	80110a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80110a0:	2301      	movs	r3, #1
 80110a2:	617b      	str	r3, [r7, #20]
 80110a4:	e007      	b.n	80110b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110a6:	4b07      	ldr	r3, [pc, #28]	@ (80110c4 <prvInsertTimerInActiveList+0x80>)
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	3304      	adds	r3, #4
 80110ae:	0019      	movs	r1, r3
 80110b0:	0010      	movs	r0, r2
 80110b2:	f7fe fa66 	bl	800f582 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80110b6:	697b      	ldr	r3, [r7, #20]
}
 80110b8:	0018      	movs	r0, r3
 80110ba:	46bd      	mov	sp, r7
 80110bc:	b006      	add	sp, #24
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20003c28 	.word	0x20003c28
 80110c4:	20003c24 	.word	0x20003c24

080110c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80110c8:	b590      	push	{r4, r7, lr}
 80110ca:	b08d      	sub	sp, #52	@ 0x34
 80110cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80110ce:	e0b1      	b.n	8011234 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80110d0:	2208      	movs	r2, #8
 80110d2:	18bb      	adds	r3, r7, r2
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	da10      	bge.n	80110fc <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80110da:	18bb      	adds	r3, r7, r2
 80110dc:	3304      	adds	r3, #4
 80110de:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80110e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d102      	bne.n	80110ec <prvProcessReceivedCommands+0x24>
 80110e6:	b672      	cpsid	i
 80110e8:	46c0      	nop			@ (mov r8, r8)
 80110ea:	e7fd      	b.n	80110e8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80110ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f2:	6858      	ldr	r0, [r3, #4]
 80110f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	0019      	movs	r1, r3
 80110fa:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80110fc:	2208      	movs	r2, #8
 80110fe:	18bb      	adds	r3, r7, r2
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	da00      	bge.n	8011108 <prvProcessReceivedCommands+0x40>
 8011106:	e095      	b.n	8011234 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011108:	18bb      	adds	r3, r7, r2
 801110a:	689b      	ldr	r3, [r3, #8]
 801110c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801110e:	6a3b      	ldr	r3, [r7, #32]
 8011110:	695b      	ldr	r3, [r3, #20]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d004      	beq.n	8011120 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011116:	6a3b      	ldr	r3, [r7, #32]
 8011118:	3304      	adds	r3, #4
 801111a:	0018      	movs	r0, r3
 801111c:	f7fe fa67 	bl	800f5ee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011120:	1d3b      	adds	r3, r7, #4
 8011122:	0018      	movs	r0, r3
 8011124:	f7ff ff6e 	bl	8011004 <prvSampleTimeNow>
 8011128:	0003      	movs	r3, r0
 801112a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801112c:	2308      	movs	r3, #8
 801112e:	18fb      	adds	r3, r7, r3
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b09      	cmp	r3, #9
 8011134:	d900      	bls.n	8011138 <prvProcessReceivedCommands+0x70>
 8011136:	e07a      	b.n	801122e <prvProcessReceivedCommands+0x166>
 8011138:	009a      	lsls	r2, r3, #2
 801113a:	4b46      	ldr	r3, [pc, #280]	@ (8011254 <prvProcessReceivedCommands+0x18c>)
 801113c:	18d3      	adds	r3, r2, r3
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011142:	6a3b      	ldr	r3, [r7, #32]
 8011144:	2228      	movs	r2, #40	@ 0x28
 8011146:	5c9b      	ldrb	r3, [r3, r2]
 8011148:	2201      	movs	r2, #1
 801114a:	4313      	orrs	r3, r2
 801114c:	b2d9      	uxtb	r1, r3
 801114e:	6a3b      	ldr	r3, [r7, #32]
 8011150:	2228      	movs	r2, #40	@ 0x28
 8011152:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011154:	2408      	movs	r4, #8
 8011156:	193b      	adds	r3, r7, r4
 8011158:	685a      	ldr	r2, [r3, #4]
 801115a:	6a3b      	ldr	r3, [r7, #32]
 801115c:	699b      	ldr	r3, [r3, #24]
 801115e:	18d1      	adds	r1, r2, r3
 8011160:	193b      	adds	r3, r7, r4
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	69fa      	ldr	r2, [r7, #28]
 8011166:	6a38      	ldr	r0, [r7, #32]
 8011168:	f7ff ff6c 	bl	8011044 <prvInsertTimerInActiveList>
 801116c:	1e03      	subs	r3, r0, #0
 801116e:	d060      	beq.n	8011232 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	6a1b      	ldr	r3, [r3, #32]
 8011174:	6a3a      	ldr	r2, [r7, #32]
 8011176:	0010      	movs	r0, r2
 8011178:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801117a:	6a3b      	ldr	r3, [r7, #32]
 801117c:	2228      	movs	r2, #40	@ 0x28
 801117e:	5c9b      	ldrb	r3, [r3, r2]
 8011180:	001a      	movs	r2, r3
 8011182:	2304      	movs	r3, #4
 8011184:	4013      	ands	r3, r2
 8011186:	d054      	beq.n	8011232 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011188:	193b      	adds	r3, r7, r4
 801118a:	685a      	ldr	r2, [r3, #4]
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	699b      	ldr	r3, [r3, #24]
 8011190:	18d2      	adds	r2, r2, r3
 8011192:	6a38      	ldr	r0, [r7, #32]
 8011194:	2300      	movs	r3, #0
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	2300      	movs	r3, #0
 801119a:	2100      	movs	r1, #0
 801119c:	f7ff fe20 	bl	8010de0 <xTimerGenericCommand>
 80111a0:	0003      	movs	r3, r0
 80111a2:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d143      	bne.n	8011232 <prvProcessReceivedCommands+0x16a>
 80111aa:	b672      	cpsid	i
 80111ac:	46c0      	nop			@ (mov r8, r8)
 80111ae:	e7fd      	b.n	80111ac <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111b0:	6a3b      	ldr	r3, [r7, #32]
 80111b2:	2228      	movs	r2, #40	@ 0x28
 80111b4:	5c9b      	ldrb	r3, [r3, r2]
 80111b6:	2201      	movs	r2, #1
 80111b8:	4393      	bics	r3, r2
 80111ba:	b2d9      	uxtb	r1, r3
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	2228      	movs	r2, #40	@ 0x28
 80111c0:	5499      	strb	r1, [r3, r2]
					break;
 80111c2:	e037      	b.n	8011234 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	2228      	movs	r2, #40	@ 0x28
 80111c8:	5c9b      	ldrb	r3, [r3, r2]
 80111ca:	2201      	movs	r2, #1
 80111cc:	4313      	orrs	r3, r2
 80111ce:	b2d9      	uxtb	r1, r3
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	2228      	movs	r2, #40	@ 0x28
 80111d4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80111d6:	2308      	movs	r3, #8
 80111d8:	18fb      	adds	r3, r7, r3
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	6a3b      	ldr	r3, [r7, #32]
 80111de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80111e0:	6a3b      	ldr	r3, [r7, #32]
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d102      	bne.n	80111ee <prvProcessReceivedCommands+0x126>
 80111e8:	b672      	cpsid	i
 80111ea:	46c0      	nop			@ (mov r8, r8)
 80111ec:	e7fd      	b.n	80111ea <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80111ee:	6a3b      	ldr	r3, [r7, #32]
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	18d1      	adds	r1, r2, r3
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	69fa      	ldr	r2, [r7, #28]
 80111fa:	6a38      	ldr	r0, [r7, #32]
 80111fc:	f7ff ff22 	bl	8011044 <prvInsertTimerInActiveList>
					break;
 8011200:	e018      	b.n	8011234 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	2228      	movs	r2, #40	@ 0x28
 8011206:	5c9b      	ldrb	r3, [r3, r2]
 8011208:	001a      	movs	r2, r3
 801120a:	2302      	movs	r3, #2
 801120c:	4013      	ands	r3, r2
 801120e:	d104      	bne.n	801121a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8011210:	6a3b      	ldr	r3, [r7, #32]
 8011212:	0018      	movs	r0, r3
 8011214:	f000 fabc 	bl	8011790 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011218:	e00c      	b.n	8011234 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	2228      	movs	r2, #40	@ 0x28
 801121e:	5c9b      	ldrb	r3, [r3, r2]
 8011220:	2201      	movs	r2, #1
 8011222:	4393      	bics	r3, r2
 8011224:	b2d9      	uxtb	r1, r3
 8011226:	6a3b      	ldr	r3, [r7, #32]
 8011228:	2228      	movs	r2, #40	@ 0x28
 801122a:	5499      	strb	r1, [r3, r2]
					break;
 801122c:	e002      	b.n	8011234 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 801122e:	46c0      	nop			@ (mov r8, r8)
 8011230:	e000      	b.n	8011234 <prvProcessReceivedCommands+0x16c>
					break;
 8011232:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011234:	4b08      	ldr	r3, [pc, #32]	@ (8011258 <prvProcessReceivedCommands+0x190>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2208      	movs	r2, #8
 801123a:	18b9      	adds	r1, r7, r2
 801123c:	2200      	movs	r2, #0
 801123e:	0018      	movs	r0, r3
 8011240:	f7fe fc3c 	bl	800fabc <xQueueReceive>
 8011244:	1e03      	subs	r3, r0, #0
 8011246:	d000      	beq.n	801124a <prvProcessReceivedCommands+0x182>
 8011248:	e742      	b.n	80110d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801124a:	46c0      	nop			@ (mov r8, r8)
 801124c:	46c0      	nop			@ (mov r8, r8)
 801124e:	46bd      	mov	sp, r7
 8011250:	b00b      	add	sp, #44	@ 0x2c
 8011252:	bd90      	pop	{r4, r7, pc}
 8011254:	08017118 	.word	0x08017118
 8011258:	20003c2c 	.word	0x20003c2c

0801125c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b088      	sub	sp, #32
 8011260:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011262:	e042      	b.n	80112ea <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011264:	4b2a      	ldr	r3, [pc, #168]	@ (8011310 <prvSwitchTimerLists+0xb4>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801126e:	4b28      	ldr	r3, [pc, #160]	@ (8011310 <prvSwitchTimerLists+0xb4>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	3304      	adds	r3, #4
 801127c:	0018      	movs	r0, r3
 801127e:	f7fe f9b6 	bl	800f5ee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6a1b      	ldr	r3, [r3, #32]
 8011286:	68fa      	ldr	r2, [r7, #12]
 8011288:	0010      	movs	r0, r2
 801128a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2228      	movs	r2, #40	@ 0x28
 8011290:	5c9b      	ldrb	r3, [r3, r2]
 8011292:	001a      	movs	r2, r3
 8011294:	2304      	movs	r3, #4
 8011296:	4013      	ands	r3, r2
 8011298:	d027      	beq.n	80112ea <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	699b      	ldr	r3, [r3, #24]
 801129e:	693a      	ldr	r2, [r7, #16]
 80112a0:	18d3      	adds	r3, r2, r3
 80112a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d90e      	bls.n	80112ca <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	68fa      	ldr	r2, [r7, #12]
 80112b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80112b8:	4b15      	ldr	r3, [pc, #84]	@ (8011310 <prvSwitchTimerLists+0xb4>)
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	3304      	adds	r3, #4
 80112c0:	0019      	movs	r1, r3
 80112c2:	0010      	movs	r0, r2
 80112c4:	f7fe f95d 	bl	800f582 <vListInsert>
 80112c8:	e00f      	b.n	80112ea <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80112ca:	693a      	ldr	r2, [r7, #16]
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	2300      	movs	r3, #0
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	2300      	movs	r3, #0
 80112d4:	2100      	movs	r1, #0
 80112d6:	f7ff fd83 	bl	8010de0 <xTimerGenericCommand>
 80112da:	0003      	movs	r3, r0
 80112dc:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d102      	bne.n	80112ea <prvSwitchTimerLists+0x8e>
 80112e4:	b672      	cpsid	i
 80112e6:	46c0      	nop			@ (mov r8, r8)
 80112e8:	e7fd      	b.n	80112e6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80112ea:	4b09      	ldr	r3, [pc, #36]	@ (8011310 <prvSwitchTimerLists+0xb4>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d1b7      	bne.n	8011264 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80112f4:	4b06      	ldr	r3, [pc, #24]	@ (8011310 <prvSwitchTimerLists+0xb4>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80112fa:	4b06      	ldr	r3, [pc, #24]	@ (8011314 <prvSwitchTimerLists+0xb8>)
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	4b04      	ldr	r3, [pc, #16]	@ (8011310 <prvSwitchTimerLists+0xb4>)
 8011300:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8011302:	4b04      	ldr	r3, [pc, #16]	@ (8011314 <prvSwitchTimerLists+0xb8>)
 8011304:	697a      	ldr	r2, [r7, #20]
 8011306:	601a      	str	r2, [r3, #0]
}
 8011308:	46c0      	nop			@ (mov r8, r8)
 801130a:	46bd      	mov	sp, r7
 801130c:	b006      	add	sp, #24
 801130e:	bd80      	pop	{r7, pc}
 8011310:	20003c24 	.word	0x20003c24
 8011314:	20003c28 	.word	0x20003c28

08011318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801131e:	f000 f8ef 	bl	8011500 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011322:	4b16      	ldr	r3, [pc, #88]	@ (801137c <prvCheckForValidListAndQueue+0x64>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d123      	bne.n	8011372 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801132a:	4b15      	ldr	r3, [pc, #84]	@ (8011380 <prvCheckForValidListAndQueue+0x68>)
 801132c:	0018      	movs	r0, r3
 801132e:	f7fe f8dd 	bl	800f4ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011332:	4b14      	ldr	r3, [pc, #80]	@ (8011384 <prvCheckForValidListAndQueue+0x6c>)
 8011334:	0018      	movs	r0, r3
 8011336:	f7fe f8d9 	bl	800f4ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801133a:	4b13      	ldr	r3, [pc, #76]	@ (8011388 <prvCheckForValidListAndQueue+0x70>)
 801133c:	4a10      	ldr	r2, [pc, #64]	@ (8011380 <prvCheckForValidListAndQueue+0x68>)
 801133e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011340:	4b12      	ldr	r3, [pc, #72]	@ (801138c <prvCheckForValidListAndQueue+0x74>)
 8011342:	4a10      	ldr	r2, [pc, #64]	@ (8011384 <prvCheckForValidListAndQueue+0x6c>)
 8011344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011346:	4b12      	ldr	r3, [pc, #72]	@ (8011390 <prvCheckForValidListAndQueue+0x78>)
 8011348:	4a12      	ldr	r2, [pc, #72]	@ (8011394 <prvCheckForValidListAndQueue+0x7c>)
 801134a:	2100      	movs	r1, #0
 801134c:	9100      	str	r1, [sp, #0]
 801134e:	2110      	movs	r1, #16
 8011350:	200a      	movs	r0, #10
 8011352:	f7fe f9c9 	bl	800f6e8 <xQueueGenericCreateStatic>
 8011356:	0002      	movs	r2, r0
 8011358:	4b08      	ldr	r3, [pc, #32]	@ (801137c <prvCheckForValidListAndQueue+0x64>)
 801135a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801135c:	4b07      	ldr	r3, [pc, #28]	@ (801137c <prvCheckForValidListAndQueue+0x64>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d006      	beq.n	8011372 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011364:	4b05      	ldr	r3, [pc, #20]	@ (801137c <prvCheckForValidListAndQueue+0x64>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4a0b      	ldr	r2, [pc, #44]	@ (8011398 <prvCheckForValidListAndQueue+0x80>)
 801136a:	0011      	movs	r1, r2
 801136c:	0018      	movs	r0, r3
 801136e:	f7fe fd91 	bl	800fe94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011372:	f000 f8d7 	bl	8011524 <vPortExitCritical>
}
 8011376:	46c0      	nop			@ (mov r8, r8)
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	20003c2c 	.word	0x20003c2c
 8011380:	20003bfc 	.word	0x20003bfc
 8011384:	20003c10 	.word	0x20003c10
 8011388:	20003c24 	.word	0x20003c24
 801138c:	20003c28 	.word	0x20003c28
 8011390:	20003cd8 	.word	0x20003cd8
 8011394:	20003c38 	.word	0x20003c38
 8011398:	08016f08 	.word	0x08016f08

0801139c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d102      	bne.n	80113b4 <pvTimerGetTimerID+0x18>
 80113ae:	b672      	cpsid	i
 80113b0:	46c0      	nop			@ (mov r8, r8)
 80113b2:	e7fd      	b.n	80113b0 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 80113b4:	f000 f8a4 	bl	8011500 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	69db      	ldr	r3, [r3, #28]
 80113bc:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 80113be:	f000 f8b1 	bl	8011524 <vPortExitCritical>

	return pvReturn;
 80113c2:	68bb      	ldr	r3, [r7, #8]
}
 80113c4:	0018      	movs	r0, r3
 80113c6:	46bd      	mov	sp, r7
 80113c8:	b004      	add	sp, #16
 80113ca:	bd80      	pop	{r7, pc}

080113cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	3b04      	subs	r3, #4
 80113dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2280      	movs	r2, #128	@ 0x80
 80113e2:	0452      	lsls	r2, r2, #17
 80113e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	3b04      	subs	r3, #4
 80113ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3b04      	subs	r3, #4
 80113f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80113f8:	4a08      	ldr	r2, [pc, #32]	@ (801141c <pxPortInitialiseStack+0x50>)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3b14      	subs	r3, #20
 8011402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	3b20      	subs	r3, #32
 801140e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011410:	68fb      	ldr	r3, [r7, #12]
}
 8011412:	0018      	movs	r0, r3
 8011414:	46bd      	mov	sp, r7
 8011416:	b004      	add	sp, #16
 8011418:	bd80      	pop	{r7, pc}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	08011421 	.word	0x08011421

08011420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8011426:	2300      	movs	r3, #0
 8011428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801142a:	4b08      	ldr	r3, [pc, #32]	@ (801144c <prvTaskExitError+0x2c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3301      	adds	r3, #1
 8011430:	d002      	beq.n	8011438 <prvTaskExitError+0x18>
 8011432:	b672      	cpsid	i
 8011434:	46c0      	nop			@ (mov r8, r8)
 8011436:	e7fd      	b.n	8011434 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8011438:	b672      	cpsid	i
	while( ulDummy == 0 )
 801143a:	46c0      	nop			@ (mov r8, r8)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d0fc      	beq.n	801143c <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011442:	46c0      	nop			@ (mov r8, r8)
 8011444:	46c0      	nop			@ (mov r8, r8)
 8011446:	46bd      	mov	sp, r7
 8011448:	b002      	add	sp, #8
 801144a:	bd80      	pop	{r7, pc}
 801144c:	20000080 	.word	0x20000080

08011450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8011454:	46c0      	nop			@ (mov r8, r8)
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	0000      	movs	r0, r0
 801145c:	0000      	movs	r0, r0
	...

08011460 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011460:	4a0b      	ldr	r2, [pc, #44]	@ (8011490 <pxCurrentTCBConst2>)
 8011462:	6813      	ldr	r3, [r2, #0]
 8011464:	6818      	ldr	r0, [r3, #0]
 8011466:	3020      	adds	r0, #32
 8011468:	f380 8809 	msr	PSP, r0
 801146c:	2002      	movs	r0, #2
 801146e:	f380 8814 	msr	CONTROL, r0
 8011472:	f3bf 8f6f 	isb	sy
 8011476:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011478:	46ae      	mov	lr, r5
 801147a:	bc08      	pop	{r3}
 801147c:	bc04      	pop	{r2}
 801147e:	b662      	cpsie	i
 8011480:	4718      	bx	r3
 8011482:	46c0      	nop			@ (mov r8, r8)
 8011484:	46c0      	nop			@ (mov r8, r8)
 8011486:	46c0      	nop			@ (mov r8, r8)
 8011488:	46c0      	nop			@ (mov r8, r8)
 801148a:	46c0      	nop			@ (mov r8, r8)
 801148c:	46c0      	nop			@ (mov r8, r8)
 801148e:	46c0      	nop			@ (mov r8, r8)

08011490 <pxCurrentTCBConst2>:
 8011490:	200036fc 	.word	0x200036fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8011494:	46c0      	nop			@ (mov r8, r8)
 8011496:	46c0      	nop			@ (mov r8, r8)

08011498 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801149c:	4b0e      	ldr	r3, [pc, #56]	@ (80114d8 <xPortStartScheduler+0x40>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	4b0d      	ldr	r3, [pc, #52]	@ (80114d8 <xPortStartScheduler+0x40>)
 80114a2:	21ff      	movs	r1, #255	@ 0xff
 80114a4:	0409      	lsls	r1, r1, #16
 80114a6:	430a      	orrs	r2, r1
 80114a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80114aa:	4b0b      	ldr	r3, [pc, #44]	@ (80114d8 <xPortStartScheduler+0x40>)
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	4b0a      	ldr	r3, [pc, #40]	@ (80114d8 <xPortStartScheduler+0x40>)
 80114b0:	21ff      	movs	r1, #255	@ 0xff
 80114b2:	0609      	lsls	r1, r1, #24
 80114b4:	430a      	orrs	r2, r1
 80114b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80114b8:	f000 f898 	bl	80115ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80114bc:	4b07      	ldr	r3, [pc, #28]	@ (80114dc <xPortStartScheduler+0x44>)
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80114c2:	f7ff ffcd 	bl	8011460 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80114c6:	f7ff f8b9 	bl	801063c <vTaskSwitchContext>
	prvTaskExitError();
 80114ca:	f7ff ffa9 	bl	8011420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	0018      	movs	r0, r3
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	46c0      	nop			@ (mov r8, r8)
 80114d8:	e000ed20 	.word	0xe000ed20
 80114dc:	20000080 	.word	0x20000080

080114e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114e4:	4b05      	ldr	r3, [pc, #20]	@ (80114fc <vPortYield+0x1c>)
 80114e6:	2280      	movs	r2, #128	@ 0x80
 80114e8:	0552      	lsls	r2, r2, #21
 80114ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80114ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80114f0:	f3bf 8f6f 	isb	sy
}
 80114f4:	46c0      	nop			@ (mov r8, r8)
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	46c0      	nop			@ (mov r8, r8)
 80114fc:	e000ed04 	.word	0xe000ed04

08011500 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011500:	b580      	push	{r7, lr}
 8011502:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8011504:	b672      	cpsid	i
	uxCriticalNesting++;
 8011506:	4b06      	ldr	r3, [pc, #24]	@ (8011520 <vPortEnterCritical+0x20>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	1c5a      	adds	r2, r3, #1
 801150c:	4b04      	ldr	r3, [pc, #16]	@ (8011520 <vPortEnterCritical+0x20>)
 801150e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8011510:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011514:	f3bf 8f6f 	isb	sy
}
 8011518:	46c0      	nop			@ (mov r8, r8)
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	46c0      	nop			@ (mov r8, r8)
 8011520:	20000080 	.word	0x20000080

08011524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011528:	4b09      	ldr	r3, [pc, #36]	@ (8011550 <vPortExitCritical+0x2c>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d102      	bne.n	8011536 <vPortExitCritical+0x12>
 8011530:	b672      	cpsid	i
 8011532:	46c0      	nop			@ (mov r8, r8)
 8011534:	e7fd      	b.n	8011532 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8011536:	4b06      	ldr	r3, [pc, #24]	@ (8011550 <vPortExitCritical+0x2c>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	1e5a      	subs	r2, r3, #1
 801153c:	4b04      	ldr	r3, [pc, #16]	@ (8011550 <vPortExitCritical+0x2c>)
 801153e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8011540:	4b03      	ldr	r3, [pc, #12]	@ (8011550 <vPortExitCritical+0x2c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d100      	bne.n	801154a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8011548:	b662      	cpsie	i
	}
}
 801154a:	46c0      	nop			@ (mov r8, r8)
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	20000080 	.word	0x20000080

08011554 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8011554:	f3ef 8010 	mrs	r0, PRIMASK
 8011558:	b672      	cpsid	i
 801155a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801155c:	46c0      	nop			@ (mov r8, r8)
 801155e:	0018      	movs	r0, r3

08011560 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8011560:	f380 8810 	msr	PRIMASK, r0
 8011564:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8011566:	46c0      	nop			@ (mov r8, r8)
	...

08011570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011570:	f3ef 8009 	mrs	r0, PSP
 8011574:	4b0e      	ldr	r3, [pc, #56]	@ (80115b0 <pxCurrentTCBConst>)
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	3820      	subs	r0, #32
 801157a:	6010      	str	r0, [r2, #0]
 801157c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801157e:	4644      	mov	r4, r8
 8011580:	464d      	mov	r5, r9
 8011582:	4656      	mov	r6, sl
 8011584:	465f      	mov	r7, fp
 8011586:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011588:	b508      	push	{r3, lr}
 801158a:	b672      	cpsid	i
 801158c:	f7ff f856 	bl	801063c <vTaskSwitchContext>
 8011590:	b662      	cpsie	i
 8011592:	bc0c      	pop	{r2, r3}
 8011594:	6811      	ldr	r1, [r2, #0]
 8011596:	6808      	ldr	r0, [r1, #0]
 8011598:	3010      	adds	r0, #16
 801159a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801159c:	46a0      	mov	r8, r4
 801159e:	46a9      	mov	r9, r5
 80115a0:	46b2      	mov	sl, r6
 80115a2:	46bb      	mov	fp, r7
 80115a4:	f380 8809 	msr	PSP, r0
 80115a8:	3820      	subs	r0, #32
 80115aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80115ac:	4718      	bx	r3
 80115ae:	46c0      	nop			@ (mov r8, r8)

080115b0 <pxCurrentTCBConst>:
 80115b0:	200036fc 	.word	0x200036fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80115b4:	46c0      	nop			@ (mov r8, r8)
 80115b6:	46c0      	nop			@ (mov r8, r8)

080115b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80115be:	f7ff ffc9 	bl	8011554 <ulSetInterruptMaskFromISR>
 80115c2:	0003      	movs	r3, r0
 80115c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80115c6:	f7fe ff89 	bl	80104dc <xTaskIncrementTick>
 80115ca:	1e03      	subs	r3, r0, #0
 80115cc:	d003      	beq.n	80115d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80115ce:	4b06      	ldr	r3, [pc, #24]	@ (80115e8 <xPortSysTickHandler+0x30>)
 80115d0:	2280      	movs	r2, #128	@ 0x80
 80115d2:	0552      	lsls	r2, r2, #21
 80115d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	0018      	movs	r0, r3
 80115da:	f7ff ffc1 	bl	8011560 <vClearInterruptMaskFromISR>
}
 80115de:	46c0      	nop			@ (mov r8, r8)
 80115e0:	46bd      	mov	sp, r7
 80115e2:	b002      	add	sp, #8
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	46c0      	nop			@ (mov r8, r8)
 80115e8:	e000ed04 	.word	0xe000ed04

080115ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80115f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011620 <vPortSetupTimerInterrupt+0x34>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80115f6:	4b0b      	ldr	r3, [pc, #44]	@ (8011624 <vPortSetupTimerInterrupt+0x38>)
 80115f8:	2200      	movs	r2, #0
 80115fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80115fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011628 <vPortSetupTimerInterrupt+0x3c>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	22fa      	movs	r2, #250	@ 0xfa
 8011602:	0091      	lsls	r1, r2, #2
 8011604:	0018      	movs	r0, r3
 8011606:	f7ee fd9b 	bl	8000140 <__udivsi3>
 801160a:	0003      	movs	r3, r0
 801160c:	001a      	movs	r2, r3
 801160e:	4b07      	ldr	r3, [pc, #28]	@ (801162c <vPortSetupTimerInterrupt+0x40>)
 8011610:	3a01      	subs	r2, #1
 8011612:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8011614:	4b02      	ldr	r3, [pc, #8]	@ (8011620 <vPortSetupTimerInterrupt+0x34>)
 8011616:	2207      	movs	r2, #7
 8011618:	601a      	str	r2, [r3, #0]
}
 801161a:	46c0      	nop			@ (mov r8, r8)
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	e000e010 	.word	0xe000e010
 8011624:	e000e018 	.word	0xe000e018
 8011628:	2000006c 	.word	0x2000006c
 801162c:	e000e014 	.word	0xe000e014

08011630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011638:	2300      	movs	r3, #0
 801163a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801163c:	f7fe fea8 	bl	8010390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011640:	4b4d      	ldr	r3, [pc, #308]	@ (8011778 <pvPortMalloc+0x148>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d101      	bne.n	801164c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011648:	f000 f8f2 	bl	8011830 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801164c:	4b4b      	ldr	r3, [pc, #300]	@ (801177c <pvPortMalloc+0x14c>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	4013      	ands	r3, r2
 8011654:	d000      	beq.n	8011658 <pvPortMalloc+0x28>
 8011656:	e080      	b.n	801175a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d013      	beq.n	8011686 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 801165e:	2208      	movs	r2, #8
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	189b      	adds	r3, r3, r2
 8011664:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2207      	movs	r2, #7
 801166a:	4013      	ands	r3, r2
 801166c:	d00b      	beq.n	8011686 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2207      	movs	r2, #7
 8011672:	4393      	bics	r3, r2
 8011674:	3308      	adds	r3, #8
 8011676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2207      	movs	r2, #7
 801167c:	4013      	ands	r3, r2
 801167e:	d002      	beq.n	8011686 <pvPortMalloc+0x56>
 8011680:	b672      	cpsid	i
 8011682:	46c0      	nop			@ (mov r8, r8)
 8011684:	e7fd      	b.n	8011682 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d066      	beq.n	801175a <pvPortMalloc+0x12a>
 801168c:	4b3c      	ldr	r3, [pc, #240]	@ (8011780 <pvPortMalloc+0x150>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	429a      	cmp	r2, r3
 8011694:	d861      	bhi.n	801175a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011696:	4b3b      	ldr	r3, [pc, #236]	@ (8011784 <pvPortMalloc+0x154>)
 8011698:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801169a:	4b3a      	ldr	r3, [pc, #232]	@ (8011784 <pvPortMalloc+0x154>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116a0:	e004      	b.n	80116ac <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d903      	bls.n	80116be <pvPortMalloc+0x8e>
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1f1      	bne.n	80116a2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80116be:	4b2e      	ldr	r3, [pc, #184]	@ (8011778 <pvPortMalloc+0x148>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	697a      	ldr	r2, [r7, #20]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d048      	beq.n	801175a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2208      	movs	r2, #8
 80116ce:	189b      	adds	r3, r3, r2
 80116d0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	685a      	ldr	r2, [r3, #4]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	1ad2      	subs	r2, r2, r3
 80116e2:	2308      	movs	r3, #8
 80116e4:	005b      	lsls	r3, r3, #1
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d917      	bls.n	801171a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80116ea:	697a      	ldr	r2, [r7, #20]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	18d3      	adds	r3, r2, r3
 80116f0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	2207      	movs	r2, #7
 80116f6:	4013      	ands	r3, r2
 80116f8:	d002      	beq.n	8011700 <pvPortMalloc+0xd0>
 80116fa:	b672      	cpsid	i
 80116fc:	46c0      	nop			@ (mov r8, r8)
 80116fe:	e7fd      	b.n	80116fc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	685a      	ldr	r2, [r3, #4]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	1ad2      	subs	r2, r2, r3
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	0018      	movs	r0, r3
 8011716:	f000 f8eb 	bl	80118f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801171a:	4b19      	ldr	r3, [pc, #100]	@ (8011780 <pvPortMalloc+0x150>)
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	1ad2      	subs	r2, r2, r3
 8011724:	4b16      	ldr	r3, [pc, #88]	@ (8011780 <pvPortMalloc+0x150>)
 8011726:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011728:	4b15      	ldr	r3, [pc, #84]	@ (8011780 <pvPortMalloc+0x150>)
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	4b16      	ldr	r3, [pc, #88]	@ (8011788 <pvPortMalloc+0x158>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	429a      	cmp	r2, r3
 8011732:	d203      	bcs.n	801173c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011734:	4b12      	ldr	r3, [pc, #72]	@ (8011780 <pvPortMalloc+0x150>)
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	4b13      	ldr	r3, [pc, #76]	@ (8011788 <pvPortMalloc+0x158>)
 801173a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	685a      	ldr	r2, [r3, #4]
 8011740:	4b0e      	ldr	r3, [pc, #56]	@ (801177c <pvPortMalloc+0x14c>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	431a      	orrs	r2, r3
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2200      	movs	r2, #0
 801174e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011750:	4b0e      	ldr	r3, [pc, #56]	@ (801178c <pvPortMalloc+0x15c>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	1c5a      	adds	r2, r3, #1
 8011756:	4b0d      	ldr	r3, [pc, #52]	@ (801178c <pvPortMalloc+0x15c>)
 8011758:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801175a:	f7fe fe25 	bl	80103a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2207      	movs	r2, #7
 8011762:	4013      	ands	r3, r2
 8011764:	d002      	beq.n	801176c <pvPortMalloc+0x13c>
 8011766:	b672      	cpsid	i
 8011768:	46c0      	nop			@ (mov r8, r8)
 801176a:	e7fd      	b.n	8011768 <pvPortMalloc+0x138>
	return pvReturn;
 801176c:	68fb      	ldr	r3, [r7, #12]
}
 801176e:	0018      	movs	r0, r3
 8011770:	46bd      	mov	sp, r7
 8011772:	b006      	add	sp, #24
 8011774:	bd80      	pop	{r7, pc}
 8011776:	46c0      	nop			@ (mov r8, r8)
 8011778:	20007130 	.word	0x20007130
 801177c:	20007144 	.word	0x20007144
 8011780:	20007134 	.word	0x20007134
 8011784:	20007128 	.word	0x20007128
 8011788:	20007138 	.word	0x20007138
 801178c:	2000713c 	.word	0x2000713c

08011790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d03c      	beq.n	801181c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80117a2:	2308      	movs	r3, #8
 80117a4:	425b      	negs	r3, r3
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	18d3      	adds	r3, r2, r3
 80117aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	685a      	ldr	r2, [r3, #4]
 80117b4:	4b1b      	ldr	r3, [pc, #108]	@ (8011824 <vPortFree+0x94>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	4013      	ands	r3, r2
 80117ba:	d102      	bne.n	80117c2 <vPortFree+0x32>
 80117bc:	b672      	cpsid	i
 80117be:	46c0      	nop			@ (mov r8, r8)
 80117c0:	e7fd      	b.n	80117be <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d002      	beq.n	80117d0 <vPortFree+0x40>
 80117ca:	b672      	cpsid	i
 80117cc:	46c0      	nop			@ (mov r8, r8)
 80117ce:	e7fd      	b.n	80117cc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	4b13      	ldr	r3, [pc, #76]	@ (8011824 <vPortFree+0x94>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4013      	ands	r3, r2
 80117da:	d01f      	beq.n	801181c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d11b      	bne.n	801181c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	685a      	ldr	r2, [r3, #4]
 80117e8:	4b0e      	ldr	r3, [pc, #56]	@ (8011824 <vPortFree+0x94>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	43db      	mvns	r3, r3
 80117ee:	401a      	ands	r2, r3
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117f4:	f7fe fdcc 	bl	8010390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011828 <vPortFree+0x98>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	18d2      	adds	r2, r2, r3
 8011802:	4b09      	ldr	r3, [pc, #36]	@ (8011828 <vPortFree+0x98>)
 8011804:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	0018      	movs	r0, r3
 801180a:	f000 f871 	bl	80118f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801180e:	4b07      	ldr	r3, [pc, #28]	@ (801182c <vPortFree+0x9c>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	1c5a      	adds	r2, r3, #1
 8011814:	4b05      	ldr	r3, [pc, #20]	@ (801182c <vPortFree+0x9c>)
 8011816:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8011818:	f7fe fdc6 	bl	80103a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801181c:	46c0      	nop			@ (mov r8, r8)
 801181e:	46bd      	mov	sp, r7
 8011820:	b004      	add	sp, #16
 8011822:	bd80      	pop	{r7, pc}
 8011824:	20007144 	.word	0x20007144
 8011828:	20007134 	.word	0x20007134
 801182c:	20007140 	.word	0x20007140

08011830 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011836:	23d0      	movs	r3, #208	@ 0xd0
 8011838:	019b      	lsls	r3, r3, #6
 801183a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801183c:	4b26      	ldr	r3, [pc, #152]	@ (80118d8 <prvHeapInit+0xa8>)
 801183e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2207      	movs	r2, #7
 8011844:	4013      	ands	r3, r2
 8011846:	d00c      	beq.n	8011862 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	3307      	adds	r3, #7
 801184c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2207      	movs	r2, #7
 8011852:	4393      	bics	r3, r2
 8011854:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011856:	68ba      	ldr	r2, [r7, #8]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	1ad2      	subs	r2, r2, r3
 801185c:	4b1e      	ldr	r3, [pc, #120]	@ (80118d8 <prvHeapInit+0xa8>)
 801185e:	18d3      	adds	r3, r2, r3
 8011860:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011866:	4b1d      	ldr	r3, [pc, #116]	@ (80118dc <prvHeapInit+0xac>)
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801186c:	4b1b      	ldr	r3, [pc, #108]	@ (80118dc <prvHeapInit+0xac>)
 801186e:	2200      	movs	r2, #0
 8011870:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	18d3      	adds	r3, r2, r3
 8011878:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801187a:	2208      	movs	r2, #8
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	1a9b      	subs	r3, r3, r2
 8011880:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2207      	movs	r2, #7
 8011886:	4393      	bics	r3, r2
 8011888:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	4b14      	ldr	r3, [pc, #80]	@ (80118e0 <prvHeapInit+0xb0>)
 801188e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8011890:	4b13      	ldr	r3, [pc, #76]	@ (80118e0 <prvHeapInit+0xb0>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2200      	movs	r2, #0
 8011896:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011898:	4b11      	ldr	r3, [pc, #68]	@ (80118e0 <prvHeapInit+0xb0>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2200      	movs	r2, #0
 801189e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	1ad2      	subs	r2, r2, r3
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80118ae:	4b0c      	ldr	r3, [pc, #48]	@ (80118e0 <prvHeapInit+0xb0>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	685a      	ldr	r2, [r3, #4]
 80118ba:	4b0a      	ldr	r3, [pc, #40]	@ (80118e4 <prvHeapInit+0xb4>)
 80118bc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	4b09      	ldr	r3, [pc, #36]	@ (80118e8 <prvHeapInit+0xb8>)
 80118c4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80118c6:	4b09      	ldr	r3, [pc, #36]	@ (80118ec <prvHeapInit+0xbc>)
 80118c8:	2280      	movs	r2, #128	@ 0x80
 80118ca:	0612      	lsls	r2, r2, #24
 80118cc:	601a      	str	r2, [r3, #0]
}
 80118ce:	46c0      	nop			@ (mov r8, r8)
 80118d0:	46bd      	mov	sp, r7
 80118d2:	b004      	add	sp, #16
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	46c0      	nop			@ (mov r8, r8)
 80118d8:	20003d28 	.word	0x20003d28
 80118dc:	20007128 	.word	0x20007128
 80118e0:	20007130 	.word	0x20007130
 80118e4:	20007138 	.word	0x20007138
 80118e8:	20007134 	.word	0x20007134
 80118ec:	20007144 	.word	0x20007144

080118f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118f8:	4b27      	ldr	r3, [pc, #156]	@ (8011998 <prvInsertBlockIntoFreeList+0xa8>)
 80118fa:	60fb      	str	r3, [r7, #12]
 80118fc:	e002      	b.n	8011904 <prvInsertBlockIntoFreeList+0x14>
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	429a      	cmp	r2, r3
 801190c:	d8f7      	bhi.n	80118fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	18d3      	adds	r3, r2, r3
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	429a      	cmp	r2, r3
 801191e:	d108      	bne.n	8011932 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	18d2      	adds	r2, r2, r3
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	68ba      	ldr	r2, [r7, #8]
 801193c:	18d2      	adds	r2, r2, r3
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	429a      	cmp	r2, r3
 8011944:	d118      	bne.n	8011978 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	4b14      	ldr	r3, [pc, #80]	@ (801199c <prvInsertBlockIntoFreeList+0xac>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	429a      	cmp	r2, r3
 8011950:	d00d      	beq.n	801196e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	685a      	ldr	r2, [r3, #4]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	18d2      	adds	r2, r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	601a      	str	r2, [r3, #0]
 801196c:	e008      	b.n	8011980 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801196e:	4b0b      	ldr	r3, [pc, #44]	@ (801199c <prvInsertBlockIntoFreeList+0xac>)
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	601a      	str	r2, [r3, #0]
 8011976:	e003      	b.n	8011980 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	429a      	cmp	r2, r3
 8011986:	d002      	beq.n	801198e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801198e:	46c0      	nop			@ (mov r8, r8)
 8011990:	46bd      	mov	sp, r7
 8011992:	b004      	add	sp, #16
 8011994:	bd80      	pop	{r7, pc}
 8011996:	46c0      	nop			@ (mov r8, r8)
 8011998:	20007128 	.word	0x20007128
 801199c:	20007130 	.word	0x20007130

080119a0 <asinf>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	1c05      	adds	r5, r0, #0
 80119a4:	f000 f94c 	bl	8011c40 <__ieee754_asinf>
 80119a8:	1c29      	adds	r1, r5, #0
 80119aa:	1c04      	adds	r4, r0, #0
 80119ac:	1c28      	adds	r0, r5, #0
 80119ae:	f7ef fd79 	bl	80014a4 <__aeabi_fcmpun>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d110      	bne.n	80119d8 <asinf+0x38>
 80119b6:	1c28      	adds	r0, r5, #0
 80119b8:	f000 f82e 	bl	8011a18 <fabsf>
 80119bc:	21fe      	movs	r1, #254	@ 0xfe
 80119be:	0589      	lsls	r1, r1, #22
 80119c0:	f7ee fd98 	bl	80004f4 <__aeabi_fcmpgt>
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d007      	beq.n	80119d8 <asinf+0x38>
 80119c8:	f001 fb48 	bl	801305c <__errno>
 80119cc:	2321      	movs	r3, #33	@ 0x21
 80119ce:	6003      	str	r3, [r0, #0]
 80119d0:	4802      	ldr	r0, [pc, #8]	@ (80119dc <asinf+0x3c>)
 80119d2:	f000 f871 	bl	8011ab8 <nanf>
 80119d6:	1c04      	adds	r4, r0, #0
 80119d8:	1c20      	adds	r0, r4, #0
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	0801750d 	.word	0x0801750d

080119e0 <sqrtf>:
 80119e0:	b570      	push	{r4, r5, r6, lr}
 80119e2:	1c05      	adds	r5, r0, #0
 80119e4:	f000 f8b4 	bl	8011b50 <__ieee754_sqrtf>
 80119e8:	1c29      	adds	r1, r5, #0
 80119ea:	1c04      	adds	r4, r0, #0
 80119ec:	1c28      	adds	r0, r5, #0
 80119ee:	f7ef fd59 	bl	80014a4 <__aeabi_fcmpun>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d10e      	bne.n	8011a14 <sqrtf+0x34>
 80119f6:	2100      	movs	r1, #0
 80119f8:	1c28      	adds	r0, r5, #0
 80119fa:	f7ee fd67 	bl	80004cc <__aeabi_fcmplt>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d008      	beq.n	8011a14 <sqrtf+0x34>
 8011a02:	f001 fb2b 	bl	801305c <__errno>
 8011a06:	2321      	movs	r3, #33	@ 0x21
 8011a08:	2100      	movs	r1, #0
 8011a0a:	6003      	str	r3, [r0, #0]
 8011a0c:	1c08      	adds	r0, r1, #0
 8011a0e:	f7ef f881 	bl	8000b14 <__aeabi_fdiv>
 8011a12:	1c04      	adds	r4, r0, #0
 8011a14:	1c20      	adds	r0, r4, #0
 8011a16:	bd70      	pop	{r4, r5, r6, pc}

08011a18 <fabsf>:
 8011a18:	0040      	lsls	r0, r0, #1
 8011a1a:	0840      	lsrs	r0, r0, #1
 8011a1c:	4770      	bx	lr

08011a1e <fmax>:
 8011a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a20:	0004      	movs	r4, r0
 8011a22:	000d      	movs	r5, r1
 8011a24:	0016      	movs	r6, r2
 8011a26:	001f      	movs	r7, r3
 8011a28:	f000 f816 	bl	8011a58 <__fpclassifyd>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d104      	bne.n	8011a3a <fmax+0x1c>
 8011a30:	0034      	movs	r4, r6
 8011a32:	003d      	movs	r5, r7
 8011a34:	0029      	movs	r1, r5
 8011a36:	0020      	movs	r0, r4
 8011a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a3a:	0030      	movs	r0, r6
 8011a3c:	0039      	movs	r1, r7
 8011a3e:	f000 f80b 	bl	8011a58 <__fpclassifyd>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	d0f6      	beq.n	8011a34 <fmax+0x16>
 8011a46:	0032      	movs	r2, r6
 8011a48:	003b      	movs	r3, r7
 8011a4a:	0020      	movs	r0, r4
 8011a4c:	0029      	movs	r1, r5
 8011a4e:	f7ee fd17 	bl	8000480 <__aeabi_dcmpgt>
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d0ec      	beq.n	8011a30 <fmax+0x12>
 8011a56:	e7ed      	b.n	8011a34 <fmax+0x16>

08011a58 <__fpclassifyd>:
 8011a58:	000b      	movs	r3, r1
 8011a5a:	b570      	push	{r4, r5, r6, lr}
 8011a5c:	0004      	movs	r4, r0
 8011a5e:	0002      	movs	r2, r0
 8011a60:	0001      	movs	r1, r0
 8011a62:	431c      	orrs	r4, r3
 8011a64:	2002      	movs	r0, #2
 8011a66:	2c00      	cmp	r4, #0
 8011a68:	d006      	beq.n	8011a78 <__fpclassifyd+0x20>
 8011a6a:	2080      	movs	r0, #128	@ 0x80
 8011a6c:	0600      	lsls	r0, r0, #24
 8011a6e:	4283      	cmp	r3, r0
 8011a70:	d103      	bne.n	8011a7a <__fpclassifyd+0x22>
 8011a72:	1e4b      	subs	r3, r1, #1
 8011a74:	4199      	sbcs	r1, r3
 8011a76:	1c88      	adds	r0, r1, #2
 8011a78:	bd70      	pop	{r4, r5, r6, pc}
 8011a7a:	480c      	ldr	r0, [pc, #48]	@ (8011aac <__fpclassifyd+0x54>)
 8011a7c:	0059      	lsls	r1, r3, #1
 8011a7e:	0849      	lsrs	r1, r1, #1
 8011a80:	4c0b      	ldr	r4, [pc, #44]	@ (8011ab0 <__fpclassifyd+0x58>)
 8011a82:	180e      	adds	r6, r1, r0
 8011a84:	2004      	movs	r0, #4
 8011a86:	42a6      	cmp	r6, r4
 8011a88:	d9f6      	bls.n	8011a78 <__fpclassifyd+0x20>
 8011a8a:	2480      	movs	r4, #128	@ 0x80
 8011a8c:	3801      	subs	r0, #1
 8011a8e:	0364      	lsls	r4, r4, #13
 8011a90:	42a3      	cmp	r3, r4
 8011a92:	d3f1      	bcc.n	8011a78 <__fpclassifyd+0x20>
 8011a94:	2580      	movs	r5, #128	@ 0x80
 8011a96:	062d      	lsls	r5, r5, #24
 8011a98:	195d      	adds	r5, r3, r5
 8011a9a:	42a5      	cmp	r5, r4
 8011a9c:	d3ec      	bcc.n	8011a78 <__fpclassifyd+0x20>
 8011a9e:	4c05      	ldr	r4, [pc, #20]	@ (8011ab4 <__fpclassifyd+0x5c>)
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	42a1      	cmp	r1, r4
 8011aa4:	d1e8      	bne.n	8011a78 <__fpclassifyd+0x20>
 8011aa6:	4250      	negs	r0, r2
 8011aa8:	4150      	adcs	r0, r2
 8011aaa:	e7e5      	b.n	8011a78 <__fpclassifyd+0x20>
 8011aac:	fff00000 	.word	0xfff00000
 8011ab0:	7fdfffff 	.word	0x7fdfffff
 8011ab4:	7ff00000 	.word	0x7ff00000

08011ab8 <nanf>:
 8011ab8:	4800      	ldr	r0, [pc, #0]	@ (8011abc <nanf+0x4>)
 8011aba:	4770      	bx	lr
 8011abc:	7fc00000 	.word	0x7fc00000

08011ac0 <fmaxf>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	1c04      	adds	r4, r0, #0
 8011ac4:	1c0d      	adds	r5, r1, #0
 8011ac6:	f000 f827 	bl	8011b18 <__fpclassifyf>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	d102      	bne.n	8011ad4 <fmaxf+0x14>
 8011ace:	1c2c      	adds	r4, r5, #0
 8011ad0:	1c20      	adds	r0, r4, #0
 8011ad2:	bd70      	pop	{r4, r5, r6, pc}
 8011ad4:	1c28      	adds	r0, r5, #0
 8011ad6:	f000 f81f 	bl	8011b18 <__fpclassifyf>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	d0f8      	beq.n	8011ad0 <fmaxf+0x10>
 8011ade:	1c29      	adds	r1, r5, #0
 8011ae0:	1c20      	adds	r0, r4, #0
 8011ae2:	f7ee fd07 	bl	80004f4 <__aeabi_fcmpgt>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d0f1      	beq.n	8011ace <fmaxf+0xe>
 8011aea:	e7f1      	b.n	8011ad0 <fmaxf+0x10>

08011aec <fminf>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	1c04      	adds	r4, r0, #0
 8011af0:	1c0d      	adds	r5, r1, #0
 8011af2:	f000 f811 	bl	8011b18 <__fpclassifyf>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d102      	bne.n	8011b00 <fminf+0x14>
 8011afa:	1c2c      	adds	r4, r5, #0
 8011afc:	1c20      	adds	r0, r4, #0
 8011afe:	bd70      	pop	{r4, r5, r6, pc}
 8011b00:	1c28      	adds	r0, r5, #0
 8011b02:	f000 f809 	bl	8011b18 <__fpclassifyf>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d0f8      	beq.n	8011afc <fminf+0x10>
 8011b0a:	1c29      	adds	r1, r5, #0
 8011b0c:	1c20      	adds	r0, r4, #0
 8011b0e:	f7ee fcdd 	bl	80004cc <__aeabi_fcmplt>
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d0f1      	beq.n	8011afa <fminf+0xe>
 8011b16:	e7f1      	b.n	8011afc <fminf+0x10>

08011b18 <__fpclassifyf>:
 8011b18:	0043      	lsls	r3, r0, #1
 8011b1a:	085a      	lsrs	r2, r3, #1
 8011b1c:	2002      	movs	r0, #2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00f      	beq.n	8011b42 <__fpclassifyf+0x2a>
 8011b22:	21fe      	movs	r1, #254	@ 0xfe
 8011b24:	4b07      	ldr	r3, [pc, #28]	@ (8011b44 <__fpclassifyf+0x2c>)
 8011b26:	05c9      	lsls	r1, r1, #23
 8011b28:	18d3      	adds	r3, r2, r3
 8011b2a:	1800      	adds	r0, r0, r0
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	d308      	bcc.n	8011b42 <__fpclassifyf+0x2a>
 8011b30:	4905      	ldr	r1, [pc, #20]	@ (8011b48 <__fpclassifyf+0x30>)
 8011b32:	1e53      	subs	r3, r2, #1
 8011b34:	3801      	subs	r0, #1
 8011b36:	428b      	cmp	r3, r1
 8011b38:	d903      	bls.n	8011b42 <__fpclassifyf+0x2a>
 8011b3a:	4b04      	ldr	r3, [pc, #16]	@ (8011b4c <__fpclassifyf+0x34>)
 8011b3c:	18d0      	adds	r0, r2, r3
 8011b3e:	4243      	negs	r3, r0
 8011b40:	4158      	adcs	r0, r3
 8011b42:	4770      	bx	lr
 8011b44:	ff800000 	.word	0xff800000
 8011b48:	007ffffe 	.word	0x007ffffe
 8011b4c:	80800000 	.word	0x80800000

08011b50 <__ieee754_sqrtf>:
 8011b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b52:	0003      	movs	r3, r0
 8011b54:	0042      	lsls	r2, r0, #1
 8011b56:	1c04      	adds	r4, r0, #0
 8011b58:	20ff      	movs	r0, #255	@ 0xff
 8011b5a:	0852      	lsrs	r2, r2, #1
 8011b5c:	05c0      	lsls	r0, r0, #23
 8011b5e:	4282      	cmp	r2, r0
 8011b60:	d30a      	bcc.n	8011b78 <__ieee754_sqrtf+0x28>
 8011b62:	1c21      	adds	r1, r4, #0
 8011b64:	1c20      	adds	r0, r4, #0
 8011b66:	f7ef f9bb 	bl	8000ee0 <__aeabi_fmul>
 8011b6a:	1c01      	adds	r1, r0, #0
 8011b6c:	1c20      	adds	r0, r4, #0
 8011b6e:	f7ee fe47 	bl	8000800 <__aeabi_fadd>
 8011b72:	1c04      	adds	r4, r0, #0
 8011b74:	1c20      	adds	r0, r4, #0
 8011b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011b78:	2a00      	cmp	r2, #0
 8011b7a:	d0fb      	beq.n	8011b74 <__ieee754_sqrtf+0x24>
 8011b7c:	2c00      	cmp	r4, #0
 8011b7e:	da07      	bge.n	8011b90 <__ieee754_sqrtf+0x40>
 8011b80:	1c21      	adds	r1, r4, #0
 8011b82:	1c20      	adds	r0, r4, #0
 8011b84:	f7ef faea 	bl	800115c <__aeabi_fsub>
 8011b88:	1c01      	adds	r1, r0, #0
 8011b8a:	f7ee ffc3 	bl	8000b14 <__aeabi_fdiv>
 8011b8e:	e7f0      	b.n	8011b72 <__ieee754_sqrtf+0x22>
 8011b90:	0022      	movs	r2, r4
 8011b92:	15e1      	asrs	r1, r4, #23
 8011b94:	4002      	ands	r2, r0
 8011b96:	4204      	tst	r4, r0
 8011b98:	d046      	beq.n	8011c28 <__ieee754_sqrtf+0xd8>
 8011b9a:	2280      	movs	r2, #128	@ 0x80
 8011b9c:	000f      	movs	r7, r1
 8011b9e:	025b      	lsls	r3, r3, #9
 8011ba0:	0a5b      	lsrs	r3, r3, #9
 8011ba2:	0412      	lsls	r2, r2, #16
 8011ba4:	3f7f      	subs	r7, #127	@ 0x7f
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	07c9      	lsls	r1, r1, #31
 8011baa:	d400      	bmi.n	8011bae <__ieee754_sqrtf+0x5e>
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	2400      	movs	r4, #0
 8011bb0:	2180      	movs	r1, #128	@ 0x80
 8011bb2:	2019      	movs	r0, #25
 8011bb4:	0026      	movs	r6, r4
 8011bb6:	107f      	asrs	r7, r7, #1
 8011bb8:	005b      	lsls	r3, r3, #1
 8011bba:	0449      	lsls	r1, r1, #17
 8011bbc:	1875      	adds	r5, r6, r1
 8011bbe:	001a      	movs	r2, r3
 8011bc0:	429d      	cmp	r5, r3
 8011bc2:	dc02      	bgt.n	8011bca <__ieee754_sqrtf+0x7a>
 8011bc4:	186e      	adds	r6, r5, r1
 8011bc6:	1b5a      	subs	r2, r3, r5
 8011bc8:	1864      	adds	r4, r4, r1
 8011bca:	3801      	subs	r0, #1
 8011bcc:	0053      	lsls	r3, r2, #1
 8011bce:	0849      	lsrs	r1, r1, #1
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d1f3      	bne.n	8011bbc <__ieee754_sqrtf+0x6c>
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	d019      	beq.n	8011c0c <__ieee754_sqrtf+0xbc>
 8011bd8:	4d17      	ldr	r5, [pc, #92]	@ (8011c38 <__ieee754_sqrtf+0xe8>)
 8011bda:	4e18      	ldr	r6, [pc, #96]	@ (8011c3c <__ieee754_sqrtf+0xec>)
 8011bdc:	6828      	ldr	r0, [r5, #0]
 8011bde:	6831      	ldr	r1, [r6, #0]
 8011be0:	682b      	ldr	r3, [r5, #0]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	f7ef faba 	bl	800115c <__aeabi_fsub>
 8011be8:	1c01      	adds	r1, r0, #0
 8011bea:	9801      	ldr	r0, [sp, #4]
 8011bec:	f7ee fc78 	bl	80004e0 <__aeabi_fcmple>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d00b      	beq.n	8011c0c <__ieee754_sqrtf+0xbc>
 8011bf4:	6828      	ldr	r0, [r5, #0]
 8011bf6:	6831      	ldr	r1, [r6, #0]
 8011bf8:	f7ee fe02 	bl	8000800 <__aeabi_fadd>
 8011bfc:	682d      	ldr	r5, [r5, #0]
 8011bfe:	1c01      	adds	r1, r0, #0
 8011c00:	1c28      	adds	r0, r5, #0
 8011c02:	f7ee fc63 	bl	80004cc <__aeabi_fcmplt>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d011      	beq.n	8011c2e <__ieee754_sqrtf+0xde>
 8011c0a:	3402      	adds	r4, #2
 8011c0c:	23fc      	movs	r3, #252	@ 0xfc
 8011c0e:	1064      	asrs	r4, r4, #1
 8011c10:	059b      	lsls	r3, r3, #22
 8011c12:	18e3      	adds	r3, r4, r3
 8011c14:	05fc      	lsls	r4, r7, #23
 8011c16:	18e4      	adds	r4, r4, r3
 8011c18:	e7ac      	b.n	8011b74 <__ieee754_sqrtf+0x24>
 8011c1a:	005b      	lsls	r3, r3, #1
 8011c1c:	3201      	adds	r2, #1
 8011c1e:	4203      	tst	r3, r0
 8011c20:	d0fb      	beq.n	8011c1a <__ieee754_sqrtf+0xca>
 8011c22:	3a01      	subs	r2, #1
 8011c24:	1a89      	subs	r1, r1, r2
 8011c26:	e7b8      	b.n	8011b9a <__ieee754_sqrtf+0x4a>
 8011c28:	2080      	movs	r0, #128	@ 0x80
 8011c2a:	0400      	lsls	r0, r0, #16
 8011c2c:	e7f7      	b.n	8011c1e <__ieee754_sqrtf+0xce>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	3401      	adds	r4, #1
 8011c32:	439c      	bics	r4, r3
 8011c34:	e7ea      	b.n	8011c0c <__ieee754_sqrtf+0xbc>
 8011c36:	46c0      	nop			@ (mov r8, r8)
 8011c38:	20000088 	.word	0x20000088
 8011c3c:	20000084 	.word	0x20000084

08011c40 <__ieee754_asinf>:
 8011c40:	23fe      	movs	r3, #254	@ 0xfe
 8011c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c44:	0046      	lsls	r6, r0, #1
 8011c46:	b085      	sub	sp, #20
 8011c48:	1c04      	adds	r4, r0, #0
 8011c4a:	9002      	str	r0, [sp, #8]
 8011c4c:	0876      	lsrs	r6, r6, #1
 8011c4e:	059b      	lsls	r3, r3, #22
 8011c50:	429e      	cmp	r6, r3
 8011c52:	d10c      	bne.n	8011c6e <__ieee754_asinf+0x2e>
 8011c54:	498e      	ldr	r1, [pc, #568]	@ (8011e90 <__ieee754_asinf+0x250>)
 8011c56:	f7ef f943 	bl	8000ee0 <__aeabi_fmul>
 8011c5a:	498e      	ldr	r1, [pc, #568]	@ (8011e94 <__ieee754_asinf+0x254>)
 8011c5c:	1c05      	adds	r5, r0, #0
 8011c5e:	1c20      	adds	r0, r4, #0
 8011c60:	f7ef f93e 	bl	8000ee0 <__aeabi_fmul>
 8011c64:	1c01      	adds	r1, r0, #0
 8011c66:	1c28      	adds	r0, r5, #0
 8011c68:	f7ee fdca 	bl	8000800 <__aeabi_fadd>
 8011c6c:	e007      	b.n	8011c7e <__ieee754_asinf+0x3e>
 8011c6e:	429e      	cmp	r6, r3
 8011c70:	d909      	bls.n	8011c86 <__ieee754_asinf+0x46>
 8011c72:	1c01      	adds	r1, r0, #0
 8011c74:	f7ef fa72 	bl	800115c <__aeabi_fsub>
 8011c78:	1c01      	adds	r1, r0, #0
 8011c7a:	f7ee ff4b 	bl	8000b14 <__aeabi_fdiv>
 8011c7e:	1c04      	adds	r4, r0, #0
 8011c80:	1c20      	adds	r0, r4, #0
 8011c82:	b005      	add	sp, #20
 8011c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c86:	23fc      	movs	r3, #252	@ 0xfc
 8011c88:	059b      	lsls	r3, r3, #22
 8011c8a:	429e      	cmp	r6, r3
 8011c8c:	d20c      	bcs.n	8011ca8 <__ieee754_asinf+0x68>
 8011c8e:	23c8      	movs	r3, #200	@ 0xc8
 8011c90:	059b      	lsls	r3, r3, #22
 8011c92:	429e      	cmp	r6, r3
 8011c94:	d276      	bcs.n	8011d84 <__ieee754_asinf+0x144>
 8011c96:	4980      	ldr	r1, [pc, #512]	@ (8011e98 <__ieee754_asinf+0x258>)
 8011c98:	f7ee fdb2 	bl	8000800 <__aeabi_fadd>
 8011c9c:	21fe      	movs	r1, #254	@ 0xfe
 8011c9e:	0589      	lsls	r1, r1, #22
 8011ca0:	f7ee fc28 	bl	80004f4 <__aeabi_fcmpgt>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d1eb      	bne.n	8011c80 <__ieee754_asinf+0x40>
 8011ca8:	1c20      	adds	r0, r4, #0
 8011caa:	f7ff feb5 	bl	8011a18 <fabsf>
 8011cae:	1c01      	adds	r1, r0, #0
 8011cb0:	20fe      	movs	r0, #254	@ 0xfe
 8011cb2:	0580      	lsls	r0, r0, #22
 8011cb4:	f7ef fa52 	bl	800115c <__aeabi_fsub>
 8011cb8:	21fc      	movs	r1, #252	@ 0xfc
 8011cba:	0589      	lsls	r1, r1, #22
 8011cbc:	f7ef f910 	bl	8000ee0 <__aeabi_fmul>
 8011cc0:	4976      	ldr	r1, [pc, #472]	@ (8011e9c <__ieee754_asinf+0x25c>)
 8011cc2:	1c04      	adds	r4, r0, #0
 8011cc4:	f7ef f90c 	bl	8000ee0 <__aeabi_fmul>
 8011cc8:	4975      	ldr	r1, [pc, #468]	@ (8011ea0 <__ieee754_asinf+0x260>)
 8011cca:	f7ee fd99 	bl	8000800 <__aeabi_fadd>
 8011cce:	1c21      	adds	r1, r4, #0
 8011cd0:	f7ef f906 	bl	8000ee0 <__aeabi_fmul>
 8011cd4:	4973      	ldr	r1, [pc, #460]	@ (8011ea4 <__ieee754_asinf+0x264>)
 8011cd6:	f7ef fa41 	bl	800115c <__aeabi_fsub>
 8011cda:	1c21      	adds	r1, r4, #0
 8011cdc:	f7ef f900 	bl	8000ee0 <__aeabi_fmul>
 8011ce0:	4971      	ldr	r1, [pc, #452]	@ (8011ea8 <__ieee754_asinf+0x268>)
 8011ce2:	f7ee fd8d 	bl	8000800 <__aeabi_fadd>
 8011ce6:	1c21      	adds	r1, r4, #0
 8011ce8:	f7ef f8fa 	bl	8000ee0 <__aeabi_fmul>
 8011cec:	496f      	ldr	r1, [pc, #444]	@ (8011eac <__ieee754_asinf+0x26c>)
 8011cee:	f7ef fa35 	bl	800115c <__aeabi_fsub>
 8011cf2:	1c21      	adds	r1, r4, #0
 8011cf4:	f7ef f8f4 	bl	8000ee0 <__aeabi_fmul>
 8011cf8:	496d      	ldr	r1, [pc, #436]	@ (8011eb0 <__ieee754_asinf+0x270>)
 8011cfa:	f7ee fd81 	bl	8000800 <__aeabi_fadd>
 8011cfe:	1c21      	adds	r1, r4, #0
 8011d00:	f7ef f8ee 	bl	8000ee0 <__aeabi_fmul>
 8011d04:	496b      	ldr	r1, [pc, #428]	@ (8011eb4 <__ieee754_asinf+0x274>)
 8011d06:	9001      	str	r0, [sp, #4]
 8011d08:	1c20      	adds	r0, r4, #0
 8011d0a:	f7ef f8e9 	bl	8000ee0 <__aeabi_fmul>
 8011d0e:	496a      	ldr	r1, [pc, #424]	@ (8011eb8 <__ieee754_asinf+0x278>)
 8011d10:	f7ef fa24 	bl	800115c <__aeabi_fsub>
 8011d14:	1c21      	adds	r1, r4, #0
 8011d16:	f7ef f8e3 	bl	8000ee0 <__aeabi_fmul>
 8011d1a:	4968      	ldr	r1, [pc, #416]	@ (8011ebc <__ieee754_asinf+0x27c>)
 8011d1c:	f7ee fd70 	bl	8000800 <__aeabi_fadd>
 8011d20:	1c21      	adds	r1, r4, #0
 8011d22:	f7ef f8dd 	bl	8000ee0 <__aeabi_fmul>
 8011d26:	4966      	ldr	r1, [pc, #408]	@ (8011ec0 <__ieee754_asinf+0x280>)
 8011d28:	f7ef fa18 	bl	800115c <__aeabi_fsub>
 8011d2c:	1c21      	adds	r1, r4, #0
 8011d2e:	f7ef f8d7 	bl	8000ee0 <__aeabi_fmul>
 8011d32:	21fe      	movs	r1, #254	@ 0xfe
 8011d34:	0589      	lsls	r1, r1, #22
 8011d36:	f7ee fd63 	bl	8000800 <__aeabi_fadd>
 8011d3a:	1c07      	adds	r7, r0, #0
 8011d3c:	1c20      	adds	r0, r4, #0
 8011d3e:	f7ff ff07 	bl	8011b50 <__ieee754_sqrtf>
 8011d42:	4b60      	ldr	r3, [pc, #384]	@ (8011ec4 <__ieee754_asinf+0x284>)
 8011d44:	1c05      	adds	r5, r0, #0
 8011d46:	429e      	cmp	r6, r3
 8011d48:	d966      	bls.n	8011e18 <__ieee754_asinf+0x1d8>
 8011d4a:	1c39      	adds	r1, r7, #0
 8011d4c:	9801      	ldr	r0, [sp, #4]
 8011d4e:	f7ee fee1 	bl	8000b14 <__aeabi_fdiv>
 8011d52:	1c29      	adds	r1, r5, #0
 8011d54:	f7ef f8c4 	bl	8000ee0 <__aeabi_fmul>
 8011d58:	1c29      	adds	r1, r5, #0
 8011d5a:	f7ee fd51 	bl	8000800 <__aeabi_fadd>
 8011d5e:	1c01      	adds	r1, r0, #0
 8011d60:	f7ee fd4e 	bl	8000800 <__aeabi_fadd>
 8011d64:	4958      	ldr	r1, [pc, #352]	@ (8011ec8 <__ieee754_asinf+0x288>)
 8011d66:	f7ee fd4b 	bl	8000800 <__aeabi_fadd>
 8011d6a:	1c01      	adds	r1, r0, #0
 8011d6c:	4848      	ldr	r0, [pc, #288]	@ (8011e90 <__ieee754_asinf+0x250>)
 8011d6e:	f7ef f9f5 	bl	800115c <__aeabi_fsub>
 8011d72:	9b02      	ldr	r3, [sp, #8]
 8011d74:	1c04      	adds	r4, r0, #0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	dd00      	ble.n	8011d7c <__ieee754_asinf+0x13c>
 8011d7a:	e781      	b.n	8011c80 <__ieee754_asinf+0x40>
 8011d7c:	2380      	movs	r3, #128	@ 0x80
 8011d7e:	061b      	lsls	r3, r3, #24
 8011d80:	18c4      	adds	r4, r0, r3
 8011d82:	e77d      	b.n	8011c80 <__ieee754_asinf+0x40>
 8011d84:	1c01      	adds	r1, r0, #0
 8011d86:	f7ef f8ab 	bl	8000ee0 <__aeabi_fmul>
 8011d8a:	4944      	ldr	r1, [pc, #272]	@ (8011e9c <__ieee754_asinf+0x25c>)
 8011d8c:	1c05      	adds	r5, r0, #0
 8011d8e:	f7ef f8a7 	bl	8000ee0 <__aeabi_fmul>
 8011d92:	4943      	ldr	r1, [pc, #268]	@ (8011ea0 <__ieee754_asinf+0x260>)
 8011d94:	f7ee fd34 	bl	8000800 <__aeabi_fadd>
 8011d98:	1c29      	adds	r1, r5, #0
 8011d9a:	f7ef f8a1 	bl	8000ee0 <__aeabi_fmul>
 8011d9e:	4941      	ldr	r1, [pc, #260]	@ (8011ea4 <__ieee754_asinf+0x264>)
 8011da0:	f7ef f9dc 	bl	800115c <__aeabi_fsub>
 8011da4:	1c29      	adds	r1, r5, #0
 8011da6:	f7ef f89b 	bl	8000ee0 <__aeabi_fmul>
 8011daa:	493f      	ldr	r1, [pc, #252]	@ (8011ea8 <__ieee754_asinf+0x268>)
 8011dac:	f7ee fd28 	bl	8000800 <__aeabi_fadd>
 8011db0:	1c29      	adds	r1, r5, #0
 8011db2:	f7ef f895 	bl	8000ee0 <__aeabi_fmul>
 8011db6:	493d      	ldr	r1, [pc, #244]	@ (8011eac <__ieee754_asinf+0x26c>)
 8011db8:	f7ef f9d0 	bl	800115c <__aeabi_fsub>
 8011dbc:	1c29      	adds	r1, r5, #0
 8011dbe:	f7ef f88f 	bl	8000ee0 <__aeabi_fmul>
 8011dc2:	493b      	ldr	r1, [pc, #236]	@ (8011eb0 <__ieee754_asinf+0x270>)
 8011dc4:	f7ee fd1c 	bl	8000800 <__aeabi_fadd>
 8011dc8:	1c29      	adds	r1, r5, #0
 8011dca:	f7ef f889 	bl	8000ee0 <__aeabi_fmul>
 8011dce:	4939      	ldr	r1, [pc, #228]	@ (8011eb4 <__ieee754_asinf+0x274>)
 8011dd0:	1c06      	adds	r6, r0, #0
 8011dd2:	1c28      	adds	r0, r5, #0
 8011dd4:	f7ef f884 	bl	8000ee0 <__aeabi_fmul>
 8011dd8:	4937      	ldr	r1, [pc, #220]	@ (8011eb8 <__ieee754_asinf+0x278>)
 8011dda:	f7ef f9bf 	bl	800115c <__aeabi_fsub>
 8011dde:	1c29      	adds	r1, r5, #0
 8011de0:	f7ef f87e 	bl	8000ee0 <__aeabi_fmul>
 8011de4:	4935      	ldr	r1, [pc, #212]	@ (8011ebc <__ieee754_asinf+0x27c>)
 8011de6:	f7ee fd0b 	bl	8000800 <__aeabi_fadd>
 8011dea:	1c29      	adds	r1, r5, #0
 8011dec:	f7ef f878 	bl	8000ee0 <__aeabi_fmul>
 8011df0:	4933      	ldr	r1, [pc, #204]	@ (8011ec0 <__ieee754_asinf+0x280>)
 8011df2:	f7ef f9b3 	bl	800115c <__aeabi_fsub>
 8011df6:	1c29      	adds	r1, r5, #0
 8011df8:	f7ef f872 	bl	8000ee0 <__aeabi_fmul>
 8011dfc:	21fe      	movs	r1, #254	@ 0xfe
 8011dfe:	0589      	lsls	r1, r1, #22
 8011e00:	f7ee fcfe 	bl	8000800 <__aeabi_fadd>
 8011e04:	1c01      	adds	r1, r0, #0
 8011e06:	1c30      	adds	r0, r6, #0
 8011e08:	f7ee fe84 	bl	8000b14 <__aeabi_fdiv>
 8011e0c:	1c21      	adds	r1, r4, #0
 8011e0e:	f7ef f867 	bl	8000ee0 <__aeabi_fmul>
 8011e12:	1c01      	adds	r1, r0, #0
 8011e14:	1c20      	adds	r0, r4, #0
 8011e16:	e727      	b.n	8011c68 <__ieee754_asinf+0x28>
 8011e18:	1c01      	adds	r1, r0, #0
 8011e1a:	0b06      	lsrs	r6, r0, #12
 8011e1c:	f7ee fcf0 	bl	8000800 <__aeabi_fadd>
 8011e20:	1c39      	adds	r1, r7, #0
 8011e22:	9003      	str	r0, [sp, #12]
 8011e24:	9801      	ldr	r0, [sp, #4]
 8011e26:	f7ee fe75 	bl	8000b14 <__aeabi_fdiv>
 8011e2a:	1c01      	adds	r1, r0, #0
 8011e2c:	9803      	ldr	r0, [sp, #12]
 8011e2e:	f7ef f857 	bl	8000ee0 <__aeabi_fmul>
 8011e32:	0336      	lsls	r6, r6, #12
 8011e34:	1c07      	adds	r7, r0, #0
 8011e36:	1c31      	adds	r1, r6, #0
 8011e38:	1c30      	adds	r0, r6, #0
 8011e3a:	f7ef f851 	bl	8000ee0 <__aeabi_fmul>
 8011e3e:	1c01      	adds	r1, r0, #0
 8011e40:	1c20      	adds	r0, r4, #0
 8011e42:	f7ef f98b 	bl	800115c <__aeabi_fsub>
 8011e46:	1c31      	adds	r1, r6, #0
 8011e48:	1c04      	adds	r4, r0, #0
 8011e4a:	1c28      	adds	r0, r5, #0
 8011e4c:	f7ee fcd8 	bl	8000800 <__aeabi_fadd>
 8011e50:	1c01      	adds	r1, r0, #0
 8011e52:	1c20      	adds	r0, r4, #0
 8011e54:	f7ee fe5e 	bl	8000b14 <__aeabi_fdiv>
 8011e58:	1c01      	adds	r1, r0, #0
 8011e5a:	f7ee fcd1 	bl	8000800 <__aeabi_fadd>
 8011e5e:	1c01      	adds	r1, r0, #0
 8011e60:	480c      	ldr	r0, [pc, #48]	@ (8011e94 <__ieee754_asinf+0x254>)
 8011e62:	f7ef f97b 	bl	800115c <__aeabi_fsub>
 8011e66:	1c01      	adds	r1, r0, #0
 8011e68:	1c38      	adds	r0, r7, #0
 8011e6a:	f7ef f977 	bl	800115c <__aeabi_fsub>
 8011e6e:	1c31      	adds	r1, r6, #0
 8011e70:	1c04      	adds	r4, r0, #0
 8011e72:	1c30      	adds	r0, r6, #0
 8011e74:	f7ee fcc4 	bl	8000800 <__aeabi_fadd>
 8011e78:	1c01      	adds	r1, r0, #0
 8011e7a:	4814      	ldr	r0, [pc, #80]	@ (8011ecc <__ieee754_asinf+0x28c>)
 8011e7c:	f7ef f96e 	bl	800115c <__aeabi_fsub>
 8011e80:	1c01      	adds	r1, r0, #0
 8011e82:	1c20      	adds	r0, r4, #0
 8011e84:	f7ef f96a 	bl	800115c <__aeabi_fsub>
 8011e88:	1c01      	adds	r1, r0, #0
 8011e8a:	4810      	ldr	r0, [pc, #64]	@ (8011ecc <__ieee754_asinf+0x28c>)
 8011e8c:	e76f      	b.n	8011d6e <__ieee754_asinf+0x12e>
 8011e8e:	46c0      	nop			@ (mov r8, r8)
 8011e90:	3fc90fdb 	.word	0x3fc90fdb
 8011e94:	b33bbd2e 	.word	0xb33bbd2e
 8011e98:	7149f2ca 	.word	0x7149f2ca
 8011e9c:	3811ef08 	.word	0x3811ef08
 8011ea0:	3a4f7f04 	.word	0x3a4f7f04
 8011ea4:	3d241146 	.word	0x3d241146
 8011ea8:	3e4e0aa8 	.word	0x3e4e0aa8
 8011eac:	3ea6b090 	.word	0x3ea6b090
 8011eb0:	3e2aaaab 	.word	0x3e2aaaab
 8011eb4:	3d9dc62e 	.word	0x3d9dc62e
 8011eb8:	3f303361 	.word	0x3f303361
 8011ebc:	4001572d 	.word	0x4001572d
 8011ec0:	4019d139 	.word	0x4019d139
 8011ec4:	3f799999 	.word	0x3f799999
 8011ec8:	333bbd2e 	.word	0x333bbd2e
 8011ecc:	3f490fdb 	.word	0x3f490fdb

08011ed0 <__cvt>:
 8011ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ed2:	001f      	movs	r7, r3
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	0016      	movs	r6, r2
 8011ed8:	b08b      	sub	sp, #44	@ 0x2c
 8011eda:	429f      	cmp	r7, r3
 8011edc:	da04      	bge.n	8011ee8 <__cvt+0x18>
 8011ede:	2180      	movs	r1, #128	@ 0x80
 8011ee0:	0609      	lsls	r1, r1, #24
 8011ee2:	187b      	adds	r3, r7, r1
 8011ee4:	001f      	movs	r7, r3
 8011ee6:	232d      	movs	r3, #45	@ 0x2d
 8011ee8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011eea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011eec:	7013      	strb	r3, [r2, #0]
 8011eee:	2320      	movs	r3, #32
 8011ef0:	2203      	movs	r2, #3
 8011ef2:	439d      	bics	r5, r3
 8011ef4:	2d46      	cmp	r5, #70	@ 0x46
 8011ef6:	d007      	beq.n	8011f08 <__cvt+0x38>
 8011ef8:	002b      	movs	r3, r5
 8011efa:	3b45      	subs	r3, #69	@ 0x45
 8011efc:	4259      	negs	r1, r3
 8011efe:	414b      	adcs	r3, r1
 8011f00:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011f02:	3a01      	subs	r2, #1
 8011f04:	18cb      	adds	r3, r1, r3
 8011f06:	9310      	str	r3, [sp, #64]	@ 0x40
 8011f08:	ab09      	add	r3, sp, #36	@ 0x24
 8011f0a:	9304      	str	r3, [sp, #16]
 8011f0c:	ab08      	add	r3, sp, #32
 8011f0e:	9303      	str	r3, [sp, #12]
 8011f10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f12:	9200      	str	r2, [sp, #0]
 8011f14:	9302      	str	r3, [sp, #8]
 8011f16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f18:	0032      	movs	r2, r6
 8011f1a:	9301      	str	r3, [sp, #4]
 8011f1c:	003b      	movs	r3, r7
 8011f1e:	f001 f96d 	bl	80131fc <_dtoa_r>
 8011f22:	0004      	movs	r4, r0
 8011f24:	2d47      	cmp	r5, #71	@ 0x47
 8011f26:	d11b      	bne.n	8011f60 <__cvt+0x90>
 8011f28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011f2a:	07db      	lsls	r3, r3, #31
 8011f2c:	d511      	bpl.n	8011f52 <__cvt+0x82>
 8011f2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f30:	18c3      	adds	r3, r0, r3
 8011f32:	9307      	str	r3, [sp, #28]
 8011f34:	2200      	movs	r2, #0
 8011f36:	2300      	movs	r3, #0
 8011f38:	0030      	movs	r0, r6
 8011f3a:	0039      	movs	r1, r7
 8011f3c:	f7ee fa86 	bl	800044c <__aeabi_dcmpeq>
 8011f40:	2800      	cmp	r0, #0
 8011f42:	d001      	beq.n	8011f48 <__cvt+0x78>
 8011f44:	9b07      	ldr	r3, [sp, #28]
 8011f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f48:	2230      	movs	r2, #48	@ 0x30
 8011f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f4c:	9907      	ldr	r1, [sp, #28]
 8011f4e:	428b      	cmp	r3, r1
 8011f50:	d320      	bcc.n	8011f94 <__cvt+0xc4>
 8011f52:	0020      	movs	r0, r4
 8011f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011f58:	1b1b      	subs	r3, r3, r4
 8011f5a:	6013      	str	r3, [r2, #0]
 8011f5c:	b00b      	add	sp, #44	@ 0x2c
 8011f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f62:	18c3      	adds	r3, r0, r3
 8011f64:	9307      	str	r3, [sp, #28]
 8011f66:	2d46      	cmp	r5, #70	@ 0x46
 8011f68:	d1e4      	bne.n	8011f34 <__cvt+0x64>
 8011f6a:	7803      	ldrb	r3, [r0, #0]
 8011f6c:	2b30      	cmp	r3, #48	@ 0x30
 8011f6e:	d10c      	bne.n	8011f8a <__cvt+0xba>
 8011f70:	2200      	movs	r2, #0
 8011f72:	2300      	movs	r3, #0
 8011f74:	0030      	movs	r0, r6
 8011f76:	0039      	movs	r1, r7
 8011f78:	f7ee fa68 	bl	800044c <__aeabi_dcmpeq>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d104      	bne.n	8011f8a <__cvt+0xba>
 8011f80:	2301      	movs	r3, #1
 8011f82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011f84:	1a9b      	subs	r3, r3, r2
 8011f86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011f88:	6013      	str	r3, [r2, #0]
 8011f8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f8c:	9a07      	ldr	r2, [sp, #28]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	18d3      	adds	r3, r2, r3
 8011f92:	e7ce      	b.n	8011f32 <__cvt+0x62>
 8011f94:	1c59      	adds	r1, r3, #1
 8011f96:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f98:	701a      	strb	r2, [r3, #0]
 8011f9a:	e7d6      	b.n	8011f4a <__cvt+0x7a>

08011f9c <__exponent>:
 8011f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f9e:	232b      	movs	r3, #43	@ 0x2b
 8011fa0:	0005      	movs	r5, r0
 8011fa2:	000c      	movs	r4, r1
 8011fa4:	b085      	sub	sp, #20
 8011fa6:	7002      	strb	r2, [r0, #0]
 8011fa8:	2900      	cmp	r1, #0
 8011faa:	da01      	bge.n	8011fb0 <__exponent+0x14>
 8011fac:	424c      	negs	r4, r1
 8011fae:	3302      	adds	r3, #2
 8011fb0:	706b      	strb	r3, [r5, #1]
 8011fb2:	2c09      	cmp	r4, #9
 8011fb4:	dd2c      	ble.n	8012010 <__exponent+0x74>
 8011fb6:	ab02      	add	r3, sp, #8
 8011fb8:	1dde      	adds	r6, r3, #7
 8011fba:	0020      	movs	r0, r4
 8011fbc:	210a      	movs	r1, #10
 8011fbe:	f7ee fa2f 	bl	8000420 <__aeabi_idivmod>
 8011fc2:	0037      	movs	r7, r6
 8011fc4:	3130      	adds	r1, #48	@ 0x30
 8011fc6:	3e01      	subs	r6, #1
 8011fc8:	0020      	movs	r0, r4
 8011fca:	7031      	strb	r1, [r6, #0]
 8011fcc:	210a      	movs	r1, #10
 8011fce:	9401      	str	r4, [sp, #4]
 8011fd0:	f7ee f940 	bl	8000254 <__divsi3>
 8011fd4:	9b01      	ldr	r3, [sp, #4]
 8011fd6:	0004      	movs	r4, r0
 8011fd8:	2b63      	cmp	r3, #99	@ 0x63
 8011fda:	dcee      	bgt.n	8011fba <__exponent+0x1e>
 8011fdc:	1eba      	subs	r2, r7, #2
 8011fde:	1ca8      	adds	r0, r5, #2
 8011fe0:	0001      	movs	r1, r0
 8011fe2:	0013      	movs	r3, r2
 8011fe4:	3430      	adds	r4, #48	@ 0x30
 8011fe6:	7014      	strb	r4, [r2, #0]
 8011fe8:	ac02      	add	r4, sp, #8
 8011fea:	3407      	adds	r4, #7
 8011fec:	429c      	cmp	r4, r3
 8011fee:	d80a      	bhi.n	8012006 <__exponent+0x6a>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	42a2      	cmp	r2, r4
 8011ff4:	d803      	bhi.n	8011ffe <__exponent+0x62>
 8011ff6:	3309      	adds	r3, #9
 8011ff8:	aa02      	add	r2, sp, #8
 8011ffa:	189b      	adds	r3, r3, r2
 8011ffc:	1bdb      	subs	r3, r3, r7
 8011ffe:	18c0      	adds	r0, r0, r3
 8012000:	1b40      	subs	r0, r0, r5
 8012002:	b005      	add	sp, #20
 8012004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012006:	781c      	ldrb	r4, [r3, #0]
 8012008:	3301      	adds	r3, #1
 801200a:	700c      	strb	r4, [r1, #0]
 801200c:	3101      	adds	r1, #1
 801200e:	e7eb      	b.n	8011fe8 <__exponent+0x4c>
 8012010:	2330      	movs	r3, #48	@ 0x30
 8012012:	18e4      	adds	r4, r4, r3
 8012014:	70ab      	strb	r3, [r5, #2]
 8012016:	1d28      	adds	r0, r5, #4
 8012018:	70ec      	strb	r4, [r5, #3]
 801201a:	e7f1      	b.n	8012000 <__exponent+0x64>

0801201c <_printf_float>:
 801201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801201e:	b097      	sub	sp, #92	@ 0x5c
 8012020:	000d      	movs	r5, r1
 8012022:	920a      	str	r2, [sp, #40]	@ 0x28
 8012024:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8012026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012028:	9009      	str	r0, [sp, #36]	@ 0x24
 801202a:	f000 ff65 	bl	8012ef8 <_localeconv_r>
 801202e:	6803      	ldr	r3, [r0, #0]
 8012030:	0018      	movs	r0, r3
 8012032:	930d      	str	r3, [sp, #52]	@ 0x34
 8012034:	f7ee f868 	bl	8000108 <strlen>
 8012038:	2300      	movs	r3, #0
 801203a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801203c:	9314      	str	r3, [sp, #80]	@ 0x50
 801203e:	7e2b      	ldrb	r3, [r5, #24]
 8012040:	2207      	movs	r2, #7
 8012042:	930c      	str	r3, [sp, #48]	@ 0x30
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	930e      	str	r3, [sp, #56]	@ 0x38
 8012048:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801204a:	6823      	ldr	r3, [r4, #0]
 801204c:	05c9      	lsls	r1, r1, #23
 801204e:	d545      	bpl.n	80120dc <_printf_float+0xc0>
 8012050:	189b      	adds	r3, r3, r2
 8012052:	4393      	bics	r3, r2
 8012054:	001a      	movs	r2, r3
 8012056:	3208      	adds	r2, #8
 8012058:	6022      	str	r2, [r4, #0]
 801205a:	2201      	movs	r2, #1
 801205c:	681e      	ldr	r6, [r3, #0]
 801205e:	685f      	ldr	r7, [r3, #4]
 8012060:	007b      	lsls	r3, r7, #1
 8012062:	085b      	lsrs	r3, r3, #1
 8012064:	9311      	str	r3, [sp, #68]	@ 0x44
 8012066:	9610      	str	r6, [sp, #64]	@ 0x40
 8012068:	64ae      	str	r6, [r5, #72]	@ 0x48
 801206a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801206c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801206e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012070:	4ba7      	ldr	r3, [pc, #668]	@ (8012310 <_printf_float+0x2f4>)
 8012072:	4252      	negs	r2, r2
 8012074:	f7f1 f8e6 	bl	8003244 <__aeabi_dcmpun>
 8012078:	2800      	cmp	r0, #0
 801207a:	d131      	bne.n	80120e0 <_printf_float+0xc4>
 801207c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801207e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012080:	2201      	movs	r2, #1
 8012082:	4ba3      	ldr	r3, [pc, #652]	@ (8012310 <_printf_float+0x2f4>)
 8012084:	4252      	negs	r2, r2
 8012086:	f7ee f9f1 	bl	800046c <__aeabi_dcmple>
 801208a:	2800      	cmp	r0, #0
 801208c:	d128      	bne.n	80120e0 <_printf_float+0xc4>
 801208e:	2200      	movs	r2, #0
 8012090:	2300      	movs	r3, #0
 8012092:	0030      	movs	r0, r6
 8012094:	0039      	movs	r1, r7
 8012096:	f7ee f9df 	bl	8000458 <__aeabi_dcmplt>
 801209a:	2800      	cmp	r0, #0
 801209c:	d003      	beq.n	80120a6 <_printf_float+0x8a>
 801209e:	002b      	movs	r3, r5
 80120a0:	222d      	movs	r2, #45	@ 0x2d
 80120a2:	3343      	adds	r3, #67	@ 0x43
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120a8:	4f9a      	ldr	r7, [pc, #616]	@ (8012314 <_printf_float+0x2f8>)
 80120aa:	2b47      	cmp	r3, #71	@ 0x47
 80120ac:	d900      	bls.n	80120b0 <_printf_float+0x94>
 80120ae:	4f9a      	ldr	r7, [pc, #616]	@ (8012318 <_printf_float+0x2fc>)
 80120b0:	2303      	movs	r3, #3
 80120b2:	2400      	movs	r4, #0
 80120b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120b6:	612b      	str	r3, [r5, #16]
 80120b8:	3301      	adds	r3, #1
 80120ba:	439a      	bics	r2, r3
 80120bc:	602a      	str	r2, [r5, #0]
 80120be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120c0:	0029      	movs	r1, r5
 80120c2:	9300      	str	r3, [sp, #0]
 80120c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120c8:	aa15      	add	r2, sp, #84	@ 0x54
 80120ca:	f000 f9e5 	bl	8012498 <_printf_common>
 80120ce:	3001      	adds	r0, #1
 80120d0:	d000      	beq.n	80120d4 <_printf_float+0xb8>
 80120d2:	e09f      	b.n	8012214 <_printf_float+0x1f8>
 80120d4:	2001      	movs	r0, #1
 80120d6:	4240      	negs	r0, r0
 80120d8:	b017      	add	sp, #92	@ 0x5c
 80120da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120dc:	3307      	adds	r3, #7
 80120de:	e7b8      	b.n	8012052 <_printf_float+0x36>
 80120e0:	0032      	movs	r2, r6
 80120e2:	003b      	movs	r3, r7
 80120e4:	0030      	movs	r0, r6
 80120e6:	0039      	movs	r1, r7
 80120e8:	f7f1 f8ac 	bl	8003244 <__aeabi_dcmpun>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d00b      	beq.n	8012108 <_printf_float+0xec>
 80120f0:	2f00      	cmp	r7, #0
 80120f2:	da03      	bge.n	80120fc <_printf_float+0xe0>
 80120f4:	002b      	movs	r3, r5
 80120f6:	222d      	movs	r2, #45	@ 0x2d
 80120f8:	3343      	adds	r3, #67	@ 0x43
 80120fa:	701a      	strb	r2, [r3, #0]
 80120fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120fe:	4f87      	ldr	r7, [pc, #540]	@ (801231c <_printf_float+0x300>)
 8012100:	2b47      	cmp	r3, #71	@ 0x47
 8012102:	d9d5      	bls.n	80120b0 <_printf_float+0x94>
 8012104:	4f86      	ldr	r7, [pc, #536]	@ (8012320 <_printf_float+0x304>)
 8012106:	e7d3      	b.n	80120b0 <_printf_float+0x94>
 8012108:	2220      	movs	r2, #32
 801210a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801210c:	686b      	ldr	r3, [r5, #4]
 801210e:	4394      	bics	r4, r2
 8012110:	1c5a      	adds	r2, r3, #1
 8012112:	d146      	bne.n	80121a2 <_printf_float+0x186>
 8012114:	3307      	adds	r3, #7
 8012116:	606b      	str	r3, [r5, #4]
 8012118:	2380      	movs	r3, #128	@ 0x80
 801211a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801211c:	00db      	lsls	r3, r3, #3
 801211e:	4313      	orrs	r3, r2
 8012120:	2200      	movs	r2, #0
 8012122:	602b      	str	r3, [r5, #0]
 8012124:	9206      	str	r2, [sp, #24]
 8012126:	aa14      	add	r2, sp, #80	@ 0x50
 8012128:	9205      	str	r2, [sp, #20]
 801212a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801212c:	a90a      	add	r1, sp, #40	@ 0x28
 801212e:	9204      	str	r2, [sp, #16]
 8012130:	aa13      	add	r2, sp, #76	@ 0x4c
 8012132:	9203      	str	r2, [sp, #12]
 8012134:	2223      	movs	r2, #35	@ 0x23
 8012136:	1852      	adds	r2, r2, r1
 8012138:	9202      	str	r2, [sp, #8]
 801213a:	9301      	str	r3, [sp, #4]
 801213c:	686b      	ldr	r3, [r5, #4]
 801213e:	0032      	movs	r2, r6
 8012140:	9300      	str	r3, [sp, #0]
 8012142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012144:	003b      	movs	r3, r7
 8012146:	f7ff fec3 	bl	8011ed0 <__cvt>
 801214a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801214c:	0007      	movs	r7, r0
 801214e:	2c47      	cmp	r4, #71	@ 0x47
 8012150:	d12d      	bne.n	80121ae <_printf_float+0x192>
 8012152:	1cd3      	adds	r3, r2, #3
 8012154:	db02      	blt.n	801215c <_printf_float+0x140>
 8012156:	686b      	ldr	r3, [r5, #4]
 8012158:	429a      	cmp	r2, r3
 801215a:	dd48      	ble.n	80121ee <_printf_float+0x1d2>
 801215c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801215e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012160:	3b02      	subs	r3, #2
 8012162:	b2db      	uxtb	r3, r3
 8012164:	930c      	str	r3, [sp, #48]	@ 0x30
 8012166:	0028      	movs	r0, r5
 8012168:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801216a:	3901      	subs	r1, #1
 801216c:	3050      	adds	r0, #80	@ 0x50
 801216e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012170:	f7ff ff14 	bl	8011f9c <__exponent>
 8012174:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012176:	0004      	movs	r4, r0
 8012178:	1813      	adds	r3, r2, r0
 801217a:	612b      	str	r3, [r5, #16]
 801217c:	2a01      	cmp	r2, #1
 801217e:	dc02      	bgt.n	8012186 <_printf_float+0x16a>
 8012180:	682a      	ldr	r2, [r5, #0]
 8012182:	07d2      	lsls	r2, r2, #31
 8012184:	d501      	bpl.n	801218a <_printf_float+0x16e>
 8012186:	3301      	adds	r3, #1
 8012188:	612b      	str	r3, [r5, #16]
 801218a:	2323      	movs	r3, #35	@ 0x23
 801218c:	aa0a      	add	r2, sp, #40	@ 0x28
 801218e:	189b      	adds	r3, r3, r2
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d100      	bne.n	8012198 <_printf_float+0x17c>
 8012196:	e792      	b.n	80120be <_printf_float+0xa2>
 8012198:	002b      	movs	r3, r5
 801219a:	222d      	movs	r2, #45	@ 0x2d
 801219c:	3343      	adds	r3, #67	@ 0x43
 801219e:	701a      	strb	r2, [r3, #0]
 80121a0:	e78d      	b.n	80120be <_printf_float+0xa2>
 80121a2:	2c47      	cmp	r4, #71	@ 0x47
 80121a4:	d1b8      	bne.n	8012118 <_printf_float+0xfc>
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d1b6      	bne.n	8012118 <_printf_float+0xfc>
 80121aa:	3301      	adds	r3, #1
 80121ac:	e7b3      	b.n	8012116 <_printf_float+0xfa>
 80121ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121b0:	0011      	movs	r1, r2
 80121b2:	2b65      	cmp	r3, #101	@ 0x65
 80121b4:	d9d7      	bls.n	8012166 <_printf_float+0x14a>
 80121b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121b8:	2b66      	cmp	r3, #102	@ 0x66
 80121ba:	d11a      	bne.n	80121f2 <_printf_float+0x1d6>
 80121bc:	686b      	ldr	r3, [r5, #4]
 80121be:	2a00      	cmp	r2, #0
 80121c0:	dd09      	ble.n	80121d6 <_printf_float+0x1ba>
 80121c2:	612a      	str	r2, [r5, #16]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d102      	bne.n	80121ce <_printf_float+0x1b2>
 80121c8:	6829      	ldr	r1, [r5, #0]
 80121ca:	07c9      	lsls	r1, r1, #31
 80121cc:	d50b      	bpl.n	80121e6 <_printf_float+0x1ca>
 80121ce:	3301      	adds	r3, #1
 80121d0:	189b      	adds	r3, r3, r2
 80121d2:	612b      	str	r3, [r5, #16]
 80121d4:	e007      	b.n	80121e6 <_printf_float+0x1ca>
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d103      	bne.n	80121e2 <_printf_float+0x1c6>
 80121da:	2201      	movs	r2, #1
 80121dc:	6829      	ldr	r1, [r5, #0]
 80121de:	4211      	tst	r1, r2
 80121e0:	d000      	beq.n	80121e4 <_printf_float+0x1c8>
 80121e2:	1c9a      	adds	r2, r3, #2
 80121e4:	612a      	str	r2, [r5, #16]
 80121e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121e8:	2400      	movs	r4, #0
 80121ea:	65ab      	str	r3, [r5, #88]	@ 0x58
 80121ec:	e7cd      	b.n	801218a <_printf_float+0x16e>
 80121ee:	2367      	movs	r3, #103	@ 0x67
 80121f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80121f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80121f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80121f6:	4299      	cmp	r1, r3
 80121f8:	db06      	blt.n	8012208 <_printf_float+0x1ec>
 80121fa:	682b      	ldr	r3, [r5, #0]
 80121fc:	6129      	str	r1, [r5, #16]
 80121fe:	07db      	lsls	r3, r3, #31
 8012200:	d5f1      	bpl.n	80121e6 <_printf_float+0x1ca>
 8012202:	3101      	adds	r1, #1
 8012204:	6129      	str	r1, [r5, #16]
 8012206:	e7ee      	b.n	80121e6 <_printf_float+0x1ca>
 8012208:	2201      	movs	r2, #1
 801220a:	2900      	cmp	r1, #0
 801220c:	dce0      	bgt.n	80121d0 <_printf_float+0x1b4>
 801220e:	1892      	adds	r2, r2, r2
 8012210:	1a52      	subs	r2, r2, r1
 8012212:	e7dd      	b.n	80121d0 <_printf_float+0x1b4>
 8012214:	682a      	ldr	r2, [r5, #0]
 8012216:	0553      	lsls	r3, r2, #21
 8012218:	d408      	bmi.n	801222c <_printf_float+0x210>
 801221a:	692b      	ldr	r3, [r5, #16]
 801221c:	003a      	movs	r2, r7
 801221e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012220:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012222:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012224:	47a0      	blx	r4
 8012226:	3001      	adds	r0, #1
 8012228:	d129      	bne.n	801227e <_printf_float+0x262>
 801222a:	e753      	b.n	80120d4 <_printf_float+0xb8>
 801222c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801222e:	2b65      	cmp	r3, #101	@ 0x65
 8012230:	d800      	bhi.n	8012234 <_printf_float+0x218>
 8012232:	e0da      	b.n	80123ea <_printf_float+0x3ce>
 8012234:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8012236:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012238:	2200      	movs	r2, #0
 801223a:	2300      	movs	r3, #0
 801223c:	f7ee f906 	bl	800044c <__aeabi_dcmpeq>
 8012240:	2800      	cmp	r0, #0
 8012242:	d033      	beq.n	80122ac <_printf_float+0x290>
 8012244:	2301      	movs	r3, #1
 8012246:	4a37      	ldr	r2, [pc, #220]	@ (8012324 <_printf_float+0x308>)
 8012248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801224a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801224c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801224e:	47a0      	blx	r4
 8012250:	3001      	adds	r0, #1
 8012252:	d100      	bne.n	8012256 <_printf_float+0x23a>
 8012254:	e73e      	b.n	80120d4 <_printf_float+0xb8>
 8012256:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012258:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801225a:	42b3      	cmp	r3, r6
 801225c:	db02      	blt.n	8012264 <_printf_float+0x248>
 801225e:	682b      	ldr	r3, [r5, #0]
 8012260:	07db      	lsls	r3, r3, #31
 8012262:	d50c      	bpl.n	801227e <_printf_float+0x262>
 8012264:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801226a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801226c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801226e:	47a0      	blx	r4
 8012270:	2400      	movs	r4, #0
 8012272:	3001      	adds	r0, #1
 8012274:	d100      	bne.n	8012278 <_printf_float+0x25c>
 8012276:	e72d      	b.n	80120d4 <_printf_float+0xb8>
 8012278:	1e73      	subs	r3, r6, #1
 801227a:	42a3      	cmp	r3, r4
 801227c:	dc0a      	bgt.n	8012294 <_printf_float+0x278>
 801227e:	682b      	ldr	r3, [r5, #0]
 8012280:	079b      	lsls	r3, r3, #30
 8012282:	d500      	bpl.n	8012286 <_printf_float+0x26a>
 8012284:	e105      	b.n	8012492 <_printf_float+0x476>
 8012286:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012288:	68e8      	ldr	r0, [r5, #12]
 801228a:	4298      	cmp	r0, r3
 801228c:	db00      	blt.n	8012290 <_printf_float+0x274>
 801228e:	e723      	b.n	80120d8 <_printf_float+0xbc>
 8012290:	0018      	movs	r0, r3
 8012292:	e721      	b.n	80120d8 <_printf_float+0xbc>
 8012294:	002a      	movs	r2, r5
 8012296:	2301      	movs	r3, #1
 8012298:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801229a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801229c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801229e:	321a      	adds	r2, #26
 80122a0:	47b8      	blx	r7
 80122a2:	3001      	adds	r0, #1
 80122a4:	d100      	bne.n	80122a8 <_printf_float+0x28c>
 80122a6:	e715      	b.n	80120d4 <_printf_float+0xb8>
 80122a8:	3401      	adds	r4, #1
 80122aa:	e7e5      	b.n	8012278 <_printf_float+0x25c>
 80122ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	dc3a      	bgt.n	8012328 <_printf_float+0x30c>
 80122b2:	2301      	movs	r3, #1
 80122b4:	4a1b      	ldr	r2, [pc, #108]	@ (8012324 <_printf_float+0x308>)
 80122b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80122b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80122bc:	47a0      	blx	r4
 80122be:	3001      	adds	r0, #1
 80122c0:	d100      	bne.n	80122c4 <_printf_float+0x2a8>
 80122c2:	e707      	b.n	80120d4 <_printf_float+0xb8>
 80122c4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80122c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122c8:	4333      	orrs	r3, r6
 80122ca:	d102      	bne.n	80122d2 <_printf_float+0x2b6>
 80122cc:	682b      	ldr	r3, [r5, #0]
 80122ce:	07db      	lsls	r3, r3, #31
 80122d0:	d5d5      	bpl.n	801227e <_printf_float+0x262>
 80122d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80122d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80122dc:	47a0      	blx	r4
 80122de:	2300      	movs	r3, #0
 80122e0:	3001      	adds	r0, #1
 80122e2:	d100      	bne.n	80122e6 <_printf_float+0x2ca>
 80122e4:	e6f6      	b.n	80120d4 <_printf_float+0xb8>
 80122e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80122e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122ec:	425b      	negs	r3, r3
 80122ee:	4293      	cmp	r3, r2
 80122f0:	dc01      	bgt.n	80122f6 <_printf_float+0x2da>
 80122f2:	0033      	movs	r3, r6
 80122f4:	e792      	b.n	801221c <_printf_float+0x200>
 80122f6:	002a      	movs	r2, r5
 80122f8:	2301      	movs	r3, #1
 80122fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80122fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012300:	321a      	adds	r2, #26
 8012302:	47a0      	blx	r4
 8012304:	3001      	adds	r0, #1
 8012306:	d100      	bne.n	801230a <_printf_float+0x2ee>
 8012308:	e6e4      	b.n	80120d4 <_printf_float+0xb8>
 801230a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801230c:	3301      	adds	r3, #1
 801230e:	e7ea      	b.n	80122e6 <_printf_float+0x2ca>
 8012310:	7fefffff 	.word	0x7fefffff
 8012314:	08017140 	.word	0x08017140
 8012318:	08017144 	.word	0x08017144
 801231c:	08017148 	.word	0x08017148
 8012320:	0801714c 	.word	0x0801714c
 8012324:	08017150 	.word	0x08017150
 8012328:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801232a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801232c:	930c      	str	r3, [sp, #48]	@ 0x30
 801232e:	429e      	cmp	r6, r3
 8012330:	dd00      	ble.n	8012334 <_printf_float+0x318>
 8012332:	001e      	movs	r6, r3
 8012334:	2e00      	cmp	r6, #0
 8012336:	dc31      	bgt.n	801239c <_printf_float+0x380>
 8012338:	43f3      	mvns	r3, r6
 801233a:	2400      	movs	r4, #0
 801233c:	17db      	asrs	r3, r3, #31
 801233e:	4033      	ands	r3, r6
 8012340:	930e      	str	r3, [sp, #56]	@ 0x38
 8012342:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8012344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012346:	1af3      	subs	r3, r6, r3
 8012348:	42a3      	cmp	r3, r4
 801234a:	dc30      	bgt.n	80123ae <_printf_float+0x392>
 801234c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801234e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012350:	429a      	cmp	r2, r3
 8012352:	dc38      	bgt.n	80123c6 <_printf_float+0x3aa>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	07db      	lsls	r3, r3, #31
 8012358:	d435      	bmi.n	80123c6 <_printf_float+0x3aa>
 801235a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801235c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801235e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012360:	1b9b      	subs	r3, r3, r6
 8012362:	1b14      	subs	r4, r2, r4
 8012364:	429c      	cmp	r4, r3
 8012366:	dd00      	ble.n	801236a <_printf_float+0x34e>
 8012368:	001c      	movs	r4, r3
 801236a:	2c00      	cmp	r4, #0
 801236c:	dc34      	bgt.n	80123d8 <_printf_float+0x3bc>
 801236e:	43e3      	mvns	r3, r4
 8012370:	2600      	movs	r6, #0
 8012372:	17db      	asrs	r3, r3, #31
 8012374:	401c      	ands	r4, r3
 8012376:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012378:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801237a:	1ad3      	subs	r3, r2, r3
 801237c:	1b1b      	subs	r3, r3, r4
 801237e:	42b3      	cmp	r3, r6
 8012380:	dc00      	bgt.n	8012384 <_printf_float+0x368>
 8012382:	e77c      	b.n	801227e <_printf_float+0x262>
 8012384:	002a      	movs	r2, r5
 8012386:	2301      	movs	r3, #1
 8012388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801238a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801238c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801238e:	321a      	adds	r2, #26
 8012390:	47b8      	blx	r7
 8012392:	3001      	adds	r0, #1
 8012394:	d100      	bne.n	8012398 <_printf_float+0x37c>
 8012396:	e69d      	b.n	80120d4 <_printf_float+0xb8>
 8012398:	3601      	adds	r6, #1
 801239a:	e7ec      	b.n	8012376 <_printf_float+0x35a>
 801239c:	0033      	movs	r3, r6
 801239e:	003a      	movs	r2, r7
 80123a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80123a6:	47a0      	blx	r4
 80123a8:	3001      	adds	r0, #1
 80123aa:	d1c5      	bne.n	8012338 <_printf_float+0x31c>
 80123ac:	e692      	b.n	80120d4 <_printf_float+0xb8>
 80123ae:	002a      	movs	r2, r5
 80123b0:	2301      	movs	r3, #1
 80123b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80123b8:	321a      	adds	r2, #26
 80123ba:	47b0      	blx	r6
 80123bc:	3001      	adds	r0, #1
 80123be:	d100      	bne.n	80123c2 <_printf_float+0x3a6>
 80123c0:	e688      	b.n	80120d4 <_printf_float+0xb8>
 80123c2:	3401      	adds	r4, #1
 80123c4:	e7bd      	b.n	8012342 <_printf_float+0x326>
 80123c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80123d0:	47a0      	blx	r4
 80123d2:	3001      	adds	r0, #1
 80123d4:	d1c1      	bne.n	801235a <_printf_float+0x33e>
 80123d6:	e67d      	b.n	80120d4 <_printf_float+0xb8>
 80123d8:	19ba      	adds	r2, r7, r6
 80123da:	0023      	movs	r3, r4
 80123dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80123e2:	47b0      	blx	r6
 80123e4:	3001      	adds	r0, #1
 80123e6:	d1c2      	bne.n	801236e <_printf_float+0x352>
 80123e8:	e674      	b.n	80120d4 <_printf_float+0xb8>
 80123ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80123ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	dc02      	bgt.n	80123f8 <_printf_float+0x3dc>
 80123f2:	2301      	movs	r3, #1
 80123f4:	421a      	tst	r2, r3
 80123f6:	d039      	beq.n	801246c <_printf_float+0x450>
 80123f8:	2301      	movs	r3, #1
 80123fa:	003a      	movs	r2, r7
 80123fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012400:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012402:	47b0      	blx	r6
 8012404:	3001      	adds	r0, #1
 8012406:	d100      	bne.n	801240a <_printf_float+0x3ee>
 8012408:	e664      	b.n	80120d4 <_printf_float+0xb8>
 801240a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801240c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801240e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012410:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012412:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012414:	47b0      	blx	r6
 8012416:	3001      	adds	r0, #1
 8012418:	d100      	bne.n	801241c <_printf_float+0x400>
 801241a:	e65b      	b.n	80120d4 <_printf_float+0xb8>
 801241c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801241e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012422:	2200      	movs	r2, #0
 8012424:	3b01      	subs	r3, #1
 8012426:	930c      	str	r3, [sp, #48]	@ 0x30
 8012428:	2300      	movs	r3, #0
 801242a:	f7ee f80f 	bl	800044c <__aeabi_dcmpeq>
 801242e:	2800      	cmp	r0, #0
 8012430:	d11a      	bne.n	8012468 <_printf_float+0x44c>
 8012432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012434:	1c7a      	adds	r2, r7, #1
 8012436:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012438:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801243a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801243c:	47b0      	blx	r6
 801243e:	3001      	adds	r0, #1
 8012440:	d10e      	bne.n	8012460 <_printf_float+0x444>
 8012442:	e647      	b.n	80120d4 <_printf_float+0xb8>
 8012444:	002a      	movs	r2, r5
 8012446:	2301      	movs	r3, #1
 8012448:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801244a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801244c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801244e:	321a      	adds	r2, #26
 8012450:	47b8      	blx	r7
 8012452:	3001      	adds	r0, #1
 8012454:	d100      	bne.n	8012458 <_printf_float+0x43c>
 8012456:	e63d      	b.n	80120d4 <_printf_float+0xb8>
 8012458:	3601      	adds	r6, #1
 801245a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801245c:	429e      	cmp	r6, r3
 801245e:	dbf1      	blt.n	8012444 <_printf_float+0x428>
 8012460:	002a      	movs	r2, r5
 8012462:	0023      	movs	r3, r4
 8012464:	3250      	adds	r2, #80	@ 0x50
 8012466:	e6da      	b.n	801221e <_printf_float+0x202>
 8012468:	2600      	movs	r6, #0
 801246a:	e7f6      	b.n	801245a <_printf_float+0x43e>
 801246c:	003a      	movs	r2, r7
 801246e:	e7e2      	b.n	8012436 <_printf_float+0x41a>
 8012470:	002a      	movs	r2, r5
 8012472:	2301      	movs	r3, #1
 8012474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012478:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801247a:	3219      	adds	r2, #25
 801247c:	47b0      	blx	r6
 801247e:	3001      	adds	r0, #1
 8012480:	d100      	bne.n	8012484 <_printf_float+0x468>
 8012482:	e627      	b.n	80120d4 <_printf_float+0xb8>
 8012484:	3401      	adds	r4, #1
 8012486:	68eb      	ldr	r3, [r5, #12]
 8012488:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801248a:	1a9b      	subs	r3, r3, r2
 801248c:	42a3      	cmp	r3, r4
 801248e:	dcef      	bgt.n	8012470 <_printf_float+0x454>
 8012490:	e6f9      	b.n	8012286 <_printf_float+0x26a>
 8012492:	2400      	movs	r4, #0
 8012494:	e7f7      	b.n	8012486 <_printf_float+0x46a>
 8012496:	46c0      	nop			@ (mov r8, r8)

08012498 <_printf_common>:
 8012498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801249a:	0016      	movs	r6, r2
 801249c:	9301      	str	r3, [sp, #4]
 801249e:	688a      	ldr	r2, [r1, #8]
 80124a0:	690b      	ldr	r3, [r1, #16]
 80124a2:	000c      	movs	r4, r1
 80124a4:	9000      	str	r0, [sp, #0]
 80124a6:	4293      	cmp	r3, r2
 80124a8:	da00      	bge.n	80124ac <_printf_common+0x14>
 80124aa:	0013      	movs	r3, r2
 80124ac:	0022      	movs	r2, r4
 80124ae:	6033      	str	r3, [r6, #0]
 80124b0:	3243      	adds	r2, #67	@ 0x43
 80124b2:	7812      	ldrb	r2, [r2, #0]
 80124b4:	2a00      	cmp	r2, #0
 80124b6:	d001      	beq.n	80124bc <_printf_common+0x24>
 80124b8:	3301      	adds	r3, #1
 80124ba:	6033      	str	r3, [r6, #0]
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	069b      	lsls	r3, r3, #26
 80124c0:	d502      	bpl.n	80124c8 <_printf_common+0x30>
 80124c2:	6833      	ldr	r3, [r6, #0]
 80124c4:	3302      	adds	r3, #2
 80124c6:	6033      	str	r3, [r6, #0]
 80124c8:	6822      	ldr	r2, [r4, #0]
 80124ca:	2306      	movs	r3, #6
 80124cc:	0015      	movs	r5, r2
 80124ce:	401d      	ands	r5, r3
 80124d0:	421a      	tst	r2, r3
 80124d2:	d027      	beq.n	8012524 <_printf_common+0x8c>
 80124d4:	0023      	movs	r3, r4
 80124d6:	3343      	adds	r3, #67	@ 0x43
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	1e5a      	subs	r2, r3, #1
 80124dc:	4193      	sbcs	r3, r2
 80124de:	6822      	ldr	r2, [r4, #0]
 80124e0:	0692      	lsls	r2, r2, #26
 80124e2:	d430      	bmi.n	8012546 <_printf_common+0xae>
 80124e4:	0022      	movs	r2, r4
 80124e6:	9901      	ldr	r1, [sp, #4]
 80124e8:	9800      	ldr	r0, [sp, #0]
 80124ea:	9d08      	ldr	r5, [sp, #32]
 80124ec:	3243      	adds	r2, #67	@ 0x43
 80124ee:	47a8      	blx	r5
 80124f0:	3001      	adds	r0, #1
 80124f2:	d025      	beq.n	8012540 <_printf_common+0xa8>
 80124f4:	2206      	movs	r2, #6
 80124f6:	6823      	ldr	r3, [r4, #0]
 80124f8:	2500      	movs	r5, #0
 80124fa:	4013      	ands	r3, r2
 80124fc:	2b04      	cmp	r3, #4
 80124fe:	d105      	bne.n	801250c <_printf_common+0x74>
 8012500:	6833      	ldr	r3, [r6, #0]
 8012502:	68e5      	ldr	r5, [r4, #12]
 8012504:	1aed      	subs	r5, r5, r3
 8012506:	43eb      	mvns	r3, r5
 8012508:	17db      	asrs	r3, r3, #31
 801250a:	401d      	ands	r5, r3
 801250c:	68a3      	ldr	r3, [r4, #8]
 801250e:	6922      	ldr	r2, [r4, #16]
 8012510:	4293      	cmp	r3, r2
 8012512:	dd01      	ble.n	8012518 <_printf_common+0x80>
 8012514:	1a9b      	subs	r3, r3, r2
 8012516:	18ed      	adds	r5, r5, r3
 8012518:	2600      	movs	r6, #0
 801251a:	42b5      	cmp	r5, r6
 801251c:	d120      	bne.n	8012560 <_printf_common+0xc8>
 801251e:	2000      	movs	r0, #0
 8012520:	e010      	b.n	8012544 <_printf_common+0xac>
 8012522:	3501      	adds	r5, #1
 8012524:	68e3      	ldr	r3, [r4, #12]
 8012526:	6832      	ldr	r2, [r6, #0]
 8012528:	1a9b      	subs	r3, r3, r2
 801252a:	42ab      	cmp	r3, r5
 801252c:	ddd2      	ble.n	80124d4 <_printf_common+0x3c>
 801252e:	0022      	movs	r2, r4
 8012530:	2301      	movs	r3, #1
 8012532:	9901      	ldr	r1, [sp, #4]
 8012534:	9800      	ldr	r0, [sp, #0]
 8012536:	9f08      	ldr	r7, [sp, #32]
 8012538:	3219      	adds	r2, #25
 801253a:	47b8      	blx	r7
 801253c:	3001      	adds	r0, #1
 801253e:	d1f0      	bne.n	8012522 <_printf_common+0x8a>
 8012540:	2001      	movs	r0, #1
 8012542:	4240      	negs	r0, r0
 8012544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012546:	2030      	movs	r0, #48	@ 0x30
 8012548:	18e1      	adds	r1, r4, r3
 801254a:	3143      	adds	r1, #67	@ 0x43
 801254c:	7008      	strb	r0, [r1, #0]
 801254e:	0021      	movs	r1, r4
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	3145      	adds	r1, #69	@ 0x45
 8012554:	7809      	ldrb	r1, [r1, #0]
 8012556:	18a2      	adds	r2, r4, r2
 8012558:	3243      	adds	r2, #67	@ 0x43
 801255a:	3302      	adds	r3, #2
 801255c:	7011      	strb	r1, [r2, #0]
 801255e:	e7c1      	b.n	80124e4 <_printf_common+0x4c>
 8012560:	0022      	movs	r2, r4
 8012562:	2301      	movs	r3, #1
 8012564:	9901      	ldr	r1, [sp, #4]
 8012566:	9800      	ldr	r0, [sp, #0]
 8012568:	9f08      	ldr	r7, [sp, #32]
 801256a:	321a      	adds	r2, #26
 801256c:	47b8      	blx	r7
 801256e:	3001      	adds	r0, #1
 8012570:	d0e6      	beq.n	8012540 <_printf_common+0xa8>
 8012572:	3601      	adds	r6, #1
 8012574:	e7d1      	b.n	801251a <_printf_common+0x82>
	...

08012578 <_printf_i>:
 8012578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801257a:	b08b      	sub	sp, #44	@ 0x2c
 801257c:	9206      	str	r2, [sp, #24]
 801257e:	000a      	movs	r2, r1
 8012580:	3243      	adds	r2, #67	@ 0x43
 8012582:	9307      	str	r3, [sp, #28]
 8012584:	9005      	str	r0, [sp, #20]
 8012586:	9203      	str	r2, [sp, #12]
 8012588:	7e0a      	ldrb	r2, [r1, #24]
 801258a:	000c      	movs	r4, r1
 801258c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801258e:	2a78      	cmp	r2, #120	@ 0x78
 8012590:	d809      	bhi.n	80125a6 <_printf_i+0x2e>
 8012592:	2a62      	cmp	r2, #98	@ 0x62
 8012594:	d80b      	bhi.n	80125ae <_printf_i+0x36>
 8012596:	2a00      	cmp	r2, #0
 8012598:	d100      	bne.n	801259c <_printf_i+0x24>
 801259a:	e0bc      	b.n	8012716 <_printf_i+0x19e>
 801259c:	497b      	ldr	r1, [pc, #492]	@ (801278c <_printf_i+0x214>)
 801259e:	9104      	str	r1, [sp, #16]
 80125a0:	2a58      	cmp	r2, #88	@ 0x58
 80125a2:	d100      	bne.n	80125a6 <_printf_i+0x2e>
 80125a4:	e090      	b.n	80126c8 <_printf_i+0x150>
 80125a6:	0025      	movs	r5, r4
 80125a8:	3542      	adds	r5, #66	@ 0x42
 80125aa:	702a      	strb	r2, [r5, #0]
 80125ac:	e022      	b.n	80125f4 <_printf_i+0x7c>
 80125ae:	0010      	movs	r0, r2
 80125b0:	3863      	subs	r0, #99	@ 0x63
 80125b2:	2815      	cmp	r0, #21
 80125b4:	d8f7      	bhi.n	80125a6 <_printf_i+0x2e>
 80125b6:	f7ed fdb9 	bl	800012c <__gnu_thumb1_case_shi>
 80125ba:	0016      	.short	0x0016
 80125bc:	fff6001f 	.word	0xfff6001f
 80125c0:	fff6fff6 	.word	0xfff6fff6
 80125c4:	001ffff6 	.word	0x001ffff6
 80125c8:	fff6fff6 	.word	0xfff6fff6
 80125cc:	fff6fff6 	.word	0xfff6fff6
 80125d0:	003600a1 	.word	0x003600a1
 80125d4:	fff60080 	.word	0xfff60080
 80125d8:	00b2fff6 	.word	0x00b2fff6
 80125dc:	0036fff6 	.word	0x0036fff6
 80125e0:	fff6fff6 	.word	0xfff6fff6
 80125e4:	0084      	.short	0x0084
 80125e6:	0025      	movs	r5, r4
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	3542      	adds	r5, #66	@ 0x42
 80125ec:	1d11      	adds	r1, r2, #4
 80125ee:	6019      	str	r1, [r3, #0]
 80125f0:	6813      	ldr	r3, [r2, #0]
 80125f2:	702b      	strb	r3, [r5, #0]
 80125f4:	2301      	movs	r3, #1
 80125f6:	e0a0      	b.n	801273a <_printf_i+0x1c2>
 80125f8:	6818      	ldr	r0, [r3, #0]
 80125fa:	6809      	ldr	r1, [r1, #0]
 80125fc:	1d02      	adds	r2, r0, #4
 80125fe:	060d      	lsls	r5, r1, #24
 8012600:	d50b      	bpl.n	801261a <_printf_i+0xa2>
 8012602:	6806      	ldr	r6, [r0, #0]
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	2e00      	cmp	r6, #0
 8012608:	da03      	bge.n	8012612 <_printf_i+0x9a>
 801260a:	232d      	movs	r3, #45	@ 0x2d
 801260c:	9a03      	ldr	r2, [sp, #12]
 801260e:	4276      	negs	r6, r6
 8012610:	7013      	strb	r3, [r2, #0]
 8012612:	4b5e      	ldr	r3, [pc, #376]	@ (801278c <_printf_i+0x214>)
 8012614:	270a      	movs	r7, #10
 8012616:	9304      	str	r3, [sp, #16]
 8012618:	e018      	b.n	801264c <_printf_i+0xd4>
 801261a:	6806      	ldr	r6, [r0, #0]
 801261c:	601a      	str	r2, [r3, #0]
 801261e:	0649      	lsls	r1, r1, #25
 8012620:	d5f1      	bpl.n	8012606 <_printf_i+0x8e>
 8012622:	b236      	sxth	r6, r6
 8012624:	e7ef      	b.n	8012606 <_printf_i+0x8e>
 8012626:	6808      	ldr	r0, [r1, #0]
 8012628:	6819      	ldr	r1, [r3, #0]
 801262a:	c940      	ldmia	r1!, {r6}
 801262c:	0605      	lsls	r5, r0, #24
 801262e:	d402      	bmi.n	8012636 <_printf_i+0xbe>
 8012630:	0640      	lsls	r0, r0, #25
 8012632:	d500      	bpl.n	8012636 <_printf_i+0xbe>
 8012634:	b2b6      	uxth	r6, r6
 8012636:	6019      	str	r1, [r3, #0]
 8012638:	4b54      	ldr	r3, [pc, #336]	@ (801278c <_printf_i+0x214>)
 801263a:	270a      	movs	r7, #10
 801263c:	9304      	str	r3, [sp, #16]
 801263e:	2a6f      	cmp	r2, #111	@ 0x6f
 8012640:	d100      	bne.n	8012644 <_printf_i+0xcc>
 8012642:	3f02      	subs	r7, #2
 8012644:	0023      	movs	r3, r4
 8012646:	2200      	movs	r2, #0
 8012648:	3343      	adds	r3, #67	@ 0x43
 801264a:	701a      	strb	r2, [r3, #0]
 801264c:	6863      	ldr	r3, [r4, #4]
 801264e:	60a3      	str	r3, [r4, #8]
 8012650:	2b00      	cmp	r3, #0
 8012652:	db03      	blt.n	801265c <_printf_i+0xe4>
 8012654:	2104      	movs	r1, #4
 8012656:	6822      	ldr	r2, [r4, #0]
 8012658:	438a      	bics	r2, r1
 801265a:	6022      	str	r2, [r4, #0]
 801265c:	2e00      	cmp	r6, #0
 801265e:	d102      	bne.n	8012666 <_printf_i+0xee>
 8012660:	9d03      	ldr	r5, [sp, #12]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d00c      	beq.n	8012680 <_printf_i+0x108>
 8012666:	9d03      	ldr	r5, [sp, #12]
 8012668:	0030      	movs	r0, r6
 801266a:	0039      	movs	r1, r7
 801266c:	f7ed fdee 	bl	800024c <__aeabi_uidivmod>
 8012670:	9b04      	ldr	r3, [sp, #16]
 8012672:	3d01      	subs	r5, #1
 8012674:	5c5b      	ldrb	r3, [r3, r1]
 8012676:	702b      	strb	r3, [r5, #0]
 8012678:	0033      	movs	r3, r6
 801267a:	0006      	movs	r6, r0
 801267c:	429f      	cmp	r7, r3
 801267e:	d9f3      	bls.n	8012668 <_printf_i+0xf0>
 8012680:	2f08      	cmp	r7, #8
 8012682:	d109      	bne.n	8012698 <_printf_i+0x120>
 8012684:	6823      	ldr	r3, [r4, #0]
 8012686:	07db      	lsls	r3, r3, #31
 8012688:	d506      	bpl.n	8012698 <_printf_i+0x120>
 801268a:	6862      	ldr	r2, [r4, #4]
 801268c:	6923      	ldr	r3, [r4, #16]
 801268e:	429a      	cmp	r2, r3
 8012690:	dc02      	bgt.n	8012698 <_printf_i+0x120>
 8012692:	2330      	movs	r3, #48	@ 0x30
 8012694:	3d01      	subs	r5, #1
 8012696:	702b      	strb	r3, [r5, #0]
 8012698:	9b03      	ldr	r3, [sp, #12]
 801269a:	1b5b      	subs	r3, r3, r5
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	9b07      	ldr	r3, [sp, #28]
 80126a0:	0021      	movs	r1, r4
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	9805      	ldr	r0, [sp, #20]
 80126a6:	9b06      	ldr	r3, [sp, #24]
 80126a8:	aa09      	add	r2, sp, #36	@ 0x24
 80126aa:	f7ff fef5 	bl	8012498 <_printf_common>
 80126ae:	3001      	adds	r0, #1
 80126b0:	d148      	bne.n	8012744 <_printf_i+0x1cc>
 80126b2:	2001      	movs	r0, #1
 80126b4:	4240      	negs	r0, r0
 80126b6:	b00b      	add	sp, #44	@ 0x2c
 80126b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ba:	2220      	movs	r2, #32
 80126bc:	6809      	ldr	r1, [r1, #0]
 80126be:	430a      	orrs	r2, r1
 80126c0:	6022      	str	r2, [r4, #0]
 80126c2:	2278      	movs	r2, #120	@ 0x78
 80126c4:	4932      	ldr	r1, [pc, #200]	@ (8012790 <_printf_i+0x218>)
 80126c6:	9104      	str	r1, [sp, #16]
 80126c8:	0021      	movs	r1, r4
 80126ca:	3145      	adds	r1, #69	@ 0x45
 80126cc:	700a      	strb	r2, [r1, #0]
 80126ce:	6819      	ldr	r1, [r3, #0]
 80126d0:	6822      	ldr	r2, [r4, #0]
 80126d2:	c940      	ldmia	r1!, {r6}
 80126d4:	0610      	lsls	r0, r2, #24
 80126d6:	d402      	bmi.n	80126de <_printf_i+0x166>
 80126d8:	0650      	lsls	r0, r2, #25
 80126da:	d500      	bpl.n	80126de <_printf_i+0x166>
 80126dc:	b2b6      	uxth	r6, r6
 80126de:	6019      	str	r1, [r3, #0]
 80126e0:	07d3      	lsls	r3, r2, #31
 80126e2:	d502      	bpl.n	80126ea <_printf_i+0x172>
 80126e4:	2320      	movs	r3, #32
 80126e6:	4313      	orrs	r3, r2
 80126e8:	6023      	str	r3, [r4, #0]
 80126ea:	2e00      	cmp	r6, #0
 80126ec:	d001      	beq.n	80126f2 <_printf_i+0x17a>
 80126ee:	2710      	movs	r7, #16
 80126f0:	e7a8      	b.n	8012644 <_printf_i+0xcc>
 80126f2:	2220      	movs	r2, #32
 80126f4:	6823      	ldr	r3, [r4, #0]
 80126f6:	4393      	bics	r3, r2
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	e7f8      	b.n	80126ee <_printf_i+0x176>
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	680d      	ldr	r5, [r1, #0]
 8012700:	1d10      	adds	r0, r2, #4
 8012702:	6949      	ldr	r1, [r1, #20]
 8012704:	6018      	str	r0, [r3, #0]
 8012706:	6813      	ldr	r3, [r2, #0]
 8012708:	062e      	lsls	r6, r5, #24
 801270a:	d501      	bpl.n	8012710 <_printf_i+0x198>
 801270c:	6019      	str	r1, [r3, #0]
 801270e:	e002      	b.n	8012716 <_printf_i+0x19e>
 8012710:	066d      	lsls	r5, r5, #25
 8012712:	d5fb      	bpl.n	801270c <_printf_i+0x194>
 8012714:	8019      	strh	r1, [r3, #0]
 8012716:	2300      	movs	r3, #0
 8012718:	9d03      	ldr	r5, [sp, #12]
 801271a:	6123      	str	r3, [r4, #16]
 801271c:	e7bf      	b.n	801269e <_printf_i+0x126>
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	1d11      	adds	r1, r2, #4
 8012722:	6019      	str	r1, [r3, #0]
 8012724:	6815      	ldr	r5, [r2, #0]
 8012726:	2100      	movs	r1, #0
 8012728:	0028      	movs	r0, r5
 801272a:	6862      	ldr	r2, [r4, #4]
 801272c:	f000 fcc3 	bl	80130b6 <memchr>
 8012730:	2800      	cmp	r0, #0
 8012732:	d001      	beq.n	8012738 <_printf_i+0x1c0>
 8012734:	1b40      	subs	r0, r0, r5
 8012736:	6060      	str	r0, [r4, #4]
 8012738:	6863      	ldr	r3, [r4, #4]
 801273a:	6123      	str	r3, [r4, #16]
 801273c:	2300      	movs	r3, #0
 801273e:	9a03      	ldr	r2, [sp, #12]
 8012740:	7013      	strb	r3, [r2, #0]
 8012742:	e7ac      	b.n	801269e <_printf_i+0x126>
 8012744:	002a      	movs	r2, r5
 8012746:	6923      	ldr	r3, [r4, #16]
 8012748:	9906      	ldr	r1, [sp, #24]
 801274a:	9805      	ldr	r0, [sp, #20]
 801274c:	9d07      	ldr	r5, [sp, #28]
 801274e:	47a8      	blx	r5
 8012750:	3001      	adds	r0, #1
 8012752:	d0ae      	beq.n	80126b2 <_printf_i+0x13a>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	079b      	lsls	r3, r3, #30
 8012758:	d415      	bmi.n	8012786 <_printf_i+0x20e>
 801275a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801275c:	68e0      	ldr	r0, [r4, #12]
 801275e:	4298      	cmp	r0, r3
 8012760:	daa9      	bge.n	80126b6 <_printf_i+0x13e>
 8012762:	0018      	movs	r0, r3
 8012764:	e7a7      	b.n	80126b6 <_printf_i+0x13e>
 8012766:	0022      	movs	r2, r4
 8012768:	2301      	movs	r3, #1
 801276a:	9906      	ldr	r1, [sp, #24]
 801276c:	9805      	ldr	r0, [sp, #20]
 801276e:	9e07      	ldr	r6, [sp, #28]
 8012770:	3219      	adds	r2, #25
 8012772:	47b0      	blx	r6
 8012774:	3001      	adds	r0, #1
 8012776:	d09c      	beq.n	80126b2 <_printf_i+0x13a>
 8012778:	3501      	adds	r5, #1
 801277a:	68e3      	ldr	r3, [r4, #12]
 801277c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801277e:	1a9b      	subs	r3, r3, r2
 8012780:	42ab      	cmp	r3, r5
 8012782:	dcf0      	bgt.n	8012766 <_printf_i+0x1ee>
 8012784:	e7e9      	b.n	801275a <_printf_i+0x1e2>
 8012786:	2500      	movs	r5, #0
 8012788:	e7f7      	b.n	801277a <_printf_i+0x202>
 801278a:	46c0      	nop			@ (mov r8, r8)
 801278c:	08017152 	.word	0x08017152
 8012790:	08017163 	.word	0x08017163

08012794 <_scanf_float>:
 8012794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012796:	b08b      	sub	sp, #44	@ 0x2c
 8012798:	0016      	movs	r6, r2
 801279a:	9003      	str	r0, [sp, #12]
 801279c:	22ae      	movs	r2, #174	@ 0xae
 801279e:	2000      	movs	r0, #0
 80127a0:	9307      	str	r3, [sp, #28]
 80127a2:	688b      	ldr	r3, [r1, #8]
 80127a4:	000c      	movs	r4, r1
 80127a6:	1e59      	subs	r1, r3, #1
 80127a8:	0052      	lsls	r2, r2, #1
 80127aa:	9006      	str	r0, [sp, #24]
 80127ac:	4291      	cmp	r1, r2
 80127ae:	d905      	bls.n	80127bc <_scanf_float+0x28>
 80127b0:	3b5e      	subs	r3, #94	@ 0x5e
 80127b2:	3bff      	subs	r3, #255	@ 0xff
 80127b4:	9306      	str	r3, [sp, #24]
 80127b6:	235e      	movs	r3, #94	@ 0x5e
 80127b8:	33ff      	adds	r3, #255	@ 0xff
 80127ba:	60a3      	str	r3, [r4, #8]
 80127bc:	23f0      	movs	r3, #240	@ 0xf0
 80127be:	6822      	ldr	r2, [r4, #0]
 80127c0:	00db      	lsls	r3, r3, #3
 80127c2:	4313      	orrs	r3, r2
 80127c4:	6023      	str	r3, [r4, #0]
 80127c6:	0023      	movs	r3, r4
 80127c8:	2500      	movs	r5, #0
 80127ca:	331c      	adds	r3, #28
 80127cc:	001f      	movs	r7, r3
 80127ce:	9304      	str	r3, [sp, #16]
 80127d0:	9502      	str	r5, [sp, #8]
 80127d2:	9509      	str	r5, [sp, #36]	@ 0x24
 80127d4:	9508      	str	r5, [sp, #32]
 80127d6:	9501      	str	r5, [sp, #4]
 80127d8:	9505      	str	r5, [sp, #20]
 80127da:	68a2      	ldr	r2, [r4, #8]
 80127dc:	2a00      	cmp	r2, #0
 80127de:	d00a      	beq.n	80127f6 <_scanf_float+0x62>
 80127e0:	6833      	ldr	r3, [r6, #0]
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80127e6:	d844      	bhi.n	8012872 <_scanf_float+0xde>
 80127e8:	0018      	movs	r0, r3
 80127ea:	2b40      	cmp	r3, #64	@ 0x40
 80127ec:	d82c      	bhi.n	8012848 <_scanf_float+0xb4>
 80127ee:	382b      	subs	r0, #43	@ 0x2b
 80127f0:	b2c1      	uxtb	r1, r0
 80127f2:	290e      	cmp	r1, #14
 80127f4:	d92a      	bls.n	801284c <_scanf_float+0xb8>
 80127f6:	9b01      	ldr	r3, [sp, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d003      	beq.n	8012804 <_scanf_float+0x70>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	4aa6      	ldr	r2, [pc, #664]	@ (8012a98 <_scanf_float+0x304>)
 8012800:	4013      	ands	r3, r2
 8012802:	6023      	str	r3, [r4, #0]
 8012804:	9b02      	ldr	r3, [sp, #8]
 8012806:	3b01      	subs	r3, #1
 8012808:	2b01      	cmp	r3, #1
 801280a:	d900      	bls.n	801280e <_scanf_float+0x7a>
 801280c:	e0fe      	b.n	8012a0c <_scanf_float+0x278>
 801280e:	25be      	movs	r5, #190	@ 0xbe
 8012810:	006d      	lsls	r5, r5, #1
 8012812:	9b04      	ldr	r3, [sp, #16]
 8012814:	429f      	cmp	r7, r3
 8012816:	d900      	bls.n	801281a <_scanf_float+0x86>
 8012818:	e0ee      	b.n	80129f8 <_scanf_float+0x264>
 801281a:	2001      	movs	r0, #1
 801281c:	b00b      	add	sp, #44	@ 0x2c
 801281e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012820:	0018      	movs	r0, r3
 8012822:	3861      	subs	r0, #97	@ 0x61
 8012824:	280d      	cmp	r0, #13
 8012826:	d8e6      	bhi.n	80127f6 <_scanf_float+0x62>
 8012828:	f7ed fc80 	bl	800012c <__gnu_thumb1_case_shi>
 801282c:	ffe50089 	.word	0xffe50089
 8012830:	ffe5ffe5 	.word	0xffe5ffe5
 8012834:	00a700bb 	.word	0x00a700bb
 8012838:	ffe5ffe5 	.word	0xffe5ffe5
 801283c:	ffe5008f 	.word	0xffe5008f
 8012840:	ffe5ffe5 	.word	0xffe5ffe5
 8012844:	006bffe5 	.word	0x006bffe5
 8012848:	3841      	subs	r0, #65	@ 0x41
 801284a:	e7eb      	b.n	8012824 <_scanf_float+0x90>
 801284c:	280e      	cmp	r0, #14
 801284e:	d8d2      	bhi.n	80127f6 <_scanf_float+0x62>
 8012850:	f7ed fc6c 	bl	800012c <__gnu_thumb1_case_shi>
 8012854:	ffd1004f 	.word	0xffd1004f
 8012858:	009d004f 	.word	0x009d004f
 801285c:	0021ffd1 	.word	0x0021ffd1
 8012860:	00410041 	.word	0x00410041
 8012864:	00410041 	.word	0x00410041
 8012868:	00410041 	.word	0x00410041
 801286c:	00410041 	.word	0x00410041
 8012870:	0041      	.short	0x0041
 8012872:	2b6e      	cmp	r3, #110	@ 0x6e
 8012874:	d80a      	bhi.n	801288c <_scanf_float+0xf8>
 8012876:	2b60      	cmp	r3, #96	@ 0x60
 8012878:	d8d2      	bhi.n	8012820 <_scanf_float+0x8c>
 801287a:	2b54      	cmp	r3, #84	@ 0x54
 801287c:	d100      	bne.n	8012880 <_scanf_float+0xec>
 801287e:	e081      	b.n	8012984 <_scanf_float+0x1f0>
 8012880:	2b59      	cmp	r3, #89	@ 0x59
 8012882:	d1b8      	bne.n	80127f6 <_scanf_float+0x62>
 8012884:	2d07      	cmp	r5, #7
 8012886:	d1b6      	bne.n	80127f6 <_scanf_float+0x62>
 8012888:	2508      	movs	r5, #8
 801288a:	e02f      	b.n	80128ec <_scanf_float+0x158>
 801288c:	2b74      	cmp	r3, #116	@ 0x74
 801288e:	d079      	beq.n	8012984 <_scanf_float+0x1f0>
 8012890:	2b79      	cmp	r3, #121	@ 0x79
 8012892:	d0f7      	beq.n	8012884 <_scanf_float+0xf0>
 8012894:	e7af      	b.n	80127f6 <_scanf_float+0x62>
 8012896:	6821      	ldr	r1, [r4, #0]
 8012898:	05c8      	lsls	r0, r1, #23
 801289a:	d51c      	bpl.n	80128d6 <_scanf_float+0x142>
 801289c:	2380      	movs	r3, #128	@ 0x80
 801289e:	4399      	bics	r1, r3
 80128a0:	9b01      	ldr	r3, [sp, #4]
 80128a2:	6021      	str	r1, [r4, #0]
 80128a4:	3301      	adds	r3, #1
 80128a6:	9301      	str	r3, [sp, #4]
 80128a8:	9b06      	ldr	r3, [sp, #24]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d003      	beq.n	80128b6 <_scanf_float+0x122>
 80128ae:	3b01      	subs	r3, #1
 80128b0:	3201      	adds	r2, #1
 80128b2:	9306      	str	r3, [sp, #24]
 80128b4:	60a2      	str	r2, [r4, #8]
 80128b6:	68a3      	ldr	r3, [r4, #8]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	60a3      	str	r3, [r4, #8]
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	3301      	adds	r3, #1
 80128c0:	6123      	str	r3, [r4, #16]
 80128c2:	6873      	ldr	r3, [r6, #4]
 80128c4:	3b01      	subs	r3, #1
 80128c6:	6073      	str	r3, [r6, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dc00      	bgt.n	80128ce <_scanf_float+0x13a>
 80128cc:	e08a      	b.n	80129e4 <_scanf_float+0x250>
 80128ce:	6833      	ldr	r3, [r6, #0]
 80128d0:	3301      	adds	r3, #1
 80128d2:	6033      	str	r3, [r6, #0]
 80128d4:	e781      	b.n	80127da <_scanf_float+0x46>
 80128d6:	9a02      	ldr	r2, [sp, #8]
 80128d8:	1951      	adds	r1, r2, r5
 80128da:	2900      	cmp	r1, #0
 80128dc:	d000      	beq.n	80128e0 <_scanf_float+0x14c>
 80128de:	e78a      	b.n	80127f6 <_scanf_float+0x62>
 80128e0:	000d      	movs	r5, r1
 80128e2:	6822      	ldr	r2, [r4, #0]
 80128e4:	486d      	ldr	r0, [pc, #436]	@ (8012a9c <_scanf_float+0x308>)
 80128e6:	9102      	str	r1, [sp, #8]
 80128e8:	4002      	ands	r2, r0
 80128ea:	6022      	str	r2, [r4, #0]
 80128ec:	703b      	strb	r3, [r7, #0]
 80128ee:	3701      	adds	r7, #1
 80128f0:	e7e1      	b.n	80128b6 <_scanf_float+0x122>
 80128f2:	2180      	movs	r1, #128	@ 0x80
 80128f4:	6822      	ldr	r2, [r4, #0]
 80128f6:	420a      	tst	r2, r1
 80128f8:	d100      	bne.n	80128fc <_scanf_float+0x168>
 80128fa:	e77c      	b.n	80127f6 <_scanf_float+0x62>
 80128fc:	438a      	bics	r2, r1
 80128fe:	6022      	str	r2, [r4, #0]
 8012900:	e7f4      	b.n	80128ec <_scanf_float+0x158>
 8012902:	9a02      	ldr	r2, [sp, #8]
 8012904:	2a00      	cmp	r2, #0
 8012906:	d10f      	bne.n	8012928 <_scanf_float+0x194>
 8012908:	9a01      	ldr	r2, [sp, #4]
 801290a:	2a00      	cmp	r2, #0
 801290c:	d10f      	bne.n	801292e <_scanf_float+0x19a>
 801290e:	6822      	ldr	r2, [r4, #0]
 8012910:	21e0      	movs	r1, #224	@ 0xe0
 8012912:	0010      	movs	r0, r2
 8012914:	00c9      	lsls	r1, r1, #3
 8012916:	4008      	ands	r0, r1
 8012918:	4288      	cmp	r0, r1
 801291a:	d108      	bne.n	801292e <_scanf_float+0x19a>
 801291c:	4960      	ldr	r1, [pc, #384]	@ (8012aa0 <_scanf_float+0x30c>)
 801291e:	400a      	ands	r2, r1
 8012920:	6022      	str	r2, [r4, #0]
 8012922:	2201      	movs	r2, #1
 8012924:	9202      	str	r2, [sp, #8]
 8012926:	e7e1      	b.n	80128ec <_scanf_float+0x158>
 8012928:	9a02      	ldr	r2, [sp, #8]
 801292a:	2a02      	cmp	r2, #2
 801292c:	d058      	beq.n	80129e0 <_scanf_float+0x24c>
 801292e:	2d01      	cmp	r5, #1
 8012930:	d002      	beq.n	8012938 <_scanf_float+0x1a4>
 8012932:	2d04      	cmp	r5, #4
 8012934:	d000      	beq.n	8012938 <_scanf_float+0x1a4>
 8012936:	e75e      	b.n	80127f6 <_scanf_float+0x62>
 8012938:	3501      	adds	r5, #1
 801293a:	b2ed      	uxtb	r5, r5
 801293c:	e7d6      	b.n	80128ec <_scanf_float+0x158>
 801293e:	9a02      	ldr	r2, [sp, #8]
 8012940:	2a01      	cmp	r2, #1
 8012942:	d000      	beq.n	8012946 <_scanf_float+0x1b2>
 8012944:	e757      	b.n	80127f6 <_scanf_float+0x62>
 8012946:	2202      	movs	r2, #2
 8012948:	e7ec      	b.n	8012924 <_scanf_float+0x190>
 801294a:	2d00      	cmp	r5, #0
 801294c:	d110      	bne.n	8012970 <_scanf_float+0x1dc>
 801294e:	9a01      	ldr	r2, [sp, #4]
 8012950:	2a00      	cmp	r2, #0
 8012952:	d000      	beq.n	8012956 <_scanf_float+0x1c2>
 8012954:	e752      	b.n	80127fc <_scanf_float+0x68>
 8012956:	6822      	ldr	r2, [r4, #0]
 8012958:	21e0      	movs	r1, #224	@ 0xe0
 801295a:	0010      	movs	r0, r2
 801295c:	00c9      	lsls	r1, r1, #3
 801295e:	4008      	ands	r0, r1
 8012960:	4288      	cmp	r0, r1
 8012962:	d000      	beq.n	8012966 <_scanf_float+0x1d2>
 8012964:	e11d      	b.n	8012ba2 <_scanf_float+0x40e>
 8012966:	494e      	ldr	r1, [pc, #312]	@ (8012aa0 <_scanf_float+0x30c>)
 8012968:	3501      	adds	r5, #1
 801296a:	400a      	ands	r2, r1
 801296c:	6022      	str	r2, [r4, #0]
 801296e:	e7bd      	b.n	80128ec <_scanf_float+0x158>
 8012970:	21fd      	movs	r1, #253	@ 0xfd
 8012972:	1eea      	subs	r2, r5, #3
 8012974:	420a      	tst	r2, r1
 8012976:	d0df      	beq.n	8012938 <_scanf_float+0x1a4>
 8012978:	e73d      	b.n	80127f6 <_scanf_float+0x62>
 801297a:	2d02      	cmp	r5, #2
 801297c:	d000      	beq.n	8012980 <_scanf_float+0x1ec>
 801297e:	e73a      	b.n	80127f6 <_scanf_float+0x62>
 8012980:	2503      	movs	r5, #3
 8012982:	e7b3      	b.n	80128ec <_scanf_float+0x158>
 8012984:	2d06      	cmp	r5, #6
 8012986:	d000      	beq.n	801298a <_scanf_float+0x1f6>
 8012988:	e735      	b.n	80127f6 <_scanf_float+0x62>
 801298a:	2507      	movs	r5, #7
 801298c:	e7ae      	b.n	80128ec <_scanf_float+0x158>
 801298e:	6822      	ldr	r2, [r4, #0]
 8012990:	0591      	lsls	r1, r2, #22
 8012992:	d400      	bmi.n	8012996 <_scanf_float+0x202>
 8012994:	e72f      	b.n	80127f6 <_scanf_float+0x62>
 8012996:	4943      	ldr	r1, [pc, #268]	@ (8012aa4 <_scanf_float+0x310>)
 8012998:	400a      	ands	r2, r1
 801299a:	6022      	str	r2, [r4, #0]
 801299c:	9a01      	ldr	r2, [sp, #4]
 801299e:	9205      	str	r2, [sp, #20]
 80129a0:	e7a4      	b.n	80128ec <_scanf_float+0x158>
 80129a2:	21a0      	movs	r1, #160	@ 0xa0
 80129a4:	2080      	movs	r0, #128	@ 0x80
 80129a6:	6822      	ldr	r2, [r4, #0]
 80129a8:	00c9      	lsls	r1, r1, #3
 80129aa:	4011      	ands	r1, r2
 80129ac:	00c0      	lsls	r0, r0, #3
 80129ae:	4281      	cmp	r1, r0
 80129b0:	d006      	beq.n	80129c0 <_scanf_float+0x22c>
 80129b2:	4202      	tst	r2, r0
 80129b4:	d100      	bne.n	80129b8 <_scanf_float+0x224>
 80129b6:	e71e      	b.n	80127f6 <_scanf_float+0x62>
 80129b8:	9901      	ldr	r1, [sp, #4]
 80129ba:	2900      	cmp	r1, #0
 80129bc:	d100      	bne.n	80129c0 <_scanf_float+0x22c>
 80129be:	e0f0      	b.n	8012ba2 <_scanf_float+0x40e>
 80129c0:	0591      	lsls	r1, r2, #22
 80129c2:	d404      	bmi.n	80129ce <_scanf_float+0x23a>
 80129c4:	9901      	ldr	r1, [sp, #4]
 80129c6:	9805      	ldr	r0, [sp, #20]
 80129c8:	9709      	str	r7, [sp, #36]	@ 0x24
 80129ca:	1a09      	subs	r1, r1, r0
 80129cc:	9108      	str	r1, [sp, #32]
 80129ce:	4934      	ldr	r1, [pc, #208]	@ (8012aa0 <_scanf_float+0x30c>)
 80129d0:	400a      	ands	r2, r1
 80129d2:	21c0      	movs	r1, #192	@ 0xc0
 80129d4:	0049      	lsls	r1, r1, #1
 80129d6:	430a      	orrs	r2, r1
 80129d8:	6022      	str	r2, [r4, #0]
 80129da:	2200      	movs	r2, #0
 80129dc:	9201      	str	r2, [sp, #4]
 80129de:	e785      	b.n	80128ec <_scanf_float+0x158>
 80129e0:	2203      	movs	r2, #3
 80129e2:	e79f      	b.n	8012924 <_scanf_float+0x190>
 80129e4:	23c0      	movs	r3, #192	@ 0xc0
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	0031      	movs	r1, r6
 80129ea:	58e3      	ldr	r3, [r4, r3]
 80129ec:	9803      	ldr	r0, [sp, #12]
 80129ee:	4798      	blx	r3
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d100      	bne.n	80129f6 <_scanf_float+0x262>
 80129f4:	e6f1      	b.n	80127da <_scanf_float+0x46>
 80129f6:	e6fe      	b.n	80127f6 <_scanf_float+0x62>
 80129f8:	3f01      	subs	r7, #1
 80129fa:	5963      	ldr	r3, [r4, r5]
 80129fc:	0032      	movs	r2, r6
 80129fe:	7839      	ldrb	r1, [r7, #0]
 8012a00:	9803      	ldr	r0, [sp, #12]
 8012a02:	4798      	blx	r3
 8012a04:	6923      	ldr	r3, [r4, #16]
 8012a06:	3b01      	subs	r3, #1
 8012a08:	6123      	str	r3, [r4, #16]
 8012a0a:	e702      	b.n	8012812 <_scanf_float+0x7e>
 8012a0c:	1e6b      	subs	r3, r5, #1
 8012a0e:	2b06      	cmp	r3, #6
 8012a10:	d80e      	bhi.n	8012a30 <_scanf_float+0x29c>
 8012a12:	9702      	str	r7, [sp, #8]
 8012a14:	2d02      	cmp	r5, #2
 8012a16:	d920      	bls.n	8012a5a <_scanf_float+0x2c6>
 8012a18:	1beb      	subs	r3, r5, r7
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	9306      	str	r3, [sp, #24]
 8012a1e:	9b02      	ldr	r3, [sp, #8]
 8012a20:	9a06      	ldr	r2, [sp, #24]
 8012a22:	189b      	adds	r3, r3, r2
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	2b03      	cmp	r3, #3
 8012a28:	d127      	bne.n	8012a7a <_scanf_float+0x2e6>
 8012a2a:	3d03      	subs	r5, #3
 8012a2c:	b2ed      	uxtb	r5, r5
 8012a2e:	1b7f      	subs	r7, r7, r5
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	05da      	lsls	r2, r3, #23
 8012a34:	d553      	bpl.n	8012ade <_scanf_float+0x34a>
 8012a36:	055b      	lsls	r3, r3, #21
 8012a38:	d536      	bpl.n	8012aa8 <_scanf_float+0x314>
 8012a3a:	25be      	movs	r5, #190	@ 0xbe
 8012a3c:	006d      	lsls	r5, r5, #1
 8012a3e:	9b04      	ldr	r3, [sp, #16]
 8012a40:	429f      	cmp	r7, r3
 8012a42:	d800      	bhi.n	8012a46 <_scanf_float+0x2b2>
 8012a44:	e6e9      	b.n	801281a <_scanf_float+0x86>
 8012a46:	3f01      	subs	r7, #1
 8012a48:	5963      	ldr	r3, [r4, r5]
 8012a4a:	0032      	movs	r2, r6
 8012a4c:	7839      	ldrb	r1, [r7, #0]
 8012a4e:	9803      	ldr	r0, [sp, #12]
 8012a50:	4798      	blx	r3
 8012a52:	6923      	ldr	r3, [r4, #16]
 8012a54:	3b01      	subs	r3, #1
 8012a56:	6123      	str	r3, [r4, #16]
 8012a58:	e7f1      	b.n	8012a3e <_scanf_float+0x2aa>
 8012a5a:	25be      	movs	r5, #190	@ 0xbe
 8012a5c:	006d      	lsls	r5, r5, #1
 8012a5e:	9b04      	ldr	r3, [sp, #16]
 8012a60:	429f      	cmp	r7, r3
 8012a62:	d800      	bhi.n	8012a66 <_scanf_float+0x2d2>
 8012a64:	e6d9      	b.n	801281a <_scanf_float+0x86>
 8012a66:	3f01      	subs	r7, #1
 8012a68:	5963      	ldr	r3, [r4, r5]
 8012a6a:	0032      	movs	r2, r6
 8012a6c:	7839      	ldrb	r1, [r7, #0]
 8012a6e:	9803      	ldr	r0, [sp, #12]
 8012a70:	4798      	blx	r3
 8012a72:	6923      	ldr	r3, [r4, #16]
 8012a74:	3b01      	subs	r3, #1
 8012a76:	6123      	str	r3, [r4, #16]
 8012a78:	e7f1      	b.n	8012a5e <_scanf_float+0x2ca>
 8012a7a:	9b02      	ldr	r3, [sp, #8]
 8012a7c:	0032      	movs	r2, r6
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	7819      	ldrb	r1, [r3, #0]
 8012a82:	9302      	str	r3, [sp, #8]
 8012a84:	23be      	movs	r3, #190	@ 0xbe
 8012a86:	005b      	lsls	r3, r3, #1
 8012a88:	58e3      	ldr	r3, [r4, r3]
 8012a8a:	9803      	ldr	r0, [sp, #12]
 8012a8c:	4798      	blx	r3
 8012a8e:	6923      	ldr	r3, [r4, #16]
 8012a90:	3b01      	subs	r3, #1
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	e7c3      	b.n	8012a1e <_scanf_float+0x28a>
 8012a96:	46c0      	nop			@ (mov r8, r8)
 8012a98:	fffffeff 	.word	0xfffffeff
 8012a9c:	fffffe7f 	.word	0xfffffe7f
 8012aa0:	fffff87f 	.word	0xfffff87f
 8012aa4:	fffffd7f 	.word	0xfffffd7f
 8012aa8:	6923      	ldr	r3, [r4, #16]
 8012aaa:	1e7d      	subs	r5, r7, #1
 8012aac:	7829      	ldrb	r1, [r5, #0]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	6123      	str	r3, [r4, #16]
 8012ab2:	2965      	cmp	r1, #101	@ 0x65
 8012ab4:	d00c      	beq.n	8012ad0 <_scanf_float+0x33c>
 8012ab6:	2945      	cmp	r1, #69	@ 0x45
 8012ab8:	d00a      	beq.n	8012ad0 <_scanf_float+0x33c>
 8012aba:	23be      	movs	r3, #190	@ 0xbe
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	58e3      	ldr	r3, [r4, r3]
 8012ac0:	0032      	movs	r2, r6
 8012ac2:	9803      	ldr	r0, [sp, #12]
 8012ac4:	4798      	blx	r3
 8012ac6:	6923      	ldr	r3, [r4, #16]
 8012ac8:	1ebd      	subs	r5, r7, #2
 8012aca:	3b01      	subs	r3, #1
 8012acc:	7829      	ldrb	r1, [r5, #0]
 8012ace:	6123      	str	r3, [r4, #16]
 8012ad0:	23be      	movs	r3, #190	@ 0xbe
 8012ad2:	005b      	lsls	r3, r3, #1
 8012ad4:	0032      	movs	r2, r6
 8012ad6:	58e3      	ldr	r3, [r4, r3]
 8012ad8:	9803      	ldr	r0, [sp, #12]
 8012ada:	4798      	blx	r3
 8012adc:	002f      	movs	r7, r5
 8012ade:	6821      	ldr	r1, [r4, #0]
 8012ae0:	2310      	movs	r3, #16
 8012ae2:	000a      	movs	r2, r1
 8012ae4:	401a      	ands	r2, r3
 8012ae6:	4219      	tst	r1, r3
 8012ae8:	d001      	beq.n	8012aee <_scanf_float+0x35a>
 8012aea:	2000      	movs	r0, #0
 8012aec:	e696      	b.n	801281c <_scanf_float+0x88>
 8012aee:	21c0      	movs	r1, #192	@ 0xc0
 8012af0:	703a      	strb	r2, [r7, #0]
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	00c9      	lsls	r1, r1, #3
 8012af6:	400b      	ands	r3, r1
 8012af8:	2180      	movs	r1, #128	@ 0x80
 8012afa:	00c9      	lsls	r1, r1, #3
 8012afc:	428b      	cmp	r3, r1
 8012afe:	d11c      	bne.n	8012b3a <_scanf_float+0x3a6>
 8012b00:	9b05      	ldr	r3, [sp, #20]
 8012b02:	9a01      	ldr	r2, [sp, #4]
 8012b04:	9905      	ldr	r1, [sp, #20]
 8012b06:	1a9a      	subs	r2, r3, r2
 8012b08:	9b01      	ldr	r3, [sp, #4]
 8012b0a:	428b      	cmp	r3, r1
 8012b0c:	d121      	bne.n	8012b52 <_scanf_float+0x3be>
 8012b0e:	2200      	movs	r2, #0
 8012b10:	9904      	ldr	r1, [sp, #16]
 8012b12:	9803      	ldr	r0, [sp, #12]
 8012b14:	f002 fd40 	bl	8015598 <_strtod_r>
 8012b18:	9b07      	ldr	r3, [sp, #28]
 8012b1a:	6822      	ldr	r2, [r4, #0]
 8012b1c:	0006      	movs	r6, r0
 8012b1e:	000f      	movs	r7, r1
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	0791      	lsls	r1, r2, #30
 8012b24:	d522      	bpl.n	8012b6c <_scanf_float+0x3d8>
 8012b26:	9907      	ldr	r1, [sp, #28]
 8012b28:	1d1a      	adds	r2, r3, #4
 8012b2a:	600a      	str	r2, [r1, #0]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	601e      	str	r6, [r3, #0]
 8012b30:	605f      	str	r7, [r3, #4]
 8012b32:	68e3      	ldr	r3, [r4, #12]
 8012b34:	3301      	adds	r3, #1
 8012b36:	60e3      	str	r3, [r4, #12]
 8012b38:	e7d7      	b.n	8012aea <_scanf_float+0x356>
 8012b3a:	9b08      	ldr	r3, [sp, #32]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d0e6      	beq.n	8012b0e <_scanf_float+0x37a>
 8012b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b42:	9803      	ldr	r0, [sp, #12]
 8012b44:	1c59      	adds	r1, r3, #1
 8012b46:	230a      	movs	r3, #10
 8012b48:	f002 fdb8 	bl	80156bc <_strtol_r>
 8012b4c:	9b08      	ldr	r3, [sp, #32]
 8012b4e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012b50:	1ac2      	subs	r2, r0, r3
 8012b52:	0023      	movs	r3, r4
 8012b54:	3370      	adds	r3, #112	@ 0x70
 8012b56:	33ff      	adds	r3, #255	@ 0xff
 8012b58:	429f      	cmp	r7, r3
 8012b5a:	d302      	bcc.n	8012b62 <_scanf_float+0x3ce>
 8012b5c:	0027      	movs	r7, r4
 8012b5e:	376f      	adds	r7, #111	@ 0x6f
 8012b60:	37ff      	adds	r7, #255	@ 0xff
 8012b62:	0038      	movs	r0, r7
 8012b64:	4910      	ldr	r1, [pc, #64]	@ (8012ba8 <_scanf_float+0x414>)
 8012b66:	f000 f91b 	bl	8012da0 <siprintf>
 8012b6a:	e7d0      	b.n	8012b0e <_scanf_float+0x37a>
 8012b6c:	1d19      	adds	r1, r3, #4
 8012b6e:	0752      	lsls	r2, r2, #29
 8012b70:	d502      	bpl.n	8012b78 <_scanf_float+0x3e4>
 8012b72:	9a07      	ldr	r2, [sp, #28]
 8012b74:	6011      	str	r1, [r2, #0]
 8012b76:	e7d9      	b.n	8012b2c <_scanf_float+0x398>
 8012b78:	9a07      	ldr	r2, [sp, #28]
 8012b7a:	0030      	movs	r0, r6
 8012b7c:	6011      	str	r1, [r2, #0]
 8012b7e:	681d      	ldr	r5, [r3, #0]
 8012b80:	0032      	movs	r2, r6
 8012b82:	003b      	movs	r3, r7
 8012b84:	0039      	movs	r1, r7
 8012b86:	f7f0 fb5d 	bl	8003244 <__aeabi_dcmpun>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d004      	beq.n	8012b98 <_scanf_float+0x404>
 8012b8e:	4807      	ldr	r0, [pc, #28]	@ (8012bac <_scanf_float+0x418>)
 8012b90:	f7fe ff92 	bl	8011ab8 <nanf>
 8012b94:	6028      	str	r0, [r5, #0]
 8012b96:	e7cc      	b.n	8012b32 <_scanf_float+0x39e>
 8012b98:	0030      	movs	r0, r6
 8012b9a:	0039      	movs	r1, r7
 8012b9c:	f7f0 fc4a 	bl	8003434 <__aeabi_d2f>
 8012ba0:	e7f8      	b.n	8012b94 <_scanf_float+0x400>
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	9301      	str	r3, [sp, #4]
 8012ba6:	e62d      	b.n	8012804 <_scanf_float+0x70>
 8012ba8:	08017174 	.word	0x08017174
 8012bac:	0801750d 	.word	0x0801750d

08012bb0 <std>:
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	0004      	movs	r4, r0
 8012bb6:	6003      	str	r3, [r0, #0]
 8012bb8:	6043      	str	r3, [r0, #4]
 8012bba:	6083      	str	r3, [r0, #8]
 8012bbc:	8181      	strh	r1, [r0, #12]
 8012bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8012bc0:	81c2      	strh	r2, [r0, #14]
 8012bc2:	6103      	str	r3, [r0, #16]
 8012bc4:	6143      	str	r3, [r0, #20]
 8012bc6:	6183      	str	r3, [r0, #24]
 8012bc8:	0019      	movs	r1, r3
 8012bca:	2208      	movs	r2, #8
 8012bcc:	305c      	adds	r0, #92	@ 0x5c
 8012bce:	f000 f98b 	bl	8012ee8 <memset>
 8012bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8012c00 <std+0x50>)
 8012bd4:	6224      	str	r4, [r4, #32]
 8012bd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8012bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8012c04 <std+0x54>)
 8012bda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8012c08 <std+0x58>)
 8012bde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012be0:	4b0a      	ldr	r3, [pc, #40]	@ (8012c0c <std+0x5c>)
 8012be2:	6323      	str	r3, [r4, #48]	@ 0x30
 8012be4:	4b0a      	ldr	r3, [pc, #40]	@ (8012c10 <std+0x60>)
 8012be6:	429c      	cmp	r4, r3
 8012be8:	d005      	beq.n	8012bf6 <std+0x46>
 8012bea:	4b0a      	ldr	r3, [pc, #40]	@ (8012c14 <std+0x64>)
 8012bec:	429c      	cmp	r4, r3
 8012bee:	d002      	beq.n	8012bf6 <std+0x46>
 8012bf0:	4b09      	ldr	r3, [pc, #36]	@ (8012c18 <std+0x68>)
 8012bf2:	429c      	cmp	r4, r3
 8012bf4:	d103      	bne.n	8012bfe <std+0x4e>
 8012bf6:	0020      	movs	r0, r4
 8012bf8:	3058      	adds	r0, #88	@ 0x58
 8012bfa:	f000 fa59 	bl	80130b0 <__retarget_lock_init_recursive>
 8012bfe:	bd10      	pop	{r4, pc}
 8012c00:	08012de1 	.word	0x08012de1
 8012c04:	08012e09 	.word	0x08012e09
 8012c08:	08012e41 	.word	0x08012e41
 8012c0c:	08012e6d 	.word	0x08012e6d
 8012c10:	20007148 	.word	0x20007148
 8012c14:	200071b0 	.word	0x200071b0
 8012c18:	20007218 	.word	0x20007218

08012c1c <stdio_exit_handler>:
 8012c1c:	b510      	push	{r4, lr}
 8012c1e:	4a03      	ldr	r2, [pc, #12]	@ (8012c2c <stdio_exit_handler+0x10>)
 8012c20:	4903      	ldr	r1, [pc, #12]	@ (8012c30 <stdio_exit_handler+0x14>)
 8012c22:	4804      	ldr	r0, [pc, #16]	@ (8012c34 <stdio_exit_handler+0x18>)
 8012c24:	f000 f86c 	bl	8012d00 <_fwalk_sglue>
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	46c0      	nop			@ (mov r8, r8)
 8012c2c:	2000008c 	.word	0x2000008c
 8012c30:	08015a8d 	.word	0x08015a8d
 8012c34:	2000009c 	.word	0x2000009c

08012c38 <cleanup_stdio>:
 8012c38:	6841      	ldr	r1, [r0, #4]
 8012c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8012c68 <cleanup_stdio+0x30>)
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	0004      	movs	r4, r0
 8012c40:	4299      	cmp	r1, r3
 8012c42:	d001      	beq.n	8012c48 <cleanup_stdio+0x10>
 8012c44:	f002 ff22 	bl	8015a8c <_fflush_r>
 8012c48:	68a1      	ldr	r1, [r4, #8]
 8012c4a:	4b08      	ldr	r3, [pc, #32]	@ (8012c6c <cleanup_stdio+0x34>)
 8012c4c:	4299      	cmp	r1, r3
 8012c4e:	d002      	beq.n	8012c56 <cleanup_stdio+0x1e>
 8012c50:	0020      	movs	r0, r4
 8012c52:	f002 ff1b 	bl	8015a8c <_fflush_r>
 8012c56:	68e1      	ldr	r1, [r4, #12]
 8012c58:	4b05      	ldr	r3, [pc, #20]	@ (8012c70 <cleanup_stdio+0x38>)
 8012c5a:	4299      	cmp	r1, r3
 8012c5c:	d002      	beq.n	8012c64 <cleanup_stdio+0x2c>
 8012c5e:	0020      	movs	r0, r4
 8012c60:	f002 ff14 	bl	8015a8c <_fflush_r>
 8012c64:	bd10      	pop	{r4, pc}
 8012c66:	46c0      	nop			@ (mov r8, r8)
 8012c68:	20007148 	.word	0x20007148
 8012c6c:	200071b0 	.word	0x200071b0
 8012c70:	20007218 	.word	0x20007218

08012c74 <global_stdio_init.part.0>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	4b09      	ldr	r3, [pc, #36]	@ (8012c9c <global_stdio_init.part.0+0x28>)
 8012c78:	4a09      	ldr	r2, [pc, #36]	@ (8012ca0 <global_stdio_init.part.0+0x2c>)
 8012c7a:	2104      	movs	r1, #4
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	4809      	ldr	r0, [pc, #36]	@ (8012ca4 <global_stdio_init.part.0+0x30>)
 8012c80:	2200      	movs	r2, #0
 8012c82:	f7ff ff95 	bl	8012bb0 <std>
 8012c86:	2201      	movs	r2, #1
 8012c88:	2109      	movs	r1, #9
 8012c8a:	4807      	ldr	r0, [pc, #28]	@ (8012ca8 <global_stdio_init.part.0+0x34>)
 8012c8c:	f7ff ff90 	bl	8012bb0 <std>
 8012c90:	2202      	movs	r2, #2
 8012c92:	2112      	movs	r1, #18
 8012c94:	4805      	ldr	r0, [pc, #20]	@ (8012cac <global_stdio_init.part.0+0x38>)
 8012c96:	f7ff ff8b 	bl	8012bb0 <std>
 8012c9a:	bd10      	pop	{r4, pc}
 8012c9c:	20007280 	.word	0x20007280
 8012ca0:	08012c1d 	.word	0x08012c1d
 8012ca4:	20007148 	.word	0x20007148
 8012ca8:	200071b0 	.word	0x200071b0
 8012cac:	20007218 	.word	0x20007218

08012cb0 <__sfp_lock_acquire>:
 8012cb0:	b510      	push	{r4, lr}
 8012cb2:	4802      	ldr	r0, [pc, #8]	@ (8012cbc <__sfp_lock_acquire+0xc>)
 8012cb4:	f000 f9fd 	bl	80130b2 <__retarget_lock_acquire_recursive>
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	46c0      	nop			@ (mov r8, r8)
 8012cbc:	20007289 	.word	0x20007289

08012cc0 <__sfp_lock_release>:
 8012cc0:	b510      	push	{r4, lr}
 8012cc2:	4802      	ldr	r0, [pc, #8]	@ (8012ccc <__sfp_lock_release+0xc>)
 8012cc4:	f000 f9f6 	bl	80130b4 <__retarget_lock_release_recursive>
 8012cc8:	bd10      	pop	{r4, pc}
 8012cca:	46c0      	nop			@ (mov r8, r8)
 8012ccc:	20007289 	.word	0x20007289

08012cd0 <__sinit>:
 8012cd0:	b510      	push	{r4, lr}
 8012cd2:	0004      	movs	r4, r0
 8012cd4:	f7ff ffec 	bl	8012cb0 <__sfp_lock_acquire>
 8012cd8:	6a23      	ldr	r3, [r4, #32]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d002      	beq.n	8012ce4 <__sinit+0x14>
 8012cde:	f7ff ffef 	bl	8012cc0 <__sfp_lock_release>
 8012ce2:	bd10      	pop	{r4, pc}
 8012ce4:	4b04      	ldr	r3, [pc, #16]	@ (8012cf8 <__sinit+0x28>)
 8012ce6:	6223      	str	r3, [r4, #32]
 8012ce8:	4b04      	ldr	r3, [pc, #16]	@ (8012cfc <__sinit+0x2c>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d1f6      	bne.n	8012cde <__sinit+0xe>
 8012cf0:	f7ff ffc0 	bl	8012c74 <global_stdio_init.part.0>
 8012cf4:	e7f3      	b.n	8012cde <__sinit+0xe>
 8012cf6:	46c0      	nop			@ (mov r8, r8)
 8012cf8:	08012c39 	.word	0x08012c39
 8012cfc:	20007280 	.word	0x20007280

08012d00 <_fwalk_sglue>:
 8012d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d02:	0014      	movs	r4, r2
 8012d04:	2600      	movs	r6, #0
 8012d06:	9000      	str	r0, [sp, #0]
 8012d08:	9101      	str	r1, [sp, #4]
 8012d0a:	68a5      	ldr	r5, [r4, #8]
 8012d0c:	6867      	ldr	r7, [r4, #4]
 8012d0e:	3f01      	subs	r7, #1
 8012d10:	d504      	bpl.n	8012d1c <_fwalk_sglue+0x1c>
 8012d12:	6824      	ldr	r4, [r4, #0]
 8012d14:	2c00      	cmp	r4, #0
 8012d16:	d1f8      	bne.n	8012d0a <_fwalk_sglue+0xa>
 8012d18:	0030      	movs	r0, r6
 8012d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012d1c:	89ab      	ldrh	r3, [r5, #12]
 8012d1e:	2b01      	cmp	r3, #1
 8012d20:	d908      	bls.n	8012d34 <_fwalk_sglue+0x34>
 8012d22:	220e      	movs	r2, #14
 8012d24:	5eab      	ldrsh	r3, [r5, r2]
 8012d26:	3301      	adds	r3, #1
 8012d28:	d004      	beq.n	8012d34 <_fwalk_sglue+0x34>
 8012d2a:	0029      	movs	r1, r5
 8012d2c:	9800      	ldr	r0, [sp, #0]
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	4798      	blx	r3
 8012d32:	4306      	orrs	r6, r0
 8012d34:	3568      	adds	r5, #104	@ 0x68
 8012d36:	e7ea      	b.n	8012d0e <_fwalk_sglue+0xe>

08012d38 <sniprintf>:
 8012d38:	b40c      	push	{r2, r3}
 8012d3a:	b530      	push	{r4, r5, lr}
 8012d3c:	4b17      	ldr	r3, [pc, #92]	@ (8012d9c <sniprintf+0x64>)
 8012d3e:	000c      	movs	r4, r1
 8012d40:	681d      	ldr	r5, [r3, #0]
 8012d42:	b09d      	sub	sp, #116	@ 0x74
 8012d44:	2900      	cmp	r1, #0
 8012d46:	da08      	bge.n	8012d5a <sniprintf+0x22>
 8012d48:	238b      	movs	r3, #139	@ 0x8b
 8012d4a:	2001      	movs	r0, #1
 8012d4c:	602b      	str	r3, [r5, #0]
 8012d4e:	4240      	negs	r0, r0
 8012d50:	b01d      	add	sp, #116	@ 0x74
 8012d52:	bc30      	pop	{r4, r5}
 8012d54:	bc08      	pop	{r3}
 8012d56:	b002      	add	sp, #8
 8012d58:	4718      	bx	r3
 8012d5a:	2382      	movs	r3, #130	@ 0x82
 8012d5c:	466a      	mov	r2, sp
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	8293      	strh	r3, [r2, #20]
 8012d62:	2300      	movs	r3, #0
 8012d64:	9002      	str	r0, [sp, #8]
 8012d66:	9006      	str	r0, [sp, #24]
 8012d68:	4299      	cmp	r1, r3
 8012d6a:	d000      	beq.n	8012d6e <sniprintf+0x36>
 8012d6c:	1e4b      	subs	r3, r1, #1
 8012d6e:	9304      	str	r3, [sp, #16]
 8012d70:	9307      	str	r3, [sp, #28]
 8012d72:	2301      	movs	r3, #1
 8012d74:	466a      	mov	r2, sp
 8012d76:	425b      	negs	r3, r3
 8012d78:	82d3      	strh	r3, [r2, #22]
 8012d7a:	0028      	movs	r0, r5
 8012d7c:	ab21      	add	r3, sp, #132	@ 0x84
 8012d7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012d80:	a902      	add	r1, sp, #8
 8012d82:	9301      	str	r3, [sp, #4]
 8012d84:	f002 fcfe 	bl	8015784 <_svfiprintf_r>
 8012d88:	1c43      	adds	r3, r0, #1
 8012d8a:	da01      	bge.n	8012d90 <sniprintf+0x58>
 8012d8c:	238b      	movs	r3, #139	@ 0x8b
 8012d8e:	602b      	str	r3, [r5, #0]
 8012d90:	2c00      	cmp	r4, #0
 8012d92:	d0dd      	beq.n	8012d50 <sniprintf+0x18>
 8012d94:	2200      	movs	r2, #0
 8012d96:	9b02      	ldr	r3, [sp, #8]
 8012d98:	701a      	strb	r2, [r3, #0]
 8012d9a:	e7d9      	b.n	8012d50 <sniprintf+0x18>
 8012d9c:	20000098 	.word	0x20000098

08012da0 <siprintf>:
 8012da0:	b40e      	push	{r1, r2, r3}
 8012da2:	b500      	push	{lr}
 8012da4:	490b      	ldr	r1, [pc, #44]	@ (8012dd4 <siprintf+0x34>)
 8012da6:	b09c      	sub	sp, #112	@ 0x70
 8012da8:	ab1d      	add	r3, sp, #116	@ 0x74
 8012daa:	9002      	str	r0, [sp, #8]
 8012dac:	9006      	str	r0, [sp, #24]
 8012dae:	9107      	str	r1, [sp, #28]
 8012db0:	9104      	str	r1, [sp, #16]
 8012db2:	4809      	ldr	r0, [pc, #36]	@ (8012dd8 <siprintf+0x38>)
 8012db4:	4909      	ldr	r1, [pc, #36]	@ (8012ddc <siprintf+0x3c>)
 8012db6:	cb04      	ldmia	r3!, {r2}
 8012db8:	9105      	str	r1, [sp, #20]
 8012dba:	6800      	ldr	r0, [r0, #0]
 8012dbc:	a902      	add	r1, sp, #8
 8012dbe:	9301      	str	r3, [sp, #4]
 8012dc0:	f002 fce0 	bl	8015784 <_svfiprintf_r>
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	9b02      	ldr	r3, [sp, #8]
 8012dc8:	701a      	strb	r2, [r3, #0]
 8012dca:	b01c      	add	sp, #112	@ 0x70
 8012dcc:	bc08      	pop	{r3}
 8012dce:	b003      	add	sp, #12
 8012dd0:	4718      	bx	r3
 8012dd2:	46c0      	nop			@ (mov r8, r8)
 8012dd4:	7fffffff 	.word	0x7fffffff
 8012dd8:	20000098 	.word	0x20000098
 8012ddc:	ffff0208 	.word	0xffff0208

08012de0 <__sread>:
 8012de0:	b570      	push	{r4, r5, r6, lr}
 8012de2:	000c      	movs	r4, r1
 8012de4:	250e      	movs	r5, #14
 8012de6:	5f49      	ldrsh	r1, [r1, r5]
 8012de8:	f000 f910 	bl	801300c <_read_r>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	db03      	blt.n	8012df8 <__sread+0x18>
 8012df0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012df2:	181b      	adds	r3, r3, r0
 8012df4:	6563      	str	r3, [r4, #84]	@ 0x54
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	4a02      	ldr	r2, [pc, #8]	@ (8012e04 <__sread+0x24>)
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	81a3      	strh	r3, [r4, #12]
 8012e00:	e7f9      	b.n	8012df6 <__sread+0x16>
 8012e02:	46c0      	nop			@ (mov r8, r8)
 8012e04:	ffffefff 	.word	0xffffefff

08012e08 <__swrite>:
 8012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0a:	001f      	movs	r7, r3
 8012e0c:	898b      	ldrh	r3, [r1, #12]
 8012e0e:	0005      	movs	r5, r0
 8012e10:	000c      	movs	r4, r1
 8012e12:	0016      	movs	r6, r2
 8012e14:	05db      	lsls	r3, r3, #23
 8012e16:	d505      	bpl.n	8012e24 <__swrite+0x1c>
 8012e18:	230e      	movs	r3, #14
 8012e1a:	5ec9      	ldrsh	r1, [r1, r3]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	2302      	movs	r3, #2
 8012e20:	f000 f8e0 	bl	8012fe4 <_lseek_r>
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	4a05      	ldr	r2, [pc, #20]	@ (8012e3c <__swrite+0x34>)
 8012e28:	0028      	movs	r0, r5
 8012e2a:	4013      	ands	r3, r2
 8012e2c:	81a3      	strh	r3, [r4, #12]
 8012e2e:	0032      	movs	r2, r6
 8012e30:	230e      	movs	r3, #14
 8012e32:	5ee1      	ldrsh	r1, [r4, r3]
 8012e34:	003b      	movs	r3, r7
 8012e36:	f000 f8fd 	bl	8013034 <_write_r>
 8012e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e3c:	ffffefff 	.word	0xffffefff

08012e40 <__sseek>:
 8012e40:	b570      	push	{r4, r5, r6, lr}
 8012e42:	000c      	movs	r4, r1
 8012e44:	250e      	movs	r5, #14
 8012e46:	5f49      	ldrsh	r1, [r1, r5]
 8012e48:	f000 f8cc 	bl	8012fe4 <_lseek_r>
 8012e4c:	89a3      	ldrh	r3, [r4, #12]
 8012e4e:	1c42      	adds	r2, r0, #1
 8012e50:	d103      	bne.n	8012e5a <__sseek+0x1a>
 8012e52:	4a05      	ldr	r2, [pc, #20]	@ (8012e68 <__sseek+0x28>)
 8012e54:	4013      	ands	r3, r2
 8012e56:	81a3      	strh	r3, [r4, #12]
 8012e58:	bd70      	pop	{r4, r5, r6, pc}
 8012e5a:	2280      	movs	r2, #128	@ 0x80
 8012e5c:	0152      	lsls	r2, r2, #5
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	81a3      	strh	r3, [r4, #12]
 8012e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e64:	e7f8      	b.n	8012e58 <__sseek+0x18>
 8012e66:	46c0      	nop			@ (mov r8, r8)
 8012e68:	ffffefff 	.word	0xffffefff

08012e6c <__sclose>:
 8012e6c:	b510      	push	{r4, lr}
 8012e6e:	230e      	movs	r3, #14
 8012e70:	5ec9      	ldrsh	r1, [r1, r3]
 8012e72:	f000 f845 	bl	8012f00 <_close_r>
 8012e76:	bd10      	pop	{r4, pc}

08012e78 <_vsniprintf_r>:
 8012e78:	b530      	push	{r4, r5, lr}
 8012e7a:	0014      	movs	r4, r2
 8012e7c:	0005      	movs	r5, r0
 8012e7e:	001a      	movs	r2, r3
 8012e80:	b09b      	sub	sp, #108	@ 0x6c
 8012e82:	2c00      	cmp	r4, #0
 8012e84:	da05      	bge.n	8012e92 <_vsniprintf_r+0x1a>
 8012e86:	238b      	movs	r3, #139	@ 0x8b
 8012e88:	6003      	str	r3, [r0, #0]
 8012e8a:	2001      	movs	r0, #1
 8012e8c:	4240      	negs	r0, r0
 8012e8e:	b01b      	add	sp, #108	@ 0x6c
 8012e90:	bd30      	pop	{r4, r5, pc}
 8012e92:	2382      	movs	r3, #130	@ 0x82
 8012e94:	4668      	mov	r0, sp
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	8183      	strh	r3, [r0, #12]
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	9100      	str	r1, [sp, #0]
 8012e9e:	9104      	str	r1, [sp, #16]
 8012ea0:	429c      	cmp	r4, r3
 8012ea2:	d000      	beq.n	8012ea6 <_vsniprintf_r+0x2e>
 8012ea4:	1e63      	subs	r3, r4, #1
 8012ea6:	9302      	str	r3, [sp, #8]
 8012ea8:	9305      	str	r3, [sp, #20]
 8012eaa:	2301      	movs	r3, #1
 8012eac:	4669      	mov	r1, sp
 8012eae:	425b      	negs	r3, r3
 8012eb0:	81cb      	strh	r3, [r1, #14]
 8012eb2:	0028      	movs	r0, r5
 8012eb4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012eb6:	f002 fc65 	bl	8015784 <_svfiprintf_r>
 8012eba:	1c43      	adds	r3, r0, #1
 8012ebc:	da01      	bge.n	8012ec2 <_vsniprintf_r+0x4a>
 8012ebe:	238b      	movs	r3, #139	@ 0x8b
 8012ec0:	602b      	str	r3, [r5, #0]
 8012ec2:	2c00      	cmp	r4, #0
 8012ec4:	d0e3      	beq.n	8012e8e <_vsniprintf_r+0x16>
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	9b00      	ldr	r3, [sp, #0]
 8012eca:	701a      	strb	r2, [r3, #0]
 8012ecc:	e7df      	b.n	8012e8e <_vsniprintf_r+0x16>
	...

08012ed0 <vsniprintf>:
 8012ed0:	b513      	push	{r0, r1, r4, lr}
 8012ed2:	4c04      	ldr	r4, [pc, #16]	@ (8012ee4 <vsniprintf+0x14>)
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	0013      	movs	r3, r2
 8012ed8:	000a      	movs	r2, r1
 8012eda:	0001      	movs	r1, r0
 8012edc:	6820      	ldr	r0, [r4, #0]
 8012ede:	f7ff ffcb 	bl	8012e78 <_vsniprintf_r>
 8012ee2:	bd16      	pop	{r1, r2, r4, pc}
 8012ee4:	20000098 	.word	0x20000098

08012ee8 <memset>:
 8012ee8:	0003      	movs	r3, r0
 8012eea:	1882      	adds	r2, r0, r2
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d100      	bne.n	8012ef2 <memset+0xa>
 8012ef0:	4770      	bx	lr
 8012ef2:	7019      	strb	r1, [r3, #0]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	e7f9      	b.n	8012eec <memset+0x4>

08012ef8 <_localeconv_r>:
 8012ef8:	4800      	ldr	r0, [pc, #0]	@ (8012efc <_localeconv_r+0x4>)
 8012efa:	4770      	bx	lr
 8012efc:	200001d8 	.word	0x200001d8

08012f00 <_close_r>:
 8012f00:	2300      	movs	r3, #0
 8012f02:	b570      	push	{r4, r5, r6, lr}
 8012f04:	4d06      	ldr	r5, [pc, #24]	@ (8012f20 <_close_r+0x20>)
 8012f06:	0004      	movs	r4, r0
 8012f08:	0008      	movs	r0, r1
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	f7f4 fb7c 	bl	8007608 <_close>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d103      	bne.n	8012f1c <_close_r+0x1c>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d000      	beq.n	8012f1c <_close_r+0x1c>
 8012f1a:	6023      	str	r3, [r4, #0]
 8012f1c:	bd70      	pop	{r4, r5, r6, pc}
 8012f1e:	46c0      	nop			@ (mov r8, r8)
 8012f20:	20007284 	.word	0x20007284

08012f24 <_reclaim_reent>:
 8012f24:	4b2e      	ldr	r3, [pc, #184]	@ (8012fe0 <_reclaim_reent+0xbc>)
 8012f26:	b570      	push	{r4, r5, r6, lr}
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	0004      	movs	r4, r0
 8012f2c:	4283      	cmp	r3, r0
 8012f2e:	d04f      	beq.n	8012fd0 <_reclaim_reent+0xac>
 8012f30:	69c3      	ldr	r3, [r0, #28]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d017      	beq.n	8012f66 <_reclaim_reent+0x42>
 8012f36:	68db      	ldr	r3, [r3, #12]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d00d      	beq.n	8012f58 <_reclaim_reent+0x34>
 8012f3c:	2500      	movs	r5, #0
 8012f3e:	69e3      	ldr	r3, [r4, #28]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	5959      	ldr	r1, [r3, r5]
 8012f44:	2900      	cmp	r1, #0
 8012f46:	d144      	bne.n	8012fd2 <_reclaim_reent+0xae>
 8012f48:	3504      	adds	r5, #4
 8012f4a:	2d80      	cmp	r5, #128	@ 0x80
 8012f4c:	d1f7      	bne.n	8012f3e <_reclaim_reent+0x1a>
 8012f4e:	69e3      	ldr	r3, [r4, #28]
 8012f50:	0020      	movs	r0, r4
 8012f52:	68d9      	ldr	r1, [r3, #12]
 8012f54:	f000 ff46 	bl	8013de4 <_free_r>
 8012f58:	69e3      	ldr	r3, [r4, #28]
 8012f5a:	6819      	ldr	r1, [r3, #0]
 8012f5c:	2900      	cmp	r1, #0
 8012f5e:	d002      	beq.n	8012f66 <_reclaim_reent+0x42>
 8012f60:	0020      	movs	r0, r4
 8012f62:	f000 ff3f 	bl	8013de4 <_free_r>
 8012f66:	6961      	ldr	r1, [r4, #20]
 8012f68:	2900      	cmp	r1, #0
 8012f6a:	d002      	beq.n	8012f72 <_reclaim_reent+0x4e>
 8012f6c:	0020      	movs	r0, r4
 8012f6e:	f000 ff39 	bl	8013de4 <_free_r>
 8012f72:	69e1      	ldr	r1, [r4, #28]
 8012f74:	2900      	cmp	r1, #0
 8012f76:	d002      	beq.n	8012f7e <_reclaim_reent+0x5a>
 8012f78:	0020      	movs	r0, r4
 8012f7a:	f000 ff33 	bl	8013de4 <_free_r>
 8012f7e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012f80:	2900      	cmp	r1, #0
 8012f82:	d002      	beq.n	8012f8a <_reclaim_reent+0x66>
 8012f84:	0020      	movs	r0, r4
 8012f86:	f000 ff2d 	bl	8013de4 <_free_r>
 8012f8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	d002      	beq.n	8012f96 <_reclaim_reent+0x72>
 8012f90:	0020      	movs	r0, r4
 8012f92:	f000 ff27 	bl	8013de4 <_free_r>
 8012f96:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012f98:	2900      	cmp	r1, #0
 8012f9a:	d002      	beq.n	8012fa2 <_reclaim_reent+0x7e>
 8012f9c:	0020      	movs	r0, r4
 8012f9e:	f000 ff21 	bl	8013de4 <_free_r>
 8012fa2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012fa4:	2900      	cmp	r1, #0
 8012fa6:	d002      	beq.n	8012fae <_reclaim_reent+0x8a>
 8012fa8:	0020      	movs	r0, r4
 8012faa:	f000 ff1b 	bl	8013de4 <_free_r>
 8012fae:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012fb0:	2900      	cmp	r1, #0
 8012fb2:	d002      	beq.n	8012fba <_reclaim_reent+0x96>
 8012fb4:	0020      	movs	r0, r4
 8012fb6:	f000 ff15 	bl	8013de4 <_free_r>
 8012fba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012fbc:	2900      	cmp	r1, #0
 8012fbe:	d002      	beq.n	8012fc6 <_reclaim_reent+0xa2>
 8012fc0:	0020      	movs	r0, r4
 8012fc2:	f000 ff0f 	bl	8013de4 <_free_r>
 8012fc6:	6a23      	ldr	r3, [r4, #32]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d001      	beq.n	8012fd0 <_reclaim_reent+0xac>
 8012fcc:	0020      	movs	r0, r4
 8012fce:	4798      	blx	r3
 8012fd0:	bd70      	pop	{r4, r5, r6, pc}
 8012fd2:	680e      	ldr	r6, [r1, #0]
 8012fd4:	0020      	movs	r0, r4
 8012fd6:	f000 ff05 	bl	8013de4 <_free_r>
 8012fda:	0031      	movs	r1, r6
 8012fdc:	e7b2      	b.n	8012f44 <_reclaim_reent+0x20>
 8012fde:	46c0      	nop			@ (mov r8, r8)
 8012fe0:	20000098 	.word	0x20000098

08012fe4 <_lseek_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	0004      	movs	r4, r0
 8012fe8:	0008      	movs	r0, r1
 8012fea:	0011      	movs	r1, r2
 8012fec:	001a      	movs	r2, r3
 8012fee:	2300      	movs	r3, #0
 8012ff0:	4d05      	ldr	r5, [pc, #20]	@ (8013008 <_lseek_r+0x24>)
 8012ff2:	602b      	str	r3, [r5, #0]
 8012ff4:	f7f4 fb29 	bl	800764a <_lseek>
 8012ff8:	1c43      	adds	r3, r0, #1
 8012ffa:	d103      	bne.n	8013004 <_lseek_r+0x20>
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d000      	beq.n	8013004 <_lseek_r+0x20>
 8013002:	6023      	str	r3, [r4, #0]
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	46c0      	nop			@ (mov r8, r8)
 8013008:	20007284 	.word	0x20007284

0801300c <_read_r>:
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	0004      	movs	r4, r0
 8013010:	0008      	movs	r0, r1
 8013012:	0011      	movs	r1, r2
 8013014:	001a      	movs	r2, r3
 8013016:	2300      	movs	r3, #0
 8013018:	4d05      	ldr	r5, [pc, #20]	@ (8013030 <_read_r+0x24>)
 801301a:	602b      	str	r3, [r5, #0]
 801301c:	f7f4 fabb 	bl	8007596 <_read>
 8013020:	1c43      	adds	r3, r0, #1
 8013022:	d103      	bne.n	801302c <_read_r+0x20>
 8013024:	682b      	ldr	r3, [r5, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d000      	beq.n	801302c <_read_r+0x20>
 801302a:	6023      	str	r3, [r4, #0]
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	46c0      	nop			@ (mov r8, r8)
 8013030:	20007284 	.word	0x20007284

08013034 <_write_r>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	0004      	movs	r4, r0
 8013038:	0008      	movs	r0, r1
 801303a:	0011      	movs	r1, r2
 801303c:	001a      	movs	r2, r3
 801303e:	2300      	movs	r3, #0
 8013040:	4d05      	ldr	r5, [pc, #20]	@ (8013058 <_write_r+0x24>)
 8013042:	602b      	str	r3, [r5, #0]
 8013044:	f7f4 fac4 	bl	80075d0 <_write>
 8013048:	1c43      	adds	r3, r0, #1
 801304a:	d103      	bne.n	8013054 <_write_r+0x20>
 801304c:	682b      	ldr	r3, [r5, #0]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d000      	beq.n	8013054 <_write_r+0x20>
 8013052:	6023      	str	r3, [r4, #0]
 8013054:	bd70      	pop	{r4, r5, r6, pc}
 8013056:	46c0      	nop			@ (mov r8, r8)
 8013058:	20007284 	.word	0x20007284

0801305c <__errno>:
 801305c:	4b01      	ldr	r3, [pc, #4]	@ (8013064 <__errno+0x8>)
 801305e:	6818      	ldr	r0, [r3, #0]
 8013060:	4770      	bx	lr
 8013062:	46c0      	nop			@ (mov r8, r8)
 8013064:	20000098 	.word	0x20000098

08013068 <__libc_init_array>:
 8013068:	b570      	push	{r4, r5, r6, lr}
 801306a:	2600      	movs	r6, #0
 801306c:	4c0c      	ldr	r4, [pc, #48]	@ (80130a0 <__libc_init_array+0x38>)
 801306e:	4d0d      	ldr	r5, [pc, #52]	@ (80130a4 <__libc_init_array+0x3c>)
 8013070:	1b64      	subs	r4, r4, r5
 8013072:	10a4      	asrs	r4, r4, #2
 8013074:	42a6      	cmp	r6, r4
 8013076:	d109      	bne.n	801308c <__libc_init_array+0x24>
 8013078:	2600      	movs	r6, #0
 801307a:	f003 fc3f 	bl	80168fc <_init>
 801307e:	4c0a      	ldr	r4, [pc, #40]	@ (80130a8 <__libc_init_array+0x40>)
 8013080:	4d0a      	ldr	r5, [pc, #40]	@ (80130ac <__libc_init_array+0x44>)
 8013082:	1b64      	subs	r4, r4, r5
 8013084:	10a4      	asrs	r4, r4, #2
 8013086:	42a6      	cmp	r6, r4
 8013088:	d105      	bne.n	8013096 <__libc_init_array+0x2e>
 801308a:	bd70      	pop	{r4, r5, r6, pc}
 801308c:	00b3      	lsls	r3, r6, #2
 801308e:	58eb      	ldr	r3, [r5, r3]
 8013090:	4798      	blx	r3
 8013092:	3601      	adds	r6, #1
 8013094:	e7ee      	b.n	8013074 <__libc_init_array+0xc>
 8013096:	00b3      	lsls	r3, r6, #2
 8013098:	58eb      	ldr	r3, [r5, r3]
 801309a:	4798      	blx	r3
 801309c:	3601      	adds	r6, #1
 801309e:	e7f2      	b.n	8013086 <__libc_init_array+0x1e>
 80130a0:	08017578 	.word	0x08017578
 80130a4:	08017578 	.word	0x08017578
 80130a8:	08017580 	.word	0x08017580
 80130ac:	08017578 	.word	0x08017578

080130b0 <__retarget_lock_init_recursive>:
 80130b0:	4770      	bx	lr

080130b2 <__retarget_lock_acquire_recursive>:
 80130b2:	4770      	bx	lr

080130b4 <__retarget_lock_release_recursive>:
 80130b4:	4770      	bx	lr

080130b6 <memchr>:
 80130b6:	b2c9      	uxtb	r1, r1
 80130b8:	1882      	adds	r2, r0, r2
 80130ba:	4290      	cmp	r0, r2
 80130bc:	d101      	bne.n	80130c2 <memchr+0xc>
 80130be:	2000      	movs	r0, #0
 80130c0:	4770      	bx	lr
 80130c2:	7803      	ldrb	r3, [r0, #0]
 80130c4:	428b      	cmp	r3, r1
 80130c6:	d0fb      	beq.n	80130c0 <memchr+0xa>
 80130c8:	3001      	adds	r0, #1
 80130ca:	e7f6      	b.n	80130ba <memchr+0x4>

080130cc <memcpy>:
 80130cc:	2300      	movs	r3, #0
 80130ce:	b510      	push	{r4, lr}
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d100      	bne.n	80130d6 <memcpy+0xa>
 80130d4:	bd10      	pop	{r4, pc}
 80130d6:	5ccc      	ldrb	r4, [r1, r3]
 80130d8:	54c4      	strb	r4, [r0, r3]
 80130da:	3301      	adds	r3, #1
 80130dc:	e7f8      	b.n	80130d0 <memcpy+0x4>

080130de <quorem>:
 80130de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130e0:	6902      	ldr	r2, [r0, #16]
 80130e2:	690f      	ldr	r7, [r1, #16]
 80130e4:	b087      	sub	sp, #28
 80130e6:	0006      	movs	r6, r0
 80130e8:	000b      	movs	r3, r1
 80130ea:	2000      	movs	r0, #0
 80130ec:	9102      	str	r1, [sp, #8]
 80130ee:	42ba      	cmp	r2, r7
 80130f0:	db6d      	blt.n	80131ce <quorem+0xf0>
 80130f2:	3f01      	subs	r7, #1
 80130f4:	00bc      	lsls	r4, r7, #2
 80130f6:	3314      	adds	r3, #20
 80130f8:	9305      	str	r3, [sp, #20]
 80130fa:	191b      	adds	r3, r3, r4
 80130fc:	9303      	str	r3, [sp, #12]
 80130fe:	0033      	movs	r3, r6
 8013100:	3314      	adds	r3, #20
 8013102:	191c      	adds	r4, r3, r4
 8013104:	9301      	str	r3, [sp, #4]
 8013106:	6823      	ldr	r3, [r4, #0]
 8013108:	9304      	str	r3, [sp, #16]
 801310a:	9b03      	ldr	r3, [sp, #12]
 801310c:	9804      	ldr	r0, [sp, #16]
 801310e:	681d      	ldr	r5, [r3, #0]
 8013110:	3501      	adds	r5, #1
 8013112:	0029      	movs	r1, r5
 8013114:	f7ed f814 	bl	8000140 <__udivsi3>
 8013118:	9b04      	ldr	r3, [sp, #16]
 801311a:	9000      	str	r0, [sp, #0]
 801311c:	42ab      	cmp	r3, r5
 801311e:	d32b      	bcc.n	8013178 <quorem+0x9a>
 8013120:	9b05      	ldr	r3, [sp, #20]
 8013122:	9d01      	ldr	r5, [sp, #4]
 8013124:	469c      	mov	ip, r3
 8013126:	2300      	movs	r3, #0
 8013128:	9305      	str	r3, [sp, #20]
 801312a:	9304      	str	r3, [sp, #16]
 801312c:	4662      	mov	r2, ip
 801312e:	ca08      	ldmia	r2!, {r3}
 8013130:	6828      	ldr	r0, [r5, #0]
 8013132:	4694      	mov	ip, r2
 8013134:	9a00      	ldr	r2, [sp, #0]
 8013136:	b299      	uxth	r1, r3
 8013138:	4351      	muls	r1, r2
 801313a:	9a05      	ldr	r2, [sp, #20]
 801313c:	0c1b      	lsrs	r3, r3, #16
 801313e:	1889      	adds	r1, r1, r2
 8013140:	9a00      	ldr	r2, [sp, #0]
 8013142:	4353      	muls	r3, r2
 8013144:	0c0a      	lsrs	r2, r1, #16
 8013146:	189b      	adds	r3, r3, r2
 8013148:	0c1a      	lsrs	r2, r3, #16
 801314a:	b289      	uxth	r1, r1
 801314c:	9205      	str	r2, [sp, #20]
 801314e:	b282      	uxth	r2, r0
 8013150:	1a52      	subs	r2, r2, r1
 8013152:	9904      	ldr	r1, [sp, #16]
 8013154:	0c00      	lsrs	r0, r0, #16
 8013156:	1852      	adds	r2, r2, r1
 8013158:	b29b      	uxth	r3, r3
 801315a:	1411      	asrs	r1, r2, #16
 801315c:	1ac3      	subs	r3, r0, r3
 801315e:	185b      	adds	r3, r3, r1
 8013160:	1419      	asrs	r1, r3, #16
 8013162:	b292      	uxth	r2, r2
 8013164:	041b      	lsls	r3, r3, #16
 8013166:	431a      	orrs	r2, r3
 8013168:	9b03      	ldr	r3, [sp, #12]
 801316a:	9104      	str	r1, [sp, #16]
 801316c:	c504      	stmia	r5!, {r2}
 801316e:	4563      	cmp	r3, ip
 8013170:	d2dc      	bcs.n	801312c <quorem+0x4e>
 8013172:	6823      	ldr	r3, [r4, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d030      	beq.n	80131da <quorem+0xfc>
 8013178:	0030      	movs	r0, r6
 801317a:	9902      	ldr	r1, [sp, #8]
 801317c:	f001 fa12 	bl	80145a4 <__mcmp>
 8013180:	2800      	cmp	r0, #0
 8013182:	db23      	blt.n	80131cc <quorem+0xee>
 8013184:	0034      	movs	r4, r6
 8013186:	2500      	movs	r5, #0
 8013188:	9902      	ldr	r1, [sp, #8]
 801318a:	3414      	adds	r4, #20
 801318c:	3114      	adds	r1, #20
 801318e:	6823      	ldr	r3, [r4, #0]
 8013190:	c901      	ldmia	r1!, {r0}
 8013192:	9302      	str	r3, [sp, #8]
 8013194:	466b      	mov	r3, sp
 8013196:	891b      	ldrh	r3, [r3, #8]
 8013198:	b282      	uxth	r2, r0
 801319a:	1a9a      	subs	r2, r3, r2
 801319c:	9b02      	ldr	r3, [sp, #8]
 801319e:	1952      	adds	r2, r2, r5
 80131a0:	0c00      	lsrs	r0, r0, #16
 80131a2:	0c1b      	lsrs	r3, r3, #16
 80131a4:	1a1b      	subs	r3, r3, r0
 80131a6:	1410      	asrs	r0, r2, #16
 80131a8:	181b      	adds	r3, r3, r0
 80131aa:	141d      	asrs	r5, r3, #16
 80131ac:	b292      	uxth	r2, r2
 80131ae:	041b      	lsls	r3, r3, #16
 80131b0:	431a      	orrs	r2, r3
 80131b2:	9b03      	ldr	r3, [sp, #12]
 80131b4:	c404      	stmia	r4!, {r2}
 80131b6:	428b      	cmp	r3, r1
 80131b8:	d2e9      	bcs.n	801318e <quorem+0xb0>
 80131ba:	9a01      	ldr	r2, [sp, #4]
 80131bc:	00bb      	lsls	r3, r7, #2
 80131be:	18d3      	adds	r3, r2, r3
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	2a00      	cmp	r2, #0
 80131c4:	d013      	beq.n	80131ee <quorem+0x110>
 80131c6:	9b00      	ldr	r3, [sp, #0]
 80131c8:	3301      	adds	r3, #1
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	9800      	ldr	r0, [sp, #0]
 80131ce:	b007      	add	sp, #28
 80131d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131d2:	6823      	ldr	r3, [r4, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d104      	bne.n	80131e2 <quorem+0x104>
 80131d8:	3f01      	subs	r7, #1
 80131da:	9b01      	ldr	r3, [sp, #4]
 80131dc:	3c04      	subs	r4, #4
 80131de:	42a3      	cmp	r3, r4
 80131e0:	d3f7      	bcc.n	80131d2 <quorem+0xf4>
 80131e2:	6137      	str	r7, [r6, #16]
 80131e4:	e7c8      	b.n	8013178 <quorem+0x9a>
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	2a00      	cmp	r2, #0
 80131ea:	d104      	bne.n	80131f6 <quorem+0x118>
 80131ec:	3f01      	subs	r7, #1
 80131ee:	9a01      	ldr	r2, [sp, #4]
 80131f0:	3b04      	subs	r3, #4
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d3f7      	bcc.n	80131e6 <quorem+0x108>
 80131f6:	6137      	str	r7, [r6, #16]
 80131f8:	e7e5      	b.n	80131c6 <quorem+0xe8>
	...

080131fc <_dtoa_r>:
 80131fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131fe:	0014      	movs	r4, r2
 8013200:	001d      	movs	r5, r3
 8013202:	69c6      	ldr	r6, [r0, #28]
 8013204:	b09d      	sub	sp, #116	@ 0x74
 8013206:	940a      	str	r4, [sp, #40]	@ 0x28
 8013208:	950b      	str	r5, [sp, #44]	@ 0x2c
 801320a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801320c:	9003      	str	r0, [sp, #12]
 801320e:	2e00      	cmp	r6, #0
 8013210:	d10f      	bne.n	8013232 <_dtoa_r+0x36>
 8013212:	2010      	movs	r0, #16
 8013214:	f000 fe30 	bl	8013e78 <malloc>
 8013218:	9b03      	ldr	r3, [sp, #12]
 801321a:	1e02      	subs	r2, r0, #0
 801321c:	61d8      	str	r0, [r3, #28]
 801321e:	d104      	bne.n	801322a <_dtoa_r+0x2e>
 8013220:	21ef      	movs	r1, #239	@ 0xef
 8013222:	4bc7      	ldr	r3, [pc, #796]	@ (8013540 <_dtoa_r+0x344>)
 8013224:	48c7      	ldr	r0, [pc, #796]	@ (8013544 <_dtoa_r+0x348>)
 8013226:	f002 fc99 	bl	8015b5c <__assert_func>
 801322a:	6046      	str	r6, [r0, #4]
 801322c:	6086      	str	r6, [r0, #8]
 801322e:	6006      	str	r6, [r0, #0]
 8013230:	60c6      	str	r6, [r0, #12]
 8013232:	9b03      	ldr	r3, [sp, #12]
 8013234:	69db      	ldr	r3, [r3, #28]
 8013236:	6819      	ldr	r1, [r3, #0]
 8013238:	2900      	cmp	r1, #0
 801323a:	d00b      	beq.n	8013254 <_dtoa_r+0x58>
 801323c:	685a      	ldr	r2, [r3, #4]
 801323e:	2301      	movs	r3, #1
 8013240:	4093      	lsls	r3, r2
 8013242:	604a      	str	r2, [r1, #4]
 8013244:	608b      	str	r3, [r1, #8]
 8013246:	9803      	ldr	r0, [sp, #12]
 8013248:	f000 ff16 	bl	8014078 <_Bfree>
 801324c:	2200      	movs	r2, #0
 801324e:	9b03      	ldr	r3, [sp, #12]
 8013250:	69db      	ldr	r3, [r3, #28]
 8013252:	601a      	str	r2, [r3, #0]
 8013254:	2d00      	cmp	r5, #0
 8013256:	da1e      	bge.n	8013296 <_dtoa_r+0x9a>
 8013258:	2301      	movs	r3, #1
 801325a:	603b      	str	r3, [r7, #0]
 801325c:	006b      	lsls	r3, r5, #1
 801325e:	085b      	lsrs	r3, r3, #1
 8013260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013262:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013264:	4bb8      	ldr	r3, [pc, #736]	@ (8013548 <_dtoa_r+0x34c>)
 8013266:	4ab8      	ldr	r2, [pc, #736]	@ (8013548 <_dtoa_r+0x34c>)
 8013268:	403b      	ands	r3, r7
 801326a:	4293      	cmp	r3, r2
 801326c:	d116      	bne.n	801329c <_dtoa_r+0xa0>
 801326e:	4bb7      	ldr	r3, [pc, #732]	@ (801354c <_dtoa_r+0x350>)
 8013270:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013272:	6013      	str	r3, [r2, #0]
 8013274:	033b      	lsls	r3, r7, #12
 8013276:	0b1b      	lsrs	r3, r3, #12
 8013278:	4323      	orrs	r3, r4
 801327a:	d101      	bne.n	8013280 <_dtoa_r+0x84>
 801327c:	f000 fd83 	bl	8013d86 <_dtoa_r+0xb8a>
 8013280:	4bb3      	ldr	r3, [pc, #716]	@ (8013550 <_dtoa_r+0x354>)
 8013282:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013284:	9308      	str	r3, [sp, #32]
 8013286:	2a00      	cmp	r2, #0
 8013288:	d002      	beq.n	8013290 <_dtoa_r+0x94>
 801328a:	4bb2      	ldr	r3, [pc, #712]	@ (8013554 <_dtoa_r+0x358>)
 801328c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801328e:	6013      	str	r3, [r2, #0]
 8013290:	9808      	ldr	r0, [sp, #32]
 8013292:	b01d      	add	sp, #116	@ 0x74
 8013294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013296:	2300      	movs	r3, #0
 8013298:	603b      	str	r3, [r7, #0]
 801329a:	e7e2      	b.n	8013262 <_dtoa_r+0x66>
 801329c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801329e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132a0:	9212      	str	r2, [sp, #72]	@ 0x48
 80132a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80132a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80132a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80132a8:	2200      	movs	r2, #0
 80132aa:	2300      	movs	r3, #0
 80132ac:	f7ed f8ce 	bl	800044c <__aeabi_dcmpeq>
 80132b0:	1e06      	subs	r6, r0, #0
 80132b2:	d00b      	beq.n	80132cc <_dtoa_r+0xd0>
 80132b4:	2301      	movs	r3, #1
 80132b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80132b8:	6013      	str	r3, [r2, #0]
 80132ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d002      	beq.n	80132c6 <_dtoa_r+0xca>
 80132c0:	4ba5      	ldr	r3, [pc, #660]	@ (8013558 <_dtoa_r+0x35c>)
 80132c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80132c4:	6013      	str	r3, [r2, #0]
 80132c6:	4ba5      	ldr	r3, [pc, #660]	@ (801355c <_dtoa_r+0x360>)
 80132c8:	9308      	str	r3, [sp, #32]
 80132ca:	e7e1      	b.n	8013290 <_dtoa_r+0x94>
 80132cc:	ab1a      	add	r3, sp, #104	@ 0x68
 80132ce:	9301      	str	r3, [sp, #4]
 80132d0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	9803      	ldr	r0, [sp, #12]
 80132d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80132d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80132da:	f001 fa85 	bl	80147e8 <__d2b>
 80132de:	007a      	lsls	r2, r7, #1
 80132e0:	9005      	str	r0, [sp, #20]
 80132e2:	0d52      	lsrs	r2, r2, #21
 80132e4:	d100      	bne.n	80132e8 <_dtoa_r+0xec>
 80132e6:	e07b      	b.n	80133e0 <_dtoa_r+0x1e4>
 80132e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80132ea:	9618      	str	r6, [sp, #96]	@ 0x60
 80132ec:	0319      	lsls	r1, r3, #12
 80132ee:	4b9c      	ldr	r3, [pc, #624]	@ (8013560 <_dtoa_r+0x364>)
 80132f0:	0b09      	lsrs	r1, r1, #12
 80132f2:	430b      	orrs	r3, r1
 80132f4:	499b      	ldr	r1, [pc, #620]	@ (8013564 <_dtoa_r+0x368>)
 80132f6:	1857      	adds	r7, r2, r1
 80132f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80132fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80132fc:	0019      	movs	r1, r3
 80132fe:	2200      	movs	r2, #0
 8013300:	4b99      	ldr	r3, [pc, #612]	@ (8013568 <_dtoa_r+0x36c>)
 8013302:	f7ef fc03 	bl	8002b0c <__aeabi_dsub>
 8013306:	4a99      	ldr	r2, [pc, #612]	@ (801356c <_dtoa_r+0x370>)
 8013308:	4b99      	ldr	r3, [pc, #612]	@ (8013570 <_dtoa_r+0x374>)
 801330a:	f7ef f937 	bl	800257c <__aeabi_dmul>
 801330e:	4a99      	ldr	r2, [pc, #612]	@ (8013574 <_dtoa_r+0x378>)
 8013310:	4b99      	ldr	r3, [pc, #612]	@ (8013578 <_dtoa_r+0x37c>)
 8013312:	f7ee f98b 	bl	800162c <__aeabi_dadd>
 8013316:	0004      	movs	r4, r0
 8013318:	0038      	movs	r0, r7
 801331a:	000d      	movs	r5, r1
 801331c:	f7ef fff0 	bl	8003300 <__aeabi_i2d>
 8013320:	4a96      	ldr	r2, [pc, #600]	@ (801357c <_dtoa_r+0x380>)
 8013322:	4b97      	ldr	r3, [pc, #604]	@ (8013580 <_dtoa_r+0x384>)
 8013324:	f7ef f92a 	bl	800257c <__aeabi_dmul>
 8013328:	0002      	movs	r2, r0
 801332a:	000b      	movs	r3, r1
 801332c:	0020      	movs	r0, r4
 801332e:	0029      	movs	r1, r5
 8013330:	f7ee f97c 	bl	800162c <__aeabi_dadd>
 8013334:	0004      	movs	r4, r0
 8013336:	000d      	movs	r5, r1
 8013338:	f7ef ffa6 	bl	8003288 <__aeabi_d2iz>
 801333c:	2200      	movs	r2, #0
 801333e:	9004      	str	r0, [sp, #16]
 8013340:	2300      	movs	r3, #0
 8013342:	0020      	movs	r0, r4
 8013344:	0029      	movs	r1, r5
 8013346:	f7ed f887 	bl	8000458 <__aeabi_dcmplt>
 801334a:	2800      	cmp	r0, #0
 801334c:	d00b      	beq.n	8013366 <_dtoa_r+0x16a>
 801334e:	9804      	ldr	r0, [sp, #16]
 8013350:	f7ef ffd6 	bl	8003300 <__aeabi_i2d>
 8013354:	002b      	movs	r3, r5
 8013356:	0022      	movs	r2, r4
 8013358:	f7ed f878 	bl	800044c <__aeabi_dcmpeq>
 801335c:	4243      	negs	r3, r0
 801335e:	4158      	adcs	r0, r3
 8013360:	9b04      	ldr	r3, [sp, #16]
 8013362:	1a1b      	subs	r3, r3, r0
 8013364:	9304      	str	r3, [sp, #16]
 8013366:	2301      	movs	r3, #1
 8013368:	9315      	str	r3, [sp, #84]	@ 0x54
 801336a:	9b04      	ldr	r3, [sp, #16]
 801336c:	2b16      	cmp	r3, #22
 801336e:	d810      	bhi.n	8013392 <_dtoa_r+0x196>
 8013370:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013372:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013374:	9a04      	ldr	r2, [sp, #16]
 8013376:	4b83      	ldr	r3, [pc, #524]	@ (8013584 <_dtoa_r+0x388>)
 8013378:	00d2      	lsls	r2, r2, #3
 801337a:	189b      	adds	r3, r3, r2
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	f7ed f86a 	bl	8000458 <__aeabi_dcmplt>
 8013384:	2800      	cmp	r0, #0
 8013386:	d047      	beq.n	8013418 <_dtoa_r+0x21c>
 8013388:	9b04      	ldr	r3, [sp, #16]
 801338a:	3b01      	subs	r3, #1
 801338c:	9304      	str	r3, [sp, #16]
 801338e:	2300      	movs	r3, #0
 8013390:	9315      	str	r3, [sp, #84]	@ 0x54
 8013392:	2200      	movs	r2, #0
 8013394:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013396:	9206      	str	r2, [sp, #24]
 8013398:	1bdb      	subs	r3, r3, r7
 801339a:	1e5a      	subs	r2, r3, #1
 801339c:	d53e      	bpl.n	801341c <_dtoa_r+0x220>
 801339e:	2201      	movs	r2, #1
 80133a0:	1ad3      	subs	r3, r2, r3
 80133a2:	9306      	str	r3, [sp, #24]
 80133a4:	2300      	movs	r3, #0
 80133a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80133a8:	9b04      	ldr	r3, [sp, #16]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	db38      	blt.n	8013420 <_dtoa_r+0x224>
 80133ae:	9a04      	ldr	r2, [sp, #16]
 80133b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80133b2:	4694      	mov	ip, r2
 80133b4:	4463      	add	r3, ip
 80133b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80133b8:	2300      	movs	r3, #0
 80133ba:	9214      	str	r2, [sp, #80]	@ 0x50
 80133bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80133be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80133c0:	2401      	movs	r4, #1
 80133c2:	2b09      	cmp	r3, #9
 80133c4:	d867      	bhi.n	8013496 <_dtoa_r+0x29a>
 80133c6:	2b05      	cmp	r3, #5
 80133c8:	dd02      	ble.n	80133d0 <_dtoa_r+0x1d4>
 80133ca:	2400      	movs	r4, #0
 80133cc:	3b04      	subs	r3, #4
 80133ce:	9322      	str	r3, [sp, #136]	@ 0x88
 80133d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80133d2:	1e98      	subs	r0, r3, #2
 80133d4:	2803      	cmp	r0, #3
 80133d6:	d867      	bhi.n	80134a8 <_dtoa_r+0x2ac>
 80133d8:	f7ec fe9e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80133dc:	5b383a2b 	.word	0x5b383a2b
 80133e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80133e2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80133e4:	18f6      	adds	r6, r6, r3
 80133e6:	4b68      	ldr	r3, [pc, #416]	@ (8013588 <_dtoa_r+0x38c>)
 80133e8:	18f2      	adds	r2, r6, r3
 80133ea:	2a20      	cmp	r2, #32
 80133ec:	dd0f      	ble.n	801340e <_dtoa_r+0x212>
 80133ee:	2340      	movs	r3, #64	@ 0x40
 80133f0:	1a9b      	subs	r3, r3, r2
 80133f2:	409f      	lsls	r7, r3
 80133f4:	4b65      	ldr	r3, [pc, #404]	@ (801358c <_dtoa_r+0x390>)
 80133f6:	0038      	movs	r0, r7
 80133f8:	18f3      	adds	r3, r6, r3
 80133fa:	40dc      	lsrs	r4, r3
 80133fc:	4320      	orrs	r0, r4
 80133fe:	f7ef ffad 	bl	800335c <__aeabi_ui2d>
 8013402:	2201      	movs	r2, #1
 8013404:	4b62      	ldr	r3, [pc, #392]	@ (8013590 <_dtoa_r+0x394>)
 8013406:	1e77      	subs	r7, r6, #1
 8013408:	18cb      	adds	r3, r1, r3
 801340a:	9218      	str	r2, [sp, #96]	@ 0x60
 801340c:	e776      	b.n	80132fc <_dtoa_r+0x100>
 801340e:	2320      	movs	r3, #32
 8013410:	0020      	movs	r0, r4
 8013412:	1a9b      	subs	r3, r3, r2
 8013414:	4098      	lsls	r0, r3
 8013416:	e7f2      	b.n	80133fe <_dtoa_r+0x202>
 8013418:	9015      	str	r0, [sp, #84]	@ 0x54
 801341a:	e7ba      	b.n	8013392 <_dtoa_r+0x196>
 801341c:	920d      	str	r2, [sp, #52]	@ 0x34
 801341e:	e7c3      	b.n	80133a8 <_dtoa_r+0x1ac>
 8013420:	9b06      	ldr	r3, [sp, #24]
 8013422:	9a04      	ldr	r2, [sp, #16]
 8013424:	1a9b      	subs	r3, r3, r2
 8013426:	9306      	str	r3, [sp, #24]
 8013428:	4253      	negs	r3, r2
 801342a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801342c:	2300      	movs	r3, #0
 801342e:	9314      	str	r3, [sp, #80]	@ 0x50
 8013430:	e7c5      	b.n	80133be <_dtoa_r+0x1c2>
 8013432:	2300      	movs	r3, #0
 8013434:	9310      	str	r3, [sp, #64]	@ 0x40
 8013436:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013438:	930e      	str	r3, [sp, #56]	@ 0x38
 801343a:	9309      	str	r3, [sp, #36]	@ 0x24
 801343c:	2b00      	cmp	r3, #0
 801343e:	dc13      	bgt.n	8013468 <_dtoa_r+0x26c>
 8013440:	2301      	movs	r3, #1
 8013442:	001a      	movs	r2, r3
 8013444:	930e      	str	r3, [sp, #56]	@ 0x38
 8013446:	9309      	str	r3, [sp, #36]	@ 0x24
 8013448:	9223      	str	r2, [sp, #140]	@ 0x8c
 801344a:	e00d      	b.n	8013468 <_dtoa_r+0x26c>
 801344c:	2301      	movs	r3, #1
 801344e:	e7f1      	b.n	8013434 <_dtoa_r+0x238>
 8013450:	2300      	movs	r3, #0
 8013452:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013454:	9310      	str	r3, [sp, #64]	@ 0x40
 8013456:	4694      	mov	ip, r2
 8013458:	9b04      	ldr	r3, [sp, #16]
 801345a:	4463      	add	r3, ip
 801345c:	930e      	str	r3, [sp, #56]	@ 0x38
 801345e:	3301      	adds	r3, #1
 8013460:	9309      	str	r3, [sp, #36]	@ 0x24
 8013462:	2b00      	cmp	r3, #0
 8013464:	dc00      	bgt.n	8013468 <_dtoa_r+0x26c>
 8013466:	2301      	movs	r3, #1
 8013468:	9a03      	ldr	r2, [sp, #12]
 801346a:	2100      	movs	r1, #0
 801346c:	69d0      	ldr	r0, [r2, #28]
 801346e:	2204      	movs	r2, #4
 8013470:	0015      	movs	r5, r2
 8013472:	3514      	adds	r5, #20
 8013474:	429d      	cmp	r5, r3
 8013476:	d91b      	bls.n	80134b0 <_dtoa_r+0x2b4>
 8013478:	6041      	str	r1, [r0, #4]
 801347a:	9803      	ldr	r0, [sp, #12]
 801347c:	f000 fdb8 	bl	8013ff0 <_Balloc>
 8013480:	9008      	str	r0, [sp, #32]
 8013482:	2800      	cmp	r0, #0
 8013484:	d117      	bne.n	80134b6 <_dtoa_r+0x2ba>
 8013486:	21b0      	movs	r1, #176	@ 0xb0
 8013488:	4b42      	ldr	r3, [pc, #264]	@ (8013594 <_dtoa_r+0x398>)
 801348a:	482e      	ldr	r0, [pc, #184]	@ (8013544 <_dtoa_r+0x348>)
 801348c:	9a08      	ldr	r2, [sp, #32]
 801348e:	31ff      	adds	r1, #255	@ 0xff
 8013490:	e6c9      	b.n	8013226 <_dtoa_r+0x2a>
 8013492:	2301      	movs	r3, #1
 8013494:	e7dd      	b.n	8013452 <_dtoa_r+0x256>
 8013496:	2300      	movs	r3, #0
 8013498:	9410      	str	r4, [sp, #64]	@ 0x40
 801349a:	9322      	str	r3, [sp, #136]	@ 0x88
 801349c:	3b01      	subs	r3, #1
 801349e:	930e      	str	r3, [sp, #56]	@ 0x38
 80134a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80134a2:	2200      	movs	r2, #0
 80134a4:	3313      	adds	r3, #19
 80134a6:	e7cf      	b.n	8013448 <_dtoa_r+0x24c>
 80134a8:	2301      	movs	r3, #1
 80134aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80134ac:	3b02      	subs	r3, #2
 80134ae:	e7f6      	b.n	801349e <_dtoa_r+0x2a2>
 80134b0:	3101      	adds	r1, #1
 80134b2:	0052      	lsls	r2, r2, #1
 80134b4:	e7dc      	b.n	8013470 <_dtoa_r+0x274>
 80134b6:	9b03      	ldr	r3, [sp, #12]
 80134b8:	9a08      	ldr	r2, [sp, #32]
 80134ba:	69db      	ldr	r3, [r3, #28]
 80134bc:	601a      	str	r2, [r3, #0]
 80134be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134c0:	2b0e      	cmp	r3, #14
 80134c2:	d900      	bls.n	80134c6 <_dtoa_r+0x2ca>
 80134c4:	e0d9      	b.n	801367a <_dtoa_r+0x47e>
 80134c6:	2c00      	cmp	r4, #0
 80134c8:	d100      	bne.n	80134cc <_dtoa_r+0x2d0>
 80134ca:	e0d6      	b.n	801367a <_dtoa_r+0x47e>
 80134cc:	9b04      	ldr	r3, [sp, #16]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	dd64      	ble.n	801359c <_dtoa_r+0x3a0>
 80134d2:	210f      	movs	r1, #15
 80134d4:	9a04      	ldr	r2, [sp, #16]
 80134d6:	4b2b      	ldr	r3, [pc, #172]	@ (8013584 <_dtoa_r+0x388>)
 80134d8:	400a      	ands	r2, r1
 80134da:	00d2      	lsls	r2, r2, #3
 80134dc:	189b      	adds	r3, r3, r2
 80134de:	681e      	ldr	r6, [r3, #0]
 80134e0:	685f      	ldr	r7, [r3, #4]
 80134e2:	9b04      	ldr	r3, [sp, #16]
 80134e4:	2402      	movs	r4, #2
 80134e6:	111d      	asrs	r5, r3, #4
 80134e8:	05db      	lsls	r3, r3, #23
 80134ea:	d50a      	bpl.n	8013502 <_dtoa_r+0x306>
 80134ec:	4b2a      	ldr	r3, [pc, #168]	@ (8013598 <_dtoa_r+0x39c>)
 80134ee:	400d      	ands	r5, r1
 80134f0:	6a1a      	ldr	r2, [r3, #32]
 80134f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80134f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80134f8:	f7ee fbfc 	bl	8001cf4 <__aeabi_ddiv>
 80134fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80134fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013500:	3401      	adds	r4, #1
 8013502:	4b25      	ldr	r3, [pc, #148]	@ (8013598 <_dtoa_r+0x39c>)
 8013504:	930c      	str	r3, [sp, #48]	@ 0x30
 8013506:	2d00      	cmp	r5, #0
 8013508:	d108      	bne.n	801351c <_dtoa_r+0x320>
 801350a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801350c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801350e:	0032      	movs	r2, r6
 8013510:	003b      	movs	r3, r7
 8013512:	f7ee fbef 	bl	8001cf4 <__aeabi_ddiv>
 8013516:	900a      	str	r0, [sp, #40]	@ 0x28
 8013518:	910b      	str	r1, [sp, #44]	@ 0x2c
 801351a:	e05a      	b.n	80135d2 <_dtoa_r+0x3d6>
 801351c:	2301      	movs	r3, #1
 801351e:	421d      	tst	r5, r3
 8013520:	d009      	beq.n	8013536 <_dtoa_r+0x33a>
 8013522:	18e4      	adds	r4, r4, r3
 8013524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013526:	0030      	movs	r0, r6
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	0039      	movs	r1, r7
 801352e:	f7ef f825 	bl	800257c <__aeabi_dmul>
 8013532:	0006      	movs	r6, r0
 8013534:	000f      	movs	r7, r1
 8013536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013538:	106d      	asrs	r5, r5, #1
 801353a:	3308      	adds	r3, #8
 801353c:	e7e2      	b.n	8013504 <_dtoa_r+0x308>
 801353e:	46c0      	nop			@ (mov r8, r8)
 8013540:	08017186 	.word	0x08017186
 8013544:	0801719d 	.word	0x0801719d
 8013548:	7ff00000 	.word	0x7ff00000
 801354c:	0000270f 	.word	0x0000270f
 8013550:	08017182 	.word	0x08017182
 8013554:	08017185 	.word	0x08017185
 8013558:	08017151 	.word	0x08017151
 801355c:	08017150 	.word	0x08017150
 8013560:	3ff00000 	.word	0x3ff00000
 8013564:	fffffc01 	.word	0xfffffc01
 8013568:	3ff80000 	.word	0x3ff80000
 801356c:	636f4361 	.word	0x636f4361
 8013570:	3fd287a7 	.word	0x3fd287a7
 8013574:	8b60c8b3 	.word	0x8b60c8b3
 8013578:	3fc68a28 	.word	0x3fc68a28
 801357c:	509f79fb 	.word	0x509f79fb
 8013580:	3fd34413 	.word	0x3fd34413
 8013584:	08017298 	.word	0x08017298
 8013588:	00000432 	.word	0x00000432
 801358c:	00000412 	.word	0x00000412
 8013590:	fe100000 	.word	0xfe100000
 8013594:	080171f5 	.word	0x080171f5
 8013598:	08017270 	.word	0x08017270
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	2402      	movs	r4, #2
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d016      	beq.n	80135d2 <_dtoa_r+0x3d6>
 80135a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80135a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80135a8:	220f      	movs	r2, #15
 80135aa:	425d      	negs	r5, r3
 80135ac:	402a      	ands	r2, r5
 80135ae:	4bd7      	ldr	r3, [pc, #860]	@ (801390c <_dtoa_r+0x710>)
 80135b0:	00d2      	lsls	r2, r2, #3
 80135b2:	189b      	adds	r3, r3, r2
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	f7ee ffe0 	bl	800257c <__aeabi_dmul>
 80135bc:	2701      	movs	r7, #1
 80135be:	2300      	movs	r3, #0
 80135c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80135c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80135c4:	4ed2      	ldr	r6, [pc, #840]	@ (8013910 <_dtoa_r+0x714>)
 80135c6:	112d      	asrs	r5, r5, #4
 80135c8:	2d00      	cmp	r5, #0
 80135ca:	d000      	beq.n	80135ce <_dtoa_r+0x3d2>
 80135cc:	e0ba      	b.n	8013744 <_dtoa_r+0x548>
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d1a1      	bne.n	8013516 <_dtoa_r+0x31a>
 80135d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80135d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80135d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d100      	bne.n	80135de <_dtoa_r+0x3e2>
 80135dc:	e0bd      	b.n	801375a <_dtoa_r+0x55e>
 80135de:	2200      	movs	r2, #0
 80135e0:	0030      	movs	r0, r6
 80135e2:	0039      	movs	r1, r7
 80135e4:	4bcb      	ldr	r3, [pc, #812]	@ (8013914 <_dtoa_r+0x718>)
 80135e6:	f7ec ff37 	bl	8000458 <__aeabi_dcmplt>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d100      	bne.n	80135f0 <_dtoa_r+0x3f4>
 80135ee:	e0b4      	b.n	801375a <_dtoa_r+0x55e>
 80135f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d100      	bne.n	80135f8 <_dtoa_r+0x3fc>
 80135f6:	e0b0      	b.n	801375a <_dtoa_r+0x55e>
 80135f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	dd39      	ble.n	8013672 <_dtoa_r+0x476>
 80135fe:	9b04      	ldr	r3, [sp, #16]
 8013600:	2200      	movs	r2, #0
 8013602:	3b01      	subs	r3, #1
 8013604:	930c      	str	r3, [sp, #48]	@ 0x30
 8013606:	0030      	movs	r0, r6
 8013608:	4bc3      	ldr	r3, [pc, #780]	@ (8013918 <_dtoa_r+0x71c>)
 801360a:	0039      	movs	r1, r7
 801360c:	f7ee ffb6 	bl	800257c <__aeabi_dmul>
 8013610:	900a      	str	r0, [sp, #40]	@ 0x28
 8013612:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013616:	3401      	adds	r4, #1
 8013618:	0020      	movs	r0, r4
 801361a:	9311      	str	r3, [sp, #68]	@ 0x44
 801361c:	f7ef fe70 	bl	8003300 <__aeabi_i2d>
 8013620:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013624:	f7ee ffaa 	bl	800257c <__aeabi_dmul>
 8013628:	4bbc      	ldr	r3, [pc, #752]	@ (801391c <_dtoa_r+0x720>)
 801362a:	2200      	movs	r2, #0
 801362c:	f7ed fffe 	bl	800162c <__aeabi_dadd>
 8013630:	4bbb      	ldr	r3, [pc, #748]	@ (8013920 <_dtoa_r+0x724>)
 8013632:	0006      	movs	r6, r0
 8013634:	18cf      	adds	r7, r1, r3
 8013636:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013638:	2b00      	cmp	r3, #0
 801363a:	d000      	beq.n	801363e <_dtoa_r+0x442>
 801363c:	e091      	b.n	8013762 <_dtoa_r+0x566>
 801363e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013642:	2200      	movs	r2, #0
 8013644:	4bb7      	ldr	r3, [pc, #732]	@ (8013924 <_dtoa_r+0x728>)
 8013646:	f7ef fa61 	bl	8002b0c <__aeabi_dsub>
 801364a:	0032      	movs	r2, r6
 801364c:	003b      	movs	r3, r7
 801364e:	0004      	movs	r4, r0
 8013650:	000d      	movs	r5, r1
 8013652:	f7ec ff15 	bl	8000480 <__aeabi_dcmpgt>
 8013656:	2800      	cmp	r0, #0
 8013658:	d000      	beq.n	801365c <_dtoa_r+0x460>
 801365a:	e29d      	b.n	8013b98 <_dtoa_r+0x99c>
 801365c:	2180      	movs	r1, #128	@ 0x80
 801365e:	0609      	lsls	r1, r1, #24
 8013660:	187b      	adds	r3, r7, r1
 8013662:	0032      	movs	r2, r6
 8013664:	0020      	movs	r0, r4
 8013666:	0029      	movs	r1, r5
 8013668:	f7ec fef6 	bl	8000458 <__aeabi_dcmplt>
 801366c:	2800      	cmp	r0, #0
 801366e:	d000      	beq.n	8013672 <_dtoa_r+0x476>
 8013670:	e130      	b.n	80138d4 <_dtoa_r+0x6d8>
 8013672:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013674:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013676:	930a      	str	r3, [sp, #40]	@ 0x28
 8013678:	940b      	str	r4, [sp, #44]	@ 0x2c
 801367a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801367c:	2b00      	cmp	r3, #0
 801367e:	da00      	bge.n	8013682 <_dtoa_r+0x486>
 8013680:	e177      	b.n	8013972 <_dtoa_r+0x776>
 8013682:	9a04      	ldr	r2, [sp, #16]
 8013684:	2a0e      	cmp	r2, #14
 8013686:	dd00      	ble.n	801368a <_dtoa_r+0x48e>
 8013688:	e173      	b.n	8013972 <_dtoa_r+0x776>
 801368a:	4ba0      	ldr	r3, [pc, #640]	@ (801390c <_dtoa_r+0x710>)
 801368c:	00d2      	lsls	r2, r2, #3
 801368e:	189b      	adds	r3, r3, r2
 8013690:	685c      	ldr	r4, [r3, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	9306      	str	r3, [sp, #24]
 8013696:	9407      	str	r4, [sp, #28]
 8013698:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801369a:	2b00      	cmp	r3, #0
 801369c:	da03      	bge.n	80136a6 <_dtoa_r+0x4aa>
 801369e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	dc00      	bgt.n	80136a6 <_dtoa_r+0x4aa>
 80136a4:	e106      	b.n	80138b4 <_dtoa_r+0x6b8>
 80136a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80136a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80136aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136ac:	9d08      	ldr	r5, [sp, #32]
 80136ae:	3b01      	subs	r3, #1
 80136b0:	195b      	adds	r3, r3, r5
 80136b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80136b4:	9a06      	ldr	r2, [sp, #24]
 80136b6:	9b07      	ldr	r3, [sp, #28]
 80136b8:	0030      	movs	r0, r6
 80136ba:	0039      	movs	r1, r7
 80136bc:	f7ee fb1a 	bl	8001cf4 <__aeabi_ddiv>
 80136c0:	f7ef fde2 	bl	8003288 <__aeabi_d2iz>
 80136c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80136c6:	f7ef fe1b 	bl	8003300 <__aeabi_i2d>
 80136ca:	9a06      	ldr	r2, [sp, #24]
 80136cc:	9b07      	ldr	r3, [sp, #28]
 80136ce:	f7ee ff55 	bl	800257c <__aeabi_dmul>
 80136d2:	0002      	movs	r2, r0
 80136d4:	000b      	movs	r3, r1
 80136d6:	0030      	movs	r0, r6
 80136d8:	0039      	movs	r1, r7
 80136da:	f7ef fa17 	bl	8002b0c <__aeabi_dsub>
 80136de:	002b      	movs	r3, r5
 80136e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136e2:	3501      	adds	r5, #1
 80136e4:	3230      	adds	r2, #48	@ 0x30
 80136e6:	701a      	strb	r2, [r3, #0]
 80136e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136ea:	002c      	movs	r4, r5
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d000      	beq.n	80136f2 <_dtoa_r+0x4f6>
 80136f0:	e131      	b.n	8013956 <_dtoa_r+0x75a>
 80136f2:	0002      	movs	r2, r0
 80136f4:	000b      	movs	r3, r1
 80136f6:	f7ed ff99 	bl	800162c <__aeabi_dadd>
 80136fa:	9a06      	ldr	r2, [sp, #24]
 80136fc:	9b07      	ldr	r3, [sp, #28]
 80136fe:	0006      	movs	r6, r0
 8013700:	000f      	movs	r7, r1
 8013702:	f7ec febd 	bl	8000480 <__aeabi_dcmpgt>
 8013706:	2800      	cmp	r0, #0
 8013708:	d000      	beq.n	801370c <_dtoa_r+0x510>
 801370a:	e10f      	b.n	801392c <_dtoa_r+0x730>
 801370c:	9a06      	ldr	r2, [sp, #24]
 801370e:	9b07      	ldr	r3, [sp, #28]
 8013710:	0030      	movs	r0, r6
 8013712:	0039      	movs	r1, r7
 8013714:	f7ec fe9a 	bl	800044c <__aeabi_dcmpeq>
 8013718:	2800      	cmp	r0, #0
 801371a:	d003      	beq.n	8013724 <_dtoa_r+0x528>
 801371c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801371e:	07dd      	lsls	r5, r3, #31
 8013720:	d500      	bpl.n	8013724 <_dtoa_r+0x528>
 8013722:	e103      	b.n	801392c <_dtoa_r+0x730>
 8013724:	9905      	ldr	r1, [sp, #20]
 8013726:	9803      	ldr	r0, [sp, #12]
 8013728:	f000 fca6 	bl	8014078 <_Bfree>
 801372c:	2300      	movs	r3, #0
 801372e:	7023      	strb	r3, [r4, #0]
 8013730:	9b04      	ldr	r3, [sp, #16]
 8013732:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013734:	3301      	adds	r3, #1
 8013736:	6013      	str	r3, [r2, #0]
 8013738:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801373a:	2b00      	cmp	r3, #0
 801373c:	d100      	bne.n	8013740 <_dtoa_r+0x544>
 801373e:	e5a7      	b.n	8013290 <_dtoa_r+0x94>
 8013740:	601c      	str	r4, [r3, #0]
 8013742:	e5a5      	b.n	8013290 <_dtoa_r+0x94>
 8013744:	423d      	tst	r5, r7
 8013746:	d005      	beq.n	8013754 <_dtoa_r+0x558>
 8013748:	6832      	ldr	r2, [r6, #0]
 801374a:	6873      	ldr	r3, [r6, #4]
 801374c:	f7ee ff16 	bl	800257c <__aeabi_dmul>
 8013750:	003b      	movs	r3, r7
 8013752:	3401      	adds	r4, #1
 8013754:	106d      	asrs	r5, r5, #1
 8013756:	3608      	adds	r6, #8
 8013758:	e736      	b.n	80135c8 <_dtoa_r+0x3cc>
 801375a:	9b04      	ldr	r3, [sp, #16]
 801375c:	930c      	str	r3, [sp, #48]	@ 0x30
 801375e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013760:	e75a      	b.n	8013618 <_dtoa_r+0x41c>
 8013762:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013764:	4b69      	ldr	r3, [pc, #420]	@ (801390c <_dtoa_r+0x710>)
 8013766:	3a01      	subs	r2, #1
 8013768:	00d2      	lsls	r2, r2, #3
 801376a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801376c:	189b      	adds	r3, r3, r2
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	2900      	cmp	r1, #0
 8013774:	d04c      	beq.n	8013810 <_dtoa_r+0x614>
 8013776:	2000      	movs	r0, #0
 8013778:	496b      	ldr	r1, [pc, #428]	@ (8013928 <_dtoa_r+0x72c>)
 801377a:	f7ee fabb 	bl	8001cf4 <__aeabi_ddiv>
 801377e:	0032      	movs	r2, r6
 8013780:	003b      	movs	r3, r7
 8013782:	f7ef f9c3 	bl	8002b0c <__aeabi_dsub>
 8013786:	9a08      	ldr	r2, [sp, #32]
 8013788:	0006      	movs	r6, r0
 801378a:	4694      	mov	ip, r2
 801378c:	000f      	movs	r7, r1
 801378e:	9b08      	ldr	r3, [sp, #32]
 8013790:	9316      	str	r3, [sp, #88]	@ 0x58
 8013792:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013794:	4463      	add	r3, ip
 8013796:	9311      	str	r3, [sp, #68]	@ 0x44
 8013798:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801379a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801379c:	f7ef fd74 	bl	8003288 <__aeabi_d2iz>
 80137a0:	0005      	movs	r5, r0
 80137a2:	f7ef fdad 	bl	8003300 <__aeabi_i2d>
 80137a6:	0002      	movs	r2, r0
 80137a8:	000b      	movs	r3, r1
 80137aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80137ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137ae:	f7ef f9ad 	bl	8002b0c <__aeabi_dsub>
 80137b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80137b4:	3530      	adds	r5, #48	@ 0x30
 80137b6:	1c5c      	adds	r4, r3, #1
 80137b8:	701d      	strb	r5, [r3, #0]
 80137ba:	0032      	movs	r2, r6
 80137bc:	003b      	movs	r3, r7
 80137be:	900a      	str	r0, [sp, #40]	@ 0x28
 80137c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137c2:	f7ec fe49 	bl	8000458 <__aeabi_dcmplt>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d16a      	bne.n	80138a0 <_dtoa_r+0x6a4>
 80137ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137ce:	2000      	movs	r0, #0
 80137d0:	4950      	ldr	r1, [pc, #320]	@ (8013914 <_dtoa_r+0x718>)
 80137d2:	f7ef f99b 	bl	8002b0c <__aeabi_dsub>
 80137d6:	0032      	movs	r2, r6
 80137d8:	003b      	movs	r3, r7
 80137da:	f7ec fe3d 	bl	8000458 <__aeabi_dcmplt>
 80137de:	2800      	cmp	r0, #0
 80137e0:	d000      	beq.n	80137e4 <_dtoa_r+0x5e8>
 80137e2:	e0a5      	b.n	8013930 <_dtoa_r+0x734>
 80137e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137e6:	42a3      	cmp	r3, r4
 80137e8:	d100      	bne.n	80137ec <_dtoa_r+0x5f0>
 80137ea:	e742      	b.n	8013672 <_dtoa_r+0x476>
 80137ec:	2200      	movs	r2, #0
 80137ee:	0030      	movs	r0, r6
 80137f0:	0039      	movs	r1, r7
 80137f2:	4b49      	ldr	r3, [pc, #292]	@ (8013918 <_dtoa_r+0x71c>)
 80137f4:	f7ee fec2 	bl	800257c <__aeabi_dmul>
 80137f8:	2200      	movs	r2, #0
 80137fa:	0006      	movs	r6, r0
 80137fc:	000f      	movs	r7, r1
 80137fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013800:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013802:	4b45      	ldr	r3, [pc, #276]	@ (8013918 <_dtoa_r+0x71c>)
 8013804:	f7ee feba 	bl	800257c <__aeabi_dmul>
 8013808:	9416      	str	r4, [sp, #88]	@ 0x58
 801380a:	900a      	str	r0, [sp, #40]	@ 0x28
 801380c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801380e:	e7c3      	b.n	8013798 <_dtoa_r+0x59c>
 8013810:	0030      	movs	r0, r6
 8013812:	0039      	movs	r1, r7
 8013814:	f7ee feb2 	bl	800257c <__aeabi_dmul>
 8013818:	9d08      	ldr	r5, [sp, #32]
 801381a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801381c:	002b      	movs	r3, r5
 801381e:	4694      	mov	ip, r2
 8013820:	9016      	str	r0, [sp, #88]	@ 0x58
 8013822:	9117      	str	r1, [sp, #92]	@ 0x5c
 8013824:	4463      	add	r3, ip
 8013826:	9319      	str	r3, [sp, #100]	@ 0x64
 8013828:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801382a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801382c:	f7ef fd2c 	bl	8003288 <__aeabi_d2iz>
 8013830:	0004      	movs	r4, r0
 8013832:	f7ef fd65 	bl	8003300 <__aeabi_i2d>
 8013836:	000b      	movs	r3, r1
 8013838:	0002      	movs	r2, r0
 801383a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801383c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801383e:	f7ef f965 	bl	8002b0c <__aeabi_dsub>
 8013842:	3430      	adds	r4, #48	@ 0x30
 8013844:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013846:	702c      	strb	r4, [r5, #0]
 8013848:	3501      	adds	r5, #1
 801384a:	0006      	movs	r6, r0
 801384c:	000f      	movs	r7, r1
 801384e:	42ab      	cmp	r3, r5
 8013850:	d129      	bne.n	80138a6 <_dtoa_r+0x6aa>
 8013852:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013854:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013856:	9b08      	ldr	r3, [sp, #32]
 8013858:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801385a:	469c      	mov	ip, r3
 801385c:	2200      	movs	r2, #0
 801385e:	4b32      	ldr	r3, [pc, #200]	@ (8013928 <_dtoa_r+0x72c>)
 8013860:	4464      	add	r4, ip
 8013862:	f7ed fee3 	bl	800162c <__aeabi_dadd>
 8013866:	0002      	movs	r2, r0
 8013868:	000b      	movs	r3, r1
 801386a:	0030      	movs	r0, r6
 801386c:	0039      	movs	r1, r7
 801386e:	f7ec fe07 	bl	8000480 <__aeabi_dcmpgt>
 8013872:	2800      	cmp	r0, #0
 8013874:	d15c      	bne.n	8013930 <_dtoa_r+0x734>
 8013876:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013878:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801387a:	2000      	movs	r0, #0
 801387c:	492a      	ldr	r1, [pc, #168]	@ (8013928 <_dtoa_r+0x72c>)
 801387e:	f7ef f945 	bl	8002b0c <__aeabi_dsub>
 8013882:	0002      	movs	r2, r0
 8013884:	000b      	movs	r3, r1
 8013886:	0030      	movs	r0, r6
 8013888:	0039      	movs	r1, r7
 801388a:	f7ec fde5 	bl	8000458 <__aeabi_dcmplt>
 801388e:	2800      	cmp	r0, #0
 8013890:	d100      	bne.n	8013894 <_dtoa_r+0x698>
 8013892:	e6ee      	b.n	8013672 <_dtoa_r+0x476>
 8013894:	0023      	movs	r3, r4
 8013896:	3c01      	subs	r4, #1
 8013898:	7822      	ldrb	r2, [r4, #0]
 801389a:	2a30      	cmp	r2, #48	@ 0x30
 801389c:	d0fa      	beq.n	8013894 <_dtoa_r+0x698>
 801389e:	001c      	movs	r4, r3
 80138a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138a2:	9304      	str	r3, [sp, #16]
 80138a4:	e73e      	b.n	8013724 <_dtoa_r+0x528>
 80138a6:	2200      	movs	r2, #0
 80138a8:	4b1b      	ldr	r3, [pc, #108]	@ (8013918 <_dtoa_r+0x71c>)
 80138aa:	f7ee fe67 	bl	800257c <__aeabi_dmul>
 80138ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80138b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80138b2:	e7b9      	b.n	8013828 <_dtoa_r+0x62c>
 80138b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d10c      	bne.n	80138d4 <_dtoa_r+0x6d8>
 80138ba:	9806      	ldr	r0, [sp, #24]
 80138bc:	9907      	ldr	r1, [sp, #28]
 80138be:	2200      	movs	r2, #0
 80138c0:	4b18      	ldr	r3, [pc, #96]	@ (8013924 <_dtoa_r+0x728>)
 80138c2:	f7ee fe5b 	bl	800257c <__aeabi_dmul>
 80138c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80138c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138ca:	f7ec fde3 	bl	8000494 <__aeabi_dcmpge>
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d100      	bne.n	80138d4 <_dtoa_r+0x6d8>
 80138d2:	e164      	b.n	8013b9e <_dtoa_r+0x9a2>
 80138d4:	2600      	movs	r6, #0
 80138d6:	0037      	movs	r7, r6
 80138d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138da:	9c08      	ldr	r4, [sp, #32]
 80138dc:	43db      	mvns	r3, r3
 80138de:	930c      	str	r3, [sp, #48]	@ 0x30
 80138e0:	2300      	movs	r3, #0
 80138e2:	9304      	str	r3, [sp, #16]
 80138e4:	0031      	movs	r1, r6
 80138e6:	9803      	ldr	r0, [sp, #12]
 80138e8:	f000 fbc6 	bl	8014078 <_Bfree>
 80138ec:	2f00      	cmp	r7, #0
 80138ee:	d0d7      	beq.n	80138a0 <_dtoa_r+0x6a4>
 80138f0:	9b04      	ldr	r3, [sp, #16]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d005      	beq.n	8013902 <_dtoa_r+0x706>
 80138f6:	42bb      	cmp	r3, r7
 80138f8:	d003      	beq.n	8013902 <_dtoa_r+0x706>
 80138fa:	0019      	movs	r1, r3
 80138fc:	9803      	ldr	r0, [sp, #12]
 80138fe:	f000 fbbb 	bl	8014078 <_Bfree>
 8013902:	0039      	movs	r1, r7
 8013904:	9803      	ldr	r0, [sp, #12]
 8013906:	f000 fbb7 	bl	8014078 <_Bfree>
 801390a:	e7c9      	b.n	80138a0 <_dtoa_r+0x6a4>
 801390c:	08017298 	.word	0x08017298
 8013910:	08017270 	.word	0x08017270
 8013914:	3ff00000 	.word	0x3ff00000
 8013918:	40240000 	.word	0x40240000
 801391c:	401c0000 	.word	0x401c0000
 8013920:	fcc00000 	.word	0xfcc00000
 8013924:	40140000 	.word	0x40140000
 8013928:	3fe00000 	.word	0x3fe00000
 801392c:	9b04      	ldr	r3, [sp, #16]
 801392e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013930:	0023      	movs	r3, r4
 8013932:	001c      	movs	r4, r3
 8013934:	3b01      	subs	r3, #1
 8013936:	781a      	ldrb	r2, [r3, #0]
 8013938:	2a39      	cmp	r2, #57	@ 0x39
 801393a:	d108      	bne.n	801394e <_dtoa_r+0x752>
 801393c:	9a08      	ldr	r2, [sp, #32]
 801393e:	429a      	cmp	r2, r3
 8013940:	d1f7      	bne.n	8013932 <_dtoa_r+0x736>
 8013942:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013944:	9908      	ldr	r1, [sp, #32]
 8013946:	3201      	adds	r2, #1
 8013948:	920c      	str	r2, [sp, #48]	@ 0x30
 801394a:	2230      	movs	r2, #48	@ 0x30
 801394c:	700a      	strb	r2, [r1, #0]
 801394e:	781a      	ldrb	r2, [r3, #0]
 8013950:	3201      	adds	r2, #1
 8013952:	701a      	strb	r2, [r3, #0]
 8013954:	e7a4      	b.n	80138a0 <_dtoa_r+0x6a4>
 8013956:	2200      	movs	r2, #0
 8013958:	4bc6      	ldr	r3, [pc, #792]	@ (8013c74 <_dtoa_r+0xa78>)
 801395a:	f7ee fe0f 	bl	800257c <__aeabi_dmul>
 801395e:	2200      	movs	r2, #0
 8013960:	2300      	movs	r3, #0
 8013962:	0006      	movs	r6, r0
 8013964:	000f      	movs	r7, r1
 8013966:	f7ec fd71 	bl	800044c <__aeabi_dcmpeq>
 801396a:	2800      	cmp	r0, #0
 801396c:	d100      	bne.n	8013970 <_dtoa_r+0x774>
 801396e:	e6a1      	b.n	80136b4 <_dtoa_r+0x4b8>
 8013970:	e6d8      	b.n	8013724 <_dtoa_r+0x528>
 8013972:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8013974:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013976:	9c06      	ldr	r4, [sp, #24]
 8013978:	2f00      	cmp	r7, #0
 801397a:	d014      	beq.n	80139a6 <_dtoa_r+0x7aa>
 801397c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801397e:	2a01      	cmp	r2, #1
 8013980:	dd00      	ble.n	8013984 <_dtoa_r+0x788>
 8013982:	e0c8      	b.n	8013b16 <_dtoa_r+0x91a>
 8013984:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013986:	2a00      	cmp	r2, #0
 8013988:	d100      	bne.n	801398c <_dtoa_r+0x790>
 801398a:	e0be      	b.n	8013b0a <_dtoa_r+0x90e>
 801398c:	4aba      	ldr	r2, [pc, #744]	@ (8013c78 <_dtoa_r+0xa7c>)
 801398e:	189b      	adds	r3, r3, r2
 8013990:	9a06      	ldr	r2, [sp, #24]
 8013992:	2101      	movs	r1, #1
 8013994:	18d2      	adds	r2, r2, r3
 8013996:	9206      	str	r2, [sp, #24]
 8013998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801399a:	9803      	ldr	r0, [sp, #12]
 801399c:	18d3      	adds	r3, r2, r3
 801399e:	930d      	str	r3, [sp, #52]	@ 0x34
 80139a0:	f000 fc6e 	bl	8014280 <__i2b>
 80139a4:	0007      	movs	r7, r0
 80139a6:	2c00      	cmp	r4, #0
 80139a8:	d00e      	beq.n	80139c8 <_dtoa_r+0x7cc>
 80139aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	dd0b      	ble.n	80139c8 <_dtoa_r+0x7cc>
 80139b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139b2:	0023      	movs	r3, r4
 80139b4:	4294      	cmp	r4, r2
 80139b6:	dd00      	ble.n	80139ba <_dtoa_r+0x7be>
 80139b8:	0013      	movs	r3, r2
 80139ba:	9a06      	ldr	r2, [sp, #24]
 80139bc:	1ae4      	subs	r4, r4, r3
 80139be:	1ad2      	subs	r2, r2, r3
 80139c0:	9206      	str	r2, [sp, #24]
 80139c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139c4:	1ad3      	subs	r3, r2, r3
 80139c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80139c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d01f      	beq.n	8013a0e <_dtoa_r+0x812>
 80139ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d100      	bne.n	80139d6 <_dtoa_r+0x7da>
 80139d4:	e0b5      	b.n	8013b42 <_dtoa_r+0x946>
 80139d6:	2d00      	cmp	r5, #0
 80139d8:	d010      	beq.n	80139fc <_dtoa_r+0x800>
 80139da:	0039      	movs	r1, r7
 80139dc:	002a      	movs	r2, r5
 80139de:	9803      	ldr	r0, [sp, #12]
 80139e0:	f000 fd18 	bl	8014414 <__pow5mult>
 80139e4:	9a05      	ldr	r2, [sp, #20]
 80139e6:	0001      	movs	r1, r0
 80139e8:	0007      	movs	r7, r0
 80139ea:	9803      	ldr	r0, [sp, #12]
 80139ec:	f000 fc60 	bl	80142b0 <__multiply>
 80139f0:	0006      	movs	r6, r0
 80139f2:	9905      	ldr	r1, [sp, #20]
 80139f4:	9803      	ldr	r0, [sp, #12]
 80139f6:	f000 fb3f 	bl	8014078 <_Bfree>
 80139fa:	9605      	str	r6, [sp, #20]
 80139fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139fe:	1b5a      	subs	r2, r3, r5
 8013a00:	42ab      	cmp	r3, r5
 8013a02:	d004      	beq.n	8013a0e <_dtoa_r+0x812>
 8013a04:	9905      	ldr	r1, [sp, #20]
 8013a06:	9803      	ldr	r0, [sp, #12]
 8013a08:	f000 fd04 	bl	8014414 <__pow5mult>
 8013a0c:	9005      	str	r0, [sp, #20]
 8013a0e:	2101      	movs	r1, #1
 8013a10:	9803      	ldr	r0, [sp, #12]
 8013a12:	f000 fc35 	bl	8014280 <__i2b>
 8013a16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013a18:	0006      	movs	r6, r0
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d100      	bne.n	8013a20 <_dtoa_r+0x824>
 8013a1e:	e1bc      	b.n	8013d9a <_dtoa_r+0xb9e>
 8013a20:	001a      	movs	r2, r3
 8013a22:	0001      	movs	r1, r0
 8013a24:	9803      	ldr	r0, [sp, #12]
 8013a26:	f000 fcf5 	bl	8014414 <__pow5mult>
 8013a2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013a2c:	0006      	movs	r6, r0
 8013a2e:	2500      	movs	r5, #0
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	dc16      	bgt.n	8013a62 <_dtoa_r+0x866>
 8013a34:	2500      	movs	r5, #0
 8013a36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a38:	42ab      	cmp	r3, r5
 8013a3a:	d10e      	bne.n	8013a5a <_dtoa_r+0x85e>
 8013a3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a3e:	031b      	lsls	r3, r3, #12
 8013a40:	42ab      	cmp	r3, r5
 8013a42:	d10a      	bne.n	8013a5a <_dtoa_r+0x85e>
 8013a44:	4b8d      	ldr	r3, [pc, #564]	@ (8013c7c <_dtoa_r+0xa80>)
 8013a46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013a48:	4213      	tst	r3, r2
 8013a4a:	d006      	beq.n	8013a5a <_dtoa_r+0x85e>
 8013a4c:	9b06      	ldr	r3, [sp, #24]
 8013a4e:	3501      	adds	r5, #1
 8013a50:	3301      	adds	r3, #1
 8013a52:	9306      	str	r3, [sp, #24]
 8013a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a56:	3301      	adds	r3, #1
 8013a58:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013a5c:	2001      	movs	r0, #1
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d008      	beq.n	8013a74 <_dtoa_r+0x878>
 8013a62:	6933      	ldr	r3, [r6, #16]
 8013a64:	3303      	adds	r3, #3
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	18f3      	adds	r3, r6, r3
 8013a6a:	6858      	ldr	r0, [r3, #4]
 8013a6c:	f000 fbb8 	bl	80141e0 <__hi0bits>
 8013a70:	2320      	movs	r3, #32
 8013a72:	1a18      	subs	r0, r3, r0
 8013a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a76:	1818      	adds	r0, r3, r0
 8013a78:	0002      	movs	r2, r0
 8013a7a:	231f      	movs	r3, #31
 8013a7c:	401a      	ands	r2, r3
 8013a7e:	4218      	tst	r0, r3
 8013a80:	d065      	beq.n	8013b4e <_dtoa_r+0x952>
 8013a82:	3301      	adds	r3, #1
 8013a84:	1a9b      	subs	r3, r3, r2
 8013a86:	2b04      	cmp	r3, #4
 8013a88:	dd5d      	ble.n	8013b46 <_dtoa_r+0x94a>
 8013a8a:	231c      	movs	r3, #28
 8013a8c:	1a9b      	subs	r3, r3, r2
 8013a8e:	9a06      	ldr	r2, [sp, #24]
 8013a90:	18e4      	adds	r4, r4, r3
 8013a92:	18d2      	adds	r2, r2, r3
 8013a94:	9206      	str	r2, [sp, #24]
 8013a96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a98:	18d3      	adds	r3, r2, r3
 8013a9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a9c:	9b06      	ldr	r3, [sp, #24]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	dd05      	ble.n	8013aae <_dtoa_r+0x8b2>
 8013aa2:	001a      	movs	r2, r3
 8013aa4:	9905      	ldr	r1, [sp, #20]
 8013aa6:	9803      	ldr	r0, [sp, #12]
 8013aa8:	f000 fd10 	bl	80144cc <__lshift>
 8013aac:	9005      	str	r0, [sp, #20]
 8013aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	dd05      	ble.n	8013ac0 <_dtoa_r+0x8c4>
 8013ab4:	0031      	movs	r1, r6
 8013ab6:	001a      	movs	r2, r3
 8013ab8:	9803      	ldr	r0, [sp, #12]
 8013aba:	f000 fd07 	bl	80144cc <__lshift>
 8013abe:	0006      	movs	r6, r0
 8013ac0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d045      	beq.n	8013b52 <_dtoa_r+0x956>
 8013ac6:	0031      	movs	r1, r6
 8013ac8:	9805      	ldr	r0, [sp, #20]
 8013aca:	f000 fd6b 	bl	80145a4 <__mcmp>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	da3f      	bge.n	8013b52 <_dtoa_r+0x956>
 8013ad2:	9b04      	ldr	r3, [sp, #16]
 8013ad4:	220a      	movs	r2, #10
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ada:	9905      	ldr	r1, [sp, #20]
 8013adc:	2300      	movs	r3, #0
 8013ade:	9803      	ldr	r0, [sp, #12]
 8013ae0:	f000 faee 	bl	80140c0 <__multadd>
 8013ae4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ae6:	9005      	str	r0, [sp, #20]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d100      	bne.n	8013aee <_dtoa_r+0x8f2>
 8013aec:	e15c      	b.n	8013da8 <_dtoa_r+0xbac>
 8013aee:	2300      	movs	r3, #0
 8013af0:	0039      	movs	r1, r7
 8013af2:	220a      	movs	r2, #10
 8013af4:	9803      	ldr	r0, [sp, #12]
 8013af6:	f000 fae3 	bl	80140c0 <__multadd>
 8013afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013afc:	0007      	movs	r7, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	dc55      	bgt.n	8013bae <_dtoa_r+0x9b2>
 8013b02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013b04:	2b02      	cmp	r3, #2
 8013b06:	dc2d      	bgt.n	8013b64 <_dtoa_r+0x968>
 8013b08:	e051      	b.n	8013bae <_dtoa_r+0x9b2>
 8013b0a:	2336      	movs	r3, #54	@ 0x36
 8013b0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013b0e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013b10:	9c06      	ldr	r4, [sp, #24]
 8013b12:	1a9b      	subs	r3, r3, r2
 8013b14:	e73c      	b.n	8013990 <_dtoa_r+0x794>
 8013b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b18:	1e5d      	subs	r5, r3, #1
 8013b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b1c:	42ab      	cmp	r3, r5
 8013b1e:	db08      	blt.n	8013b32 <_dtoa_r+0x936>
 8013b20:	1b5d      	subs	r5, r3, r5
 8013b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b24:	9c06      	ldr	r4, [sp, #24]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	db00      	blt.n	8013b2c <_dtoa_r+0x930>
 8013b2a:	e731      	b.n	8013990 <_dtoa_r+0x794>
 8013b2c:	1ae4      	subs	r4, r4, r3
 8013b2e:	2300      	movs	r3, #0
 8013b30:	e72e      	b.n	8013990 <_dtoa_r+0x794>
 8013b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b34:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013b36:	1aeb      	subs	r3, r5, r3
 8013b38:	18d3      	adds	r3, r2, r3
 8013b3a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8013b3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8013b3e:	2500      	movs	r5, #0
 8013b40:	e7ef      	b.n	8013b22 <_dtoa_r+0x926>
 8013b42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013b44:	e75e      	b.n	8013a04 <_dtoa_r+0x808>
 8013b46:	2b04      	cmp	r3, #4
 8013b48:	d0a8      	beq.n	8013a9c <_dtoa_r+0x8a0>
 8013b4a:	331c      	adds	r3, #28
 8013b4c:	e79f      	b.n	8013a8e <_dtoa_r+0x892>
 8013b4e:	0013      	movs	r3, r2
 8013b50:	e7fb      	b.n	8013b4a <_dtoa_r+0x94e>
 8013b52:	9b04      	ldr	r3, [sp, #16]
 8013b54:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b58:	930e      	str	r3, [sp, #56]	@ 0x38
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	dc23      	bgt.n	8013ba6 <_dtoa_r+0x9aa>
 8013b5e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013b60:	2b02      	cmp	r3, #2
 8013b62:	dd20      	ble.n	8013ba6 <_dtoa_r+0x9aa>
 8013b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d000      	beq.n	8013b6c <_dtoa_r+0x970>
 8013b6a:	e6b5      	b.n	80138d8 <_dtoa_r+0x6dc>
 8013b6c:	0031      	movs	r1, r6
 8013b6e:	2205      	movs	r2, #5
 8013b70:	9803      	ldr	r0, [sp, #12]
 8013b72:	f000 faa5 	bl	80140c0 <__multadd>
 8013b76:	0006      	movs	r6, r0
 8013b78:	0001      	movs	r1, r0
 8013b7a:	9805      	ldr	r0, [sp, #20]
 8013b7c:	f000 fd12 	bl	80145a4 <__mcmp>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	dc00      	bgt.n	8013b86 <_dtoa_r+0x98a>
 8013b84:	e6a8      	b.n	80138d8 <_dtoa_r+0x6dc>
 8013b86:	9b08      	ldr	r3, [sp, #32]
 8013b88:	9a08      	ldr	r2, [sp, #32]
 8013b8a:	1c5c      	adds	r4, r3, #1
 8013b8c:	2331      	movs	r3, #49	@ 0x31
 8013b8e:	7013      	strb	r3, [r2, #0]
 8013b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b92:	3301      	adds	r3, #1
 8013b94:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b96:	e6a3      	b.n	80138e0 <_dtoa_r+0x6e4>
 8013b98:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013b9a:	0037      	movs	r7, r6
 8013b9c:	e7f3      	b.n	8013b86 <_dtoa_r+0x98a>
 8013b9e:	9b04      	ldr	r3, [sp, #16]
 8013ba0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013ba2:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ba4:	e7f9      	b.n	8013b9a <_dtoa_r+0x99e>
 8013ba6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d100      	bne.n	8013bae <_dtoa_r+0x9b2>
 8013bac:	e100      	b.n	8013db0 <_dtoa_r+0xbb4>
 8013bae:	2c00      	cmp	r4, #0
 8013bb0:	dd05      	ble.n	8013bbe <_dtoa_r+0x9c2>
 8013bb2:	0039      	movs	r1, r7
 8013bb4:	0022      	movs	r2, r4
 8013bb6:	9803      	ldr	r0, [sp, #12]
 8013bb8:	f000 fc88 	bl	80144cc <__lshift>
 8013bbc:	0007      	movs	r7, r0
 8013bbe:	0038      	movs	r0, r7
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	d018      	beq.n	8013bf6 <_dtoa_r+0x9fa>
 8013bc4:	6879      	ldr	r1, [r7, #4]
 8013bc6:	9803      	ldr	r0, [sp, #12]
 8013bc8:	f000 fa12 	bl	8013ff0 <_Balloc>
 8013bcc:	1e04      	subs	r4, r0, #0
 8013bce:	d105      	bne.n	8013bdc <_dtoa_r+0x9e0>
 8013bd0:	0022      	movs	r2, r4
 8013bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8013c80 <_dtoa_r+0xa84>)
 8013bd4:	482b      	ldr	r0, [pc, #172]	@ (8013c84 <_dtoa_r+0xa88>)
 8013bd6:	492c      	ldr	r1, [pc, #176]	@ (8013c88 <_dtoa_r+0xa8c>)
 8013bd8:	f7ff fb25 	bl	8013226 <_dtoa_r+0x2a>
 8013bdc:	0039      	movs	r1, r7
 8013bde:	693a      	ldr	r2, [r7, #16]
 8013be0:	310c      	adds	r1, #12
 8013be2:	3202      	adds	r2, #2
 8013be4:	0092      	lsls	r2, r2, #2
 8013be6:	300c      	adds	r0, #12
 8013be8:	f7ff fa70 	bl	80130cc <memcpy>
 8013bec:	2201      	movs	r2, #1
 8013bee:	0021      	movs	r1, r4
 8013bf0:	9803      	ldr	r0, [sp, #12]
 8013bf2:	f000 fc6b 	bl	80144cc <__lshift>
 8013bf6:	9b08      	ldr	r3, [sp, #32]
 8013bf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bfa:	9306      	str	r3, [sp, #24]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	189b      	adds	r3, r3, r2
 8013c00:	2201      	movs	r2, #1
 8013c02:	9704      	str	r7, [sp, #16]
 8013c04:	0007      	movs	r7, r0
 8013c06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c0a:	4013      	ands	r3, r2
 8013c0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8013c0e:	0031      	movs	r1, r6
 8013c10:	9805      	ldr	r0, [sp, #20]
 8013c12:	f7ff fa64 	bl	80130de <quorem>
 8013c16:	9904      	ldr	r1, [sp, #16]
 8013c18:	0005      	movs	r5, r0
 8013c1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8013c1c:	9805      	ldr	r0, [sp, #20]
 8013c1e:	f000 fcc1 	bl	80145a4 <__mcmp>
 8013c22:	003a      	movs	r2, r7
 8013c24:	900d      	str	r0, [sp, #52]	@ 0x34
 8013c26:	0031      	movs	r1, r6
 8013c28:	9803      	ldr	r0, [sp, #12]
 8013c2a:	f000 fcd7 	bl	80145dc <__mdiff>
 8013c2e:	2201      	movs	r2, #1
 8013c30:	68c3      	ldr	r3, [r0, #12]
 8013c32:	0004      	movs	r4, r0
 8013c34:	3530      	adds	r5, #48	@ 0x30
 8013c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d104      	bne.n	8013c46 <_dtoa_r+0xa4a>
 8013c3c:	0001      	movs	r1, r0
 8013c3e:	9805      	ldr	r0, [sp, #20]
 8013c40:	f000 fcb0 	bl	80145a4 <__mcmp>
 8013c44:	9009      	str	r0, [sp, #36]	@ 0x24
 8013c46:	0021      	movs	r1, r4
 8013c48:	9803      	ldr	r0, [sp, #12]
 8013c4a:	f000 fa15 	bl	8014078 <_Bfree>
 8013c4e:	9b06      	ldr	r3, [sp, #24]
 8013c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c52:	1c5c      	adds	r4, r3, #1
 8013c54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013c56:	4313      	orrs	r3, r2
 8013c58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c5a:	4313      	orrs	r3, r2
 8013c5c:	d116      	bne.n	8013c8c <_dtoa_r+0xa90>
 8013c5e:	2d39      	cmp	r5, #57	@ 0x39
 8013c60:	d02f      	beq.n	8013cc2 <_dtoa_r+0xac6>
 8013c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	dd01      	ble.n	8013c6c <_dtoa_r+0xa70>
 8013c68:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013c6a:	3531      	adds	r5, #49	@ 0x31
 8013c6c:	9b06      	ldr	r3, [sp, #24]
 8013c6e:	701d      	strb	r5, [r3, #0]
 8013c70:	e638      	b.n	80138e4 <_dtoa_r+0x6e8>
 8013c72:	46c0      	nop			@ (mov r8, r8)
 8013c74:	40240000 	.word	0x40240000
 8013c78:	00000433 	.word	0x00000433
 8013c7c:	7ff00000 	.word	0x7ff00000
 8013c80:	080171f5 	.word	0x080171f5
 8013c84:	0801719d 	.word	0x0801719d
 8013c88:	000002ef 	.word	0x000002ef
 8013c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	db04      	blt.n	8013c9c <_dtoa_r+0xaa0>
 8013c92:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013c94:	4313      	orrs	r3, r2
 8013c96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c98:	4313      	orrs	r3, r2
 8013c9a:	d11e      	bne.n	8013cda <_dtoa_r+0xade>
 8013c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	dde4      	ble.n	8013c6c <_dtoa_r+0xa70>
 8013ca2:	9905      	ldr	r1, [sp, #20]
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	9803      	ldr	r0, [sp, #12]
 8013ca8:	f000 fc10 	bl	80144cc <__lshift>
 8013cac:	0031      	movs	r1, r6
 8013cae:	9005      	str	r0, [sp, #20]
 8013cb0:	f000 fc78 	bl	80145a4 <__mcmp>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	dc02      	bgt.n	8013cbe <_dtoa_r+0xac2>
 8013cb8:	d1d8      	bne.n	8013c6c <_dtoa_r+0xa70>
 8013cba:	07eb      	lsls	r3, r5, #31
 8013cbc:	d5d6      	bpl.n	8013c6c <_dtoa_r+0xa70>
 8013cbe:	2d39      	cmp	r5, #57	@ 0x39
 8013cc0:	d1d2      	bne.n	8013c68 <_dtoa_r+0xa6c>
 8013cc2:	2339      	movs	r3, #57	@ 0x39
 8013cc4:	9a06      	ldr	r2, [sp, #24]
 8013cc6:	7013      	strb	r3, [r2, #0]
 8013cc8:	0023      	movs	r3, r4
 8013cca:	001c      	movs	r4, r3
 8013ccc:	3b01      	subs	r3, #1
 8013cce:	781a      	ldrb	r2, [r3, #0]
 8013cd0:	2a39      	cmp	r2, #57	@ 0x39
 8013cd2:	d04f      	beq.n	8013d74 <_dtoa_r+0xb78>
 8013cd4:	3201      	adds	r2, #1
 8013cd6:	701a      	strb	r2, [r3, #0]
 8013cd8:	e604      	b.n	80138e4 <_dtoa_r+0x6e8>
 8013cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	dd03      	ble.n	8013ce8 <_dtoa_r+0xaec>
 8013ce0:	2d39      	cmp	r5, #57	@ 0x39
 8013ce2:	d0ee      	beq.n	8013cc2 <_dtoa_r+0xac6>
 8013ce4:	3501      	adds	r5, #1
 8013ce6:	e7c1      	b.n	8013c6c <_dtoa_r+0xa70>
 8013ce8:	9b06      	ldr	r3, [sp, #24]
 8013cea:	9a06      	ldr	r2, [sp, #24]
 8013cec:	701d      	strb	r5, [r3, #0]
 8013cee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d02a      	beq.n	8013d4a <_dtoa_r+0xb4e>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	220a      	movs	r2, #10
 8013cf8:	9905      	ldr	r1, [sp, #20]
 8013cfa:	9803      	ldr	r0, [sp, #12]
 8013cfc:	f000 f9e0 	bl	80140c0 <__multadd>
 8013d00:	9b04      	ldr	r3, [sp, #16]
 8013d02:	9005      	str	r0, [sp, #20]
 8013d04:	42bb      	cmp	r3, r7
 8013d06:	d109      	bne.n	8013d1c <_dtoa_r+0xb20>
 8013d08:	2300      	movs	r3, #0
 8013d0a:	220a      	movs	r2, #10
 8013d0c:	9904      	ldr	r1, [sp, #16]
 8013d0e:	9803      	ldr	r0, [sp, #12]
 8013d10:	f000 f9d6 	bl	80140c0 <__multadd>
 8013d14:	9004      	str	r0, [sp, #16]
 8013d16:	0007      	movs	r7, r0
 8013d18:	9406      	str	r4, [sp, #24]
 8013d1a:	e778      	b.n	8013c0e <_dtoa_r+0xa12>
 8013d1c:	9904      	ldr	r1, [sp, #16]
 8013d1e:	2300      	movs	r3, #0
 8013d20:	220a      	movs	r2, #10
 8013d22:	9803      	ldr	r0, [sp, #12]
 8013d24:	f000 f9cc 	bl	80140c0 <__multadd>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	9004      	str	r0, [sp, #16]
 8013d2c:	220a      	movs	r2, #10
 8013d2e:	0039      	movs	r1, r7
 8013d30:	9803      	ldr	r0, [sp, #12]
 8013d32:	f000 f9c5 	bl	80140c0 <__multadd>
 8013d36:	e7ee      	b.n	8013d16 <_dtoa_r+0xb1a>
 8013d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d3a:	2401      	movs	r4, #1
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	dd00      	ble.n	8013d42 <_dtoa_r+0xb46>
 8013d40:	001c      	movs	r4, r3
 8013d42:	9b08      	ldr	r3, [sp, #32]
 8013d44:	191c      	adds	r4, r3, r4
 8013d46:	2300      	movs	r3, #0
 8013d48:	9304      	str	r3, [sp, #16]
 8013d4a:	9905      	ldr	r1, [sp, #20]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	9803      	ldr	r0, [sp, #12]
 8013d50:	f000 fbbc 	bl	80144cc <__lshift>
 8013d54:	0031      	movs	r1, r6
 8013d56:	9005      	str	r0, [sp, #20]
 8013d58:	f000 fc24 	bl	80145a4 <__mcmp>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	dcb3      	bgt.n	8013cc8 <_dtoa_r+0xacc>
 8013d60:	d101      	bne.n	8013d66 <_dtoa_r+0xb6a>
 8013d62:	07ed      	lsls	r5, r5, #31
 8013d64:	d4b0      	bmi.n	8013cc8 <_dtoa_r+0xacc>
 8013d66:	0023      	movs	r3, r4
 8013d68:	001c      	movs	r4, r3
 8013d6a:	3b01      	subs	r3, #1
 8013d6c:	781a      	ldrb	r2, [r3, #0]
 8013d6e:	2a30      	cmp	r2, #48	@ 0x30
 8013d70:	d0fa      	beq.n	8013d68 <_dtoa_r+0xb6c>
 8013d72:	e5b7      	b.n	80138e4 <_dtoa_r+0x6e8>
 8013d74:	9a08      	ldr	r2, [sp, #32]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d1a7      	bne.n	8013cca <_dtoa_r+0xace>
 8013d7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013d80:	2331      	movs	r3, #49	@ 0x31
 8013d82:	7013      	strb	r3, [r2, #0]
 8013d84:	e5ae      	b.n	80138e4 <_dtoa_r+0x6e8>
 8013d86:	4b15      	ldr	r3, [pc, #84]	@ (8013ddc <_dtoa_r+0xbe0>)
 8013d88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013d8a:	9308      	str	r3, [sp, #32]
 8013d8c:	4b14      	ldr	r3, [pc, #80]	@ (8013de0 <_dtoa_r+0xbe4>)
 8013d8e:	2a00      	cmp	r2, #0
 8013d90:	d001      	beq.n	8013d96 <_dtoa_r+0xb9a>
 8013d92:	f7ff fa7b 	bl	801328c <_dtoa_r+0x90>
 8013d96:	f7ff fa7b 	bl	8013290 <_dtoa_r+0x94>
 8013d9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013d9c:	2b01      	cmp	r3, #1
 8013d9e:	dc00      	bgt.n	8013da2 <_dtoa_r+0xba6>
 8013da0:	e648      	b.n	8013a34 <_dtoa_r+0x838>
 8013da2:	2001      	movs	r0, #1
 8013da4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8013da6:	e665      	b.n	8013a74 <_dtoa_r+0x878>
 8013da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	dc00      	bgt.n	8013db0 <_dtoa_r+0xbb4>
 8013dae:	e6d6      	b.n	8013b5e <_dtoa_r+0x962>
 8013db0:	2400      	movs	r4, #0
 8013db2:	0031      	movs	r1, r6
 8013db4:	9805      	ldr	r0, [sp, #20]
 8013db6:	f7ff f992 	bl	80130de <quorem>
 8013dba:	9b08      	ldr	r3, [sp, #32]
 8013dbc:	3030      	adds	r0, #48	@ 0x30
 8013dbe:	5518      	strb	r0, [r3, r4]
 8013dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013dc2:	3401      	adds	r4, #1
 8013dc4:	0005      	movs	r5, r0
 8013dc6:	429c      	cmp	r4, r3
 8013dc8:	dab6      	bge.n	8013d38 <_dtoa_r+0xb3c>
 8013dca:	2300      	movs	r3, #0
 8013dcc:	220a      	movs	r2, #10
 8013dce:	9905      	ldr	r1, [sp, #20]
 8013dd0:	9803      	ldr	r0, [sp, #12]
 8013dd2:	f000 f975 	bl	80140c0 <__multadd>
 8013dd6:	9005      	str	r0, [sp, #20]
 8013dd8:	e7eb      	b.n	8013db2 <_dtoa_r+0xbb6>
 8013dda:	46c0      	nop			@ (mov r8, r8)
 8013ddc:	08017179 	.word	0x08017179
 8013de0:	08017181 	.word	0x08017181

08013de4 <_free_r>:
 8013de4:	b570      	push	{r4, r5, r6, lr}
 8013de6:	0005      	movs	r5, r0
 8013de8:	1e0c      	subs	r4, r1, #0
 8013dea:	d010      	beq.n	8013e0e <_free_r+0x2a>
 8013dec:	3c04      	subs	r4, #4
 8013dee:	6823      	ldr	r3, [r4, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	da00      	bge.n	8013df6 <_free_r+0x12>
 8013df4:	18e4      	adds	r4, r4, r3
 8013df6:	0028      	movs	r0, r5
 8013df8:	f000 f8ea 	bl	8013fd0 <__malloc_lock>
 8013dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8013e74 <_free_r+0x90>)
 8013dfe:	6813      	ldr	r3, [r2, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d105      	bne.n	8013e10 <_free_r+0x2c>
 8013e04:	6063      	str	r3, [r4, #4]
 8013e06:	6014      	str	r4, [r2, #0]
 8013e08:	0028      	movs	r0, r5
 8013e0a:	f000 f8e9 	bl	8013fe0 <__malloc_unlock>
 8013e0e:	bd70      	pop	{r4, r5, r6, pc}
 8013e10:	42a3      	cmp	r3, r4
 8013e12:	d908      	bls.n	8013e26 <_free_r+0x42>
 8013e14:	6820      	ldr	r0, [r4, #0]
 8013e16:	1821      	adds	r1, r4, r0
 8013e18:	428b      	cmp	r3, r1
 8013e1a:	d1f3      	bne.n	8013e04 <_free_r+0x20>
 8013e1c:	6819      	ldr	r1, [r3, #0]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	1809      	adds	r1, r1, r0
 8013e22:	6021      	str	r1, [r4, #0]
 8013e24:	e7ee      	b.n	8013e04 <_free_r+0x20>
 8013e26:	001a      	movs	r2, r3
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d001      	beq.n	8013e32 <_free_r+0x4e>
 8013e2e:	42a3      	cmp	r3, r4
 8013e30:	d9f9      	bls.n	8013e26 <_free_r+0x42>
 8013e32:	6811      	ldr	r1, [r2, #0]
 8013e34:	1850      	adds	r0, r2, r1
 8013e36:	42a0      	cmp	r0, r4
 8013e38:	d10b      	bne.n	8013e52 <_free_r+0x6e>
 8013e3a:	6820      	ldr	r0, [r4, #0]
 8013e3c:	1809      	adds	r1, r1, r0
 8013e3e:	1850      	adds	r0, r2, r1
 8013e40:	6011      	str	r1, [r2, #0]
 8013e42:	4283      	cmp	r3, r0
 8013e44:	d1e0      	bne.n	8013e08 <_free_r+0x24>
 8013e46:	6818      	ldr	r0, [r3, #0]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	1841      	adds	r1, r0, r1
 8013e4c:	6011      	str	r1, [r2, #0]
 8013e4e:	6053      	str	r3, [r2, #4]
 8013e50:	e7da      	b.n	8013e08 <_free_r+0x24>
 8013e52:	42a0      	cmp	r0, r4
 8013e54:	d902      	bls.n	8013e5c <_free_r+0x78>
 8013e56:	230c      	movs	r3, #12
 8013e58:	602b      	str	r3, [r5, #0]
 8013e5a:	e7d5      	b.n	8013e08 <_free_r+0x24>
 8013e5c:	6820      	ldr	r0, [r4, #0]
 8013e5e:	1821      	adds	r1, r4, r0
 8013e60:	428b      	cmp	r3, r1
 8013e62:	d103      	bne.n	8013e6c <_free_r+0x88>
 8013e64:	6819      	ldr	r1, [r3, #0]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	1809      	adds	r1, r1, r0
 8013e6a:	6021      	str	r1, [r4, #0]
 8013e6c:	6063      	str	r3, [r4, #4]
 8013e6e:	6054      	str	r4, [r2, #4]
 8013e70:	e7ca      	b.n	8013e08 <_free_r+0x24>
 8013e72:	46c0      	nop			@ (mov r8, r8)
 8013e74:	20007290 	.word	0x20007290

08013e78 <malloc>:
 8013e78:	b510      	push	{r4, lr}
 8013e7a:	4b03      	ldr	r3, [pc, #12]	@ (8013e88 <malloc+0x10>)
 8013e7c:	0001      	movs	r1, r0
 8013e7e:	6818      	ldr	r0, [r3, #0]
 8013e80:	f000 f826 	bl	8013ed0 <_malloc_r>
 8013e84:	bd10      	pop	{r4, pc}
 8013e86:	46c0      	nop			@ (mov r8, r8)
 8013e88:	20000098 	.word	0x20000098

08013e8c <sbrk_aligned>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8013ecc <sbrk_aligned+0x40>)
 8013e90:	000d      	movs	r5, r1
 8013e92:	6831      	ldr	r1, [r6, #0]
 8013e94:	0004      	movs	r4, r0
 8013e96:	2900      	cmp	r1, #0
 8013e98:	d102      	bne.n	8013ea0 <sbrk_aligned+0x14>
 8013e9a:	f001 fe47 	bl	8015b2c <_sbrk_r>
 8013e9e:	6030      	str	r0, [r6, #0]
 8013ea0:	0029      	movs	r1, r5
 8013ea2:	0020      	movs	r0, r4
 8013ea4:	f001 fe42 	bl	8015b2c <_sbrk_r>
 8013ea8:	1c43      	adds	r3, r0, #1
 8013eaa:	d103      	bne.n	8013eb4 <sbrk_aligned+0x28>
 8013eac:	2501      	movs	r5, #1
 8013eae:	426d      	negs	r5, r5
 8013eb0:	0028      	movs	r0, r5
 8013eb2:	bd70      	pop	{r4, r5, r6, pc}
 8013eb4:	2303      	movs	r3, #3
 8013eb6:	1cc5      	adds	r5, r0, #3
 8013eb8:	439d      	bics	r5, r3
 8013eba:	42a8      	cmp	r0, r5
 8013ebc:	d0f8      	beq.n	8013eb0 <sbrk_aligned+0x24>
 8013ebe:	1a29      	subs	r1, r5, r0
 8013ec0:	0020      	movs	r0, r4
 8013ec2:	f001 fe33 	bl	8015b2c <_sbrk_r>
 8013ec6:	3001      	adds	r0, #1
 8013ec8:	d1f2      	bne.n	8013eb0 <sbrk_aligned+0x24>
 8013eca:	e7ef      	b.n	8013eac <sbrk_aligned+0x20>
 8013ecc:	2000728c 	.word	0x2000728c

08013ed0 <_malloc_r>:
 8013ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ed2:	2203      	movs	r2, #3
 8013ed4:	1ccb      	adds	r3, r1, #3
 8013ed6:	4393      	bics	r3, r2
 8013ed8:	3308      	adds	r3, #8
 8013eda:	0005      	movs	r5, r0
 8013edc:	001f      	movs	r7, r3
 8013ede:	2b0c      	cmp	r3, #12
 8013ee0:	d234      	bcs.n	8013f4c <_malloc_r+0x7c>
 8013ee2:	270c      	movs	r7, #12
 8013ee4:	42b9      	cmp	r1, r7
 8013ee6:	d833      	bhi.n	8013f50 <_malloc_r+0x80>
 8013ee8:	0028      	movs	r0, r5
 8013eea:	f000 f871 	bl	8013fd0 <__malloc_lock>
 8013eee:	4e37      	ldr	r6, [pc, #220]	@ (8013fcc <_malloc_r+0xfc>)
 8013ef0:	6833      	ldr	r3, [r6, #0]
 8013ef2:	001c      	movs	r4, r3
 8013ef4:	2c00      	cmp	r4, #0
 8013ef6:	d12f      	bne.n	8013f58 <_malloc_r+0x88>
 8013ef8:	0039      	movs	r1, r7
 8013efa:	0028      	movs	r0, r5
 8013efc:	f7ff ffc6 	bl	8013e8c <sbrk_aligned>
 8013f00:	0004      	movs	r4, r0
 8013f02:	1c43      	adds	r3, r0, #1
 8013f04:	d15f      	bne.n	8013fc6 <_malloc_r+0xf6>
 8013f06:	6834      	ldr	r4, [r6, #0]
 8013f08:	9400      	str	r4, [sp, #0]
 8013f0a:	9b00      	ldr	r3, [sp, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d14a      	bne.n	8013fa6 <_malloc_r+0xd6>
 8013f10:	2c00      	cmp	r4, #0
 8013f12:	d052      	beq.n	8013fba <_malloc_r+0xea>
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	0028      	movs	r0, r5
 8013f18:	18e3      	adds	r3, r4, r3
 8013f1a:	9900      	ldr	r1, [sp, #0]
 8013f1c:	9301      	str	r3, [sp, #4]
 8013f1e:	f001 fe05 	bl	8015b2c <_sbrk_r>
 8013f22:	9b01      	ldr	r3, [sp, #4]
 8013f24:	4283      	cmp	r3, r0
 8013f26:	d148      	bne.n	8013fba <_malloc_r+0xea>
 8013f28:	6823      	ldr	r3, [r4, #0]
 8013f2a:	0028      	movs	r0, r5
 8013f2c:	1aff      	subs	r7, r7, r3
 8013f2e:	0039      	movs	r1, r7
 8013f30:	f7ff ffac 	bl	8013e8c <sbrk_aligned>
 8013f34:	3001      	adds	r0, #1
 8013f36:	d040      	beq.n	8013fba <_malloc_r+0xea>
 8013f38:	6823      	ldr	r3, [r4, #0]
 8013f3a:	19db      	adds	r3, r3, r7
 8013f3c:	6023      	str	r3, [r4, #0]
 8013f3e:	6833      	ldr	r3, [r6, #0]
 8013f40:	685a      	ldr	r2, [r3, #4]
 8013f42:	2a00      	cmp	r2, #0
 8013f44:	d133      	bne.n	8013fae <_malloc_r+0xde>
 8013f46:	9b00      	ldr	r3, [sp, #0]
 8013f48:	6033      	str	r3, [r6, #0]
 8013f4a:	e019      	b.n	8013f80 <_malloc_r+0xb0>
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dac9      	bge.n	8013ee4 <_malloc_r+0x14>
 8013f50:	230c      	movs	r3, #12
 8013f52:	602b      	str	r3, [r5, #0]
 8013f54:	2000      	movs	r0, #0
 8013f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013f58:	6821      	ldr	r1, [r4, #0]
 8013f5a:	1bc9      	subs	r1, r1, r7
 8013f5c:	d420      	bmi.n	8013fa0 <_malloc_r+0xd0>
 8013f5e:	290b      	cmp	r1, #11
 8013f60:	d90a      	bls.n	8013f78 <_malloc_r+0xa8>
 8013f62:	19e2      	adds	r2, r4, r7
 8013f64:	6027      	str	r7, [r4, #0]
 8013f66:	42a3      	cmp	r3, r4
 8013f68:	d104      	bne.n	8013f74 <_malloc_r+0xa4>
 8013f6a:	6032      	str	r2, [r6, #0]
 8013f6c:	6863      	ldr	r3, [r4, #4]
 8013f6e:	6011      	str	r1, [r2, #0]
 8013f70:	6053      	str	r3, [r2, #4]
 8013f72:	e005      	b.n	8013f80 <_malloc_r+0xb0>
 8013f74:	605a      	str	r2, [r3, #4]
 8013f76:	e7f9      	b.n	8013f6c <_malloc_r+0x9c>
 8013f78:	6862      	ldr	r2, [r4, #4]
 8013f7a:	42a3      	cmp	r3, r4
 8013f7c:	d10e      	bne.n	8013f9c <_malloc_r+0xcc>
 8013f7e:	6032      	str	r2, [r6, #0]
 8013f80:	0028      	movs	r0, r5
 8013f82:	f000 f82d 	bl	8013fe0 <__malloc_unlock>
 8013f86:	0020      	movs	r0, r4
 8013f88:	2207      	movs	r2, #7
 8013f8a:	300b      	adds	r0, #11
 8013f8c:	1d23      	adds	r3, r4, #4
 8013f8e:	4390      	bics	r0, r2
 8013f90:	1ac2      	subs	r2, r0, r3
 8013f92:	4298      	cmp	r0, r3
 8013f94:	d0df      	beq.n	8013f56 <_malloc_r+0x86>
 8013f96:	1a1b      	subs	r3, r3, r0
 8013f98:	50a3      	str	r3, [r4, r2]
 8013f9a:	e7dc      	b.n	8013f56 <_malloc_r+0x86>
 8013f9c:	605a      	str	r2, [r3, #4]
 8013f9e:	e7ef      	b.n	8013f80 <_malloc_r+0xb0>
 8013fa0:	0023      	movs	r3, r4
 8013fa2:	6864      	ldr	r4, [r4, #4]
 8013fa4:	e7a6      	b.n	8013ef4 <_malloc_r+0x24>
 8013fa6:	9c00      	ldr	r4, [sp, #0]
 8013fa8:	6863      	ldr	r3, [r4, #4]
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	e7ad      	b.n	8013f0a <_malloc_r+0x3a>
 8013fae:	001a      	movs	r2, r3
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	42a3      	cmp	r3, r4
 8013fb4:	d1fb      	bne.n	8013fae <_malloc_r+0xde>
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	e7da      	b.n	8013f70 <_malloc_r+0xa0>
 8013fba:	230c      	movs	r3, #12
 8013fbc:	0028      	movs	r0, r5
 8013fbe:	602b      	str	r3, [r5, #0]
 8013fc0:	f000 f80e 	bl	8013fe0 <__malloc_unlock>
 8013fc4:	e7c6      	b.n	8013f54 <_malloc_r+0x84>
 8013fc6:	6007      	str	r7, [r0, #0]
 8013fc8:	e7da      	b.n	8013f80 <_malloc_r+0xb0>
 8013fca:	46c0      	nop			@ (mov r8, r8)
 8013fcc:	20007290 	.word	0x20007290

08013fd0 <__malloc_lock>:
 8013fd0:	b510      	push	{r4, lr}
 8013fd2:	4802      	ldr	r0, [pc, #8]	@ (8013fdc <__malloc_lock+0xc>)
 8013fd4:	f7ff f86d 	bl	80130b2 <__retarget_lock_acquire_recursive>
 8013fd8:	bd10      	pop	{r4, pc}
 8013fda:	46c0      	nop			@ (mov r8, r8)
 8013fdc:	20007288 	.word	0x20007288

08013fe0 <__malloc_unlock>:
 8013fe0:	b510      	push	{r4, lr}
 8013fe2:	4802      	ldr	r0, [pc, #8]	@ (8013fec <__malloc_unlock+0xc>)
 8013fe4:	f7ff f866 	bl	80130b4 <__retarget_lock_release_recursive>
 8013fe8:	bd10      	pop	{r4, pc}
 8013fea:	46c0      	nop			@ (mov r8, r8)
 8013fec:	20007288 	.word	0x20007288

08013ff0 <_Balloc>:
 8013ff0:	b570      	push	{r4, r5, r6, lr}
 8013ff2:	69c5      	ldr	r5, [r0, #28]
 8013ff4:	0006      	movs	r6, r0
 8013ff6:	000c      	movs	r4, r1
 8013ff8:	2d00      	cmp	r5, #0
 8013ffa:	d10e      	bne.n	801401a <_Balloc+0x2a>
 8013ffc:	2010      	movs	r0, #16
 8013ffe:	f7ff ff3b 	bl	8013e78 <malloc>
 8014002:	1e02      	subs	r2, r0, #0
 8014004:	61f0      	str	r0, [r6, #28]
 8014006:	d104      	bne.n	8014012 <_Balloc+0x22>
 8014008:	216b      	movs	r1, #107	@ 0x6b
 801400a:	4b19      	ldr	r3, [pc, #100]	@ (8014070 <_Balloc+0x80>)
 801400c:	4819      	ldr	r0, [pc, #100]	@ (8014074 <_Balloc+0x84>)
 801400e:	f001 fda5 	bl	8015b5c <__assert_func>
 8014012:	6045      	str	r5, [r0, #4]
 8014014:	6085      	str	r5, [r0, #8]
 8014016:	6005      	str	r5, [r0, #0]
 8014018:	60c5      	str	r5, [r0, #12]
 801401a:	69f5      	ldr	r5, [r6, #28]
 801401c:	68eb      	ldr	r3, [r5, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d013      	beq.n	801404a <_Balloc+0x5a>
 8014022:	69f3      	ldr	r3, [r6, #28]
 8014024:	00a2      	lsls	r2, r4, #2
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	189b      	adds	r3, r3, r2
 801402a:	6818      	ldr	r0, [r3, #0]
 801402c:	2800      	cmp	r0, #0
 801402e:	d118      	bne.n	8014062 <_Balloc+0x72>
 8014030:	2101      	movs	r1, #1
 8014032:	000d      	movs	r5, r1
 8014034:	40a5      	lsls	r5, r4
 8014036:	1d6a      	adds	r2, r5, #5
 8014038:	0030      	movs	r0, r6
 801403a:	0092      	lsls	r2, r2, #2
 801403c:	f001 fdac 	bl	8015b98 <_calloc_r>
 8014040:	2800      	cmp	r0, #0
 8014042:	d00c      	beq.n	801405e <_Balloc+0x6e>
 8014044:	6044      	str	r4, [r0, #4]
 8014046:	6085      	str	r5, [r0, #8]
 8014048:	e00d      	b.n	8014066 <_Balloc+0x76>
 801404a:	2221      	movs	r2, #33	@ 0x21
 801404c:	2104      	movs	r1, #4
 801404e:	0030      	movs	r0, r6
 8014050:	f001 fda2 	bl	8015b98 <_calloc_r>
 8014054:	69f3      	ldr	r3, [r6, #28]
 8014056:	60e8      	str	r0, [r5, #12]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d1e1      	bne.n	8014022 <_Balloc+0x32>
 801405e:	2000      	movs	r0, #0
 8014060:	bd70      	pop	{r4, r5, r6, pc}
 8014062:	6802      	ldr	r2, [r0, #0]
 8014064:	601a      	str	r2, [r3, #0]
 8014066:	2300      	movs	r3, #0
 8014068:	6103      	str	r3, [r0, #16]
 801406a:	60c3      	str	r3, [r0, #12]
 801406c:	e7f8      	b.n	8014060 <_Balloc+0x70>
 801406e:	46c0      	nop			@ (mov r8, r8)
 8014070:	08017186 	.word	0x08017186
 8014074:	08017206 	.word	0x08017206

08014078 <_Bfree>:
 8014078:	b570      	push	{r4, r5, r6, lr}
 801407a:	69c6      	ldr	r6, [r0, #28]
 801407c:	0005      	movs	r5, r0
 801407e:	000c      	movs	r4, r1
 8014080:	2e00      	cmp	r6, #0
 8014082:	d10e      	bne.n	80140a2 <_Bfree+0x2a>
 8014084:	2010      	movs	r0, #16
 8014086:	f7ff fef7 	bl	8013e78 <malloc>
 801408a:	1e02      	subs	r2, r0, #0
 801408c:	61e8      	str	r0, [r5, #28]
 801408e:	d104      	bne.n	801409a <_Bfree+0x22>
 8014090:	218f      	movs	r1, #143	@ 0x8f
 8014092:	4b09      	ldr	r3, [pc, #36]	@ (80140b8 <_Bfree+0x40>)
 8014094:	4809      	ldr	r0, [pc, #36]	@ (80140bc <_Bfree+0x44>)
 8014096:	f001 fd61 	bl	8015b5c <__assert_func>
 801409a:	6046      	str	r6, [r0, #4]
 801409c:	6086      	str	r6, [r0, #8]
 801409e:	6006      	str	r6, [r0, #0]
 80140a0:	60c6      	str	r6, [r0, #12]
 80140a2:	2c00      	cmp	r4, #0
 80140a4:	d007      	beq.n	80140b6 <_Bfree+0x3e>
 80140a6:	69eb      	ldr	r3, [r5, #28]
 80140a8:	6862      	ldr	r2, [r4, #4]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	0092      	lsls	r2, r2, #2
 80140ae:	189b      	adds	r3, r3, r2
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	6022      	str	r2, [r4, #0]
 80140b4:	601c      	str	r4, [r3, #0]
 80140b6:	bd70      	pop	{r4, r5, r6, pc}
 80140b8:	08017186 	.word	0x08017186
 80140bc:	08017206 	.word	0x08017206

080140c0 <__multadd>:
 80140c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140c2:	000f      	movs	r7, r1
 80140c4:	9001      	str	r0, [sp, #4]
 80140c6:	000c      	movs	r4, r1
 80140c8:	001e      	movs	r6, r3
 80140ca:	2000      	movs	r0, #0
 80140cc:	690d      	ldr	r5, [r1, #16]
 80140ce:	3714      	adds	r7, #20
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	3001      	adds	r0, #1
 80140d4:	b299      	uxth	r1, r3
 80140d6:	4351      	muls	r1, r2
 80140d8:	0c1b      	lsrs	r3, r3, #16
 80140da:	4353      	muls	r3, r2
 80140dc:	1989      	adds	r1, r1, r6
 80140de:	0c0e      	lsrs	r6, r1, #16
 80140e0:	199b      	adds	r3, r3, r6
 80140e2:	0c1e      	lsrs	r6, r3, #16
 80140e4:	b289      	uxth	r1, r1
 80140e6:	041b      	lsls	r3, r3, #16
 80140e8:	185b      	adds	r3, r3, r1
 80140ea:	c708      	stmia	r7!, {r3}
 80140ec:	4285      	cmp	r5, r0
 80140ee:	dcef      	bgt.n	80140d0 <__multadd+0x10>
 80140f0:	2e00      	cmp	r6, #0
 80140f2:	d022      	beq.n	801413a <__multadd+0x7a>
 80140f4:	68a3      	ldr	r3, [r4, #8]
 80140f6:	42ab      	cmp	r3, r5
 80140f8:	dc19      	bgt.n	801412e <__multadd+0x6e>
 80140fa:	6861      	ldr	r1, [r4, #4]
 80140fc:	9801      	ldr	r0, [sp, #4]
 80140fe:	3101      	adds	r1, #1
 8014100:	f7ff ff76 	bl	8013ff0 <_Balloc>
 8014104:	1e07      	subs	r7, r0, #0
 8014106:	d105      	bne.n	8014114 <__multadd+0x54>
 8014108:	003a      	movs	r2, r7
 801410a:	21ba      	movs	r1, #186	@ 0xba
 801410c:	4b0c      	ldr	r3, [pc, #48]	@ (8014140 <__multadd+0x80>)
 801410e:	480d      	ldr	r0, [pc, #52]	@ (8014144 <__multadd+0x84>)
 8014110:	f001 fd24 	bl	8015b5c <__assert_func>
 8014114:	0021      	movs	r1, r4
 8014116:	6922      	ldr	r2, [r4, #16]
 8014118:	310c      	adds	r1, #12
 801411a:	3202      	adds	r2, #2
 801411c:	0092      	lsls	r2, r2, #2
 801411e:	300c      	adds	r0, #12
 8014120:	f7fe ffd4 	bl	80130cc <memcpy>
 8014124:	0021      	movs	r1, r4
 8014126:	9801      	ldr	r0, [sp, #4]
 8014128:	f7ff ffa6 	bl	8014078 <_Bfree>
 801412c:	003c      	movs	r4, r7
 801412e:	1d2b      	adds	r3, r5, #4
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	18e3      	adds	r3, r4, r3
 8014134:	3501      	adds	r5, #1
 8014136:	605e      	str	r6, [r3, #4]
 8014138:	6125      	str	r5, [r4, #16]
 801413a:	0020      	movs	r0, r4
 801413c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801413e:	46c0      	nop			@ (mov r8, r8)
 8014140:	080171f5 	.word	0x080171f5
 8014144:	08017206 	.word	0x08017206

08014148 <__s2b>:
 8014148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801414a:	0007      	movs	r7, r0
 801414c:	0018      	movs	r0, r3
 801414e:	000c      	movs	r4, r1
 8014150:	3008      	adds	r0, #8
 8014152:	2109      	movs	r1, #9
 8014154:	9301      	str	r3, [sp, #4]
 8014156:	0015      	movs	r5, r2
 8014158:	f7ec f87c 	bl	8000254 <__divsi3>
 801415c:	2301      	movs	r3, #1
 801415e:	2100      	movs	r1, #0
 8014160:	4283      	cmp	r3, r0
 8014162:	db0a      	blt.n	801417a <__s2b+0x32>
 8014164:	0038      	movs	r0, r7
 8014166:	f7ff ff43 	bl	8013ff0 <_Balloc>
 801416a:	1e01      	subs	r1, r0, #0
 801416c:	d108      	bne.n	8014180 <__s2b+0x38>
 801416e:	000a      	movs	r2, r1
 8014170:	4b19      	ldr	r3, [pc, #100]	@ (80141d8 <__s2b+0x90>)
 8014172:	481a      	ldr	r0, [pc, #104]	@ (80141dc <__s2b+0x94>)
 8014174:	31d3      	adds	r1, #211	@ 0xd3
 8014176:	f001 fcf1 	bl	8015b5c <__assert_func>
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	3101      	adds	r1, #1
 801417e:	e7ef      	b.n	8014160 <__s2b+0x18>
 8014180:	9b08      	ldr	r3, [sp, #32]
 8014182:	6143      	str	r3, [r0, #20]
 8014184:	2301      	movs	r3, #1
 8014186:	6103      	str	r3, [r0, #16]
 8014188:	2d09      	cmp	r5, #9
 801418a:	dd18      	ble.n	80141be <__s2b+0x76>
 801418c:	0023      	movs	r3, r4
 801418e:	3309      	adds	r3, #9
 8014190:	001e      	movs	r6, r3
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	1964      	adds	r4, r4, r5
 8014196:	7833      	ldrb	r3, [r6, #0]
 8014198:	220a      	movs	r2, #10
 801419a:	0038      	movs	r0, r7
 801419c:	3b30      	subs	r3, #48	@ 0x30
 801419e:	f7ff ff8f 	bl	80140c0 <__multadd>
 80141a2:	3601      	adds	r6, #1
 80141a4:	0001      	movs	r1, r0
 80141a6:	42a6      	cmp	r6, r4
 80141a8:	d1f5      	bne.n	8014196 <__s2b+0x4e>
 80141aa:	002c      	movs	r4, r5
 80141ac:	9b00      	ldr	r3, [sp, #0]
 80141ae:	3c08      	subs	r4, #8
 80141b0:	191c      	adds	r4, r3, r4
 80141b2:	002e      	movs	r6, r5
 80141b4:	9b01      	ldr	r3, [sp, #4]
 80141b6:	429e      	cmp	r6, r3
 80141b8:	db04      	blt.n	80141c4 <__s2b+0x7c>
 80141ba:	0008      	movs	r0, r1
 80141bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80141be:	2509      	movs	r5, #9
 80141c0:	340a      	adds	r4, #10
 80141c2:	e7f6      	b.n	80141b2 <__s2b+0x6a>
 80141c4:	1b63      	subs	r3, r4, r5
 80141c6:	5d9b      	ldrb	r3, [r3, r6]
 80141c8:	220a      	movs	r2, #10
 80141ca:	0038      	movs	r0, r7
 80141cc:	3b30      	subs	r3, #48	@ 0x30
 80141ce:	f7ff ff77 	bl	80140c0 <__multadd>
 80141d2:	3601      	adds	r6, #1
 80141d4:	0001      	movs	r1, r0
 80141d6:	e7ed      	b.n	80141b4 <__s2b+0x6c>
 80141d8:	080171f5 	.word	0x080171f5
 80141dc:	08017206 	.word	0x08017206

080141e0 <__hi0bits>:
 80141e0:	2280      	movs	r2, #128	@ 0x80
 80141e2:	0003      	movs	r3, r0
 80141e4:	0252      	lsls	r2, r2, #9
 80141e6:	2000      	movs	r0, #0
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d201      	bcs.n	80141f0 <__hi0bits+0x10>
 80141ec:	041b      	lsls	r3, r3, #16
 80141ee:	3010      	adds	r0, #16
 80141f0:	2280      	movs	r2, #128	@ 0x80
 80141f2:	0452      	lsls	r2, r2, #17
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d201      	bcs.n	80141fc <__hi0bits+0x1c>
 80141f8:	3008      	adds	r0, #8
 80141fa:	021b      	lsls	r3, r3, #8
 80141fc:	2280      	movs	r2, #128	@ 0x80
 80141fe:	0552      	lsls	r2, r2, #21
 8014200:	4293      	cmp	r3, r2
 8014202:	d201      	bcs.n	8014208 <__hi0bits+0x28>
 8014204:	3004      	adds	r0, #4
 8014206:	011b      	lsls	r3, r3, #4
 8014208:	2280      	movs	r2, #128	@ 0x80
 801420a:	05d2      	lsls	r2, r2, #23
 801420c:	4293      	cmp	r3, r2
 801420e:	d201      	bcs.n	8014214 <__hi0bits+0x34>
 8014210:	3002      	adds	r0, #2
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	2b00      	cmp	r3, #0
 8014216:	db03      	blt.n	8014220 <__hi0bits+0x40>
 8014218:	3001      	adds	r0, #1
 801421a:	4213      	tst	r3, r2
 801421c:	d100      	bne.n	8014220 <__hi0bits+0x40>
 801421e:	2020      	movs	r0, #32
 8014220:	4770      	bx	lr

08014222 <__lo0bits>:
 8014222:	6803      	ldr	r3, [r0, #0]
 8014224:	0001      	movs	r1, r0
 8014226:	2207      	movs	r2, #7
 8014228:	0018      	movs	r0, r3
 801422a:	4010      	ands	r0, r2
 801422c:	4213      	tst	r3, r2
 801422e:	d00d      	beq.n	801424c <__lo0bits+0x2a>
 8014230:	3a06      	subs	r2, #6
 8014232:	2000      	movs	r0, #0
 8014234:	4213      	tst	r3, r2
 8014236:	d105      	bne.n	8014244 <__lo0bits+0x22>
 8014238:	3002      	adds	r0, #2
 801423a:	4203      	tst	r3, r0
 801423c:	d003      	beq.n	8014246 <__lo0bits+0x24>
 801423e:	40d3      	lsrs	r3, r2
 8014240:	0010      	movs	r0, r2
 8014242:	600b      	str	r3, [r1, #0]
 8014244:	4770      	bx	lr
 8014246:	089b      	lsrs	r3, r3, #2
 8014248:	600b      	str	r3, [r1, #0]
 801424a:	e7fb      	b.n	8014244 <__lo0bits+0x22>
 801424c:	b29a      	uxth	r2, r3
 801424e:	2a00      	cmp	r2, #0
 8014250:	d101      	bne.n	8014256 <__lo0bits+0x34>
 8014252:	2010      	movs	r0, #16
 8014254:	0c1b      	lsrs	r3, r3, #16
 8014256:	b2da      	uxtb	r2, r3
 8014258:	2a00      	cmp	r2, #0
 801425a:	d101      	bne.n	8014260 <__lo0bits+0x3e>
 801425c:	3008      	adds	r0, #8
 801425e:	0a1b      	lsrs	r3, r3, #8
 8014260:	071a      	lsls	r2, r3, #28
 8014262:	d101      	bne.n	8014268 <__lo0bits+0x46>
 8014264:	3004      	adds	r0, #4
 8014266:	091b      	lsrs	r3, r3, #4
 8014268:	079a      	lsls	r2, r3, #30
 801426a:	d101      	bne.n	8014270 <__lo0bits+0x4e>
 801426c:	3002      	adds	r0, #2
 801426e:	089b      	lsrs	r3, r3, #2
 8014270:	07da      	lsls	r2, r3, #31
 8014272:	d4e9      	bmi.n	8014248 <__lo0bits+0x26>
 8014274:	3001      	adds	r0, #1
 8014276:	085b      	lsrs	r3, r3, #1
 8014278:	d1e6      	bne.n	8014248 <__lo0bits+0x26>
 801427a:	2020      	movs	r0, #32
 801427c:	e7e2      	b.n	8014244 <__lo0bits+0x22>
	...

08014280 <__i2b>:
 8014280:	b510      	push	{r4, lr}
 8014282:	000c      	movs	r4, r1
 8014284:	2101      	movs	r1, #1
 8014286:	f7ff feb3 	bl	8013ff0 <_Balloc>
 801428a:	2800      	cmp	r0, #0
 801428c:	d107      	bne.n	801429e <__i2b+0x1e>
 801428e:	2146      	movs	r1, #70	@ 0x46
 8014290:	4c05      	ldr	r4, [pc, #20]	@ (80142a8 <__i2b+0x28>)
 8014292:	0002      	movs	r2, r0
 8014294:	4b05      	ldr	r3, [pc, #20]	@ (80142ac <__i2b+0x2c>)
 8014296:	0020      	movs	r0, r4
 8014298:	31ff      	adds	r1, #255	@ 0xff
 801429a:	f001 fc5f 	bl	8015b5c <__assert_func>
 801429e:	2301      	movs	r3, #1
 80142a0:	6144      	str	r4, [r0, #20]
 80142a2:	6103      	str	r3, [r0, #16]
 80142a4:	bd10      	pop	{r4, pc}
 80142a6:	46c0      	nop			@ (mov r8, r8)
 80142a8:	08017206 	.word	0x08017206
 80142ac:	080171f5 	.word	0x080171f5

080142b0 <__multiply>:
 80142b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142b2:	0014      	movs	r4, r2
 80142b4:	690a      	ldr	r2, [r1, #16]
 80142b6:	6923      	ldr	r3, [r4, #16]
 80142b8:	000d      	movs	r5, r1
 80142ba:	b08b      	sub	sp, #44	@ 0x2c
 80142bc:	429a      	cmp	r2, r3
 80142be:	db02      	blt.n	80142c6 <__multiply+0x16>
 80142c0:	0023      	movs	r3, r4
 80142c2:	000c      	movs	r4, r1
 80142c4:	001d      	movs	r5, r3
 80142c6:	6927      	ldr	r7, [r4, #16]
 80142c8:	692e      	ldr	r6, [r5, #16]
 80142ca:	6861      	ldr	r1, [r4, #4]
 80142cc:	19bb      	adds	r3, r7, r6
 80142ce:	9303      	str	r3, [sp, #12]
 80142d0:	68a3      	ldr	r3, [r4, #8]
 80142d2:	19ba      	adds	r2, r7, r6
 80142d4:	4293      	cmp	r3, r2
 80142d6:	da00      	bge.n	80142da <__multiply+0x2a>
 80142d8:	3101      	adds	r1, #1
 80142da:	f7ff fe89 	bl	8013ff0 <_Balloc>
 80142de:	9002      	str	r0, [sp, #8]
 80142e0:	2800      	cmp	r0, #0
 80142e2:	d106      	bne.n	80142f2 <__multiply+0x42>
 80142e4:	21b1      	movs	r1, #177	@ 0xb1
 80142e6:	4b49      	ldr	r3, [pc, #292]	@ (801440c <__multiply+0x15c>)
 80142e8:	4849      	ldr	r0, [pc, #292]	@ (8014410 <__multiply+0x160>)
 80142ea:	9a02      	ldr	r2, [sp, #8]
 80142ec:	0049      	lsls	r1, r1, #1
 80142ee:	f001 fc35 	bl	8015b5c <__assert_func>
 80142f2:	9b02      	ldr	r3, [sp, #8]
 80142f4:	2200      	movs	r2, #0
 80142f6:	3314      	adds	r3, #20
 80142f8:	469c      	mov	ip, r3
 80142fa:	19bb      	adds	r3, r7, r6
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	4463      	add	r3, ip
 8014300:	9304      	str	r3, [sp, #16]
 8014302:	4663      	mov	r3, ip
 8014304:	9904      	ldr	r1, [sp, #16]
 8014306:	428b      	cmp	r3, r1
 8014308:	d32a      	bcc.n	8014360 <__multiply+0xb0>
 801430a:	0023      	movs	r3, r4
 801430c:	00bf      	lsls	r7, r7, #2
 801430e:	3314      	adds	r3, #20
 8014310:	3514      	adds	r5, #20
 8014312:	9308      	str	r3, [sp, #32]
 8014314:	00b6      	lsls	r6, r6, #2
 8014316:	19db      	adds	r3, r3, r7
 8014318:	9305      	str	r3, [sp, #20]
 801431a:	19ab      	adds	r3, r5, r6
 801431c:	9309      	str	r3, [sp, #36]	@ 0x24
 801431e:	2304      	movs	r3, #4
 8014320:	9306      	str	r3, [sp, #24]
 8014322:	0023      	movs	r3, r4
 8014324:	9a05      	ldr	r2, [sp, #20]
 8014326:	3315      	adds	r3, #21
 8014328:	9501      	str	r5, [sp, #4]
 801432a:	429a      	cmp	r2, r3
 801432c:	d305      	bcc.n	801433a <__multiply+0x8a>
 801432e:	1b13      	subs	r3, r2, r4
 8014330:	3b15      	subs	r3, #21
 8014332:	089b      	lsrs	r3, r3, #2
 8014334:	3301      	adds	r3, #1
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	9306      	str	r3, [sp, #24]
 801433a:	9b01      	ldr	r3, [sp, #4]
 801433c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801433e:	4293      	cmp	r3, r2
 8014340:	d310      	bcc.n	8014364 <__multiply+0xb4>
 8014342:	9b03      	ldr	r3, [sp, #12]
 8014344:	2b00      	cmp	r3, #0
 8014346:	dd05      	ble.n	8014354 <__multiply+0xa4>
 8014348:	9b04      	ldr	r3, [sp, #16]
 801434a:	3b04      	subs	r3, #4
 801434c:	9304      	str	r3, [sp, #16]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d056      	beq.n	8014402 <__multiply+0x152>
 8014354:	9b02      	ldr	r3, [sp, #8]
 8014356:	9a03      	ldr	r2, [sp, #12]
 8014358:	0018      	movs	r0, r3
 801435a:	611a      	str	r2, [r3, #16]
 801435c:	b00b      	add	sp, #44	@ 0x2c
 801435e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014360:	c304      	stmia	r3!, {r2}
 8014362:	e7cf      	b.n	8014304 <__multiply+0x54>
 8014364:	9b01      	ldr	r3, [sp, #4]
 8014366:	6818      	ldr	r0, [r3, #0]
 8014368:	b280      	uxth	r0, r0
 801436a:	2800      	cmp	r0, #0
 801436c:	d01e      	beq.n	80143ac <__multiply+0xfc>
 801436e:	4667      	mov	r7, ip
 8014370:	2500      	movs	r5, #0
 8014372:	9e08      	ldr	r6, [sp, #32]
 8014374:	ce02      	ldmia	r6!, {r1}
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	9307      	str	r3, [sp, #28]
 801437a:	b28b      	uxth	r3, r1
 801437c:	4343      	muls	r3, r0
 801437e:	001a      	movs	r2, r3
 8014380:	466b      	mov	r3, sp
 8014382:	0c09      	lsrs	r1, r1, #16
 8014384:	8b9b      	ldrh	r3, [r3, #28]
 8014386:	4341      	muls	r1, r0
 8014388:	18d3      	adds	r3, r2, r3
 801438a:	9a07      	ldr	r2, [sp, #28]
 801438c:	195b      	adds	r3, r3, r5
 801438e:	0c12      	lsrs	r2, r2, #16
 8014390:	1889      	adds	r1, r1, r2
 8014392:	0c1a      	lsrs	r2, r3, #16
 8014394:	188a      	adds	r2, r1, r2
 8014396:	b29b      	uxth	r3, r3
 8014398:	0c15      	lsrs	r5, r2, #16
 801439a:	0412      	lsls	r2, r2, #16
 801439c:	431a      	orrs	r2, r3
 801439e:	9b05      	ldr	r3, [sp, #20]
 80143a0:	c704      	stmia	r7!, {r2}
 80143a2:	42b3      	cmp	r3, r6
 80143a4:	d8e6      	bhi.n	8014374 <__multiply+0xc4>
 80143a6:	4663      	mov	r3, ip
 80143a8:	9a06      	ldr	r2, [sp, #24]
 80143aa:	509d      	str	r5, [r3, r2]
 80143ac:	9b01      	ldr	r3, [sp, #4]
 80143ae:	6818      	ldr	r0, [r3, #0]
 80143b0:	0c00      	lsrs	r0, r0, #16
 80143b2:	d020      	beq.n	80143f6 <__multiply+0x146>
 80143b4:	4663      	mov	r3, ip
 80143b6:	0025      	movs	r5, r4
 80143b8:	4661      	mov	r1, ip
 80143ba:	2700      	movs	r7, #0
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	3514      	adds	r5, #20
 80143c0:	682a      	ldr	r2, [r5, #0]
 80143c2:	680e      	ldr	r6, [r1, #0]
 80143c4:	b292      	uxth	r2, r2
 80143c6:	4342      	muls	r2, r0
 80143c8:	0c36      	lsrs	r6, r6, #16
 80143ca:	1992      	adds	r2, r2, r6
 80143cc:	19d2      	adds	r2, r2, r7
 80143ce:	0416      	lsls	r6, r2, #16
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	431e      	orrs	r6, r3
 80143d4:	600e      	str	r6, [r1, #0]
 80143d6:	cd40      	ldmia	r5!, {r6}
 80143d8:	684b      	ldr	r3, [r1, #4]
 80143da:	0c36      	lsrs	r6, r6, #16
 80143dc:	4346      	muls	r6, r0
 80143de:	b29b      	uxth	r3, r3
 80143e0:	0c12      	lsrs	r2, r2, #16
 80143e2:	18f3      	adds	r3, r6, r3
 80143e4:	189b      	adds	r3, r3, r2
 80143e6:	9a05      	ldr	r2, [sp, #20]
 80143e8:	0c1f      	lsrs	r7, r3, #16
 80143ea:	3104      	adds	r1, #4
 80143ec:	42aa      	cmp	r2, r5
 80143ee:	d8e7      	bhi.n	80143c0 <__multiply+0x110>
 80143f0:	4662      	mov	r2, ip
 80143f2:	9906      	ldr	r1, [sp, #24]
 80143f4:	5053      	str	r3, [r2, r1]
 80143f6:	9b01      	ldr	r3, [sp, #4]
 80143f8:	3304      	adds	r3, #4
 80143fa:	9301      	str	r3, [sp, #4]
 80143fc:	2304      	movs	r3, #4
 80143fe:	449c      	add	ip, r3
 8014400:	e79b      	b.n	801433a <__multiply+0x8a>
 8014402:	9b03      	ldr	r3, [sp, #12]
 8014404:	3b01      	subs	r3, #1
 8014406:	9303      	str	r3, [sp, #12]
 8014408:	e79b      	b.n	8014342 <__multiply+0x92>
 801440a:	46c0      	nop			@ (mov r8, r8)
 801440c:	080171f5 	.word	0x080171f5
 8014410:	08017206 	.word	0x08017206

08014414 <__pow5mult>:
 8014414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014416:	2303      	movs	r3, #3
 8014418:	0015      	movs	r5, r2
 801441a:	0007      	movs	r7, r0
 801441c:	000e      	movs	r6, r1
 801441e:	401a      	ands	r2, r3
 8014420:	421d      	tst	r5, r3
 8014422:	d008      	beq.n	8014436 <__pow5mult+0x22>
 8014424:	4925      	ldr	r1, [pc, #148]	@ (80144bc <__pow5mult+0xa8>)
 8014426:	3a01      	subs	r2, #1
 8014428:	0092      	lsls	r2, r2, #2
 801442a:	5852      	ldr	r2, [r2, r1]
 801442c:	2300      	movs	r3, #0
 801442e:	0031      	movs	r1, r6
 8014430:	f7ff fe46 	bl	80140c0 <__multadd>
 8014434:	0006      	movs	r6, r0
 8014436:	10ad      	asrs	r5, r5, #2
 8014438:	d03d      	beq.n	80144b6 <__pow5mult+0xa2>
 801443a:	69fc      	ldr	r4, [r7, #28]
 801443c:	2c00      	cmp	r4, #0
 801443e:	d10f      	bne.n	8014460 <__pow5mult+0x4c>
 8014440:	2010      	movs	r0, #16
 8014442:	f7ff fd19 	bl	8013e78 <malloc>
 8014446:	1e02      	subs	r2, r0, #0
 8014448:	61f8      	str	r0, [r7, #28]
 801444a:	d105      	bne.n	8014458 <__pow5mult+0x44>
 801444c:	21b4      	movs	r1, #180	@ 0xb4
 801444e:	4b1c      	ldr	r3, [pc, #112]	@ (80144c0 <__pow5mult+0xac>)
 8014450:	481c      	ldr	r0, [pc, #112]	@ (80144c4 <__pow5mult+0xb0>)
 8014452:	31ff      	adds	r1, #255	@ 0xff
 8014454:	f001 fb82 	bl	8015b5c <__assert_func>
 8014458:	6044      	str	r4, [r0, #4]
 801445a:	6084      	str	r4, [r0, #8]
 801445c:	6004      	str	r4, [r0, #0]
 801445e:	60c4      	str	r4, [r0, #12]
 8014460:	69fb      	ldr	r3, [r7, #28]
 8014462:	689c      	ldr	r4, [r3, #8]
 8014464:	9301      	str	r3, [sp, #4]
 8014466:	2c00      	cmp	r4, #0
 8014468:	d108      	bne.n	801447c <__pow5mult+0x68>
 801446a:	0038      	movs	r0, r7
 801446c:	4916      	ldr	r1, [pc, #88]	@ (80144c8 <__pow5mult+0xb4>)
 801446e:	f7ff ff07 	bl	8014280 <__i2b>
 8014472:	9b01      	ldr	r3, [sp, #4]
 8014474:	0004      	movs	r4, r0
 8014476:	6098      	str	r0, [r3, #8]
 8014478:	2300      	movs	r3, #0
 801447a:	6003      	str	r3, [r0, #0]
 801447c:	2301      	movs	r3, #1
 801447e:	421d      	tst	r5, r3
 8014480:	d00a      	beq.n	8014498 <__pow5mult+0x84>
 8014482:	0031      	movs	r1, r6
 8014484:	0022      	movs	r2, r4
 8014486:	0038      	movs	r0, r7
 8014488:	f7ff ff12 	bl	80142b0 <__multiply>
 801448c:	0031      	movs	r1, r6
 801448e:	9001      	str	r0, [sp, #4]
 8014490:	0038      	movs	r0, r7
 8014492:	f7ff fdf1 	bl	8014078 <_Bfree>
 8014496:	9e01      	ldr	r6, [sp, #4]
 8014498:	106d      	asrs	r5, r5, #1
 801449a:	d00c      	beq.n	80144b6 <__pow5mult+0xa2>
 801449c:	6820      	ldr	r0, [r4, #0]
 801449e:	2800      	cmp	r0, #0
 80144a0:	d107      	bne.n	80144b2 <__pow5mult+0x9e>
 80144a2:	0022      	movs	r2, r4
 80144a4:	0021      	movs	r1, r4
 80144a6:	0038      	movs	r0, r7
 80144a8:	f7ff ff02 	bl	80142b0 <__multiply>
 80144ac:	2300      	movs	r3, #0
 80144ae:	6020      	str	r0, [r4, #0]
 80144b0:	6003      	str	r3, [r0, #0]
 80144b2:	0004      	movs	r4, r0
 80144b4:	e7e2      	b.n	801447c <__pow5mult+0x68>
 80144b6:	0030      	movs	r0, r6
 80144b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80144ba:	46c0      	nop			@ (mov r8, r8)
 80144bc:	08017260 	.word	0x08017260
 80144c0:	08017186 	.word	0x08017186
 80144c4:	08017206 	.word	0x08017206
 80144c8:	00000271 	.word	0x00000271

080144cc <__lshift>:
 80144cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ce:	000c      	movs	r4, r1
 80144d0:	0016      	movs	r6, r2
 80144d2:	6923      	ldr	r3, [r4, #16]
 80144d4:	1157      	asrs	r7, r2, #5
 80144d6:	b085      	sub	sp, #20
 80144d8:	18fb      	adds	r3, r7, r3
 80144da:	9301      	str	r3, [sp, #4]
 80144dc:	3301      	adds	r3, #1
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	6849      	ldr	r1, [r1, #4]
 80144e2:	68a3      	ldr	r3, [r4, #8]
 80144e4:	9002      	str	r0, [sp, #8]
 80144e6:	9a00      	ldr	r2, [sp, #0]
 80144e8:	4293      	cmp	r3, r2
 80144ea:	db10      	blt.n	801450e <__lshift+0x42>
 80144ec:	9802      	ldr	r0, [sp, #8]
 80144ee:	f7ff fd7f 	bl	8013ff0 <_Balloc>
 80144f2:	2300      	movs	r3, #0
 80144f4:	0001      	movs	r1, r0
 80144f6:	0005      	movs	r5, r0
 80144f8:	001a      	movs	r2, r3
 80144fa:	3114      	adds	r1, #20
 80144fc:	4298      	cmp	r0, r3
 80144fe:	d10c      	bne.n	801451a <__lshift+0x4e>
 8014500:	21ef      	movs	r1, #239	@ 0xef
 8014502:	002a      	movs	r2, r5
 8014504:	4b25      	ldr	r3, [pc, #148]	@ (801459c <__lshift+0xd0>)
 8014506:	4826      	ldr	r0, [pc, #152]	@ (80145a0 <__lshift+0xd4>)
 8014508:	0049      	lsls	r1, r1, #1
 801450a:	f001 fb27 	bl	8015b5c <__assert_func>
 801450e:	3101      	adds	r1, #1
 8014510:	005b      	lsls	r3, r3, #1
 8014512:	e7e8      	b.n	80144e6 <__lshift+0x1a>
 8014514:	0098      	lsls	r0, r3, #2
 8014516:	500a      	str	r2, [r1, r0]
 8014518:	3301      	adds	r3, #1
 801451a:	42bb      	cmp	r3, r7
 801451c:	dbfa      	blt.n	8014514 <__lshift+0x48>
 801451e:	43fb      	mvns	r3, r7
 8014520:	17db      	asrs	r3, r3, #31
 8014522:	401f      	ands	r7, r3
 8014524:	00bf      	lsls	r7, r7, #2
 8014526:	0023      	movs	r3, r4
 8014528:	201f      	movs	r0, #31
 801452a:	19c9      	adds	r1, r1, r7
 801452c:	0037      	movs	r7, r6
 801452e:	6922      	ldr	r2, [r4, #16]
 8014530:	3314      	adds	r3, #20
 8014532:	0092      	lsls	r2, r2, #2
 8014534:	189a      	adds	r2, r3, r2
 8014536:	4007      	ands	r7, r0
 8014538:	4206      	tst	r6, r0
 801453a:	d029      	beq.n	8014590 <__lshift+0xc4>
 801453c:	3001      	adds	r0, #1
 801453e:	1bc0      	subs	r0, r0, r7
 8014540:	9003      	str	r0, [sp, #12]
 8014542:	468c      	mov	ip, r1
 8014544:	2000      	movs	r0, #0
 8014546:	681e      	ldr	r6, [r3, #0]
 8014548:	40be      	lsls	r6, r7
 801454a:	4306      	orrs	r6, r0
 801454c:	4660      	mov	r0, ip
 801454e:	c040      	stmia	r0!, {r6}
 8014550:	4684      	mov	ip, r0
 8014552:	9e03      	ldr	r6, [sp, #12]
 8014554:	cb01      	ldmia	r3!, {r0}
 8014556:	40f0      	lsrs	r0, r6
 8014558:	429a      	cmp	r2, r3
 801455a:	d8f4      	bhi.n	8014546 <__lshift+0x7a>
 801455c:	0026      	movs	r6, r4
 801455e:	3615      	adds	r6, #21
 8014560:	2304      	movs	r3, #4
 8014562:	42b2      	cmp	r2, r6
 8014564:	d304      	bcc.n	8014570 <__lshift+0xa4>
 8014566:	1b13      	subs	r3, r2, r4
 8014568:	3b15      	subs	r3, #21
 801456a:	089b      	lsrs	r3, r3, #2
 801456c:	3301      	adds	r3, #1
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	50c8      	str	r0, [r1, r3]
 8014572:	2800      	cmp	r0, #0
 8014574:	d002      	beq.n	801457c <__lshift+0xb0>
 8014576:	9b01      	ldr	r3, [sp, #4]
 8014578:	3302      	adds	r3, #2
 801457a:	9300      	str	r3, [sp, #0]
 801457c:	9b00      	ldr	r3, [sp, #0]
 801457e:	9802      	ldr	r0, [sp, #8]
 8014580:	3b01      	subs	r3, #1
 8014582:	0021      	movs	r1, r4
 8014584:	612b      	str	r3, [r5, #16]
 8014586:	f7ff fd77 	bl	8014078 <_Bfree>
 801458a:	0028      	movs	r0, r5
 801458c:	b005      	add	sp, #20
 801458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014590:	cb01      	ldmia	r3!, {r0}
 8014592:	c101      	stmia	r1!, {r0}
 8014594:	429a      	cmp	r2, r3
 8014596:	d8fb      	bhi.n	8014590 <__lshift+0xc4>
 8014598:	e7f0      	b.n	801457c <__lshift+0xb0>
 801459a:	46c0      	nop			@ (mov r8, r8)
 801459c:	080171f5 	.word	0x080171f5
 80145a0:	08017206 	.word	0x08017206

080145a4 <__mcmp>:
 80145a4:	b530      	push	{r4, r5, lr}
 80145a6:	690b      	ldr	r3, [r1, #16]
 80145a8:	6904      	ldr	r4, [r0, #16]
 80145aa:	0002      	movs	r2, r0
 80145ac:	1ae0      	subs	r0, r4, r3
 80145ae:	429c      	cmp	r4, r3
 80145b0:	d10f      	bne.n	80145d2 <__mcmp+0x2e>
 80145b2:	3214      	adds	r2, #20
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	3114      	adds	r1, #20
 80145b8:	0014      	movs	r4, r2
 80145ba:	18c9      	adds	r1, r1, r3
 80145bc:	18d2      	adds	r2, r2, r3
 80145be:	3a04      	subs	r2, #4
 80145c0:	3904      	subs	r1, #4
 80145c2:	6815      	ldr	r5, [r2, #0]
 80145c4:	680b      	ldr	r3, [r1, #0]
 80145c6:	429d      	cmp	r5, r3
 80145c8:	d004      	beq.n	80145d4 <__mcmp+0x30>
 80145ca:	2001      	movs	r0, #1
 80145cc:	429d      	cmp	r5, r3
 80145ce:	d200      	bcs.n	80145d2 <__mcmp+0x2e>
 80145d0:	3802      	subs	r0, #2
 80145d2:	bd30      	pop	{r4, r5, pc}
 80145d4:	4294      	cmp	r4, r2
 80145d6:	d3f2      	bcc.n	80145be <__mcmp+0x1a>
 80145d8:	e7fb      	b.n	80145d2 <__mcmp+0x2e>
	...

080145dc <__mdiff>:
 80145dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145de:	000c      	movs	r4, r1
 80145e0:	b087      	sub	sp, #28
 80145e2:	9000      	str	r0, [sp, #0]
 80145e4:	0011      	movs	r1, r2
 80145e6:	0020      	movs	r0, r4
 80145e8:	0017      	movs	r7, r2
 80145ea:	f7ff ffdb 	bl	80145a4 <__mcmp>
 80145ee:	1e05      	subs	r5, r0, #0
 80145f0:	d110      	bne.n	8014614 <__mdiff+0x38>
 80145f2:	0001      	movs	r1, r0
 80145f4:	9800      	ldr	r0, [sp, #0]
 80145f6:	f7ff fcfb 	bl	8013ff0 <_Balloc>
 80145fa:	1e02      	subs	r2, r0, #0
 80145fc:	d104      	bne.n	8014608 <__mdiff+0x2c>
 80145fe:	4b40      	ldr	r3, [pc, #256]	@ (8014700 <__mdiff+0x124>)
 8014600:	4840      	ldr	r0, [pc, #256]	@ (8014704 <__mdiff+0x128>)
 8014602:	4941      	ldr	r1, [pc, #260]	@ (8014708 <__mdiff+0x12c>)
 8014604:	f001 faaa 	bl	8015b5c <__assert_func>
 8014608:	2301      	movs	r3, #1
 801460a:	6145      	str	r5, [r0, #20]
 801460c:	6103      	str	r3, [r0, #16]
 801460e:	0010      	movs	r0, r2
 8014610:	b007      	add	sp, #28
 8014612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014614:	2600      	movs	r6, #0
 8014616:	42b0      	cmp	r0, r6
 8014618:	da03      	bge.n	8014622 <__mdiff+0x46>
 801461a:	0023      	movs	r3, r4
 801461c:	003c      	movs	r4, r7
 801461e:	001f      	movs	r7, r3
 8014620:	3601      	adds	r6, #1
 8014622:	6861      	ldr	r1, [r4, #4]
 8014624:	9800      	ldr	r0, [sp, #0]
 8014626:	f7ff fce3 	bl	8013ff0 <_Balloc>
 801462a:	1e02      	subs	r2, r0, #0
 801462c:	d103      	bne.n	8014636 <__mdiff+0x5a>
 801462e:	4b34      	ldr	r3, [pc, #208]	@ (8014700 <__mdiff+0x124>)
 8014630:	4834      	ldr	r0, [pc, #208]	@ (8014704 <__mdiff+0x128>)
 8014632:	4936      	ldr	r1, [pc, #216]	@ (801470c <__mdiff+0x130>)
 8014634:	e7e6      	b.n	8014604 <__mdiff+0x28>
 8014636:	6923      	ldr	r3, [r4, #16]
 8014638:	3414      	adds	r4, #20
 801463a:	9300      	str	r3, [sp, #0]
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	18e3      	adds	r3, r4, r3
 8014640:	0021      	movs	r1, r4
 8014642:	9401      	str	r4, [sp, #4]
 8014644:	003c      	movs	r4, r7
 8014646:	9302      	str	r3, [sp, #8]
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	3414      	adds	r4, #20
 801464c:	009b      	lsls	r3, r3, #2
 801464e:	18e3      	adds	r3, r4, r3
 8014650:	9303      	str	r3, [sp, #12]
 8014652:	0003      	movs	r3, r0
 8014654:	60c6      	str	r6, [r0, #12]
 8014656:	468c      	mov	ip, r1
 8014658:	2000      	movs	r0, #0
 801465a:	3314      	adds	r3, #20
 801465c:	9304      	str	r3, [sp, #16]
 801465e:	9305      	str	r3, [sp, #20]
 8014660:	4663      	mov	r3, ip
 8014662:	cb20      	ldmia	r3!, {r5}
 8014664:	b2a9      	uxth	r1, r5
 8014666:	000e      	movs	r6, r1
 8014668:	469c      	mov	ip, r3
 801466a:	cc08      	ldmia	r4!, {r3}
 801466c:	0c2d      	lsrs	r5, r5, #16
 801466e:	b299      	uxth	r1, r3
 8014670:	1a71      	subs	r1, r6, r1
 8014672:	1809      	adds	r1, r1, r0
 8014674:	0c1b      	lsrs	r3, r3, #16
 8014676:	1408      	asrs	r0, r1, #16
 8014678:	1aeb      	subs	r3, r5, r3
 801467a:	181b      	adds	r3, r3, r0
 801467c:	1418      	asrs	r0, r3, #16
 801467e:	b289      	uxth	r1, r1
 8014680:	041b      	lsls	r3, r3, #16
 8014682:	4319      	orrs	r1, r3
 8014684:	9b05      	ldr	r3, [sp, #20]
 8014686:	c302      	stmia	r3!, {r1}
 8014688:	9305      	str	r3, [sp, #20]
 801468a:	9b03      	ldr	r3, [sp, #12]
 801468c:	42a3      	cmp	r3, r4
 801468e:	d8e7      	bhi.n	8014660 <__mdiff+0x84>
 8014690:	0039      	movs	r1, r7
 8014692:	9c03      	ldr	r4, [sp, #12]
 8014694:	3115      	adds	r1, #21
 8014696:	2304      	movs	r3, #4
 8014698:	428c      	cmp	r4, r1
 801469a:	d304      	bcc.n	80146a6 <__mdiff+0xca>
 801469c:	1be3      	subs	r3, r4, r7
 801469e:	3b15      	subs	r3, #21
 80146a0:	089b      	lsrs	r3, r3, #2
 80146a2:	3301      	adds	r3, #1
 80146a4:	009b      	lsls	r3, r3, #2
 80146a6:	9901      	ldr	r1, [sp, #4]
 80146a8:	18cd      	adds	r5, r1, r3
 80146aa:	9904      	ldr	r1, [sp, #16]
 80146ac:	002e      	movs	r6, r5
 80146ae:	18cb      	adds	r3, r1, r3
 80146b0:	001f      	movs	r7, r3
 80146b2:	9902      	ldr	r1, [sp, #8]
 80146b4:	428e      	cmp	r6, r1
 80146b6:	d311      	bcc.n	80146dc <__mdiff+0x100>
 80146b8:	9c02      	ldr	r4, [sp, #8]
 80146ba:	1ee9      	subs	r1, r5, #3
 80146bc:	2000      	movs	r0, #0
 80146be:	428c      	cmp	r4, r1
 80146c0:	d304      	bcc.n	80146cc <__mdiff+0xf0>
 80146c2:	0021      	movs	r1, r4
 80146c4:	3103      	adds	r1, #3
 80146c6:	1b49      	subs	r1, r1, r5
 80146c8:	0889      	lsrs	r1, r1, #2
 80146ca:	0088      	lsls	r0, r1, #2
 80146cc:	181b      	adds	r3, r3, r0
 80146ce:	3b04      	subs	r3, #4
 80146d0:	6819      	ldr	r1, [r3, #0]
 80146d2:	2900      	cmp	r1, #0
 80146d4:	d010      	beq.n	80146f8 <__mdiff+0x11c>
 80146d6:	9b00      	ldr	r3, [sp, #0]
 80146d8:	6113      	str	r3, [r2, #16]
 80146da:	e798      	b.n	801460e <__mdiff+0x32>
 80146dc:	4684      	mov	ip, r0
 80146de:	ce02      	ldmia	r6!, {r1}
 80146e0:	b288      	uxth	r0, r1
 80146e2:	4460      	add	r0, ip
 80146e4:	1400      	asrs	r0, r0, #16
 80146e6:	0c0c      	lsrs	r4, r1, #16
 80146e8:	1904      	adds	r4, r0, r4
 80146ea:	4461      	add	r1, ip
 80146ec:	1420      	asrs	r0, r4, #16
 80146ee:	b289      	uxth	r1, r1
 80146f0:	0424      	lsls	r4, r4, #16
 80146f2:	4321      	orrs	r1, r4
 80146f4:	c702      	stmia	r7!, {r1}
 80146f6:	e7dc      	b.n	80146b2 <__mdiff+0xd6>
 80146f8:	9900      	ldr	r1, [sp, #0]
 80146fa:	3901      	subs	r1, #1
 80146fc:	9100      	str	r1, [sp, #0]
 80146fe:	e7e6      	b.n	80146ce <__mdiff+0xf2>
 8014700:	080171f5 	.word	0x080171f5
 8014704:	08017206 	.word	0x08017206
 8014708:	00000237 	.word	0x00000237
 801470c:	00000245 	.word	0x00000245

08014710 <__ulp>:
 8014710:	b510      	push	{r4, lr}
 8014712:	2400      	movs	r4, #0
 8014714:	4b0c      	ldr	r3, [pc, #48]	@ (8014748 <__ulp+0x38>)
 8014716:	4a0d      	ldr	r2, [pc, #52]	@ (801474c <__ulp+0x3c>)
 8014718:	400b      	ands	r3, r1
 801471a:	189b      	adds	r3, r3, r2
 801471c:	42a3      	cmp	r3, r4
 801471e:	dc06      	bgt.n	801472e <__ulp+0x1e>
 8014720:	425b      	negs	r3, r3
 8014722:	151a      	asrs	r2, r3, #20
 8014724:	2a13      	cmp	r2, #19
 8014726:	dc05      	bgt.n	8014734 <__ulp+0x24>
 8014728:	2380      	movs	r3, #128	@ 0x80
 801472a:	031b      	lsls	r3, r3, #12
 801472c:	4113      	asrs	r3, r2
 801472e:	0019      	movs	r1, r3
 8014730:	0020      	movs	r0, r4
 8014732:	bd10      	pop	{r4, pc}
 8014734:	3a14      	subs	r2, #20
 8014736:	2401      	movs	r4, #1
 8014738:	2a1e      	cmp	r2, #30
 801473a:	dc02      	bgt.n	8014742 <__ulp+0x32>
 801473c:	2480      	movs	r4, #128	@ 0x80
 801473e:	0624      	lsls	r4, r4, #24
 8014740:	40d4      	lsrs	r4, r2
 8014742:	2300      	movs	r3, #0
 8014744:	e7f3      	b.n	801472e <__ulp+0x1e>
 8014746:	46c0      	nop			@ (mov r8, r8)
 8014748:	7ff00000 	.word	0x7ff00000
 801474c:	fcc00000 	.word	0xfcc00000

08014750 <__b2d>:
 8014750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014752:	0006      	movs	r6, r0
 8014754:	6903      	ldr	r3, [r0, #16]
 8014756:	3614      	adds	r6, #20
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	18f3      	adds	r3, r6, r3
 801475c:	1f1d      	subs	r5, r3, #4
 801475e:	682c      	ldr	r4, [r5, #0]
 8014760:	000f      	movs	r7, r1
 8014762:	0020      	movs	r0, r4
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	f7ff fd3b 	bl	80141e0 <__hi0bits>
 801476a:	2220      	movs	r2, #32
 801476c:	1a12      	subs	r2, r2, r0
 801476e:	603a      	str	r2, [r7, #0]
 8014770:	0003      	movs	r3, r0
 8014772:	4a1c      	ldr	r2, [pc, #112]	@ (80147e4 <__b2d+0x94>)
 8014774:	280a      	cmp	r0, #10
 8014776:	dc15      	bgt.n	80147a4 <__b2d+0x54>
 8014778:	210b      	movs	r1, #11
 801477a:	0027      	movs	r7, r4
 801477c:	1a09      	subs	r1, r1, r0
 801477e:	40cf      	lsrs	r7, r1
 8014780:	433a      	orrs	r2, r7
 8014782:	468c      	mov	ip, r1
 8014784:	0011      	movs	r1, r2
 8014786:	2200      	movs	r2, #0
 8014788:	42ae      	cmp	r6, r5
 801478a:	d202      	bcs.n	8014792 <__b2d+0x42>
 801478c:	9a01      	ldr	r2, [sp, #4]
 801478e:	3a08      	subs	r2, #8
 8014790:	6812      	ldr	r2, [r2, #0]
 8014792:	3315      	adds	r3, #21
 8014794:	409c      	lsls	r4, r3
 8014796:	4663      	mov	r3, ip
 8014798:	0027      	movs	r7, r4
 801479a:	40da      	lsrs	r2, r3
 801479c:	4317      	orrs	r7, r2
 801479e:	0038      	movs	r0, r7
 80147a0:	b003      	add	sp, #12
 80147a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147a4:	2700      	movs	r7, #0
 80147a6:	42ae      	cmp	r6, r5
 80147a8:	d202      	bcs.n	80147b0 <__b2d+0x60>
 80147aa:	9d01      	ldr	r5, [sp, #4]
 80147ac:	3d08      	subs	r5, #8
 80147ae:	682f      	ldr	r7, [r5, #0]
 80147b0:	210b      	movs	r1, #11
 80147b2:	4249      	negs	r1, r1
 80147b4:	468c      	mov	ip, r1
 80147b6:	449c      	add	ip, r3
 80147b8:	2b0b      	cmp	r3, #11
 80147ba:	d010      	beq.n	80147de <__b2d+0x8e>
 80147bc:	4661      	mov	r1, ip
 80147be:	2320      	movs	r3, #32
 80147c0:	408c      	lsls	r4, r1
 80147c2:	1a5b      	subs	r3, r3, r1
 80147c4:	0039      	movs	r1, r7
 80147c6:	40d9      	lsrs	r1, r3
 80147c8:	430c      	orrs	r4, r1
 80147ca:	4322      	orrs	r2, r4
 80147cc:	0011      	movs	r1, r2
 80147ce:	2200      	movs	r2, #0
 80147d0:	42b5      	cmp	r5, r6
 80147d2:	d901      	bls.n	80147d8 <__b2d+0x88>
 80147d4:	3d04      	subs	r5, #4
 80147d6:	682a      	ldr	r2, [r5, #0]
 80147d8:	4664      	mov	r4, ip
 80147da:	40a7      	lsls	r7, r4
 80147dc:	e7dd      	b.n	801479a <__b2d+0x4a>
 80147de:	4322      	orrs	r2, r4
 80147e0:	0011      	movs	r1, r2
 80147e2:	e7dc      	b.n	801479e <__b2d+0x4e>
 80147e4:	3ff00000 	.word	0x3ff00000

080147e8 <__d2b>:
 80147e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147ea:	2101      	movs	r1, #1
 80147ec:	0016      	movs	r6, r2
 80147ee:	001f      	movs	r7, r3
 80147f0:	f7ff fbfe 	bl	8013ff0 <_Balloc>
 80147f4:	1e04      	subs	r4, r0, #0
 80147f6:	d105      	bne.n	8014804 <__d2b+0x1c>
 80147f8:	0022      	movs	r2, r4
 80147fa:	4b25      	ldr	r3, [pc, #148]	@ (8014890 <__d2b+0xa8>)
 80147fc:	4825      	ldr	r0, [pc, #148]	@ (8014894 <__d2b+0xac>)
 80147fe:	4926      	ldr	r1, [pc, #152]	@ (8014898 <__d2b+0xb0>)
 8014800:	f001 f9ac 	bl	8015b5c <__assert_func>
 8014804:	033b      	lsls	r3, r7, #12
 8014806:	007d      	lsls	r5, r7, #1
 8014808:	0b1b      	lsrs	r3, r3, #12
 801480a:	0d6d      	lsrs	r5, r5, #21
 801480c:	d002      	beq.n	8014814 <__d2b+0x2c>
 801480e:	2280      	movs	r2, #128	@ 0x80
 8014810:	0352      	lsls	r2, r2, #13
 8014812:	4313      	orrs	r3, r2
 8014814:	9301      	str	r3, [sp, #4]
 8014816:	2e00      	cmp	r6, #0
 8014818:	d025      	beq.n	8014866 <__d2b+0x7e>
 801481a:	4668      	mov	r0, sp
 801481c:	9600      	str	r6, [sp, #0]
 801481e:	f7ff fd00 	bl	8014222 <__lo0bits>
 8014822:	9b01      	ldr	r3, [sp, #4]
 8014824:	9900      	ldr	r1, [sp, #0]
 8014826:	2800      	cmp	r0, #0
 8014828:	d01b      	beq.n	8014862 <__d2b+0x7a>
 801482a:	2220      	movs	r2, #32
 801482c:	001e      	movs	r6, r3
 801482e:	1a12      	subs	r2, r2, r0
 8014830:	4096      	lsls	r6, r2
 8014832:	0032      	movs	r2, r6
 8014834:	40c3      	lsrs	r3, r0
 8014836:	430a      	orrs	r2, r1
 8014838:	6162      	str	r2, [r4, #20]
 801483a:	9301      	str	r3, [sp, #4]
 801483c:	9e01      	ldr	r6, [sp, #4]
 801483e:	61a6      	str	r6, [r4, #24]
 8014840:	1e73      	subs	r3, r6, #1
 8014842:	419e      	sbcs	r6, r3
 8014844:	3601      	adds	r6, #1
 8014846:	6126      	str	r6, [r4, #16]
 8014848:	2d00      	cmp	r5, #0
 801484a:	d014      	beq.n	8014876 <__d2b+0x8e>
 801484c:	2635      	movs	r6, #53	@ 0x35
 801484e:	4b13      	ldr	r3, [pc, #76]	@ (801489c <__d2b+0xb4>)
 8014850:	18ed      	adds	r5, r5, r3
 8014852:	9b08      	ldr	r3, [sp, #32]
 8014854:	182d      	adds	r5, r5, r0
 8014856:	601d      	str	r5, [r3, #0]
 8014858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801485a:	1a36      	subs	r6, r6, r0
 801485c:	601e      	str	r6, [r3, #0]
 801485e:	0020      	movs	r0, r4
 8014860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014862:	6161      	str	r1, [r4, #20]
 8014864:	e7ea      	b.n	801483c <__d2b+0x54>
 8014866:	a801      	add	r0, sp, #4
 8014868:	f7ff fcdb 	bl	8014222 <__lo0bits>
 801486c:	9b01      	ldr	r3, [sp, #4]
 801486e:	2601      	movs	r6, #1
 8014870:	6163      	str	r3, [r4, #20]
 8014872:	3020      	adds	r0, #32
 8014874:	e7e7      	b.n	8014846 <__d2b+0x5e>
 8014876:	4b0a      	ldr	r3, [pc, #40]	@ (80148a0 <__d2b+0xb8>)
 8014878:	18c0      	adds	r0, r0, r3
 801487a:	9b08      	ldr	r3, [sp, #32]
 801487c:	6018      	str	r0, [r3, #0]
 801487e:	4b09      	ldr	r3, [pc, #36]	@ (80148a4 <__d2b+0xbc>)
 8014880:	18f3      	adds	r3, r6, r3
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	18e3      	adds	r3, r4, r3
 8014886:	6958      	ldr	r0, [r3, #20]
 8014888:	f7ff fcaa 	bl	80141e0 <__hi0bits>
 801488c:	0176      	lsls	r6, r6, #5
 801488e:	e7e3      	b.n	8014858 <__d2b+0x70>
 8014890:	080171f5 	.word	0x080171f5
 8014894:	08017206 	.word	0x08017206
 8014898:	0000030f 	.word	0x0000030f
 801489c:	fffffbcd 	.word	0xfffffbcd
 80148a0:	fffffbce 	.word	0xfffffbce
 80148a4:	3fffffff 	.word	0x3fffffff

080148a8 <__ratio>:
 80148a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148aa:	b087      	sub	sp, #28
 80148ac:	000f      	movs	r7, r1
 80148ae:	a904      	add	r1, sp, #16
 80148b0:	0006      	movs	r6, r0
 80148b2:	f7ff ff4d 	bl	8014750 <__b2d>
 80148b6:	9000      	str	r0, [sp, #0]
 80148b8:	9101      	str	r1, [sp, #4]
 80148ba:	9b00      	ldr	r3, [sp, #0]
 80148bc:	9c01      	ldr	r4, [sp, #4]
 80148be:	0038      	movs	r0, r7
 80148c0:	a905      	add	r1, sp, #20
 80148c2:	9302      	str	r3, [sp, #8]
 80148c4:	9403      	str	r4, [sp, #12]
 80148c6:	f7ff ff43 	bl	8014750 <__b2d>
 80148ca:	000d      	movs	r5, r1
 80148cc:	0002      	movs	r2, r0
 80148ce:	000b      	movs	r3, r1
 80148d0:	6930      	ldr	r0, [r6, #16]
 80148d2:	6939      	ldr	r1, [r7, #16]
 80148d4:	9e04      	ldr	r6, [sp, #16]
 80148d6:	1a40      	subs	r0, r0, r1
 80148d8:	9905      	ldr	r1, [sp, #20]
 80148da:	0140      	lsls	r0, r0, #5
 80148dc:	1a71      	subs	r1, r6, r1
 80148de:	1841      	adds	r1, r0, r1
 80148e0:	0508      	lsls	r0, r1, #20
 80148e2:	2900      	cmp	r1, #0
 80148e4:	dd08      	ble.n	80148f8 <__ratio+0x50>
 80148e6:	9901      	ldr	r1, [sp, #4]
 80148e8:	1841      	adds	r1, r0, r1
 80148ea:	9103      	str	r1, [sp, #12]
 80148ec:	9802      	ldr	r0, [sp, #8]
 80148ee:	9903      	ldr	r1, [sp, #12]
 80148f0:	f7ed fa00 	bl	8001cf4 <__aeabi_ddiv>
 80148f4:	b007      	add	sp, #28
 80148f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f8:	1a2b      	subs	r3, r5, r0
 80148fa:	e7f7      	b.n	80148ec <__ratio+0x44>

080148fc <__copybits>:
 80148fc:	b570      	push	{r4, r5, r6, lr}
 80148fe:	0014      	movs	r4, r2
 8014900:	0005      	movs	r5, r0
 8014902:	3901      	subs	r1, #1
 8014904:	6913      	ldr	r3, [r2, #16]
 8014906:	1149      	asrs	r1, r1, #5
 8014908:	3101      	adds	r1, #1
 801490a:	0089      	lsls	r1, r1, #2
 801490c:	3414      	adds	r4, #20
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	1841      	adds	r1, r0, r1
 8014912:	18e3      	adds	r3, r4, r3
 8014914:	42a3      	cmp	r3, r4
 8014916:	d80d      	bhi.n	8014934 <__copybits+0x38>
 8014918:	0014      	movs	r4, r2
 801491a:	3411      	adds	r4, #17
 801491c:	2500      	movs	r5, #0
 801491e:	429c      	cmp	r4, r3
 8014920:	d803      	bhi.n	801492a <__copybits+0x2e>
 8014922:	1a9b      	subs	r3, r3, r2
 8014924:	3b11      	subs	r3, #17
 8014926:	089b      	lsrs	r3, r3, #2
 8014928:	009d      	lsls	r5, r3, #2
 801492a:	2300      	movs	r3, #0
 801492c:	1940      	adds	r0, r0, r5
 801492e:	4281      	cmp	r1, r0
 8014930:	d803      	bhi.n	801493a <__copybits+0x3e>
 8014932:	bd70      	pop	{r4, r5, r6, pc}
 8014934:	cc40      	ldmia	r4!, {r6}
 8014936:	c540      	stmia	r5!, {r6}
 8014938:	e7ec      	b.n	8014914 <__copybits+0x18>
 801493a:	c008      	stmia	r0!, {r3}
 801493c:	e7f7      	b.n	801492e <__copybits+0x32>

0801493e <__any_on>:
 801493e:	0002      	movs	r2, r0
 8014940:	6900      	ldr	r0, [r0, #16]
 8014942:	b510      	push	{r4, lr}
 8014944:	3214      	adds	r2, #20
 8014946:	114b      	asrs	r3, r1, #5
 8014948:	4298      	cmp	r0, r3
 801494a:	db13      	blt.n	8014974 <__any_on+0x36>
 801494c:	dd0c      	ble.n	8014968 <__any_on+0x2a>
 801494e:	241f      	movs	r4, #31
 8014950:	0008      	movs	r0, r1
 8014952:	4020      	ands	r0, r4
 8014954:	4221      	tst	r1, r4
 8014956:	d007      	beq.n	8014968 <__any_on+0x2a>
 8014958:	0099      	lsls	r1, r3, #2
 801495a:	588c      	ldr	r4, [r1, r2]
 801495c:	0021      	movs	r1, r4
 801495e:	40c1      	lsrs	r1, r0
 8014960:	4081      	lsls	r1, r0
 8014962:	2001      	movs	r0, #1
 8014964:	428c      	cmp	r4, r1
 8014966:	d104      	bne.n	8014972 <__any_on+0x34>
 8014968:	009b      	lsls	r3, r3, #2
 801496a:	18d3      	adds	r3, r2, r3
 801496c:	4293      	cmp	r3, r2
 801496e:	d803      	bhi.n	8014978 <__any_on+0x3a>
 8014970:	2000      	movs	r0, #0
 8014972:	bd10      	pop	{r4, pc}
 8014974:	0003      	movs	r3, r0
 8014976:	e7f7      	b.n	8014968 <__any_on+0x2a>
 8014978:	3b04      	subs	r3, #4
 801497a:	6819      	ldr	r1, [r3, #0]
 801497c:	2900      	cmp	r1, #0
 801497e:	d0f5      	beq.n	801496c <__any_on+0x2e>
 8014980:	2001      	movs	r0, #1
 8014982:	e7f6      	b.n	8014972 <__any_on+0x34>

08014984 <sulp>:
 8014984:	b570      	push	{r4, r5, r6, lr}
 8014986:	0016      	movs	r6, r2
 8014988:	000d      	movs	r5, r1
 801498a:	f7ff fec1 	bl	8014710 <__ulp>
 801498e:	2e00      	cmp	r6, #0
 8014990:	d00d      	beq.n	80149ae <sulp+0x2a>
 8014992:	236b      	movs	r3, #107	@ 0x6b
 8014994:	006a      	lsls	r2, r5, #1
 8014996:	0d52      	lsrs	r2, r2, #21
 8014998:	1a9b      	subs	r3, r3, r2
 801499a:	2b00      	cmp	r3, #0
 801499c:	dd07      	ble.n	80149ae <sulp+0x2a>
 801499e:	2400      	movs	r4, #0
 80149a0:	4a03      	ldr	r2, [pc, #12]	@ (80149b0 <sulp+0x2c>)
 80149a2:	051b      	lsls	r3, r3, #20
 80149a4:	189d      	adds	r5, r3, r2
 80149a6:	002b      	movs	r3, r5
 80149a8:	0022      	movs	r2, r4
 80149aa:	f7ed fde7 	bl	800257c <__aeabi_dmul>
 80149ae:	bd70      	pop	{r4, r5, r6, pc}
 80149b0:	3ff00000 	.word	0x3ff00000

080149b4 <_strtod_l>:
 80149b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149b6:	b0a3      	sub	sp, #140	@ 0x8c
 80149b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80149ba:	2200      	movs	r2, #0
 80149bc:	2600      	movs	r6, #0
 80149be:	2700      	movs	r7, #0
 80149c0:	9005      	str	r0, [sp, #20]
 80149c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80149c4:	921e      	str	r2, [sp, #120]	@ 0x78
 80149c6:	911d      	str	r1, [sp, #116]	@ 0x74
 80149c8:	780a      	ldrb	r2, [r1, #0]
 80149ca:	2a2b      	cmp	r2, #43	@ 0x2b
 80149cc:	d053      	beq.n	8014a76 <_strtod_l+0xc2>
 80149ce:	d83f      	bhi.n	8014a50 <_strtod_l+0x9c>
 80149d0:	2a0d      	cmp	r2, #13
 80149d2:	d839      	bhi.n	8014a48 <_strtod_l+0x94>
 80149d4:	2a08      	cmp	r2, #8
 80149d6:	d839      	bhi.n	8014a4c <_strtod_l+0x98>
 80149d8:	2a00      	cmp	r2, #0
 80149da:	d042      	beq.n	8014a62 <_strtod_l+0xae>
 80149dc:	2200      	movs	r2, #0
 80149de:	9212      	str	r2, [sp, #72]	@ 0x48
 80149e0:	2100      	movs	r1, #0
 80149e2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80149e4:	910c      	str	r1, [sp, #48]	@ 0x30
 80149e6:	782a      	ldrb	r2, [r5, #0]
 80149e8:	2a30      	cmp	r2, #48	@ 0x30
 80149ea:	d000      	beq.n	80149ee <_strtod_l+0x3a>
 80149ec:	e083      	b.n	8014af6 <_strtod_l+0x142>
 80149ee:	786a      	ldrb	r2, [r5, #1]
 80149f0:	3120      	adds	r1, #32
 80149f2:	438a      	bics	r2, r1
 80149f4:	2a58      	cmp	r2, #88	@ 0x58
 80149f6:	d000      	beq.n	80149fa <_strtod_l+0x46>
 80149f8:	e073      	b.n	8014ae2 <_strtod_l+0x12e>
 80149fa:	9302      	str	r3, [sp, #8]
 80149fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80149fe:	4a95      	ldr	r2, [pc, #596]	@ (8014c54 <_strtod_l+0x2a0>)
 8014a00:	9301      	str	r3, [sp, #4]
 8014a02:	ab1e      	add	r3, sp, #120	@ 0x78
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	9805      	ldr	r0, [sp, #20]
 8014a08:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014a0a:	a91d      	add	r1, sp, #116	@ 0x74
 8014a0c:	f001 f95a 	bl	8015cc4 <__gethex>
 8014a10:	230f      	movs	r3, #15
 8014a12:	0002      	movs	r2, r0
 8014a14:	401a      	ands	r2, r3
 8014a16:	0004      	movs	r4, r0
 8014a18:	9206      	str	r2, [sp, #24]
 8014a1a:	4218      	tst	r0, r3
 8014a1c:	d005      	beq.n	8014a2a <_strtod_l+0x76>
 8014a1e:	2a06      	cmp	r2, #6
 8014a20:	d12b      	bne.n	8014a7a <_strtod_l+0xc6>
 8014a22:	2300      	movs	r3, #0
 8014a24:	3501      	adds	r5, #1
 8014a26:	951d      	str	r5, [sp, #116]	@ 0x74
 8014a28:	9312      	str	r3, [sp, #72]	@ 0x48
 8014a2a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d002      	beq.n	8014a36 <_strtod_l+0x82>
 8014a30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014a32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d019      	beq.n	8014a70 <_strtod_l+0xbc>
 8014a3c:	2380      	movs	r3, #128	@ 0x80
 8014a3e:	0030      	movs	r0, r6
 8014a40:	061b      	lsls	r3, r3, #24
 8014a42:	18f9      	adds	r1, r7, r3
 8014a44:	b023      	add	sp, #140	@ 0x8c
 8014a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a48:	2a20      	cmp	r2, #32
 8014a4a:	d1c7      	bne.n	80149dc <_strtod_l+0x28>
 8014a4c:	3101      	adds	r1, #1
 8014a4e:	e7ba      	b.n	80149c6 <_strtod_l+0x12>
 8014a50:	2a2d      	cmp	r2, #45	@ 0x2d
 8014a52:	d1c3      	bne.n	80149dc <_strtod_l+0x28>
 8014a54:	3a2c      	subs	r2, #44	@ 0x2c
 8014a56:	9212      	str	r2, [sp, #72]	@ 0x48
 8014a58:	1c4a      	adds	r2, r1, #1
 8014a5a:	921d      	str	r2, [sp, #116]	@ 0x74
 8014a5c:	784a      	ldrb	r2, [r1, #1]
 8014a5e:	2a00      	cmp	r2, #0
 8014a60:	d1be      	bne.n	80149e0 <_strtod_l+0x2c>
 8014a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a64:	931d      	str	r3, [sp, #116]	@ 0x74
 8014a66:	2300      	movs	r3, #0
 8014a68:	9312      	str	r3, [sp, #72]	@ 0x48
 8014a6a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d1df      	bne.n	8014a30 <_strtod_l+0x7c>
 8014a70:	0030      	movs	r0, r6
 8014a72:	0039      	movs	r1, r7
 8014a74:	e7e6      	b.n	8014a44 <_strtod_l+0x90>
 8014a76:	2200      	movs	r2, #0
 8014a78:	e7ed      	b.n	8014a56 <_strtod_l+0xa2>
 8014a7a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8014a7c:	2a00      	cmp	r2, #0
 8014a7e:	d007      	beq.n	8014a90 <_strtod_l+0xdc>
 8014a80:	2135      	movs	r1, #53	@ 0x35
 8014a82:	a820      	add	r0, sp, #128	@ 0x80
 8014a84:	f7ff ff3a 	bl	80148fc <__copybits>
 8014a88:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8014a8a:	9805      	ldr	r0, [sp, #20]
 8014a8c:	f7ff faf4 	bl	8014078 <_Bfree>
 8014a90:	9806      	ldr	r0, [sp, #24]
 8014a92:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014a94:	3801      	subs	r0, #1
 8014a96:	2804      	cmp	r0, #4
 8014a98:	d806      	bhi.n	8014aa8 <_strtod_l+0xf4>
 8014a9a:	f7eb fb3d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8014a9e:	0312      	.short	0x0312
 8014aa0:	1e1c      	.short	0x1e1c
 8014aa2:	12          	.byte	0x12
 8014aa3:	00          	.byte	0x00
 8014aa4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014aa6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8014aa8:	05e4      	lsls	r4, r4, #23
 8014aaa:	d502      	bpl.n	8014ab2 <_strtod_l+0xfe>
 8014aac:	2380      	movs	r3, #128	@ 0x80
 8014aae:	061b      	lsls	r3, r3, #24
 8014ab0:	431f      	orrs	r7, r3
 8014ab2:	4b69      	ldr	r3, [pc, #420]	@ (8014c58 <_strtod_l+0x2a4>)
 8014ab4:	423b      	tst	r3, r7
 8014ab6:	d1b8      	bne.n	8014a2a <_strtod_l+0x76>
 8014ab8:	f7fe fad0 	bl	801305c <__errno>
 8014abc:	2322      	movs	r3, #34	@ 0x22
 8014abe:	6003      	str	r3, [r0, #0]
 8014ac0:	e7b3      	b.n	8014a2a <_strtod_l+0x76>
 8014ac2:	4966      	ldr	r1, [pc, #408]	@ (8014c5c <_strtod_l+0x2a8>)
 8014ac4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014ac6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014ac8:	400a      	ands	r2, r1
 8014aca:	4965      	ldr	r1, [pc, #404]	@ (8014c60 <_strtod_l+0x2ac>)
 8014acc:	185b      	adds	r3, r3, r1
 8014ace:	051b      	lsls	r3, r3, #20
 8014ad0:	431a      	orrs	r2, r3
 8014ad2:	0017      	movs	r7, r2
 8014ad4:	e7e8      	b.n	8014aa8 <_strtod_l+0xf4>
 8014ad6:	4f60      	ldr	r7, [pc, #384]	@ (8014c58 <_strtod_l+0x2a4>)
 8014ad8:	e7e6      	b.n	8014aa8 <_strtod_l+0xf4>
 8014ada:	2601      	movs	r6, #1
 8014adc:	4f61      	ldr	r7, [pc, #388]	@ (8014c64 <_strtod_l+0x2b0>)
 8014ade:	4276      	negs	r6, r6
 8014ae0:	e7e2      	b.n	8014aa8 <_strtod_l+0xf4>
 8014ae2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ae4:	1c5a      	adds	r2, r3, #1
 8014ae6:	921d      	str	r2, [sp, #116]	@ 0x74
 8014ae8:	785b      	ldrb	r3, [r3, #1]
 8014aea:	2b30      	cmp	r3, #48	@ 0x30
 8014aec:	d0f9      	beq.n	8014ae2 <_strtod_l+0x12e>
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d09b      	beq.n	8014a2a <_strtod_l+0x76>
 8014af2:	2301      	movs	r3, #1
 8014af4:	930c      	str	r3, [sp, #48]	@ 0x30
 8014af6:	2500      	movs	r5, #0
 8014af8:	220a      	movs	r2, #10
 8014afa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014afc:	950d      	str	r5, [sp, #52]	@ 0x34
 8014afe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014b00:	9508      	str	r5, [sp, #32]
 8014b02:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014b04:	7804      	ldrb	r4, [r0, #0]
 8014b06:	0023      	movs	r3, r4
 8014b08:	3b30      	subs	r3, #48	@ 0x30
 8014b0a:	b2d9      	uxtb	r1, r3
 8014b0c:	2909      	cmp	r1, #9
 8014b0e:	d927      	bls.n	8014b60 <_strtod_l+0x1ac>
 8014b10:	2201      	movs	r2, #1
 8014b12:	4955      	ldr	r1, [pc, #340]	@ (8014c68 <_strtod_l+0x2b4>)
 8014b14:	f000 fff8 	bl	8015b08 <strncmp>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	d031      	beq.n	8014b80 <_strtod_l+0x1cc>
 8014b1c:	2000      	movs	r0, #0
 8014b1e:	0023      	movs	r3, r4
 8014b20:	4684      	mov	ip, r0
 8014b22:	9a08      	ldr	r2, [sp, #32]
 8014b24:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b26:	9206      	str	r2, [sp, #24]
 8014b28:	2220      	movs	r2, #32
 8014b2a:	0019      	movs	r1, r3
 8014b2c:	4391      	bics	r1, r2
 8014b2e:	000a      	movs	r2, r1
 8014b30:	2100      	movs	r1, #0
 8014b32:	9107      	str	r1, [sp, #28]
 8014b34:	2a45      	cmp	r2, #69	@ 0x45
 8014b36:	d000      	beq.n	8014b3a <_strtod_l+0x186>
 8014b38:	e0c0      	b.n	8014cbc <_strtod_l+0x308>
 8014b3a:	9b06      	ldr	r3, [sp, #24]
 8014b3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014b3e:	4303      	orrs	r3, r0
 8014b40:	4313      	orrs	r3, r2
 8014b42:	428b      	cmp	r3, r1
 8014b44:	d08d      	beq.n	8014a62 <_strtod_l+0xae>
 8014b46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	931d      	str	r3, [sp, #116]	@ 0x74
 8014b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b50:	785b      	ldrb	r3, [r3, #1]
 8014b52:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b54:	d070      	beq.n	8014c38 <_strtod_l+0x284>
 8014b56:	000c      	movs	r4, r1
 8014b58:	2b2d      	cmp	r3, #45	@ 0x2d
 8014b5a:	d173      	bne.n	8014c44 <_strtod_l+0x290>
 8014b5c:	2401      	movs	r4, #1
 8014b5e:	e06c      	b.n	8014c3a <_strtod_l+0x286>
 8014b60:	9908      	ldr	r1, [sp, #32]
 8014b62:	2908      	cmp	r1, #8
 8014b64:	dc09      	bgt.n	8014b7a <_strtod_l+0x1c6>
 8014b66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014b68:	4351      	muls	r1, r2
 8014b6a:	185b      	adds	r3, r3, r1
 8014b6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b6e:	9b08      	ldr	r3, [sp, #32]
 8014b70:	3001      	adds	r0, #1
 8014b72:	3301      	adds	r3, #1
 8014b74:	9308      	str	r3, [sp, #32]
 8014b76:	901d      	str	r0, [sp, #116]	@ 0x74
 8014b78:	e7c3      	b.n	8014b02 <_strtod_l+0x14e>
 8014b7a:	4355      	muls	r5, r2
 8014b7c:	195d      	adds	r5, r3, r5
 8014b7e:	e7f6      	b.n	8014b6e <_strtod_l+0x1ba>
 8014b80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b82:	1c5a      	adds	r2, r3, #1
 8014b84:	921d      	str	r2, [sp, #116]	@ 0x74
 8014b86:	9a08      	ldr	r2, [sp, #32]
 8014b88:	785b      	ldrb	r3, [r3, #1]
 8014b8a:	2a00      	cmp	r2, #0
 8014b8c:	d03a      	beq.n	8014c04 <_strtod_l+0x250>
 8014b8e:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b90:	9206      	str	r2, [sp, #24]
 8014b92:	001a      	movs	r2, r3
 8014b94:	3a30      	subs	r2, #48	@ 0x30
 8014b96:	2a09      	cmp	r2, #9
 8014b98:	d912      	bls.n	8014bc0 <_strtod_l+0x20c>
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	4694      	mov	ip, r2
 8014b9e:	e7c3      	b.n	8014b28 <_strtod_l+0x174>
 8014ba0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ba2:	3001      	adds	r0, #1
 8014ba4:	1c5a      	adds	r2, r3, #1
 8014ba6:	921d      	str	r2, [sp, #116]	@ 0x74
 8014ba8:	785b      	ldrb	r3, [r3, #1]
 8014baa:	2b30      	cmp	r3, #48	@ 0x30
 8014bac:	d0f8      	beq.n	8014ba0 <_strtod_l+0x1ec>
 8014bae:	001a      	movs	r2, r3
 8014bb0:	3a31      	subs	r2, #49	@ 0x31
 8014bb2:	2a08      	cmp	r2, #8
 8014bb4:	d83b      	bhi.n	8014c2e <_strtod_l+0x27a>
 8014bb6:	900e      	str	r0, [sp, #56]	@ 0x38
 8014bb8:	2000      	movs	r0, #0
 8014bba:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014bbc:	9006      	str	r0, [sp, #24]
 8014bbe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8014bc0:	001a      	movs	r2, r3
 8014bc2:	1c41      	adds	r1, r0, #1
 8014bc4:	3a30      	subs	r2, #48	@ 0x30
 8014bc6:	2b30      	cmp	r3, #48	@ 0x30
 8014bc8:	d016      	beq.n	8014bf8 <_strtod_l+0x244>
 8014bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014bcc:	185b      	adds	r3, r3, r1
 8014bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8014bd0:	9b06      	ldr	r3, [sp, #24]
 8014bd2:	210a      	movs	r1, #10
 8014bd4:	469c      	mov	ip, r3
 8014bd6:	4484      	add	ip, r0
 8014bd8:	459c      	cmp	ip, r3
 8014bda:	d115      	bne.n	8014c08 <_strtod_l+0x254>
 8014bdc:	9906      	ldr	r1, [sp, #24]
 8014bde:	9b06      	ldr	r3, [sp, #24]
 8014be0:	3101      	adds	r1, #1
 8014be2:	1809      	adds	r1, r1, r0
 8014be4:	181b      	adds	r3, r3, r0
 8014be6:	9106      	str	r1, [sp, #24]
 8014be8:	2b08      	cmp	r3, #8
 8014bea:	dc19      	bgt.n	8014c20 <_strtod_l+0x26c>
 8014bec:	230a      	movs	r3, #10
 8014bee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014bf0:	434b      	muls	r3, r1
 8014bf2:	2100      	movs	r1, #0
 8014bf4:	18d3      	adds	r3, r2, r3
 8014bf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8014bf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014bfa:	0008      	movs	r0, r1
 8014bfc:	1c5a      	adds	r2, r3, #1
 8014bfe:	921d      	str	r2, [sp, #116]	@ 0x74
 8014c00:	785b      	ldrb	r3, [r3, #1]
 8014c02:	e7c6      	b.n	8014b92 <_strtod_l+0x1de>
 8014c04:	9808      	ldr	r0, [sp, #32]
 8014c06:	e7d0      	b.n	8014baa <_strtod_l+0x1f6>
 8014c08:	1c5c      	adds	r4, r3, #1
 8014c0a:	2b08      	cmp	r3, #8
 8014c0c:	dc04      	bgt.n	8014c18 <_strtod_l+0x264>
 8014c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c10:	434b      	muls	r3, r1
 8014c12:	930d      	str	r3, [sp, #52]	@ 0x34
 8014c14:	0023      	movs	r3, r4
 8014c16:	e7df      	b.n	8014bd8 <_strtod_l+0x224>
 8014c18:	2c10      	cmp	r4, #16
 8014c1a:	dcfb      	bgt.n	8014c14 <_strtod_l+0x260>
 8014c1c:	434d      	muls	r5, r1
 8014c1e:	e7f9      	b.n	8014c14 <_strtod_l+0x260>
 8014c20:	2100      	movs	r1, #0
 8014c22:	2b0f      	cmp	r3, #15
 8014c24:	dce8      	bgt.n	8014bf8 <_strtod_l+0x244>
 8014c26:	230a      	movs	r3, #10
 8014c28:	435d      	muls	r5, r3
 8014c2a:	1955      	adds	r5, r2, r5
 8014c2c:	e7e4      	b.n	8014bf8 <_strtod_l+0x244>
 8014c2e:	2200      	movs	r2, #0
 8014c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8014c32:	9206      	str	r2, [sp, #24]
 8014c34:	3201      	adds	r2, #1
 8014c36:	e7b1      	b.n	8014b9c <_strtod_l+0x1e8>
 8014c38:	2400      	movs	r4, #0
 8014c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c3c:	3302      	adds	r3, #2
 8014c3e:	931d      	str	r3, [sp, #116]	@ 0x74
 8014c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c42:	789b      	ldrb	r3, [r3, #2]
 8014c44:	001a      	movs	r2, r3
 8014c46:	3a30      	subs	r2, #48	@ 0x30
 8014c48:	2a09      	cmp	r2, #9
 8014c4a:	d913      	bls.n	8014c74 <_strtod_l+0x2c0>
 8014c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014c4e:	921d      	str	r2, [sp, #116]	@ 0x74
 8014c50:	2200      	movs	r2, #0
 8014c52:	e032      	b.n	8014cba <_strtod_l+0x306>
 8014c54:	08017378 	.word	0x08017378
 8014c58:	7ff00000 	.word	0x7ff00000
 8014c5c:	ffefffff 	.word	0xffefffff
 8014c60:	00000433 	.word	0x00000433
 8014c64:	7fffffff 	.word	0x7fffffff
 8014c68:	08017360 	.word	0x08017360
 8014c6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c6e:	1c5a      	adds	r2, r3, #1
 8014c70:	921d      	str	r2, [sp, #116]	@ 0x74
 8014c72:	785b      	ldrb	r3, [r3, #1]
 8014c74:	2b30      	cmp	r3, #48	@ 0x30
 8014c76:	d0f9      	beq.n	8014c6c <_strtod_l+0x2b8>
 8014c78:	2200      	movs	r2, #0
 8014c7a:	9207      	str	r2, [sp, #28]
 8014c7c:	001a      	movs	r2, r3
 8014c7e:	3a31      	subs	r2, #49	@ 0x31
 8014c80:	2a08      	cmp	r2, #8
 8014c82:	d81b      	bhi.n	8014cbc <_strtod_l+0x308>
 8014c84:	3b30      	subs	r3, #48	@ 0x30
 8014c86:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c8a:	9307      	str	r3, [sp, #28]
 8014c8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c8e:	1c59      	adds	r1, r3, #1
 8014c90:	911d      	str	r1, [sp, #116]	@ 0x74
 8014c92:	785b      	ldrb	r3, [r3, #1]
 8014c94:	001a      	movs	r2, r3
 8014c96:	3a30      	subs	r2, #48	@ 0x30
 8014c98:	2a09      	cmp	r2, #9
 8014c9a:	d93a      	bls.n	8014d12 <_strtod_l+0x35e>
 8014c9c:	9a07      	ldr	r2, [sp, #28]
 8014c9e:	1a8a      	subs	r2, r1, r2
 8014ca0:	49b4      	ldr	r1, [pc, #720]	@ (8014f74 <_strtod_l+0x5c0>)
 8014ca2:	9107      	str	r1, [sp, #28]
 8014ca4:	2a08      	cmp	r2, #8
 8014ca6:	dc04      	bgt.n	8014cb2 <_strtod_l+0x2fe>
 8014ca8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014caa:	9207      	str	r2, [sp, #28]
 8014cac:	428a      	cmp	r2, r1
 8014cae:	dd00      	ble.n	8014cb2 <_strtod_l+0x2fe>
 8014cb0:	9107      	str	r1, [sp, #28]
 8014cb2:	2c00      	cmp	r4, #0
 8014cb4:	d002      	beq.n	8014cbc <_strtod_l+0x308>
 8014cb6:	9a07      	ldr	r2, [sp, #28]
 8014cb8:	4252      	negs	r2, r2
 8014cba:	9207      	str	r2, [sp, #28]
 8014cbc:	9a06      	ldr	r2, [sp, #24]
 8014cbe:	2a00      	cmp	r2, #0
 8014cc0:	d14d      	bne.n	8014d5e <_strtod_l+0x3aa>
 8014cc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014cc4:	4310      	orrs	r0, r2
 8014cc6:	d000      	beq.n	8014cca <_strtod_l+0x316>
 8014cc8:	e6af      	b.n	8014a2a <_strtod_l+0x76>
 8014cca:	4662      	mov	r2, ip
 8014ccc:	2a00      	cmp	r2, #0
 8014cce:	d000      	beq.n	8014cd2 <_strtod_l+0x31e>
 8014cd0:	e6c7      	b.n	8014a62 <_strtod_l+0xae>
 8014cd2:	2b69      	cmp	r3, #105	@ 0x69
 8014cd4:	d027      	beq.n	8014d26 <_strtod_l+0x372>
 8014cd6:	dc23      	bgt.n	8014d20 <_strtod_l+0x36c>
 8014cd8:	2b49      	cmp	r3, #73	@ 0x49
 8014cda:	d024      	beq.n	8014d26 <_strtod_l+0x372>
 8014cdc:	2b4e      	cmp	r3, #78	@ 0x4e
 8014cde:	d000      	beq.n	8014ce2 <_strtod_l+0x32e>
 8014ce0:	e6bf      	b.n	8014a62 <_strtod_l+0xae>
 8014ce2:	49a5      	ldr	r1, [pc, #660]	@ (8014f78 <_strtod_l+0x5c4>)
 8014ce4:	a81d      	add	r0, sp, #116	@ 0x74
 8014ce6:	f001 fa23 	bl	8016130 <__match>
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d100      	bne.n	8014cf0 <_strtod_l+0x33c>
 8014cee:	e6b8      	b.n	8014a62 <_strtod_l+0xae>
 8014cf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	2b28      	cmp	r3, #40	@ 0x28
 8014cf6:	d12c      	bne.n	8014d52 <_strtod_l+0x39e>
 8014cf8:	49a0      	ldr	r1, [pc, #640]	@ (8014f7c <_strtod_l+0x5c8>)
 8014cfa:	aa20      	add	r2, sp, #128	@ 0x80
 8014cfc:	a81d      	add	r0, sp, #116	@ 0x74
 8014cfe:	f001 fa2b 	bl	8016158 <__hexnan>
 8014d02:	2805      	cmp	r0, #5
 8014d04:	d125      	bne.n	8014d52 <_strtod_l+0x39e>
 8014d06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014d08:	4a9d      	ldr	r2, [pc, #628]	@ (8014f80 <_strtod_l+0x5cc>)
 8014d0a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014d0c:	431a      	orrs	r2, r3
 8014d0e:	0017      	movs	r7, r2
 8014d10:	e68b      	b.n	8014a2a <_strtod_l+0x76>
 8014d12:	220a      	movs	r2, #10
 8014d14:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014d16:	434a      	muls	r2, r1
 8014d18:	18d2      	adds	r2, r2, r3
 8014d1a:	3a30      	subs	r2, #48	@ 0x30
 8014d1c:	9210      	str	r2, [sp, #64]	@ 0x40
 8014d1e:	e7b5      	b.n	8014c8c <_strtod_l+0x2d8>
 8014d20:	2b6e      	cmp	r3, #110	@ 0x6e
 8014d22:	d0de      	beq.n	8014ce2 <_strtod_l+0x32e>
 8014d24:	e69d      	b.n	8014a62 <_strtod_l+0xae>
 8014d26:	4997      	ldr	r1, [pc, #604]	@ (8014f84 <_strtod_l+0x5d0>)
 8014d28:	a81d      	add	r0, sp, #116	@ 0x74
 8014d2a:	f001 fa01 	bl	8016130 <__match>
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d100      	bne.n	8014d34 <_strtod_l+0x380>
 8014d32:	e696      	b.n	8014a62 <_strtod_l+0xae>
 8014d34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014d36:	4994      	ldr	r1, [pc, #592]	@ (8014f88 <_strtod_l+0x5d4>)
 8014d38:	3b01      	subs	r3, #1
 8014d3a:	a81d      	add	r0, sp, #116	@ 0x74
 8014d3c:	931d      	str	r3, [sp, #116]	@ 0x74
 8014d3e:	f001 f9f7 	bl	8016130 <__match>
 8014d42:	2800      	cmp	r0, #0
 8014d44:	d102      	bne.n	8014d4c <_strtod_l+0x398>
 8014d46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014d48:	3301      	adds	r3, #1
 8014d4a:	931d      	str	r3, [sp, #116]	@ 0x74
 8014d4c:	2600      	movs	r6, #0
 8014d4e:	4f8c      	ldr	r7, [pc, #560]	@ (8014f80 <_strtod_l+0x5cc>)
 8014d50:	e66b      	b.n	8014a2a <_strtod_l+0x76>
 8014d52:	488e      	ldr	r0, [pc, #568]	@ (8014f8c <_strtod_l+0x5d8>)
 8014d54:	f000 fefc 	bl	8015b50 <nan>
 8014d58:	0006      	movs	r6, r0
 8014d5a:	000f      	movs	r7, r1
 8014d5c:	e665      	b.n	8014a2a <_strtod_l+0x76>
 8014d5e:	9b07      	ldr	r3, [sp, #28]
 8014d60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d62:	1a9b      	subs	r3, r3, r2
 8014d64:	930c      	str	r3, [sp, #48]	@ 0x30
 8014d66:	9b08      	ldr	r3, [sp, #32]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d101      	bne.n	8014d70 <_strtod_l+0x3bc>
 8014d6c:	9b06      	ldr	r3, [sp, #24]
 8014d6e:	9308      	str	r3, [sp, #32]
 8014d70:	9c06      	ldr	r4, [sp, #24]
 8014d72:	2c10      	cmp	r4, #16
 8014d74:	dd00      	ble.n	8014d78 <_strtod_l+0x3c4>
 8014d76:	2410      	movs	r4, #16
 8014d78:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8014d7a:	f7ee faef 	bl	800335c <__aeabi_ui2d>
 8014d7e:	9b06      	ldr	r3, [sp, #24]
 8014d80:	0006      	movs	r6, r0
 8014d82:	000f      	movs	r7, r1
 8014d84:	2b09      	cmp	r3, #9
 8014d86:	dc13      	bgt.n	8014db0 <_strtod_l+0x3fc>
 8014d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d100      	bne.n	8014d90 <_strtod_l+0x3dc>
 8014d8e:	e64c      	b.n	8014a2a <_strtod_l+0x76>
 8014d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	dc00      	bgt.n	8014d98 <_strtod_l+0x3e4>
 8014d96:	e07e      	b.n	8014e96 <_strtod_l+0x4e2>
 8014d98:	2b16      	cmp	r3, #22
 8014d9a:	dc63      	bgt.n	8014e64 <_strtod_l+0x4b0>
 8014d9c:	497c      	ldr	r1, [pc, #496]	@ (8014f90 <_strtod_l+0x5dc>)
 8014d9e:	00db      	lsls	r3, r3, #3
 8014da0:	18c9      	adds	r1, r1, r3
 8014da2:	0032      	movs	r2, r6
 8014da4:	6808      	ldr	r0, [r1, #0]
 8014da6:	6849      	ldr	r1, [r1, #4]
 8014da8:	003b      	movs	r3, r7
 8014daa:	f7ed fbe7 	bl	800257c <__aeabi_dmul>
 8014dae:	e7d3      	b.n	8014d58 <_strtod_l+0x3a4>
 8014db0:	0022      	movs	r2, r4
 8014db2:	4b77      	ldr	r3, [pc, #476]	@ (8014f90 <_strtod_l+0x5dc>)
 8014db4:	3a09      	subs	r2, #9
 8014db6:	00d2      	lsls	r2, r2, #3
 8014db8:	189b      	adds	r3, r3, r2
 8014dba:	681a      	ldr	r2, [r3, #0]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	f7ed fbdd 	bl	800257c <__aeabi_dmul>
 8014dc2:	0006      	movs	r6, r0
 8014dc4:	0028      	movs	r0, r5
 8014dc6:	000f      	movs	r7, r1
 8014dc8:	f7ee fac8 	bl	800335c <__aeabi_ui2d>
 8014dcc:	000b      	movs	r3, r1
 8014dce:	0002      	movs	r2, r0
 8014dd0:	0039      	movs	r1, r7
 8014dd2:	0030      	movs	r0, r6
 8014dd4:	f7ec fc2a 	bl	800162c <__aeabi_dadd>
 8014dd8:	9b06      	ldr	r3, [sp, #24]
 8014dda:	0006      	movs	r6, r0
 8014ddc:	000f      	movs	r7, r1
 8014dde:	2b0f      	cmp	r3, #15
 8014de0:	ddd2      	ble.n	8014d88 <_strtod_l+0x3d4>
 8014de2:	9b06      	ldr	r3, [sp, #24]
 8014de4:	1b1c      	subs	r4, r3, r4
 8014de6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014de8:	18e4      	adds	r4, r4, r3
 8014dea:	2c00      	cmp	r4, #0
 8014dec:	dc00      	bgt.n	8014df0 <_strtod_l+0x43c>
 8014dee:	e09b      	b.n	8014f28 <_strtod_l+0x574>
 8014df0:	220f      	movs	r2, #15
 8014df2:	0023      	movs	r3, r4
 8014df4:	4013      	ands	r3, r2
 8014df6:	4214      	tst	r4, r2
 8014df8:	d00a      	beq.n	8014e10 <_strtod_l+0x45c>
 8014dfa:	4965      	ldr	r1, [pc, #404]	@ (8014f90 <_strtod_l+0x5dc>)
 8014dfc:	00db      	lsls	r3, r3, #3
 8014dfe:	18c9      	adds	r1, r1, r3
 8014e00:	0032      	movs	r2, r6
 8014e02:	6808      	ldr	r0, [r1, #0]
 8014e04:	6849      	ldr	r1, [r1, #4]
 8014e06:	003b      	movs	r3, r7
 8014e08:	f7ed fbb8 	bl	800257c <__aeabi_dmul>
 8014e0c:	0006      	movs	r6, r0
 8014e0e:	000f      	movs	r7, r1
 8014e10:	230f      	movs	r3, #15
 8014e12:	439c      	bics	r4, r3
 8014e14:	d073      	beq.n	8014efe <_strtod_l+0x54a>
 8014e16:	3326      	adds	r3, #38	@ 0x26
 8014e18:	33ff      	adds	r3, #255	@ 0xff
 8014e1a:	429c      	cmp	r4, r3
 8014e1c:	dd4b      	ble.n	8014eb6 <_strtod_l+0x502>
 8014e1e:	2300      	movs	r3, #0
 8014e20:	9306      	str	r3, [sp, #24]
 8014e22:	9307      	str	r3, [sp, #28]
 8014e24:	930d      	str	r3, [sp, #52]	@ 0x34
 8014e26:	9308      	str	r3, [sp, #32]
 8014e28:	2322      	movs	r3, #34	@ 0x22
 8014e2a:	2600      	movs	r6, #0
 8014e2c:	9a05      	ldr	r2, [sp, #20]
 8014e2e:	4f54      	ldr	r7, [pc, #336]	@ (8014f80 <_strtod_l+0x5cc>)
 8014e30:	6013      	str	r3, [r2, #0]
 8014e32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e34:	42b3      	cmp	r3, r6
 8014e36:	d100      	bne.n	8014e3a <_strtod_l+0x486>
 8014e38:	e5f7      	b.n	8014a2a <_strtod_l+0x76>
 8014e3a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8014e3c:	9805      	ldr	r0, [sp, #20]
 8014e3e:	f7ff f91b 	bl	8014078 <_Bfree>
 8014e42:	9908      	ldr	r1, [sp, #32]
 8014e44:	9805      	ldr	r0, [sp, #20]
 8014e46:	f7ff f917 	bl	8014078 <_Bfree>
 8014e4a:	9907      	ldr	r1, [sp, #28]
 8014e4c:	9805      	ldr	r0, [sp, #20]
 8014e4e:	f7ff f913 	bl	8014078 <_Bfree>
 8014e52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014e54:	9805      	ldr	r0, [sp, #20]
 8014e56:	f7ff f90f 	bl	8014078 <_Bfree>
 8014e5a:	9906      	ldr	r1, [sp, #24]
 8014e5c:	9805      	ldr	r0, [sp, #20]
 8014e5e:	f7ff f90b 	bl	8014078 <_Bfree>
 8014e62:	e5e2      	b.n	8014a2a <_strtod_l+0x76>
 8014e64:	2325      	movs	r3, #37	@ 0x25
 8014e66:	9a06      	ldr	r2, [sp, #24]
 8014e68:	1a9b      	subs	r3, r3, r2
 8014e6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	dbb8      	blt.n	8014de2 <_strtod_l+0x42e>
 8014e70:	240f      	movs	r4, #15
 8014e72:	9b06      	ldr	r3, [sp, #24]
 8014e74:	4d46      	ldr	r5, [pc, #280]	@ (8014f90 <_strtod_l+0x5dc>)
 8014e76:	1ae4      	subs	r4, r4, r3
 8014e78:	00e1      	lsls	r1, r4, #3
 8014e7a:	1869      	adds	r1, r5, r1
 8014e7c:	0032      	movs	r2, r6
 8014e7e:	6808      	ldr	r0, [r1, #0]
 8014e80:	6849      	ldr	r1, [r1, #4]
 8014e82:	003b      	movs	r3, r7
 8014e84:	f7ed fb7a 	bl	800257c <__aeabi_dmul>
 8014e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e8a:	1b1c      	subs	r4, r3, r4
 8014e8c:	00e4      	lsls	r4, r4, #3
 8014e8e:	192d      	adds	r5, r5, r4
 8014e90:	682a      	ldr	r2, [r5, #0]
 8014e92:	686b      	ldr	r3, [r5, #4]
 8014e94:	e789      	b.n	8014daa <_strtod_l+0x3f6>
 8014e96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e98:	3316      	adds	r3, #22
 8014e9a:	dba2      	blt.n	8014de2 <_strtod_l+0x42e>
 8014e9c:	9907      	ldr	r1, [sp, #28]
 8014e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8014f90 <_strtod_l+0x5dc>)
 8014ea2:	1a52      	subs	r2, r2, r1
 8014ea4:	00d2      	lsls	r2, r2, #3
 8014ea6:	189b      	adds	r3, r3, r2
 8014ea8:	0030      	movs	r0, r6
 8014eaa:	681a      	ldr	r2, [r3, #0]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	0039      	movs	r1, r7
 8014eb0:	f7ec ff20 	bl	8001cf4 <__aeabi_ddiv>
 8014eb4:	e750      	b.n	8014d58 <_strtod_l+0x3a4>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	0030      	movs	r0, r6
 8014eba:	0039      	movs	r1, r7
 8014ebc:	4d35      	ldr	r5, [pc, #212]	@ (8014f94 <_strtod_l+0x5e0>)
 8014ebe:	1124      	asrs	r4, r4, #4
 8014ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ec2:	2c01      	cmp	r4, #1
 8014ec4:	dc1e      	bgt.n	8014f04 <_strtod_l+0x550>
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d001      	beq.n	8014ece <_strtod_l+0x51a>
 8014eca:	0006      	movs	r6, r0
 8014ecc:	000f      	movs	r7, r1
 8014ece:	4b32      	ldr	r3, [pc, #200]	@ (8014f98 <_strtod_l+0x5e4>)
 8014ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ed2:	18ff      	adds	r7, r7, r3
 8014ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8014f94 <_strtod_l+0x5e0>)
 8014ed6:	00d5      	lsls	r5, r2, #3
 8014ed8:	195d      	adds	r5, r3, r5
 8014eda:	0032      	movs	r2, r6
 8014edc:	6828      	ldr	r0, [r5, #0]
 8014ede:	6869      	ldr	r1, [r5, #4]
 8014ee0:	003b      	movs	r3, r7
 8014ee2:	f7ed fb4b 	bl	800257c <__aeabi_dmul>
 8014ee6:	4b26      	ldr	r3, [pc, #152]	@ (8014f80 <_strtod_l+0x5cc>)
 8014ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8014f9c <_strtod_l+0x5e8>)
 8014eea:	0006      	movs	r6, r0
 8014eec:	400b      	ands	r3, r1
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d895      	bhi.n	8014e1e <_strtod_l+0x46a>
 8014ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8014fa0 <_strtod_l+0x5ec>)
 8014ef4:	4293      	cmp	r3, r2
 8014ef6:	d913      	bls.n	8014f20 <_strtod_l+0x56c>
 8014ef8:	2601      	movs	r6, #1
 8014efa:	4f2a      	ldr	r7, [pc, #168]	@ (8014fa4 <_strtod_l+0x5f0>)
 8014efc:	4276      	negs	r6, r6
 8014efe:	2300      	movs	r3, #0
 8014f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f02:	e086      	b.n	8015012 <_strtod_l+0x65e>
 8014f04:	2201      	movs	r2, #1
 8014f06:	4214      	tst	r4, r2
 8014f08:	d004      	beq.n	8014f14 <_strtod_l+0x560>
 8014f0a:	682a      	ldr	r2, [r5, #0]
 8014f0c:	686b      	ldr	r3, [r5, #4]
 8014f0e:	f7ed fb35 	bl	800257c <__aeabi_dmul>
 8014f12:	2301      	movs	r3, #1
 8014f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f16:	1064      	asrs	r4, r4, #1
 8014f18:	3201      	adds	r2, #1
 8014f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f1c:	3508      	adds	r5, #8
 8014f1e:	e7d0      	b.n	8014ec2 <_strtod_l+0x50e>
 8014f20:	23d4      	movs	r3, #212	@ 0xd4
 8014f22:	049b      	lsls	r3, r3, #18
 8014f24:	18cf      	adds	r7, r1, r3
 8014f26:	e7ea      	b.n	8014efe <_strtod_l+0x54a>
 8014f28:	2c00      	cmp	r4, #0
 8014f2a:	d0e8      	beq.n	8014efe <_strtod_l+0x54a>
 8014f2c:	4264      	negs	r4, r4
 8014f2e:	230f      	movs	r3, #15
 8014f30:	0022      	movs	r2, r4
 8014f32:	401a      	ands	r2, r3
 8014f34:	421c      	tst	r4, r3
 8014f36:	d00a      	beq.n	8014f4e <_strtod_l+0x59a>
 8014f38:	4b15      	ldr	r3, [pc, #84]	@ (8014f90 <_strtod_l+0x5dc>)
 8014f3a:	00d2      	lsls	r2, r2, #3
 8014f3c:	189b      	adds	r3, r3, r2
 8014f3e:	0030      	movs	r0, r6
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	0039      	movs	r1, r7
 8014f46:	f7ec fed5 	bl	8001cf4 <__aeabi_ddiv>
 8014f4a:	0006      	movs	r6, r0
 8014f4c:	000f      	movs	r7, r1
 8014f4e:	1124      	asrs	r4, r4, #4
 8014f50:	d0d5      	beq.n	8014efe <_strtod_l+0x54a>
 8014f52:	2c1f      	cmp	r4, #31
 8014f54:	dd28      	ble.n	8014fa8 <_strtod_l+0x5f4>
 8014f56:	2300      	movs	r3, #0
 8014f58:	9306      	str	r3, [sp, #24]
 8014f5a:	9307      	str	r3, [sp, #28]
 8014f5c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014f5e:	9308      	str	r3, [sp, #32]
 8014f60:	2322      	movs	r3, #34	@ 0x22
 8014f62:	9a05      	ldr	r2, [sp, #20]
 8014f64:	2600      	movs	r6, #0
 8014f66:	6013      	str	r3, [r2, #0]
 8014f68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014f6a:	2700      	movs	r7, #0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d000      	beq.n	8014f72 <_strtod_l+0x5be>
 8014f70:	e763      	b.n	8014e3a <_strtod_l+0x486>
 8014f72:	e55a      	b.n	8014a2a <_strtod_l+0x76>
 8014f74:	00004e1f 	.word	0x00004e1f
 8014f78:	0801714d 	.word	0x0801714d
 8014f7c:	08017364 	.word	0x08017364
 8014f80:	7ff00000 	.word	0x7ff00000
 8014f84:	08017145 	.word	0x08017145
 8014f88:	0801717c 	.word	0x0801717c
 8014f8c:	0801750d 	.word	0x0801750d
 8014f90:	08017298 	.word	0x08017298
 8014f94:	08017270 	.word	0x08017270
 8014f98:	fcb00000 	.word	0xfcb00000
 8014f9c:	7ca00000 	.word	0x7ca00000
 8014fa0:	7c900000 	.word	0x7c900000
 8014fa4:	7fefffff 	.word	0x7fefffff
 8014fa8:	2310      	movs	r3, #16
 8014faa:	0022      	movs	r2, r4
 8014fac:	401a      	ands	r2, r3
 8014fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fb0:	421c      	tst	r4, r3
 8014fb2:	d001      	beq.n	8014fb8 <_strtod_l+0x604>
 8014fb4:	335a      	adds	r3, #90	@ 0x5a
 8014fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fb8:	0030      	movs	r0, r6
 8014fba:	0039      	movs	r1, r7
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	4dbf      	ldr	r5, [pc, #764]	@ (80152bc <_strtod_l+0x908>)
 8014fc0:	2201      	movs	r2, #1
 8014fc2:	4214      	tst	r4, r2
 8014fc4:	d004      	beq.n	8014fd0 <_strtod_l+0x61c>
 8014fc6:	682a      	ldr	r2, [r5, #0]
 8014fc8:	686b      	ldr	r3, [r5, #4]
 8014fca:	f7ed fad7 	bl	800257c <__aeabi_dmul>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	1064      	asrs	r4, r4, #1
 8014fd2:	3508      	adds	r5, #8
 8014fd4:	2c00      	cmp	r4, #0
 8014fd6:	d1f3      	bne.n	8014fc0 <_strtod_l+0x60c>
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d001      	beq.n	8014fe0 <_strtod_l+0x62c>
 8014fdc:	0006      	movs	r6, r0
 8014fde:	000f      	movs	r7, r1
 8014fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00d      	beq.n	8015002 <_strtod_l+0x64e>
 8014fe6:	236b      	movs	r3, #107	@ 0x6b
 8014fe8:	007a      	lsls	r2, r7, #1
 8014fea:	0d52      	lsrs	r2, r2, #21
 8014fec:	0039      	movs	r1, r7
 8014fee:	1a9b      	subs	r3, r3, r2
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	dd06      	ble.n	8015002 <_strtod_l+0x64e>
 8014ff4:	2b1f      	cmp	r3, #31
 8014ff6:	dd5a      	ble.n	80150ae <_strtod_l+0x6fa>
 8014ff8:	2600      	movs	r6, #0
 8014ffa:	2b34      	cmp	r3, #52	@ 0x34
 8014ffc:	dd50      	ble.n	80150a0 <_strtod_l+0x6ec>
 8014ffe:	27dc      	movs	r7, #220	@ 0xdc
 8015000:	04bf      	lsls	r7, r7, #18
 8015002:	2200      	movs	r2, #0
 8015004:	2300      	movs	r3, #0
 8015006:	0030      	movs	r0, r6
 8015008:	0039      	movs	r1, r7
 801500a:	f7eb fa1f 	bl	800044c <__aeabi_dcmpeq>
 801500e:	2800      	cmp	r0, #0
 8015010:	d1a1      	bne.n	8014f56 <_strtod_l+0x5a2>
 8015012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015014:	9a08      	ldr	r2, [sp, #32]
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801501a:	9b06      	ldr	r3, [sp, #24]
 801501c:	9805      	ldr	r0, [sp, #20]
 801501e:	f7ff f893 	bl	8014148 <__s2b>
 8015022:	900d      	str	r0, [sp, #52]	@ 0x34
 8015024:	2800      	cmp	r0, #0
 8015026:	d100      	bne.n	801502a <_strtod_l+0x676>
 8015028:	e6f9      	b.n	8014e1e <_strtod_l+0x46a>
 801502a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801502c:	9907      	ldr	r1, [sp, #28]
 801502e:	17da      	asrs	r2, r3, #31
 8015030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015032:	1a5b      	subs	r3, r3, r1
 8015034:	401a      	ands	r2, r3
 8015036:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015038:	9217      	str	r2, [sp, #92]	@ 0x5c
 801503a:	43db      	mvns	r3, r3
 801503c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801503e:	17db      	asrs	r3, r3, #31
 8015040:	401a      	ands	r2, r3
 8015042:	2300      	movs	r3, #0
 8015044:	921a      	str	r2, [sp, #104]	@ 0x68
 8015046:	9306      	str	r3, [sp, #24]
 8015048:	9307      	str	r3, [sp, #28]
 801504a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801504c:	9805      	ldr	r0, [sp, #20]
 801504e:	6859      	ldr	r1, [r3, #4]
 8015050:	f7fe ffce 	bl	8013ff0 <_Balloc>
 8015054:	9008      	str	r0, [sp, #32]
 8015056:	2800      	cmp	r0, #0
 8015058:	d100      	bne.n	801505c <_strtod_l+0x6a8>
 801505a:	e6e5      	b.n	8014e28 <_strtod_l+0x474>
 801505c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801505e:	300c      	adds	r0, #12
 8015060:	0019      	movs	r1, r3
 8015062:	691a      	ldr	r2, [r3, #16]
 8015064:	310c      	adds	r1, #12
 8015066:	3202      	adds	r2, #2
 8015068:	0092      	lsls	r2, r2, #2
 801506a:	f7fe f82f 	bl	80130cc <memcpy>
 801506e:	ab20      	add	r3, sp, #128	@ 0x80
 8015070:	9301      	str	r3, [sp, #4]
 8015072:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015074:	9300      	str	r3, [sp, #0]
 8015076:	0032      	movs	r2, r6
 8015078:	003b      	movs	r3, r7
 801507a:	9805      	ldr	r0, [sp, #20]
 801507c:	9610      	str	r6, [sp, #64]	@ 0x40
 801507e:	9711      	str	r7, [sp, #68]	@ 0x44
 8015080:	f7ff fbb2 	bl	80147e8 <__d2b>
 8015084:	901e      	str	r0, [sp, #120]	@ 0x78
 8015086:	2800      	cmp	r0, #0
 8015088:	d100      	bne.n	801508c <_strtod_l+0x6d8>
 801508a:	e6cd      	b.n	8014e28 <_strtod_l+0x474>
 801508c:	2101      	movs	r1, #1
 801508e:	9805      	ldr	r0, [sp, #20]
 8015090:	f7ff f8f6 	bl	8014280 <__i2b>
 8015094:	9007      	str	r0, [sp, #28]
 8015096:	2800      	cmp	r0, #0
 8015098:	d10e      	bne.n	80150b8 <_strtod_l+0x704>
 801509a:	2300      	movs	r3, #0
 801509c:	9307      	str	r3, [sp, #28]
 801509e:	e6c3      	b.n	8014e28 <_strtod_l+0x474>
 80150a0:	234b      	movs	r3, #75	@ 0x4b
 80150a2:	1a9a      	subs	r2, r3, r2
 80150a4:	3b4c      	subs	r3, #76	@ 0x4c
 80150a6:	4093      	lsls	r3, r2
 80150a8:	4019      	ands	r1, r3
 80150aa:	000f      	movs	r7, r1
 80150ac:	e7a9      	b.n	8015002 <_strtod_l+0x64e>
 80150ae:	2201      	movs	r2, #1
 80150b0:	4252      	negs	r2, r2
 80150b2:	409a      	lsls	r2, r3
 80150b4:	4016      	ands	r6, r2
 80150b6:	e7a4      	b.n	8015002 <_strtod_l+0x64e>
 80150b8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80150ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80150bc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80150be:	1ad4      	subs	r4, r2, r3
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	db01      	blt.n	80150c8 <_strtod_l+0x714>
 80150c4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80150c6:	195d      	adds	r5, r3, r5
 80150c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80150ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80150cc:	1a5b      	subs	r3, r3, r1
 80150ce:	2136      	movs	r1, #54	@ 0x36
 80150d0:	189b      	adds	r3, r3, r2
 80150d2:	1a8a      	subs	r2, r1, r2
 80150d4:	497a      	ldr	r1, [pc, #488]	@ (80152c0 <_strtod_l+0x90c>)
 80150d6:	2001      	movs	r0, #1
 80150d8:	468c      	mov	ip, r1
 80150da:	2100      	movs	r1, #0
 80150dc:	3b01      	subs	r3, #1
 80150de:	9116      	str	r1, [sp, #88]	@ 0x58
 80150e0:	9014      	str	r0, [sp, #80]	@ 0x50
 80150e2:	4563      	cmp	r3, ip
 80150e4:	da06      	bge.n	80150f4 <_strtod_l+0x740>
 80150e6:	4661      	mov	r1, ip
 80150e8:	1ac9      	subs	r1, r1, r3
 80150ea:	1a52      	subs	r2, r2, r1
 80150ec:	291f      	cmp	r1, #31
 80150ee:	dc3f      	bgt.n	8015170 <_strtod_l+0x7bc>
 80150f0:	4088      	lsls	r0, r1
 80150f2:	9014      	str	r0, [sp, #80]	@ 0x50
 80150f4:	18ab      	adds	r3, r5, r2
 80150f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80150f8:	18a4      	adds	r4, r4, r2
 80150fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80150fe:	191c      	adds	r4, r3, r4
 8015100:	002b      	movs	r3, r5
 8015102:	4295      	cmp	r5, r2
 8015104:	dd00      	ble.n	8015108 <_strtod_l+0x754>
 8015106:	0013      	movs	r3, r2
 8015108:	42a3      	cmp	r3, r4
 801510a:	dd00      	ble.n	801510e <_strtod_l+0x75a>
 801510c:	0023      	movs	r3, r4
 801510e:	2b00      	cmp	r3, #0
 8015110:	dd04      	ble.n	801511c <_strtod_l+0x768>
 8015112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015114:	1ae4      	subs	r4, r4, r3
 8015116:	1ad2      	subs	r2, r2, r3
 8015118:	920e      	str	r2, [sp, #56]	@ 0x38
 801511a:	1aed      	subs	r5, r5, r3
 801511c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801511e:	2b00      	cmp	r3, #0
 8015120:	dd16      	ble.n	8015150 <_strtod_l+0x79c>
 8015122:	001a      	movs	r2, r3
 8015124:	9907      	ldr	r1, [sp, #28]
 8015126:	9805      	ldr	r0, [sp, #20]
 8015128:	f7ff f974 	bl	8014414 <__pow5mult>
 801512c:	9007      	str	r0, [sp, #28]
 801512e:	2800      	cmp	r0, #0
 8015130:	d0b3      	beq.n	801509a <_strtod_l+0x6e6>
 8015132:	0001      	movs	r1, r0
 8015134:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8015136:	9805      	ldr	r0, [sp, #20]
 8015138:	f7ff f8ba 	bl	80142b0 <__multiply>
 801513c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801513e:	2800      	cmp	r0, #0
 8015140:	d100      	bne.n	8015144 <_strtod_l+0x790>
 8015142:	e671      	b.n	8014e28 <_strtod_l+0x474>
 8015144:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8015146:	9805      	ldr	r0, [sp, #20]
 8015148:	f7fe ff96 	bl	8014078 <_Bfree>
 801514c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801514e:	931e      	str	r3, [sp, #120]	@ 0x78
 8015150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015152:	2b00      	cmp	r3, #0
 8015154:	dc12      	bgt.n	801517c <_strtod_l+0x7c8>
 8015156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015158:	2b00      	cmp	r3, #0
 801515a:	dd18      	ble.n	801518e <_strtod_l+0x7da>
 801515c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801515e:	9908      	ldr	r1, [sp, #32]
 8015160:	9805      	ldr	r0, [sp, #20]
 8015162:	f7ff f957 	bl	8014414 <__pow5mult>
 8015166:	9008      	str	r0, [sp, #32]
 8015168:	2800      	cmp	r0, #0
 801516a:	d110      	bne.n	801518e <_strtod_l+0x7da>
 801516c:	2300      	movs	r3, #0
 801516e:	e65a      	b.n	8014e26 <_strtod_l+0x472>
 8015170:	4954      	ldr	r1, [pc, #336]	@ (80152c4 <_strtod_l+0x910>)
 8015172:	1acb      	subs	r3, r1, r3
 8015174:	0001      	movs	r1, r0
 8015176:	4099      	lsls	r1, r3
 8015178:	9116      	str	r1, [sp, #88]	@ 0x58
 801517a:	e7ba      	b.n	80150f2 <_strtod_l+0x73e>
 801517c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801517e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8015180:	9805      	ldr	r0, [sp, #20]
 8015182:	f7ff f9a3 	bl	80144cc <__lshift>
 8015186:	901e      	str	r0, [sp, #120]	@ 0x78
 8015188:	2800      	cmp	r0, #0
 801518a:	d1e4      	bne.n	8015156 <_strtod_l+0x7a2>
 801518c:	e64c      	b.n	8014e28 <_strtod_l+0x474>
 801518e:	2c00      	cmp	r4, #0
 8015190:	dd07      	ble.n	80151a2 <_strtod_l+0x7ee>
 8015192:	0022      	movs	r2, r4
 8015194:	9908      	ldr	r1, [sp, #32]
 8015196:	9805      	ldr	r0, [sp, #20]
 8015198:	f7ff f998 	bl	80144cc <__lshift>
 801519c:	9008      	str	r0, [sp, #32]
 801519e:	2800      	cmp	r0, #0
 80151a0:	d0e4      	beq.n	801516c <_strtod_l+0x7b8>
 80151a2:	2d00      	cmp	r5, #0
 80151a4:	dd08      	ble.n	80151b8 <_strtod_l+0x804>
 80151a6:	002a      	movs	r2, r5
 80151a8:	9907      	ldr	r1, [sp, #28]
 80151aa:	9805      	ldr	r0, [sp, #20]
 80151ac:	f7ff f98e 	bl	80144cc <__lshift>
 80151b0:	9007      	str	r0, [sp, #28]
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d100      	bne.n	80151b8 <_strtod_l+0x804>
 80151b6:	e637      	b.n	8014e28 <_strtod_l+0x474>
 80151b8:	9a08      	ldr	r2, [sp, #32]
 80151ba:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80151bc:	9805      	ldr	r0, [sp, #20]
 80151be:	f7ff fa0d 	bl	80145dc <__mdiff>
 80151c2:	9006      	str	r0, [sp, #24]
 80151c4:	2800      	cmp	r0, #0
 80151c6:	d100      	bne.n	80151ca <_strtod_l+0x816>
 80151c8:	e62e      	b.n	8014e28 <_strtod_l+0x474>
 80151ca:	68c3      	ldr	r3, [r0, #12]
 80151cc:	9907      	ldr	r1, [sp, #28]
 80151ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80151d0:	2300      	movs	r3, #0
 80151d2:	60c3      	str	r3, [r0, #12]
 80151d4:	f7ff f9e6 	bl	80145a4 <__mcmp>
 80151d8:	2800      	cmp	r0, #0
 80151da:	da3b      	bge.n	8015254 <_strtod_l+0x8a0>
 80151dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80151de:	4333      	orrs	r3, r6
 80151e0:	d167      	bne.n	80152b2 <_strtod_l+0x8fe>
 80151e2:	033b      	lsls	r3, r7, #12
 80151e4:	d165      	bne.n	80152b2 <_strtod_l+0x8fe>
 80151e6:	22d6      	movs	r2, #214	@ 0xd6
 80151e8:	4b37      	ldr	r3, [pc, #220]	@ (80152c8 <_strtod_l+0x914>)
 80151ea:	04d2      	lsls	r2, r2, #19
 80151ec:	403b      	ands	r3, r7
 80151ee:	4293      	cmp	r3, r2
 80151f0:	d95f      	bls.n	80152b2 <_strtod_l+0x8fe>
 80151f2:	9b06      	ldr	r3, [sp, #24]
 80151f4:	695b      	ldr	r3, [r3, #20]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d103      	bne.n	8015202 <_strtod_l+0x84e>
 80151fa:	9b06      	ldr	r3, [sp, #24]
 80151fc:	691b      	ldr	r3, [r3, #16]
 80151fe:	2b01      	cmp	r3, #1
 8015200:	dd57      	ble.n	80152b2 <_strtod_l+0x8fe>
 8015202:	9906      	ldr	r1, [sp, #24]
 8015204:	2201      	movs	r2, #1
 8015206:	9805      	ldr	r0, [sp, #20]
 8015208:	f7ff f960 	bl	80144cc <__lshift>
 801520c:	9907      	ldr	r1, [sp, #28]
 801520e:	9006      	str	r0, [sp, #24]
 8015210:	f7ff f9c8 	bl	80145a4 <__mcmp>
 8015214:	2800      	cmp	r0, #0
 8015216:	dd4c      	ble.n	80152b2 <_strtod_l+0x8fe>
 8015218:	4b2b      	ldr	r3, [pc, #172]	@ (80152c8 <_strtod_l+0x914>)
 801521a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801521c:	403b      	ands	r3, r7
 801521e:	2a00      	cmp	r2, #0
 8015220:	d074      	beq.n	801530c <_strtod_l+0x958>
 8015222:	22d6      	movs	r2, #214	@ 0xd6
 8015224:	04d2      	lsls	r2, r2, #19
 8015226:	4293      	cmp	r3, r2
 8015228:	d870      	bhi.n	801530c <_strtod_l+0x958>
 801522a:	22dc      	movs	r2, #220	@ 0xdc
 801522c:	0492      	lsls	r2, r2, #18
 801522e:	4293      	cmp	r3, r2
 8015230:	d800      	bhi.n	8015234 <_strtod_l+0x880>
 8015232:	e695      	b.n	8014f60 <_strtod_l+0x5ac>
 8015234:	0030      	movs	r0, r6
 8015236:	0039      	movs	r1, r7
 8015238:	4b24      	ldr	r3, [pc, #144]	@ (80152cc <_strtod_l+0x918>)
 801523a:	2200      	movs	r2, #0
 801523c:	f7ed f99e 	bl	800257c <__aeabi_dmul>
 8015240:	4b21      	ldr	r3, [pc, #132]	@ (80152c8 <_strtod_l+0x914>)
 8015242:	0006      	movs	r6, r0
 8015244:	000f      	movs	r7, r1
 8015246:	420b      	tst	r3, r1
 8015248:	d000      	beq.n	801524c <_strtod_l+0x898>
 801524a:	e5f6      	b.n	8014e3a <_strtod_l+0x486>
 801524c:	2322      	movs	r3, #34	@ 0x22
 801524e:	9a05      	ldr	r2, [sp, #20]
 8015250:	6013      	str	r3, [r2, #0]
 8015252:	e5f2      	b.n	8014e3a <_strtod_l+0x486>
 8015254:	970e      	str	r7, [sp, #56]	@ 0x38
 8015256:	2800      	cmp	r0, #0
 8015258:	d175      	bne.n	8015346 <_strtod_l+0x992>
 801525a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801525c:	033b      	lsls	r3, r7, #12
 801525e:	0b1b      	lsrs	r3, r3, #12
 8015260:	2a00      	cmp	r2, #0
 8015262:	d039      	beq.n	80152d8 <_strtod_l+0x924>
 8015264:	4a1a      	ldr	r2, [pc, #104]	@ (80152d0 <_strtod_l+0x91c>)
 8015266:	4293      	cmp	r3, r2
 8015268:	d138      	bne.n	80152dc <_strtod_l+0x928>
 801526a:	2101      	movs	r1, #1
 801526c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801526e:	4249      	negs	r1, r1
 8015270:	0032      	movs	r2, r6
 8015272:	0008      	movs	r0, r1
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00b      	beq.n	8015290 <_strtod_l+0x8dc>
 8015278:	24d4      	movs	r4, #212	@ 0xd4
 801527a:	4b13      	ldr	r3, [pc, #76]	@ (80152c8 <_strtod_l+0x914>)
 801527c:	0008      	movs	r0, r1
 801527e:	403b      	ands	r3, r7
 8015280:	04e4      	lsls	r4, r4, #19
 8015282:	42a3      	cmp	r3, r4
 8015284:	d804      	bhi.n	8015290 <_strtod_l+0x8dc>
 8015286:	306c      	adds	r0, #108	@ 0x6c
 8015288:	0d1b      	lsrs	r3, r3, #20
 801528a:	1ac3      	subs	r3, r0, r3
 801528c:	4099      	lsls	r1, r3
 801528e:	0008      	movs	r0, r1
 8015290:	4282      	cmp	r2, r0
 8015292:	d123      	bne.n	80152dc <_strtod_l+0x928>
 8015294:	4b0f      	ldr	r3, [pc, #60]	@ (80152d4 <_strtod_l+0x920>)
 8015296:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015298:	4299      	cmp	r1, r3
 801529a:	d102      	bne.n	80152a2 <_strtod_l+0x8ee>
 801529c:	3201      	adds	r2, #1
 801529e:	d100      	bne.n	80152a2 <_strtod_l+0x8ee>
 80152a0:	e5c2      	b.n	8014e28 <_strtod_l+0x474>
 80152a2:	4b09      	ldr	r3, [pc, #36]	@ (80152c8 <_strtod_l+0x914>)
 80152a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80152a6:	2600      	movs	r6, #0
 80152a8:	401a      	ands	r2, r3
 80152aa:	0013      	movs	r3, r2
 80152ac:	2280      	movs	r2, #128	@ 0x80
 80152ae:	0352      	lsls	r2, r2, #13
 80152b0:	189f      	adds	r7, r3, r2
 80152b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d1bd      	bne.n	8015234 <_strtod_l+0x880>
 80152b8:	e5bf      	b.n	8014e3a <_strtod_l+0x486>
 80152ba:	46c0      	nop			@ (mov r8, r8)
 80152bc:	08017390 	.word	0x08017390
 80152c0:	fffffc02 	.word	0xfffffc02
 80152c4:	fffffbe2 	.word	0xfffffbe2
 80152c8:	7ff00000 	.word	0x7ff00000
 80152cc:	39500000 	.word	0x39500000
 80152d0:	000fffff 	.word	0x000fffff
 80152d4:	7fefffff 	.word	0x7fefffff
 80152d8:	4333      	orrs	r3, r6
 80152da:	d09d      	beq.n	8015218 <_strtod_l+0x864>
 80152dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d01c      	beq.n	801531c <_strtod_l+0x968>
 80152e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80152e6:	4213      	tst	r3, r2
 80152e8:	d0e3      	beq.n	80152b2 <_strtod_l+0x8fe>
 80152ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80152ec:	0030      	movs	r0, r6
 80152ee:	0039      	movs	r1, r7
 80152f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d016      	beq.n	8015324 <_strtod_l+0x970>
 80152f6:	f7ff fb45 	bl	8014984 <sulp>
 80152fa:	0002      	movs	r2, r0
 80152fc:	000b      	movs	r3, r1
 80152fe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015300:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015302:	f7ec f993 	bl	800162c <__aeabi_dadd>
 8015306:	0006      	movs	r6, r0
 8015308:	000f      	movs	r7, r1
 801530a:	e7d2      	b.n	80152b2 <_strtod_l+0x8fe>
 801530c:	2601      	movs	r6, #1
 801530e:	4a92      	ldr	r2, [pc, #584]	@ (8015558 <_strtod_l+0xba4>)
 8015310:	4276      	negs	r6, r6
 8015312:	189b      	adds	r3, r3, r2
 8015314:	4a91      	ldr	r2, [pc, #580]	@ (801555c <_strtod_l+0xba8>)
 8015316:	431a      	orrs	r2, r3
 8015318:	0017      	movs	r7, r2
 801531a:	e7ca      	b.n	80152b2 <_strtod_l+0x8fe>
 801531c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801531e:	4233      	tst	r3, r6
 8015320:	d0c7      	beq.n	80152b2 <_strtod_l+0x8fe>
 8015322:	e7e2      	b.n	80152ea <_strtod_l+0x936>
 8015324:	f7ff fb2e 	bl	8014984 <sulp>
 8015328:	0002      	movs	r2, r0
 801532a:	000b      	movs	r3, r1
 801532c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801532e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015330:	f7ed fbec 	bl	8002b0c <__aeabi_dsub>
 8015334:	2200      	movs	r2, #0
 8015336:	2300      	movs	r3, #0
 8015338:	0006      	movs	r6, r0
 801533a:	000f      	movs	r7, r1
 801533c:	f7eb f886 	bl	800044c <__aeabi_dcmpeq>
 8015340:	2800      	cmp	r0, #0
 8015342:	d0b6      	beq.n	80152b2 <_strtod_l+0x8fe>
 8015344:	e60c      	b.n	8014f60 <_strtod_l+0x5ac>
 8015346:	9907      	ldr	r1, [sp, #28]
 8015348:	9806      	ldr	r0, [sp, #24]
 801534a:	f7ff faad 	bl	80148a8 <__ratio>
 801534e:	2380      	movs	r3, #128	@ 0x80
 8015350:	2200      	movs	r2, #0
 8015352:	05db      	lsls	r3, r3, #23
 8015354:	0004      	movs	r4, r0
 8015356:	000d      	movs	r5, r1
 8015358:	f7eb f888 	bl	800046c <__aeabi_dcmple>
 801535c:	2800      	cmp	r0, #0
 801535e:	d06c      	beq.n	801543a <_strtod_l+0xa86>
 8015360:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015362:	2b00      	cmp	r3, #0
 8015364:	d177      	bne.n	8015456 <_strtod_l+0xaa2>
 8015366:	2e00      	cmp	r6, #0
 8015368:	d157      	bne.n	801541a <_strtod_l+0xa66>
 801536a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801536c:	031b      	lsls	r3, r3, #12
 801536e:	d15a      	bne.n	8015426 <_strtod_l+0xa72>
 8015370:	2200      	movs	r2, #0
 8015372:	0020      	movs	r0, r4
 8015374:	0029      	movs	r1, r5
 8015376:	4b7a      	ldr	r3, [pc, #488]	@ (8015560 <_strtod_l+0xbac>)
 8015378:	f7eb f86e 	bl	8000458 <__aeabi_dcmplt>
 801537c:	2800      	cmp	r0, #0
 801537e:	d159      	bne.n	8015434 <_strtod_l+0xa80>
 8015380:	0020      	movs	r0, r4
 8015382:	0029      	movs	r1, r5
 8015384:	2200      	movs	r2, #0
 8015386:	4b77      	ldr	r3, [pc, #476]	@ (8015564 <_strtod_l+0xbb0>)
 8015388:	f7ed f8f8 	bl	800257c <__aeabi_dmul>
 801538c:	0004      	movs	r4, r0
 801538e:	000d      	movs	r5, r1
 8015390:	2380      	movs	r3, #128	@ 0x80
 8015392:	061b      	lsls	r3, r3, #24
 8015394:	18eb      	adds	r3, r5, r3
 8015396:	940a      	str	r4, [sp, #40]	@ 0x28
 8015398:	930b      	str	r3, [sp, #44]	@ 0x2c
 801539a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801539c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801539e:	9214      	str	r2, [sp, #80]	@ 0x50
 80153a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80153a2:	4a71      	ldr	r2, [pc, #452]	@ (8015568 <_strtod_l+0xbb4>)
 80153a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153a6:	4013      	ands	r3, r2
 80153a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80153aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80153ac:	4b6f      	ldr	r3, [pc, #444]	@ (801556c <_strtod_l+0xbb8>)
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d000      	beq.n	80153b4 <_strtod_l+0xa00>
 80153b2:	e087      	b.n	80154c4 <_strtod_l+0xb10>
 80153b4:	4a6e      	ldr	r2, [pc, #440]	@ (8015570 <_strtod_l+0xbbc>)
 80153b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153b8:	4694      	mov	ip, r2
 80153ba:	4463      	add	r3, ip
 80153bc:	001f      	movs	r7, r3
 80153be:	0030      	movs	r0, r6
 80153c0:	0019      	movs	r1, r3
 80153c2:	f7ff f9a5 	bl	8014710 <__ulp>
 80153c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80153c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153ca:	f7ed f8d7 	bl	800257c <__aeabi_dmul>
 80153ce:	0032      	movs	r2, r6
 80153d0:	003b      	movs	r3, r7
 80153d2:	f7ec f92b 	bl	800162c <__aeabi_dadd>
 80153d6:	4a64      	ldr	r2, [pc, #400]	@ (8015568 <_strtod_l+0xbb4>)
 80153d8:	4b66      	ldr	r3, [pc, #408]	@ (8015574 <_strtod_l+0xbc0>)
 80153da:	0006      	movs	r6, r0
 80153dc:	400a      	ands	r2, r1
 80153de:	429a      	cmp	r2, r3
 80153e0:	d940      	bls.n	8015464 <_strtod_l+0xab0>
 80153e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80153e4:	4a64      	ldr	r2, [pc, #400]	@ (8015578 <_strtod_l+0xbc4>)
 80153e6:	4293      	cmp	r3, r2
 80153e8:	d103      	bne.n	80153f2 <_strtod_l+0xa3e>
 80153ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80153ec:	3301      	adds	r3, #1
 80153ee:	d100      	bne.n	80153f2 <_strtod_l+0xa3e>
 80153f0:	e51a      	b.n	8014e28 <_strtod_l+0x474>
 80153f2:	2601      	movs	r6, #1
 80153f4:	4f60      	ldr	r7, [pc, #384]	@ (8015578 <_strtod_l+0xbc4>)
 80153f6:	4276      	negs	r6, r6
 80153f8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80153fa:	9805      	ldr	r0, [sp, #20]
 80153fc:	f7fe fe3c 	bl	8014078 <_Bfree>
 8015400:	9908      	ldr	r1, [sp, #32]
 8015402:	9805      	ldr	r0, [sp, #20]
 8015404:	f7fe fe38 	bl	8014078 <_Bfree>
 8015408:	9907      	ldr	r1, [sp, #28]
 801540a:	9805      	ldr	r0, [sp, #20]
 801540c:	f7fe fe34 	bl	8014078 <_Bfree>
 8015410:	9906      	ldr	r1, [sp, #24]
 8015412:	9805      	ldr	r0, [sp, #20]
 8015414:	f7fe fe30 	bl	8014078 <_Bfree>
 8015418:	e617      	b.n	801504a <_strtod_l+0x696>
 801541a:	2e01      	cmp	r6, #1
 801541c:	d103      	bne.n	8015426 <_strtod_l+0xa72>
 801541e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015420:	2b00      	cmp	r3, #0
 8015422:	d100      	bne.n	8015426 <_strtod_l+0xa72>
 8015424:	e59c      	b.n	8014f60 <_strtod_l+0x5ac>
 8015426:	2300      	movs	r3, #0
 8015428:	4c54      	ldr	r4, [pc, #336]	@ (801557c <_strtod_l+0xbc8>)
 801542a:	4d4d      	ldr	r5, [pc, #308]	@ (8015560 <_strtod_l+0xbac>)
 801542c:	930a      	str	r3, [sp, #40]	@ 0x28
 801542e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015430:	2400      	movs	r4, #0
 8015432:	e7b2      	b.n	801539a <_strtod_l+0x9e6>
 8015434:	2400      	movs	r4, #0
 8015436:	4d4b      	ldr	r5, [pc, #300]	@ (8015564 <_strtod_l+0xbb0>)
 8015438:	e7aa      	b.n	8015390 <_strtod_l+0x9dc>
 801543a:	0020      	movs	r0, r4
 801543c:	0029      	movs	r1, r5
 801543e:	4b49      	ldr	r3, [pc, #292]	@ (8015564 <_strtod_l+0xbb0>)
 8015440:	2200      	movs	r2, #0
 8015442:	f7ed f89b 	bl	800257c <__aeabi_dmul>
 8015446:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015448:	0004      	movs	r4, r0
 801544a:	000d      	movs	r5, r1
 801544c:	2b00      	cmp	r3, #0
 801544e:	d09f      	beq.n	8015390 <_strtod_l+0x9dc>
 8015450:	940a      	str	r4, [sp, #40]	@ 0x28
 8015452:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015454:	e7a1      	b.n	801539a <_strtod_l+0x9e6>
 8015456:	2300      	movs	r3, #0
 8015458:	4c41      	ldr	r4, [pc, #260]	@ (8015560 <_strtod_l+0xbac>)
 801545a:	0025      	movs	r5, r4
 801545c:	930a      	str	r3, [sp, #40]	@ 0x28
 801545e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015460:	001c      	movs	r4, r3
 8015462:	e79a      	b.n	801539a <_strtod_l+0x9e6>
 8015464:	23d4      	movs	r3, #212	@ 0xd4
 8015466:	049b      	lsls	r3, r3, #18
 8015468:	18cf      	adds	r7, r1, r3
 801546a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801546c:	9710      	str	r7, [sp, #64]	@ 0x40
 801546e:	2b00      	cmp	r3, #0
 8015470:	d1c2      	bne.n	80153f8 <_strtod_l+0xa44>
 8015472:	4b3d      	ldr	r3, [pc, #244]	@ (8015568 <_strtod_l+0xbb4>)
 8015474:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015476:	403b      	ands	r3, r7
 8015478:	429a      	cmp	r2, r3
 801547a:	d1bd      	bne.n	80153f8 <_strtod_l+0xa44>
 801547c:	0020      	movs	r0, r4
 801547e:	0029      	movs	r1, r5
 8015480:	f7eb f8a2 	bl	80005c8 <__aeabi_d2lz>
 8015484:	f7eb f8da 	bl	800063c <__aeabi_l2d>
 8015488:	0002      	movs	r2, r0
 801548a:	000b      	movs	r3, r1
 801548c:	0020      	movs	r0, r4
 801548e:	0029      	movs	r1, r5
 8015490:	f7ed fb3c 	bl	8002b0c <__aeabi_dsub>
 8015494:	033c      	lsls	r4, r7, #12
 8015496:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015498:	0b24      	lsrs	r4, r4, #12
 801549a:	4334      	orrs	r4, r6
 801549c:	900e      	str	r0, [sp, #56]	@ 0x38
 801549e:	910f      	str	r1, [sp, #60]	@ 0x3c
 80154a0:	4a37      	ldr	r2, [pc, #220]	@ (8015580 <_strtod_l+0xbcc>)
 80154a2:	431c      	orrs	r4, r3
 80154a4:	d052      	beq.n	801554c <_strtod_l+0xb98>
 80154a6:	4b37      	ldr	r3, [pc, #220]	@ (8015584 <_strtod_l+0xbd0>)
 80154a8:	f7ea ffd6 	bl	8000458 <__aeabi_dcmplt>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d000      	beq.n	80154b2 <_strtod_l+0xafe>
 80154b0:	e4c3      	b.n	8014e3a <_strtod_l+0x486>
 80154b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80154b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80154b6:	4a34      	ldr	r2, [pc, #208]	@ (8015588 <_strtod_l+0xbd4>)
 80154b8:	4b2a      	ldr	r3, [pc, #168]	@ (8015564 <_strtod_l+0xbb0>)
 80154ba:	f7ea ffe1 	bl	8000480 <__aeabi_dcmpgt>
 80154be:	2800      	cmp	r0, #0
 80154c0:	d09a      	beq.n	80153f8 <_strtod_l+0xa44>
 80154c2:	e4ba      	b.n	8014e3a <_strtod_l+0x486>
 80154c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d02a      	beq.n	8015520 <_strtod_l+0xb6c>
 80154ca:	23d4      	movs	r3, #212	@ 0xd4
 80154cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80154ce:	04db      	lsls	r3, r3, #19
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d825      	bhi.n	8015520 <_strtod_l+0xb6c>
 80154d4:	0020      	movs	r0, r4
 80154d6:	0029      	movs	r1, r5
 80154d8:	4a2c      	ldr	r2, [pc, #176]	@ (801558c <_strtod_l+0xbd8>)
 80154da:	4b2d      	ldr	r3, [pc, #180]	@ (8015590 <_strtod_l+0xbdc>)
 80154dc:	f7ea ffc6 	bl	800046c <__aeabi_dcmple>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d016      	beq.n	8015512 <_strtod_l+0xb5e>
 80154e4:	0020      	movs	r0, r4
 80154e6:	0029      	movs	r1, r5
 80154e8:	f7eb f850 	bl	800058c <__aeabi_d2uiz>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	d100      	bne.n	80154f2 <_strtod_l+0xb3e>
 80154f0:	3001      	adds	r0, #1
 80154f2:	f7ed ff33 	bl	800335c <__aeabi_ui2d>
 80154f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80154f8:	0004      	movs	r4, r0
 80154fa:	000d      	movs	r5, r1
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d122      	bne.n	8015546 <_strtod_l+0xb92>
 8015500:	2380      	movs	r3, #128	@ 0x80
 8015502:	061b      	lsls	r3, r3, #24
 8015504:	18cb      	adds	r3, r1, r3
 8015506:	9018      	str	r0, [sp, #96]	@ 0x60
 8015508:	9319      	str	r3, [sp, #100]	@ 0x64
 801550a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801550c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801550e:	9214      	str	r2, [sp, #80]	@ 0x50
 8015510:	9315      	str	r3, [sp, #84]	@ 0x54
 8015512:	22d6      	movs	r2, #214	@ 0xd6
 8015514:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015516:	04d2      	lsls	r2, r2, #19
 8015518:	189b      	adds	r3, r3, r2
 801551a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801551c:	1a9b      	subs	r3, r3, r2
 801551e:	9315      	str	r3, [sp, #84]	@ 0x54
 8015520:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015522:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015524:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015526:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015528:	f7ff f8f2 	bl	8014710 <__ulp>
 801552c:	0002      	movs	r2, r0
 801552e:	000b      	movs	r3, r1
 8015530:	0030      	movs	r0, r6
 8015532:	0039      	movs	r1, r7
 8015534:	f7ed f822 	bl	800257c <__aeabi_dmul>
 8015538:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801553a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801553c:	f7ec f876 	bl	800162c <__aeabi_dadd>
 8015540:	0006      	movs	r6, r0
 8015542:	000f      	movs	r7, r1
 8015544:	e791      	b.n	801546a <_strtod_l+0xab6>
 8015546:	9418      	str	r4, [sp, #96]	@ 0x60
 8015548:	9519      	str	r5, [sp, #100]	@ 0x64
 801554a:	e7de      	b.n	801550a <_strtod_l+0xb56>
 801554c:	4b11      	ldr	r3, [pc, #68]	@ (8015594 <_strtod_l+0xbe0>)
 801554e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015550:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015552:	f7ea ff81 	bl	8000458 <__aeabi_dcmplt>
 8015556:	e7b2      	b.n	80154be <_strtod_l+0xb0a>
 8015558:	fff00000 	.word	0xfff00000
 801555c:	000fffff 	.word	0x000fffff
 8015560:	3ff00000 	.word	0x3ff00000
 8015564:	3fe00000 	.word	0x3fe00000
 8015568:	7ff00000 	.word	0x7ff00000
 801556c:	7fe00000 	.word	0x7fe00000
 8015570:	fcb00000 	.word	0xfcb00000
 8015574:	7c9fffff 	.word	0x7c9fffff
 8015578:	7fefffff 	.word	0x7fefffff
 801557c:	bff00000 	.word	0xbff00000
 8015580:	94a03595 	.word	0x94a03595
 8015584:	3fdfffff 	.word	0x3fdfffff
 8015588:	35afe535 	.word	0x35afe535
 801558c:	ffc00000 	.word	0xffc00000
 8015590:	41dfffff 	.word	0x41dfffff
 8015594:	3fcfffff 	.word	0x3fcfffff

08015598 <_strtod_r>:
 8015598:	b510      	push	{r4, lr}
 801559a:	4b02      	ldr	r3, [pc, #8]	@ (80155a4 <_strtod_r+0xc>)
 801559c:	f7ff fa0a 	bl	80149b4 <_strtod_l>
 80155a0:	bd10      	pop	{r4, pc}
 80155a2:	46c0      	nop			@ (mov r8, r8)
 80155a4:	200000e8 	.word	0x200000e8

080155a8 <_strtol_l.constprop.0>:
 80155a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155aa:	b085      	sub	sp, #20
 80155ac:	0017      	movs	r7, r2
 80155ae:	001e      	movs	r6, r3
 80155b0:	9003      	str	r0, [sp, #12]
 80155b2:	9101      	str	r1, [sp, #4]
 80155b4:	2b24      	cmp	r3, #36	@ 0x24
 80155b6:	d844      	bhi.n	8015642 <_strtol_l.constprop.0+0x9a>
 80155b8:	000c      	movs	r4, r1
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d041      	beq.n	8015642 <_strtol_l.constprop.0+0x9a>
 80155be:	4b3d      	ldr	r3, [pc, #244]	@ (80156b4 <_strtol_l.constprop.0+0x10c>)
 80155c0:	2208      	movs	r2, #8
 80155c2:	469c      	mov	ip, r3
 80155c4:	0023      	movs	r3, r4
 80155c6:	4661      	mov	r1, ip
 80155c8:	781d      	ldrb	r5, [r3, #0]
 80155ca:	3401      	adds	r4, #1
 80155cc:	5d48      	ldrb	r0, [r1, r5]
 80155ce:	0001      	movs	r1, r0
 80155d0:	4011      	ands	r1, r2
 80155d2:	4210      	tst	r0, r2
 80155d4:	d1f6      	bne.n	80155c4 <_strtol_l.constprop.0+0x1c>
 80155d6:	2d2d      	cmp	r5, #45	@ 0x2d
 80155d8:	d13a      	bne.n	8015650 <_strtol_l.constprop.0+0xa8>
 80155da:	7825      	ldrb	r5, [r4, #0]
 80155dc:	1c9c      	adds	r4, r3, #2
 80155de:	2301      	movs	r3, #1
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	2210      	movs	r2, #16
 80155e4:	0033      	movs	r3, r6
 80155e6:	4393      	bics	r3, r2
 80155e8:	d109      	bne.n	80155fe <_strtol_l.constprop.0+0x56>
 80155ea:	2d30      	cmp	r5, #48	@ 0x30
 80155ec:	d136      	bne.n	801565c <_strtol_l.constprop.0+0xb4>
 80155ee:	2120      	movs	r1, #32
 80155f0:	7823      	ldrb	r3, [r4, #0]
 80155f2:	438b      	bics	r3, r1
 80155f4:	2b58      	cmp	r3, #88	@ 0x58
 80155f6:	d131      	bne.n	801565c <_strtol_l.constprop.0+0xb4>
 80155f8:	0016      	movs	r6, r2
 80155fa:	7865      	ldrb	r5, [r4, #1]
 80155fc:	3402      	adds	r4, #2
 80155fe:	4a2e      	ldr	r2, [pc, #184]	@ (80156b8 <_strtol_l.constprop.0+0x110>)
 8015600:	9b00      	ldr	r3, [sp, #0]
 8015602:	4694      	mov	ip, r2
 8015604:	4463      	add	r3, ip
 8015606:	0031      	movs	r1, r6
 8015608:	0018      	movs	r0, r3
 801560a:	9302      	str	r3, [sp, #8]
 801560c:	f7ea fe1e 	bl	800024c <__aeabi_uidivmod>
 8015610:	2200      	movs	r2, #0
 8015612:	4684      	mov	ip, r0
 8015614:	0010      	movs	r0, r2
 8015616:	002b      	movs	r3, r5
 8015618:	3b30      	subs	r3, #48	@ 0x30
 801561a:	2b09      	cmp	r3, #9
 801561c:	d825      	bhi.n	801566a <_strtol_l.constprop.0+0xc2>
 801561e:	001d      	movs	r5, r3
 8015620:	42ae      	cmp	r6, r5
 8015622:	dd31      	ble.n	8015688 <_strtol_l.constprop.0+0xe0>
 8015624:	1c53      	adds	r3, r2, #1
 8015626:	d009      	beq.n	801563c <_strtol_l.constprop.0+0x94>
 8015628:	2201      	movs	r2, #1
 801562a:	4252      	negs	r2, r2
 801562c:	4584      	cmp	ip, r0
 801562e:	d305      	bcc.n	801563c <_strtol_l.constprop.0+0x94>
 8015630:	d101      	bne.n	8015636 <_strtol_l.constprop.0+0x8e>
 8015632:	42a9      	cmp	r1, r5
 8015634:	db25      	blt.n	8015682 <_strtol_l.constprop.0+0xda>
 8015636:	2201      	movs	r2, #1
 8015638:	4370      	muls	r0, r6
 801563a:	1828      	adds	r0, r5, r0
 801563c:	7825      	ldrb	r5, [r4, #0]
 801563e:	3401      	adds	r4, #1
 8015640:	e7e9      	b.n	8015616 <_strtol_l.constprop.0+0x6e>
 8015642:	f7fd fd0b 	bl	801305c <__errno>
 8015646:	2316      	movs	r3, #22
 8015648:	6003      	str	r3, [r0, #0]
 801564a:	2000      	movs	r0, #0
 801564c:	b005      	add	sp, #20
 801564e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015650:	9100      	str	r1, [sp, #0]
 8015652:	2d2b      	cmp	r5, #43	@ 0x2b
 8015654:	d1c5      	bne.n	80155e2 <_strtol_l.constprop.0+0x3a>
 8015656:	7825      	ldrb	r5, [r4, #0]
 8015658:	1c9c      	adds	r4, r3, #2
 801565a:	e7c2      	b.n	80155e2 <_strtol_l.constprop.0+0x3a>
 801565c:	2e00      	cmp	r6, #0
 801565e:	d1ce      	bne.n	80155fe <_strtol_l.constprop.0+0x56>
 8015660:	3608      	adds	r6, #8
 8015662:	2d30      	cmp	r5, #48	@ 0x30
 8015664:	d0cb      	beq.n	80155fe <_strtol_l.constprop.0+0x56>
 8015666:	3602      	adds	r6, #2
 8015668:	e7c9      	b.n	80155fe <_strtol_l.constprop.0+0x56>
 801566a:	002b      	movs	r3, r5
 801566c:	3b41      	subs	r3, #65	@ 0x41
 801566e:	2b19      	cmp	r3, #25
 8015670:	d801      	bhi.n	8015676 <_strtol_l.constprop.0+0xce>
 8015672:	3d37      	subs	r5, #55	@ 0x37
 8015674:	e7d4      	b.n	8015620 <_strtol_l.constprop.0+0x78>
 8015676:	002b      	movs	r3, r5
 8015678:	3b61      	subs	r3, #97	@ 0x61
 801567a:	2b19      	cmp	r3, #25
 801567c:	d804      	bhi.n	8015688 <_strtol_l.constprop.0+0xe0>
 801567e:	3d57      	subs	r5, #87	@ 0x57
 8015680:	e7ce      	b.n	8015620 <_strtol_l.constprop.0+0x78>
 8015682:	2201      	movs	r2, #1
 8015684:	4252      	negs	r2, r2
 8015686:	e7d9      	b.n	801563c <_strtol_l.constprop.0+0x94>
 8015688:	1c53      	adds	r3, r2, #1
 801568a:	d108      	bne.n	801569e <_strtol_l.constprop.0+0xf6>
 801568c:	2322      	movs	r3, #34	@ 0x22
 801568e:	9a03      	ldr	r2, [sp, #12]
 8015690:	9802      	ldr	r0, [sp, #8]
 8015692:	6013      	str	r3, [r2, #0]
 8015694:	2f00      	cmp	r7, #0
 8015696:	d0d9      	beq.n	801564c <_strtol_l.constprop.0+0xa4>
 8015698:	1e63      	subs	r3, r4, #1
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	e007      	b.n	80156ae <_strtol_l.constprop.0+0x106>
 801569e:	9b00      	ldr	r3, [sp, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d000      	beq.n	80156a6 <_strtol_l.constprop.0+0xfe>
 80156a4:	4240      	negs	r0, r0
 80156a6:	2f00      	cmp	r7, #0
 80156a8:	d0d0      	beq.n	801564c <_strtol_l.constprop.0+0xa4>
 80156aa:	2a00      	cmp	r2, #0
 80156ac:	d1f4      	bne.n	8015698 <_strtol_l.constprop.0+0xf0>
 80156ae:	9b01      	ldr	r3, [sp, #4]
 80156b0:	603b      	str	r3, [r7, #0]
 80156b2:	e7cb      	b.n	801564c <_strtol_l.constprop.0+0xa4>
 80156b4:	080173b9 	.word	0x080173b9
 80156b8:	7fffffff 	.word	0x7fffffff

080156bc <_strtol_r>:
 80156bc:	b510      	push	{r4, lr}
 80156be:	f7ff ff73 	bl	80155a8 <_strtol_l.constprop.0>
 80156c2:	bd10      	pop	{r4, pc}

080156c4 <__ssputs_r>:
 80156c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156c6:	688e      	ldr	r6, [r1, #8]
 80156c8:	b085      	sub	sp, #20
 80156ca:	001f      	movs	r7, r3
 80156cc:	000c      	movs	r4, r1
 80156ce:	680b      	ldr	r3, [r1, #0]
 80156d0:	9002      	str	r0, [sp, #8]
 80156d2:	9203      	str	r2, [sp, #12]
 80156d4:	42be      	cmp	r6, r7
 80156d6:	d830      	bhi.n	801573a <__ssputs_r+0x76>
 80156d8:	210c      	movs	r1, #12
 80156da:	5e62      	ldrsh	r2, [r4, r1]
 80156dc:	2190      	movs	r1, #144	@ 0x90
 80156de:	00c9      	lsls	r1, r1, #3
 80156e0:	420a      	tst	r2, r1
 80156e2:	d028      	beq.n	8015736 <__ssputs_r+0x72>
 80156e4:	2003      	movs	r0, #3
 80156e6:	6921      	ldr	r1, [r4, #16]
 80156e8:	1a5b      	subs	r3, r3, r1
 80156ea:	9301      	str	r3, [sp, #4]
 80156ec:	6963      	ldr	r3, [r4, #20]
 80156ee:	4343      	muls	r3, r0
 80156f0:	9801      	ldr	r0, [sp, #4]
 80156f2:	0fdd      	lsrs	r5, r3, #31
 80156f4:	18ed      	adds	r5, r5, r3
 80156f6:	1c7b      	adds	r3, r7, #1
 80156f8:	181b      	adds	r3, r3, r0
 80156fa:	106d      	asrs	r5, r5, #1
 80156fc:	42ab      	cmp	r3, r5
 80156fe:	d900      	bls.n	8015702 <__ssputs_r+0x3e>
 8015700:	001d      	movs	r5, r3
 8015702:	0552      	lsls	r2, r2, #21
 8015704:	d528      	bpl.n	8015758 <__ssputs_r+0x94>
 8015706:	0029      	movs	r1, r5
 8015708:	9802      	ldr	r0, [sp, #8]
 801570a:	f7fe fbe1 	bl	8013ed0 <_malloc_r>
 801570e:	1e06      	subs	r6, r0, #0
 8015710:	d02c      	beq.n	801576c <__ssputs_r+0xa8>
 8015712:	9a01      	ldr	r2, [sp, #4]
 8015714:	6921      	ldr	r1, [r4, #16]
 8015716:	f7fd fcd9 	bl	80130cc <memcpy>
 801571a:	89a2      	ldrh	r2, [r4, #12]
 801571c:	4b18      	ldr	r3, [pc, #96]	@ (8015780 <__ssputs_r+0xbc>)
 801571e:	401a      	ands	r2, r3
 8015720:	2380      	movs	r3, #128	@ 0x80
 8015722:	4313      	orrs	r3, r2
 8015724:	81a3      	strh	r3, [r4, #12]
 8015726:	9b01      	ldr	r3, [sp, #4]
 8015728:	6126      	str	r6, [r4, #16]
 801572a:	18f6      	adds	r6, r6, r3
 801572c:	6026      	str	r6, [r4, #0]
 801572e:	003e      	movs	r6, r7
 8015730:	6165      	str	r5, [r4, #20]
 8015732:	1aed      	subs	r5, r5, r3
 8015734:	60a5      	str	r5, [r4, #8]
 8015736:	42be      	cmp	r6, r7
 8015738:	d900      	bls.n	801573c <__ssputs_r+0x78>
 801573a:	003e      	movs	r6, r7
 801573c:	0032      	movs	r2, r6
 801573e:	9903      	ldr	r1, [sp, #12]
 8015740:	6820      	ldr	r0, [r4, #0]
 8015742:	f000 f9ce 	bl	8015ae2 <memmove>
 8015746:	2000      	movs	r0, #0
 8015748:	68a3      	ldr	r3, [r4, #8]
 801574a:	1b9b      	subs	r3, r3, r6
 801574c:	60a3      	str	r3, [r4, #8]
 801574e:	6823      	ldr	r3, [r4, #0]
 8015750:	199b      	adds	r3, r3, r6
 8015752:	6023      	str	r3, [r4, #0]
 8015754:	b005      	add	sp, #20
 8015756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015758:	002a      	movs	r2, r5
 801575a:	9802      	ldr	r0, [sp, #8]
 801575c:	f000 fdb6 	bl	80162cc <_realloc_r>
 8015760:	1e06      	subs	r6, r0, #0
 8015762:	d1e0      	bne.n	8015726 <__ssputs_r+0x62>
 8015764:	6921      	ldr	r1, [r4, #16]
 8015766:	9802      	ldr	r0, [sp, #8]
 8015768:	f7fe fb3c 	bl	8013de4 <_free_r>
 801576c:	230c      	movs	r3, #12
 801576e:	2001      	movs	r0, #1
 8015770:	9a02      	ldr	r2, [sp, #8]
 8015772:	4240      	negs	r0, r0
 8015774:	6013      	str	r3, [r2, #0]
 8015776:	89a2      	ldrh	r2, [r4, #12]
 8015778:	3334      	adds	r3, #52	@ 0x34
 801577a:	4313      	orrs	r3, r2
 801577c:	81a3      	strh	r3, [r4, #12]
 801577e:	e7e9      	b.n	8015754 <__ssputs_r+0x90>
 8015780:	fffffb7f 	.word	0xfffffb7f

08015784 <_svfiprintf_r>:
 8015784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015786:	b0a1      	sub	sp, #132	@ 0x84
 8015788:	9003      	str	r0, [sp, #12]
 801578a:	001d      	movs	r5, r3
 801578c:	898b      	ldrh	r3, [r1, #12]
 801578e:	000f      	movs	r7, r1
 8015790:	0016      	movs	r6, r2
 8015792:	061b      	lsls	r3, r3, #24
 8015794:	d511      	bpl.n	80157ba <_svfiprintf_r+0x36>
 8015796:	690b      	ldr	r3, [r1, #16]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d10e      	bne.n	80157ba <_svfiprintf_r+0x36>
 801579c:	2140      	movs	r1, #64	@ 0x40
 801579e:	f7fe fb97 	bl	8013ed0 <_malloc_r>
 80157a2:	6038      	str	r0, [r7, #0]
 80157a4:	6138      	str	r0, [r7, #16]
 80157a6:	2800      	cmp	r0, #0
 80157a8:	d105      	bne.n	80157b6 <_svfiprintf_r+0x32>
 80157aa:	230c      	movs	r3, #12
 80157ac:	9a03      	ldr	r2, [sp, #12]
 80157ae:	6013      	str	r3, [r2, #0]
 80157b0:	2001      	movs	r0, #1
 80157b2:	4240      	negs	r0, r0
 80157b4:	e0cf      	b.n	8015956 <_svfiprintf_r+0x1d2>
 80157b6:	2340      	movs	r3, #64	@ 0x40
 80157b8:	617b      	str	r3, [r7, #20]
 80157ba:	2300      	movs	r3, #0
 80157bc:	ac08      	add	r4, sp, #32
 80157be:	6163      	str	r3, [r4, #20]
 80157c0:	3320      	adds	r3, #32
 80157c2:	7663      	strb	r3, [r4, #25]
 80157c4:	3310      	adds	r3, #16
 80157c6:	76a3      	strb	r3, [r4, #26]
 80157c8:	9507      	str	r5, [sp, #28]
 80157ca:	0035      	movs	r5, r6
 80157cc:	782b      	ldrb	r3, [r5, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d001      	beq.n	80157d6 <_svfiprintf_r+0x52>
 80157d2:	2b25      	cmp	r3, #37	@ 0x25
 80157d4:	d148      	bne.n	8015868 <_svfiprintf_r+0xe4>
 80157d6:	1bab      	subs	r3, r5, r6
 80157d8:	9305      	str	r3, [sp, #20]
 80157da:	42b5      	cmp	r5, r6
 80157dc:	d00b      	beq.n	80157f6 <_svfiprintf_r+0x72>
 80157de:	0032      	movs	r2, r6
 80157e0:	0039      	movs	r1, r7
 80157e2:	9803      	ldr	r0, [sp, #12]
 80157e4:	f7ff ff6e 	bl	80156c4 <__ssputs_r>
 80157e8:	3001      	adds	r0, #1
 80157ea:	d100      	bne.n	80157ee <_svfiprintf_r+0x6a>
 80157ec:	e0ae      	b.n	801594c <_svfiprintf_r+0x1c8>
 80157ee:	6963      	ldr	r3, [r4, #20]
 80157f0:	9a05      	ldr	r2, [sp, #20]
 80157f2:	189b      	adds	r3, r3, r2
 80157f4:	6163      	str	r3, [r4, #20]
 80157f6:	782b      	ldrb	r3, [r5, #0]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d100      	bne.n	80157fe <_svfiprintf_r+0x7a>
 80157fc:	e0a6      	b.n	801594c <_svfiprintf_r+0x1c8>
 80157fe:	2201      	movs	r2, #1
 8015800:	2300      	movs	r3, #0
 8015802:	4252      	negs	r2, r2
 8015804:	6062      	str	r2, [r4, #4]
 8015806:	a904      	add	r1, sp, #16
 8015808:	3254      	adds	r2, #84	@ 0x54
 801580a:	1852      	adds	r2, r2, r1
 801580c:	1c6e      	adds	r6, r5, #1
 801580e:	6023      	str	r3, [r4, #0]
 8015810:	60e3      	str	r3, [r4, #12]
 8015812:	60a3      	str	r3, [r4, #8]
 8015814:	7013      	strb	r3, [r2, #0]
 8015816:	65a3      	str	r3, [r4, #88]	@ 0x58
 8015818:	4b54      	ldr	r3, [pc, #336]	@ (801596c <_svfiprintf_r+0x1e8>)
 801581a:	2205      	movs	r2, #5
 801581c:	0018      	movs	r0, r3
 801581e:	7831      	ldrb	r1, [r6, #0]
 8015820:	9305      	str	r3, [sp, #20]
 8015822:	f7fd fc48 	bl	80130b6 <memchr>
 8015826:	1c75      	adds	r5, r6, #1
 8015828:	2800      	cmp	r0, #0
 801582a:	d11f      	bne.n	801586c <_svfiprintf_r+0xe8>
 801582c:	6822      	ldr	r2, [r4, #0]
 801582e:	06d3      	lsls	r3, r2, #27
 8015830:	d504      	bpl.n	801583c <_svfiprintf_r+0xb8>
 8015832:	2353      	movs	r3, #83	@ 0x53
 8015834:	a904      	add	r1, sp, #16
 8015836:	185b      	adds	r3, r3, r1
 8015838:	2120      	movs	r1, #32
 801583a:	7019      	strb	r1, [r3, #0]
 801583c:	0713      	lsls	r3, r2, #28
 801583e:	d504      	bpl.n	801584a <_svfiprintf_r+0xc6>
 8015840:	2353      	movs	r3, #83	@ 0x53
 8015842:	a904      	add	r1, sp, #16
 8015844:	185b      	adds	r3, r3, r1
 8015846:	212b      	movs	r1, #43	@ 0x2b
 8015848:	7019      	strb	r1, [r3, #0]
 801584a:	7833      	ldrb	r3, [r6, #0]
 801584c:	2b2a      	cmp	r3, #42	@ 0x2a
 801584e:	d016      	beq.n	801587e <_svfiprintf_r+0xfa>
 8015850:	0035      	movs	r5, r6
 8015852:	2100      	movs	r1, #0
 8015854:	200a      	movs	r0, #10
 8015856:	68e3      	ldr	r3, [r4, #12]
 8015858:	782a      	ldrb	r2, [r5, #0]
 801585a:	1c6e      	adds	r6, r5, #1
 801585c:	3a30      	subs	r2, #48	@ 0x30
 801585e:	2a09      	cmp	r2, #9
 8015860:	d950      	bls.n	8015904 <_svfiprintf_r+0x180>
 8015862:	2900      	cmp	r1, #0
 8015864:	d111      	bne.n	801588a <_svfiprintf_r+0x106>
 8015866:	e017      	b.n	8015898 <_svfiprintf_r+0x114>
 8015868:	3501      	adds	r5, #1
 801586a:	e7af      	b.n	80157cc <_svfiprintf_r+0x48>
 801586c:	9b05      	ldr	r3, [sp, #20]
 801586e:	6822      	ldr	r2, [r4, #0]
 8015870:	1ac0      	subs	r0, r0, r3
 8015872:	2301      	movs	r3, #1
 8015874:	4083      	lsls	r3, r0
 8015876:	4313      	orrs	r3, r2
 8015878:	002e      	movs	r6, r5
 801587a:	6023      	str	r3, [r4, #0]
 801587c:	e7cc      	b.n	8015818 <_svfiprintf_r+0x94>
 801587e:	9b07      	ldr	r3, [sp, #28]
 8015880:	1d19      	adds	r1, r3, #4
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	9107      	str	r1, [sp, #28]
 8015886:	2b00      	cmp	r3, #0
 8015888:	db01      	blt.n	801588e <_svfiprintf_r+0x10a>
 801588a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801588c:	e004      	b.n	8015898 <_svfiprintf_r+0x114>
 801588e:	425b      	negs	r3, r3
 8015890:	60e3      	str	r3, [r4, #12]
 8015892:	2302      	movs	r3, #2
 8015894:	4313      	orrs	r3, r2
 8015896:	6023      	str	r3, [r4, #0]
 8015898:	782b      	ldrb	r3, [r5, #0]
 801589a:	2b2e      	cmp	r3, #46	@ 0x2e
 801589c:	d10c      	bne.n	80158b8 <_svfiprintf_r+0x134>
 801589e:	786b      	ldrb	r3, [r5, #1]
 80158a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80158a2:	d134      	bne.n	801590e <_svfiprintf_r+0x18a>
 80158a4:	9b07      	ldr	r3, [sp, #28]
 80158a6:	3502      	adds	r5, #2
 80158a8:	1d1a      	adds	r2, r3, #4
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	9207      	str	r2, [sp, #28]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	da01      	bge.n	80158b6 <_svfiprintf_r+0x132>
 80158b2:	2301      	movs	r3, #1
 80158b4:	425b      	negs	r3, r3
 80158b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80158b8:	4e2d      	ldr	r6, [pc, #180]	@ (8015970 <_svfiprintf_r+0x1ec>)
 80158ba:	2203      	movs	r2, #3
 80158bc:	0030      	movs	r0, r6
 80158be:	7829      	ldrb	r1, [r5, #0]
 80158c0:	f7fd fbf9 	bl	80130b6 <memchr>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d006      	beq.n	80158d6 <_svfiprintf_r+0x152>
 80158c8:	2340      	movs	r3, #64	@ 0x40
 80158ca:	1b80      	subs	r0, r0, r6
 80158cc:	4083      	lsls	r3, r0
 80158ce:	6822      	ldr	r2, [r4, #0]
 80158d0:	3501      	adds	r5, #1
 80158d2:	4313      	orrs	r3, r2
 80158d4:	6023      	str	r3, [r4, #0]
 80158d6:	7829      	ldrb	r1, [r5, #0]
 80158d8:	2206      	movs	r2, #6
 80158da:	4826      	ldr	r0, [pc, #152]	@ (8015974 <_svfiprintf_r+0x1f0>)
 80158dc:	1c6e      	adds	r6, r5, #1
 80158de:	7621      	strb	r1, [r4, #24]
 80158e0:	f7fd fbe9 	bl	80130b6 <memchr>
 80158e4:	2800      	cmp	r0, #0
 80158e6:	d038      	beq.n	801595a <_svfiprintf_r+0x1d6>
 80158e8:	4b23      	ldr	r3, [pc, #140]	@ (8015978 <_svfiprintf_r+0x1f4>)
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d122      	bne.n	8015934 <_svfiprintf_r+0x1b0>
 80158ee:	2207      	movs	r2, #7
 80158f0:	9b07      	ldr	r3, [sp, #28]
 80158f2:	3307      	adds	r3, #7
 80158f4:	4393      	bics	r3, r2
 80158f6:	3308      	adds	r3, #8
 80158f8:	9307      	str	r3, [sp, #28]
 80158fa:	6963      	ldr	r3, [r4, #20]
 80158fc:	9a04      	ldr	r2, [sp, #16]
 80158fe:	189b      	adds	r3, r3, r2
 8015900:	6163      	str	r3, [r4, #20]
 8015902:	e762      	b.n	80157ca <_svfiprintf_r+0x46>
 8015904:	4343      	muls	r3, r0
 8015906:	0035      	movs	r5, r6
 8015908:	2101      	movs	r1, #1
 801590a:	189b      	adds	r3, r3, r2
 801590c:	e7a4      	b.n	8015858 <_svfiprintf_r+0xd4>
 801590e:	2300      	movs	r3, #0
 8015910:	200a      	movs	r0, #10
 8015912:	0019      	movs	r1, r3
 8015914:	3501      	adds	r5, #1
 8015916:	6063      	str	r3, [r4, #4]
 8015918:	782a      	ldrb	r2, [r5, #0]
 801591a:	1c6e      	adds	r6, r5, #1
 801591c:	3a30      	subs	r2, #48	@ 0x30
 801591e:	2a09      	cmp	r2, #9
 8015920:	d903      	bls.n	801592a <_svfiprintf_r+0x1a6>
 8015922:	2b00      	cmp	r3, #0
 8015924:	d0c8      	beq.n	80158b8 <_svfiprintf_r+0x134>
 8015926:	9109      	str	r1, [sp, #36]	@ 0x24
 8015928:	e7c6      	b.n	80158b8 <_svfiprintf_r+0x134>
 801592a:	4341      	muls	r1, r0
 801592c:	0035      	movs	r5, r6
 801592e:	2301      	movs	r3, #1
 8015930:	1889      	adds	r1, r1, r2
 8015932:	e7f1      	b.n	8015918 <_svfiprintf_r+0x194>
 8015934:	aa07      	add	r2, sp, #28
 8015936:	9200      	str	r2, [sp, #0]
 8015938:	0021      	movs	r1, r4
 801593a:	003a      	movs	r2, r7
 801593c:	4b0f      	ldr	r3, [pc, #60]	@ (801597c <_svfiprintf_r+0x1f8>)
 801593e:	9803      	ldr	r0, [sp, #12]
 8015940:	f7fc fb6c 	bl	801201c <_printf_float>
 8015944:	9004      	str	r0, [sp, #16]
 8015946:	9b04      	ldr	r3, [sp, #16]
 8015948:	3301      	adds	r3, #1
 801594a:	d1d6      	bne.n	80158fa <_svfiprintf_r+0x176>
 801594c:	89bb      	ldrh	r3, [r7, #12]
 801594e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8015950:	065b      	lsls	r3, r3, #25
 8015952:	d500      	bpl.n	8015956 <_svfiprintf_r+0x1d2>
 8015954:	e72c      	b.n	80157b0 <_svfiprintf_r+0x2c>
 8015956:	b021      	add	sp, #132	@ 0x84
 8015958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801595a:	aa07      	add	r2, sp, #28
 801595c:	9200      	str	r2, [sp, #0]
 801595e:	0021      	movs	r1, r4
 8015960:	003a      	movs	r2, r7
 8015962:	4b06      	ldr	r3, [pc, #24]	@ (801597c <_svfiprintf_r+0x1f8>)
 8015964:	9803      	ldr	r0, [sp, #12]
 8015966:	f7fc fe07 	bl	8012578 <_printf_i>
 801596a:	e7eb      	b.n	8015944 <_svfiprintf_r+0x1c0>
 801596c:	080174b9 	.word	0x080174b9
 8015970:	080174bf 	.word	0x080174bf
 8015974:	080174c3 	.word	0x080174c3
 8015978:	0801201d 	.word	0x0801201d
 801597c:	080156c5 	.word	0x080156c5

08015980 <__sflush_r>:
 8015980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015982:	220c      	movs	r2, #12
 8015984:	5e8b      	ldrsh	r3, [r1, r2]
 8015986:	0005      	movs	r5, r0
 8015988:	000c      	movs	r4, r1
 801598a:	071a      	lsls	r2, r3, #28
 801598c:	d456      	bmi.n	8015a3c <__sflush_r+0xbc>
 801598e:	684a      	ldr	r2, [r1, #4]
 8015990:	2a00      	cmp	r2, #0
 8015992:	dc02      	bgt.n	801599a <__sflush_r+0x1a>
 8015994:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8015996:	2a00      	cmp	r2, #0
 8015998:	dd4e      	ble.n	8015a38 <__sflush_r+0xb8>
 801599a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801599c:	2f00      	cmp	r7, #0
 801599e:	d04b      	beq.n	8015a38 <__sflush_r+0xb8>
 80159a0:	2200      	movs	r2, #0
 80159a2:	2080      	movs	r0, #128	@ 0x80
 80159a4:	682e      	ldr	r6, [r5, #0]
 80159a6:	602a      	str	r2, [r5, #0]
 80159a8:	001a      	movs	r2, r3
 80159aa:	0140      	lsls	r0, r0, #5
 80159ac:	6a21      	ldr	r1, [r4, #32]
 80159ae:	4002      	ands	r2, r0
 80159b0:	4203      	tst	r3, r0
 80159b2:	d033      	beq.n	8015a1c <__sflush_r+0x9c>
 80159b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80159b6:	89a3      	ldrh	r3, [r4, #12]
 80159b8:	075b      	lsls	r3, r3, #29
 80159ba:	d506      	bpl.n	80159ca <__sflush_r+0x4a>
 80159bc:	6863      	ldr	r3, [r4, #4]
 80159be:	1ad2      	subs	r2, r2, r3
 80159c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d001      	beq.n	80159ca <__sflush_r+0x4a>
 80159c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80159c8:	1ad2      	subs	r2, r2, r3
 80159ca:	2300      	movs	r3, #0
 80159cc:	0028      	movs	r0, r5
 80159ce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80159d0:	6a21      	ldr	r1, [r4, #32]
 80159d2:	47b8      	blx	r7
 80159d4:	89a2      	ldrh	r2, [r4, #12]
 80159d6:	1c43      	adds	r3, r0, #1
 80159d8:	d106      	bne.n	80159e8 <__sflush_r+0x68>
 80159da:	6829      	ldr	r1, [r5, #0]
 80159dc:	291d      	cmp	r1, #29
 80159de:	d846      	bhi.n	8015a6e <__sflush_r+0xee>
 80159e0:	4b29      	ldr	r3, [pc, #164]	@ (8015a88 <__sflush_r+0x108>)
 80159e2:	410b      	asrs	r3, r1
 80159e4:	07db      	lsls	r3, r3, #31
 80159e6:	d442      	bmi.n	8015a6e <__sflush_r+0xee>
 80159e8:	2300      	movs	r3, #0
 80159ea:	6063      	str	r3, [r4, #4]
 80159ec:	6923      	ldr	r3, [r4, #16]
 80159ee:	6023      	str	r3, [r4, #0]
 80159f0:	04d2      	lsls	r2, r2, #19
 80159f2:	d505      	bpl.n	8015a00 <__sflush_r+0x80>
 80159f4:	1c43      	adds	r3, r0, #1
 80159f6:	d102      	bne.n	80159fe <__sflush_r+0x7e>
 80159f8:	682b      	ldr	r3, [r5, #0]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d100      	bne.n	8015a00 <__sflush_r+0x80>
 80159fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8015a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a02:	602e      	str	r6, [r5, #0]
 8015a04:	2900      	cmp	r1, #0
 8015a06:	d017      	beq.n	8015a38 <__sflush_r+0xb8>
 8015a08:	0023      	movs	r3, r4
 8015a0a:	3344      	adds	r3, #68	@ 0x44
 8015a0c:	4299      	cmp	r1, r3
 8015a0e:	d002      	beq.n	8015a16 <__sflush_r+0x96>
 8015a10:	0028      	movs	r0, r5
 8015a12:	f7fe f9e7 	bl	8013de4 <_free_r>
 8015a16:	2300      	movs	r3, #0
 8015a18:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a1a:	e00d      	b.n	8015a38 <__sflush_r+0xb8>
 8015a1c:	2301      	movs	r3, #1
 8015a1e:	0028      	movs	r0, r5
 8015a20:	47b8      	blx	r7
 8015a22:	0002      	movs	r2, r0
 8015a24:	1c43      	adds	r3, r0, #1
 8015a26:	d1c6      	bne.n	80159b6 <__sflush_r+0x36>
 8015a28:	682b      	ldr	r3, [r5, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d0c3      	beq.n	80159b6 <__sflush_r+0x36>
 8015a2e:	2b1d      	cmp	r3, #29
 8015a30:	d001      	beq.n	8015a36 <__sflush_r+0xb6>
 8015a32:	2b16      	cmp	r3, #22
 8015a34:	d11a      	bne.n	8015a6c <__sflush_r+0xec>
 8015a36:	602e      	str	r6, [r5, #0]
 8015a38:	2000      	movs	r0, #0
 8015a3a:	e01e      	b.n	8015a7a <__sflush_r+0xfa>
 8015a3c:	690e      	ldr	r6, [r1, #16]
 8015a3e:	2e00      	cmp	r6, #0
 8015a40:	d0fa      	beq.n	8015a38 <__sflush_r+0xb8>
 8015a42:	680f      	ldr	r7, [r1, #0]
 8015a44:	600e      	str	r6, [r1, #0]
 8015a46:	1bba      	subs	r2, r7, r6
 8015a48:	9201      	str	r2, [sp, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	079b      	lsls	r3, r3, #30
 8015a4e:	d100      	bne.n	8015a52 <__sflush_r+0xd2>
 8015a50:	694a      	ldr	r2, [r1, #20]
 8015a52:	60a2      	str	r2, [r4, #8]
 8015a54:	9b01      	ldr	r3, [sp, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	ddee      	ble.n	8015a38 <__sflush_r+0xb8>
 8015a5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015a5c:	0032      	movs	r2, r6
 8015a5e:	001f      	movs	r7, r3
 8015a60:	0028      	movs	r0, r5
 8015a62:	9b01      	ldr	r3, [sp, #4]
 8015a64:	6a21      	ldr	r1, [r4, #32]
 8015a66:	47b8      	blx	r7
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	dc07      	bgt.n	8015a7c <__sflush_r+0xfc>
 8015a6c:	89a2      	ldrh	r2, [r4, #12]
 8015a6e:	2340      	movs	r3, #64	@ 0x40
 8015a70:	2001      	movs	r0, #1
 8015a72:	4313      	orrs	r3, r2
 8015a74:	b21b      	sxth	r3, r3
 8015a76:	81a3      	strh	r3, [r4, #12]
 8015a78:	4240      	negs	r0, r0
 8015a7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015a7c:	9b01      	ldr	r3, [sp, #4]
 8015a7e:	1836      	adds	r6, r6, r0
 8015a80:	1a1b      	subs	r3, r3, r0
 8015a82:	9301      	str	r3, [sp, #4]
 8015a84:	e7e6      	b.n	8015a54 <__sflush_r+0xd4>
 8015a86:	46c0      	nop			@ (mov r8, r8)
 8015a88:	dfbffffe 	.word	0xdfbffffe

08015a8c <_fflush_r>:
 8015a8c:	690b      	ldr	r3, [r1, #16]
 8015a8e:	b570      	push	{r4, r5, r6, lr}
 8015a90:	0005      	movs	r5, r0
 8015a92:	000c      	movs	r4, r1
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d102      	bne.n	8015a9e <_fflush_r+0x12>
 8015a98:	2500      	movs	r5, #0
 8015a9a:	0028      	movs	r0, r5
 8015a9c:	bd70      	pop	{r4, r5, r6, pc}
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d004      	beq.n	8015aac <_fflush_r+0x20>
 8015aa2:	6a03      	ldr	r3, [r0, #32]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d101      	bne.n	8015aac <_fflush_r+0x20>
 8015aa8:	f7fd f912 	bl	8012cd0 <__sinit>
 8015aac:	220c      	movs	r2, #12
 8015aae:	5ea3      	ldrsh	r3, [r4, r2]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d0f1      	beq.n	8015a98 <_fflush_r+0xc>
 8015ab4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015ab6:	07d2      	lsls	r2, r2, #31
 8015ab8:	d404      	bmi.n	8015ac4 <_fflush_r+0x38>
 8015aba:	059b      	lsls	r3, r3, #22
 8015abc:	d402      	bmi.n	8015ac4 <_fflush_r+0x38>
 8015abe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ac0:	f7fd faf7 	bl	80130b2 <__retarget_lock_acquire_recursive>
 8015ac4:	0028      	movs	r0, r5
 8015ac6:	0021      	movs	r1, r4
 8015ac8:	f7ff ff5a 	bl	8015980 <__sflush_r>
 8015acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015ace:	0005      	movs	r5, r0
 8015ad0:	07db      	lsls	r3, r3, #31
 8015ad2:	d4e2      	bmi.n	8015a9a <_fflush_r+0xe>
 8015ad4:	89a3      	ldrh	r3, [r4, #12]
 8015ad6:	059b      	lsls	r3, r3, #22
 8015ad8:	d4df      	bmi.n	8015a9a <_fflush_r+0xe>
 8015ada:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015adc:	f7fd faea 	bl	80130b4 <__retarget_lock_release_recursive>
 8015ae0:	e7db      	b.n	8015a9a <_fflush_r+0xe>

08015ae2 <memmove>:
 8015ae2:	b510      	push	{r4, lr}
 8015ae4:	4288      	cmp	r0, r1
 8015ae6:	d806      	bhi.n	8015af6 <memmove+0x14>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d008      	beq.n	8015b00 <memmove+0x1e>
 8015aee:	5ccc      	ldrb	r4, [r1, r3]
 8015af0:	54c4      	strb	r4, [r0, r3]
 8015af2:	3301      	adds	r3, #1
 8015af4:	e7f9      	b.n	8015aea <memmove+0x8>
 8015af6:	188b      	adds	r3, r1, r2
 8015af8:	4298      	cmp	r0, r3
 8015afa:	d2f5      	bcs.n	8015ae8 <memmove+0x6>
 8015afc:	3a01      	subs	r2, #1
 8015afe:	d200      	bcs.n	8015b02 <memmove+0x20>
 8015b00:	bd10      	pop	{r4, pc}
 8015b02:	5c8b      	ldrb	r3, [r1, r2]
 8015b04:	5483      	strb	r3, [r0, r2]
 8015b06:	e7f9      	b.n	8015afc <memmove+0x1a>

08015b08 <strncmp>:
 8015b08:	b530      	push	{r4, r5, lr}
 8015b0a:	0005      	movs	r5, r0
 8015b0c:	1e10      	subs	r0, r2, #0
 8015b0e:	d00b      	beq.n	8015b28 <strncmp+0x20>
 8015b10:	2400      	movs	r4, #0
 8015b12:	3a01      	subs	r2, #1
 8015b14:	5d2b      	ldrb	r3, [r5, r4]
 8015b16:	5d08      	ldrb	r0, [r1, r4]
 8015b18:	4283      	cmp	r3, r0
 8015b1a:	d104      	bne.n	8015b26 <strncmp+0x1e>
 8015b1c:	42a2      	cmp	r2, r4
 8015b1e:	d002      	beq.n	8015b26 <strncmp+0x1e>
 8015b20:	3401      	adds	r4, #1
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d1f6      	bne.n	8015b14 <strncmp+0xc>
 8015b26:	1a18      	subs	r0, r3, r0
 8015b28:	bd30      	pop	{r4, r5, pc}
	...

08015b2c <_sbrk_r>:
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	b570      	push	{r4, r5, r6, lr}
 8015b30:	4d06      	ldr	r5, [pc, #24]	@ (8015b4c <_sbrk_r+0x20>)
 8015b32:	0004      	movs	r4, r0
 8015b34:	0008      	movs	r0, r1
 8015b36:	602b      	str	r3, [r5, #0]
 8015b38:	f7f1 fd92 	bl	8007660 <_sbrk>
 8015b3c:	1c43      	adds	r3, r0, #1
 8015b3e:	d103      	bne.n	8015b48 <_sbrk_r+0x1c>
 8015b40:	682b      	ldr	r3, [r5, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d000      	beq.n	8015b48 <_sbrk_r+0x1c>
 8015b46:	6023      	str	r3, [r4, #0]
 8015b48:	bd70      	pop	{r4, r5, r6, pc}
 8015b4a:	46c0      	nop			@ (mov r8, r8)
 8015b4c:	20007284 	.word	0x20007284

08015b50 <nan>:
 8015b50:	2000      	movs	r0, #0
 8015b52:	4901      	ldr	r1, [pc, #4]	@ (8015b58 <nan+0x8>)
 8015b54:	4770      	bx	lr
 8015b56:	46c0      	nop			@ (mov r8, r8)
 8015b58:	7ff80000 	.word	0x7ff80000

08015b5c <__assert_func>:
 8015b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015b5e:	0014      	movs	r4, r2
 8015b60:	001a      	movs	r2, r3
 8015b62:	4b09      	ldr	r3, [pc, #36]	@ (8015b88 <__assert_func+0x2c>)
 8015b64:	0005      	movs	r5, r0
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	000e      	movs	r6, r1
 8015b6a:	68d8      	ldr	r0, [r3, #12]
 8015b6c:	4b07      	ldr	r3, [pc, #28]	@ (8015b8c <__assert_func+0x30>)
 8015b6e:	2c00      	cmp	r4, #0
 8015b70:	d101      	bne.n	8015b76 <__assert_func+0x1a>
 8015b72:	4b07      	ldr	r3, [pc, #28]	@ (8015b90 <__assert_func+0x34>)
 8015b74:	001c      	movs	r4, r3
 8015b76:	4907      	ldr	r1, [pc, #28]	@ (8015b94 <__assert_func+0x38>)
 8015b78:	9301      	str	r3, [sp, #4]
 8015b7a:	9402      	str	r4, [sp, #8]
 8015b7c:	002b      	movs	r3, r5
 8015b7e:	9600      	str	r6, [sp, #0]
 8015b80:	f000 fbe0 	bl	8016344 <fiprintf>
 8015b84:	f000 fbee 	bl	8016364 <abort>
 8015b88:	20000098 	.word	0x20000098
 8015b8c:	080174d2 	.word	0x080174d2
 8015b90:	0801750d 	.word	0x0801750d
 8015b94:	080174df 	.word	0x080174df

08015b98 <_calloc_r>:
 8015b98:	b570      	push	{r4, r5, r6, lr}
 8015b9a:	0c0b      	lsrs	r3, r1, #16
 8015b9c:	0c15      	lsrs	r5, r2, #16
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d11e      	bne.n	8015be0 <_calloc_r+0x48>
 8015ba2:	2d00      	cmp	r5, #0
 8015ba4:	d10c      	bne.n	8015bc0 <_calloc_r+0x28>
 8015ba6:	b289      	uxth	r1, r1
 8015ba8:	b294      	uxth	r4, r2
 8015baa:	434c      	muls	r4, r1
 8015bac:	0021      	movs	r1, r4
 8015bae:	f7fe f98f 	bl	8013ed0 <_malloc_r>
 8015bb2:	1e05      	subs	r5, r0, #0
 8015bb4:	d01a      	beq.n	8015bec <_calloc_r+0x54>
 8015bb6:	0022      	movs	r2, r4
 8015bb8:	2100      	movs	r1, #0
 8015bba:	f7fd f995 	bl	8012ee8 <memset>
 8015bbe:	e016      	b.n	8015bee <_calloc_r+0x56>
 8015bc0:	1c2b      	adds	r3, r5, #0
 8015bc2:	1c0c      	adds	r4, r1, #0
 8015bc4:	b289      	uxth	r1, r1
 8015bc6:	b292      	uxth	r2, r2
 8015bc8:	434a      	muls	r2, r1
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	b2a1      	uxth	r1, r4
 8015bce:	4359      	muls	r1, r3
 8015bd0:	0c14      	lsrs	r4, r2, #16
 8015bd2:	190c      	adds	r4, r1, r4
 8015bd4:	0c23      	lsrs	r3, r4, #16
 8015bd6:	d107      	bne.n	8015be8 <_calloc_r+0x50>
 8015bd8:	0424      	lsls	r4, r4, #16
 8015bda:	b292      	uxth	r2, r2
 8015bdc:	4314      	orrs	r4, r2
 8015bde:	e7e5      	b.n	8015bac <_calloc_r+0x14>
 8015be0:	2d00      	cmp	r5, #0
 8015be2:	d101      	bne.n	8015be8 <_calloc_r+0x50>
 8015be4:	1c14      	adds	r4, r2, #0
 8015be6:	e7ed      	b.n	8015bc4 <_calloc_r+0x2c>
 8015be8:	230c      	movs	r3, #12
 8015bea:	6003      	str	r3, [r0, #0]
 8015bec:	2500      	movs	r5, #0
 8015bee:	0028      	movs	r0, r5
 8015bf0:	bd70      	pop	{r4, r5, r6, pc}

08015bf2 <rshift>:
 8015bf2:	0002      	movs	r2, r0
 8015bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bf6:	6904      	ldr	r4, [r0, #16]
 8015bf8:	b085      	sub	sp, #20
 8015bfa:	3214      	adds	r2, #20
 8015bfc:	114b      	asrs	r3, r1, #5
 8015bfe:	0016      	movs	r6, r2
 8015c00:	9302      	str	r3, [sp, #8]
 8015c02:	429c      	cmp	r4, r3
 8015c04:	dd31      	ble.n	8015c6a <rshift+0x78>
 8015c06:	261f      	movs	r6, #31
 8015c08:	000f      	movs	r7, r1
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	00a5      	lsls	r5, r4, #2
 8015c0e:	18d3      	adds	r3, r2, r3
 8015c10:	4037      	ands	r7, r6
 8015c12:	1955      	adds	r5, r2, r5
 8015c14:	9300      	str	r3, [sp, #0]
 8015c16:	9701      	str	r7, [sp, #4]
 8015c18:	4231      	tst	r1, r6
 8015c1a:	d10d      	bne.n	8015c38 <rshift+0x46>
 8015c1c:	0016      	movs	r6, r2
 8015c1e:	0019      	movs	r1, r3
 8015c20:	428d      	cmp	r5, r1
 8015c22:	d836      	bhi.n	8015c92 <rshift+0xa0>
 8015c24:	9b00      	ldr	r3, [sp, #0]
 8015c26:	2600      	movs	r6, #0
 8015c28:	3b03      	subs	r3, #3
 8015c2a:	429d      	cmp	r5, r3
 8015c2c:	d302      	bcc.n	8015c34 <rshift+0x42>
 8015c2e:	9b02      	ldr	r3, [sp, #8]
 8015c30:	1ae4      	subs	r4, r4, r3
 8015c32:	00a6      	lsls	r6, r4, #2
 8015c34:	1996      	adds	r6, r2, r6
 8015c36:	e018      	b.n	8015c6a <rshift+0x78>
 8015c38:	2120      	movs	r1, #32
 8015c3a:	9e01      	ldr	r6, [sp, #4]
 8015c3c:	9f01      	ldr	r7, [sp, #4]
 8015c3e:	1b89      	subs	r1, r1, r6
 8015c40:	9e00      	ldr	r6, [sp, #0]
 8015c42:	9103      	str	r1, [sp, #12]
 8015c44:	ce02      	ldmia	r6!, {r1}
 8015c46:	4694      	mov	ip, r2
 8015c48:	40f9      	lsrs	r1, r7
 8015c4a:	42b5      	cmp	r5, r6
 8015c4c:	d816      	bhi.n	8015c7c <rshift+0x8a>
 8015c4e:	9b00      	ldr	r3, [sp, #0]
 8015c50:	2600      	movs	r6, #0
 8015c52:	3301      	adds	r3, #1
 8015c54:	429d      	cmp	r5, r3
 8015c56:	d303      	bcc.n	8015c60 <rshift+0x6e>
 8015c58:	9b02      	ldr	r3, [sp, #8]
 8015c5a:	1ae4      	subs	r4, r4, r3
 8015c5c:	00a6      	lsls	r6, r4, #2
 8015c5e:	3e04      	subs	r6, #4
 8015c60:	1996      	adds	r6, r2, r6
 8015c62:	6031      	str	r1, [r6, #0]
 8015c64:	2900      	cmp	r1, #0
 8015c66:	d000      	beq.n	8015c6a <rshift+0x78>
 8015c68:	3604      	adds	r6, #4
 8015c6a:	1ab1      	subs	r1, r6, r2
 8015c6c:	1089      	asrs	r1, r1, #2
 8015c6e:	6101      	str	r1, [r0, #16]
 8015c70:	4296      	cmp	r6, r2
 8015c72:	d101      	bne.n	8015c78 <rshift+0x86>
 8015c74:	2300      	movs	r3, #0
 8015c76:	6143      	str	r3, [r0, #20]
 8015c78:	b005      	add	sp, #20
 8015c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c7c:	6837      	ldr	r7, [r6, #0]
 8015c7e:	9b03      	ldr	r3, [sp, #12]
 8015c80:	409f      	lsls	r7, r3
 8015c82:	430f      	orrs	r7, r1
 8015c84:	4661      	mov	r1, ip
 8015c86:	c180      	stmia	r1!, {r7}
 8015c88:	468c      	mov	ip, r1
 8015c8a:	9b01      	ldr	r3, [sp, #4]
 8015c8c:	ce02      	ldmia	r6!, {r1}
 8015c8e:	40d9      	lsrs	r1, r3
 8015c90:	e7db      	b.n	8015c4a <rshift+0x58>
 8015c92:	c980      	ldmia	r1!, {r7}
 8015c94:	c680      	stmia	r6!, {r7}
 8015c96:	e7c3      	b.n	8015c20 <rshift+0x2e>

08015c98 <__hexdig_fun>:
 8015c98:	0002      	movs	r2, r0
 8015c9a:	3a30      	subs	r2, #48	@ 0x30
 8015c9c:	0003      	movs	r3, r0
 8015c9e:	2a09      	cmp	r2, #9
 8015ca0:	d802      	bhi.n	8015ca8 <__hexdig_fun+0x10>
 8015ca2:	3b20      	subs	r3, #32
 8015ca4:	b2d8      	uxtb	r0, r3
 8015ca6:	4770      	bx	lr
 8015ca8:	0002      	movs	r2, r0
 8015caa:	3a61      	subs	r2, #97	@ 0x61
 8015cac:	2a05      	cmp	r2, #5
 8015cae:	d801      	bhi.n	8015cb4 <__hexdig_fun+0x1c>
 8015cb0:	3b47      	subs	r3, #71	@ 0x47
 8015cb2:	e7f7      	b.n	8015ca4 <__hexdig_fun+0xc>
 8015cb4:	001a      	movs	r2, r3
 8015cb6:	3a41      	subs	r2, #65	@ 0x41
 8015cb8:	2000      	movs	r0, #0
 8015cba:	2a05      	cmp	r2, #5
 8015cbc:	d8f3      	bhi.n	8015ca6 <__hexdig_fun+0xe>
 8015cbe:	3b27      	subs	r3, #39	@ 0x27
 8015cc0:	e7f0      	b.n	8015ca4 <__hexdig_fun+0xc>
	...

08015cc4 <__gethex>:
 8015cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cc6:	b089      	sub	sp, #36	@ 0x24
 8015cc8:	9307      	str	r3, [sp, #28]
 8015cca:	680b      	ldr	r3, [r1, #0]
 8015ccc:	9201      	str	r2, [sp, #4]
 8015cce:	9003      	str	r0, [sp, #12]
 8015cd0:	9106      	str	r1, [sp, #24]
 8015cd2:	1c9a      	adds	r2, r3, #2
 8015cd4:	0011      	movs	r1, r2
 8015cd6:	3201      	adds	r2, #1
 8015cd8:	1e50      	subs	r0, r2, #1
 8015cda:	7800      	ldrb	r0, [r0, #0]
 8015cdc:	2830      	cmp	r0, #48	@ 0x30
 8015cde:	d0f9      	beq.n	8015cd4 <__gethex+0x10>
 8015ce0:	1acb      	subs	r3, r1, r3
 8015ce2:	3b02      	subs	r3, #2
 8015ce4:	9305      	str	r3, [sp, #20]
 8015ce6:	9100      	str	r1, [sp, #0]
 8015ce8:	f7ff ffd6 	bl	8015c98 <__hexdig_fun>
 8015cec:	2300      	movs	r3, #0
 8015cee:	001d      	movs	r5, r3
 8015cf0:	9302      	str	r3, [sp, #8]
 8015cf2:	4298      	cmp	r0, r3
 8015cf4:	d11e      	bne.n	8015d34 <__gethex+0x70>
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	49a6      	ldr	r1, [pc, #664]	@ (8015f94 <__gethex+0x2d0>)
 8015cfa:	9800      	ldr	r0, [sp, #0]
 8015cfc:	f7ff ff04 	bl	8015b08 <strncmp>
 8015d00:	0007      	movs	r7, r0
 8015d02:	42a8      	cmp	r0, r5
 8015d04:	d000      	beq.n	8015d08 <__gethex+0x44>
 8015d06:	e06a      	b.n	8015dde <__gethex+0x11a>
 8015d08:	9b00      	ldr	r3, [sp, #0]
 8015d0a:	7858      	ldrb	r0, [r3, #1]
 8015d0c:	1c5c      	adds	r4, r3, #1
 8015d0e:	f7ff ffc3 	bl	8015c98 <__hexdig_fun>
 8015d12:	2301      	movs	r3, #1
 8015d14:	9302      	str	r3, [sp, #8]
 8015d16:	42a8      	cmp	r0, r5
 8015d18:	d02f      	beq.n	8015d7a <__gethex+0xb6>
 8015d1a:	9400      	str	r4, [sp, #0]
 8015d1c:	9b00      	ldr	r3, [sp, #0]
 8015d1e:	7818      	ldrb	r0, [r3, #0]
 8015d20:	2830      	cmp	r0, #48	@ 0x30
 8015d22:	d009      	beq.n	8015d38 <__gethex+0x74>
 8015d24:	f7ff ffb8 	bl	8015c98 <__hexdig_fun>
 8015d28:	4242      	negs	r2, r0
 8015d2a:	4142      	adcs	r2, r0
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	0025      	movs	r5, r4
 8015d30:	9202      	str	r2, [sp, #8]
 8015d32:	9305      	str	r3, [sp, #20]
 8015d34:	9c00      	ldr	r4, [sp, #0]
 8015d36:	e004      	b.n	8015d42 <__gethex+0x7e>
 8015d38:	9b00      	ldr	r3, [sp, #0]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	9300      	str	r3, [sp, #0]
 8015d3e:	e7ed      	b.n	8015d1c <__gethex+0x58>
 8015d40:	3401      	adds	r4, #1
 8015d42:	7820      	ldrb	r0, [r4, #0]
 8015d44:	f7ff ffa8 	bl	8015c98 <__hexdig_fun>
 8015d48:	1e07      	subs	r7, r0, #0
 8015d4a:	d1f9      	bne.n	8015d40 <__gethex+0x7c>
 8015d4c:	2201      	movs	r2, #1
 8015d4e:	0020      	movs	r0, r4
 8015d50:	4990      	ldr	r1, [pc, #576]	@ (8015f94 <__gethex+0x2d0>)
 8015d52:	f7ff fed9 	bl	8015b08 <strncmp>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d10d      	bne.n	8015d76 <__gethex+0xb2>
 8015d5a:	2d00      	cmp	r5, #0
 8015d5c:	d106      	bne.n	8015d6c <__gethex+0xa8>
 8015d5e:	3401      	adds	r4, #1
 8015d60:	0025      	movs	r5, r4
 8015d62:	7820      	ldrb	r0, [r4, #0]
 8015d64:	f7ff ff98 	bl	8015c98 <__hexdig_fun>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d102      	bne.n	8015d72 <__gethex+0xae>
 8015d6c:	1b2d      	subs	r5, r5, r4
 8015d6e:	00af      	lsls	r7, r5, #2
 8015d70:	e003      	b.n	8015d7a <__gethex+0xb6>
 8015d72:	3401      	adds	r4, #1
 8015d74:	e7f5      	b.n	8015d62 <__gethex+0x9e>
 8015d76:	2d00      	cmp	r5, #0
 8015d78:	d1f8      	bne.n	8015d6c <__gethex+0xa8>
 8015d7a:	2220      	movs	r2, #32
 8015d7c:	7823      	ldrb	r3, [r4, #0]
 8015d7e:	0026      	movs	r6, r4
 8015d80:	4393      	bics	r3, r2
 8015d82:	2b50      	cmp	r3, #80	@ 0x50
 8015d84:	d11d      	bne.n	8015dc2 <__gethex+0xfe>
 8015d86:	7863      	ldrb	r3, [r4, #1]
 8015d88:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d8a:	d02d      	beq.n	8015de8 <__gethex+0x124>
 8015d8c:	2b2d      	cmp	r3, #45	@ 0x2d
 8015d8e:	d02f      	beq.n	8015df0 <__gethex+0x12c>
 8015d90:	2300      	movs	r3, #0
 8015d92:	1c66      	adds	r6, r4, #1
 8015d94:	9304      	str	r3, [sp, #16]
 8015d96:	7830      	ldrb	r0, [r6, #0]
 8015d98:	f7ff ff7e 	bl	8015c98 <__hexdig_fun>
 8015d9c:	1e43      	subs	r3, r0, #1
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	0005      	movs	r5, r0
 8015da2:	2b18      	cmp	r3, #24
 8015da4:	d82a      	bhi.n	8015dfc <__gethex+0x138>
 8015da6:	7870      	ldrb	r0, [r6, #1]
 8015da8:	f7ff ff76 	bl	8015c98 <__hexdig_fun>
 8015dac:	1e43      	subs	r3, r0, #1
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	3601      	adds	r6, #1
 8015db2:	3d10      	subs	r5, #16
 8015db4:	2b18      	cmp	r3, #24
 8015db6:	d91d      	bls.n	8015df4 <__gethex+0x130>
 8015db8:	9b04      	ldr	r3, [sp, #16]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d000      	beq.n	8015dc0 <__gethex+0xfc>
 8015dbe:	426d      	negs	r5, r5
 8015dc0:	197f      	adds	r7, r7, r5
 8015dc2:	9b06      	ldr	r3, [sp, #24]
 8015dc4:	601e      	str	r6, [r3, #0]
 8015dc6:	9b02      	ldr	r3, [sp, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d019      	beq.n	8015e00 <__gethex+0x13c>
 8015dcc:	9b05      	ldr	r3, [sp, #20]
 8015dce:	2606      	movs	r6, #6
 8015dd0:	425a      	negs	r2, r3
 8015dd2:	4153      	adcs	r3, r2
 8015dd4:	425b      	negs	r3, r3
 8015dd6:	401e      	ands	r6, r3
 8015dd8:	0030      	movs	r0, r6
 8015dda:	b009      	add	sp, #36	@ 0x24
 8015ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dde:	2301      	movs	r3, #1
 8015de0:	2700      	movs	r7, #0
 8015de2:	9c00      	ldr	r4, [sp, #0]
 8015de4:	9302      	str	r3, [sp, #8]
 8015de6:	e7c8      	b.n	8015d7a <__gethex+0xb6>
 8015de8:	2300      	movs	r3, #0
 8015dea:	9304      	str	r3, [sp, #16]
 8015dec:	1ca6      	adds	r6, r4, #2
 8015dee:	e7d2      	b.n	8015d96 <__gethex+0xd2>
 8015df0:	2301      	movs	r3, #1
 8015df2:	e7fa      	b.n	8015dea <__gethex+0x126>
 8015df4:	230a      	movs	r3, #10
 8015df6:	435d      	muls	r5, r3
 8015df8:	182d      	adds	r5, r5, r0
 8015dfa:	e7d4      	b.n	8015da6 <__gethex+0xe2>
 8015dfc:	0026      	movs	r6, r4
 8015dfe:	e7e0      	b.n	8015dc2 <__gethex+0xfe>
 8015e00:	9b00      	ldr	r3, [sp, #0]
 8015e02:	9902      	ldr	r1, [sp, #8]
 8015e04:	1ae3      	subs	r3, r4, r3
 8015e06:	3b01      	subs	r3, #1
 8015e08:	2b07      	cmp	r3, #7
 8015e0a:	dc0a      	bgt.n	8015e22 <__gethex+0x15e>
 8015e0c:	9803      	ldr	r0, [sp, #12]
 8015e0e:	f7fe f8ef 	bl	8013ff0 <_Balloc>
 8015e12:	1e05      	subs	r5, r0, #0
 8015e14:	d108      	bne.n	8015e28 <__gethex+0x164>
 8015e16:	002a      	movs	r2, r5
 8015e18:	21e4      	movs	r1, #228	@ 0xe4
 8015e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8015f98 <__gethex+0x2d4>)
 8015e1c:	485f      	ldr	r0, [pc, #380]	@ (8015f9c <__gethex+0x2d8>)
 8015e1e:	f7ff fe9d 	bl	8015b5c <__assert_func>
 8015e22:	3101      	adds	r1, #1
 8015e24:	105b      	asrs	r3, r3, #1
 8015e26:	e7ef      	b.n	8015e08 <__gethex+0x144>
 8015e28:	0003      	movs	r3, r0
 8015e2a:	3314      	adds	r3, #20
 8015e2c:	9302      	str	r3, [sp, #8]
 8015e2e:	9305      	str	r3, [sp, #20]
 8015e30:	2300      	movs	r3, #0
 8015e32:	001e      	movs	r6, r3
 8015e34:	9304      	str	r3, [sp, #16]
 8015e36:	9b00      	ldr	r3, [sp, #0]
 8015e38:	42a3      	cmp	r3, r4
 8015e3a:	d338      	bcc.n	8015eae <__gethex+0x1ea>
 8015e3c:	9c05      	ldr	r4, [sp, #20]
 8015e3e:	9b02      	ldr	r3, [sp, #8]
 8015e40:	c440      	stmia	r4!, {r6}
 8015e42:	1ae4      	subs	r4, r4, r3
 8015e44:	10a4      	asrs	r4, r4, #2
 8015e46:	0030      	movs	r0, r6
 8015e48:	612c      	str	r4, [r5, #16]
 8015e4a:	f7fe f9c9 	bl	80141e0 <__hi0bits>
 8015e4e:	9b01      	ldr	r3, [sp, #4]
 8015e50:	0164      	lsls	r4, r4, #5
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	1a26      	subs	r6, r4, r0
 8015e56:	9300      	str	r3, [sp, #0]
 8015e58:	429e      	cmp	r6, r3
 8015e5a:	dd52      	ble.n	8015f02 <__gethex+0x23e>
 8015e5c:	1af6      	subs	r6, r6, r3
 8015e5e:	0031      	movs	r1, r6
 8015e60:	0028      	movs	r0, r5
 8015e62:	f7fe fd6c 	bl	801493e <__any_on>
 8015e66:	1e04      	subs	r4, r0, #0
 8015e68:	d00f      	beq.n	8015e8a <__gethex+0x1c6>
 8015e6a:	2401      	movs	r4, #1
 8015e6c:	231f      	movs	r3, #31
 8015e6e:	0020      	movs	r0, r4
 8015e70:	1e72      	subs	r2, r6, #1
 8015e72:	4013      	ands	r3, r2
 8015e74:	4098      	lsls	r0, r3
 8015e76:	0003      	movs	r3, r0
 8015e78:	1151      	asrs	r1, r2, #5
 8015e7a:	9802      	ldr	r0, [sp, #8]
 8015e7c:	0089      	lsls	r1, r1, #2
 8015e7e:	5809      	ldr	r1, [r1, r0]
 8015e80:	4219      	tst	r1, r3
 8015e82:	d002      	beq.n	8015e8a <__gethex+0x1c6>
 8015e84:	42a2      	cmp	r2, r4
 8015e86:	dc34      	bgt.n	8015ef2 <__gethex+0x22e>
 8015e88:	2402      	movs	r4, #2
 8015e8a:	0031      	movs	r1, r6
 8015e8c:	0028      	movs	r0, r5
 8015e8e:	f7ff feb0 	bl	8015bf2 <rshift>
 8015e92:	19bf      	adds	r7, r7, r6
 8015e94:	9b01      	ldr	r3, [sp, #4]
 8015e96:	689b      	ldr	r3, [r3, #8]
 8015e98:	42bb      	cmp	r3, r7
 8015e9a:	da42      	bge.n	8015f22 <__gethex+0x25e>
 8015e9c:	0029      	movs	r1, r5
 8015e9e:	9803      	ldr	r0, [sp, #12]
 8015ea0:	f7fe f8ea 	bl	8014078 <_Bfree>
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ea8:	26a3      	movs	r6, #163	@ 0xa3
 8015eaa:	6013      	str	r3, [r2, #0]
 8015eac:	e794      	b.n	8015dd8 <__gethex+0x114>
 8015eae:	3c01      	subs	r4, #1
 8015eb0:	7823      	ldrb	r3, [r4, #0]
 8015eb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8015eb4:	d012      	beq.n	8015edc <__gethex+0x218>
 8015eb6:	9b04      	ldr	r3, [sp, #16]
 8015eb8:	2b20      	cmp	r3, #32
 8015eba:	d104      	bne.n	8015ec6 <__gethex+0x202>
 8015ebc:	9b05      	ldr	r3, [sp, #20]
 8015ebe:	c340      	stmia	r3!, {r6}
 8015ec0:	2600      	movs	r6, #0
 8015ec2:	9305      	str	r3, [sp, #20]
 8015ec4:	9604      	str	r6, [sp, #16]
 8015ec6:	7820      	ldrb	r0, [r4, #0]
 8015ec8:	f7ff fee6 	bl	8015c98 <__hexdig_fun>
 8015ecc:	230f      	movs	r3, #15
 8015ece:	4018      	ands	r0, r3
 8015ed0:	9b04      	ldr	r3, [sp, #16]
 8015ed2:	4098      	lsls	r0, r3
 8015ed4:	3304      	adds	r3, #4
 8015ed6:	4306      	orrs	r6, r0
 8015ed8:	9304      	str	r3, [sp, #16]
 8015eda:	e7ac      	b.n	8015e36 <__gethex+0x172>
 8015edc:	9b00      	ldr	r3, [sp, #0]
 8015ede:	42a3      	cmp	r3, r4
 8015ee0:	d8e9      	bhi.n	8015eb6 <__gethex+0x1f2>
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	0020      	movs	r0, r4
 8015ee6:	492b      	ldr	r1, [pc, #172]	@ (8015f94 <__gethex+0x2d0>)
 8015ee8:	f7ff fe0e 	bl	8015b08 <strncmp>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	d1e2      	bne.n	8015eb6 <__gethex+0x1f2>
 8015ef0:	e7a1      	b.n	8015e36 <__gethex+0x172>
 8015ef2:	0028      	movs	r0, r5
 8015ef4:	1eb1      	subs	r1, r6, #2
 8015ef6:	f7fe fd22 	bl	801493e <__any_on>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d0c4      	beq.n	8015e88 <__gethex+0x1c4>
 8015efe:	2403      	movs	r4, #3
 8015f00:	e7c3      	b.n	8015e8a <__gethex+0x1c6>
 8015f02:	9b00      	ldr	r3, [sp, #0]
 8015f04:	2400      	movs	r4, #0
 8015f06:	429e      	cmp	r6, r3
 8015f08:	dac4      	bge.n	8015e94 <__gethex+0x1d0>
 8015f0a:	1b9e      	subs	r6, r3, r6
 8015f0c:	0029      	movs	r1, r5
 8015f0e:	0032      	movs	r2, r6
 8015f10:	9803      	ldr	r0, [sp, #12]
 8015f12:	f7fe fadb 	bl	80144cc <__lshift>
 8015f16:	0003      	movs	r3, r0
 8015f18:	3314      	adds	r3, #20
 8015f1a:	0005      	movs	r5, r0
 8015f1c:	1bbf      	subs	r7, r7, r6
 8015f1e:	9302      	str	r3, [sp, #8]
 8015f20:	e7b8      	b.n	8015e94 <__gethex+0x1d0>
 8015f22:	9b01      	ldr	r3, [sp, #4]
 8015f24:	685e      	ldr	r6, [r3, #4]
 8015f26:	42be      	cmp	r6, r7
 8015f28:	dd6f      	ble.n	801600a <__gethex+0x346>
 8015f2a:	9b00      	ldr	r3, [sp, #0]
 8015f2c:	1bf6      	subs	r6, r6, r7
 8015f2e:	42b3      	cmp	r3, r6
 8015f30:	dc36      	bgt.n	8015fa0 <__gethex+0x2dc>
 8015f32:	9b01      	ldr	r3, [sp, #4]
 8015f34:	68db      	ldr	r3, [r3, #12]
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	d024      	beq.n	8015f84 <__gethex+0x2c0>
 8015f3a:	2b03      	cmp	r3, #3
 8015f3c:	d026      	beq.n	8015f8c <__gethex+0x2c8>
 8015f3e:	2b01      	cmp	r3, #1
 8015f40:	d117      	bne.n	8015f72 <__gethex+0x2ae>
 8015f42:	9b00      	ldr	r3, [sp, #0]
 8015f44:	42b3      	cmp	r3, r6
 8015f46:	d114      	bne.n	8015f72 <__gethex+0x2ae>
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d10b      	bne.n	8015f64 <__gethex+0x2a0>
 8015f4c:	9b01      	ldr	r3, [sp, #4]
 8015f4e:	9a07      	ldr	r2, [sp, #28]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	2662      	movs	r6, #98	@ 0x62
 8015f54:	6013      	str	r3, [r2, #0]
 8015f56:	2301      	movs	r3, #1
 8015f58:	9a02      	ldr	r2, [sp, #8]
 8015f5a:	612b      	str	r3, [r5, #16]
 8015f5c:	6013      	str	r3, [r2, #0]
 8015f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f60:	601d      	str	r5, [r3, #0]
 8015f62:	e739      	b.n	8015dd8 <__gethex+0x114>
 8015f64:	9900      	ldr	r1, [sp, #0]
 8015f66:	0028      	movs	r0, r5
 8015f68:	3901      	subs	r1, #1
 8015f6a:	f7fe fce8 	bl	801493e <__any_on>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	d1ec      	bne.n	8015f4c <__gethex+0x288>
 8015f72:	0029      	movs	r1, r5
 8015f74:	9803      	ldr	r0, [sp, #12]
 8015f76:	f7fe f87f 	bl	8014078 <_Bfree>
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f7e:	2650      	movs	r6, #80	@ 0x50
 8015f80:	6013      	str	r3, [r2, #0]
 8015f82:	e729      	b.n	8015dd8 <__gethex+0x114>
 8015f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d1f3      	bne.n	8015f72 <__gethex+0x2ae>
 8015f8a:	e7df      	b.n	8015f4c <__gethex+0x288>
 8015f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d1dc      	bne.n	8015f4c <__gethex+0x288>
 8015f92:	e7ee      	b.n	8015f72 <__gethex+0x2ae>
 8015f94:	08017360 	.word	0x08017360
 8015f98:	080171f5 	.word	0x080171f5
 8015f9c:	0801750e 	.word	0x0801750e
 8015fa0:	1e77      	subs	r7, r6, #1
 8015fa2:	2c00      	cmp	r4, #0
 8015fa4:	d12f      	bne.n	8016006 <__gethex+0x342>
 8015fa6:	2f00      	cmp	r7, #0
 8015fa8:	d004      	beq.n	8015fb4 <__gethex+0x2f0>
 8015faa:	0039      	movs	r1, r7
 8015fac:	0028      	movs	r0, r5
 8015fae:	f7fe fcc6 	bl	801493e <__any_on>
 8015fb2:	0004      	movs	r4, r0
 8015fb4:	231f      	movs	r3, #31
 8015fb6:	117a      	asrs	r2, r7, #5
 8015fb8:	401f      	ands	r7, r3
 8015fba:	3b1e      	subs	r3, #30
 8015fbc:	40bb      	lsls	r3, r7
 8015fbe:	9902      	ldr	r1, [sp, #8]
 8015fc0:	0092      	lsls	r2, r2, #2
 8015fc2:	5852      	ldr	r2, [r2, r1]
 8015fc4:	421a      	tst	r2, r3
 8015fc6:	d001      	beq.n	8015fcc <__gethex+0x308>
 8015fc8:	2302      	movs	r3, #2
 8015fca:	431c      	orrs	r4, r3
 8015fcc:	9b00      	ldr	r3, [sp, #0]
 8015fce:	0031      	movs	r1, r6
 8015fd0:	1b9b      	subs	r3, r3, r6
 8015fd2:	2602      	movs	r6, #2
 8015fd4:	0028      	movs	r0, r5
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	f7ff fe0b 	bl	8015bf2 <rshift>
 8015fdc:	9b01      	ldr	r3, [sp, #4]
 8015fde:	685f      	ldr	r7, [r3, #4]
 8015fe0:	2c00      	cmp	r4, #0
 8015fe2:	d03f      	beq.n	8016064 <__gethex+0x3a0>
 8015fe4:	9b01      	ldr	r3, [sp, #4]
 8015fe6:	68db      	ldr	r3, [r3, #12]
 8015fe8:	2b02      	cmp	r3, #2
 8015fea:	d010      	beq.n	801600e <__gethex+0x34a>
 8015fec:	2b03      	cmp	r3, #3
 8015fee:	d012      	beq.n	8016016 <__gethex+0x352>
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d106      	bne.n	8016002 <__gethex+0x33e>
 8015ff4:	07a2      	lsls	r2, r4, #30
 8015ff6:	d504      	bpl.n	8016002 <__gethex+0x33e>
 8015ff8:	9a02      	ldr	r2, [sp, #8]
 8015ffa:	6812      	ldr	r2, [r2, #0]
 8015ffc:	4314      	orrs	r4, r2
 8015ffe:	421c      	tst	r4, r3
 8016000:	d10c      	bne.n	801601c <__gethex+0x358>
 8016002:	2310      	movs	r3, #16
 8016004:	e02d      	b.n	8016062 <__gethex+0x39e>
 8016006:	2401      	movs	r4, #1
 8016008:	e7d4      	b.n	8015fb4 <__gethex+0x2f0>
 801600a:	2601      	movs	r6, #1
 801600c:	e7e8      	b.n	8015fe0 <__gethex+0x31c>
 801600e:	2301      	movs	r3, #1
 8016010:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016012:	1a9b      	subs	r3, r3, r2
 8016014:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016018:	2b00      	cmp	r3, #0
 801601a:	d0f2      	beq.n	8016002 <__gethex+0x33e>
 801601c:	692b      	ldr	r3, [r5, #16]
 801601e:	2000      	movs	r0, #0
 8016020:	9302      	str	r3, [sp, #8]
 8016022:	009b      	lsls	r3, r3, #2
 8016024:	9304      	str	r3, [sp, #16]
 8016026:	002b      	movs	r3, r5
 8016028:	9a04      	ldr	r2, [sp, #16]
 801602a:	3314      	adds	r3, #20
 801602c:	1899      	adds	r1, r3, r2
 801602e:	681a      	ldr	r2, [r3, #0]
 8016030:	1c54      	adds	r4, r2, #1
 8016032:	d01c      	beq.n	801606e <__gethex+0x3aa>
 8016034:	3201      	adds	r2, #1
 8016036:	601a      	str	r2, [r3, #0]
 8016038:	002b      	movs	r3, r5
 801603a:	3314      	adds	r3, #20
 801603c:	2e02      	cmp	r6, #2
 801603e:	d13f      	bne.n	80160c0 <__gethex+0x3fc>
 8016040:	9a01      	ldr	r2, [sp, #4]
 8016042:	9900      	ldr	r1, [sp, #0]
 8016044:	6812      	ldr	r2, [r2, #0]
 8016046:	3a01      	subs	r2, #1
 8016048:	428a      	cmp	r2, r1
 801604a:	d109      	bne.n	8016060 <__gethex+0x39c>
 801604c:	000a      	movs	r2, r1
 801604e:	201f      	movs	r0, #31
 8016050:	4010      	ands	r0, r2
 8016052:	2201      	movs	r2, #1
 8016054:	4082      	lsls	r2, r0
 8016056:	1149      	asrs	r1, r1, #5
 8016058:	0089      	lsls	r1, r1, #2
 801605a:	58cb      	ldr	r3, [r1, r3]
 801605c:	4213      	tst	r3, r2
 801605e:	d13d      	bne.n	80160dc <__gethex+0x418>
 8016060:	2320      	movs	r3, #32
 8016062:	431e      	orrs	r6, r3
 8016064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016066:	601d      	str	r5, [r3, #0]
 8016068:	9b07      	ldr	r3, [sp, #28]
 801606a:	601f      	str	r7, [r3, #0]
 801606c:	e6b4      	b.n	8015dd8 <__gethex+0x114>
 801606e:	c301      	stmia	r3!, {r0}
 8016070:	4299      	cmp	r1, r3
 8016072:	d8dc      	bhi.n	801602e <__gethex+0x36a>
 8016074:	68ab      	ldr	r3, [r5, #8]
 8016076:	9a02      	ldr	r2, [sp, #8]
 8016078:	429a      	cmp	r2, r3
 801607a:	db18      	blt.n	80160ae <__gethex+0x3ea>
 801607c:	6869      	ldr	r1, [r5, #4]
 801607e:	9803      	ldr	r0, [sp, #12]
 8016080:	3101      	adds	r1, #1
 8016082:	f7fd ffb5 	bl	8013ff0 <_Balloc>
 8016086:	1e04      	subs	r4, r0, #0
 8016088:	d104      	bne.n	8016094 <__gethex+0x3d0>
 801608a:	0022      	movs	r2, r4
 801608c:	2184      	movs	r1, #132	@ 0x84
 801608e:	4b1d      	ldr	r3, [pc, #116]	@ (8016104 <__gethex+0x440>)
 8016090:	481d      	ldr	r0, [pc, #116]	@ (8016108 <__gethex+0x444>)
 8016092:	e6c4      	b.n	8015e1e <__gethex+0x15a>
 8016094:	0029      	movs	r1, r5
 8016096:	692a      	ldr	r2, [r5, #16]
 8016098:	310c      	adds	r1, #12
 801609a:	3202      	adds	r2, #2
 801609c:	0092      	lsls	r2, r2, #2
 801609e:	300c      	adds	r0, #12
 80160a0:	f7fd f814 	bl	80130cc <memcpy>
 80160a4:	0029      	movs	r1, r5
 80160a6:	9803      	ldr	r0, [sp, #12]
 80160a8:	f7fd ffe6 	bl	8014078 <_Bfree>
 80160ac:	0025      	movs	r5, r4
 80160ae:	692b      	ldr	r3, [r5, #16]
 80160b0:	1c5a      	adds	r2, r3, #1
 80160b2:	612a      	str	r2, [r5, #16]
 80160b4:	2201      	movs	r2, #1
 80160b6:	3304      	adds	r3, #4
 80160b8:	009b      	lsls	r3, r3, #2
 80160ba:	18eb      	adds	r3, r5, r3
 80160bc:	605a      	str	r2, [r3, #4]
 80160be:	e7bb      	b.n	8016038 <__gethex+0x374>
 80160c0:	692a      	ldr	r2, [r5, #16]
 80160c2:	9902      	ldr	r1, [sp, #8]
 80160c4:	428a      	cmp	r2, r1
 80160c6:	dd0b      	ble.n	80160e0 <__gethex+0x41c>
 80160c8:	2101      	movs	r1, #1
 80160ca:	0028      	movs	r0, r5
 80160cc:	f7ff fd91 	bl	8015bf2 <rshift>
 80160d0:	9b01      	ldr	r3, [sp, #4]
 80160d2:	3701      	adds	r7, #1
 80160d4:	689b      	ldr	r3, [r3, #8]
 80160d6:	42bb      	cmp	r3, r7
 80160d8:	da00      	bge.n	80160dc <__gethex+0x418>
 80160da:	e6df      	b.n	8015e9c <__gethex+0x1d8>
 80160dc:	2601      	movs	r6, #1
 80160de:	e7bf      	b.n	8016060 <__gethex+0x39c>
 80160e0:	221f      	movs	r2, #31
 80160e2:	9c00      	ldr	r4, [sp, #0]
 80160e4:	9900      	ldr	r1, [sp, #0]
 80160e6:	4014      	ands	r4, r2
 80160e8:	4211      	tst	r1, r2
 80160ea:	d0f7      	beq.n	80160dc <__gethex+0x418>
 80160ec:	9a04      	ldr	r2, [sp, #16]
 80160ee:	189b      	adds	r3, r3, r2
 80160f0:	3b04      	subs	r3, #4
 80160f2:	6818      	ldr	r0, [r3, #0]
 80160f4:	f7fe f874 	bl	80141e0 <__hi0bits>
 80160f8:	2320      	movs	r3, #32
 80160fa:	1b1b      	subs	r3, r3, r4
 80160fc:	4298      	cmp	r0, r3
 80160fe:	dbe3      	blt.n	80160c8 <__gethex+0x404>
 8016100:	e7ec      	b.n	80160dc <__gethex+0x418>
 8016102:	46c0      	nop			@ (mov r8, r8)
 8016104:	080171f5 	.word	0x080171f5
 8016108:	0801750e 	.word	0x0801750e

0801610c <L_shift>:
 801610c:	2308      	movs	r3, #8
 801610e:	b570      	push	{r4, r5, r6, lr}
 8016110:	2520      	movs	r5, #32
 8016112:	1a9a      	subs	r2, r3, r2
 8016114:	0092      	lsls	r2, r2, #2
 8016116:	1aad      	subs	r5, r5, r2
 8016118:	6843      	ldr	r3, [r0, #4]
 801611a:	6804      	ldr	r4, [r0, #0]
 801611c:	001e      	movs	r6, r3
 801611e:	40ae      	lsls	r6, r5
 8016120:	40d3      	lsrs	r3, r2
 8016122:	4334      	orrs	r4, r6
 8016124:	6004      	str	r4, [r0, #0]
 8016126:	6043      	str	r3, [r0, #4]
 8016128:	3004      	adds	r0, #4
 801612a:	4288      	cmp	r0, r1
 801612c:	d3f4      	bcc.n	8016118 <L_shift+0xc>
 801612e:	bd70      	pop	{r4, r5, r6, pc}

08016130 <__match>:
 8016130:	b530      	push	{r4, r5, lr}
 8016132:	6803      	ldr	r3, [r0, #0]
 8016134:	780c      	ldrb	r4, [r1, #0]
 8016136:	3301      	adds	r3, #1
 8016138:	2c00      	cmp	r4, #0
 801613a:	d102      	bne.n	8016142 <__match+0x12>
 801613c:	6003      	str	r3, [r0, #0]
 801613e:	2001      	movs	r0, #1
 8016140:	bd30      	pop	{r4, r5, pc}
 8016142:	781a      	ldrb	r2, [r3, #0]
 8016144:	0015      	movs	r5, r2
 8016146:	3d41      	subs	r5, #65	@ 0x41
 8016148:	2d19      	cmp	r5, #25
 801614a:	d800      	bhi.n	801614e <__match+0x1e>
 801614c:	3220      	adds	r2, #32
 801614e:	3101      	adds	r1, #1
 8016150:	42a2      	cmp	r2, r4
 8016152:	d0ef      	beq.n	8016134 <__match+0x4>
 8016154:	2000      	movs	r0, #0
 8016156:	e7f3      	b.n	8016140 <__match+0x10>

08016158 <__hexnan>:
 8016158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801615a:	680b      	ldr	r3, [r1, #0]
 801615c:	b08b      	sub	sp, #44	@ 0x2c
 801615e:	9201      	str	r2, [sp, #4]
 8016160:	9901      	ldr	r1, [sp, #4]
 8016162:	115a      	asrs	r2, r3, #5
 8016164:	0092      	lsls	r2, r2, #2
 8016166:	188a      	adds	r2, r1, r2
 8016168:	9202      	str	r2, [sp, #8]
 801616a:	0019      	movs	r1, r3
 801616c:	221f      	movs	r2, #31
 801616e:	4011      	ands	r1, r2
 8016170:	9008      	str	r0, [sp, #32]
 8016172:	9106      	str	r1, [sp, #24]
 8016174:	4213      	tst	r3, r2
 8016176:	d002      	beq.n	801617e <__hexnan+0x26>
 8016178:	9b02      	ldr	r3, [sp, #8]
 801617a:	3304      	adds	r3, #4
 801617c:	9302      	str	r3, [sp, #8]
 801617e:	9b02      	ldr	r3, [sp, #8]
 8016180:	2500      	movs	r5, #0
 8016182:	1f1f      	subs	r7, r3, #4
 8016184:	003e      	movs	r6, r7
 8016186:	003c      	movs	r4, r7
 8016188:	9b08      	ldr	r3, [sp, #32]
 801618a:	603d      	str	r5, [r7, #0]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	9507      	str	r5, [sp, #28]
 8016190:	9305      	str	r3, [sp, #20]
 8016192:	9503      	str	r5, [sp, #12]
 8016194:	9b05      	ldr	r3, [sp, #20]
 8016196:	3301      	adds	r3, #1
 8016198:	9309      	str	r3, [sp, #36]	@ 0x24
 801619a:	9b05      	ldr	r3, [sp, #20]
 801619c:	785b      	ldrb	r3, [r3, #1]
 801619e:	9304      	str	r3, [sp, #16]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d028      	beq.n	80161f6 <__hexnan+0x9e>
 80161a4:	9804      	ldr	r0, [sp, #16]
 80161a6:	f7ff fd77 	bl	8015c98 <__hexdig_fun>
 80161aa:	2800      	cmp	r0, #0
 80161ac:	d155      	bne.n	801625a <__hexnan+0x102>
 80161ae:	9b04      	ldr	r3, [sp, #16]
 80161b0:	2b20      	cmp	r3, #32
 80161b2:	d819      	bhi.n	80161e8 <__hexnan+0x90>
 80161b4:	9b03      	ldr	r3, [sp, #12]
 80161b6:	9a07      	ldr	r2, [sp, #28]
 80161b8:	4293      	cmp	r3, r2
 80161ba:	dd12      	ble.n	80161e2 <__hexnan+0x8a>
 80161bc:	42b4      	cmp	r4, r6
 80161be:	d206      	bcs.n	80161ce <__hexnan+0x76>
 80161c0:	2d07      	cmp	r5, #7
 80161c2:	dc04      	bgt.n	80161ce <__hexnan+0x76>
 80161c4:	002a      	movs	r2, r5
 80161c6:	0031      	movs	r1, r6
 80161c8:	0020      	movs	r0, r4
 80161ca:	f7ff ff9f 	bl	801610c <L_shift>
 80161ce:	9b01      	ldr	r3, [sp, #4]
 80161d0:	2508      	movs	r5, #8
 80161d2:	429c      	cmp	r4, r3
 80161d4:	d905      	bls.n	80161e2 <__hexnan+0x8a>
 80161d6:	1f26      	subs	r6, r4, #4
 80161d8:	2500      	movs	r5, #0
 80161da:	0034      	movs	r4, r6
 80161dc:	9b03      	ldr	r3, [sp, #12]
 80161de:	6035      	str	r5, [r6, #0]
 80161e0:	9307      	str	r3, [sp, #28]
 80161e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161e4:	9305      	str	r3, [sp, #20]
 80161e6:	e7d5      	b.n	8016194 <__hexnan+0x3c>
 80161e8:	9b04      	ldr	r3, [sp, #16]
 80161ea:	2b29      	cmp	r3, #41	@ 0x29
 80161ec:	d15a      	bne.n	80162a4 <__hexnan+0x14c>
 80161ee:	9b05      	ldr	r3, [sp, #20]
 80161f0:	9a08      	ldr	r2, [sp, #32]
 80161f2:	3302      	adds	r3, #2
 80161f4:	6013      	str	r3, [r2, #0]
 80161f6:	9b03      	ldr	r3, [sp, #12]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d053      	beq.n	80162a4 <__hexnan+0x14c>
 80161fc:	42b4      	cmp	r4, r6
 80161fe:	d206      	bcs.n	801620e <__hexnan+0xb6>
 8016200:	2d07      	cmp	r5, #7
 8016202:	dc04      	bgt.n	801620e <__hexnan+0xb6>
 8016204:	002a      	movs	r2, r5
 8016206:	0031      	movs	r1, r6
 8016208:	0020      	movs	r0, r4
 801620a:	f7ff ff7f 	bl	801610c <L_shift>
 801620e:	9b01      	ldr	r3, [sp, #4]
 8016210:	429c      	cmp	r4, r3
 8016212:	d936      	bls.n	8016282 <__hexnan+0x12a>
 8016214:	001a      	movs	r2, r3
 8016216:	0023      	movs	r3, r4
 8016218:	cb02      	ldmia	r3!, {r1}
 801621a:	c202      	stmia	r2!, {r1}
 801621c:	429f      	cmp	r7, r3
 801621e:	d2fb      	bcs.n	8016218 <__hexnan+0xc0>
 8016220:	9b02      	ldr	r3, [sp, #8]
 8016222:	1c61      	adds	r1, r4, #1
 8016224:	1eda      	subs	r2, r3, #3
 8016226:	2304      	movs	r3, #4
 8016228:	4291      	cmp	r1, r2
 801622a:	d805      	bhi.n	8016238 <__hexnan+0xe0>
 801622c:	9b02      	ldr	r3, [sp, #8]
 801622e:	3b04      	subs	r3, #4
 8016230:	1b1b      	subs	r3, r3, r4
 8016232:	089b      	lsrs	r3, r3, #2
 8016234:	3301      	adds	r3, #1
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	9a01      	ldr	r2, [sp, #4]
 801623a:	18d3      	adds	r3, r2, r3
 801623c:	2200      	movs	r2, #0
 801623e:	c304      	stmia	r3!, {r2}
 8016240:	429f      	cmp	r7, r3
 8016242:	d2fc      	bcs.n	801623e <__hexnan+0xe6>
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d104      	bne.n	8016254 <__hexnan+0xfc>
 801624a:	9b01      	ldr	r3, [sp, #4]
 801624c:	429f      	cmp	r7, r3
 801624e:	d127      	bne.n	80162a0 <__hexnan+0x148>
 8016250:	2301      	movs	r3, #1
 8016252:	603b      	str	r3, [r7, #0]
 8016254:	2005      	movs	r0, #5
 8016256:	b00b      	add	sp, #44	@ 0x2c
 8016258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625a:	9b03      	ldr	r3, [sp, #12]
 801625c:	3501      	adds	r5, #1
 801625e:	3301      	adds	r3, #1
 8016260:	9303      	str	r3, [sp, #12]
 8016262:	2d08      	cmp	r5, #8
 8016264:	dd06      	ble.n	8016274 <__hexnan+0x11c>
 8016266:	9b01      	ldr	r3, [sp, #4]
 8016268:	429c      	cmp	r4, r3
 801626a:	d9ba      	bls.n	80161e2 <__hexnan+0x8a>
 801626c:	2300      	movs	r3, #0
 801626e:	2501      	movs	r5, #1
 8016270:	3c04      	subs	r4, #4
 8016272:	6023      	str	r3, [r4, #0]
 8016274:	220f      	movs	r2, #15
 8016276:	6823      	ldr	r3, [r4, #0]
 8016278:	4010      	ands	r0, r2
 801627a:	011b      	lsls	r3, r3, #4
 801627c:	4303      	orrs	r3, r0
 801627e:	6023      	str	r3, [r4, #0]
 8016280:	e7af      	b.n	80161e2 <__hexnan+0x8a>
 8016282:	9b06      	ldr	r3, [sp, #24]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d0dd      	beq.n	8016244 <__hexnan+0xec>
 8016288:	2320      	movs	r3, #32
 801628a:	9a06      	ldr	r2, [sp, #24]
 801628c:	9902      	ldr	r1, [sp, #8]
 801628e:	1a9b      	subs	r3, r3, r2
 8016290:	2201      	movs	r2, #1
 8016292:	4252      	negs	r2, r2
 8016294:	40da      	lsrs	r2, r3
 8016296:	3904      	subs	r1, #4
 8016298:	680b      	ldr	r3, [r1, #0]
 801629a:	4013      	ands	r3, r2
 801629c:	600b      	str	r3, [r1, #0]
 801629e:	e7d1      	b.n	8016244 <__hexnan+0xec>
 80162a0:	3f04      	subs	r7, #4
 80162a2:	e7cf      	b.n	8016244 <__hexnan+0xec>
 80162a4:	2004      	movs	r0, #4
 80162a6:	e7d6      	b.n	8016256 <__hexnan+0xfe>

080162a8 <__ascii_mbtowc>:
 80162a8:	b082      	sub	sp, #8
 80162aa:	2900      	cmp	r1, #0
 80162ac:	d100      	bne.n	80162b0 <__ascii_mbtowc+0x8>
 80162ae:	a901      	add	r1, sp, #4
 80162b0:	1e10      	subs	r0, r2, #0
 80162b2:	d006      	beq.n	80162c2 <__ascii_mbtowc+0x1a>
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d006      	beq.n	80162c6 <__ascii_mbtowc+0x1e>
 80162b8:	7813      	ldrb	r3, [r2, #0]
 80162ba:	600b      	str	r3, [r1, #0]
 80162bc:	7810      	ldrb	r0, [r2, #0]
 80162be:	1e43      	subs	r3, r0, #1
 80162c0:	4198      	sbcs	r0, r3
 80162c2:	b002      	add	sp, #8
 80162c4:	4770      	bx	lr
 80162c6:	2002      	movs	r0, #2
 80162c8:	4240      	negs	r0, r0
 80162ca:	e7fa      	b.n	80162c2 <__ascii_mbtowc+0x1a>

080162cc <_realloc_r>:
 80162cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162ce:	0006      	movs	r6, r0
 80162d0:	000c      	movs	r4, r1
 80162d2:	0015      	movs	r5, r2
 80162d4:	2900      	cmp	r1, #0
 80162d6:	d105      	bne.n	80162e4 <_realloc_r+0x18>
 80162d8:	0011      	movs	r1, r2
 80162da:	f7fd fdf9 	bl	8013ed0 <_malloc_r>
 80162de:	0004      	movs	r4, r0
 80162e0:	0020      	movs	r0, r4
 80162e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80162e4:	2a00      	cmp	r2, #0
 80162e6:	d103      	bne.n	80162f0 <_realloc_r+0x24>
 80162e8:	f7fd fd7c 	bl	8013de4 <_free_r>
 80162ec:	2400      	movs	r4, #0
 80162ee:	e7f7      	b.n	80162e0 <_realloc_r+0x14>
 80162f0:	f000 f83f 	bl	8016372 <_malloc_usable_size_r>
 80162f4:	0007      	movs	r7, r0
 80162f6:	4285      	cmp	r5, r0
 80162f8:	d802      	bhi.n	8016300 <_realloc_r+0x34>
 80162fa:	0843      	lsrs	r3, r0, #1
 80162fc:	42ab      	cmp	r3, r5
 80162fe:	d3ef      	bcc.n	80162e0 <_realloc_r+0x14>
 8016300:	0029      	movs	r1, r5
 8016302:	0030      	movs	r0, r6
 8016304:	f7fd fde4 	bl	8013ed0 <_malloc_r>
 8016308:	9001      	str	r0, [sp, #4]
 801630a:	2800      	cmp	r0, #0
 801630c:	d0ee      	beq.n	80162ec <_realloc_r+0x20>
 801630e:	002a      	movs	r2, r5
 8016310:	42bd      	cmp	r5, r7
 8016312:	d900      	bls.n	8016316 <_realloc_r+0x4a>
 8016314:	003a      	movs	r2, r7
 8016316:	0021      	movs	r1, r4
 8016318:	9801      	ldr	r0, [sp, #4]
 801631a:	f7fc fed7 	bl	80130cc <memcpy>
 801631e:	0021      	movs	r1, r4
 8016320:	0030      	movs	r0, r6
 8016322:	f7fd fd5f 	bl	8013de4 <_free_r>
 8016326:	9c01      	ldr	r4, [sp, #4]
 8016328:	e7da      	b.n	80162e0 <_realloc_r+0x14>

0801632a <__ascii_wctomb>:
 801632a:	0003      	movs	r3, r0
 801632c:	1e08      	subs	r0, r1, #0
 801632e:	d005      	beq.n	801633c <__ascii_wctomb+0x12>
 8016330:	2aff      	cmp	r2, #255	@ 0xff
 8016332:	d904      	bls.n	801633e <__ascii_wctomb+0x14>
 8016334:	228a      	movs	r2, #138	@ 0x8a
 8016336:	2001      	movs	r0, #1
 8016338:	601a      	str	r2, [r3, #0]
 801633a:	4240      	negs	r0, r0
 801633c:	4770      	bx	lr
 801633e:	2001      	movs	r0, #1
 8016340:	700a      	strb	r2, [r1, #0]
 8016342:	e7fb      	b.n	801633c <__ascii_wctomb+0x12>

08016344 <fiprintf>:
 8016344:	b40e      	push	{r1, r2, r3}
 8016346:	b517      	push	{r0, r1, r2, r4, lr}
 8016348:	4c05      	ldr	r4, [pc, #20]	@ (8016360 <fiprintf+0x1c>)
 801634a:	ab05      	add	r3, sp, #20
 801634c:	cb04      	ldmia	r3!, {r2}
 801634e:	0001      	movs	r1, r0
 8016350:	6820      	ldr	r0, [r4, #0]
 8016352:	9301      	str	r3, [sp, #4]
 8016354:	f000 f83c 	bl	80163d0 <_vfiprintf_r>
 8016358:	bc1e      	pop	{r1, r2, r3, r4}
 801635a:	bc08      	pop	{r3}
 801635c:	b003      	add	sp, #12
 801635e:	4718      	bx	r3
 8016360:	20000098 	.word	0x20000098

08016364 <abort>:
 8016364:	2006      	movs	r0, #6
 8016366:	b510      	push	{r4, lr}
 8016368:	f000 fa18 	bl	801679c <raise>
 801636c:	2001      	movs	r0, #1
 801636e:	f7f1 f905 	bl	800757c <_exit>

08016372 <_malloc_usable_size_r>:
 8016372:	1f0b      	subs	r3, r1, #4
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	1f18      	subs	r0, r3, #4
 8016378:	2b00      	cmp	r3, #0
 801637a:	da01      	bge.n	8016380 <_malloc_usable_size_r+0xe>
 801637c:	580b      	ldr	r3, [r1, r0]
 801637e:	18c0      	adds	r0, r0, r3
 8016380:	4770      	bx	lr

08016382 <__sfputc_r>:
 8016382:	6893      	ldr	r3, [r2, #8]
 8016384:	b510      	push	{r4, lr}
 8016386:	3b01      	subs	r3, #1
 8016388:	6093      	str	r3, [r2, #8]
 801638a:	2b00      	cmp	r3, #0
 801638c:	da04      	bge.n	8016398 <__sfputc_r+0x16>
 801638e:	6994      	ldr	r4, [r2, #24]
 8016390:	42a3      	cmp	r3, r4
 8016392:	db07      	blt.n	80163a4 <__sfputc_r+0x22>
 8016394:	290a      	cmp	r1, #10
 8016396:	d005      	beq.n	80163a4 <__sfputc_r+0x22>
 8016398:	6813      	ldr	r3, [r2, #0]
 801639a:	1c58      	adds	r0, r3, #1
 801639c:	6010      	str	r0, [r2, #0]
 801639e:	7019      	strb	r1, [r3, #0]
 80163a0:	0008      	movs	r0, r1
 80163a2:	bd10      	pop	{r4, pc}
 80163a4:	f000 f930 	bl	8016608 <__swbuf_r>
 80163a8:	0001      	movs	r1, r0
 80163aa:	e7f9      	b.n	80163a0 <__sfputc_r+0x1e>

080163ac <__sfputs_r>:
 80163ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ae:	0006      	movs	r6, r0
 80163b0:	000f      	movs	r7, r1
 80163b2:	0014      	movs	r4, r2
 80163b4:	18d5      	adds	r5, r2, r3
 80163b6:	42ac      	cmp	r4, r5
 80163b8:	d101      	bne.n	80163be <__sfputs_r+0x12>
 80163ba:	2000      	movs	r0, #0
 80163bc:	e007      	b.n	80163ce <__sfputs_r+0x22>
 80163be:	7821      	ldrb	r1, [r4, #0]
 80163c0:	003a      	movs	r2, r7
 80163c2:	0030      	movs	r0, r6
 80163c4:	f7ff ffdd 	bl	8016382 <__sfputc_r>
 80163c8:	3401      	adds	r4, #1
 80163ca:	1c43      	adds	r3, r0, #1
 80163cc:	d1f3      	bne.n	80163b6 <__sfputs_r+0xa>
 80163ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080163d0 <_vfiprintf_r>:
 80163d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163d2:	b0a1      	sub	sp, #132	@ 0x84
 80163d4:	000f      	movs	r7, r1
 80163d6:	0015      	movs	r5, r2
 80163d8:	001e      	movs	r6, r3
 80163da:	9003      	str	r0, [sp, #12]
 80163dc:	2800      	cmp	r0, #0
 80163de:	d004      	beq.n	80163ea <_vfiprintf_r+0x1a>
 80163e0:	6a03      	ldr	r3, [r0, #32]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d101      	bne.n	80163ea <_vfiprintf_r+0x1a>
 80163e6:	f7fc fc73 	bl	8012cd0 <__sinit>
 80163ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80163ec:	07db      	lsls	r3, r3, #31
 80163ee:	d405      	bmi.n	80163fc <_vfiprintf_r+0x2c>
 80163f0:	89bb      	ldrh	r3, [r7, #12]
 80163f2:	059b      	lsls	r3, r3, #22
 80163f4:	d402      	bmi.n	80163fc <_vfiprintf_r+0x2c>
 80163f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80163f8:	f7fc fe5b 	bl	80130b2 <__retarget_lock_acquire_recursive>
 80163fc:	89bb      	ldrh	r3, [r7, #12]
 80163fe:	071b      	lsls	r3, r3, #28
 8016400:	d502      	bpl.n	8016408 <_vfiprintf_r+0x38>
 8016402:	693b      	ldr	r3, [r7, #16]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d113      	bne.n	8016430 <_vfiprintf_r+0x60>
 8016408:	0039      	movs	r1, r7
 801640a:	9803      	ldr	r0, [sp, #12]
 801640c:	f000 f93e 	bl	801668c <__swsetup_r>
 8016410:	2800      	cmp	r0, #0
 8016412:	d00d      	beq.n	8016430 <_vfiprintf_r+0x60>
 8016414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016416:	07db      	lsls	r3, r3, #31
 8016418:	d503      	bpl.n	8016422 <_vfiprintf_r+0x52>
 801641a:	2001      	movs	r0, #1
 801641c:	4240      	negs	r0, r0
 801641e:	b021      	add	sp, #132	@ 0x84
 8016420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016422:	89bb      	ldrh	r3, [r7, #12]
 8016424:	059b      	lsls	r3, r3, #22
 8016426:	d4f8      	bmi.n	801641a <_vfiprintf_r+0x4a>
 8016428:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801642a:	f7fc fe43 	bl	80130b4 <__retarget_lock_release_recursive>
 801642e:	e7f4      	b.n	801641a <_vfiprintf_r+0x4a>
 8016430:	2300      	movs	r3, #0
 8016432:	ac08      	add	r4, sp, #32
 8016434:	6163      	str	r3, [r4, #20]
 8016436:	3320      	adds	r3, #32
 8016438:	7663      	strb	r3, [r4, #25]
 801643a:	3310      	adds	r3, #16
 801643c:	76a3      	strb	r3, [r4, #26]
 801643e:	9607      	str	r6, [sp, #28]
 8016440:	002e      	movs	r6, r5
 8016442:	7833      	ldrb	r3, [r6, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d001      	beq.n	801644c <_vfiprintf_r+0x7c>
 8016448:	2b25      	cmp	r3, #37	@ 0x25
 801644a:	d148      	bne.n	80164de <_vfiprintf_r+0x10e>
 801644c:	1b73      	subs	r3, r6, r5
 801644e:	9305      	str	r3, [sp, #20]
 8016450:	42ae      	cmp	r6, r5
 8016452:	d00b      	beq.n	801646c <_vfiprintf_r+0x9c>
 8016454:	002a      	movs	r2, r5
 8016456:	0039      	movs	r1, r7
 8016458:	9803      	ldr	r0, [sp, #12]
 801645a:	f7ff ffa7 	bl	80163ac <__sfputs_r>
 801645e:	3001      	adds	r0, #1
 8016460:	d100      	bne.n	8016464 <_vfiprintf_r+0x94>
 8016462:	e0ae      	b.n	80165c2 <_vfiprintf_r+0x1f2>
 8016464:	6963      	ldr	r3, [r4, #20]
 8016466:	9a05      	ldr	r2, [sp, #20]
 8016468:	189b      	adds	r3, r3, r2
 801646a:	6163      	str	r3, [r4, #20]
 801646c:	7833      	ldrb	r3, [r6, #0]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d100      	bne.n	8016474 <_vfiprintf_r+0xa4>
 8016472:	e0a6      	b.n	80165c2 <_vfiprintf_r+0x1f2>
 8016474:	2201      	movs	r2, #1
 8016476:	2300      	movs	r3, #0
 8016478:	4252      	negs	r2, r2
 801647a:	6062      	str	r2, [r4, #4]
 801647c:	a904      	add	r1, sp, #16
 801647e:	3254      	adds	r2, #84	@ 0x54
 8016480:	1852      	adds	r2, r2, r1
 8016482:	1c75      	adds	r5, r6, #1
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	60e3      	str	r3, [r4, #12]
 8016488:	60a3      	str	r3, [r4, #8]
 801648a:	7013      	strb	r3, [r2, #0]
 801648c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801648e:	4b59      	ldr	r3, [pc, #356]	@ (80165f4 <_vfiprintf_r+0x224>)
 8016490:	2205      	movs	r2, #5
 8016492:	0018      	movs	r0, r3
 8016494:	7829      	ldrb	r1, [r5, #0]
 8016496:	9305      	str	r3, [sp, #20]
 8016498:	f7fc fe0d 	bl	80130b6 <memchr>
 801649c:	1c6e      	adds	r6, r5, #1
 801649e:	2800      	cmp	r0, #0
 80164a0:	d11f      	bne.n	80164e2 <_vfiprintf_r+0x112>
 80164a2:	6822      	ldr	r2, [r4, #0]
 80164a4:	06d3      	lsls	r3, r2, #27
 80164a6:	d504      	bpl.n	80164b2 <_vfiprintf_r+0xe2>
 80164a8:	2353      	movs	r3, #83	@ 0x53
 80164aa:	a904      	add	r1, sp, #16
 80164ac:	185b      	adds	r3, r3, r1
 80164ae:	2120      	movs	r1, #32
 80164b0:	7019      	strb	r1, [r3, #0]
 80164b2:	0713      	lsls	r3, r2, #28
 80164b4:	d504      	bpl.n	80164c0 <_vfiprintf_r+0xf0>
 80164b6:	2353      	movs	r3, #83	@ 0x53
 80164b8:	a904      	add	r1, sp, #16
 80164ba:	185b      	adds	r3, r3, r1
 80164bc:	212b      	movs	r1, #43	@ 0x2b
 80164be:	7019      	strb	r1, [r3, #0]
 80164c0:	782b      	ldrb	r3, [r5, #0]
 80164c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80164c4:	d016      	beq.n	80164f4 <_vfiprintf_r+0x124>
 80164c6:	002e      	movs	r6, r5
 80164c8:	2100      	movs	r1, #0
 80164ca:	200a      	movs	r0, #10
 80164cc:	68e3      	ldr	r3, [r4, #12]
 80164ce:	7832      	ldrb	r2, [r6, #0]
 80164d0:	1c75      	adds	r5, r6, #1
 80164d2:	3a30      	subs	r2, #48	@ 0x30
 80164d4:	2a09      	cmp	r2, #9
 80164d6:	d950      	bls.n	801657a <_vfiprintf_r+0x1aa>
 80164d8:	2900      	cmp	r1, #0
 80164da:	d111      	bne.n	8016500 <_vfiprintf_r+0x130>
 80164dc:	e017      	b.n	801650e <_vfiprintf_r+0x13e>
 80164de:	3601      	adds	r6, #1
 80164e0:	e7af      	b.n	8016442 <_vfiprintf_r+0x72>
 80164e2:	9b05      	ldr	r3, [sp, #20]
 80164e4:	6822      	ldr	r2, [r4, #0]
 80164e6:	1ac0      	subs	r0, r0, r3
 80164e8:	2301      	movs	r3, #1
 80164ea:	4083      	lsls	r3, r0
 80164ec:	4313      	orrs	r3, r2
 80164ee:	0035      	movs	r5, r6
 80164f0:	6023      	str	r3, [r4, #0]
 80164f2:	e7cc      	b.n	801648e <_vfiprintf_r+0xbe>
 80164f4:	9b07      	ldr	r3, [sp, #28]
 80164f6:	1d19      	adds	r1, r3, #4
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	9107      	str	r1, [sp, #28]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	db01      	blt.n	8016504 <_vfiprintf_r+0x134>
 8016500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016502:	e004      	b.n	801650e <_vfiprintf_r+0x13e>
 8016504:	425b      	negs	r3, r3
 8016506:	60e3      	str	r3, [r4, #12]
 8016508:	2302      	movs	r3, #2
 801650a:	4313      	orrs	r3, r2
 801650c:	6023      	str	r3, [r4, #0]
 801650e:	7833      	ldrb	r3, [r6, #0]
 8016510:	2b2e      	cmp	r3, #46	@ 0x2e
 8016512:	d10c      	bne.n	801652e <_vfiprintf_r+0x15e>
 8016514:	7873      	ldrb	r3, [r6, #1]
 8016516:	2b2a      	cmp	r3, #42	@ 0x2a
 8016518:	d134      	bne.n	8016584 <_vfiprintf_r+0x1b4>
 801651a:	9b07      	ldr	r3, [sp, #28]
 801651c:	3602      	adds	r6, #2
 801651e:	1d1a      	adds	r2, r3, #4
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	9207      	str	r2, [sp, #28]
 8016524:	2b00      	cmp	r3, #0
 8016526:	da01      	bge.n	801652c <_vfiprintf_r+0x15c>
 8016528:	2301      	movs	r3, #1
 801652a:	425b      	negs	r3, r3
 801652c:	9309      	str	r3, [sp, #36]	@ 0x24
 801652e:	4d32      	ldr	r5, [pc, #200]	@ (80165f8 <_vfiprintf_r+0x228>)
 8016530:	2203      	movs	r2, #3
 8016532:	0028      	movs	r0, r5
 8016534:	7831      	ldrb	r1, [r6, #0]
 8016536:	f7fc fdbe 	bl	80130b6 <memchr>
 801653a:	2800      	cmp	r0, #0
 801653c:	d006      	beq.n	801654c <_vfiprintf_r+0x17c>
 801653e:	2340      	movs	r3, #64	@ 0x40
 8016540:	1b40      	subs	r0, r0, r5
 8016542:	4083      	lsls	r3, r0
 8016544:	6822      	ldr	r2, [r4, #0]
 8016546:	3601      	adds	r6, #1
 8016548:	4313      	orrs	r3, r2
 801654a:	6023      	str	r3, [r4, #0]
 801654c:	7831      	ldrb	r1, [r6, #0]
 801654e:	2206      	movs	r2, #6
 8016550:	482a      	ldr	r0, [pc, #168]	@ (80165fc <_vfiprintf_r+0x22c>)
 8016552:	1c75      	adds	r5, r6, #1
 8016554:	7621      	strb	r1, [r4, #24]
 8016556:	f7fc fdae 	bl	80130b6 <memchr>
 801655a:	2800      	cmp	r0, #0
 801655c:	d040      	beq.n	80165e0 <_vfiprintf_r+0x210>
 801655e:	4b28      	ldr	r3, [pc, #160]	@ (8016600 <_vfiprintf_r+0x230>)
 8016560:	2b00      	cmp	r3, #0
 8016562:	d122      	bne.n	80165aa <_vfiprintf_r+0x1da>
 8016564:	2207      	movs	r2, #7
 8016566:	9b07      	ldr	r3, [sp, #28]
 8016568:	3307      	adds	r3, #7
 801656a:	4393      	bics	r3, r2
 801656c:	3308      	adds	r3, #8
 801656e:	9307      	str	r3, [sp, #28]
 8016570:	6963      	ldr	r3, [r4, #20]
 8016572:	9a04      	ldr	r2, [sp, #16]
 8016574:	189b      	adds	r3, r3, r2
 8016576:	6163      	str	r3, [r4, #20]
 8016578:	e762      	b.n	8016440 <_vfiprintf_r+0x70>
 801657a:	4343      	muls	r3, r0
 801657c:	002e      	movs	r6, r5
 801657e:	2101      	movs	r1, #1
 8016580:	189b      	adds	r3, r3, r2
 8016582:	e7a4      	b.n	80164ce <_vfiprintf_r+0xfe>
 8016584:	2300      	movs	r3, #0
 8016586:	200a      	movs	r0, #10
 8016588:	0019      	movs	r1, r3
 801658a:	3601      	adds	r6, #1
 801658c:	6063      	str	r3, [r4, #4]
 801658e:	7832      	ldrb	r2, [r6, #0]
 8016590:	1c75      	adds	r5, r6, #1
 8016592:	3a30      	subs	r2, #48	@ 0x30
 8016594:	2a09      	cmp	r2, #9
 8016596:	d903      	bls.n	80165a0 <_vfiprintf_r+0x1d0>
 8016598:	2b00      	cmp	r3, #0
 801659a:	d0c8      	beq.n	801652e <_vfiprintf_r+0x15e>
 801659c:	9109      	str	r1, [sp, #36]	@ 0x24
 801659e:	e7c6      	b.n	801652e <_vfiprintf_r+0x15e>
 80165a0:	4341      	muls	r1, r0
 80165a2:	002e      	movs	r6, r5
 80165a4:	2301      	movs	r3, #1
 80165a6:	1889      	adds	r1, r1, r2
 80165a8:	e7f1      	b.n	801658e <_vfiprintf_r+0x1be>
 80165aa:	aa07      	add	r2, sp, #28
 80165ac:	9200      	str	r2, [sp, #0]
 80165ae:	0021      	movs	r1, r4
 80165b0:	003a      	movs	r2, r7
 80165b2:	4b14      	ldr	r3, [pc, #80]	@ (8016604 <_vfiprintf_r+0x234>)
 80165b4:	9803      	ldr	r0, [sp, #12]
 80165b6:	f7fb fd31 	bl	801201c <_printf_float>
 80165ba:	9004      	str	r0, [sp, #16]
 80165bc:	9b04      	ldr	r3, [sp, #16]
 80165be:	3301      	adds	r3, #1
 80165c0:	d1d6      	bne.n	8016570 <_vfiprintf_r+0x1a0>
 80165c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80165c4:	07db      	lsls	r3, r3, #31
 80165c6:	d405      	bmi.n	80165d4 <_vfiprintf_r+0x204>
 80165c8:	89bb      	ldrh	r3, [r7, #12]
 80165ca:	059b      	lsls	r3, r3, #22
 80165cc:	d402      	bmi.n	80165d4 <_vfiprintf_r+0x204>
 80165ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80165d0:	f7fc fd70 	bl	80130b4 <__retarget_lock_release_recursive>
 80165d4:	89bb      	ldrh	r3, [r7, #12]
 80165d6:	065b      	lsls	r3, r3, #25
 80165d8:	d500      	bpl.n	80165dc <_vfiprintf_r+0x20c>
 80165da:	e71e      	b.n	801641a <_vfiprintf_r+0x4a>
 80165dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80165de:	e71e      	b.n	801641e <_vfiprintf_r+0x4e>
 80165e0:	aa07      	add	r2, sp, #28
 80165e2:	9200      	str	r2, [sp, #0]
 80165e4:	0021      	movs	r1, r4
 80165e6:	003a      	movs	r2, r7
 80165e8:	4b06      	ldr	r3, [pc, #24]	@ (8016604 <_vfiprintf_r+0x234>)
 80165ea:	9803      	ldr	r0, [sp, #12]
 80165ec:	f7fb ffc4 	bl	8012578 <_printf_i>
 80165f0:	e7e3      	b.n	80165ba <_vfiprintf_r+0x1ea>
 80165f2:	46c0      	nop			@ (mov r8, r8)
 80165f4:	080174b9 	.word	0x080174b9
 80165f8:	080174bf 	.word	0x080174bf
 80165fc:	080174c3 	.word	0x080174c3
 8016600:	0801201d 	.word	0x0801201d
 8016604:	080163ad 	.word	0x080163ad

08016608 <__swbuf_r>:
 8016608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801660a:	0006      	movs	r6, r0
 801660c:	000d      	movs	r5, r1
 801660e:	0014      	movs	r4, r2
 8016610:	2800      	cmp	r0, #0
 8016612:	d004      	beq.n	801661e <__swbuf_r+0x16>
 8016614:	6a03      	ldr	r3, [r0, #32]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d101      	bne.n	801661e <__swbuf_r+0x16>
 801661a:	f7fc fb59 	bl	8012cd0 <__sinit>
 801661e:	69a3      	ldr	r3, [r4, #24]
 8016620:	60a3      	str	r3, [r4, #8]
 8016622:	89a3      	ldrh	r3, [r4, #12]
 8016624:	071b      	lsls	r3, r3, #28
 8016626:	d502      	bpl.n	801662e <__swbuf_r+0x26>
 8016628:	6923      	ldr	r3, [r4, #16]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d109      	bne.n	8016642 <__swbuf_r+0x3a>
 801662e:	0021      	movs	r1, r4
 8016630:	0030      	movs	r0, r6
 8016632:	f000 f82b 	bl	801668c <__swsetup_r>
 8016636:	2800      	cmp	r0, #0
 8016638:	d003      	beq.n	8016642 <__swbuf_r+0x3a>
 801663a:	2501      	movs	r5, #1
 801663c:	426d      	negs	r5, r5
 801663e:	0028      	movs	r0, r5
 8016640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016642:	6923      	ldr	r3, [r4, #16]
 8016644:	6820      	ldr	r0, [r4, #0]
 8016646:	b2ef      	uxtb	r7, r5
 8016648:	1ac0      	subs	r0, r0, r3
 801664a:	6963      	ldr	r3, [r4, #20]
 801664c:	b2ed      	uxtb	r5, r5
 801664e:	4283      	cmp	r3, r0
 8016650:	dc05      	bgt.n	801665e <__swbuf_r+0x56>
 8016652:	0021      	movs	r1, r4
 8016654:	0030      	movs	r0, r6
 8016656:	f7ff fa19 	bl	8015a8c <_fflush_r>
 801665a:	2800      	cmp	r0, #0
 801665c:	d1ed      	bne.n	801663a <__swbuf_r+0x32>
 801665e:	68a3      	ldr	r3, [r4, #8]
 8016660:	3001      	adds	r0, #1
 8016662:	3b01      	subs	r3, #1
 8016664:	60a3      	str	r3, [r4, #8]
 8016666:	6823      	ldr	r3, [r4, #0]
 8016668:	1c5a      	adds	r2, r3, #1
 801666a:	6022      	str	r2, [r4, #0]
 801666c:	701f      	strb	r7, [r3, #0]
 801666e:	6963      	ldr	r3, [r4, #20]
 8016670:	4283      	cmp	r3, r0
 8016672:	d004      	beq.n	801667e <__swbuf_r+0x76>
 8016674:	89a3      	ldrh	r3, [r4, #12]
 8016676:	07db      	lsls	r3, r3, #31
 8016678:	d5e1      	bpl.n	801663e <__swbuf_r+0x36>
 801667a:	2d0a      	cmp	r5, #10
 801667c:	d1df      	bne.n	801663e <__swbuf_r+0x36>
 801667e:	0021      	movs	r1, r4
 8016680:	0030      	movs	r0, r6
 8016682:	f7ff fa03 	bl	8015a8c <_fflush_r>
 8016686:	2800      	cmp	r0, #0
 8016688:	d0d9      	beq.n	801663e <__swbuf_r+0x36>
 801668a:	e7d6      	b.n	801663a <__swbuf_r+0x32>

0801668c <__swsetup_r>:
 801668c:	4b2d      	ldr	r3, [pc, #180]	@ (8016744 <__swsetup_r+0xb8>)
 801668e:	b570      	push	{r4, r5, r6, lr}
 8016690:	0005      	movs	r5, r0
 8016692:	6818      	ldr	r0, [r3, #0]
 8016694:	000c      	movs	r4, r1
 8016696:	2800      	cmp	r0, #0
 8016698:	d004      	beq.n	80166a4 <__swsetup_r+0x18>
 801669a:	6a03      	ldr	r3, [r0, #32]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d101      	bne.n	80166a4 <__swsetup_r+0x18>
 80166a0:	f7fc fb16 	bl	8012cd0 <__sinit>
 80166a4:	230c      	movs	r3, #12
 80166a6:	5ee2      	ldrsh	r2, [r4, r3]
 80166a8:	0713      	lsls	r3, r2, #28
 80166aa:	d423      	bmi.n	80166f4 <__swsetup_r+0x68>
 80166ac:	06d3      	lsls	r3, r2, #27
 80166ae:	d407      	bmi.n	80166c0 <__swsetup_r+0x34>
 80166b0:	2309      	movs	r3, #9
 80166b2:	602b      	str	r3, [r5, #0]
 80166b4:	2340      	movs	r3, #64	@ 0x40
 80166b6:	2001      	movs	r0, #1
 80166b8:	4313      	orrs	r3, r2
 80166ba:	81a3      	strh	r3, [r4, #12]
 80166bc:	4240      	negs	r0, r0
 80166be:	e03a      	b.n	8016736 <__swsetup_r+0xaa>
 80166c0:	0752      	lsls	r2, r2, #29
 80166c2:	d513      	bpl.n	80166ec <__swsetup_r+0x60>
 80166c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166c6:	2900      	cmp	r1, #0
 80166c8:	d008      	beq.n	80166dc <__swsetup_r+0x50>
 80166ca:	0023      	movs	r3, r4
 80166cc:	3344      	adds	r3, #68	@ 0x44
 80166ce:	4299      	cmp	r1, r3
 80166d0:	d002      	beq.n	80166d8 <__swsetup_r+0x4c>
 80166d2:	0028      	movs	r0, r5
 80166d4:	f7fd fb86 	bl	8013de4 <_free_r>
 80166d8:	2300      	movs	r3, #0
 80166da:	6363      	str	r3, [r4, #52]	@ 0x34
 80166dc:	2224      	movs	r2, #36	@ 0x24
 80166de:	89a3      	ldrh	r3, [r4, #12]
 80166e0:	4393      	bics	r3, r2
 80166e2:	81a3      	strh	r3, [r4, #12]
 80166e4:	2300      	movs	r3, #0
 80166e6:	6063      	str	r3, [r4, #4]
 80166e8:	6923      	ldr	r3, [r4, #16]
 80166ea:	6023      	str	r3, [r4, #0]
 80166ec:	2308      	movs	r3, #8
 80166ee:	89a2      	ldrh	r2, [r4, #12]
 80166f0:	4313      	orrs	r3, r2
 80166f2:	81a3      	strh	r3, [r4, #12]
 80166f4:	6923      	ldr	r3, [r4, #16]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d10b      	bne.n	8016712 <__swsetup_r+0x86>
 80166fa:	21a0      	movs	r1, #160	@ 0xa0
 80166fc:	2280      	movs	r2, #128	@ 0x80
 80166fe:	89a3      	ldrh	r3, [r4, #12]
 8016700:	0089      	lsls	r1, r1, #2
 8016702:	0092      	lsls	r2, r2, #2
 8016704:	400b      	ands	r3, r1
 8016706:	4293      	cmp	r3, r2
 8016708:	d003      	beq.n	8016712 <__swsetup_r+0x86>
 801670a:	0021      	movs	r1, r4
 801670c:	0028      	movs	r0, r5
 801670e:	f000 f88f 	bl	8016830 <__smakebuf_r>
 8016712:	230c      	movs	r3, #12
 8016714:	5ee2      	ldrsh	r2, [r4, r3]
 8016716:	2101      	movs	r1, #1
 8016718:	0013      	movs	r3, r2
 801671a:	400b      	ands	r3, r1
 801671c:	420a      	tst	r2, r1
 801671e:	d00b      	beq.n	8016738 <__swsetup_r+0xac>
 8016720:	2300      	movs	r3, #0
 8016722:	60a3      	str	r3, [r4, #8]
 8016724:	6963      	ldr	r3, [r4, #20]
 8016726:	425b      	negs	r3, r3
 8016728:	61a3      	str	r3, [r4, #24]
 801672a:	2000      	movs	r0, #0
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	4283      	cmp	r3, r0
 8016730:	d101      	bne.n	8016736 <__swsetup_r+0xaa>
 8016732:	0613      	lsls	r3, r2, #24
 8016734:	d4be      	bmi.n	80166b4 <__swsetup_r+0x28>
 8016736:	bd70      	pop	{r4, r5, r6, pc}
 8016738:	0791      	lsls	r1, r2, #30
 801673a:	d400      	bmi.n	801673e <__swsetup_r+0xb2>
 801673c:	6963      	ldr	r3, [r4, #20]
 801673e:	60a3      	str	r3, [r4, #8]
 8016740:	e7f3      	b.n	801672a <__swsetup_r+0x9e>
 8016742:	46c0      	nop			@ (mov r8, r8)
 8016744:	20000098 	.word	0x20000098

08016748 <_raise_r>:
 8016748:	b570      	push	{r4, r5, r6, lr}
 801674a:	0004      	movs	r4, r0
 801674c:	000d      	movs	r5, r1
 801674e:	291f      	cmp	r1, #31
 8016750:	d904      	bls.n	801675c <_raise_r+0x14>
 8016752:	2316      	movs	r3, #22
 8016754:	6003      	str	r3, [r0, #0]
 8016756:	2001      	movs	r0, #1
 8016758:	4240      	negs	r0, r0
 801675a:	bd70      	pop	{r4, r5, r6, pc}
 801675c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801675e:	2b00      	cmp	r3, #0
 8016760:	d004      	beq.n	801676c <_raise_r+0x24>
 8016762:	008a      	lsls	r2, r1, #2
 8016764:	189b      	adds	r3, r3, r2
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	2a00      	cmp	r2, #0
 801676a:	d108      	bne.n	801677e <_raise_r+0x36>
 801676c:	0020      	movs	r0, r4
 801676e:	f000 f831 	bl	80167d4 <_getpid_r>
 8016772:	002a      	movs	r2, r5
 8016774:	0001      	movs	r1, r0
 8016776:	0020      	movs	r0, r4
 8016778:	f000 f81a 	bl	80167b0 <_kill_r>
 801677c:	e7ed      	b.n	801675a <_raise_r+0x12>
 801677e:	2a01      	cmp	r2, #1
 8016780:	d009      	beq.n	8016796 <_raise_r+0x4e>
 8016782:	1c51      	adds	r1, r2, #1
 8016784:	d103      	bne.n	801678e <_raise_r+0x46>
 8016786:	2316      	movs	r3, #22
 8016788:	6003      	str	r3, [r0, #0]
 801678a:	2001      	movs	r0, #1
 801678c:	e7e5      	b.n	801675a <_raise_r+0x12>
 801678e:	2100      	movs	r1, #0
 8016790:	0028      	movs	r0, r5
 8016792:	6019      	str	r1, [r3, #0]
 8016794:	4790      	blx	r2
 8016796:	2000      	movs	r0, #0
 8016798:	e7df      	b.n	801675a <_raise_r+0x12>
	...

0801679c <raise>:
 801679c:	b510      	push	{r4, lr}
 801679e:	4b03      	ldr	r3, [pc, #12]	@ (80167ac <raise+0x10>)
 80167a0:	0001      	movs	r1, r0
 80167a2:	6818      	ldr	r0, [r3, #0]
 80167a4:	f7ff ffd0 	bl	8016748 <_raise_r>
 80167a8:	bd10      	pop	{r4, pc}
 80167aa:	46c0      	nop			@ (mov r8, r8)
 80167ac:	20000098 	.word	0x20000098

080167b0 <_kill_r>:
 80167b0:	2300      	movs	r3, #0
 80167b2:	b570      	push	{r4, r5, r6, lr}
 80167b4:	4d06      	ldr	r5, [pc, #24]	@ (80167d0 <_kill_r+0x20>)
 80167b6:	0004      	movs	r4, r0
 80167b8:	0008      	movs	r0, r1
 80167ba:	0011      	movs	r1, r2
 80167bc:	602b      	str	r3, [r5, #0]
 80167be:	f7f0 fecd 	bl	800755c <_kill>
 80167c2:	1c43      	adds	r3, r0, #1
 80167c4:	d103      	bne.n	80167ce <_kill_r+0x1e>
 80167c6:	682b      	ldr	r3, [r5, #0]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d000      	beq.n	80167ce <_kill_r+0x1e>
 80167cc:	6023      	str	r3, [r4, #0]
 80167ce:	bd70      	pop	{r4, r5, r6, pc}
 80167d0:	20007284 	.word	0x20007284

080167d4 <_getpid_r>:
 80167d4:	b510      	push	{r4, lr}
 80167d6:	f7f0 febb 	bl	8007550 <_getpid>
 80167da:	bd10      	pop	{r4, pc}

080167dc <__swhatbuf_r>:
 80167dc:	b570      	push	{r4, r5, r6, lr}
 80167de:	000e      	movs	r6, r1
 80167e0:	001d      	movs	r5, r3
 80167e2:	230e      	movs	r3, #14
 80167e4:	5ec9      	ldrsh	r1, [r1, r3]
 80167e6:	0014      	movs	r4, r2
 80167e8:	b096      	sub	sp, #88	@ 0x58
 80167ea:	2900      	cmp	r1, #0
 80167ec:	da0c      	bge.n	8016808 <__swhatbuf_r+0x2c>
 80167ee:	89b2      	ldrh	r2, [r6, #12]
 80167f0:	2380      	movs	r3, #128	@ 0x80
 80167f2:	0011      	movs	r1, r2
 80167f4:	4019      	ands	r1, r3
 80167f6:	421a      	tst	r2, r3
 80167f8:	d114      	bne.n	8016824 <__swhatbuf_r+0x48>
 80167fa:	2380      	movs	r3, #128	@ 0x80
 80167fc:	00db      	lsls	r3, r3, #3
 80167fe:	2000      	movs	r0, #0
 8016800:	6029      	str	r1, [r5, #0]
 8016802:	6023      	str	r3, [r4, #0]
 8016804:	b016      	add	sp, #88	@ 0x58
 8016806:	bd70      	pop	{r4, r5, r6, pc}
 8016808:	466a      	mov	r2, sp
 801680a:	f000 f853 	bl	80168b4 <_fstat_r>
 801680e:	2800      	cmp	r0, #0
 8016810:	dbed      	blt.n	80167ee <__swhatbuf_r+0x12>
 8016812:	23f0      	movs	r3, #240	@ 0xf0
 8016814:	9901      	ldr	r1, [sp, #4]
 8016816:	021b      	lsls	r3, r3, #8
 8016818:	4019      	ands	r1, r3
 801681a:	4b04      	ldr	r3, [pc, #16]	@ (801682c <__swhatbuf_r+0x50>)
 801681c:	18c9      	adds	r1, r1, r3
 801681e:	424b      	negs	r3, r1
 8016820:	4159      	adcs	r1, r3
 8016822:	e7ea      	b.n	80167fa <__swhatbuf_r+0x1e>
 8016824:	2100      	movs	r1, #0
 8016826:	2340      	movs	r3, #64	@ 0x40
 8016828:	e7e9      	b.n	80167fe <__swhatbuf_r+0x22>
 801682a:	46c0      	nop			@ (mov r8, r8)
 801682c:	ffffe000 	.word	0xffffe000

08016830 <__smakebuf_r>:
 8016830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016832:	2602      	movs	r6, #2
 8016834:	898b      	ldrh	r3, [r1, #12]
 8016836:	0005      	movs	r5, r0
 8016838:	000c      	movs	r4, r1
 801683a:	b085      	sub	sp, #20
 801683c:	4233      	tst	r3, r6
 801683e:	d007      	beq.n	8016850 <__smakebuf_r+0x20>
 8016840:	0023      	movs	r3, r4
 8016842:	3347      	adds	r3, #71	@ 0x47
 8016844:	6023      	str	r3, [r4, #0]
 8016846:	6123      	str	r3, [r4, #16]
 8016848:	2301      	movs	r3, #1
 801684a:	6163      	str	r3, [r4, #20]
 801684c:	b005      	add	sp, #20
 801684e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016850:	ab03      	add	r3, sp, #12
 8016852:	aa02      	add	r2, sp, #8
 8016854:	f7ff ffc2 	bl	80167dc <__swhatbuf_r>
 8016858:	9f02      	ldr	r7, [sp, #8]
 801685a:	9001      	str	r0, [sp, #4]
 801685c:	0039      	movs	r1, r7
 801685e:	0028      	movs	r0, r5
 8016860:	f7fd fb36 	bl	8013ed0 <_malloc_r>
 8016864:	2800      	cmp	r0, #0
 8016866:	d108      	bne.n	801687a <__smakebuf_r+0x4a>
 8016868:	220c      	movs	r2, #12
 801686a:	5ea3      	ldrsh	r3, [r4, r2]
 801686c:	059a      	lsls	r2, r3, #22
 801686e:	d4ed      	bmi.n	801684c <__smakebuf_r+0x1c>
 8016870:	2203      	movs	r2, #3
 8016872:	4393      	bics	r3, r2
 8016874:	431e      	orrs	r6, r3
 8016876:	81a6      	strh	r6, [r4, #12]
 8016878:	e7e2      	b.n	8016840 <__smakebuf_r+0x10>
 801687a:	2380      	movs	r3, #128	@ 0x80
 801687c:	89a2      	ldrh	r2, [r4, #12]
 801687e:	6020      	str	r0, [r4, #0]
 8016880:	4313      	orrs	r3, r2
 8016882:	81a3      	strh	r3, [r4, #12]
 8016884:	9b03      	ldr	r3, [sp, #12]
 8016886:	6120      	str	r0, [r4, #16]
 8016888:	6167      	str	r7, [r4, #20]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00c      	beq.n	80168a8 <__smakebuf_r+0x78>
 801688e:	0028      	movs	r0, r5
 8016890:	230e      	movs	r3, #14
 8016892:	5ee1      	ldrsh	r1, [r4, r3]
 8016894:	f000 f820 	bl	80168d8 <_isatty_r>
 8016898:	2800      	cmp	r0, #0
 801689a:	d005      	beq.n	80168a8 <__smakebuf_r+0x78>
 801689c:	2303      	movs	r3, #3
 801689e:	89a2      	ldrh	r2, [r4, #12]
 80168a0:	439a      	bics	r2, r3
 80168a2:	3b02      	subs	r3, #2
 80168a4:	4313      	orrs	r3, r2
 80168a6:	81a3      	strh	r3, [r4, #12]
 80168a8:	89a3      	ldrh	r3, [r4, #12]
 80168aa:	9a01      	ldr	r2, [sp, #4]
 80168ac:	4313      	orrs	r3, r2
 80168ae:	81a3      	strh	r3, [r4, #12]
 80168b0:	e7cc      	b.n	801684c <__smakebuf_r+0x1c>
	...

080168b4 <_fstat_r>:
 80168b4:	2300      	movs	r3, #0
 80168b6:	b570      	push	{r4, r5, r6, lr}
 80168b8:	4d06      	ldr	r5, [pc, #24]	@ (80168d4 <_fstat_r+0x20>)
 80168ba:	0004      	movs	r4, r0
 80168bc:	0008      	movs	r0, r1
 80168be:	0011      	movs	r1, r2
 80168c0:	602b      	str	r3, [r5, #0]
 80168c2:	f7f0 feab 	bl	800761c <_fstat>
 80168c6:	1c43      	adds	r3, r0, #1
 80168c8:	d103      	bne.n	80168d2 <_fstat_r+0x1e>
 80168ca:	682b      	ldr	r3, [r5, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d000      	beq.n	80168d2 <_fstat_r+0x1e>
 80168d0:	6023      	str	r3, [r4, #0]
 80168d2:	bd70      	pop	{r4, r5, r6, pc}
 80168d4:	20007284 	.word	0x20007284

080168d8 <_isatty_r>:
 80168d8:	2300      	movs	r3, #0
 80168da:	b570      	push	{r4, r5, r6, lr}
 80168dc:	4d06      	ldr	r5, [pc, #24]	@ (80168f8 <_isatty_r+0x20>)
 80168de:	0004      	movs	r4, r0
 80168e0:	0008      	movs	r0, r1
 80168e2:	602b      	str	r3, [r5, #0]
 80168e4:	f7f0 fea8 	bl	8007638 <_isatty>
 80168e8:	1c43      	adds	r3, r0, #1
 80168ea:	d103      	bne.n	80168f4 <_isatty_r+0x1c>
 80168ec:	682b      	ldr	r3, [r5, #0]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d000      	beq.n	80168f4 <_isatty_r+0x1c>
 80168f2:	6023      	str	r3, [r4, #0]
 80168f4:	bd70      	pop	{r4, r5, r6, pc}
 80168f6:	46c0      	nop			@ (mov r8, r8)
 80168f8:	20007284 	.word	0x20007284

080168fc <_init>:
 80168fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168fe:	46c0      	nop			@ (mov r8, r8)
 8016900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016902:	bc08      	pop	{r3}
 8016904:	469e      	mov	lr, r3
 8016906:	4770      	bx	lr

08016908 <_fini>:
 8016908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690a:	46c0      	nop			@ (mov r8, r8)
 801690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801690e:	bc08      	pop	{r3}
 8016910:	469e      	mov	lr, r3
 8016912:	4770      	bx	lr
 8016914:	0000      	movs	r0, r0
	...

08016918 <__FLASH_Program_Fast_veneer>:
 8016918:	b401      	push	{r0}
 801691a:	4802      	ldr	r0, [pc, #8]	@ (8016924 <__FLASH_Program_Fast_veneer+0xc>)
 801691c:	4684      	mov	ip, r0
 801691e:	bc01      	pop	{r0}
 8016920:	4760      	bx	ip
 8016922:	bf00      	nop
 8016924:	20000255 	.word	0x20000255

Disassembly of section .data:

20000000 <counter_ads_max>:
20000000:	00000032                                2...

20000004 <terminal_parser_state>:
20000004:	0000000a                                ....

20000008 <config>:
	...
20000014:	00010000 00000000 00000000 00000000     ................
	...

20000050 <platform_number>:
20000050:	00003030                                00..

20000054 <maxmin_timeout_ms>:
20000054:	0001d4c0                                ....

20000058 <in_window>:
20000058:	20000404                                ... 

2000005c <current_debug_buffer_pointer>:
2000005c:	200004b8                                ... 

20000060 <need_logging>:
20000060:	00000001                                ....

20000064 <SENSORS_I2C>:
20000064:	200024c0                                .$. 

20000068 <ACCELEROMETER_SPI>:
20000068:	200025ac                                .%. 

2000006c <SystemCoreClock>:
2000006c:	00f42400                                .$..

20000070 <debug_uart>:
20000070:	20002820                                 (. 

20000074 <terminal_uart>:
20000074:	2000278c                                .'. 

20000078 <uwTickPrio>:
20000078:	00000004                                ....

2000007c <uwTickFreq>:
2000007c:	00000001                                ....

20000080 <uxCriticalNesting>:
20000080:	aaaaaaaa                                ....

20000084 <tiny>:
20000084:	0da24260                                `B..

20000088 <one>:
20000088:	3f800000                                ...?

2000008c <__sglue>:
2000008c:	00000000 00000003 20007148              ........Hq. 

20000098 <_impure_ptr>:
20000098:	2000009c                                ... 

2000009c <_impure_data>:
2000009c:	00000000 20007148 200071b0 20007218     ....Hq. .q. .r. 
	...

200000e8 <__global_locale>:
200000e8:	00000043 00000000 00000000 00000000     C...............
	...
20000108:	00000043 00000000 00000000 00000000     C...............
	...
20000128:	00000043 00000000 00000000 00000000     C...............
	...
20000148:	00000043 00000000 00000000 00000000     C...............
	...
20000168:	00000043 00000000 00000000 00000000     C...............
	...
20000188:	00000043 00000000 00000000 00000000     C...............
	...
200001a8:	00000043 00000000 00000000 00000000     C...............
	...
200001c8:	0801632b 080162a9 00000000 080173b8     +c...b.......s..
200001d8:	08017360 0801750d 0801750d 0801750d     `s...u...u...u..
200001e8:	0801750d 0801750d 0801750d 0801750d     .u...u...u...u..
200001f8:	0801750d 0801750d ffffffff ffffffff     .u...u..........
20000208:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000230:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000254 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000254:	b580      	push	{r7, lr}
20000256:	b088      	sub	sp, #32
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
2000025c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000025e:	231f      	movs	r3, #31
20000260:	18fb      	adds	r3, r7, r3
20000262:	2200      	movs	r2, #0
20000264:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000026a:	683b      	ldr	r3, [r7, #0]
2000026c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026e:	4b1a      	ldr	r3, [pc, #104]	@ (200002d8 <FLASH_Program_Fast+0x84>)
20000270:	695a      	ldr	r2, [r3, #20]
20000272:	4b19      	ldr	r3, [pc, #100]	@ (200002d8 <FLASH_Program_Fast+0x84>)
20000274:	2180      	movs	r1, #128	@ 0x80
20000276:	02c9      	lsls	r1, r1, #11
20000278:	430a      	orrs	r2, r1
2000027a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000027c:	f3ef 8310 	mrs	r3, PRIMASK
20000280:	60fb      	str	r3, [r7, #12]
  return(result);
20000282:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000286:	b672      	cpsid	i
}
20000288:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000028a:	e00f      	b.n	200002ac <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000028c:	697a      	ldr	r2, [r7, #20]
2000028e:	69bb      	ldr	r3, [r7, #24]
20000290:	6812      	ldr	r2, [r2, #0]
20000292:	601a      	str	r2, [r3, #0]
    src += 4U;
20000294:	697b      	ldr	r3, [r7, #20]
20000296:	3304      	adds	r3, #4
20000298:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000029a:	69bb      	ldr	r3, [r7, #24]
2000029c:	3304      	adds	r3, #4
2000029e:	61bb      	str	r3, [r7, #24]
    index++;
200002a0:	211f      	movs	r1, #31
200002a2:	187b      	adds	r3, r7, r1
200002a4:	781a      	ldrb	r2, [r3, #0]
200002a6:	187b      	adds	r3, r7, r1
200002a8:	3201      	adds	r2, #1
200002aa:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002ac:	231f      	movs	r3, #31
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	781b      	ldrb	r3, [r3, #0]
200002b2:	2b3f      	cmp	r3, #63	@ 0x3f
200002b4:	d9ea      	bls.n	2000028c <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200002b6:	46c0      	nop			@ (mov r8, r8)
200002b8:	4b07      	ldr	r3, [pc, #28]	@ (200002d8 <FLASH_Program_Fast+0x84>)
200002ba:	691a      	ldr	r2, [r3, #16]
200002bc:	2380      	movs	r3, #128	@ 0x80
200002be:	025b      	lsls	r3, r3, #9
200002c0:	4013      	ands	r3, r2
200002c2:	d1f9      	bne.n	200002b8 <FLASH_Program_Fast+0x64>
200002c4:	693b      	ldr	r3, [r7, #16]
200002c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002c8:	68bb      	ldr	r3, [r7, #8]
200002ca:	f383 8810 	msr	PRIMASK, r3
}
200002ce:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002d0:	46c0      	nop			@ (mov r8, r8)
200002d2:	46bd      	mov	sp, r7
200002d4:	b008      	add	sp, #32
200002d6:	bd80      	pop	{r7, pc}
200002d8:	40022000 	.word	0x40022000
