
nais_bk002_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d68  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd0  08016e28  08016e28  00017e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017af8  08017af8  000192d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017af8  08017af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b00  08017b00  000192d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017b00  08017b00  00018b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b08  08017b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08017b0c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00006fb8  200002d8  08017de4  000192d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007290  08017de4  0001a290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000192d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031f41  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007029  00000000  00000000  0004b241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e0  00000000  00000000  00052270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c97  00000000  00000000  00054750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023edb  00000000  00000000  000563e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032706  00000000  00000000  0007a2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1b7b  00000000  00000000  000ac9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d90  00000000  00000000  0016e588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00178318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d8 	.word	0x200002d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08016e00 	.word	0x08016e00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002dc 	.word	0x200002dc
 8000104:	08016e00 	.word	0x08016e00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f82b 	bl	8002498 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff6b 	bl	8002328 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f81d 	bl	8002498 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f813 	bl	8002498 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff95 	bl	80023b0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff8b 	bl	80023b0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcc7 	bl	8000e44 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc47 	bl	8000d54 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcb9 	bl	8000e44 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcaf 	bl	8000e44 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc55 	bl	8000da4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc4b 	bl	8000da4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f88c 	bl	8000668 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	@ 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f7ff ffd0 	bl	8000508 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 ffaf 	bl	80014d0 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	@ 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fdef 	bl	800115c <__aeabi_fsub>
 800057e:	f000 ffa7 	bl	80014d0 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__aeabi_d2uiz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 8000592:	0004      	movs	r4, r0
 8000594:	000d      	movs	r5, r1
 8000596:	f7ff ff7d 	bl	8000494 <__aeabi_dcmpge>
 800059a:	2800      	cmp	r0, #0
 800059c:	d104      	bne.n	80005a8 <__aeabi_d2uiz+0x1c>
 800059e:	0020      	movs	r0, r4
 80005a0:	0029      	movs	r1, r5
 80005a2:	f002 fe71 	bl	8003288 <__aeabi_d2iz>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f002 faac 	bl	8002b0c <__aeabi_dsub>
 80005b4:	f002 fe68 	bl	8003288 <__aeabi_d2iz>
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	061b      	lsls	r3, r3, #24
 80005bc:	469c      	mov	ip, r3
 80005be:	4460      	add	r0, ip
 80005c0:	e7f1      	b.n	80005a6 <__aeabi_d2uiz+0x1a>
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	41e00000 	.word	0x41e00000

080005c8 <__aeabi_d2lz>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	0004      	movs	r4, r0
 80005d0:	000d      	movs	r5, r1
 80005d2:	f7ff ff41 	bl	8000458 <__aeabi_dcmplt>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d108      	bne.n	80005ec <__aeabi_d2lz+0x24>
 80005da:	0020      	movs	r0, r4
 80005dc:	0029      	movs	r1, r5
 80005de:	f000 f80f 	bl	8000600 <__aeabi_d2ulz>
 80005e2:	0002      	movs	r2, r0
 80005e4:	000b      	movs	r3, r1
 80005e6:	0010      	movs	r0, r2
 80005e8:	0019      	movs	r1, r3
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	18e9      	adds	r1, r5, r3
 80005f2:	0020      	movs	r0, r4
 80005f4:	f000 f804 	bl	8000600 <__aeabi_d2ulz>
 80005f8:	2300      	movs	r3, #0
 80005fa:	4242      	negs	r2, r0
 80005fc:	418b      	sbcs	r3, r1
 80005fe:	e7f2      	b.n	80005e6 <__aeabi_d2lz+0x1e>

08000600 <__aeabi_d2ulz>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2200      	movs	r2, #0
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <__aeabi_d2ulz+0x34>)
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	f001 ffb7 	bl	800257c <__aeabi_dmul>
 800060e:	f7ff ffbd 	bl	800058c <__aeabi_d2uiz>
 8000612:	0006      	movs	r6, r0
 8000614:	f002 fea2 	bl	800335c <__aeabi_ui2d>
 8000618:	2200      	movs	r2, #0
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <__aeabi_d2ulz+0x38>)
 800061c:	f001 ffae 	bl	800257c <__aeabi_dmul>
 8000620:	0002      	movs	r2, r0
 8000622:	000b      	movs	r3, r1
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 fa70 	bl	8002b0c <__aeabi_dsub>
 800062c:	f7ff ffae 	bl	800058c <__aeabi_d2uiz>
 8000630:	0031      	movs	r1, r6
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	3df00000 	.word	0x3df00000
 8000638:	41f00000 	.word	0x41f00000

0800063c <__aeabi_l2d>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	0006      	movs	r6, r0
 8000640:	0008      	movs	r0, r1
 8000642:	f002 fe5d 	bl	8003300 <__aeabi_i2d>
 8000646:	2200      	movs	r2, #0
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <__aeabi_l2d+0x28>)
 800064a:	f001 ff97 	bl	800257c <__aeabi_dmul>
 800064e:	000d      	movs	r5, r1
 8000650:	0004      	movs	r4, r0
 8000652:	0030      	movs	r0, r6
 8000654:	f002 fe82 	bl	800335c <__aeabi_ui2d>
 8000658:	002b      	movs	r3, r5
 800065a:	0022      	movs	r2, r4
 800065c:	f000 ffe6 	bl	800162c <__aeabi_dadd>
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	41f00000 	.word	0x41f00000

08000668 <__udivmoddi4>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	4657      	mov	r7, sl
 800066c:	464e      	mov	r6, r9
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	b5e0      	push	{r5, r6, r7, lr}
 8000674:	0004      	movs	r4, r0
 8000676:	000d      	movs	r5, r1
 8000678:	4692      	mov	sl, r2
 800067a:	4699      	mov	r9, r3
 800067c:	b083      	sub	sp, #12
 800067e:	428b      	cmp	r3, r1
 8000680:	d830      	bhi.n	80006e4 <__udivmoddi4+0x7c>
 8000682:	d02d      	beq.n	80006e0 <__udivmoddi4+0x78>
 8000684:	4649      	mov	r1, r9
 8000686:	4650      	mov	r0, sl
 8000688:	f002 ff76 	bl	8003578 <__clzdi2>
 800068c:	0029      	movs	r1, r5
 800068e:	0006      	movs	r6, r0
 8000690:	0020      	movs	r0, r4
 8000692:	f002 ff71 	bl	8003578 <__clzdi2>
 8000696:	1a33      	subs	r3, r6, r0
 8000698:	4698      	mov	r8, r3
 800069a:	3b20      	subs	r3, #32
 800069c:	d434      	bmi.n	8000708 <__udivmoddi4+0xa0>
 800069e:	469b      	mov	fp, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	465a      	mov	r2, fp
 80006a4:	4093      	lsls	r3, r2
 80006a6:	4642      	mov	r2, r8
 80006a8:	001f      	movs	r7, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	4093      	lsls	r3, r2
 80006ae:	001e      	movs	r6, r3
 80006b0:	42af      	cmp	r7, r5
 80006b2:	d83b      	bhi.n	800072c <__udivmoddi4+0xc4>
 80006b4:	42af      	cmp	r7, r5
 80006b6:	d100      	bne.n	80006ba <__udivmoddi4+0x52>
 80006b8:	e079      	b.n	80007ae <__udivmoddi4+0x146>
 80006ba:	465b      	mov	r3, fp
 80006bc:	1ba4      	subs	r4, r4, r6
 80006be:	41bd      	sbcs	r5, r7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da00      	bge.n	80006c6 <__udivmoddi4+0x5e>
 80006c4:	e076      	b.n	80007b4 <__udivmoddi4+0x14c>
 80006c6:	2200      	movs	r2, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	465a      	mov	r2, fp
 80006d2:	4093      	lsls	r3, r2
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4642      	mov	r2, r8
 80006da:	4093      	lsls	r3, r2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	e029      	b.n	8000734 <__udivmoddi4+0xcc>
 80006e0:	4282      	cmp	r2, r0
 80006e2:	d9cf      	bls.n	8000684 <__udivmoddi4+0x1c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <__udivmoddi4+0x8e>
 80006f2:	601c      	str	r4, [r3, #0]
 80006f4:	605d      	str	r5, [r3, #4]
 80006f6:	9800      	ldr	r0, [sp, #0]
 80006f8:	9901      	ldr	r1, [sp, #4]
 80006fa:	b003      	add	sp, #12
 80006fc:	bcf0      	pop	{r4, r5, r6, r7}
 80006fe:	46bb      	mov	fp, r7
 8000700:	46b2      	mov	sl, r6
 8000702:	46a9      	mov	r9, r5
 8000704:	46a0      	mov	r8, r4
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000708:	4642      	mov	r2, r8
 800070a:	469b      	mov	fp, r3
 800070c:	2320      	movs	r3, #32
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	4652      	mov	r2, sl
 8000712:	40da      	lsrs	r2, r3
 8000714:	4641      	mov	r1, r8
 8000716:	0013      	movs	r3, r2
 8000718:	464a      	mov	r2, r9
 800071a:	408a      	lsls	r2, r1
 800071c:	0017      	movs	r7, r2
 800071e:	4642      	mov	r2, r8
 8000720:	431f      	orrs	r7, r3
 8000722:	4653      	mov	r3, sl
 8000724:	4093      	lsls	r3, r2
 8000726:	001e      	movs	r6, r3
 8000728:	42af      	cmp	r7, r5
 800072a:	d9c3      	bls.n	80006b4 <__udivmoddi4+0x4c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4643      	mov	r3, r8
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0d8      	beq.n	80006ec <__udivmoddi4+0x84>
 800073a:	07fb      	lsls	r3, r7, #31
 800073c:	0872      	lsrs	r2, r6, #1
 800073e:	431a      	orrs	r2, r3
 8000740:	4646      	mov	r6, r8
 8000742:	087b      	lsrs	r3, r7, #1
 8000744:	e00e      	b.n	8000764 <__udivmoddi4+0xfc>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d101      	bne.n	800074e <__udivmoddi4+0xe6>
 800074a:	42a2      	cmp	r2, r4
 800074c:	d80c      	bhi.n	8000768 <__udivmoddi4+0x100>
 800074e:	1aa4      	subs	r4, r4, r2
 8000750:	419d      	sbcs	r5, r3
 8000752:	2001      	movs	r0, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2100      	movs	r1, #0
 800075a:	3e01      	subs	r6, #1
 800075c:	1824      	adds	r4, r4, r0
 800075e:	414d      	adcs	r5, r1
 8000760:	2e00      	cmp	r6, #0
 8000762:	d006      	beq.n	8000772 <__udivmoddi4+0x10a>
 8000764:	42ab      	cmp	r3, r5
 8000766:	d9ee      	bls.n	8000746 <__udivmoddi4+0xde>
 8000768:	3e01      	subs	r6, #1
 800076a:	1924      	adds	r4, r4, r4
 800076c:	416d      	adcs	r5, r5
 800076e:	2e00      	cmp	r6, #0
 8000770:	d1f8      	bne.n	8000764 <__udivmoddi4+0xfc>
 8000772:	9800      	ldr	r0, [sp, #0]
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	465b      	mov	r3, fp
 8000778:	1900      	adds	r0, r0, r4
 800077a:	4169      	adcs	r1, r5
 800077c:	2b00      	cmp	r3, #0
 800077e:	db24      	blt.n	80007ca <__udivmoddi4+0x162>
 8000780:	002b      	movs	r3, r5
 8000782:	465a      	mov	r2, fp
 8000784:	4644      	mov	r4, r8
 8000786:	40d3      	lsrs	r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	40e2      	lsrs	r2, r4
 800078c:	001c      	movs	r4, r3
 800078e:	465b      	mov	r3, fp
 8000790:	0015      	movs	r5, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	db2a      	blt.n	80007ec <__udivmoddi4+0x184>
 8000796:	0026      	movs	r6, r4
 8000798:	409e      	lsls	r6, r3
 800079a:	0033      	movs	r3, r6
 800079c:	0026      	movs	r6, r4
 800079e:	4647      	mov	r7, r8
 80007a0:	40be      	lsls	r6, r7
 80007a2:	0032      	movs	r2, r6
 80007a4:	1a80      	subs	r0, r0, r2
 80007a6:	4199      	sbcs	r1, r3
 80007a8:	9000      	str	r0, [sp, #0]
 80007aa:	9101      	str	r1, [sp, #4]
 80007ac:	e79e      	b.n	80006ec <__udivmoddi4+0x84>
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d8bc      	bhi.n	800072c <__udivmoddi4+0xc4>
 80007b2:	e782      	b.n	80006ba <__udivmoddi4+0x52>
 80007b4:	4642      	mov	r2, r8
 80007b6:	2320      	movs	r3, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	40da      	lsrs	r2, r3
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	e785      	b.n	80006d6 <__udivmoddi4+0x6e>
 80007ca:	4642      	mov	r2, r8
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	4646      	mov	r6, r8
 80007d4:	409a      	lsls	r2, r3
 80007d6:	0023      	movs	r3, r4
 80007d8:	40f3      	lsrs	r3, r6
 80007da:	4644      	mov	r4, r8
 80007dc:	4313      	orrs	r3, r2
 80007de:	002a      	movs	r2, r5
 80007e0:	40e2      	lsrs	r2, r4
 80007e2:	001c      	movs	r4, r3
 80007e4:	465b      	mov	r3, fp
 80007e6:	0015      	movs	r5, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dad4      	bge.n	8000796 <__udivmoddi4+0x12e>
 80007ec:	4642      	mov	r2, r8
 80007ee:	002f      	movs	r7, r5
 80007f0:	2320      	movs	r3, #32
 80007f2:	0026      	movs	r6, r4
 80007f4:	4097      	lsls	r7, r2
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	40de      	lsrs	r6, r3
 80007fa:	003b      	movs	r3, r7
 80007fc:	4333      	orrs	r3, r6
 80007fe:	e7cd      	b.n	800079c <__udivmoddi4+0x134>

08000800 <__aeabi_fadd>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	46ce      	mov	lr, r9
 8000804:	4647      	mov	r7, r8
 8000806:	0243      	lsls	r3, r0, #9
 8000808:	0a5a      	lsrs	r2, r3, #9
 800080a:	024e      	lsls	r6, r1, #9
 800080c:	0045      	lsls	r5, r0, #1
 800080e:	0fc4      	lsrs	r4, r0, #31
 8000810:	0048      	lsls	r0, r1, #1
 8000812:	4691      	mov	r9, r2
 8000814:	0e2d      	lsrs	r5, r5, #24
 8000816:	0a72      	lsrs	r2, r6, #9
 8000818:	0e00      	lsrs	r0, r0, #24
 800081a:	4694      	mov	ip, r2
 800081c:	b580      	push	{r7, lr}
 800081e:	099b      	lsrs	r3, r3, #6
 8000820:	0fc9      	lsrs	r1, r1, #31
 8000822:	09b6      	lsrs	r6, r6, #6
 8000824:	1a2a      	subs	r2, r5, r0
 8000826:	428c      	cmp	r4, r1
 8000828:	d021      	beq.n	800086e <__aeabi_fadd+0x6e>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dd0d      	ble.n	800084a <__aeabi_fadd+0x4a>
 800082e:	2800      	cmp	r0, #0
 8000830:	d12d      	bne.n	800088e <__aeabi_fadd+0x8e>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x38>
 8000836:	e08d      	b.n	8000954 <__aeabi_fadd+0x154>
 8000838:	1e51      	subs	r1, r2, #1
 800083a:	2a01      	cmp	r2, #1
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x40>
 800083e:	e11d      	b.n	8000a7c <__aeabi_fadd+0x27c>
 8000840:	2aff      	cmp	r2, #255	@ 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x46>
 8000844:	e0ab      	b.n	800099e <__aeabi_fadd+0x19e>
 8000846:	000a      	movs	r2, r1
 8000848:	e027      	b.n	800089a <__aeabi_fadd+0x9a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d04d      	beq.n	80008ea <__aeabi_fadd+0xea>
 800084e:	1b42      	subs	r2, r0, r5
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x56>
 8000854:	e0cc      	b.n	80009f0 <__aeabi_fadd+0x1f0>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x5c>
 800085a:	e079      	b.n	8000950 <__aeabi_fadd+0x150>
 800085c:	1e54      	subs	r4, r2, #1
 800085e:	2a01      	cmp	r2, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x64>
 8000862:	e128      	b.n	8000ab6 <__aeabi_fadd+0x2b6>
 8000864:	2aff      	cmp	r2, #255	@ 0xff
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x6a>
 8000868:	e097      	b.n	800099a <__aeabi_fadd+0x19a>
 800086a:	0022      	movs	r2, r4
 800086c:	e0c5      	b.n	80009fa <__aeabi_fadd+0x1fa>
 800086e:	2a00      	cmp	r2, #0
 8000870:	dc00      	bgt.n	8000874 <__aeabi_fadd+0x74>
 8000872:	e096      	b.n	80009a2 <__aeabi_fadd+0x1a2>
 8000874:	2800      	cmp	r0, #0
 8000876:	d04f      	beq.n	8000918 <__aeabi_fadd+0x118>
 8000878:	2dff      	cmp	r5, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x7e>
 800087c:	e08f      	b.n	800099e <__aeabi_fadd+0x19e>
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	04c9      	lsls	r1, r1, #19
 8000882:	430e      	orrs	r6, r1
 8000884:	2a1b      	cmp	r2, #27
 8000886:	dd51      	ble.n	800092c <__aeabi_fadd+0x12c>
 8000888:	002a      	movs	r2, r5
 800088a:	3301      	adds	r3, #1
 800088c:	e018      	b.n	80008c0 <__aeabi_fadd+0xc0>
 800088e:	2dff      	cmp	r5, #255	@ 0xff
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x94>
 8000892:	e084      	b.n	800099e <__aeabi_fadd+0x19e>
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	04c9      	lsls	r1, r1, #19
 8000898:	430e      	orrs	r6, r1
 800089a:	2101      	movs	r1, #1
 800089c:	2a1b      	cmp	r2, #27
 800089e:	dc08      	bgt.n	80008b2 <__aeabi_fadd+0xb2>
 80008a0:	0031      	movs	r1, r6
 80008a2:	2020      	movs	r0, #32
 80008a4:	40d1      	lsrs	r1, r2
 80008a6:	1a82      	subs	r2, r0, r2
 80008a8:	4096      	lsls	r6, r2
 80008aa:	0032      	movs	r2, r6
 80008ac:	1e50      	subs	r0, r2, #1
 80008ae:	4182      	sbcs	r2, r0
 80008b0:	4311      	orrs	r1, r2
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	015a      	lsls	r2, r3, #5
 80008b6:	d459      	bmi.n	800096c <__aeabi_fadd+0x16c>
 80008b8:	2107      	movs	r1, #7
 80008ba:	002a      	movs	r2, r5
 80008bc:	4019      	ands	r1, r3
 80008be:	d049      	beq.n	8000954 <__aeabi_fadd+0x154>
 80008c0:	210f      	movs	r1, #15
 80008c2:	4019      	ands	r1, r3
 80008c4:	2904      	cmp	r1, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0xca>
 80008c8:	3304      	adds	r3, #4
 80008ca:	0159      	lsls	r1, r3, #5
 80008cc:	d542      	bpl.n	8000954 <__aeabi_fadd+0x154>
 80008ce:	1c50      	adds	r0, r2, #1
 80008d0:	2afe      	cmp	r2, #254	@ 0xfe
 80008d2:	d03a      	beq.n	800094a <__aeabi_fadd+0x14a>
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	b2c0      	uxtb	r0, r0
 80008d8:	0a5b      	lsrs	r3, r3, #9
 80008da:	05c0      	lsls	r0, r0, #23
 80008dc:	4318      	orrs	r0, r3
 80008de:	07e4      	lsls	r4, r4, #31
 80008e0:	4320      	orrs	r0, r4
 80008e2:	bcc0      	pop	{r6, r7}
 80008e4:	46b9      	mov	r9, r7
 80008e6:	46b0      	mov	r8, r6
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	20fe      	movs	r0, #254	@ 0xfe
 80008ec:	4680      	mov	r8, r0
 80008ee:	1c6f      	adds	r7, r5, #1
 80008f0:	0038      	movs	r0, r7
 80008f2:	4647      	mov	r7, r8
 80008f4:	4207      	tst	r7, r0
 80008f6:	d000      	beq.n	80008fa <__aeabi_fadd+0xfa>
 80008f8:	e08e      	b.n	8000a18 <__aeabi_fadd+0x218>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d000      	beq.n	8000900 <__aeabi_fadd+0x100>
 80008fe:	e0b4      	b.n	8000a6a <__aeabi_fadd+0x26a>
 8000900:	2b00      	cmp	r3, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x106>
 8000904:	e0db      	b.n	8000abe <__aeabi_fadd+0x2be>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d06c      	beq.n	80009e4 <__aeabi_fadd+0x1e4>
 800090a:	1b98      	subs	r0, r3, r6
 800090c:	0145      	lsls	r5, r0, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x112>
 8000910:	e0f7      	b.n	8000b02 <__aeabi_fadd+0x302>
 8000912:	000c      	movs	r4, r1
 8000914:	1af3      	subs	r3, r6, r3
 8000916:	e03d      	b.n	8000994 <__aeabi_fadd+0x194>
 8000918:	2e00      	cmp	r6, #0
 800091a:	d01b      	beq.n	8000954 <__aeabi_fadd+0x154>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x124>
 8000922:	e082      	b.n	8000a2a <__aeabi_fadd+0x22a>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d03a      	beq.n	800099e <__aeabi_fadd+0x19e>
 8000928:	000a      	movs	r2, r1
 800092a:	e7ab      	b.n	8000884 <__aeabi_fadd+0x84>
 800092c:	0031      	movs	r1, r6
 800092e:	2020      	movs	r0, #32
 8000930:	40d1      	lsrs	r1, r2
 8000932:	1a82      	subs	r2, r0, r2
 8000934:	4096      	lsls	r6, r2
 8000936:	0032      	movs	r2, r6
 8000938:	1e50      	subs	r0, r2, #1
 800093a:	4182      	sbcs	r2, r0
 800093c:	430a      	orrs	r2, r1
 800093e:	189b      	adds	r3, r3, r2
 8000940:	015a      	lsls	r2, r3, #5
 8000942:	d5b9      	bpl.n	80008b8 <__aeabi_fadd+0xb8>
 8000944:	1c6a      	adds	r2, r5, #1
 8000946:	2dfe      	cmp	r5, #254	@ 0xfe
 8000948:	d175      	bne.n	8000a36 <__aeabi_fadd+0x236>
 800094a:	20ff      	movs	r0, #255	@ 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7c4      	b.n	80008da <__aeabi_fadd+0xda>
 8000950:	000c      	movs	r4, r1
 8000952:	0033      	movs	r3, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	2aff      	cmp	r2, #255	@ 0xff
 8000958:	d146      	bne.n	80009e8 <__aeabi_fadd+0x1e8>
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f5      	beq.n	800094a <__aeabi_fadd+0x14a>
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	4313      	orrs	r3, r2
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e7b6      	b.n	80008da <__aeabi_fadd+0xda>
 800096c:	019f      	lsls	r7, r3, #6
 800096e:	09bf      	lsrs	r7, r7, #6
 8000970:	0038      	movs	r0, r7
 8000972:	f002 fde3 	bl	800353c <__clzsi2>
 8000976:	3805      	subs	r0, #5
 8000978:	4087      	lsls	r7, r0
 800097a:	4285      	cmp	r5, r0
 800097c:	dc24      	bgt.n	80009c8 <__aeabi_fadd+0x1c8>
 800097e:	003b      	movs	r3, r7
 8000980:	2120      	movs	r1, #32
 8000982:	1b42      	subs	r2, r0, r5
 8000984:	3201      	adds	r2, #1
 8000986:	40d3      	lsrs	r3, r2
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	4097      	lsls	r7, r2
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	4197      	sbcs	r7, r2
 8000990:	2200      	movs	r2, #0
 8000992:	433b      	orrs	r3, r7
 8000994:	0759      	lsls	r1, r3, #29
 8000996:	d193      	bne.n	80008c0 <__aeabi_fadd+0xc0>
 8000998:	e797      	b.n	80008ca <__aeabi_fadd+0xca>
 800099a:	000c      	movs	r4, r1
 800099c:	0033      	movs	r3, r6
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	e7db      	b.n	800095a <__aeabi_fadd+0x15a>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d014      	beq.n	80009d0 <__aeabi_fadd+0x1d0>
 80009a6:	1b42      	subs	r2, r0, r5
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d14b      	bne.n	8000a44 <__aeabi_fadd+0x244>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0d0      	beq.n	8000952 <__aeabi_fadd+0x152>
 80009b0:	1e51      	subs	r1, r2, #1
 80009b2:	2a01      	cmp	r2, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x1b8>
 80009b6:	e09e      	b.n	8000af6 <__aeabi_fadd+0x2f6>
 80009b8:	2aff      	cmp	r2, #255	@ 0xff
 80009ba:	d0ef      	beq.n	800099c <__aeabi_fadd+0x19c>
 80009bc:	000a      	movs	r2, r1
 80009be:	2a1b      	cmp	r2, #27
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fadd+0x282>
 80009c2:	0002      	movs	r2, r0
 80009c4:	1c73      	adds	r3, r6, #1
 80009c6:	e77b      	b.n	80008c0 <__aeabi_fadd+0xc0>
 80009c8:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <__aeabi_fadd+0x30c>)
 80009ca:	1a2a      	subs	r2, r5, r0
 80009cc:	403b      	ands	r3, r7
 80009ce:	e7e1      	b.n	8000994 <__aeabi_fadd+0x194>
 80009d0:	21fe      	movs	r1, #254	@ 0xfe
 80009d2:	1c6a      	adds	r2, r5, #1
 80009d4:	4211      	tst	r1, r2
 80009d6:	d13b      	bne.n	8000a50 <__aeabi_fadd+0x250>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d15d      	bne.n	8000a98 <__aeabi_fadd+0x298>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d07f      	beq.n	8000ae0 <__aeabi_fadd+0x2e0>
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d17f      	bne.n	8000ae4 <__aeabi_fadd+0x2e4>
 80009e4:	2200      	movs	r2, #0
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	b2d0      	uxtb	r0, r2
 80009ee:	e774      	b.n	80008da <__aeabi_fadd+0xda>
 80009f0:	28ff      	cmp	r0, #255	@ 0xff
 80009f2:	d0d2      	beq.n	800099a <__aeabi_fadd+0x19a>
 80009f4:	2480      	movs	r4, #128	@ 0x80
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	4323      	orrs	r3, r4
 80009fa:	2401      	movs	r4, #1
 80009fc:	2a1b      	cmp	r2, #27
 80009fe:	dc07      	bgt.n	8000a10 <__aeabi_fadd+0x210>
 8000a00:	001c      	movs	r4, r3
 8000a02:	2520      	movs	r5, #32
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	1aaa      	subs	r2, r5, r2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	1b33      	subs	r3, r6, r4
 8000a12:	0005      	movs	r5, r0
 8000a14:	000c      	movs	r4, r1
 8000a16:	e74d      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a18:	1b9f      	subs	r7, r3, r6
 8000a1a:	017a      	lsls	r2, r7, #5
 8000a1c:	d422      	bmi.n	8000a64 <__aeabi_fadd+0x264>
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d1a6      	bne.n	8000970 <__aeabi_fadd+0x170>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	2300      	movs	r3, #0
 8000a28:	e757      	b.n	80008da <__aeabi_fadd+0xda>
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	3201      	adds	r2, #1
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d400      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000a34:	e740      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000a36:	2101      	movs	r1, #1
 8000a38:	4835      	ldr	r0, [pc, #212]	@ (8000b10 <__aeabi_fadd+0x310>)
 8000a3a:	4019      	ands	r1, r3
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	4003      	ands	r3, r0
 8000a40:	430b      	orrs	r3, r1
 8000a42:	e7a7      	b.n	8000994 <__aeabi_fadd+0x194>
 8000a44:	28ff      	cmp	r0, #255	@ 0xff
 8000a46:	d0a9      	beq.n	800099c <__aeabi_fadd+0x19c>
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	04c9      	lsls	r1, r1, #19
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	e7b6      	b.n	80009be <__aeabi_fadd+0x1be>
 8000a50:	2aff      	cmp	r2, #255	@ 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fadd+0x256>
 8000a54:	e779      	b.n	800094a <__aeabi_fadd+0x14a>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	0759      	lsls	r1, r3, #29
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x260>
 8000a5e:	e72f      	b.n	80008c0 <__aeabi_fadd+0xc0>
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	e7c1      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000a64:	000c      	movs	r4, r1
 8000a66:	1af7      	subs	r7, r6, r3
 8000a68:	e782      	b.n	8000970 <__aeabi_fadd+0x170>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d12c      	bne.n	8000ac8 <__aeabi_fadd+0x2c8>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d193      	bne.n	800099a <__aeabi_fadd+0x19a>
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	2400      	movs	r4, #0
 8000a76:	20ff      	movs	r0, #255	@ 0xff
 8000a78:	03db      	lsls	r3, r3, #15
 8000a7a:	e72e      	b.n	80008da <__aeabi_fadd+0xda>
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	1b9b      	subs	r3, r3, r6
 8000a80:	e718      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a82:	0019      	movs	r1, r3
 8000a84:	2520      	movs	r5, #32
 8000a86:	40d1      	lsrs	r1, r2
 8000a88:	1aaa      	subs	r2, r5, r2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4193      	sbcs	r3, r2
 8000a90:	430b      	orrs	r3, r1
 8000a92:	0005      	movs	r5, r0
 8000a94:	199b      	adds	r3, r3, r6
 8000a96:	e753      	b.n	8000940 <__aeabi_fadd+0x140>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x29e>
 8000a9c:	e77e      	b.n	800099c <__aeabi_fadd+0x19c>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2a4>
 8000aa2:	e77c      	b.n	800099e <__aeabi_fadd+0x19e>
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	03d2      	lsls	r2, r2, #15
 8000aa8:	4591      	cmp	r9, r2
 8000aaa:	d302      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000aac:	4594      	cmp	ip, r2
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	e753      	b.n	800095e <__aeabi_fadd+0x15e>
 8000ab6:	000c      	movs	r4, r1
 8000ab8:	1af3      	subs	r3, r6, r3
 8000aba:	3501      	adds	r5, #1
 8000abc:	e6fa      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0af      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	0033      	movs	r3, r6
 8000ac6:	e78d      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_fadd+0x2ce>
 8000acc:	e767      	b.n	800099e <__aeabi_fadd+0x19e>
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	03d2      	lsls	r2, r2, #15
 8000ad2:	4591      	cmp	r9, r2
 8000ad4:	d3ed      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ad6:	4594      	cmp	ip, r2
 8000ad8:	d2eb      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ada:	000c      	movs	r4, r1
 8000adc:	0033      	movs	r3, r6
 8000ade:	e7e8      	b.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ae0:	0033      	movs	r3, r6
 8000ae2:	e77f      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ae4:	199b      	adds	r3, r3, r6
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0159      	lsls	r1, r3, #5
 8000aea:	d5b9      	bpl.n	8000a60 <__aeabi_fadd+0x260>
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <__aeabi_fadd+0x30c>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2201      	movs	r2, #1
 8000af4:	e778      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000af6:	199b      	adds	r3, r3, r6
 8000af8:	3201      	adds	r2, #1
 8000afa:	3501      	adds	r5, #1
 8000afc:	0159      	lsls	r1, r3, #5
 8000afe:	d49a      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000b00:	e6da      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d08d      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	e76e      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	fbffffff 	.word	0xfbffffff
 8000b10:	7dffffff 	.word	0x7dffffff

08000b14 <__aeabi_fdiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	464f      	mov	r7, r9
 8000b18:	4646      	mov	r6, r8
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	0244      	lsls	r4, r0, #9
 8000b1e:	b5c0      	push	{r6, r7, lr}
 8000b20:	0047      	lsls	r7, r0, #1
 8000b22:	1c0e      	adds	r6, r1, #0
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	0e3f      	lsrs	r7, r7, #24
 8000b28:	0fc5      	lsrs	r5, r0, #31
 8000b2a:	2f00      	cmp	r7, #0
 8000b2c:	d03c      	beq.n	8000ba8 <__aeabi_fdiv+0x94>
 8000b2e:	2fff      	cmp	r7, #255	@ 0xff
 8000b30:	d042      	beq.n	8000bb8 <__aeabi_fdiv+0xa4>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	4699      	mov	r9, r3
 8000b38:	469a      	mov	sl, r3
 8000b3a:	00e4      	lsls	r4, r4, #3
 8000b3c:	04d2      	lsls	r2, r2, #19
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	3f7f      	subs	r7, #127	@ 0x7f
 8000b42:	0273      	lsls	r3, r6, #9
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	4698      	mov	r8, r3
 8000b48:	0073      	lsls	r3, r6, #1
 8000b4a:	0e1b      	lsrs	r3, r3, #24
 8000b4c:	0ff6      	lsrs	r6, r6, #31
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d01b      	beq.n	8000b8a <__aeabi_fdiv+0x76>
 8000b52:	2bff      	cmp	r3, #255	@ 0xff
 8000b54:	d013      	beq.n	8000b7e <__aeabi_fdiv+0x6a>
 8000b56:	4642      	mov	r2, r8
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	04c9      	lsls	r1, r1, #19
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	2000      	movs	r0, #0
 8000b64:	3b7f      	subs	r3, #127	@ 0x7f
 8000b66:	0029      	movs	r1, r5
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	4071      	eors	r1, r6
 8000b6e:	b2c9      	uxtb	r1, r1
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fdiv+0x62>
 8000b74:	e0b5      	b.n	8000ce2 <__aeabi_fdiv+0x1ce>
 8000b76:	4a74      	ldr	r2, [pc, #464]	@ (8000d48 <__aeabi_fdiv+0x234>)
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	58d3      	ldr	r3, [r2, r3]
 8000b7c:	469f      	mov	pc, r3
 8000b7e:	4643      	mov	r3, r8
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d13f      	bne.n	8000c04 <__aeabi_fdiv+0xf0>
 8000b84:	3fff      	subs	r7, #255	@ 0xff
 8000b86:	3302      	adds	r3, #2
 8000b88:	e003      	b.n	8000b92 <__aeabi_fdiv+0x7e>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12d      	bne.n	8000bec <__aeabi_fdiv+0xd8>
 8000b90:	2301      	movs	r3, #1
 8000b92:	0029      	movs	r1, r5
 8000b94:	464a      	mov	r2, r9
 8000b96:	4071      	eors	r1, r6
 8000b98:	b2c9      	uxtb	r1, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	2a0e      	cmp	r2, #14
 8000b9e:	d838      	bhi.n	8000c12 <__aeabi_fdiv+0xfe>
 8000ba0:	486a      	ldr	r0, [pc, #424]	@ (8000d4c <__aeabi_fdiv+0x238>)
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	5882      	ldr	r2, [r0, r2]
 8000ba6:	4697      	mov	pc, r2
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	d113      	bne.n	8000bd4 <__aeabi_fdiv+0xc0>
 8000bac:	2304      	movs	r3, #4
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e7c4      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_fdiv+0xb4>
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	3b06      	subs	r3, #6
 8000bc2:	27ff      	movs	r7, #255	@ 0xff
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	e7bc      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bc8:	230c      	movs	r3, #12
 8000bca:	4699      	mov	r9, r3
 8000bcc:	3b09      	subs	r3, #9
 8000bce:	27ff      	movs	r7, #255	@ 0xff
 8000bd0:	469a      	mov	sl, r3
 8000bd2:	e7b6      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bd4:	0020      	movs	r0, r4
 8000bd6:	f002 fcb1 	bl	800353c <__clzsi2>
 8000bda:	2776      	movs	r7, #118	@ 0x76
 8000bdc:	1f43      	subs	r3, r0, #5
 8000bde:	409c      	lsls	r4, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	427f      	negs	r7, r7
 8000be4:	4699      	mov	r9, r3
 8000be6:	469a      	mov	sl, r3
 8000be8:	1a3f      	subs	r7, r7, r0
 8000bea:	e7aa      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bec:	4640      	mov	r0, r8
 8000bee:	f002 fca5 	bl	800353c <__clzsi2>
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	1f43      	subs	r3, r0, #5
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	2376      	movs	r3, #118	@ 0x76
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	4690      	mov	r8, r2
 8000c00:	2000      	movs	r0, #0
 8000c02:	e7b0      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c04:	2303      	movs	r3, #3
 8000c06:	464a      	mov	r2, r9
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	33fc      	adds	r3, #252	@ 0xfc
 8000c10:	e7a9      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c12:	000d      	movs	r5, r1
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	2200      	movs	r2, #0
 8000c18:	05c0      	lsls	r0, r0, #23
 8000c1a:	07ed      	lsls	r5, r5, #31
 8000c1c:	4310      	orrs	r0, r2
 8000c1e:	4328      	orrs	r0, r5
 8000c20:	bce0      	pop	{r5, r6, r7}
 8000c22:	46ba      	mov	sl, r7
 8000c24:	46b1      	mov	r9, r6
 8000c26:	46a8      	mov	r8, r5
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	000d      	movs	r5, r1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e7f2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c32:	4653      	mov	r3, sl
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d0ed      	beq.n	8000c14 <__aeabi_fdiv+0x100>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d033      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <__aeabi_fdiv+0x13a>
 8000c42:	2000      	movs	r0, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	e7e7      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c48:	0035      	movs	r5, r6
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d07a      	beq.n	8000d44 <__aeabi_fdiv+0x230>
 8000c4e:	003b      	movs	r3, r7
 8000c50:	337f      	adds	r3, #127	@ 0x7f
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd2d      	ble.n	8000cb2 <__aeabi_fdiv+0x19e>
 8000c56:	4642      	mov	r2, r8
 8000c58:	0752      	lsls	r2, r2, #29
 8000c5a:	d007      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	4641      	mov	r1, r8
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a04      	cmp	r2, #4
 8000c64:	d002      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c66:	2204      	movs	r2, #4
 8000c68:	4694      	mov	ip, r2
 8000c6a:	44e0      	add	r8, ip
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	d505      	bpl.n	8000c7e <__aeabi_fdiv+0x16a>
 8000c72:	4642      	mov	r2, r8
 8000c74:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <__aeabi_fdiv+0x23c>)
 8000c76:	401a      	ands	r2, r3
 8000c78:	003b      	movs	r3, r7
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	3380      	adds	r3, #128	@ 0x80
 8000c7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c80:	dcc8      	bgt.n	8000c14 <__aeabi_fdiv+0x100>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0192      	lsls	r2, r2, #6
 8000c86:	0a52      	lsrs	r2, r2, #9
 8000c88:	b2d8      	uxtb	r0, r3
 8000c8a:	e7c5      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	2500      	movs	r5, #0
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	03d2      	lsls	r2, r2, #15
 8000c94:	e7c0      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c96:	2280      	movs	r2, #128	@ 0x80
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	4214      	tst	r4, r2
 8000c9c:	d002      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	d049      	beq.n	8000d38 <__aeabi_fdiv+0x224>
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	03d2      	lsls	r2, r2, #15
 8000ca8:	4322      	orrs	r2, r4
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	20ff      	movs	r0, #255	@ 0xff
 8000cae:	0a52      	lsrs	r2, r2, #9
 8000cb0:	e7b2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b1b      	cmp	r3, #27
 8000cb8:	dcc3      	bgt.n	8000c42 <__aeabi_fdiv+0x12e>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	40da      	lsrs	r2, r3
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	379e      	adds	r7, #158	@ 0x9e
 8000cc2:	40bb      	lsls	r3, r7
 8000cc4:	1e59      	subs	r1, r3, #1
 8000cc6:	418b      	sbcs	r3, r1
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	0753      	lsls	r3, r2, #29
 8000ccc:	d004      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cce:	230f      	movs	r3, #15
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0153      	lsls	r3, r2, #5
 8000cda:	d529      	bpl.n	8000d30 <__aeabi_fdiv+0x21c>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e79a      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	0163      	lsls	r3, r4, #5
 8000ce6:	0155      	lsls	r5, r2, #5
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d215      	bcs.n	8000d18 <__aeabi_fdiv+0x204>
 8000cec:	201b      	movs	r0, #27
 8000cee:	2200      	movs	r2, #0
 8000cf0:	3f01      	subs	r7, #1
 8000cf2:	2601      	movs	r6, #1
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	db01      	blt.n	8000d02 <__aeabi_fdiv+0x1ee>
 8000cfe:	429d      	cmp	r5, r3
 8000d00:	d801      	bhi.n	8000d06 <__aeabi_fdiv+0x1f2>
 8000d02:	1b5b      	subs	r3, r3, r5
 8000d04:	4332      	orrs	r2, r6
 8000d06:	3801      	subs	r0, #1
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <__aeabi_fdiv+0x1e0>
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	4183      	sbcs	r3, r0
 8000d10:	4313      	orrs	r3, r2
 8000d12:	4698      	mov	r8, r3
 8000d14:	000d      	movs	r5, r1
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fdiv+0x13a>
 8000d18:	201a      	movs	r0, #26
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	1b5b      	subs	r3, r3, r5
 8000d1e:	e7e8      	b.n	8000cf2 <__aeabi_fdiv+0x1de>
 8000d20:	3b02      	subs	r3, #2
 8000d22:	425a      	negs	r2, r3
 8000d24:	4153      	adcs	r3, r2
 8000d26:	425b      	negs	r3, r3
 8000d28:	0035      	movs	r5, r6
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e773      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	2000      	movs	r0, #0
 8000d34:	0a52      	lsrs	r2, r2, #9
 8000d36:	e76f      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	0252      	lsls	r2, r2, #9
 8000d3c:	0035      	movs	r5, r6
 8000d3e:	20ff      	movs	r0, #255	@ 0xff
 8000d40:	0a52      	lsrs	r2, r2, #9
 8000d42:	e769      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d44:	4644      	mov	r4, r8
 8000d46:	e7ad      	b.n	8000ca4 <__aeabi_fdiv+0x190>
 8000d48:	08017474 	.word	0x08017474
 8000d4c:	080174b4 	.word	0x080174b4
 8000d50:	f7ffffff 	.word	0xf7ffffff

08000d54 <__eqsf2>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	024e      	lsls	r6, r1, #9
 8000d5a:	004c      	lsls	r4, r1, #1
 8000d5c:	0245      	lsls	r5, r0, #9
 8000d5e:	0a6d      	lsrs	r5, r5, #9
 8000d60:	0e12      	lsrs	r2, r2, #24
 8000d62:	0fc3      	lsrs	r3, r0, #31
 8000d64:	0a76      	lsrs	r6, r6, #9
 8000d66:	0e24      	lsrs	r4, r4, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d010      	beq.n	8000d90 <__eqsf2+0x3c>
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d00c      	beq.n	8000d8c <__eqsf2+0x38>
 8000d72:	2001      	movs	r0, #1
 8000d74:	42a2      	cmp	r2, r4
 8000d76:	d10a      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d78:	42b5      	cmp	r5, r6
 8000d7a:	d108      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d00f      	beq.n	8000da0 <__eqsf2+0x4c>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d104      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d84:	0028      	movs	r0, r5
 8000d86:	1e43      	subs	r3, r0, #1
 8000d88:	4198      	sbcs	r0, r3
 8000d8a:	e000      	b.n	8000d8e <__eqsf2+0x3a>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	2001      	movs	r0, #1
 8000d92:	2cff      	cmp	r4, #255	@ 0xff
 8000d94:	d1fb      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d96:	4335      	orrs	r5, r6
 8000d98:	d1f9      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d9a:	404b      	eors	r3, r1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	e7f6      	b.n	8000d8e <__eqsf2+0x3a>
 8000da0:	2000      	movs	r0, #0
 8000da2:	e7f4      	b.n	8000d8e <__eqsf2+0x3a>

08000da4 <__gesf2>:
 8000da4:	b530      	push	{r4, r5, lr}
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	0244      	lsls	r4, r0, #9
 8000daa:	024d      	lsls	r5, r1, #9
 8000dac:	0fc3      	lsrs	r3, r0, #31
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	0e12      	lsrs	r2, r2, #24
 8000db4:	0a6d      	lsrs	r5, r5, #9
 8000db6:	0e00      	lsrs	r0, r0, #24
 8000db8:	0fc9      	lsrs	r1, r1, #31
 8000dba:	2aff      	cmp	r2, #255	@ 0xff
 8000dbc:	d019      	beq.n	8000df2 <__gesf2+0x4e>
 8000dbe:	28ff      	cmp	r0, #255	@ 0xff
 8000dc0:	d00b      	beq.n	8000dda <__gesf2+0x36>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d11e      	bne.n	8000e04 <__gesf2+0x60>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d10b      	bne.n	8000de2 <__gesf2+0x3e>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d027      	beq.n	8000e1e <__gesf2+0x7a>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d134      	bne.n	8000e3c <__gesf2+0x98>
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d02f      	beq.n	8000e36 <__gesf2+0x92>
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	bd30      	pop	{r4, r5, pc}
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d128      	bne.n	8000e30 <__gesf2+0x8c>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d101      	bne.n	8000de6 <__gesf2+0x42>
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d0f5      	beq.n	8000dd2 <__gesf2+0x2e>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d107      	bne.n	8000dfa <__gesf2+0x56>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d023      	beq.n	8000e36 <__gesf2+0x92>
 8000dee:	0018      	movs	r0, r3
 8000df0:	e7f2      	b.n	8000dd8 <__gesf2+0x34>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d11c      	bne.n	8000e30 <__gesf2+0x8c>
 8000df6:	28ff      	cmp	r0, #255	@ 0xff
 8000df8:	d014      	beq.n	8000e24 <__gesf2+0x80>
 8000dfa:	1e58      	subs	r0, r3, #1
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	4018      	ands	r0, r3
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7e9      	b.n	8000dd8 <__gesf2+0x34>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d0f8      	beq.n	8000dfa <__gesf2+0x56>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d1f6      	bne.n	8000dfa <__gesf2+0x56>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	dcf4      	bgt.n	8000dfa <__gesf2+0x56>
 8000e10:	dbeb      	blt.n	8000dea <__gesf2+0x46>
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	d8f1      	bhi.n	8000dfa <__gesf2+0x56>
 8000e16:	2000      	movs	r0, #0
 8000e18:	42ac      	cmp	r4, r5
 8000e1a:	d2dd      	bcs.n	8000dd8 <__gesf2+0x34>
 8000e1c:	e7e5      	b.n	8000dea <__gesf2+0x46>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d0da      	beq.n	8000dd8 <__gesf2+0x34>
 8000e22:	e7ea      	b.n	8000dfa <__gesf2+0x56>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d103      	bne.n	8000e30 <__gesf2+0x8c>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d1e6      	bne.n	8000dfa <__gesf2+0x56>
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7d3      	b.n	8000dd8 <__gesf2+0x34>
 8000e30:	2002      	movs	r0, #2
 8000e32:	4240      	negs	r0, r0
 8000e34:	e7d0      	b.n	8000dd8 <__gesf2+0x34>
 8000e36:	2001      	movs	r0, #1
 8000e38:	4240      	negs	r0, r0
 8000e3a:	e7cd      	b.n	8000dd8 <__gesf2+0x34>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d0e8      	beq.n	8000e12 <__gesf2+0x6e>
 8000e40:	e7db      	b.n	8000dfa <__gesf2+0x56>
 8000e42:	46c0      	nop			@ (mov r8, r8)

08000e44 <__lesf2>:
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0244      	lsls	r4, r0, #9
 8000e4a:	024d      	lsls	r5, r1, #9
 8000e4c:	0fc3      	lsrs	r3, r0, #31
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	0a6d      	lsrs	r5, r5, #9
 8000e56:	0e00      	lsrs	r0, r0, #24
 8000e58:	0fc9      	lsrs	r1, r1, #31
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d01a      	beq.n	8000e94 <__lesf2+0x50>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d00e      	beq.n	8000e80 <__lesf2+0x3c>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d11e      	bne.n	8000ea4 <__lesf2+0x60>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d10e      	bne.n	8000e88 <__lesf2+0x44>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d02a      	beq.n	8000ec4 <__lesf2+0x80>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d00c      	beq.n	8000e8c <__lesf2+0x48>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d01d      	beq.n	8000eb2 <__lesf2+0x6e>
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	2302      	movs	r3, #2
 8000e7a:	4018      	ands	r0, r3
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e010      	b.n	8000ea2 <__lesf2+0x5e>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d10d      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d120      	bne.n	8000eca <__lesf2+0x86>
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d11e      	bne.n	8000eca <__lesf2+0x86>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d023      	beq.n	8000ed8 <__lesf2+0x94>
 8000e90:	0008      	movs	r0, r1
 8000e92:	e006      	b.n	8000ea2 <__lesf2+0x5e>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d103      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e98:	28ff      	cmp	r0, #255	@ 0xff
 8000e9a:	d1ec      	bne.n	8000e76 <__lesf2+0x32>
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d017      	beq.n	8000ed0 <__lesf2+0x8c>
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0e6      	beq.n	8000e76 <__lesf2+0x32>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1e4      	bne.n	8000e76 <__lesf2+0x32>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	dce2      	bgt.n	8000e76 <__lesf2+0x32>
 8000eb0:	db04      	blt.n	8000ebc <__lesf2+0x78>
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d8df      	bhi.n	8000e76 <__lesf2+0x32>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d2f2      	bcs.n	8000ea2 <__lesf2+0x5e>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <__lesf2+0x94>
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	e7ee      	b.n	8000ea2 <__lesf2+0x5e>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d0ec      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ec8:	e7d5      	b.n	8000e76 <__lesf2+0x32>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1d3      	bne.n	8000e76 <__lesf2+0x32>
 8000ece:	e7f5      	b.n	8000ebc <__lesf2+0x78>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d0e5      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ed6:	e7ce      	b.n	8000e76 <__lesf2+0x32>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4240      	negs	r0, r0
 8000edc:	e7e1      	b.n	8000ea2 <__lesf2+0x5e>
 8000ede:	46c0      	nop			@ (mov r8, r8)

08000ee0 <__aeabi_fmul>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	464f      	mov	r7, r9
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	46d6      	mov	lr, sl
 8000ee8:	0243      	lsls	r3, r0, #9
 8000eea:	0a5b      	lsrs	r3, r3, #9
 8000eec:	0045      	lsls	r5, r0, #1
 8000eee:	b5c0      	push	{r6, r7, lr}
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	1c0f      	adds	r7, r1, #0
 8000ef4:	0e2d      	lsrs	r5, r5, #24
 8000ef6:	0fc6      	lsrs	r6, r0, #31
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fmul+0x1e>
 8000efc:	e088      	b.n	8001010 <__aeabi_fmul+0x130>
 8000efe:	2dff      	cmp	r5, #255	@ 0xff
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fmul+0x24>
 8000f02:	e08d      	b.n	8001020 <__aeabi_fmul+0x140>
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4691      	mov	r9, r2
 8000f10:	4698      	mov	r8, r3
 8000f12:	469a      	mov	sl, r3
 8000f14:	3d7f      	subs	r5, #127	@ 0x7f
 8000f16:	027c      	lsls	r4, r7, #9
 8000f18:	007b      	lsls	r3, r7, #1
 8000f1a:	0a64      	lsrs	r4, r4, #9
 8000f1c:	0e1b      	lsrs	r3, r3, #24
 8000f1e:	0fff      	lsrs	r7, r7, #31
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d068      	beq.n	8000ff6 <__aeabi_fmul+0x116>
 8000f24:	2bff      	cmp	r3, #255	@ 0xff
 8000f26:	d021      	beq.n	8000f6c <__aeabi_fmul+0x8c>
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	00e4      	lsls	r4, r4, #3
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	4642      	mov	r2, r8
 8000f32:	3b7f      	subs	r3, #127	@ 0x7f
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	2100      	movs	r1, #0
 8000f38:	1c5d      	adds	r5, r3, #1
 8000f3a:	2a0a      	cmp	r2, #10
 8000f3c:	dc2e      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8000f3e:	407e      	eors	r6, r7
 8000f40:	4642      	mov	r2, r8
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	dc23      	bgt.n	8000f8e <__aeabi_fmul+0xae>
 8000f46:	3a01      	subs	r2, #1
 8000f48:	2a01      	cmp	r2, #1
 8000f4a:	d900      	bls.n	8000f4e <__aeabi_fmul+0x6e>
 8000f4c:	e0bd      	b.n	80010ca <__aeabi_fmul+0x1ea>
 8000f4e:	2902      	cmp	r1, #2
 8000f50:	d06e      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000f52:	2901      	cmp	r1, #1
 8000f54:	d12c      	bne.n	8000fb0 <__aeabi_fmul+0xd0>
 8000f56:	2000      	movs	r0, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	05c0      	lsls	r0, r0, #23
 8000f5c:	07f6      	lsls	r6, r6, #31
 8000f5e:	4310      	orrs	r0, r2
 8000f60:	4330      	orrs	r0, r6
 8000f62:	bce0      	pop	{r5, r6, r7}
 8000f64:	46ba      	mov	sl, r7
 8000f66:	46b1      	mov	r9, r6
 8000f68:	46a8      	mov	r8, r5
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	33ff      	adds	r3, #255	@ 0xff
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d065      	beq.n	8001040 <__aeabi_fmul+0x160>
 8000f74:	2203      	movs	r2, #3
 8000f76:	4641      	mov	r1, r8
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	0032      	movs	r2, r6
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	4688      	mov	r8, r1
 8000f80:	407a      	eors	r2, r7
 8000f82:	35ff      	adds	r5, #255	@ 0xff
 8000f84:	290a      	cmp	r1, #10
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_fmul+0xaa>
 8000f88:	e0d8      	b.n	800113c <__aeabi_fmul+0x25c>
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4640      	mov	r0, r8
 8000f90:	2201      	movs	r2, #1
 8000f92:	4082      	lsls	r2, r0
 8000f94:	20a6      	movs	r0, #166	@ 0xa6
 8000f96:	00c0      	lsls	r0, r0, #3
 8000f98:	4202      	tst	r2, r0
 8000f9a:	d020      	beq.n	8000fde <__aeabi_fmul+0xfe>
 8000f9c:	4653      	mov	r3, sl
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d046      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fmul+0xc8>
 8000fa6:	e0bb      	b.n	8001120 <__aeabi_fmul+0x240>
 8000fa8:	4651      	mov	r1, sl
 8000faa:	464c      	mov	r4, r9
 8000fac:	2901      	cmp	r1, #1
 8000fae:	d0d2      	beq.n	8000f56 <__aeabi_fmul+0x76>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	337f      	adds	r3, #127	@ 0x7f
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd70      	ble.n	800109a <__aeabi_fmul+0x1ba>
 8000fb8:	0762      	lsls	r2, r4, #29
 8000fba:	d004      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	4022      	ands	r2, r4
 8000fc0:	2a04      	cmp	r2, #4
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	0122      	lsls	r2, r4, #4
 8000fc8:	d503      	bpl.n	8000fd2 <__aeabi_fmul+0xf2>
 8000fca:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <__aeabi_fmul+0x278>)
 8000fcc:	401c      	ands	r4, r3
 8000fce:	002b      	movs	r3, r5
 8000fd0:	3380      	adds	r3, #128	@ 0x80
 8000fd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fd4:	dc2c      	bgt.n	8001030 <__aeabi_fmul+0x150>
 8000fd6:	01a2      	lsls	r2, r4, #6
 8000fd8:	0a52      	lsrs	r2, r2, #9
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	e7bd      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8000fde:	2090      	movs	r0, #144	@ 0x90
 8000fe0:	0080      	lsls	r0, r0, #2
 8000fe2:	4202      	tst	r2, r0
 8000fe4:	d127      	bne.n	8001036 <__aeabi_fmul+0x156>
 8000fe6:	38b9      	subs	r0, #185	@ 0xb9
 8000fe8:	38ff      	subs	r0, #255	@ 0xff
 8000fea:	4210      	tst	r0, r2
 8000fec:	d06d      	beq.n	80010ca <__aeabi_fmul+0x1ea>
 8000fee:	003e      	movs	r6, r7
 8000ff0:	46a1      	mov	r9, r4
 8000ff2:	468a      	mov	sl, r1
 8000ff4:	e7d2      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d141      	bne.n	800107e <__aeabi_fmul+0x19e>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4690      	mov	r8, r2
 8001002:	002b      	movs	r3, r5
 8001004:	4642      	mov	r2, r8
 8001006:	2101      	movs	r1, #1
 8001008:	1c5d      	adds	r5, r3, #1
 800100a:	2a0a      	cmp	r2, #10
 800100c:	dd97      	ble.n	8000f3e <__aeabi_fmul+0x5e>
 800100e:	e7c5      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d126      	bne.n	8001062 <__aeabi_fmul+0x182>
 8001014:	2304      	movs	r3, #4
 8001016:	4698      	mov	r8, r3
 8001018:	3b03      	subs	r3, #3
 800101a:	2500      	movs	r5, #0
 800101c:	469a      	mov	sl, r3
 800101e:	e77a      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <__aeabi_fmul+0x176>
 8001024:	2308      	movs	r3, #8
 8001026:	4698      	mov	r8, r3
 8001028:	3b06      	subs	r3, #6
 800102a:	25ff      	movs	r5, #255	@ 0xff
 800102c:	469a      	mov	sl, r3
 800102e:	e772      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001030:	20ff      	movs	r0, #255	@ 0xff
 8001032:	2200      	movs	r2, #0
 8001034:	e791      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	2600      	movs	r6, #0
 800103a:	20ff      	movs	r0, #255	@ 0xff
 800103c:	03d2      	lsls	r2, r2, #15
 800103e:	e78c      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001040:	4641      	mov	r1, r8
 8001042:	2202      	movs	r2, #2
 8001044:	3501      	adds	r5, #1
 8001046:	4311      	orrs	r1, r2
 8001048:	4688      	mov	r8, r1
 800104a:	35ff      	adds	r5, #255	@ 0xff
 800104c:	290a      	cmp	r1, #10
 800104e:	dca5      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8001050:	2102      	movs	r1, #2
 8001052:	407e      	eors	r6, r7
 8001054:	e774      	b.n	8000f40 <__aeabi_fmul+0x60>
 8001056:	230c      	movs	r3, #12
 8001058:	4698      	mov	r8, r3
 800105a:	3b09      	subs	r3, #9
 800105c:	25ff      	movs	r5, #255	@ 0xff
 800105e:	469a      	mov	sl, r3
 8001060:	e759      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001062:	0018      	movs	r0, r3
 8001064:	f002 fa6a 	bl	800353c <__clzsi2>
 8001068:	464a      	mov	r2, r9
 800106a:	1f43      	subs	r3, r0, #5
 800106c:	2576      	movs	r5, #118	@ 0x76
 800106e:	409a      	lsls	r2, r3
 8001070:	2300      	movs	r3, #0
 8001072:	426d      	negs	r5, r5
 8001074:	4691      	mov	r9, r2
 8001076:	4698      	mov	r8, r3
 8001078:	469a      	mov	sl, r3
 800107a:	1a2d      	subs	r5, r5, r0
 800107c:	e74b      	b.n	8000f16 <__aeabi_fmul+0x36>
 800107e:	0020      	movs	r0, r4
 8001080:	f002 fa5c 	bl	800353c <__clzsi2>
 8001084:	4642      	mov	r2, r8
 8001086:	1f43      	subs	r3, r0, #5
 8001088:	409c      	lsls	r4, r3
 800108a:	1a2b      	subs	r3, r5, r0
 800108c:	3b76      	subs	r3, #118	@ 0x76
 800108e:	2100      	movs	r1, #0
 8001090:	1c5d      	adds	r5, r3, #1
 8001092:	2a0a      	cmp	r2, #10
 8001094:	dc00      	bgt.n	8001098 <__aeabi_fmul+0x1b8>
 8001096:	e752      	b.n	8000f3e <__aeabi_fmul+0x5e>
 8001098:	e780      	b.n	8000f9c <__aeabi_fmul+0xbc>
 800109a:	2201      	movs	r2, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b1b      	cmp	r3, #27
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_fmul+0x1c4>
 80010a2:	e758      	b.n	8000f56 <__aeabi_fmul+0x76>
 80010a4:	359e      	adds	r5, #158	@ 0x9e
 80010a6:	0022      	movs	r2, r4
 80010a8:	40ac      	lsls	r4, r5
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	1e63      	subs	r3, r4, #1
 80010ae:	419c      	sbcs	r4, r3
 80010b0:	4322      	orrs	r2, r4
 80010b2:	0753      	lsls	r3, r2, #29
 80010b4:	d004      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010b6:	230f      	movs	r3, #15
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d000      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010be:	3204      	adds	r2, #4
 80010c0:	0153      	lsls	r3, r2, #5
 80010c2:	d537      	bpl.n	8001134 <__aeabi_fmul+0x254>
 80010c4:	2001      	movs	r0, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	e747      	b.n	8000f5a <__aeabi_fmul+0x7a>
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	464a      	mov	r2, r9
 80010ce:	0424      	lsls	r4, r4, #16
 80010d0:	0c24      	lsrs	r4, r4, #16
 80010d2:	0027      	movs	r7, r4
 80010d4:	0c10      	lsrs	r0, r2, #16
 80010d6:	0412      	lsls	r2, r2, #16
 80010d8:	0c12      	lsrs	r2, r2, #16
 80010da:	4344      	muls	r4, r0
 80010dc:	4357      	muls	r7, r2
 80010de:	4348      	muls	r0, r1
 80010e0:	4351      	muls	r1, r2
 80010e2:	0c3a      	lsrs	r2, r7, #16
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	1852      	adds	r2, r2, r1
 80010e8:	4294      	cmp	r4, r2
 80010ea:	d903      	bls.n	80010f4 <__aeabi_fmul+0x214>
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	0249      	lsls	r1, r1, #9
 80010f0:	468c      	mov	ip, r1
 80010f2:	4460      	add	r0, ip
 80010f4:	043f      	lsls	r7, r7, #16
 80010f6:	0411      	lsls	r1, r2, #16
 80010f8:	0c3f      	lsrs	r7, r7, #16
 80010fa:	19c9      	adds	r1, r1, r7
 80010fc:	018c      	lsls	r4, r1, #6
 80010fe:	1e67      	subs	r7, r4, #1
 8001100:	41bc      	sbcs	r4, r7
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	0e89      	lsrs	r1, r1, #26
 8001106:	1812      	adds	r2, r2, r0
 8001108:	430c      	orrs	r4, r1
 800110a:	0192      	lsls	r2, r2, #6
 800110c:	4314      	orrs	r4, r2
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	d50e      	bpl.n	8001130 <__aeabi_fmul+0x250>
 8001112:	2301      	movs	r3, #1
 8001114:	0862      	lsrs	r2, r4, #1
 8001116:	401c      	ands	r4, r3
 8001118:	4314      	orrs	r4, r2
 800111a:	e749      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 800111c:	003e      	movs	r6, r7
 800111e:	46a1      	mov	r9, r4
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	464b      	mov	r3, r9
 8001124:	03d2      	lsls	r2, r2, #15
 8001126:	431a      	orrs	r2, r3
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	20ff      	movs	r0, #255	@ 0xff
 800112c:	0a52      	lsrs	r2, r2, #9
 800112e:	e714      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001130:	001d      	movs	r5, r3
 8001132:	e73d      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 8001134:	0192      	lsls	r2, r2, #6
 8001136:	2000      	movs	r0, #0
 8001138:	0a52      	lsrs	r2, r2, #9
 800113a:	e70e      	b.n	8000f5a <__aeabi_fmul+0x7a>
 800113c:	290f      	cmp	r1, #15
 800113e:	d1ed      	bne.n	800111c <__aeabi_fmul+0x23c>
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	464b      	mov	r3, r9
 8001144:	03d2      	lsls	r2, r2, #15
 8001146:	4213      	tst	r3, r2
 8001148:	d0ea      	beq.n	8001120 <__aeabi_fmul+0x240>
 800114a:	4214      	tst	r4, r2
 800114c:	d1e8      	bne.n	8001120 <__aeabi_fmul+0x240>
 800114e:	003e      	movs	r6, r7
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	4322      	orrs	r2, r4
 8001154:	e701      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	f7ffffff 	.word	0xf7ffffff

0800115c <__aeabi_fsub>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	4647      	mov	r7, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	024e      	lsls	r6, r1, #9
 8001164:	0243      	lsls	r3, r0, #9
 8001166:	0045      	lsls	r5, r0, #1
 8001168:	0a72      	lsrs	r2, r6, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0048      	lsls	r0, r1, #1
 800116e:	b580      	push	{r7, lr}
 8001170:	4694      	mov	ip, r2
 8001172:	0a5f      	lsrs	r7, r3, #9
 8001174:	0e2d      	lsrs	r5, r5, #24
 8001176:	099b      	lsrs	r3, r3, #6
 8001178:	0e00      	lsrs	r0, r0, #24
 800117a:	0fc9      	lsrs	r1, r1, #31
 800117c:	09b6      	lsrs	r6, r6, #6
 800117e:	28ff      	cmp	r0, #255	@ 0xff
 8001180:	d024      	beq.n	80011cc <__aeabi_fsub+0x70>
 8001182:	2201      	movs	r2, #1
 8001184:	4051      	eors	r1, r2
 8001186:	1a2a      	subs	r2, r5, r0
 8001188:	428c      	cmp	r4, r1
 800118a:	d00f      	beq.n	80011ac <__aeabi_fsub+0x50>
 800118c:	2a00      	cmp	r2, #0
 800118e:	dc00      	bgt.n	8001192 <__aeabi_fsub+0x36>
 8001190:	e16a      	b.n	8001468 <__aeabi_fsub+0x30c>
 8001192:	2800      	cmp	r0, #0
 8001194:	d135      	bne.n	8001202 <__aeabi_fsub+0xa6>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x40>
 800119a:	e0a2      	b.n	80012e2 <__aeabi_fsub+0x186>
 800119c:	1e51      	subs	r1, r2, #1
 800119e:	2a01      	cmp	r2, #1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x48>
 80011a2:	e124      	b.n	80013ee <__aeabi_fsub+0x292>
 80011a4:	2aff      	cmp	r2, #255	@ 0xff
 80011a6:	d021      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011a8:	000a      	movs	r2, r1
 80011aa:	e02f      	b.n	800120c <__aeabi_fsub+0xb0>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_fsub+0x56>
 80011b0:	e167      	b.n	8001482 <__aeabi_fsub+0x326>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d05e      	beq.n	8001274 <__aeabi_fsub+0x118>
 80011b6:	2dff      	cmp	r5, #255	@ 0xff
 80011b8:	d018      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	04c9      	lsls	r1, r1, #19
 80011be:	430e      	orrs	r6, r1
 80011c0:	2a1b      	cmp	r2, #27
 80011c2:	dc00      	bgt.n	80011c6 <__aeabi_fsub+0x6a>
 80011c4:	e076      	b.n	80012b4 <__aeabi_fsub+0x158>
 80011c6:	002a      	movs	r2, r5
 80011c8:	3301      	adds	r3, #1
 80011ca:	e032      	b.n	8001232 <__aeabi_fsub+0xd6>
 80011cc:	002a      	movs	r2, r5
 80011ce:	3aff      	subs	r2, #255	@ 0xff
 80011d0:	4691      	mov	r9, r2
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d042      	beq.n	800125c <__aeabi_fsub+0x100>
 80011d6:	428c      	cmp	r4, r1
 80011d8:	d055      	beq.n	8001286 <__aeabi_fsub+0x12a>
 80011da:	464a      	mov	r2, r9
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x86>
 80011e0:	e09c      	b.n	800131c <__aeabi_fsub+0x1c0>
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x8c>
 80011e6:	e077      	b.n	80012d8 <__aeabi_fsub+0x17c>
 80011e8:	000c      	movs	r4, r1
 80011ea:	0033      	movs	r3, r6
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x98>
 80011f2:	e06e      	b.n	80012d2 <__aeabi_fsub+0x176>
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	03d2      	lsls	r2, r2, #15
 80011f8:	4313      	orrs	r3, r2
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	20ff      	movs	r0, #255	@ 0xff
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	e024      	b.n	800124c <__aeabi_fsub+0xf0>
 8001202:	2dff      	cmp	r5, #255	@ 0xff
 8001204:	d0f2      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	04c9      	lsls	r1, r1, #19
 800120a:	430e      	orrs	r6, r1
 800120c:	2101      	movs	r1, #1
 800120e:	2a1b      	cmp	r2, #27
 8001210:	dc08      	bgt.n	8001224 <__aeabi_fsub+0xc8>
 8001212:	0031      	movs	r1, r6
 8001214:	2020      	movs	r0, #32
 8001216:	40d1      	lsrs	r1, r2
 8001218:	1a82      	subs	r2, r0, r2
 800121a:	4096      	lsls	r6, r2
 800121c:	0032      	movs	r2, r6
 800121e:	1e50      	subs	r0, r2, #1
 8001220:	4182      	sbcs	r2, r0
 8001222:	4311      	orrs	r1, r2
 8001224:	1a5b      	subs	r3, r3, r1
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	d460      	bmi.n	80012ec <__aeabi_fsub+0x190>
 800122a:	2107      	movs	r1, #7
 800122c:	002a      	movs	r2, r5
 800122e:	4019      	ands	r1, r3
 8001230:	d057      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001232:	210f      	movs	r1, #15
 8001234:	4019      	ands	r1, r3
 8001236:	2904      	cmp	r1, #4
 8001238:	d000      	beq.n	800123c <__aeabi_fsub+0xe0>
 800123a:	3304      	adds	r3, #4
 800123c:	0159      	lsls	r1, r3, #5
 800123e:	d550      	bpl.n	80012e2 <__aeabi_fsub+0x186>
 8001240:	1c50      	adds	r0, r2, #1
 8001242:	2afe      	cmp	r2, #254	@ 0xfe
 8001244:	d045      	beq.n	80012d2 <__aeabi_fsub+0x176>
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	b2c0      	uxtb	r0, r0
 800124a:	0a5b      	lsrs	r3, r3, #9
 800124c:	05c0      	lsls	r0, r0, #23
 800124e:	4318      	orrs	r0, r3
 8001250:	07e4      	lsls	r4, r4, #31
 8001252:	4320      	orrs	r0, r4
 8001254:	bcc0      	pop	{r6, r7}
 8001256:	46b9      	mov	r9, r7
 8001258:	46b0      	mov	r8, r6
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125c:	2201      	movs	r2, #1
 800125e:	4051      	eors	r1, r2
 8001260:	428c      	cmp	r4, r1
 8001262:	d1ba      	bne.n	80011da <__aeabi_fsub+0x7e>
 8001264:	464a      	mov	r2, r9
 8001266:	2a00      	cmp	r2, #0
 8001268:	d010      	beq.n	800128c <__aeabi_fsub+0x130>
 800126a:	2d00      	cmp	r5, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_fsub+0x114>
 800126e:	e098      	b.n	80013a2 <__aeabi_fsub+0x246>
 8001270:	2300      	movs	r3, #0
 8001272:	e7bb      	b.n	80011ec <__aeabi_fsub+0x90>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d034      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001278:	1e51      	subs	r1, r2, #1
 800127a:	2a01      	cmp	r2, #1
 800127c:	d06e      	beq.n	800135c <__aeabi_fsub+0x200>
 800127e:	2aff      	cmp	r2, #255	@ 0xff
 8001280:	d0b4      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001282:	000a      	movs	r2, r1
 8001284:	e79c      	b.n	80011c0 <__aeabi_fsub+0x64>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x130>
 800128a:	e088      	b.n	800139e <__aeabi_fsub+0x242>
 800128c:	20fe      	movs	r0, #254	@ 0xfe
 800128e:	1c6a      	adds	r2, r5, #1
 8001290:	4210      	tst	r0, r2
 8001292:	d000      	beq.n	8001296 <__aeabi_fsub+0x13a>
 8001294:	e092      	b.n	80013bc <__aeabi_fsub+0x260>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d000      	beq.n	800129c <__aeabi_fsub+0x140>
 800129a:	e0a4      	b.n	80013e6 <__aeabi_fsub+0x28a>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x146>
 80012a0:	e0cb      	b.n	800143a <__aeabi_fsub+0x2de>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 80012a6:	e0ca      	b.n	800143e <__aeabi_fsub+0x2e2>
 80012a8:	2200      	movs	r2, #0
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	b2d0      	uxtb	r0, r2
 80012b2:	e7cb      	b.n	800124c <__aeabi_fsub+0xf0>
 80012b4:	0031      	movs	r1, r6
 80012b6:	2020      	movs	r0, #32
 80012b8:	40d1      	lsrs	r1, r2
 80012ba:	1a82      	subs	r2, r0, r2
 80012bc:	4096      	lsls	r6, r2
 80012be:	0032      	movs	r2, r6
 80012c0:	1e50      	subs	r0, r2, #1
 80012c2:	4182      	sbcs	r2, r0
 80012c4:	430a      	orrs	r2, r1
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	d5ae      	bpl.n	800122a <__aeabi_fsub+0xce>
 80012cc:	1c6a      	adds	r2, r5, #1
 80012ce:	2dfe      	cmp	r5, #254	@ 0xfe
 80012d0:	d14a      	bne.n	8001368 <__aeabi_fsub+0x20c>
 80012d2:	20ff      	movs	r0, #255	@ 0xff
 80012d4:	2300      	movs	r3, #0
 80012d6:	e7b9      	b.n	800124c <__aeabi_fsub+0xf0>
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d14b      	bne.n	8001376 <__aeabi_fsub+0x21a>
 80012de:	000c      	movs	r4, r1
 80012e0:	0033      	movs	r3, r6
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	2aff      	cmp	r2, #255	@ 0xff
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x18e>
 80012e8:	e781      	b.n	80011ee <__aeabi_fsub+0x92>
 80012ea:	e7df      	b.n	80012ac <__aeabi_fsub+0x150>
 80012ec:	019f      	lsls	r7, r3, #6
 80012ee:	09bf      	lsrs	r7, r7, #6
 80012f0:	0038      	movs	r0, r7
 80012f2:	f002 f923 	bl	800353c <__clzsi2>
 80012f6:	3805      	subs	r0, #5
 80012f8:	4087      	lsls	r7, r0
 80012fa:	4285      	cmp	r5, r0
 80012fc:	dc21      	bgt.n	8001342 <__aeabi_fsub+0x1e6>
 80012fe:	003b      	movs	r3, r7
 8001300:	2120      	movs	r1, #32
 8001302:	1b42      	subs	r2, r0, r5
 8001304:	3201      	adds	r2, #1
 8001306:	40d3      	lsrs	r3, r2
 8001308:	1a8a      	subs	r2, r1, r2
 800130a:	4097      	lsls	r7, r2
 800130c:	1e7a      	subs	r2, r7, #1
 800130e:	4197      	sbcs	r7, r2
 8001310:	2200      	movs	r2, #0
 8001312:	433b      	orrs	r3, r7
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x1be>
 8001318:	e78b      	b.n	8001232 <__aeabi_fsub+0xd6>
 800131a:	e78f      	b.n	800123c <__aeabi_fsub+0xe0>
 800131c:	20fe      	movs	r0, #254	@ 0xfe
 800131e:	1c6a      	adds	r2, r5, #1
 8001320:	4210      	tst	r0, r2
 8001322:	d112      	bne.n	800134a <__aeabi_fsub+0x1ee>
 8001324:	2d00      	cmp	r5, #0
 8001326:	d152      	bne.n	80013ce <__aeabi_fsub+0x272>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07c      	beq.n	8001426 <__aeabi_fsub+0x2ca>
 800132c:	2e00      	cmp	r6, #0
 800132e:	d0bb      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 8001330:	1b9a      	subs	r2, r3, r6
 8001332:	0150      	lsls	r0, r2, #5
 8001334:	d400      	bmi.n	8001338 <__aeabi_fsub+0x1dc>
 8001336:	e08b      	b.n	8001450 <__aeabi_fsub+0x2f4>
 8001338:	2401      	movs	r4, #1
 800133a:	2200      	movs	r2, #0
 800133c:	1af3      	subs	r3, r6, r3
 800133e:	400c      	ands	r4, r1
 8001340:	e7e8      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <__aeabi_fsub+0x340>)
 8001344:	1a2a      	subs	r2, r5, r0
 8001346:	403b      	ands	r3, r7
 8001348:	e7e4      	b.n	8001314 <__aeabi_fsub+0x1b8>
 800134a:	1b9f      	subs	r7, r3, r6
 800134c:	017a      	lsls	r2, r7, #5
 800134e:	d446      	bmi.n	80013de <__aeabi_fsub+0x282>
 8001350:	2f00      	cmp	r7, #0
 8001352:	d1cd      	bne.n	80012f0 <__aeabi_fsub+0x194>
 8001354:	2400      	movs	r4, #0
 8001356:	2000      	movs	r0, #0
 8001358:	2300      	movs	r3, #0
 800135a:	e777      	b.n	800124c <__aeabi_fsub+0xf0>
 800135c:	199b      	adds	r3, r3, r6
 800135e:	2501      	movs	r5, #1
 8001360:	3201      	adds	r2, #1
 8001362:	0159      	lsls	r1, r3, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x20c>
 8001366:	e760      	b.n	800122a <__aeabi_fsub+0xce>
 8001368:	2101      	movs	r1, #1
 800136a:	484d      	ldr	r0, [pc, #308]	@ (80014a0 <__aeabi_fsub+0x344>)
 800136c:	4019      	ands	r1, r3
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	4003      	ands	r3, r0
 8001372:	430b      	orrs	r3, r1
 8001374:	e7ce      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001376:	1e57      	subs	r7, r2, #1
 8001378:	2a01      	cmp	r2, #1
 800137a:	d05a      	beq.n	8001432 <__aeabi_fsub+0x2d6>
 800137c:	000c      	movs	r4, r1
 800137e:	2aff      	cmp	r2, #255	@ 0xff
 8001380:	d033      	beq.n	80013ea <__aeabi_fsub+0x28e>
 8001382:	2201      	movs	r2, #1
 8001384:	2f1b      	cmp	r7, #27
 8001386:	dc07      	bgt.n	8001398 <__aeabi_fsub+0x23c>
 8001388:	2120      	movs	r1, #32
 800138a:	1bc9      	subs	r1, r1, r7
 800138c:	001a      	movs	r2, r3
 800138e:	408b      	lsls	r3, r1
 8001390:	40fa      	lsrs	r2, r7
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	418b      	sbcs	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	0005      	movs	r5, r0
 800139a:	1ab3      	subs	r3, r6, r2
 800139c:	e743      	b.n	8001226 <__aeabi_fsub+0xca>
 800139e:	2d00      	cmp	r5, #0
 80013a0:	d123      	bne.n	80013ea <__aeabi_fsub+0x28e>
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d09b      	beq.n	80012e0 <__aeabi_fsub+0x184>
 80013a8:	1e51      	subs	r1, r2, #1
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d0d6      	beq.n	800135c <__aeabi_fsub+0x200>
 80013ae:	2aff      	cmp	r2, #255	@ 0xff
 80013b0:	d01b      	beq.n	80013ea <__aeabi_fsub+0x28e>
 80013b2:	291b      	cmp	r1, #27
 80013b4:	dd2c      	ble.n	8001410 <__aeabi_fsub+0x2b4>
 80013b6:	0002      	movs	r2, r0
 80013b8:	1c73      	adds	r3, r6, #1
 80013ba:	e73a      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013bc:	2aff      	cmp	r2, #255	@ 0xff
 80013be:	d088      	beq.n	80012d2 <__aeabi_fsub+0x176>
 80013c0:	199b      	adds	r3, r3, r6
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x26e>
 80013c8:	e733      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e76e      	b.n	80012ac <__aeabi_fsub+0x150>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d110      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d043      	beq.n	800145e <__aeabi_fsub+0x302>
 80013d6:	2401      	movs	r4, #1
 80013d8:	0033      	movs	r3, r6
 80013da:	400c      	ands	r4, r1
 80013dc:	e706      	b.n	80011ec <__aeabi_fsub+0x90>
 80013de:	2401      	movs	r4, #1
 80013e0:	1af7      	subs	r7, r6, r3
 80013e2:	400c      	ands	r4, r1
 80013e4:	e784      	b.n	80012f0 <__aeabi_fsub+0x194>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013ea:	0033      	movs	r3, r6
 80013ec:	e6fe      	b.n	80011ec <__aeabi_fsub+0x90>
 80013ee:	2501      	movs	r5, #1
 80013f0:	1b9b      	subs	r3, r3, r6
 80013f2:	e718      	b.n	8001226 <__aeabi_fsub+0xca>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_fsub+0x29e>
 80013f8:	e6f8      	b.n	80011ec <__aeabi_fsub+0x90>
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	03d2      	lsls	r2, r2, #15
 80013fe:	4297      	cmp	r7, r2
 8001400:	d304      	bcc.n	800140c <__aeabi_fsub+0x2b0>
 8001402:	4594      	cmp	ip, r2
 8001404:	d202      	bcs.n	800140c <__aeabi_fsub+0x2b0>
 8001406:	2401      	movs	r4, #1
 8001408:	0033      	movs	r3, r6
 800140a:	400c      	ands	r4, r1
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	e6f1      	b.n	80011f4 <__aeabi_fsub+0x98>
 8001410:	001a      	movs	r2, r3
 8001412:	2520      	movs	r5, #32
 8001414:	40ca      	lsrs	r2, r1
 8001416:	1a69      	subs	r1, r5, r1
 8001418:	408b      	lsls	r3, r1
 800141a:	1e59      	subs	r1, r3, #1
 800141c:	418b      	sbcs	r3, r1
 800141e:	4313      	orrs	r3, r2
 8001420:	0005      	movs	r5, r0
 8001422:	199b      	adds	r3, r3, r6
 8001424:	e750      	b.n	80012c8 <__aeabi_fsub+0x16c>
 8001426:	2e00      	cmp	r6, #0
 8001428:	d094      	beq.n	8001354 <__aeabi_fsub+0x1f8>
 800142a:	2401      	movs	r4, #1
 800142c:	0033      	movs	r3, r6
 800142e:	400c      	ands	r4, r1
 8001430:	e73a      	b.n	80012a8 <__aeabi_fsub+0x14c>
 8001432:	000c      	movs	r4, r1
 8001434:	2501      	movs	r5, #1
 8001436:	1af3      	subs	r3, r6, r3
 8001438:	e6f5      	b.n	8001226 <__aeabi_fsub+0xca>
 800143a:	0033      	movs	r3, r6
 800143c:	e734      	b.n	80012a8 <__aeabi_fsub+0x14c>
 800143e:	199b      	adds	r3, r3, r6
 8001440:	2200      	movs	r2, #0
 8001442:	0159      	lsls	r1, r3, #5
 8001444:	d5c1      	bpl.n	80013ca <__aeabi_fsub+0x26e>
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <__aeabi_fsub+0x340>)
 8001448:	4013      	ands	r3, r2
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	2201      	movs	r2, #1
 800144e:	e72d      	b.n	80012ac <__aeabi_fsub+0x150>
 8001450:	2a00      	cmp	r2, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_fsub+0x2fa>
 8001454:	e77e      	b.n	8001354 <__aeabi_fsub+0x1f8>
 8001456:	0013      	movs	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	e726      	b.n	80012ac <__aeabi_fsub+0x150>
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	2400      	movs	r4, #0
 8001462:	20ff      	movs	r0, #255	@ 0xff
 8001464:	03db      	lsls	r3, r3, #15
 8001466:	e6f1      	b.n	800124c <__aeabi_fsub+0xf0>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_fsub+0x312>
 800146c:	e756      	b.n	800131c <__aeabi_fsub+0x1c0>
 800146e:	1b47      	subs	r7, r0, r5
 8001470:	003a      	movs	r2, r7
 8001472:	2d00      	cmp	r5, #0
 8001474:	d100      	bne.n	8001478 <__aeabi_fsub+0x31c>
 8001476:	e730      	b.n	80012da <__aeabi_fsub+0x17e>
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	04d2      	lsls	r2, r2, #19
 800147c:	000c      	movs	r4, r1
 800147e:	4313      	orrs	r3, r2
 8001480:	e77f      	b.n	8001382 <__aeabi_fsub+0x226>
 8001482:	2a00      	cmp	r2, #0
 8001484:	d100      	bne.n	8001488 <__aeabi_fsub+0x32c>
 8001486:	e701      	b.n	800128c <__aeabi_fsub+0x130>
 8001488:	1b41      	subs	r1, r0, r5
 800148a:	2d00      	cmp	r5, #0
 800148c:	d101      	bne.n	8001492 <__aeabi_fsub+0x336>
 800148e:	000a      	movs	r2, r1
 8001490:	e788      	b.n	80013a4 <__aeabi_fsub+0x248>
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	04d2      	lsls	r2, r2, #19
 8001496:	4313      	orrs	r3, r2
 8001498:	e78b      	b.n	80013b2 <__aeabi_fsub+0x256>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	fbffffff 	.word	0xfbffffff
 80014a0:	7dffffff 	.word	0x7dffffff

080014a4 <__aeabi_fcmpun>:
 80014a4:	0243      	lsls	r3, r0, #9
 80014a6:	024a      	lsls	r2, r1, #9
 80014a8:	0040      	lsls	r0, r0, #1
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	0a5b      	lsrs	r3, r3, #9
 80014ae:	0a52      	lsrs	r2, r2, #9
 80014b0:	0e09      	lsrs	r1, r1, #24
 80014b2:	0e00      	lsrs	r0, r0, #24
 80014b4:	28ff      	cmp	r0, #255	@ 0xff
 80014b6:	d006      	beq.n	80014c6 <__aeabi_fcmpun+0x22>
 80014b8:	2000      	movs	r0, #0
 80014ba:	29ff      	cmp	r1, #255	@ 0xff
 80014bc:	d102      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014be:	1e53      	subs	r3, r2, #1
 80014c0:	419a      	sbcs	r2, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	4770      	bx	lr
 80014c6:	38fe      	subs	r0, #254	@ 0xfe
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1fb      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_fcmpun+0x14>
 80014ce:	46c0      	nop			@ (mov r8, r8)

080014d0 <__aeabi_f2iz>:
 80014d0:	0241      	lsls	r1, r0, #9
 80014d2:	0042      	lsls	r2, r0, #1
 80014d4:	0fc3      	lsrs	r3, r0, #31
 80014d6:	0a49      	lsrs	r1, r1, #9
 80014d8:	2000      	movs	r0, #0
 80014da:	0e12      	lsrs	r2, r2, #24
 80014dc:	2a7e      	cmp	r2, #126	@ 0x7e
 80014de:	dd03      	ble.n	80014e8 <__aeabi_f2iz+0x18>
 80014e0:	2a9d      	cmp	r2, #157	@ 0x9d
 80014e2:	dd02      	ble.n	80014ea <__aeabi_f2iz+0x1a>
 80014e4:	4a09      	ldr	r2, [pc, #36]	@ (800150c <__aeabi_f2iz+0x3c>)
 80014e6:	1898      	adds	r0, r3, r2
 80014e8:	4770      	bx	lr
 80014ea:	2080      	movs	r0, #128	@ 0x80
 80014ec:	0400      	lsls	r0, r0, #16
 80014ee:	4301      	orrs	r1, r0
 80014f0:	2a95      	cmp	r2, #149	@ 0x95
 80014f2:	dc07      	bgt.n	8001504 <__aeabi_f2iz+0x34>
 80014f4:	2096      	movs	r0, #150	@ 0x96
 80014f6:	1a82      	subs	r2, r0, r2
 80014f8:	40d1      	lsrs	r1, r2
 80014fa:	4248      	negs	r0, r1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <__aeabi_f2iz+0x18>
 8001500:	0008      	movs	r0, r1
 8001502:	e7f1      	b.n	80014e8 <__aeabi_f2iz+0x18>
 8001504:	3a96      	subs	r2, #150	@ 0x96
 8001506:	4091      	lsls	r1, r2
 8001508:	e7f7      	b.n	80014fa <__aeabi_f2iz+0x2a>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	7fffffff 	.word	0x7fffffff

08001510 <__aeabi_i2f>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	2800      	cmp	r0, #0
 8001514:	d013      	beq.n	800153e <__aeabi_i2f+0x2e>
 8001516:	17c3      	asrs	r3, r0, #31
 8001518:	18c5      	adds	r5, r0, r3
 800151a:	405d      	eors	r5, r3
 800151c:	0fc4      	lsrs	r4, r0, #31
 800151e:	0028      	movs	r0, r5
 8001520:	f002 f80c 	bl	800353c <__clzsi2>
 8001524:	239e      	movs	r3, #158	@ 0x9e
 8001526:	0001      	movs	r1, r0
 8001528:	1a1b      	subs	r3, r3, r0
 800152a:	2b96      	cmp	r3, #150	@ 0x96
 800152c:	dc0f      	bgt.n	800154e <__aeabi_i2f+0x3e>
 800152e:	2808      	cmp	r0, #8
 8001530:	d034      	beq.n	800159c <__aeabi_i2f+0x8c>
 8001532:	3908      	subs	r1, #8
 8001534:	408d      	lsls	r5, r1
 8001536:	026d      	lsls	r5, r5, #9
 8001538:	0a6d      	lsrs	r5, r5, #9
 800153a:	b2d8      	uxtb	r0, r3
 800153c:	e002      	b.n	8001544 <__aeabi_i2f+0x34>
 800153e:	2400      	movs	r4, #0
 8001540:	2000      	movs	r0, #0
 8001542:	2500      	movs	r5, #0
 8001544:	05c0      	lsls	r0, r0, #23
 8001546:	4328      	orrs	r0, r5
 8001548:	07e4      	lsls	r4, r4, #31
 800154a:	4320      	orrs	r0, r4
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	2b99      	cmp	r3, #153	@ 0x99
 8001550:	dc16      	bgt.n	8001580 <__aeabi_i2f+0x70>
 8001552:	1f42      	subs	r2, r0, #5
 8001554:	2805      	cmp	r0, #5
 8001556:	d000      	beq.n	800155a <__aeabi_i2f+0x4a>
 8001558:	4095      	lsls	r5, r2
 800155a:	002a      	movs	r2, r5
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <__aeabi_i2f+0x94>)
 800155e:	4002      	ands	r2, r0
 8001560:	076e      	lsls	r6, r5, #29
 8001562:	d009      	beq.n	8001578 <__aeabi_i2f+0x68>
 8001564:	260f      	movs	r6, #15
 8001566:	4035      	ands	r5, r6
 8001568:	2d04      	cmp	r5, #4
 800156a:	d005      	beq.n	8001578 <__aeabi_i2f+0x68>
 800156c:	3204      	adds	r2, #4
 800156e:	0155      	lsls	r5, r2, #5
 8001570:	d502      	bpl.n	8001578 <__aeabi_i2f+0x68>
 8001572:	239f      	movs	r3, #159	@ 0x9f
 8001574:	4002      	ands	r2, r0
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	0192      	lsls	r2, r2, #6
 800157a:	0a55      	lsrs	r5, r2, #9
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	e7e1      	b.n	8001544 <__aeabi_i2f+0x34>
 8001580:	2205      	movs	r2, #5
 8001582:	1a12      	subs	r2, r2, r0
 8001584:	0028      	movs	r0, r5
 8001586:	40d0      	lsrs	r0, r2
 8001588:	0002      	movs	r2, r0
 800158a:	0008      	movs	r0, r1
 800158c:	301b      	adds	r0, #27
 800158e:	4085      	lsls	r5, r0
 8001590:	0028      	movs	r0, r5
 8001592:	1e45      	subs	r5, r0, #1
 8001594:	41a8      	sbcs	r0, r5
 8001596:	4302      	orrs	r2, r0
 8001598:	0015      	movs	r5, r2
 800159a:	e7de      	b.n	800155a <__aeabi_i2f+0x4a>
 800159c:	026d      	lsls	r5, r5, #9
 800159e:	2096      	movs	r0, #150	@ 0x96
 80015a0:	0a6d      	lsrs	r5, r5, #9
 80015a2:	e7cf      	b.n	8001544 <__aeabi_i2f+0x34>
 80015a4:	fbffffff 	.word	0xfbffffff

080015a8 <__aeabi_ui2f>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	1e04      	subs	r4, r0, #0
 80015ac:	d00e      	beq.n	80015cc <__aeabi_ui2f+0x24>
 80015ae:	f001 ffc5 	bl	800353c <__clzsi2>
 80015b2:	239e      	movs	r3, #158	@ 0x9e
 80015b4:	0001      	movs	r1, r0
 80015b6:	1a1b      	subs	r3, r3, r0
 80015b8:	2b96      	cmp	r3, #150	@ 0x96
 80015ba:	dc0c      	bgt.n	80015d6 <__aeabi_ui2f+0x2e>
 80015bc:	2808      	cmp	r0, #8
 80015be:	d02f      	beq.n	8001620 <__aeabi_ui2f+0x78>
 80015c0:	3908      	subs	r1, #8
 80015c2:	408c      	lsls	r4, r1
 80015c4:	0264      	lsls	r4, r4, #9
 80015c6:	0a64      	lsrs	r4, r4, #9
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	e001      	b.n	80015d0 <__aeabi_ui2f+0x28>
 80015cc:	2000      	movs	r0, #0
 80015ce:	2400      	movs	r4, #0
 80015d0:	05c0      	lsls	r0, r0, #23
 80015d2:	4320      	orrs	r0, r4
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	2b99      	cmp	r3, #153	@ 0x99
 80015d8:	dc16      	bgt.n	8001608 <__aeabi_ui2f+0x60>
 80015da:	1f42      	subs	r2, r0, #5
 80015dc:	2805      	cmp	r0, #5
 80015de:	d000      	beq.n	80015e2 <__aeabi_ui2f+0x3a>
 80015e0:	4094      	lsls	r4, r2
 80015e2:	0022      	movs	r2, r4
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <__aeabi_ui2f+0x80>)
 80015e6:	4002      	ands	r2, r0
 80015e8:	0765      	lsls	r5, r4, #29
 80015ea:	d009      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015ec:	250f      	movs	r5, #15
 80015ee:	402c      	ands	r4, r5
 80015f0:	2c04      	cmp	r4, #4
 80015f2:	d005      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015f4:	3204      	adds	r2, #4
 80015f6:	0154      	lsls	r4, r2, #5
 80015f8:	d502      	bpl.n	8001600 <__aeabi_ui2f+0x58>
 80015fa:	239f      	movs	r3, #159	@ 0x9f
 80015fc:	4002      	ands	r2, r0
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	0192      	lsls	r2, r2, #6
 8001602:	0a54      	lsrs	r4, r2, #9
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	e7e3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001608:	0002      	movs	r2, r0
 800160a:	0020      	movs	r0, r4
 800160c:	321b      	adds	r2, #27
 800160e:	4090      	lsls	r0, r2
 8001610:	0002      	movs	r2, r0
 8001612:	1e50      	subs	r0, r2, #1
 8001614:	4182      	sbcs	r2, r0
 8001616:	2005      	movs	r0, #5
 8001618:	1a40      	subs	r0, r0, r1
 800161a:	40c4      	lsrs	r4, r0
 800161c:	4314      	orrs	r4, r2
 800161e:	e7e0      	b.n	80015e2 <__aeabi_ui2f+0x3a>
 8001620:	0264      	lsls	r4, r4, #9
 8001622:	2096      	movs	r0, #150	@ 0x96
 8001624:	0a64      	lsrs	r4, r4, #9
 8001626:	e7d3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001628:	fbffffff 	.word	0xfbffffff

0800162c <__aeabi_dadd>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4657      	mov	r7, sl
 8001630:	464e      	mov	r6, r9
 8001632:	4645      	mov	r5, r8
 8001634:	46de      	mov	lr, fp
 8001636:	b5e0      	push	{r5, r6, r7, lr}
 8001638:	b083      	sub	sp, #12
 800163a:	9000      	str	r0, [sp, #0]
 800163c:	9101      	str	r1, [sp, #4]
 800163e:	030c      	lsls	r4, r1, #12
 8001640:	004f      	lsls	r7, r1, #1
 8001642:	0fce      	lsrs	r6, r1, #31
 8001644:	0a61      	lsrs	r1, r4, #9
 8001646:	9c00      	ldr	r4, [sp, #0]
 8001648:	031d      	lsls	r5, r3, #12
 800164a:	0f64      	lsrs	r4, r4, #29
 800164c:	430c      	orrs	r4, r1
 800164e:	9900      	ldr	r1, [sp, #0]
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	00c8      	lsls	r0, r1, #3
 8001656:	0059      	lsls	r1, r3, #1
 8001658:	0d4b      	lsrs	r3, r1, #21
 800165a:	4699      	mov	r9, r3
 800165c:	9a00      	ldr	r2, [sp, #0]
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	0fd9      	lsrs	r1, r3, #31
 8001664:	0f53      	lsrs	r3, r2, #29
 8001666:	432b      	orrs	r3, r5
 8001668:	469a      	mov	sl, r3
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	0d7f      	lsrs	r7, r7, #21
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4694      	mov	ip, r2
 8001672:	464a      	mov	r2, r9
 8001674:	46b0      	mov	r8, r6
 8001676:	1aba      	subs	r2, r7, r2
 8001678:	428e      	cmp	r6, r1
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x52>
 800167c:	e0b0      	b.n	80017e0 <__aeabi_dadd+0x1b4>
 800167e:	2a00      	cmp	r2, #0
 8001680:	dc00      	bgt.n	8001684 <__aeabi_dadd+0x58>
 8001682:	e078      	b.n	8001776 <__aeabi_dadd+0x14a>
 8001684:	4649      	mov	r1, r9
 8001686:	2900      	cmp	r1, #0
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x60>
 800168a:	e0e9      	b.n	8001860 <__aeabi_dadd+0x234>
 800168c:	49c9      	ldr	r1, [pc, #804]	@ (80019b4 <__aeabi_dadd+0x388>)
 800168e:	428f      	cmp	r7, r1
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x68>
 8001692:	e195      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001694:	2501      	movs	r5, #1
 8001696:	2a38      	cmp	r2, #56	@ 0x38
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_dadd+0x9c>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	4653      	mov	r3, sl
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	430b      	orrs	r3, r1
 80016a2:	469a      	mov	sl, r3
 80016a4:	2a1f      	cmp	r2, #31
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dadd+0x7e>
 80016a8:	e1e7      	b.n	8001a7a <__aeabi_dadd+0x44e>
 80016aa:	2120      	movs	r1, #32
 80016ac:	4655      	mov	r5, sl
 80016ae:	1a8b      	subs	r3, r1, r2
 80016b0:	4661      	mov	r1, ip
 80016b2:	409d      	lsls	r5, r3
 80016b4:	40d1      	lsrs	r1, r2
 80016b6:	430d      	orrs	r5, r1
 80016b8:	4661      	mov	r1, ip
 80016ba:	4099      	lsls	r1, r3
 80016bc:	1e4b      	subs	r3, r1, #1
 80016be:	4199      	sbcs	r1, r3
 80016c0:	4653      	mov	r3, sl
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	430d      	orrs	r5, r1
 80016c6:	1ae4      	subs	r4, r4, r3
 80016c8:	1b45      	subs	r5, r0, r5
 80016ca:	42a8      	cmp	r0, r5
 80016cc:	4180      	sbcs	r0, r0
 80016ce:	4240      	negs	r0, r0
 80016d0:	1a24      	subs	r4, r4, r0
 80016d2:	0223      	lsls	r3, r4, #8
 80016d4:	d400      	bmi.n	80016d8 <__aeabi_dadd+0xac>
 80016d6:	e10f      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 80016d8:	0264      	lsls	r4, r4, #9
 80016da:	0a64      	lsrs	r4, r4, #9
 80016dc:	2c00      	cmp	r4, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0xb6>
 80016e0:	e139      	b.n	8001956 <__aeabi_dadd+0x32a>
 80016e2:	0020      	movs	r0, r4
 80016e4:	f001 ff2a 	bl	800353c <__clzsi2>
 80016e8:	0003      	movs	r3, r0
 80016ea:	3b08      	subs	r3, #8
 80016ec:	2120      	movs	r1, #32
 80016ee:	0028      	movs	r0, r5
 80016f0:	1aca      	subs	r2, r1, r3
 80016f2:	40d0      	lsrs	r0, r2
 80016f4:	409c      	lsls	r4, r3
 80016f6:	0002      	movs	r2, r0
 80016f8:	409d      	lsls	r5, r3
 80016fa:	4322      	orrs	r2, r4
 80016fc:	429f      	cmp	r7, r3
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dadd+0xd6>
 8001700:	e173      	b.n	80019ea <__aeabi_dadd+0x3be>
 8001702:	1bd8      	subs	r0, r3, r7
 8001704:	3001      	adds	r0, #1
 8001706:	1a09      	subs	r1, r1, r0
 8001708:	002c      	movs	r4, r5
 800170a:	408d      	lsls	r5, r1
 800170c:	40c4      	lsrs	r4, r0
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	0013      	movs	r3, r2
 8001714:	40c2      	lsrs	r2, r0
 8001716:	408b      	lsls	r3, r1
 8001718:	4325      	orrs	r5, r4
 800171a:	2700      	movs	r7, #0
 800171c:	0014      	movs	r4, r2
 800171e:	431d      	orrs	r5, r3
 8001720:	076b      	lsls	r3, r5, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dadd+0x10c>
 8001724:	230f      	movs	r3, #15
 8001726:	402b      	ands	r3, r5
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dadd+0x10c>
 800172c:	1d2b      	adds	r3, r5, #4
 800172e:	42ab      	cmp	r3, r5
 8001730:	41ad      	sbcs	r5, r5
 8001732:	426d      	negs	r5, r5
 8001734:	1964      	adds	r4, r4, r5
 8001736:	001d      	movs	r5, r3
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d400      	bmi.n	800173e <__aeabi_dadd+0x112>
 800173c:	e12d      	b.n	800199a <__aeabi_dadd+0x36e>
 800173e:	4a9d      	ldr	r2, [pc, #628]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001740:	3701      	adds	r7, #1
 8001742:	4297      	cmp	r7, r2
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x11c>
 8001746:	e0d3      	b.n	80018f0 <__aeabi_dadd+0x2c4>
 8001748:	4646      	mov	r6, r8
 800174a:	499b      	ldr	r1, [pc, #620]	@ (80019b8 <__aeabi_dadd+0x38c>)
 800174c:	08ed      	lsrs	r5, r5, #3
 800174e:	4021      	ands	r1, r4
 8001750:	074a      	lsls	r2, r1, #29
 8001752:	432a      	orrs	r2, r5
 8001754:	057c      	lsls	r4, r7, #21
 8001756:	024d      	lsls	r5, r1, #9
 8001758:	0b2d      	lsrs	r5, r5, #12
 800175a:	0d64      	lsrs	r4, r4, #21
 800175c:	0524      	lsls	r4, r4, #20
 800175e:	432c      	orrs	r4, r5
 8001760:	07f6      	lsls	r6, r6, #31
 8001762:	4334      	orrs	r4, r6
 8001764:	0010      	movs	r0, r2
 8001766:	0021      	movs	r1, r4
 8001768:	b003      	add	sp, #12
 800176a:	bcf0      	pop	{r4, r5, r6, r7}
 800176c:	46bb      	mov	fp, r7
 800176e:	46b2      	mov	sl, r6
 8001770:	46a9      	mov	r9, r5
 8001772:	46a0      	mov	r8, r4
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	2a00      	cmp	r2, #0
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x150>
 800177a:	e084      	b.n	8001886 <__aeabi_dadd+0x25a>
 800177c:	464a      	mov	r2, r9
 800177e:	1bd2      	subs	r2, r2, r7
 8001780:	2f00      	cmp	r7, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x15a>
 8001784:	e16d      	b.n	8001a62 <__aeabi_dadd+0x436>
 8001786:	0025      	movs	r5, r4
 8001788:	4305      	orrs	r5, r0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x162>
 800178c:	e127      	b.n	80019de <__aeabi_dadd+0x3b2>
 800178e:	1e56      	subs	r6, r2, #1
 8001790:	2a01      	cmp	r2, #1
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x16a>
 8001794:	e23b      	b.n	8001c0e <__aeabi_dadd+0x5e2>
 8001796:	4d87      	ldr	r5, [pc, #540]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001798:	42aa      	cmp	r2, r5
 800179a:	d100      	bne.n	800179e <__aeabi_dadd+0x172>
 800179c:	e26a      	b.n	8001c74 <__aeabi_dadd+0x648>
 800179e:	2501      	movs	r5, #1
 80017a0:	2e38      	cmp	r6, #56	@ 0x38
 80017a2:	dc12      	bgt.n	80017ca <__aeabi_dadd+0x19e>
 80017a4:	0032      	movs	r2, r6
 80017a6:	2a1f      	cmp	r2, #31
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dadd+0x180>
 80017aa:	e1f8      	b.n	8001b9e <__aeabi_dadd+0x572>
 80017ac:	2620      	movs	r6, #32
 80017ae:	0025      	movs	r5, r4
 80017b0:	1ab6      	subs	r6, r6, r2
 80017b2:	0007      	movs	r7, r0
 80017b4:	4653      	mov	r3, sl
 80017b6:	40b0      	lsls	r0, r6
 80017b8:	40d4      	lsrs	r4, r2
 80017ba:	40b5      	lsls	r5, r6
 80017bc:	40d7      	lsrs	r7, r2
 80017be:	1e46      	subs	r6, r0, #1
 80017c0:	41b0      	sbcs	r0, r6
 80017c2:	1b1b      	subs	r3, r3, r4
 80017c4:	469a      	mov	sl, r3
 80017c6:	433d      	orrs	r5, r7
 80017c8:	4305      	orrs	r5, r0
 80017ca:	4662      	mov	r2, ip
 80017cc:	1b55      	subs	r5, r2, r5
 80017ce:	45ac      	cmp	ip, r5
 80017d0:	4192      	sbcs	r2, r2
 80017d2:	4653      	mov	r3, sl
 80017d4:	4252      	negs	r2, r2
 80017d6:	000e      	movs	r6, r1
 80017d8:	464f      	mov	r7, r9
 80017da:	4688      	mov	r8, r1
 80017dc:	1a9c      	subs	r4, r3, r2
 80017de:	e778      	b.n	80016d2 <__aeabi_dadd+0xa6>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dadd+0x1ba>
 80017e4:	e08e      	b.n	8001904 <__aeabi_dadd+0x2d8>
 80017e6:	4649      	mov	r1, r9
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d175      	bne.n	80018d8 <__aeabi_dadd+0x2ac>
 80017ec:	4661      	mov	r1, ip
 80017ee:	4653      	mov	r3, sl
 80017f0:	4319      	orrs	r1, r3
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x1ca>
 80017f4:	e0f6      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 80017f6:	1e51      	subs	r1, r2, #1
 80017f8:	2a01      	cmp	r2, #1
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x1d2>
 80017fc:	e191      	b.n	8001b22 <__aeabi_dadd+0x4f6>
 80017fe:	4d6d      	ldr	r5, [pc, #436]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001800:	42aa      	cmp	r2, r5
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x1da>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001806:	2501      	movs	r5, #1
 8001808:	2938      	cmp	r1, #56	@ 0x38
 800180a:	dc14      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 800180c:	000a      	movs	r2, r1
 800180e:	2a1f      	cmp	r2, #31
 8001810:	dd00      	ble.n	8001814 <__aeabi_dadd+0x1e8>
 8001812:	e1a2      	b.n	8001b5a <__aeabi_dadd+0x52e>
 8001814:	2120      	movs	r1, #32
 8001816:	4653      	mov	r3, sl
 8001818:	1a89      	subs	r1, r1, r2
 800181a:	408b      	lsls	r3, r1
 800181c:	001d      	movs	r5, r3
 800181e:	4663      	mov	r3, ip
 8001820:	40d3      	lsrs	r3, r2
 8001822:	431d      	orrs	r5, r3
 8001824:	4663      	mov	r3, ip
 8001826:	408b      	lsls	r3, r1
 8001828:	0019      	movs	r1, r3
 800182a:	1e4b      	subs	r3, r1, #1
 800182c:	4199      	sbcs	r1, r3
 800182e:	4653      	mov	r3, sl
 8001830:	40d3      	lsrs	r3, r2
 8001832:	430d      	orrs	r5, r1
 8001834:	18e4      	adds	r4, r4, r3
 8001836:	182d      	adds	r5, r5, r0
 8001838:	4285      	cmp	r5, r0
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1824      	adds	r4, r4, r0
 8001840:	0223      	lsls	r3, r4, #8
 8001842:	d559      	bpl.n	80018f8 <__aeabi_dadd+0x2cc>
 8001844:	4b5b      	ldr	r3, [pc, #364]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001846:	3701      	adds	r7, #1
 8001848:	429f      	cmp	r7, r3
 800184a:	d051      	beq.n	80018f0 <__aeabi_dadd+0x2c4>
 800184c:	2101      	movs	r1, #1
 800184e:	4b5a      	ldr	r3, [pc, #360]	@ (80019b8 <__aeabi_dadd+0x38c>)
 8001850:	086a      	lsrs	r2, r5, #1
 8001852:	401c      	ands	r4, r3
 8001854:	4029      	ands	r1, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	07e5      	lsls	r5, r4, #31
 800185a:	4315      	orrs	r5, r2
 800185c:	0864      	lsrs	r4, r4, #1
 800185e:	e75f      	b.n	8001720 <__aeabi_dadd+0xf4>
 8001860:	4661      	mov	r1, ip
 8001862:	4653      	mov	r3, sl
 8001864:	4319      	orrs	r1, r3
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x23e>
 8001868:	e0bc      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 800186a:	1e51      	subs	r1, r2, #1
 800186c:	2a01      	cmp	r2, #1
 800186e:	d100      	bne.n	8001872 <__aeabi_dadd+0x246>
 8001870:	e164      	b.n	8001b3c <__aeabi_dadd+0x510>
 8001872:	4d50      	ldr	r5, [pc, #320]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001874:	42aa      	cmp	r2, r5
 8001876:	d100      	bne.n	800187a <__aeabi_dadd+0x24e>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dadd+0x524>
 800187a:	2501      	movs	r5, #1
 800187c:	2938      	cmp	r1, #56	@ 0x38
 800187e:	dd00      	ble.n	8001882 <__aeabi_dadd+0x256>
 8001880:	e722      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001882:	000a      	movs	r2, r1
 8001884:	e70e      	b.n	80016a4 <__aeabi_dadd+0x78>
 8001886:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <__aeabi_dadd+0x390>)
 8001888:	1c7d      	adds	r5, r7, #1
 800188a:	4215      	tst	r5, r2
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x264>
 800188e:	e0d0      	b.n	8001a32 <__aeabi_dadd+0x406>
 8001890:	0025      	movs	r5, r4
 8001892:	4662      	mov	r2, ip
 8001894:	4653      	mov	r3, sl
 8001896:	4305      	orrs	r5, r0
 8001898:	431a      	orrs	r2, r3
 800189a:	2f00      	cmp	r7, #0
 800189c:	d000      	beq.n	80018a0 <__aeabi_dadd+0x274>
 800189e:	e137      	b.n	8001b10 <__aeabi_dadd+0x4e4>
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x27a>
 80018a4:	e1a8      	b.n	8001bf8 <__aeabi_dadd+0x5cc>
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x280>
 80018aa:	e16a      	b.n	8001b82 <__aeabi_dadd+0x556>
 80018ac:	4663      	mov	r3, ip
 80018ae:	1ac5      	subs	r5, r0, r3
 80018b0:	4653      	mov	r3, sl
 80018b2:	1ae2      	subs	r2, r4, r3
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	419b      	sbcs	r3, r3
 80018b8:	425b      	negs	r3, r3
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dadd+0x296>
 80018c0:	e203      	b.n	8001cca <__aeabi_dadd+0x69e>
 80018c2:	4663      	mov	r3, ip
 80018c4:	1a1d      	subs	r5, r3, r0
 80018c6:	45ac      	cmp	ip, r5
 80018c8:	4192      	sbcs	r2, r2
 80018ca:	4653      	mov	r3, sl
 80018cc:	4252      	negs	r2, r2
 80018ce:	1b1c      	subs	r4, r3, r4
 80018d0:	000e      	movs	r6, r1
 80018d2:	4688      	mov	r8, r1
 80018d4:	1aa4      	subs	r4, r4, r2
 80018d6:	e723      	b.n	8001720 <__aeabi_dadd+0xf4>
 80018d8:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <__aeabi_dadd+0x388>)
 80018da:	428f      	cmp	r7, r1
 80018dc:	d070      	beq.n	80019c0 <__aeabi_dadd+0x394>
 80018de:	2501      	movs	r5, #1
 80018e0:	2a38      	cmp	r2, #56	@ 0x38
 80018e2:	dca8      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	4653      	mov	r3, sl
 80018e8:	0409      	lsls	r1, r1, #16
 80018ea:	430b      	orrs	r3, r1
 80018ec:	469a      	mov	sl, r3
 80018ee:	e78e      	b.n	800180e <__aeabi_dadd+0x1e2>
 80018f0:	003c      	movs	r4, r7
 80018f2:	2500      	movs	r5, #0
 80018f4:	2200      	movs	r2, #0
 80018f6:	e731      	b.n	800175c <__aeabi_dadd+0x130>
 80018f8:	2307      	movs	r3, #7
 80018fa:	402b      	ands	r3, r5
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dadd+0x2d6>
 8001900:	e710      	b.n	8001724 <__aeabi_dadd+0xf8>
 8001902:	e093      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001904:	2a00      	cmp	r2, #0
 8001906:	d074      	beq.n	80019f2 <__aeabi_dadd+0x3c6>
 8001908:	464a      	mov	r2, r9
 800190a:	1bd2      	subs	r2, r2, r7
 800190c:	2f00      	cmp	r7, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x2e6>
 8001910:	e0c7      	b.n	8001aa2 <__aeabi_dadd+0x476>
 8001912:	4928      	ldr	r1, [pc, #160]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001914:	4589      	cmp	r9, r1
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x2ee>
 8001918:	e185      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 800191a:	2501      	movs	r5, #1
 800191c:	2a38      	cmp	r2, #56	@ 0x38
 800191e:	dc12      	bgt.n	8001946 <__aeabi_dadd+0x31a>
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	0409      	lsls	r1, r1, #16
 8001924:	430c      	orrs	r4, r1
 8001926:	2a1f      	cmp	r2, #31
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0x300>
 800192a:	e1ab      	b.n	8001c84 <__aeabi_dadd+0x658>
 800192c:	2120      	movs	r1, #32
 800192e:	0025      	movs	r5, r4
 8001930:	1a89      	subs	r1, r1, r2
 8001932:	0007      	movs	r7, r0
 8001934:	4088      	lsls	r0, r1
 8001936:	408d      	lsls	r5, r1
 8001938:	40d7      	lsrs	r7, r2
 800193a:	1e41      	subs	r1, r0, #1
 800193c:	4188      	sbcs	r0, r1
 800193e:	40d4      	lsrs	r4, r2
 8001940:	433d      	orrs	r5, r7
 8001942:	4305      	orrs	r5, r0
 8001944:	44a2      	add	sl, r4
 8001946:	4465      	add	r5, ip
 8001948:	4565      	cmp	r5, ip
 800194a:	4192      	sbcs	r2, r2
 800194c:	4252      	negs	r2, r2
 800194e:	4452      	add	r2, sl
 8001950:	0014      	movs	r4, r2
 8001952:	464f      	mov	r7, r9
 8001954:	e774      	b.n	8001840 <__aeabi_dadd+0x214>
 8001956:	0028      	movs	r0, r5
 8001958:	f001 fdf0 	bl	800353c <__clzsi2>
 800195c:	0003      	movs	r3, r0
 800195e:	3318      	adds	r3, #24
 8001960:	2b1f      	cmp	r3, #31
 8001962:	dc00      	bgt.n	8001966 <__aeabi_dadd+0x33a>
 8001964:	e6c2      	b.n	80016ec <__aeabi_dadd+0xc0>
 8001966:	002a      	movs	r2, r5
 8001968:	3808      	subs	r0, #8
 800196a:	4082      	lsls	r2, r0
 800196c:	429f      	cmp	r7, r3
 800196e:	dd00      	ble.n	8001972 <__aeabi_dadd+0x346>
 8001970:	e0a9      	b.n	8001ac6 <__aeabi_dadd+0x49a>
 8001972:	1bdb      	subs	r3, r3, r7
 8001974:	1c58      	adds	r0, r3, #1
 8001976:	281f      	cmp	r0, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_dadd+0x350>
 800197a:	e1ac      	b.n	8001cd6 <__aeabi_dadd+0x6aa>
 800197c:	0015      	movs	r5, r2
 800197e:	3b1f      	subs	r3, #31
 8001980:	40dd      	lsrs	r5, r3
 8001982:	2820      	cmp	r0, #32
 8001984:	d005      	beq.n	8001992 <__aeabi_dadd+0x366>
 8001986:	2340      	movs	r3, #64	@ 0x40
 8001988:	1a1b      	subs	r3, r3, r0
 800198a:	409a      	lsls	r2, r3
 800198c:	1e53      	subs	r3, r2, #1
 800198e:	419a      	sbcs	r2, r3
 8001990:	4315      	orrs	r5, r2
 8001992:	2307      	movs	r3, #7
 8001994:	2700      	movs	r7, #0
 8001996:	402b      	ands	r3, r5
 8001998:	e7b0      	b.n	80018fc <__aeabi_dadd+0x2d0>
 800199a:	08ed      	lsrs	r5, r5, #3
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <__aeabi_dadd+0x388>)
 800199e:	0762      	lsls	r2, r4, #29
 80019a0:	432a      	orrs	r2, r5
 80019a2:	08e4      	lsrs	r4, r4, #3
 80019a4:	429f      	cmp	r7, r3
 80019a6:	d00f      	beq.n	80019c8 <__aeabi_dadd+0x39c>
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	0b25      	lsrs	r5, r4, #12
 80019ac:	057c      	lsls	r4, r7, #21
 80019ae:	0d64      	lsrs	r4, r4, #21
 80019b0:	e6d4      	b.n	800175c <__aeabi_dadd+0x130>
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	ff7fffff 	.word	0xff7fffff
 80019bc:	000007fe 	.word	0x000007fe
 80019c0:	08c0      	lsrs	r0, r0, #3
 80019c2:	0762      	lsls	r2, r4, #29
 80019c4:	4302      	orrs	r2, r0
 80019c6:	08e4      	lsrs	r4, r4, #3
 80019c8:	0013      	movs	r3, r2
 80019ca:	4323      	orrs	r3, r4
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3a4>
 80019ce:	e186      	b.n	8001cde <__aeabi_dadd+0x6b2>
 80019d0:	2580      	movs	r5, #128	@ 0x80
 80019d2:	032d      	lsls	r5, r5, #12
 80019d4:	4325      	orrs	r5, r4
 80019d6:	032d      	lsls	r5, r5, #12
 80019d8:	4cc3      	ldr	r4, [pc, #780]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 80019da:	0b2d      	lsrs	r5, r5, #12
 80019dc:	e6be      	b.n	800175c <__aeabi_dadd+0x130>
 80019de:	4660      	mov	r0, ip
 80019e0:	4654      	mov	r4, sl
 80019e2:	000e      	movs	r6, r1
 80019e4:	0017      	movs	r7, r2
 80019e6:	08c5      	lsrs	r5, r0, #3
 80019e8:	e7d8      	b.n	800199c <__aeabi_dadd+0x370>
 80019ea:	4cc0      	ldr	r4, [pc, #768]	@ (8001cec <__aeabi_dadd+0x6c0>)
 80019ec:	1aff      	subs	r7, r7, r3
 80019ee:	4014      	ands	r4, r2
 80019f0:	e696      	b.n	8001720 <__aeabi_dadd+0xf4>
 80019f2:	4abf      	ldr	r2, [pc, #764]	@ (8001cf0 <__aeabi_dadd+0x6c4>)
 80019f4:	1c79      	adds	r1, r7, #1
 80019f6:	4211      	tst	r1, r2
 80019f8:	d16b      	bne.n	8001ad2 <__aeabi_dadd+0x4a6>
 80019fa:	0022      	movs	r2, r4
 80019fc:	4302      	orrs	r2, r0
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dadd+0x3d8>
 8001a02:	e0db      	b.n	8001bbc <__aeabi_dadd+0x590>
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x3de>
 8001a08:	e12d      	b.n	8001c66 <__aeabi_dadd+0x63a>
 8001a0a:	4662      	mov	r2, ip
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x3e8>
 8001a12:	e0b6      	b.n	8001b82 <__aeabi_dadd+0x556>
 8001a14:	4663      	mov	r3, ip
 8001a16:	18c5      	adds	r5, r0, r3
 8001a18:	4285      	cmp	r5, r0
 8001a1a:	4180      	sbcs	r0, r0
 8001a1c:	4454      	add	r4, sl
 8001a1e:	4240      	negs	r0, r0
 8001a20:	1824      	adds	r4, r4, r0
 8001a22:	0223      	lsls	r3, r4, #8
 8001a24:	d502      	bpl.n	8001a2c <__aeabi_dadd+0x400>
 8001a26:	000f      	movs	r7, r1
 8001a28:	4bb0      	ldr	r3, [pc, #704]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001a2a:	401c      	ands	r4, r3
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	0028      	movs	r0, r5
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001a32:	4662      	mov	r2, ip
 8001a34:	1a85      	subs	r5, r0, r2
 8001a36:	42a8      	cmp	r0, r5
 8001a38:	4192      	sbcs	r2, r2
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	4691      	mov	r9, r2
 8001a40:	1ae3      	subs	r3, r4, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	d454      	bmi.n	8001afa <__aeabi_dadd+0x4ce>
 8001a50:	464a      	mov	r2, r9
 8001a52:	464c      	mov	r4, r9
 8001a54:	432a      	orrs	r2, r5
 8001a56:	d000      	beq.n	8001a5a <__aeabi_dadd+0x42e>
 8001a58:	e640      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2500      	movs	r5, #0
 8001a60:	e67c      	b.n	800175c <__aeabi_dadd+0x130>
 8001a62:	4da1      	ldr	r5, [pc, #644]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001a64:	45a9      	cmp	r9, r5
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x43e>
 8001a68:	e090      	b.n	8001b8c <__aeabi_dadd+0x560>
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	2a38      	cmp	r2, #56	@ 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dadd+0x446>
 8001a70:	e6ab      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001a72:	2580      	movs	r5, #128	@ 0x80
 8001a74:	042d      	lsls	r5, r5, #16
 8001a76:	432c      	orrs	r4, r5
 8001a78:	e695      	b.n	80017a6 <__aeabi_dadd+0x17a>
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	4655      	mov	r5, sl
 8001a7e:	3920      	subs	r1, #32
 8001a80:	40cd      	lsrs	r5, r1
 8001a82:	46a9      	mov	r9, r5
 8001a84:	2a20      	cmp	r2, #32
 8001a86:	d006      	beq.n	8001a96 <__aeabi_dadd+0x46a>
 8001a88:	2140      	movs	r1, #64	@ 0x40
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	1a8a      	subs	r2, r1, r2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	4662      	mov	r2, ip
 8001a92:	431a      	orrs	r2, r3
 8001a94:	4694      	mov	ip, r2
 8001a96:	4665      	mov	r5, ip
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	419d      	sbcs	r5, r3
 8001a9c:	464b      	mov	r3, r9
 8001a9e:	431d      	orrs	r5, r3
 8001aa0:	e612      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x47e>
 8001aa8:	e0c4      	b.n	8001c34 <__aeabi_dadd+0x608>
 8001aaa:	1e51      	subs	r1, r2, #1
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x486>
 8001ab0:	e0fb      	b.n	8001caa <__aeabi_dadd+0x67e>
 8001ab2:	4d8d      	ldr	r5, [pc, #564]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ab4:	42aa      	cmp	r2, r5
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dadd+0x48e>
 8001ab8:	e0b5      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 8001aba:	2501      	movs	r5, #1
 8001abc:	2938      	cmp	r1, #56	@ 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dadd+0x496>
 8001ac0:	e741      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	e72f      	b.n	8001926 <__aeabi_dadd+0x2fa>
 8001ac6:	4c89      	ldr	r4, [pc, #548]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001ac8:	1aff      	subs	r7, r7, r3
 8001aca:	4014      	ands	r4, r2
 8001acc:	0762      	lsls	r2, r4, #29
 8001ace:	08e4      	lsrs	r4, r4, #3
 8001ad0:	e76a      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001ad2:	4a85      	ldr	r2, [pc, #532]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ad4:	4291      	cmp	r1, r2
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dadd+0x4ae>
 8001ad8:	e0e3      	b.n	8001ca2 <__aeabi_dadd+0x676>
 8001ada:	4663      	mov	r3, ip
 8001adc:	18c2      	adds	r2, r0, r3
 8001ade:	4282      	cmp	r2, r0
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	0023      	movs	r3, r4
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	4453      	add	r3, sl
 8001ae8:	181b      	adds	r3, r3, r0
 8001aea:	07dd      	lsls	r5, r3, #31
 8001aec:	085c      	lsrs	r4, r3, #1
 8001aee:	2307      	movs	r3, #7
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	4315      	orrs	r5, r2
 8001af4:	000f      	movs	r7, r1
 8001af6:	402b      	ands	r3, r5
 8001af8:	e700      	b.n	80018fc <__aeabi_dadd+0x2d0>
 8001afa:	4663      	mov	r3, ip
 8001afc:	1a1d      	subs	r5, r3, r0
 8001afe:	45ac      	cmp	ip, r5
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	4653      	mov	r3, sl
 8001b04:	4252      	negs	r2, r2
 8001b06:	1b1c      	subs	r4, r3, r4
 8001b08:	000e      	movs	r6, r1
 8001b0a:	4688      	mov	r8, r1
 8001b0c:	1aa4      	subs	r4, r4, r2
 8001b0e:	e5e5      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001b10:	2d00      	cmp	r5, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dadd+0x4ea>
 8001b14:	e091      	b.n	8001c3a <__aeabi_dadd+0x60e>
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d138      	bne.n	8001b8c <__aeabi_dadd+0x560>
 8001b1a:	2480      	movs	r4, #128	@ 0x80
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	e756      	b.n	80019d0 <__aeabi_dadd+0x3a4>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c5      	adds	r5, r0, r3
 8001b26:	4285      	cmp	r5, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4454      	add	r4, sl
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	1824      	adds	r4, r4, r0
 8001b30:	2701      	movs	r7, #1
 8001b32:	0223      	lsls	r3, r4, #8
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dadd+0x50c>
 8001b36:	e6df      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 8001b38:	2702      	movs	r7, #2
 8001b3a:	e687      	b.n	800184c <__aeabi_dadd+0x220>
 8001b3c:	4663      	mov	r3, ip
 8001b3e:	1ac5      	subs	r5, r0, r3
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	4653      	mov	r3, sl
 8001b46:	4240      	negs	r0, r0
 8001b48:	1ae4      	subs	r4, r4, r3
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	1a24      	subs	r4, r4, r0
 8001b4e:	e5c0      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001b50:	0762      	lsls	r2, r4, #29
 8001b52:	08c0      	lsrs	r0, r0, #3
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08e4      	lsrs	r4, r4, #3
 8001b58:	e736      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	4653      	mov	r3, sl
 8001b5e:	3920      	subs	r1, #32
 8001b60:	40cb      	lsrs	r3, r1
 8001b62:	4699      	mov	r9, r3
 8001b64:	2a20      	cmp	r2, #32
 8001b66:	d006      	beq.n	8001b76 <__aeabi_dadd+0x54a>
 8001b68:	2140      	movs	r1, #64	@ 0x40
 8001b6a:	4653      	mov	r3, sl
 8001b6c:	1a8a      	subs	r2, r1, r2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	4662      	mov	r2, ip
 8001b72:	431a      	orrs	r2, r3
 8001b74:	4694      	mov	ip, r2
 8001b76:	4665      	mov	r5, ip
 8001b78:	1e6b      	subs	r3, r5, #1
 8001b7a:	419d      	sbcs	r5, r3
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	431d      	orrs	r5, r3
 8001b80:	e659      	b.n	8001836 <__aeabi_dadd+0x20a>
 8001b82:	0762      	lsls	r2, r4, #29
 8001b84:	08c0      	lsrs	r0, r0, #3
 8001b86:	4302      	orrs	r2, r0
 8001b88:	08e4      	lsrs	r4, r4, #3
 8001b8a:	e70d      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	075a      	lsls	r2, r3, #29
 8001b90:	4663      	mov	r3, ip
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	4653      	mov	r3, sl
 8001b96:	000e      	movs	r6, r1
 8001b98:	4302      	orrs	r2, r0
 8001b9a:	08dc      	lsrs	r4, r3, #3
 8001b9c:	e714      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	0026      	movs	r6, r4
 8001ba2:	3d20      	subs	r5, #32
 8001ba4:	40ee      	lsrs	r6, r5
 8001ba6:	2a20      	cmp	r2, #32
 8001ba8:	d003      	beq.n	8001bb2 <__aeabi_dadd+0x586>
 8001baa:	2540      	movs	r5, #64	@ 0x40
 8001bac:	1aaa      	subs	r2, r5, r2
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4320      	orrs	r0, r4
 8001bb2:	1e42      	subs	r2, r0, #1
 8001bb4:	4190      	sbcs	r0, r2
 8001bb6:	0005      	movs	r5, r0
 8001bb8:	4335      	orrs	r5, r6
 8001bba:	e606      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d07c      	beq.n	8001cba <__aeabi_dadd+0x68e>
 8001bc0:	4662      	mov	r2, ip
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dadd+0x5a0>
 8001bca:	e6fa      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001bcc:	0762      	lsls	r2, r4, #29
 8001bce:	4310      	orrs	r0, r2
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	08e4      	lsrs	r4, r4, #3
 8001bd4:	0312      	lsls	r2, r2, #12
 8001bd6:	4214      	tst	r4, r2
 8001bd8:	d008      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001bda:	08d9      	lsrs	r1, r3, #3
 8001bdc:	4211      	tst	r1, r2
 8001bde:	d105      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001be0:	4663      	mov	r3, ip
 8001be2:	08d8      	lsrs	r0, r3, #3
 8001be4:	4653      	mov	r3, sl
 8001be6:	000c      	movs	r4, r1
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	4318      	orrs	r0, r3
 8001bec:	0f42      	lsrs	r2, r0, #29
 8001bee:	00c0      	lsls	r0, r0, #3
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	e6e7      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x5d2>
 8001bfc:	e72d      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001bfe:	4663      	mov	r3, ip
 8001c00:	08d8      	lsrs	r0, r3, #3
 8001c02:	4653      	mov	r3, sl
 8001c04:	075a      	lsls	r2, r3, #29
 8001c06:	000e      	movs	r6, r1
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	08dc      	lsrs	r4, r3, #3
 8001c0c:	e6cc      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c0e:	4663      	mov	r3, ip
 8001c10:	1a1d      	subs	r5, r3, r0
 8001c12:	45ac      	cmp	ip, r5
 8001c14:	4192      	sbcs	r2, r2
 8001c16:	4653      	mov	r3, sl
 8001c18:	4252      	negs	r2, r2
 8001c1a:	1b1c      	subs	r4, r3, r4
 8001c1c:	000e      	movs	r6, r1
 8001c1e:	4688      	mov	r8, r1
 8001c20:	1aa4      	subs	r4, r4, r2
 8001c22:	3701      	adds	r7, #1
 8001c24:	e555      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001c26:	4663      	mov	r3, ip
 8001c28:	08d9      	lsrs	r1, r3, #3
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	075a      	lsls	r2, r3, #29
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	08dc      	lsrs	r4, r3, #3
 8001c32:	e6c9      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c34:	4660      	mov	r0, ip
 8001c36:	4654      	mov	r4, sl
 8001c38:	e6d4      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001c3a:	08c0      	lsrs	r0, r0, #3
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dadd+0x616>
 8001c40:	e6bf      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	4310      	orrs	r0, r2
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	0312      	lsls	r2, r2, #12
 8001c4c:	4214      	tst	r4, r2
 8001c4e:	d0cd      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001c50:	08dd      	lsrs	r5, r3, #3
 8001c52:	4215      	tst	r5, r2
 8001c54:	d1ca      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001c56:	4663      	mov	r3, ip
 8001c58:	08d8      	lsrs	r0, r3, #3
 8001c5a:	4653      	mov	r3, sl
 8001c5c:	075b      	lsls	r3, r3, #29
 8001c5e:	000e      	movs	r6, r1
 8001c60:	002c      	movs	r4, r5
 8001c62:	4318      	orrs	r0, r3
 8001c64:	e7c2      	b.n	8001bec <__aeabi_dadd+0x5c0>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e699      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c74:	4663      	mov	r3, ip
 8001c76:	08d8      	lsrs	r0, r3, #3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	075a      	lsls	r2, r3, #29
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	08dc      	lsrs	r4, r3, #3
 8001c82:	e6a1      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c84:	0011      	movs	r1, r2
 8001c86:	0027      	movs	r7, r4
 8001c88:	3920      	subs	r1, #32
 8001c8a:	40cf      	lsrs	r7, r1
 8001c8c:	2a20      	cmp	r2, #32
 8001c8e:	d003      	beq.n	8001c98 <__aeabi_dadd+0x66c>
 8001c90:	2140      	movs	r1, #64	@ 0x40
 8001c92:	1a8a      	subs	r2, r1, r2
 8001c94:	4094      	lsls	r4, r2
 8001c96:	4320      	orrs	r0, r4
 8001c98:	1e42      	subs	r2, r0, #1
 8001c9a:	4190      	sbcs	r0, r2
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	433d      	orrs	r5, r7
 8001ca0:	e651      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ca2:	000c      	movs	r4, r1
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	e558      	b.n	800175c <__aeabi_dadd+0x130>
 8001caa:	4460      	add	r0, ip
 8001cac:	4560      	cmp	r0, ip
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	4454      	add	r4, sl
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	18a4      	adds	r4, r4, r2
 8001cb8:	e73a      	b.n	8001b30 <__aeabi_dadd+0x504>
 8001cba:	4653      	mov	r3, sl
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08dc      	lsrs	r4, r3, #3
 8001cc8:	e67e      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001cca:	001a      	movs	r2, r3
 8001ccc:	001c      	movs	r4, r3
 8001cce:	432a      	orrs	r2, r5
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dadd+0x6a8>
 8001cd2:	e6ab      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001cd4:	e6c1      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	2500      	movs	r5, #0
 8001cda:	1a09      	subs	r1, r1, r0
 8001cdc:	e519      	b.n	8001712 <__aeabi_dadd+0xe6>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	4c01      	ldr	r4, [pc, #4]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ce4:	e53a      	b.n	800175c <__aeabi_dadd+0x130>
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	ff7fffff 	.word	0xff7fffff
 8001cf0:	000007fe 	.word	0x000007fe

08001cf4 <__aeabi_ddiv>:
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	46de      	mov	lr, fp
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	b087      	sub	sp, #28
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	030b      	lsls	r3, r1, #12
 8001d08:	0b1b      	lsrs	r3, r3, #12
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	0fca      	lsrs	r2, r1, #31
 8001d0e:	004b      	lsls	r3, r1, #1
 8001d10:	0004      	movs	r4, r0
 8001d12:	4680      	mov	r8, r0
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x28>
 8001d1a:	e16a      	b.n	8001ff2 <__aeabi_ddiv+0x2fe>
 8001d1c:	4ad4      	ldr	r2, [pc, #848]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x30>
 8001d22:	e18c      	b.n	800203e <__aeabi_ddiv+0x34a>
 8001d24:	4659      	mov	r1, fp
 8001d26:	0f42      	lsrs	r2, r0, #29
 8001d28:	00c9      	lsls	r1, r1, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0409      	lsls	r1, r1, #16
 8001d30:	4311      	orrs	r1, r2
 8001d32:	00c2      	lsls	r2, r0, #3
 8001d34:	4690      	mov	r8, r2
 8001d36:	4acf      	ldr	r2, [pc, #828]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d38:	4689      	mov	r9, r1
 8001d3a:	4692      	mov	sl, r2
 8001d3c:	449a      	add	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2400      	movs	r4, #0
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	9e00      	ldr	r6, [sp, #0]
 8001d46:	9f01      	ldr	r7, [sp, #4]
 8001d48:	033b      	lsls	r3, r7, #12
 8001d4a:	0b1b      	lsrs	r3, r3, #12
 8001d4c:	469b      	mov	fp, r3
 8001d4e:	007b      	lsls	r3, r7, #1
 8001d50:	0030      	movs	r0, r6
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	0ffd      	lsrs	r5, r7, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x68>
 8001d5a:	e128      	b.n	8001fae <__aeabi_ddiv+0x2ba>
 8001d5c:	4ac4      	ldr	r2, [pc, #784]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x70>
 8001d62:	e177      	b.n	8002054 <__aeabi_ddiv+0x360>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f72      	lsrs	r2, r6, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	468b      	mov	fp, r1
 8001d74:	49bf      	ldr	r1, [pc, #764]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d76:	00f2      	lsls	r2, r6, #3
 8001d78:	468c      	mov	ip, r1
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	4463      	add	r3, ip
 8001d7e:	1acb      	subs	r3, r1, r3
 8001d80:	469a      	mov	sl, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	9e02      	ldr	r6, [sp, #8]
 8001d86:	406e      	eors	r6, r5
 8001d88:	2c0f      	cmp	r4, #15
 8001d8a:	d827      	bhi.n	8001ddc <__aeabi_ddiv+0xe8>
 8001d8c:	49ba      	ldr	r1, [pc, #744]	@ (8002078 <__aeabi_ddiv+0x384>)
 8001d8e:	00a4      	lsls	r4, r4, #2
 8001d90:	5909      	ldr	r1, [r1, r4]
 8001d92:	468f      	mov	pc, r1
 8001d94:	46cb      	mov	fp, r9
 8001d96:	4642      	mov	r2, r8
 8001d98:	9e02      	ldr	r6, [sp, #8]
 8001d9a:	9b03      	ldr	r3, [sp, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d016      	beq.n	8001dce <__aeabi_ddiv+0xda>
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0xb2>
 8001da4:	e2a6      	b.n	80022f4 <__aeabi_ddiv+0x600>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d000      	beq.n	8001dac <__aeabi_ddiv+0xb8>
 8001daa:	e0df      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8001dac:	2200      	movs	r2, #0
 8001dae:	2300      	movs	r3, #0
 8001db0:	2400      	movs	r4, #0
 8001db2:	4690      	mov	r8, r2
 8001db4:	051b      	lsls	r3, r3, #20
 8001db6:	4323      	orrs	r3, r4
 8001db8:	07f6      	lsls	r6, r6, #31
 8001dba:	4333      	orrs	r3, r6
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	b007      	add	sp, #28
 8001dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc4:	46bb      	mov	fp, r7
 8001dc6:	46b2      	mov	sl, r6
 8001dc8:	46a9      	mov	r9, r5
 8001dca:	46a0      	mov	r8, r4
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001dd6:	e7ed      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001dd8:	002e      	movs	r6, r5
 8001dda:	e7df      	b.n	8001d9c <__aeabi_ddiv+0xa8>
 8001ddc:	45cb      	cmp	fp, r9
 8001dde:	d200      	bcs.n	8001de2 <__aeabi_ddiv+0xee>
 8001de0:	e1d4      	b.n	800218c <__aeabi_ddiv+0x498>
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xf2>
 8001de4:	e1cf      	b.n	8002186 <__aeabi_ddiv+0x492>
 8001de6:	2301      	movs	r3, #1
 8001de8:	425b      	negs	r3, r3
 8001dea:	469c      	mov	ip, r3
 8001dec:	4644      	mov	r4, r8
 8001dee:	4648      	mov	r0, r9
 8001df0:	2700      	movs	r7, #0
 8001df2:	44e2      	add	sl, ip
 8001df4:	465b      	mov	r3, fp
 8001df6:	0e15      	lsrs	r5, r2, #24
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	431d      	orrs	r5, r3
 8001dfc:	0c19      	lsrs	r1, r3, #16
 8001dfe:	042b      	lsls	r3, r5, #16
 8001e00:	0212      	lsls	r2, r2, #8
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	0c1d      	lsrs	r5, r3, #16
 8001e06:	4691      	mov	r9, r2
 8001e08:	9102      	str	r1, [sp, #8]
 8001e0a:	9503      	str	r5, [sp, #12]
 8001e0c:	f7fe fa1e 	bl	800024c <__aeabi_uidivmod>
 8001e10:	0002      	movs	r2, r0
 8001e12:	436a      	muls	r2, r5
 8001e14:	040b      	lsls	r3, r1, #16
 8001e16:	0c21      	lsrs	r1, r4, #16
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4319      	orrs	r1, r3
 8001e1c:	428a      	cmp	r2, r1
 8001e1e:	d909      	bls.n	8001e34 <__aeabi_ddiv+0x140>
 8001e20:	9d00      	ldr	r5, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	46ac      	mov	ip, r5
 8001e26:	425b      	negs	r3, r3
 8001e28:	4461      	add	r1, ip
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	44e0      	add	r8, ip
 8001e2e:	428d      	cmp	r5, r1
 8001e30:	d800      	bhi.n	8001e34 <__aeabi_ddiv+0x140>
 8001e32:	e1fb      	b.n	800222c <__aeabi_ddiv+0x538>
 8001e34:	1a88      	subs	r0, r1, r2
 8001e36:	9902      	ldr	r1, [sp, #8]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	9a03      	ldr	r2, [sp, #12]
 8001e3e:	0424      	lsls	r4, r4, #16
 8001e40:	4342      	muls	r2, r0
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	0c24      	lsrs	r4, r4, #16
 8001e46:	0003      	movs	r3, r0
 8001e48:	430c      	orrs	r4, r1
 8001e4a:	42a2      	cmp	r2, r4
 8001e4c:	d906      	bls.n	8001e5c <__aeabi_ddiv+0x168>
 8001e4e:	9900      	ldr	r1, [sp, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	468c      	mov	ip, r1
 8001e54:	4464      	add	r4, ip
 8001e56:	42a1      	cmp	r1, r4
 8001e58:	d800      	bhi.n	8001e5c <__aeabi_ddiv+0x168>
 8001e5a:	e1e1      	b.n	8002220 <__aeabi_ddiv+0x52c>
 8001e5c:	1aa0      	subs	r0, r4, r2
 8001e5e:	4642      	mov	r2, r8
 8001e60:	0412      	lsls	r2, r2, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4693      	mov	fp, r2
 8001e66:	464b      	mov	r3, r9
 8001e68:	4659      	mov	r1, fp
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	001d      	movs	r5, r3
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	040b      	lsls	r3, r1, #16
 8001e72:	4649      	mov	r1, r9
 8001e74:	0409      	lsls	r1, r1, #16
 8001e76:	0c09      	lsrs	r1, r1, #16
 8001e78:	000c      	movs	r4, r1
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	435c      	muls	r4, r3
 8001e7e:	0c12      	lsrs	r2, r2, #16
 8001e80:	436b      	muls	r3, r5
 8001e82:	4688      	mov	r8, r1
 8001e84:	4351      	muls	r1, r2
 8001e86:	436a      	muls	r2, r5
 8001e88:	0c25      	lsrs	r5, r4, #16
 8001e8a:	46ac      	mov	ip, r5
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	4463      	add	r3, ip
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d903      	bls.n	8001e9c <__aeabi_ddiv+0x1a8>
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4462      	add	r2, ip
 8001e9c:	0c19      	lsrs	r1, r3, #16
 8001e9e:	0424      	lsls	r4, r4, #16
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	0c24      	lsrs	r4, r4, #16
 8001ea4:	188a      	adds	r2, r1, r2
 8001ea6:	191c      	adds	r4, r3, r4
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	d302      	bcc.n	8001eb2 <__aeabi_ddiv+0x1be>
 8001eac:	d116      	bne.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eae:	42a7      	cmp	r7, r4
 8001eb0:	d214      	bcs.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	9d00      	ldr	r5, [sp, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	444f      	add	r7, r9
 8001eba:	9305      	str	r3, [sp, #20]
 8001ebc:	454f      	cmp	r7, r9
 8001ebe:	419b      	sbcs	r3, r3
 8001ec0:	46ac      	mov	ip, r5
 8001ec2:	425b      	negs	r3, r3
 8001ec4:	4463      	add	r3, ip
 8001ec6:	18c0      	adds	r0, r0, r3
 8001ec8:	4285      	cmp	r5, r0
 8001eca:	d300      	bcc.n	8001ece <__aeabi_ddiv+0x1da>
 8001ecc:	e1a1      	b.n	8002212 <__aeabi_ddiv+0x51e>
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	d900      	bls.n	8001ed4 <__aeabi_ddiv+0x1e0>
 8001ed2:	e1f6      	b.n	80022c2 <__aeabi_ddiv+0x5ce>
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8001ed6:	e1f1      	b.n	80022bc <__aeabi_ddiv+0x5c8>
 8001ed8:	9b05      	ldr	r3, [sp, #20]
 8001eda:	469b      	mov	fp, r3
 8001edc:	1b3c      	subs	r4, r7, r4
 8001ede:	42a7      	cmp	r7, r4
 8001ee0:	41bf      	sbcs	r7, r7
 8001ee2:	9d00      	ldr	r5, [sp, #0]
 8001ee4:	1a80      	subs	r0, r0, r2
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	4285      	cmp	r5, r0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_ddiv+0x1fc>
 8001eee:	e1d0      	b.n	8002292 <__aeabi_ddiv+0x59e>
 8001ef0:	9902      	ldr	r1, [sp, #8]
 8001ef2:	f7fe f9ab 	bl	800024c <__aeabi_uidivmod>
 8001ef6:	9a03      	ldr	r2, [sp, #12]
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	4342      	muls	r2, r0
 8001efc:	0c21      	lsrs	r1, r4, #16
 8001efe:	0007      	movs	r7, r0
 8001f00:	4319      	orrs	r1, r3
 8001f02:	428a      	cmp	r2, r1
 8001f04:	d900      	bls.n	8001f08 <__aeabi_ddiv+0x214>
 8001f06:	e178      	b.n	80021fa <__aeabi_ddiv+0x506>
 8001f08:	1a88      	subs	r0, r1, r2
 8001f0a:	9902      	ldr	r1, [sp, #8]
 8001f0c:	f7fe f99e 	bl	800024c <__aeabi_uidivmod>
 8001f10:	9a03      	ldr	r2, [sp, #12]
 8001f12:	0424      	lsls	r4, r4, #16
 8001f14:	4342      	muls	r2, r0
 8001f16:	0409      	lsls	r1, r1, #16
 8001f18:	0c24      	lsrs	r4, r4, #16
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	430c      	orrs	r4, r1
 8001f1e:	42a2      	cmp	r2, r4
 8001f20:	d900      	bls.n	8001f24 <__aeabi_ddiv+0x230>
 8001f22:	e15d      	b.n	80021e0 <__aeabi_ddiv+0x4ec>
 8001f24:	4641      	mov	r1, r8
 8001f26:	1aa4      	subs	r4, r4, r2
 8001f28:	043a      	lsls	r2, r7, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	9d04      	ldr	r5, [sp, #16]
 8001f2e:	0413      	lsls	r3, r2, #16
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	4359      	muls	r1, r3
 8001f34:	4647      	mov	r7, r8
 8001f36:	436b      	muls	r3, r5
 8001f38:	469c      	mov	ip, r3
 8001f3a:	0c10      	lsrs	r0, r2, #16
 8001f3c:	4347      	muls	r7, r0
 8001f3e:	0c0b      	lsrs	r3, r1, #16
 8001f40:	44bc      	add	ip, r7
 8001f42:	4463      	add	r3, ip
 8001f44:	4368      	muls	r0, r5
 8001f46:	429f      	cmp	r7, r3
 8001f48:	d903      	bls.n	8001f52 <__aeabi_ddiv+0x25e>
 8001f4a:	2580      	movs	r5, #128	@ 0x80
 8001f4c:	026d      	lsls	r5, r5, #9
 8001f4e:	46ac      	mov	ip, r5
 8001f50:	4460      	add	r0, ip
 8001f52:	0c1f      	lsrs	r7, r3, #16
 8001f54:	0409      	lsls	r1, r1, #16
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	0c09      	lsrs	r1, r1, #16
 8001f5a:	183f      	adds	r7, r7, r0
 8001f5c:	185b      	adds	r3, r3, r1
 8001f5e:	42bc      	cmp	r4, r7
 8001f60:	d200      	bcs.n	8001f64 <__aeabi_ddiv+0x270>
 8001f62:	e102      	b.n	800216a <__aeabi_ddiv+0x476>
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x274>
 8001f66:	e0fd      	b.n	8002164 <__aeabi_ddiv+0x470>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	4b43      	ldr	r3, [pc, #268]	@ (800207c <__aeabi_ddiv+0x388>)
 8001f6e:	4453      	add	r3, sl
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dc00      	bgt.n	8001f76 <__aeabi_ddiv+0x282>
 8001f74:	e0ae      	b.n	80020d4 <__aeabi_ddiv+0x3e0>
 8001f76:	0751      	lsls	r1, r2, #29
 8001f78:	d000      	beq.n	8001f7c <__aeabi_ddiv+0x288>
 8001f7a:	e198      	b.n	80022ae <__aeabi_ddiv+0x5ba>
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	01c9      	lsls	r1, r1, #7
 8001f80:	d506      	bpl.n	8001f90 <__aeabi_ddiv+0x29c>
 8001f82:	4659      	mov	r1, fp
 8001f84:	4b3e      	ldr	r3, [pc, #248]	@ (8002080 <__aeabi_ddiv+0x38c>)
 8001f86:	4019      	ands	r1, r3
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	468b      	mov	fp, r1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4453      	add	r3, sl
 8001f90:	493c      	ldr	r1, [pc, #240]	@ (8002084 <__aeabi_ddiv+0x390>)
 8001f92:	428b      	cmp	r3, r1
 8001f94:	dd00      	ble.n	8001f98 <__aeabi_ddiv+0x2a4>
 8001f96:	e71a      	b.n	8001dce <__aeabi_ddiv+0xda>
 8001f98:	4659      	mov	r1, fp
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	0749      	lsls	r1, r1, #29
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	465a      	mov	r2, fp
 8001fa2:	055b      	lsls	r3, r3, #21
 8001fa4:	0254      	lsls	r4, r2, #9
 8001fa6:	4688      	mov	r8, r1
 8001fa8:	0b24      	lsrs	r4, r4, #12
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	e702      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001fae:	465a      	mov	r2, fp
 8001fb0:	9b00      	ldr	r3, [sp, #0]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_ddiv+0x2c4>
 8001fb6:	e07e      	b.n	80020b6 <__aeabi_ddiv+0x3c2>
 8001fb8:	465b      	mov	r3, fp
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_ddiv+0x2cc>
 8001fbe:	e100      	b.n	80021c2 <__aeabi_ddiv+0x4ce>
 8001fc0:	4658      	mov	r0, fp
 8001fc2:	f001 fabb 	bl	800353c <__clzsi2>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3a0b      	subs	r2, #11
 8001fcc:	271d      	movs	r7, #29
 8001fce:	9e00      	ldr	r6, [sp, #0]
 8001fd0:	1aba      	subs	r2, r7, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	4658      	mov	r0, fp
 8001fd6:	40d6      	lsrs	r6, r2
 8001fd8:	3908      	subs	r1, #8
 8001fda:	4088      	lsls	r0, r1
 8001fdc:	0032      	movs	r2, r6
 8001fde:	4302      	orrs	r2, r0
 8001fe0:	4693      	mov	fp, r2
 8001fe2:	9a00      	ldr	r2, [sp, #0]
 8001fe4:	408a      	lsls	r2, r1
 8001fe6:	4928      	ldr	r1, [pc, #160]	@ (8002088 <__aeabi_ddiv+0x394>)
 8001fe8:	4453      	add	r3, sl
 8001fea:	468a      	mov	sl, r1
 8001fec:	449a      	add	sl, r3
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e6c8      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8001ff2:	465b      	mov	r3, fp
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	d056      	beq.n	80020a8 <__aeabi_ddiv+0x3b4>
 8001ffa:	465b      	mov	r3, fp
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x30e>
 8002000:	e0cd      	b.n	800219e <__aeabi_ddiv+0x4aa>
 8002002:	4658      	mov	r0, fp
 8002004:	f001 fa9a 	bl	800353c <__clzsi2>
 8002008:	230b      	movs	r3, #11
 800200a:	425b      	negs	r3, r3
 800200c:	469c      	mov	ip, r3
 800200e:	0002      	movs	r2, r0
 8002010:	4484      	add	ip, r0
 8002012:	4666      	mov	r6, ip
 8002014:	231d      	movs	r3, #29
 8002016:	1b9b      	subs	r3, r3, r6
 8002018:	0026      	movs	r6, r4
 800201a:	0011      	movs	r1, r2
 800201c:	4658      	mov	r0, fp
 800201e:	40de      	lsrs	r6, r3
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0033      	movs	r3, r6
 8002026:	4303      	orrs	r3, r0
 8002028:	4699      	mov	r9, r3
 800202a:	0023      	movs	r3, r4
 800202c:	408b      	lsls	r3, r1
 800202e:	4698      	mov	r8, r3
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <__aeabi_ddiv+0x398>)
 8002032:	2400      	movs	r4, #0
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	469a      	mov	sl, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	e682      	b.n	8001d44 <__aeabi_ddiv+0x50>
 800203e:	465a      	mov	r2, fp
 8002040:	4302      	orrs	r2, r0
 8002042:	4691      	mov	r9, r2
 8002044:	d12a      	bne.n	800209c <__aeabi_ddiv+0x3a8>
 8002046:	2200      	movs	r2, #0
 8002048:	469a      	mov	sl, r3
 800204a:	2302      	movs	r3, #2
 800204c:	4690      	mov	r8, r2
 800204e:	2408      	movs	r4, #8
 8002050:	9303      	str	r3, [sp, #12]
 8002052:	e677      	b.n	8001d44 <__aeabi_ddiv+0x50>
 8002054:	465a      	mov	r2, fp
 8002056:	9b00      	ldr	r3, [sp, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <__aeabi_ddiv+0x39c>)
 800205c:	469c      	mov	ip, r3
 800205e:	44e2      	add	sl, ip
 8002060:	2a00      	cmp	r2, #0
 8002062:	d117      	bne.n	8002094 <__aeabi_ddiv+0x3a0>
 8002064:	2302      	movs	r3, #2
 8002066:	431c      	orrs	r4, r3
 8002068:	2300      	movs	r3, #0
 800206a:	469b      	mov	fp, r3
 800206c:	3302      	adds	r3, #2
 800206e:	e689      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	fffffc01 	.word	0xfffffc01
 8002078:	080174f0 	.word	0x080174f0
 800207c:	000003ff 	.word	0x000003ff
 8002080:	feffffff 	.word	0xfeffffff
 8002084:	000007fe 	.word	0x000007fe
 8002088:	000003f3 	.word	0x000003f3
 800208c:	fffffc0d 	.word	0xfffffc0d
 8002090:	fffff801 	.word	0xfffff801
 8002094:	2303      	movs	r3, #3
 8002096:	0032      	movs	r2, r6
 8002098:	431c      	orrs	r4, r3
 800209a:	e673      	b.n	8001d84 <__aeabi_ddiv+0x90>
 800209c:	469a      	mov	sl, r3
 800209e:	2303      	movs	r3, #3
 80020a0:	46d9      	mov	r9, fp
 80020a2:	240c      	movs	r4, #12
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	e64d      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020a8:	2300      	movs	r3, #0
 80020aa:	4698      	mov	r8, r3
 80020ac:	469a      	mov	sl, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	2404      	movs	r4, #4
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	e646      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020b6:	2301      	movs	r3, #1
 80020b8:	431c      	orrs	r4, r3
 80020ba:	2300      	movs	r3, #0
 80020bc:	469b      	mov	fp, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	e660      	b.n	8001d84 <__aeabi_ddiv+0x90>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2480      	movs	r4, #128	@ 0x80
 80020c6:	4698      	mov	r8, r3
 80020c8:	2600      	movs	r6, #0
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <__aeabi_ddiv+0x620>)
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	e671      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 80020d0:	2201      	movs	r2, #1
 80020d2:	4252      	negs	r2, r2
 80020d4:	2101      	movs	r1, #1
 80020d6:	1ac9      	subs	r1, r1, r3
 80020d8:	2938      	cmp	r1, #56	@ 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_ddiv+0x3ea>
 80020dc:	e666      	b.n	8001dac <__aeabi_ddiv+0xb8>
 80020de:	291f      	cmp	r1, #31
 80020e0:	dc00      	bgt.n	80020e4 <__aeabi_ddiv+0x3f0>
 80020e2:	e0ab      	b.n	800223c <__aeabi_ddiv+0x548>
 80020e4:	201f      	movs	r0, #31
 80020e6:	4240      	negs	r0, r0
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	4658      	mov	r0, fp
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	0003      	movs	r3, r0
 80020f0:	2920      	cmp	r1, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_ddiv+0x40a>
 80020f4:	4658      	mov	r0, fp
 80020f6:	4988      	ldr	r1, [pc, #544]	@ (8002318 <__aeabi_ddiv+0x624>)
 80020f8:	4451      	add	r1, sl
 80020fa:	4088      	lsls	r0, r1
 80020fc:	4302      	orrs	r2, r0
 80020fe:	1e51      	subs	r1, r2, #1
 8002100:	418a      	sbcs	r2, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	2307      	movs	r3, #7
 8002106:	0019      	movs	r1, r3
 8002108:	2400      	movs	r4, #0
 800210a:	4011      	ands	r1, r2
 800210c:	4213      	tst	r3, r2
 800210e:	d00c      	beq.n	800212a <__aeabi_ddiv+0x436>
 8002110:	230f      	movs	r3, #15
 8002112:	4013      	ands	r3, r2
 8002114:	2b04      	cmp	r3, #4
 8002116:	d100      	bne.n	800211a <__aeabi_ddiv+0x426>
 8002118:	e0f9      	b.n	800230e <__aeabi_ddiv+0x61a>
 800211a:	1d11      	adds	r1, r2, #4
 800211c:	4291      	cmp	r1, r2
 800211e:	419b      	sbcs	r3, r3
 8002120:	000a      	movs	r2, r1
 8002122:	425b      	negs	r3, r3
 8002124:	0759      	lsls	r1, r3, #29
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	0b1c      	lsrs	r4, r3, #12
 800212a:	08d2      	lsrs	r2, r2, #3
 800212c:	430a      	orrs	r2, r1
 800212e:	4690      	mov	r8, r2
 8002130:	2300      	movs	r3, #0
 8002132:	e63f      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002134:	2480      	movs	r4, #128	@ 0x80
 8002136:	464b      	mov	r3, r9
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	4223      	tst	r3, r4
 800213c:	d009      	beq.n	8002152 <__aeabi_ddiv+0x45e>
 800213e:	465b      	mov	r3, fp
 8002140:	4223      	tst	r3, r4
 8002142:	d106      	bne.n	8002152 <__aeabi_ddiv+0x45e>
 8002144:	431c      	orrs	r4, r3
 8002146:	0324      	lsls	r4, r4, #12
 8002148:	002e      	movs	r6, r5
 800214a:	4690      	mov	r8, r2
 800214c:	4b71      	ldr	r3, [pc, #452]	@ (8002314 <__aeabi_ddiv+0x620>)
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	e630      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002152:	2480      	movs	r4, #128	@ 0x80
 8002154:	464b      	mov	r3, r9
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	431c      	orrs	r4, r3
 800215a:	0324      	lsls	r4, r4, #12
 800215c:	9e02      	ldr	r6, [sp, #8]
 800215e:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002160:	0b24      	lsrs	r4, r4, #12
 8002162:	e627      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_ddiv+0x476>
 8002168:	e700      	b.n	8001f6c <__aeabi_ddiv+0x278>
 800216a:	9800      	ldr	r0, [sp, #0]
 800216c:	1e51      	subs	r1, r2, #1
 800216e:	4684      	mov	ip, r0
 8002170:	4464      	add	r4, ip
 8002172:	4284      	cmp	r4, r0
 8002174:	d200      	bcs.n	8002178 <__aeabi_ddiv+0x484>
 8002176:	e084      	b.n	8002282 <__aeabi_ddiv+0x58e>
 8002178:	42bc      	cmp	r4, r7
 800217a:	d200      	bcs.n	800217e <__aeabi_ddiv+0x48a>
 800217c:	e0ae      	b.n	80022dc <__aeabi_ddiv+0x5e8>
 800217e:	d100      	bne.n	8002182 <__aeabi_ddiv+0x48e>
 8002180:	e0c1      	b.n	8002306 <__aeabi_ddiv+0x612>
 8002182:	000a      	movs	r2, r1
 8002184:	e6f0      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002186:	4542      	cmp	r2, r8
 8002188:	d900      	bls.n	800218c <__aeabi_ddiv+0x498>
 800218a:	e62c      	b.n	8001de6 <__aeabi_ddiv+0xf2>
 800218c:	464b      	mov	r3, r9
 800218e:	07dc      	lsls	r4, r3, #31
 8002190:	0858      	lsrs	r0, r3, #1
 8002192:	4643      	mov	r3, r8
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	431c      	orrs	r4, r3
 8002198:	4643      	mov	r3, r8
 800219a:	07df      	lsls	r7, r3, #31
 800219c:	e62a      	b.n	8001df4 <__aeabi_ddiv+0x100>
 800219e:	f001 f9cd 	bl	800353c <__clzsi2>
 80021a2:	2315      	movs	r3, #21
 80021a4:	469c      	mov	ip, r3
 80021a6:	4484      	add	ip, r0
 80021a8:	0002      	movs	r2, r0
 80021aa:	4663      	mov	r3, ip
 80021ac:	3220      	adds	r2, #32
 80021ae:	2b1c      	cmp	r3, #28
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_ddiv+0x4c0>
 80021b2:	e72e      	b.n	8002012 <__aeabi_ddiv+0x31e>
 80021b4:	0023      	movs	r3, r4
 80021b6:	3808      	subs	r0, #8
 80021b8:	4083      	lsls	r3, r0
 80021ba:	4699      	mov	r9, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	4698      	mov	r8, r3
 80021c0:	e736      	b.n	8002030 <__aeabi_ddiv+0x33c>
 80021c2:	f001 f9bb 	bl	800353c <__clzsi2>
 80021c6:	0002      	movs	r2, r0
 80021c8:	0003      	movs	r3, r0
 80021ca:	3215      	adds	r2, #21
 80021cc:	3320      	adds	r3, #32
 80021ce:	2a1c      	cmp	r2, #28
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_ddiv+0x4e0>
 80021d2:	e6fb      	b.n	8001fcc <__aeabi_ddiv+0x2d8>
 80021d4:	9900      	ldr	r1, [sp, #0]
 80021d6:	3808      	subs	r0, #8
 80021d8:	4081      	lsls	r1, r0
 80021da:	2200      	movs	r2, #0
 80021dc:	468b      	mov	fp, r1
 80021de:	e702      	b.n	8001fe6 <__aeabi_ddiv+0x2f2>
 80021e0:	9900      	ldr	r1, [sp, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	468c      	mov	ip, r1
 80021e6:	4464      	add	r4, ip
 80021e8:	42a1      	cmp	r1, r4
 80021ea:	d900      	bls.n	80021ee <__aeabi_ddiv+0x4fa>
 80021ec:	e69a      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021ee:	42a2      	cmp	r2, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x500>
 80021f2:	e697      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021f4:	1e83      	subs	r3, r0, #2
 80021f6:	4464      	add	r4, ip
 80021f8:	e694      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021fa:	46ac      	mov	ip, r5
 80021fc:	4461      	add	r1, ip
 80021fe:	3f01      	subs	r7, #1
 8002200:	428d      	cmp	r5, r1
 8002202:	d900      	bls.n	8002206 <__aeabi_ddiv+0x512>
 8002204:	e680      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002206:	428a      	cmp	r2, r1
 8002208:	d800      	bhi.n	800220c <__aeabi_ddiv+0x518>
 800220a:	e67d      	b.n	8001f08 <__aeabi_ddiv+0x214>
 800220c:	1e87      	subs	r7, r0, #2
 800220e:	4461      	add	r1, ip
 8002210:	e67a      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002212:	4285      	cmp	r5, r0
 8002214:	d000      	beq.n	8002218 <__aeabi_ddiv+0x524>
 8002216:	e65f      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8002218:	45b9      	cmp	r9, r7
 800221a:	d900      	bls.n	800221e <__aeabi_ddiv+0x52a>
 800221c:	e65c      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 800221e:	e656      	b.n	8001ece <__aeabi_ddiv+0x1da>
 8002220:	42a2      	cmp	r2, r4
 8002222:	d800      	bhi.n	8002226 <__aeabi_ddiv+0x532>
 8002224:	e61a      	b.n	8001e5c <__aeabi_ddiv+0x168>
 8002226:	1e83      	subs	r3, r0, #2
 8002228:	4464      	add	r4, ip
 800222a:	e617      	b.n	8001e5c <__aeabi_ddiv+0x168>
 800222c:	428a      	cmp	r2, r1
 800222e:	d800      	bhi.n	8002232 <__aeabi_ddiv+0x53e>
 8002230:	e600      	b.n	8001e34 <__aeabi_ddiv+0x140>
 8002232:	46ac      	mov	ip, r5
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4698      	mov	r8, r3
 8002238:	4461      	add	r1, ip
 800223a:	e5fb      	b.n	8001e34 <__aeabi_ddiv+0x140>
 800223c:	4837      	ldr	r0, [pc, #220]	@ (800231c <__aeabi_ddiv+0x628>)
 800223e:	0014      	movs	r4, r2
 8002240:	4450      	add	r0, sl
 8002242:	4082      	lsls	r2, r0
 8002244:	465b      	mov	r3, fp
 8002246:	0017      	movs	r7, r2
 8002248:	4083      	lsls	r3, r0
 800224a:	40cc      	lsrs	r4, r1
 800224c:	1e7a      	subs	r2, r7, #1
 800224e:	4197      	sbcs	r7, r2
 8002250:	4323      	orrs	r3, r4
 8002252:	433b      	orrs	r3, r7
 8002254:	001a      	movs	r2, r3
 8002256:	465b      	mov	r3, fp
 8002258:	40cb      	lsrs	r3, r1
 800225a:	0751      	lsls	r1, r2, #29
 800225c:	d009      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 800225e:	210f      	movs	r1, #15
 8002260:	4011      	ands	r1, r2
 8002262:	2904      	cmp	r1, #4
 8002264:	d005      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 8002266:	1d11      	adds	r1, r2, #4
 8002268:	4291      	cmp	r1, r2
 800226a:	4192      	sbcs	r2, r2
 800226c:	4252      	negs	r2, r2
 800226e:	189b      	adds	r3, r3, r2
 8002270:	000a      	movs	r2, r1
 8002272:	0219      	lsls	r1, r3, #8
 8002274:	d400      	bmi.n	8002278 <__aeabi_ddiv+0x584>
 8002276:	e755      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002278:	2200      	movs	r2, #0
 800227a:	2301      	movs	r3, #1
 800227c:	2400      	movs	r4, #0
 800227e:	4690      	mov	r8, r2
 8002280:	e598      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002282:	000a      	movs	r2, r1
 8002284:	42bc      	cmp	r4, r7
 8002286:	d000      	beq.n	800228a <__aeabi_ddiv+0x596>
 8002288:	e66e      	b.n	8001f68 <__aeabi_ddiv+0x274>
 800228a:	454b      	cmp	r3, r9
 800228c:	d000      	beq.n	8002290 <__aeabi_ddiv+0x59c>
 800228e:	e66b      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002290:	e66c      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <__aeabi_ddiv+0x62c>)
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <__aeabi_ddiv+0x630>)
 8002296:	4453      	add	r3, sl
 8002298:	4592      	cmp	sl, r2
 800229a:	da00      	bge.n	800229e <__aeabi_ddiv+0x5aa>
 800229c:	e718      	b.n	80020d0 <__aeabi_ddiv+0x3dc>
 800229e:	2101      	movs	r1, #1
 80022a0:	4249      	negs	r1, r1
 80022a2:	1d0a      	adds	r2, r1, #4
 80022a4:	428a      	cmp	r2, r1
 80022a6:	4189      	sbcs	r1, r1
 80022a8:	4249      	negs	r1, r1
 80022aa:	448b      	add	fp, r1
 80022ac:	e666      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022ae:	210f      	movs	r1, #15
 80022b0:	4011      	ands	r1, r2
 80022b2:	2904      	cmp	r1, #4
 80022b4:	d100      	bne.n	80022b8 <__aeabi_ddiv+0x5c4>
 80022b6:	e661      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022b8:	0011      	movs	r1, r2
 80022ba:	e7f2      	b.n	80022a2 <__aeabi_ddiv+0x5ae>
 80022bc:	42bc      	cmp	r4, r7
 80022be:	d800      	bhi.n	80022c2 <__aeabi_ddiv+0x5ce>
 80022c0:	e60a      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 80022c2:	2302      	movs	r3, #2
 80022c4:	425b      	negs	r3, r3
 80022c6:	469c      	mov	ip, r3
 80022c8:	9900      	ldr	r1, [sp, #0]
 80022ca:	444f      	add	r7, r9
 80022cc:	454f      	cmp	r7, r9
 80022ce:	419b      	sbcs	r3, r3
 80022d0:	44e3      	add	fp, ip
 80022d2:	468c      	mov	ip, r1
 80022d4:	425b      	negs	r3, r3
 80022d6:	4463      	add	r3, ip
 80022d8:	18c0      	adds	r0, r0, r3
 80022da:	e5ff      	b.n	8001edc <__aeabi_ddiv+0x1e8>
 80022dc:	4649      	mov	r1, r9
 80022de:	9d00      	ldr	r5, [sp, #0]
 80022e0:	0048      	lsls	r0, r1, #1
 80022e2:	4548      	cmp	r0, r9
 80022e4:	4189      	sbcs	r1, r1
 80022e6:	46ac      	mov	ip, r5
 80022e8:	4249      	negs	r1, r1
 80022ea:	4461      	add	r1, ip
 80022ec:	4681      	mov	r9, r0
 80022ee:	3a02      	subs	r2, #2
 80022f0:	1864      	adds	r4, r4, r1
 80022f2:	e7c7      	b.n	8002284 <__aeabi_ddiv+0x590>
 80022f4:	2480      	movs	r4, #128	@ 0x80
 80022f6:	465b      	mov	r3, fp
 80022f8:	0324      	lsls	r4, r4, #12
 80022fa:	431c      	orrs	r4, r3
 80022fc:	0324      	lsls	r4, r4, #12
 80022fe:	4690      	mov	r8, r2
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002302:	0b24      	lsrs	r4, r4, #12
 8002304:	e556      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002306:	4599      	cmp	r9, r3
 8002308:	d3e8      	bcc.n	80022dc <__aeabi_ddiv+0x5e8>
 800230a:	000a      	movs	r2, r1
 800230c:	e7bd      	b.n	800228a <__aeabi_ddiv+0x596>
 800230e:	2300      	movs	r3, #0
 8002310:	e708      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	0000043e 	.word	0x0000043e
 800231c:	0000041e 	.word	0x0000041e
 8002320:	000003ff 	.word	0x000003ff
 8002324:	fffffc02 	.word	0xfffffc02

08002328 <__eqdf2>:
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	4657      	mov	r7, sl
 800232c:	46de      	mov	lr, fp
 800232e:	464e      	mov	r6, r9
 8002330:	4645      	mov	r5, r8
 8002332:	b5e0      	push	{r5, r6, r7, lr}
 8002334:	000d      	movs	r5, r1
 8002336:	0004      	movs	r4, r0
 8002338:	0fe8      	lsrs	r0, r5, #31
 800233a:	4683      	mov	fp, r0
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0fd8      	lsrs	r0, r3, #31
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	4682      	mov	sl, r0
 8002344:	4819      	ldr	r0, [pc, #100]	@ (80023ac <__eqdf2+0x84>)
 8002346:	468c      	mov	ip, r1
 8002348:	031f      	lsls	r7, r3, #12
 800234a:	0069      	lsls	r1, r5, #1
 800234c:	005e      	lsls	r6, r3, #1
 800234e:	0d49      	lsrs	r1, r1, #21
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0d76      	lsrs	r6, r6, #21
 8002354:	4281      	cmp	r1, r0
 8002356:	d018      	beq.n	800238a <__eqdf2+0x62>
 8002358:	4286      	cmp	r6, r0
 800235a:	d00f      	beq.n	800237c <__eqdf2+0x54>
 800235c:	2001      	movs	r0, #1
 800235e:	42b1      	cmp	r1, r6
 8002360:	d10d      	bne.n	800237e <__eqdf2+0x56>
 8002362:	45bc      	cmp	ip, r7
 8002364:	d10b      	bne.n	800237e <__eqdf2+0x56>
 8002366:	4294      	cmp	r4, r2
 8002368:	d109      	bne.n	800237e <__eqdf2+0x56>
 800236a:	45d3      	cmp	fp, sl
 800236c:	d01c      	beq.n	80023a8 <__eqdf2+0x80>
 800236e:	2900      	cmp	r1, #0
 8002370:	d105      	bne.n	800237e <__eqdf2+0x56>
 8002372:	4660      	mov	r0, ip
 8002374:	4320      	orrs	r0, r4
 8002376:	1e43      	subs	r3, r0, #1
 8002378:	4198      	sbcs	r0, r3
 800237a:	e000      	b.n	800237e <__eqdf2+0x56>
 800237c:	2001      	movs	r0, #1
 800237e:	bcf0      	pop	{r4, r5, r6, r7}
 8002380:	46bb      	mov	fp, r7
 8002382:	46b2      	mov	sl, r6
 8002384:	46a9      	mov	r9, r5
 8002386:	46a0      	mov	r8, r4
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2001      	movs	r0, #1
 800238c:	428e      	cmp	r6, r1
 800238e:	d1f6      	bne.n	800237e <__eqdf2+0x56>
 8002390:	4661      	mov	r1, ip
 8002392:	4339      	orrs	r1, r7
 8002394:	000f      	movs	r7, r1
 8002396:	4317      	orrs	r7, r2
 8002398:	4327      	orrs	r7, r4
 800239a:	d1f0      	bne.n	800237e <__eqdf2+0x56>
 800239c:	465b      	mov	r3, fp
 800239e:	4652      	mov	r2, sl
 80023a0:	1a98      	subs	r0, r3, r2
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e7ea      	b.n	800237e <__eqdf2+0x56>
 80023a8:	2000      	movs	r0, #0
 80023aa:	e7e8      	b.n	800237e <__eqdf2+0x56>
 80023ac:	000007ff 	.word	0x000007ff

080023b0 <__gedf2>:
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	4657      	mov	r7, sl
 80023b4:	464e      	mov	r6, r9
 80023b6:	4645      	mov	r5, r8
 80023b8:	46de      	mov	lr, fp
 80023ba:	b5e0      	push	{r5, r6, r7, lr}
 80023bc:	000d      	movs	r5, r1
 80023be:	030f      	lsls	r7, r1, #12
 80023c0:	0b39      	lsrs	r1, r7, #12
 80023c2:	b083      	sub	sp, #12
 80023c4:	0004      	movs	r4, r0
 80023c6:	4680      	mov	r8, r0
 80023c8:	9101      	str	r1, [sp, #4]
 80023ca:	0058      	lsls	r0, r3, #1
 80023cc:	0fe9      	lsrs	r1, r5, #31
 80023ce:	4f31      	ldr	r7, [pc, #196]	@ (8002494 <__gedf2+0xe4>)
 80023d0:	0d40      	lsrs	r0, r0, #21
 80023d2:	468c      	mov	ip, r1
 80023d4:	006e      	lsls	r6, r5, #1
 80023d6:	0319      	lsls	r1, r3, #12
 80023d8:	4682      	mov	sl, r0
 80023da:	4691      	mov	r9, r2
 80023dc:	0d76      	lsrs	r6, r6, #21
 80023de:	0b09      	lsrs	r1, r1, #12
 80023e0:	0fd8      	lsrs	r0, r3, #31
 80023e2:	42be      	cmp	r6, r7
 80023e4:	d01f      	beq.n	8002426 <__gedf2+0x76>
 80023e6:	45ba      	cmp	sl, r7
 80023e8:	d00f      	beq.n	800240a <__gedf2+0x5a>
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d12f      	bne.n	800244e <__gedf2+0x9e>
 80023ee:	4655      	mov	r5, sl
 80023f0:	9e01      	ldr	r6, [sp, #4]
 80023f2:	4334      	orrs	r4, r6
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	d127      	bne.n	8002448 <__gedf2+0x98>
 80023f8:	430a      	orrs	r2, r1
 80023fa:	d03a      	beq.n	8002472 <__gedf2+0xc2>
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d145      	bne.n	800248c <__gedf2+0xdc>
 8002400:	2800      	cmp	r0, #0
 8002402:	d11a      	bne.n	800243a <__gedf2+0x8a>
 8002404:	2001      	movs	r0, #1
 8002406:	4240      	negs	r0, r0
 8002408:	e017      	b.n	800243a <__gedf2+0x8a>
 800240a:	4311      	orrs	r1, r2
 800240c:	d13b      	bne.n	8002486 <__gedf2+0xd6>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d102      	bne.n	8002418 <__gedf2+0x68>
 8002412:	9f01      	ldr	r7, [sp, #4]
 8002414:	4327      	orrs	r7, r4
 8002416:	d0f3      	beq.n	8002400 <__gedf2+0x50>
 8002418:	4584      	cmp	ip, r0
 800241a:	d109      	bne.n	8002430 <__gedf2+0x80>
 800241c:	4663      	mov	r3, ip
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <__gedf2+0x54>
 8002422:	4660      	mov	r0, ip
 8002424:	e009      	b.n	800243a <__gedf2+0x8a>
 8002426:	9f01      	ldr	r7, [sp, #4]
 8002428:	4327      	orrs	r7, r4
 800242a:	d12c      	bne.n	8002486 <__gedf2+0xd6>
 800242c:	45b2      	cmp	sl, r6
 800242e:	d024      	beq.n	800247a <__gedf2+0xca>
 8002430:	4663      	mov	r3, ip
 8002432:	2002      	movs	r0, #2
 8002434:	3b01      	subs	r3, #1
 8002436:	4018      	ands	r0, r3
 8002438:	3801      	subs	r0, #1
 800243a:	b003      	add	sp, #12
 800243c:	bcf0      	pop	{r4, r5, r6, r7}
 800243e:	46bb      	mov	fp, r7
 8002440:	46b2      	mov	sl, r6
 8002442:	46a9      	mov	r9, r5
 8002444:	46a0      	mov	r8, r4
 8002446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002448:	2c00      	cmp	r4, #0
 800244a:	d0d9      	beq.n	8002400 <__gedf2+0x50>
 800244c:	e7e4      	b.n	8002418 <__gedf2+0x68>
 800244e:	4654      	mov	r4, sl
 8002450:	2c00      	cmp	r4, #0
 8002452:	d0ed      	beq.n	8002430 <__gedf2+0x80>
 8002454:	4584      	cmp	ip, r0
 8002456:	d1eb      	bne.n	8002430 <__gedf2+0x80>
 8002458:	4556      	cmp	r6, sl
 800245a:	dce9      	bgt.n	8002430 <__gedf2+0x80>
 800245c:	dbde      	blt.n	800241c <__gedf2+0x6c>
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	428b      	cmp	r3, r1
 8002462:	d8e5      	bhi.n	8002430 <__gedf2+0x80>
 8002464:	d1da      	bne.n	800241c <__gedf2+0x6c>
 8002466:	45c8      	cmp	r8, r9
 8002468:	d8e2      	bhi.n	8002430 <__gedf2+0x80>
 800246a:	2000      	movs	r0, #0
 800246c:	45c8      	cmp	r8, r9
 800246e:	d2e4      	bcs.n	800243a <__gedf2+0x8a>
 8002470:	e7d4      	b.n	800241c <__gedf2+0x6c>
 8002472:	2000      	movs	r0, #0
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0e0      	beq.n	800243a <__gedf2+0x8a>
 8002478:	e7da      	b.n	8002430 <__gedf2+0x80>
 800247a:	4311      	orrs	r1, r2
 800247c:	d103      	bne.n	8002486 <__gedf2+0xd6>
 800247e:	4584      	cmp	ip, r0
 8002480:	d1d6      	bne.n	8002430 <__gedf2+0x80>
 8002482:	2000      	movs	r0, #0
 8002484:	e7d9      	b.n	800243a <__gedf2+0x8a>
 8002486:	2002      	movs	r0, #2
 8002488:	4240      	negs	r0, r0
 800248a:	e7d6      	b.n	800243a <__gedf2+0x8a>
 800248c:	4584      	cmp	ip, r0
 800248e:	d0e6      	beq.n	800245e <__gedf2+0xae>
 8002490:	e7ce      	b.n	8002430 <__gedf2+0x80>
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	000007ff 	.word	0x000007ff

08002498 <__ledf2>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	464e      	mov	r6, r9
 800249e:	4645      	mov	r5, r8
 80024a0:	46de      	mov	lr, fp
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	000d      	movs	r5, r1
 80024a6:	030f      	lsls	r7, r1, #12
 80024a8:	0004      	movs	r4, r0
 80024aa:	4680      	mov	r8, r0
 80024ac:	0fe8      	lsrs	r0, r5, #31
 80024ae:	0b39      	lsrs	r1, r7, #12
 80024b0:	4684      	mov	ip, r0
 80024b2:	b083      	sub	sp, #12
 80024b4:	0058      	lsls	r0, r3, #1
 80024b6:	4f30      	ldr	r7, [pc, #192]	@ (8002578 <__ledf2+0xe0>)
 80024b8:	0d40      	lsrs	r0, r0, #21
 80024ba:	9101      	str	r1, [sp, #4]
 80024bc:	031e      	lsls	r6, r3, #12
 80024be:	0069      	lsls	r1, r5, #1
 80024c0:	4682      	mov	sl, r0
 80024c2:	4691      	mov	r9, r2
 80024c4:	0d49      	lsrs	r1, r1, #21
 80024c6:	0b36      	lsrs	r6, r6, #12
 80024c8:	0fd8      	lsrs	r0, r3, #31
 80024ca:	42b9      	cmp	r1, r7
 80024cc:	d020      	beq.n	8002510 <__ledf2+0x78>
 80024ce:	45ba      	cmp	sl, r7
 80024d0:	d00f      	beq.n	80024f2 <__ledf2+0x5a>
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d12b      	bne.n	800252e <__ledf2+0x96>
 80024d6:	9901      	ldr	r1, [sp, #4]
 80024d8:	430c      	orrs	r4, r1
 80024da:	4651      	mov	r1, sl
 80024dc:	2900      	cmp	r1, #0
 80024de:	d137      	bne.n	8002550 <__ledf2+0xb8>
 80024e0:	4332      	orrs	r2, r6
 80024e2:	d038      	beq.n	8002556 <__ledf2+0xbe>
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d144      	bne.n	8002572 <__ledf2+0xda>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d119      	bne.n	8002520 <__ledf2+0x88>
 80024ec:	2001      	movs	r0, #1
 80024ee:	4240      	negs	r0, r0
 80024f0:	e016      	b.n	8002520 <__ledf2+0x88>
 80024f2:	4316      	orrs	r6, r2
 80024f4:	d113      	bne.n	800251e <__ledf2+0x86>
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d102      	bne.n	8002500 <__ledf2+0x68>
 80024fa:	9f01      	ldr	r7, [sp, #4]
 80024fc:	4327      	orrs	r7, r4
 80024fe:	d0f3      	beq.n	80024e8 <__ledf2+0x50>
 8002500:	4584      	cmp	ip, r0
 8002502:	d020      	beq.n	8002546 <__ledf2+0xae>
 8002504:	4663      	mov	r3, ip
 8002506:	2002      	movs	r0, #2
 8002508:	3b01      	subs	r3, #1
 800250a:	4018      	ands	r0, r3
 800250c:	3801      	subs	r0, #1
 800250e:	e007      	b.n	8002520 <__ledf2+0x88>
 8002510:	9f01      	ldr	r7, [sp, #4]
 8002512:	4327      	orrs	r7, r4
 8002514:	d103      	bne.n	800251e <__ledf2+0x86>
 8002516:	458a      	cmp	sl, r1
 8002518:	d1f4      	bne.n	8002504 <__ledf2+0x6c>
 800251a:	4316      	orrs	r6, r2
 800251c:	d01f      	beq.n	800255e <__ledf2+0xc6>
 800251e:	2002      	movs	r0, #2
 8002520:	b003      	add	sp, #12
 8002522:	bcf0      	pop	{r4, r5, r6, r7}
 8002524:	46bb      	mov	fp, r7
 8002526:	46b2      	mov	sl, r6
 8002528:	46a9      	mov	r9, r5
 800252a:	46a0      	mov	r8, r4
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252e:	4654      	mov	r4, sl
 8002530:	2c00      	cmp	r4, #0
 8002532:	d0e7      	beq.n	8002504 <__ledf2+0x6c>
 8002534:	4584      	cmp	ip, r0
 8002536:	d1e5      	bne.n	8002504 <__ledf2+0x6c>
 8002538:	4551      	cmp	r1, sl
 800253a:	dce3      	bgt.n	8002504 <__ledf2+0x6c>
 800253c:	db03      	blt.n	8002546 <__ledf2+0xae>
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	42b3      	cmp	r3, r6
 8002542:	d8df      	bhi.n	8002504 <__ledf2+0x6c>
 8002544:	d00f      	beq.n	8002566 <__ledf2+0xce>
 8002546:	4663      	mov	r3, ip
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0cf      	beq.n	80024ec <__ledf2+0x54>
 800254c:	4660      	mov	r0, ip
 800254e:	e7e7      	b.n	8002520 <__ledf2+0x88>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d0c9      	beq.n	80024e8 <__ledf2+0x50>
 8002554:	e7d4      	b.n	8002500 <__ledf2+0x68>
 8002556:	2000      	movs	r0, #0
 8002558:	2c00      	cmp	r4, #0
 800255a:	d0e1      	beq.n	8002520 <__ledf2+0x88>
 800255c:	e7d2      	b.n	8002504 <__ledf2+0x6c>
 800255e:	4584      	cmp	ip, r0
 8002560:	d1d0      	bne.n	8002504 <__ledf2+0x6c>
 8002562:	2000      	movs	r0, #0
 8002564:	e7dc      	b.n	8002520 <__ledf2+0x88>
 8002566:	45c8      	cmp	r8, r9
 8002568:	d8cc      	bhi.n	8002504 <__ledf2+0x6c>
 800256a:	2000      	movs	r0, #0
 800256c:	45c8      	cmp	r8, r9
 800256e:	d2d7      	bcs.n	8002520 <__ledf2+0x88>
 8002570:	e7e9      	b.n	8002546 <__ledf2+0xae>
 8002572:	4584      	cmp	ip, r0
 8002574:	d0e3      	beq.n	800253e <__ledf2+0xa6>
 8002576:	e7c5      	b.n	8002504 <__ledf2+0x6c>
 8002578:	000007ff 	.word	0x000007ff

0800257c <__aeabi_dmul>:
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	4657      	mov	r7, sl
 8002580:	46de      	mov	lr, fp
 8002582:	464e      	mov	r6, r9
 8002584:	4645      	mov	r5, r8
 8002586:	b5e0      	push	{r5, r6, r7, lr}
 8002588:	001f      	movs	r7, r3
 800258a:	030b      	lsls	r3, r1, #12
 800258c:	0b1b      	lsrs	r3, r3, #12
 800258e:	0016      	movs	r6, r2
 8002590:	469a      	mov	sl, r3
 8002592:	0fca      	lsrs	r2, r1, #31
 8002594:	004b      	lsls	r3, r1, #1
 8002596:	0004      	movs	r4, r0
 8002598:	4693      	mov	fp, r2
 800259a:	b087      	sub	sp, #28
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x26>
 80025a0:	e0d5      	b.n	800274e <__aeabi_dmul+0x1d2>
 80025a2:	4abb      	ldr	r2, [pc, #748]	@ (8002890 <__aeabi_dmul+0x314>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x2e>
 80025a8:	e0f8      	b.n	800279c <__aeabi_dmul+0x220>
 80025aa:	4651      	mov	r1, sl
 80025ac:	0f42      	lsrs	r2, r0, #29
 80025ae:	00c9      	lsls	r1, r1, #3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	0409      	lsls	r1, r1, #16
 80025b6:	4311      	orrs	r1, r2
 80025b8:	00c2      	lsls	r2, r0, #3
 80025ba:	4691      	mov	r9, r2
 80025bc:	4ab5      	ldr	r2, [pc, #724]	@ (8002894 <__aeabi_dmul+0x318>)
 80025be:	468a      	mov	sl, r1
 80025c0:	189d      	adds	r5, r3, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	4698      	mov	r8, r3
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	033c      	lsls	r4, r7, #12
 80025ca:	007b      	lsls	r3, r7, #1
 80025cc:	0ffa      	lsrs	r2, r7, #31
 80025ce:	0030      	movs	r0, r6
 80025d0:	0b24      	lsrs	r4, r4, #12
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0x5e>
 80025d8:	e096      	b.n	8002708 <__aeabi_dmul+0x18c>
 80025da:	4aad      	ldr	r2, [pc, #692]	@ (8002890 <__aeabi_dmul+0x314>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d031      	beq.n	8002644 <__aeabi_dmul+0xc8>
 80025e0:	0f72      	lsrs	r2, r6, #29
 80025e2:	00e4      	lsls	r4, r4, #3
 80025e4:	4322      	orrs	r2, r4
 80025e6:	2480      	movs	r4, #128	@ 0x80
 80025e8:	0424      	lsls	r4, r4, #16
 80025ea:	4314      	orrs	r4, r2
 80025ec:	4aa9      	ldr	r2, [pc, #676]	@ (8002894 <__aeabi_dmul+0x318>)
 80025ee:	00f0      	lsls	r0, r6, #3
 80025f0:	4694      	mov	ip, r2
 80025f2:	4463      	add	r3, ip
 80025f4:	195b      	adds	r3, r3, r5
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	4642      	mov	r2, r8
 80025fc:	2600      	movs	r6, #0
 80025fe:	2a0a      	cmp	r2, #10
 8002600:	dc42      	bgt.n	8002688 <__aeabi_dmul+0x10c>
 8002602:	465a      	mov	r2, fp
 8002604:	9900      	ldr	r1, [sp, #0]
 8002606:	404a      	eors	r2, r1
 8002608:	4693      	mov	fp, r2
 800260a:	4642      	mov	r2, r8
 800260c:	2a02      	cmp	r2, #2
 800260e:	dc32      	bgt.n	8002676 <__aeabi_dmul+0xfa>
 8002610:	3a01      	subs	r2, #1
 8002612:	2a01      	cmp	r2, #1
 8002614:	d900      	bls.n	8002618 <__aeabi_dmul+0x9c>
 8002616:	e149      	b.n	80028ac <__aeabi_dmul+0x330>
 8002618:	2e02      	cmp	r6, #2
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0xa2>
 800261c:	e0ca      	b.n	80027b4 <__aeabi_dmul+0x238>
 800261e:	2e01      	cmp	r6, #1
 8002620:	d13d      	bne.n	800269e <__aeabi_dmul+0x122>
 8002622:	2300      	movs	r3, #0
 8002624:	2400      	movs	r4, #0
 8002626:	2200      	movs	r2, #0
 8002628:	0010      	movs	r0, r2
 800262a:	465a      	mov	r2, fp
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4323      	orrs	r3, r4
 8002630:	07d2      	lsls	r2, r2, #31
 8002632:	4313      	orrs	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	b007      	add	sp, #28
 8002638:	bcf0      	pop	{r4, r5, r6, r7}
 800263a:	46bb      	mov	fp, r7
 800263c:	46b2      	mov	sl, r6
 800263e:	46a9      	mov	r9, r5
 8002640:	46a0      	mov	r8, r4
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002644:	4b92      	ldr	r3, [pc, #584]	@ (8002890 <__aeabi_dmul+0x314>)
 8002646:	4326      	orrs	r6, r4
 8002648:	18eb      	adds	r3, r5, r3
 800264a:	2e00      	cmp	r6, #0
 800264c:	d100      	bne.n	8002650 <__aeabi_dmul+0xd4>
 800264e:	e0bb      	b.n	80027c8 <__aeabi_dmul+0x24c>
 8002650:	2203      	movs	r2, #3
 8002652:	4641      	mov	r1, r8
 8002654:	4311      	orrs	r1, r2
 8002656:	465a      	mov	r2, fp
 8002658:	4688      	mov	r8, r1
 800265a:	9900      	ldr	r1, [sp, #0]
 800265c:	404a      	eors	r2, r1
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0109      	lsls	r1, r1, #4
 8002662:	468c      	mov	ip, r1
 8002664:	0029      	movs	r1, r5
 8002666:	4461      	add	r1, ip
 8002668:	9101      	str	r1, [sp, #4]
 800266a:	4641      	mov	r1, r8
 800266c:	290a      	cmp	r1, #10
 800266e:	dd00      	ble.n	8002672 <__aeabi_dmul+0xf6>
 8002670:	e233      	b.n	8002ada <__aeabi_dmul+0x55e>
 8002672:	4693      	mov	fp, r2
 8002674:	2603      	movs	r6, #3
 8002676:	4642      	mov	r2, r8
 8002678:	2701      	movs	r7, #1
 800267a:	4097      	lsls	r7, r2
 800267c:	21a6      	movs	r1, #166	@ 0xa6
 800267e:	003a      	movs	r2, r7
 8002680:	00c9      	lsls	r1, r1, #3
 8002682:	400a      	ands	r2, r1
 8002684:	420f      	tst	r7, r1
 8002686:	d031      	beq.n	80026ec <__aeabi_dmul+0x170>
 8002688:	9e02      	ldr	r6, [sp, #8]
 800268a:	2e02      	cmp	r6, #2
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0x114>
 800268e:	e235      	b.n	8002afc <__aeabi_dmul+0x580>
 8002690:	2e03      	cmp	r6, #3
 8002692:	d100      	bne.n	8002696 <__aeabi_dmul+0x11a>
 8002694:	e1d2      	b.n	8002a3c <__aeabi_dmul+0x4c0>
 8002696:	4654      	mov	r4, sl
 8002698:	4648      	mov	r0, r9
 800269a:	2e01      	cmp	r6, #1
 800269c:	d0c1      	beq.n	8002622 <__aeabi_dmul+0xa6>
 800269e:	9a01      	ldr	r2, [sp, #4]
 80026a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002898 <__aeabi_dmul+0x31c>)
 80026a2:	4694      	mov	ip, r2
 80026a4:	4463      	add	r3, ip
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dc00      	bgt.n	80026ac <__aeabi_dmul+0x130>
 80026aa:	e0c0      	b.n	800282e <__aeabi_dmul+0x2b2>
 80026ac:	0742      	lsls	r2, r0, #29
 80026ae:	d009      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b0:	220f      	movs	r2, #15
 80026b2:	4002      	ands	r2, r0
 80026b4:	2a04      	cmp	r2, #4
 80026b6:	d005      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b8:	1d02      	adds	r2, r0, #4
 80026ba:	4282      	cmp	r2, r0
 80026bc:	4180      	sbcs	r0, r0
 80026be:	4240      	negs	r0, r0
 80026c0:	1824      	adds	r4, r4, r0
 80026c2:	0010      	movs	r0, r2
 80026c4:	01e2      	lsls	r2, r4, #7
 80026c6:	d506      	bpl.n	80026d6 <__aeabi_dmul+0x15a>
 80026c8:	4b74      	ldr	r3, [pc, #464]	@ (800289c <__aeabi_dmul+0x320>)
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	401c      	ands	r4, r3
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	4694      	mov	ip, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4463      	add	r3, ip
 80026d6:	4a72      	ldr	r2, [pc, #456]	@ (80028a0 <__aeabi_dmul+0x324>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	dc6b      	bgt.n	80027b4 <__aeabi_dmul+0x238>
 80026dc:	0762      	lsls	r2, r4, #29
 80026de:	08c0      	lsrs	r0, r0, #3
 80026e0:	0264      	lsls	r4, r4, #9
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4302      	orrs	r2, r0
 80026e6:	0b24      	lsrs	r4, r4, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e79d      	b.n	8002628 <__aeabi_dmul+0xac>
 80026ec:	2190      	movs	r1, #144	@ 0x90
 80026ee:	0089      	lsls	r1, r1, #2
 80026f0:	420f      	tst	r7, r1
 80026f2:	d163      	bne.n	80027bc <__aeabi_dmul+0x240>
 80026f4:	2288      	movs	r2, #136	@ 0x88
 80026f6:	423a      	tst	r2, r7
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0x180>
 80026fa:	e0d7      	b.n	80028ac <__aeabi_dmul+0x330>
 80026fc:	9b00      	ldr	r3, [sp, #0]
 80026fe:	46a2      	mov	sl, r4
 8002700:	469b      	mov	fp, r3
 8002702:	4681      	mov	r9, r0
 8002704:	9602      	str	r6, [sp, #8]
 8002706:	e7bf      	b.n	8002688 <__aeabi_dmul+0x10c>
 8002708:	0023      	movs	r3, r4
 800270a:	4333      	orrs	r3, r6
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0x194>
 800270e:	e07f      	b.n	8002810 <__aeabi_dmul+0x294>
 8002710:	2c00      	cmp	r4, #0
 8002712:	d100      	bne.n	8002716 <__aeabi_dmul+0x19a>
 8002714:	e1ad      	b.n	8002a72 <__aeabi_dmul+0x4f6>
 8002716:	0020      	movs	r0, r4
 8002718:	f000 ff10 	bl	800353c <__clzsi2>
 800271c:	0002      	movs	r2, r0
 800271e:	0003      	movs	r3, r0
 8002720:	3a0b      	subs	r2, #11
 8002722:	201d      	movs	r0, #29
 8002724:	0019      	movs	r1, r3
 8002726:	1a82      	subs	r2, r0, r2
 8002728:	0030      	movs	r0, r6
 800272a:	3908      	subs	r1, #8
 800272c:	40d0      	lsrs	r0, r2
 800272e:	408c      	lsls	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	0030      	movs	r0, r6
 8002734:	4088      	lsls	r0, r1
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002738:	1aeb      	subs	r3, r5, r3
 800273a:	4694      	mov	ip, r2
 800273c:	4463      	add	r3, ip
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	4642      	mov	r2, r8
 8002744:	2600      	movs	r6, #0
 8002746:	2a0a      	cmp	r2, #10
 8002748:	dc00      	bgt.n	800274c <__aeabi_dmul+0x1d0>
 800274a:	e75a      	b.n	8002602 <__aeabi_dmul+0x86>
 800274c:	e79c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800274e:	4653      	mov	r3, sl
 8002750:	4303      	orrs	r3, r0
 8002752:	4699      	mov	r9, r3
 8002754:	d054      	beq.n	8002800 <__aeabi_dmul+0x284>
 8002756:	4653      	mov	r3, sl
 8002758:	2b00      	cmp	r3, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x1e2>
 800275c:	e177      	b.n	8002a4e <__aeabi_dmul+0x4d2>
 800275e:	4650      	mov	r0, sl
 8002760:	f000 feec 	bl	800353c <__clzsi2>
 8002764:	230b      	movs	r3, #11
 8002766:	425b      	negs	r3, r3
 8002768:	469c      	mov	ip, r3
 800276a:	0002      	movs	r2, r0
 800276c:	4484      	add	ip, r0
 800276e:	0011      	movs	r1, r2
 8002770:	4650      	mov	r0, sl
 8002772:	3908      	subs	r1, #8
 8002774:	4088      	lsls	r0, r1
 8002776:	231d      	movs	r3, #29
 8002778:	4680      	mov	r8, r0
 800277a:	4660      	mov	r0, ip
 800277c:	1a1b      	subs	r3, r3, r0
 800277e:	0020      	movs	r0, r4
 8002780:	40d8      	lsrs	r0, r3
 8002782:	0003      	movs	r3, r0
 8002784:	4640      	mov	r0, r8
 8002786:	4303      	orrs	r3, r0
 8002788:	469a      	mov	sl, r3
 800278a:	0023      	movs	r3, r4
 800278c:	408b      	lsls	r3, r1
 800278e:	4699      	mov	r9, r3
 8002790:	2300      	movs	r3, #0
 8002792:	4d44      	ldr	r5, [pc, #272]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002794:	4698      	mov	r8, r3
 8002796:	1aad      	subs	r5, r5, r2
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	e715      	b.n	80025c8 <__aeabi_dmul+0x4c>
 800279c:	4652      	mov	r2, sl
 800279e:	4302      	orrs	r2, r0
 80027a0:	4691      	mov	r9, r2
 80027a2:	d126      	bne.n	80027f2 <__aeabi_dmul+0x276>
 80027a4:	2200      	movs	r2, #0
 80027a6:	001d      	movs	r5, r3
 80027a8:	2302      	movs	r3, #2
 80027aa:	4692      	mov	sl, r2
 80027ac:	3208      	adds	r2, #8
 80027ae:	4690      	mov	r8, r2
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	e709      	b.n	80025c8 <__aeabi_dmul+0x4c>
 80027b4:	2400      	movs	r4, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <__aeabi_dmul+0x314>)
 80027ba:	e735      	b.n	8002628 <__aeabi_dmul+0xac>
 80027bc:	2300      	movs	r3, #0
 80027be:	2480      	movs	r4, #128	@ 0x80
 80027c0:	469b      	mov	fp, r3
 80027c2:	0324      	lsls	r4, r4, #12
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <__aeabi_dmul+0x314>)
 80027c6:	e72f      	b.n	8002628 <__aeabi_dmul+0xac>
 80027c8:	2202      	movs	r2, #2
 80027ca:	4641      	mov	r1, r8
 80027cc:	4311      	orrs	r1, r2
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4694      	mov	ip, r2
 80027d4:	002a      	movs	r2, r5
 80027d6:	4462      	add	r2, ip
 80027d8:	4688      	mov	r8, r1
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	290a      	cmp	r1, #10
 80027de:	dd00      	ble.n	80027e2 <__aeabi_dmul+0x266>
 80027e0:	e752      	b.n	8002688 <__aeabi_dmul+0x10c>
 80027e2:	465a      	mov	r2, fp
 80027e4:	2000      	movs	r0, #0
 80027e6:	9900      	ldr	r1, [sp, #0]
 80027e8:	0004      	movs	r4, r0
 80027ea:	404a      	eors	r2, r1
 80027ec:	4693      	mov	fp, r2
 80027ee:	2602      	movs	r6, #2
 80027f0:	e70b      	b.n	800260a <__aeabi_dmul+0x8e>
 80027f2:	220c      	movs	r2, #12
 80027f4:	001d      	movs	r5, r3
 80027f6:	2303      	movs	r3, #3
 80027f8:	4681      	mov	r9, r0
 80027fa:	4690      	mov	r8, r2
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	e6e3      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002800:	2300      	movs	r3, #0
 8002802:	469a      	mov	sl, r3
 8002804:	3304      	adds	r3, #4
 8002806:	4698      	mov	r8, r3
 8002808:	3b03      	subs	r3, #3
 800280a:	2500      	movs	r5, #0
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	e6db      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002810:	4642      	mov	r2, r8
 8002812:	3301      	adds	r3, #1
 8002814:	431a      	orrs	r2, r3
 8002816:	002b      	movs	r3, r5
 8002818:	4690      	mov	r8, r2
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	9201      	str	r2, [sp, #4]
 800281e:	4642      	mov	r2, r8
 8002820:	2400      	movs	r4, #0
 8002822:	2000      	movs	r0, #0
 8002824:	2601      	movs	r6, #1
 8002826:	2a0a      	cmp	r2, #10
 8002828:	dc00      	bgt.n	800282c <__aeabi_dmul+0x2b0>
 800282a:	e6ea      	b.n	8002602 <__aeabi_dmul+0x86>
 800282c:	e72c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800282e:	2201      	movs	r2, #1
 8002830:	1ad2      	subs	r2, r2, r3
 8002832:	2a38      	cmp	r2, #56	@ 0x38
 8002834:	dd00      	ble.n	8002838 <__aeabi_dmul+0x2bc>
 8002836:	e6f4      	b.n	8002622 <__aeabi_dmul+0xa6>
 8002838:	2a1f      	cmp	r2, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dmul+0x2c2>
 800283c:	e12a      	b.n	8002a94 <__aeabi_dmul+0x518>
 800283e:	211f      	movs	r1, #31
 8002840:	4249      	negs	r1, r1
 8002842:	1acb      	subs	r3, r1, r3
 8002844:	0021      	movs	r1, r4
 8002846:	40d9      	lsrs	r1, r3
 8002848:	000b      	movs	r3, r1
 800284a:	2a20      	cmp	r2, #32
 800284c:	d005      	beq.n	800285a <__aeabi_dmul+0x2de>
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <__aeabi_dmul+0x32c>)
 8002850:	9d01      	ldr	r5, [sp, #4]
 8002852:	4694      	mov	ip, r2
 8002854:	4465      	add	r5, ip
 8002856:	40ac      	lsls	r4, r5
 8002858:	4320      	orrs	r0, r4
 800285a:	1e42      	subs	r2, r0, #1
 800285c:	4190      	sbcs	r0, r2
 800285e:	4318      	orrs	r0, r3
 8002860:	2307      	movs	r3, #7
 8002862:	0019      	movs	r1, r3
 8002864:	2400      	movs	r4, #0
 8002866:	4001      	ands	r1, r0
 8002868:	4203      	tst	r3, r0
 800286a:	d00c      	beq.n	8002886 <__aeabi_dmul+0x30a>
 800286c:	230f      	movs	r3, #15
 800286e:	4003      	ands	r3, r0
 8002870:	2b04      	cmp	r3, #4
 8002872:	d100      	bne.n	8002876 <__aeabi_dmul+0x2fa>
 8002874:	e140      	b.n	8002af8 <__aeabi_dmul+0x57c>
 8002876:	1d03      	adds	r3, r0, #4
 8002878:	4283      	cmp	r3, r0
 800287a:	41a4      	sbcs	r4, r4
 800287c:	0018      	movs	r0, r3
 800287e:	4264      	negs	r4, r4
 8002880:	0761      	lsls	r1, r4, #29
 8002882:	0264      	lsls	r4, r4, #9
 8002884:	0b24      	lsrs	r4, r4, #12
 8002886:	08c2      	lsrs	r2, r0, #3
 8002888:	2300      	movs	r3, #0
 800288a:	430a      	orrs	r2, r1
 800288c:	e6cc      	b.n	8002628 <__aeabi_dmul+0xac>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	000007ff 	.word	0x000007ff
 8002894:	fffffc01 	.word	0xfffffc01
 8002898:	000003ff 	.word	0x000003ff
 800289c:	feffffff 	.word	0xfeffffff
 80028a0:	000007fe 	.word	0x000007fe
 80028a4:	fffffc0d 	.word	0xfffffc0d
 80028a8:	0000043e 	.word	0x0000043e
 80028ac:	4649      	mov	r1, r9
 80028ae:	464a      	mov	r2, r9
 80028b0:	0409      	lsls	r1, r1, #16
 80028b2:	0c09      	lsrs	r1, r1, #16
 80028b4:	000d      	movs	r5, r1
 80028b6:	0c16      	lsrs	r6, r2, #16
 80028b8:	0c02      	lsrs	r2, r0, #16
 80028ba:	0400      	lsls	r0, r0, #16
 80028bc:	0c00      	lsrs	r0, r0, #16
 80028be:	4345      	muls	r5, r0
 80028c0:	46ac      	mov	ip, r5
 80028c2:	0005      	movs	r5, r0
 80028c4:	4375      	muls	r5, r6
 80028c6:	46a8      	mov	r8, r5
 80028c8:	0015      	movs	r5, r2
 80028ca:	000f      	movs	r7, r1
 80028cc:	4375      	muls	r5, r6
 80028ce:	9200      	str	r2, [sp, #0]
 80028d0:	9502      	str	r5, [sp, #8]
 80028d2:	002a      	movs	r2, r5
 80028d4:	9d00      	ldr	r5, [sp, #0]
 80028d6:	436f      	muls	r7, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	0c2d      	lsrs	r5, r5, #16
 80028dc:	46a9      	mov	r9, r5
 80028de:	4447      	add	r7, r8
 80028e0:	444f      	add	r7, r9
 80028e2:	45b8      	cmp	r8, r7
 80028e4:	d905      	bls.n	80028f2 <__aeabi_dmul+0x376>
 80028e6:	0015      	movs	r5, r2
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	0252      	lsls	r2, r2, #9
 80028ec:	4690      	mov	r8, r2
 80028ee:	4445      	add	r5, r8
 80028f0:	9502      	str	r5, [sp, #8]
 80028f2:	0c3d      	lsrs	r5, r7, #16
 80028f4:	9503      	str	r5, [sp, #12]
 80028f6:	4665      	mov	r5, ip
 80028f8:	042d      	lsls	r5, r5, #16
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	0c2d      	lsrs	r5, r5, #16
 80028fe:	46ac      	mov	ip, r5
 8002900:	003d      	movs	r5, r7
 8002902:	4465      	add	r5, ip
 8002904:	9504      	str	r5, [sp, #16]
 8002906:	0c25      	lsrs	r5, r4, #16
 8002908:	0424      	lsls	r4, r4, #16
 800290a:	0c24      	lsrs	r4, r4, #16
 800290c:	46ac      	mov	ip, r5
 800290e:	0025      	movs	r5, r4
 8002910:	4375      	muls	r5, r6
 8002912:	46a8      	mov	r8, r5
 8002914:	4665      	mov	r5, ip
 8002916:	000f      	movs	r7, r1
 8002918:	4369      	muls	r1, r5
 800291a:	4441      	add	r1, r8
 800291c:	4689      	mov	r9, r1
 800291e:	4367      	muls	r7, r4
 8002920:	0c39      	lsrs	r1, r7, #16
 8002922:	4449      	add	r1, r9
 8002924:	436e      	muls	r6, r5
 8002926:	4588      	cmp	r8, r1
 8002928:	d903      	bls.n	8002932 <__aeabi_dmul+0x3b6>
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	0252      	lsls	r2, r2, #9
 800292e:	4690      	mov	r8, r2
 8002930:	4446      	add	r6, r8
 8002932:	0c0d      	lsrs	r5, r1, #16
 8002934:	46a8      	mov	r8, r5
 8002936:	0035      	movs	r5, r6
 8002938:	4445      	add	r5, r8
 800293a:	9505      	str	r5, [sp, #20]
 800293c:	9d03      	ldr	r5, [sp, #12]
 800293e:	043f      	lsls	r7, r7, #16
 8002940:	46a8      	mov	r8, r5
 8002942:	0c3f      	lsrs	r7, r7, #16
 8002944:	0409      	lsls	r1, r1, #16
 8002946:	19c9      	adds	r1, r1, r7
 8002948:	4488      	add	r8, r1
 800294a:	4645      	mov	r5, r8
 800294c:	9503      	str	r5, [sp, #12]
 800294e:	4655      	mov	r5, sl
 8002950:	042e      	lsls	r6, r5, #16
 8002952:	0c36      	lsrs	r6, r6, #16
 8002954:	0c2f      	lsrs	r7, r5, #16
 8002956:	0035      	movs	r5, r6
 8002958:	4345      	muls	r5, r0
 800295a:	4378      	muls	r0, r7
 800295c:	4681      	mov	r9, r0
 800295e:	0038      	movs	r0, r7
 8002960:	46a8      	mov	r8, r5
 8002962:	0c2d      	lsrs	r5, r5, #16
 8002964:	46aa      	mov	sl, r5
 8002966:	9a00      	ldr	r2, [sp, #0]
 8002968:	4350      	muls	r0, r2
 800296a:	4372      	muls	r2, r6
 800296c:	444a      	add	r2, r9
 800296e:	4452      	add	r2, sl
 8002970:	4591      	cmp	r9, r2
 8002972:	d903      	bls.n	800297c <__aeabi_dmul+0x400>
 8002974:	2580      	movs	r5, #128	@ 0x80
 8002976:	026d      	lsls	r5, r5, #9
 8002978:	46a9      	mov	r9, r5
 800297a:	4448      	add	r0, r9
 800297c:	0c15      	lsrs	r5, r2, #16
 800297e:	46a9      	mov	r9, r5
 8002980:	4645      	mov	r5, r8
 8002982:	042d      	lsls	r5, r5, #16
 8002984:	0c2d      	lsrs	r5, r5, #16
 8002986:	46a8      	mov	r8, r5
 8002988:	4665      	mov	r5, ip
 800298a:	437d      	muls	r5, r7
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	4448      	add	r0, r9
 8002990:	4490      	add	r8, r2
 8002992:	46a9      	mov	r9, r5
 8002994:	0032      	movs	r2, r6
 8002996:	4665      	mov	r5, ip
 8002998:	4362      	muls	r2, r4
 800299a:	436e      	muls	r6, r5
 800299c:	437c      	muls	r4, r7
 800299e:	0c17      	lsrs	r7, r2, #16
 80029a0:	1936      	adds	r6, r6, r4
 80029a2:	19bf      	adds	r7, r7, r6
 80029a4:	42bc      	cmp	r4, r7
 80029a6:	d903      	bls.n	80029b0 <__aeabi_dmul+0x434>
 80029a8:	2480      	movs	r4, #128	@ 0x80
 80029aa:	0264      	lsls	r4, r4, #9
 80029ac:	46a4      	mov	ip, r4
 80029ae:	44e1      	add	r9, ip
 80029b0:	9c02      	ldr	r4, [sp, #8]
 80029b2:	9e03      	ldr	r6, [sp, #12]
 80029b4:	46a4      	mov	ip, r4
 80029b6:	9d05      	ldr	r5, [sp, #20]
 80029b8:	4466      	add	r6, ip
 80029ba:	428e      	cmp	r6, r1
 80029bc:	4189      	sbcs	r1, r1
 80029be:	46ac      	mov	ip, r5
 80029c0:	0412      	lsls	r2, r2, #16
 80029c2:	043c      	lsls	r4, r7, #16
 80029c4:	0c12      	lsrs	r2, r2, #16
 80029c6:	18a2      	adds	r2, r4, r2
 80029c8:	4462      	add	r2, ip
 80029ca:	4249      	negs	r1, r1
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4446      	add	r6, r8
 80029d0:	46a4      	mov	ip, r4
 80029d2:	4546      	cmp	r6, r8
 80029d4:	41a4      	sbcs	r4, r4
 80029d6:	4682      	mov	sl, r0
 80029d8:	4264      	negs	r4, r4
 80029da:	46a0      	mov	r8, r4
 80029dc:	42aa      	cmp	r2, r5
 80029de:	4192      	sbcs	r2, r2
 80029e0:	458c      	cmp	ip, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	44e2      	add	sl, ip
 80029e6:	44d0      	add	r8, sl
 80029e8:	4249      	negs	r1, r1
 80029ea:	4252      	negs	r2, r2
 80029ec:	430a      	orrs	r2, r1
 80029ee:	45a0      	cmp	r8, r4
 80029f0:	41a4      	sbcs	r4, r4
 80029f2:	4582      	cmp	sl, r0
 80029f4:	4189      	sbcs	r1, r1
 80029f6:	4264      	negs	r4, r4
 80029f8:	4249      	negs	r1, r1
 80029fa:	430c      	orrs	r4, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	0c3f      	lsrs	r7, r7, #16
 8002a00:	19d2      	adds	r2, r2, r7
 8002a02:	1912      	adds	r2, r2, r4
 8002a04:	0dcc      	lsrs	r4, r1, #23
 8002a06:	9904      	ldr	r1, [sp, #16]
 8002a08:	0270      	lsls	r0, r6, #9
 8002a0a:	4308      	orrs	r0, r1
 8002a0c:	1e41      	subs	r1, r0, #1
 8002a0e:	4188      	sbcs	r0, r1
 8002a10:	4641      	mov	r1, r8
 8002a12:	444a      	add	r2, r9
 8002a14:	0df6      	lsrs	r6, r6, #23
 8002a16:	0252      	lsls	r2, r2, #9
 8002a18:	4330      	orrs	r0, r6
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	4314      	orrs	r4, r2
 8002a1e:	4308      	orrs	r0, r1
 8002a20:	01d2      	lsls	r2, r2, #7
 8002a22:	d535      	bpl.n	8002a90 <__aeabi_dmul+0x514>
 8002a24:	2201      	movs	r2, #1
 8002a26:	0843      	lsrs	r3, r0, #1
 8002a28:	4002      	ands	r2, r0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	07e0      	lsls	r0, r4, #31
 8002a2e:	4318      	orrs	r0, r3
 8002a30:	0864      	lsrs	r4, r4, #1
 8002a32:	e634      	b.n	800269e <__aeabi_dmul+0x122>
 8002a34:	9b00      	ldr	r3, [sp, #0]
 8002a36:	46a2      	mov	sl, r4
 8002a38:	469b      	mov	fp, r3
 8002a3a:	4681      	mov	r9, r0
 8002a3c:	2480      	movs	r4, #128	@ 0x80
 8002a3e:	4653      	mov	r3, sl
 8002a40:	0324      	lsls	r4, r4, #12
 8002a42:	431c      	orrs	r4, r3
 8002a44:	0324      	lsls	r4, r4, #12
 8002a46:	464a      	mov	r2, r9
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002a4a:	0b24      	lsrs	r4, r4, #12
 8002a4c:	e5ec      	b.n	8002628 <__aeabi_dmul+0xac>
 8002a4e:	f000 fd75 	bl	800353c <__clzsi2>
 8002a52:	2315      	movs	r3, #21
 8002a54:	469c      	mov	ip, r3
 8002a56:	4484      	add	ip, r0
 8002a58:	0002      	movs	r2, r0
 8002a5a:	4663      	mov	r3, ip
 8002a5c:	3220      	adds	r2, #32
 8002a5e:	2b1c      	cmp	r3, #28
 8002a60:	dc00      	bgt.n	8002a64 <__aeabi_dmul+0x4e8>
 8002a62:	e684      	b.n	800276e <__aeabi_dmul+0x1f2>
 8002a64:	2300      	movs	r3, #0
 8002a66:	4699      	mov	r9, r3
 8002a68:	0023      	movs	r3, r4
 8002a6a:	3808      	subs	r0, #8
 8002a6c:	4083      	lsls	r3, r0
 8002a6e:	469a      	mov	sl, r3
 8002a70:	e68e      	b.n	8002790 <__aeabi_dmul+0x214>
 8002a72:	f000 fd63 	bl	800353c <__clzsi2>
 8002a76:	0002      	movs	r2, r0
 8002a78:	0003      	movs	r3, r0
 8002a7a:	3215      	adds	r2, #21
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	2a1c      	cmp	r2, #28
 8002a80:	dc00      	bgt.n	8002a84 <__aeabi_dmul+0x508>
 8002a82:	e64e      	b.n	8002722 <__aeabi_dmul+0x1a6>
 8002a84:	0002      	movs	r2, r0
 8002a86:	0034      	movs	r4, r6
 8002a88:	3a08      	subs	r2, #8
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4094      	lsls	r4, r2
 8002a8e:	e652      	b.n	8002736 <__aeabi_dmul+0x1ba>
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	e604      	b.n	800269e <__aeabi_dmul+0x122>
 8002a94:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <__aeabi_dmul+0x58c>)
 8002a96:	0021      	movs	r1, r4
 8002a98:	469c      	mov	ip, r3
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	9d01      	ldr	r5, [sp, #4]
 8002a9e:	40d3      	lsrs	r3, r2
 8002aa0:	4465      	add	r5, ip
 8002aa2:	40a9      	lsls	r1, r5
 8002aa4:	4319      	orrs	r1, r3
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	40ab      	lsls	r3, r5
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	4183      	sbcs	r3, r0
 8002aae:	4319      	orrs	r1, r3
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	40d4      	lsrs	r4, r2
 8002ab4:	074b      	lsls	r3, r1, #29
 8002ab6:	d009      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ab8:	230f      	movs	r3, #15
 8002aba:	400b      	ands	r3, r1
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d005      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ac0:	1d0b      	adds	r3, r1, #4
 8002ac2:	428b      	cmp	r3, r1
 8002ac4:	4180      	sbcs	r0, r0
 8002ac6:	4240      	negs	r0, r0
 8002ac8:	1824      	adds	r4, r4, r0
 8002aca:	0018      	movs	r0, r3
 8002acc:	0223      	lsls	r3, r4, #8
 8002ace:	d400      	bmi.n	8002ad2 <__aeabi_dmul+0x556>
 8002ad0:	e6d6      	b.n	8002880 <__aeabi_dmul+0x304>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	e5a6      	b.n	8002628 <__aeabi_dmul+0xac>
 8002ada:	290f      	cmp	r1, #15
 8002adc:	d1aa      	bne.n	8002a34 <__aeabi_dmul+0x4b8>
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	421a      	tst	r2, r3
 8002ae6:	d0a9      	beq.n	8002a3c <__aeabi_dmul+0x4c0>
 8002ae8:	421c      	tst	r4, r3
 8002aea:	d1a7      	bne.n	8002a3c <__aeabi_dmul+0x4c0>
 8002aec:	431c      	orrs	r4, r3
 8002aee:	9b00      	ldr	r3, [sp, #0]
 8002af0:	0002      	movs	r2, r0
 8002af2:	469b      	mov	fp, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002af6:	e597      	b.n	8002628 <__aeabi_dmul+0xac>
 8002af8:	2400      	movs	r4, #0
 8002afa:	e6c1      	b.n	8002880 <__aeabi_dmul+0x304>
 8002afc:	2400      	movs	r4, #0
 8002afe:	4b01      	ldr	r3, [pc, #4]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002b00:	0022      	movs	r2, r4
 8002b02:	e591      	b.n	8002628 <__aeabi_dmul+0xac>
 8002b04:	000007ff 	.word	0x000007ff
 8002b08:	0000041e 	.word	0x0000041e

08002b0c <__aeabi_dsub>:
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	464e      	mov	r6, r9
 8002b10:	4645      	mov	r5, r8
 8002b12:	46de      	mov	lr, fp
 8002b14:	4657      	mov	r7, sl
 8002b16:	b5e0      	push	{r5, r6, r7, lr}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	9000      	str	r0, [sp, #0]
 8002b1c:	9101      	str	r1, [sp, #4]
 8002b1e:	030c      	lsls	r4, r1, #12
 8002b20:	004f      	lsls	r7, r1, #1
 8002b22:	0fce      	lsrs	r6, r1, #31
 8002b24:	0a61      	lsrs	r1, r4, #9
 8002b26:	9c00      	ldr	r4, [sp, #0]
 8002b28:	46b0      	mov	r8, r6
 8002b2a:	0f64      	lsrs	r4, r4, #29
 8002b2c:	430c      	orrs	r4, r1
 8002b2e:	9900      	ldr	r1, [sp, #0]
 8002b30:	0d7f      	lsrs	r7, r7, #21
 8002b32:	00c8      	lsls	r0, r1, #3
 8002b34:	0011      	movs	r1, r2
 8002b36:	001a      	movs	r2, r3
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	469c      	mov	ip, r3
 8002b3c:	9100      	str	r1, [sp, #0]
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	0051      	lsls	r1, r2, #1
 8002b42:	0d4b      	lsrs	r3, r1, #21
 8002b44:	4699      	mov	r9, r3
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	9d00      	ldr	r5, [sp, #0]
 8002b4a:	0fd9      	lsrs	r1, r3, #31
 8002b4c:	4663      	mov	r3, ip
 8002b4e:	0f6a      	lsrs	r2, r5, #29
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	4313      	orrs	r3, r2
 8002b54:	00ea      	lsls	r2, r5, #3
 8002b56:	4694      	mov	ip, r2
 8002b58:	4693      	mov	fp, r2
 8002b5a:	4ac1      	ldr	r2, [pc, #772]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002b5c:	9003      	str	r0, [sp, #12]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	4591      	cmp	r9, r2
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x5a>
 8002b64:	e0cd      	b.n	8002d02 <__aeabi_dsub+0x1f6>
 8002b66:	2501      	movs	r5, #1
 8002b68:	4069      	eors	r1, r5
 8002b6a:	464d      	mov	r5, r9
 8002b6c:	1b7d      	subs	r5, r7, r5
 8002b6e:	46aa      	mov	sl, r5
 8002b70:	428e      	cmp	r6, r1
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x6a>
 8002b74:	e080      	b.n	8002c78 <__aeabi_dsub+0x16c>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	dc00      	bgt.n	8002b7c <__aeabi_dsub+0x70>
 8002b7a:	e335      	b.n	80031e8 <__aeabi_dsub+0x6dc>
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x78>
 8002b82:	e0df      	b.n	8002d44 <__aeabi_dsub+0x238>
 8002b84:	4297      	cmp	r7, r2
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x7e>
 8002b88:	e194      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002b8a:	4652      	mov	r2, sl
 8002b8c:	2501      	movs	r5, #1
 8002b8e:	2a38      	cmp	r2, #56	@ 0x38
 8002b90:	dc19      	bgt.n	8002bc6 <__aeabi_dsub+0xba>
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	9b02      	ldr	r3, [sp, #8]
 8002b96:	0412      	lsls	r2, r2, #16
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	4652      	mov	r2, sl
 8002b9e:	2a1f      	cmp	r2, #31
 8002ba0:	dd00      	ble.n	8002ba4 <__aeabi_dsub+0x98>
 8002ba2:	e1e3      	b.n	8002f6c <__aeabi_dsub+0x460>
 8002ba4:	4653      	mov	r3, sl
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	4661      	mov	r1, ip
 8002baa:	9d02      	ldr	r5, [sp, #8]
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	4095      	lsls	r5, r2
 8002bb0:	40d9      	lsrs	r1, r3
 8002bb2:	430d      	orrs	r5, r1
 8002bb4:	4661      	mov	r1, ip
 8002bb6:	4091      	lsls	r1, r2
 8002bb8:	000a      	movs	r2, r1
 8002bba:	1e51      	subs	r1, r2, #1
 8002bbc:	418a      	sbcs	r2, r1
 8002bbe:	4315      	orrs	r5, r2
 8002bc0:	9a02      	ldr	r2, [sp, #8]
 8002bc2:	40da      	lsrs	r2, r3
 8002bc4:	1aa4      	subs	r4, r4, r2
 8002bc6:	1b45      	subs	r5, r0, r5
 8002bc8:	42a8      	cmp	r0, r5
 8002bca:	4180      	sbcs	r0, r0
 8002bcc:	4240      	negs	r0, r0
 8002bce:	1a24      	subs	r4, r4, r0
 8002bd0:	0223      	lsls	r3, r4, #8
 8002bd2:	d400      	bmi.n	8002bd6 <__aeabi_dsub+0xca>
 8002bd4:	e13d      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002bd6:	0264      	lsls	r4, r4, #9
 8002bd8:	0a64      	lsrs	r4, r4, #9
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0xd4>
 8002bde:	e147      	b.n	8002e70 <__aeabi_dsub+0x364>
 8002be0:	0020      	movs	r0, r4
 8002be2:	f000 fcab 	bl	800353c <__clzsi2>
 8002be6:	0003      	movs	r3, r0
 8002be8:	3b08      	subs	r3, #8
 8002bea:	2120      	movs	r1, #32
 8002bec:	0028      	movs	r0, r5
 8002bee:	1aca      	subs	r2, r1, r3
 8002bf0:	40d0      	lsrs	r0, r2
 8002bf2:	409c      	lsls	r4, r3
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	409d      	lsls	r5, r3
 8002bf8:	4322      	orrs	r2, r4
 8002bfa:	429f      	cmp	r7, r3
 8002bfc:	dd00      	ble.n	8002c00 <__aeabi_dsub+0xf4>
 8002bfe:	e177      	b.n	8002ef0 <__aeabi_dsub+0x3e4>
 8002c00:	1bd8      	subs	r0, r3, r7
 8002c02:	3001      	adds	r0, #1
 8002c04:	1a09      	subs	r1, r1, r0
 8002c06:	002c      	movs	r4, r5
 8002c08:	408d      	lsls	r5, r1
 8002c0a:	40c4      	lsrs	r4, r0
 8002c0c:	1e6b      	subs	r3, r5, #1
 8002c0e:	419d      	sbcs	r5, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	40c2      	lsrs	r2, r0
 8002c14:	408b      	lsls	r3, r1
 8002c16:	4325      	orrs	r5, r4
 8002c18:	2700      	movs	r7, #0
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	431d      	orrs	r5, r3
 8002c1e:	076b      	lsls	r3, r5, #29
 8002c20:	d009      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c22:	230f      	movs	r3, #15
 8002c24:	402b      	ands	r3, r5
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d005      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c2a:	1d2b      	adds	r3, r5, #4
 8002c2c:	42ab      	cmp	r3, r5
 8002c2e:	41ad      	sbcs	r5, r5
 8002c30:	426d      	negs	r5, r5
 8002c32:	1964      	adds	r4, r4, r5
 8002c34:	001d      	movs	r5, r3
 8002c36:	0223      	lsls	r3, r4, #8
 8002c38:	d400      	bmi.n	8002c3c <__aeabi_dsub+0x130>
 8002c3a:	e140      	b.n	8002ebe <__aeabi_dsub+0x3b2>
 8002c3c:	4a88      	ldr	r2, [pc, #544]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002c3e:	3701      	adds	r7, #1
 8002c40:	4297      	cmp	r7, r2
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dsub+0x13a>
 8002c44:	e101      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002c46:	2601      	movs	r6, #1
 8002c48:	4643      	mov	r3, r8
 8002c4a:	4986      	ldr	r1, [pc, #536]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002c4c:	08ed      	lsrs	r5, r5, #3
 8002c4e:	4021      	ands	r1, r4
 8002c50:	074a      	lsls	r2, r1, #29
 8002c52:	432a      	orrs	r2, r5
 8002c54:	057c      	lsls	r4, r7, #21
 8002c56:	024d      	lsls	r5, r1, #9
 8002c58:	0b2d      	lsrs	r5, r5, #12
 8002c5a:	0d64      	lsrs	r4, r4, #21
 8002c5c:	401e      	ands	r6, r3
 8002c5e:	0524      	lsls	r4, r4, #20
 8002c60:	432c      	orrs	r4, r5
 8002c62:	07f6      	lsls	r6, r6, #31
 8002c64:	4334      	orrs	r4, r6
 8002c66:	0010      	movs	r0, r2
 8002c68:	0021      	movs	r1, r4
 8002c6a:	b005      	add	sp, #20
 8002c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c6e:	46bb      	mov	fp, r7
 8002c70:	46b2      	mov	sl, r6
 8002c72:	46a9      	mov	r9, r5
 8002c74:	46a0      	mov	r8, r4
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x172>
 8002c7c:	e2d0      	b.n	8003220 <__aeabi_dsub+0x714>
 8002c7e:	4649      	mov	r1, r9
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x17a>
 8002c84:	e0d4      	b.n	8002e30 <__aeabi_dsub+0x324>
 8002c86:	4661      	mov	r1, ip
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x184>
 8002c8e:	e12b      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002c90:	1e69      	subs	r1, r5, #1
 8002c92:	2d01      	cmp	r5, #1
 8002c94:	d100      	bne.n	8002c98 <__aeabi_dsub+0x18c>
 8002c96:	e1d9      	b.n	800304c <__aeabi_dsub+0x540>
 8002c98:	4295      	cmp	r5, r2
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x192>
 8002c9c:	e10a      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002c9e:	2501      	movs	r5, #1
 8002ca0:	2938      	cmp	r1, #56	@ 0x38
 8002ca2:	dc17      	bgt.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002ca4:	468a      	mov	sl, r1
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	2b1f      	cmp	r3, #31
 8002caa:	dd00      	ble.n	8002cae <__aeabi_dsub+0x1a2>
 8002cac:	e1e7      	b.n	800307e <__aeabi_dsub+0x572>
 8002cae:	2220      	movs	r2, #32
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	9b02      	ldr	r3, [sp, #8]
 8002cb4:	4661      	mov	r1, ip
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	001d      	movs	r5, r3
 8002cba:	4653      	mov	r3, sl
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	430d      	orrs	r5, r1
 8002cc6:	1e51      	subs	r1, r2, #1
 8002cc8:	418a      	sbcs	r2, r1
 8002cca:	4653      	mov	r3, sl
 8002ccc:	4315      	orrs	r5, r2
 8002cce:	9a02      	ldr	r2, [sp, #8]
 8002cd0:	40da      	lsrs	r2, r3
 8002cd2:	18a4      	adds	r4, r4, r2
 8002cd4:	182d      	adds	r5, r5, r0
 8002cd6:	4285      	cmp	r5, r0
 8002cd8:	4180      	sbcs	r0, r0
 8002cda:	4240      	negs	r0, r0
 8002cdc:	1824      	adds	r4, r4, r0
 8002cde:	0223      	lsls	r3, r4, #8
 8002ce0:	d400      	bmi.n	8002ce4 <__aeabi_dsub+0x1d8>
 8002ce2:	e0b6      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002ce6:	3701      	adds	r7, #1
 8002ce8:	429f      	cmp	r7, r3
 8002cea:	d100      	bne.n	8002cee <__aeabi_dsub+0x1e2>
 8002cec:	e0ad      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002cf2:	086a      	lsrs	r2, r5, #1
 8002cf4:	401c      	ands	r4, r3
 8002cf6:	4029      	ands	r1, r5
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	07e5      	lsls	r5, r4, #31
 8002cfc:	4315      	orrs	r5, r2
 8002cfe:	0864      	lsrs	r4, r4, #1
 8002d00:	e78d      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002d02:	4a59      	ldr	r2, [pc, #356]	@ (8002e68 <__aeabi_dsub+0x35c>)
 8002d04:	9b02      	ldr	r3, [sp, #8]
 8002d06:	4692      	mov	sl, r2
 8002d08:	4662      	mov	r2, ip
 8002d0a:	44ba      	add	sl, r7
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	d02c      	beq.n	8002d6a <__aeabi_dsub+0x25e>
 8002d10:	428e      	cmp	r6, r1
 8002d12:	d02e      	beq.n	8002d72 <__aeabi_dsub+0x266>
 8002d14:	4652      	mov	r2, sl
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d060      	beq.n	8002ddc <__aeabi_dsub+0x2d0>
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d100      	bne.n	8002d20 <__aeabi_dsub+0x214>
 8002d1e:	e0db      	b.n	8002ed8 <__aeabi_dsub+0x3cc>
 8002d20:	4663      	mov	r3, ip
 8002d22:	000e      	movs	r6, r1
 8002d24:	9c02      	ldr	r4, [sp, #8]
 8002d26:	08d8      	lsrs	r0, r3, #3
 8002d28:	0762      	lsls	r2, r4, #29
 8002d2a:	4302      	orrs	r2, r0
 8002d2c:	08e4      	lsrs	r4, r4, #3
 8002d2e:	0013      	movs	r3, r2
 8002d30:	4323      	orrs	r3, r4
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x22a>
 8002d34:	e254      	b.n	80031e0 <__aeabi_dsub+0x6d4>
 8002d36:	2580      	movs	r5, #128	@ 0x80
 8002d38:	032d      	lsls	r5, r5, #12
 8002d3a:	4325      	orrs	r5, r4
 8002d3c:	032d      	lsls	r5, r5, #12
 8002d3e:	4c48      	ldr	r4, [pc, #288]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d40:	0b2d      	lsrs	r5, r5, #12
 8002d42:	e78c      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002d44:	4661      	mov	r1, ip
 8002d46:	9b02      	ldr	r3, [sp, #8]
 8002d48:	4319      	orrs	r1, r3
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x242>
 8002d4c:	e0cc      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002d4e:	0029      	movs	r1, r5
 8002d50:	3901      	subs	r1, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x24c>
 8002d56:	e188      	b.n	800306a <__aeabi_dsub+0x55e>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x252>
 8002d5c:	e0aa      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dd00      	ble.n	8002d66 <__aeabi_dsub+0x25a>
 8002d64:	e72f      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002d66:	468a      	mov	sl, r1
 8002d68:	e718      	b.n	8002b9c <__aeabi_dsub+0x90>
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4051      	eors	r1, r2
 8002d6e:	428e      	cmp	r6, r1
 8002d70:	d1d0      	bne.n	8002d14 <__aeabi_dsub+0x208>
 8002d72:	4653      	mov	r3, sl
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x26e>
 8002d78:	e0be      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	d000      	beq.n	8002d80 <__aeabi_dsub+0x274>
 8002d7e:	e138      	b.n	8002ff2 <__aeabi_dsub+0x4e6>
 8002d80:	46ca      	mov	sl, r9
 8002d82:	0022      	movs	r2, r4
 8002d84:	4302      	orrs	r2, r0
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x27e>
 8002d88:	e1e2      	b.n	8003150 <__aeabi_dsub+0x644>
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	1e59      	subs	r1, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d100      	bne.n	8002d94 <__aeabi_dsub+0x288>
 8002d92:	e20d      	b.n	80031b0 <__aeabi_dsub+0x6a4>
 8002d94:	4a32      	ldr	r2, [pc, #200]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d96:	4592      	cmp	sl, r2
 8002d98:	d100      	bne.n	8002d9c <__aeabi_dsub+0x290>
 8002d9a:	e1d2      	b.n	8003142 <__aeabi_dsub+0x636>
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	2938      	cmp	r1, #56	@ 0x38
 8002da0:	dc13      	bgt.n	8002dca <__aeabi_dsub+0x2be>
 8002da2:	291f      	cmp	r1, #31
 8002da4:	dd00      	ble.n	8002da8 <__aeabi_dsub+0x29c>
 8002da6:	e1ee      	b.n	8003186 <__aeabi_dsub+0x67a>
 8002da8:	2220      	movs	r2, #32
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	1a52      	subs	r2, r2, r1
 8002dae:	0025      	movs	r5, r4
 8002db0:	0007      	movs	r7, r0
 8002db2:	469a      	mov	sl, r3
 8002db4:	40cc      	lsrs	r4, r1
 8002db6:	4090      	lsls	r0, r2
 8002db8:	4095      	lsls	r5, r2
 8002dba:	40cf      	lsrs	r7, r1
 8002dbc:	44a2      	add	sl, r4
 8002dbe:	1e42      	subs	r2, r0, #1
 8002dc0:	4190      	sbcs	r0, r2
 8002dc2:	4653      	mov	r3, sl
 8002dc4:	432f      	orrs	r7, r5
 8002dc6:	4307      	orrs	r7, r0
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	003d      	movs	r5, r7
 8002dcc:	4465      	add	r5, ip
 8002dce:	4565      	cmp	r5, ip
 8002dd0:	4192      	sbcs	r2, r2
 8002dd2:	9b02      	ldr	r3, [sp, #8]
 8002dd4:	4252      	negs	r2, r2
 8002dd6:	464f      	mov	r7, r9
 8002dd8:	18d4      	adds	r4, r2, r3
 8002dda:	e780      	b.n	8002cde <__aeabi_dsub+0x1d2>
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <__aeabi_dsub+0x360>)
 8002dde:	1c7d      	adds	r5, r7, #1
 8002de0:	4215      	tst	r5, r2
 8002de2:	d000      	beq.n	8002de6 <__aeabi_dsub+0x2da>
 8002de4:	e0aa      	b.n	8002f3c <__aeabi_dsub+0x430>
 8002de6:	4662      	mov	r2, ip
 8002de8:	0025      	movs	r5, r4
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	4305      	orrs	r5, r0
 8002dee:	431a      	orrs	r2, r3
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	d000      	beq.n	8002df6 <__aeabi_dsub+0x2ea>
 8002df4:	e0f5      	b.n	8002fe2 <__aeabi_dsub+0x4d6>
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x2f0>
 8002dfa:	e16b      	b.n	80030d4 <__aeabi_dsub+0x5c8>
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d100      	bne.n	8002e02 <__aeabi_dsub+0x2f6>
 8002e00:	e152      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002e02:	4663      	mov	r3, ip
 8002e04:	1ac5      	subs	r5, r0, r3
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	1ae2      	subs	r2, r4, r3
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	419b      	sbcs	r3, r3
 8002e0e:	425b      	negs	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	d400      	bmi.n	8002e18 <__aeabi_dsub+0x30c>
 8002e16:	e1d5      	b.n	80031c4 <__aeabi_dsub+0x6b8>
 8002e18:	4663      	mov	r3, ip
 8002e1a:	1a1d      	subs	r5, r3, r0
 8002e1c:	45ac      	cmp	ip, r5
 8002e1e:	4192      	sbcs	r2, r2
 8002e20:	2601      	movs	r6, #1
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	4252      	negs	r2, r2
 8002e26:	1b1c      	subs	r4, r3, r4
 8002e28:	4688      	mov	r8, r1
 8002e2a:	1aa4      	subs	r4, r4, r2
 8002e2c:	400e      	ands	r6, r1
 8002e2e:	e6f6      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002e30:	4297      	cmp	r7, r2
 8002e32:	d03f      	beq.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002e34:	4652      	mov	r2, sl
 8002e36:	2501      	movs	r5, #1
 8002e38:	2a38      	cmp	r2, #56	@ 0x38
 8002e3a:	dd00      	ble.n	8002e3e <__aeabi_dsub+0x332>
 8002e3c:	e74a      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	9b02      	ldr	r3, [sp, #8]
 8002e42:	0412      	lsls	r2, r2, #16
 8002e44:	4313      	orrs	r3, r2
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	e72d      	b.n	8002ca6 <__aeabi_dsub+0x19a>
 8002e4a:	003c      	movs	r4, r7
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	e705      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002e52:	2307      	movs	r3, #7
 8002e54:	402b      	ands	r3, r5
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x350>
 8002e5a:	e6e2      	b.n	8002c22 <__aeabi_dsub+0x116>
 8002e5c:	e06b      	b.n	8002f36 <__aeabi_dsub+0x42a>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	000007ff 	.word	0x000007ff
 8002e64:	ff7fffff 	.word	0xff7fffff
 8002e68:	fffff801 	.word	0xfffff801
 8002e6c:	000007fe 	.word	0x000007fe
 8002e70:	0028      	movs	r0, r5
 8002e72:	f000 fb63 	bl	800353c <__clzsi2>
 8002e76:	0003      	movs	r3, r0
 8002e78:	3318      	adds	r3, #24
 8002e7a:	2b1f      	cmp	r3, #31
 8002e7c:	dc00      	bgt.n	8002e80 <__aeabi_dsub+0x374>
 8002e7e:	e6b4      	b.n	8002bea <__aeabi_dsub+0xde>
 8002e80:	002a      	movs	r2, r5
 8002e82:	3808      	subs	r0, #8
 8002e84:	4082      	lsls	r2, r0
 8002e86:	429f      	cmp	r7, r3
 8002e88:	dd00      	ble.n	8002e8c <__aeabi_dsub+0x380>
 8002e8a:	e0b9      	b.n	8003000 <__aeabi_dsub+0x4f4>
 8002e8c:	1bdb      	subs	r3, r3, r7
 8002e8e:	1c58      	adds	r0, r3, #1
 8002e90:	281f      	cmp	r0, #31
 8002e92:	dc00      	bgt.n	8002e96 <__aeabi_dsub+0x38a>
 8002e94:	e1a0      	b.n	80031d8 <__aeabi_dsub+0x6cc>
 8002e96:	0015      	movs	r5, r2
 8002e98:	3b1f      	subs	r3, #31
 8002e9a:	40dd      	lsrs	r5, r3
 8002e9c:	2820      	cmp	r0, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x3a0>
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	1e53      	subs	r3, r2, #1
 8002ea8:	419a      	sbcs	r2, r3
 8002eaa:	4315      	orrs	r5, r2
 8002eac:	2307      	movs	r3, #7
 8002eae:	2700      	movs	r7, #0
 8002eb0:	402b      	ands	r3, r5
 8002eb2:	e7d0      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8002eb4:	08c0      	lsrs	r0, r0, #3
 8002eb6:	0762      	lsls	r2, r4, #29
 8002eb8:	4302      	orrs	r2, r0
 8002eba:	08e4      	lsrs	r4, r4, #3
 8002ebc:	e737      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ebe:	08ea      	lsrs	r2, r5, #3
 8002ec0:	0763      	lsls	r3, r4, #29
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4bd3      	ldr	r3, [pc, #844]	@ (8003214 <__aeabi_dsub+0x708>)
 8002ec6:	08e4      	lsrs	r4, r4, #3
 8002ec8:	429f      	cmp	r7, r3
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x3c2>
 8002ecc:	e72f      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ece:	0324      	lsls	r4, r4, #12
 8002ed0:	0b25      	lsrs	r5, r4, #12
 8002ed2:	057c      	lsls	r4, r7, #21
 8002ed4:	0d64      	lsrs	r4, r4, #21
 8002ed6:	e6c2      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002ed8:	46ca      	mov	sl, r9
 8002eda:	0022      	movs	r2, r4
 8002edc:	4302      	orrs	r2, r0
 8002ede:	d158      	bne.n	8002f92 <__aeabi_dsub+0x486>
 8002ee0:	4663      	mov	r3, ip
 8002ee2:	000e      	movs	r6, r1
 8002ee4:	9c02      	ldr	r4, [sp, #8]
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	4657      	mov	r7, sl
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	e7e7      	b.n	8002ec0 <__aeabi_dsub+0x3b4>
 8002ef0:	4cc9      	ldr	r4, [pc, #804]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002ef2:	1aff      	subs	r7, r7, r3
 8002ef4:	4014      	ands	r4, r2
 8002ef6:	e692      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002ef8:	4dc8      	ldr	r5, [pc, #800]	@ (800321c <__aeabi_dsub+0x710>)
 8002efa:	1c7a      	adds	r2, r7, #1
 8002efc:	422a      	tst	r2, r5
 8002efe:	d000      	beq.n	8002f02 <__aeabi_dsub+0x3f6>
 8002f00:	e084      	b.n	800300c <__aeabi_dsub+0x500>
 8002f02:	0022      	movs	r2, r4
 8002f04:	4302      	orrs	r2, r0
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d000      	beq.n	8002f0c <__aeabi_dsub+0x400>
 8002f0a:	e0ef      	b.n	80030ec <__aeabi_dsub+0x5e0>
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x406>
 8002f10:	e0e5      	b.n	80030de <__aeabi_dsub+0x5d2>
 8002f12:	4662      	mov	r2, ip
 8002f14:	9902      	ldr	r1, [sp, #8]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	d100      	bne.n	8002f1c <__aeabi_dsub+0x410>
 8002f1a:	e0c5      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002f1c:	4663      	mov	r3, ip
 8002f1e:	18c5      	adds	r5, r0, r3
 8002f20:	468c      	mov	ip, r1
 8002f22:	4285      	cmp	r5, r0
 8002f24:	4180      	sbcs	r0, r0
 8002f26:	4464      	add	r4, ip
 8002f28:	4240      	negs	r0, r0
 8002f2a:	1824      	adds	r4, r4, r0
 8002f2c:	0223      	lsls	r3, r4, #8
 8002f2e:	d502      	bpl.n	8002f36 <__aeabi_dsub+0x42a>
 8002f30:	4bb9      	ldr	r3, [pc, #740]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002f32:	3701      	adds	r7, #1
 8002f34:	401c      	ands	r4, r3
 8002f36:	46ba      	mov	sl, r7
 8002f38:	9503      	str	r5, [sp, #12]
 8002f3a:	e7d5      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002f3c:	4662      	mov	r2, ip
 8002f3e:	1a85      	subs	r5, r0, r2
 8002f40:	42a8      	cmp	r0, r5
 8002f42:	4192      	sbcs	r2, r2
 8002f44:	4252      	negs	r2, r2
 8002f46:	4691      	mov	r9, r2
 8002f48:	9b02      	ldr	r3, [sp, #8]
 8002f4a:	1ae3      	subs	r3, r4, r3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1ad2      	subs	r2, r2, r3
 8002f52:	0013      	movs	r3, r2
 8002f54:	4691      	mov	r9, r2
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	d46c      	bmi.n	8003034 <__aeabi_dsub+0x528>
 8002f5a:	464a      	mov	r2, r9
 8002f5c:	464c      	mov	r4, r9
 8002f5e:	432a      	orrs	r2, r5
 8002f60:	d000      	beq.n	8002f64 <__aeabi_dsub+0x458>
 8002f62:	e63a      	b.n	8002bda <__aeabi_dsub+0xce>
 8002f64:	2600      	movs	r6, #0
 8002f66:	2400      	movs	r4, #0
 8002f68:	2500      	movs	r5, #0
 8002f6a:	e678      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002f6c:	9902      	ldr	r1, [sp, #8]
 8002f6e:	4653      	mov	r3, sl
 8002f70:	000d      	movs	r5, r1
 8002f72:	3a20      	subs	r2, #32
 8002f74:	40d5      	lsrs	r5, r2
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d006      	beq.n	8002f88 <__aeabi_dsub+0x47c>
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	000b      	movs	r3, r1
 8002f80:	4093      	lsls	r3, r2
 8002f82:	4662      	mov	r2, ip
 8002f84:	431a      	orrs	r2, r3
 8002f86:	4693      	mov	fp, r2
 8002f88:	465b      	mov	r3, fp
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	4193      	sbcs	r3, r2
 8002f8e:	431d      	orrs	r5, r3
 8002f90:	e619      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002f92:	4653      	mov	r3, sl
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d100      	bne.n	8002f9c <__aeabi_dsub+0x490>
 8002f9a:	e0c6      	b.n	800312a <__aeabi_dsub+0x61e>
 8002f9c:	4e9d      	ldr	r6, [pc, #628]	@ (8003214 <__aeabi_dsub+0x708>)
 8002f9e:	45b2      	cmp	sl, r6
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x498>
 8002fa2:	e6bd      	b.n	8002d20 <__aeabi_dsub+0x214>
 8002fa4:	4688      	mov	r8, r1
 8002fa6:	000e      	movs	r6, r1
 8002fa8:	2501      	movs	r5, #1
 8002faa:	2a38      	cmp	r2, #56	@ 0x38
 8002fac:	dc10      	bgt.n	8002fd0 <__aeabi_dsub+0x4c4>
 8002fae:	2a1f      	cmp	r2, #31
 8002fb0:	dc7f      	bgt.n	80030b2 <__aeabi_dsub+0x5a6>
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	0025      	movs	r5, r4
 8002fb6:	1a89      	subs	r1, r1, r2
 8002fb8:	0007      	movs	r7, r0
 8002fba:	4088      	lsls	r0, r1
 8002fbc:	408d      	lsls	r5, r1
 8002fbe:	40d7      	lsrs	r7, r2
 8002fc0:	40d4      	lsrs	r4, r2
 8002fc2:	1e41      	subs	r1, r0, #1
 8002fc4:	4188      	sbcs	r0, r1
 8002fc6:	9b02      	ldr	r3, [sp, #8]
 8002fc8:	433d      	orrs	r5, r7
 8002fca:	1b1b      	subs	r3, r3, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	4662      	mov	r2, ip
 8002fd2:	1b55      	subs	r5, r2, r5
 8002fd4:	45ac      	cmp	ip, r5
 8002fd6:	4192      	sbcs	r2, r2
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4252      	negs	r2, r2
 8002fdc:	464f      	mov	r7, r9
 8002fde:	1a9c      	subs	r4, r3, r2
 8002fe0:	e5f6      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	d000      	beq.n	8002fe8 <__aeabi_dsub+0x4dc>
 8002fe6:	e0b7      	b.n	8003158 <__aeabi_dsub+0x64c>
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d100      	bne.n	8002fee <__aeabi_dsub+0x4e2>
 8002fec:	e0f0      	b.n	80031d0 <__aeabi_dsub+0x6c4>
 8002fee:	2601      	movs	r6, #1
 8002ff0:	400e      	ands	r6, r1
 8002ff2:	4663      	mov	r3, ip
 8002ff4:	9802      	ldr	r0, [sp, #8]
 8002ff6:	08d9      	lsrs	r1, r3, #3
 8002ff8:	0742      	lsls	r2, r0, #29
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	08c4      	lsrs	r4, r0, #3
 8002ffe:	e696      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003000:	4c85      	ldr	r4, [pc, #532]	@ (8003218 <__aeabi_dsub+0x70c>)
 8003002:	1aff      	subs	r7, r7, r3
 8003004:	4014      	ands	r4, r2
 8003006:	0762      	lsls	r2, r4, #29
 8003008:	08e4      	lsrs	r4, r4, #3
 800300a:	e760      	b.n	8002ece <__aeabi_dsub+0x3c2>
 800300c:	4981      	ldr	r1, [pc, #516]	@ (8003214 <__aeabi_dsub+0x708>)
 800300e:	428a      	cmp	r2, r1
 8003010:	d100      	bne.n	8003014 <__aeabi_dsub+0x508>
 8003012:	e0c9      	b.n	80031a8 <__aeabi_dsub+0x69c>
 8003014:	4663      	mov	r3, ip
 8003016:	18c1      	adds	r1, r0, r3
 8003018:	4281      	cmp	r1, r0
 800301a:	4180      	sbcs	r0, r0
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	4240      	negs	r0, r0
 8003020:	18e3      	adds	r3, r4, r3
 8003022:	181b      	adds	r3, r3, r0
 8003024:	07dd      	lsls	r5, r3, #31
 8003026:	085c      	lsrs	r4, r3, #1
 8003028:	2307      	movs	r3, #7
 800302a:	0849      	lsrs	r1, r1, #1
 800302c:	430d      	orrs	r5, r1
 800302e:	0017      	movs	r7, r2
 8003030:	402b      	ands	r3, r5
 8003032:	e710      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8003034:	4663      	mov	r3, ip
 8003036:	1a1d      	subs	r5, r3, r0
 8003038:	45ac      	cmp	ip, r5
 800303a:	4192      	sbcs	r2, r2
 800303c:	2601      	movs	r6, #1
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	4252      	negs	r2, r2
 8003042:	1b1c      	subs	r4, r3, r4
 8003044:	4688      	mov	r8, r1
 8003046:	1aa4      	subs	r4, r4, r2
 8003048:	400e      	ands	r6, r1
 800304a:	e5c6      	b.n	8002bda <__aeabi_dsub+0xce>
 800304c:	4663      	mov	r3, ip
 800304e:	18c5      	adds	r5, r0, r3
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	4285      	cmp	r5, r0
 8003054:	4180      	sbcs	r0, r0
 8003056:	469c      	mov	ip, r3
 8003058:	4240      	negs	r0, r0
 800305a:	4464      	add	r4, ip
 800305c:	1824      	adds	r4, r4, r0
 800305e:	2701      	movs	r7, #1
 8003060:	0223      	lsls	r3, r4, #8
 8003062:	d400      	bmi.n	8003066 <__aeabi_dsub+0x55a>
 8003064:	e6f5      	b.n	8002e52 <__aeabi_dsub+0x346>
 8003066:	2702      	movs	r7, #2
 8003068:	e641      	b.n	8002cee <__aeabi_dsub+0x1e2>
 800306a:	4663      	mov	r3, ip
 800306c:	1ac5      	subs	r5, r0, r3
 800306e:	42a8      	cmp	r0, r5
 8003070:	4180      	sbcs	r0, r0
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	4240      	negs	r0, r0
 8003076:	1ae4      	subs	r4, r4, r3
 8003078:	2701      	movs	r7, #1
 800307a:	1a24      	subs	r4, r4, r0
 800307c:	e5a8      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 800307e:	9d02      	ldr	r5, [sp, #8]
 8003080:	4652      	mov	r2, sl
 8003082:	002b      	movs	r3, r5
 8003084:	3a20      	subs	r2, #32
 8003086:	40d3      	lsrs	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	4653      	mov	r3, sl
 800308c:	2b20      	cmp	r3, #32
 800308e:	d006      	beq.n	800309e <__aeabi_dsub+0x592>
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	002b      	movs	r3, r5
 8003096:	4093      	lsls	r3, r2
 8003098:	4662      	mov	r2, ip
 800309a:	431a      	orrs	r2, r3
 800309c:	4693      	mov	fp, r2
 800309e:	465d      	mov	r5, fp
 80030a0:	1e6b      	subs	r3, r5, #1
 80030a2:	419d      	sbcs	r5, r3
 80030a4:	430d      	orrs	r5, r1
 80030a6:	e615      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 80030a8:	0762      	lsls	r2, r4, #29
 80030aa:	08c0      	lsrs	r0, r0, #3
 80030ac:	4302      	orrs	r2, r0
 80030ae:	08e4      	lsrs	r4, r4, #3
 80030b0:	e70d      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030b2:	0011      	movs	r1, r2
 80030b4:	0027      	movs	r7, r4
 80030b6:	3920      	subs	r1, #32
 80030b8:	40cf      	lsrs	r7, r1
 80030ba:	2a20      	cmp	r2, #32
 80030bc:	d005      	beq.n	80030ca <__aeabi_dsub+0x5be>
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	1a8a      	subs	r2, r1, r2
 80030c2:	4094      	lsls	r4, r2
 80030c4:	0025      	movs	r5, r4
 80030c6:	4305      	orrs	r5, r0
 80030c8:	9503      	str	r5, [sp, #12]
 80030ca:	9d03      	ldr	r5, [sp, #12]
 80030cc:	1e6a      	subs	r2, r5, #1
 80030ce:	4195      	sbcs	r5, r2
 80030d0:	433d      	orrs	r5, r7
 80030d2:	e77d      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d100      	bne.n	80030da <__aeabi_dsub+0x5ce>
 80030d8:	e744      	b.n	8002f64 <__aeabi_dsub+0x458>
 80030da:	2601      	movs	r6, #1
 80030dc:	400e      	ands	r6, r1
 80030de:	4663      	mov	r3, ip
 80030e0:	08d9      	lsrs	r1, r3, #3
 80030e2:	9b02      	ldr	r3, [sp, #8]
 80030e4:	075a      	lsls	r2, r3, #29
 80030e6:	430a      	orrs	r2, r1
 80030e8:	08dc      	lsrs	r4, r3, #3
 80030ea:	e6f0      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d028      	beq.n	8003142 <__aeabi_dsub+0x636>
 80030f0:	4662      	mov	r2, ip
 80030f2:	9f02      	ldr	r7, [sp, #8]
 80030f4:	08c0      	lsrs	r0, r0, #3
 80030f6:	433a      	orrs	r2, r7
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x5f0>
 80030fa:	e6dc      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 80030fc:	0762      	lsls	r2, r4, #29
 80030fe:	4310      	orrs	r0, r2
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	08e4      	lsrs	r4, r4, #3
 8003104:	0312      	lsls	r2, r2, #12
 8003106:	4214      	tst	r4, r2
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x612>
 800310a:	08fd      	lsrs	r5, r7, #3
 800310c:	4215      	tst	r5, r2
 800310e:	d106      	bne.n	800311e <__aeabi_dsub+0x612>
 8003110:	4663      	mov	r3, ip
 8003112:	2601      	movs	r6, #1
 8003114:	002c      	movs	r4, r5
 8003116:	08d8      	lsrs	r0, r3, #3
 8003118:	077b      	lsls	r3, r7, #29
 800311a:	4318      	orrs	r0, r3
 800311c:	400e      	ands	r6, r1
 800311e:	0f42      	lsrs	r2, r0, #29
 8003120:	00c0      	lsls	r0, r0, #3
 8003122:	08c0      	lsrs	r0, r0, #3
 8003124:	0752      	lsls	r2, r2, #29
 8003126:	4302      	orrs	r2, r0
 8003128:	e601      	b.n	8002d2e <__aeabi_dsub+0x222>
 800312a:	4663      	mov	r3, ip
 800312c:	1a1d      	subs	r5, r3, r0
 800312e:	45ac      	cmp	ip, r5
 8003130:	4192      	sbcs	r2, r2
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4252      	negs	r2, r2
 8003136:	1b1c      	subs	r4, r3, r4
 8003138:	000e      	movs	r6, r1
 800313a:	4688      	mov	r8, r1
 800313c:	2701      	movs	r7, #1
 800313e:	1aa4      	subs	r4, r4, r2
 8003140:	e546      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8003142:	4663      	mov	r3, ip
 8003144:	08d9      	lsrs	r1, r3, #3
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	075a      	lsls	r2, r3, #29
 800314a:	430a      	orrs	r2, r1
 800314c:	08dc      	lsrs	r4, r3, #3
 800314e:	e5ee      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003150:	4663      	mov	r3, ip
 8003152:	9c02      	ldr	r4, [sp, #8]
 8003154:	9303      	str	r3, [sp, #12]
 8003156:	e6c7      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8003158:	08c0      	lsrs	r0, r0, #3
 800315a:	2a00      	cmp	r2, #0
 800315c:	d100      	bne.n	8003160 <__aeabi_dsub+0x654>
 800315e:	e6aa      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 8003160:	0762      	lsls	r2, r4, #29
 8003162:	4310      	orrs	r0, r2
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	08e4      	lsrs	r4, r4, #3
 8003168:	0312      	lsls	r2, r2, #12
 800316a:	4214      	tst	r4, r2
 800316c:	d0d7      	beq.n	800311e <__aeabi_dsub+0x612>
 800316e:	9f02      	ldr	r7, [sp, #8]
 8003170:	08fd      	lsrs	r5, r7, #3
 8003172:	4215      	tst	r5, r2
 8003174:	d1d3      	bne.n	800311e <__aeabi_dsub+0x612>
 8003176:	4663      	mov	r3, ip
 8003178:	2601      	movs	r6, #1
 800317a:	08d8      	lsrs	r0, r3, #3
 800317c:	077b      	lsls	r3, r7, #29
 800317e:	002c      	movs	r4, r5
 8003180:	4318      	orrs	r0, r3
 8003182:	400e      	ands	r6, r1
 8003184:	e7cb      	b.n	800311e <__aeabi_dsub+0x612>
 8003186:	000a      	movs	r2, r1
 8003188:	0027      	movs	r7, r4
 800318a:	3a20      	subs	r2, #32
 800318c:	40d7      	lsrs	r7, r2
 800318e:	2920      	cmp	r1, #32
 8003190:	d005      	beq.n	800319e <__aeabi_dsub+0x692>
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	1a52      	subs	r2, r2, r1
 8003196:	4094      	lsls	r4, r2
 8003198:	0025      	movs	r5, r4
 800319a:	4305      	orrs	r5, r0
 800319c:	9503      	str	r5, [sp, #12]
 800319e:	9d03      	ldr	r5, [sp, #12]
 80031a0:	1e6a      	subs	r2, r5, #1
 80031a2:	4195      	sbcs	r5, r2
 80031a4:	432f      	orrs	r7, r5
 80031a6:	e610      	b.n	8002dca <__aeabi_dsub+0x2be>
 80031a8:	0014      	movs	r4, r2
 80031aa:	2500      	movs	r5, #0
 80031ac:	2200      	movs	r2, #0
 80031ae:	e556      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031b0:	9b02      	ldr	r3, [sp, #8]
 80031b2:	4460      	add	r0, ip
 80031b4:	4699      	mov	r9, r3
 80031b6:	4560      	cmp	r0, ip
 80031b8:	4192      	sbcs	r2, r2
 80031ba:	444c      	add	r4, r9
 80031bc:	4252      	negs	r2, r2
 80031be:	0005      	movs	r5, r0
 80031c0:	18a4      	adds	r4, r4, r2
 80031c2:	e74c      	b.n	800305e <__aeabi_dsub+0x552>
 80031c4:	001a      	movs	r2, r3
 80031c6:	001c      	movs	r4, r3
 80031c8:	432a      	orrs	r2, r5
 80031ca:	d000      	beq.n	80031ce <__aeabi_dsub+0x6c2>
 80031cc:	e6b3      	b.n	8002f36 <__aeabi_dsub+0x42a>
 80031ce:	e6c9      	b.n	8002f64 <__aeabi_dsub+0x458>
 80031d0:	2480      	movs	r4, #128	@ 0x80
 80031d2:	2600      	movs	r6, #0
 80031d4:	0324      	lsls	r4, r4, #12
 80031d6:	e5ae      	b.n	8002d36 <__aeabi_dsub+0x22a>
 80031d8:	2120      	movs	r1, #32
 80031da:	2500      	movs	r5, #0
 80031dc:	1a09      	subs	r1, r1, r0
 80031de:	e517      	b.n	8002c10 <__aeabi_dsub+0x104>
 80031e0:	2200      	movs	r2, #0
 80031e2:	2500      	movs	r5, #0
 80031e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003214 <__aeabi_dsub+0x708>)
 80031e6:	e53a      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	d100      	bne.n	80031ee <__aeabi_dsub+0x6e2>
 80031ec:	e5f6      	b.n	8002ddc <__aeabi_dsub+0x2d0>
 80031ee:	464b      	mov	r3, r9
 80031f0:	1bda      	subs	r2, r3, r7
 80031f2:	4692      	mov	sl, r2
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	d100      	bne.n	80031fa <__aeabi_dsub+0x6ee>
 80031f8:	e66f      	b.n	8002eda <__aeabi_dsub+0x3ce>
 80031fa:	2a38      	cmp	r2, #56	@ 0x38
 80031fc:	dc05      	bgt.n	800320a <__aeabi_dsub+0x6fe>
 80031fe:	2680      	movs	r6, #128	@ 0x80
 8003200:	0436      	lsls	r6, r6, #16
 8003202:	4334      	orrs	r4, r6
 8003204:	4688      	mov	r8, r1
 8003206:	000e      	movs	r6, r1
 8003208:	e6d1      	b.n	8002fae <__aeabi_dsub+0x4a2>
 800320a:	4688      	mov	r8, r1
 800320c:	000e      	movs	r6, r1
 800320e:	2501      	movs	r5, #1
 8003210:	e6de      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	000007ff 	.word	0x000007ff
 8003218:	ff7fffff 	.word	0xff7fffff
 800321c:	000007fe 	.word	0x000007fe
 8003220:	2d00      	cmp	r5, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x71a>
 8003224:	e668      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8003226:	464b      	mov	r3, r9
 8003228:	1bd9      	subs	r1, r3, r7
 800322a:	2f00      	cmp	r7, #0
 800322c:	d101      	bne.n	8003232 <__aeabi_dsub+0x726>
 800322e:	468a      	mov	sl, r1
 8003230:	e5a7      	b.n	8002d82 <__aeabi_dsub+0x276>
 8003232:	2701      	movs	r7, #1
 8003234:	2938      	cmp	r1, #56	@ 0x38
 8003236:	dd00      	ble.n	800323a <__aeabi_dsub+0x72e>
 8003238:	e5c7      	b.n	8002dca <__aeabi_dsub+0x2be>
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	0412      	lsls	r2, r2, #16
 800323e:	4314      	orrs	r4, r2
 8003240:	e5af      	b.n	8002da2 <__aeabi_dsub+0x296>
 8003242:	46c0      	nop			@ (mov r8, r8)

08003244 <__aeabi_dcmpun>:
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	46c6      	mov	lr, r8
 8003248:	031e      	lsls	r6, r3, #12
 800324a:	0b36      	lsrs	r6, r6, #12
 800324c:	46b0      	mov	r8, r6
 800324e:	4e0d      	ldr	r6, [pc, #52]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003250:	030c      	lsls	r4, r1, #12
 8003252:	004d      	lsls	r5, r1, #1
 8003254:	005f      	lsls	r7, r3, #1
 8003256:	b500      	push	{lr}
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d6d      	lsrs	r5, r5, #21
 800325c:	0d7f      	lsrs	r7, r7, #21
 800325e:	42b5      	cmp	r5, r6
 8003260:	d00b      	beq.n	800327a <__aeabi_dcmpun+0x36>
 8003262:	4908      	ldr	r1, [pc, #32]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003264:	2000      	movs	r0, #0
 8003266:	428f      	cmp	r7, r1
 8003268:	d104      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 800326a:	4646      	mov	r6, r8
 800326c:	4316      	orrs	r6, r2
 800326e:	0030      	movs	r0, r6
 8003270:	1e43      	subs	r3, r0, #1
 8003272:	4198      	sbcs	r0, r3
 8003274:	bc80      	pop	{r7}
 8003276:	46b8      	mov	r8, r7
 8003278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800327a:	4304      	orrs	r4, r0
 800327c:	2001      	movs	r0, #1
 800327e:	2c00      	cmp	r4, #0
 8003280:	d1f8      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 8003282:	e7ee      	b.n	8003262 <__aeabi_dcmpun+0x1e>
 8003284:	000007ff 	.word	0x000007ff

08003288 <__aeabi_d2iz>:
 8003288:	000b      	movs	r3, r1
 800328a:	0002      	movs	r2, r0
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d16      	ldr	r5, [pc, #88]	@ (80032e8 <__aeabi_d2iz+0x60>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	b082      	sub	sp, #8
 8003294:	0049      	lsls	r1, r1, #1
 8003296:	2000      	movs	r0, #0
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	0b24      	lsrs	r4, r4, #12
 800329e:	0d49      	lsrs	r1, r1, #21
 80032a0:	0fde      	lsrs	r6, r3, #31
 80032a2:	42a9      	cmp	r1, r5
 80032a4:	dd04      	ble.n	80032b0 <__aeabi_d2iz+0x28>
 80032a6:	4811      	ldr	r0, [pc, #68]	@ (80032ec <__aeabi_d2iz+0x64>)
 80032a8:	4281      	cmp	r1, r0
 80032aa:	dd03      	ble.n	80032b4 <__aeabi_d2iz+0x2c>
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <__aeabi_d2iz+0x68>)
 80032ae:	18f0      	adds	r0, r6, r3
 80032b0:	b002      	add	sp, #8
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	2080      	movs	r0, #128	@ 0x80
 80032b6:	0340      	lsls	r0, r0, #13
 80032b8:	4320      	orrs	r0, r4
 80032ba:	4c0e      	ldr	r4, [pc, #56]	@ (80032f4 <__aeabi_d2iz+0x6c>)
 80032bc:	1a64      	subs	r4, r4, r1
 80032be:	2c1f      	cmp	r4, #31
 80032c0:	dd08      	ble.n	80032d4 <__aeabi_d2iz+0x4c>
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <__aeabi_d2iz+0x70>)
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	40d8      	lsrs	r0, r3
 80032c8:	0003      	movs	r3, r0
 80032ca:	4258      	negs	r0, r3
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	d1ef      	bne.n	80032b0 <__aeabi_d2iz+0x28>
 80032d0:	0018      	movs	r0, r3
 80032d2:	e7ed      	b.n	80032b0 <__aeabi_d2iz+0x28>
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <__aeabi_d2iz+0x74>)
 80032d6:	9a00      	ldr	r2, [sp, #0]
 80032d8:	469c      	mov	ip, r3
 80032da:	0003      	movs	r3, r0
 80032dc:	4461      	add	r1, ip
 80032de:	408b      	lsls	r3, r1
 80032e0:	40e2      	lsrs	r2, r4
 80032e2:	4313      	orrs	r3, r2
 80032e4:	e7f1      	b.n	80032ca <__aeabi_d2iz+0x42>
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	000003fe 	.word	0x000003fe
 80032ec:	0000041d 	.word	0x0000041d
 80032f0:	7fffffff 	.word	0x7fffffff
 80032f4:	00000433 	.word	0x00000433
 80032f8:	00000413 	.word	0x00000413
 80032fc:	fffffbed 	.word	0xfffffbed

08003300 <__aeabi_i2d>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2800      	cmp	r0, #0
 8003304:	d016      	beq.n	8003334 <__aeabi_i2d+0x34>
 8003306:	17c3      	asrs	r3, r0, #31
 8003308:	18c5      	adds	r5, r0, r3
 800330a:	405d      	eors	r5, r3
 800330c:	0fc4      	lsrs	r4, r0, #31
 800330e:	0028      	movs	r0, r5
 8003310:	f000 f914 	bl	800353c <__clzsi2>
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <__aeabi_i2d+0x58>)
 8003316:	1a1b      	subs	r3, r3, r0
 8003318:	055b      	lsls	r3, r3, #21
 800331a:	0d5b      	lsrs	r3, r3, #21
 800331c:	280a      	cmp	r0, #10
 800331e:	dc14      	bgt.n	800334a <__aeabi_i2d+0x4a>
 8003320:	0002      	movs	r2, r0
 8003322:	002e      	movs	r6, r5
 8003324:	3215      	adds	r2, #21
 8003326:	4096      	lsls	r6, r2
 8003328:	220b      	movs	r2, #11
 800332a:	1a12      	subs	r2, r2, r0
 800332c:	40d5      	lsrs	r5, r2
 800332e:	032d      	lsls	r5, r5, #12
 8003330:	0b2d      	lsrs	r5, r5, #12
 8003332:	e003      	b.n	800333c <__aeabi_i2d+0x3c>
 8003334:	2400      	movs	r4, #0
 8003336:	2300      	movs	r3, #0
 8003338:	2500      	movs	r5, #0
 800333a:	2600      	movs	r6, #0
 800333c:	051b      	lsls	r3, r3, #20
 800333e:	432b      	orrs	r3, r5
 8003340:	07e4      	lsls	r4, r4, #31
 8003342:	4323      	orrs	r3, r4
 8003344:	0030      	movs	r0, r6
 8003346:	0019      	movs	r1, r3
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	380b      	subs	r0, #11
 800334c:	4085      	lsls	r5, r0
 800334e:	032d      	lsls	r5, r5, #12
 8003350:	2600      	movs	r6, #0
 8003352:	0b2d      	lsrs	r5, r5, #12
 8003354:	e7f2      	b.n	800333c <__aeabi_i2d+0x3c>
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	0000041e 	.word	0x0000041e

0800335c <__aeabi_ui2d>:
 800335c:	b510      	push	{r4, lr}
 800335e:	1e04      	subs	r4, r0, #0
 8003360:	d010      	beq.n	8003384 <__aeabi_ui2d+0x28>
 8003362:	f000 f8eb 	bl	800353c <__clzsi2>
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <__aeabi_ui2d+0x44>)
 8003368:	1a1b      	subs	r3, r3, r0
 800336a:	055b      	lsls	r3, r3, #21
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	280a      	cmp	r0, #10
 8003370:	dc0f      	bgt.n	8003392 <__aeabi_ui2d+0x36>
 8003372:	220b      	movs	r2, #11
 8003374:	0021      	movs	r1, r4
 8003376:	1a12      	subs	r2, r2, r0
 8003378:	40d1      	lsrs	r1, r2
 800337a:	3015      	adds	r0, #21
 800337c:	030a      	lsls	r2, r1, #12
 800337e:	4084      	lsls	r4, r0
 8003380:	0b12      	lsrs	r2, r2, #12
 8003382:	e001      	b.n	8003388 <__aeabi_ui2d+0x2c>
 8003384:	2300      	movs	r3, #0
 8003386:	2200      	movs	r2, #0
 8003388:	051b      	lsls	r3, r3, #20
 800338a:	4313      	orrs	r3, r2
 800338c:	0020      	movs	r0, r4
 800338e:	0019      	movs	r1, r3
 8003390:	bd10      	pop	{r4, pc}
 8003392:	0022      	movs	r2, r4
 8003394:	380b      	subs	r0, #11
 8003396:	4082      	lsls	r2, r0
 8003398:	0312      	lsls	r2, r2, #12
 800339a:	2400      	movs	r4, #0
 800339c:	0b12      	lsrs	r2, r2, #12
 800339e:	e7f3      	b.n	8003388 <__aeabi_ui2d+0x2c>
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_f2d>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	0242      	lsls	r2, r0, #9
 80033a8:	0043      	lsls	r3, r0, #1
 80033aa:	0fc4      	lsrs	r4, r0, #31
 80033ac:	20fe      	movs	r0, #254	@ 0xfe
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	1c59      	adds	r1, r3, #1
 80033b2:	0a55      	lsrs	r5, r2, #9
 80033b4:	4208      	tst	r0, r1
 80033b6:	d00c      	beq.n	80033d2 <__aeabi_f2d+0x2e>
 80033b8:	21e0      	movs	r1, #224	@ 0xe0
 80033ba:	0089      	lsls	r1, r1, #2
 80033bc:	468c      	mov	ip, r1
 80033be:	076d      	lsls	r5, r5, #29
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	4463      	add	r3, ip
 80033c4:	051b      	lsls	r3, r3, #20
 80033c6:	4313      	orrs	r3, r2
 80033c8:	07e4      	lsls	r4, r4, #31
 80033ca:	4323      	orrs	r3, r4
 80033cc:	0028      	movs	r0, r5
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <__aeabi_f2d+0x5c>
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	d01b      	beq.n	8003412 <__aeabi_f2d+0x6e>
 80033da:	0028      	movs	r0, r5
 80033dc:	f000 f8ae 	bl	800353c <__clzsi2>
 80033e0:	280a      	cmp	r0, #10
 80033e2:	dc1c      	bgt.n	800341e <__aeabi_f2d+0x7a>
 80033e4:	230b      	movs	r3, #11
 80033e6:	002a      	movs	r2, r5
 80033e8:	1a1b      	subs	r3, r3, r0
 80033ea:	40da      	lsrs	r2, r3
 80033ec:	0003      	movs	r3, r0
 80033ee:	3315      	adds	r3, #21
 80033f0:	409d      	lsls	r5, r3
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <__aeabi_f2d+0x88>)
 80033f4:	0312      	lsls	r2, r2, #12
 80033f6:	1a1b      	subs	r3, r3, r0
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	0b12      	lsrs	r2, r2, #12
 80033fc:	0d5b      	lsrs	r3, r3, #21
 80033fe:	e7e1      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003400:	2d00      	cmp	r5, #0
 8003402:	d009      	beq.n	8003418 <__aeabi_f2d+0x74>
 8003404:	0b13      	lsrs	r3, r2, #12
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	0312      	lsls	r2, r2, #12
 800340a:	431a      	orrs	r2, r3
 800340c:	076d      	lsls	r5, r5, #29
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <__aeabi_f2d+0x8c>)
 8003410:	e7d8      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003412:	2300      	movs	r3, #0
 8003414:	2200      	movs	r2, #0
 8003416:	e7d5      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003418:	2200      	movs	r2, #0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <__aeabi_f2d+0x8c>)
 800341c:	e7d2      	b.n	80033c4 <__aeabi_f2d+0x20>
 800341e:	0003      	movs	r3, r0
 8003420:	002a      	movs	r2, r5
 8003422:	3b0b      	subs	r3, #11
 8003424:	409a      	lsls	r2, r3
 8003426:	2500      	movs	r5, #0
 8003428:	e7e3      	b.n	80033f2 <__aeabi_f2d+0x4e>
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	00000389 	.word	0x00000389
 8003430:	000007ff 	.word	0x000007ff

08003434 <__aeabi_d2f>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	004b      	lsls	r3, r1, #1
 8003438:	030f      	lsls	r7, r1, #12
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	4c3b      	ldr	r4, [pc, #236]	@ (800352c <__aeabi_d2f+0xf8>)
 800343e:	0f45      	lsrs	r5, r0, #29
 8003440:	b083      	sub	sp, #12
 8003442:	0a7f      	lsrs	r7, r7, #9
 8003444:	1c5e      	adds	r6, r3, #1
 8003446:	432f      	orrs	r7, r5
 8003448:	9000      	str	r0, [sp, #0]
 800344a:	9101      	str	r1, [sp, #4]
 800344c:	0fca      	lsrs	r2, r1, #31
 800344e:	00c5      	lsls	r5, r0, #3
 8003450:	4226      	tst	r6, r4
 8003452:	d00b      	beq.n	800346c <__aeabi_d2f+0x38>
 8003454:	4936      	ldr	r1, [pc, #216]	@ (8003530 <__aeabi_d2f+0xfc>)
 8003456:	185c      	adds	r4, r3, r1
 8003458:	2cfe      	cmp	r4, #254	@ 0xfe
 800345a:	dd13      	ble.n	8003484 <__aeabi_d2f+0x50>
 800345c:	20ff      	movs	r0, #255	@ 0xff
 800345e:	2300      	movs	r3, #0
 8003460:	05c0      	lsls	r0, r0, #23
 8003462:	4318      	orrs	r0, r3
 8003464:	07d2      	lsls	r2, r2, #31
 8003466:	4310      	orrs	r0, r2
 8003468:	b003      	add	sp, #12
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <__aeabi_d2f+0x42>
 8003470:	2000      	movs	r0, #0
 8003472:	2300      	movs	r3, #0
 8003474:	e7f4      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003476:	433d      	orrs	r5, r7
 8003478:	d0f0      	beq.n	800345c <__aeabi_d2f+0x28>
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	03db      	lsls	r3, r3, #15
 800347e:	20ff      	movs	r0, #255	@ 0xff
 8003480:	433b      	orrs	r3, r7
 8003482:	e7ed      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003484:	2c00      	cmp	r4, #0
 8003486:	dd14      	ble.n	80034b2 <__aeabi_d2f+0x7e>
 8003488:	9b00      	ldr	r3, [sp, #0]
 800348a:	00ff      	lsls	r7, r7, #3
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	4183      	sbcs	r3, r0
 8003492:	0f69      	lsrs	r1, r5, #29
 8003494:	433b      	orrs	r3, r7
 8003496:	430b      	orrs	r3, r1
 8003498:	0759      	lsls	r1, r3, #29
 800349a:	d041      	beq.n	8003520 <__aeabi_d2f+0xec>
 800349c:	210f      	movs	r1, #15
 800349e:	4019      	ands	r1, r3
 80034a0:	2904      	cmp	r1, #4
 80034a2:	d028      	beq.n	80034f6 <__aeabi_d2f+0xc2>
 80034a4:	3304      	adds	r3, #4
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	d525      	bpl.n	80034f6 <__aeabi_d2f+0xc2>
 80034aa:	3401      	adds	r4, #1
 80034ac:	2300      	movs	r3, #0
 80034ae:	b2e0      	uxtb	r0, r4
 80034b0:	e7d6      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034b2:	0021      	movs	r1, r4
 80034b4:	3117      	adds	r1, #23
 80034b6:	dbdb      	blt.n	8003470 <__aeabi_d2f+0x3c>
 80034b8:	2180      	movs	r1, #128	@ 0x80
 80034ba:	201e      	movs	r0, #30
 80034bc:	0409      	lsls	r1, r1, #16
 80034be:	4339      	orrs	r1, r7
 80034c0:	1b00      	subs	r0, r0, r4
 80034c2:	281f      	cmp	r0, #31
 80034c4:	dd1b      	ble.n	80034fe <__aeabi_d2f+0xca>
 80034c6:	2602      	movs	r6, #2
 80034c8:	4276      	negs	r6, r6
 80034ca:	1b34      	subs	r4, r6, r4
 80034cc:	000e      	movs	r6, r1
 80034ce:	40e6      	lsrs	r6, r4
 80034d0:	0034      	movs	r4, r6
 80034d2:	2820      	cmp	r0, #32
 80034d4:	d004      	beq.n	80034e0 <__aeabi_d2f+0xac>
 80034d6:	4817      	ldr	r0, [pc, #92]	@ (8003534 <__aeabi_d2f+0x100>)
 80034d8:	4684      	mov	ip, r0
 80034da:	4463      	add	r3, ip
 80034dc:	4099      	lsls	r1, r3
 80034de:	430d      	orrs	r5, r1
 80034e0:	002b      	movs	r3, r5
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	418b      	sbcs	r3, r1
 80034e6:	4323      	orrs	r3, r4
 80034e8:	0759      	lsls	r1, r3, #29
 80034ea:	d015      	beq.n	8003518 <__aeabi_d2f+0xe4>
 80034ec:	210f      	movs	r1, #15
 80034ee:	2400      	movs	r4, #0
 80034f0:	4019      	ands	r1, r3
 80034f2:	2904      	cmp	r1, #4
 80034f4:	d117      	bne.n	8003526 <__aeabi_d2f+0xf2>
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	0a5b      	lsrs	r3, r3, #9
 80034fa:	b2e0      	uxtb	r0, r4
 80034fc:	e7b0      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034fe:	4c0e      	ldr	r4, [pc, #56]	@ (8003538 <__aeabi_d2f+0x104>)
 8003500:	191c      	adds	r4, r3, r4
 8003502:	002b      	movs	r3, r5
 8003504:	40a5      	lsls	r5, r4
 8003506:	40c3      	lsrs	r3, r0
 8003508:	40a1      	lsls	r1, r4
 800350a:	1e68      	subs	r0, r5, #1
 800350c:	4185      	sbcs	r5, r0
 800350e:	4329      	orrs	r1, r5
 8003510:	430b      	orrs	r3, r1
 8003512:	2400      	movs	r4, #0
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d1c1      	bne.n	800349c <__aeabi_d2f+0x68>
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	2000      	movs	r0, #0
 800351c:	0a5b      	lsrs	r3, r3, #9
 800351e:	e79f      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	b2e0      	uxtb	r0, r4
 8003524:	e79c      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003526:	3304      	adds	r3, #4
 8003528:	e7e5      	b.n	80034f6 <__aeabi_d2f+0xc2>
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	000007fe 	.word	0x000007fe
 8003530:	fffffc80 	.word	0xfffffc80
 8003534:	fffffca2 	.word	0xfffffca2
 8003538:	fffffc82 	.word	0xfffffc82

0800353c <__clzsi2>:
 800353c:	211c      	movs	r1, #28
 800353e:	2301      	movs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4298      	cmp	r0, r3
 8003544:	d301      	bcc.n	800354a <__clzsi2+0xe>
 8003546:	0c00      	lsrs	r0, r0, #16
 8003548:	3910      	subs	r1, #16
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	4298      	cmp	r0, r3
 800354e:	d301      	bcc.n	8003554 <__clzsi2+0x18>
 8003550:	0a00      	lsrs	r0, r0, #8
 8003552:	3908      	subs	r1, #8
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	4298      	cmp	r0, r3
 8003558:	d301      	bcc.n	800355e <__clzsi2+0x22>
 800355a:	0900      	lsrs	r0, r0, #4
 800355c:	3904      	subs	r1, #4
 800355e:	a202      	add	r2, pc, #8	@ (adr r2, 8003568 <__clzsi2+0x2c>)
 8003560:	5c10      	ldrb	r0, [r2, r0]
 8003562:	1840      	adds	r0, r0, r1
 8003564:	4770      	bx	lr
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	02020304 	.word	0x02020304
 800356c:	01010101 	.word	0x01010101
	...

08003578 <__clzdi2>:
 8003578:	b510      	push	{r4, lr}
 800357a:	2900      	cmp	r1, #0
 800357c:	d103      	bne.n	8003586 <__clzdi2+0xe>
 800357e:	f7ff ffdd 	bl	800353c <__clzsi2>
 8003582:	3020      	adds	r0, #32
 8003584:	e002      	b.n	800358c <__clzdi2+0x14>
 8003586:	0008      	movs	r0, r1
 8003588:	f7ff ffd8 	bl	800353c <__clzsi2>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)

08003590 <set_ADS_pins>:
				  GPIO_TypeDef *pdwn_port,
				  uint16_t in_pin,
				  uint16_t out_pin,
				  uint16_t pdwdn_pin,
				  void(*f)(int))
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	001a      	movs	r2, r3
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	801a      	strh	r2, [r3, #0]
	IN_PORT = in_port;
 80035a2:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <set_ADS_pins+0x50>)
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]
	OUT_PORT = out_port;
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <set_ADS_pins+0x54>)
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
	PDWN_PORT=pdwn_port;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <set_ADS_pins+0x58>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
	IN_PIN=in_pin;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <set_ADS_pins+0x5c>)
 80035b6:	1cba      	adds	r2, r7, #2
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
	OUT_PIN=out_pin;
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <set_ADS_pins+0x60>)
 80035be:	2318      	movs	r3, #24
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	8013      	strh	r3, [r2, #0]
	PDWDN_PIN=pdwdn_pin;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <set_ADS_pins+0x64>)
 80035c8:	221c      	movs	r2, #28
 80035ca:	18ba      	adds	r2, r7, r2
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	801a      	strh	r2, [r3, #0]
	ads_callback = f;
 80035d0:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <set_ADS_pins+0x68>)
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000310 	.word	0x20000310
 80035e4:	20000314 	.word	0x20000314
 80035e8:	20000318 	.word	0x20000318
 80035ec:	2000031c 	.word	0x2000031c
 80035f0:	2000031e 	.word	0x2000031e
 80035f4:	20000320 	.word	0x20000320
 80035f8:	20000324 	.word	0x20000324

080035fc <Timer_Event>:

void Timer_Event() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0

	MISO_Val=HAL_GPIO_ReadPin(IN_PORT, IN_PIN);
 8003600:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <Timer_Event+0x11c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b45      	ldr	r3, [pc, #276]	@ (800371c <Timer_Event+0x120>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	0019      	movs	r1, r3
 800360a:	0010      	movs	r0, r2
 800360c:	f005 fb50 	bl	8008cb0 <HAL_GPIO_ReadPin>
 8003610:	0003      	movs	r3, r0
 8003612:	001a      	movs	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <Timer_Event+0x124>)
 8003616:	601a      	str	r2, [r3, #0]
	if (counter_ads==0 && MISO_Val==1){
 8003618:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <Timer_Event+0x128>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <Timer_Event+0x2e>
 8003620:	4b3f      	ldr	r3, [pc, #252]	@ (8003720 <Timer_Event+0x124>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d100      	bne.n	800362a <Timer_Event+0x2e>
 8003628:	e072      	b.n	8003710 <Timer_Event+0x114>
		return;
	}
	if (counter_ads==0){
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <Timer_Event+0x128>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <Timer_Event+0x40>
		//TIM->ARR=((Period_htim+1)*10)-1;
		TIM->ARR=Period_htim;
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <Timer_Event+0x12c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3d      	ldr	r2, [pc, #244]	@ (800372c <Timer_Event+0x130>)
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
	}
	if (counter_ads%2==0){
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <Timer_Event+0x128>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d10d      	bne.n	8003664 <Timer_Event+0x68>
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_SET);
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <Timer_Event+0x134>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <Timer_Event+0x138>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	0019      	movs	r1, r3
 8003654:	f005 fb49 	bl	8008cea <HAL_GPIO_WritePin>
		counter_ads++;
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <Timer_Event+0x128>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <Timer_Event+0x128>)
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e026      	b.n	80036b2 <Timer_Event+0xb6>
	}
	else{
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 8003664:	4b32      	ldr	r3, [pc, #200]	@ (8003730 <Timer_Event+0x134>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <Timer_Event+0x138>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	0019      	movs	r1, r3
 8003670:	f005 fb3b 	bl	8008cea <HAL_GPIO_WritePin>
		if (counter_ads_max-2>=counter_ads){
 8003674:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <Timer_Event+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <Timer_Event+0x128>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	dd0d      	ble.n	800369e <Timer_Event+0xa2>
			value_ads|=(MISO_Val<<23-bit_ads);//23-bit_ads отзеркаливаем значение value_ads
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <Timer_Event+0x124>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <Timer_Event+0x140>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2117      	movs	r1, #23
 800368c:	1acb      	subs	r3, r1, r3
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	001a      	movs	r2, r3
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <Timer_Event+0x144>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	431a      	orrs	r2, r3
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <Timer_Event+0x144>)
 800369c:	601a      	str	r2, [r3, #0]

		}

		counter_ads++;
 800369e:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <Timer_Event+0x128>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003724 <Timer_Event+0x128>)
 80036a6:	601a      	str	r2, [r3, #0]
		bit_ads++;
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <Timer_Event+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <Timer_Event+0x140>)
 80036b0:	601a      	str	r2, [r3, #0]
	}
	if(counter_ads==counter_ads_max){
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <Timer_Event+0x128>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <Timer_Event+0x13c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d129      	bne.n	8003712 <Timer_Event+0x116>
		//HAL_TIM_Base_Stop_IT(htim);
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <Timer_Event+0x134>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <Timer_Event+0x138>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	0019      	movs	r1, r3
 80036ca:	f005 fb0e 	bl	8008cea <HAL_GPIO_WritePin>
		if (ads_callback != NULL)
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <Timer_Event+0x148>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <Timer_Event+0xe6>
		{
			ads_callback(value_ads);
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <Timer_Event+0x148>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <Timer_Event+0x144>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0018      	movs	r0, r3
 80036e0:	4790      	blx	r2
		}

		TIM->ARR=((TIM->ARR+1)*10)-1;
 80036e2:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <Timer_Event+0x12c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	0013      	movs	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <Timer_Event+0x12c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
		counter_ads=0;
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <Timer_Event+0x128>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
		value_ads=0;
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <Timer_Event+0x144>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
		bit_ads=0;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <Timer_Event+0x140>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e000      	b.n	8003712 <Timer_Event+0x116>
		return;
 8003710:	46c0      	nop			@ (mov r8, r8)
		//HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_RESET);
	}
}
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000310 	.word	0x20000310
 800371c:	2000031c 	.word	0x2000031c
 8003720:	200002f8 	.word	0x200002f8
 8003724:	200002f4 	.word	0x200002f4
 8003728:	2000030c 	.word	0x2000030c
 800372c:	20000308 	.word	0x20000308
 8003730:	20000314 	.word	0x20000314
 8003734:	2000031e 	.word	0x2000031e
 8003738:	20000000 	.word	0x20000000
 800373c:	200002fc 	.word	0x200002fc
 8003740:	20000300 	.word	0x20000300
 8003744:	20000324 	.word	0x20000324

08003748 <Start_read>:
void Start_read(TIM_HandleTypeDef *htim_ptr, TIM_TypeDef *TIM_ads){
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_SET);
 8003752:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <Start_read+0x70>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <Start_read+0x74>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	0019      	movs	r1, r3
 800375e:	f005 fac4 	bl	8008cea <HAL_GPIO_WritePin>
	if (counter_ads>0&&counter_ads<counter_ads_max){
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <Start_read+0x78>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dd05      	ble.n	8003776 <Start_read+0x2e>
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <Start_read+0x78>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <Start_read+0x7c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	db1c      	blt.n	80037b0 <Start_read+0x68>
		return;
	}
	htim = htim_ptr;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <Start_read+0x80>)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
	TIM = TIM_ads;
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <Start_read+0x84>)
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
	Period_htim=htim->Init.Period;
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <Start_read+0x80>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <Start_read+0x88>)
 800378a:	601a      	str	r2, [r3, #0]
	counter_ads=0;
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <Start_read+0x78>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
	value_ads=0;
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <Start_read+0x8c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
	bit_ads=0;
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <Start_read+0x90>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <Start_read+0x94>)
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <Start_read+0x98>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	0019      	movs	r1, r3
 80037aa:	f005 fa9e 	bl	8008cea <HAL_GPIO_WritePin>
 80037ae:	e000      	b.n	80037b2 <Start_read+0x6a>
		return;
 80037b0:	46c0      	nop			@ (mov r8, r8)
	//HAL_TIM_Base_Start_IT(htim);
}
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000318 	.word	0x20000318
 80037bc:	20000320 	.word	0x20000320
 80037c0:	200002f4 	.word	0x200002f4
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000304 	.word	0x20000304
 80037cc:	2000030c 	.word	0x2000030c
 80037d0:	20000308 	.word	0x20000308
 80037d4:	20000300 	.word	0x20000300
 80037d8:	200002fc 	.word	0x200002fc
 80037dc:	20000314 	.word	0x20000314
 80037e0:	2000031e 	.word	0x2000031e

080037e4 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "main.h"
#define CONFIGURATION_START_ADDR 0x0801f800
void clearFlash(){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0

	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstPage = 63;//flash memory sector
 80037ea:	233f      	movs	r3, #63	@ 0x3f
 80037ec:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfPages = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
	//uint32_t Flash_BANK = 1;

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <clearFlash+0x58>)
 80037f4:	2202      	movs	r2, #2
 80037f6:	601a      	str	r2, [r3, #0]
	//EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.Page = FirstPage;
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <clearFlash+0x58>)
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <clearFlash+0x58>)
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	60da      	str	r2, [r3, #12]
	uint32_t PageError = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Lock();
 8003808:	f004 ffb0 	bl	800876c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800380c:	f004 ff8a 	bl	8008724 <HAL_FLASH_Unlock>
	//FLASH_PageErase(FLASH_BANK_1,FirstPage);
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8003810:	003a      	movs	r2, r7
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <clearFlash+0x58>)
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f005 f842 	bl	80088a0 <HAL_FLASHEx_Erase>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d006      	beq.n	800382e <clearFlash+0x4a>
		/*Error occurred while sector erase.
User can add here some code to deal with this error.
SectorError will contain the faulty sector and then to know the code error on this sector,
user can call function 'HAL_FLASH_GetError()'
		 */
		uint32_t errorcode = HAL_FLASH_GetError();
 8003820:	f004 ffc6 	bl	80087b0 <HAL_FLASH_GetError>
 8003824:	0003      	movs	r3, r0
 8003826:	607b      	str	r3, [r7, #4]
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();
		osDelay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f00b ff8a 	bl	800f742 <osDelay>
	}
	//CLEAR_BIT(FLASH->CR, FLASH_CR_PER);

	HAL_FLASH_Lock();
 800382e:	f004 ff9d 	bl	800876c <HAL_FLASH_Lock>

}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000328 	.word	0x20000328

08003840 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(uint8_t* data, int size, int offset) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <WriteDeviceAddressOffset+0x70>)
 8003850:	4694      	mov	ip, r2
 8003852:	4463      	add	r3, ip
 8003854:	623b      	str	r3, [r7, #32]
	HAL_FLASH_Lock();
 8003856:	f004 ff89 	bl	800876c <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800385a:	f004 ff63 	bl	8008724 <HAL_FLASH_Unlock>
	//osDelay(10);
	for (int i = 0; i<size; i+=8){
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	e01b      	b.n	800389c <WriteDeviceAddressOffset+0x5c>
		uint64_t data_64 = *(uint64_t*)(&data[i]);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61ba      	str	r2, [r7, #24]
 8003870:	61fb      	str	r3, [r7, #28]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address+i, data_64) != HAL_OK){
 8003872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	18d1      	adds	r1, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2001      	movs	r0, #1
 800387e:	f004 ff03 	bl	8008688 <HAL_FLASH_Program>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d007      	beq.n	8003896 <WriteDeviceAddressOffset+0x56>
User can add here some code to deal with this error */
			/*
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			uint32_t errorcode = HAL_FLASH_GetError();
 8003886:	f004 ff93 	bl	80087b0 <HAL_FLASH_GetError>
 800388a:	0003      	movs	r3, r0
 800388c:	617b      	str	r3, [r7, #20]
			osDelay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f00b ff57 	bl	800f742 <osDelay>
			break;
 8003894:	e006      	b.n	80038a4 <WriteDeviceAddressOffset+0x64>
	for (int i = 0; i<size; i+=8){
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3308      	adds	r3, #8
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbdf      	blt.n	8003864 <WriteDeviceAddressOffset+0x24>
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80038a4:	f004 ff62 	bl	800876c <HAL_FLASH_Lock>
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b00a      	add	sp, #40	@ 0x28
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0801f800 	.word	0x0801f800

080038b4 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(uint8_t* Dout, int size, int offset)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <ReadDeviceAddressOffset+0x48>)
 80038c4:	4694      	mov	ip, r2
 80038c6:	4463      	add	r3, ip
 80038c8:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00c      	b.n	80038ea <ReadDeviceAddressOffset+0x36>
		Dout[i] = *(__IO uint8_t*)(Address+i);
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	0019      	movs	r1, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	780a      	ldrb	r2, [r1, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbee      	blt.n	80038d0 <ReadDeviceAddressOffset+0x1c>
	}
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	0801f800 	.word	0x0801f800

08003900 <check_need_send_pressure>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void check_errors();
void check_need_send_pressure() {
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0

	// с вероятностью 50% шлётся либо давление, либо влажность
	// можно сделать с помощью need_send_pressure, но его нужно сделать volatile
	if (1 == need_send_pressure) {
 8003906:	4b34      	ldr	r3, [pc, #208]	@ (80039d8 <check_need_send_pressure+0xd8>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d153      	bne.n	80039b8 <check_need_send_pressure+0xb8>
		// из hPa в атм
		float pressure = LPS_data.last_pressure / 1000;
 8003910:	4b32      	ldr	r3, [pc, #200]	@ (80039dc <check_need_send_pressure+0xdc>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4932      	ldr	r1, [pc, #200]	@ (80039e0 <check_need_send_pressure+0xe0>)
 8003916:	1c18      	adds	r0, r3, #0
 8003918:	f7fd f8fc 	bl	8000b14 <__aeabi_fdiv>
 800391c:	1c03      	adds	r3, r0, #0
 800391e:	607b      	str	r3, [r7, #4]
		pressure = fmax(pressure, 0.5);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fd3f 	bl	80033a4 <__aeabi_f2d>
 8003926:	2200      	movs	r2, #0
 8003928:	4b2e      	ldr	r3, [pc, #184]	@ (80039e4 <check_need_send_pressure+0xe4>)
 800392a:	f00e fab8 	bl	8011e9e <fmax>
 800392e:	0002      	movs	r2, r0
 8003930:	000b      	movs	r3, r1
 8003932:	0010      	movs	r0, r2
 8003934:	0019      	movs	r1, r3
 8003936:	f7ff fd7d 	bl	8003434 <__aeabi_d2f>
 800393a:	1c03      	adds	r3, r0, #0
 800393c:	607b      	str	r3, [r7, #4]
		pressure = fmin(pressure, 2.0);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fd30 	bl	80033a4 <__aeabi_f2d>
 8003944:	2200      	movs	r2, #0
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	05db      	lsls	r3, r3, #23
 800394a:	f00e fac5 	bl	8011ed8 <fmin>
 800394e:	0002      	movs	r2, r0
 8003950:	000b      	movs	r3, r1
 8003952:	0010      	movs	r0, r2
 8003954:	0019      	movs	r1, r3
 8003956:	f7ff fd6d 	bl	8003434 <__aeabi_d2f>
 800395a:	1c03      	adds	r3, r0, #0
 800395c:	607b      	str	r3, [r7, #4]

		presshum = 128 + ((pressure - 0.5) / 1.5f * 100); // 1 деление = 0.015 атмосферы
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fd20 	bl	80033a4 <__aeabi_f2d>
 8003964:	2200      	movs	r2, #0
 8003966:	4b1f      	ldr	r3, [pc, #124]	@ (80039e4 <check_need_send_pressure+0xe4>)
 8003968:	f7ff f8d0 	bl	8002b0c <__aeabi_dsub>
 800396c:	0002      	movs	r2, r0
 800396e:	000b      	movs	r3, r1
 8003970:	0010      	movs	r0, r2
 8003972:	0019      	movs	r1, r3
 8003974:	2200      	movs	r2, #0
 8003976:	4b1c      	ldr	r3, [pc, #112]	@ (80039e8 <check_need_send_pressure+0xe8>)
 8003978:	f7fe f9bc 	bl	8001cf4 <__aeabi_ddiv>
 800397c:	0002      	movs	r2, r0
 800397e:	000b      	movs	r3, r1
 8003980:	0010      	movs	r0, r2
 8003982:	0019      	movs	r1, r3
 8003984:	2200      	movs	r2, #0
 8003986:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <check_need_send_pressure+0xec>)
 8003988:	f7fe fdf8 	bl	800257c <__aeabi_dmul>
 800398c:	0002      	movs	r2, r0
 800398e:	000b      	movs	r3, r1
 8003990:	0010      	movs	r0, r2
 8003992:	0019      	movs	r1, r3
 8003994:	2200      	movs	r2, #0
 8003996:	4b16      	ldr	r3, [pc, #88]	@ (80039f0 <check_need_send_pressure+0xf0>)
 8003998:	f7fd fe48 	bl	800162c <__aeabi_dadd>
 800399c:	0002      	movs	r2, r0
 800399e:	000b      	movs	r3, r1
 80039a0:	0010      	movs	r0, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	f7fc fdf2 	bl	800058c <__aeabi_d2uiz>
 80039a8:	0003      	movs	r3, r0
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <check_need_send_pressure+0xf4>)
 80039ae:	701a      	strb	r2, [r3, #0]

		need_send_pressure = 0;
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <check_need_send_pressure+0xd8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
	}
	else {
		presshum = HDC_config.last_humidity;
		need_send_pressure = 1;
	}
}
 80039b6:	e00b      	b.n	80039d0 <check_need_send_pressure+0xd0>
		presshum = HDC_config.last_humidity;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <check_need_send_pressure+0xf8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7fc fdcd 	bl	800055c <__aeabi_f2uiz>
 80039c2:	0003      	movs	r3, r0
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <check_need_send_pressure+0xf4>)
 80039c8:	701a      	strb	r2, [r3, #0]
		need_send_pressure = 1;
 80039ca:	4b03      	ldr	r3, [pc, #12]	@ (80039d8 <check_need_send_pressure+0xd8>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
}
 80039d0:	46c0      	nop			@ (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000388 	.word	0x20000388
 80039dc:	2000038c 	.word	0x2000038c
 80039e0:	447a0000 	.word	0x447a0000
 80039e4:	3fe00000 	.word	0x3fe00000
 80039e8:	3ff80000 	.word	0x3ff80000
 80039ec:	40590000 	.word	0x40590000
 80039f0:	40600000 	.word	0x40600000
 80039f4:	20000389 	.word	0x20000389
 80039f8:	20000394 	.word	0x20000394

080039fc <get_platform_number>:
void get_platform_number() {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
//	}
//
//	platform_number.number_ch = '0' + platform_number.number;
//
//	debug("PLATFORM NUMBER: %d \r\n", platform_number.number);
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN Init */

	g_mesQueue = xQueueCreate(2, 22);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2116      	movs	r1, #22
 8003a12:	2002      	movs	r0, #2
 8003a14:	f00c f8fb 	bl	800fc0e <xQueueGenericCreate>
 8003a18:	0002      	movs	r2, r0
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003c50 <MX_FREERTOS_Init+0x248>)
 8003a1c:	601a      	str	r2, [r3, #0]
	serial_number =(uint16_t)(crc32b((uint8_t *)UID_BASE, 8));
 8003a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c54 <MX_FREERTOS_Init+0x24c>)
 8003a20:	2108      	movs	r1, #8
 8003a22:	0018      	movs	r0, r3
 8003a24:	f003 fc4a 	bl	80072bc <crc32b>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8003c58 <MX_FREERTOS_Init+0x250>)
 8003a2e:	801a      	strh	r2, [r3, #0]
	serial_number = abs((int16_t)serial_number);
 8003a30:	4b89      	ldr	r3, [pc, #548]	@ (8003c58 <MX_FREERTOS_Init+0x250>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	17da      	asrs	r2, r3, #31
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	4053      	eors	r3, r2
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	4b86      	ldr	r3, [pc, #536]	@ (8003c58 <MX_FREERTOS_Init+0x250>)
 8003a40:	801a      	strh	r2, [r3, #0]
	serial_number_control = abs((int16_t)serial_number);
 8003a42:	4b85      	ldr	r3, [pc, #532]	@ (8003c58 <MX_FREERTOS_Init+0x250>)
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	17da      	asrs	r2, r3, #31
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	4053      	eors	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	4b82      	ldr	r3, [pc, #520]	@ (8003c5c <MX_FREERTOS_Init+0x254>)
 8003a54:	801a      	strh	r2, [r3, #0]
	ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003a56:	4b82      	ldr	r3, [pc, #520]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b82      	ldr	r3, [pc, #520]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff ff28 	bl	80038b4 <ReadDeviceAddressOffset>
	//memset(transmitting_command, 0, sizeof(transmitting_command));
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003a64:	e016      	b.n	8003a94 <MX_FREERTOS_Init+0x8c>
	{
		if(offset>=248){
 8003a66:	4b7e      	ldr	r3, [pc, #504]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2bf7      	cmp	r3, #247	@ 0xf7
 8003a6c:	dd05      	ble.n	8003a7a <MX_FREERTOS_Init+0x72>
//
			offset=0;
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
			clearFlash();
 8003a74:	f7ff feb6 	bl	80037e4 <clearFlash>
			break;
 8003a78:	e010      	b.n	8003a9c <MX_FREERTOS_Init+0x94>
		}
		offset+=sizeof(sensor_inf);
 8003a7a:	4b79      	ldr	r3, [pc, #484]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	001a      	movs	r2, r3
 8003a82:	4b77      	ldr	r3, [pc, #476]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a84:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003a86:	4b76      	ldr	r3, [pc, #472]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b76      	ldr	r3, [pc, #472]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff ff10 	bl	80038b4 <ReadDeviceAddressOffset>
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003a94:	4b73      	ldr	r3, [pc, #460]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2bff      	cmp	r3, #255	@ 0xff
 8003a9a:	d1e4      	bne.n	8003a66 <MX_FREERTOS_Init+0x5e>
	}
	if(offset<8){
 8003a9c:	4b70      	ldr	r3, [pc, #448]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	dc1f      	bgt.n	8003ae4 <MX_FREERTOS_Init+0xdc>

		//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
		memset(&sensor_inf, 0, sizeof(sensor_inf));
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f00f fc9e 	bl	80133ec <memset>
		sensor_inf.platform_adr[0]='0';
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003ab2:	2230      	movs	r2, #48	@ 0x30
 8003ab4:	701a      	strb	r2, [r3, #0]
		sensor_inf.platform_adr[1]='1';
 8003ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003ab8:	2231      	movs	r2, #49	@ 0x31
 8003aba:	705a      	strb	r2, [r3, #1]
		number_sn = 1;
 8003abc:	4b6a      	ldr	r3, [pc, #424]	@ (8003c68 <MX_FREERTOS_Init+0x260>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	801a      	strh	r2, [r3, #0]
		sensor_inf.received_BDR=38400;
 8003ac2:	4b68      	ldr	r3, [pc, #416]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003ac4:	2296      	movs	r2, #150	@ 0x96
 8003ac6:	0212      	lsls	r2, r2, #8
 8003ac8:	605a      	str	r2, [r3, #4]
		WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003aca:	4b65      	ldr	r3, [pc, #404]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b65      	ldr	r3, [pc, #404]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003ad0:	2108      	movs	r1, #8
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff feb4 	bl	8003840 <WriteDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 8003ad8:	4b61      	ldr	r3, [pc, #388]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	001a      	movs	r2, r3
 8003ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003ae2:	601a      	str	r2, [r3, #0]
	}
	if(offset>=8){
 8003ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b07      	cmp	r3, #7
 8003aea:	dd41      	ble.n	8003b70 <MX_FREERTOS_Init+0x168>

		offset-=sizeof(sensor_inf);
 8003aec:	4b5c      	ldr	r3, [pc, #368]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3b08      	subs	r3, #8
 8003af2:	001a      	movs	r2, r3
 8003af4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003af6:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003af8:	4b59      	ldr	r3, [pc, #356]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b59      	ldr	r3, [pc, #356]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003afe:	2108      	movs	r1, #8
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7ff fed7 	bl	80038b4 <ReadDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 8003b06:	4b56      	ldr	r3, [pc, #344]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	4b54      	ldr	r3, [pc, #336]	@ (8003c60 <MX_FREERTOS_Init+0x258>)
 8003b10:	601a      	str	r2, [r3, #0]
		number_sn = 0;
 8003b12:	4b55      	ldr	r3, [pc, #340]	@ (8003c68 <MX_FREERTOS_Init+0x260>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	801a      	strh	r2, [r3, #0]
		number_sn = 0;
 8003b18:	4b53      	ldr	r3, [pc, #332]	@ (8003c68 <MX_FREERTOS_Init+0x260>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i <= 1; i++) {
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e022      	b.n	8003b6a <MX_FREERTOS_Init+0x162>
			if (sensor_inf.platform_adr[i] >= '0'
 8003b24:	4a4f      	ldr	r2, [pc, #316]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	18d3      	adds	r3, r2, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8003b2e:	d919      	bls.n	8003b64 <MX_FREERTOS_Init+0x15c>
					&& sensor_inf.platform_adr[i] <= '9') {
 8003b30:	4a4c      	ldr	r2, [pc, #304]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b39      	cmp	r3, #57	@ 0x39
 8003b3a:	d813      	bhi.n	8003b64 <MX_FREERTOS_Init+0x15c>
				number_sn = number_sn * 10 + (sensor_inf.platform_adr[i] - '0');
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <MX_FREERTOS_Init+0x260>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	5e9b      	ldrsh	r3, [r3, r2]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	1c1a      	adds	r2, r3, #0
 8003b46:	0092      	lsls	r2, r2, #2
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	18db      	adds	r3, r3, r3
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	4945      	ldr	r1, [pc, #276]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	188a      	adds	r2, r1, r2
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b30      	subs	r3, #48	@ 0x30
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	4b41      	ldr	r3, [pc, #260]	@ (8003c68 <MX_FREERTOS_Init+0x260>)
 8003b62:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i <= 1; i++) {
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3301      	adds	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	ddd9      	ble.n	8003b24 <MX_FREERTOS_Init+0x11c>
			}
		}
	}

	 while (!(USART2->ISR & USART_ISR_TC)) {
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	4b3e      	ldr	r3, [pc, #248]	@ (8003c6c <MX_FREERTOS_Init+0x264>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d0fa      	beq.n	8003b72 <MX_FREERTOS_Init+0x16a>
	 // Ожидание, пока передача завершится
	 }

	 // Отключаем USART перед изменением настроек
	 USART2->CR1 &= ~USART_CR1_UE;
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <MX_FREERTOS_Init+0x264>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b3a      	ldr	r3, [pc, #232]	@ (8003c6c <MX_FREERTOS_Init+0x264>)
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
     // �?зменение скорости
	 USART2->BRR = (SystemCoreClock+12800) / sensor_inf.received_BDR;
 8003b88:	4b39      	ldr	r3, [pc, #228]	@ (8003c70 <MX_FREERTOS_Init+0x268>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	22c8      	movs	r2, #200	@ 0xc8
 8003b8e:	0192      	lsls	r2, r2, #6
 8003b90:	189a      	adds	r2, r3, r2
 8003b92:	4b34      	ldr	r3, [pc, #208]	@ (8003c64 <MX_FREERTOS_Init+0x25c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4c35      	ldr	r4, [pc, #212]	@ (8003c6c <MX_FREERTOS_Init+0x264>)
 8003b98:	0019      	movs	r1, r3
 8003b9a:	0010      	movs	r0, r2
 8003b9c:	f7fc fad0 	bl	8000140 <__udivsi3>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	60e3      	str	r3, [r4, #12]
	 // Включаем USART обратно
	 USART2->CR1 |= USART_CR1_UE;
 8003ba4:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <MX_FREERTOS_Init+0x264>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <MX_FREERTOS_Init+0x264>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

	//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
	//offset+=sizeof(sensor_inf);
	//clearFlash();
	//WriteDeviceAddressOffset((uint8_t*)&sensor_inf, sizeof(sensor_inf), offset);
	sensorsState.hdc_fail = 0;
 8003bb0:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <MX_FREERTOS_Init+0x26c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
	sensorsState.lps_fail = 0;
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <MX_FREERTOS_Init+0x26c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	705a      	strb	r2, [r3, #1]
	 set_ADS_pins(GPIOA,
 8003bbc:	23a0      	movs	r3, #160	@ 0xa0
 8003bbe:	05da      	lsls	r2, r3, #23
 8003bc0:	23a0      	movs	r3, #160	@ 0xa0
 8003bc2:	05d9      	lsls	r1, r3, #23
 8003bc4:	23a0      	movs	r3, #160	@ 0xa0
 8003bc6:	05d8      	lsls	r0, r3, #23
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <MX_FREERTOS_Init+0x270>)
 8003bca:	9302      	str	r3, [sp, #8]
 8003bcc:	2304      	movs	r3, #4
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f7ff fcdb 	bl	8003590 <set_ADS_pins>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of maximumsPeriodTimer */
  maximumsPeriodTimerHandle = osTimerNew(maximumsPeriodTimer_callback, osTimerPeriodic, NULL, &maximumsPeriodTimer_attributes);
 8003bda:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <MX_FREERTOS_Init+0x274>)
 8003bdc:	4828      	ldr	r0, [pc, #160]	@ (8003c80 <MX_FREERTOS_Init+0x278>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	2101      	movs	r1, #1
 8003be2:	f00b fde1 	bl	800f7a8 <osTimerNew>
 8003be6:	0002      	movs	r2, r0
 8003be8:	4b26      	ldr	r3, [pc, #152]	@ (8003c84 <MX_FREERTOS_Init+0x27c>)
 8003bea:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of debugTask */
  debugTaskHandle = osThreadNew(StartDebugTask, NULL, &debugTask_attributes);
 8003bec:	4a26      	ldr	r2, [pc, #152]	@ (8003c88 <MX_FREERTOS_Init+0x280>)
 8003bee:	4b27      	ldr	r3, [pc, #156]	@ (8003c8c <MX_FREERTOS_Init+0x284>)
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f00b fd0e 	bl	800f614 <osThreadNew>
 8003bf8:	0002      	movs	r2, r0
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <MX_FREERTOS_Init+0x288>)
 8003bfc:	601a      	str	r2, [r3, #0]

  /* creation of rxCommandsTask */
  rxCommandsTaskHandle = osThreadNew(StartTaskRxCommands, NULL, &rxCommandsTask_attributes);
 8003bfe:	4a25      	ldr	r2, [pc, #148]	@ (8003c94 <MX_FREERTOS_Init+0x28c>)
 8003c00:	4b25      	ldr	r3, [pc, #148]	@ (8003c98 <MX_FREERTOS_Init+0x290>)
 8003c02:	2100      	movs	r1, #0
 8003c04:	0018      	movs	r0, r3
 8003c06:	f00b fd05 	bl	800f614 <osThreadNew>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	4b23      	ldr	r3, [pc, #140]	@ (8003c9c <MX_FREERTOS_Init+0x294>)
 8003c0e:	601a      	str	r2, [r3, #0]

  /* creation of accelTask */
  accelTaskHandle = osThreadNew(StartTaskAccelerometer, NULL, &accelTask_attributes);
 8003c10:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <MX_FREERTOS_Init+0x298>)
 8003c12:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <MX_FREERTOS_Init+0x29c>)
 8003c14:	2100      	movs	r1, #0
 8003c16:	0018      	movs	r0, r3
 8003c18:	f00b fcfc 	bl	800f614 <osThreadNew>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ca8 <MX_FREERTOS_Init+0x2a0>)
 8003c20:	601a      	str	r2, [r3, #0]

  /* creation of sensorsPolling */
  sensorsPollingHandle = osThreadNew(StartSensorsPolling, NULL, &sensorsPolling_attributes);
 8003c22:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <MX_FREERTOS_Init+0x2a4>)
 8003c24:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <MX_FREERTOS_Init+0x2a8>)
 8003c26:	2100      	movs	r1, #0
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f00b fcf3 	bl	800f614 <osThreadNew>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <MX_FREERTOS_Init+0x2ac>)
 8003c32:	601a      	str	r2, [r3, #0]

  /* creation of ADS1232Task */
  ADS1232TaskHandle = osThreadNew(StartADS1232Task, NULL, &ADS1232Task_attributes);
 8003c34:	4a20      	ldr	r2, [pc, #128]	@ (8003cb8 <MX_FREERTOS_Init+0x2b0>)
 8003c36:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <MX_FREERTOS_Init+0x2b4>)
 8003c38:	2100      	movs	r1, #0
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f00b fcea 	bl	800f614 <osThreadNew>
 8003c40:	0002      	movs	r2, r0
 8003c42:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc0 <MX_FREERTOS_Init+0x2b8>)
 8003c44:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b003      	add	sp, #12
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	200003c0 	.word	0x200003c0
 8003c54:	1fff7590 	.word	0x1fff7590
 8003c58:	200003b0 	.word	0x200003b0
 8003c5c:	200003b2 	.word	0x200003b2
 8003c60:	200003ac 	.word	0x200003ac
 8003c64:	200003a0 	.word	0x200003a0
 8003c68:	200003a8 	.word	0x200003a8
 8003c6c:	40004400 	.word	0x40004400
 8003c70:	20000068 	.word	0x20000068
 8003c74:	20000338 	.word	0x20000338
 8003c78:	08005461 	.word	0x08005461
 8003c7c:	080175e4 	.word	0x080175e4
 8003c80:	0800509d 	.word	0x0800509d
 8003c84:	200003d8 	.word	0x200003d8
 8003c88:	08017530 	.word	0x08017530
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	200003c4 	.word	0x200003c4
 8003c94:	08017554 	.word	0x08017554
 8003c98:	08003f19 	.word	0x08003f19
 8003c9c:	200003c8 	.word	0x200003c8
 8003ca0:	08017578 	.word	0x08017578
 8003ca4:	08004ec1 	.word	0x08004ec1
 8003ca8:	200003cc 	.word	0x200003cc
 8003cac:	0801759c 	.word	0x0801759c
 8003cb0:	08004f8d 	.word	0x08004f8d
 8003cb4:	200003d0 	.word	0x200003d0
 8003cb8:	080175c0 	.word	0x080175c0
 8003cbc:	08005071 	.word	0x08005071
 8003cc0:	200003d4 	.word	0x200003d4

08003cc4 <StartDebugTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8003cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc6:	46de      	mov	lr, fp
 8003cc8:	4657      	mov	r7, sl
 8003cca:	464e      	mov	r6, r9
 8003ccc:	4645      	mov	r5, r8
 8003cce:	b5e0      	push	{r5, r6, r7, lr}
 8003cd0:	b0e3      	sub	sp, #396	@ 0x18c
 8003cd2:	af12      	add	r7, sp, #72	@ 0x48
 8003cd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartDebugTask */

  /* Infinite loop */
	check_errors();
 8003cd6:	f001 fb73 	bl	80053c0 <check_errors>

	get_platform_number();
 8003cda:	f7ff fe8f 	bl	80039fc <get_platform_number>

	osTimerStart(maximumsPeriodTimerHandle, timer_period);	// запуск таймера с периодом срабатывания 10 минут
 8003cde:	4b81      	ldr	r3, [pc, #516]	@ (8003ee4 <StartDebugTask+0x220>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a81      	ldr	r2, [pc, #516]	@ (8003ee8 <StartDebugTask+0x224>)
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f00b fde4 	bl	800f8b4 <osTimerStart>
//	debug("\r\nSN: %05d\r\n", serial_number);
//	debug("\r\nMax mediums timer set to %d ms\r\n", timer_period);

	if (!debug_enabled()) {
 8003cec:	f002 f952 	bl	8005f94 <debug_enabled>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d137      	bne.n	8003d64 <StartDebugTask+0xa0>

		uint8_t message_sn[64] = { 0, };
 8003cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8003eec <StartDebugTask+0x228>)
 8003cf6:	228c      	movs	r2, #140	@ 0x8c
 8003cf8:	0052      	lsls	r2, r2, #1
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	2228      	movs	r2, #40	@ 0x28
 8003cfe:	4694      	mov	ip, r2
 8003d00:	44bc      	add	ip, r7
 8003d02:	4463      	add	r3, ip
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	223c      	movs	r2, #60	@ 0x3c
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f00f fb6c 	bl	80133ec <memset>
		memset(message_sn, 0, sizeof(message_sn));
 8003d14:	2408      	movs	r4, #8
 8003d16:	2528      	movs	r5, #40	@ 0x28
 8003d18:	1963      	adds	r3, r4, r5
 8003d1a:	19db      	adds	r3, r3, r7
 8003d1c:	2240      	movs	r2, #64	@ 0x40
 8003d1e:	2100      	movs	r1, #0
 8003d20:	0018      	movs	r0, r3
 8003d22:	f00f fb63 	bl	80133ec <memset>

		int size = snprintf((char *)message_sn, sizeof(message_sn), "SN: %05d \r\n", serial_number);
 8003d26:	4b72      	ldr	r3, [pc, #456]	@ (8003ef0 <StartDebugTask+0x22c>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	4a72      	ldr	r2, [pc, #456]	@ (8003ef4 <StartDebugTask+0x230>)
 8003d2c:	1961      	adds	r1, r4, r5
 8003d2e:	19c8      	adds	r0, r1, r7
 8003d30:	2140      	movs	r1, #64	@ 0x40
 8003d32:	f00f fa83 	bl	801323c <sniprintf>
 8003d36:	0003      	movs	r3, r0
 8003d38:	228a      	movs	r2, #138	@ 0x8a
 8003d3a:	0052      	lsls	r2, r2, #1
 8003d3c:	1951      	adds	r1, r2, r5
 8003d3e:	19c9      	adds	r1, r1, r7
 8003d40:	600b      	str	r3, [r1, #0]

		if (size > 0) {
 8003d42:	0029      	movs	r1, r5
 8003d44:	1853      	adds	r3, r2, r1
 8003d46:	19db      	adds	r3, r3, r7
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	dd0a      	ble.n	8003d64 <StartDebugTask+0xa0>
			HAL_UART_Transmit(debug_uart, message_sn, size, 100);
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <StartDebugTask+0x234>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	1853      	adds	r3, r2, r1
 8003d54:	19db      	adds	r3, r3, r7
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	1863      	adds	r3, r4, r1
 8003d5c:	19d9      	adds	r1, r3, r7
 8003d5e:	2364      	movs	r3, #100	@ 0x64
 8003d60:	f008 fefa 	bl	800cb58 <HAL_UART_Transmit>
		}

	}

	vTaskDelay(100);
 8003d64:	2064      	movs	r0, #100	@ 0x64
 8003d66:	f00c fccf 	bl	8010708 <vTaskDelay>

	for (;;) {

		send_debug_messages();
 8003d6a:	f002 f9bd 	bl	80060e8 <send_debug_messages>

		if (!debug_enabled()) {
 8003d6e:	f002 f911 	bl	8005f94 <debug_enabled>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d000      	beq.n	8003d78 <StartDebugTask+0xb4>
 8003d76:	e0ab      	b.n	8003ed0 <StartDebugTask+0x20c>

			float max_acceleration = round_and_limit_float(get_real_acc());
 8003d78:	f001 fde0 	bl	800593c <get_real_acc>
 8003d7c:	1c03      	adds	r3, r0, #0
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f002 f882 	bl	8005e88 <round_and_limit_float>
 8003d84:	1c03      	adds	r3, r0, #0
 8003d86:	2486      	movs	r4, #134	@ 0x86
 8003d88:	0064      	lsls	r4, r4, #1
 8003d8a:	2628      	movs	r6, #40	@ 0x28
 8003d8c:	19a2      	adds	r2, r4, r6
 8003d8e:	19d2      	adds	r2, r2, r7
 8003d90:	6013      	str	r3, [r2, #0]

			float maximum_move = round_and_limit_float(get_real_length());
 8003d92:	f001 fda3 	bl	80058dc <get_real_length>
 8003d96:	1c03      	adds	r3, r0, #0
 8003d98:	1c18      	adds	r0, r3, #0
 8003d9a:	f002 f875 	bl	8005e88 <round_and_limit_float>
 8003d9e:	1c03      	adds	r3, r0, #0
 8003da0:	2584      	movs	r5, #132	@ 0x84
 8003da2:	006d      	lsls	r5, r5, #1
 8003da4:	19aa      	adds	r2, r5, r6
 8003da6:	19d2      	adds	r2, r2, r7
 8003da8:	6013      	str	r3, [r2, #0]

			uint8_t message[256] = { 0, };
 8003daa:	4b50      	ldr	r3, [pc, #320]	@ (8003eec <StartDebugTask+0x228>)
 8003dac:	228c      	movs	r2, #140	@ 0x8c
 8003dae:	0052      	lsls	r2, r2, #1
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	2228      	movs	r2, #40	@ 0x28
 8003db4:	4694      	mov	ip, r2
 8003db6:	44bc      	add	ip, r7
 8003db8:	4463      	add	r3, ip
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	22fc      	movs	r2, #252	@ 0xfc
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f00f fb11 	bl	80133ec <memset>
			memset(message, 0, sizeof(message));
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	005a      	lsls	r2, r3, #1
 8003dce:	2608      	movs	r6, #8
 8003dd0:	2328      	movs	r3, #40	@ 0x28
 8003dd2:	18f1      	adds	r1, r6, r3
 8003dd4:	19cb      	adds	r3, r1, r7
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f00f fb07 	bl	80133ec <memset>

			int size = snprintf((char *)message, sizeof(message),
				"ACCEL: 0x%08X, LENGTH: 0x%08X, MAX_ACCEL: 0x%08X, MAX_LENGTH: 0x%08X, PRESSURE: %.2f HUMIDITY: %d, TEMP %.2f\r\n\nACCEL: %06.2f,     LENGTH: %06.2f,     MAX_ACCEL: %06.2f,     MAX_LENGTH: %06.2f\r\n\n",
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003dde:	2228      	movs	r2, #40	@ 0x28
 8003de0:	18a3      	adds	r3, r4, r2
 8003de2:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	469b      	mov	fp, r3
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003de8:	18ab      	adds	r3, r5, r2
 8003dea:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4698      	mov	r8, r3
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003df0:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <StartDebugTask+0x238>)
			int size = snprintf((char *)message, sizeof(message),
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4699      	mov	r9, r3
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003df6:	4b42      	ldr	r3, [pc, #264]	@ (8003f00 <StartDebugTask+0x23c>)
			int size = snprintf((char *)message, sizeof(message),
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	469a      	mov	sl, r3
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003dfc:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <StartDebugTask+0x240>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	1c18      	adds	r0, r3, #0
 8003e02:	f7ff facf 	bl	80033a4 <__aeabi_f2d>
			int size = snprintf((char *)message, sizeof(message),
 8003e06:	2200      	movs	r2, #0
 8003e08:	4b3f      	ldr	r3, [pc, #252]	@ (8003f08 <StartDebugTask+0x244>)
 8003e0a:	f7fd ff73 	bl	8001cf4 <__aeabi_ddiv>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	000b      	movs	r3, r1
 8003e12:	623a      	str	r2, [r7, #32]
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003e16:	4b3d      	ldr	r3, [pc, #244]	@ (8003f0c <StartDebugTask+0x248>)
 8003e18:	689b      	ldr	r3, [r3, #8]
			int size = snprintf((char *)message, sizeof(message),
 8003e1a:	1c18      	adds	r0, r3, #0
 8003e1c:	f7ff fac2 	bl	80033a4 <__aeabi_f2d>
 8003e20:	61b8      	str	r0, [r7, #24]
 8003e22:	61f9      	str	r1, [r7, #28]
				HDC_config.last_temperature,
 8003e24:	4b39      	ldr	r3, [pc, #228]	@ (8003f0c <StartDebugTask+0x248>)
 8003e26:	685b      	ldr	r3, [r3, #4]
			int size = snprintf((char *)message, sizeof(message),
 8003e28:	1c18      	adds	r0, r3, #0
 8003e2a:	f7ff fabb 	bl	80033a4 <__aeabi_f2d>
 8003e2e:	6138      	str	r0, [r7, #16]
 8003e30:	6179      	str	r1, [r7, #20]
 8003e32:	2128      	movs	r1, #40	@ 0x28
 8003e34:	1863      	adds	r3, r4, r1
 8003e36:	19d9      	adds	r1, r3, r7
 8003e38:	680b      	ldr	r3, [r1, #0]
 8003e3a:	1c18      	adds	r0, r3, #0
 8003e3c:	f7ff fab2 	bl	80033a4 <__aeabi_f2d>
 8003e40:	60b8      	str	r0, [r7, #8]
 8003e42:	60f9      	str	r1, [r7, #12]
 8003e44:	2128      	movs	r1, #40	@ 0x28
 8003e46:	186a      	adds	r2, r5, r1
 8003e48:	19d1      	adds	r1, r2, r7
 8003e4a:	680b      	ldr	r3, [r1, #0]
 8003e4c:	1c18      	adds	r0, r3, #0
 8003e4e:	f7ff faa9 	bl	80033a4 <__aeabi_f2d>
 8003e52:	6038      	str	r0, [r7, #0]
 8003e54:	6079      	str	r1, [r7, #4]
 8003e56:	4b29      	ldr	r3, [pc, #164]	@ (8003efc <StartDebugTask+0x238>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	1c18      	adds	r0, r3, #0
 8003e5c:	f7ff faa2 	bl	80033a4 <__aeabi_f2d>
 8003e60:	0004      	movs	r4, r0
 8003e62:	000d      	movs	r5, r1
 8003e64:	4b26      	ldr	r3, [pc, #152]	@ (8003f00 <StartDebugTask+0x23c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c18      	adds	r0, r3, #0
 8003e6a:	f7ff fa9b 	bl	80033a4 <__aeabi_f2d>
 8003e6e:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <StartDebugTask+0x24c>)
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	469c      	mov	ip, r3
 8003e76:	2328      	movs	r3, #40	@ 0x28
 8003e78:	18f6      	adds	r6, r6, r3
 8003e7a:	19f6      	adds	r6, r6, r7
 8003e7c:	9010      	str	r0, [sp, #64]	@ 0x40
 8003e7e:	9111      	str	r1, [sp, #68]	@ 0x44
 8003e80:	940e      	str	r4, [sp, #56]	@ 0x38
 8003e82:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687c      	ldr	r4, [r7, #4]
 8003e88:	930c      	str	r3, [sp, #48]	@ 0x30
 8003e8a:	940d      	str	r4, [sp, #52]	@ 0x34
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	68fc      	ldr	r4, [r7, #12]
 8003e90:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	697c      	ldr	r4, [r7, #20]
 8003e98:	9308      	str	r3, [sp, #32]
 8003e9a:	9409      	str	r4, [sp, #36]	@ 0x24
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	69fc      	ldr	r4, [r7, #28]
 8003ea0:	9306      	str	r3, [sp, #24]
 8003ea2:	9407      	str	r4, [sp, #28]
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003ea8:	9304      	str	r3, [sp, #16]
 8003eaa:	9405      	str	r4, [sp, #20]
 8003eac:	4653      	mov	r3, sl
 8003eae:	9302      	str	r3, [sp, #8]
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	465b      	mov	r3, fp
 8003eba:	4661      	mov	r1, ip
 8003ebc:	0030      	movs	r0, r6
 8003ebe:	f00f f9bd 	bl	801323c <sniprintf>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	2288      	movs	r2, #136	@ 0x88
 8003ec6:	0052      	lsls	r2, r2, #1
 8003ec8:	2128      	movs	r1, #40	@ 0x28
 8003eca:	1852      	adds	r2, r2, r1
 8003ecc:	19d2      	adds	r2, r2, r7
 8003ece:	6013      	str	r3, [r2, #0]
//			//	HAL_UART_Transmit(debug_uart, message, size, 100);
//			}

		}

		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <StartDebugTask+0x250>)
 8003ed2:	2108      	movs	r1, #8
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f004 ff25 	bl	8008d24 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8003eda:	2064      	movs	r0, #100	@ 0x64
 8003edc:	f00c fc14 	bl	8010708 <vTaskDelay>
		send_debug_messages();
 8003ee0:	e743      	b.n	8003d6a <StartDebugTask+0xa6>
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	200003d8 	.word	0x200003d8
 8003ee8:	000927c0 	.word	0x000927c0
 8003eec:	fffffef0 	.word	0xfffffef0
 8003ef0:	200003b0 	.word	0x200003b0
 8003ef4:	08016e80 	.word	0x08016e80
 8003ef8:	2000006c 	.word	0x2000006c
 8003efc:	200003bc 	.word	0x200003bc
 8003f00:	200003b8 	.word	0x200003b8
 8003f04:	2000038c 	.word	0x2000038c
 8003f08:	40900000 	.word	0x40900000
 8003f0c:	20000394 	.word	0x20000394
 8003f10:	08016e8c 	.word	0x08016e8c
 8003f14:	50000c00 	.word	0x50000c00

08003f18 <StartTaskRxCommands>:
* @brief Function implementing the rxCommandsTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRxCommands */
void StartTaskRxCommands(void *argument) {
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	46de      	mov	lr, fp
 8003f1c:	4657      	mov	r7, sl
 8003f1e:	464e      	mov	r6, r9
 8003f20:	4645      	mov	r5, r8
 8003f22:	b5e0      	push	{r5, r6, r7, lr}
 8003f24:	b0cd      	sub	sp, #308	@ 0x134
 8003f26:	af14      	add	r7, sp, #80	@ 0x50
 8003f28:	62f8      	str	r0, [r7, #44]	@ 0x2c
	/* USER CODE BEGIN StartTaskRxCommands */
	/* Infinite loop */
	uint32_t ulNotifiedValue;
	const TickType_t xBlockTime = pdMS_TO_TICKS(500);
 8003f2a:	23fa      	movs	r3, #250	@ 0xfa
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2290      	movs	r2, #144	@ 0x90
 8003f30:	2128      	movs	r1, #40	@ 0x28
 8003f32:	1852      	adds	r2, r2, r1
 8003f34:	19d2      	adds	r2, r2, r7
 8003f36:	6013      	str	r3, [r2, #0]
	memset(received_command, 0x0, sizeof(received_command));
 8003f38:	4bc4      	ldr	r3, [pc, #784]	@ (800424c <StartTaskRxCommands+0x334>)
 8003f3a:	2216      	movs	r2, #22
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f00f fa54 	bl	80133ec <memset>
	memset(transmitting_command, 0x0, sizeof(transmitting_command));
 8003f44:	4bc2      	ldr	r3, [pc, #776]	@ (8004250 <StartTaskRxCommands+0x338>)
 8003f46:	2216      	movs	r2, #22
 8003f48:	2100      	movs	r1, #0
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f00f fa4e 	bl	80133ec <memset>

	//receive(terminal_uart, received_command, 1);
	receive(terminal_uart, RX_command_buff, 1);
 8003f50:	4bc0      	ldr	r3, [pc, #768]	@ (8004254 <StartTaskRxCommands+0x33c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	49c0      	ldr	r1, [pc, #768]	@ (8004258 <StartTaskRxCommands+0x340>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f002 f89e 	bl	800609a <receive>
	for (;;) {

//		    ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );

		if (uxQueueMessagesWaiting(g_mesQueue) == 0) {
 8003f5e:	4bbf      	ldr	r3, [pc, #764]	@ (800425c <StartTaskRxCommands+0x344>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	0018      	movs	r0, r3
 8003f64:	f00c f8a4 	bl	80100b0 <uxQueueMessagesWaiting>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d101      	bne.n	8003f70 <StartTaskRxCommands+0x58>
 8003f6c:	f000 ff84 	bl	8004e78 <StartTaskRxCommands+0xf60>
			continue;
		}

		uint8_t receive_buf[22];
		xQueueReceive(g_mesQueue, receive_buf, 0);
 8003f70:	4bba      	ldr	r3, [pc, #744]	@ (800425c <StartTaskRxCommands+0x344>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2664      	movs	r6, #100	@ 0x64
 8003f76:	2528      	movs	r5, #40	@ 0x28
 8003f78:	1972      	adds	r2, r6, r5
 8003f7a:	19d1      	adds	r1, r2, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f00b ffde 	bl	800ff40 <xQueueReceive>
		HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8003f84:	4bb6      	ldr	r3, [pc, #728]	@ (8004260 <StartTaskRxCommands+0x348>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	2108      	movs	r1, #8
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f004 fead 	bl	8008cea <HAL_GPIO_WritePin>

		debug("Received <<%s>>\r\n", receive_buf);
 8003f90:	1973      	adds	r3, r6, r5
 8003f92:	19da      	adds	r2, r3, r7
 8003f94:	4bb3      	ldr	r3, [pc, #716]	@ (8004264 <StartTaskRxCommands+0x34c>)
 8003f96:	0011      	movs	r1, r2
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f002 f801 	bl	8005fa0 <debug>
//			if (strlen(receive_buf)==0){
//
//				osDelay(1);
//			}

		if (terminal_parser_state == PARSER_S3x) { // если посылка S3x;
 8003f9e:	4bb2      	ldr	r3, [pc, #712]	@ (8004268 <StartTaskRxCommands+0x350>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d000      	beq.n	8003fa8 <StartTaskRxCommands+0x90>
 8003fa6:	e104      	b.n	80041b2 <StartTaskRxCommands+0x29a>
			// нахождение максимума и ограничение максимальным значением (значение 1 байта)
			uint8_t maximum = round(
					fmax(round_and_limit(get_max_positive_move() * 10 / 2, 255),
 8003fa8:	f001 ff36 	bl	8005e18 <get_max_positive_move>
 8003fac:	1c03      	adds	r3, r0, #0
 8003fae:	49af      	ldr	r1, [pc, #700]	@ (800426c <StartTaskRxCommands+0x354>)
 8003fb0:	1c18      	adds	r0, r3, #0
 8003fb2:	f7fc ff95 	bl	8000ee0 <__aeabi_fmul>
 8003fb6:	1c03      	adds	r3, r0, #0
 8003fb8:	2180      	movs	r1, #128	@ 0x80
 8003fba:	05c9      	lsls	r1, r1, #23
 8003fbc:	1c18      	adds	r0, r3, #0
 8003fbe:	f7fc fda9 	bl	8000b14 <__aeabi_fdiv>
 8003fc2:	1c03      	adds	r3, r0, #0
 8003fc4:	1c1a      	adds	r2, r3, #0
 8003fc6:	4baa      	ldr	r3, [pc, #680]	@ (8004270 <StartTaskRxCommands+0x358>)
 8003fc8:	1c19      	adds	r1, r3, #0
 8003fca:	1c10      	adds	r0, r2, #0
 8003fcc:	f001 ff38 	bl	8005e40 <round_and_limit>
 8003fd0:	0003      	movs	r3, r0
			uint8_t maximum = round(
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff f9c2 	bl	800335c <__aeabi_ui2d>
 8003fd8:	0004      	movs	r4, r0
 8003fda:	000d      	movs	r5, r1
							round_and_limit(get_max_negative_move() * 10 / 2,
 8003fdc:	f001 ff26 	bl	8005e2c <get_max_negative_move>
 8003fe0:	1c03      	adds	r3, r0, #0
 8003fe2:	49a2      	ldr	r1, [pc, #648]	@ (800426c <StartTaskRxCommands+0x354>)
 8003fe4:	1c18      	adds	r0, r3, #0
 8003fe6:	f7fc ff7b 	bl	8000ee0 <__aeabi_fmul>
 8003fea:	1c03      	adds	r3, r0, #0
 8003fec:	2180      	movs	r1, #128	@ 0x80
 8003fee:	05c9      	lsls	r1, r1, #23
 8003ff0:	1c18      	adds	r0, r3, #0
 8003ff2:	f7fc fd8f 	bl	8000b14 <__aeabi_fdiv>
 8003ff6:	1c03      	adds	r3, r0, #0
 8003ff8:	1c1a      	adds	r2, r3, #0
 8003ffa:	4b9d      	ldr	r3, [pc, #628]	@ (8004270 <StartTaskRxCommands+0x358>)
 8003ffc:	1c19      	adds	r1, r3, #0
 8003ffe:	1c10      	adds	r0, r2, #0
 8004000:	f001 ff1e 	bl	8005e40 <round_and_limit>
 8004004:	0003      	movs	r3, r0
			uint8_t maximum = round(
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff f9a8 	bl	800335c <__aeabi_ui2d>
 800400c:	0002      	movs	r2, r0
 800400e:	000b      	movs	r3, r1
 8004010:	0020      	movs	r0, r4
 8004012:	0029      	movs	r1, r5
 8004014:	f00d ff43 	bl	8011e9e <fmax>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	218f      	movs	r1, #143	@ 0x8f
 800401e:	2528      	movs	r5, #40	@ 0x28
 8004020:	1949      	adds	r1, r1, r5
 8004022:	19cc      	adds	r4, r1, r7
 8004024:	0010      	movs	r0, r2
 8004026:	0019      	movs	r1, r3
 8004028:	f7fc fab0 	bl	800058c <__aeabi_d2uiz>
 800402c:	0003      	movs	r3, r0
 800402e:	7023      	strb	r3, [r4, #0]
									255)));

			switch (receive_buf[2]) // Анализируем третий символ, отвечающий за конкретную команду
 8004030:	1973      	adds	r3, r6, r5
 8004032:	19db      	adds	r3, r3, r7
 8004034:	789b      	ldrb	r3, [r3, #2]
 8004036:	3b30      	subs	r3, #48	@ 0x30
 8004038:	2b09      	cmp	r3, #9
 800403a:	d900      	bls.n	800403e <StartTaskRxCommands+0x126>
 800403c:	e0b9      	b.n	80041b2 <StartTaskRxCommands+0x29a>
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	4b8c      	ldr	r3, [pc, #560]	@ (8004274 <StartTaskRxCommands+0x35c>)
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	469f      	mov	pc, r3
			{
			case '3':	          	 	//	Запрос ID
				memcpy(transmitting_command, "BTS4", 4);
 8004048:	498b      	ldr	r1, [pc, #556]	@ (8004278 <StartTaskRxCommands+0x360>)
 800404a:	4b81      	ldr	r3, [pc, #516]	@ (8004250 <StartTaskRxCommands+0x338>)
 800404c:	2204      	movs	r2, #4
 800404e:	0018      	movs	r0, r3
 8004050:	f00f fabe 	bl	80135d0 <memcpy>

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004054:	4b82      	ldr	r3, [pc, #520]	@ (8004260 <StartTaskRxCommands+0x348>)
 8004056:	2201      	movs	r2, #1
 8004058:	2110      	movs	r1, #16
 800405a:	0018      	movs	r0, r3
 800405c:	f004 fe45 	bl	8008cea <HAL_GPIO_WritePin>

				HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 4);
 8004060:	4b7c      	ldr	r3, [pc, #496]	@ (8004254 <StartTaskRxCommands+0x33c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	497a      	ldr	r1, [pc, #488]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004066:	2204      	movs	r2, #4
 8004068:	0018      	movs	r0, r3
 800406a:	f008 fe19 	bl	800cca0 <HAL_UART_Transmit_IT>
				terminal_parser_state = PARSER_EMPT;
 800406e:	4b7e      	ldr	r3, [pc, #504]	@ (8004268 <StartTaskRxCommands+0x350>)
 8004070:	220b      	movs	r2, #11
 8004072:	701a      	strb	r2, [r3, #0]
				debug("Transmit to terminal: <%02x %02x %02x %02x>",
						transmitting_command[0], transmitting_command[1],
 8004074:	4b76      	ldr	r3, [pc, #472]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004076:	781b      	ldrb	r3, [r3, #0]
				debug("Transmit to terminal: <%02x %02x %02x %02x>",
 8004078:	0019      	movs	r1, r3
						transmitting_command[0], transmitting_command[1],
 800407a:	4b75      	ldr	r3, [pc, #468]	@ (8004250 <StartTaskRxCommands+0x338>)
 800407c:	785b      	ldrb	r3, [r3, #1]
				debug("Transmit to terminal: <%02x %02x %02x %02x>",
 800407e:	001a      	movs	r2, r3
						transmitting_command[2], transmitting_command[3]);
 8004080:	4b73      	ldr	r3, [pc, #460]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004082:	789b      	ldrb	r3, [r3, #2]
				debug("Transmit to terminal: <%02x %02x %02x %02x>",
 8004084:	001c      	movs	r4, r3
						transmitting_command[2], transmitting_command[3]);
 8004086:	4b72      	ldr	r3, [pc, #456]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004088:	78db      	ldrb	r3, [r3, #3]
				debug("Transmit to terminal: <%02x %02x %02x %02x>",
 800408a:	487c      	ldr	r0, [pc, #496]	@ (800427c <StartTaskRxCommands+0x364>)
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	0023      	movs	r3, r4
 8004090:	f001 ff86 	bl	8005fa0 <debug>
				break;
 8004094:	e08d      	b.n	80041b2 <StartTaskRxCommands+0x29a>

			case '6'://	запрос макс значений перемещщения, температуры и влаги
				check_need_send_pressure();
 8004096:	f7ff fc33 	bl	8003900 <check_need_send_pressure>

				transmitting_command[0] = maximum;//сюда вставляем максимальное значение перемещения в плюс умноженное на 10 (плюс и минус - это число абсолютного смешения платформы от центра до переднего и заднего края, умноженное на 10)
 800409a:	4b6d      	ldr	r3, [pc, #436]	@ (8004250 <StartTaskRxCommands+0x338>)
 800409c:	218f      	movs	r1, #143	@ 0x8f
 800409e:	2028      	movs	r0, #40	@ 0x28
 80040a0:	180a      	adds	r2, r1, r0
 80040a2:	19d2      	adds	r2, r2, r7
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	701a      	strb	r2, [r3, #0]
				transmitting_command[1] = maximum; //сюда вставляем максимальное значение перемещения в минус умноженное на 10
 80040a8:	4b69      	ldr	r3, [pc, #420]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040aa:	180a      	adds	r2, r1, r0
 80040ac:	19d2      	adds	r2, r2, r7
 80040ae:	7812      	ldrb	r2, [r2, #0]
 80040b0:	705a      	strb	r2, [r3, #1]
				transmitting_command[2] = HDC_config.last_temperature;
 80040b2:	4b73      	ldr	r3, [pc, #460]	@ (8004280 <StartTaskRxCommands+0x368>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	1c18      	adds	r0, r3, #0
 80040b8:	f7fc fa50 	bl	800055c <__aeabi_f2uiz>
 80040bc:	0003      	movs	r3, r0
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b63      	ldr	r3, [pc, #396]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040c2:	709a      	strb	r2, [r3, #2]
				transmitting_command[3] = presshum;
 80040c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004284 <StartTaskRxCommands+0x36c>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4b61      	ldr	r3, [pc, #388]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040cc:	70da      	strb	r2, [r3, #3]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80040ce:	4b64      	ldr	r3, [pc, #400]	@ (8004260 <StartTaskRxCommands+0x348>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	2110      	movs	r1, #16
 80040d4:	0018      	movs	r0, r3
 80040d6:	f004 fe08 	bl	8008cea <HAL_GPIO_WritePin>

				HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 4);
 80040da:	4b5e      	ldr	r3, [pc, #376]	@ (8004254 <StartTaskRxCommands+0x33c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	495c      	ldr	r1, [pc, #368]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040e0:	2204      	movs	r2, #4
 80040e2:	0018      	movs	r0, r3
 80040e4:	f008 fddc 	bl	800cca0 <HAL_UART_Transmit_IT>
				terminal_parser_state = PARSER_EMPT;
 80040e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004268 <StartTaskRxCommands+0x350>)
 80040ea:	220b      	movs	r2, #11
 80040ec:	701a      	strb	r2, [r3, #0]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
						transmitting_command[0], transmitting_command[1],
 80040ee:	4b58      	ldr	r3, [pc, #352]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 80040f2:	0019      	movs	r1, r3
						transmitting_command[0], transmitting_command[1],
 80040f4:	4b56      	ldr	r3, [pc, #344]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040f6:	785b      	ldrb	r3, [r3, #1]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 80040f8:	001a      	movs	r2, r3
						transmitting_command[2], transmitting_command[3]);
 80040fa:	4b55      	ldr	r3, [pc, #340]	@ (8004250 <StartTaskRxCommands+0x338>)
 80040fc:	789b      	ldrb	r3, [r3, #2]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 80040fe:	001c      	movs	r4, r3
						transmitting_command[2], transmitting_command[3]);
 8004100:	4b53      	ldr	r3, [pc, #332]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004102:	78db      	ldrb	r3, [r3, #3]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 8004104:	4860      	ldr	r0, [pc, #384]	@ (8004288 <StartTaskRxCommands+0x370>)
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	0023      	movs	r3, r4
 800410a:	f001 ff49 	bl	8005fa0 <debug>
				//					HAL_GPIO_TogglePin(DBG_GPIO3_GPIO_Port, DBG_GPIO3_Pin);
				break;
 800410e:	e050      	b.n	80041b2 <StartTaskRxCommands+0x29a>

			case '8': 	//	запрос макс значений перемещения и ускорения
				transmitting_command[0] = maximum; //сюда вставляем максимальное значение перемещения в плюс умноженное на 10
 8004110:	4b4f      	ldr	r3, [pc, #316]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004112:	218f      	movs	r1, #143	@ 0x8f
 8004114:	2028      	movs	r0, #40	@ 0x28
 8004116:	180a      	adds	r2, r1, r0
 8004118:	19d2      	adds	r2, r2, r7
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	701a      	strb	r2, [r3, #0]
				transmitting_command[1] = maximum; //сюда вставляем максимальное значение перемещения в минус умноженное на 10
 800411e:	4b4c      	ldr	r3, [pc, #304]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004120:	180a      	adds	r2, r1, r0
 8004122:	19d2      	adds	r2, r2, r7
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	705a      	strb	r2, [r3, #1]
				transmitting_command[2] = round_and_limit(
						get_max_positive_acceleration() * 10, 255.0f); //сюда вставляем максимальное значение ускорения в плюс умноженное на 10
 8004128:	f001 fe62 	bl	8005df0 <get_max_positive_acceleration>
 800412c:	1c03      	adds	r3, r0, #0
				transmitting_command[2] = round_and_limit(
 800412e:	494f      	ldr	r1, [pc, #316]	@ (800426c <StartTaskRxCommands+0x354>)
 8004130:	1c18      	adds	r0, r3, #0
 8004132:	f7fc fed5 	bl	8000ee0 <__aeabi_fmul>
 8004136:	1c03      	adds	r3, r0, #0
 8004138:	1c1a      	adds	r2, r3, #0
 800413a:	4b4d      	ldr	r3, [pc, #308]	@ (8004270 <StartTaskRxCommands+0x358>)
 800413c:	1c19      	adds	r1, r3, #0
 800413e:	1c10      	adds	r0, r2, #0
 8004140:	f001 fe7e 	bl	8005e40 <round_and_limit>
 8004144:	0003      	movs	r3, r0
 8004146:	001a      	movs	r2, r3
 8004148:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <StartTaskRxCommands+0x338>)
 800414a:	709a      	strb	r2, [r3, #2]
				transmitting_command[3] = round_and_limit(
						get_max_negative_acceleration() * 10, 255.0f); //сюда вставляем максимальное значение ускорения в минус умноженное на 10
 800414c:	f001 fe5a 	bl	8005e04 <get_max_negative_acceleration>
 8004150:	1c03      	adds	r3, r0, #0
				transmitting_command[3] = round_and_limit(
 8004152:	4946      	ldr	r1, [pc, #280]	@ (800426c <StartTaskRxCommands+0x354>)
 8004154:	1c18      	adds	r0, r3, #0
 8004156:	f7fc fec3 	bl	8000ee0 <__aeabi_fmul>
 800415a:	1c03      	adds	r3, r0, #0
 800415c:	1c1a      	adds	r2, r3, #0
 800415e:	4b44      	ldr	r3, [pc, #272]	@ (8004270 <StartTaskRxCommands+0x358>)
 8004160:	1c19      	adds	r1, r3, #0
 8004162:	1c10      	adds	r0, r2, #0
 8004164:	f001 fe6c 	bl	8005e40 <round_and_limit>
 8004168:	0003      	movs	r3, r0
 800416a:	001a      	movs	r2, r3
 800416c:	4b38      	ldr	r3, [pc, #224]	@ (8004250 <StartTaskRxCommands+0x338>)
 800416e:	70da      	strb	r2, [r3, #3]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004170:	4b3b      	ldr	r3, [pc, #236]	@ (8004260 <StartTaskRxCommands+0x348>)
 8004172:	2201      	movs	r2, #1
 8004174:	2110      	movs	r1, #16
 8004176:	0018      	movs	r0, r3
 8004178:	f004 fdb7 	bl	8008cea <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 4);
 800417c:	4b35      	ldr	r3, [pc, #212]	@ (8004254 <StartTaskRxCommands+0x33c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4933      	ldr	r1, [pc, #204]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004182:	2204      	movs	r2, #4
 8004184:	0018      	movs	r0, r3
 8004186:	f008 fd8b 	bl	800cca0 <HAL_UART_Transmit_IT>
				terminal_parser_state = PARSER_EMPT;
 800418a:	4b37      	ldr	r3, [pc, #220]	@ (8004268 <StartTaskRxCommands+0x350>)
 800418c:	220b      	movs	r2, #11
 800418e:	701a      	strb	r2, [r3, #0]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
						transmitting_command[0], transmitting_command[1],
 8004190:	4b2f      	ldr	r3, [pc, #188]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004192:	781b      	ldrb	r3, [r3, #0]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 8004194:	0019      	movs	r1, r3
						transmitting_command[0], transmitting_command[1],
 8004196:	4b2e      	ldr	r3, [pc, #184]	@ (8004250 <StartTaskRxCommands+0x338>)
 8004198:	785b      	ldrb	r3, [r3, #1]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 800419a:	001a      	movs	r2, r3
						transmitting_command[2], transmitting_command[3]);
 800419c:	4b2c      	ldr	r3, [pc, #176]	@ (8004250 <StartTaskRxCommands+0x338>)
 800419e:	789b      	ldrb	r3, [r3, #2]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 80041a0:	001c      	movs	r4, r3
						transmitting_command[2], transmitting_command[3]);
 80041a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004250 <StartTaskRxCommands+0x338>)
 80041a4:	78db      	ldrb	r3, [r3, #3]
				debug("Transmit to terminal: <%02x %02x %02x %02x>\r\n",
 80041a6:	4838      	ldr	r0, [pc, #224]	@ (8004288 <StartTaskRxCommands+0x370>)
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	0023      	movs	r3, r4
 80041ac:	f001 fef8 	bl	8005fa0 <debug>

				break;
 80041b0:	46c0      	nop			@ (mov r8, r8)
				//terminal_uart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16(64000000, 19200, 1));
				break;
			}
		}

		if (terminal_parser_state == PARSER_S4x) { // если посылка S4x;
 80041b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004268 <StartTaskRxCommands+0x350>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d000      	beq.n	80041bc <StartTaskRxCommands+0x2a4>
 80041ba:	e1b8      	b.n	800452e <StartTaskRxCommands+0x616>
			int16_t number_bk = 0;
 80041bc:	23b6      	movs	r3, #182	@ 0xb6
 80041be:	2128      	movs	r1, #40	@ 0x28
 80041c0:	185b      	adds	r3, r3, r1
 80041c2:	19db      	adds	r3, r3, r7
 80041c4:	2200      	movs	r2, #0
 80041c6:	801a      	strh	r2, [r3, #0]
			int END_Cmd = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	22b0      	movs	r2, #176	@ 0xb0
 80041cc:	1852      	adds	r2, r2, r1
 80041ce:	19d2      	adds	r2, r2, r7
 80041d0:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 22; i++) {
 80041d2:	2300      	movs	r3, #0
 80041d4:	22ac      	movs	r2, #172	@ 0xac
 80041d6:	1852      	adds	r2, r2, r1
 80041d8:	19d2      	adds	r2, r2, r7
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e026      	b.n	800422c <StartTaskRxCommands+0x314>
				if (receive_buf[i] != ';') {
 80041de:	2364      	movs	r3, #100	@ 0x64
 80041e0:	2128      	movs	r1, #40	@ 0x28
 80041e2:	185b      	adds	r3, r3, r1
 80041e4:	19da      	adds	r2, r3, r7
 80041e6:	23ac      	movs	r3, #172	@ 0xac
 80041e8:	185b      	adds	r3, r3, r1
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	18d3      	adds	r3, r2, r3
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80041f4:	d007      	beq.n	8004206 <StartTaskRxCommands+0x2ee>

					END_Cmd = END_Cmd + 1;
 80041f6:	22b0      	movs	r2, #176	@ 0xb0
 80041f8:	1853      	adds	r3, r2, r1
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3301      	adds	r3, #1
 8004200:	1852      	adds	r2, r2, r1
 8004202:	19d2      	adds	r2, r2, r7
 8004204:	6013      	str	r3, [r2, #0]
				}
				if (receive_buf[i] == ';') {
 8004206:	2364      	movs	r3, #100	@ 0x64
 8004208:	2028      	movs	r0, #40	@ 0x28
 800420a:	181b      	adds	r3, r3, r0
 800420c:	19da      	adds	r2, r3, r7
 800420e:	21ac      	movs	r1, #172	@ 0xac
 8004210:	180b      	adds	r3, r1, r0
 8004212:	19db      	adds	r3, r3, r7
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	18d3      	adds	r3, r2, r3
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b3b      	cmp	r3, #59	@ 0x3b
 800421c:	d00e      	beq.n	800423c <StartTaskRxCommands+0x324>
			for (int i = 0; i < 22; i++) {
 800421e:	180b      	adds	r3, r1, r0
 8004220:	19db      	adds	r3, r3, r7
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	180a      	adds	r2, r1, r0
 8004228:	19d2      	adds	r2, r2, r7
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	23ac      	movs	r3, #172	@ 0xac
 800422e:	2228      	movs	r2, #40	@ 0x28
 8004230:	189b      	adds	r3, r3, r2
 8004232:	19db      	adds	r3, r3, r7
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b15      	cmp	r3, #21
 8004238:	ddd1      	ble.n	80041de <StartTaskRxCommands+0x2c6>
 800423a:	e000      	b.n	800423e <StartTaskRxCommands+0x326>

					break;
 800423c:	46c0      	nop			@ (mov r8, r8)
				}
			}

			for (int i = 2; i < END_Cmd; i++) {
 800423e:	2302      	movs	r3, #2
 8004240:	22a8      	movs	r2, #168	@ 0xa8
 8004242:	2128      	movs	r1, #40	@ 0x28
 8004244:	1852      	adds	r2, r2, r1
 8004246:	19d2      	adds	r2, r2, r7
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e054      	b.n	80042f6 <StartTaskRxCommands+0x3de>
 800424c:	20000354 	.word	0x20000354
 8004250:	2000033c 	.word	0x2000033c
 8004254:	20000070 	.word	0x20000070
 8004258:	20000374 	.word	0x20000374
 800425c:	200003c0 	.word	0x200003c0
 8004260:	50000c00 	.word	0x50000c00
 8004264:	08016f50 	.word	0x08016f50
 8004268:	20000004 	.word	0x20000004
 800426c:	41200000 	.word	0x41200000
 8004270:	437f0000 	.word	0x437f0000
 8004274:	080175f4 	.word	0x080175f4
 8004278:	08016f64 	.word	0x08016f64
 800427c:	08016f6c 	.word	0x08016f6c
 8004280:	20000394 	.word	0x20000394
 8004284:	20000389 	.word	0x20000389
 8004288:	08016f98 	.word	0x08016f98
				if (receive_buf[i] >= '0' && receive_buf[i] <= '9') {
 800428c:	2164      	movs	r1, #100	@ 0x64
 800428e:	2528      	movs	r5, #40	@ 0x28
 8004290:	194b      	adds	r3, r1, r5
 8004292:	19da      	adds	r2, r3, r7
 8004294:	20a8      	movs	r0, #168	@ 0xa8
 8004296:	1943      	adds	r3, r0, r5
 8004298:	19db      	adds	r3, r3, r7
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80042a2:	d91f      	bls.n	80042e4 <StartTaskRxCommands+0x3cc>
 80042a4:	194b      	adds	r3, r1, r5
 80042a6:	19da      	adds	r2, r3, r7
 80042a8:	1943      	adds	r3, r0, r5
 80042aa:	19db      	adds	r3, r3, r7
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	18d3      	adds	r3, r2, r3
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b39      	cmp	r3, #57	@ 0x39
 80042b4:	d816      	bhi.n	80042e4 <StartTaskRxCommands+0x3cc>
					number_bk = number_bk * 10 + (receive_buf[i] - '0');
 80042b6:	24b6      	movs	r4, #182	@ 0xb6
 80042b8:	1963      	adds	r3, r4, r5
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	1c1a      	adds	r2, r3, #0
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	18db      	adds	r3, r3, r3
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	194a      	adds	r2, r1, r5
 80042ca:	19d1      	adds	r1, r2, r7
 80042cc:	1942      	adds	r2, r0, r5
 80042ce:	19d2      	adds	r2, r2, r7
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	188a      	adds	r2, r1, r2
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b30      	subs	r3, #48	@ 0x30
 80042dc:	b29a      	uxth	r2, r3
 80042de:	1963      	adds	r3, r4, r5
 80042e0:	19db      	adds	r3, r3, r7
 80042e2:	801a      	strh	r2, [r3, #0]
			for (int i = 2; i < END_Cmd; i++) {
 80042e4:	22a8      	movs	r2, #168	@ 0xa8
 80042e6:	2128      	movs	r1, #40	@ 0x28
 80042e8:	1853      	adds	r3, r2, r1
 80042ea:	19db      	adds	r3, r3, r7
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	1852      	adds	r2, r2, r1
 80042f2:	19d2      	adds	r2, r2, r7
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	23a8      	movs	r3, #168	@ 0xa8
 80042f8:	2428      	movs	r4, #40	@ 0x28
 80042fa:	191b      	adds	r3, r3, r4
 80042fc:	19db      	adds	r3, r3, r7
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	23b0      	movs	r3, #176	@ 0xb0
 8004302:	191b      	adds	r3, r3, r4
 8004304:	19db      	adds	r3, r3, r7
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	dbbf      	blt.n	800428c <StartTaskRxCommands+0x374>
				}

			}

			if (number_bk == number_sn - 1) { //другое условие
 800430c:	23b6      	movs	r3, #182	@ 0xb6
 800430e:	191b      	adds	r3, r3, r4
 8004310:	19db      	adds	r3, r3, r7
 8004312:	2200      	movs	r2, #0
 8004314:	5e9a      	ldrsh	r2, [r3, r2]
 8004316:	4be4      	ldr	r3, [pc, #912]	@ (80046a8 <StartTaskRxCommands+0x790>)
 8004318:	2100      	movs	r1, #0
 800431a:	5e5b      	ldrsh	r3, [r3, r1]
 800431c:	3b01      	subs	r3, #1
 800431e:	429a      	cmp	r2, r3
 8004320:	d000      	beq.n	8004324 <StartTaskRxCommands+0x40c>
 8004322:	e104      	b.n	800452e <StartTaskRxCommands+0x616>

				float maximum = round_and_limit_float(get_real_length());
 8004324:	f001 fada 	bl	80058dc <get_real_length>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f001 fdac 	bl	8005e88 <round_and_limit_float>
 8004330:	1c03      	adds	r3, r0, #0
 8004332:	2288      	movs	r2, #136	@ 0x88
 8004334:	18ba      	adds	r2, r7, r2
 8004336:	6013      	str	r3, [r2, #0]

				float max_acceleration = round_and_limit_float(get_real_acc());
 8004338:	f001 fb00 	bl	800593c <get_real_acc>
 800433c:	1c03      	adds	r3, r0, #0
 800433e:	1c18      	adds	r0, r3, #0
 8004340:	f001 fda2 	bl	8005e88 <round_and_limit_float>
 8004344:	1c03      	adds	r3, r0, #0
 8004346:	2284      	movs	r2, #132	@ 0x84
 8004348:	18ba      	adds	r2, r7, r2
 800434a:	6013      	str	r3, [r2, #0]

				uint8_t flags = 0;
 800434c:	208e      	movs	r0, #142	@ 0x8e
 800434e:	1903      	adds	r3, r0, r4
 8004350:	19db      	adds	r3, r3, r7
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8004356:	4bd5      	ldr	r3, [pc, #852]	@ (80046ac <StartTaskRxCommands+0x794>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	0019      	movs	r1, r3
 800435c:	1903      	adds	r3, r0, r4
 800435e:	19db      	adds	r3, r3, r7
 8004360:	1902      	adds	r2, r0, r4
 8004362:	19d2      	adds	r2, r2, r7
 8004364:	7812      	ldrb	r2, [r2, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 800436a:	4bd1      	ldr	r3, [pc, #836]	@ (80046b0 <StartTaskRxCommands+0x798>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	b25a      	sxtb	r2, r3
 8004372:	1903      	adds	r3, r0, r4
 8004374:	19db      	adds	r3, r3, r7
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b25b      	sxtb	r3, r3
 800437a:	4313      	orrs	r3, r2
 800437c:	b25a      	sxtb	r2, r3
 800437e:	1903      	adds	r3, r0, r4
 8004380:	19db      	adds	r3, r3, r7
 8004382:	701a      	strb	r2, [r3, #0]
				if (is_error)
 8004384:	4bca      	ldr	r3, [pc, #808]	@ (80046b0 <StartTaskRxCommands+0x798>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <StartTaskRxCommands+0x47a>
					is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 800438c:	4bc8      	ldr	r3, [pc, #800]	@ (80046b0 <StartTaskRxCommands+0x798>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]

				transmitting_command[0] = HDC_config.last_temperature;
 8004392:	4bc8      	ldr	r3, [pc, #800]	@ (80046b4 <StartTaskRxCommands+0x79c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	1c18      	adds	r0, r3, #0
 8004398:	f7fc f8e0 	bl	800055c <__aeabi_f2uiz>
 800439c:	0003      	movs	r3, r0
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	4bc5      	ldr	r3, [pc, #788]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80043a2:	701a      	strb	r2, [r3, #0]
				transmitting_command[1] = HDC_config.last_humidity;
 80043a4:	4bc3      	ldr	r3, [pc, #780]	@ (80046b4 <StartTaskRxCommands+0x79c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	1c18      	adds	r0, r3, #0
 80043aa:	f7fc f8d7 	bl	800055c <__aeabi_f2uiz>
 80043ae:	0003      	movs	r3, r0
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4bc1      	ldr	r3, [pc, #772]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80043b4:	705a      	strb	r2, [r3, #1]
				transmitting_command[2] = flags;
 80043b6:	4bc0      	ldr	r3, [pc, #768]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80043b8:	228e      	movs	r2, #142	@ 0x8e
 80043ba:	2128      	movs	r1, #40	@ 0x28
 80043bc:	1852      	adds	r2, r2, r1
 80043be:	19d2      	adds	r2, r2, r7
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	709a      	strb	r2, [r3, #2]
				transmitting_command[3] = (((LPS_data.last_pressure / 1000)
 80043c4:	4bbd      	ldr	r3, [pc, #756]	@ (80046bc <StartTaskRxCommands+0x7a4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	49bd      	ldr	r1, [pc, #756]	@ (80046c0 <StartTaskRxCommands+0x7a8>)
 80043ca:	1c18      	adds	r0, r3, #0
 80043cc:	f7fc fba2 	bl	8000b14 <__aeabi_fdiv>
 80043d0:	1c03      	adds	r3, r0, #0
 80043d2:	1c18      	adds	r0, r3, #0
 80043d4:	f7fe ffe6 	bl	80033a4 <__aeabi_f2d>
						- 0.5) / 1.5 * 100);
 80043d8:	2200      	movs	r2, #0
 80043da:	4bba      	ldr	r3, [pc, #744]	@ (80046c4 <StartTaskRxCommands+0x7ac>)
 80043dc:	f7fe fb96 	bl	8002b0c <__aeabi_dsub>
 80043e0:	0002      	movs	r2, r0
 80043e2:	000b      	movs	r3, r1
 80043e4:	0010      	movs	r0, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	4bb7      	ldr	r3, [pc, #732]	@ (80046c8 <StartTaskRxCommands+0x7b0>)
 80043ec:	f7fd fc82 	bl	8001cf4 <__aeabi_ddiv>
 80043f0:	0002      	movs	r2, r0
 80043f2:	000b      	movs	r3, r1
 80043f4:	0010      	movs	r0, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	4bb4      	ldr	r3, [pc, #720]	@ (80046cc <StartTaskRxCommands+0x7b4>)
 80043fc:	f7fe f8be 	bl	800257c <__aeabi_dmul>
 8004400:	0002      	movs	r2, r0
 8004402:	000b      	movs	r3, r1
				transmitting_command[3] = (((LPS_data.last_pressure / 1000)
 8004404:	0010      	movs	r0, r2
 8004406:	0019      	movs	r1, r3
 8004408:	f7fc f8c0 	bl	800058c <__aeabi_d2uiz>
 800440c:	0003      	movs	r3, r0
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4ba9      	ldr	r3, [pc, #676]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004412:	70da      	strb	r2, [r3, #3]

				memcpy(&transmitting_command[4], &maximum, 4);
 8004414:	2388      	movs	r3, #136	@ 0x88
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4ba7      	ldr	r3, [pc, #668]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800441c:	605a      	str	r2, [r3, #4]
				memcpy(&transmitting_command[8], &max_acceleration, 4);
 800441e:	2384      	movs	r3, #132	@ 0x84
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4ba4      	ldr	r3, [pc, #656]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004426:	609a      	str	r2, [r3, #8]
				memcpy(&transmitting_command[12], &maximum_move_in_period, 4);
 8004428:	4ba9      	ldr	r3, [pc, #676]	@ (80046d0 <StartTaskRxCommands+0x7b8>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4ba2      	ldr	r3, [pc, #648]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800442e:	60da      	str	r2, [r3, #12]
				memcpy(&transmitting_command[16], &max_acceleration_in_period,
 8004430:	4ba8      	ldr	r3, [pc, #672]	@ (80046d4 <StartTaskRxCommands+0x7bc>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4ba0      	ldr	r3, [pc, #640]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004436:	611a      	str	r2, [r3, #16]
						4);
				memcpy(&transmitting_command[20], &serial_number_control, 2);
 8004438:	4ba7      	ldr	r3, [pc, #668]	@ (80046d8 <StartTaskRxCommands+0x7c0>)
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	4b9e      	ldr	r3, [pc, #632]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800443e:	829a      	strh	r2, [r3, #20]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004440:	4ba6      	ldr	r3, [pc, #664]	@ (80046dc <StartTaskRxCommands+0x7c4>)
 8004442:	2201      	movs	r2, #1
 8004444:	2110      	movs	r1, #16
 8004446:	0018      	movs	r0, r3
 8004448:	f004 fc4f 	bl	8008cea <HAL_GPIO_WritePin>

				HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 22);
 800444c:	4ba4      	ldr	r3, [pc, #656]	@ (80046e0 <StartTaskRxCommands+0x7c8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4999      	ldr	r1, [pc, #612]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004452:	2216      	movs	r2, #22
 8004454:	0018      	movs	r0, r3
 8004456:	f008 fc23 	bl	800cca0 <HAL_UART_Transmit_IT>

				//memset(transmitting_command, 0, sizeof(transmitting_command));
				//	memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 800445a:	4ba2      	ldr	r3, [pc, #648]	@ (80046e4 <StartTaskRxCommands+0x7cc>)
 800445c:	220b      	movs	r2, #11
 800445e:	701a      	strb	r2, [r3, #0]

				debug(
						"Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
						transmitting_command[0], transmitting_command[1],
 8004460:	4b95      	ldr	r3, [pc, #596]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004462:	781b      	ldrb	r3, [r3, #0]
				debug(
 8004464:	62bb      	str	r3, [r7, #40]	@ 0x28
						transmitting_command[0], transmitting_command[1],
 8004466:	4b94      	ldr	r3, [pc, #592]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004468:	785b      	ldrb	r3, [r3, #1]
				debug(
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
						transmitting_command[2], transmitting_command[3],
 800446c:	4b92      	ldr	r3, [pc, #584]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800446e:	789b      	ldrb	r3, [r3, #2]
				debug(
 8004470:	623b      	str	r3, [r7, #32]
						transmitting_command[2], transmitting_command[3],
 8004472:	4b91      	ldr	r3, [pc, #580]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004474:	78db      	ldrb	r3, [r3, #3]
				debug(
 8004476:	469b      	mov	fp, r3
						transmitting_command[4], transmitting_command[5],
 8004478:	4b8f      	ldr	r3, [pc, #572]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800447a:	791b      	ldrb	r3, [r3, #4]
				debug(
 800447c:	61fb      	str	r3, [r7, #28]
						transmitting_command[4], transmitting_command[5],
 800447e:	4b8e      	ldr	r3, [pc, #568]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004480:	795b      	ldrb	r3, [r3, #5]
				debug(
 8004482:	61bb      	str	r3, [r7, #24]
						transmitting_command[6], transmitting_command[7],
 8004484:	4b8c      	ldr	r3, [pc, #560]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004486:	799b      	ldrb	r3, [r3, #6]
				debug(
 8004488:	617b      	str	r3, [r7, #20]
						transmitting_command[6], transmitting_command[7],
 800448a:	4b8b      	ldr	r3, [pc, #556]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800448c:	79db      	ldrb	r3, [r3, #7]
				debug(
 800448e:	613b      	str	r3, [r7, #16]
						transmitting_command[8], transmitting_command[9],
 8004490:	4b89      	ldr	r3, [pc, #548]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004492:	7a1b      	ldrb	r3, [r3, #8]
				debug(
 8004494:	60fb      	str	r3, [r7, #12]
						transmitting_command[8], transmitting_command[9],
 8004496:	4b88      	ldr	r3, [pc, #544]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 8004498:	7a5b      	ldrb	r3, [r3, #9]
				debug(
 800449a:	60bb      	str	r3, [r7, #8]
						transmitting_command[10], transmitting_command[11],
 800449c:	4b86      	ldr	r3, [pc, #536]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 800449e:	7a9b      	ldrb	r3, [r3, #10]
				debug(
 80044a0:	607b      	str	r3, [r7, #4]
						transmitting_command[10], transmitting_command[11],
 80044a2:	4b85      	ldr	r3, [pc, #532]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044a4:	7adb      	ldrb	r3, [r3, #11]
				debug(
 80044a6:	603b      	str	r3, [r7, #0]
						transmitting_command[12], transmitting_command[13],
 80044a8:	4b83      	ldr	r3, [pc, #524]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044aa:	7b1b      	ldrb	r3, [r3, #12]
				debug(
 80044ac:	469a      	mov	sl, r3
						transmitting_command[12], transmitting_command[13],
 80044ae:	4b82      	ldr	r3, [pc, #520]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044b0:	7b5b      	ldrb	r3, [r3, #13]
				debug(
 80044b2:	4699      	mov	r9, r3
						transmitting_command[14], transmitting_command[15],
 80044b4:	4b80      	ldr	r3, [pc, #512]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044b6:	7b9b      	ldrb	r3, [r3, #14]
				debug(
 80044b8:	4698      	mov	r8, r3
						transmitting_command[14], transmitting_command[15],
 80044ba:	4b7f      	ldr	r3, [pc, #508]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044bc:	7bdb      	ldrb	r3, [r3, #15]
				debug(
 80044be:	469c      	mov	ip, r3
						transmitting_command[16], transmitting_command[17],
 80044c0:	4b7d      	ldr	r3, [pc, #500]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044c2:	7c1b      	ldrb	r3, [r3, #16]
				debug(
 80044c4:	001e      	movs	r6, r3
						transmitting_command[16], transmitting_command[17],
 80044c6:	4b7c      	ldr	r3, [pc, #496]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044c8:	7c5b      	ldrb	r3, [r3, #17]
				debug(
 80044ca:	001d      	movs	r5, r3
						transmitting_command[18], transmitting_command[19],
 80044cc:	4b7a      	ldr	r3, [pc, #488]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044ce:	7c9b      	ldrb	r3, [r3, #18]
				debug(
 80044d0:	001c      	movs	r4, r3
						transmitting_command[18], transmitting_command[19],
 80044d2:	4b79      	ldr	r3, [pc, #484]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044d4:	7cdb      	ldrb	r3, [r3, #19]
				debug(
 80044d6:	0019      	movs	r1, r3
						transmitting_command[20], transmitting_command[21]);
 80044d8:	4b77      	ldr	r3, [pc, #476]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044da:	7d1b      	ldrb	r3, [r3, #20]
				debug(
 80044dc:	001a      	movs	r2, r3
						transmitting_command[20], transmitting_command[21]);
 80044de:	4b76      	ldr	r3, [pc, #472]	@ (80046b8 <StartTaskRxCommands+0x7a0>)
 80044e0:	7d5b      	ldrb	r3, [r3, #21]
				debug(
 80044e2:	4881      	ldr	r0, [pc, #516]	@ (80046e8 <StartTaskRxCommands+0x7d0>)
 80044e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80044e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80044e8:	9110      	str	r1, [sp, #64]	@ 0x40
 80044ea:	940f      	str	r4, [sp, #60]	@ 0x3c
 80044ec:	950e      	str	r5, [sp, #56]	@ 0x38
 80044ee:	960d      	str	r6, [sp, #52]	@ 0x34
 80044f0:	4664      	mov	r4, ip
 80044f2:	940c      	str	r4, [sp, #48]	@ 0x30
 80044f4:	4644      	mov	r4, r8
 80044f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80044f8:	464c      	mov	r4, r9
 80044fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80044fc:	4654      	mov	r4, sl
 80044fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8004500:	683c      	ldr	r4, [r7, #0]
 8004502:	9408      	str	r4, [sp, #32]
 8004504:	687c      	ldr	r4, [r7, #4]
 8004506:	9407      	str	r4, [sp, #28]
 8004508:	68bc      	ldr	r4, [r7, #8]
 800450a:	9406      	str	r4, [sp, #24]
 800450c:	68fc      	ldr	r4, [r7, #12]
 800450e:	9405      	str	r4, [sp, #20]
 8004510:	693c      	ldr	r4, [r7, #16]
 8004512:	9404      	str	r4, [sp, #16]
 8004514:	697c      	ldr	r4, [r7, #20]
 8004516:	9403      	str	r4, [sp, #12]
 8004518:	69bc      	ldr	r4, [r7, #24]
 800451a:	9402      	str	r4, [sp, #8]
 800451c:	69fc      	ldr	r4, [r7, #28]
 800451e:	9401      	str	r4, [sp, #4]
 8004520:	465c      	mov	r4, fp
 8004522:	9400      	str	r4, [sp, #0]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800452a:	f001 fd39 	bl	8005fa0 <debug>
			}
		}

		if (terminal_parser_state == PARSER_Sxx) { // если посылка S0x;
 800452e:	4b6d      	ldr	r3, [pc, #436]	@ (80046e4 <StartTaskRxCommands+0x7cc>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d000      	beq.n	8004538 <StartTaskRxCommands+0x620>
 8004536:	e178      	b.n	800482a <StartTaskRxCommands+0x912>

			uint8_t flags = 0;
 8004538:	208d      	movs	r0, #141	@ 0x8d
 800453a:	2428      	movs	r4, #40	@ 0x28
 800453c:	1903      	adds	r3, r0, r4
 800453e:	19db      	adds	r3, r3, r7
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 8004544:	4b59      	ldr	r3, [pc, #356]	@ (80046ac <StartTaskRxCommands+0x794>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	0019      	movs	r1, r3
 800454a:	1903      	adds	r3, r0, r4
 800454c:	19db      	adds	r3, r3, r7
 800454e:	1902      	adds	r2, r0, r4
 8004550:	19d2      	adds	r2, r2, r7
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 8004558:	4b55      	ldr	r3, [pc, #340]	@ (80046b0 <StartTaskRxCommands+0x798>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	b25a      	sxtb	r2, r3
 8004560:	1903      	adds	r3, r0, r4
 8004562:	19db      	adds	r3, r3, r7
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b25b      	sxtb	r3, r3
 8004568:	4313      	orrs	r3, r2
 800456a:	b25a      	sxtb	r2, r3
 800456c:	1903      	adds	r3, r0, r4
 800456e:	19db      	adds	r3, r3, r7
 8004570:	701a      	strb	r2, [r3, #0]
			if (is_error)
 8004572:	4b4f      	ldr	r3, [pc, #316]	@ (80046b0 <StartTaskRxCommands+0x798>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <StartTaskRxCommands+0x668>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 800457a:	4b4d      	ldr	r3, [pc, #308]	@ (80046b0 <StartTaskRxCommands+0x798>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]

			if (MSV == 0 && ADR == 0 && MSV0 == 0) {
 8004580:	4b5a      	ldr	r3, [pc, #360]	@ (80046ec <StartTaskRxCommands+0x7d4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <StartTaskRxCommands+0x686>
 8004588:	4b59      	ldr	r3, [pc, #356]	@ (80046f0 <StartTaskRxCommands+0x7d8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <StartTaskRxCommands+0x686>
 8004590:	4b58      	ldr	r3, [pc, #352]	@ (80046f4 <StartTaskRxCommands+0x7dc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <StartTaskRxCommands+0x686>

				IDN = 1;
 8004598:	4b57      	ldr	r3, [pc, #348]	@ (80046f8 <StartTaskRxCommands+0x7e0>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]

			}

			if (MSV0 == 1 && ADR == 0) { // Анализируем третий символ, отвечающий за конкретный БК
 800459e:	4b55      	ldr	r3, [pc, #340]	@ (80046f4 <StartTaskRxCommands+0x7dc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d14f      	bne.n	8004646 <StartTaskRxCommands+0x72e>
 80045a6:	4b52      	ldr	r3, [pc, #328]	@ (80046f0 <StartTaskRxCommands+0x7d8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d14b      	bne.n	8004646 <StartTaskRxCommands+0x72e>
				IDN = 0;
 80045ae:	4b52      	ldr	r3, [pc, #328]	@ (80046f8 <StartTaskRxCommands+0x7e0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
				uint8_t buf[4] = { 0, 0, 0, 0 };
 80045b4:	2158      	movs	r1, #88	@ 0x58
 80045b6:	2528      	movs	r5, #40	@ 0x28
 80045b8:	194b      	adds	r3, r1, r5
 80045ba:	19db      	adds	r3, r3, r7
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
				//uint32_t val = (ads_val*100)/421 ;
				//uint32_t val = (8388607*100)/421 ;
				//uint32_t val =  1401366;
				uint32_t val = (ads_val);
 80045c0:	4b4e      	ldr	r3, [pc, #312]	@ (80046fc <StartTaskRxCommands+0x7e4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2088      	movs	r0, #136	@ 0x88
 80045c6:	1942      	adds	r2, r0, r5
 80045c8:	19d2      	adds	r2, r2, r7
 80045ca:	6013      	str	r3, [r2, #0]
				//	отправ	EE FF 0B 00
				//0x78730B00;
				buf[3] = (val >> (2 * 8)) & 0xFF;
 80045cc:	1943      	adds	r3, r0, r5
 80045ce:	19db      	adds	r3, r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	194b      	adds	r3, r1, r5
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	70da      	strb	r2, [r3, #3]
				buf[2] = (val >> (1 * 8)) & 0xFF;
 80045dc:	1943      	adds	r3, r0, r5
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	194b      	adds	r3, r1, r5
 80045e8:	19db      	adds	r3, r3, r7
 80045ea:	709a      	strb	r2, [r3, #2]
				buf[1] = (val >> (0 * 8)) & 0xFF;
 80045ec:	1943      	adds	r3, r0, r5
 80045ee:	19db      	adds	r3, r3, r7
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	000c      	movs	r4, r1
 80045f6:	1963      	adds	r3, r4, r5
 80045f8:	19db      	adds	r3, r3, r7
 80045fa:	705a      	strb	r2, [r3, #1]
				buf[0] = buf[1] ^ buf[2] ^ buf[3];
 80045fc:	1963      	adds	r3, r4, r5
 80045fe:	19db      	adds	r3, r3, r7
 8004600:	785a      	ldrb	r2, [r3, #1]
 8004602:	1963      	adds	r3, r4, r5
 8004604:	19db      	adds	r3, r3, r7
 8004606:	789b      	ldrb	r3, [r3, #2]
 8004608:	4053      	eors	r3, r2
 800460a:	b2da      	uxtb	r2, r3
 800460c:	1963      	adds	r3, r4, r5
 800460e:	19db      	adds	r3, r3, r7
 8004610:	78db      	ldrb	r3, [r3, #3]
 8004612:	4053      	eors	r3, r2
 8004614:	b2da      	uxtb	r2, r3
 8004616:	1963      	adds	r3, r4, r5
 8004618:	19db      	adds	r3, r3, r7
 800461a:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800461c:	4b2f      	ldr	r3, [pc, #188]	@ (80046dc <StartTaskRxCommands+0x7c4>)
 800461e:	2201      	movs	r2, #1
 8004620:	2110      	movs	r1, #16
 8004622:	0018      	movs	r0, r3
 8004624:	f004 fb61 	bl	8008cea <HAL_GPIO_WritePin>

				HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 8004628:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <StartTaskRxCommands+0x7c8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	1962      	adds	r2, r4, r5
 800462e:	19d1      	adds	r1, r2, r7
 8004630:	2204      	movs	r2, #4
 8004632:	0018      	movs	r0, r3
 8004634:	f008 fb34 	bl	800cca0 <HAL_UART_Transmit_IT>
				debug("Transmit to terminal: <%x>", buf);
 8004638:	1963      	adds	r3, r4, r5
 800463a:	19da      	adds	r2, r3, r7
 800463c:	4b30      	ldr	r3, [pc, #192]	@ (8004700 <StartTaskRxCommands+0x7e8>)
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f001 fcad 	bl	8005fa0 <debug>
			}
			if (ADR == 1 && MSV0 == 0) {// Анализируем третий символ, отвечающий за конкретный БК
 8004646:	4b2a      	ldr	r3, [pc, #168]	@ (80046f0 <StartTaskRxCommands+0x7d8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d000      	beq.n	8004650 <StartTaskRxCommands+0x738>
 800464e:	e091      	b.n	8004774 <StartTaskRxCommands+0x85c>
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <StartTaskRxCommands+0x7dc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d000      	beq.n	800465a <StartTaskRxCommands+0x742>
 8004658:	e08c      	b.n	8004774 <StartTaskRxCommands+0x85c>
				char str_adr[20];
				sprintf(str_adr, "%c%c\r\n", sensor_inf.platform_adr[0],
 800465a:	4b2a      	ldr	r3, [pc, #168]	@ (8004704 <StartTaskRxCommands+0x7ec>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	001a      	movs	r2, r3
						sensor_inf.platform_adr[1]);
 8004660:	4b28      	ldr	r3, [pc, #160]	@ (8004704 <StartTaskRxCommands+0x7ec>)
 8004662:	785b      	ldrb	r3, [r3, #1]
				sprintf(str_adr, "%c%c\r\n", sensor_inf.platform_adr[0],
 8004664:	4928      	ldr	r1, [pc, #160]	@ (8004708 <StartTaskRxCommands+0x7f0>)
 8004666:	2544      	movs	r5, #68	@ 0x44
 8004668:	2628      	movs	r6, #40	@ 0x28
 800466a:	19a8      	adds	r0, r5, r6
 800466c:	19c0      	adds	r0, r0, r7
 800466e:	f00e fe19 	bl	80132a4 <siprintf>

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004672:	4b1a      	ldr	r3, [pc, #104]	@ (80046dc <StartTaskRxCommands+0x7c4>)
 8004674:	2201      	movs	r2, #1
 8004676:	2110      	movs	r1, #16
 8004678:	0018      	movs	r0, r3
 800467a:	f004 fb36 	bl	8008cea <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_adr,
 800467e:	4b18      	ldr	r3, [pc, #96]	@ (80046e0 <StartTaskRxCommands+0x7c8>)
 8004680:	681c      	ldr	r4, [r3, #0]
						strlen(str_adr));
 8004682:	19ab      	adds	r3, r5, r6
 8004684:	19db      	adds	r3, r3, r7
 8004686:	0018      	movs	r0, r3
 8004688:	f7fb fd3e 	bl	8000108 <strlen>
 800468c:	0003      	movs	r3, r0
				HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_adr,
 800468e:	b29a      	uxth	r2, r3
 8004690:	19ab      	adds	r3, r5, r6
 8004692:	19db      	adds	r3, r3, r7
 8004694:	0019      	movs	r1, r3
 8004696:	0020      	movs	r0, r4
 8004698:	f008 fb02 	bl	800cca0 <HAL_UART_Transmit_IT>

				for (int i = 0; i <= 1; i++) {
 800469c:	2300      	movs	r3, #0
 800469e:	22a4      	movs	r2, #164	@ 0xa4
 80046a0:	1992      	adds	r2, r2, r6
 80046a2:	19d2      	adds	r2, r2, r7
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e05b      	b.n	8004760 <StartTaskRxCommands+0x848>
 80046a8:	200003a8 	.word	0x200003a8
 80046ac:	200003b5 	.word	0x200003b5
 80046b0:	200003b4 	.word	0x200003b4
 80046b4:	20000394 	.word	0x20000394
 80046b8:	2000033c 	.word	0x2000033c
 80046bc:	2000038c 	.word	0x2000038c
 80046c0:	447a0000 	.word	0x447a0000
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	3ff80000 	.word	0x3ff80000
 80046cc:	40590000 	.word	0x40590000
 80046d0:	200003b8 	.word	0x200003b8
 80046d4:	200003bc 	.word	0x200003bc
 80046d8:	200003b2 	.word	0x200003b2
 80046dc:	50000c00 	.word	0x50000c00
 80046e0:	20000070 	.word	0x20000070
 80046e4:	20000004 	.word	0x20000004
 80046e8:	08016fc8 	.word	0x08016fc8
 80046ec:	20000380 	.word	0x20000380
 80046f0:	20000384 	.word	0x20000384
 80046f4:	2000037c 	.word	0x2000037c
 80046f8:	20000370 	.word	0x20000370
 80046fc:	2000036c 	.word	0x2000036c
 8004700:	08017054 	.word	0x08017054
 8004704:	200003a0 	.word	0x200003a0
 8004708:	08017070 	.word	0x08017070
					if (sensor_inf.platform_adr[i] >= '0'
 800470c:	4ac5      	ldr	r2, [pc, #788]	@ (8004a24 <StartTaskRxCommands+0xb0c>)
 800470e:	21a4      	movs	r1, #164	@ 0xa4
 8004710:	2028      	movs	r0, #40	@ 0x28
 8004712:	180b      	adds	r3, r1, r0
 8004714:	19db      	adds	r3, r3, r7
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	18d3      	adds	r3, r2, r3
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b2f      	cmp	r3, #47	@ 0x2f
 800471e:	d916      	bls.n	800474e <StartTaskRxCommands+0x836>
							&& sensor_inf.platform_adr[i] <= '9') {
 8004720:	4ac0      	ldr	r2, [pc, #768]	@ (8004a24 <StartTaskRxCommands+0xb0c>)
 8004722:	180b      	adds	r3, r1, r0
 8004724:	19db      	adds	r3, r3, r7
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b39      	cmp	r3, #57	@ 0x39
 800472e:	d80e      	bhi.n	800474e <StartTaskRxCommands+0x836>
						number_sn = number_sn * 10
 8004730:	4bbd      	ldr	r3, [pc, #756]	@ (8004a28 <StartTaskRxCommands+0xb10>)
 8004732:	2200      	movs	r2, #0
 8004734:	5e9b      	ldrsh	r3, [r3, r2]
 8004736:	001a      	movs	r2, r3
 8004738:	0013      	movs	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	189b      	adds	r3, r3, r2
 800473e:	005b      	lsls	r3, r3, #1
								+ (sensor_inf.platform_adr - '0');
 8004740:	3b30      	subs	r3, #48	@ 0x30
 8004742:	001a      	movs	r2, r3
 8004744:	4bb7      	ldr	r3, [pc, #732]	@ (8004a24 <StartTaskRxCommands+0xb0c>)
 8004746:	18d3      	adds	r3, r2, r3
						number_sn = number_sn * 10
 8004748:	b21a      	sxth	r2, r3
 800474a:	4bb7      	ldr	r3, [pc, #732]	@ (8004a28 <StartTaskRxCommands+0xb10>)
 800474c:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i <= 1; i++) {
 800474e:	22a4      	movs	r2, #164	@ 0xa4
 8004750:	2128      	movs	r1, #40	@ 0x28
 8004752:	1853      	adds	r3, r2, r1
 8004754:	19db      	adds	r3, r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	1852      	adds	r2, r2, r1
 800475c:	19d2      	adds	r2, r2, r7
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	23a4      	movs	r3, #164	@ 0xa4
 8004762:	2228      	movs	r2, #40	@ 0x28
 8004764:	189b      	adds	r3, r3, r2
 8004766:	19db      	adds	r3, r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	ddce      	ble.n	800470c <StartTaskRxCommands+0x7f4>
					}

				}

				ADR = 0;
 800476e:	4baf      	ldr	r3, [pc, #700]	@ (8004a2c <StartTaskRxCommands+0xb14>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
			}
			if (MSV == 1 && ADR == 0 && MSV0 == 0) {// Анализируем третий символ, отвечающий за конкретный БК
 8004774:	4bae      	ldr	r3, [pc, #696]	@ (8004a30 <StartTaskRxCommands+0xb18>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d153      	bne.n	8004824 <StartTaskRxCommands+0x90c>
 800477c:	4bab      	ldr	r3, [pc, #684]	@ (8004a2c <StartTaskRxCommands+0xb14>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d14f      	bne.n	8004824 <StartTaskRxCommands+0x90c>
 8004784:	4bab      	ldr	r3, [pc, #684]	@ (8004a34 <StartTaskRxCommands+0xb1c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d14b      	bne.n	8004824 <StartTaskRxCommands+0x90c>

				uint8_t buf[4] = { 0, 0, 0, 0 };
 800478c:	2140      	movs	r1, #64	@ 0x40
 800478e:	2528      	movs	r5, #40	@ 0x28
 8004790:	194b      	adds	r3, r1, r5
 8004792:	19db      	adds	r3, r3, r7
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
				//uint32_t val = (ads_val*100)/421 ;
				//uint32_t val = (8388607*100)/421 ;
				//uint32_t val =  1401366;
				uint32_t val = (ads_val);
 8004798:	4ba7      	ldr	r3, [pc, #668]	@ (8004a38 <StartTaskRxCommands+0xb20>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2084      	movs	r0, #132	@ 0x84
 800479e:	1942      	adds	r2, r0, r5
 80047a0:	19d2      	adds	r2, r2, r7
 80047a2:	6013      	str	r3, [r2, #0]
				//	отправ	EE FF 0B 00
				//0x78730B00;
				buf[3] = (val >> (2 * 8)) & 0xFF;
 80047a4:	1943      	adds	r3, r0, r5
 80047a6:	19db      	adds	r3, r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	194b      	adds	r3, r1, r5
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	70da      	strb	r2, [r3, #3]
				buf[2] = (val >> (1 * 8)) & 0xFF;
 80047b4:	1943      	adds	r3, r0, r5
 80047b6:	19db      	adds	r3, r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	194b      	adds	r3, r1, r5
 80047c0:	19db      	adds	r3, r3, r7
 80047c2:	709a      	strb	r2, [r3, #2]
				buf[1] = (val >> (0 * 8)) & 0xFF;
 80047c4:	1943      	adds	r3, r0, r5
 80047c6:	19db      	adds	r3, r3, r7
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	000c      	movs	r4, r1
 80047ce:	1963      	adds	r3, r4, r5
 80047d0:	19db      	adds	r3, r3, r7
 80047d2:	705a      	strb	r2, [r3, #1]
				buf[0] = buf[1] ^ buf[2] ^ buf[3];
 80047d4:	1963      	adds	r3, r4, r5
 80047d6:	19db      	adds	r3, r3, r7
 80047d8:	785a      	ldrb	r2, [r3, #1]
 80047da:	1963      	adds	r3, r4, r5
 80047dc:	19db      	adds	r3, r3, r7
 80047de:	789b      	ldrb	r3, [r3, #2]
 80047e0:	4053      	eors	r3, r2
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	1963      	adds	r3, r4, r5
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	4053      	eors	r3, r2
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	1963      	adds	r3, r4, r5
 80047f0:	19db      	adds	r3, r3, r7
 80047f2:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80047f4:	4b91      	ldr	r3, [pc, #580]	@ (8004a3c <StartTaskRxCommands+0xb24>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	2110      	movs	r1, #16
 80047fa:	0018      	movs	r0, r3
 80047fc:	f004 fa75 	bl	8008cea <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 8004800:	4b8f      	ldr	r3, [pc, #572]	@ (8004a40 <StartTaskRxCommands+0xb28>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1962      	adds	r2, r4, r5
 8004806:	19d1      	adds	r1, r2, r7
 8004808:	2204      	movs	r2, #4
 800480a:	0018      	movs	r0, r3
 800480c:	f008 fa48 	bl	800cca0 <HAL_UART_Transmit_IT>
				debug("Transmit to terminal: <%x>", buf);
 8004810:	1963      	adds	r3, r4, r5
 8004812:	19da      	adds	r2, r3, r7
 8004814:	4b8b      	ldr	r3, [pc, #556]	@ (8004a44 <StartTaskRxCommands+0xb2c>)
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f001 fbc1 	bl	8005fa0 <debug>

				MSV = 0;
 800481e:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <StartTaskRxCommands+0xb18>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
			}

			//		memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 8004824:	4b88      	ldr	r3, [pc, #544]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 8004826:	220b      	movs	r2, #11
 8004828:	701a      	strb	r2, [r3, #0]
		}

		if (terminal_parser_state == PARSER_MSV70) { // если посылка Sxx;
 800482a:	4b87      	ldr	r3, [pc, #540]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d12f      	bne.n	8004892 <StartTaskRxCommands+0x97a>

			uint8_t flags = 0;
 8004832:	2083      	movs	r0, #131	@ 0x83
 8004834:	2428      	movs	r4, #40	@ 0x28
 8004836:	1903      	adds	r3, r0, r4
 8004838:	19db      	adds	r3, r3, r7
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 800483e:	4b83      	ldr	r3, [pc, #524]	@ (8004a4c <StartTaskRxCommands+0xb34>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	0019      	movs	r1, r3
 8004844:	1903      	adds	r3, r0, r4
 8004846:	19db      	adds	r3, r3, r7
 8004848:	1902      	adds	r2, r0, r4
 800484a:	19d2      	adds	r2, r2, r7
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 8004852:	4b7f      	ldr	r3, [pc, #508]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	b25a      	sxtb	r2, r3
 800485a:	1903      	adds	r3, r0, r4
 800485c:	19db      	adds	r3, r3, r7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b25b      	sxtb	r3, r3
 8004862:	4313      	orrs	r3, r2
 8004864:	b25a      	sxtb	r2, r3
 8004866:	1903      	adds	r3, r0, r4
 8004868:	19db      	adds	r3, r3, r7
 800486a:	701a      	strb	r2, [r3, #0]
			if (is_error)
 800486c:	4b78      	ldr	r3, [pc, #480]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <StartTaskRxCommands+0x962>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004874:	4b76      	ldr	r3, [pc, #472]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]

			// Анализируем третий символ, отвечающий за конкретный БК

			MSV0 = 1;
 800487a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a34 <StartTaskRxCommands+0xb1c>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
			//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
			debug("Transmit to terminal: <%x>", &MSV0);
 8004880:	4a6c      	ldr	r2, [pc, #432]	@ (8004a34 <StartTaskRxCommands+0xb1c>)
 8004882:	4b70      	ldr	r3, [pc, #448]	@ (8004a44 <StartTaskRxCommands+0xb2c>)
 8004884:	0011      	movs	r1, r2
 8004886:	0018      	movs	r0, r3
 8004888:	f001 fb8a 	bl	8005fa0 <debug>
			//	memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 800488c:	4b6e      	ldr	r3, [pc, #440]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 800488e:	220b      	movs	r2, #11
 8004890:	701a      	strb	r2, [r3, #0]

		}

		if (terminal_parser_state == PARSER_MSV7) { // если посылка Sxx;
 8004892:	4b6d      	ldr	r3, [pc, #436]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d12f      	bne.n	80048fa <StartTaskRxCommands+0x9e2>

			uint8_t flags = 0;
 800489a:	2082      	movs	r0, #130	@ 0x82
 800489c:	2428      	movs	r4, #40	@ 0x28
 800489e:	1903      	adds	r3, r0, r4
 80048a0:	19db      	adds	r3, r3, r7
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 80048a6:	4b69      	ldr	r3, [pc, #420]	@ (8004a4c <StartTaskRxCommands+0xb34>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	0019      	movs	r1, r3
 80048ac:	1903      	adds	r3, r0, r4
 80048ae:	19db      	adds	r3, r3, r7
 80048b0:	1902      	adds	r2, r0, r4
 80048b2:	19d2      	adds	r2, r2, r7
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 80048ba:	4b65      	ldr	r3, [pc, #404]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	b25a      	sxtb	r2, r3
 80048c2:	1903      	adds	r3, r0, r4
 80048c4:	19db      	adds	r3, r3, r7
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b25a      	sxtb	r2, r3
 80048ce:	1903      	adds	r3, r0, r4
 80048d0:	19db      	adds	r3, r3, r7
 80048d2:	701a      	strb	r2, [r3, #0]
			if (is_error)
 80048d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <StartTaskRxCommands+0x9ca>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 80048dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]

			// Анализируем третий символ, отвечающий за конкретный БК

			MSV = 1;
 80048e2:	4b53      	ldr	r3, [pc, #332]	@ (8004a30 <StartTaskRxCommands+0xb18>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
			//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
			debug("Transmit to terminal: <%x>", &MSV);
 80048e8:	4a51      	ldr	r2, [pc, #324]	@ (8004a30 <StartTaskRxCommands+0xb18>)
 80048ea:	4b56      	ldr	r3, [pc, #344]	@ (8004a44 <StartTaskRxCommands+0xb2c>)
 80048ec:	0011      	movs	r1, r2
 80048ee:	0018      	movs	r0, r3
 80048f0:	f001 fb56 	bl	8005fa0 <debug>
			//	memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 80048f4:	4b54      	ldr	r3, [pc, #336]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 80048f6:	220b      	movs	r2, #11
 80048f8:	701a      	strb	r2, [r3, #0]

		}

		if (terminal_parser_state == PARSER_STP) { // если посылка Sxx;
 80048fa:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b0a      	cmp	r3, #10
 8004900:	d12f      	bne.n	8004962 <StartTaskRxCommands+0xa4a>
			uint8_t flags = 0;
 8004902:	2081      	movs	r0, #129	@ 0x81
 8004904:	2428      	movs	r4, #40	@ 0x28
 8004906:	1903      	adds	r3, r0, r4
 8004908:	19db      	adds	r3, r3, r7
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 800490e:	4b4f      	ldr	r3, [pc, #316]	@ (8004a4c <StartTaskRxCommands+0xb34>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	0019      	movs	r1, r3
 8004914:	1903      	adds	r3, r0, r4
 8004916:	19db      	adds	r3, r3, r7
 8004918:	1902      	adds	r2, r0, r4
 800491a:	19d2      	adds	r2, r2, r7
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 8004922:	4b4b      	ldr	r3, [pc, #300]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	b25a      	sxtb	r2, r3
 800492a:	1903      	adds	r3, r0, r4
 800492c:	19db      	adds	r3, r3, r7
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b25b      	sxtb	r3, r3
 8004932:	4313      	orrs	r3, r2
 8004934:	b25a      	sxtb	r2, r3
 8004936:	1903      	adds	r3, r0, r4
 8004938:	19db      	adds	r3, r3, r7
 800493a:	701a      	strb	r2, [r3, #0]
			if (is_error)
 800493c:	4b44      	ldr	r3, [pc, #272]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <StartTaskRxCommands+0xa32>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004944:	4b42      	ldr	r3, [pc, #264]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]

			// Анализируем третий символ, отвечающий за конкретный БК
			ADR = 0;
 800494a:	4b38      	ldr	r3, [pc, #224]	@ (8004a2c <StartTaskRxCommands+0xb14>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
			MSV = 0;
 8004950:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <StartTaskRxCommands+0xb18>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
			MSV0 = 0;
 8004956:	4b37      	ldr	r3, [pc, #220]	@ (8004a34 <StartTaskRxCommands+0xb1c>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
			//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
			//	memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 800495c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 800495e:	220b      	movs	r2, #11
 8004960:	701a      	strb	r2, [r3, #0]

		}

		if (terminal_parser_state == PARSER_ADR7) { // если посылка S0x;
 8004962:	4b39      	ldr	r3, [pc, #228]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b08      	cmp	r3, #8
 8004968:	d129      	bne.n	80049be <StartTaskRxCommands+0xaa6>

			uint8_t flags = 0;
 800496a:	2080      	movs	r0, #128	@ 0x80
 800496c:	2428      	movs	r4, #40	@ 0x28
 800496e:	1903      	adds	r3, r0, r4
 8004970:	19db      	adds	r3, r3, r7
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 8004976:	4b35      	ldr	r3, [pc, #212]	@ (8004a4c <StartTaskRxCommands+0xb34>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	0019      	movs	r1, r3
 800497c:	1903      	adds	r3, r0, r4
 800497e:	19db      	adds	r3, r3, r7
 8004980:	1902      	adds	r2, r0, r4
 8004982:	19d2      	adds	r2, r2, r7
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 800498a:	4b31      	ldr	r3, [pc, #196]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	b25a      	sxtb	r2, r3
 8004992:	1903      	adds	r3, r0, r4
 8004994:	19db      	adds	r3, r3, r7
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b25b      	sxtb	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b25a      	sxtb	r2, r3
 800499e:	1903      	adds	r3, r0, r4
 80049a0:	19db      	adds	r3, r3, r7
 80049a2:	701a      	strb	r2, [r3, #0]
			if (is_error)
 80049a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <StartTaskRxCommands+0xa9a>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 80049ac:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]

			// Анализируем третий символ, отвечающий за конкретный БК
			ADR = 1;
 80049b2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a2c <StartTaskRxCommands+0xb14>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
			//	memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 80049b8:	4b23      	ldr	r3, [pc, #140]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 80049ba:	220b      	movs	r2, #11
 80049bc:	701a      	strb	r2, [r3, #0]

		}

		if (terminal_parser_state == PARSER_ADRNUM) { // если посылка S0x;
 80049be:	4b22      	ldr	r3, [pc, #136]	@ (8004a48 <StartTaskRxCommands+0xb30>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d000      	beq.n	80049c8 <StartTaskRxCommands+0xab0>
 80049c6:	e0b4      	b.n	8004b32 <StartTaskRxCommands+0xc1a>

			uint8_t flags = 0;
 80049c8:	207f      	movs	r0, #127	@ 0x7f
 80049ca:	2428      	movs	r4, #40	@ 0x28
 80049cc:	1903      	adds	r3, r0, r4
 80049ce:	19db      	adds	r3, r3, r7
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 80049d4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a4c <StartTaskRxCommands+0xb34>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	0019      	movs	r1, r3
 80049da:	1903      	adds	r3, r0, r4
 80049dc:	19db      	adds	r3, r3, r7
 80049de:	1902      	adds	r2, r0, r4
 80049e0:	19d2      	adds	r2, r2, r7
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 80049e8:	4b19      	ldr	r3, [pc, #100]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	b25a      	sxtb	r2, r3
 80049f0:	1903      	adds	r3, r0, r4
 80049f2:	19db      	adds	r3, r3, r7
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	4313      	orrs	r3, r2
 80049fa:	b25a      	sxtb	r2, r3
 80049fc:	1903      	adds	r3, r0, r4
 80049fe:	19db      	adds	r3, r3, r7
 8004a00:	701a      	strb	r2, [r3, #0]
			if (is_error)
 8004a02:	4b13      	ldr	r3, [pc, #76]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <StartTaskRxCommands+0xaf8>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <StartTaskRxCommands+0xb38>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
			received_number = 0;
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <StartTaskRxCommands+0xb3c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	801a      	strh	r2, [r3, #0]
			for (int i = 7; i < 14; i++) {
 8004a16:	2307      	movs	r3, #7
 8004a18:	22a0      	movs	r2, #160	@ 0xa0
 8004a1a:	2128      	movs	r1, #40	@ 0x28
 8004a1c:	1852      	adds	r2, r2, r1
 8004a1e:	19d2      	adds	r2, r2, r7
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e04b      	b.n	8004abc <StartTaskRxCommands+0xba4>
 8004a24:	200003a0 	.word	0x200003a0
 8004a28:	200003a8 	.word	0x200003a8
 8004a2c:	20000384 	.word	0x20000384
 8004a30:	20000380 	.word	0x20000380
 8004a34:	2000037c 	.word	0x2000037c
 8004a38:	2000036c 	.word	0x2000036c
 8004a3c:	50000c00 	.word	0x50000c00
 8004a40:	20000070 	.word	0x20000070
 8004a44:	08017054 	.word	0x08017054
 8004a48:	20000004 	.word	0x20000004
 8004a4c:	200003b5 	.word	0x200003b5
 8004a50:	200003b4 	.word	0x200003b4
 8004a54:	2000036a 	.word	0x2000036a
				if (receive_buf[i] >= '0' && receive_buf[i] <= '9') {
 8004a58:	2164      	movs	r1, #100	@ 0x64
 8004a5a:	2428      	movs	r4, #40	@ 0x28
 8004a5c:	190b      	adds	r3, r1, r4
 8004a5e:	19da      	adds	r2, r3, r7
 8004a60:	20a0      	movs	r0, #160	@ 0xa0
 8004a62:	1903      	adds	r3, r0, r4
 8004a64:	19db      	adds	r3, r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004a6e:	d91c      	bls.n	8004aaa <StartTaskRxCommands+0xb92>
 8004a70:	190b      	adds	r3, r1, r4
 8004a72:	19da      	adds	r2, r3, r7
 8004a74:	1903      	adds	r3, r0, r4
 8004a76:	19db      	adds	r3, r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	18d3      	adds	r3, r2, r3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b39      	cmp	r3, #57	@ 0x39
 8004a80:	d813      	bhi.n	8004aaa <StartTaskRxCommands+0xb92>
					received_number = received_number * 10
							+ (receive_buf[i] - '0');
 8004a82:	4b63      	ldr	r3, [pc, #396]	@ (8004c10 <StartTaskRxCommands+0xcf8>)
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	1c1a      	adds	r2, r3, #0
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	18db      	adds	r3, r3, r3
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	190a      	adds	r2, r1, r4
 8004a92:	19d1      	adds	r1, r2, r7
 8004a94:	1902      	adds	r2, r0, r4
 8004a96:	19d2      	adds	r2, r2, r7
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	188a      	adds	r2, r1, r2
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b30      	subs	r3, #48	@ 0x30
 8004aa4:	b29a      	uxth	r2, r3
					received_number = received_number * 10
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <StartTaskRxCommands+0xcf8>)
 8004aa8:	801a      	strh	r2, [r3, #0]
			for (int i = 7; i < 14; i++) {
 8004aaa:	22a0      	movs	r2, #160	@ 0xa0
 8004aac:	2128      	movs	r1, #40	@ 0x28
 8004aae:	1853      	adds	r3, r2, r1
 8004ab0:	19db      	adds	r3, r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	1852      	adds	r2, r2, r1
 8004ab8:	19d2      	adds	r2, r2, r7
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	23a0      	movs	r3, #160	@ 0xa0
 8004abe:	2428      	movs	r4, #40	@ 0x28
 8004ac0:	191b      	adds	r3, r3, r4
 8004ac2:	19db      	adds	r3, r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b0d      	cmp	r3, #13
 8004ac8:	ddc6      	ble.n	8004a58 <StartTaskRxCommands+0xb40>
				}

			}

			// Проверка serial_number
			if (received_number == serial_number) {
 8004aca:	4b51      	ldr	r3, [pc, #324]	@ (8004c10 <StartTaskRxCommands+0xcf8>)
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	4b51      	ldr	r3, [pc, #324]	@ (8004c14 <StartTaskRxCommands+0xcfc>)
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d12a      	bne.n	8004b2c <StartTaskRxCommands+0xc14>
				memset(sensor_inf.platform_adr, '0',
 8004ad6:	4b50      	ldr	r3, [pc, #320]	@ (8004c18 <StartTaskRxCommands+0xd00>)
 8004ad8:	2202      	movs	r2, #2
 8004ada:	2130      	movs	r1, #48	@ 0x30
 8004adc:	0018      	movs	r0, r3
 8004ade:	f00e fc85 	bl	80133ec <memset>
						sizeof(sensor_inf.platform_adr));
				sensor_inf.platform_adr[0] = receive_buf[3];
 8004ae2:	2164      	movs	r1, #100	@ 0x64
 8004ae4:	190b      	adds	r3, r1, r4
 8004ae6:	19db      	adds	r3, r3, r7
 8004ae8:	78da      	ldrb	r2, [r3, #3]
 8004aea:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <StartTaskRxCommands+0xd00>)
 8004aec:	701a      	strb	r2, [r3, #0]
				sensor_inf.platform_adr[1] = receive_buf[4];
 8004aee:	190b      	adds	r3, r1, r4
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	791a      	ldrb	r2, [r3, #4]
 8004af4:	4b48      	ldr	r3, [pc, #288]	@ (8004c18 <StartTaskRxCommands+0xd00>)
 8004af6:	705a      	strb	r2, [r3, #1]
				// clearFlash();
				//offset=0;
				if (offset >= 248) {
 8004af8:	4b48      	ldr	r3, [pc, #288]	@ (8004c1c <StartTaskRxCommands+0xd04>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2bf7      	cmp	r3, #247	@ 0xf7
 8004afe:	dd04      	ble.n	8004b0a <StartTaskRxCommands+0xbf2>

					offset = 0;
 8004b00:	4b46      	ldr	r3, [pc, #280]	@ (8004c1c <StartTaskRxCommands+0xd04>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
					clearFlash();
 8004b06:	f7fe fe6d 	bl	80037e4 <clearFlash>
				}
				taskENTER_CRITICAL();
 8004b0a:	f00c ff39 	bl	8011980 <vPortEnterCritical>
				WriteDeviceAddressOffset((uint8_t*) &sensor_inf,
 8004b0e:	4b43      	ldr	r3, [pc, #268]	@ (8004c1c <StartTaskRxCommands+0xd04>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <StartTaskRxCommands+0xd00>)
 8004b14:	2108      	movs	r1, #8
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7fe fe92 	bl	8003840 <WriteDeviceAddressOffset>
						sizeof(sensor_inf), offset);
				taskEXIT_CRITICAL();
 8004b1c:	f00c ff42 	bl	80119a4 <vPortExitCritical>

				offset += sizeof(sensor_inf);
 8004b20:	4b3e      	ldr	r3, [pc, #248]	@ (8004c1c <StartTaskRxCommands+0xd04>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	001a      	movs	r2, r3
 8004b28:	4b3c      	ldr	r3, [pc, #240]	@ (8004c1c <StartTaskRxCommands+0xd04>)
 8004b2a:	601a      	str	r2, [r3, #0]
			}
			//	 memset(receive_buf, 0, sizeof(receive_buf));
			//sensor_inf.crc_platform=(uint8_t)(crc32b((uint8_t *)sensor_inf.platform_adr, 2));
			terminal_parser_state = PARSER_EMPT;
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c20 <StartTaskRxCommands+0xd08>)
 8004b2e:	220b      	movs	r2, #11
 8004b30:	701a      	strb	r2, [r3, #0]

		}

		if (terminal_parser_state == PARSER_BDR) { // если посылка S0x;
 8004b32:	4b3b      	ldr	r3, [pc, #236]	@ (8004c20 <StartTaskRxCommands+0xd08>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b05      	cmp	r3, #5
 8004b38:	d000      	beq.n	8004b3c <StartTaskRxCommands+0xc24>
 8004b3a:	e0e7      	b.n	8004d0c <StartTaskRxCommands+0xdf4>
			int END_Cmd = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	229c      	movs	r2, #156	@ 0x9c
 8004b40:	2428      	movs	r4, #40	@ 0x28
 8004b42:	1912      	adds	r2, r2, r4
 8004b44:	19d2      	adds	r2, r2, r7
 8004b46:	6013      	str	r3, [r2, #0]
			uint8_t flags = 0;
 8004b48:	207e      	movs	r0, #126	@ 0x7e
 8004b4a:	1903      	adds	r3, r0, r4
 8004b4c:	19db      	adds	r3, r3, r7
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 8004b52:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <StartTaskRxCommands+0xd0c>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	0019      	movs	r1, r3
 8004b58:	1903      	adds	r3, r0, r4
 8004b5a:	19db      	adds	r3, r3, r7
 8004b5c:	1902      	adds	r2, r0, r4
 8004b5e:	19d2      	adds	r2, r2, r7
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 8004b66:	4b30      	ldr	r3, [pc, #192]	@ (8004c28 <StartTaskRxCommands+0xd10>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	b25a      	sxtb	r2, r3
 8004b6e:	1903      	adds	r3, r0, r4
 8004b70:	19db      	adds	r3, r3, r7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b25a      	sxtb	r2, r3
 8004b7a:	1903      	adds	r3, r0, r4
 8004b7c:	19db      	adds	r3, r3, r7
 8004b7e:	701a      	strb	r2, [r3, #0]
			if (is_error)
 8004b80:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <StartTaskRxCommands+0xd10>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <StartTaskRxCommands+0xc76>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004b88:	4b27      	ldr	r3, [pc, #156]	@ (8004c28 <StartTaskRxCommands+0xd10>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
			sensor_inf.received_BDR = 0;
 8004b8e:	4b22      	ldr	r3, [pc, #136]	@ (8004c18 <StartTaskRxCommands+0xd00>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]

			for (int i = 0; i < 22; i++) {
 8004b94:	2300      	movs	r3, #0
 8004b96:	2298      	movs	r2, #152	@ 0x98
 8004b98:	2128      	movs	r1, #40	@ 0x28
 8004b9a:	1852      	adds	r2, r2, r1
 8004b9c:	19d2      	adds	r2, r2, r7
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e026      	b.n	8004bf0 <StartTaskRxCommands+0xcd8>
				if (receive_buf[i] != ';') {
 8004ba2:	2364      	movs	r3, #100	@ 0x64
 8004ba4:	2128      	movs	r1, #40	@ 0x28
 8004ba6:	185b      	adds	r3, r3, r1
 8004ba8:	19da      	adds	r2, r3, r7
 8004baa:	2398      	movs	r3, #152	@ 0x98
 8004bac:	185b      	adds	r3, r3, r1
 8004bae:	19db      	adds	r3, r3, r7
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	18d3      	adds	r3, r2, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b3b      	cmp	r3, #59	@ 0x3b
 8004bb8:	d007      	beq.n	8004bca <StartTaskRxCommands+0xcb2>
					END_Cmd = END_Cmd + 1;
 8004bba:	229c      	movs	r2, #156	@ 0x9c
 8004bbc:	1853      	adds	r3, r2, r1
 8004bbe:	19db      	adds	r3, r3, r7
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	1852      	adds	r2, r2, r1
 8004bc6:	19d2      	adds	r2, r2, r7
 8004bc8:	6013      	str	r3, [r2, #0]
				}
				if (receive_buf[i] == ';') {
 8004bca:	2364      	movs	r3, #100	@ 0x64
 8004bcc:	2028      	movs	r0, #40	@ 0x28
 8004bce:	181b      	adds	r3, r3, r0
 8004bd0:	19da      	adds	r2, r3, r7
 8004bd2:	2198      	movs	r1, #152	@ 0x98
 8004bd4:	180b      	adds	r3, r1, r0
 8004bd6:	19db      	adds	r3, r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	18d3      	adds	r3, r2, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b3b      	cmp	r3, #59	@ 0x3b
 8004be0:	d00e      	beq.n	8004c00 <StartTaskRxCommands+0xce8>
			for (int i = 0; i < 22; i++) {
 8004be2:	180b      	adds	r3, r1, r0
 8004be4:	19db      	adds	r3, r3, r7
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	180a      	adds	r2, r1, r0
 8004bec:	19d2      	adds	r2, r2, r7
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	2398      	movs	r3, #152	@ 0x98
 8004bf2:	2228      	movs	r2, #40	@ 0x28
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	19db      	adds	r3, r3, r7
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b15      	cmp	r3, #21
 8004bfc:	ddd1      	ble.n	8004ba2 <StartTaskRxCommands+0xc8a>
 8004bfe:	e000      	b.n	8004c02 <StartTaskRxCommands+0xcea>
					break;;
 8004c00:	46c0      	nop			@ (mov r8, r8)
				}
			}

			for (int i = 3; i < END_Cmd; i++) {
 8004c02:	2303      	movs	r3, #3
 8004c04:	2294      	movs	r2, #148	@ 0x94
 8004c06:	2128      	movs	r1, #40	@ 0x28
 8004c08:	1852      	adds	r2, r2, r1
 8004c0a:	19d2      	adds	r2, r2, r7
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e03e      	b.n	8004c8e <StartTaskRxCommands+0xd76>
 8004c10:	2000036a 	.word	0x2000036a
 8004c14:	200003b0 	.word	0x200003b0
 8004c18:	200003a0 	.word	0x200003a0
 8004c1c:	200003ac 	.word	0x200003ac
 8004c20:	20000004 	.word	0x20000004
 8004c24:	200003b5 	.word	0x200003b5
 8004c28:	200003b4 	.word	0x200003b4
				if (receive_buf[i] >= '0' && receive_buf[i] <= '9') {
 8004c2c:	2064      	movs	r0, #100	@ 0x64
 8004c2e:	2528      	movs	r5, #40	@ 0x28
 8004c30:	1943      	adds	r3, r0, r5
 8004c32:	19da      	adds	r2, r3, r7
 8004c34:	2494      	movs	r4, #148	@ 0x94
 8004c36:	1963      	adds	r3, r4, r5
 8004c38:	19db      	adds	r3, r3, r7
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	18d3      	adds	r3, r2, r3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b2f      	cmp	r3, #47	@ 0x2f
 8004c42:	d91b      	bls.n	8004c7c <StartTaskRxCommands+0xd64>
 8004c44:	1943      	adds	r3, r0, r5
 8004c46:	19da      	adds	r2, r3, r7
 8004c48:	1963      	adds	r3, r4, r5
 8004c4a:	19db      	adds	r3, r3, r7
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	18d3      	adds	r3, r2, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b39      	cmp	r3, #57	@ 0x39
 8004c54:	d812      	bhi.n	8004c7c <StartTaskRxCommands+0xd64>
					sensor_inf.received_BDR = sensor_inf.received_BDR * 10
 8004c56:	4b8a      	ldr	r3, [pc, #552]	@ (8004e80 <StartTaskRxCommands+0xf68>)
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	0013      	movs	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	0019      	movs	r1, r3
							+ (receive_buf[i] - '0');
 8004c64:	1943      	adds	r3, r0, r5
 8004c66:	19da      	adds	r2, r3, r7
 8004c68:	1963      	adds	r3, r4, r5
 8004c6a:	19db      	adds	r3, r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	18d3      	adds	r3, r2, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	18cb      	adds	r3, r1, r3
 8004c74:	3b30      	subs	r3, #48	@ 0x30
 8004c76:	001a      	movs	r2, r3
					sensor_inf.received_BDR = sensor_inf.received_BDR * 10
 8004c78:	4b81      	ldr	r3, [pc, #516]	@ (8004e80 <StartTaskRxCommands+0xf68>)
 8004c7a:	605a      	str	r2, [r3, #4]
			for (int i = 3; i < END_Cmd; i++) {
 8004c7c:	2294      	movs	r2, #148	@ 0x94
 8004c7e:	2128      	movs	r1, #40	@ 0x28
 8004c80:	1853      	adds	r3, r2, r1
 8004c82:	19db      	adds	r3, r3, r7
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	1852      	adds	r2, r2, r1
 8004c8a:	19d2      	adds	r2, r2, r7
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	2394      	movs	r3, #148	@ 0x94
 8004c90:	2128      	movs	r1, #40	@ 0x28
 8004c92:	185b      	adds	r3, r3, r1
 8004c94:	19db      	adds	r3, r3, r7
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	239c      	movs	r3, #156	@ 0x9c
 8004c9a:	185b      	adds	r3, r3, r1
 8004c9c:	19db      	adds	r3, r3, r7
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	dbc3      	blt.n	8004c2c <StartTaskRxCommands+0xd14>
				}

			}

			while (!(USART2->ISR & USART_ISR_TC)) {
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	4b77      	ldr	r3, [pc, #476]	@ (8004e84 <StartTaskRxCommands+0xf6c>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2240      	movs	r2, #64	@ 0x40
 8004cac:	4013      	ands	r3, r2
 8004cae:	d0fa      	beq.n	8004ca6 <StartTaskRxCommands+0xd8e>
				// Ожидание, пока передача завершится
			}

			// Отключаем USART перед изменением настроек
			USART2->CR1 &= ~USART_CR1_UE;
 8004cb0:	4b74      	ldr	r3, [pc, #464]	@ (8004e84 <StartTaskRxCommands+0xf6c>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b73      	ldr	r3, [pc, #460]	@ (8004e84 <StartTaskRxCommands+0xf6c>)
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	438a      	bics	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]

			// �?зменение скорости
			USART2->BRR = (SystemCoreClock + 12800) / sensor_inf.received_BDR;
 8004cbc:	4b72      	ldr	r3, [pc, #456]	@ (8004e88 <StartTaskRxCommands+0xf70>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	22c8      	movs	r2, #200	@ 0xc8
 8004cc2:	0192      	lsls	r2, r2, #6
 8004cc4:	189a      	adds	r2, r3, r2
 8004cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e80 <StartTaskRxCommands+0xf68>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4c6e      	ldr	r4, [pc, #440]	@ (8004e84 <StartTaskRxCommands+0xf6c>)
 8004ccc:	0019      	movs	r1, r3
 8004cce:	0010      	movs	r0, r2
 8004cd0:	f7fb fa36 	bl	8000140 <__udivsi3>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	60e3      	str	r3, [r4, #12]

			// Включаем USART обратно
			USART2->CR1 |= USART_CR1_UE;
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e84 <StartTaskRxCommands+0xf6c>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b69      	ldr	r3, [pc, #420]	@ (8004e84 <StartTaskRxCommands+0xf6c>)
 8004cde:	2101      	movs	r1, #1
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]

			taskENTER_CRITICAL();
 8004ce4:	f00c fe4c 	bl	8011980 <vPortEnterCritical>
			WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf),
 8004ce8:	4b68      	ldr	r3, [pc, #416]	@ (8004e8c <StartTaskRxCommands+0xf74>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b64      	ldr	r3, [pc, #400]	@ (8004e80 <StartTaskRxCommands+0xf68>)
 8004cee:	2108      	movs	r1, #8
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7fe fda5 	bl	8003840 <WriteDeviceAddressOffset>
					offset);
			taskEXIT_CRITICAL();
 8004cf6:	f00c fe55 	bl	80119a4 <vPortExitCritical>
			offset += sizeof(sensor_inf);
 8004cfa:	4b64      	ldr	r3, [pc, #400]	@ (8004e8c <StartTaskRxCommands+0xf74>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	001a      	movs	r2, r3
 8004d02:	4b62      	ldr	r3, [pc, #392]	@ (8004e8c <StartTaskRxCommands+0xf74>)
 8004d04:	601a      	str	r2, [r3, #0]
			//    memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 8004d06:	4b62      	ldr	r3, [pc, #392]	@ (8004e90 <StartTaskRxCommands+0xf78>)
 8004d08:	220b      	movs	r2, #11
 8004d0a:	701a      	strb	r2, [r3, #0]

		}

		if (terminal_parser_state == PARSER_IDN7) { // если посылка S0x;
 8004d0c:	4b60      	ldr	r3, [pc, #384]	@ (8004e90 <StartTaskRxCommands+0xf78>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d154      	bne.n	8004dbe <StartTaskRxCommands+0xea6>

			uint8_t flags = 0;
 8004d14:	207d      	movs	r0, #125	@ 0x7d
 8004d16:	2428      	movs	r4, #40	@ 0x28
 8004d18:	1903      	adds	r3, r0, r4
 8004d1a:	19db      	adds	r3, r3, r7
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 8004d20:	4b5c      	ldr	r3, [pc, #368]	@ (8004e94 <StartTaskRxCommands+0xf7c>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	0019      	movs	r1, r3
 8004d26:	1903      	adds	r3, r0, r4
 8004d28:	19db      	adds	r3, r3, r7
 8004d2a:	1902      	adds	r2, r0, r4
 8004d2c:	19d2      	adds	r2, r2, r7
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 8004d34:	4b58      	ldr	r3, [pc, #352]	@ (8004e98 <StartTaskRxCommands+0xf80>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	b25a      	sxtb	r2, r3
 8004d3c:	1903      	adds	r3, r0, r4
 8004d3e:	19db      	adds	r3, r3, r7
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	4313      	orrs	r3, r2
 8004d46:	b25a      	sxtb	r2, r3
 8004d48:	1903      	adds	r3, r0, r4
 8004d4a:	19db      	adds	r3, r3, r7
 8004d4c:	701a      	strb	r2, [r3, #0]
			if (is_error)
 8004d4e:	4b52      	ldr	r3, [pc, #328]	@ (8004e98 <StartTaskRxCommands+0xf80>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <StartTaskRxCommands+0xe44>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004d56:	4b50      	ldr	r3, [pc, #320]	@ (8004e98 <StartTaskRxCommands+0xf80>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
			if (IDN == 1) {
 8004d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004e9c <StartTaskRxCommands+0xf84>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d12c      	bne.n	8004dbe <StartTaskRxCommands+0xea6>
				uint8_t str_idn[50];
				memset(str_idn, 0, sizeof(str_idn));
 8004d64:	250c      	movs	r5, #12
 8004d66:	2628      	movs	r6, #40	@ 0x28
 8004d68:	19ab      	adds	r3, r5, r6
 8004d6a:	19db      	adds	r3, r3, r7
 8004d6c:	2232      	movs	r2, #50	@ 0x32
 8004d6e:	2100      	movs	r1, #0
 8004d70:	0018      	movs	r0, r3
 8004d72:	f00e fb3b 	bl	80133ec <memset>
				sprintf(str_idn, "CAS,BCA5/5kg     ,%d,P80\r\n", serial_number);
 8004d76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea0 <StartTaskRxCommands+0xf88>)
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	4949      	ldr	r1, [pc, #292]	@ (8004ea4 <StartTaskRxCommands+0xf8c>)
 8004d7e:	19ab      	adds	r3, r5, r6
 8004d80:	19db      	adds	r3, r3, r7
 8004d82:	0018      	movs	r0, r3
 8004d84:	f00e fa8e 	bl	80132a4 <siprintf>

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004d88:	4b47      	ldr	r3, [pc, #284]	@ (8004ea8 <StartTaskRxCommands+0xf90>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	2110      	movs	r1, #16
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f003 ffab 	bl	8008cea <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_idn,
 8004d94:	4b45      	ldr	r3, [pc, #276]	@ (8004eac <StartTaskRxCommands+0xf94>)
 8004d96:	681c      	ldr	r4, [r3, #0]
						strlen(str_idn));
 8004d98:	19ab      	adds	r3, r5, r6
 8004d9a:	19db      	adds	r3, r3, r7
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fb f9b3 	bl	8000108 <strlen>
 8004da2:	0003      	movs	r3, r0
				HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_idn,
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	19ab      	adds	r3, r5, r6
 8004da8:	19db      	adds	r3, r3, r7
 8004daa:	0019      	movs	r1, r3
 8004dac:	0020      	movs	r0, r4
 8004dae:	f007 ff77 	bl	800cca0 <HAL_UART_Transmit_IT>
				IDN = 0;
 8004db2:	4b3a      	ldr	r3, [pc, #232]	@ (8004e9c <StartTaskRxCommands+0xf84>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
				//		memset(receive_buf, 0, sizeof(receive_buf));
				terminal_parser_state = PARSER_EMPT;
 8004db8:	4b35      	ldr	r3, [pc, #212]	@ (8004e90 <StartTaskRxCommands+0xf78>)
 8004dba:	220b      	movs	r2, #11
 8004dbc:	701a      	strb	r2, [r3, #0]
				//debug("Transmit to terminal: <%x>", &str_idn);
			}
		}

		if (terminal_parser_state == PARSER_DEGREE) // запрос угла наклона B0x
 8004dbe:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <StartTaskRxCommands+0xf78>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d152      	bne.n	8004e6c <StartTaskRxCommands+0xf54>
				{
			uint8_t flags = 0;
 8004dc6:	207c      	movs	r0, #124	@ 0x7c
 8004dc8:	2428      	movs	r4, #40	@ 0x28
 8004dca:	1903      	adds	r3, r0, r4
 8004dcc:	19db      	adds	r3, r3, r7
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
			flags |= (case_opened << 0);
 8004dd2:	4b30      	ldr	r3, [pc, #192]	@ (8004e94 <StartTaskRxCommands+0xf7c>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	1903      	adds	r3, r0, r4
 8004dda:	19db      	adds	r3, r3, r7
 8004ddc:	1902      	adds	r2, r0, r4
 8004dde:	19d2      	adds	r2, r2, r7
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	701a      	strb	r2, [r3, #0]
			flags |= (is_error << 1);
 8004de6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e98 <StartTaskRxCommands+0xf80>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	b25a      	sxtb	r2, r3
 8004dee:	1903      	adds	r3, r0, r4
 8004df0:	19db      	adds	r3, r3, r7
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	4313      	orrs	r3, r2
 8004df8:	b25a      	sxtb	r2, r3
 8004dfa:	1903      	adds	r3, r0, r4
 8004dfc:	19db      	adds	r3, r3, r7
 8004dfe:	701a      	strb	r2, [r3, #0]
			if (is_error)
 8004e00:	4b25      	ldr	r3, [pc, #148]	@ (8004e98 <StartTaskRxCommands+0xf80>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <StartTaskRxCommands+0xef6>
				is_error = false; // сбрасываем флаг ошибки после отправки на терминал
 8004e08:	4b23      	ldr	r3, [pc, #140]	@ (8004e98 <StartTaskRxCommands+0xf80>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]

			char str_degree[50];
			memset(str_degree, 0, sizeof(str_degree));
 8004e0e:	240c      	movs	r4, #12
 8004e10:	2628      	movs	r6, #40	@ 0x28
 8004e12:	19a3      	adds	r3, r4, r6
 8004e14:	19db      	adds	r3, r3, r7
 8004e16:	2232      	movs	r2, #50	@ 0x32
 8004e18:	2100      	movs	r1, #0
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f00e fae6 	bl	80133ec <memset>
			sprintf(str_degree, "%f\r\n", config.degree);
 8004e20:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <StartTaskRxCommands+0xf98>)
 8004e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e24:	1c18      	adds	r0, r3, #0
 8004e26:	f7fe fabd 	bl	80033a4 <__aeabi_f2d>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	000b      	movs	r3, r1
 8004e2e:	4921      	ldr	r1, [pc, #132]	@ (8004eb4 <StartTaskRxCommands+0xf9c>)
 8004e30:	0025      	movs	r5, r4
 8004e32:	19a8      	adds	r0, r5, r6
 8004e34:	19c0      	adds	r0, r0, r7
 8004e36:	f00e fa35 	bl	80132a4 <siprintf>

			//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
			debug("Transmit to terminal: <%x>", &str_degree);
 8004e3a:	19ab      	adds	r3, r5, r6
 8004e3c:	19da      	adds	r2, r3, r7
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb8 <StartTaskRxCommands+0xfa0>)
 8004e40:	0011      	movs	r1, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f001 f8ac 	bl	8005fa0 <debug>
			HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_degree,
 8004e48:	4b18      	ldr	r3, [pc, #96]	@ (8004eac <StartTaskRxCommands+0xf94>)
 8004e4a:	681c      	ldr	r4, [r3, #0]
					strlen(str_degree));
 8004e4c:	19ab      	adds	r3, r5, r6
 8004e4e:	19db      	adds	r3, r3, r7
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fb f959 	bl	8000108 <strlen>
 8004e56:	0003      	movs	r3, r0
			HAL_UART_Transmit_IT(terminal_uart, (uint8_t*) str_degree,
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	19ab      	adds	r3, r5, r6
 8004e5c:	19db      	adds	r3, r3, r7
 8004e5e:	0019      	movs	r1, r3
 8004e60:	0020      	movs	r0, r4
 8004e62:	f007 ff1d 	bl	800cca0 <HAL_UART_Transmit_IT>
			//	memset(receive_buf, 0, sizeof(receive_buf));
			terminal_parser_state = PARSER_EMPT;
 8004e66:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <StartTaskRxCommands+0xf78>)
 8004e68:	220b      	movs	r2, #11
 8004e6a:	701a      	strb	r2, [r3, #0]
		}
		//memset(receive_buf, 0, sizeof(receive_buf));
		//receive(terminal_uart, receive_buf, 1);
		//receive(terminal_uart, RX_command_buff, 1);
		debug("Receive from task\r\n");
 8004e6c:	4b13      	ldr	r3, [pc, #76]	@ (8004ebc <StartTaskRxCommands+0xfa4>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f001 f896 	bl	8005fa0 <debug>
 8004e74:	f7ff f873 	bl	8003f5e <StartTaskRxCommands+0x46>
			continue;
 8004e78:	46c0      	nop			@ (mov r8, r8)
	for (;;) {
 8004e7a:	f7ff f870 	bl	8003f5e <StartTaskRxCommands+0x46>
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	200003a0 	.word	0x200003a0
 8004e84:	40004400 	.word	0x40004400
 8004e88:	20000068 	.word	0x20000068
 8004e8c:	200003ac 	.word	0x200003ac
 8004e90:	20000004 	.word	0x20000004
 8004e94:	200003b5 	.word	0x200003b5
 8004e98:	200003b4 	.word	0x200003b4
 8004e9c:	20000370 	.word	0x20000370
 8004ea0:	200003b0 	.word	0x200003b0
 8004ea4:	08017078 	.word	0x08017078
 8004ea8:	50000c00 	.word	0x50000c00
 8004eac:	20000070 	.word	0x20000070
 8004eb0:	20000008 	.word	0x20000008
 8004eb4:	08017094 	.word	0x08017094
 8004eb8:	08017054 	.word	0x08017054
 8004ebc:	0801709c 	.word	0x0801709c

08004ec0 <StartTaskAccelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAccelerometer */
void StartTaskAccelerometer(void *argument)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAccelerometer */
  /* Infinite loop */
	if(lis331dlh_init_spi(&config, ACCELEROMETER_SPI, ACCEL_CS_GPIO_Port, ACCEL_CS_Pin)) {
 8004ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f78 <StartTaskAccelerometer+0xb8>)
 8004eca:	6819      	ldr	r1, [r3, #0]
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	015b      	lsls	r3, r3, #5
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <StartTaskAccelerometer+0xbc>)
 8004ed2:	482b      	ldr	r0, [pc, #172]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004ed4:	f001 fdee 	bl	8006ab4 <lis331dlh_init_spi>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d001      	beq.n	8004ee0 <StartTaskAccelerometer+0x20>
		//debug("LIS331DLH DOESN'T WORK OR DOESN'T SOLDERED");
		HardFault_Handler();
 8004edc:	f002 fcf0 	bl	80078c0 <HardFault_Handler>
	}
	lis331dlh_update_config(&config);
 8004ee0:	4b27      	ldr	r3, [pc, #156]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f001 ff2b 	bl	8006d3e <lis331dlh_update_config>

//	lis331dlh_print_config(&config);
	// нахождение угла наклона
	find_degree(&config);
 8004ee8:	4b25      	ldr	r3, [pc, #148]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 fb22 	bl	8005534 <find_degree>

	while (1) {

		// проверка готовности
		lis331dlh_read_status(&config);
 8004ef0:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f001 ff53 	bl	8006d9e <lis331dlh_read_status>
		check_overrun(&config);
 8004ef8:	4b21      	ldr	r3, [pc, #132]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fc34 	bl	8005768 <check_overrun>

		if (is_measurement_ready(&config)) {
 8004f00:	4b1f      	ldr	r3, [pc, #124]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 fc4a 	bl	800579c <is_measurement_ready>
 8004f08:	1e03      	subs	r3, r0, #0
 8004f0a:	d00b      	beq.n	8004f24 <StartTaskAccelerometer+0x64>
			// обновление данных с датчика ускорения
			lis331dlh_update_accelaration(&config);
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f001 fe82 	bl	8006c18 <lis331dlh_update_accelaration>

			// сброс максимумом и минимумов по таймерам
			reset_move_maximums();
 8004f14:	f000 ff67 	bl	8005de6 <reset_move_maximums>
			reset_acceleration_maximums();
 8004f18:	f000 ff60 	bl	8005ddc <reset_acceleration_maximums>

			// алгоритм вычисления длины перемещений
			calc_length(&config);
 8004f1c:	4b18      	ldr	r3, [pc, #96]	@ (8004f80 <StartTaskAccelerometer+0xc0>)
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f000 fec0 	bl	8005ca4 <calc_length>
		}

		vTaskDelay(5);
 8004f24:	2005      	movs	r0, #5
 8004f26:	f00b fbef 	bl	8010708 <vTaskDelay>

		float maximum = round_and_limit_float(get_real_length());
 8004f2a:	f000 fcd7 	bl	80058dc <get_real_length>
 8004f2e:	1c03      	adds	r3, r0, #0
 8004f30:	1c18      	adds	r0, r3, #0
 8004f32:	f000 ffa9 	bl	8005e88 <round_and_limit_float>
 8004f36:	1c03      	adds	r3, r0, #0
 8004f38:	60fb      	str	r3, [r7, #12]

		float max_acceleration = round_and_limit_float(get_real_acc());
 8004f3a:	f000 fcff 	bl	800593c <get_real_acc>
 8004f3e:	1c03      	adds	r3, r0, #0
 8004f40:	1c18      	adds	r0, r3, #0
 8004f42:	f000 ffa1 	bl	8005e88 <round_and_limit_float>
 8004f46:	1c03      	adds	r3, r0, #0
 8004f48:	60bb      	str	r3, [r7, #8]
//			maximum_move_in_period = 0;
//			max_acceleration_in_period = 0;
		//	debug("\r\nTaskAccelerometer: Timer resetted. maximum_in_period = %f max_acceleration_in_period = %f \r\n", maximum_move_in_period, max_acceleration_in_period);
		}

		if(maximum > maximum_move_in_period) maximum_move_in_period = maximum;
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <StartTaskAccelerometer+0xc4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	1c19      	adds	r1, r3, #0
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7fb facf 	bl	80004f4 <__aeabi_fcmpgt>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d002      	beq.n	8004f60 <StartTaskAccelerometer+0xa0>
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <StartTaskAccelerometer+0xc4>)
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]
		if(max_acceleration > max_acceleration_in_period) max_acceleration_in_period = max_acceleration;
 8004f60:	4b09      	ldr	r3, [pc, #36]	@ (8004f88 <StartTaskAccelerometer+0xc8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	1c19      	adds	r1, r3, #0
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	f7fb fac4 	bl	80004f4 <__aeabi_fcmpgt>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d002      	beq.n	8004f76 <StartTaskAccelerometer+0xb6>
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <StartTaskAccelerometer+0xc8>)
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	601a      	str	r2, [r3, #0]
	while (1) {
 8004f76:	e7bb      	b.n	8004ef0 <StartTaskAccelerometer+0x30>
 8004f78:	20000064 	.word	0x20000064
 8004f7c:	50000400 	.word	0x50000400
 8004f80:	20000008 	.word	0x20000008
 8004f84:	200003b8 	.word	0x200003b8
 8004f88:	200003bc 	.word	0x200003bc

08004f8c <StartSensorsPolling>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsPolling */
void StartSensorsPolling(void *argument)
{
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsPolling */
 /* Infinite loop */

	//vTaskDelay(200);
	taskENTER_CRITICAL();
 8004f94:	f00c fcf4 	bl	8011980 <vPortEnterCritical>
	if(!hdc1080_init(SENSORS_I2C, HDC_config.temperature_resolution, HDC_config.humidity_resolution)) {
 8004f98:	4b2f      	ldr	r3, [pc, #188]	@ (8005058 <StartSensorsPolling+0xcc>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800505c <StartSensorsPolling+0xd0>)
 8004f9e:	7819      	ldrb	r1, [r3, #0]
 8004fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800505c <StartSensorsPolling+0xd0>)
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	f001 fa95 	bl	80064d4 <hdc1080_init>
 8004faa:	0003      	movs	r3, r0
 8004fac:	001a      	movs	r2, r3
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4053      	eors	r3, r2
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <StartSensorsPolling+0x30>
		//debug("HDC1080 DOESN'T WORK OR DOESN'T SOLDERED");
		HardFault_Handler();
 8004fb8:	f002 fc82 	bl	80078c0 <HardFault_Handler>
	}

	if(!lps22hb_init(SENSORS_I2C)) {
 8004fbc:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <StartSensorsPolling+0xcc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f001 ff61 	bl	8006e88 <lps22hb_init>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	001a      	movs	r2, r3
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4053      	eors	r3, r2
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <StartSensorsPolling+0x4c>
		//debug("LPS22HB DOESN'T WORK OR DOESN'T SOLDERED");
		HardFault_Handler();
 8004fd4:	f002 fc74 	bl	80078c0 <HardFault_Handler>
	}
	taskEXIT_CRITICAL();
 8004fd8:	f00c fce4 	bl	80119a4 <vPortExitCritical>
			osDelay(200);
 8004fdc:	20c8      	movs	r0, #200	@ 0xc8
 8004fde:	f00a fbb0 	bl	800f742 <osDelay>

	for (;;) {

		uint8_t status = lps22hb_get_status(&config);
 8004fe2:	250f      	movs	r5, #15
 8004fe4:	197c      	adds	r4, r7, r5
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <StartSensorsPolling+0xd4>)
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f001 ffbd 	bl	8006f68 <lps22hb_get_status>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	7023      	strb	r3, [r4, #0]
		lps22hb_check_pressure_overrun(status);
 8004ff2:	002c      	movs	r4, r5
 8004ff4:	193b      	adds	r3, r7, r4
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f001 ffc7 	bl	8006f8c <lps22hb_check_pressure_overrun>
		lps22hb_check_temperature_overrun(status);
 8004ffe:	193b      	adds	r3, r7, r4
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	0018      	movs	r0, r3
 8005004:	f001 ffe6 	bl	8006fd4 <lps22hb_check_temperature_overrun>

		if (lps22hb_check_pressure_data_available(status) && lps22hb_check_temperature_data_available(status))
 8005008:	193b      	adds	r3, r7, r4
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	0018      	movs	r0, r3
 800500e:	f002 f805 	bl	800701c <lps22hb_check_pressure_data_available>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d01c      	beq.n	8005050 <StartSensorsPolling+0xc4>
 8005016:	193b      	adds	r3, r7, r4
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	0018      	movs	r0, r3
 800501c:	f002 f80f 	bl	800703e <lps22hb_check_temperature_data_available>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d015      	beq.n	8005050 <StartSensorsPolling+0xc4>
		{
			hdc1080_start_measurement(&HDC_config.last_temperature, &HDC_config.last_humidity);
 8005024:	4a0f      	ldr	r2, [pc, #60]	@ (8005064 <StartSensorsPolling+0xd8>)
 8005026:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <StartSensorsPolling+0xdc>)
 8005028:	0011      	movs	r1, r2
 800502a:	0018      	movs	r0, r3
 800502c:	f001 fac4 	bl	80065b8 <hdc1080_start_measurement>
						//debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
//								HDC_config.last_temperature,
//								HDC_config.last_humidity);

						LPS_data.last_pressure = lps22hb_read_pressure();
 8005030:	f002 f816 	bl	8007060 <lps22hb_read_pressure>
 8005034:	1c02      	adds	r2, r0, #0
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <StartSensorsPolling+0xe0>)
 8005038:	605a      	str	r2, [r3, #4]
						LPS_data.last_temperature = lps22hb_read_temperature();
 800503a:	f002 f879 	bl	8007130 <lps22hb_read_temperature>
 800503e:	1c02      	adds	r2, r0, #0
 8005040:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <StartSensorsPolling+0xe0>)
 8005042:	601a      	str	r2, [r3, #0]
//			LPS_data.last_temperature = lps22hb_read_temperature();
//			debug("LPS22HB RAW TEMP: 0x%4x RAW PRESSURE: 0x%4x\r\n",
//					LPS_data.last_temperature,
//					LPS_data.last_pressure);

			vTaskDelay(1000);
 8005044:	23fa      	movs	r3, #250	@ 0xfa
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	0018      	movs	r0, r3
 800504a:	f00b fb5d 	bl	8010708 <vTaskDelay>
 800504e:	e002      	b.n	8005056 <StartSensorsPolling+0xca>
//														HAL_UART_Transmit (&huart3, last_temperatureLps_prin, len4, 100);


		}
		else {
			vTaskDelay(10);
 8005050:	200a      	movs	r0, #10
 8005052:	f00b fb59 	bl	8010708 <vTaskDelay>
	for (;;) {
 8005056:	e7c4      	b.n	8004fe2 <StartSensorsPolling+0x56>
 8005058:	20000060 	.word	0x20000060
 800505c:	20000394 	.word	0x20000394
 8005060:	20000008 	.word	0x20000008
 8005064:	2000039c 	.word	0x2000039c
 8005068:	20000398 	.word	0x20000398
 800506c:	2000038c 	.word	0x2000038c

08005070 <StartADS1232Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADS1232Task */
void StartADS1232Task(void *argument)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADS1232Task */
  /* Infinite loop */

	HAL_TIM_Base_Start_IT(&htim2);
 8005078:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <StartADS1232Task+0x28>)
 800507a:	0018      	movs	r0, r3
 800507c:	f007 f90c 	bl	800c298 <HAL_TIM_Base_Start_IT>
	Start_read(&htim2, TIM2);
 8005080:	2380      	movs	r3, #128	@ 0x80
 8005082:	05da      	lsls	r2, r3, #23
 8005084:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <StartADS1232Task+0x28>)
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f7fe fb5d 	bl	8003748 <Start_read>

  for(;;)
  {
	 // Start_read(&htim2, TIM2);
	      vTaskDelay(100);
 800508e:	2064      	movs	r0, #100	@ 0x64
 8005090:	f00b fb3a 	bl	8010708 <vTaskDelay>
 8005094:	e7fb      	b.n	800508e <StartADS1232Task+0x1e>
 8005096:	46c0      	nop			@ (mov r8, r8)
 8005098:	200026a8 	.word	0x200026a8

0800509c <maximumsPeriodTimer_callback>:
  /* USER CODE END StartADS1232Task */
}

/* maximumsPeriodTimer_callback function */
void maximumsPeriodTimer_callback(void *argument)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN maximumsPeriodTimer_callback */
	//debug("\r\n===Timer 10 minutes: reloaded===\r\n");
	period_expired = true;
 80050a4:	4b03      	ldr	r3, [pc, #12]	@ (80050b4 <maximumsPeriodTimer_callback+0x18>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END maximumsPeriodTimer_callback */
}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	200003b6 	.word	0x200003b6

080050b8 <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {//Callback-функция завершения приема данных
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

	//BaseType_t xHigherPriorityTaskWoken;
	//xHigherPriorityTaskWoken = pdFALSE;

	if (huart == &huart2) {
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4ba4      	ldr	r3, [pc, #656]	@ (8005354 <HAL_UART_RxCpltCallback+0x29c>)
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d000      	beq.n	80050ca <HAL_UART_RxCpltCallback+0x12>
 80050c8:	e13f      	b.n	800534a <HAL_UART_RxCpltCallback+0x292>

//			if (RX_command_buff[0] == 0){
//				osDelay(1);
//			}

		if ((RX_command_buff[0] == 'S' || RX_command_buff[0] == 'M'
 80050ca:	4ba3      	ldr	r3, [pc, #652]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b53      	cmp	r3, #83	@ 0x53
 80050d0:	d00f      	beq.n	80050f2 <HAL_UART_RxCpltCallback+0x3a>
 80050d2:	4ba1      	ldr	r3, [pc, #644]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b4d      	cmp	r3, #77	@ 0x4d
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_RxCpltCallback+0x3a>
				|| RX_command_buff[0] == 'I' || RX_command_buff[0] == 'B'
 80050da:	4b9f      	ldr	r3, [pc, #636]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b49      	cmp	r3, #73	@ 0x49
 80050e0:	d007      	beq.n	80050f2 <HAL_UART_RxCpltCallback+0x3a>
 80050e2:	4b9d      	ldr	r3, [pc, #628]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b42      	cmp	r3, #66	@ 0x42
 80050e8:	d003      	beq.n	80050f2 <HAL_UART_RxCpltCallback+0x3a>
				|| RX_command_buff[0] == 'A') && RX_command_count == 0) {
 80050ea:	4b9b      	ldr	r3, [pc, #620]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b41      	cmp	r3, #65	@ 0x41
 80050f0:	d10f      	bne.n	8005112 <HAL_UART_RxCpltCallback+0x5a>
 80050f2:	4b9a      	ldr	r3, [pc, #616]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_RxCpltCallback+0x5a>
			received_command[RX_command_count] = RX_command_buff[0];
 80050fa:	4b98      	ldr	r3, [pc, #608]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a96      	ldr	r2, [pc, #600]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 8005100:	7811      	ldrb	r1, [r2, #0]
 8005102:	4a97      	ldr	r2, [pc, #604]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005104:	54d1      	strb	r1, [r2, r3]
			RX_command_count = RX_command_count + 1;
 8005106:	4b95      	ldr	r3, [pc, #596]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	4b93      	ldr	r3, [pc, #588]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e105      	b.n	800531e <HAL_UART_RxCpltCallback+0x266>
		} else if (RX_command_buff[0] != ';' && RX_command_count != 0
 8005112:	4b91      	ldr	r3, [pc, #580]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b3b      	cmp	r3, #59	@ 0x3b
 8005118:	d013      	beq.n	8005142 <HAL_UART_RxCpltCallback+0x8a>
 800511a:	4b90      	ldr	r3, [pc, #576]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00f      	beq.n	8005142 <HAL_UART_RxCpltCallback+0x8a>
				&& RX_command_count <= 17) {
 8005122:	4b8e      	ldr	r3, [pc, #568]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b11      	cmp	r3, #17
 8005128:	dc0b      	bgt.n	8005142 <HAL_UART_RxCpltCallback+0x8a>
			received_command[RX_command_count] = RX_command_buff[0];
 800512a:	4b8c      	ldr	r3, [pc, #560]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a8a      	ldr	r2, [pc, #552]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 8005130:	7811      	ldrb	r1, [r2, #0]
 8005132:	4a8b      	ldr	r2, [pc, #556]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005134:	54d1      	strb	r1, [r2, r3]
			RX_command_count = RX_command_count + 1;
 8005136:	4b89      	ldr	r3, [pc, #548]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	4b87      	ldr	r3, [pc, #540]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e0ed      	b.n	800531e <HAL_UART_RxCpltCallback+0x266>
		} else if (RX_command_buff[0] == ';' && RX_command_count != 0) {
 8005142:	4b85      	ldr	r3, [pc, #532]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b3b      	cmp	r3, #59	@ 0x3b
 8005148:	d000      	beq.n	800514c <HAL_UART_RxCpltCallback+0x94>
 800514a:	e0e8      	b.n	800531e <HAL_UART_RxCpltCallback+0x266>
 800514c:	4b83      	ldr	r3, [pc, #524]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d100      	bne.n	8005156 <HAL_UART_RxCpltCallback+0x9e>
 8005154:	e0e3      	b.n	800531e <HAL_UART_RxCpltCallback+0x266>
			received_command[RX_command_count] = RX_command_buff[0];
 8005156:	4b81      	ldr	r3, [pc, #516]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a7f      	ldr	r2, [pc, #508]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 800515c:	7811      	ldrb	r1, [r2, #0]
 800515e:	4a80      	ldr	r2, [pc, #512]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005160:	54d1      	strb	r1, [r2, r3]
			RX_command_count = 0;
 8005162:	4b7e      	ldr	r3, [pc, #504]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

			if (received_command[0] == 'S') {
 8005168:	4b7d      	ldr	r3, [pc, #500]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b53      	cmp	r3, #83	@ 0x53
 800516e:	d139      	bne.n	80051e4 <HAL_UART_RxCpltCallback+0x12c>

				//if (received_command[1]=='4'&&received_command[2]==platform_number.number_ch){
				if (received_command[1] == '4') {
 8005170:	4b7b      	ldr	r3, [pc, #492]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b34      	cmp	r3, #52	@ 0x34
 8005176:	d103      	bne.n	8005180 <HAL_UART_RxCpltCallback+0xc8>

					terminal_parser_state = PARSER_S4x;
 8005178:	4b7a      	ldr	r3, [pc, #488]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e0be      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>

				} else if (received_command[1] == '3') {
 8005180:	4b77      	ldr	r3, [pc, #476]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b33      	cmp	r3, #51	@ 0x33
 8005186:	d103      	bne.n	8005190 <HAL_UART_RxCpltCallback+0xd8>

					terminal_parser_state = PARSER_S3x;
 8005188:	4b76      	ldr	r3, [pc, #472]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e0b6      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>

				} else if (received_command[1] == sensor_inf.platform_adr[0]
 8005190:	4b73      	ldr	r3, [pc, #460]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005192:	785a      	ldrb	r2, [r3, #1]
 8005194:	4b74      	ldr	r3, [pc, #464]	@ (8005368 <HAL_UART_RxCpltCallback+0x2b0>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d109      	bne.n	80051b0 <HAL_UART_RxCpltCallback+0xf8>
						&& (received_command[2] == (sensor_inf.platform_adr[1]))) {
 800519c:	4b70      	ldr	r3, [pc, #448]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800519e:	789a      	ldrb	r2, [r3, #2]
 80051a0:	4b71      	ldr	r3, [pc, #452]	@ (8005368 <HAL_UART_RxCpltCallback+0x2b0>)
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d103      	bne.n	80051b0 <HAL_UART_RxCpltCallback+0xf8>

					terminal_parser_state = PARSER_Sxx;
 80051a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 80051aa:	2202      	movs	r2, #2
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e0a6      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
				} else if (received_command[1] == '9'
 80051b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b39      	cmp	r3, #57	@ 0x39
 80051b6:	d107      	bne.n	80051c8 <HAL_UART_RxCpltCallback+0x110>
						&& received_command[2] == '8') {
 80051b8:	4b69      	ldr	r3, [pc, #420]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	2b38      	cmp	r3, #56	@ 0x38
 80051be:	d103      	bne.n	80051c8 <HAL_UART_RxCpltCallback+0x110>

					terminal_parser_state = PARSER_S98; //(Ничего не отвечаем)
 80051c0:	4b68      	ldr	r3, [pc, #416]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 80051c2:	2203      	movs	r2, #3
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e09a      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
				} else if (received_command[1] == 'T'
 80051c8:	4b65      	ldr	r3, [pc, #404]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	2b54      	cmp	r3, #84	@ 0x54
 80051ce:	d000      	beq.n	80051d2 <HAL_UART_RxCpltCallback+0x11a>
 80051d0:	e095      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
						&& received_command[2] == 'P') {
 80051d2:	4b63      	ldr	r3, [pc, #396]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051d4:	789b      	ldrb	r3, [r3, #2]
 80051d6:	2b50      	cmp	r3, #80	@ 0x50
 80051d8:	d000      	beq.n	80051dc <HAL_UART_RxCpltCallback+0x124>
 80051da:	e090      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>

					terminal_parser_state = PARSER_STP; //(становка передачи сбрасываем MSV?0)
 80051dc:	4b61      	ldr	r3, [pc, #388]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 80051de:	220a      	movs	r2, #10
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e08c      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
				}
			} else if (received_command[0] == 'M' && received_command[1] == 'S'
 80051e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b4d      	cmp	r3, #77	@ 0x4d
 80051ea:	d113      	bne.n	8005214 <HAL_UART_RxCpltCallback+0x15c>
 80051ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b53      	cmp	r3, #83	@ 0x53
 80051f2:	d10f      	bne.n	8005214 <HAL_UART_RxCpltCallback+0x15c>
					&& received_command[2] == 'V' && received_command[3] == '?'
 80051f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	2b56      	cmp	r3, #86	@ 0x56
 80051fa:	d10b      	bne.n	8005214 <HAL_UART_RxCpltCallback+0x15c>
 80051fc:	4b58      	ldr	r3, [pc, #352]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b3f      	cmp	r3, #63	@ 0x3f
 8005202:	d107      	bne.n	8005214 <HAL_UART_RxCpltCallback+0x15c>
					&& received_command[4] == '0') {
 8005204:	4b56      	ldr	r3, [pc, #344]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	2b30      	cmp	r3, #48	@ 0x30
 800520a:	d103      	bne.n	8005214 <HAL_UART_RxCpltCallback+0x15c>

				terminal_parser_state = PARSER_MSV70;
 800520c:	4b55      	ldr	r3, [pc, #340]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 800520e:	2204      	movs	r2, #4
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e074      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
			} else if (received_command[0] == 'M' && received_command[1] == 'S'
 8005214:	4b52      	ldr	r3, [pc, #328]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b4d      	cmp	r3, #77	@ 0x4d
 800521a:	d113      	bne.n	8005244 <HAL_UART_RxCpltCallback+0x18c>
 800521c:	4b50      	ldr	r3, [pc, #320]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b53      	cmp	r3, #83	@ 0x53
 8005222:	d10f      	bne.n	8005244 <HAL_UART_RxCpltCallback+0x18c>
					&& received_command[2] == 'V' && received_command[3] == '?'
 8005224:	4b4e      	ldr	r3, [pc, #312]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005226:	789b      	ldrb	r3, [r3, #2]
 8005228:	2b56      	cmp	r3, #86	@ 0x56
 800522a:	d10b      	bne.n	8005244 <HAL_UART_RxCpltCallback+0x18c>
 800522c:	4b4c      	ldr	r3, [pc, #304]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800522e:	78db      	ldrb	r3, [r3, #3]
 8005230:	2b3f      	cmp	r3, #63	@ 0x3f
 8005232:	d107      	bne.n	8005244 <HAL_UART_RxCpltCallback+0x18c>
					&& received_command[4] != '0') {
 8005234:	4b4a      	ldr	r3, [pc, #296]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	2b30      	cmp	r3, #48	@ 0x30
 800523a:	d003      	beq.n	8005244 <HAL_UART_RxCpltCallback+0x18c>

				terminal_parser_state = PARSER_MSV7;
 800523c:	4b49      	ldr	r3, [pc, #292]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 800523e:	2206      	movs	r2, #6
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e05c      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
			} else if (received_command[0] == 'I' && received_command[1] == 'D'
 8005244:	4b46      	ldr	r3, [pc, #280]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b49      	cmp	r3, #73	@ 0x49
 800524a:	d10f      	bne.n	800526c <HAL_UART_RxCpltCallback+0x1b4>
 800524c:	4b44      	ldr	r3, [pc, #272]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b44      	cmp	r3, #68	@ 0x44
 8005252:	d10b      	bne.n	800526c <HAL_UART_RxCpltCallback+0x1b4>
					&& received_command[2] == 'N'
 8005254:	4b42      	ldr	r3, [pc, #264]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005256:	789b      	ldrb	r3, [r3, #2]
 8005258:	2b4e      	cmp	r3, #78	@ 0x4e
 800525a:	d107      	bne.n	800526c <HAL_UART_RxCpltCallback+0x1b4>
					&& received_command[3] == '?') {
 800525c:	4b40      	ldr	r3, [pc, #256]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800525e:	78db      	ldrb	r3, [r3, #3]
 8005260:	2b3f      	cmp	r3, #63	@ 0x3f
 8005262:	d103      	bne.n	800526c <HAL_UART_RxCpltCallback+0x1b4>

				terminal_parser_state = PARSER_IDN7;
 8005264:	4b3f      	ldr	r3, [pc, #252]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 8005266:	2207      	movs	r2, #7
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e048      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
			} else if (received_command[0] == 'A' && received_command[1] == 'D'
 800526c:	4b3c      	ldr	r3, [pc, #240]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b41      	cmp	r3, #65	@ 0x41
 8005272:	d10f      	bne.n	8005294 <HAL_UART_RxCpltCallback+0x1dc>
 8005274:	4b3a      	ldr	r3, [pc, #232]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b44      	cmp	r3, #68	@ 0x44
 800527a:	d10b      	bne.n	8005294 <HAL_UART_RxCpltCallback+0x1dc>
					&& received_command[2] == 'R'
 800527c:	4b38      	ldr	r3, [pc, #224]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800527e:	789b      	ldrb	r3, [r3, #2]
 8005280:	2b52      	cmp	r3, #82	@ 0x52
 8005282:	d107      	bne.n	8005294 <HAL_UART_RxCpltCallback+0x1dc>
					&& received_command[3] == '?') {
 8005284:	4b36      	ldr	r3, [pc, #216]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	2b3f      	cmp	r3, #63	@ 0x3f
 800528a:	d103      	bne.n	8005294 <HAL_UART_RxCpltCallback+0x1dc>

				terminal_parser_state = PARSER_ADR7;
 800528c:	4b35      	ldr	r3, [pc, #212]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 800528e:	2208      	movs	r2, #8
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e034      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
			} else if (received_command[0] == 'A' && received_command[1] == 'D'
 8005294:	4b32      	ldr	r3, [pc, #200]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b41      	cmp	r3, #65	@ 0x41
 800529a:	d10f      	bne.n	80052bc <HAL_UART_RxCpltCallback+0x204>
 800529c:	4b30      	ldr	r3, [pc, #192]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b44      	cmp	r3, #68	@ 0x44
 80052a2:	d10b      	bne.n	80052bc <HAL_UART_RxCpltCallback+0x204>
					&& received_command[2] == 'R'
 80052a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052a6:	789b      	ldrb	r3, [r3, #2]
 80052a8:	2b52      	cmp	r3, #82	@ 0x52
 80052aa:	d107      	bne.n	80052bc <HAL_UART_RxCpltCallback+0x204>
					&& received_command[3] != '?') {
 80052ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80052b2:	d003      	beq.n	80052bc <HAL_UART_RxCpltCallback+0x204>

				terminal_parser_state = PARSER_ADRNUM;
 80052b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 80052b6:	2209      	movs	r2, #9
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e020      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
			} else if (received_command[0] == 'B' && received_command[1] == 'D'
 80052bc:	4b28      	ldr	r3, [pc, #160]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b42      	cmp	r3, #66	@ 0x42
 80052c2:	d10b      	bne.n	80052dc <HAL_UART_RxCpltCallback+0x224>
 80052c4:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b44      	cmp	r3, #68	@ 0x44
 80052ca:	d107      	bne.n	80052dc <HAL_UART_RxCpltCallback+0x224>
					&& received_command[2] == 'R') {
 80052cc:	4b24      	ldr	r3, [pc, #144]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	2b52      	cmp	r3, #82	@ 0x52
 80052d2:	d103      	bne.n	80052dc <HAL_UART_RxCpltCallback+0x224>

				terminal_parser_state = PARSER_BDR;
 80052d4:	4b23      	ldr	r3, [pc, #140]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 80052d6:	2205      	movs	r2, #5
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e010      	b.n	80052fe <HAL_UART_RxCpltCallback+0x246>
			} else if (received_command[0] == 'B' && received_command[1] == '0'
 80052dc:	4b20      	ldr	r3, [pc, #128]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b42      	cmp	r3, #66	@ 0x42
 80052e2:	d10c      	bne.n	80052fe <HAL_UART_RxCpltCallback+0x246>
 80052e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b30      	cmp	r3, #48	@ 0x30
 80052ea:	d108      	bne.n	80052fe <HAL_UART_RxCpltCallback+0x246>
					&& received_command[2] == platform_number.number_ch) {
 80052ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 80052ee:	789a      	ldrb	r2, [r3, #2]
 80052f0:	4b1e      	ldr	r3, [pc, #120]	@ (800536c <HAL_UART_RxCpltCallback+0x2b4>)
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d102      	bne.n	80052fe <HAL_UART_RxCpltCallback+0x246>

				terminal_parser_state = PARSER_DEGREE;
 80052f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 80052fa:	220c      	movs	r2, #12
 80052fc:	701a      	strb	r2, [r3, #0]
			}

			RX_command_count = 0;
 80052fe:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_UART_RxCpltCallback+0x2a4>)
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
			//	RX_command_buff[0] = 0;
			//vTaskNotifyGiveFromISR( rxCommandsTaskHandle, &xHigherPriorityTaskWoken );
			xQueueSendToBack(g_mesQueue, received_command, 0);
 8005304:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <HAL_UART_RxCpltCallback+0x2b8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4915      	ldr	r1, [pc, #84]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 800530a:	2300      	movs	r3, #0
 800530c:	2200      	movs	r2, #0
 800530e:	f00a fcd8 	bl	800fcc2 <xQueueGenericSend>
			memset(received_command, 0, sizeof(received_command));
 8005312:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <HAL_UART_RxCpltCallback+0x2a8>)
 8005314:	2216      	movs	r2, #22
 8005316:	2100      	movs	r1, #0
 8005318:	0018      	movs	r0, r3
 800531a:	f00e f867 	bl	80133ec <memset>
		}
		extended_debug("New state = %d\r\n", terminal_parser_state);
 800531e:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <HAL_UART_RxCpltCallback+0x2ac>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	001a      	movs	r2, r3
 8005324:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <HAL_UART_RxCpltCallback+0x2bc>)
 8005326:	0011      	movs	r1, r2
 8005328:	0018      	movs	r0, r3
 800532a:	f000 fead 	bl	8006088 <extended_debug>
		RX_command_buff[0] = 0;
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(terminal_uart, RX_command_buff, 1);
 8005334:	4b10      	ldr	r3, [pc, #64]	@ (8005378 <HAL_UART_RxCpltCallback+0x2c0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4907      	ldr	r1, [pc, #28]	@ (8005358 <HAL_UART_RxCpltCallback+0x2a0>)
 800533a:	2201      	movs	r2, #1
 800533c:	0018      	movs	r0, r3
 800533e:	f007 fd57 	bl	800cdf0 <HAL_UART_Receive_IT>
		extended_debug("Receive from handler\r\n");
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <HAL_UART_RxCpltCallback+0x2c4>)
 8005344:	0018      	movs	r0, r3
 8005346:	f000 fe9f 	bl	8006088 <extended_debug>
	}

}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b002      	add	sp, #8
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	20002788 	.word	0x20002788
 8005358:	20000374 	.word	0x20000374
 800535c:	20000378 	.word	0x20000378
 8005360:	20000354 	.word	0x20000354
 8005364:	20000004 	.word	0x20000004
 8005368:	200003a0 	.word	0x200003a0
 800536c:	20000050 	.word	0x20000050
 8005370:	200003c0 	.word	0x200003c0
 8005374:	080170b0 	.word	0x080170b0
 8005378:	20000070 	.word	0x20000070
 800537c:	080170c4 	.word	0x080170c4

08005380 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения передачи данных
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 ) {
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <HAL_UART_TxCpltCallback+0x34>)
 800538c:	429a      	cmp	r2, r3
 800538e:	d105      	bne.n	800539c <HAL_UART_TxCpltCallback+0x1c>
		//osDelay(1);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8005390:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <HAL_UART_TxCpltCallback+0x38>)
 8005392:	2200      	movs	r2, #0
 8005394:	2110      	movs	r1, #16
 8005396:	0018      	movs	r0, r3
 8005398:	f003 fca7 	bl	8008cea <HAL_GPIO_WritePin>
	}
	if (huart == debug_uart) {
 800539c:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <HAL_UART_TxCpltCallback+0x3c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d101      	bne.n	80053aa <HAL_UART_TxCpltCallback+0x2a>
		reset_debug_variables();
 80053a6:	f000 fd97 	bl	8005ed8 <reset_debug_variables>
	}
}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b002      	add	sp, #8
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	20002788 	.word	0x20002788
 80053b8:	50000c00 	.word	0x50000c00
 80053bc:	2000006c 	.word	0x2000006c

080053c0 <check_errors>:

void check_errors() {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xBBBB){
 80053c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005444 <check_errors+0x84>)
 80053c6:	2100      	movs	r1, #0
 80053c8:	0018      	movs	r0, r3
 80053ca:	f005 ffd2 	bl	800b372 <HAL_RTCEx_BKUPRead>
 80053ce:	0003      	movs	r3, r0
 80053d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005448 <check_errors+0x88>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d114      	bne.n	8005400 <check_errors+0x40>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80053d6:	4b1d      	ldr	r3, [pc, #116]	@ (800544c <check_errors+0x8c>)
 80053d8:	2201      	movs	r2, #1
 80053da:	2104      	movs	r1, #4
 80053dc:	0018      	movs	r0, r3
 80053de:	f003 fc84 	bl	8008cea <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 80053e2:	f004 ff23 	bl	800a22c <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 80053e6:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <check_errors+0x84>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	0018      	movs	r0, r3
 80053ee:	f005 ffa3 	bl	800b338 <HAL_RTCEx_BKUPWrite>
		is_error = true;
 80053f2:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <check_errors+0x90>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: HardFault ====================\r\n");
 80053f8:	4b16      	ldr	r3, [pc, #88]	@ (8005454 <check_errors+0x94>)
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fdd0 	bl	8005fa0 <debug>
	}

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xAAAA){
 8005400:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <check_errors+0x84>)
 8005402:	2100      	movs	r1, #0
 8005404:	0018      	movs	r0, r3
 8005406:	f005 ffb4 	bl	800b372 <HAL_RTCEx_BKUPRead>
 800540a:	0003      	movs	r3, r0
 800540c:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <check_errors+0x98>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d114      	bne.n	800543c <check_errors+0x7c>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8005412:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <check_errors+0x8c>)
 8005414:	2201      	movs	r2, #1
 8005416:	2104      	movs	r1, #4
 8005418:	0018      	movs	r0, r3
 800541a:	f003 fc66 	bl	8008cea <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 800541e:	f004 ff05 	bl	800a22c <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8005422:	4b08      	ldr	r3, [pc, #32]	@ (8005444 <check_errors+0x84>)
 8005424:	2200      	movs	r2, #0
 8005426:	2100      	movs	r1, #0
 8005428:	0018      	movs	r0, r3
 800542a:	f005 ff85 	bl	800b338 <HAL_RTCEx_BKUPWrite>
		is_error = true;
 800542e:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <check_errors+0x90>)
 8005430:	2201      	movs	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: ErrorHandler ====================\r\n");
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <check_errors+0x9c>)
 8005436:	0018      	movs	r0, r3
 8005438:	f000 fdb2 	bl	8005fa0 <debug>
	}
}
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	20002518 	.word	0x20002518
 8005448:	0000bbbb 	.word	0x0000bbbb
 800544c:	50000c00 	.word	0x50000c00
 8005450:	200003b4 	.word	0x200003b4
 8005454:	080170dc 	.word	0x080170dc
 8005458:	0000aaaa 	.word	0x0000aaaa
 800545c:	08017124 	.word	0x08017124

08005460 <ADS_Callback>:
void ADS_Callback(uint32_t value){
 8005460:	b580      	push	{r7, lr}
 8005462:	b090      	sub	sp, #64	@ 0x40
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

	 ads_val = value;
 8005468:	4b08      	ldr	r3, [pc, #32]	@ (800548c <ADS_Callback+0x2c>)
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
		char ADS_val_prin[50]; //size of the number
		int len5 =  sprintf(ADS_val_prin, "ADS_VAL: %d\n\r", ads_val);
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <ADS_Callback+0x2c>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4907      	ldr	r1, [pc, #28]	@ (8005490 <ADS_Callback+0x30>)
 8005474:	2308      	movs	r3, #8
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	0018      	movs	r0, r3
 800547a:	f00d ff13 	bl	80132a4 <siprintf>
 800547e:	0003      	movs	r3, r0
 8005480:	63fb      	str	r3, [r7, #60]	@ 0x3c

		//HAL_UART_Transmit (&huart3, ADS_val_prin, len5, 100);

}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	46bd      	mov	sp, r7
 8005486:	b010      	add	sp, #64	@ 0x40
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	2000036c 	.word	0x2000036c
 8005490:	0801716c 	.word	0x0801716c

08005494 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	1c18      	adds	r0, r3, #0
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}

080054aa <_ZSt4fmaxff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	1c11      	adds	r1, r2, #0
 80054ba:	1c18      	adds	r0, r3, #0
 80054bc:	f00c fd5e 	bl	8011f7c <fmaxf>
 80054c0:	1c03      	adds	r3, r0, #0
 80054c2:	1c18      	adds	r0, r3, #0
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b002      	add	sp, #8
 80054c8:	bd80      	pop	{r7, pc}

080054ca <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1c11      	adds	r1, r2, #0
 80054da:	1c18      	adds	r0, r3, #0
 80054dc:	f00c fd64 	bl	8011fa8 <fminf>
 80054e0:	1c03      	adds	r3, r0, #0
 80054e2:	1c18      	adds	r0, r3, #0
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b002      	add	sp, #8
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <_Z21get_acceleration_dataP11lis331dlh_t>:
// поправочный коэффициент на наклон
float incline_factor = 0;


// функция получения ускорения по рабочей оси
int32_t get_acceleration_data(lis331dlh_t * config) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

	if(config->axis_select_x_z == AXIS_X) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7d1b      	ldrb	r3, [r3, #20]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d102      	bne.n	8005502 <_Z21get_acceleration_dataP11lis331dlh_t+0x16>
		return config->accelarations.x;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	e012      	b.n	8005528 <_Z21get_acceleration_dataP11lis331dlh_t+0x3c>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7d1b      	ldrb	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <_Z21get_acceleration_dataP11lis331dlh_t+0x24>
		return config->accelarations.z;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	e00b      	b.n	8005528 <_Z21get_acceleration_dataP11lis331dlh_t+0x3c>
	}

	if(config->axis_select_x_z == AXIS_Y) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7d1b      	ldrb	r3, [r3, #20]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d102      	bne.n	800551e <_Z21get_acceleration_dataP11lis331dlh_t+0x32>
		return config->accelarations.y;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551c:	e004      	b.n	8005528 <_Z21get_acceleration_dataP11lis331dlh_t+0x3c>
	}

	debug("ERROR: wrong axis selected!");
 800551e:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <_Z21get_acceleration_dataP11lis331dlh_t+0x44>)
 8005520:	0018      	movs	r0, r3
 8005522:	f000 fd3d 	bl	8005fa0 <debug>
	return 0;
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}
 8005530:	0801717c 	.word	0x0801717c

08005534 <find_degree>:


// нахождение угла наклона платы относительно целевой оси
void find_degree(lis331dlh_t * config) {
 8005534:	b5b0      	push	{r4, r5, r7, lr}
 8005536:	b08c      	sub	sp, #48	@ 0x30
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	int32_t summ = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float vector = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	62bb      	str	r3, [r7, #40]	@ 0x28
	int count = 50;
 8005544:	2332      	movs	r3, #50	@ 0x32
 8005546:	623b      	str	r3, [r7, #32]

	uint32_t timer = HAL_GetTick();
 8005548:	f002 fec0 	bl	80082cc <HAL_GetTick>
 800554c:	0003      	movs	r3, r0
 800554e:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < count;) {
 8005550:	2300      	movs	r3, #0
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
 8005554:	e04b      	b.n	80055ee <find_degree+0xba>
		lis331dlh_read_status(config);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0018      	movs	r0, r3
 800555a:	f001 fc20 	bl	8006d9e <lis331dlh_read_status>
		if (is_measurement_ready(config)) {					// если данные готовы
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0018      	movs	r0, r3
 8005562:	f000 f91b 	bl	800579c <is_measurement_ready>
 8005566:	0003      	movs	r3, r0
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	4193      	sbcs	r3, r2
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02d      	beq.n	80055ce <find_degree+0x9a>
			lis331dlh_update_accelaration(config);			// обновление данных
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f001 fb4f 	bl	8006c18 <lis331dlh_update_accelaration>
			summ += get_acceleration_data(config);			// вытаскиваем ускорение по конкретной оси
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f7ff ffb5 	bl	80054ec <_Z21get_acceleration_dataP11lis331dlh_t>
 8005582:	0002      	movs	r2, r0
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	189b      	adds	r3, r3, r2
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	435a      	muls	r2, r3
						+ config->accelarations.y * config->accelarations.y
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	434b      	muls	r3, r1
 800559e:	18d2      	adds	r2, r2, r3
						+ config->accelarations.z * config->accelarations.z);	// вычисление длины вектора
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	434b      	muls	r3, r1
 80055aa:	18d3      	adds	r3, r2, r3
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7fb ffaf 	bl	8001510 <__aeabi_i2f>
 80055b2:	1c03      	adds	r3, r0, #0
 80055b4:	1c18      	adds	r0, r3, #0
 80055b6:	f00c fc53 	bl	8011e60 <sqrtf>
 80055ba:	1c03      	adds	r3, r0, #0
 80055bc:	1c19      	adds	r1, r3, #0
 80055be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c0:	f7fb f91e 	bl	8000800 <__aeabi_fadd>
 80055c4:	1c03      	adds	r3, r0, #0
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28
			++i;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	3301      	adds	r3, #1
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		uint32_t time_passed = HAL_GetTick() - timer;
 80055ce:	f002 fe7d 	bl	80082cc <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	60fb      	str	r3, [r7, #12]
		if (time_passed > 1000) {
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	23fa      	movs	r3, #250	@ 0xfa
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d904      	bls.n	80055ee <find_degree+0xba>
			debug("LIS331 timeout error");
 80055e4:	4b54      	ldr	r3, [pc, #336]	@ (8005738 <find_degree+0x204>)
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fcda 	bl	8005fa0 <debug>
			return;
 80055ec:	e0a1      	b.n	8005732 <find_degree+0x1fe>
	for (int i = 0; i < count;) {
 80055ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	dbaf      	blt.n	8005556 <find_degree+0x22>
		}  // выход, если датчик не отвечает
	}

    float sinus = fabs(summ) / vector;
 80055f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fc59 	bl	8005eb0 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80055fe:	0004      	movs	r4, r0
 8005600:	000d      	movs	r5, r1
 8005602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005604:	f7fd fece 	bl	80033a4 <__aeabi_f2d>
 8005608:	0002      	movs	r2, r0
 800560a:	000b      	movs	r3, r1
 800560c:	0020      	movs	r0, r4
 800560e:	0029      	movs	r1, r5
 8005610:	f7fc fb70 	bl	8001cf4 <__aeabi_ddiv>
 8005614:	0002      	movs	r2, r0
 8005616:	000b      	movs	r3, r1
 8005618:	0010      	movs	r0, r2
 800561a:	0019      	movs	r1, r3
 800561c:	f7fd ff0a 	bl	8003434 <__aeabi_d2f>
 8005620:	1c03      	adds	r3, r0, #0
 8005622:	61bb      	str	r3, [r7, #24]

	if (sinus > 0.001) {
 8005624:	69b8      	ldr	r0, [r7, #24]
 8005626:	f7fd febd 	bl	80033a4 <__aeabi_f2d>
 800562a:	4a44      	ldr	r2, [pc, #272]	@ (800573c <find_degree+0x208>)
 800562c:	4b44      	ldr	r3, [pc, #272]	@ (8005740 <find_degree+0x20c>)
 800562e:	f7fa ff27 	bl	8000480 <__aeabi_dcmpgt>
 8005632:	1e03      	subs	r3, r0, #0
 8005634:	d075      	beq.n	8005722 <find_degree+0x1ee>
		config->degree = asinf(sinus) * 180 / M_PI;	// нахождение арксинуса и преобразование из радиан в градусы
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	1c18      	adds	r0, r3, #0
 800563a:	f00c fbf1 	bl	8011e20 <asinf>
 800563e:	1c03      	adds	r3, r0, #0
 8005640:	4940      	ldr	r1, [pc, #256]	@ (8005744 <find_degree+0x210>)
 8005642:	1c18      	adds	r0, r3, #0
 8005644:	f7fb fc4c 	bl	8000ee0 <__aeabi_fmul>
 8005648:	1c03      	adds	r3, r0, #0
 800564a:	1c18      	adds	r0, r3, #0
 800564c:	f7fd feaa 	bl	80033a4 <__aeabi_f2d>
 8005650:	4a3d      	ldr	r2, [pc, #244]	@ (8005748 <find_degree+0x214>)
 8005652:	4b3e      	ldr	r3, [pc, #248]	@ (800574c <find_degree+0x218>)
 8005654:	f7fc fb4e 	bl	8001cf4 <__aeabi_ddiv>
 8005658:	0002      	movs	r2, r0
 800565a:	000b      	movs	r3, r1
 800565c:	0010      	movs	r0, r2
 800565e:	0019      	movs	r1, r3
 8005660:	f7fd fee8 	bl	8003434 <__aeabi_d2f>
 8005664:	1c02      	adds	r2, r0, #0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
		float mean_axis = fabs(summ) / (float)count;
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	0018      	movs	r0, r3
 800566e:	f000 fc1f 	bl	8005eb0 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8005672:	0004      	movs	r4, r0
 8005674:	000d      	movs	r5, r1
 8005676:	6a38      	ldr	r0, [r7, #32]
 8005678:	f7fb ff4a 	bl	8001510 <__aeabi_i2f>
 800567c:	1c03      	adds	r3, r0, #0
 800567e:	1c18      	adds	r0, r3, #0
 8005680:	f7fd fe90 	bl	80033a4 <__aeabi_f2d>
 8005684:	0002      	movs	r2, r0
 8005686:	000b      	movs	r3, r1
 8005688:	0020      	movs	r0, r4
 800568a:	0029      	movs	r1, r5
 800568c:	f7fc fb32 	bl	8001cf4 <__aeabi_ddiv>
 8005690:	0002      	movs	r2, r0
 8005692:	000b      	movs	r3, r1
 8005694:	0010      	movs	r0, r2
 8005696:	0019      	movs	r1, r3
 8005698:	f7fd fecc 	bl	8003434 <__aeabi_d2f>
 800569c:	1c03      	adds	r3, r0, #0
 800569e:	617b      	str	r3, [r7, #20]
		float mean_vector = vector / (float)count;
 80056a0:	6a38      	ldr	r0, [r7, #32]
 80056a2:	f7fb ff35 	bl	8001510 <__aeabi_i2f>
 80056a6:	1c03      	adds	r3, r0, #0
 80056a8:	1c19      	adds	r1, r3, #0
 80056aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056ac:	f7fb fa32 	bl	8000b14 <__aeabi_fdiv>
 80056b0:	1c03      	adds	r3, r0, #0
 80056b2:	613b      	str	r3, [r7, #16]
		incline_factor = 1 + mean_axis / mean_vector;	// вычисление поправочного коэффициента на угол наклона
 80056b4:	6939      	ldr	r1, [r7, #16]
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f7fb fa2c 	bl	8000b14 <__aeabi_fdiv>
 80056bc:	1c03      	adds	r3, r0, #0
 80056be:	21fe      	movs	r1, #254	@ 0xfe
 80056c0:	0589      	lsls	r1, r1, #22
 80056c2:	1c18      	adds	r0, r3, #0
 80056c4:	f7fb f89c 	bl	8000800 <__aeabi_fadd>
 80056c8:	1c03      	adds	r3, r0, #0
 80056ca:	1c1a      	adds	r2, r3, #0
 80056cc:	4b20      	ldr	r3, [pc, #128]	@ (8005750 <find_degree+0x21c>)
 80056ce:	601a      	str	r2, [r3, #0]

		debug("Mean = %f\r\n", mean_axis);
 80056d0:	6978      	ldr	r0, [r7, #20]
 80056d2:	f7fd fe67 	bl	80033a4 <__aeabi_f2d>
 80056d6:	0002      	movs	r2, r0
 80056d8:	000b      	movs	r3, r1
 80056da:	491e      	ldr	r1, [pc, #120]	@ (8005754 <find_degree+0x220>)
 80056dc:	0008      	movs	r0, r1
 80056de:	f000 fc5f 	bl	8005fa0 <debug>
		debug("Full = %f\r\n", mean_vector);
 80056e2:	6938      	ldr	r0, [r7, #16]
 80056e4:	f7fd fe5e 	bl	80033a4 <__aeabi_f2d>
 80056e8:	0002      	movs	r2, r0
 80056ea:	000b      	movs	r3, r1
 80056ec:	491a      	ldr	r1, [pc, #104]	@ (8005758 <find_degree+0x224>)
 80056ee:	0008      	movs	r0, r1
 80056f0:	f000 fc56 	bl	8005fa0 <debug>
		debug("degree = %f\r\n", config->degree);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	1c18      	adds	r0, r3, #0
 80056fa:	f7fd fe53 	bl	80033a4 <__aeabi_f2d>
 80056fe:	0002      	movs	r2, r0
 8005700:	000b      	movs	r3, r1
 8005702:	4916      	ldr	r1, [pc, #88]	@ (800575c <find_degree+0x228>)
 8005704:	0008      	movs	r0, r1
 8005706:	f000 fc4b 	bl	8005fa0 <debug>
		debug("incline factor = %f\r\n", incline_factor);
 800570a:	4b11      	ldr	r3, [pc, #68]	@ (8005750 <find_degree+0x21c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1c18      	adds	r0, r3, #0
 8005710:	f7fd fe48 	bl	80033a4 <__aeabi_f2d>
 8005714:	0002      	movs	r2, r0
 8005716:	000b      	movs	r3, r1
 8005718:	4911      	ldr	r1, [pc, #68]	@ (8005760 <find_degree+0x22c>)
 800571a:	0008      	movs	r0, r1
 800571c:	f000 fc40 	bl	8005fa0 <debug>
 8005720:	e007      	b.n	8005732 <find_degree+0x1fe>
	}
	else {
		debug("Incline factor > 2. Error!");
 8005722:	4b10      	ldr	r3, [pc, #64]	@ (8005764 <find_degree+0x230>)
 8005724:	0018      	movs	r0, r3
 8005726:	f000 fc3b 	bl	8005fa0 <debug>
		incline_factor = 2;
 800572a:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <find_degree+0x21c>)
 800572c:	2280      	movs	r2, #128	@ 0x80
 800572e:	05d2      	lsls	r2, r2, #23
 8005730:	601a      	str	r2, [r3, #0]
	}

}
 8005732:	46bd      	mov	sp, r7
 8005734:	b00c      	add	sp, #48	@ 0x30
 8005736:	bdb0      	pop	{r4, r5, r7, pc}
 8005738:	08017198 	.word	0x08017198
 800573c:	d2f1a9fc 	.word	0xd2f1a9fc
 8005740:	3f50624d 	.word	0x3f50624d
 8005744:	43340000 	.word	0x43340000
 8005748:	54442d18 	.word	0x54442d18
 800574c:	400921fb 	.word	0x400921fb
 8005750:	200004b0 	.word	0x200004b0
 8005754:	080171b0 	.word	0x080171b0
 8005758:	080171bc 	.word	0x080171bc
 800575c:	080171c8 	.word	0x080171c8
 8005760:	080171d8 	.word	0x080171d8
 8005764:	080171f0 	.word	0x080171f0

08005768 <check_overrun>:

// проверка, что данные ускорений не были перезаписаны
void check_overrun(lis331dlh_t * config) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	if ((config->status_register & 0xF0) > 0) {
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7f1b      	ldrb	r3, [r3, #28]
 8005774:	001a      	movs	r2, r3
 8005776:	23f0      	movs	r3, #240	@ 0xf0
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	dd07      	ble.n	800578e <check_overrun+0x26>
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_SET);
		debug("Acceleration data overrun! SR %02x\r\n", config->status_register);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7f1b      	ldrb	r3, [r3, #28]
 8005782:	001a      	movs	r2, r3
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <check_overrun+0x30>)
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f000 fc09 	bl	8005fa0 <debug>
//		HAL_UART_Transmit_IT(debug_uart, (uint8_t*)"XYZ Overrun\r\n", 13);
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_RESET);
	}
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b002      	add	sp, #8
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	0801720c 	.word	0x0801720c

0800579c <is_measurement_ready>:

// проверка, что данные готовы для считывания
uint8_t is_measurement_ready(lis331dlh_t * config) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	return config->status_register & 0x08;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7f1b      	ldrb	r3, [r3, #28]
 80057a8:	2208      	movs	r2, #8
 80057aa:	4013      	ands	r3, r2
 80057ac:	b2db      	uxtb	r3, r3
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b002      	add	sp, #8
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <_Z14save_in_windowf>:

// сохранение данных в "окне" за последние 400 мс.
// Важно учитывать, что запись данных круговая
void save_in_window(float value) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	size_t window_position = (in_window - window);
 80057c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005840 <_Z14save_in_windowf+0x88>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005844 <_Z14save_in_windowf+0x8c>)
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	109b      	asrs	r3, r3, #2
 80057ca:	60fb      	str	r3, [r7, #12]
	if (window_position == WINDOW_SIZE) {
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b28      	cmp	r3, #40	@ 0x28
 80057d0:	d105      	bne.n	80057de <_Z14save_in_windowf+0x26>
		in_window = window;
 80057d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <_Z14save_in_windowf+0x88>)
 80057d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005844 <_Z14save_in_windowf+0x8c>)
 80057d6:	601a      	str	r2, [r3, #0]
		window_ready = 1;
 80057d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005848 <_Z14save_in_windowf+0x90>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
	}

	if (!window_ready) {
 80057de:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <_Z14save_in_windowf+0x90>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <_Z14save_in_windowf+0x3a>
		++window_value_counts;
 80057e6:	4b19      	ldr	r3, [pc, #100]	@ (800584c <_Z14save_in_windowf+0x94>)
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	4b17      	ldr	r3, [pc, #92]	@ (800584c <_Z14save_in_windowf+0x94>)
 80057f0:	801a      	strh	r2, [r3, #0]
	}

	part_sum -= *in_window;
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <_Z14save_in_windowf+0x98>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b12      	ldr	r3, [pc, #72]	@ (8005840 <_Z14save_in_windowf+0x88>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <_Z14save_in_windowf+0x98>)
 8005800:	601a      	str	r2, [r3, #0]
	*in_window++ = value;
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fb fe64 	bl	80014d0 <__aeabi_f2iz>
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <_Z14save_in_windowf+0x88>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	4a0c      	ldr	r2, [pc, #48]	@ (8005840 <_Z14save_in_windowf+0x88>)
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	6018      	str	r0, [r3, #0]
	part_sum += value;
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <_Z14save_in_windowf+0x98>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	0018      	movs	r0, r3
 800581a:	f7fb fe79 	bl	8001510 <__aeabi_i2f>
 800581e:	1c03      	adds	r3, r0, #0
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	1c18      	adds	r0, r3, #0
 8005824:	f7fa ffec 	bl	8000800 <__aeabi_fadd>
 8005828:	1c03      	adds	r3, r0, #0
 800582a:	1c18      	adds	r0, r3, #0
 800582c:	f7fb fe50 	bl	80014d0 <__aeabi_f2iz>
 8005830:	0002      	movs	r2, r0
 8005832:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <_Z14save_in_windowf+0x98>)
 8005834:	601a      	str	r2, [r3, #0]
}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	46bd      	mov	sp, r7
 800583a:	b004      	add	sp, #16
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	20000054 	.word	0x20000054
 8005844:	20000400 	.word	0x20000400
 8005848:	200003fa 	.word	0x200003fa
 800584c:	200004a0 	.word	0x200004a0
 8005850:	200004a4 	.word	0x200004a4

08005854 <_Z26get_mean_value_from_windowv>:

float get_mean_value_from_window() {
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	af00      	add	r7, sp, #0
	return part_sum / (float)window_value_counts;
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <_Z26get_mean_value_from_windowv+0x2c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	0018      	movs	r0, r3
 800585e:	f7fb fe57 	bl	8001510 <__aeabi_i2f>
 8005862:	1c04      	adds	r4, r0, #0
 8005864:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <_Z26get_mean_value_from_windowv+0x30>)
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	0018      	movs	r0, r3
 800586a:	f7fb fe9d 	bl	80015a8 <__aeabi_ui2f>
 800586e:	1c03      	adds	r3, r0, #0
 8005870:	1c19      	adds	r1, r3, #0
 8005872:	1c20      	adds	r0, r4, #0
 8005874:	f7fb f94e 	bl	8000b14 <__aeabi_fdiv>
 8005878:	1c03      	adds	r3, r0, #0
}
 800587a:	1c18      	adds	r0, r3, #0
 800587c:	46bd      	mov	sp, r7
 800587e:	bdb0      	pop	{r4, r5, r7, pc}
 8005880:	200004a4 	.word	0x200004a4
 8005884:	200004a0 	.word	0x200004a0

08005888 <is_need_stop_measuring>:

// проверка, что пора остановить измерения
// есть два главных условия для этого:
// 		измерение происходит дольше 400 мс (это означает, что платформа уже остановилась)
//		изменение знака скорости (это означает, что платформа прошла точку экстремума)
uint8_t is_need_stop_measuring() {
 8005888:	b5b0      	push	{r4, r5, r7, lr}
 800588a:	af00      	add	r7, sp, #0
	return measuring_started && (watchdog == WINDOW_SIZE || is_positive_speed ^ (speed > 0));
 800588c:	4b0f      	ldr	r3, [pc, #60]	@ (80058cc <is_need_stop_measuring+0x44>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <is_need_stop_measuring+0x3c>
 8005894:	4b0e      	ldr	r3, [pc, #56]	@ (80058d0 <is_need_stop_measuring+0x48>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2b28      	cmp	r3, #40	@ 0x28
 800589a:	d011      	beq.n	80058c0 <is_need_stop_measuring+0x38>
 800589c:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <is_need_stop_measuring+0x4c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	001c      	movs	r4, r3
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <is_need_stop_measuring+0x50>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2201      	movs	r2, #1
 80058a8:	1c15      	adds	r5, r2, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	1c18      	adds	r0, r3, #0
 80058ae:	f7fa fe21 	bl	80004f4 <__aeabi_fcmpgt>
 80058b2:	1e03      	subs	r3, r0, #0
 80058b4:	d101      	bne.n	80058ba <is_need_stop_measuring+0x32>
 80058b6:	2300      	movs	r3, #0
 80058b8:	1c1d      	adds	r5, r3, #0
 80058ba:	b2eb      	uxtb	r3, r5
 80058bc:	429c      	cmp	r4, r3
 80058be:	d001      	beq.n	80058c4 <is_need_stop_measuring+0x3c>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <is_need_stop_measuring+0x3e>
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	0018      	movs	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bdb0      	pop	{r4, r5, r7, pc}
 80058cc:	200003f9 	.word	0x200003f9
 80058d0:	200003fc 	.word	0x200003fc
 80058d4:	200003f8 	.word	0x200003f8
 80058d8:	200003f0 	.word	0x200003f0

080058dc <get_real_length>:

// преобразование длины из "попугаев" в мм
// 		9.8 - ускорение 1g
//		1000 - преобразование единиц измерений
//		1024 - соответствует 1g при использовании диапазона 2G
float get_real_length() {
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	return length * 9.8 / (float)1000 / (float)1024;
 80058e0:	4b11      	ldr	r3, [pc, #68]	@ (8005928 <get_real_length+0x4c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	1c18      	adds	r0, r3, #0
 80058e6:	f7fd fd5d 	bl	80033a4 <__aeabi_f2d>
 80058ea:	4a10      	ldr	r2, [pc, #64]	@ (800592c <get_real_length+0x50>)
 80058ec:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <get_real_length+0x54>)
 80058ee:	f7fc fe45 	bl	800257c <__aeabi_dmul>
 80058f2:	0002      	movs	r2, r0
 80058f4:	000b      	movs	r3, r1
 80058f6:	0010      	movs	r0, r2
 80058f8:	0019      	movs	r1, r3
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <get_real_length+0x58>)
 80058fe:	f7fc f9f9 	bl	8001cf4 <__aeabi_ddiv>
 8005902:	0002      	movs	r2, r0
 8005904:	000b      	movs	r3, r1
 8005906:	0010      	movs	r0, r2
 8005908:	0019      	movs	r1, r3
 800590a:	2200      	movs	r2, #0
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <get_real_length+0x5c>)
 800590e:	f7fc f9f1 	bl	8001cf4 <__aeabi_ddiv>
 8005912:	0002      	movs	r2, r0
 8005914:	000b      	movs	r3, r1
 8005916:	0010      	movs	r0, r2
 8005918:	0019      	movs	r1, r3
 800591a:	f7fd fd8b 	bl	8003434 <__aeabi_d2f>
 800591e:	1c03      	adds	r3, r0, #0
}
 8005920:	1c18      	adds	r0, r3, #0
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	200003f4 	.word	0x200003f4
 800592c:	9999999a 	.word	0x9999999a
 8005930:	40239999 	.word	0x40239999
 8005934:	408f4000 	.word	0x408f4000
 8005938:	40900000 	.word	0x40900000

0800593c <get_real_acc>:

float get_real_acc() {
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
	float real_acceleration = acceleration * 9.8 / (float)1024;
 8005942:	4b0f      	ldr	r3, [pc, #60]	@ (8005980 <get_real_acc+0x44>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1c18      	adds	r0, r3, #0
 8005948:	f7fd fd2c 	bl	80033a4 <__aeabi_f2d>
 800594c:	4a0d      	ldr	r2, [pc, #52]	@ (8005984 <get_real_acc+0x48>)
 800594e:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <get_real_acc+0x4c>)
 8005950:	f7fc fe14 	bl	800257c <__aeabi_dmul>
 8005954:	0002      	movs	r2, r0
 8005956:	000b      	movs	r3, r1
 8005958:	0010      	movs	r0, r2
 800595a:	0019      	movs	r1, r3
 800595c:	2200      	movs	r2, #0
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <get_real_acc+0x50>)
 8005960:	f7fc f9c8 	bl	8001cf4 <__aeabi_ddiv>
 8005964:	0002      	movs	r2, r0
 8005966:	000b      	movs	r3, r1
 8005968:	0010      	movs	r0, r2
 800596a:	0019      	movs	r1, r3
 800596c:	f7fd fd62 	bl	8003434 <__aeabi_d2f>
 8005970:	1c03      	adds	r3, r0, #0
 8005972:	607b      	str	r3, [r7, #4]
	return real_acceleration;
 8005974:	687b      	ldr	r3, [r7, #4]
}
 8005976:	1c18      	adds	r0, r3, #0
 8005978:	46bd      	mov	sp, r7
 800597a:	b002      	add	sp, #8
 800597c:	bd80      	pop	{r7, pc}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	200003ec 	.word	0x200003ec
 8005984:	9999999a 	.word	0x9999999a
 8005988:	40239999 	.word	0x40239999
 800598c:	40900000 	.word	0x40900000

08005990 <is_measuring_meaningful>:

// проверка данных на корректность. условия два:
// 		перемещения меньше 1 считаем погрешностью
// 		должно быть готово "окно" для вычисления сдивига
uint8_t is_measuring_meaningful(float real_length) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	return window_ready && (fabs(real_length) > 1.001f);
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <is_measuring_meaningful+0x34>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <is_measuring_meaningful+0x2a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	1c18      	adds	r0, r3, #0
 80059a4:	f7ff fd76 	bl	8005494 <_ZSt4fabsf>
 80059a8:	1c03      	adds	r3, r0, #0
 80059aa:	4907      	ldr	r1, [pc, #28]	@ (80059c8 <is_measuring_meaningful+0x38>)
 80059ac:	1c18      	adds	r0, r3, #0
 80059ae:	f7fa fda1 	bl	80004f4 <__aeabi_fcmpgt>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d001      	beq.n	80059ba <is_measuring_meaningful+0x2a>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <is_measuring_meaningful+0x2c>
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b002      	add	sp, #8
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200003fa 	.word	0x200003fa
 80059c8:	3f8020c5 	.word	0x3f8020c5

080059cc <reset_variables>:

// сброс переменных
void reset_variables() {
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	af00      	add	r7, sp, #0
	if (watchdog == WINDOW_SIZE) {
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <reset_variables+0x54>)
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	2b28      	cmp	r3, #40	@ 0x28
 80059d6:	d102      	bne.n	80059de <reset_variables+0x12>
		speed = 0;
 80059d8:	4b12      	ldr	r3, [pc, #72]	@ (8005a24 <reset_variables+0x58>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
	}

	measuring_started = 0;
 80059de:	4b12      	ldr	r3, [pc, #72]	@ (8005a28 <reset_variables+0x5c>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
	length = 0;
 80059e4:	4b11      	ldr	r3, [pc, #68]	@ (8005a2c <reset_variables+0x60>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
	watchdog = 0;
 80059ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <reset_variables+0x54>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	801a      	strh	r2, [r3, #0]
	is_positive_speed = fabs(speed) > 0;
 80059f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <reset_variables+0x58>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	1c18      	adds	r0, r3, #0
 80059f6:	f7ff fd4d 	bl	8005494 <_ZSt4fabsf>
 80059fa:	1c03      	adds	r3, r0, #0
 80059fc:	2201      	movs	r2, #1
 80059fe:	1c14      	adds	r4, r2, #0
 8005a00:	2100      	movs	r1, #0
 8005a02:	1c18      	adds	r0, r3, #0
 8005a04:	f7fa fd76 	bl	80004f4 <__aeabi_fcmpgt>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d101      	bne.n	8005a10 <reset_variables+0x44>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	1c1c      	adds	r4, r3, #0
 8005a10:	b2e3      	uxtb	r3, r4
 8005a12:	001a      	movs	r2, r3
 8005a14:	4b06      	ldr	r3, [pc, #24]	@ (8005a30 <reset_variables+0x64>)
 8005a16:	701a      	strb	r2, [r3, #0]
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	200003fc 	.word	0x200003fc
 8005a24:	200003f0 	.word	0x200003f0
 8005a28:	200003f9 	.word	0x200003f9
 8005a2c:	200003f4 	.word	0x200003f4
 8005a30:	200003f8 	.word	0x200003f8

08005a34 <check_positive_speed>:

// проверяем направление движения
void check_positive_speed() {
 8005a34:	b5b0      	push	{r4, r5, r7, lr}
 8005a36:	af00      	add	r7, sp, #0
	if (fabs(speed) < 0.001) {
 8005a38:	4b1e      	ldr	r3, [pc, #120]	@ (8005ab4 <check_positive_speed+0x80>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1c18      	adds	r0, r3, #0
 8005a3e:	f7ff fd29 	bl	8005494 <_ZSt4fabsf>
 8005a42:	1c03      	adds	r3, r0, #0
 8005a44:	1c18      	adds	r0, r3, #0
 8005a46:	f7fd fcad 	bl	80033a4 <__aeabi_f2d>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	1c1c      	adds	r4, r3, #0
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab8 <check_positive_speed+0x84>)
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <check_positive_speed+0x88>)
 8005a52:	f7fa fd01 	bl	8000458 <__aeabi_dcmplt>
 8005a56:	1e03      	subs	r3, r0, #0
 8005a58:	d101      	bne.n	8005a5e <check_positive_speed+0x2a>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	1c1c      	adds	r4, r3, #0
 8005a5e:	b2e3      	uxtb	r3, r4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <check_positive_speed+0x58>
		is_positive_speed = acceleration > 0.0f;
 8005a64:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <check_positive_speed+0x8c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	1c14      	adds	r4, r2, #0
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	1c18      	adds	r0, r3, #0
 8005a70:	f7fa fd40 	bl	80004f4 <__aeabi_fcmpgt>
 8005a74:	1e03      	subs	r3, r0, #0
 8005a76:	d101      	bne.n	8005a7c <check_positive_speed+0x48>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	1c1c      	adds	r4, r3, #0
 8005a7c:	b2e3      	uxtb	r3, r4
 8005a7e:	001a      	movs	r2, r3
 8005a80:	4b10      	ldr	r3, [pc, #64]	@ (8005ac4 <check_positive_speed+0x90>)
 8005a82:	701a      	strb	r2, [r3, #0]
		speed = 0.0f;
 8005a84:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab4 <check_positive_speed+0x80>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
	}
	else {
		is_positive_speed = speed > 0.0f;
	}
}
 8005a8a:	e00f      	b.n	8005aac <check_positive_speed+0x78>
		is_positive_speed = speed > 0.0f;
 8005a8c:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <check_positive_speed+0x80>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	1c14      	adds	r4, r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	1c18      	adds	r0, r3, #0
 8005a98:	f7fa fd2c 	bl	80004f4 <__aeabi_fcmpgt>
 8005a9c:	1e03      	subs	r3, r0, #0
 8005a9e:	d101      	bne.n	8005aa4 <check_positive_speed+0x70>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	1c1c      	adds	r4, r3, #0
 8005aa4:	b2e3      	uxtb	r3, r4
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <check_positive_speed+0x90>)
 8005aaa:	701a      	strb	r2, [r3, #0]
}
 8005aac:	46c0      	nop			@ (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	200003f0 	.word	0x200003f0
 8005ab8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005abc:	3f50624d 	.word	0x3f50624d
 8005ac0:	200003ec 	.word	0x200003ec
 8005ac4:	200003f8 	.word	0x200003f8

08005ac8 <_Z23update_speed_and_lengthP11lis331dlh_t>:

// интегрирование ускорения и скорости
void update_speed_and_length(lis331dlh_t * config) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	if (measuring_started) {
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <_Z23update_speed_and_lengthP11lis331dlh_t+0x74>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02d      	beq.n	8005b34 <_Z23update_speed_and_lengthP11lis331dlh_t+0x6c>
		speed += acceleration * config->range_factor;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <_Z23update_speed_and_lengthP11lis331dlh_t+0x78>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	1c19      	adds	r1, r3, #0
 8005ae2:	1c10      	adds	r0, r2, #0
 8005ae4:	f7fb f9fc 	bl	8000ee0 <__aeabi_fmul>
 8005ae8:	1c03      	adds	r3, r0, #0
 8005aea:	1c1a      	adds	r2, r3, #0
 8005aec:	4b15      	ldr	r3, [pc, #84]	@ (8005b44 <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1c19      	adds	r1, r3, #0
 8005af2:	1c10      	adds	r0, r2, #0
 8005af4:	f7fa fe84 	bl	8000800 <__aeabi_fadd>
 8005af8:	1c03      	adds	r3, r0, #0
 8005afa:	1c1a      	adds	r2, r3, #0
 8005afc:	4b11      	ldr	r3, [pc, #68]	@ (8005b44 <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 8005afe:	601a      	str	r2, [r3, #0]
		length += speed * config->range_factor;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	4b0f      	ldr	r3, [pc, #60]	@ (8005b44 <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	1c19      	adds	r1, r3, #0
 8005b0a:	1c10      	adds	r0, r2, #0
 8005b0c:	f7fb f9e8 	bl	8000ee0 <__aeabi_fmul>
 8005b10:	1c03      	adds	r3, r0, #0
 8005b12:	1c1a      	adds	r2, r3, #0
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1c19      	adds	r1, r3, #0
 8005b1a:	1c10      	adds	r0, r2, #0
 8005b1c:	f7fa fe70 	bl	8000800 <__aeabi_fadd>
 8005b20:	1c03      	adds	r3, r0, #0
 8005b22:	1c1a      	adds	r2, r3, #0
 8005b24:	4b08      	ldr	r3, [pc, #32]	@ (8005b48 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 8005b26:	601a      	str	r2, [r3, #0]
		++watchdog;
 8005b28:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 8005b32:	801a      	strh	r2, [r3, #0]
	}
}
 8005b34:	46c0      	nop			@ (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200003f9 	.word	0x200003f9
 8005b40:	200003ec 	.word	0x200003ec
 8005b44:	200003f0 	.word	0x200003f0
 8005b48:	200003f4 	.word	0x200003f4
 8005b4c:	200003fc 	.word	0x200003fc

08005b50 <print_result>:

// дебажная печать результатов вычислений
void print_result(float real_length) {
 8005b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b52:	b08f      	sub	sp, #60	@ 0x3c
 8005b54:	af08      	add	r7, sp, #32
 8005b56:	6178      	str	r0, [r7, #20]
	if (is_measuring_meaningful(real_length)) {
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	1c18      	adds	r0, r3, #0
 8005b5c:	f7ff ff18 	bl	8005990 <is_measuring_meaningful>
 8005b60:	0003      	movs	r3, r0
 8005b62:	1e5a      	subs	r2, r3, #1
 8005b64:	4193      	sbcs	r3, r2
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d02b      	beq.n	8005bc4 <print_result+0x74>
		debug("LENGTH = %f, speed = %f, watchdog = %lu, max = %.2f, min = %.2f\r\n",
 8005b6c:	6978      	ldr	r0, [r7, #20]
 8005b6e:	f7fd fc19 	bl	80033a4 <__aeabi_f2d>
 8005b72:	60b8      	str	r0, [r7, #8]
 8005b74:	60f9      	str	r1, [r7, #12]
 8005b76:	4b15      	ldr	r3, [pc, #84]	@ (8005bcc <print_result+0x7c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1c18      	adds	r0, r3, #0
 8005b7c:	f7fd fc12 	bl	80033a4 <__aeabi_f2d>
 8005b80:	0004      	movs	r4, r0
 8005b82:	000d      	movs	r5, r1
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <print_result+0x80>)
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	001e      	movs	r6, r3
 8005b8a:	4b12      	ldr	r3, [pc, #72]	@ (8005bd4 <print_result+0x84>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	1c18      	adds	r0, r3, #0
 8005b90:	f7fd fc08 	bl	80033a4 <__aeabi_f2d>
 8005b94:	6038      	str	r0, [r7, #0]
 8005b96:	6079      	str	r1, [r7, #4]
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <print_result+0x88>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	1c18      	adds	r0, r3, #0
 8005b9e:	f7fd fc01 	bl	80033a4 <__aeabi_f2d>
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	000b      	movs	r3, r1
 8005ba6:	490d      	ldr	r1, [pc, #52]	@ (8005bdc <print_result+0x8c>)
 8005ba8:	9206      	str	r2, [sp, #24]
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	9204      	str	r2, [sp, #16]
 8005bb2:	9305      	str	r3, [sp, #20]
 8005bb4:	9602      	str	r6, [sp, #8]
 8005bb6:	9400      	str	r4, [sp, #0]
 8005bb8:	9501      	str	r5, [sp, #4]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	0008      	movs	r0, r1
 8005bc0:	f000 f9ee 	bl	8005fa0 <debug>
			real_length, speed, watchdog, max_positive_move, max_negative_move);
	}
}
 8005bc4:	46c0      	nop			@ (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b007      	add	sp, #28
 8005bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bcc:	200003f0 	.word	0x200003f0
 8005bd0:	200003fc 	.word	0x200003fc
 8005bd4:	200003dc 	.word	0x200003dc
 8005bd8:	200003e0 	.word	0x200003e0
 8005bdc:	08017234 	.word	0x08017234

08005be0 <_Z25find_maxmin_accelerationsv>:

void find_maxmin_accelerations() {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
	float real_acceleration = acceleration * 9.8 / (float)1024;
 8005be6:	4b28      	ldr	r3, [pc, #160]	@ (8005c88 <_Z25find_maxmin_accelerationsv+0xa8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	1c18      	adds	r0, r3, #0
 8005bec:	f7fd fbda 	bl	80033a4 <__aeabi_f2d>
 8005bf0:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <_Z25find_maxmin_accelerationsv+0xac>)
 8005bf2:	4b27      	ldr	r3, [pc, #156]	@ (8005c90 <_Z25find_maxmin_accelerationsv+0xb0>)
 8005bf4:	f7fc fcc2 	bl	800257c <__aeabi_dmul>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	000b      	movs	r3, r1
 8005bfc:	0010      	movs	r0, r2
 8005bfe:	0019      	movs	r1, r3
 8005c00:	2200      	movs	r2, #0
 8005c02:	4b24      	ldr	r3, [pc, #144]	@ (8005c94 <_Z25find_maxmin_accelerationsv+0xb4>)
 8005c04:	f7fc f876 	bl	8001cf4 <__aeabi_ddiv>
 8005c08:	0002      	movs	r2, r0
 8005c0a:	000b      	movs	r3, r1
 8005c0c:	0010      	movs	r0, r2
 8005c0e:	0019      	movs	r1, r3
 8005c10:	f7fd fc10 	bl	8003434 <__aeabi_d2f>
 8005c14:	1c03      	adds	r3, r0, #0
 8005c16:	607b      	str	r3, [r7, #4]
	if (max_positive_acceleration < real_acceleration) {
 8005c18:	4b1f      	ldr	r3, [pc, #124]	@ (8005c98 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	1c19      	adds	r1, r3, #0
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fa fc68 	bl	80004f4 <__aeabi_fcmpgt>
 8005c24:	1e03      	subs	r3, r0, #0
 8005c26:	d007      	beq.n	8005c38 <_Z25find_maxmin_accelerationsv+0x58>
		max_positive_acceleration = real_acceleration;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	@ (8005c98 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 8005c2e:	f002 fb4d 	bl	80082cc <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <_Z25find_maxmin_accelerationsv+0xbc>)
 8005c36:	601a      	str	r2, [r3, #0]
	}

	if (max_negative_acceleration > real_acceleration) {
 8005c38:	4b19      	ldr	r3, [pc, #100]	@ (8005ca0 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	1c19      	adds	r1, r3, #0
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fa fc44 	bl	80004cc <__aeabi_fcmplt>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d007      	beq.n	8005c58 <_Z25find_maxmin_accelerationsv+0x78>
		max_negative_acceleration = real_acceleration;
 8005c48:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 8005c4e:	f002 fb3d 	bl	80082cc <HAL_GetTick>
 8005c52:	0002      	movs	r2, r0
 8005c54:	4b11      	ldr	r3, [pc, #68]	@ (8005c9c <_Z25find_maxmin_accelerationsv+0xbc>)
 8005c56:	601a      	str	r2, [r3, #0]
	}

	max_positive_acceleration = fmax(max_positive_acceleration, real_acceleration);
 8005c58:	4b0f      	ldr	r3, [pc, #60]	@ (8005c98 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	1c11      	adds	r1, r2, #0
 8005c60:	1c18      	adds	r0, r3, #0
 8005c62:	f7ff fc22 	bl	80054aa <_ZSt4fmaxff>
 8005c66:	1c02      	adds	r2, r0, #0
 8005c68:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005c6a:	601a      	str	r2, [r3, #0]
	max_negative_acceleration = fmin(max_negative_acceleration, real_acceleration);
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	1c11      	adds	r1, r2, #0
 8005c74:	1c18      	adds	r0, r3, #0
 8005c76:	f7ff fc28 	bl	80054ca <_ZSt4fminff>
 8005c7a:	1c02      	adds	r2, r0, #0
 8005c7c:	4b08      	ldr	r3, [pc, #32]	@ (8005ca0 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005c7e:	601a      	str	r2, [r3, #0]

}
 8005c80:	46c0      	nop			@ (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	200003ec 	.word	0x200003ec
 8005c8c:	9999999a 	.word	0x9999999a
 8005c90:	40239999 	.word	0x40239999
 8005c94:	40900000 	.word	0x40900000
 8005c98:	200003e4 	.word	0x200003e4
 8005c9c:	200004ac 	.word	0x200004ac
 8005ca0:	200003e8 	.word	0x200003e8

08005ca4 <calc_length>:

// основной алгоритм вычисления длины перемещений
void calc_length(lis331dlh_t * config) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
//	debug("Get data\r\n");
	// получение данных ускорений
	acceleration = get_acceleration_data(config);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7ff fc1c 	bl	80054ec <_Z21get_acceleration_dataP11lis331dlh_t>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7fb fc2a 	bl	8001510 <__aeabi_i2f>
 8005cbc:	1c02      	adds	r2, r0, #0
 8005cbe:	4b40      	ldr	r3, [pc, #256]	@ (8005dc0 <calc_length+0x11c>)
 8005cc0:	601a      	str	r2, [r3, #0]

	// сохранение значения в окне на 40мс для вычисления среднего для компенсации
	// репроекции осей при движении
	save_in_window(acceleration);
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8005dc0 <calc_length+0x11c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	1c18      	adds	r0, r3, #0
 8005cc8:	f7ff fd76 	bl	80057b8 <_Z14save_in_windowf>

	// вычитание среднего значения за последние 400 мс
	// необходимо для исключения ускорение свободного падения
	// и компенсации ошибки репроекции осей
	acceleration -= get_mean_value_from_window();
 8005ccc:	f7ff fdc2 	bl	8005854 <_Z26get_mean_value_from_windowv>
 8005cd0:	1c02      	adds	r2, r0, #0
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc0 <calc_length+0x11c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	1c11      	adds	r1, r2, #0
 8005cd8:	1c18      	adds	r0, r3, #0
 8005cda:	f7fb fa3f 	bl	800115c <__aeabi_fsub>
 8005cde:	1c03      	adds	r3, r0, #0
 8005ce0:	1c1a      	adds	r2, r3, #0
 8005ce2:	4b37      	ldr	r3, [pc, #220]	@ (8005dc0 <calc_length+0x11c>)
 8005ce4:	601a      	str	r2, [r3, #0]
	// компенсация угла наклона
	acceleration *= incline_factor;
 8005ce6:	4b36      	ldr	r3, [pc, #216]	@ (8005dc0 <calc_length+0x11c>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b36      	ldr	r3, [pc, #216]	@ (8005dc4 <calc_length+0x120>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	1c19      	adds	r1, r3, #0
 8005cf0:	1c10      	adds	r0, r2, #0
 8005cf2:	f7fb f8f5 	bl	8000ee0 <__aeabi_fmul>
 8005cf6:	1c03      	adds	r3, r0, #0
 8005cf8:	1c1a      	adds	r2, r3, #0
 8005cfa:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <calc_length+0x11c>)
 8005cfc:	601a      	str	r2, [r3, #0]

	// нахождение максимумов и минимумов ускорений
	find_maxmin_accelerations();
 8005cfe:	f7ff ff6f 	bl	8005be0 <_Z25find_maxmin_accelerationsv>

	// старт измерений происходит при значении ускорения больше 5
	// число 5.0 подобрано эмпирическим путем и является компромиссом
	// между точностью и ложными срабатываниями
	if (!measuring_started && fabs(acceleration) > 5.0f) {
 8005d02:	4b31      	ldr	r3, [pc, #196]	@ (8005dc8 <calc_length+0x124>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10d      	bne.n	8005d26 <calc_length+0x82>
 8005d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc0 <calc_length+0x11c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1c18      	adds	r0, r3, #0
 8005d10:	f7ff fbc0 	bl	8005494 <_ZSt4fabsf>
 8005d14:	1c03      	adds	r3, r0, #0
 8005d16:	492d      	ldr	r1, [pc, #180]	@ (8005dcc <calc_length+0x128>)
 8005d18:	1c18      	adds	r0, r3, #0
 8005d1a:	f7fa fbeb 	bl	80004f4 <__aeabi_fcmpgt>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d001      	beq.n	8005d26 <calc_length+0x82>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <calc_length+0x84>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <calc_length+0x92>
		// флаг начала измерений
		measuring_started = 1;
 8005d2c:	4b26      	ldr	r3, [pc, #152]	@ (8005dc8 <calc_length+0x124>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
		// проверка направления (необходимо для остановки измерений)
		check_positive_speed();
 8005d32:	f7ff fe7f 	bl	8005a34 <check_positive_speed>
	}


//	debug("Integrate\r\n");
	// интегрирование
	update_speed_and_length(config);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f7ff fec5 	bl	8005ac8 <_Z23update_speed_and_lengthP11lis331dlh_t>

	// проверка условий остановки
	if (is_need_stop_measuring()) {
 8005d3e:	f7ff fda3 	bl	8005888 <is_need_stop_measuring>
 8005d42:	0003      	movs	r3, r0
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	4193      	sbcs	r3, r2
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d033      	beq.n	8005db6 <calc_length+0x112>
		// преобразование сырых данных в систему счисления
		float real_length = get_real_length();
 8005d4e:	f7ff fdc5 	bl	80058dc <get_real_length>
 8005d52:	1c03      	adds	r3, r0, #0
 8005d54:	60fb      	str	r3, [r7, #12]

		// нахождение максимумов и минимумов по перемещениям
		if (is_measuring_meaningful(real_length)) {
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1c18      	adds	r0, r3, #0
 8005d5a:	f7ff fe19 	bl	8005990 <is_measuring_meaningful>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	1e5a      	subs	r2, r3, #1
 8005d62:	4193      	sbcs	r3, r2
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01f      	beq.n	8005daa <calc_length+0x106>
			if (max_positive_move < real_length) {
 8005d6a:	4b19      	ldr	r3, [pc, #100]	@ (8005dd0 <calc_length+0x12c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1c19      	adds	r1, r3, #0
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7fa fbbf 	bl	80004f4 <__aeabi_fcmpgt>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d007      	beq.n	8005d8a <calc_length+0xe6>
				max_positive_move = real_length;
 8005d7a:	4b15      	ldr	r3, [pc, #84]	@ (8005dd0 <calc_length+0x12c>)
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 8005d80:	f002 faa4 	bl	80082cc <HAL_GetTick>
 8005d84:	0002      	movs	r2, r0
 8005d86:	4b13      	ldr	r3, [pc, #76]	@ (8005dd4 <calc_length+0x130>)
 8005d88:	601a      	str	r2, [r3, #0]
			}

			if (max_negative_move > real_length) {
 8005d8a:	4b13      	ldr	r3, [pc, #76]	@ (8005dd8 <calc_length+0x134>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	1c19      	adds	r1, r3, #0
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7fa fb9b 	bl	80004cc <__aeabi_fcmplt>
 8005d96:	1e03      	subs	r3, r0, #0
 8005d98:	d007      	beq.n	8005daa <calc_length+0x106>
				max_negative_move = real_length;
 8005d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <calc_length+0x134>)
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 8005da0:	f002 fa94 	bl	80082cc <HAL_GetTick>
 8005da4:	0002      	movs	r2, r0
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <calc_length+0x130>)
 8005da8:	601a      	str	r2, [r3, #0]
			}
		}
		print_result(real_length);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1c18      	adds	r0, r3, #0
 8005dae:	f7ff fecf 	bl	8005b50 <print_result>
		reset_variables();
 8005db2:	f7ff fe0b 	bl	80059cc <reset_variables>
	}
//	debug("Return\r\n");
}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b004      	add	sp, #16
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	200003ec 	.word	0x200003ec
 8005dc4:	200004b0 	.word	0x200004b0
 8005dc8:	200003f9 	.word	0x200003f9
 8005dcc:	40a00000 	.word	0x40a00000
 8005dd0:	200003dc 	.word	0x200003dc
 8005dd4:	200004a8 	.word	0x200004a8
 8005dd8:	200003e0 	.word	0x200003e0

08005ddc <reset_acceleration_maximums>:

// сброс максимумом ускорений
void reset_acceleration_maximums() {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
//		acceleration_timestamp = HAL_GetTick();
//
//		max_positive_acceleration = 0.0f;
//		max_negative_acceleration = 0.0f;
//	}
}
 8005de0:	46c0      	nop			@ (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <reset_move_maximums>:

// сброс максимумом по перемещениям
void reset_move_maximums() {
 8005de6:	b580      	push	{r7, lr}
 8005de8:	af00      	add	r7, sp, #0
//		move_timestamp = HAL_GetTick();
//
//		max_positive_move = 0.0f;
//		max_negative_move = 0.0f;
//	}
}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <get_max_positive_acceleration>:

// получить максимум ускорения в +
float get_max_positive_acceleration() {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
	return max_positive_acceleration;
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <get_max_positive_acceleration+0x10>)
 8005df6:	681b      	ldr	r3, [r3, #0]
}
 8005df8:	1c18      	adds	r0, r3, #0
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	200003e4 	.word	0x200003e4

08005e04 <get_max_negative_acceleration>:


// получить максимум ускорения в -
float get_max_negative_acceleration() {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
	return max_negative_acceleration;
 8005e08:	4b02      	ldr	r3, [pc, #8]	@ (8005e14 <get_max_negative_acceleration+0x10>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
}
 8005e0c:	1c18      	adds	r0, r3, #0
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	200003e8 	.word	0x200003e8

08005e18 <get_max_positive_move>:

// получить максимум перемещения в +
float get_max_positive_move() {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
	return max_positive_move;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	@ (8005e28 <get_max_positive_move+0x10>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	1c18      	adds	r0, r3, #0
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	200003dc 	.word	0x200003dc

08005e2c <get_max_negative_move>:

// получить максимум перемещения в -
float get_max_negative_move() {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
	return max_negative_move;
 8005e30:	4b02      	ldr	r3, [pc, #8]	@ (8005e3c <get_max_negative_move+0x10>)
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	1c18      	adds	r0, r3, #0
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	200003e0 	.word	0x200003e0

08005e40 <round_and_limit>:

uint8_t round_and_limit(float value, float limit) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	if (value < 0) {
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fa fb3d 	bl	80004cc <__aeabi_fcmplt>
 8005e52:	1e03      	subs	r3, r0, #0
 8005e54:	d004      	beq.n	8005e60 <round_and_limit+0x20>
		value *= -1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2280      	movs	r2, #128	@ 0x80
 8005e5a:	0612      	lsls	r2, r2, #24
 8005e5c:	4053      	eors	r3, r2
 8005e5e:	607b      	str	r3, [r7, #4]
	}

	return (uint8_t)fmin(roundf(value), limit);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1c18      	adds	r0, r3, #0
 8005e64:	f00c f94a 	bl	80120fc <roundf>
 8005e68:	1c02      	adds	r2, r0, #0
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	1c19      	adds	r1, r3, #0
 8005e6e:	1c10      	adds	r0, r2, #0
 8005e70:	f7ff fb2b 	bl	80054ca <_ZSt4fminff>
 8005e74:	1c03      	adds	r3, r0, #0
 8005e76:	1c18      	adds	r0, r3, #0
 8005e78:	f7fa fb70 	bl	800055c <__aeabi_f2uiz>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	b2db      	uxtb	r3, r3
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b002      	add	sp, #8
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <round_and_limit_float>:

float round_and_limit_float(float value) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
	if (value < 0) {
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fa fb1a 	bl	80004cc <__aeabi_fcmplt>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d004      	beq.n	8005ea6 <round_and_limit_float+0x1e>
		value *= -1;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2280      	movs	r2, #128	@ 0x80
 8005ea0:	0612      	lsls	r2, r2, #24
 8005ea2:	4053      	eors	r3, r2
 8005ea4:	607b      	str	r3, [r7, #4]
	}

	return value;
 8005ea6:	687b      	ldr	r3, [r7, #4]
}
 8005ea8:	1c18      	adds	r0, r3, #0
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b002      	add	sp, #8
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8005eb0:	b5b0      	push	{r4, r5, r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fd fa21 	bl	8003300 <__aeabi_i2d>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	000b      	movs	r3, r1
 8005ec2:	0011      	movs	r1, r2
 8005ec4:	000c      	movs	r4, r1
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	085d      	lsrs	r5, r3, #1
 8005eca:	0022      	movs	r2, r4
 8005ecc:	002b      	movs	r3, r5
 8005ece:	0010      	movs	r0, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b002      	add	sp, #8
 8005ed6:	bdb0      	pop	{r4, r5, r7, pc}

08005ed8 <reset_debug_variables>:


bool need_logging = true;


void reset_debug_variables() {
 8005ed8:	b5b0      	push	{r4, r5, r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	if (current_debug_buffer_pointer == last_trasmited_debug_buffer) {
 8005edc:	4b13      	ldr	r3, [pc, #76]	@ (8005f2c <reset_debug_variables+0x54>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b13      	ldr	r3, [pc, #76]	@ (8005f30 <reset_debug_variables+0x58>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d10d      	bne.n	8005f04 <reset_debug_variables+0x2c>
		need_logging = true;
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <reset_debug_variables+0x5c>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]
		memset(debug_buffer, 0, DEBUG_BUFFER_SIZE);
 8005eee:	2380      	movs	r3, #128	@ 0x80
 8005ef0:	019a      	lsls	r2, r3, #6
 8005ef2:	4b11      	ldr	r3, [pc, #68]	@ (8005f38 <reset_debug_variables+0x60>)
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f00d fa78 	bl	80133ec <memset>
		current_debug_buffer_pointer = debug_buffer;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <reset_debug_variables+0x54>)
 8005efe:	4a0e      	ldr	r2, [pc, #56]	@ (8005f38 <reset_debug_variables+0x60>)
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e00b      	b.n	8005f1c <reset_debug_variables+0x44>
	}
	else {
		transmit(
 8005f04:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <reset_debug_variables+0x64>)
 8005f06:	681c      	ldr	r4, [r3, #0]
 8005f08:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <reset_debug_variables+0x58>)
 8005f0a:	681d      	ldr	r5, [r3, #0]
 8005f0c:	f000 f832 	bl	8005f74 <get_debug_buffer_length_to_send>
 8005f10:	0003      	movs	r3, r0
 8005f12:	001a      	movs	r2, r3
 8005f14:	0029      	movs	r1, r5
 8005f16:	0020      	movs	r0, r4
 8005f18:	f000 f8d4 	bl	80060c4 <transmit>
			debug_uart, last_trasmited_debug_buffer,
			get_debug_buffer_length_to_send()
		);
	}
	last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	@ (8005f2c <reset_debug_variables+0x54>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4b03      	ldr	r3, [pc, #12]	@ (8005f30 <reset_debug_variables+0x58>)
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	20000058 	.word	0x20000058
 8005f30:	200024b4 	.word	0x200024b4
 8005f34:	2000005c 	.word	0x2000005c
 8005f38:	200004b4 	.word	0x200004b4
 8005f3c:	2000006c 	.word	0x2000006c

08005f40 <get_free_debug_buffer_size>:


inline size_t get_free_debug_buffer_size() {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
	int32_t size = (int32_t)debug_buffer + (int32_t)DEBUG_BUFFER_SIZE - (int32_t)current_debug_buffer_pointer;
 8005f46:	4b09      	ldr	r3, [pc, #36]	@ (8005f6c <get_free_debug_buffer_size+0x2c>)
 8005f48:	2280      	movs	r2, #128	@ 0x80
 8005f4a:	0192      	lsls	r2, r2, #6
 8005f4c:	189a      	adds	r2, r3, r2
 8005f4e:	4b08      	ldr	r3, [pc, #32]	@ (8005f70 <get_free_debug_buffer_size+0x30>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	607b      	str	r3, [r7, #4]

	if (size < 0) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	da01      	bge.n	8005f60 <get_free_debug_buffer_size+0x20>
		size = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	607b      	str	r3, [r7, #4]
	}

	return static_cast<size_t>(size);
 8005f60:	687b      	ldr	r3, [r7, #4]
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b002      	add	sp, #8
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	200004b4 	.word	0x200004b4
 8005f70:	20000058 	.word	0x20000058

08005f74 <get_debug_buffer_length_to_send>:

inline uint16_t get_debug_buffer_length_to_send() {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
//	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
//	size = std::min(size, MAX_DEBUG_MESSAGE_SIZE);
	return current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005f78:	4b04      	ldr	r3, [pc, #16]	@ (8005f8c <get_debug_buffer_length_to_send+0x18>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <get_debug_buffer_length_to_send+0x1c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b29b      	uxth	r3, r3
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	20000058 	.word	0x20000058
 8005f90:	200024b4 	.word	0x200024b4

08005f94 <debug_enabled>:

uint8_t debug_enabled() {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
	return DEBUG_ENABLED;
 8005f98:	2301      	movs	r3, #1
}
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <debug>:

void debug(const char * message, ...) {
 8005fa0:	b40f      	push	{r0, r1, r2, r3}
 8005fa2:	b590      	push	{r4, r7, lr}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
	if constexpr (DEBUG_ENABLED) {
		size_t max_buffer_size = get_free_debug_buffer_size();
 8005fa8:	f7ff ffca 	bl	8005f40 <get_free_debug_buffer_size>
 8005fac:	0003      	movs	r3, r0
 8005fae:	60bb      	str	r3, [r7, #8]

		if (max_buffer_size > 0) {
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d058      	beq.n	8006068 <debug+0xc8>
			int16_t recorded = snprintf((char *)current_debug_buffer_pointer, max_buffer_size, "%lu ms: ", HAL_GetTick());
 8005fb6:	4b31      	ldr	r3, [pc, #196]	@ (800607c <debug+0xdc>)
 8005fb8:	681c      	ldr	r4, [r3, #0]
 8005fba:	f002 f987 	bl	80082cc <HAL_GetTick>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006080 <debug+0xe0>)
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	0020      	movs	r0, r4
 8005fc6:	f00d f939 	bl	801323c <sniprintf>
 8005fca:	0002      	movs	r2, r0
 8005fcc:	1dbb      	adds	r3, r7, #6
 8005fce:	801a      	strh	r2, [r3, #0]

			uint16_t length = recorded > 0 ? (uint16_t)recorded : 0;
 8005fd0:	1dbb      	adds	r3, r7, #6
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b21a      	sxth	r2, r3
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	da00      	bge.n	8005fdc <debug+0x3c>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	b21a      	sxth	r2, r3
 8005fde:	210e      	movs	r1, #14
 8005fe0:	187b      	adds	r3, r7, r1
 8005fe2:	801a      	strh	r2, [r3, #0]
//			uint16_t length = 0;

			if (max_buffer_size > length) {
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d93e      	bls.n	800606c <debug+0xcc>
				max_buffer_size -= length;
 8005fee:	187b      	adds	r3, r7, r1
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	60bb      	str	r3, [r7, #8]

				va_list args;
				va_start (args, message);
 8005ff8:	2324      	movs	r3, #36	@ 0x24
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	603b      	str	r3, [r7, #0]
				recorded = vsnprintf((char *)(current_debug_buffer_pointer + length), max_buffer_size, message, args);
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <debug+0xdc>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	187b      	adds	r3, r7, r1
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	18d0      	adds	r0, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6a3a      	ldr	r2, [r7, #32]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	f00d f9e1 	bl	80133d4 <vsniprintf>
 8006012:	0002      	movs	r2, r0
 8006014:	1dbb      	adds	r3, r7, #6
 8006016:	801a      	strh	r2, [r3, #0]
				va_end (args);

				if (recorded > 0) {
 8006018:	1dbb      	adds	r3, r7, #6
 800601a:	2200      	movs	r2, #0
 800601c:	5e9b      	ldrsh	r3, [r3, r2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd11      	ble.n	8006046 <debug+0xa6>
					length += recorded < (int16_t)max_buffer_size ? recorded : max_buffer_size;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	b21b      	sxth	r3, r3
 8006026:	1dba      	adds	r2, r7, #6
 8006028:	2100      	movs	r1, #0
 800602a:	5e52      	ldrsh	r2, [r2, r1]
 800602c:	429a      	cmp	r2, r3
 800602e:	db02      	blt.n	8006036 <debug+0x96>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	b29b      	uxth	r3, r3
 8006034:	e001      	b.n	800603a <debug+0x9a>
 8006036:	1dbb      	adds	r3, r7, #6
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	210e      	movs	r1, #14
 800603c:	187a      	adds	r2, r7, r1
 800603e:	1879      	adds	r1, r7, r1
 8006040:	8809      	ldrh	r1, [r1, #0]
 8006042:	185b      	adds	r3, r3, r1
 8006044:	8013      	strh	r3, [r2, #0]
				}

				current_debug_buffer_pointer += length;
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <debug+0xdc>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	230e      	movs	r3, #14
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	18d2      	adds	r2, r2, r3
 8006052:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <debug+0xdc>)
 8006054:	601a      	str	r2, [r3, #0]

				if (current_debug_buffer_pointer > (debug_buffer + 8192)) {
 8006056:	4b09      	ldr	r3, [pc, #36]	@ (800607c <debug+0xdc>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b0a      	ldr	r3, [pc, #40]	@ (8006084 <debug+0xe4>)
 800605c:	429a      	cmp	r2, r3
 800605e:	d905      	bls.n	800606c <debug+0xcc>
					current_debug_buffer_pointer = debug_buffer + 8192;
 8006060:	4a08      	ldr	r2, [pc, #32]	@ (8006084 <debug+0xe4>)
 8006062:	4b06      	ldr	r3, [pc, #24]	@ (800607c <debug+0xdc>)
 8006064:	601a      	str	r2, [r3, #0]
		}
		else {
			reset_debug_variables();
		}
	}
}
 8006066:	e001      	b.n	800606c <debug+0xcc>
			reset_debug_variables();
 8006068:	f7ff ff36 	bl	8005ed8 <reset_debug_variables>
}
 800606c:	46c0      	nop			@ (mov r8, r8)
 800606e:	46bd      	mov	sp, r7
 8006070:	b005      	add	sp, #20
 8006072:	bc90      	pop	{r4, r7}
 8006074:	bc08      	pop	{r3}
 8006076:	b004      	add	sp, #16
 8006078:	4718      	bx	r3
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	20000058 	.word	0x20000058
 8006080:	08017278 	.word	0x08017278
 8006084:	200024b4 	.word	0x200024b4

08006088 <extended_debug>:

void extended_debug(const char * message, ...) {
 8006088:	b40f      	push	{r0, r1, r2, r3}
 800608a:	b580      	push	{r7, lr}
 800608c:	af00      	add	r7, sp, #0
		va_list args;
		va_start (args, message);
		debug(message, args);
		va_end (args);
	}
}
 800608e:	46c0      	nop			@ (mov r8, r8)
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	bc08      	pop	{r3}
 8006096:	b004      	add	sp, #16
 8006098:	4718      	bx	r3

0800609a <receive>:
//
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)str, len, 100);
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)res, 10, 100);
//}

void receive(uart_t * uart, uint8_t * buffer, size_t size) {
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
	HAL_UART_AbortReceive(uart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f006 feff 	bl	800ceac <HAL_UART_AbortReceive>

	HAL_UART_Receive_IT(uart, buffer, size);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f006 fe9a 	bl	800cdf0 <HAL_UART_Receive_IT>
}
 80060bc:	46c0      	nop			@ (mov r8, r8)
 80060be:	46bd      	mov	sp, r7
 80060c0:	b004      	add	sp, #16
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <transmit>:

void transmit(uart_t * uart, uint8_t * buffer, uint16_t size) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	1dbb      	adds	r3, r7, #6
 80060d0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(uart, buffer, size);
 80060d2:	1dbb      	adds	r3, r7, #6
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	0018      	movs	r0, r3
 80060dc:	f006 fde0 	bl	800cca0 <HAL_UART_Transmit_IT>
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b004      	add	sp, #16
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <send_debug_messages>:

void send_debug_messages() {
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
	uint16_t size = get_debug_buffer_length_to_send();
 80060ee:	1dbc      	adds	r4, r7, #6
 80060f0:	f7ff ff40 	bl	8005f74 <get_debug_buffer_length_to_send>
 80060f4:	0003      	movs	r3, r0
 80060f6:	8023      	strh	r3, [r4, #0]

	if (need_logging && size > 0) {
 80060f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006134 <send_debug_messages+0x4c>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <send_debug_messages+0x44>
 8006100:	1dbb      	adds	r3, r7, #6
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <send_debug_messages+0x44>
		transmit(debug_uart, debug_buffer, size);
 8006108:	4b0b      	ldr	r3, [pc, #44]	@ (8006138 <send_debug_messages+0x50>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	1dbb      	adds	r3, r7, #6
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <send_debug_messages+0x54>)
 8006112:	0019      	movs	r1, r3
 8006114:	f7ff ffd6 	bl	80060c4 <transmit>
		need_logging = false;
 8006118:	4b06      	ldr	r3, [pc, #24]	@ (8006134 <send_debug_messages+0x4c>)
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
		last_trasmited_debug_buffer += size;
 800611e:	4b08      	ldr	r3, [pc, #32]	@ (8006140 <send_debug_messages+0x58>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	1dbb      	adds	r3, r7, #6
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	18d2      	adds	r2, r2, r3
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <send_debug_messages+0x58>)
 800612a:	601a      	str	r2, [r3, #0]
	}
}
 800612c:	46c0      	nop			@ (mov r8, r8)
 800612e:	46bd      	mov	sp, r7
 8006130:	b003      	add	sp, #12
 8006132:	bd90      	pop	{r4, r7, pc}
 8006134:	2000005c 	.word	0x2000005c
 8006138:	2000006c 	.word	0x2000006c
 800613c:	200004b4 	.word	0x200004b4
 8006140:	200024b4 	.word	0x200024b4

08006144 <send_all_debug_buffer_blocking>:

void send_all_debug_buffer_blocking() {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
 800614a:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <send_all_debug_buffer_blocking+0x2c>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <send_all_debug_buffer_blocking+0x30>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(debug_uart, debug_buffer, size, 100);
 8006156:	4b08      	ldr	r3, [pc, #32]	@ (8006178 <send_all_debug_buffer_blocking+0x34>)
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	b29a      	uxth	r2, r3
 800615e:	4907      	ldr	r1, [pc, #28]	@ (800617c <send_all_debug_buffer_blocking+0x38>)
 8006160:	2364      	movs	r3, #100	@ 0x64
 8006162:	f006 fcf9 	bl	800cb58 <HAL_UART_Transmit>
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b002      	add	sp, #8
 800616c:	bd80      	pop	{r7, pc}
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	20000058 	.word	0x20000058
 8006174:	200024b4 	.word	0x200024b4
 8006178:	2000006c 	.word	0x2000006c
 800617c:	200004b4 	.word	0x200004b4

08006180 <_Z41__static_initialization_and_destruction_0ii>:
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d107      	bne.n	80061a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	4a05      	ldr	r2, [pc, #20]	@ (80061a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
uint8_t * last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8006198:	4b04      	ldr	r3, [pc, #16]	@ (80061ac <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800619e:	601a      	str	r2, [r3, #0]
}
 80061a0:	46c0      	nop			@ (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	0000ffff 	.word	0x0000ffff
 80061ac:	20000058 	.word	0x20000058
 80061b0:	200024b4 	.word	0x200024b4

080061b4 <_GLOBAL__sub_I_receive_buffer>:
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	4b03      	ldr	r3, [pc, #12]	@ (80061c8 <_GLOBAL__sub_I_receive_buffer+0x14>)
 80061ba:	0019      	movs	r1, r3
 80061bc:	2001      	movs	r0, #1
 80061be:	f7ff ffdf 	bl	8006180 <_Z41__static_initialization_and_destruction_0ii>
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	0000ffff 	.word	0x0000ffff

080061cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b08b      	sub	sp, #44	@ 0x2c
 80061d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d2:	2414      	movs	r4, #20
 80061d4:	193b      	adds	r3, r7, r4
 80061d6:	0018      	movs	r0, r3
 80061d8:	2314      	movs	r3, #20
 80061da:	001a      	movs	r2, r3
 80061dc:	2100      	movs	r1, #0
 80061de:	f00d f905 	bl	80133ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061e2:	4bb6      	ldr	r3, [pc, #728]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 80061e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061e6:	4bb5      	ldr	r3, [pc, #724]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 80061e8:	2104      	movs	r1, #4
 80061ea:	430a      	orrs	r2, r1
 80061ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80061ee:	4bb3      	ldr	r3, [pc, #716]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 80061f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f2:	2204      	movs	r2, #4
 80061f4:	4013      	ands	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80061fa:	4bb0      	ldr	r3, [pc, #704]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 80061fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fe:	4baf      	ldr	r3, [pc, #700]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006200:	2120      	movs	r1, #32
 8006202:	430a      	orrs	r2, r1
 8006204:	635a      	str	r2, [r3, #52]	@ 0x34
 8006206:	4bad      	ldr	r3, [pc, #692]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620a:	2220      	movs	r2, #32
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006212:	4baa      	ldr	r3, [pc, #680]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006216:	4ba9      	ldr	r3, [pc, #676]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006218:	2101      	movs	r1, #1
 800621a:	430a      	orrs	r2, r1
 800621c:	635a      	str	r2, [r3, #52]	@ 0x34
 800621e:	4ba7      	ldr	r3, [pc, #668]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	2201      	movs	r2, #1
 8006224:	4013      	ands	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
 8006228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800622a:	4ba4      	ldr	r3, [pc, #656]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 800622c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800622e:	4ba3      	ldr	r3, [pc, #652]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006230:	2102      	movs	r1, #2
 8006232:	430a      	orrs	r2, r1
 8006234:	635a      	str	r2, [r3, #52]	@ 0x34
 8006236:	4ba1      	ldr	r3, [pc, #644]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	2202      	movs	r2, #2
 800623c:	4013      	ands	r3, r2
 800623e:	607b      	str	r3, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006242:	4b9e      	ldr	r3, [pc, #632]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006246:	4b9d      	ldr	r3, [pc, #628]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006248:	2108      	movs	r1, #8
 800624a:	430a      	orrs	r2, r1
 800624c:	635a      	str	r2, [r3, #52]	@ 0x34
 800624e:	4b9b      	ldr	r3, [pc, #620]	@ (80064bc <MX_GPIO_Init+0x2f0>)
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	2208      	movs	r2, #8
 8006254:	4013      	ands	r3, r2
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GAIN1_Pin|GAIN0_Pin, GPIO_PIN_SET);
 800625a:	4b99      	ldr	r3, [pc, #612]	@ (80064c0 <MX_GPIO_Init+0x2f4>)
 800625c:	2201      	movs	r2, #1
 800625e:	2103      	movs	r1, #3
 8006260:	0018      	movs	r0, r3
 8006262:	f002 fd42 	bl	8008cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|TEMP_Pin|FLASH_NSS_Pin|DBG_GPIO1_Pin, GPIO_PIN_RESET);
 8006266:	23a3      	movs	r3, #163	@ 0xa3
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4895      	ldr	r0, [pc, #596]	@ (80064c0 <MX_GPIO_Init+0x2f4>)
 800626c:	2200      	movs	r2, #0
 800626e:	0019      	movs	r1, r3
 8006270:	f002 fd3b 	bl	8008cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCLK_Pin|SPEED_Pin|FLASH_HOLD_Pin, GPIO_PIN_RESET);
 8006274:	4993      	ldr	r1, [pc, #588]	@ (80064c4 <MX_GPIO_Init+0x2f8>)
 8006276:	23a0      	movs	r3, #160	@ 0xa0
 8006278:	05db      	lsls	r3, r3, #23
 800627a:	2200      	movs	r2, #0
 800627c:	0018      	movs	r0, r3
 800627e:	f002 fd34 	bl	8008cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDWN_GPIO_Port, PDWN_Pin, GPIO_PIN_SET);
 8006282:	23a0      	movs	r3, #160	@ 0xa0
 8006284:	05db      	lsls	r3, r3, #23
 8006286:	2201      	movs	r2, #1
 8006288:	2104      	movs	r1, #4
 800628a:	0018      	movs	r0, r3
 800628c:	f002 fd2d 	bl	8008cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 8006290:	2380      	movs	r3, #128	@ 0x80
 8006292:	015b      	lsls	r3, r3, #5
 8006294:	488c      	ldr	r0, [pc, #560]	@ (80064c8 <MX_GPIO_Init+0x2fc>)
 8006296:	2200      	movs	r2, #0
 8006298:	0019      	movs	r1, r3
 800629a:	f002 fd26 	bl	8008cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_WP_Pin|DBG_GPIO2_Pin|LED_ERROR_Pin|LED_STATUS_Pin
 800629e:	498b      	ldr	r1, [pc, #556]	@ (80064cc <MX_GPIO_Init+0x300>)
 80062a0:	4b8b      	ldr	r3, [pc, #556]	@ (80064d0 <MX_GPIO_Init+0x304>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	0018      	movs	r0, r3
 80062a6:	f002 fd20 	bl	8008cea <HAL_GPIO_WritePin>
                          |USART2DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GAIN1_Pin|GAIN0_Pin;
 80062aa:	193b      	adds	r3, r7, r4
 80062ac:	2203      	movs	r2, #3
 80062ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062b0:	193b      	adds	r3, r7, r4
 80062b2:	2201      	movs	r2, #1
 80062b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062b6:	193b      	adds	r3, r7, r4
 80062b8:	2201      	movs	r2, #1
 80062ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062bc:	193b      	adds	r3, r7, r4
 80062be:	2200      	movs	r2, #0
 80062c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062c2:	193b      	adds	r3, r7, r4
 80062c4:	4a7e      	ldr	r2, [pc, #504]	@ (80064c0 <MX_GPIO_Init+0x2f4>)
 80062c6:	0019      	movs	r1, r3
 80062c8:	0010      	movs	r0, r2
 80062ca:	f002 fb8d 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A0_Pin|TEMP_Pin;
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	220c      	movs	r2, #12
 80062d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	2201      	movs	r2, #1
 80062d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80062da:	193b      	adds	r3, r7, r4
 80062dc:	2202      	movs	r2, #2
 80062de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	2200      	movs	r2, #0
 80062e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062e6:	193b      	adds	r3, r7, r4
 80062e8:	4a75      	ldr	r2, [pc, #468]	@ (80064c0 <MX_GPIO_Init+0x2f4>)
 80062ea:	0019      	movs	r1, r3
 80062ec:	0010      	movs	r0, r2
 80062ee:	f002 fb7b 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY_DROUT_Pin;
 80062f2:	193b      	adds	r3, r7, r4
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062f8:	193b      	adds	r3, r7, r4
 80062fa:	2200      	movs	r2, #0
 80062fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fe:	193b      	adds	r3, r7, r4
 8006300:	2200      	movs	r2, #0
 8006302:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DRDY_DROUT_GPIO_Port, &GPIO_InitStruct);
 8006304:	193a      	adds	r2, r7, r4
 8006306:	23a0      	movs	r3, #160	@ 0xa0
 8006308:	05db      	lsls	r3, r3, #23
 800630a:	0011      	movs	r1, r2
 800630c:	0018      	movs	r0, r3
 800630e:	f002 fb6b 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SCLK_Pin|SPEED_Pin;
 8006312:	193b      	adds	r3, r7, r4
 8006314:	220a      	movs	r2, #10
 8006316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006318:	193b      	adds	r3, r7, r4
 800631a:	2201      	movs	r2, #1
 800631c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800631e:	193b      	adds	r3, r7, r4
 8006320:	2202      	movs	r2, #2
 8006322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006324:	193b      	adds	r3, r7, r4
 8006326:	2200      	movs	r2, #0
 8006328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800632a:	193a      	adds	r2, r7, r4
 800632c:	23a0      	movs	r3, #160	@ 0xa0
 800632e:	05db      	lsls	r3, r3, #23
 8006330:	0011      	movs	r1, r2
 8006332:	0018      	movs	r0, r3
 8006334:	f002 fb58 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDWN_Pin;
 8006338:	193b      	adds	r3, r7, r4
 800633a:	2204      	movs	r2, #4
 800633c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800633e:	193b      	adds	r3, r7, r4
 8006340:	2201      	movs	r2, #1
 8006342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006344:	193b      	adds	r3, r7, r4
 8006346:	2201      	movs	r2, #1
 8006348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800634a:	193b      	adds	r3, r7, r4
 800634c:	2200      	movs	r2, #0
 800634e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PDWN_GPIO_Port, &GPIO_InitStruct);
 8006350:	193a      	adds	r2, r7, r4
 8006352:	23a0      	movs	r3, #160	@ 0xa0
 8006354:	05db      	lsls	r3, r3, #23
 8006356:	0011      	movs	r1, r2
 8006358:	0018      	movs	r0, r3
 800635a:	f002 fb45 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_Z_SELECT_Pin;
 800635e:	193b      	adds	r3, r7, r4
 8006360:	2201      	movs	r2, #1
 8006362:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006364:	193b      	adds	r3, r7, r4
 8006366:	2200      	movs	r2, #0
 8006368:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800636a:	193b      	adds	r3, r7, r4
 800636c:	2201      	movs	r2, #1
 800636e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(X_Z_SELECT_GPIO_Port, &GPIO_InitStruct);
 8006370:	193b      	adds	r3, r7, r4
 8006372:	4a55      	ldr	r2, [pc, #340]	@ (80064c8 <MX_GPIO_Init+0x2fc>)
 8006374:	0019      	movs	r1, r3
 8006376:	0010      	movs	r0, r2
 8006378:	f002 fb36 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 800637c:	0021      	movs	r1, r4
 800637e:	187b      	adds	r3, r7, r1
 8006380:	2280      	movs	r2, #128	@ 0x80
 8006382:	0152      	lsls	r2, r2, #5
 8006384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006386:	000c      	movs	r4, r1
 8006388:	193b      	adds	r3, r7, r4
 800638a:	2201      	movs	r2, #1
 800638c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	193b      	adds	r3, r7, r4
 8006390:	2200      	movs	r2, #0
 8006392:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006394:	193b      	adds	r3, r7, r4
 8006396:	2200      	movs	r2, #0
 8006398:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 800639a:	193b      	adds	r3, r7, r4
 800639c:	4a4a      	ldr	r2, [pc, #296]	@ (80064c8 <MX_GPIO_Init+0x2fc>)
 800639e:	0019      	movs	r1, r3
 80063a0:	0010      	movs	r0, r2
 80063a2:	f002 fb21 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin;
 80063a6:	193b      	adds	r3, r7, r4
 80063a8:	2280      	movs	r2, #128	@ 0x80
 80063aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063ac:	193b      	adds	r3, r7, r4
 80063ae:	2201      	movs	r2, #1
 80063b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b2:	193b      	adds	r3, r7, r4
 80063b4:	2200      	movs	r2, #0
 80063b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b8:	193b      	adds	r3, r7, r4
 80063ba:	2200      	movs	r2, #0
 80063bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_NSS_GPIO_Port, &GPIO_InitStruct);
 80063be:	193b      	adds	r3, r7, r4
 80063c0:	4a3f      	ldr	r2, [pc, #252]	@ (80064c0 <MX_GPIO_Init+0x2f4>)
 80063c2:	0019      	movs	r1, r3
 80063c4:	0010      	movs	r0, r2
 80063c6:	f002 fb0f 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 80063ca:	0021      	movs	r1, r4
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	2283      	movs	r2, #131	@ 0x83
 80063d0:	0092      	lsls	r2, r2, #2
 80063d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063d4:	000c      	movs	r4, r1
 80063d6:	193b      	adds	r3, r7, r4
 80063d8:	2201      	movs	r2, #1
 80063da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063dc:	193b      	adds	r3, r7, r4
 80063de:	2200      	movs	r2, #0
 80063e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e2:	193b      	adds	r3, r7, r4
 80063e4:	2200      	movs	r2, #0
 80063e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e8:	193b      	adds	r3, r7, r4
 80063ea:	4a39      	ldr	r2, [pc, #228]	@ (80064d0 <MX_GPIO_Init+0x304>)
 80063ec:	0019      	movs	r1, r3
 80063ee:	0010      	movs	r0, r2
 80063f0:	f002 fafa 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_HOLD_Pin;
 80063f4:	0021      	movs	r1, r4
 80063f6:	187b      	adds	r3, r7, r1
 80063f8:	2280      	movs	r2, #128	@ 0x80
 80063fa:	00d2      	lsls	r2, r2, #3
 80063fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063fe:	000c      	movs	r4, r1
 8006400:	193b      	adds	r3, r7, r4
 8006402:	2201      	movs	r2, #1
 8006404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006406:	193b      	adds	r3, r7, r4
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800640c:	193b      	adds	r3, r7, r4
 800640e:	2200      	movs	r2, #0
 8006410:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_HOLD_GPIO_Port, &GPIO_InitStruct);
 8006412:	193a      	adds	r2, r7, r4
 8006414:	23a0      	movs	r3, #160	@ 0xa0
 8006416:	05db      	lsls	r3, r3, #23
 8006418:	0011      	movs	r1, r2
 800641a:	0018      	movs	r0, r3
 800641c:	f002 fae4 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO1_Pin;
 8006420:	0021      	movs	r1, r4
 8006422:	187b      	adds	r3, r7, r1
 8006424:	2280      	movs	r2, #128	@ 0x80
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800642a:	000c      	movs	r4, r1
 800642c:	193b      	adds	r3, r7, r4
 800642e:	2201      	movs	r2, #1
 8006430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006432:	193b      	adds	r3, r7, r4
 8006434:	2200      	movs	r2, #0
 8006436:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006438:	193b      	adds	r3, r7, r4
 800643a:	2203      	movs	r2, #3
 800643c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO1_GPIO_Port, &GPIO_InitStruct);
 800643e:	193b      	adds	r3, r7, r4
 8006440:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <MX_GPIO_Init+0x2f4>)
 8006442:	0019      	movs	r1, r3
 8006444:	0010      	movs	r0, r2
 8006446:	f002 facf 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_pin_3_Pin;
 800644a:	193b      	adds	r3, r7, r4
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006450:	193b      	adds	r3, r7, r4
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006456:	193b      	adds	r3, r7, r4
 8006458:	2201      	movs	r2, #1
 800645a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Test_pin_3_GPIO_Port, &GPIO_InitStruct);
 800645c:	193b      	adds	r3, r7, r4
 800645e:	4a1c      	ldr	r2, [pc, #112]	@ (80064d0 <MX_GPIO_Init+0x304>)
 8006460:	0019      	movs	r1, r3
 8006462:	0010      	movs	r0, r2
 8006464:	f002 fac0 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO2_Pin;
 8006468:	193b      	adds	r3, r7, r4
 800646a:	2202      	movs	r2, #2
 800646c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800646e:	193b      	adds	r3, r7, r4
 8006470:	2201      	movs	r2, #1
 8006472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006474:	193b      	adds	r3, r7, r4
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800647a:	193b      	adds	r3, r7, r4
 800647c:	2203      	movs	r2, #3
 800647e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8006480:	193b      	adds	r3, r7, r4
 8006482:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <MX_GPIO_Init+0x304>)
 8006484:	0019      	movs	r1, r3
 8006486:	0010      	movs	r0, r2
 8006488:	f002 faae 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2DE_Pin;
 800648c:	0021      	movs	r1, r4
 800648e:	187b      	adds	r3, r7, r1
 8006490:	2210      	movs	r2, #16
 8006492:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006494:	187b      	adds	r3, r7, r1
 8006496:	2201      	movs	r2, #1
 8006498:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800649a:	187b      	adds	r3, r7, r1
 800649c:	2202      	movs	r2, #2
 800649e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a0:	187b      	adds	r3, r7, r1
 80064a2:	2200      	movs	r2, #0
 80064a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USART2DE_GPIO_Port, &GPIO_InitStruct);
 80064a6:	187b      	adds	r3, r7, r1
 80064a8:	4a09      	ldr	r2, [pc, #36]	@ (80064d0 <MX_GPIO_Init+0x304>)
 80064aa:	0019      	movs	r1, r3
 80064ac:	0010      	movs	r0, r2
 80064ae:	f002 fa9b 	bl	80089e8 <HAL_GPIO_Init>

}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b00b      	add	sp, #44	@ 0x2c
 80064b8:	bd90      	pop	{r4, r7, pc}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	40021000 	.word	0x40021000
 80064c0:	50000800 	.word	0x50000800
 80064c4:	0000040a 	.word	0x0000040a
 80064c8:	50000400 	.word	0x50000400
 80064cc:	0000021e 	.word	0x0000021e
 80064d0:	50000c00 	.word	0x50000c00

080064d4 <hdc1080_init>:
#include "sensors_state.h"
#include "debug.h"

I2C_HandleTypeDef* hi2c_hdc1080;

bool hdc1080_init(I2C_HandleTypeDef* _hi2c_hdc1080, Temp_Reso Temperature_Resolution_x_bit, Humi_Reso Humidity_Resolution_x_bit)	{
 80064d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d6:	b089      	sub	sp, #36	@ 0x24
 80064d8:	af04      	add	r7, sp, #16
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	0008      	movs	r0, r1
 80064de:	0011      	movs	r1, r2
 80064e0:	1cfb      	adds	r3, r7, #3
 80064e2:	1c02      	adds	r2, r0, #0
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	1cbb      	adds	r3, r7, #2
 80064e8:	1c0a      	adds	r2, r1, #0
 80064ea:	701a      	strb	r2, [r3, #0]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value = 0x1000;
 80064ec:	210e      	movs	r1, #14
 80064ee:	187b      	adds	r3, r7, r1
 80064f0:	2280      	movs	r2, #128	@ 0x80
 80064f2:	0152      	lsls	r2, r2, #5
 80064f4:	801a      	strh	r2, [r3, #0]
	uint8_t data_send[2];
	hi2c_hdc1080 = _hi2c_hdc1080;
 80064f6:	4b2f      	ldr	r3, [pc, #188]	@ (80065b4 <hdc1080_init+0xe0>)
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit) {
 80064fc:	1cfb      	adds	r3, r7, #3
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d106      	bne.n	8006512 <hdc1080_init+0x3e>
		config_reg_value |= (1 << 10); //11 bit
 8006504:	187b      	adds	r3, r7, r1
 8006506:	187a      	adds	r2, r7, r1
 8006508:	8812      	ldrh	r2, [r2, #0]
 800650a:	2180      	movs	r1, #128	@ 0x80
 800650c:	00c9      	lsls	r1, r1, #3
 800650e:	430a      	orrs	r2, r1
 8006510:	801a      	strh	r2, [r3, #0]
	}

	switch(Humidity_Resolution_x_bit) {
 8006512:	1cbb      	adds	r3, r7, #2
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d00d      	beq.n	8006536 <hdc1080_init+0x62>
 800651a:	dc16      	bgt.n	800654a <hdc1080_init+0x76>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <hdc1080_init+0x74>
 8006520:	2b01      	cmp	r3, #1
 8006522:	d112      	bne.n	800654a <hdc1080_init+0x76>
		case Humidity_Resolution_11_bit:
			config_reg_value |= (1 << 8);
 8006524:	220e      	movs	r2, #14
 8006526:	18bb      	adds	r3, r7, r2
 8006528:	18ba      	adds	r2, r7, r2
 800652a:	8812      	ldrh	r2, [r2, #0]
 800652c:	2180      	movs	r1, #128	@ 0x80
 800652e:	0049      	lsls	r1, r1, #1
 8006530:	430a      	orrs	r2, r1
 8006532:	801a      	strh	r2, [r3, #0]
			break;
 8006534:	e009      	b.n	800654a <hdc1080_init+0x76>
		case Humidity_Resolution_8_bit:
			config_reg_value |= (1 << 9);
 8006536:	220e      	movs	r2, #14
 8006538:	18bb      	adds	r3, r7, r2
 800653a:	18ba      	adds	r2, r7, r2
 800653c:	8812      	ldrh	r2, [r2, #0]
 800653e:	2180      	movs	r1, #128	@ 0x80
 8006540:	0089      	lsls	r1, r1, #2
 8006542:	430a      	orrs	r2, r1
 8006544:	801a      	strh	r2, [r3, #0]
			break;
 8006546:	e000      	b.n	800654a <hdc1080_init+0x76>
		case Humidity_Resolution_14_bit:
			break;
 8006548:	46c0      	nop			@ (mov r8, r8)
	}

	data_send[0] = (config_reg_value >> 8);
 800654a:	210e      	movs	r1, #14
 800654c:	187b      	adds	r3, r7, r1
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	b29b      	uxth	r3, r3
 8006554:	b2da      	uxtb	r2, r3
 8006556:	2508      	movs	r5, #8
 8006558:	197b      	adds	r3, r7, r5
 800655a:	701a      	strb	r2, [r3, #0]
	data_send[1] = (config_reg_value & 0x00ff);
 800655c:	187b      	adds	r3, r7, r1
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	197b      	adds	r3, r7, r5
 8006564:	705a      	strb	r2, [r3, #1]


	HAL_StatusTypeDef status = HAL_OK;
 8006566:	260d      	movs	r6, #13
 8006568:	19bb      	adds	r3, r7, r6
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(hi2c_hdc1080, HDC_1080_ADDR, 10, 100);
 800656e:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <hdc1080_init+0xe0>)
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	19bc      	adds	r4, r7, r6
 8006574:	2364      	movs	r3, #100	@ 0x64
 8006576:	220a      	movs	r2, #10
 8006578:	2180      	movs	r1, #128	@ 0x80
 800657a:	f003 f929 	bl	80097d0 <HAL_I2C_IsDeviceReady>
 800657e:	0003      	movs	r3, r0
 8006580:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) {
 8006582:	19bb      	adds	r3, r7, r6
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10f      	bne.n	80065aa <hdc1080_init+0xd6>
		HAL_I2C_Mem_Write(hi2c_hdc1080, HDC_1080_ADDR, Configuration_register_add, I2C_MEMADD_SIZE_8BIT, data_send, 2, 1000);
 800658a:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <hdc1080_init+0xe0>)
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	23fa      	movs	r3, #250	@ 0xfa
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	9302      	str	r3, [sp, #8]
 8006594:	2302      	movs	r3, #2
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	197b      	adds	r3, r7, r5
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	2301      	movs	r3, #1
 800659e:	2202      	movs	r2, #2
 80065a0:	2180      	movs	r1, #128	@ 0x80
 80065a2:	f002 feb3 	bl	800930c <HAL_I2C_Mem_Write>
		return true;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <hdc1080_init+0xd8>
	} else {
		return false;
 80065aa:	2300      	movs	r3, #0
	}
}
 80065ac:	0018      	movs	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b005      	add	sp, #20
 80065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b4:	200024b8 	.word	0x200024b8

080065b8 <hdc1080_start_measurement>:


int8_t hdc1080_start_measurement(float * temperature, float * humidity)	{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b089      	sub	sp, #36	@ 0x24
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]

	uint8_t receive_data[4];
	uint16_t temp_x, humi_x;
	uint8_t send_data = Temperature_register_add;
 80065c2:	210f      	movs	r1, #15
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(hi2c_hdc1080, HDC_1080_ADDR, &send_data, 1, 100);
 80065ca:	4b3a      	ldr	r3, [pc, #232]	@ (80066b4 <hdc1080_start_measurement+0xfc>)
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	187a      	adds	r2, r7, r1
 80065d0:	2364      	movs	r3, #100	@ 0x64
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2301      	movs	r3, #1
 80065d6:	2180      	movs	r1, #128	@ 0x80
 80065d8:	f002 fc66 	bl	8008ea8 <HAL_I2C_Master_Transmit>

 	vTaskDelay(20);
 80065dc:	2014      	movs	r0, #20
 80065de:	f00a f893 	bl	8010708 <vTaskDelay>

	/* Read temperature and humidity */
 	HAL_I2C_Master_Receive(hi2c_hdc1080, HDC_1080_ADDR, receive_data, 4, 100);
 80065e2:	4b34      	ldr	r3, [pc, #208]	@ (80066b4 <hdc1080_start_measurement+0xfc>)
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	2410      	movs	r4, #16
 80065e8:	193a      	adds	r2, r7, r4
 80065ea:	2364      	movs	r3, #100	@ 0x64
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	2304      	movs	r3, #4
 80065f0:	2180      	movs	r1, #128	@ 0x80
 80065f2:	f002 fd83 	bl	80090fc <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0] << 8) | receive_data[1]);
 80065f6:	0021      	movs	r1, r4
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	b21a      	sxth	r2, r3
 8006600:	187b      	adds	r3, r7, r1
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	b21b      	sxth	r3, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	b21a      	sxth	r2, r3
 800660a:	2016      	movs	r0, #22
 800660c:	183b      	adds	r3, r7, r0
 800660e:	801a      	strh	r2, [r3, #0]
	humi_x =((receive_data[2] << 8) | receive_data[3]);
 8006610:	187b      	adds	r3, r7, r1
 8006612:	789b      	ldrb	r3, [r3, #2]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	b21a      	sxth	r2, r3
 8006618:	187b      	adds	r3, r7, r1
 800661a:	78db      	ldrb	r3, [r3, #3]
 800661c:	b21b      	sxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b21a      	sxth	r2, r3
 8006622:	2414      	movs	r4, #20
 8006624:	193b      	adds	r3, r7, r4
 8006626:	801a      	strh	r2, [r3, #0]

	*temperature=((temp_x / 65536.0) * 165.0) - 40.0;
 8006628:	183b      	adds	r3, r7, r0
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	0018      	movs	r0, r3
 800662e:	f7fc fe67 	bl	8003300 <__aeabi_i2d>
 8006632:	2200      	movs	r2, #0
 8006634:	4b20      	ldr	r3, [pc, #128]	@ (80066b8 <hdc1080_start_measurement+0x100>)
 8006636:	f7fb fb5d 	bl	8001cf4 <__aeabi_ddiv>
 800663a:	0002      	movs	r2, r0
 800663c:	000b      	movs	r3, r1
 800663e:	0010      	movs	r0, r2
 8006640:	0019      	movs	r1, r3
 8006642:	2200      	movs	r2, #0
 8006644:	4b1d      	ldr	r3, [pc, #116]	@ (80066bc <hdc1080_start_measurement+0x104>)
 8006646:	f7fb ff99 	bl	800257c <__aeabi_dmul>
 800664a:	0002      	movs	r2, r0
 800664c:	000b      	movs	r3, r1
 800664e:	0010      	movs	r0, r2
 8006650:	0019      	movs	r1, r3
 8006652:	2200      	movs	r2, #0
 8006654:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <hdc1080_start_measurement+0x108>)
 8006656:	f7fc fa59 	bl	8002b0c <__aeabi_dsub>
 800665a:	0002      	movs	r2, r0
 800665c:	000b      	movs	r3, r1
 800665e:	0010      	movs	r0, r2
 8006660:	0019      	movs	r1, r3
 8006662:	f7fc fee7 	bl	8003434 <__aeabi_d2f>
 8006666:	1c02      	adds	r2, r0, #0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	601a      	str	r2, [r3, #0]
	*humidity=(uint8_t)((humi_x / 65536.0) * 100.0);
 800666c:	193b      	adds	r3, r7, r4
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	0018      	movs	r0, r3
 8006672:	f7fc fe45 	bl	8003300 <__aeabi_i2d>
 8006676:	2200      	movs	r2, #0
 8006678:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <hdc1080_start_measurement+0x100>)
 800667a:	f7fb fb3b 	bl	8001cf4 <__aeabi_ddiv>
 800667e:	0002      	movs	r2, r0
 8006680:	000b      	movs	r3, r1
 8006682:	0010      	movs	r0, r2
 8006684:	0019      	movs	r1, r3
 8006686:	2200      	movs	r2, #0
 8006688:	4b0e      	ldr	r3, [pc, #56]	@ (80066c4 <hdc1080_start_measurement+0x10c>)
 800668a:	f7fb ff77 	bl	800257c <__aeabi_dmul>
 800668e:	0002      	movs	r2, r0
 8006690:	000b      	movs	r3, r1
 8006692:	0010      	movs	r0, r2
 8006694:	0019      	movs	r1, r3
 8006696:	f7f9 ff79 	bl	800058c <__aeabi_d2uiz>
 800669a:	0003      	movs	r3, r0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	0018      	movs	r0, r3
 80066a0:	f7fa ff82 	bl	80015a8 <__aeabi_ui2f>
 80066a4:	1c02      	adds	r2, r0, #0
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	601a      	str	r2, [r3, #0]

	return true;
 80066aa:	2301      	movs	r3, #1
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b007      	add	sp, #28
 80066b2:	bd90      	pop	{r4, r7, pc}
 80066b4:	200024b8 	.word	0x200024b8
 80066b8:	40f00000 	.word	0x40f00000
 80066bc:	4064a000 	.word	0x4064a000
 80066c0:	40440000 	.word	0x40440000
 80066c4:	40590000 	.word	0x40590000

080066c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80066cc:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <MX_I2C2_Init+0x74>)
 80066ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006740 <MX_I2C2_Init+0x78>)
 80066d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80066d2:	4b1a      	ldr	r3, [pc, #104]	@ (800673c <MX_I2C2_Init+0x74>)
 80066d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006744 <MX_I2C2_Init+0x7c>)
 80066d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80066d8:	4b18      	ldr	r3, [pc, #96]	@ (800673c <MX_I2C2_Init+0x74>)
 80066da:	2200      	movs	r2, #0
 80066dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80066de:	4b17      	ldr	r3, [pc, #92]	@ (800673c <MX_I2C2_Init+0x74>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80066e4:	4b15      	ldr	r3, [pc, #84]	@ (800673c <MX_I2C2_Init+0x74>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80066ea:	4b14      	ldr	r3, [pc, #80]	@ (800673c <MX_I2C2_Init+0x74>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80066f0:	4b12      	ldr	r3, [pc, #72]	@ (800673c <MX_I2C2_Init+0x74>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80066f6:	4b11      	ldr	r3, [pc, #68]	@ (800673c <MX_I2C2_Init+0x74>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80066fc:	4b0f      	ldr	r3, [pc, #60]	@ (800673c <MX_I2C2_Init+0x74>)
 80066fe:	2200      	movs	r2, #0
 8006700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <MX_I2C2_Init+0x74>)
 8006704:	0018      	movs	r0, r3
 8006706:	f002 fb29 	bl	8008d5c <HAL_I2C_Init>
 800670a:	1e03      	subs	r3, r0, #0
 800670c:	d001      	beq.n	8006712 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800670e:	f000 fe2d 	bl	800736c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006712:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <MX_I2C2_Init+0x74>)
 8006714:	2100      	movs	r1, #0
 8006716:	0018      	movs	r0, r3
 8006718:	f003 fcf0 	bl	800a0fc <HAL_I2CEx_ConfigAnalogFilter>
 800671c:	1e03      	subs	r3, r0, #0
 800671e:	d001      	beq.n	8006724 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006720:	f000 fe24 	bl	800736c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <MX_I2C2_Init+0x74>)
 8006726:	2100      	movs	r1, #0
 8006728:	0018      	movs	r0, r3
 800672a:	f003 fd33 	bl	800a194 <HAL_I2CEx_ConfigDigitalFilter>
 800672e:	1e03      	subs	r3, r0, #0
 8006730:	d001      	beq.n	8006736 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006732:	f000 fe1b 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006736:	46c0      	nop			@ (mov r8, r8)
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	200024bc 	.word	0x200024bc
 8006740:	40005800 	.word	0x40005800
 8006744:	10707dbc 	.word	0x10707dbc

08006748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b08b      	sub	sp, #44	@ 0x2c
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006750:	2414      	movs	r4, #20
 8006752:	193b      	adds	r3, r7, r4
 8006754:	0018      	movs	r0, r3
 8006756:	2314      	movs	r3, #20
 8006758:	001a      	movs	r2, r3
 800675a:	2100      	movs	r1, #0
 800675c:	f00c fe46 	bl	80133ec <memset>
  if(i2cHandle->Instance==I2C2)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1b      	ldr	r2, [pc, #108]	@ (80067d4 <HAL_I2C_MspInit+0x8c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d130      	bne.n	80067cc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800676a:	4b1b      	ldr	r3, [pc, #108]	@ (80067d8 <HAL_I2C_MspInit+0x90>)
 800676c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <HAL_I2C_MspInit+0x90>)
 8006770:	2102      	movs	r1, #2
 8006772:	430a      	orrs	r2, r1
 8006774:	635a      	str	r2, [r3, #52]	@ 0x34
 8006776:	4b18      	ldr	r3, [pc, #96]	@ (80067d8 <HAL_I2C_MspInit+0x90>)
 8006778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677a:	2202      	movs	r2, #2
 800677c:	4013      	ands	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C2_SCL_Pin|SENSOR_I2C2_SDA_Pin;
 8006782:	193b      	adds	r3, r7, r4
 8006784:	22c0      	movs	r2, #192	@ 0xc0
 8006786:	01d2      	lsls	r2, r2, #7
 8006788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800678a:	0021      	movs	r1, r4
 800678c:	187b      	adds	r3, r7, r1
 800678e:	2212      	movs	r2, #18
 8006790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006792:	187b      	adds	r3, r7, r1
 8006794:	2200      	movs	r2, #0
 8006796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006798:	187b      	adds	r3, r7, r1
 800679a:	2200      	movs	r2, #0
 800679c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800679e:	187b      	adds	r3, r7, r1
 80067a0:	2206      	movs	r2, #6
 80067a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067a4:	187b      	adds	r3, r7, r1
 80067a6:	4a0d      	ldr	r2, [pc, #52]	@ (80067dc <HAL_I2C_MspInit+0x94>)
 80067a8:	0019      	movs	r1, r3
 80067aa:	0010      	movs	r0, r2
 80067ac:	f002 f91c 	bl	80089e8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80067b0:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <HAL_I2C_MspInit+0x90>)
 80067b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067b4:	4b08      	ldr	r3, [pc, #32]	@ (80067d8 <HAL_I2C_MspInit+0x90>)
 80067b6:	2180      	movs	r1, #128	@ 0x80
 80067b8:	03c9      	lsls	r1, r1, #15
 80067ba:	430a      	orrs	r2, r1
 80067bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_I2C_MspInit+0x90>)
 80067c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067c2:	2380      	movs	r3, #128	@ 0x80
 80067c4:	03db      	lsls	r3, r3, #15
 80067c6:	4013      	ands	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80067cc:	46c0      	nop			@ (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b00b      	add	sp, #44	@ 0x2c
 80067d2:	bd90      	pop	{r4, r7, pc}
 80067d4:	40005800 	.word	0x40005800
 80067d8:	40021000 	.word	0x40021000
 80067dc:	50000400 	.word	0x50000400

080067e0 <DATA_RATE_TO_TIME>:
	}

	return range_value;
}

float DATA_RATE_TO_TIME(data_rate_t data_rate) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	0002      	movs	r2, r0
 80067e8:	1dfb      	adds	r3, r7, #7
 80067ea:	701a      	strb	r2, [r3, #0]
	float integral_factor = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]

	switch(data_rate) {
 80067f0:	1dfb      	adds	r3, r7, #7
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d008      	beq.n	800680a <DATA_RATE_TO_TIME+0x2a>
 80067f8:	dc14      	bgt.n	8006824 <DATA_RATE_TO_TIME+0x44>
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d00f      	beq.n	800681e <DATA_RATE_TO_TIME+0x3e>
 80067fe:	dc11      	bgt.n	8006824 <DATA_RATE_TO_TIME+0x44>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <DATA_RATE_TO_TIME+0x38>
 8006804:	2b01      	cmp	r3, #1
 8006806:	d004      	beq.n	8006812 <DATA_RATE_TO_TIME+0x32>
 8006808:	e00c      	b.n	8006824 <DATA_RATE_TO_TIME+0x44>
	case DATA_RATE_1000:
		integral_factor = 1;
 800680a:	23fe      	movs	r3, #254	@ 0xfe
 800680c:	059b      	lsls	r3, r3, #22
 800680e:	60fb      	str	r3, [r7, #12]
		break;
 8006810:	e008      	b.n	8006824 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_100:
		integral_factor = 10;
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <DATA_RATE_TO_TIME+0x50>)
 8006814:	60fb      	str	r3, [r7, #12]
		break;
 8006816:	e005      	b.n	8006824 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_50:
		integral_factor = 20;
 8006818:	4b06      	ldr	r3, [pc, #24]	@ (8006834 <DATA_RATE_TO_TIME+0x54>)
 800681a:	60fb      	str	r3, [r7, #12]
		break;
 800681c:	e002      	b.n	8006824 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_400:
		integral_factor = 2.5;
 800681e:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <DATA_RATE_TO_TIME+0x58>)
 8006820:	60fb      	str	r3, [r7, #12]
		break;
 8006822:	46c0      	nop			@ (mov r8, r8)
	}

	return integral_factor;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	1c18      	adds	r0, r3, #0
 8006828:	46bd      	mov	sp, r7
 800682a:	b004      	add	sp, #16
 800682c:	bd80      	pop	{r7, pc}
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	41200000 	.word	0x41200000
 8006834:	41a00000 	.word	0x41a00000
 8006838:	40200000 	.word	0x40200000

0800683c <_Z11chip_selectP11lis331dlh_t>:

void chip_select(lis331dlh_t * config) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_RESET);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6898      	ldr	r0, [r3, #8]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	899b      	ldrh	r3, [r3, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	0019      	movs	r1, r3
 8006850:	f002 fa4b 	bl	8008cea <HAL_GPIO_WritePin>
}
 8006854:	46c0      	nop			@ (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	b002      	add	sp, #8
 800685a:	bd80      	pop	{r7, pc}

0800685c <_Z13chip_deselectP11lis331dlh_t>:


void chip_deselect(lis331dlh_t * config) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_SET);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6898      	ldr	r0, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	899b      	ldrh	r3, [r3, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	0019      	movs	r1, r3
 8006870:	f002 fa3b 	bl	8008cea <HAL_GPIO_WritePin>
}
 8006874:	46c0      	nop			@ (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}

0800687c <_Z13read_registerP11lis331dlh_thPhh>:


void read_register(
	lis331dlh_t * config, uint8_t address,
	uint8_t * for_receive, uint8_t receive_length = 1
) {
 800687c:	b5b0      	push	{r4, r5, r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af02      	add	r7, sp, #8
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	0008      	movs	r0, r1
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	0019      	movs	r1, r3
 800688a:	240b      	movs	r4, #11
 800688c:	193b      	adds	r3, r7, r4
 800688e:	1c02      	adds	r2, r0, #0
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	250a      	movs	r5, #10
 8006894:	197b      	adds	r3, r7, r5
 8006896:	1c0a      	adds	r2, r1, #0
 8006898:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <_Z13read_registerP11lis331dlh_thPhh+0x68>
		chip_select(config);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7ff ffc9 	bl	800683c <_Z11chip_selectP11lis331dlh_t>

		address |= 0xC0;
 80068aa:	193b      	adds	r3, r7, r4
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2240      	movs	r2, #64	@ 0x40
 80068b0:	4252      	negs	r2, r2
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	193b      	adds	r3, r7, r4
 80068b8:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	1939      	adds	r1, r7, r4
 80068c0:	2364      	movs	r3, #100	@ 0x64
 80068c2:	2201      	movs	r2, #1
 80068c4:	f004 fe28 	bl	800b518 <HAL_SPI_Transmit>
		HAL_SPI_Receive(config->spi, for_receive, receive_length, 100);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	197b      	adds	r3, r7, r5
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	2364      	movs	r3, #100	@ 0x64
 80068d6:	f004 ff7f 	bl	800b7d8 <HAL_SPI_Receive>

		chip_deselect(config);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	0018      	movs	r0, r3
 80068de:	f7ff ffbd 	bl	800685c <_Z13chip_deselectP11lis331dlh_t>
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
//			HAL_Delay(1);
		}
	}
}
 80068e2:	e031      	b.n	8006948 <_Z13read_registerP11lis331dlh_thPhh+0xcc>
		for (uint8_t i = 0; i < receive_length; ++i) {
 80068e4:	2317      	movs	r3, #23
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e024      	b.n	8006938 <_Z13read_registerP11lis331dlh_thPhh+0xbc>
			uint8_t current = address++;
 80068ee:	200b      	movs	r0, #11
 80068f0:	183b      	adds	r3, r7, r0
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	b2d1      	uxtb	r1, r2
 80068f8:	183a      	adds	r2, r7, r0
 80068fa:	7011      	strb	r1, [r2, #0]
 80068fc:	2116      	movs	r1, #22
 80068fe:	187a      	adds	r2, r7, r1
 8006900:	7013      	strb	r3, [r2, #0]
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6858      	ldr	r0, [r3, #4]
 8006906:	187a      	adds	r2, r7, r1
 8006908:	2332      	movs	r3, #50	@ 0x32
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	2301      	movs	r3, #1
 800690e:	2132      	movs	r1, #50	@ 0x32
 8006910:	f002 faca 	bl	8008ea8 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6858      	ldr	r0, [r3, #4]
 8006918:	2417      	movs	r4, #23
 800691a:	193b      	adds	r3, r7, r4
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	18d2      	adds	r2, r2, r3
 8006922:	2332      	movs	r3, #50	@ 0x32
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	2301      	movs	r3, #1
 8006928:	2132      	movs	r1, #50	@ 0x32
 800692a:	f002 fbe7 	bl	80090fc <HAL_I2C_Master_Receive>
		for (uint8_t i = 0; i < receive_length; ++i) {
 800692e:	193b      	adds	r3, r7, r4
 8006930:	193a      	adds	r2, r7, r4
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	3201      	adds	r2, #1
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	2317      	movs	r3, #23
 800693a:	18fa      	adds	r2, r7, r3
 800693c:	230a      	movs	r3, #10
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d3d2      	bcc.n	80068ee <_Z13read_registerP11lis331dlh_thPhh+0x72>
}
 8006948:	46c0      	nop			@ (mov r8, r8)
 800694a:	46bd      	mov	sp, r7
 800694c:	b006      	add	sp, #24
 800694e:	bdb0      	pop	{r4, r5, r7, pc}

08006950 <_Z14write_registerP11lis331dlh_thh>:


void write_register(lis331dlh_t * config, uint8_t address, uint8_t value) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af02      	add	r7, sp, #8
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	0008      	movs	r0, r1
 800695a:	0011      	movs	r1, r2
 800695c:	1cfb      	adds	r3, r7, #3
 800695e:	1c02      	adds	r2, r0, #0
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	1cbb      	adds	r3, r7, #2
 8006964:	1c0a      	adds	r2, r1, #0
 8006966:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d016      	beq.n	800699e <_Z14write_registerP11lis331dlh_thh+0x4e>
		chip_select(config);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff ff62 	bl	800683c <_Z11chip_selectP11lis331dlh_t>

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	1cf9      	adds	r1, r7, #3
 800697e:	2364      	movs	r3, #100	@ 0x64
 8006980:	2201      	movs	r2, #1
 8006982:	f004 fdc9 	bl	800b518 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(config->spi, &value, 1, 10);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	1cb9      	adds	r1, r7, #2
 800698c:	230a      	movs	r3, #10
 800698e:	2201      	movs	r2, #1
 8006990:	f004 fdc2 	bl	800b518 <HAL_SPI_Transmit>

		chip_deselect(config);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0018      	movs	r0, r3
 8006998:	f7ff ff60 	bl	800685c <_Z13chip_deselectP11lis331dlh_t>
	}
	else {
		uint8_t buffer[] = { address, value };
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
	}
}
 800699c:	e011      	b.n	80069c2 <_Z14write_registerP11lis331dlh_thh+0x72>
		uint8_t buffer[] = { address, value };
 800699e:	1cfb      	adds	r3, r7, #3
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	210c      	movs	r1, #12
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	1cbb      	adds	r3, r7, #2
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	187b      	adds	r3, r7, r1
 80069ae:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6858      	ldr	r0, [r3, #4]
 80069b4:	187a      	adds	r2, r7, r1
 80069b6:	2364      	movs	r3, #100	@ 0x64
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2302      	movs	r3, #2
 80069bc:	2132      	movs	r1, #50	@ 0x32
 80069be:	f002 fa73 	bl	8008ea8 <HAL_I2C_Master_Transmit>
}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b004      	add	sp, #16
 80069c8:	bd80      	pop	{r7, pc}

080069ca <_Z24lis331dlh_check_presenceP11lis331dlh_t>:

int lis331dlh_check_presence(lis331dlh_t * config) {
 80069ca:	b590      	push	{r4, r7, lr}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]

	uint8_t lis331_who_am_i_contents;

	read_register(config, WHO_AM_I, &lis331_who_am_i_contents);
 80069d2:	240f      	movs	r4, #15
 80069d4:	193a      	adds	r2, r7, r4
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	2301      	movs	r3, #1
 80069da:	210f      	movs	r1, #15
 80069dc:	f7ff ff4e 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>

	return(lis331_who_am_i_contents != WHO_AM_I_VALUE);
 80069e0:	193b      	adds	r3, r7, r4
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	3b32      	subs	r3, #50	@ 0x32
 80069e6:	1e5a      	subs	r2, r3, #1
 80069e8:	4193      	sbcs	r3, r2
 80069ea:	b2db      	uxtb	r3, r3
}
 80069ec:	0018      	movs	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b005      	add	sp, #20
 80069f2:	bd90      	pop	{r4, r7, pc}

080069f4 <_Z14lis331dlh_initP11lis331dlh_t>:

int lis331dlh_init(lis331dlh_t * config) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

	if(lis331dlh_check_presence(config)) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7ff ffe3 	bl	80069ca <_Z24lis331dlh_check_presenceP11lis331dlh_t>
 8006a04:	0003      	movs	r3, r0
 8006a06:	1e5a      	subs	r2, r3, #1
 8006a08:	4193      	sbcs	r3, r2
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <_Z14lis331dlh_initP11lis331dlh_t+0x20>
		return 1;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e04a      	b.n	8006aaa <_Z14lis331dlh_initP11lis331dlh_t+0xb6>
	}

	config->range_factor = DATA_RATE_TO_TIME(config->data_rate);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7b9b      	ldrb	r3, [r3, #14]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f7ff fee1 	bl	80067e0 <DATA_RATE_TO_TIME>
 8006a1e:	1c02      	adds	r2, r0, #0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	611a      	str	r2, [r3, #16]

	lis331dlh_update_config(config);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 f989 	bl	8006d3e <lis331dlh_update_config>

//	config->control_registers[0] &= !(0b11 << 3);
//	config->control_registers[0] |= 0x27 | (config->data_rate << 3);

	config->control_registers[0] = 0x27 | (config->data_rate << 3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	7b9b      	ldrb	r3, [r3, #14]
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	b25b      	sxtb	r3, r3
 8006a34:	2227      	movs	r2, #39	@ 0x27
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	759a      	strb	r2, [r3, #22]

//	config->control_registers[1] &= !(0b10011);
//	config->control_registers[1] |= (0 << 4) | 0b00;

	config->control_registers[1] = 0;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	75da      	strb	r2, [r3, #23]

//	config->control_registers[3] &= !(0b11 << 5);
//	config->control_registers[3] |= (config->range << 4) | (1 << 7);

	config->control_registers[3] = (config->range << 4) | (1 << 7);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7bdb      	ldrb	r3, [r3, #15]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	2280      	movs	r2, #128	@ 0x80
 8006a50:	4252      	negs	r2, r2
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	765a      	strb	r2, [r3, #25]

	write_register(config, CTRL_REG1, config->control_registers[0]);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	7d9a      	ldrb	r2, [r3, #22]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2120      	movs	r1, #32
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff ff73 	bl	8006950 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG2, config->control_registers[1]);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7dda      	ldrb	r2, [r3, #23]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2121      	movs	r1, #33	@ 0x21
 8006a72:	0018      	movs	r0, r3
 8006a74:	f7ff ff6c 	bl	8006950 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG3, config->control_registers[2]);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7e1a      	ldrb	r2, [r3, #24]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2122      	movs	r1, #34	@ 0x22
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7ff ff65 	bl	8006950 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG4, config->control_registers[3]);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	7e5a      	ldrb	r2, [r3, #25]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2123      	movs	r1, #35	@ 0x23
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7ff ff5e 	bl	8006950 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG5, config->control_registers[4]);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7e9a      	ldrb	r2, [r3, #26]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2124      	movs	r1, #36	@ 0x24
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7ff ff57 	bl	8006950 <_Z14write_registerP11lis331dlh_thh>

	HAL_Delay(10);
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	f001 fc1c 	bl	80082e0 <HAL_Delay>

	return 0;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	0018      	movs	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b002      	add	sp, #8
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <lis331dlh_init_spi>:

int lis331dlh_init_spi(
		lis331dlh_t * config,  SPI_HandleTypeDef * spi,
		GPIO_TypeDef * port, uint16_t pin
) {
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	1cbb      	adds	r3, r7, #2
 8006ac4:	801a      	strh	r2, [r3, #0]
	config->spi = spi;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	601a      	str	r2, [r3, #0]
	config->chip_select_port = port;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	609a      	str	r2, [r3, #8]
	config->chip_select_pin = pin;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1cba      	adds	r2, r7, #2
 8006ad6:	8812      	ldrh	r2, [r2, #0]
 8006ad8:	819a      	strh	r2, [r3, #12]



	if(lis331dlh_init(config)) {
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	0018      	movs	r0, r3
 8006ade:	f7ff ff89 	bl	80069f4 <_Z14lis331dlh_initP11lis331dlh_t>
 8006ae2:	0003      	movs	r3, r0
 8006ae4:	1e5a      	subs	r2, r3, #1
 8006ae6:	4193      	sbcs	r3, r2
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <lis331dlh_init_spi+0x3e>
		return 1;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e06b      	b.n	8006bca <lis331dlh_init_spi+0x116>
	}

	int16_t x,y,z;

	lis331dlh_update_accelaration_local(config, &x, &y, &z);
 8006af2:	2512      	movs	r5, #18
 8006af4:	197b      	adds	r3, r7, r5
 8006af6:	2614      	movs	r6, #20
 8006af8:	19ba      	adds	r2, r7, r6
 8006afa:	2416      	movs	r4, #22
 8006afc:	1939      	adds	r1, r7, r4
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f8d6 	bl	8006cb0 <lis331dlh_update_accelaration_local>

	x = abs(x);
 8006b04:	0021      	movs	r1, r4
 8006b06:	187b      	adds	r3, r7, r1
 8006b08:	2200      	movs	r2, #0
 8006b0a:	5e9b      	ldrsh	r3, [r3, r2]
 8006b0c:	17da      	asrs	r2, r3, #31
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	4053      	eors	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b21a      	sxth	r2, r3
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	801a      	strh	r2, [r3, #0]

	y = abs(y);
 8006b1a:	0030      	movs	r0, r6
 8006b1c:	183b      	adds	r3, r7, r0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	5e9b      	ldrsh	r3, [r3, r2]
 8006b22:	17da      	asrs	r2, r3, #31
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	4053      	eors	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	b21a      	sxth	r2, r3
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	801a      	strh	r2, [r3, #0]

	z = abs(z);
 8006b30:	197b      	adds	r3, r7, r5
 8006b32:	2200      	movs	r2, #0
 8006b34:	5e9b      	ldrsh	r3, [r3, r2]
 8006b36:	17da      	asrs	r2, r3, #31
 8006b38:	189b      	adds	r3, r3, r2
 8006b3a:	4053      	eors	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	b21a      	sxth	r2, r3
 8006b40:	197b      	adds	r3, r7, r5
 8006b42:	801a      	strh	r2, [r3, #0]

	config->axis_select_x_z =  (x >= y && x >= z) ? AXIS_X :
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	2200      	movs	r2, #0
 8006b48:	5e9a      	ldrsh	r2, [r3, r2]
 8006b4a:	183b      	adds	r3, r7, r0
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	5e1b      	ldrsh	r3, [r3, r0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	db07      	blt.n	8006b64 <lis331dlh_init_spi+0xb0>
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	2200      	movs	r2, #0
 8006b58:	5e9a      	ldrsh	r2, [r3, r2]
 8006b5a:	197b      	adds	r3, r7, r5
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	5e5b      	ldrsh	r3, [r3, r1]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	da16      	bge.n	8006b92 <lis331dlh_init_spi+0xde>
							  ((y >= x && y >= z) ? AXIS_Y :
 8006b64:	2114      	movs	r1, #20
 8006b66:	187b      	adds	r3, r7, r1
 8006b68:	2200      	movs	r2, #0
 8006b6a:	5e9a      	ldrsh	r2, [r3, r2]
 8006b6c:	2316      	movs	r3, #22
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	2000      	movs	r0, #0
 8006b72:	5e1b      	ldrsh	r3, [r3, r0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	db0a      	blt.n	8006b8e <lis331dlh_init_spi+0xda>
 8006b78:	187b      	adds	r3, r7, r1
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	5e9a      	ldrsh	r2, [r3, r2]
 8006b7e:	2312      	movs	r3, #18
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	2100      	movs	r1, #0
 8006b84:	5e5b      	ldrsh	r3, [r3, r1]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	db01      	blt.n	8006b8e <lis331dlh_init_spi+0xda>
 8006b8a:	2302      	movs	r3, #2
	config->axis_select_x_z =  (x >= y && x >= z) ? AXIS_X :
 8006b8c:	e002      	b.n	8006b94 <lis331dlh_init_spi+0xe0>
							  ((y >= x && y >= z) ? AXIS_Y :
 8006b8e:	2300      	movs	r3, #0
	config->axis_select_x_z =  (x >= y && x >= z) ? AXIS_X :
 8006b90:	e000      	b.n	8006b94 <lis331dlh_init_spi+0xe0>
 8006b92:	2301      	movs	r3, #1
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	7513      	strb	r3, [r2, #20]
							  AXIS_Z);

	if(config->axis_select_x_z == AXIS_X) {
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	7d1b      	ldrb	r3, [r3, #20]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d103      	bne.n	8006ba8 <lis331dlh_init_spi+0xf4>
		debug("AXIS SELECTED: X\r\n");
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <lis331dlh_init_spi+0x120>)
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7ff f9fc 	bl	8005fa0 <debug>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	7d1b      	ldrb	r3, [r3, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <lis331dlh_init_spi+0x104>
		debug("AXIS SELECTED: Z\r\n");
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <lis331dlh_init_spi+0x124>)
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7ff f9f4 	bl	8005fa0 <debug>
	}

	if(config->axis_select_x_z == AXIS_Y) {
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	7d1b      	ldrb	r3, [r3, #20]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d103      	bne.n	8006bc8 <lis331dlh_init_spi+0x114>
		debug("AXIS SELECTED: Y\r\n");
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <lis331dlh_init_spi+0x128>)
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7ff f9ec 	bl	8005fa0 <debug>
	}

	return 0;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	0018      	movs	r0, r3
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	b007      	add	sp, #28
 8006bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	08017284 	.word	0x08017284
 8006bd8:	08017298 	.word	0x08017298
 8006bdc:	080172ac 	.word	0x080172ac

08006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>:

	return 0;
}


inline int16_t get_scaled_accelaration(uint8_t low_byte, uint8_t high_byte, acceleration_range_t range) {
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	0004      	movs	r4, r0
 8006be8:	0008      	movs	r0, r1
 8006bea:	0011      	movs	r1, r2
 8006bec:	1dfb      	adds	r3, r7, #7
 8006bee:	1c22      	adds	r2, r4, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	1dbb      	adds	r3, r7, #6
 8006bf4:	1c02      	adds	r2, r0, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	1d7b      	adds	r3, r7, #5
 8006bfa:	1c0a      	adds	r2, r1, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
	return static_cast<int16_t>(high_byte << 8 | low_byte); 		// 12 бит число представлено в виде
 8006bfe:	1dbb      	adds	r3, r7, #6
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	b21a      	sxth	r2, r3
 8006c06:	1dfb      	adds	r3, r7, #7
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b21b      	sxth	r3, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b21b      	sxth	r3, r3
																	// 16 бит и младшие 4 бита - нулевые
}
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b003      	add	sp, #12
 8006c16:	bd90      	pop	{r4, r7, pc}

08006c18 <lis331dlh_update_accelaration>:

int lis331dlh_update_accelaration(lis331dlh_t * config) {
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	read_register(config, OUT_X_L, &config->out_x_low, 6);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	331d      	adds	r3, #29
 8006c24:	001a      	movs	r2, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	2306      	movs	r3, #6
 8006c2a:	2128      	movs	r1, #40	@ 0x28
 8006c2c:	f7ff fe26 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>

	config->accelarations = {
		HAL_GetTick(),
 8006c30:	f001 fb4c 	bl	80082cc <HAL_GetTick>
 8006c34:	0004      	movs	r4, r0
		get_scaled_accelaration(config->out_x_low, config->out_x_high, config->range) / 16,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7f58      	ldrb	r0, [r3, #29]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	7f99      	ldrb	r1, [r3, #30]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	7bdb      	ldrb	r3, [r3, #15]
 8006c42:	001a      	movs	r2, r3
 8006c44:	f7ff ffcc 	bl	8006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	da00      	bge.n	8006c4e <lis331dlh_update_accelaration+0x36>
 8006c4c:	330f      	adds	r3, #15
 8006c4e:	111b      	asrs	r3, r3, #4
 8006c50:	b21b      	sxth	r3, r3
 8006c52:	001e      	movs	r6, r3
		get_scaled_accelaration(config->out_y_low, config->out_y_high, config->range) / 16,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7fd8      	ldrb	r0, [r3, #31]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	5c99      	ldrb	r1, [r3, r2]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7bdb      	ldrb	r3, [r3, #15]
 8006c62:	001a      	movs	r2, r3
 8006c64:	f7ff ffbc 	bl	8006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006c68:	1e03      	subs	r3, r0, #0
 8006c6a:	da00      	bge.n	8006c6e <lis331dlh_update_accelaration+0x56>
 8006c6c:	330f      	adds	r3, #15
 8006c6e:	111b      	asrs	r3, r3, #4
 8006c70:	b21b      	sxth	r3, r3
 8006c72:	001d      	movs	r5, r3
		get_scaled_accelaration(config->out_z_low, config->out_z_high, config->range) / 16,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2221      	movs	r2, #33	@ 0x21
 8006c78:	5c98      	ldrb	r0, [r3, r2]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2222      	movs	r2, #34	@ 0x22
 8006c7e:	5c99      	ldrb	r1, [r3, r2]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7bdb      	ldrb	r3, [r3, #15]
 8006c84:	001a      	movs	r2, r3
 8006c86:	f7ff ffab 	bl	8006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006c8a:	1e03      	subs	r3, r0, #0
 8006c8c:	da00      	bge.n	8006c90 <lis331dlh_update_accelaration+0x78>
 8006c8e:	330f      	adds	r3, #15
 8006c90:	111b      	asrs	r3, r3, #4
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	001a      	movs	r2, r3
	config->accelarations = {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	62dc      	str	r4, [r3, #44]	@ 0x2c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	631e      	str	r6, [r3, #48]	@ 0x30
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	635d      	str	r5, [r3, #52]	@ 0x34
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	@ 0x38
	};

	return 0;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	0018      	movs	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	b003      	add	sp, #12
 8006cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cb0 <lis331dlh_update_accelaration_local>:


int lis331dlh_update_accelaration_local(lis331dlh_t * config, int16_t *x, int16_t *y, int16_t *z) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
	read_register(config, OUT_X_L, &config->out_x_low, 6);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	331d      	adds	r3, #29
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	2306      	movs	r3, #6
 8006cc8:	2128      	movs	r1, #40	@ 0x28
 8006cca:	f7ff fdd7 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>

	*x = get_scaled_accelaration(config->out_x_low, config->out_x_high, config->range) / 16;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	7f58      	ldrb	r0, [r3, #29]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	7f99      	ldrb	r1, [r3, #30]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	7bdb      	ldrb	r3, [r3, #15]
 8006cda:	001a      	movs	r2, r3
 8006cdc:	f7ff ff80 	bl	8006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006ce0:	1e03      	subs	r3, r0, #0
 8006ce2:	da00      	bge.n	8006ce6 <lis331dlh_update_accelaration_local+0x36>
 8006ce4:	330f      	adds	r3, #15
 8006ce6:	111b      	asrs	r3, r3, #4
 8006ce8:	b21a      	sxth	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	801a      	strh	r2, [r3, #0]
	*y = get_scaled_accelaration(config->out_y_low, config->out_y_high, config->range) / 16;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	7fd8      	ldrb	r0, [r3, #31]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	5c99      	ldrb	r1, [r3, r2]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	7bdb      	ldrb	r3, [r3, #15]
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	f7ff ff6f 	bl	8006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	da00      	bge.n	8006d08 <lis331dlh_update_accelaration_local+0x58>
 8006d06:	330f      	adds	r3, #15
 8006d08:	111b      	asrs	r3, r3, #4
 8006d0a:	b21a      	sxth	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	801a      	strh	r2, [r3, #0]
	*z = get_scaled_accelaration(config->out_z_low, config->out_z_high, config->range) / 16;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2221      	movs	r2, #33	@ 0x21
 8006d14:	5c98      	ldrb	r0, [r3, r2]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2222      	movs	r2, #34	@ 0x22
 8006d1a:	5c99      	ldrb	r1, [r3, r2]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	7bdb      	ldrb	r3, [r3, #15]
 8006d20:	001a      	movs	r2, r3
 8006d22:	f7ff ff5d 	bl	8006be0 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006d26:	1e03      	subs	r3, r0, #0
 8006d28:	da00      	bge.n	8006d2c <lis331dlh_update_accelaration_local+0x7c>
 8006d2a:	330f      	adds	r3, #15
 8006d2c:	111b      	asrs	r3, r3, #4
 8006d2e:	b21a      	sxth	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	801a      	strh	r2, [r3, #0]

	return 0;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	0018      	movs	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b004      	add	sp, #16
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <lis331dlh_update_config>:


void lis331dlh_update_config(lis331dlh_t * config) {
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
	read_register(config, WHO_AM_I, &config->device_id);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3315      	adds	r3, #21
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	2301      	movs	r3, #1
 8006d50:	210f      	movs	r1, #15
 8006d52:	f7ff fd93 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, STATUS_REG, &config->status_register);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	331c      	adds	r3, #28
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	2127      	movs	r1, #39	@ 0x27
 8006d62:	f7ff fd8b 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>

	read_register(config, CTRL_REG1, (uint8_t *)&config->control_registers,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3316      	adds	r3, #22
 8006d6a:	001a      	movs	r2, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	2305      	movs	r3, #5
 8006d70:	2120      	movs	r1, #32
 8006d72:	f7ff fd83 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>
			sizeof(config->control_registers));

	read_register(config, INT1_CFG, (uint8_t *)&config->interrupt_1, sizeof(interrupt_register_t));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3323      	adds	r3, #35	@ 0x23
 8006d7a:	001a      	movs	r2, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	2304      	movs	r3, #4
 8006d80:	2130      	movs	r1, #48	@ 0x30
 8006d82:	f7ff fd7b 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, INT2_CFG, (uint8_t *)&config->interrupt_2, sizeof(interrupt_register_t));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3327      	adds	r3, #39	@ 0x27
 8006d8a:	001a      	movs	r2, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	2304      	movs	r3, #4
 8006d90:	2134      	movs	r1, #52	@ 0x34
 8006d92:	f7ff fd73 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>
}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b002      	add	sp, #8
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <lis331dlh_read_status>:


uint8_t lis331dlh_read_status(lis331dlh_t * config) {
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
	read_register(config, STATUS_REG, &config->status_register);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	331c      	adds	r3, #28
 8006daa:	001a      	movs	r2, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	2301      	movs	r3, #1
 8006db0:	2127      	movs	r1, #39	@ 0x27
 8006db2:	f7ff fd63 	bl	800687c <_Z13read_registerP11lis331dlh_thPhh>
	return config->status_register;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7f1b      	ldrb	r3, [r3, #28]
}
 8006dba:	0018      	movs	r0, r3
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <_Z15SENSOR_IO_Writehhh>:

#include "lps22.h"

I2C_HandleTypeDef * i2c;

void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value){
 8006dc4:	b590      	push	{r4, r7, lr}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	0004      	movs	r4, r0
 8006dcc:	0008      	movs	r0, r1
 8006dce:	0011      	movs	r1, r2
 8006dd0:	1dfb      	adds	r3, r7, #7
 8006dd2:	1c22      	adds	r2, r4, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	1dbb      	adds	r3, r7, #6
 8006dd8:	1c02      	adds	r2, r0, #0
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	1d7b      	adds	r3, r7, #5
 8006dde:	1c0a      	adds	r2, r1, #0
 8006de0:	701a      	strb	r2, [r3, #0]

	uint8_t data[] = {Reg, Value};
 8006de2:	240c      	movs	r4, #12
 8006de4:	193b      	adds	r3, r7, r4
 8006de6:	1dba      	adds	r2, r7, #6
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	193b      	adds	r3, r7, r4
 8006dee:	1d7a      	adds	r2, r7, #5
 8006df0:	7812      	ldrb	r2, [r2, #0]
 8006df2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(SENSORS_I2C, Addr, data, 2, 100);
 8006df4:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <_Z15SENSOR_IO_Writehhh+0x50>)
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	1dfb      	adds	r3, r7, #7
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b299      	uxth	r1, r3
 8006dfe:	193a      	adds	r2, r7, r4
 8006e00:	2364      	movs	r3, #100	@ 0x64
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	2302      	movs	r3, #2
 8006e06:	f002 f84f 	bl	8008ea8 <HAL_I2C_Master_Transmit>
}
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b005      	add	sp, #20
 8006e10:	bd90      	pop	{r4, r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	20000060 	.word	0x20000060

08006e18 <_Z14SENSOR_IO_ReadhhPh>:

uint8_t  SENSOR_IO_Read(uint8_t Addr, uint8_t Reg, uint8_t* state = NULL){
 8006e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e1a:	b089      	sub	sp, #36	@ 0x24
 8006e1c:	af04      	add	r7, sp, #16
 8006e1e:	603a      	str	r2, [r7, #0]
 8006e20:	1dfb      	adds	r3, r7, #7
 8006e22:	1c02      	adds	r2, r0, #0
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	1dbb      	adds	r3, r7, #6
 8006e28:	1c0a      	adds	r2, r1, #0
 8006e2a:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 8006e2c:	250e      	movs	r5, #14
 8006e2e:	197b      	adds	r3, r7, r5
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
	uint8_t st = HAL_I2C_Mem_Read(SENSORS_I2C, Addr, Reg, 1, &data, 1, 100);
 8006e34:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <_Z14SENSOR_IO_ReadhhPh+0x6c>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	1dfb      	adds	r3, r7, #7
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b299      	uxth	r1, r3
 8006e3e:	1dbb      	adds	r3, r7, #6
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	260f      	movs	r6, #15
 8006e46:	19bc      	adds	r4, r7, r6
 8006e48:	2364      	movs	r3, #100	@ 0x64
 8006e4a:	9302      	str	r3, [sp, #8]
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	197b      	adds	r3, r7, r5
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	2301      	movs	r3, #1
 8006e56:	f002 fb87 	bl	8009568 <HAL_I2C_Mem_Read>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	7023      	strb	r3, [r4, #0]

	if(state != NULL) *state = (st == HAL_OK);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <_Z14SENSOR_IO_ReadhhPh+0x5c>
 8006e64:	19bb      	adds	r3, r7, r6
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	425a      	negs	r2, r3
 8006e6a:	4153      	adcs	r3, r2
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	001a      	movs	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	701a      	strb	r2, [r3, #0]

	return data;
 8006e74:	230e      	movs	r3, #14
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	781b      	ldrb	r3, [r3, #0]
}
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b005      	add	sp, #20
 8006e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e82:	46c0      	nop			@ (mov r8, r8)
 8006e84:	20000060 	.word	0x20000060

08006e88 <lps22hb_init>:

bool lps22hb_init(I2C_HandleTypeDef * i2c_handler){
 8006e88:	b5b0      	push	{r4, r5, r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

	i2c = i2c_handler;
 8006e90:	4b34      	ldr	r3, [pc, #208]	@ (8006f64 <lps22hb_init+0xdc>)
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(i2c, LPS_LOWER_ADDRESS, 3, 1000) != HAL_OK) return false;
 8006e96:	4b33      	ldr	r3, [pc, #204]	@ (8006f64 <lps22hb_init+0xdc>)
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	23fa      	movs	r3, #250	@ 0xfa
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	21b8      	movs	r1, #184	@ 0xb8
 8006ea2:	f002 fc95 	bl	80097d0 <HAL_I2C_IsDeviceReady>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	4193      	sbcs	r3, r2
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <lps22hb_init+0x2e>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e052      	b.n	8006f5c <lps22hb_init+0xd4>

	uint8_t tmp;

	/* Set Power mode */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_RES_CONF_REG);
 8006eb6:	250f      	movs	r5, #15
 8006eb8:	197c      	adds	r4, r7, r5
 8006eba:	2200      	movs	r2, #0
 8006ebc:	211a      	movs	r1, #26
 8006ebe:	20b8      	movs	r0, #184	@ 0xb8
 8006ec0:	f7ff ffaa 	bl	8006e18 <_Z14SENSOR_IO_ReadhhPh>
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	7023      	strb	r3, [r4, #0]

	tmp &= ~LPS22HB_LCEN_MASK;
 8006ec8:	0028      	movs	r0, r5
 8006eca:	183b      	adds	r3, r7, r0
 8006ecc:	183a      	adds	r2, r7, r0
 8006ece:	7812      	ldrb	r2, [r2, #0]
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	438a      	bics	r2, r1
 8006ed4:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x01; /* Set low current mode */
 8006ed6:	183b      	adds	r3, r7, r0
 8006ed8:	183a      	adds	r2, r7, r0
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	2101      	movs	r1, #1
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	701a      	strb	r2, [r3, #0]

	/* Read CTRL_REG1 */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1);
 8006ee2:	0005      	movs	r5, r0
 8006ee4:	183c      	adds	r4, r7, r0
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2110      	movs	r1, #16
 8006eea:	20b8      	movs	r0, #184	@ 0xb8
 8006eec:	f7ff ff94 	bl	8006e18 <_Z14SENSOR_IO_ReadhhPh>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	7023      	strb	r3, [r4, #0]

	/* Set default ODR */
	tmp &= ~LPS22HB_ODR_MASK;
 8006ef4:	0028      	movs	r0, r5
 8006ef6:	183b      	adds	r3, r7, r0
 8006ef8:	183a      	adds	r2, r7, r0
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	2170      	movs	r1, #112	@ 0x70
 8006efe:	438a      	bics	r2, r1
 8006f00:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x20; /* Set ODR to 10Hz */
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	183a      	adds	r2, r7, r0
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	2120      	movs	r1, #32
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	701a      	strb	r2, [r3, #0]

	/* Enable BDU */
	tmp &= ~LPS22HB_BDU_MASK;
 8006f0e:	183b      	adds	r3, r7, r0
 8006f10:	183a      	adds	r2, r7, r0
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	2102      	movs	r1, #2
 8006f16:	438a      	bics	r2, r1
 8006f18:	701a      	strb	r2, [r3, #0]
	tmp |= ((uint8_t)0x02);
 8006f1a:	183b      	adds	r3, r7, r0
 8006f1c:	183a      	adds	r2, r7, r0
 8006f1e:	7812      	ldrb	r2, [r2, #0]
 8006f20:	2102      	movs	r1, #2
 8006f22:	430a      	orrs	r2, r1
 8006f24:	701a      	strb	r2, [r3, #0]

	/* Apply settings to CTRL_REG1 */
	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1, tmp);
 8006f26:	0005      	movs	r5, r0
 8006f28:	197b      	adds	r3, r7, r5
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	2110      	movs	r1, #16
 8006f30:	20b8      	movs	r0, #184	@ 0xb8
 8006f32:	f7ff ff47 	bl	8006dc4 <_Z15SENSOR_IO_Writehhh>


	// включаем работу DATA_READY пина
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3);
 8006f36:	197c      	adds	r4, r7, r5
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2112      	movs	r1, #18
 8006f3c:	20b8      	movs	r0, #184	@ 0xb8
 8006f3e:	f7ff ff6b 	bl	8006e18 <_Z14SENSOR_IO_ReadhhPh>
 8006f42:	0003      	movs	r3, r0
 8006f44:	7023      	strb	r3, [r4, #0]

	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3, tmp | LPS22HB_DRDY_MASK);
 8006f46:	197b      	adds	r3, r7, r5
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	001a      	movs	r2, r3
 8006f52:	2112      	movs	r1, #18
 8006f54:	20b8      	movs	r0, #184	@ 0xb8
 8006f56:	f7ff ff35 	bl	8006dc4 <_Z15SENSOR_IO_Writehhh>

	return true;
 8006f5a:	2301      	movs	r3, #1
}
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b004      	add	sp, #16
 8006f62:	bdb0      	pop	{r4, r5, r7, pc}
 8006f64:	20002510 	.word	0x20002510

08006f68 <lps22hb_get_status>:


uint8_t lps22hb_get_status() {
 8006f68:	b590      	push	{r4, r7, lr}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
	uint8_t status = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_STATUS_REG);
 8006f6e:	1dfc      	adds	r4, r7, #7
 8006f70:	2200      	movs	r2, #0
 8006f72:	2127      	movs	r1, #39	@ 0x27
 8006f74:	20b8      	movs	r0, #184	@ 0xb8
 8006f76:	f7ff ff4f 	bl	8006e18 <_Z14SENSOR_IO_ReadhhPh>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	7023      	strb	r3, [r4, #0]
	return status;
 8006f7e:	1dfb      	adds	r3, r7, #7
 8006f80:	781b      	ldrb	r3, [r3, #0]
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b003      	add	sp, #12
 8006f88:	bd90      	pop	{r4, r7, pc}
	...

08006f8c <lps22hb_check_pressure_overrun>:

bool lps22hb_check_pressure_overrun(uint8_t status) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	0002      	movs	r2, r0
 8006f94:	1dfb      	adds	r3, r7, #7
 8006f96:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x10;
 8006f98:	1dfb      	adds	r3, r7, #7
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	401a      	ands	r2, r3
 8006fa0:	200f      	movs	r0, #15
 8006fa2:	183b      	adds	r3, r7, r0
 8006fa4:	1e51      	subs	r1, r2, #1
 8006fa6:	418a      	sbcs	r2, r1
 8006fa8:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 8006faa:	183b      	adds	r3, r7, r0
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <lps22hb_check_pressure_overrun+0x34>
		debug("Pressure data overrun! SR %02x\r\n", status);
 8006fb2:	1dfb      	adds	r3, r7, #7
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <lps22hb_check_pressure_overrun+0x44>)
 8006fb8:	0011      	movs	r1, r2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7fe fff0 	bl	8005fa0 <debug>
	}

	return is_overrun;
 8006fc0:	230f      	movs	r3, #15
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	781b      	ldrb	r3, [r3, #0]
}
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b004      	add	sp, #16
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	080173b4 	.word	0x080173b4

08006fd4 <lps22hb_check_temperature_overrun>:

bool lps22hb_check_temperature_overrun(uint8_t status) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	0002      	movs	r2, r0
 8006fdc:	1dfb      	adds	r3, r7, #7
 8006fde:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x20;
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	200f      	movs	r0, #15
 8006fea:	183b      	adds	r3, r7, r0
 8006fec:	1e51      	subs	r1, r2, #1
 8006fee:	418a      	sbcs	r2, r1
 8006ff0:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 8006ff2:	183b      	adds	r3, r7, r0
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d006      	beq.n	8007008 <lps22hb_check_temperature_overrun+0x34>
		debug("Temperature data overrun! SR %02x\r\n", status);
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <lps22hb_check_temperature_overrun+0x44>)
 8007000:	0011      	movs	r1, r2
 8007002:	0018      	movs	r0, r3
 8007004:	f7fe ffcc 	bl	8005fa0 <debug>
	}

	return is_overrun;
 8007008:	230f      	movs	r3, #15
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	781b      	ldrb	r3, [r3, #0]
}
 800700e:	0018      	movs	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	b004      	add	sp, #16
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	080173d8 	.word	0x080173d8

0800701c <lps22hb_check_pressure_data_available>:

bool lps22hb_check_pressure_data_available(uint8_t status) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	0002      	movs	r2, r0
 8007024:	1dfb      	adds	r3, r7, #7
 8007026:	701a      	strb	r2, [r3, #0]
	return status & 0x01;
 8007028:	1dfb      	adds	r3, r7, #7
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2201      	movs	r2, #1
 800702e:	4013      	ands	r3, r2
 8007030:	1e5a      	subs	r2, r3, #1
 8007032:	4193      	sbcs	r3, r2
 8007034:	b2db      	uxtb	r3, r3
}
 8007036:	0018      	movs	r0, r3
 8007038:	46bd      	mov	sp, r7
 800703a:	b002      	add	sp, #8
 800703c:	bd80      	pop	{r7, pc}

0800703e <lps22hb_check_temperature_data_available>:

bool lps22hb_check_temperature_data_available(uint8_t status) {
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	0002      	movs	r2, r0
 8007046:	1dfb      	adds	r3, r7, #7
 8007048:	701a      	strb	r2, [r3, #0]
	return status & 0x02;
 800704a:	1dfb      	adds	r3, r7, #7
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2202      	movs	r2, #2
 8007050:	4013      	ands	r3, r2
 8007052:	1e5a      	subs	r2, r3, #1
 8007054:	4193      	sbcs	r3, r2
 8007056:	b2db      	uxtb	r3, r3
}
 8007058:	0018      	movs	r0, r3
 800705a:	46bd      	mov	sp, r7
 800705c:	b002      	add	sp, #8
 800705e:	bd80      	pop	{r7, pc}

08007060 <lps22hb_read_pressure>:
	  return ctrl;
}

int32_t raw_press = 0;

float lps22hb_read_pressure(){
 8007060:	b5b0      	push	{r4, r5, r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0

	uint8_t buffer[3];
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8007066:	230f      	movs	r3, #15
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	e013      	b.n	8007098 <lps22hb_read_pressure+0x38>
		buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_PRESS_OUT_XL_REG + i));
 8007070:	250f      	movs	r5, #15
 8007072:	197b      	adds	r3, r7, r5
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	3328      	adds	r3, #40	@ 0x28
 8007078:	b2d9      	uxtb	r1, r3
 800707a:	197b      	adds	r3, r7, r5
 800707c:	781c      	ldrb	r4, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	20b8      	movs	r0, #184	@ 0xb8
 8007082:	f7ff fec9 	bl	8006e18 <_Z14SENSOR_IO_ReadhhPh>
 8007086:	0003      	movs	r3, r0
 8007088:	001a      	movs	r2, r3
 800708a:	003b      	movs	r3, r7
 800708c:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 800708e:	197b      	adds	r3, r7, r5
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	197b      	adds	r3, r7, r5
 8007094:	3201      	adds	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	230f      	movs	r3, #15
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d9e6      	bls.n	8007070 <lps22hb_read_pressure+0x10>
	}

	/* Build the raw data */
	uint32_t tmp = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 80070a6:	2300      	movs	r3, #0
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	e00e      	b.n	80070ca <lps22hb_read_pressure+0x6a>
		tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80070ac:	003a      	movs	r2, r7
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	18d3      	adds	r3, r2, r3
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	001a      	movs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	409a      	lsls	r2, r3
 80070bc:	0013      	movs	r3, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3301      	adds	r3, #1
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	dded      	ble.n	80070ac <lps22hb_read_pressure+0x4c>
	}

	/* convert the 2's complement 24 bit to 2's complement 32 bit */
	if(tmp & 0x00800000) {
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	2380      	movs	r3, #128	@ 0x80
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	4013      	ands	r3, r2
 80070d8:	d004      	beq.n	80070e4 <lps22hb_read_pressure+0x84>
		tmp |= 0xFF000000;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	22ff      	movs	r2, #255	@ 0xff
 80070de:	0612      	lsls	r2, r2, #24
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
	}

	raw_press = ((int32_t)tmp);
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <lps22hb_read_pressure+0xc4>)
 80070e8:	601a      	str	r2, [r3, #0]
	raw_press = (raw_press * 100) / 4096;
 80070ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007124 <lps22hb_read_pressure+0xc4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2264      	movs	r2, #100	@ 0x64
 80070f0:	4353      	muls	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da02      	bge.n	80070fc <lps22hb_read_pressure+0x9c>
 80070f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007128 <lps22hb_read_pressure+0xc8>)
 80070f8:	4694      	mov	ip, r2
 80070fa:	4463      	add	r3, ip
 80070fc:	131b      	asrs	r3, r3, #12
 80070fe:	001a      	movs	r2, r3
 8007100:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <lps22hb_read_pressure+0xc4>)
 8007102:	601a      	str	r2, [r3, #0]

	return (float)((float)raw_press / 100.0f);
 8007104:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <lps22hb_read_pressure+0xc4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	0018      	movs	r0, r3
 800710a:	f7fa fa01 	bl	8001510 <__aeabi_i2f>
 800710e:	1c03      	adds	r3, r0, #0
 8007110:	4906      	ldr	r1, [pc, #24]	@ (800712c <lps22hb_read_pressure+0xcc>)
 8007112:	1c18      	adds	r0, r3, #0
 8007114:	f7f9 fcfe 	bl	8000b14 <__aeabi_fdiv>
 8007118:	1c03      	adds	r3, r0, #0
}
 800711a:	1c18      	adds	r0, r3, #0
 800711c:	46bd      	mov	sp, r7
 800711e:	b004      	add	sp, #16
 8007120:	bdb0      	pop	{r4, r5, r7, pc}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	20002514 	.word	0x20002514
 8007128:	00000fff 	.word	0x00000fff
 800712c:	42c80000 	.word	0x42c80000

08007130 <lps22hb_read_temperature>:

float lps22hb_read_temperature(){
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
	  int16_t raw_data;
	  uint8_t buffer[2];
	  uint16_t tmp;
	  uint8_t i;

	  for(i = 0; i < 2; i++)
 8007136:	1dfb      	adds	r3, r7, #7
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	e012      	b.n	8007164 <lps22hb_read_temperature+0x34>
	  {
	    buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_TEMP_OUT_L_REG + i));
 800713e:	1dfb      	adds	r3, r7, #7
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	332b      	adds	r3, #43	@ 0x2b
 8007144:	b2d9      	uxtb	r1, r3
 8007146:	1dfb      	adds	r3, r7, #7
 8007148:	781c      	ldrb	r4, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	20b8      	movs	r0, #184	@ 0xb8
 800714e:	f7ff fe63 	bl	8006e18 <_Z14SENSOR_IO_ReadhhPh>
 8007152:	0003      	movs	r3, r0
 8007154:	001a      	movs	r2, r3
 8007156:	003b      	movs	r3, r7
 8007158:	551a      	strb	r2, [r3, r4]
	  for(i = 0; i < 2; i++)
 800715a:	1dfb      	adds	r3, r7, #7
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	3201      	adds	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	1dfb      	adds	r3, r7, #7
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d9e8      	bls.n	800713e <lps22hb_read_temperature+0xe>
	  }

	  /* Build the raw tmp */
	  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 800716c:	003b      	movs	r3, r7
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	b29a      	uxth	r2, r3
 8007174:	003b      	movs	r3, r7
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	0019      	movs	r1, r3
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	1852      	adds	r2, r2, r1
 800717e:	801a      	strh	r2, [r3, #0]

	  raw_data = (tmp * 10) / 100;
 8007180:	1d3b      	adds	r3, r7, #4
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	210a      	movs	r1, #10
 8007186:	0018      	movs	r0, r3
 8007188:	f7f9 f864 	bl	8000254 <__divsi3>
 800718c:	0003      	movs	r3, r0
 800718e:	001a      	movs	r2, r3
 8007190:	1cbb      	adds	r3, r7, #2
 8007192:	801a      	strh	r2, [r3, #0]

	  return ((float)(raw_data / 10.0f));
 8007194:	1cbb      	adds	r3, r7, #2
 8007196:	2200      	movs	r2, #0
 8007198:	5e9b      	ldrsh	r3, [r3, r2]
 800719a:	0018      	movs	r0, r3
 800719c:	f7fa f9b8 	bl	8001510 <__aeabi_i2f>
 80071a0:	1c03      	adds	r3, r0, #0
 80071a2:	4904      	ldr	r1, [pc, #16]	@ (80071b4 <lps22hb_read_temperature+0x84>)
 80071a4:	1c18      	adds	r0, r3, #0
 80071a6:	f7f9 fcb5 	bl	8000b14 <__aeabi_fdiv>
 80071aa:	1c03      	adds	r3, r0, #0
}
 80071ac:	1c18      	adds	r0, r3, #0
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b003      	add	sp, #12
 80071b2:	bd90      	pop	{r4, r7, pc}
 80071b4:	41200000 	.word	0x41200000

080071b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071bc:	f001 f854 	bl	8008268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071c0:	f000 f81e 	bl	8007200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80071c4:	f7ff f802 	bl	80061cc <MX_GPIO_Init>
  MX_I2C2_Init();
 80071c8:	f7ff fa7e 	bl	80066c8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80071cc:	f000 f968 	bl	80074a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80071d0:	f000 f9a4 	bl	800751c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80071d4:	f000 fdc2 	bl	8007d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80071d8:	f000 fe10 	bl	8007dfc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80071dc:	f000 fe5e 	bl	8007e9c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80071e0:	f000 fcbc 	bl	8007b5c <MX_TIM1_Init>
  MX_RTC_Init();
 80071e4:	f000 f8f0 	bl	80073c8 <MX_RTC_Init>
  MX_USART4_UART_Init();
 80071e8:	f000 fe8c 	bl	8007f04 <MX_USART4_UART_Init>
  MX_TIM2_Init();
 80071ec:	f000 fd12 	bl	8007c14 <MX_TIM2_Init>
 // debug("\r\n\r\nInited\r\n");
 // HAL_UART_Transmit_IT(terminal_uart, "123456789\r\n", 12);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80071f0:	f008 f9c8 	bl	800f584 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80071f4:	f7fc fc08 	bl	8003a08 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80071f8:	f008 f9e6 	bl	800f5c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80071fc:	46c0      	nop			@ (mov r8, r8)
 80071fe:	e7fd      	b.n	80071fc <main+0x44>

08007200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b093      	sub	sp, #76	@ 0x4c
 8007204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007206:	2410      	movs	r4, #16
 8007208:	193b      	adds	r3, r7, r4
 800720a:	0018      	movs	r0, r3
 800720c:	2338      	movs	r3, #56	@ 0x38
 800720e:	001a      	movs	r2, r3
 8007210:	2100      	movs	r1, #0
 8007212:	f00c f8eb 	bl	80133ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007216:	003b      	movs	r3, r7
 8007218:	0018      	movs	r0, r3
 800721a:	2310      	movs	r3, #16
 800721c:	001a      	movs	r2, r3
 800721e:	2100      	movs	r1, #0
 8007220:	f00c f8e4 	bl	80133ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007224:	2380      	movs	r3, #128	@ 0x80
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	0018      	movs	r0, r3
 800722a:	f003 f80d 	bl	800a248 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800722e:	193b      	adds	r3, r7, r4
 8007230:	2209      	movs	r2, #9
 8007232:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007234:	193b      	adds	r3, r7, r4
 8007236:	2280      	movs	r2, #128	@ 0x80
 8007238:	0252      	lsls	r2, r2, #9
 800723a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800723c:	0021      	movs	r1, r4
 800723e:	187b      	adds	r3, r7, r1
 8007240:	2201      	movs	r2, #1
 8007242:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007244:	187b      	adds	r3, r7, r1
 8007246:	2202      	movs	r2, #2
 8007248:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800724a:	187b      	adds	r3, r7, r1
 800724c:	2203      	movs	r2, #3
 800724e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8007250:	187b      	adds	r3, r7, r1
 8007252:	2200      	movs	r2, #0
 8007254:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8007256:	187b      	adds	r3, r7, r1
 8007258:	2210      	movs	r2, #16
 800725a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800725c:	187b      	adds	r3, r7, r1
 800725e:	2280      	movs	r2, #128	@ 0x80
 8007260:	0292      	lsls	r2, r2, #10
 8007262:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8007264:	187b      	adds	r3, r7, r1
 8007266:	22a0      	movs	r2, #160	@ 0xa0
 8007268:	0512      	lsls	r2, r2, #20
 800726a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800726c:	187b      	adds	r3, r7, r1
 800726e:	2280      	movs	r2, #128	@ 0x80
 8007270:	05d2      	lsls	r2, r2, #23
 8007272:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007274:	187b      	adds	r3, r7, r1
 8007276:	0018      	movs	r0, r3
 8007278:	f003 f832 	bl	800a2e0 <HAL_RCC_OscConfig>
 800727c:	1e03      	subs	r3, r0, #0
 800727e:	d001      	beq.n	8007284 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8007280:	f000 f874 	bl	800736c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007284:	003b      	movs	r3, r7
 8007286:	2207      	movs	r2, #7
 8007288:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800728a:	003b      	movs	r3, r7
 800728c:	2202      	movs	r2, #2
 800728e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007290:	003b      	movs	r3, r7
 8007292:	2200      	movs	r2, #0
 8007294:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007296:	003b      	movs	r3, r7
 8007298:	2200      	movs	r2, #0
 800729a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800729c:	003b      	movs	r3, r7
 800729e:	2102      	movs	r1, #2
 80072a0:	0018      	movs	r0, r3
 80072a2:	f003 fb37 	bl	800a914 <HAL_RCC_ClockConfig>
 80072a6:	1e03      	subs	r3, r0, #0
 80072a8:	d001      	beq.n	80072ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80072aa:	f000 f85f 	bl	800736c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80072ae:	f003 fd05 	bl	800acbc <HAL_RCC_EnableCSS>
}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b013      	add	sp, #76	@ 0x4c
 80072b8:	bd90      	pop	{r4, r7, pc}
	...

080072bc <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
     int i, j;
     uint32_t byte, crc, mask;

     i = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
     crc = 0xFFFFFFFF;
 80072ca:	2301      	movs	r3, #1
 80072cc:	425b      	negs	r3, r3
 80072ce:	617b      	str	r3, [r7, #20]
     for(int k = 0; k<size;k++) {
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	e023      	b.n	800731e <crc32b+0x62>
        byte = message[k];            // Get next byte.
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	18d3      	adds	r3, r2, r3
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
        crc = crc ^ byte;
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4053      	eors	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 80072e8:	2307      	movs	r3, #7
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e00e      	b.n	800730c <crc32b+0x50>
           mask = -(crc & 1);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2201      	movs	r2, #1
 80072f2:	4013      	ands	r3, r2
 80072f4:	425b      	negs	r3, r3
 80072f6:	60bb      	str	r3, [r7, #8]
           crc = (crc >> 1) ^ (0xEDB88320 & mask);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	085a      	lsrs	r2, r3, #1
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	490d      	ldr	r1, [pc, #52]	@ (8007334 <crc32b+0x78>)
 8007300:	400b      	ands	r3, r1
 8007302:	4053      	eors	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3b01      	subs	r3, #1
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	daed      	bge.n	80072ee <crc32b+0x32>
        }
        i = i + 1;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	3301      	adds	r3, #1
 8007316:	61fb      	str	r3, [r7, #28]
     for(int k = 0; k<size;k++) {
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	3301      	adds	r3, #1
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d8d7      	bhi.n	80072d6 <crc32b+0x1a>
     }
     return ~crc;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	43db      	mvns	r3, r3
  }
 800732a:	0018      	movs	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	b008      	add	sp, #32
 8007330:	bd80      	pop	{r7, pc}
 8007332:	46c0      	nop			@ (mov r8, r8)
 8007334:	edb88320 	.word	0xedb88320

08007338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a08      	ldr	r2, [pc, #32]	@ (8007368 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800734a:	f000 ffad 	bl	80082a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	2380      	movs	r3, #128	@ 0x80
 8007354:	05db      	lsls	r3, r3, #23
 8007356:	429a      	cmp	r2, r3
 8007358:	d101      	bne.n	800735e <HAL_TIM_PeriodElapsedCallback+0x26>

  	  Timer_Event();
 800735a:	f7fc f94f 	bl	80035fc <Timer_Event>
  }
  /* USER CODE END Callback 1 */
}
 800735e:	46c0      	nop			@ (mov r8, r8)
 8007360:	46bd      	mov	sp, r7
 8007362:	b002      	add	sp, #8
 8007364:	bd80      	pop	{r7, pc}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	40014800 	.word	0x40014800

0800736c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007370:	b672      	cpsid	i
}
 8007372:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_PWR_EnableBkUpAccess();
 8007374:	f002 ff5a 	bl	800a22c <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xAAAA);
 8007378:	4a0e      	ldr	r2, [pc, #56]	@ (80073b4 <Error_Handler+0x48>)
 800737a:	4b0f      	ldr	r3, [pc, #60]	@ (80073b8 <Error_Handler+0x4c>)
 800737c:	2100      	movs	r1, #0
 800737e:	0018      	movs	r0, r3
 8007380:	f003 ffda 	bl	800b338 <HAL_RTCEx_BKUPWrite>

	debug("==========\r\n");
 8007384:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <Error_Handler+0x50>)
 8007386:	0018      	movs	r0, r3
 8007388:	f7fe fe0a 	bl	8005fa0 <debug>
	debug("ERROR HANDLER\r\n");
 800738c:	4b0c      	ldr	r3, [pc, #48]	@ (80073c0 <Error_Handler+0x54>)
 800738e:	0018      	movs	r0, r3
 8007390:	f7fe fe06 	bl	8005fa0 <debug>
	debug("==========\r\n");
 8007394:	4b09      	ldr	r3, [pc, #36]	@ (80073bc <Error_Handler+0x50>)
 8007396:	0018      	movs	r0, r3
 8007398:	f7fe fe02 	bl	8005fa0 <debug>

	send_all_debug_buffer_blocking();
 800739c:	f7fe fed2 	bl	8006144 <send_all_debug_buffer_blocking>

	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80073a0:	4b08      	ldr	r3, [pc, #32]	@ (80073c4 <Error_Handler+0x58>)
 80073a2:	2201      	movs	r2, #1
 80073a4:	2104      	movs	r1, #4
 80073a6:	0018      	movs	r0, r3
 80073a8:	f001 fc9f 	bl	8008cea <HAL_GPIO_WritePin>

	HAL_NVIC_SystemReset();
 80073ac:	f001 f891 	bl	80084d2 <HAL_NVIC_SystemReset>

  while (1)
 80073b0:	46c0      	nop			@ (mov r8, r8)
 80073b2:	e7fd      	b.n	80073b0 <Error_Handler+0x44>
 80073b4:	0000aaaa 	.word	0x0000aaaa
 80073b8:	20002518 	.word	0x20002518
 80073bc:	080173fc 	.word	0x080173fc
 80073c0:	0801740c 	.word	0x0801740c
 80073c4:	50000c00 	.word	0x50000c00

080073c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80073cc:	4b13      	ldr	r3, [pc, #76]	@ (800741c <MX_RTC_Init+0x54>)
 80073ce:	4a14      	ldr	r2, [pc, #80]	@ (8007420 <MX_RTC_Init+0x58>)
 80073d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80073d2:	4b12      	ldr	r3, [pc, #72]	@ (800741c <MX_RTC_Init+0x54>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80073d8:	4b10      	ldr	r3, [pc, #64]	@ (800741c <MX_RTC_Init+0x54>)
 80073da:	227f      	movs	r2, #127	@ 0x7f
 80073dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80073de:	4b0f      	ldr	r3, [pc, #60]	@ (800741c <MX_RTC_Init+0x54>)
 80073e0:	22ff      	movs	r2, #255	@ 0xff
 80073e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80073e4:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <MX_RTC_Init+0x54>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80073ea:	4b0c      	ldr	r3, [pc, #48]	@ (800741c <MX_RTC_Init+0x54>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	@ (800741c <MX_RTC_Init+0x54>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80073f6:	4b09      	ldr	r3, [pc, #36]	@ (800741c <MX_RTC_Init+0x54>)
 80073f8:	2280      	movs	r2, #128	@ 0x80
 80073fa:	05d2      	lsls	r2, r2, #23
 80073fc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80073fe:	4b07      	ldr	r3, [pc, #28]	@ (800741c <MX_RTC_Init+0x54>)
 8007400:	2200      	movs	r2, #0
 8007402:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007404:	4b05      	ldr	r3, [pc, #20]	@ (800741c <MX_RTC_Init+0x54>)
 8007406:	0018      	movs	r0, r3
 8007408:	f003 fe48 	bl	800b09c <HAL_RTC_Init>
 800740c:	1e03      	subs	r3, r0, #0
 800740e:	d001      	beq.n	8007414 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8007410:	f7ff ffac 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007414:	46c0      	nop			@ (mov r8, r8)
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	20002518 	.word	0x20002518
 8007420:	40002800 	.word	0x40002800

08007424 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b091      	sub	sp, #68	@ 0x44
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800742c:	240c      	movs	r4, #12
 800742e:	193b      	adds	r3, r7, r4
 8007430:	0018      	movs	r0, r3
 8007432:	2334      	movs	r3, #52	@ 0x34
 8007434:	001a      	movs	r2, r3
 8007436:	2100      	movs	r1, #0
 8007438:	f00b ffd8 	bl	80133ec <memset>
  if(rtcHandle->Instance==RTC)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a15      	ldr	r2, [pc, #84]	@ (8007498 <HAL_RTC_MspInit+0x74>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d124      	bne.n	8007490 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007446:	193b      	adds	r3, r7, r4
 8007448:	2280      	movs	r2, #128	@ 0x80
 800744a:	0292      	lsls	r2, r2, #10
 800744c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800744e:	193b      	adds	r3, r7, r4
 8007450:	2280      	movs	r2, #128	@ 0x80
 8007452:	0092      	lsls	r2, r2, #2
 8007454:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007456:	193b      	adds	r3, r7, r4
 8007458:	0018      	movs	r0, r3
 800745a:	f003 fc67 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 800745e:	1e03      	subs	r3, r0, #0
 8007460:	d001      	beq.n	8007466 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007462:	f7ff ff83 	bl	800736c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007466:	4b0d      	ldr	r3, [pc, #52]	@ (800749c <HAL_RTC_MspInit+0x78>)
 8007468:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800746a:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <HAL_RTC_MspInit+0x78>)
 800746c:	2180      	movs	r1, #128	@ 0x80
 800746e:	0209      	lsls	r1, r1, #8
 8007470:	430a      	orrs	r2, r1
 8007472:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007474:	4b09      	ldr	r3, [pc, #36]	@ (800749c <HAL_RTC_MspInit+0x78>)
 8007476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007478:	4b08      	ldr	r3, [pc, #32]	@ (800749c <HAL_RTC_MspInit+0x78>)
 800747a:	2180      	movs	r1, #128	@ 0x80
 800747c:	00c9      	lsls	r1, r1, #3
 800747e:	430a      	orrs	r2, r1
 8007480:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007482:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_RTC_MspInit+0x78>)
 8007484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007486:	2380      	movs	r3, #128	@ 0x80
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4013      	ands	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]
 800748e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007490:	46c0      	nop			@ (mov r8, r8)
 8007492:	46bd      	mov	sp, r7
 8007494:	b011      	add	sp, #68	@ 0x44
 8007496:	bd90      	pop	{r4, r7, pc}
 8007498:	40002800 	.word	0x40002800
 800749c:	40021000 	.word	0x40021000

080074a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80074a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007518 <MX_SPI1_Init+0x78>)
 80074a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80074aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074ac:	2282      	movs	r2, #130	@ 0x82
 80074ae:	0052      	lsls	r2, r2, #1
 80074b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80074b2:	4b18      	ldr	r3, [pc, #96]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80074b8:	4b16      	ldr	r3, [pc, #88]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074ba:	22e0      	movs	r2, #224	@ 0xe0
 80074bc:	00d2      	lsls	r2, r2, #3
 80074be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074c0:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074c6:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80074cc:	4b11      	ldr	r3, [pc, #68]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074ce:	2280      	movs	r2, #128	@ 0x80
 80074d0:	0092      	lsls	r2, r2, #2
 80074d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074da:	4b0e      	ldr	r3, [pc, #56]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074dc:	2200      	movs	r2, #0
 80074de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80074ec:	4b09      	ldr	r3, [pc, #36]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074ee:	2207      	movs	r2, #7
 80074f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80074f2:	4b08      	ldr	r3, [pc, #32]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80074f8:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <MX_SPI1_Init+0x74>)
 80074fa:	2208      	movs	r2, #8
 80074fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074fe:	4b05      	ldr	r3, [pc, #20]	@ (8007514 <MX_SPI1_Init+0x74>)
 8007500:	0018      	movs	r0, r3
 8007502:	f003 ff51 	bl	800b3a8 <HAL_SPI_Init>
 8007506:	1e03      	subs	r3, r0, #0
 8007508:	d001      	beq.n	800750e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800750a:	f7ff ff2f 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20002544 	.word	0x20002544
 8007518:	40013000 	.word	0x40013000

0800751c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007520:	4b1b      	ldr	r3, [pc, #108]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007522:	4a1c      	ldr	r2, [pc, #112]	@ (8007594 <MX_SPI2_Init+0x78>)
 8007524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007526:	4b1a      	ldr	r3, [pc, #104]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007528:	2282      	movs	r2, #130	@ 0x82
 800752a:	0052      	lsls	r2, r2, #1
 800752c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800752e:	4b18      	ldr	r3, [pc, #96]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007530:	2200      	movs	r2, #0
 8007532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007534:	4b16      	ldr	r3, [pc, #88]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007536:	22e0      	movs	r2, #224	@ 0xe0
 8007538:	00d2      	lsls	r2, r2, #3
 800753a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800753c:	4b14      	ldr	r3, [pc, #80]	@ (8007590 <MX_SPI2_Init+0x74>)
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007542:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007544:	2200      	movs	r2, #0
 8007546:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007548:	4b11      	ldr	r3, [pc, #68]	@ (8007590 <MX_SPI2_Init+0x74>)
 800754a:	2280      	movs	r2, #128	@ 0x80
 800754c:	0092      	lsls	r2, r2, #2
 800754e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007550:	4b0f      	ldr	r3, [pc, #60]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007552:	2210      	movs	r2, #16
 8007554:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007558:	2200      	movs	r2, #0
 800755a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800755c:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <MX_SPI2_Init+0x74>)
 800755e:	2200      	movs	r2, #0
 8007560:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007562:	4b0b      	ldr	r3, [pc, #44]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007564:	2200      	movs	r2, #0
 8007566:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8007568:	4b09      	ldr	r3, [pc, #36]	@ (8007590 <MX_SPI2_Init+0x74>)
 800756a:	2207      	movs	r2, #7
 800756c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800756e:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007574:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <MX_SPI2_Init+0x74>)
 8007576:	2208      	movs	r2, #8
 8007578:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800757a:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <MX_SPI2_Init+0x74>)
 800757c:	0018      	movs	r0, r3
 800757e:	f003 ff13 	bl	800b3a8 <HAL_SPI_Init>
 8007582:	1e03      	subs	r3, r0, #0
 8007584:	d001      	beq.n	800758a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8007586:	f7ff fef1 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800758a:	46c0      	nop			@ (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	200025a8 	.word	0x200025a8
 8007594:	40003800 	.word	0x40003800

08007598 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007598:	b590      	push	{r4, r7, lr}
 800759a:	b08d      	sub	sp, #52	@ 0x34
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a0:	241c      	movs	r4, #28
 80075a2:	193b      	adds	r3, r7, r4
 80075a4:	0018      	movs	r0, r3
 80075a6:	2314      	movs	r3, #20
 80075a8:	001a      	movs	r2, r3
 80075aa:	2100      	movs	r1, #0
 80075ac:	f00b ff1e 	bl	80133ec <memset>
  if(spiHandle->Instance==SPI1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a5f      	ldr	r2, [pc, #380]	@ (8007734 <HAL_SPI_MspInit+0x19c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d154      	bne.n	8007664 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80075ba:	4b5f      	ldr	r3, [pc, #380]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075be:	4b5e      	ldr	r3, [pc, #376]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075c0:	2180      	movs	r1, #128	@ 0x80
 80075c2:	0149      	lsls	r1, r1, #5
 80075c4:	430a      	orrs	r2, r1
 80075c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80075c8:	4b5b      	ldr	r3, [pc, #364]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075cc:	2380      	movs	r3, #128	@ 0x80
 80075ce:	015b      	lsls	r3, r3, #5
 80075d0:	4013      	ands	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075d6:	4b58      	ldr	r3, [pc, #352]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075da:	4b57      	ldr	r3, [pc, #348]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075dc:	2108      	movs	r1, #8
 80075de:	430a      	orrs	r2, r1
 80075e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80075e2:	4b55      	ldr	r3, [pc, #340]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e6:	2208      	movs	r2, #8
 80075e8:	4013      	ands	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075ee:	4b52      	ldr	r3, [pc, #328]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075f2:	4b51      	ldr	r3, [pc, #324]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075f4:	2101      	movs	r1, #1
 80075f6:	430a      	orrs	r2, r1
 80075f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80075fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 80075fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fe:	2201      	movs	r2, #1
 8007600:	4013      	ands	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
 8007606:	193b      	adds	r3, r7, r4
 8007608:	2280      	movs	r2, #128	@ 0x80
 800760a:	0052      	lsls	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800760e:	193b      	adds	r3, r7, r4
 8007610:	2202      	movs	r2, #2
 8007612:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007614:	193b      	adds	r3, r7, r4
 8007616:	2200      	movs	r2, #0
 8007618:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800761a:	193b      	adds	r3, r7, r4
 800761c:	2203      	movs	r2, #3
 800761e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007620:	193b      	adds	r3, r7, r4
 8007622:	2201      	movs	r2, #1
 8007624:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
 8007626:	193b      	adds	r3, r7, r4
 8007628:	4a44      	ldr	r2, [pc, #272]	@ (800773c <HAL_SPI_MspInit+0x1a4>)
 800762a:	0019      	movs	r1, r3
 800762c:	0010      	movs	r0, r2
 800762e:	f001 f9db 	bl	80089e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8007632:	0021      	movs	r1, r4
 8007634:	187b      	adds	r3, r7, r1
 8007636:	22c0      	movs	r2, #192	@ 0xc0
 8007638:	0152      	lsls	r2, r2, #5
 800763a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2202      	movs	r2, #2
 8007640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	187b      	adds	r3, r7, r1
 8007644:	2200      	movs	r2, #0
 8007646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007648:	187b      	adds	r3, r7, r1
 800764a:	2203      	movs	r2, #3
 800764c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800764e:	187b      	adds	r3, r7, r1
 8007650:	2200      	movs	r2, #0
 8007652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007654:	187a      	adds	r2, r7, r1
 8007656:	23a0      	movs	r3, #160	@ 0xa0
 8007658:	05db      	lsls	r3, r3, #23
 800765a:	0011      	movs	r1, r2
 800765c:	0018      	movs	r0, r3
 800765e:	f001 f9c3 	bl	80089e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007662:	e063      	b.n	800772c <HAL_SPI_MspInit+0x194>
  else if(spiHandle->Instance==SPI2)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a35      	ldr	r2, [pc, #212]	@ (8007740 <HAL_SPI_MspInit+0x1a8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d15e      	bne.n	800772c <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800766e:	4b32      	ldr	r3, [pc, #200]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 8007670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007672:	4b31      	ldr	r3, [pc, #196]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 8007674:	2180      	movs	r1, #128	@ 0x80
 8007676:	01c9      	lsls	r1, r1, #7
 8007678:	430a      	orrs	r2, r1
 800767a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800767c:	4b2e      	ldr	r3, [pc, #184]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 800767e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007680:	2380      	movs	r3, #128	@ 0x80
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800768a:	4b2b      	ldr	r3, [pc, #172]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 800768c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800768e:	4b2a      	ldr	r3, [pc, #168]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 8007690:	2102      	movs	r1, #2
 8007692:	430a      	orrs	r2, r1
 8007694:	635a      	str	r2, [r3, #52]	@ 0x34
 8007696:	4b28      	ldr	r3, [pc, #160]	@ (8007738 <HAL_SPI_MspInit+0x1a0>)
 8007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769a:	2202      	movs	r2, #2
 800769c:	4013      	ands	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_MISO_Pin;
 80076a2:	241c      	movs	r4, #28
 80076a4:	193b      	adds	r3, r7, r4
 80076a6:	2204      	movs	r2, #4
 80076a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076aa:	193b      	adds	r3, r7, r4
 80076ac:	2202      	movs	r2, #2
 80076ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b0:	193b      	adds	r3, r7, r4
 80076b2:	2200      	movs	r2, #0
 80076b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076b6:	193b      	adds	r3, r7, r4
 80076b8:	2203      	movs	r2, #3
 80076ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80076bc:	193b      	adds	r3, r7, r4
 80076be:	2201      	movs	r2, #1
 80076c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MISO_GPIO_Port, &GPIO_InitStruct);
 80076c2:	193b      	adds	r3, r7, r4
 80076c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007744 <HAL_SPI_MspInit+0x1ac>)
 80076c6:	0019      	movs	r1, r3
 80076c8:	0010      	movs	r0, r2
 80076ca:	f001 f98d 	bl	80089e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_SCK_Pin;
 80076ce:	0021      	movs	r1, r4
 80076d0:	187b      	adds	r3, r7, r1
 80076d2:	2280      	movs	r2, #128	@ 0x80
 80076d4:	00d2      	lsls	r2, r2, #3
 80076d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d8:	000c      	movs	r4, r1
 80076da:	193b      	adds	r3, r7, r4
 80076dc:	2202      	movs	r2, #2
 80076de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e0:	193b      	adds	r3, r7, r4
 80076e2:	2200      	movs	r2, #0
 80076e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e6:	193b      	adds	r3, r7, r4
 80076e8:	2203      	movs	r2, #3
 80076ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076ec:	193b      	adds	r3, r7, r4
 80076ee:	2205      	movs	r2, #5
 80076f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_SCK_GPIO_Port, &GPIO_InitStruct);
 80076f2:	193b      	adds	r3, r7, r4
 80076f4:	4a13      	ldr	r2, [pc, #76]	@ (8007744 <HAL_SPI_MspInit+0x1ac>)
 80076f6:	0019      	movs	r1, r3
 80076f8:	0010      	movs	r0, r2
 80076fa:	f001 f975 	bl	80089e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_MOSI_Pin;
 80076fe:	0021      	movs	r1, r4
 8007700:	187b      	adds	r3, r7, r1
 8007702:	2280      	movs	r2, #128	@ 0x80
 8007704:	0112      	lsls	r2, r2, #4
 8007706:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007708:	187b      	adds	r3, r7, r1
 800770a:	2202      	movs	r2, #2
 800770c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800770e:	187b      	adds	r3, r7, r1
 8007710:	2200      	movs	r2, #0
 8007712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007714:	187b      	adds	r3, r7, r1
 8007716:	2203      	movs	r2, #3
 8007718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800771a:	187b      	adds	r3, r7, r1
 800771c:	2200      	movs	r2, #0
 800771e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MOSI_GPIO_Port, &GPIO_InitStruct);
 8007720:	187b      	adds	r3, r7, r1
 8007722:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <HAL_SPI_MspInit+0x1ac>)
 8007724:	0019      	movs	r1, r3
 8007726:	0010      	movs	r0, r2
 8007728:	f001 f95e 	bl	80089e8 <HAL_GPIO_Init>
}
 800772c:	46c0      	nop			@ (mov r8, r8)
 800772e:	46bd      	mov	sp, r7
 8007730:	b00d      	add	sp, #52	@ 0x34
 8007732:	bd90      	pop	{r4, r7, pc}
 8007734:	40013000 	.word	0x40013000
 8007738:	40021000 	.word	0x40021000
 800773c:	50000c00 	.word	0x50000c00
 8007740:	40003800 	.word	0x40003800
 8007744:	50000400 	.word	0x50000400

08007748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <HAL_MspInit+0x5c>)
 8007750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007752:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <HAL_MspInit+0x5c>)
 8007754:	2101      	movs	r1, #1
 8007756:	430a      	orrs	r2, r1
 8007758:	641a      	str	r2, [r3, #64]	@ 0x40
 800775a:	4b12      	ldr	r3, [pc, #72]	@ (80077a4 <HAL_MspInit+0x5c>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775e:	2201      	movs	r2, #1
 8007760:	4013      	ands	r3, r2
 8007762:	607b      	str	r3, [r7, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007766:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <HAL_MspInit+0x5c>)
 8007768:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800776a:	4b0e      	ldr	r3, [pc, #56]	@ (80077a4 <HAL_MspInit+0x5c>)
 800776c:	2180      	movs	r1, #128	@ 0x80
 800776e:	0549      	lsls	r1, r1, #21
 8007770:	430a      	orrs	r2, r1
 8007772:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007774:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <HAL_MspInit+0x5c>)
 8007776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	055b      	lsls	r3, r3, #21
 800777c:	4013      	ands	r3, r2
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007782:	2302      	movs	r3, #2
 8007784:	425b      	negs	r3, r3
 8007786:	2200      	movs	r2, #0
 8007788:	2103      	movs	r1, #3
 800778a:	0018      	movs	r0, r3
 800778c:	f000 fe7c 	bl	8008488 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007790:	23c0      	movs	r3, #192	@ 0xc0
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	0018      	movs	r0, r3
 8007796:	f000 fdc7 	bl	8008328 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	46bd      	mov	sp, r7
 800779e:	b002      	add	sp, #8
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	40021000 	.word	0x40021000

080077a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077a8:	b5b0      	push	{r4, r5, r7, lr}
 80077aa:	b08c      	sub	sp, #48	@ 0x30
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80077b0:	232b      	movs	r3, #43	@ 0x2b
 80077b2:	18fb      	adds	r3, r7, r3
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80077b8:	4b38      	ldr	r3, [pc, #224]	@ (800789c <HAL_InitTick+0xf4>)
 80077ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077bc:	4b37      	ldr	r3, [pc, #220]	@ (800789c <HAL_InitTick+0xf4>)
 80077be:	2180      	movs	r1, #128	@ 0x80
 80077c0:	02c9      	lsls	r1, r1, #11
 80077c2:	430a      	orrs	r2, r1
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80077c6:	4b35      	ldr	r3, [pc, #212]	@ (800789c <HAL_InitTick+0xf4>)
 80077c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077ca:	2380      	movs	r3, #128	@ 0x80
 80077cc:	02db      	lsls	r3, r3, #11
 80077ce:	4013      	ands	r3, r2
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80077d4:	230c      	movs	r3, #12
 80077d6:	18fa      	adds	r2, r7, r3
 80077d8:	2410      	movs	r4, #16
 80077da:	193b      	adds	r3, r7, r4
 80077dc:	0011      	movs	r1, r2
 80077de:	0018      	movs	r0, r3
 80077e0:	f003 fa42 	bl	800ac68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80077e4:	193b      	adds	r3, r7, r4
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80077f0:	f003 fa24 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 80077f4:	0003      	movs	r3, r0
 80077f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077f8:	e004      	b.n	8007804 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80077fa:	f003 fa1f 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 80077fe:	0003      	movs	r3, r0
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007806:	4926      	ldr	r1, [pc, #152]	@ (80078a0 <HAL_InitTick+0xf8>)
 8007808:	0018      	movs	r0, r3
 800780a:	f7f8 fc99 	bl	8000140 <__udivsi3>
 800780e:	0003      	movs	r3, r0
 8007810:	3b01      	subs	r3, #1
 8007812:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8007814:	4b23      	ldr	r3, [pc, #140]	@ (80078a4 <HAL_InitTick+0xfc>)
 8007816:	4a24      	ldr	r2, [pc, #144]	@ (80078a8 <HAL_InitTick+0x100>)
 8007818:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800781a:	4b22      	ldr	r3, [pc, #136]	@ (80078a4 <HAL_InitTick+0xfc>)
 800781c:	4a23      	ldr	r2, [pc, #140]	@ (80078ac <HAL_InitTick+0x104>)
 800781e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8007820:	4b20      	ldr	r3, [pc, #128]	@ (80078a4 <HAL_InitTick+0xfc>)
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8007826:	4b1f      	ldr	r3, [pc, #124]	@ (80078a4 <HAL_InitTick+0xfc>)
 8007828:	2200      	movs	r2, #0
 800782a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800782c:	4b1d      	ldr	r3, [pc, #116]	@ (80078a4 <HAL_InitTick+0xfc>)
 800782e:	2200      	movs	r2, #0
 8007830:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007832:	4b1c      	ldr	r3, [pc, #112]	@ (80078a4 <HAL_InitTick+0xfc>)
 8007834:	2200      	movs	r2, #0
 8007836:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8007838:	252b      	movs	r5, #43	@ 0x2b
 800783a:	197c      	adds	r4, r7, r5
 800783c:	4b19      	ldr	r3, [pc, #100]	@ (80078a4 <HAL_InitTick+0xfc>)
 800783e:	0018      	movs	r0, r3
 8007840:	f004 fcd2 	bl	800c1e8 <HAL_TIM_Base_Init>
 8007844:	0003      	movs	r3, r0
 8007846:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8007848:	197b      	adds	r3, r7, r5
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11e      	bne.n	800788e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8007850:	197c      	adds	r4, r7, r5
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <HAL_InitTick+0xfc>)
 8007854:	0018      	movs	r0, r3
 8007856:	f004 fd1f 	bl	800c298 <HAL_TIM_Base_Start_IT>
 800785a:	0003      	movs	r3, r0
 800785c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800785e:	197b      	adds	r3, r7, r5
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d113      	bne.n	800788e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8007866:	2016      	movs	r0, #22
 8007868:	f000 fe23 	bl	80084b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b03      	cmp	r3, #3
 8007870:	d809      	bhi.n	8007886 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	0019      	movs	r1, r3
 8007878:	2016      	movs	r0, #22
 800787a:	f000 fe05 	bl	8008488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800787e:	4b0c      	ldr	r3, [pc, #48]	@ (80078b0 <HAL_InitTick+0x108>)
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e003      	b.n	800788e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8007886:	232b      	movs	r3, #43	@ 0x2b
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800788e:	232b      	movs	r3, #43	@ 0x2b
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	781b      	ldrb	r3, [r3, #0]
}
 8007894:	0018      	movs	r0, r3
 8007896:	46bd      	mov	sp, r7
 8007898:	b00c      	add	sp, #48	@ 0x30
 800789a:	bdb0      	pop	{r4, r5, r7, pc}
 800789c:	40021000 	.word	0x40021000
 80078a0:	000f4240 	.word	0x000f4240
 80078a4:	2000260c 	.word	0x2000260c
 80078a8:	40014800 	.word	0x40014800
 80078ac:	000003e7 	.word	0x000003e7
 80078b0:	20000074 	.word	0x20000074

080078b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80078b8:	f003 fa0e 	bl	800acd8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80078bc:	46c0      	nop			@ (mov r8, r8)
 80078be:	e7fd      	b.n	80078bc <NMI_Handler+0x8>

080078c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <HardFault_Handler+0x64>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	2104      	movs	r1, #4
 80078ca:	0018      	movs	r0, r3
 80078cc:	f001 fa0d 	bl	8008cea <HAL_GPIO_WritePin>
	HAL_PWR_EnableBkUpAccess();
 80078d0:	f002 fcac 	bl	800a22c <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 80078d4:	4a14      	ldr	r2, [pc, #80]	@ (8007928 <HardFault_Handler+0x68>)
 80078d6:	4b15      	ldr	r3, [pc, #84]	@ (800792c <HardFault_Handler+0x6c>)
 80078d8:	2100      	movs	r1, #0
 80078da:	0018      	movs	r0, r3
 80078dc:	f003 fd2c 	bl	800b338 <HAL_RTCEx_BKUPWrite>

	if (debug_enabled()) {
 80078e0:	f7fe fb58 	bl	8005f94 <debug_enabled>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d010      	beq.n	800790a <HardFault_Handler+0x4a>
		debug("==========");
 80078e8:	4b11      	ldr	r3, [pc, #68]	@ (8007930 <HardFault_Handler+0x70>)
 80078ea:	0018      	movs	r0, r3
 80078ec:	f7fe fb58 	bl	8005fa0 <debug>
		debug("HARD FAULT");
 80078f0:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <HardFault_Handler+0x74>)
 80078f2:	0018      	movs	r0, r3
 80078f4:	f7fe fb54 	bl	8005fa0 <debug>
		debug("==========");
 80078f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007930 <HardFault_Handler+0x70>)
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7fe fb50 	bl	8005fa0 <debug>

		send_all_debug_buffer_blocking();
 8007900:	f7fe fc20 	bl	8006144 <send_all_debug_buffer_blocking>
		HAL_NVIC_SystemReset();
 8007904:	f000 fde5 	bl	80084d2 <HAL_NVIC_SystemReset>
 8007908:	e009      	b.n	800791e <HardFault_Handler+0x5e>
	}
	else {
		HAL_PWR_EnableBkUpAccess();
 800790a:	f002 fc8f 	bl	800a22c <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 800790e:	4a06      	ldr	r2, [pc, #24]	@ (8007928 <HardFault_Handler+0x68>)
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HardFault_Handler+0x6c>)
 8007912:	2100      	movs	r1, #0
 8007914:	0018      	movs	r0, r3
 8007916:	f003 fd0f 	bl	800b338 <HAL_RTCEx_BKUPWrite>
//		HAL_Delay(200);
		HAL_NVIC_SystemReset();		//Software Reset
 800791a:	f000 fdda 	bl	80084d2 <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  vTaskSuspendAll();
 800791e:	f008 ff79 	bl	8010814 <vTaskSuspendAll>
 8007922:	e7fc      	b.n	800791e <HardFault_Handler+0x5e>
 8007924:	50000c00 	.word	0x50000c00
 8007928:	0000bbbb 	.word	0x0000bbbb
 800792c:	20002518 	.word	0x20002518
 8007930:	0801741c 	.word	0x0801741c
 8007934:	08017428 	.word	0x08017428

08007938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800793c:	4b03      	ldr	r3, [pc, #12]	@ (800794c <TIM2_IRQHandler+0x14>)
 800793e:	0018      	movs	r0, r3
 8007940:	f004 fd06 	bl	800c350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007944:	46c0      	nop			@ (mov r8, r8)
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	46c0      	nop			@ (mov r8, r8)
 800794c:	200026a8 	.word	0x200026a8

08007950 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <TIM17_IRQHandler+0x14>)
 8007956:	0018      	movs	r0, r3
 8007958:	f004 fcfa 	bl	800c350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800795c:	46c0      	nop			@ (mov r8, r8)
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	2000260c 	.word	0x2000260c

08007968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	extended_debug("USART1_IRQHandler\r\n");
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <USART1_IRQHandler+0x1c>)
 800796e:	0018      	movs	r0, r3
 8007970:	f7fe fb8a 	bl	8006088 <extended_debug>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007974:	4b04      	ldr	r3, [pc, #16]	@ (8007988 <USART1_IRQHandler+0x20>)
 8007976:	0018      	movs	r0, r3
 8007978:	f005 fb4c 	bl	800d014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800797c:	46c0      	nop			@ (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	08017434 	.word	0x08017434
 8007988:	200026f4 	.word	0x200026f4

0800798c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	extended_debug("USART2_IRQHandler\r\n");
 8007990:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <USART2_IRQHandler+0x1c>)
 8007992:	0018      	movs	r0, r3
 8007994:	f7fe fb78 	bl	8006088 <extended_debug>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007998:	4b04      	ldr	r3, [pc, #16]	@ (80079ac <USART2_IRQHandler+0x20>)
 800799a:	0018      	movs	r0, r3
 800799c:	f005 fb3a 	bl	800d014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80079a0:	46c0      	nop			@ (mov r8, r8)
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	46c0      	nop			@ (mov r8, r8)
 80079a8:	08017448 	.word	0x08017448
 80079ac:	20002788 	.word	0x20002788

080079b0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */
//	debug("USART3_4_LPUART1_IRQHandler\r\n");
  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80079b4:	4b05      	ldr	r3, [pc, #20]	@ (80079cc <USART3_4_LPUART1_IRQHandler+0x1c>)
 80079b6:	0018      	movs	r0, r3
 80079b8:	f005 fb2c 	bl	800d014 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80079bc:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <USART3_4_LPUART1_IRQHandler+0x20>)
 80079be:	0018      	movs	r0, r3
 80079c0:	f005 fb28 	bl	800d014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80079c4:	46c0      	nop			@ (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	2000281c 	.word	0x2000281c
 80079d0:	200028b0 	.word	0x200028b0

080079d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  return 1;
 80079d8:	2301      	movs	r3, #1
}
 80079da:	0018      	movs	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <_kill>:

int _kill(int pid, int sig)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80079ea:	f00b fdb9 	bl	8013560 <__errno>
 80079ee:	0003      	movs	r3, r0
 80079f0:	2216      	movs	r2, #22
 80079f2:	601a      	str	r2, [r3, #0]
  return -1;
 80079f4:	2301      	movs	r3, #1
 80079f6:	425b      	negs	r3, r3
}
 80079f8:	0018      	movs	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b002      	add	sp, #8
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_exit>:

void _exit (int status)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007a08:	2301      	movs	r3, #1
 8007a0a:	425a      	negs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	0011      	movs	r1, r2
 8007a10:	0018      	movs	r0, r3
 8007a12:	f7ff ffe5 	bl	80079e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	e7fd      	b.n	8007a16 <_exit+0x16>

08007a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b086      	sub	sp, #24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	e00a      	b.n	8007a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007a2c:	e000      	b.n	8007a30 <_read+0x16>
 8007a2e:	bf00      	nop
 8007a30:	0001      	movs	r1, r0
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	60ba      	str	r2, [r7, #8]
 8007a38:	b2ca      	uxtb	r2, r1
 8007a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	dbf0      	blt.n	8007a2c <_read+0x12>
  }

  return len;
 8007a4a:	687b      	ldr	r3, [r7, #4]
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b006      	add	sp, #24
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e009      	b.n	8007a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	60ba      	str	r2, [r7, #8]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	0018      	movs	r0, r3
 8007a70:	e000      	b.n	8007a74 <_write+0x20>
 8007a72:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	3301      	adds	r3, #1
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	dbf1      	blt.n	8007a66 <_write+0x12>
  }
  return len;
 8007a82:	687b      	ldr	r3, [r7, #4]
}
 8007a84:	0018      	movs	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	b006      	add	sp, #24
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <_close>:

int _close(int file)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007a94:	2301      	movs	r3, #1
 8007a96:	425b      	negs	r3, r3
}
 8007a98:	0018      	movs	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2280      	movs	r2, #128	@ 0x80
 8007aae:	0192      	lsls	r2, r2, #6
 8007ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd80      	pop	{r7, pc}

08007abc <_isatty>:

int _isatty(int file)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007ac4:	2301      	movs	r3, #1
}
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	b002      	add	sp, #8
 8007acc:	bd80      	pop	{r7, pc}

08007ace <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	0018      	movs	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	b004      	add	sp, #16
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007aec:	4a14      	ldr	r2, [pc, #80]	@ (8007b40 <_sbrk+0x5c>)
 8007aee:	4b15      	ldr	r3, [pc, #84]	@ (8007b44 <_sbrk+0x60>)
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007af8:	4b13      	ldr	r3, [pc, #76]	@ (8007b48 <_sbrk+0x64>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b00:	4b11      	ldr	r3, [pc, #68]	@ (8007b48 <_sbrk+0x64>)
 8007b02:	4a12      	ldr	r2, [pc, #72]	@ (8007b4c <_sbrk+0x68>)
 8007b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b06:	4b10      	ldr	r3, [pc, #64]	@ (8007b48 <_sbrk+0x64>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	18d3      	adds	r3, r2, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d207      	bcs.n	8007b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007b14:	f00b fd24 	bl	8013560 <__errno>
 8007b18:	0003      	movs	r3, r0
 8007b1a:	220c      	movs	r2, #12
 8007b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	425b      	negs	r3, r3
 8007b22:	e009      	b.n	8007b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007b24:	4b08      	ldr	r3, [pc, #32]	@ (8007b48 <_sbrk+0x64>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007b2a:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <_sbrk+0x64>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	18d2      	adds	r2, r2, r3
 8007b32:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <_sbrk+0x64>)
 8007b34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b006      	add	sp, #24
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20009000 	.word	0x20009000
 8007b44:	00000400 	.word	0x00000400
 8007b48:	20002658 	.word	0x20002658
 8007b4c:	20007290 	.word	0x20007290

08007b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007b54:	46c0      	nop			@ (mov r8, r8)
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b62:	2310      	movs	r3, #16
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	0018      	movs	r0, r3
 8007b68:	2310      	movs	r3, #16
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f00b fc3d 	bl	80133ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b72:	1d3b      	adds	r3, r7, #4
 8007b74:	0018      	movs	r0, r3
 8007b76:	230c      	movs	r3, #12
 8007b78:	001a      	movs	r2, r3
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	f00b fc36 	bl	80133ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007b80:	4b21      	ldr	r3, [pc, #132]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007b82:	4a22      	ldr	r2, [pc, #136]	@ (8007c0c <MX_TIM1_Init+0xb0>)
 8007b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8007b86:	4b20      	ldr	r3, [pc, #128]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007b88:	223f      	movs	r2, #63	@ 0x3f
 8007b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007b92:	4b1d      	ldr	r3, [pc, #116]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007b94:	4a1e      	ldr	r2, [pc, #120]	@ (8007c10 <MX_TIM1_Init+0xb4>)
 8007b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b98:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ba4:	4b18      	ldr	r3, [pc, #96]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007baa:	4b17      	ldr	r3, [pc, #92]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007bac:	0018      	movs	r0, r3
 8007bae:	f004 fb1b 	bl	800c1e8 <HAL_TIM_Base_Init>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d001      	beq.n	8007bba <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8007bb6:	f7ff fbd9 	bl	800736c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007bba:	2110      	movs	r1, #16
 8007bbc:	187b      	adds	r3, r7, r1
 8007bbe:	2280      	movs	r2, #128	@ 0x80
 8007bc0:	0152      	lsls	r2, r2, #5
 8007bc2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007bc4:	187a      	adds	r2, r7, r1
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007bc8:	0011      	movs	r1, r2
 8007bca:	0018      	movs	r0, r3
 8007bcc:	f004 fcc8 	bl	800c560 <HAL_TIM_ConfigClockSource>
 8007bd0:	1e03      	subs	r3, r0, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007bd4:	f7ff fbca 	bl	800736c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bd8:	1d3b      	adds	r3, r7, #4
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007bde:	1d3b      	adds	r3, r7, #4
 8007be0:	2200      	movs	r2, #0
 8007be2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	2200      	movs	r2, #0
 8007be8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007bea:	1d3a      	adds	r2, r7, #4
 8007bec:	4b06      	ldr	r3, [pc, #24]	@ (8007c08 <MX_TIM1_Init+0xac>)
 8007bee:	0011      	movs	r1, r2
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f004 fed5 	bl	800c9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007bf6:	1e03      	subs	r3, r0, #0
 8007bf8:	d001      	beq.n	8007bfe <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8007bfa:	f7ff fbb7 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b008      	add	sp, #32
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	2000265c 	.word	0x2000265c
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	0000ffff 	.word	0x0000ffff

08007c14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	0018      	movs	r0, r3
 8007c20:	2310      	movs	r3, #16
 8007c22:	001a      	movs	r2, r3
 8007c24:	2100      	movs	r1, #0
 8007c26:	f00b fbe1 	bl	80133ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	230c      	movs	r3, #12
 8007c30:	001a      	movs	r2, r3
 8007c32:	2100      	movs	r1, #0
 8007c34:	f00b fbda 	bl	80133ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007c38:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c3a:	2280      	movs	r2, #128	@ 0x80
 8007c3c:	05d2      	lsls	r2, r2, #23
 8007c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8007c40:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c42:	223f      	movs	r2, #63	@ 0x3f
 8007c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c46:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8007c4c:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c4e:	2263      	movs	r2, #99	@ 0x63
 8007c50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c52:	4b18      	ldr	r3, [pc, #96]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c58:	4b16      	ldr	r3, [pc, #88]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007c5e:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c60:	0018      	movs	r0, r3
 8007c62:	f004 fac1 	bl	800c1e8 <HAL_TIM_Base_Init>
 8007c66:	1e03      	subs	r3, r0, #0
 8007c68:	d001      	beq.n	8007c6e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007c6a:	f7ff fb7f 	bl	800736c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c6e:	2110      	movs	r1, #16
 8007c70:	187b      	adds	r3, r7, r1
 8007c72:	2280      	movs	r2, #128	@ 0x80
 8007c74:	0152      	lsls	r2, r2, #5
 8007c76:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007c78:	187a      	adds	r2, r7, r1
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c7c:	0011      	movs	r1, r2
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f004 fc6e 	bl	800c560 <HAL_TIM_ConfigClockSource>
 8007c84:	1e03      	subs	r3, r0, #0
 8007c86:	d001      	beq.n	8007c8c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007c88:	f7ff fb70 	bl	800736c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c8c:	1d3b      	adds	r3, r7, #4
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	2200      	movs	r2, #0
 8007c96:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007c98:	1d3a      	adds	r2, r7, #4
 8007c9a:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <MX_TIM2_Init+0xa0>)
 8007c9c:	0011      	movs	r1, r2
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f004 fe7e 	bl	800c9a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007ca4:	1e03      	subs	r3, r0, #0
 8007ca6:	d001      	beq.n	8007cac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8007ca8:	f7ff fb60 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007cac:	46c0      	nop			@ (mov r8, r8)
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b008      	add	sp, #32
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200026a8 	.word	0x200026a8

08007cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007cb8:	b590      	push	{r4, r7, lr}
 8007cba:	b093      	sub	sp, #76	@ 0x4c
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007cc0:	2414      	movs	r4, #20
 8007cc2:	193b      	adds	r3, r7, r4
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	2334      	movs	r3, #52	@ 0x34
 8007cc8:	001a      	movs	r2, r3
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f00b fb8e 	bl	80133ec <memset>
  if(tim_baseHandle->Instance==TIM1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d54 <HAL_TIM_Base_MspInit+0x9c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d11d      	bne.n	8007d16 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8007cda:	193b      	adds	r3, r7, r4
 8007cdc:	2280      	movs	r2, #128	@ 0x80
 8007cde:	0392      	lsls	r2, r2, #14
 8007ce0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8007ce2:	193b      	adds	r3, r7, r4
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ce8:	193b      	adds	r3, r7, r4
 8007cea:	0018      	movs	r0, r3
 8007cec:	f003 f81e 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 8007cf0:	1e03      	subs	r3, r0, #0
 8007cf2:	d001      	beq.n	8007cf8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8007cf4:	f7ff fb3a 	bl	800736c <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007cf8:	4b17      	ldr	r3, [pc, #92]	@ (8007d58 <HAL_TIM_Base_MspInit+0xa0>)
 8007cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cfc:	4b16      	ldr	r3, [pc, #88]	@ (8007d58 <HAL_TIM_Base_MspInit+0xa0>)
 8007cfe:	2180      	movs	r1, #128	@ 0x80
 8007d00:	0109      	lsls	r1, r1, #4
 8007d02:	430a      	orrs	r2, r1
 8007d04:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d06:	4b14      	ldr	r3, [pc, #80]	@ (8007d58 <HAL_TIM_Base_MspInit+0xa0>)
 8007d08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d0a:	2380      	movs	r3, #128	@ 0x80
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	4013      	ands	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]
 8007d12:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007d14:	e019      	b.n	8007d4a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	2380      	movs	r3, #128	@ 0x80
 8007d1c:	05db      	lsls	r3, r3, #23
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d113      	bne.n	8007d4a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <HAL_TIM_Base_MspInit+0xa0>)
 8007d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d26:	4b0c      	ldr	r3, [pc, #48]	@ (8007d58 <HAL_TIM_Base_MspInit+0xa0>)
 8007d28:	2101      	movs	r1, #1
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <HAL_TIM_Base_MspInit+0xa0>)
 8007d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d32:	2201      	movs	r2, #1
 8007d34:	4013      	ands	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2103      	movs	r1, #3
 8007d3e:	200f      	movs	r0, #15
 8007d40:	f000 fba2 	bl	8008488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007d44:	200f      	movs	r0, #15
 8007d46:	f000 fbb4 	bl	80084b2 <HAL_NVIC_EnableIRQ>
}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b013      	add	sp, #76	@ 0x4c
 8007d50:	bd90      	pop	{r4, r7, pc}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	40012c00 	.word	0x40012c00
 8007d58:	40021000 	.word	0x40021000

08007d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d60:	4b24      	ldr	r3, [pc, #144]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d62:	4a25      	ldr	r2, [pc, #148]	@ (8007df8 <MX_USART1_UART_Init+0x9c>)
 8007d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d66:	4b23      	ldr	r3, [pc, #140]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d68:	22e1      	movs	r2, #225	@ 0xe1
 8007d6a:	0252      	lsls	r2, r2, #9
 8007d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d6e:	4b21      	ldr	r3, [pc, #132]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d74:	4b1f      	ldr	r3, [pc, #124]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d80:	4b1c      	ldr	r3, [pc, #112]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d82:	220c      	movs	r2, #12
 8007d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d86:	4b1b      	ldr	r3, [pc, #108]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d8c:	4b19      	ldr	r3, [pc, #100]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d92:	4b18      	ldr	r3, [pc, #96]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007d98:	4b16      	ldr	r3, [pc, #88]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007d9e:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8007da4:	4813      	ldr	r0, [pc, #76]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007da6:	2300      	movs	r3, #0
 8007da8:	2200      	movs	r2, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	f007 f97e 	bl	800f0ac <HAL_RS485Ex_Init>
 8007db0:	1e03      	subs	r3, r0, #0
 8007db2:	d001      	beq.n	8007db8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8007db4:	f7ff fada 	bl	800736c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007db8:	4b0e      	ldr	r3, [pc, #56]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007dba:	2100      	movs	r1, #0
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f007 fa77 	bl	800f2b0 <HAL_UARTEx_SetTxFifoThreshold>
 8007dc2:	1e03      	subs	r3, r0, #0
 8007dc4:	d001      	beq.n	8007dca <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8007dc6:	f7ff fad1 	bl	800736c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007dca:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007dcc:	2100      	movs	r1, #0
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f007 faae 	bl	800f330 <HAL_UARTEx_SetRxFifoThreshold>
 8007dd4:	1e03      	subs	r3, r0, #0
 8007dd6:	d001      	beq.n	8007ddc <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8007dd8:	f7ff fac8 	bl	800736c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007ddc:	4b05      	ldr	r3, [pc, #20]	@ (8007df4 <MX_USART1_UART_Init+0x98>)
 8007dde:	0018      	movs	r0, r3
 8007de0:	f007 fa2c 	bl	800f23c <HAL_UARTEx_DisableFifoMode>
 8007de4:	1e03      	subs	r3, r0, #0
 8007de6:	d001      	beq.n	8007dec <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8007de8:	f7ff fac0 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007dec:	46c0      	nop			@ (mov r8, r8)
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	46c0      	nop			@ (mov r8, r8)
 8007df4:	200026f4 	.word	0x200026f4
 8007df8:	40013800 	.word	0x40013800

08007dfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007e00:	4b24      	ldr	r3, [pc, #144]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e02:	4a25      	ldr	r2, [pc, #148]	@ (8007e98 <MX_USART2_UART_Init+0x9c>)
 8007e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8007e06:	4b23      	ldr	r3, [pc, #140]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e08:	2296      	movs	r2, #150	@ 0x96
 8007e0a:	0212      	lsls	r2, r2, #8
 8007e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8007e0e:	4b21      	ldr	r3, [pc, #132]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e10:	2280      	movs	r2, #128	@ 0x80
 8007e12:	0152      	lsls	r2, r2, #5
 8007e14:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007e16:	4b1f      	ldr	r3, [pc, #124]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8007e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e1e:	2280      	movs	r2, #128	@ 0x80
 8007e20:	00d2      	lsls	r2, r2, #3
 8007e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007e24:	4b1b      	ldr	r3, [pc, #108]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e26:	220c      	movs	r2, #12
 8007e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e30:	4b18      	ldr	r3, [pc, #96]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007e36:	4b17      	ldr	r3, [pc, #92]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007e3c:	4b15      	ldr	r3, [pc, #84]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007e42:	4b14      	ldr	r3, [pc, #80]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007e48:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f004 fe2e 	bl	800caac <HAL_UART_Init>
 8007e50:	1e03      	subs	r3, r0, #0
 8007e52:	d001      	beq.n	8007e58 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8007e54:	f7ff fa8a 	bl	800736c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e58:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f007 fa27 	bl	800f2b0 <HAL_UARTEx_SetTxFifoThreshold>
 8007e62:	1e03      	subs	r3, r0, #0
 8007e64:	d001      	beq.n	8007e6a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8007e66:	f7ff fa81 	bl	800736c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f007 fa5e 	bl	800f330 <HAL_UARTEx_SetRxFifoThreshold>
 8007e74:	1e03      	subs	r3, r0, #0
 8007e76:	d001      	beq.n	8007e7c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8007e78:	f7ff fa78 	bl	800736c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8007e7c:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <MX_USART2_UART_Init+0x98>)
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f007 f99e 	bl	800f1c0 <HAL_UARTEx_EnableFifoMode>
 8007e84:	1e03      	subs	r3, r0, #0
 8007e86:	d001      	beq.n	8007e8c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8007e88:	f7ff fa70 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007e8c:	46c0      	nop			@ (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	46c0      	nop			@ (mov r8, r8)
 8007e94:	20002788 	.word	0x20002788
 8007e98:	40004400 	.word	0x40004400

08007e9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007ea0:	4b16      	ldr	r3, [pc, #88]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ea2:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <MX_USART3_UART_Init+0x64>)
 8007ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007ea6:	4b15      	ldr	r3, [pc, #84]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ea8:	22e1      	movs	r2, #225	@ 0xe1
 8007eaa:	0252      	lsls	r2, r2, #9
 8007eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007eae:	4b13      	ldr	r3, [pc, #76]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007eb4:	4b11      	ldr	r3, [pc, #68]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007eba:	4b10      	ldr	r3, [pc, #64]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ec2:	220c      	movs	r2, #12
 8007ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007ed8:	4b08      	ldr	r3, [pc, #32]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007ede:	4b07      	ldr	r3, [pc, #28]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007ee4:	4b05      	ldr	r3, [pc, #20]	@ (8007efc <MX_USART3_UART_Init+0x60>)
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f004 fde0 	bl	800caac <HAL_UART_Init>
 8007eec:	1e03      	subs	r3, r0, #0
 8007eee:	d001      	beq.n	8007ef4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007ef0:	f7ff fa3c 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007ef4:	46c0      	nop			@ (mov r8, r8)
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	46c0      	nop			@ (mov r8, r8)
 8007efc:	2000281c 	.word	0x2000281c
 8007f00:	40004800 	.word	0x40004800

08007f04 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8007f08:	4b16      	ldr	r3, [pc, #88]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f0a:	4a17      	ldr	r2, [pc, #92]	@ (8007f68 <MX_USART4_UART_Init+0x64>)
 8007f0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007f0e:	4b15      	ldr	r3, [pc, #84]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f10:	22e1      	movs	r2, #225	@ 0xe1
 8007f12:	0252      	lsls	r2, r2, #9
 8007f14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007f16:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007f1c:	4b11      	ldr	r3, [pc, #68]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007f22:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007f28:	4b0e      	ldr	r3, [pc, #56]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f2a:	220c      	movs	r2, #12
 8007f2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f34:	4b0b      	ldr	r3, [pc, #44]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f40:	4b08      	ldr	r3, [pc, #32]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f46:	4b07      	ldr	r3, [pc, #28]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <MX_USART4_UART_Init+0x60>)
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f004 fdac 	bl	800caac <HAL_UART_Init>
 8007f54:	1e03      	subs	r3, r0, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8007f58:	f7ff fa08 	bl	800736c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007f5c:	46c0      	nop			@ (mov r8, r8)
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	46c0      	nop			@ (mov r8, r8)
 8007f64:	200028b0 	.word	0x200028b0
 8007f68:	40004c00 	.word	0x40004c00

08007f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b09d      	sub	sp, #116	@ 0x74
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f74:	235c      	movs	r3, #92	@ 0x5c
 8007f76:	18fb      	adds	r3, r7, r3
 8007f78:	0018      	movs	r0, r3
 8007f7a:	2314      	movs	r3, #20
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f00b fa34 	bl	80133ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f84:	2428      	movs	r4, #40	@ 0x28
 8007f86:	193b      	adds	r3, r7, r4
 8007f88:	0018      	movs	r0, r3
 8007f8a:	2334      	movs	r3, #52	@ 0x34
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f00b fa2c 	bl	80133ec <memset>
  if(uartHandle->Instance==USART1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a96      	ldr	r2, [pc, #600]	@ (80081f4 <HAL_UART_MspInit+0x288>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d15c      	bne.n	8008058 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007f9e:	193b      	adds	r3, r7, r4
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007fa4:	193b      	adds	r3, r7, r4
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007faa:	193b      	adds	r3, r7, r4
 8007fac:	0018      	movs	r0, r3
 8007fae:	f002 febd 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 8007fb2:	1e03      	subs	r3, r0, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007fb6:	f7ff f9d9 	bl	800736c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007fba:	4b8f      	ldr	r3, [pc, #572]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8007fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fbe:	4b8e      	ldr	r3, [pc, #568]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8007fc0:	2180      	movs	r1, #128	@ 0x80
 8007fc2:	01c9      	lsls	r1, r1, #7
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8007fc8:	4b8b      	ldr	r3, [pc, #556]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8007fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	01db      	lsls	r3, r3, #7
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fd6:	4b88      	ldr	r3, [pc, #544]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8007fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fda:	4b87      	ldr	r3, [pc, #540]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8007fdc:	2102      	movs	r1, #2
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8007fe2:	4b85      	ldr	r3, [pc, #532]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4013      	ands	r3, r2
 8007fea:	623b      	str	r3, [r7, #32]
 8007fec:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007fee:	245c      	movs	r4, #92	@ 0x5c
 8007ff0:	193b      	adds	r3, r7, r4
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff6:	193b      	adds	r3, r7, r4
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	2200      	movs	r2, #0
 8008000:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008002:	193b      	adds	r3, r7, r4
 8008004:	2200      	movs	r2, #0
 8008006:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008008:	193b      	adds	r3, r7, r4
 800800a:	2204      	movs	r2, #4
 800800c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800800e:	193b      	adds	r3, r7, r4
 8008010:	4a7a      	ldr	r2, [pc, #488]	@ (80081fc <HAL_UART_MspInit+0x290>)
 8008012:	0019      	movs	r1, r3
 8008014:	0010      	movs	r0, r2
 8008016:	f000 fce7 	bl	80089e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800801a:	0021      	movs	r1, r4
 800801c:	187b      	adds	r3, r7, r1
 800801e:	22c0      	movs	r2, #192	@ 0xc0
 8008020:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008022:	187b      	adds	r3, r7, r1
 8008024:	2202      	movs	r2, #2
 8008026:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008028:	187b      	adds	r3, r7, r1
 800802a:	2200      	movs	r2, #0
 800802c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800802e:	187b      	adds	r3, r7, r1
 8008030:	2200      	movs	r2, #0
 8008032:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8008034:	187b      	adds	r3, r7, r1
 8008036:	2200      	movs	r2, #0
 8008038:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800803a:	187b      	adds	r3, r7, r1
 800803c:	4a6f      	ldr	r2, [pc, #444]	@ (80081fc <HAL_UART_MspInit+0x290>)
 800803e:	0019      	movs	r1, r3
 8008040:	0010      	movs	r0, r2
 8008042:	f000 fcd1 	bl	80089e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008046:	2200      	movs	r2, #0
 8008048:	2103      	movs	r1, #3
 800804a:	201b      	movs	r0, #27
 800804c:	f000 fa1c 	bl	8008488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008050:	201b      	movs	r0, #27
 8008052:	f000 fa2e 	bl	80084b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8008056:	e0c9      	b.n	80081ec <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART2)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a68      	ldr	r2, [pc, #416]	@ (8008200 <HAL_UART_MspInit+0x294>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d147      	bne.n	80080f2 <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008062:	2128      	movs	r1, #40	@ 0x28
 8008064:	187b      	adds	r3, r7, r1
 8008066:	2202      	movs	r2, #2
 8008068:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800806a:	187b      	adds	r3, r7, r1
 800806c:	2200      	movs	r2, #0
 800806e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008070:	187b      	adds	r3, r7, r1
 8008072:	0018      	movs	r0, r3
 8008074:	f002 fe5a 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 8008078:	1e03      	subs	r3, r0, #0
 800807a:	d001      	beq.n	8008080 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800807c:	f7ff f976 	bl	800736c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008080:	4b5d      	ldr	r3, [pc, #372]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008084:	4b5c      	ldr	r3, [pc, #368]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008086:	2180      	movs	r1, #128	@ 0x80
 8008088:	0289      	lsls	r1, r1, #10
 800808a:	430a      	orrs	r2, r1
 800808c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800808e:	4b5a      	ldr	r3, [pc, #360]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008092:	2380      	movs	r3, #128	@ 0x80
 8008094:	029b      	lsls	r3, r3, #10
 8008096:	4013      	ands	r3, r2
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800809c:	4b56      	ldr	r3, [pc, #344]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800809e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080a0:	4b55      	ldr	r3, [pc, #340]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 80080a2:	2108      	movs	r1, #8
 80080a4:	430a      	orrs	r2, r1
 80080a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80080a8:	4b53      	ldr	r3, [pc, #332]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 80080aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ac:	2208      	movs	r2, #8
 80080ae:	4013      	ands	r3, r2
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80080b4:	215c      	movs	r1, #92	@ 0x5c
 80080b6:	187b      	adds	r3, r7, r1
 80080b8:	2260      	movs	r2, #96	@ 0x60
 80080ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	187b      	adds	r3, r7, r1
 80080be:	2202      	movs	r2, #2
 80080c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c2:	187b      	adds	r3, r7, r1
 80080c4:	2200      	movs	r2, #0
 80080c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c8:	187b      	adds	r3, r7, r1
 80080ca:	2200      	movs	r2, #0
 80080cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	2200      	movs	r2, #0
 80080d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	4a4b      	ldr	r2, [pc, #300]	@ (8008204 <HAL_UART_MspInit+0x298>)
 80080d8:	0019      	movs	r1, r3
 80080da:	0010      	movs	r0, r2
 80080dc:	f000 fc84 	bl	80089e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	2103      	movs	r1, #3
 80080e4:	201c      	movs	r0, #28
 80080e6:	f000 f9cf 	bl	8008488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80080ea:	201c      	movs	r0, #28
 80080ec:	f000 f9e1 	bl	80084b2 <HAL_NVIC_EnableIRQ>
}
 80080f0:	e07c      	b.n	80081ec <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART3)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a44      	ldr	r2, [pc, #272]	@ (8008208 <HAL_UART_MspInit+0x29c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d139      	bne.n	8008170 <HAL_UART_MspInit+0x204>
    __HAL_RCC_USART3_CLK_ENABLE();
 80080fc:	4b3e      	ldr	r3, [pc, #248]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 80080fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008100:	4b3d      	ldr	r3, [pc, #244]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008102:	2180      	movs	r1, #128	@ 0x80
 8008104:	02c9      	lsls	r1, r1, #11
 8008106:	430a      	orrs	r2, r1
 8008108:	63da      	str	r2, [r3, #60]	@ 0x3c
 800810a:	4b3b      	ldr	r3, [pc, #236]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800810c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800810e:	2380      	movs	r3, #128	@ 0x80
 8008110:	02db      	lsls	r3, r3, #11
 8008112:	4013      	ands	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008118:	4b37      	ldr	r3, [pc, #220]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800811a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800811c:	4b36      	ldr	r3, [pc, #216]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800811e:	2102      	movs	r1, #2
 8008120:	430a      	orrs	r2, r1
 8008122:	635a      	str	r2, [r3, #52]	@ 0x34
 8008124:	4b34      	ldr	r3, [pc, #208]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008128:	2202      	movs	r2, #2
 800812a:	4013      	ands	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008130:	215c      	movs	r1, #92	@ 0x5c
 8008132:	187b      	adds	r3, r7, r1
 8008134:	22c0      	movs	r2, #192	@ 0xc0
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800813a:	187b      	adds	r3, r7, r1
 800813c:	2202      	movs	r2, #2
 800813e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008140:	187b      	adds	r3, r7, r1
 8008142:	2200      	movs	r2, #0
 8008144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008146:	187b      	adds	r3, r7, r1
 8008148:	2200      	movs	r2, #0
 800814a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800814c:	187b      	adds	r3, r7, r1
 800814e:	2204      	movs	r2, #4
 8008150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008152:	187b      	adds	r3, r7, r1
 8008154:	4a29      	ldr	r2, [pc, #164]	@ (80081fc <HAL_UART_MspInit+0x290>)
 8008156:	0019      	movs	r1, r3
 8008158:	0010      	movs	r0, r2
 800815a:	f000 fc45 	bl	80089e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 800815e:	2200      	movs	r2, #0
 8008160:	2103      	movs	r1, #3
 8008162:	201d      	movs	r0, #29
 8008164:	f000 f990 	bl	8008488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8008168:	201d      	movs	r0, #29
 800816a:	f000 f9a2 	bl	80084b2 <HAL_NVIC_EnableIRQ>
}
 800816e:	e03d      	b.n	80081ec <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART4)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a25      	ldr	r2, [pc, #148]	@ (800820c <HAL_UART_MspInit+0x2a0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d138      	bne.n	80081ec <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART4_CLK_ENABLE();
 800817a:	4b1f      	ldr	r3, [pc, #124]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800817c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800817e:	4b1e      	ldr	r3, [pc, #120]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008180:	2180      	movs	r1, #128	@ 0x80
 8008182:	0309      	lsls	r1, r1, #12
 8008184:	430a      	orrs	r2, r1
 8008186:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008188:	4b1b      	ldr	r3, [pc, #108]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800818a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800818c:	2380      	movs	r3, #128	@ 0x80
 800818e:	031b      	lsls	r3, r3, #12
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008196:	4b18      	ldr	r3, [pc, #96]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 8008198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800819a:	4b17      	ldr	r3, [pc, #92]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 800819c:	2104      	movs	r1, #4
 800819e:	430a      	orrs	r2, r1
 80081a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80081a2:	4b15      	ldr	r3, [pc, #84]	@ (80081f8 <HAL_UART_MspInit+0x28c>)
 80081a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a6:	2204      	movs	r2, #4
 80081a8:	4013      	ands	r3, r2
 80081aa:	60bb      	str	r3, [r7, #8]
 80081ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80081ae:	215c      	movs	r1, #92	@ 0x5c
 80081b0:	187b      	adds	r3, r7, r1
 80081b2:	22c0      	movs	r2, #192	@ 0xc0
 80081b4:	0112      	lsls	r2, r2, #4
 80081b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081b8:	187b      	adds	r3, r7, r1
 80081ba:	2202      	movs	r2, #2
 80081bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081be:	187b      	adds	r3, r7, r1
 80081c0:	2200      	movs	r2, #0
 80081c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	2200      	movs	r2, #0
 80081c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 80081ca:	187b      	adds	r3, r7, r1
 80081cc:	2201      	movs	r2, #1
 80081ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d0:	187b      	adds	r3, r7, r1
 80081d2:	4a0f      	ldr	r2, [pc, #60]	@ (8008210 <HAL_UART_MspInit+0x2a4>)
 80081d4:	0019      	movs	r1, r3
 80081d6:	0010      	movs	r0, r2
 80081d8:	f000 fc06 	bl	80089e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 80081dc:	2200      	movs	r2, #0
 80081de:	2103      	movs	r1, #3
 80081e0:	201d      	movs	r0, #29
 80081e2:	f000 f951 	bl	8008488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80081e6:	201d      	movs	r0, #29
 80081e8:	f000 f963 	bl	80084b2 <HAL_NVIC_EnableIRQ>
}
 80081ec:	46c0      	nop			@ (mov r8, r8)
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b01d      	add	sp, #116	@ 0x74
 80081f2:	bd90      	pop	{r4, r7, pc}
 80081f4:	40013800 	.word	0x40013800
 80081f8:	40021000 	.word	0x40021000
 80081fc:	50000400 	.word	0x50000400
 8008200:	40004400 	.word	0x40004400
 8008204:	50000c00 	.word	0x50000c00
 8008208:	40004800 	.word	0x40004800
 800820c:	40004c00 	.word	0x40004c00
 8008210:	50000800 	.word	0x50000800

08008214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008214:	480d      	ldr	r0, [pc, #52]	@ (800824c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008216:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008218:	f7ff fc9a 	bl	8007b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800821c:	480c      	ldr	r0, [pc, #48]	@ (8008250 <LoopForever+0x6>)
  ldr r1, =_edata
 800821e:	490d      	ldr	r1, [pc, #52]	@ (8008254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008220:	4a0d      	ldr	r2, [pc, #52]	@ (8008258 <LoopForever+0xe>)
  movs r3, #0
 8008222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008224:	e002      	b.n	800822c <LoopCopyDataInit>

08008226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800822a:	3304      	adds	r3, #4

0800822c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800822c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800822e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008230:	d3f9      	bcc.n	8008226 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008232:	4a0a      	ldr	r2, [pc, #40]	@ (800825c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008234:	4c0a      	ldr	r4, [pc, #40]	@ (8008260 <LoopForever+0x16>)
  movs r3, #0
 8008236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008238:	e001      	b.n	800823e <LoopFillZerobss>

0800823a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800823a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800823c:	3204      	adds	r2, #4

0800823e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800823e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008240:	d3fb      	bcc.n	800823a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008242:	f00b f993 	bl	801356c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008246:	f7fe ffb7 	bl	80071b8 <main>

0800824a <LoopForever>:

LoopForever:
  b LoopForever
 800824a:	e7fe      	b.n	800824a <LoopForever>
  ldr   r0, =_estack
 800824c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008254:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8008258:	08017b0c 	.word	0x08017b0c
  ldr r2, =_sbss
 800825c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8008260:	20007290 	.word	0x20007290

08008264 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008264:	e7fe      	b.n	8008264 <ADC1_COMP_IRQHandler>
	...

08008268 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800826e:	1dfb      	adds	r3, r7, #7
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008274:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <HAL_Init+0x3c>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <HAL_Init+0x3c>)
 800827a:	2180      	movs	r1, #128	@ 0x80
 800827c:	0049      	lsls	r1, r1, #1
 800827e:	430a      	orrs	r2, r1
 8008280:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008282:	2003      	movs	r0, #3
 8008284:	f7ff fa90 	bl	80077a8 <HAL_InitTick>
 8008288:	1e03      	subs	r3, r0, #0
 800828a:	d003      	beq.n	8008294 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800828c:	1dfb      	adds	r3, r7, #7
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e001      	b.n	8008298 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008294:	f7ff fa58 	bl	8007748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008298:	1dfb      	adds	r3, r7, #7
 800829a:	781b      	ldrb	r3, [r3, #0]
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b002      	add	sp, #8
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40022000 	.word	0x40022000

080082a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80082ac:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <HAL_IncTick+0x1c>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	001a      	movs	r2, r3
 80082b2:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <HAL_IncTick+0x20>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	18d2      	adds	r2, r2, r3
 80082b8:	4b03      	ldr	r3, [pc, #12]	@ (80082c8 <HAL_IncTick+0x20>)
 80082ba:	601a      	str	r2, [r3, #0]
}
 80082bc:	46c0      	nop			@ (mov r8, r8)
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	46c0      	nop			@ (mov r8, r8)
 80082c4:	20000078 	.word	0x20000078
 80082c8:	20002944 	.word	0x20002944

080082cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  return uwTick;
 80082d0:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <HAL_GetTick+0x10>)
 80082d2:	681b      	ldr	r3, [r3, #0]
}
 80082d4:	0018      	movs	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	20002944 	.word	0x20002944

080082e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082e8:	f7ff fff0 	bl	80082cc <HAL_GetTick>
 80082ec:	0003      	movs	r3, r0
 80082ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	d005      	beq.n	8008306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008324 <HAL_Delay+0x44>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	001a      	movs	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	189b      	adds	r3, r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	f7ff ffe0 	bl	80082cc <HAL_GetTick>
 800830c:	0002      	movs	r2, r0
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	429a      	cmp	r2, r3
 8008316:	d8f7      	bhi.n	8008308 <HAL_Delay+0x28>
  {
  }
}
 8008318:	46c0      	nop			@ (mov r8, r8)
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	46bd      	mov	sp, r7
 800831e:	b004      	add	sp, #16
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	20000078 	.word	0x20000078

08008328 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008330:	4b06      	ldr	r3, [pc, #24]	@ (800834c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a06      	ldr	r2, [pc, #24]	@ (8008350 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008336:	4013      	ands	r3, r2
 8008338:	0019      	movs	r1, r3
 800833a:	4b04      	ldr	r3, [pc, #16]	@ (800834c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	430a      	orrs	r2, r1
 8008340:	601a      	str	r2, [r3, #0]
}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	46bd      	mov	sp, r7
 8008346:	b002      	add	sp, #8
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	40010000 	.word	0x40010000
 8008350:	fffff9ff 	.word	0xfffff9ff

08008354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	0002      	movs	r2, r0
 800835c:	1dfb      	adds	r3, r7, #7
 800835e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008360:	1dfb      	adds	r3, r7, #7
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b7f      	cmp	r3, #127	@ 0x7f
 8008366:	d809      	bhi.n	800837c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008368:	1dfb      	adds	r3, r7, #7
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	001a      	movs	r2, r3
 800836e:	231f      	movs	r3, #31
 8008370:	401a      	ands	r2, r3
 8008372:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <__NVIC_EnableIRQ+0x30>)
 8008374:	2101      	movs	r1, #1
 8008376:	4091      	lsls	r1, r2
 8008378:	000a      	movs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800837c:	46c0      	nop			@ (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b002      	add	sp, #8
 8008382:	bd80      	pop	{r7, pc}
 8008384:	e000e100 	.word	0xe000e100

08008388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	0002      	movs	r2, r0
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	1dfb      	adds	r3, r7, #7
 8008394:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008396:	1dfb      	adds	r3, r7, #7
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b7f      	cmp	r3, #127	@ 0x7f
 800839c:	d828      	bhi.n	80083f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800839e:	4a2f      	ldr	r2, [pc, #188]	@ (800845c <__NVIC_SetPriority+0xd4>)
 80083a0:	1dfb      	adds	r3, r7, #7
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	b25b      	sxtb	r3, r3
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	33c0      	adds	r3, #192	@ 0xc0
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	589b      	ldr	r3, [r3, r2]
 80083ae:	1dfa      	adds	r2, r7, #7
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	0011      	movs	r1, r2
 80083b4:	2203      	movs	r2, #3
 80083b6:	400a      	ands	r2, r1
 80083b8:	00d2      	lsls	r2, r2, #3
 80083ba:	21ff      	movs	r1, #255	@ 0xff
 80083bc:	4091      	lsls	r1, r2
 80083be:	000a      	movs	r2, r1
 80083c0:	43d2      	mvns	r2, r2
 80083c2:	401a      	ands	r2, r3
 80083c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	019b      	lsls	r3, r3, #6
 80083ca:	22ff      	movs	r2, #255	@ 0xff
 80083cc:	401a      	ands	r2, r3
 80083ce:	1dfb      	adds	r3, r7, #7
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	0018      	movs	r0, r3
 80083d4:	2303      	movs	r3, #3
 80083d6:	4003      	ands	r3, r0
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083dc:	481f      	ldr	r0, [pc, #124]	@ (800845c <__NVIC_SetPriority+0xd4>)
 80083de:	1dfb      	adds	r3, r7, #7
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	089b      	lsrs	r3, r3, #2
 80083e6:	430a      	orrs	r2, r1
 80083e8:	33c0      	adds	r3, #192	@ 0xc0
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80083ee:	e031      	b.n	8008454 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008460 <__NVIC_SetPriority+0xd8>)
 80083f2:	1dfb      	adds	r3, r7, #7
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	0019      	movs	r1, r3
 80083f8:	230f      	movs	r3, #15
 80083fa:	400b      	ands	r3, r1
 80083fc:	3b08      	subs	r3, #8
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	3306      	adds	r3, #6
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	18d3      	adds	r3, r2, r3
 8008406:	3304      	adds	r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	1dfa      	adds	r2, r7, #7
 800840c:	7812      	ldrb	r2, [r2, #0]
 800840e:	0011      	movs	r1, r2
 8008410:	2203      	movs	r2, #3
 8008412:	400a      	ands	r2, r1
 8008414:	00d2      	lsls	r2, r2, #3
 8008416:	21ff      	movs	r1, #255	@ 0xff
 8008418:	4091      	lsls	r1, r2
 800841a:	000a      	movs	r2, r1
 800841c:	43d2      	mvns	r2, r2
 800841e:	401a      	ands	r2, r3
 8008420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	019b      	lsls	r3, r3, #6
 8008426:	22ff      	movs	r2, #255	@ 0xff
 8008428:	401a      	ands	r2, r3
 800842a:	1dfb      	adds	r3, r7, #7
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	0018      	movs	r0, r3
 8008430:	2303      	movs	r3, #3
 8008432:	4003      	ands	r3, r0
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008438:	4809      	ldr	r0, [pc, #36]	@ (8008460 <__NVIC_SetPriority+0xd8>)
 800843a:	1dfb      	adds	r3, r7, #7
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	001c      	movs	r4, r3
 8008440:	230f      	movs	r3, #15
 8008442:	4023      	ands	r3, r4
 8008444:	3b08      	subs	r3, #8
 8008446:	089b      	lsrs	r3, r3, #2
 8008448:	430a      	orrs	r2, r1
 800844a:	3306      	adds	r3, #6
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	18c3      	adds	r3, r0, r3
 8008450:	3304      	adds	r3, #4
 8008452:	601a      	str	r2, [r3, #0]
}
 8008454:	46c0      	nop			@ (mov r8, r8)
 8008456:	46bd      	mov	sp, r7
 8008458:	b003      	add	sp, #12
 800845a:	bd90      	pop	{r4, r7, pc}
 800845c:	e000e100 	.word	0xe000e100
 8008460:	e000ed00 	.word	0xe000ed00

08008464 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008468:	f3bf 8f4f 	dsb	sy
}
 800846c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800846e:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <__NVIC_SystemReset+0x1c>)
 8008470:	4a04      	ldr	r2, [pc, #16]	@ (8008484 <__NVIC_SystemReset+0x20>)
 8008472:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008474:	f3bf 8f4f 	dsb	sy
}
 8008478:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800847a:	46c0      	nop			@ (mov r8, r8)
 800847c:	e7fd      	b.n	800847a <__NVIC_SystemReset+0x16>
 800847e:	46c0      	nop			@ (mov r8, r8)
 8008480:	e000ed00 	.word	0xe000ed00
 8008484:	05fa0004 	.word	0x05fa0004

08008488 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	210f      	movs	r1, #15
 8008494:	187b      	adds	r3, r7, r1
 8008496:	1c02      	adds	r2, r0, #0
 8008498:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	187b      	adds	r3, r7, r1
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b25b      	sxtb	r3, r3
 80084a2:	0011      	movs	r1, r2
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7ff ff6f 	bl	8008388 <__NVIC_SetPriority>
}
 80084aa:	46c0      	nop			@ (mov r8, r8)
 80084ac:	46bd      	mov	sp, r7
 80084ae:	b004      	add	sp, #16
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	0002      	movs	r2, r0
 80084ba:	1dfb      	adds	r3, r7, #7
 80084bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084be:	1dfb      	adds	r3, r7, #7
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	b25b      	sxtb	r3, r3
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7ff ff45 	bl	8008354 <__NVIC_EnableIRQ>
}
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	46bd      	mov	sp, r7
 80084ce:	b002      	add	sp, #8
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80084d6:	f7ff ffc5 	bl	8008464 <__NVIC_SystemReset>
	...

080084dc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e050      	b.n	8008590 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2225      	movs	r2, #37	@ 0x25
 80084f2:	5c9b      	ldrb	r3, [r3, r2]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d008      	beq.n	800850c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2204      	movs	r2, #4
 80084fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2224      	movs	r2, #36	@ 0x24
 8008504:	2100      	movs	r1, #0
 8008506:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e041      	b.n	8008590 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	210e      	movs	r1, #14
 8008518:	438a      	bics	r2, r1
 800851a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008526:	491c      	ldr	r1, [pc, #112]	@ (8008598 <HAL_DMA_Abort+0xbc>)
 8008528:	400a      	ands	r2, r1
 800852a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2101      	movs	r1, #1
 8008538:	438a      	bics	r2, r1
 800853a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800853c:	4b17      	ldr	r3, [pc, #92]	@ (800859c <HAL_DMA_Abort+0xc0>)
 800853e:	6859      	ldr	r1, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008544:	221c      	movs	r2, #28
 8008546:	4013      	ands	r3, r2
 8008548:	2201      	movs	r2, #1
 800854a:	409a      	lsls	r2, r3
 800854c:	4b13      	ldr	r3, [pc, #76]	@ (800859c <HAL_DMA_Abort+0xc0>)
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800855a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856e:	490a      	ldr	r1, [pc, #40]	@ (8008598 <HAL_DMA_Abort+0xbc>)
 8008570:	400a      	ands	r2, r1
 8008572:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800857c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2225      	movs	r2, #37	@ 0x25
 8008582:	2101      	movs	r1, #1
 8008584:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2224      	movs	r2, #36	@ 0x24
 800858a:	2100      	movs	r1, #0
 800858c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	0018      	movs	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	b002      	add	sp, #8
 8008596:	bd80      	pop	{r7, pc}
 8008598:	fffffeff 	.word	0xfffffeff
 800859c:	40020000 	.word	0x40020000

080085a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a8:	210f      	movs	r1, #15
 80085aa:	187b      	adds	r3, r7, r1
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2225      	movs	r2, #37	@ 0x25
 80085b4:	5c9b      	ldrb	r3, [r3, r2]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d006      	beq.n	80085ca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2204      	movs	r2, #4
 80085c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80085c2:	187b      	adds	r3, r7, r1
 80085c4:	2201      	movs	r2, #1
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	e049      	b.n	800865e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	210e      	movs	r1, #14
 80085d6:	438a      	bics	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2101      	movs	r1, #1
 80085e6:	438a      	bics	r2, r1
 80085e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f4:	491d      	ldr	r1, [pc, #116]	@ (800866c <HAL_DMA_Abort_IT+0xcc>)
 80085f6:	400a      	ands	r2, r1
 80085f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80085fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008670 <HAL_DMA_Abort_IT+0xd0>)
 80085fc:	6859      	ldr	r1, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008602:	221c      	movs	r2, #28
 8008604:	4013      	ands	r3, r2
 8008606:	2201      	movs	r2, #1
 8008608:	409a      	lsls	r2, r3
 800860a:	4b19      	ldr	r3, [pc, #100]	@ (8008670 <HAL_DMA_Abort_IT+0xd0>)
 800860c:	430a      	orrs	r2, r1
 800860e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008618:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00c      	beq.n	800863c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800862c:	490f      	ldr	r1, [pc, #60]	@ (800866c <HAL_DMA_Abort_IT+0xcc>)
 800862e:	400a      	ands	r2, r1
 8008630:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800863a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2225      	movs	r2, #37	@ 0x25
 8008640:	2101      	movs	r1, #1
 8008642:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2224      	movs	r2, #36	@ 0x24
 8008648:	2100      	movs	r1, #0
 800864a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	0010      	movs	r0, r2
 800865c:	4798      	blx	r3
    }
  }
  return status;
 800865e:	230f      	movs	r3, #15
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	781b      	ldrb	r3, [r3, #0]
}
 8008664:	0018      	movs	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	b004      	add	sp, #16
 800866a:	bd80      	pop	{r7, pc}
 800866c:	fffffeff 	.word	0xfffffeff
 8008670:	40020000 	.word	0x40020000

08008674 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008680:	0018      	movs	r0, r3
 8008682:	46bd      	mov	sp, r7
 8008684:	b002      	add	sp, #8
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008688:	b5b0      	push	{r4, r5, r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603a      	str	r2, [r7, #0]
 8008694:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008696:	4b21      	ldr	r3, [pc, #132]	@ (800871c <HAL_FLASH_Program+0x94>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_FLASH_Program+0x1a>
 800869e:	2302      	movs	r3, #2
 80086a0:	e038      	b.n	8008714 <HAL_FLASH_Program+0x8c>
 80086a2:	4b1e      	ldr	r3, [pc, #120]	@ (800871c <HAL_FLASH_Program+0x94>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80086a8:	4b1c      	ldr	r3, [pc, #112]	@ (800871c <HAL_FLASH_Program+0x94>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80086ae:	2517      	movs	r5, #23
 80086b0:	197c      	adds	r4, r7, r5
 80086b2:	23fa      	movs	r3, #250	@ 0xfa
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	0018      	movs	r0, r3
 80086b8:	f000 f884 	bl	80087c4 <FLASH_WaitForLastOperation>
 80086bc:	0003      	movs	r3, r0
 80086be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80086c0:	197b      	adds	r3, r7, r5
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d11f      	bne.n	8008708 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d106      	bne.n	80086dc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	0008      	movs	r0, r1
 80086d6:	f000 f8c3 	bl	8008860 <FLASH_Program_DoubleWord>
 80086da:	e005      	b.n	80086e8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	0011      	movs	r1, r2
 80086e2:	0018      	movs	r0, r3
 80086e4:	f00e fb98 	bl	8016e18 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80086e8:	2317      	movs	r3, #23
 80086ea:	18fc      	adds	r4, r7, r3
 80086ec:	23fa      	movs	r3, #250	@ 0xfa
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	0018      	movs	r0, r3
 80086f2:	f000 f867 	bl	80087c4 <FLASH_WaitForLastOperation>
 80086f6:	0003      	movs	r3, r0
 80086f8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80086fa:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <HAL_FLASH_Program+0x98>)
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	43d9      	mvns	r1, r3
 8008702:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <HAL_FLASH_Program+0x98>)
 8008704:	400a      	ands	r2, r1
 8008706:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008708:	4b04      	ldr	r3, [pc, #16]	@ (800871c <HAL_FLASH_Program+0x94>)
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800870e:	2317      	movs	r3, #23
 8008710:	18fb      	adds	r3, r7, r3
 8008712:	781b      	ldrb	r3, [r3, #0]
}
 8008714:	0018      	movs	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	b006      	add	sp, #24
 800871a:	bdb0      	pop	{r4, r5, r7, pc}
 800871c:	20002948 	.word	0x20002948
 8008720:	40022000 	.word	0x40022000

08008724 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	1dfb      	adds	r3, r7, #7
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008730:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <HAL_FLASH_Unlock+0x3c>)
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	da0c      	bge.n	8008752 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008738:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <HAL_FLASH_Unlock+0x3c>)
 800873a:	4a0a      	ldr	r2, [pc, #40]	@ (8008764 <HAL_FLASH_Unlock+0x40>)
 800873c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800873e:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <HAL_FLASH_Unlock+0x3c>)
 8008740:	4a09      	ldr	r2, [pc, #36]	@ (8008768 <HAL_FLASH_Unlock+0x44>)
 8008742:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008744:	4b06      	ldr	r3, [pc, #24]	@ (8008760 <HAL_FLASH_Unlock+0x3c>)
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da02      	bge.n	8008752 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800874c:	1dfb      	adds	r3, r7, #7
 800874e:	2201      	movs	r2, #1
 8008750:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008752:	1dfb      	adds	r3, r7, #7
 8008754:	781b      	ldrb	r3, [r3, #0]
}
 8008756:	0018      	movs	r0, r3
 8008758:	46bd      	mov	sp, r7
 800875a:	b002      	add	sp, #8
 800875c:	bd80      	pop	{r7, pc}
 800875e:	46c0      	nop			@ (mov r8, r8)
 8008760:	40022000 	.word	0x40022000
 8008764:	45670123 	.word	0x45670123
 8008768:	cdef89ab 	.word	0xcdef89ab

0800876c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008772:	1dfb      	adds	r3, r7, #7
 8008774:	2201      	movs	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008778:	23fa      	movs	r3, #250	@ 0xfa
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	0018      	movs	r0, r3
 800877e:	f000 f821 	bl	80087c4 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008782:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <HAL_FLASH_Lock+0x40>)
 8008784:	695a      	ldr	r2, [r3, #20]
 8008786:	4b09      	ldr	r3, [pc, #36]	@ (80087ac <HAL_FLASH_Lock+0x40>)
 8008788:	2180      	movs	r1, #128	@ 0x80
 800878a:	0609      	lsls	r1, r1, #24
 800878c:	430a      	orrs	r2, r1
 800878e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008790:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <HAL_FLASH_Lock+0x40>)
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	da02      	bge.n	800879e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008798:	1dfb      	adds	r3, r7, #7
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800879e:	1dfb      	adds	r3, r7, #7
 80087a0:	781b      	ldrb	r3, [r3, #0]
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b002      	add	sp, #8
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	46c0      	nop			@ (mov r8, r8)
 80087ac:	40022000 	.word	0x40022000

080087b0 <HAL_FLASH_GetError>:
  *            @arg @ref HAL_FLASH_ERROR_OPTV Option validity error
  *            @arg @ref HAL_FLASH_ERROR_ECCD two ECC errors have been detected
  * @note (*) availability depends on devices
  */
uint32_t HAL_FLASH_GetError(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80087b4:	4b02      	ldr	r3, [pc, #8]	@ (80087c0 <HAL_FLASH_GetError+0x10>)
 80087b6:	685b      	ldr	r3, [r3, #4]
}
 80087b8:	0018      	movs	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	20002948 	.word	0x20002948

080087c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80087cc:	f7ff fd7e 	bl	80082cc <HAL_GetTick>
 80087d0:	0003      	movs	r3, r0
 80087d2:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80087d4:	2380      	movs	r3, #128	@ 0x80
 80087d6:	025b      	lsls	r3, r3, #9
 80087d8:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80087da:	e00c      	b.n	80087f6 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3301      	adds	r3, #1
 80087e0:	d009      	beq.n	80087f6 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80087e2:	f7ff fd73 	bl	80082cc <HAL_GetTick>
 80087e6:	0002      	movs	r2, r0
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d801      	bhi.n	80087f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e028      	b.n	8008848 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80087f6:	4b16      	ldr	r3, [pc, #88]	@ (8008850 <FLASH_WaitForLastOperation+0x8c>)
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4013      	ands	r3, r2
 80087fe:	d1ed      	bne.n	80087dc <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008800:	4b13      	ldr	r3, [pc, #76]	@ (8008850 <FLASH_WaitForLastOperation+0x8c>)
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	4a13      	ldr	r2, [pc, #76]	@ (8008854 <FLASH_WaitForLastOperation+0x90>)
 8008806:	4013      	ands	r3, r2
 8008808:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800880a:	4b11      	ldr	r3, [pc, #68]	@ (8008850 <FLASH_WaitForLastOperation+0x8c>)
 800880c:	4a12      	ldr	r2, [pc, #72]	@ (8008858 <FLASH_WaitForLastOperation+0x94>)
 800880e:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d011      	beq.n	800883a <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008816:	4b11      	ldr	r3, [pc, #68]	@ (800885c <FLASH_WaitForLastOperation+0x98>)
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e013      	b.n	8008848 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3301      	adds	r3, #1
 8008824:	d009      	beq.n	800883a <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008826:	f7ff fd51 	bl	80082cc <HAL_GetTick>
 800882a:	0002      	movs	r2, r0
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d801      	bhi.n	800883a <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e006      	b.n	8008848 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800883a:	4b05      	ldr	r3, [pc, #20]	@ (8008850 <FLASH_WaitForLastOperation+0x8c>)
 800883c:	691a      	ldr	r2, [r3, #16]
 800883e:	2380      	movs	r3, #128	@ 0x80
 8008840:	02db      	lsls	r3, r3, #11
 8008842:	4013      	ands	r3, r2
 8008844:	d1ec      	bne.n	8008820 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b004      	add	sp, #16
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40022000 	.word	0x40022000
 8008854:	0000c3fa 	.word	0x0000c3fa
 8008858:	0000c3fb 	.word	0x0000c3fb
 800885c:	20002948 	.word	0x20002948

08008860 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008860:	b5b0      	push	{r4, r5, r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	603a      	str	r2, [r7, #0]
 800886a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800886c:	4b0b      	ldr	r3, [pc, #44]	@ (800889c <FLASH_Program_DoubleWord+0x3c>)
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <FLASH_Program_DoubleWord+0x3c>)
 8008872:	2101      	movs	r1, #1
 8008874:	430a      	orrs	r2, r1
 8008876:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800887e:	f3bf 8f6f 	isb	sy
}
 8008882:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	001c      	movs	r4, r3
 8008888:	2300      	movs	r3, #0
 800888a:	001d      	movs	r5, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3304      	adds	r3, #4
 8008890:	0022      	movs	r2, r4
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	46c0      	nop			@ (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b004      	add	sp, #16
 800889a:	bdb0      	pop	{r4, r5, r7, pc}
 800889c:	40022000 	.word	0x40022000

080088a0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80088a0:	b5b0      	push	{r4, r5, r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80088aa:	4b35      	ldr	r3, [pc, #212]	@ (8008980 <HAL_FLASHEx_Erase+0xe0>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_FLASHEx_Erase+0x16>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e05f      	b.n	8008976 <HAL_FLASHEx_Erase+0xd6>
 80088b6:	4b32      	ldr	r3, [pc, #200]	@ (8008980 <HAL_FLASHEx_Erase+0xe0>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80088bc:	4b30      	ldr	r3, [pc, #192]	@ (8008980 <HAL_FLASHEx_Erase+0xe0>)
 80088be:	2200      	movs	r2, #0
 80088c0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80088c2:	250f      	movs	r5, #15
 80088c4:	197c      	adds	r4, r7, r5
 80088c6:	23fa      	movs	r3, #250	@ 0xfa
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	0018      	movs	r0, r3
 80088cc:	f7ff ff7a 	bl	80087c4 <FLASH_WaitForLastOperation>
 80088d0:	0003      	movs	r3, r0
 80088d2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80088d4:	002c      	movs	r4, r5
 80088d6:	193b      	adds	r3, r7, r4
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d145      	bne.n	800896a <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2204      	movs	r2, #4
 80088e2:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d10d      	bne.n	8008908 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	0018      	movs	r0, r3
 80088f2:	f000 f849 	bl	8008988 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80088f6:	193c      	adds	r4, r7, r4
 80088f8:	23fa      	movs	r3, #250	@ 0xfa
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7ff ff61 	bl	80087c4 <FLASH_WaitForLastOperation>
 8008902:	0003      	movs	r3, r0
 8008904:	7023      	strb	r3, [r4, #0]
 8008906:	e030      	b.n	800896a <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2201      	movs	r2, #1
 800890c:	4252      	negs	r2, r2
 800890e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	e01a      	b.n	800894e <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	0011      	movs	r1, r2
 8008920:	0018      	movs	r0, r3
 8008922:	f000 f845 	bl	80089b0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008926:	250f      	movs	r5, #15
 8008928:	197c      	adds	r4, r7, r5
 800892a:	23fa      	movs	r3, #250	@ 0xfa
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	0018      	movs	r0, r3
 8008930:	f7ff ff48 	bl	80087c4 <FLASH_WaitForLastOperation>
 8008934:	0003      	movs	r3, r0
 8008936:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008938:	197b      	adds	r3, r7, r5
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	601a      	str	r2, [r3, #0]
          break;
 8008946:	e00a      	b.n	800895e <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	3301      	adds	r3, #1
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	18d3      	adds	r3, r2, r3
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	d3dc      	bcc.n	8008918 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800895e:	4b09      	ldr	r3, [pc, #36]	@ (8008984 <HAL_FLASHEx_Erase+0xe4>)
 8008960:	695a      	ldr	r2, [r3, #20]
 8008962:	4b08      	ldr	r3, [pc, #32]	@ (8008984 <HAL_FLASHEx_Erase+0xe4>)
 8008964:	2102      	movs	r1, #2
 8008966:	438a      	bics	r2, r1
 8008968:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800896a:	4b05      	ldr	r3, [pc, #20]	@ (8008980 <HAL_FLASHEx_Erase+0xe0>)
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008970:	230f      	movs	r3, #15
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	781b      	ldrb	r3, [r3, #0]
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b004      	add	sp, #16
 800897c:	bdb0      	pop	{r4, r5, r7, pc}
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	20002948 	.word	0x20002948
 8008984:	40022000 	.word	0x40022000

08008988 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008990:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <FLASH_MassErase+0x24>)
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	431a      	orrs	r2, r3
 8008998:	4b04      	ldr	r3, [pc, #16]	@ (80089ac <FLASH_MassErase+0x24>)
 800899a:	2180      	movs	r1, #128	@ 0x80
 800899c:	0249      	lsls	r1, r1, #9
 800899e:	430a      	orrs	r2, r1
 80089a0:	615a      	str	r2, [r3, #20]
}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	46bd      	mov	sp, r7
 80089a6:	b002      	add	sp, #8
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	40022000 	.word	0x40022000

080089b0 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80089ba:	4b08      	ldr	r3, [pc, #32]	@ (80089dc <FLASH_PageErase+0x2c>)
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	4a08      	ldr	r2, [pc, #32]	@ (80089e0 <FLASH_PageErase+0x30>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	00da      	lsls	r2, r3, #3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	4b03      	ldr	r3, [pc, #12]	@ (80089dc <FLASH_PageErase+0x2c>)
 80089ce:	4905      	ldr	r1, [pc, #20]	@ (80089e4 <FLASH_PageErase+0x34>)
 80089d0:	430a      	orrs	r2, r1
 80089d2:	615a      	str	r2, [r3, #20]
}
 80089d4:	46c0      	nop			@ (mov r8, r8)
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b004      	add	sp, #16
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	40022000 	.word	0x40022000
 80089e0:	ffffe007 	.word	0xffffe007
 80089e4:	00010002 	.word	0x00010002

080089e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089f6:	e147      	b.n	8008c88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2101      	movs	r1, #1
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4091      	lsls	r1, r2
 8008a02:	000a      	movs	r2, r1
 8008a04:	4013      	ands	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d100      	bne.n	8008a10 <HAL_GPIO_Init+0x28>
 8008a0e:	e138      	b.n	8008c82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2203      	movs	r2, #3
 8008a16:	4013      	ands	r3, r2
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d005      	beq.n	8008a28 <HAL_GPIO_Init+0x40>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2203      	movs	r2, #3
 8008a22:	4013      	ands	r3, r2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d130      	bne.n	8008a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	2203      	movs	r2, #3
 8008a34:	409a      	lsls	r2, r3
 8008a36:	0013      	movs	r3, r2
 8008a38:	43da      	mvns	r2, r3
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	409a      	lsls	r2, r3
 8008a4a:	0013      	movs	r3, r2
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a5e:	2201      	movs	r2, #1
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	409a      	lsls	r2, r3
 8008a64:	0013      	movs	r3, r2
 8008a66:	43da      	mvns	r2, r3
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	091b      	lsrs	r3, r3, #4
 8008a74:	2201      	movs	r2, #1
 8008a76:	401a      	ands	r2, r3
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	0013      	movs	r3, r2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	2203      	movs	r2, #3
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d017      	beq.n	8008ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	409a      	lsls	r2, r3
 8008aa4:	0013      	movs	r3, r2
 8008aa6:	43da      	mvns	r2, r3
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	409a      	lsls	r2, r3
 8008ab8:	0013      	movs	r3, r2
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2203      	movs	r2, #3
 8008acc:	4013      	ands	r3, r2
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d123      	bne.n	8008b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	08da      	lsrs	r2, r3, #3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3208      	adds	r2, #8
 8008ada:	0092      	lsls	r2, r2, #2
 8008adc:	58d3      	ldr	r3, [r2, r3]
 8008ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2207      	movs	r2, #7
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	220f      	movs	r2, #15
 8008aea:	409a      	lsls	r2, r3
 8008aec:	0013      	movs	r3, r2
 8008aee:	43da      	mvns	r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4013      	ands	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2107      	movs	r1, #7
 8008afe:	400b      	ands	r3, r1
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	409a      	lsls	r2, r3
 8008b04:	0013      	movs	r3, r2
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	08da      	lsrs	r2, r3, #3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3208      	adds	r2, #8
 8008b14:	0092      	lsls	r2, r2, #2
 8008b16:	6939      	ldr	r1, [r7, #16]
 8008b18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	2203      	movs	r2, #3
 8008b26:	409a      	lsls	r2, r3
 8008b28:	0013      	movs	r3, r2
 8008b2a:	43da      	mvns	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2203      	movs	r2, #3
 8008b38:	401a      	ands	r2, r3
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	0013      	movs	r3, r2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	23c0      	movs	r3, #192	@ 0xc0
 8008b54:	029b      	lsls	r3, r3, #10
 8008b56:	4013      	ands	r3, r2
 8008b58:	d100      	bne.n	8008b5c <HAL_GPIO_Init+0x174>
 8008b5a:	e092      	b.n	8008c82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008b5c:	4a50      	ldr	r2, [pc, #320]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	3318      	adds	r3, #24
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	589b      	ldr	r3, [r3, r2]
 8008b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	4013      	ands	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	220f      	movs	r2, #15
 8008b74:	409a      	lsls	r2, r3
 8008b76:	0013      	movs	r3, r2
 8008b78:	43da      	mvns	r2, r3
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	23a0      	movs	r3, #160	@ 0xa0
 8008b84:	05db      	lsls	r3, r3, #23
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d013      	beq.n	8008bb2 <HAL_GPIO_Init+0x1ca>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a45      	ldr	r2, [pc, #276]	@ (8008ca4 <HAL_GPIO_Init+0x2bc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00d      	beq.n	8008bae <HAL_GPIO_Init+0x1c6>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a44      	ldr	r2, [pc, #272]	@ (8008ca8 <HAL_GPIO_Init+0x2c0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <HAL_GPIO_Init+0x1c2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a43      	ldr	r2, [pc, #268]	@ (8008cac <HAL_GPIO_Init+0x2c4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <HAL_GPIO_Init+0x1be>
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e006      	b.n	8008bb4 <HAL_GPIO_Init+0x1cc>
 8008ba6:	2305      	movs	r3, #5
 8008ba8:	e004      	b.n	8008bb4 <HAL_GPIO_Init+0x1cc>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e002      	b.n	8008bb4 <HAL_GPIO_Init+0x1cc>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <HAL_GPIO_Init+0x1cc>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	2103      	movs	r1, #3
 8008bb8:	400a      	ands	r2, r1
 8008bba:	00d2      	lsls	r2, r2, #3
 8008bbc:	4093      	lsls	r3, r2
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008bc4:	4936      	ldr	r1, [pc, #216]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	089b      	lsrs	r3, r3, #2
 8008bca:	3318      	adds	r3, #24
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008bd2:	4b33      	ldr	r3, [pc, #204]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	43da      	mvns	r2, r3
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4013      	ands	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	2380      	movs	r3, #128	@ 0x80
 8008be8:	035b      	lsls	r3, r3, #13
 8008bea:	4013      	ands	r3, r2
 8008bec:	d003      	beq.n	8008bf6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008bfc:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	43da      	mvns	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4013      	ands	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	2380      	movs	r3, #128	@ 0x80
 8008c12:	039b      	lsls	r3, r3, #14
 8008c14:	4013      	ands	r3, r2
 8008c16:	d003      	beq.n	8008c20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008c20:	4b1f      	ldr	r3, [pc, #124]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008c26:	4a1e      	ldr	r2, [pc, #120]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008c28:	2384      	movs	r3, #132	@ 0x84
 8008c2a:	58d3      	ldr	r3, [r2, r3]
 8008c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	43da      	mvns	r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	4013      	ands	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	2380      	movs	r3, #128	@ 0x80
 8008c3e:	029b      	lsls	r3, r3, #10
 8008c40:	4013      	ands	r3, r2
 8008c42:	d003      	beq.n	8008c4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008c4c:	4914      	ldr	r1, [pc, #80]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008c4e:	2284      	movs	r2, #132	@ 0x84
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008c54:	4a12      	ldr	r2, [pc, #72]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008c56:	2380      	movs	r3, #128	@ 0x80
 8008c58:	58d3      	ldr	r3, [r2, r3]
 8008c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	43da      	mvns	r2, r3
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	4013      	ands	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	2380      	movs	r3, #128	@ 0x80
 8008c6c:	025b      	lsls	r3, r3, #9
 8008c6e:	4013      	ands	r3, r2
 8008c70:	d003      	beq.n	8008c7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008c7a:	4909      	ldr	r1, [pc, #36]	@ (8008ca0 <HAL_GPIO_Init+0x2b8>)
 8008c7c:	2280      	movs	r2, #128	@ 0x80
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	3301      	adds	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	40da      	lsrs	r2, r3
 8008c90:	1e13      	subs	r3, r2, #0
 8008c92:	d000      	beq.n	8008c96 <HAL_GPIO_Init+0x2ae>
 8008c94:	e6b0      	b.n	80089f8 <HAL_GPIO_Init+0x10>
  }
}
 8008c96:	46c0      	nop			@ (mov r8, r8)
 8008c98:	46c0      	nop			@ (mov r8, r8)
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	b006      	add	sp, #24
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	40021800 	.word	0x40021800
 8008ca4:	50000400 	.word	0x50000400
 8008ca8:	50000800 	.word	0x50000800
 8008cac:	50000c00 	.word	0x50000c00

08008cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	000a      	movs	r2, r1
 8008cba:	1cbb      	adds	r3, r7, #2
 8008cbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	1cba      	adds	r2, r7, #2
 8008cc4:	8812      	ldrh	r2, [r2, #0]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	d004      	beq.n	8008cd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008cca:	230f      	movs	r3, #15
 8008ccc:	18fb      	adds	r3, r7, r3
 8008cce:	2201      	movs	r2, #1
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	e003      	b.n	8008cdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cd4:	230f      	movs	r3, #15
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008cdc:	230f      	movs	r3, #15
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	781b      	ldrb	r3, [r3, #0]
}
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	b004      	add	sp, #16
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	0008      	movs	r0, r1
 8008cf4:	0011      	movs	r1, r2
 8008cf6:	1cbb      	adds	r3, r7, #2
 8008cf8:	1c02      	adds	r2, r0, #0
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	1c7b      	adds	r3, r7, #1
 8008cfe:	1c0a      	adds	r2, r1, #0
 8008d00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d02:	1c7b      	adds	r3, r7, #1
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d004      	beq.n	8008d14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d0a:	1cbb      	adds	r3, r7, #2
 8008d0c:	881a      	ldrh	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d12:	e003      	b.n	8008d1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008d14:	1cbb      	adds	r3, r7, #2
 8008d16:	881a      	ldrh	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008d1c:	46c0      	nop			@ (mov r8, r8)
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	b002      	add	sp, #8
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	000a      	movs	r2, r1
 8008d2e:	1cbb      	adds	r3, r7, #2
 8008d30:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d38:	1cbb      	adds	r3, r7, #2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	041a      	lsls	r2, r3, #16
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	43db      	mvns	r3, r3
 8008d46:	1cb9      	adds	r1, r7, #2
 8008d48:	8809      	ldrh	r1, [r1, #0]
 8008d4a:	400b      	ands	r3, r1
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	619a      	str	r2, [r3, #24]
}
 8008d52:	46c0      	nop			@ (mov r8, r8)
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b004      	add	sp, #16
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e08f      	b.n	8008e8e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2241      	movs	r2, #65	@ 0x41
 8008d72:	5c9b      	ldrb	r3, [r3, r2]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d107      	bne.n	8008d8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2240      	movs	r2, #64	@ 0x40
 8008d7e:	2100      	movs	r1, #0
 8008d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7fd fcdf 	bl	8006748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2241      	movs	r2, #65	@ 0x41
 8008d8e:	2124      	movs	r1, #36	@ 0x24
 8008d90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	438a      	bics	r2, r1
 8008da0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	493b      	ldr	r1, [pc, #236]	@ (8008e98 <HAL_I2C_Init+0x13c>)
 8008dac:	400a      	ands	r2, r1
 8008dae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4938      	ldr	r1, [pc, #224]	@ (8008e9c <HAL_I2C_Init+0x140>)
 8008dbc:	400a      	ands	r2, r1
 8008dbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d108      	bne.n	8008dda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2180      	movs	r1, #128	@ 0x80
 8008dd2:	0209      	lsls	r1, r1, #8
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]
 8008dd8:	e007      	b.n	8008dea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2184      	movs	r1, #132	@ 0x84
 8008de4:	0209      	lsls	r1, r1, #8
 8008de6:	430a      	orrs	r2, r1
 8008de8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d109      	bne.n	8008e06 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2180      	movs	r1, #128	@ 0x80
 8008dfe:	0109      	lsls	r1, r1, #4
 8008e00:	430a      	orrs	r2, r1
 8008e02:	605a      	str	r2, [r3, #4]
 8008e04:	e007      	b.n	8008e16 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4923      	ldr	r1, [pc, #140]	@ (8008ea0 <HAL_I2C_Init+0x144>)
 8008e12:	400a      	ands	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4920      	ldr	r1, [pc, #128]	@ (8008ea4 <HAL_I2C_Init+0x148>)
 8008e22:	430a      	orrs	r2, r1
 8008e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	491a      	ldr	r1, [pc, #104]	@ (8008e9c <HAL_I2C_Init+0x140>)
 8008e32:	400a      	ands	r2, r1
 8008e34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69d9      	ldr	r1, [r3, #28]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2241      	movs	r2, #65	@ 0x41
 8008e7a:	2120      	movs	r1, #32
 8008e7c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2242      	movs	r2, #66	@ 0x42
 8008e88:	2100      	movs	r1, #0
 8008e8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	0018      	movs	r0, r3
 8008e90:	46bd      	mov	sp, r7
 8008e92:	b002      	add	sp, #8
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	46c0      	nop			@ (mov r8, r8)
 8008e98:	f0ffffff 	.word	0xf0ffffff
 8008e9c:	ffff7fff 	.word	0xffff7fff
 8008ea0:	fffff7ff 	.word	0xfffff7ff
 8008ea4:	02008000 	.word	0x02008000

08008ea8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008ea8:	b590      	push	{r4, r7, lr}
 8008eaa:	b089      	sub	sp, #36	@ 0x24
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	0008      	movs	r0, r1
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	1c02      	adds	r2, r0, #0
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	2308      	movs	r3, #8
 8008ec0:	18fb      	adds	r3, r7, r3
 8008ec2:	1c0a      	adds	r2, r1, #0
 8008ec4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2241      	movs	r2, #65	@ 0x41
 8008eca:	5c9b      	ldrb	r3, [r3, r2]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d000      	beq.n	8008ed4 <HAL_I2C_Master_Transmit+0x2c>
 8008ed2:	e10a      	b.n	80090ea <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2240      	movs	r2, #64	@ 0x40
 8008ed8:	5c9b      	ldrb	r3, [r3, r2]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <HAL_I2C_Master_Transmit+0x3a>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e104      	b.n	80090ec <HAL_I2C_Master_Transmit+0x244>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2240      	movs	r2, #64	@ 0x40
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008eea:	f7ff f9ef 	bl	80082cc <HAL_GetTick>
 8008eee:	0003      	movs	r3, r0
 8008ef0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ef2:	2380      	movs	r3, #128	@ 0x80
 8008ef4:	0219      	lsls	r1, r3, #8
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	2319      	movs	r3, #25
 8008efe:	2201      	movs	r2, #1
 8008f00:	f000 fe4a 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8008f04:	1e03      	subs	r3, r0, #0
 8008f06:	d001      	beq.n	8008f0c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e0ef      	b.n	80090ec <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2241      	movs	r2, #65	@ 0x41
 8008f10:	2121      	movs	r1, #33	@ 0x21
 8008f12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2242      	movs	r2, #66	@ 0x42
 8008f18:	2110      	movs	r1, #16
 8008f1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2208      	movs	r2, #8
 8008f2c:	18ba      	adds	r2, r7, r2
 8008f2e:	8812      	ldrh	r2, [r2, #0]
 8008f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2bff      	cmp	r3, #255	@ 0xff
 8008f40:	d906      	bls.n	8008f50 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	22ff      	movs	r2, #255	@ 0xff
 8008f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008f48:	2380      	movs	r3, #128	@ 0x80
 8008f4a:	045b      	lsls	r3, r3, #17
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e007      	b.n	8008f60 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008f5a:	2380      	movs	r3, #128	@ 0x80
 8008f5c:	049b      	lsls	r3, r3, #18
 8008f5e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d027      	beq.n	8008fb8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6c:	781a      	ldrb	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	697c      	ldr	r4, [r7, #20]
 8008fa4:	230a      	movs	r3, #10
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	8819      	ldrh	r1, [r3, #0]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	4b51      	ldr	r3, [pc, #324]	@ (80090f4 <HAL_I2C_Master_Transmit+0x24c>)
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	0023      	movs	r3, r4
 8008fb2:	f001 f869 	bl	800a088 <I2C_TransferConfig>
 8008fb6:	e06f      	b.n	8009098 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	697c      	ldr	r4, [r7, #20]
 8008fc0:	230a      	movs	r3, #10
 8008fc2:	18fb      	adds	r3, r7, r3
 8008fc4:	8819      	ldrh	r1, [r3, #0]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80090f4 <HAL_I2C_Master_Transmit+0x24c>)
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	0023      	movs	r3, r4
 8008fce:	f001 f85b 	bl	800a088 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008fd2:	e061      	b.n	8009098 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f000 fe34 	bl	8009c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fe0:	1e03      	subs	r3, r0, #0
 8008fe2:	d001      	beq.n	8008fe8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e081      	b.n	80090ec <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d03a      	beq.n	8009098 <HAL_I2C_Master_Transmit+0x1f0>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d136      	bne.n	8009098 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800902a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	0013      	movs	r3, r2
 8009034:	2200      	movs	r2, #0
 8009036:	2180      	movs	r1, #128	@ 0x80
 8009038:	f000 fdae 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 800903c:	1e03      	subs	r3, r0, #0
 800903e:	d001      	beq.n	8009044 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e053      	b.n	80090ec <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009048:	b29b      	uxth	r3, r3
 800904a:	2bff      	cmp	r3, #255	@ 0xff
 800904c:	d911      	bls.n	8009072 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	22ff      	movs	r2, #255	@ 0xff
 8009052:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009058:	b2da      	uxtb	r2, r3
 800905a:	2380      	movs	r3, #128	@ 0x80
 800905c:	045c      	lsls	r4, r3, #17
 800905e:	230a      	movs	r3, #10
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	8819      	ldrh	r1, [r3, #0]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	2300      	movs	r3, #0
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	0023      	movs	r3, r4
 800906c:	f001 f80c 	bl	800a088 <I2C_TransferConfig>
 8009070:	e012      	b.n	8009098 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009080:	b2da      	uxtb	r2, r3
 8009082:	2380      	movs	r3, #128	@ 0x80
 8009084:	049c      	lsls	r4, r3, #18
 8009086:	230a      	movs	r3, #10
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	8819      	ldrh	r1, [r3, #0]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	2300      	movs	r3, #0
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	0023      	movs	r3, r4
 8009094:	f000 fff8 	bl	800a088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d198      	bne.n	8008fd4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f000 fe13 	bl	8009cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090ae:	1e03      	subs	r3, r0, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e01a      	b.n	80090ec <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2220      	movs	r2, #32
 80090bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	490b      	ldr	r1, [pc, #44]	@ (80090f8 <HAL_I2C_Master_Transmit+0x250>)
 80090ca:	400a      	ands	r2, r1
 80090cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2241      	movs	r2, #65	@ 0x41
 80090d2:	2120      	movs	r1, #32
 80090d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2242      	movs	r2, #66	@ 0x42
 80090da:	2100      	movs	r1, #0
 80090dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2240      	movs	r2, #64	@ 0x40
 80090e2:	2100      	movs	r1, #0
 80090e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e000      	b.n	80090ec <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80090ea:	2302      	movs	r3, #2
  }
}
 80090ec:	0018      	movs	r0, r3
 80090ee:	46bd      	mov	sp, r7
 80090f0:	b007      	add	sp, #28
 80090f2:	bd90      	pop	{r4, r7, pc}
 80090f4:	80002000 	.word	0x80002000
 80090f8:	fe00e800 	.word	0xfe00e800

080090fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80090fc:	b590      	push	{r4, r7, lr}
 80090fe:	b089      	sub	sp, #36	@ 0x24
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	0008      	movs	r0, r1
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	0019      	movs	r1, r3
 800910a:	230a      	movs	r3, #10
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	1c02      	adds	r2, r0, #0
 8009110:	801a      	strh	r2, [r3, #0]
 8009112:	2308      	movs	r3, #8
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	1c0a      	adds	r2, r1, #0
 8009118:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2241      	movs	r2, #65	@ 0x41
 800911e:	5c9b      	ldrb	r3, [r3, r2]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b20      	cmp	r3, #32
 8009124:	d000      	beq.n	8009128 <HAL_I2C_Master_Receive+0x2c>
 8009126:	e0e8      	b.n	80092fa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2240      	movs	r2, #64	@ 0x40
 800912c:	5c9b      	ldrb	r3, [r3, r2]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_I2C_Master_Receive+0x3a>
 8009132:	2302      	movs	r3, #2
 8009134:	e0e2      	b.n	80092fc <HAL_I2C_Master_Receive+0x200>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2240      	movs	r2, #64	@ 0x40
 800913a:	2101      	movs	r1, #1
 800913c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800913e:	f7ff f8c5 	bl	80082cc <HAL_GetTick>
 8009142:	0003      	movs	r3, r0
 8009144:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009146:	2380      	movs	r3, #128	@ 0x80
 8009148:	0219      	lsls	r1, r3, #8
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	2319      	movs	r3, #25
 8009152:	2201      	movs	r2, #1
 8009154:	f000 fd20 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8009158:	1e03      	subs	r3, r0, #0
 800915a:	d001      	beq.n	8009160 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e0cd      	b.n	80092fc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2241      	movs	r2, #65	@ 0x41
 8009164:	2122      	movs	r1, #34	@ 0x22
 8009166:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2242      	movs	r2, #66	@ 0x42
 800916c:	2110      	movs	r1, #16
 800916e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2208      	movs	r2, #8
 8009180:	18ba      	adds	r2, r7, r2
 8009182:	8812      	ldrh	r2, [r2, #0]
 8009184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009190:	b29b      	uxth	r3, r3
 8009192:	2bff      	cmp	r3, #255	@ 0xff
 8009194:	d911      	bls.n	80091ba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	22ff      	movs	r2, #255	@ 0xff
 800919a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	2380      	movs	r3, #128	@ 0x80
 80091a4:	045c      	lsls	r4, r3, #17
 80091a6:	230a      	movs	r3, #10
 80091a8:	18fb      	adds	r3, r7, r3
 80091aa:	8819      	ldrh	r1, [r3, #0]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	4b55      	ldr	r3, [pc, #340]	@ (8009304 <HAL_I2C_Master_Receive+0x208>)
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	0023      	movs	r3, r4
 80091b4:	f000 ff68 	bl	800a088 <I2C_TransferConfig>
 80091b8:	e076      	b.n	80092a8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	2380      	movs	r3, #128	@ 0x80
 80091cc:	049c      	lsls	r4, r3, #18
 80091ce:	230a      	movs	r3, #10
 80091d0:	18fb      	adds	r3, r7, r3
 80091d2:	8819      	ldrh	r1, [r3, #0]
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009304 <HAL_I2C_Master_Receive+0x208>)
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	0023      	movs	r3, r4
 80091dc:	f000 ff54 	bl	800a088 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80091e0:	e062      	b.n	80092a8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	0018      	movs	r0, r3
 80091ea:	f000 fdb7 	bl	8009d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80091ee:	1e03      	subs	r3, r0, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e082      	b.n	80092fc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009200:	b2d2      	uxtb	r2, r2
 8009202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d03a      	beq.n	80092a8 <HAL_I2C_Master_Receive+0x1ac>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009236:	2b00      	cmp	r3, #0
 8009238:	d136      	bne.n	80092a8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800923a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	0013      	movs	r3, r2
 8009244:	2200      	movs	r2, #0
 8009246:	2180      	movs	r1, #128	@ 0x80
 8009248:	f000 fca6 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 800924c:	1e03      	subs	r3, r0, #0
 800924e:	d001      	beq.n	8009254 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e053      	b.n	80092fc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009258:	b29b      	uxth	r3, r3
 800925a:	2bff      	cmp	r3, #255	@ 0xff
 800925c:	d911      	bls.n	8009282 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	22ff      	movs	r2, #255	@ 0xff
 8009262:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009268:	b2da      	uxtb	r2, r3
 800926a:	2380      	movs	r3, #128	@ 0x80
 800926c:	045c      	lsls	r4, r3, #17
 800926e:	230a      	movs	r3, #10
 8009270:	18fb      	adds	r3, r7, r3
 8009272:	8819      	ldrh	r1, [r3, #0]
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	0023      	movs	r3, r4
 800927c:	f000 ff04 	bl	800a088 <I2C_TransferConfig>
 8009280:	e012      	b.n	80092a8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009290:	b2da      	uxtb	r2, r3
 8009292:	2380      	movs	r3, #128	@ 0x80
 8009294:	049c      	lsls	r4, r3, #18
 8009296:	230a      	movs	r3, #10
 8009298:	18fb      	adds	r3, r7, r3
 800929a:	8819      	ldrh	r1, [r3, #0]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	2300      	movs	r3, #0
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	0023      	movs	r3, r4
 80092a4:	f000 fef0 	bl	800a088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d197      	bne.n	80091e2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	0018      	movs	r0, r3
 80092ba:	f000 fd0b 	bl	8009cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092be:	1e03      	subs	r3, r0, #0
 80092c0:	d001      	beq.n	80092c6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e01a      	b.n	80092fc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2220      	movs	r2, #32
 80092cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	490b      	ldr	r1, [pc, #44]	@ (8009308 <HAL_I2C_Master_Receive+0x20c>)
 80092da:	400a      	ands	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2241      	movs	r2, #65	@ 0x41
 80092e2:	2120      	movs	r1, #32
 80092e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2242      	movs	r2, #66	@ 0x42
 80092ea:	2100      	movs	r1, #0
 80092ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2240      	movs	r2, #64	@ 0x40
 80092f2:	2100      	movs	r1, #0
 80092f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e000      	b.n	80092fc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
  }
}
 80092fc:	0018      	movs	r0, r3
 80092fe:	46bd      	mov	sp, r7
 8009300:	b007      	add	sp, #28
 8009302:	bd90      	pop	{r4, r7, pc}
 8009304:	80002400 	.word	0x80002400
 8009308:	fe00e800 	.word	0xfe00e800

0800930c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800930c:	b590      	push	{r4, r7, lr}
 800930e:	b089      	sub	sp, #36	@ 0x24
 8009310:	af02      	add	r7, sp, #8
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	000c      	movs	r4, r1
 8009316:	0010      	movs	r0, r2
 8009318:	0019      	movs	r1, r3
 800931a:	230a      	movs	r3, #10
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	1c22      	adds	r2, r4, #0
 8009320:	801a      	strh	r2, [r3, #0]
 8009322:	2308      	movs	r3, #8
 8009324:	18fb      	adds	r3, r7, r3
 8009326:	1c02      	adds	r2, r0, #0
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	1dbb      	adds	r3, r7, #6
 800932c:	1c0a      	adds	r2, r1, #0
 800932e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2241      	movs	r2, #65	@ 0x41
 8009334:	5c9b      	ldrb	r3, [r3, r2]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b20      	cmp	r3, #32
 800933a:	d000      	beq.n	800933e <HAL_I2C_Mem_Write+0x32>
 800933c:	e10c      	b.n	8009558 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <HAL_I2C_Mem_Write+0x42>
 8009344:	232c      	movs	r3, #44	@ 0x2c
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2280      	movs	r2, #128	@ 0x80
 8009352:	0092      	lsls	r2, r2, #2
 8009354:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e0ff      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2240      	movs	r2, #64	@ 0x40
 800935e:	5c9b      	ldrb	r3, [r3, r2]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d101      	bne.n	8009368 <HAL_I2C_Mem_Write+0x5c>
 8009364:	2302      	movs	r3, #2
 8009366:	e0f8      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2240      	movs	r2, #64	@ 0x40
 800936c:	2101      	movs	r1, #1
 800936e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009370:	f7fe ffac 	bl	80082cc <HAL_GetTick>
 8009374:	0003      	movs	r3, r0
 8009376:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009378:	2380      	movs	r3, #128	@ 0x80
 800937a:	0219      	lsls	r1, r3, #8
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	2319      	movs	r3, #25
 8009384:	2201      	movs	r2, #1
 8009386:	f000 fc07 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 800938a:	1e03      	subs	r3, r0, #0
 800938c:	d001      	beq.n	8009392 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e0e3      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2241      	movs	r2, #65	@ 0x41
 8009396:	2121      	movs	r1, #33	@ 0x21
 8009398:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2242      	movs	r2, #66	@ 0x42
 800939e:	2140      	movs	r1, #64	@ 0x40
 80093a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	222c      	movs	r2, #44	@ 0x2c
 80093b2:	18ba      	adds	r2, r7, r2
 80093b4:	8812      	ldrh	r2, [r2, #0]
 80093b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093be:	1dbb      	adds	r3, r7, #6
 80093c0:	881c      	ldrh	r4, [r3, #0]
 80093c2:	2308      	movs	r3, #8
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	881a      	ldrh	r2, [r3, #0]
 80093c8:	230a      	movs	r3, #10
 80093ca:	18fb      	adds	r3, r7, r3
 80093cc:	8819      	ldrh	r1, [r3, #0]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	9301      	str	r3, [sp, #4]
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	0023      	movs	r3, r4
 80093da:	f000 faf5 	bl	80099c8 <I2C_RequestMemoryWrite>
 80093de:	1e03      	subs	r3, r0, #0
 80093e0:	d005      	beq.n	80093ee <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2240      	movs	r2, #64	@ 0x40
 80093e6:	2100      	movs	r1, #0
 80093e8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0b5      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	2bff      	cmp	r3, #255	@ 0xff
 80093f6:	d911      	bls.n	800941c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	22ff      	movs	r2, #255	@ 0xff
 80093fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009402:	b2da      	uxtb	r2, r3
 8009404:	2380      	movs	r3, #128	@ 0x80
 8009406:	045c      	lsls	r4, r3, #17
 8009408:	230a      	movs	r3, #10
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	8819      	ldrh	r1, [r3, #0]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	0023      	movs	r3, r4
 8009416:	f000 fe37 	bl	800a088 <I2C_TransferConfig>
 800941a:	e012      	b.n	8009442 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800942a:	b2da      	uxtb	r2, r3
 800942c:	2380      	movs	r3, #128	@ 0x80
 800942e:	049c      	lsls	r4, r3, #18
 8009430:	230a      	movs	r3, #10
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	8819      	ldrh	r1, [r3, #0]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	2300      	movs	r3, #0
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	0023      	movs	r3, r4
 800943e:	f000 fe23 	bl	800a088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	0018      	movs	r0, r3
 800944a:	f000 fbfd 	bl	8009c48 <I2C_WaitOnTXISFlagUntilTimeout>
 800944e:	1e03      	subs	r3, r0, #0
 8009450:	d001      	beq.n	8009456 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e081      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	781a      	ldrb	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d03a      	beq.n	8009506 <HAL_I2C_Mem_Write+0x1fa>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009494:	2b00      	cmp	r3, #0
 8009496:	d136      	bne.n	8009506 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	0013      	movs	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	2180      	movs	r1, #128	@ 0x80
 80094a6:	f000 fb77 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 80094aa:	1e03      	subs	r3, r0, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e053      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2bff      	cmp	r3, #255	@ 0xff
 80094ba:	d911      	bls.n	80094e0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	22ff      	movs	r2, #255	@ 0xff
 80094c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	2380      	movs	r3, #128	@ 0x80
 80094ca:	045c      	lsls	r4, r3, #17
 80094cc:	230a      	movs	r3, #10
 80094ce:	18fb      	adds	r3, r7, r3
 80094d0:	8819      	ldrh	r1, [r3, #0]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	2300      	movs	r3, #0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	0023      	movs	r3, r4
 80094da:	f000 fdd5 	bl	800a088 <I2C_TransferConfig>
 80094de:	e012      	b.n	8009506 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	2380      	movs	r3, #128	@ 0x80
 80094f2:	049c      	lsls	r4, r3, #18
 80094f4:	230a      	movs	r3, #10
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	8819      	ldrh	r1, [r3, #0]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	0023      	movs	r3, r4
 8009502:	f000 fdc1 	bl	800a088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d198      	bne.n	8009442 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0018      	movs	r0, r3
 8009518:	f000 fbdc 	bl	8009cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800951c:	1e03      	subs	r3, r0, #0
 800951e:	d001      	beq.n	8009524 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e01a      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2220      	movs	r2, #32
 800952a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	490b      	ldr	r1, [pc, #44]	@ (8009564 <HAL_I2C_Mem_Write+0x258>)
 8009538:	400a      	ands	r2, r1
 800953a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2241      	movs	r2, #65	@ 0x41
 8009540:	2120      	movs	r1, #32
 8009542:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2242      	movs	r2, #66	@ 0x42
 8009548:	2100      	movs	r1, #0
 800954a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2240      	movs	r2, #64	@ 0x40
 8009550:	2100      	movs	r1, #0
 8009552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	e000      	b.n	800955a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8009558:	2302      	movs	r3, #2
  }
}
 800955a:	0018      	movs	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	b007      	add	sp, #28
 8009560:	bd90      	pop	{r4, r7, pc}
 8009562:	46c0      	nop			@ (mov r8, r8)
 8009564:	fe00e800 	.word	0xfe00e800

08009568 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b089      	sub	sp, #36	@ 0x24
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	000c      	movs	r4, r1
 8009572:	0010      	movs	r0, r2
 8009574:	0019      	movs	r1, r3
 8009576:	230a      	movs	r3, #10
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	1c22      	adds	r2, r4, #0
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	2308      	movs	r3, #8
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	1c02      	adds	r2, r0, #0
 8009584:	801a      	strh	r2, [r3, #0]
 8009586:	1dbb      	adds	r3, r7, #6
 8009588:	1c0a      	adds	r2, r1, #0
 800958a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2241      	movs	r2, #65	@ 0x41
 8009590:	5c9b      	ldrb	r3, [r3, r2]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b20      	cmp	r3, #32
 8009596:	d000      	beq.n	800959a <HAL_I2C_Mem_Read+0x32>
 8009598:	e110      	b.n	80097bc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_I2C_Mem_Read+0x42>
 80095a0:	232c      	movs	r3, #44	@ 0x2c
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2280      	movs	r2, #128	@ 0x80
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e103      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2240      	movs	r2, #64	@ 0x40
 80095ba:	5c9b      	ldrb	r3, [r3, r2]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_I2C_Mem_Read+0x5c>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e0fc      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2240      	movs	r2, #64	@ 0x40
 80095c8:	2101      	movs	r1, #1
 80095ca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80095cc:	f7fe fe7e 	bl	80082cc <HAL_GetTick>
 80095d0:	0003      	movs	r3, r0
 80095d2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095d4:	2380      	movs	r3, #128	@ 0x80
 80095d6:	0219      	lsls	r1, r3, #8
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	2319      	movs	r3, #25
 80095e0:	2201      	movs	r2, #1
 80095e2:	f000 fad9 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 80095e6:	1e03      	subs	r3, r0, #0
 80095e8:	d001      	beq.n	80095ee <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e0e7      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2241      	movs	r2, #65	@ 0x41
 80095f2:	2122      	movs	r1, #34	@ 0x22
 80095f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2242      	movs	r2, #66	@ 0x42
 80095fa:	2140      	movs	r1, #64	@ 0x40
 80095fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009608:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	222c      	movs	r2, #44	@ 0x2c
 800960e:	18ba      	adds	r2, r7, r2
 8009610:	8812      	ldrh	r2, [r2, #0]
 8009612:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800961a:	1dbb      	adds	r3, r7, #6
 800961c:	881c      	ldrh	r4, [r3, #0]
 800961e:	2308      	movs	r3, #8
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	881a      	ldrh	r2, [r3, #0]
 8009624:	230a      	movs	r3, #10
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	8819      	ldrh	r1, [r3, #0]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	0023      	movs	r3, r4
 8009636:	f000 fa2b 	bl	8009a90 <I2C_RequestMemoryRead>
 800963a:	1e03      	subs	r3, r0, #0
 800963c:	d005      	beq.n	800964a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2240      	movs	r2, #64	@ 0x40
 8009642:	2100      	movs	r1, #0
 8009644:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e0b9      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964e:	b29b      	uxth	r3, r3
 8009650:	2bff      	cmp	r3, #255	@ 0xff
 8009652:	d911      	bls.n	8009678 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	22ff      	movs	r2, #255	@ 0xff
 8009658:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800965e:	b2da      	uxtb	r2, r3
 8009660:	2380      	movs	r3, #128	@ 0x80
 8009662:	045c      	lsls	r4, r3, #17
 8009664:	230a      	movs	r3, #10
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	8819      	ldrh	r1, [r3, #0]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	4b56      	ldr	r3, [pc, #344]	@ (80097c8 <HAL_I2C_Mem_Read+0x260>)
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	0023      	movs	r3, r4
 8009672:	f000 fd09 	bl	800a088 <I2C_TransferConfig>
 8009676:	e012      	b.n	800969e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009686:	b2da      	uxtb	r2, r3
 8009688:	2380      	movs	r3, #128	@ 0x80
 800968a:	049c      	lsls	r4, r3, #18
 800968c:	230a      	movs	r3, #10
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	8819      	ldrh	r1, [r3, #0]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	4b4c      	ldr	r3, [pc, #304]	@ (80097c8 <HAL_I2C_Mem_Read+0x260>)
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	0023      	movs	r3, r4
 800969a:	f000 fcf5 	bl	800a088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800969e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	0013      	movs	r3, r2
 80096a8:	2200      	movs	r2, #0
 80096aa:	2104      	movs	r1, #4
 80096ac:	f000 fa74 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 80096b0:	1e03      	subs	r3, r0, #0
 80096b2:	d001      	beq.n	80096b8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e082      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d03a      	beq.n	800976a <HAL_I2C_Mem_Read+0x202>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d136      	bne.n	800976a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	0013      	movs	r3, r2
 8009706:	2200      	movs	r2, #0
 8009708:	2180      	movs	r1, #128	@ 0x80
 800970a:	f000 fa45 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 800970e:	1e03      	subs	r3, r0, #0
 8009710:	d001      	beq.n	8009716 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e053      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800971a:	b29b      	uxth	r3, r3
 800971c:	2bff      	cmp	r3, #255	@ 0xff
 800971e:	d911      	bls.n	8009744 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	22ff      	movs	r2, #255	@ 0xff
 8009724:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800972a:	b2da      	uxtb	r2, r3
 800972c:	2380      	movs	r3, #128	@ 0x80
 800972e:	045c      	lsls	r4, r3, #17
 8009730:	230a      	movs	r3, #10
 8009732:	18fb      	adds	r3, r7, r3
 8009734:	8819      	ldrh	r1, [r3, #0]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	2300      	movs	r3, #0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	0023      	movs	r3, r4
 800973e:	f000 fca3 	bl	800a088 <I2C_TransferConfig>
 8009742:	e012      	b.n	800976a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009752:	b2da      	uxtb	r2, r3
 8009754:	2380      	movs	r3, #128	@ 0x80
 8009756:	049c      	lsls	r4, r3, #18
 8009758:	230a      	movs	r3, #10
 800975a:	18fb      	adds	r3, r7, r3
 800975c:	8819      	ldrh	r1, [r3, #0]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	2300      	movs	r3, #0
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	0023      	movs	r3, r4
 8009766:	f000 fc8f 	bl	800a088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d194      	bne.n	800969e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	0018      	movs	r0, r3
 800977c:	f000 faaa 	bl	8009cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009780:	1e03      	subs	r3, r0, #0
 8009782:	d001      	beq.n	8009788 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e01a      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2220      	movs	r2, #32
 800978e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	490c      	ldr	r1, [pc, #48]	@ (80097cc <HAL_I2C_Mem_Read+0x264>)
 800979c:	400a      	ands	r2, r1
 800979e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2241      	movs	r2, #65	@ 0x41
 80097a4:	2120      	movs	r1, #32
 80097a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2242      	movs	r2, #66	@ 0x42
 80097ac:	2100      	movs	r1, #0
 80097ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2240      	movs	r2, #64	@ 0x40
 80097b4:	2100      	movs	r1, #0
 80097b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	e000      	b.n	80097be <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80097bc:	2302      	movs	r3, #2
  }
}
 80097be:	0018      	movs	r0, r3
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b007      	add	sp, #28
 80097c4:	bd90      	pop	{r4, r7, pc}
 80097c6:	46c0      	nop			@ (mov r8, r8)
 80097c8:	80002400 	.word	0x80002400
 80097cc:	fe00e800 	.word	0xfe00e800

080097d0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	@ 0x28
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	230a      	movs	r3, #10
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	1c0a      	adds	r2, r1, #0
 80097e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2241      	movs	r2, #65	@ 0x41
 80097ec:	5c9b      	ldrb	r3, [r3, r2]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b20      	cmp	r3, #32
 80097f2:	d000      	beq.n	80097f6 <HAL_I2C_IsDeviceReady+0x26>
 80097f4:	e0df      	b.n	80099b6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	2380      	movs	r3, #128	@ 0x80
 80097fe:	021b      	lsls	r3, r3, #8
 8009800:	401a      	ands	r2, r3
 8009802:	2380      	movs	r3, #128	@ 0x80
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	429a      	cmp	r2, r3
 8009808:	d101      	bne.n	800980e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800980a:	2302      	movs	r3, #2
 800980c:	e0d4      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2240      	movs	r2, #64	@ 0x40
 8009812:	5c9b      	ldrb	r3, [r3, r2]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_I2C_IsDeviceReady+0x4c>
 8009818:	2302      	movs	r3, #2
 800981a:	e0cd      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2240      	movs	r2, #64	@ 0x40
 8009820:	2101      	movs	r1, #1
 8009822:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2241      	movs	r2, #65	@ 0x41
 8009828:	2124      	movs	r1, #36	@ 0x24
 800982a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d107      	bne.n	800984a <HAL_I2C_IsDeviceReady+0x7a>
 800983a:	230a      	movs	r3, #10
 800983c:	18fb      	adds	r3, r7, r3
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	059b      	lsls	r3, r3, #22
 8009842:	0d9b      	lsrs	r3, r3, #22
 8009844:	4a5e      	ldr	r2, [pc, #376]	@ (80099c0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8009846:	431a      	orrs	r2, r3
 8009848:	e006      	b.n	8009858 <HAL_I2C_IsDeviceReady+0x88>
 800984a:	230a      	movs	r3, #10
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	059b      	lsls	r3, r3, #22
 8009852:	0d9b      	lsrs	r3, r3, #22
 8009854:	4a5b      	ldr	r2, [pc, #364]	@ (80099c4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8009856:	431a      	orrs	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800985e:	f7fe fd35 	bl	80082cc <HAL_GetTick>
 8009862:	0003      	movs	r3, r0
 8009864:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	2220      	movs	r2, #32
 800986e:	4013      	ands	r3, r2
 8009870:	3b20      	subs	r3, #32
 8009872:	425a      	negs	r2, r3
 8009874:	4153      	adcs	r3, r2
 8009876:	b2da      	uxtb	r2, r3
 8009878:	231f      	movs	r3, #31
 800987a:	18fb      	adds	r3, r7, r3
 800987c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2210      	movs	r2, #16
 8009886:	4013      	ands	r3, r2
 8009888:	3b10      	subs	r3, #16
 800988a:	425a      	negs	r2, r3
 800988c:	4153      	adcs	r3, r2
 800988e:	b2da      	uxtb	r2, r3
 8009890:	231e      	movs	r3, #30
 8009892:	18fb      	adds	r3, r7, r3
 8009894:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009896:	e035      	b.n	8009904 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	d01a      	beq.n	80098d4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800989e:	f7fe fd15 	bl	80082cc <HAL_GetTick>
 80098a2:	0002      	movs	r2, r0
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d302      	bcc.n	80098b4 <HAL_I2C_IsDeviceReady+0xe4>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10f      	bne.n	80098d4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2241      	movs	r2, #65	@ 0x41
 80098b8:	2120      	movs	r1, #32
 80098ba:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c0:	2220      	movs	r2, #32
 80098c2:	431a      	orrs	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2240      	movs	r2, #64	@ 0x40
 80098cc:	2100      	movs	r1, #0
 80098ce:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e071      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	2220      	movs	r2, #32
 80098dc:	4013      	ands	r3, r2
 80098de:	3b20      	subs	r3, #32
 80098e0:	425a      	negs	r2, r3
 80098e2:	4153      	adcs	r3, r2
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	231f      	movs	r3, #31
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	2210      	movs	r2, #16
 80098f4:	4013      	ands	r3, r2
 80098f6:	3b10      	subs	r3, #16
 80098f8:	425a      	negs	r2, r3
 80098fa:	4153      	adcs	r3, r2
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	231e      	movs	r3, #30
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009904:	231f      	movs	r3, #31
 8009906:	18fb      	adds	r3, r7, r3
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d104      	bne.n	8009918 <HAL_I2C_IsDeviceReady+0x148>
 800990e:	231e      	movs	r3, #30
 8009910:	18fb      	adds	r3, r7, r3
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0bf      	beq.n	8009898 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2210      	movs	r2, #16
 8009920:	4013      	ands	r3, r2
 8009922:	2b10      	cmp	r3, #16
 8009924:	d01a      	beq.n	800995c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	0013      	movs	r3, r2
 8009930:	2200      	movs	r2, #0
 8009932:	2120      	movs	r1, #32
 8009934:	f000 f930 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8009938:	1e03      	subs	r3, r0, #0
 800993a:	d001      	beq.n	8009940 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e03b      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2220      	movs	r2, #32
 8009946:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2241      	movs	r2, #65	@ 0x41
 800994c:	2120      	movs	r1, #32
 800994e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2240      	movs	r2, #64	@ 0x40
 8009954:	2100      	movs	r1, #0
 8009956:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e02d      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	0013      	movs	r3, r2
 8009966:	2200      	movs	r2, #0
 8009968:	2120      	movs	r1, #32
 800996a:	f000 f915 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 800996e:	1e03      	subs	r3, r0, #0
 8009970:	d001      	beq.n	8009976 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e020      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2210      	movs	r2, #16
 800997c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2220      	movs	r2, #32
 8009984:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	3301      	adds	r3, #1
 800998a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d900      	bls.n	8009996 <HAL_I2C_IsDeviceReady+0x1c6>
 8009994:	e74d      	b.n	8009832 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2241      	movs	r2, #65	@ 0x41
 800999a:	2120      	movs	r1, #32
 800999c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a2:	2220      	movs	r2, #32
 80099a4:	431a      	orrs	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2240      	movs	r2, #64	@ 0x40
 80099ae:	2100      	movs	r1, #0
 80099b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e000      	b.n	80099b8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80099b6:	2302      	movs	r3, #2
  }
}
 80099b8:	0018      	movs	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	b008      	add	sp, #32
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	02002000 	.word	0x02002000
 80099c4:	02002800 	.word	0x02002800

080099c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80099c8:	b5b0      	push	{r4, r5, r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	000c      	movs	r4, r1
 80099d2:	0010      	movs	r0, r2
 80099d4:	0019      	movs	r1, r3
 80099d6:	250a      	movs	r5, #10
 80099d8:	197b      	adds	r3, r7, r5
 80099da:	1c22      	adds	r2, r4, #0
 80099dc:	801a      	strh	r2, [r3, #0]
 80099de:	2308      	movs	r3, #8
 80099e0:	18fb      	adds	r3, r7, r3
 80099e2:	1c02      	adds	r2, r0, #0
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	1dbb      	adds	r3, r7, #6
 80099e8:	1c0a      	adds	r2, r1, #0
 80099ea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80099ec:	1dbb      	adds	r3, r7, #6
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	2380      	movs	r3, #128	@ 0x80
 80099f4:	045c      	lsls	r4, r3, #17
 80099f6:	197b      	adds	r3, r7, r5
 80099f8:	8819      	ldrh	r1, [r3, #0]
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	4b23      	ldr	r3, [pc, #140]	@ (8009a8c <I2C_RequestMemoryWrite+0xc4>)
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	0023      	movs	r3, r4
 8009a02:	f000 fb41 	bl	800a088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a08:	6a39      	ldr	r1, [r7, #32]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f000 f91b 	bl	8009c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a12:	1e03      	subs	r3, r0, #0
 8009a14:	d001      	beq.n	8009a1a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e033      	b.n	8009a82 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a1a:	1dbb      	adds	r3, r7, #6
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d107      	bne.n	8009a32 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a22:	2308      	movs	r3, #8
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a30:	e019      	b.n	8009a66 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a32:	2308      	movs	r3, #8
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	0a1b      	lsrs	r3, r3, #8
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a46:	6a39      	ldr	r1, [r7, #32]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f000 f8fc 	bl	8009c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a50:	1e03      	subs	r3, r0, #0
 8009a52:	d001      	beq.n	8009a58 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e014      	b.n	8009a82 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a58:	2308      	movs	r3, #8
 8009a5a:	18fb      	adds	r3, r7, r3
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009a66:	6a3a      	ldr	r2, [r7, #32]
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	0013      	movs	r3, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	2180      	movs	r1, #128	@ 0x80
 8009a74:	f000 f890 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8009a78:	1e03      	subs	r3, r0, #0
 8009a7a:	d001      	beq.n	8009a80 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	0018      	movs	r0, r3
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b004      	add	sp, #16
 8009a88:	bdb0      	pop	{r4, r5, r7, pc}
 8009a8a:	46c0      	nop			@ (mov r8, r8)
 8009a8c:	80002000 	.word	0x80002000

08009a90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009a90:	b5b0      	push	{r4, r5, r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	000c      	movs	r4, r1
 8009a9a:	0010      	movs	r0, r2
 8009a9c:	0019      	movs	r1, r3
 8009a9e:	250a      	movs	r5, #10
 8009aa0:	197b      	adds	r3, r7, r5
 8009aa2:	1c22      	adds	r2, r4, #0
 8009aa4:	801a      	strh	r2, [r3, #0]
 8009aa6:	2308      	movs	r3, #8
 8009aa8:	18fb      	adds	r3, r7, r3
 8009aaa:	1c02      	adds	r2, r0, #0
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	1dbb      	adds	r3, r7, #6
 8009ab0:	1c0a      	adds	r2, r1, #0
 8009ab2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009ab4:	1dbb      	adds	r3, r7, #6
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	197b      	adds	r3, r7, r5
 8009abc:	8819      	ldrh	r1, [r3, #0]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	4b23      	ldr	r3, [pc, #140]	@ (8009b50 <I2C_RequestMemoryRead+0xc0>)
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f000 fadf 	bl	800a088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009acc:	6a39      	ldr	r1, [r7, #32]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f000 f8b9 	bl	8009c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ad6:	1e03      	subs	r3, r0, #0
 8009ad8:	d001      	beq.n	8009ade <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e033      	b.n	8009b46 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ade:	1dbb      	adds	r3, r7, #6
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d107      	bne.n	8009af6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8009af4:	e019      	b.n	8009b2a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009af6:	2308      	movs	r3, #8
 8009af8:	18fb      	adds	r3, r7, r3
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	0a1b      	lsrs	r3, r3, #8
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b0a:	6a39      	ldr	r1, [r7, #32]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f000 f89a 	bl	8009c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b14:	1e03      	subs	r3, r0, #0
 8009b16:	d001      	beq.n	8009b1c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e014      	b.n	8009b46 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	18fb      	adds	r3, r7, r3
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009b2a:	6a3a      	ldr	r2, [r7, #32]
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	0013      	movs	r3, r2
 8009b34:	2200      	movs	r2, #0
 8009b36:	2140      	movs	r1, #64	@ 0x40
 8009b38:	f000 f82e 	bl	8009b98 <I2C_WaitOnFlagUntilTimeout>
 8009b3c:	1e03      	subs	r3, r0, #0
 8009b3e:	d001      	beq.n	8009b44 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	0018      	movs	r0, r3
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	b004      	add	sp, #16
 8009b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	80002000 	.word	0x80002000

08009b54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	2202      	movs	r2, #2
 8009b64:	4013      	ands	r3, r2
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d103      	bne.n	8009b72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d007      	beq.n	8009b90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	619a      	str	r2, [r3, #24]
  }
}
 8009b90:	46c0      	nop			@ (mov r8, r8)
 8009b92:	46bd      	mov	sp, r7
 8009b94:	b002      	add	sp, #8
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	1dfb      	adds	r3, r7, #7
 8009ba6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ba8:	e03a      	b.n	8009c20 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f000 f971 	bl	8009e98 <I2C_IsErrorOccurred>
 8009bb6:	1e03      	subs	r3, r0, #0
 8009bb8:	d001      	beq.n	8009bbe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e040      	b.n	8009c40 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	d02d      	beq.n	8009c20 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc4:	f7fe fb82 	bl	80082cc <HAL_GetTick>
 8009bc8:	0002      	movs	r2, r0
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d302      	bcc.n	8009bda <I2C_WaitOnFlagUntilTimeout+0x42>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d122      	bne.n	8009c20 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	4013      	ands	r3, r2
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	425a      	negs	r2, r3
 8009bea:	4153      	adcs	r3, r2
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	001a      	movs	r2, r3
 8009bf0:	1dfb      	adds	r3, r7, #7
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d113      	bne.n	8009c20 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2241      	movs	r2, #65	@ 0x41
 8009c08:	2120      	movs	r1, #32
 8009c0a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2242      	movs	r2, #66	@ 0x42
 8009c10:	2100      	movs	r1, #0
 8009c12:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2240      	movs	r2, #64	@ 0x40
 8009c18:	2100      	movs	r1, #0
 8009c1a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e00f      	b.n	8009c40 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	425a      	negs	r2, r3
 8009c30:	4153      	adcs	r3, r2
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	001a      	movs	r2, r3
 8009c36:	1dfb      	adds	r3, r7, #7
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d0b5      	beq.n	8009baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	0018      	movs	r0, r3
 8009c42:	46bd      	mov	sp, r7
 8009c44:	b004      	add	sp, #16
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c54:	e032      	b.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	68b9      	ldr	r1, [r7, #8]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f000 f91b 	bl	8009e98 <I2C_IsErrorOccurred>
 8009c62:	1e03      	subs	r3, r0, #0
 8009c64:	d001      	beq.n	8009c6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e030      	b.n	8009ccc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	d025      	beq.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c70:	f7fe fb2c 	bl	80082cc <HAL_GetTick>
 8009c74:	0002      	movs	r2, r0
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d302      	bcc.n	8009c86 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d11a      	bne.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	4013      	ands	r3, r2
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d013      	beq.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c98:	2220      	movs	r2, #32
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2241      	movs	r2, #65	@ 0x41
 8009ca4:	2120      	movs	r1, #32
 8009ca6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2242      	movs	r2, #66	@ 0x42
 8009cac:	2100      	movs	r1, #0
 8009cae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2240      	movs	r2, #64	@ 0x40
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e007      	b.n	8009ccc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d1c5      	bne.n	8009c56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	0018      	movs	r0, r3
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	b004      	add	sp, #16
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ce0:	e02f      	b.n	8009d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f000 f8d5 	bl	8009e98 <I2C_IsErrorOccurred>
 8009cee:	1e03      	subs	r3, r0, #0
 8009cf0:	d001      	beq.n	8009cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e02d      	b.n	8009d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf6:	f7fe fae9 	bl	80082cc <HAL_GetTick>
 8009cfa:	0002      	movs	r2, r0
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d302      	bcc.n	8009d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11a      	bne.n	8009d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	2220      	movs	r2, #32
 8009d14:	4013      	ands	r3, r2
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	d013      	beq.n	8009d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1e:	2220      	movs	r2, #32
 8009d20:	431a      	orrs	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2241      	movs	r2, #65	@ 0x41
 8009d2a:	2120      	movs	r1, #32
 8009d2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2242      	movs	r2, #66	@ 0x42
 8009d32:	2100      	movs	r1, #0
 8009d34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2240      	movs	r2, #64	@ 0x40
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e007      	b.n	8009d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d1c8      	bne.n	8009ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	0018      	movs	r0, r3
 8009d54:	46bd      	mov	sp, r7
 8009d56:	b004      	add	sp, #16
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d68:	2317      	movs	r3, #23
 8009d6a:	18fb      	adds	r3, r7, r3
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009d70:	e07b      	b.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	68b9      	ldr	r1, [r7, #8]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f000 f88d 	bl	8009e98 <I2C_IsErrorOccurred>
 8009d7e:	1e03      	subs	r3, r0, #0
 8009d80:	d003      	beq.n	8009d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8009d82:	2317      	movs	r3, #23
 8009d84:	18fb      	adds	r3, r7, r3
 8009d86:	2201      	movs	r2, #1
 8009d88:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	2220      	movs	r2, #32
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	d140      	bne.n	8009e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009d98:	2117      	movs	r1, #23
 8009d9a:	187b      	adds	r3, r7, r1
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d13b      	bne.n	8009e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	2204      	movs	r2, #4
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	d106      	bne.n	8009dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009db8:	187b      	adds	r3, r7, r1
 8009dba:	2200      	movs	r2, #0
 8009dbc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	2210      	movs	r2, #16
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d123      	bne.n	8009e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2210      	movs	r2, #16
 8009dd2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2220      	movs	r2, #32
 8009de0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4929      	ldr	r1, [pc, #164]	@ (8009e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8009dee:	400a      	ands	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2241      	movs	r2, #65	@ 0x41
 8009df6:	2120      	movs	r1, #32
 8009df8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2242      	movs	r2, #66	@ 0x42
 8009dfe:	2100      	movs	r1, #0
 8009e00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2240      	movs	r2, #64	@ 0x40
 8009e06:	2100      	movs	r1, #0
 8009e08:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009e0a:	2317      	movs	r3, #23
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	2201      	movs	r2, #1
 8009e10:	701a      	strb	r2, [r3, #0]
 8009e12:	e002      	b.n	8009e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009e1a:	f7fe fa57 	bl	80082cc <HAL_GetTick>
 8009e1e:	0002      	movs	r2, r0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d302      	bcc.n	8009e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d11c      	bne.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8009e30:	2017      	movs	r0, #23
 8009e32:	183b      	adds	r3, r7, r0
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d117      	bne.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	2204      	movs	r2, #4
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d010      	beq.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2241      	movs	r2, #65	@ 0x41
 8009e58:	2120      	movs	r1, #32
 8009e5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2240      	movs	r2, #64	@ 0x40
 8009e60:	2100      	movs	r1, #0
 8009e62:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009e64:	183b      	adds	r3, r7, r0
 8009e66:	2201      	movs	r2, #1
 8009e68:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	2204      	movs	r2, #4
 8009e72:	4013      	ands	r3, r2
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d005      	beq.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009e78:	2317      	movs	r3, #23
 8009e7a:	18fb      	adds	r3, r7, r3
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d100      	bne.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009e82:	e776      	b.n	8009d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009e84:	2317      	movs	r3, #23
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	781b      	ldrb	r3, [r3, #0]
}
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b006      	add	sp, #24
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			@ (mov r8, r8)
 8009e94:	fe00e800 	.word	0xfe00e800

08009e98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08a      	sub	sp, #40	@ 0x28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea4:	2327      	movs	r3, #39	@ 0x27
 8009ea6:	18fb      	adds	r3, r7, r3
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	d100      	bne.n	8009ec6 <I2C_IsErrorOccurred+0x2e>
 8009ec4:	e079      	b.n	8009fba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2210      	movs	r2, #16
 8009ecc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ece:	e057      	b.n	8009f80 <I2C_IsErrorOccurred+0xe8>
 8009ed0:	2227      	movs	r2, #39	@ 0x27
 8009ed2:	18bb      	adds	r3, r7, r2
 8009ed4:	18ba      	adds	r2, r7, r2
 8009ed6:	7812      	ldrb	r2, [r2, #0]
 8009ed8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	3301      	adds	r3, #1
 8009ede:	d04f      	beq.n	8009f80 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ee0:	f7fe f9f4 	bl	80082cc <HAL_GetTick>
 8009ee4:	0002      	movs	r2, r0
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d302      	bcc.n	8009ef6 <I2C_IsErrorOccurred+0x5e>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d144      	bne.n	8009f80 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	2380      	movs	r3, #128	@ 0x80
 8009efe:	01db      	lsls	r3, r3, #7
 8009f00:	4013      	ands	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009f04:	2013      	movs	r0, #19
 8009f06:	183b      	adds	r3, r7, r0
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	2142      	movs	r1, #66	@ 0x42
 8009f0c:	5c52      	ldrb	r2, [r2, r1]
 8009f0e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	2380      	movs	r3, #128	@ 0x80
 8009f18:	021b      	lsls	r3, r3, #8
 8009f1a:	401a      	ands	r2, r3
 8009f1c:	2380      	movs	r3, #128	@ 0x80
 8009f1e:	021b      	lsls	r3, r3, #8
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d126      	bne.n	8009f72 <I2C_IsErrorOccurred+0xda>
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	2380      	movs	r3, #128	@ 0x80
 8009f28:	01db      	lsls	r3, r3, #7
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d021      	beq.n	8009f72 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8009f2e:	183b      	adds	r3, r7, r0
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	d01d      	beq.n	8009f72 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2180      	movs	r1, #128	@ 0x80
 8009f42:	01c9      	lsls	r1, r1, #7
 8009f44:	430a      	orrs	r2, r1
 8009f46:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009f48:	f7fe f9c0 	bl	80082cc <HAL_GetTick>
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f50:	e00f      	b.n	8009f72 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009f52:	f7fe f9bb 	bl	80082cc <HAL_GetTick>
 8009f56:	0002      	movs	r2, r0
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b19      	cmp	r3, #25
 8009f5e:	d908      	bls.n	8009f72 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	2220      	movs	r2, #32
 8009f64:	4313      	orrs	r3, r2
 8009f66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009f68:	2327      	movs	r3, #39	@ 0x27
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	701a      	strb	r2, [r3, #0]

              break;
 8009f70:	e006      	b.n	8009f80 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	2220      	movs	r2, #32
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b20      	cmp	r3, #32
 8009f7e:	d1e8      	bne.n	8009f52 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	2220      	movs	r2, #32
 8009f88:	4013      	ands	r3, r2
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d004      	beq.n	8009f98 <I2C_IsErrorOccurred+0x100>
 8009f8e:	2327      	movs	r3, #39	@ 0x27
 8009f90:	18fb      	adds	r3, r7, r3
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d09b      	beq.n	8009ed0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009f98:	2327      	movs	r3, #39	@ 0x27
 8009f9a:	18fb      	adds	r3, r7, r3
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d103      	bne.n	8009faa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	2204      	movs	r2, #4
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009fb2:	2327      	movs	r3, #39	@ 0x27
 8009fb4:	18fb      	adds	r3, r7, r3
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	2380      	movs	r3, #128	@ 0x80
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	4013      	ands	r3, r2
 8009fca:	d00c      	beq.n	8009fe6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2280      	movs	r2, #128	@ 0x80
 8009fda:	0052      	lsls	r2, r2, #1
 8009fdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009fde:	2327      	movs	r3, #39	@ 0x27
 8009fe0:	18fb      	adds	r3, r7, r3
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	2380      	movs	r3, #128	@ 0x80
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	4013      	ands	r3, r2
 8009fee:	d00c      	beq.n	800a00a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	2208      	movs	r2, #8
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2280      	movs	r2, #128	@ 0x80
 8009ffe:	00d2      	lsls	r2, r2, #3
 800a000:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a002:	2327      	movs	r3, #39	@ 0x27
 800a004:	18fb      	adds	r3, r7, r3
 800a006:	2201      	movs	r2, #1
 800a008:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	2380      	movs	r3, #128	@ 0x80
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4013      	ands	r3, r2
 800a012:	d00c      	beq.n	800a02e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	2202      	movs	r2, #2
 800a018:	4313      	orrs	r3, r2
 800a01a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2280      	movs	r2, #128	@ 0x80
 800a022:	0092      	lsls	r2, r2, #2
 800a024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a026:	2327      	movs	r3, #39	@ 0x27
 800a028:	18fb      	adds	r3, r7, r3
 800a02a:	2201      	movs	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800a02e:	2327      	movs	r3, #39	@ 0x27
 800a030:	18fb      	adds	r3, r7, r3
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d01d      	beq.n	800a074 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7ff fd8a 	bl	8009b54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	490e      	ldr	r1, [pc, #56]	@ (800a084 <I2C_IsErrorOccurred+0x1ec>)
 800a04c:	400a      	ands	r2, r1
 800a04e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	431a      	orrs	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2241      	movs	r2, #65	@ 0x41
 800a060:	2120      	movs	r1, #32
 800a062:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2242      	movs	r2, #66	@ 0x42
 800a068:	2100      	movs	r1, #0
 800a06a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2240      	movs	r2, #64	@ 0x40
 800a070:	2100      	movs	r1, #0
 800a072:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a074:	2327      	movs	r3, #39	@ 0x27
 800a076:	18fb      	adds	r3, r7, r3
 800a078:	781b      	ldrb	r3, [r3, #0]
}
 800a07a:	0018      	movs	r0, r3
 800a07c:	46bd      	mov	sp, r7
 800a07e:	b00a      	add	sp, #40	@ 0x28
 800a080:	bd80      	pop	{r7, pc}
 800a082:	46c0      	nop			@ (mov r8, r8)
 800a084:	fe00e800 	.word	0xfe00e800

0800a088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a088:	b590      	push	{r4, r7, lr}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	0008      	movs	r0, r1
 800a092:	0011      	movs	r1, r2
 800a094:	607b      	str	r3, [r7, #4]
 800a096:	240a      	movs	r4, #10
 800a098:	193b      	adds	r3, r7, r4
 800a09a:	1c02      	adds	r2, r0, #0
 800a09c:	801a      	strh	r2, [r3, #0]
 800a09e:	2009      	movs	r0, #9
 800a0a0:	183b      	adds	r3, r7, r0
 800a0a2:	1c0a      	adds	r2, r1, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0a6:	193b      	adds	r3, r7, r4
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	059b      	lsls	r3, r3, #22
 800a0ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0ae:	183b      	adds	r3, r7, r0
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	0419      	lsls	r1, r3, #16
 800a0b4:	23ff      	movs	r3, #255	@ 0xff
 800a0b6:	041b      	lsls	r3, r3, #16
 800a0b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0d2:	0d51      	lsrs	r1, r2, #21
 800a0d4:	2280      	movs	r2, #128	@ 0x80
 800a0d6:	00d2      	lsls	r2, r2, #3
 800a0d8:	400a      	ands	r2, r1
 800a0da:	4907      	ldr	r1, [pc, #28]	@ (800a0f8 <I2C_TransferConfig+0x70>)
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	43d2      	mvns	r2, r2
 800a0e0:	401a      	ands	r2, r3
 800a0e2:	0011      	movs	r1, r2
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a0ee:	46c0      	nop			@ (mov r8, r8)
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	b007      	add	sp, #28
 800a0f4:	bd90      	pop	{r4, r7, pc}
 800a0f6:	46c0      	nop			@ (mov r8, r8)
 800a0f8:	03ff63ff 	.word	0x03ff63ff

0800a0fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2241      	movs	r2, #65	@ 0x41
 800a10a:	5c9b      	ldrb	r3, [r3, r2]
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b20      	cmp	r3, #32
 800a110:	d138      	bne.n	800a184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2240      	movs	r2, #64	@ 0x40
 800a116:	5c9b      	ldrb	r3, [r3, r2]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e032      	b.n	800a186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2240      	movs	r2, #64	@ 0x40
 800a124:	2101      	movs	r1, #1
 800a126:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2241      	movs	r2, #65	@ 0x41
 800a12c:	2124      	movs	r1, #36	@ 0x24
 800a12e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2101      	movs	r1, #1
 800a13c:	438a      	bics	r2, r1
 800a13e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4911      	ldr	r1, [pc, #68]	@ (800a190 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800a14c:	400a      	ands	r2, r1
 800a14e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2101      	movs	r1, #1
 800a16c:	430a      	orrs	r2, r1
 800a16e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2241      	movs	r2, #65	@ 0x41
 800a174:	2120      	movs	r1, #32
 800a176:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2240      	movs	r2, #64	@ 0x40
 800a17c:	2100      	movs	r1, #0
 800a17e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	e000      	b.n	800a186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
  }
}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	b002      	add	sp, #8
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	46c0      	nop			@ (mov r8, r8)
 800a190:	ffffefff 	.word	0xffffefff

0800a194 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2241      	movs	r2, #65	@ 0x41
 800a1a2:	5c9b      	ldrb	r3, [r3, r2]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d139      	bne.n	800a21e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2240      	movs	r2, #64	@ 0x40
 800a1ae:	5c9b      	ldrb	r3, [r3, r2]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e033      	b.n	800a220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2240      	movs	r2, #64	@ 0x40
 800a1bc:	2101      	movs	r1, #1
 800a1be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2241      	movs	r2, #65	@ 0x41
 800a1c4:	2124      	movs	r1, #36	@ 0x24
 800a1c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	438a      	bics	r2, r1
 800a1d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4a11      	ldr	r2, [pc, #68]	@ (800a228 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	021b      	lsls	r3, r3, #8
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2101      	movs	r1, #1
 800a206:	430a      	orrs	r2, r1
 800a208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2241      	movs	r2, #65	@ 0x41
 800a20e:	2120      	movs	r1, #32
 800a210:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2240      	movs	r2, #64	@ 0x40
 800a216:	2100      	movs	r1, #0
 800a218:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e000      	b.n	800a220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a21e:	2302      	movs	r3, #2
  }
}
 800a220:	0018      	movs	r0, r3
 800a222:	46bd      	mov	sp, r7
 800a224:	b004      	add	sp, #16
 800a226:	bd80      	pop	{r7, pc}
 800a228:	fffff0ff 	.word	0xfffff0ff

0800a22c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a230:	4b04      	ldr	r3, [pc, #16]	@ (800a244 <HAL_PWR_EnableBkUpAccess+0x18>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	4b03      	ldr	r3, [pc, #12]	@ (800a244 <HAL_PWR_EnableBkUpAccess+0x18>)
 800a236:	2180      	movs	r1, #128	@ 0x80
 800a238:	0049      	lsls	r1, r1, #1
 800a23a:	430a      	orrs	r2, r1
 800a23c:	601a      	str	r2, [r3, #0]
}
 800a23e:	46c0      	nop			@ (mov r8, r8)
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	40007000 	.word	0x40007000

0800a248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a250:	4b19      	ldr	r3, [pc, #100]	@ (800a2b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a19      	ldr	r2, [pc, #100]	@ (800a2bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a256:	4013      	ands	r3, r2
 800a258:	0019      	movs	r1, r3
 800a25a:	4b17      	ldr	r3, [pc, #92]	@ (800a2b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	430a      	orrs	r2, r1
 800a260:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	2380      	movs	r3, #128	@ 0x80
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	429a      	cmp	r2, r3
 800a26a:	d11f      	bne.n	800a2ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a26c:	4b14      	ldr	r3, [pc, #80]	@ (800a2c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	0013      	movs	r3, r2
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	189b      	adds	r3, r3, r2
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	4912      	ldr	r1, [pc, #72]	@ (800a2c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7f5 ff60 	bl	8000140 <__udivsi3>
 800a280:	0003      	movs	r3, r0
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a286:	e008      	b.n	800a29a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3b01      	subs	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e001      	b.n	800a29a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e009      	b.n	800a2ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a29a:	4b07      	ldr	r3, [pc, #28]	@ (800a2b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a29c:	695a      	ldr	r2, [r3, #20]
 800a29e:	2380      	movs	r3, #128	@ 0x80
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	401a      	ands	r2, r3
 800a2a4:	2380      	movs	r3, #128	@ 0x80
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d0ed      	beq.n	800a288 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	b004      	add	sp, #16
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	46c0      	nop			@ (mov r8, r8)
 800a2b8:	40007000 	.word	0x40007000
 800a2bc:	fffff9ff 	.word	0xfffff9ff
 800a2c0:	20000068 	.word	0x20000068
 800a2c4:	000f4240 	.word	0x000f4240

0800a2c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a2cc:	4b03      	ldr	r3, [pc, #12]	@ (800a2dc <LL_RCC_GetAPB1Prescaler+0x14>)
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	23e0      	movs	r3, #224	@ 0xe0
 800a2d2:	01db      	lsls	r3, r3, #7
 800a2d4:	4013      	ands	r3, r2
}
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	40021000 	.word	0x40021000

0800a2e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e2fe      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	d100      	bne.n	800a2fe <HAL_RCC_OscConfig+0x1e>
 800a2fc:	e07c      	b.n	800a3f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2fe:	4bc3      	ldr	r3, [pc, #780]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	2238      	movs	r2, #56	@ 0x38
 800a304:	4013      	ands	r3, r2
 800a306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a308:	4bc0      	ldr	r3, [pc, #768]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	2203      	movs	r2, #3
 800a30e:	4013      	ands	r3, r2
 800a310:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	2b10      	cmp	r3, #16
 800a316:	d102      	bne.n	800a31e <HAL_RCC_OscConfig+0x3e>
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d002      	beq.n	800a324 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b08      	cmp	r3, #8
 800a322:	d10b      	bne.n	800a33c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a324:	4bb9      	ldr	r3, [pc, #740]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	2380      	movs	r3, #128	@ 0x80
 800a32a:	029b      	lsls	r3, r3, #10
 800a32c:	4013      	ands	r3, r2
 800a32e:	d062      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x116>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d15e      	bne.n	800a3f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e2d9      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	2380      	movs	r3, #128	@ 0x80
 800a342:	025b      	lsls	r3, r3, #9
 800a344:	429a      	cmp	r2, r3
 800a346:	d107      	bne.n	800a358 <HAL_RCC_OscConfig+0x78>
 800a348:	4bb0      	ldr	r3, [pc, #704]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	4baf      	ldr	r3, [pc, #700]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a34e:	2180      	movs	r1, #128	@ 0x80
 800a350:	0249      	lsls	r1, r1, #9
 800a352:	430a      	orrs	r2, r1
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	e020      	b.n	800a39a <HAL_RCC_OscConfig+0xba>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	23a0      	movs	r3, #160	@ 0xa0
 800a35e:	02db      	lsls	r3, r3, #11
 800a360:	429a      	cmp	r2, r3
 800a362:	d10e      	bne.n	800a382 <HAL_RCC_OscConfig+0xa2>
 800a364:	4ba9      	ldr	r3, [pc, #676]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	4ba8      	ldr	r3, [pc, #672]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a36a:	2180      	movs	r1, #128	@ 0x80
 800a36c:	02c9      	lsls	r1, r1, #11
 800a36e:	430a      	orrs	r2, r1
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	4ba6      	ldr	r3, [pc, #664]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	4ba5      	ldr	r3, [pc, #660]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a378:	2180      	movs	r1, #128	@ 0x80
 800a37a:	0249      	lsls	r1, r1, #9
 800a37c:	430a      	orrs	r2, r1
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	e00b      	b.n	800a39a <HAL_RCC_OscConfig+0xba>
 800a382:	4ba2      	ldr	r3, [pc, #648]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4ba1      	ldr	r3, [pc, #644]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a388:	49a1      	ldr	r1, [pc, #644]	@ (800a610 <HAL_RCC_OscConfig+0x330>)
 800a38a:	400a      	ands	r2, r1
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	4b9f      	ldr	r3, [pc, #636]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b9e      	ldr	r3, [pc, #632]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a394:	499f      	ldr	r1, [pc, #636]	@ (800a614 <HAL_RCC_OscConfig+0x334>)
 800a396:	400a      	ands	r2, r1
 800a398:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d014      	beq.n	800a3cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a2:	f7fd ff93 	bl	80082cc <HAL_GetTick>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3aa:	e008      	b.n	800a3be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3ac:	f7fd ff8e 	bl	80082cc <HAL_GetTick>
 800a3b0:	0002      	movs	r2, r0
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	2b64      	cmp	r3, #100	@ 0x64
 800a3b8:	d901      	bls.n	800a3be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e298      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3be:	4b93      	ldr	r3, [pc, #588]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	2380      	movs	r3, #128	@ 0x80
 800a3c4:	029b      	lsls	r3, r3, #10
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	d0f0      	beq.n	800a3ac <HAL_RCC_OscConfig+0xcc>
 800a3ca:	e015      	b.n	800a3f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3cc:	f7fd ff7e 	bl	80082cc <HAL_GetTick>
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3d4:	e008      	b.n	800a3e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3d6:	f7fd ff79 	bl	80082cc <HAL_GetTick>
 800a3da:	0002      	movs	r2, r0
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b64      	cmp	r3, #100	@ 0x64
 800a3e2:	d901      	bls.n	800a3e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e283      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3e8:	4b88      	ldr	r3, [pc, #544]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	2380      	movs	r3, #128	@ 0x80
 800a3ee:	029b      	lsls	r3, r3, #10
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	d1f0      	bne.n	800a3d6 <HAL_RCC_OscConfig+0xf6>
 800a3f4:	e000      	b.n	800a3f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	4013      	ands	r3, r2
 800a400:	d100      	bne.n	800a404 <HAL_RCC_OscConfig+0x124>
 800a402:	e099      	b.n	800a538 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a404:	4b81      	ldr	r3, [pc, #516]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2238      	movs	r2, #56	@ 0x38
 800a40a:	4013      	ands	r3, r2
 800a40c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a40e:	4b7f      	ldr	r3, [pc, #508]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	2203      	movs	r2, #3
 800a414:	4013      	ands	r3, r2
 800a416:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d102      	bne.n	800a424 <HAL_RCC_OscConfig+0x144>
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d002      	beq.n	800a42a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d135      	bne.n	800a496 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a42a:	4b78      	ldr	r3, [pc, #480]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	2380      	movs	r3, #128	@ 0x80
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	4013      	ands	r3, r2
 800a434:	d005      	beq.n	800a442 <HAL_RCC_OscConfig+0x162>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e256      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a442:	4b72      	ldr	r3, [pc, #456]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	4a74      	ldr	r2, [pc, #464]	@ (800a618 <HAL_RCC_OscConfig+0x338>)
 800a448:	4013      	ands	r3, r2
 800a44a:	0019      	movs	r1, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	021a      	lsls	r2, r3, #8
 800a452:	4b6e      	ldr	r3, [pc, #440]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a454:	430a      	orrs	r2, r1
 800a456:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d112      	bne.n	800a484 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a45e:	4b6b      	ldr	r3, [pc, #428]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a6e      	ldr	r2, [pc, #440]	@ (800a61c <HAL_RCC_OscConfig+0x33c>)
 800a464:	4013      	ands	r3, r2
 800a466:	0019      	movs	r1, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691a      	ldr	r2, [r3, #16]
 800a46c:	4b67      	ldr	r3, [pc, #412]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a46e:	430a      	orrs	r2, r1
 800a470:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a472:	4b66      	ldr	r3, [pc, #408]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	0adb      	lsrs	r3, r3, #11
 800a478:	2207      	movs	r2, #7
 800a47a:	4013      	ands	r3, r2
 800a47c:	4a68      	ldr	r2, [pc, #416]	@ (800a620 <HAL_RCC_OscConfig+0x340>)
 800a47e:	40da      	lsrs	r2, r3
 800a480:	4b68      	ldr	r3, [pc, #416]	@ (800a624 <HAL_RCC_OscConfig+0x344>)
 800a482:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a484:	4b68      	ldr	r3, [pc, #416]	@ (800a628 <HAL_RCC_OscConfig+0x348>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	0018      	movs	r0, r3
 800a48a:	f7fd f98d 	bl	80077a8 <HAL_InitTick>
 800a48e:	1e03      	subs	r3, r0, #0
 800a490:	d051      	beq.n	800a536 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e22c      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d030      	beq.n	800a500 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a49e:	4b5b      	ldr	r3, [pc, #364]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a5e      	ldr	r2, [pc, #376]	@ (800a61c <HAL_RCC_OscConfig+0x33c>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	0019      	movs	r1, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	4b57      	ldr	r3, [pc, #348]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a4b2:	4b56      	ldr	r3, [pc, #344]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b55      	ldr	r3, [pc, #340]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4b8:	2180      	movs	r1, #128	@ 0x80
 800a4ba:	0049      	lsls	r1, r1, #1
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c0:	f7fd ff04 	bl	80082cc <HAL_GetTick>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4ca:	f7fd feff 	bl	80082cc <HAL_GetTick>
 800a4ce:	0002      	movs	r2, r0
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e209      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4dc:	4b4b      	ldr	r3, [pc, #300]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	2380      	movs	r3, #128	@ 0x80
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	d0f0      	beq.n	800a4ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4e8:	4b48      	ldr	r3, [pc, #288]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	4a4a      	ldr	r2, [pc, #296]	@ (800a618 <HAL_RCC_OscConfig+0x338>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	0019      	movs	r1, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	021a      	lsls	r2, r3, #8
 800a4f8:	4b44      	ldr	r3, [pc, #272]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	605a      	str	r2, [r3, #4]
 800a4fe:	e01b      	b.n	800a538 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a500:	4b42      	ldr	r3, [pc, #264]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	4b41      	ldr	r3, [pc, #260]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a506:	4949      	ldr	r1, [pc, #292]	@ (800a62c <HAL_RCC_OscConfig+0x34c>)
 800a508:	400a      	ands	r2, r1
 800a50a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50c:	f7fd fede 	bl	80082cc <HAL_GetTick>
 800a510:	0003      	movs	r3, r0
 800a512:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a514:	e008      	b.n	800a528 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a516:	f7fd fed9 	bl	80082cc <HAL_GetTick>
 800a51a:	0002      	movs	r2, r0
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e1e3      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a528:	4b38      	ldr	r3, [pc, #224]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	2380      	movs	r3, #128	@ 0x80
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	4013      	ands	r3, r2
 800a532:	d1f0      	bne.n	800a516 <HAL_RCC_OscConfig+0x236>
 800a534:	e000      	b.n	800a538 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a536:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2208      	movs	r2, #8
 800a53e:	4013      	ands	r3, r2
 800a540:	d047      	beq.n	800a5d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a542:	4b32      	ldr	r3, [pc, #200]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2238      	movs	r2, #56	@ 0x38
 800a548:	4013      	ands	r3, r2
 800a54a:	2b18      	cmp	r3, #24
 800a54c:	d10a      	bne.n	800a564 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a54e:	4b2f      	ldr	r3, [pc, #188]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a552:	2202      	movs	r2, #2
 800a554:	4013      	ands	r3, r2
 800a556:	d03c      	beq.n	800a5d2 <HAL_RCC_OscConfig+0x2f2>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d138      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e1c5      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d019      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a56c:	4b27      	ldr	r3, [pc, #156]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a56e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a570:	4b26      	ldr	r3, [pc, #152]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a572:	2101      	movs	r1, #1
 800a574:	430a      	orrs	r2, r1
 800a576:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a578:	f7fd fea8 	bl	80082cc <HAL_GetTick>
 800a57c:	0003      	movs	r3, r0
 800a57e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a580:	e008      	b.n	800a594 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a582:	f7fd fea3 	bl	80082cc <HAL_GetTick>
 800a586:	0002      	movs	r2, r0
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d901      	bls.n	800a594 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e1ad      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a594:	4b1d      	ldr	r3, [pc, #116]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a598:	2202      	movs	r2, #2
 800a59a:	4013      	ands	r3, r2
 800a59c:	d0f1      	beq.n	800a582 <HAL_RCC_OscConfig+0x2a2>
 800a59e:	e018      	b.n	800a5d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a5a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a5a4:	4b19      	ldr	r3, [pc, #100]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	438a      	bics	r2, r1
 800a5aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ac:	f7fd fe8e 	bl	80082cc <HAL_GetTick>
 800a5b0:	0003      	movs	r3, r0
 800a5b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a5b4:	e008      	b.n	800a5c8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5b6:	f7fd fe89 	bl	80082cc <HAL_GetTick>
 800a5ba:	0002      	movs	r2, r0
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d901      	bls.n	800a5c8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e193      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a5c8:	4b10      	ldr	r3, [pc, #64]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a5ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	d1f1      	bne.n	800a5b6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2204      	movs	r2, #4
 800a5d8:	4013      	ands	r3, r2
 800a5da:	d100      	bne.n	800a5de <HAL_RCC_OscConfig+0x2fe>
 800a5dc:	e0c6      	b.n	800a76c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5de:	231f      	movs	r3, #31
 800a5e0:	18fb      	adds	r3, r7, r3
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a5e6:	4b09      	ldr	r3, [pc, #36]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2238      	movs	r2, #56	@ 0x38
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d11e      	bne.n	800a630 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a5f2:	4b06      	ldr	r3, [pc, #24]	@ (800a60c <HAL_RCC_OscConfig+0x32c>)
 800a5f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	d100      	bne.n	800a5fe <HAL_RCC_OscConfig+0x31e>
 800a5fc:	e0b6      	b.n	800a76c <HAL_RCC_OscConfig+0x48c>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d000      	beq.n	800a608 <HAL_RCC_OscConfig+0x328>
 800a606:	e0b1      	b.n	800a76c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e171      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
 800a60c:	40021000 	.word	0x40021000
 800a610:	fffeffff 	.word	0xfffeffff
 800a614:	fffbffff 	.word	0xfffbffff
 800a618:	ffff80ff 	.word	0xffff80ff
 800a61c:	ffffc7ff 	.word	0xffffc7ff
 800a620:	00f42400 	.word	0x00f42400
 800a624:	20000068 	.word	0x20000068
 800a628:	20000074 	.word	0x20000074
 800a62c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a630:	4bb1      	ldr	r3, [pc, #708]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a634:	2380      	movs	r3, #128	@ 0x80
 800a636:	055b      	lsls	r3, r3, #21
 800a638:	4013      	ands	r3, r2
 800a63a:	d101      	bne.n	800a640 <HAL_RCC_OscConfig+0x360>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e000      	b.n	800a642 <HAL_RCC_OscConfig+0x362>
 800a640:	2300      	movs	r3, #0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d011      	beq.n	800a66a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a646:	4bac      	ldr	r3, [pc, #688]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a64a:	4bab      	ldr	r3, [pc, #684]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a64c:	2180      	movs	r1, #128	@ 0x80
 800a64e:	0549      	lsls	r1, r1, #21
 800a650:	430a      	orrs	r2, r1
 800a652:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a654:	4ba8      	ldr	r3, [pc, #672]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a656:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a658:	2380      	movs	r3, #128	@ 0x80
 800a65a:	055b      	lsls	r3, r3, #21
 800a65c:	4013      	ands	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a662:	231f      	movs	r3, #31
 800a664:	18fb      	adds	r3, r7, r3
 800a666:	2201      	movs	r2, #1
 800a668:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a66a:	4ba4      	ldr	r3, [pc, #656]	@ (800a8fc <HAL_RCC_OscConfig+0x61c>)
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	2380      	movs	r3, #128	@ 0x80
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	4013      	ands	r3, r2
 800a674:	d11a      	bne.n	800a6ac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a676:	4ba1      	ldr	r3, [pc, #644]	@ (800a8fc <HAL_RCC_OscConfig+0x61c>)
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	4ba0      	ldr	r3, [pc, #640]	@ (800a8fc <HAL_RCC_OscConfig+0x61c>)
 800a67c:	2180      	movs	r1, #128	@ 0x80
 800a67e:	0049      	lsls	r1, r1, #1
 800a680:	430a      	orrs	r2, r1
 800a682:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a684:	f7fd fe22 	bl	80082cc <HAL_GetTick>
 800a688:	0003      	movs	r3, r0
 800a68a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a68c:	e008      	b.n	800a6a0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a68e:	f7fd fe1d 	bl	80082cc <HAL_GetTick>
 800a692:	0002      	movs	r2, r0
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d901      	bls.n	800a6a0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e127      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6a0:	4b96      	ldr	r3, [pc, #600]	@ (800a8fc <HAL_RCC_OscConfig+0x61c>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	2380      	movs	r3, #128	@ 0x80
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	d0f0      	beq.n	800a68e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d106      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x3e2>
 800a6b4:	4b90      	ldr	r3, [pc, #576]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6b8:	4b8f      	ldr	r3, [pc, #572]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6c0:	e01c      	b.n	800a6fc <HAL_RCC_OscConfig+0x41c>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d10c      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x404>
 800a6ca:	4b8b      	ldr	r3, [pc, #556]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6ce:	4b8a      	ldr	r3, [pc, #552]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6d0:	2104      	movs	r1, #4
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6d6:	4b88      	ldr	r3, [pc, #544]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6da:	4b87      	ldr	r3, [pc, #540]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6dc:	2101      	movs	r1, #1
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6e2:	e00b      	b.n	800a6fc <HAL_RCC_OscConfig+0x41c>
 800a6e4:	4b84      	ldr	r3, [pc, #528]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6e8:	4b83      	ldr	r3, [pc, #524]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	438a      	bics	r2, r1
 800a6ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6f0:	4b81      	ldr	r3, [pc, #516]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6f4:	4b80      	ldr	r3, [pc, #512]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a6f6:	2104      	movs	r1, #4
 800a6f8:	438a      	bics	r2, r1
 800a6fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d014      	beq.n	800a72e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a704:	f7fd fde2 	bl	80082cc <HAL_GetTick>
 800a708:	0003      	movs	r3, r0
 800a70a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a70c:	e009      	b.n	800a722 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a70e:	f7fd fddd 	bl	80082cc <HAL_GetTick>
 800a712:	0002      	movs	r2, r0
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	4a79      	ldr	r2, [pc, #484]	@ (800a900 <HAL_RCC_OscConfig+0x620>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e0e6      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a722:	4b75      	ldr	r3, [pc, #468]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a726:	2202      	movs	r2, #2
 800a728:	4013      	ands	r3, r2
 800a72a:	d0f0      	beq.n	800a70e <HAL_RCC_OscConfig+0x42e>
 800a72c:	e013      	b.n	800a756 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a72e:	f7fd fdcd 	bl	80082cc <HAL_GetTick>
 800a732:	0003      	movs	r3, r0
 800a734:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a736:	e009      	b.n	800a74c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a738:	f7fd fdc8 	bl	80082cc <HAL_GetTick>
 800a73c:	0002      	movs	r2, r0
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	4a6f      	ldr	r2, [pc, #444]	@ (800a900 <HAL_RCC_OscConfig+0x620>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d901      	bls.n	800a74c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e0d1      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a74c:	4b6a      	ldr	r3, [pc, #424]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a74e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a750:	2202      	movs	r2, #2
 800a752:	4013      	ands	r3, r2
 800a754:	d1f0      	bne.n	800a738 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a756:	231f      	movs	r3, #31
 800a758:	18fb      	adds	r3, r7, r3
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d105      	bne.n	800a76c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a760:	4b65      	ldr	r3, [pc, #404]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a764:	4b64      	ldr	r3, [pc, #400]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a766:	4967      	ldr	r1, [pc, #412]	@ (800a904 <HAL_RCC_OscConfig+0x624>)
 800a768:	400a      	ands	r2, r1
 800a76a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d100      	bne.n	800a776 <HAL_RCC_OscConfig+0x496>
 800a774:	e0bb      	b.n	800a8ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a776:	4b60      	ldr	r3, [pc, #384]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	2238      	movs	r2, #56	@ 0x38
 800a77c:	4013      	ands	r3, r2
 800a77e:	2b10      	cmp	r3, #16
 800a780:	d100      	bne.n	800a784 <HAL_RCC_OscConfig+0x4a4>
 800a782:	e07b      	b.n	800a87c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d156      	bne.n	800a83a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a78c:	4b5a      	ldr	r3, [pc, #360]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	4b59      	ldr	r3, [pc, #356]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a792:	495d      	ldr	r1, [pc, #372]	@ (800a908 <HAL_RCC_OscConfig+0x628>)
 800a794:	400a      	ands	r2, r1
 800a796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a798:	f7fd fd98 	bl	80082cc <HAL_GetTick>
 800a79c:	0003      	movs	r3, r0
 800a79e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7a0:	e008      	b.n	800a7b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7a2:	f7fd fd93 	bl	80082cc <HAL_GetTick>
 800a7a6:	0002      	movs	r2, r0
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d901      	bls.n	800a7b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e09d      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7b4:	4b50      	ldr	r3, [pc, #320]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	2380      	movs	r3, #128	@ 0x80
 800a7ba:	049b      	lsls	r3, r3, #18
 800a7bc:	4013      	ands	r3, r2
 800a7be:	d1f0      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7c0:	4b4d      	ldr	r3, [pc, #308]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	4a51      	ldr	r2, [pc, #324]	@ (800a90c <HAL_RCC_OscConfig+0x62c>)
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	0019      	movs	r1, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1a      	ldr	r2, [r3, #32]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	4b42      	ldr	r3, [pc, #264]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7f4:	4b40      	ldr	r3, [pc, #256]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	4b3f      	ldr	r3, [pc, #252]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a7fa:	2180      	movs	r1, #128	@ 0x80
 800a7fc:	0449      	lsls	r1, r1, #17
 800a7fe:	430a      	orrs	r2, r1
 800a800:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a802:	4b3d      	ldr	r3, [pc, #244]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	4b3c      	ldr	r3, [pc, #240]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a808:	2180      	movs	r1, #128	@ 0x80
 800a80a:	0549      	lsls	r1, r1, #21
 800a80c:	430a      	orrs	r2, r1
 800a80e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a810:	f7fd fd5c 	bl	80082cc <HAL_GetTick>
 800a814:	0003      	movs	r3, r0
 800a816:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a818:	e008      	b.n	800a82c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a81a:	f7fd fd57 	bl	80082cc <HAL_GetTick>
 800a81e:	0002      	movs	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e061      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a82c:	4b32      	ldr	r3, [pc, #200]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	2380      	movs	r3, #128	@ 0x80
 800a832:	049b      	lsls	r3, r3, #18
 800a834:	4013      	ands	r3, r2
 800a836:	d0f0      	beq.n	800a81a <HAL_RCC_OscConfig+0x53a>
 800a838:	e059      	b.n	800a8ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a83a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	4b2e      	ldr	r3, [pc, #184]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a840:	4931      	ldr	r1, [pc, #196]	@ (800a908 <HAL_RCC_OscConfig+0x628>)
 800a842:	400a      	ands	r2, r1
 800a844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a846:	f7fd fd41 	bl	80082cc <HAL_GetTick>
 800a84a:	0003      	movs	r3, r0
 800a84c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a84e:	e008      	b.n	800a862 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a850:	f7fd fd3c 	bl	80082cc <HAL_GetTick>
 800a854:	0002      	movs	r2, r0
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d901      	bls.n	800a862 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e046      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a862:	4b25      	ldr	r3, [pc, #148]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	2380      	movs	r3, #128	@ 0x80
 800a868:	049b      	lsls	r3, r3, #18
 800a86a:	4013      	ands	r3, r2
 800a86c:	d1f0      	bne.n	800a850 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a86e:	4b22      	ldr	r3, [pc, #136]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	4b21      	ldr	r3, [pc, #132]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a874:	4926      	ldr	r1, [pc, #152]	@ (800a910 <HAL_RCC_OscConfig+0x630>)
 800a876:	400a      	ands	r2, r1
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	e038      	b.n	800a8ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d101      	bne.n	800a888 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e033      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a888:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f8 <HAL_RCC_OscConfig+0x618>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2203      	movs	r2, #3
 800a892:	401a      	ands	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d126      	bne.n	800a8ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2270      	movs	r2, #112	@ 0x70
 800a8a0:	401a      	ands	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d11f      	bne.n	800a8ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	23fe      	movs	r3, #254	@ 0xfe
 800a8ae:	01db      	lsls	r3, r3, #7
 800a8b0:	401a      	ands	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d116      	bne.n	800a8ea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	23f8      	movs	r3, #248	@ 0xf8
 800a8c0:	039b      	lsls	r3, r3, #14
 800a8c2:	401a      	ands	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d10e      	bne.n	800a8ea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	23e0      	movs	r3, #224	@ 0xe0
 800a8d0:	051b      	lsls	r3, r3, #20
 800a8d2:	401a      	ands	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d106      	bne.n	800a8ea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	0f5b      	lsrs	r3, r3, #29
 800a8e0:	075a      	lsls	r2, r3, #29
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d001      	beq.n	800a8ee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e000      	b.n	800a8f0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	b008      	add	sp, #32
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	40021000 	.word	0x40021000
 800a8fc:	40007000 	.word	0x40007000
 800a900:	00001388 	.word	0x00001388
 800a904:	efffffff 	.word	0xefffffff
 800a908:	feffffff 	.word	0xfeffffff
 800a90c:	11c1808c 	.word	0x11c1808c
 800a910:	eefefffc 	.word	0xeefefffc

0800a914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e0e9      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a928:	4b76      	ldr	r3, [pc, #472]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2207      	movs	r2, #7
 800a92e:	4013      	ands	r3, r2
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	d91e      	bls.n	800a974 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a936:	4b73      	ldr	r3, [pc, #460]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2207      	movs	r2, #7
 800a93c:	4393      	bics	r3, r2
 800a93e:	0019      	movs	r1, r3
 800a940:	4b70      	ldr	r3, [pc, #448]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a948:	f7fd fcc0 	bl	80082cc <HAL_GetTick>
 800a94c:	0003      	movs	r3, r0
 800a94e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a950:	e009      	b.n	800a966 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a952:	f7fd fcbb 	bl	80082cc <HAL_GetTick>
 800a956:	0002      	movs	r2, r0
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	4a6a      	ldr	r2, [pc, #424]	@ (800ab08 <HAL_RCC_ClockConfig+0x1f4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e0ca      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a966:	4b67      	ldr	r3, [pc, #412]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2207      	movs	r2, #7
 800a96c:	4013      	ands	r3, r2
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d1ee      	bne.n	800a952 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2202      	movs	r2, #2
 800a97a:	4013      	ands	r3, r2
 800a97c:	d015      	beq.n	800a9aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2204      	movs	r2, #4
 800a984:	4013      	ands	r3, r2
 800a986:	d006      	beq.n	800a996 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a988:	4b60      	ldr	r3, [pc, #384]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	4b5f      	ldr	r3, [pc, #380]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a98e:	21e0      	movs	r1, #224	@ 0xe0
 800a990:	01c9      	lsls	r1, r1, #7
 800a992:	430a      	orrs	r2, r1
 800a994:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a996:	4b5d      	ldr	r3, [pc, #372]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	4a5d      	ldr	r2, [pc, #372]	@ (800ab10 <HAL_RCC_ClockConfig+0x1fc>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	0019      	movs	r1, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	4b59      	ldr	r3, [pc, #356]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	d057      	beq.n	800aa64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d107      	bne.n	800a9cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9bc:	4b53      	ldr	r3, [pc, #332]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	2380      	movs	r3, #128	@ 0x80
 800a9c2:	029b      	lsls	r3, r3, #10
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	d12b      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e097      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d107      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9d4:	4b4d      	ldr	r3, [pc, #308]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	2380      	movs	r3, #128	@ 0x80
 800a9da:	049b      	lsls	r3, r3, #18
 800a9dc:	4013      	ands	r3, r2
 800a9de:	d11f      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e08b      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9ec:	4b47      	ldr	r3, [pc, #284]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	2380      	movs	r3, #128	@ 0x80
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	d113      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e07f      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d106      	bne.n	800aa12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa04:	4b41      	ldr	r3, [pc, #260]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aa06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa08:	2202      	movs	r2, #2
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	d108      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e074      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa12:	4b3e      	ldr	r3, [pc, #248]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aa14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa16:	2202      	movs	r2, #2
 800aa18:	4013      	ands	r3, r2
 800aa1a:	d101      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e06d      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa20:	4b3a      	ldr	r3, [pc, #232]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	2207      	movs	r2, #7
 800aa26:	4393      	bics	r3, r2
 800aa28:	0019      	movs	r1, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	4b37      	ldr	r3, [pc, #220]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aa30:	430a      	orrs	r2, r1
 800aa32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa34:	f7fd fc4a 	bl	80082cc <HAL_GetTick>
 800aa38:	0003      	movs	r3, r0
 800aa3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa3c:	e009      	b.n	800aa52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa3e:	f7fd fc45 	bl	80082cc <HAL_GetTick>
 800aa42:	0002      	movs	r2, r0
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	4a2f      	ldr	r2, [pc, #188]	@ (800ab08 <HAL_RCC_ClockConfig+0x1f4>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d901      	bls.n	800aa52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e054      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa52:	4b2e      	ldr	r3, [pc, #184]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	2238      	movs	r2, #56	@ 0x38
 800aa58:	401a      	ands	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d1ec      	bne.n	800aa3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa64:	4b27      	ldr	r3, [pc, #156]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2207      	movs	r2, #7
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d21e      	bcs.n	800aab0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa72:	4b24      	ldr	r3, [pc, #144]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2207      	movs	r2, #7
 800aa78:	4393      	bics	r3, r2
 800aa7a:	0019      	movs	r1, r3
 800aa7c:	4b21      	ldr	r3, [pc, #132]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aa84:	f7fd fc22 	bl	80082cc <HAL_GetTick>
 800aa88:	0003      	movs	r3, r0
 800aa8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aa8c:	e009      	b.n	800aaa2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa8e:	f7fd fc1d 	bl	80082cc <HAL_GetTick>
 800aa92:	0002      	movs	r2, r0
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	4a1b      	ldr	r2, [pc, #108]	@ (800ab08 <HAL_RCC_ClockConfig+0x1f4>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e02c      	b.n	800aafc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aaa2:	4b18      	ldr	r3, [pc, #96]	@ (800ab04 <HAL_RCC_ClockConfig+0x1f0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2207      	movs	r2, #7
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d1ee      	bne.n	800aa8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2204      	movs	r2, #4
 800aab6:	4013      	ands	r3, r2
 800aab8:	d009      	beq.n	800aace <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800aaba:	4b14      	ldr	r3, [pc, #80]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	4a15      	ldr	r2, [pc, #84]	@ (800ab14 <HAL_RCC_ClockConfig+0x200>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	0019      	movs	r1, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	4b10      	ldr	r3, [pc, #64]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aaca:	430a      	orrs	r2, r1
 800aacc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800aace:	f000 f829 	bl	800ab24 <HAL_RCC_GetSysClockFreq>
 800aad2:	0001      	movs	r1, r0
 800aad4:	4b0d      	ldr	r3, [pc, #52]	@ (800ab0c <HAL_RCC_ClockConfig+0x1f8>)
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	0a1b      	lsrs	r3, r3, #8
 800aada:	220f      	movs	r2, #15
 800aadc:	401a      	ands	r2, r3
 800aade:	4b0e      	ldr	r3, [pc, #56]	@ (800ab18 <HAL_RCC_ClockConfig+0x204>)
 800aae0:	0092      	lsls	r2, r2, #2
 800aae2:	58d3      	ldr	r3, [r2, r3]
 800aae4:	221f      	movs	r2, #31
 800aae6:	4013      	ands	r3, r2
 800aae8:	000a      	movs	r2, r1
 800aaea:	40da      	lsrs	r2, r3
 800aaec:	4b0b      	ldr	r3, [pc, #44]	@ (800ab1c <HAL_RCC_ClockConfig+0x208>)
 800aaee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <HAL_RCC_ClockConfig+0x20c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f7fc fe57 	bl	80077a8 <HAL_InitTick>
 800aafa:	0003      	movs	r3, r0
}
 800aafc:	0018      	movs	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b004      	add	sp, #16
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	40022000 	.word	0x40022000
 800ab08:	00001388 	.word	0x00001388
 800ab0c:	40021000 	.word	0x40021000
 800ab10:	fffff0ff 	.word	0xfffff0ff
 800ab14:	ffff8fff 	.word	0xffff8fff
 800ab18:	0801761c 	.word	0x0801761c
 800ab1c:	20000068 	.word	0x20000068
 800ab20:	20000074 	.word	0x20000074

0800ab24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab2a:	4b3c      	ldr	r3, [pc, #240]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	2238      	movs	r2, #56	@ 0x38
 800ab30:	4013      	ands	r3, r2
 800ab32:	d10f      	bne.n	800ab54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800ab34:	4b39      	ldr	r3, [pc, #228]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	0adb      	lsrs	r3, r3, #11
 800ab3a:	2207      	movs	r2, #7
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	2201      	movs	r2, #1
 800ab40:	409a      	lsls	r2, r3
 800ab42:	0013      	movs	r3, r2
 800ab44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	4835      	ldr	r0, [pc, #212]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ab4a:	f7f5 faf9 	bl	8000140 <__udivsi3>
 800ab4e:	0003      	movs	r3, r0
 800ab50:	613b      	str	r3, [r7, #16]
 800ab52:	e05d      	b.n	800ac10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab54:	4b31      	ldr	r3, [pc, #196]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	2238      	movs	r2, #56	@ 0x38
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	d102      	bne.n	800ab66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab60:	4b30      	ldr	r3, [pc, #192]	@ (800ac24 <HAL_RCC_GetSysClockFreq+0x100>)
 800ab62:	613b      	str	r3, [r7, #16]
 800ab64:	e054      	b.n	800ac10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab66:	4b2d      	ldr	r3, [pc, #180]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	2238      	movs	r2, #56	@ 0x38
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	2b10      	cmp	r3, #16
 800ab70:	d138      	bne.n	800abe4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ab72:	4b2a      	ldr	r3, [pc, #168]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2203      	movs	r2, #3
 800ab78:	4013      	ands	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab7c:	4b27      	ldr	r3, [pc, #156]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	091b      	lsrs	r3, r3, #4
 800ab82:	2207      	movs	r2, #7
 800ab84:	4013      	ands	r3, r2
 800ab86:	3301      	adds	r3, #1
 800ab88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d10d      	bne.n	800abac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	4824      	ldr	r0, [pc, #144]	@ (800ac24 <HAL_RCC_GetSysClockFreq+0x100>)
 800ab94:	f7f5 fad4 	bl	8000140 <__udivsi3>
 800ab98:	0003      	movs	r3, r0
 800ab9a:	0019      	movs	r1, r3
 800ab9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	0a1b      	lsrs	r3, r3, #8
 800aba2:	227f      	movs	r2, #127	@ 0x7f
 800aba4:	4013      	ands	r3, r2
 800aba6:	434b      	muls	r3, r1
 800aba8:	617b      	str	r3, [r7, #20]
        break;
 800abaa:	e00d      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	481c      	ldr	r0, [pc, #112]	@ (800ac20 <HAL_RCC_GetSysClockFreq+0xfc>)
 800abb0:	f7f5 fac6 	bl	8000140 <__udivsi3>
 800abb4:	0003      	movs	r3, r0
 800abb6:	0019      	movs	r1, r3
 800abb8:	4b18      	ldr	r3, [pc, #96]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	0a1b      	lsrs	r3, r3, #8
 800abbe:	227f      	movs	r2, #127	@ 0x7f
 800abc0:	4013      	ands	r3, r2
 800abc2:	434b      	muls	r3, r1
 800abc4:	617b      	str	r3, [r7, #20]
        break;
 800abc6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800abc8:	4b14      	ldr	r3, [pc, #80]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	0f5b      	lsrs	r3, r3, #29
 800abce:	2207      	movs	r2, #7
 800abd0:	4013      	ands	r3, r2
 800abd2:	3301      	adds	r3, #1
 800abd4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	6978      	ldr	r0, [r7, #20]
 800abda:	f7f5 fab1 	bl	8000140 <__udivsi3>
 800abde:	0003      	movs	r3, r0
 800abe0:	613b      	str	r3, [r7, #16]
 800abe2:	e015      	b.n	800ac10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800abe4:	4b0d      	ldr	r3, [pc, #52]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	2238      	movs	r2, #56	@ 0x38
 800abea:	4013      	ands	r3, r2
 800abec:	2b20      	cmp	r3, #32
 800abee:	d103      	bne.n	800abf8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800abf0:	2380      	movs	r3, #128	@ 0x80
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	613b      	str	r3, [r7, #16]
 800abf6:	e00b      	b.n	800ac10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800abf8:	4b08      	ldr	r3, [pc, #32]	@ (800ac1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2238      	movs	r2, #56	@ 0x38
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b18      	cmp	r3, #24
 800ac02:	d103      	bne.n	800ac0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800ac04:	23fa      	movs	r3, #250	@ 0xfa
 800ac06:	01db      	lsls	r3, r3, #7
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	e001      	b.n	800ac10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ac10:	693b      	ldr	r3, [r7, #16]
}
 800ac12:	0018      	movs	r0, r3
 800ac14:	46bd      	mov	sp, r7
 800ac16:	b006      	add	sp, #24
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	46c0      	nop			@ (mov r8, r8)
 800ac1c:	40021000 	.word	0x40021000
 800ac20:	00f42400 	.word	0x00f42400
 800ac24:	00b71b00 	.word	0x00b71b00

0800ac28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac2c:	4b02      	ldr	r3, [pc, #8]	@ (800ac38 <HAL_RCC_GetHCLKFreq+0x10>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
}
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	46c0      	nop			@ (mov r8, r8)
 800ac38:	20000068 	.word	0x20000068

0800ac3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac3c:	b5b0      	push	{r4, r5, r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ac40:	f7ff fff2 	bl	800ac28 <HAL_RCC_GetHCLKFreq>
 800ac44:	0004      	movs	r4, r0
 800ac46:	f7ff fb3f 	bl	800a2c8 <LL_RCC_GetAPB1Prescaler>
 800ac4a:	0003      	movs	r3, r0
 800ac4c:	0b1a      	lsrs	r2, r3, #12
 800ac4e:	4b05      	ldr	r3, [pc, #20]	@ (800ac64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac50:	0092      	lsls	r2, r2, #2
 800ac52:	58d3      	ldr	r3, [r2, r3]
 800ac54:	221f      	movs	r2, #31
 800ac56:	4013      	ands	r3, r2
 800ac58:	40dc      	lsrs	r4, r3
 800ac5a:	0023      	movs	r3, r4
}
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bdb0      	pop	{r4, r5, r7, pc}
 800ac62:	46c0      	nop			@ (mov r8, r8)
 800ac64:	0801765c 	.word	0x0801765c

0800ac68 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2207      	movs	r2, #7
 800ac76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac78:	4b0e      	ldr	r3, [pc, #56]	@ (800acb4 <HAL_RCC_GetClockConfig+0x4c>)
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	2207      	movs	r2, #7
 800ac7e:	401a      	ands	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ac84:	4b0b      	ldr	r3, [pc, #44]	@ (800acb4 <HAL_RCC_GetClockConfig+0x4c>)
 800ac86:	689a      	ldr	r2, [r3, #8]
 800ac88:	23f0      	movs	r3, #240	@ 0xf0
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	401a      	ands	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800ac92:	4b08      	ldr	r3, [pc, #32]	@ (800acb4 <HAL_RCC_GetClockConfig+0x4c>)
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	23e0      	movs	r3, #224	@ 0xe0
 800ac98:	01db      	lsls	r3, r3, #7
 800ac9a:	401a      	ands	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aca0:	4b05      	ldr	r3, [pc, #20]	@ (800acb8 <HAL_RCC_GetClockConfig+0x50>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2207      	movs	r2, #7
 800aca6:	401a      	ands	r2, r3
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	601a      	str	r2, [r3, #0]
}
 800acac:	46c0      	nop			@ (mov r8, r8)
 800acae:	46bd      	mov	sp, r7
 800acb0:	b002      	add	sp, #8
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	40021000 	.word	0x40021000
 800acb8:	40022000 	.word	0x40022000

0800acbc <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800acc0:	4b04      	ldr	r3, [pc, #16]	@ (800acd4 <HAL_RCC_EnableCSS+0x18>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	4b03      	ldr	r3, [pc, #12]	@ (800acd4 <HAL_RCC_EnableCSS+0x18>)
 800acc6:	2180      	movs	r1, #128	@ 0x80
 800acc8:	0309      	lsls	r1, r1, #12
 800acca:	430a      	orrs	r2, r1
 800accc:	601a      	str	r2, [r3, #0]
}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	40021000 	.word	0x40021000

0800acd8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 800acde:	4b0d      	ldr	r3, [pc, #52]	@ (800ad14 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800ace4:	4b0b      	ldr	r3, [pc, #44]	@ (800ad14 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	22c0      	movs	r2, #192	@ 0xc0
 800acea:	0092      	lsls	r2, r2, #2
 800acec:	400a      	ands	r2, r1
 800acee:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	2380      	movs	r3, #128	@ 0x80
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	4013      	ands	r3, r2
 800acf8:	d001      	beq.n	800acfe <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800acfa:	f000 f80d 	bl	800ad18 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	2380      	movs	r3, #128	@ 0x80
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4013      	ands	r3, r2
 800ad06:	d001      	beq.n	800ad0c <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800ad08:	f000 f80b 	bl	800ad22 <HAL_RCC_LSECSSCallback>
  }
}
 800ad0c:	46c0      	nop			@ (mov r8, r8)
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b002      	add	sp, #8
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	40021000 	.word	0x40021000

0800ad18 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800ad1c:	46c0      	nop			@ (mov r8, r8)
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ad34:	2313      	movs	r3, #19
 800ad36:	18fb      	adds	r3, r7, r3
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad3c:	2312      	movs	r3, #18
 800ad3e:	18fb      	adds	r3, r7, r3
 800ad40:	2200      	movs	r2, #0
 800ad42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	2380      	movs	r3, #128	@ 0x80
 800ad4a:	029b      	lsls	r3, r3, #10
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d100      	bne.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ad50:	e0a3      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad52:	2011      	movs	r0, #17
 800ad54:	183b      	adds	r3, r7, r0
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad5a:	4bc3      	ldr	r3, [pc, #780]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad5e:	2380      	movs	r3, #128	@ 0x80
 800ad60:	055b      	lsls	r3, r3, #21
 800ad62:	4013      	ands	r3, r2
 800ad64:	d110      	bne.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad66:	4bc0      	ldr	r3, [pc, #768]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad6a:	4bbf      	ldr	r3, [pc, #764]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad6c:	2180      	movs	r1, #128	@ 0x80
 800ad6e:	0549      	lsls	r1, r1, #21
 800ad70:	430a      	orrs	r2, r1
 800ad72:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ad74:	4bbc      	ldr	r3, [pc, #752]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ad76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad78:	2380      	movs	r3, #128	@ 0x80
 800ad7a:	055b      	lsls	r3, r3, #21
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	60bb      	str	r3, [r7, #8]
 800ad80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad82:	183b      	adds	r3, r7, r0
 800ad84:	2201      	movs	r2, #1
 800ad86:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad88:	4bb8      	ldr	r3, [pc, #736]	@ (800b06c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	4bb7      	ldr	r3, [pc, #732]	@ (800b06c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800ad8e:	2180      	movs	r1, #128	@ 0x80
 800ad90:	0049      	lsls	r1, r1, #1
 800ad92:	430a      	orrs	r2, r1
 800ad94:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad96:	f7fd fa99 	bl	80082cc <HAL_GetTick>
 800ad9a:	0003      	movs	r3, r0
 800ad9c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad9e:	e00b      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ada0:	f7fd fa94 	bl	80082cc <HAL_GetTick>
 800ada4:	0002      	movs	r2, r0
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d904      	bls.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800adae:	2313      	movs	r3, #19
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	2203      	movs	r2, #3
 800adb4:	701a      	strb	r2, [r3, #0]
        break;
 800adb6:	e005      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adb8:	4bac      	ldr	r3, [pc, #688]	@ (800b06c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	2380      	movs	r3, #128	@ 0x80
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	4013      	ands	r3, r2
 800adc2:	d0ed      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800adc4:	2313      	movs	r3, #19
 800adc6:	18fb      	adds	r3, r7, r3
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d154      	bne.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800adce:	4ba6      	ldr	r3, [pc, #664]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800add0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800add2:	23c0      	movs	r3, #192	@ 0xc0
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4013      	ands	r3, r2
 800add8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d019      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d014      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800adea:	4b9f      	ldr	r3, [pc, #636]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adee:	4aa0      	ldr	r2, [pc, #640]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800adf4:	4b9c      	ldr	r3, [pc, #624]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800adf8:	4b9b      	ldr	r3, [pc, #620]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800adfa:	2180      	movs	r1, #128	@ 0x80
 800adfc:	0249      	lsls	r1, r1, #9
 800adfe:	430a      	orrs	r2, r1
 800ae00:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae02:	4b99      	ldr	r3, [pc, #612]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ae06:	4b98      	ldr	r3, [pc, #608]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae08:	499a      	ldr	r1, [pc, #616]	@ (800b074 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800ae0a:	400a      	ands	r2, r1
 800ae0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ae0e:	4b96      	ldr	r3, [pc, #600]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2201      	movs	r2, #1
 800ae18:	4013      	ands	r3, r2
 800ae1a:	d016      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae1c:	f7fd fa56 	bl	80082cc <HAL_GetTick>
 800ae20:	0003      	movs	r3, r0
 800ae22:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae24:	e00c      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae26:	f7fd fa51 	bl	80082cc <HAL_GetTick>
 800ae2a:	0002      	movs	r2, r0
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	4a91      	ldr	r2, [pc, #580]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d904      	bls.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800ae36:	2313      	movs	r3, #19
 800ae38:	18fb      	adds	r3, r7, r3
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	701a      	strb	r2, [r3, #0]
            break;
 800ae3e:	e004      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae40:	4b89      	ldr	r3, [pc, #548]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae44:	2202      	movs	r2, #2
 800ae46:	4013      	ands	r3, r2
 800ae48:	d0ed      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800ae4a:	2313      	movs	r3, #19
 800ae4c:	18fb      	adds	r3, r7, r3
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae54:	4b84      	ldr	r3, [pc, #528]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae58:	4a85      	ldr	r2, [pc, #532]	@ (800b070 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	0019      	movs	r1, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae62:	4b81      	ldr	r3, [pc, #516]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae64:	430a      	orrs	r2, r1
 800ae66:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ae68:	e00c      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae6a:	2312      	movs	r3, #18
 800ae6c:	18fb      	adds	r3, r7, r3
 800ae6e:	2213      	movs	r2, #19
 800ae70:	18ba      	adds	r2, r7, r2
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	701a      	strb	r2, [r3, #0]
 800ae76:	e005      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae78:	2312      	movs	r3, #18
 800ae7a:	18fb      	adds	r3, r7, r3
 800ae7c:	2213      	movs	r2, #19
 800ae7e:	18ba      	adds	r2, r7, r2
 800ae80:	7812      	ldrb	r2, [r2, #0]
 800ae82:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae84:	2311      	movs	r3, #17
 800ae86:	18fb      	adds	r3, r7, r3
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d105      	bne.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae8e:	4b76      	ldr	r3, [pc, #472]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae92:	4b75      	ldr	r3, [pc, #468]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800ae94:	4979      	ldr	r1, [pc, #484]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800ae96:	400a      	ands	r2, r1
 800ae98:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4013      	ands	r3, r2
 800aea2:	d009      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aea4:	4b70      	ldr	r3, [pc, #448]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea8:	2203      	movs	r2, #3
 800aeaa:	4393      	bics	r3, r2
 800aeac:	0019      	movs	r1, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	4b6d      	ldr	r3, [pc, #436]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2202      	movs	r2, #2
 800aebe:	4013      	ands	r3, r2
 800aec0:	d009      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aec2:	4b69      	ldr	r3, [pc, #420]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec6:	220c      	movs	r2, #12
 800aec8:	4393      	bics	r3, r2
 800aeca:	0019      	movs	r1, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	4b65      	ldr	r3, [pc, #404]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aed2:	430a      	orrs	r2, r1
 800aed4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2210      	movs	r2, #16
 800aedc:	4013      	ands	r3, r2
 800aede:	d009      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aee0:	4b61      	ldr	r3, [pc, #388]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee4:	4a66      	ldr	r2, [pc, #408]	@ (800b080 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800aee6:	4013      	ands	r3, r2
 800aee8:	0019      	movs	r1, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	4b5e      	ldr	r3, [pc, #376]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aef0:	430a      	orrs	r2, r1
 800aef2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	2380      	movs	r3, #128	@ 0x80
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4013      	ands	r3, r2
 800aefe:	d009      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af00:	4b59      	ldr	r3, [pc, #356]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af04:	4a5f      	ldr	r2, [pc, #380]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800af06:	4013      	ands	r3, r2
 800af08:	0019      	movs	r1, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	4b56      	ldr	r3, [pc, #344]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af10:	430a      	orrs	r2, r1
 800af12:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	2380      	movs	r3, #128	@ 0x80
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	4013      	ands	r3, r2
 800af1e:	d009      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af20:	4b51      	ldr	r3, [pc, #324]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af24:	4a58      	ldr	r2, [pc, #352]	@ (800b088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800af26:	4013      	ands	r3, r2
 800af28:	0019      	movs	r1, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69da      	ldr	r2, [r3, #28]
 800af2e:	4b4e      	ldr	r3, [pc, #312]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af30:	430a      	orrs	r2, r1
 800af32:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2220      	movs	r2, #32
 800af3a:	4013      	ands	r3, r2
 800af3c:	d009      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800af3e:	4b4a      	ldr	r3, [pc, #296]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af42:	4a52      	ldr	r2, [pc, #328]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800af44:	4013      	ands	r3, r2
 800af46:	0019      	movs	r1, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691a      	ldr	r2, [r3, #16]
 800af4c:	4b46      	ldr	r3, [pc, #280]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af4e:	430a      	orrs	r2, r1
 800af50:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	2380      	movs	r3, #128	@ 0x80
 800af58:	01db      	lsls	r3, r3, #7
 800af5a:	4013      	ands	r3, r2
 800af5c:	d015      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af5e:	4b42      	ldr	r3, [pc, #264]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	0899      	lsrs	r1, r3, #2
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a1a      	ldr	r2, [r3, #32]
 800af6a:	4b3f      	ldr	r3, [pc, #252]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af6c:	430a      	orrs	r2, r1
 800af6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a1a      	ldr	r2, [r3, #32]
 800af74:	2380      	movs	r3, #128	@ 0x80
 800af76:	05db      	lsls	r3, r3, #23
 800af78:	429a      	cmp	r2, r3
 800af7a:	d106      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800af7c:	4b3a      	ldr	r3, [pc, #232]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	4b39      	ldr	r3, [pc, #228]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af82:	2180      	movs	r1, #128	@ 0x80
 800af84:	0249      	lsls	r1, r1, #9
 800af86:	430a      	orrs	r2, r1
 800af88:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	2380      	movs	r3, #128	@ 0x80
 800af90:	031b      	lsls	r3, r3, #12
 800af92:	4013      	ands	r3, r2
 800af94:	d009      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af96:	4b34      	ldr	r3, [pc, #208]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800af98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af9a:	2240      	movs	r2, #64	@ 0x40
 800af9c:	4393      	bics	r3, r2
 800af9e:	0019      	movs	r1, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afa4:	4b30      	ldr	r3, [pc, #192]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800afa6:	430a      	orrs	r2, r1
 800afa8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	2380      	movs	r3, #128	@ 0x80
 800afb0:	039b      	lsls	r3, r3, #14
 800afb2:	4013      	ands	r3, r2
 800afb4:	d016      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800afb6:	4b2c      	ldr	r3, [pc, #176]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800afb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afba:	4a35      	ldr	r2, [pc, #212]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	0019      	movs	r1, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afc4:	4b28      	ldr	r3, [pc, #160]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800afc6:	430a      	orrs	r2, r1
 800afc8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afce:	2380      	movs	r3, #128	@ 0x80
 800afd0:	03db      	lsls	r3, r3, #15
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d106      	bne.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800afd6:	4b24      	ldr	r3, [pc, #144]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	4b23      	ldr	r3, [pc, #140]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800afdc:	2180      	movs	r1, #128	@ 0x80
 800afde:	0449      	lsls	r1, r1, #17
 800afe0:	430a      	orrs	r2, r1
 800afe2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	2380      	movs	r3, #128	@ 0x80
 800afea:	03db      	lsls	r3, r3, #15
 800afec:	4013      	ands	r3, r2
 800afee:	d016      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800aff0:	4b1d      	ldr	r3, [pc, #116]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff4:	4a27      	ldr	r2, [pc, #156]	@ (800b094 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800aff6:	4013      	ands	r3, r2
 800aff8:	0019      	movs	r1, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affe:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b000:	430a      	orrs	r2, r1
 800b002:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b008:	2380      	movs	r3, #128	@ 0x80
 800b00a:	045b      	lsls	r3, r3, #17
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d106      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b010:	4b15      	ldr	r3, [pc, #84]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	4b14      	ldr	r3, [pc, #80]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b016:	2180      	movs	r1, #128	@ 0x80
 800b018:	0449      	lsls	r1, r1, #17
 800b01a:	430a      	orrs	r2, r1
 800b01c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	2380      	movs	r3, #128	@ 0x80
 800b024:	011b      	lsls	r3, r3, #4
 800b026:	4013      	ands	r3, r2
 800b028:	d016      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800b02a:	4b0f      	ldr	r3, [pc, #60]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b02e:	4a1a      	ldr	r2, [pc, #104]	@ (800b098 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800b030:	4013      	ands	r3, r2
 800b032:	0019      	movs	r1, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	695a      	ldr	r2, [r3, #20]
 800b038:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b03a:	430a      	orrs	r2, r1
 800b03c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	695a      	ldr	r2, [r3, #20]
 800b042:	2380      	movs	r3, #128	@ 0x80
 800b044:	01db      	lsls	r3, r3, #7
 800b046:	429a      	cmp	r2, r3
 800b048:	d106      	bne.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b04a:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b04c:	68da      	ldr	r2, [r3, #12]
 800b04e:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800b050:	2180      	movs	r1, #128	@ 0x80
 800b052:	0249      	lsls	r1, r1, #9
 800b054:	430a      	orrs	r2, r1
 800b056:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b058:	2312      	movs	r3, #18
 800b05a:	18fb      	adds	r3, r7, r3
 800b05c:	781b      	ldrb	r3, [r3, #0]
}
 800b05e:	0018      	movs	r0, r3
 800b060:	46bd      	mov	sp, r7
 800b062:	b006      	add	sp, #24
 800b064:	bd80      	pop	{r7, pc}
 800b066:	46c0      	nop			@ (mov r8, r8)
 800b068:	40021000 	.word	0x40021000
 800b06c:	40007000 	.word	0x40007000
 800b070:	fffffcff 	.word	0xfffffcff
 800b074:	fffeffff 	.word	0xfffeffff
 800b078:	00001388 	.word	0x00001388
 800b07c:	efffffff 	.word	0xefffffff
 800b080:	fffff3ff 	.word	0xfffff3ff
 800b084:	fff3ffff 	.word	0xfff3ffff
 800b088:	ffcfffff 	.word	0xffcfffff
 800b08c:	ffffcfff 	.word	0xffffcfff
 800b090:	ffbfffff 	.word	0xffbfffff
 800b094:	feffffff 	.word	0xfeffffff
 800b098:	ffff3fff 	.word	0xffff3fff

0800b09c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b09c:	b5b0      	push	{r4, r5, r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b0a4:	230f      	movs	r3, #15
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d100      	bne.n	800b0b4 <HAL_RTC_Init+0x18>
 800b0b2:	e08c      	b.n	800b1ce <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2229      	movs	r2, #41	@ 0x29
 800b0b8:	5c9b      	ldrb	r3, [r3, r2]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10b      	bne.n	800b0d8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2228      	movs	r2, #40	@ 0x28
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2288      	movs	r2, #136	@ 0x88
 800b0cc:	0212      	lsls	r2, r2, #8
 800b0ce:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	0018      	movs	r0, r3
 800b0d4:	f7fc f9a6 	bl	8007424 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2229      	movs	r2, #41	@ 0x29
 800b0dc:	2102      	movs	r1, #2
 800b0de:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	2210      	movs	r2, #16
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	2b10      	cmp	r3, #16
 800b0ec:	d062      	beq.n	800b1b4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	22ca      	movs	r2, #202	@ 0xca
 800b0f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2253      	movs	r2, #83	@ 0x53
 800b0fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b0fe:	250f      	movs	r5, #15
 800b100:	197c      	adds	r4, r7, r5
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	0018      	movs	r0, r3
 800b106:	f000 f891 	bl	800b22c <RTC_EnterInitMode>
 800b10a:	0003      	movs	r3, r0
 800b10c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800b10e:	0028      	movs	r0, r5
 800b110:	183b      	adds	r3, r7, r0
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d12c      	bne.n	800b172 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	699a      	ldr	r2, [r3, #24]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	492e      	ldr	r1, [pc, #184]	@ (800b1dc <HAL_RTC_Init+0x140>)
 800b124:	400a      	ands	r2, r1
 800b126:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6999      	ldr	r1, [r3, #24]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689a      	ldr	r2, [r3, #8]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	431a      	orrs	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6912      	ldr	r2, [r2, #16]
 800b14e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6919      	ldr	r1, [r3, #16]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	041a      	lsls	r2, r3, #16
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b164:	183c      	adds	r4, r7, r0
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	0018      	movs	r0, r3
 800b16a:	f000 f8a1 	bl	800b2b0 <RTC_ExitInitMode>
 800b16e:	0003      	movs	r3, r0
 800b170:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800b172:	230f      	movs	r3, #15
 800b174:	18fb      	adds	r3, r7, r3
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d116      	bne.n	800b1aa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699a      	ldr	r2, [r3, #24]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	00d2      	lsls	r2, r2, #3
 800b188:	08d2      	lsrs	r2, r2, #3
 800b18a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6999      	ldr	r1, [r3, #24]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	431a      	orrs	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	22ff      	movs	r2, #255	@ 0xff
 800b1b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b1b2:	e003      	b.n	800b1bc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b1b4:	230f      	movs	r3, #15
 800b1b6:	18fb      	adds	r3, r7, r3
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b1bc:	230f      	movs	r3, #15
 800b1be:	18fb      	adds	r3, r7, r3
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d103      	bne.n	800b1ce <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2229      	movs	r2, #41	@ 0x29
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800b1ce:	230f      	movs	r3, #15
 800b1d0:	18fb      	adds	r3, r7, r3
 800b1d2:	781b      	ldrb	r3, [r3, #0]
}
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	b004      	add	sp, #16
 800b1da:	bdb0      	pop	{r4, r5, r7, pc}
 800b1dc:	fb8fffbf 	.word	0xfb8fffbf

0800b1e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a0e      	ldr	r2, [pc, #56]	@ (800b228 <HAL_RTC_WaitForSynchro+0x48>)
 800b1ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b1f0:	f7fd f86c 	bl	80082cc <HAL_GetTick>
 800b1f4:	0003      	movs	r3, r0
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b1f8:	e00a      	b.n	800b210 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b1fa:	f7fd f867 	bl	80082cc <HAL_GetTick>
 800b1fe:	0002      	movs	r2, r0
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	1ad2      	subs	r2, r2, r3
 800b204:	23fa      	movs	r3, #250	@ 0xfa
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	429a      	cmp	r2, r3
 800b20a:	d901      	bls.n	800b210 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e006      	b.n	800b21e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	2220      	movs	r2, #32
 800b218:	4013      	ands	r3, r2
 800b21a:	d0ee      	beq.n	800b1fa <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	0018      	movs	r0, r3
 800b220:	46bd      	mov	sp, r7
 800b222:	b004      	add	sp, #16
 800b224:	bd80      	pop	{r7, pc}
 800b226:	46c0      	nop			@ (mov r8, r8)
 800b228:	0001005f 	.word	0x0001005f

0800b22c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800b234:	230f      	movs	r3, #15
 800b236:	18fb      	adds	r3, r7, r3
 800b238:	2200      	movs	r2, #0
 800b23a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	2240      	movs	r2, #64	@ 0x40
 800b244:	4013      	ands	r3, r2
 800b246:	d12c      	bne.n	800b2a2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2180      	movs	r1, #128	@ 0x80
 800b254:	430a      	orrs	r2, r1
 800b256:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b258:	f7fd f838 	bl	80082cc <HAL_GetTick>
 800b25c:	0003      	movs	r3, r0
 800b25e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b260:	e014      	b.n	800b28c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b262:	f7fd f833 	bl	80082cc <HAL_GetTick>
 800b266:	0002      	movs	r2, r0
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	1ad2      	subs	r2, r2, r3
 800b26c:	200f      	movs	r0, #15
 800b26e:	183b      	adds	r3, r7, r0
 800b270:	1839      	adds	r1, r7, r0
 800b272:	7809      	ldrb	r1, [r1, #0]
 800b274:	7019      	strb	r1, [r3, #0]
 800b276:	23fa      	movs	r3, #250	@ 0xfa
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d906      	bls.n	800b28c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800b27e:	183b      	adds	r3, r7, r0
 800b280:	2203      	movs	r2, #3
 800b282:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2229      	movs	r2, #41	@ 0x29
 800b288:	2103      	movs	r1, #3
 800b28a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	2240      	movs	r2, #64	@ 0x40
 800b294:	4013      	ands	r3, r2
 800b296:	d104      	bne.n	800b2a2 <RTC_EnterInitMode+0x76>
 800b298:	230f      	movs	r3, #15
 800b29a:	18fb      	adds	r3, r7, r3
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d1df      	bne.n	800b262 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b2a2:	230f      	movs	r3, #15
 800b2a4:	18fb      	adds	r3, r7, r3
 800b2a6:	781b      	ldrb	r3, [r3, #0]
}
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	b004      	add	sp, #16
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b2b0:	b590      	push	{r4, r7, lr}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2b8:	240f      	movs	r4, #15
 800b2ba:	193b      	adds	r3, r7, r4
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b2c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b2c2:	68da      	ldr	r2, [r3, #12]
 800b2c4:	4b1b      	ldr	r3, [pc, #108]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b2c6:	2180      	movs	r1, #128	@ 0x80
 800b2c8:	438a      	bics	r2, r1
 800b2ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b2cc:	4b19      	ldr	r3, [pc, #100]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	d10d      	bne.n	800b2f2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f7ff ff81 	bl	800b1e0 <HAL_RTC_WaitForSynchro>
 800b2de:	1e03      	subs	r3, r0, #0
 800b2e0:	d021      	beq.n	800b326 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2229      	movs	r2, #41	@ 0x29
 800b2e6:	2103      	movs	r1, #3
 800b2e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b2ea:	193b      	adds	r3, r7, r4
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	701a      	strb	r2, [r3, #0]
 800b2f0:	e019      	b.n	800b326 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b2f2:	4b10      	ldr	r3, [pc, #64]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b2f8:	2120      	movs	r1, #32
 800b2fa:	438a      	bics	r2, r1
 800b2fc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	0018      	movs	r0, r3
 800b302:	f7ff ff6d 	bl	800b1e0 <HAL_RTC_WaitForSynchro>
 800b306:	1e03      	subs	r3, r0, #0
 800b308:	d007      	beq.n	800b31a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2229      	movs	r2, #41	@ 0x29
 800b30e:	2103      	movs	r1, #3
 800b310:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b312:	230f      	movs	r3, #15
 800b314:	18fb      	adds	r3, r7, r3
 800b316:	2203      	movs	r2, #3
 800b318:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b31a:	4b06      	ldr	r3, [pc, #24]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b31c:	699a      	ldr	r2, [r3, #24]
 800b31e:	4b05      	ldr	r3, [pc, #20]	@ (800b334 <RTC_ExitInitMode+0x84>)
 800b320:	2120      	movs	r1, #32
 800b322:	430a      	orrs	r2, r1
 800b324:	619a      	str	r2, [r3, #24]
  }

  return status;
 800b326:	230f      	movs	r3, #15
 800b328:	18fb      	adds	r3, r7, r3
 800b32a:	781b      	ldrb	r3, [r3, #0]
}
 800b32c:	0018      	movs	r0, r3
 800b32e:	46bd      	mov	sp, r7
 800b330:	b005      	add	sp, #20
 800b332:	bd90      	pop	{r4, r7, pc}
 800b334:	40002800 	.word	0x40002800

0800b338 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	001a      	movs	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	18d3      	adds	r3, r2, r3
 800b350:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	3301      	adds	r3, #1
 800b356:	33ff      	adds	r3, #255	@ 0xff
 800b358:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	18d3      	adds	r3, r2, r3
 800b362:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	601a      	str	r2, [r3, #0]
}
 800b36a:	46c0      	nop			@ (mov r8, r8)
 800b36c:	46bd      	mov	sp, r7
 800b36e:	b006      	add	sp, #24
 800b370:	bd80      	pop	{r7, pc}

0800b372 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	001a      	movs	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	18d3      	adds	r3, r2, r3
 800b388:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3301      	adds	r3, #1
 800b38e:	33ff      	adds	r3, #255	@ 0xff
 800b390:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	18d3      	adds	r3, r2, r3
 800b39a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	681b      	ldr	r3, [r3, #0]
}
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	b004      	add	sp, #16
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e0a8      	b.n	800b50c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d109      	bne.n	800b3d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	2382      	movs	r3, #130	@ 0x82
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d009      	beq.n	800b3e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	61da      	str	r2, [r3, #28]
 800b3d4:	e005      	b.n	800b3e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	225d      	movs	r2, #93	@ 0x5d
 800b3ec:	5c9b      	ldrb	r3, [r3, r2]
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d107      	bne.n	800b404 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	225c      	movs	r2, #92	@ 0x5c
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	0018      	movs	r0, r3
 800b400:	f7fc f8ca 	bl	8007598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	225d      	movs	r2, #93	@ 0x5d
 800b408:	2102      	movs	r1, #2
 800b40a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2140      	movs	r1, #64	@ 0x40
 800b418:	438a      	bics	r2, r1
 800b41a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	23e0      	movs	r3, #224	@ 0xe0
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	429a      	cmp	r2, r3
 800b426:	d902      	bls.n	800b42e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	e002      	b.n	800b434 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b42e:	2380      	movs	r3, #128	@ 0x80
 800b430:	015b      	lsls	r3, r3, #5
 800b432:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68da      	ldr	r2, [r3, #12]
 800b438:	23f0      	movs	r3, #240	@ 0xf0
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d008      	beq.n	800b452 <HAL_SPI_Init+0xaa>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	23e0      	movs	r3, #224	@ 0xe0
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	429a      	cmp	r2, r3
 800b44a:	d002      	beq.n	800b452 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	2382      	movs	r3, #130	@ 0x82
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	401a      	ands	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6899      	ldr	r1, [r3, #8]
 800b460:	2384      	movs	r3, #132	@ 0x84
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	400b      	ands	r3, r1
 800b466:	431a      	orrs	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	2102      	movs	r1, #2
 800b46e:	400b      	ands	r3, r1
 800b470:	431a      	orrs	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	2101      	movs	r1, #1
 800b478:	400b      	ands	r3, r1
 800b47a:	431a      	orrs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6999      	ldr	r1, [r3, #24]
 800b480:	2380      	movs	r3, #128	@ 0x80
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	400b      	ands	r3, r1
 800b486:	431a      	orrs	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	2138      	movs	r1, #56	@ 0x38
 800b48e:	400b      	ands	r3, r1
 800b490:	431a      	orrs	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	2180      	movs	r1, #128	@ 0x80
 800b498:	400b      	ands	r3, r1
 800b49a:	431a      	orrs	r2, r3
 800b49c:	0011      	movs	r1, r2
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4a2:	2380      	movs	r3, #128	@ 0x80
 800b4a4:	019b      	lsls	r3, r3, #6
 800b4a6:	401a      	ands	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	0c1b      	lsrs	r3, r3, #16
 800b4b6:	2204      	movs	r2, #4
 800b4b8:	401a      	ands	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4be:	2110      	movs	r1, #16
 800b4c0:	400b      	ands	r3, r1
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4c8:	2108      	movs	r1, #8
 800b4ca:	400b      	ands	r3, r1
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68d9      	ldr	r1, [r3, #12]
 800b4d2:	23f0      	movs	r3, #240	@ 0xf0
 800b4d4:	011b      	lsls	r3, r3, #4
 800b4d6:	400b      	ands	r3, r1
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	0011      	movs	r1, r2
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	2380      	movs	r3, #128	@ 0x80
 800b4e0:	015b      	lsls	r3, r3, #5
 800b4e2:	401a      	ands	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	69da      	ldr	r2, [r3, #28]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4907      	ldr	r1, [pc, #28]	@ (800b514 <HAL_SPI_Init+0x16c>)
 800b4f8:	400a      	ands	r2, r1
 800b4fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	225d      	movs	r2, #93	@ 0x5d
 800b506:	2101      	movs	r1, #1
 800b508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	0018      	movs	r0, r3
 800b50e:	46bd      	mov	sp, r7
 800b510:	b004      	add	sp, #16
 800b512:	bd80      	pop	{r7, pc}
 800b514:	fffff7ff 	.word	0xfffff7ff

0800b518 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	1dbb      	adds	r3, r7, #6
 800b526:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b528:	231f      	movs	r3, #31
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	225c      	movs	r2, #92	@ 0x5c
 800b534:	5c9b      	ldrb	r3, [r3, r2]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_SPI_Transmit+0x26>
 800b53a:	2302      	movs	r3, #2
 800b53c:	e147      	b.n	800b7ce <HAL_SPI_Transmit+0x2b6>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	225c      	movs	r2, #92	@ 0x5c
 800b542:	2101      	movs	r1, #1
 800b544:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b546:	f7fc fec1 	bl	80082cc <HAL_GetTick>
 800b54a:	0003      	movs	r3, r0
 800b54c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b54e:	2316      	movs	r3, #22
 800b550:	18fb      	adds	r3, r7, r3
 800b552:	1dba      	adds	r2, r7, #6
 800b554:	8812      	ldrh	r2, [r2, #0]
 800b556:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	225d      	movs	r2, #93	@ 0x5d
 800b55c:	5c9b      	ldrb	r3, [r3, r2]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	d004      	beq.n	800b56e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b564:	231f      	movs	r3, #31
 800b566:	18fb      	adds	r3, r7, r3
 800b568:	2202      	movs	r2, #2
 800b56a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b56c:	e128      	b.n	800b7c0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <HAL_SPI_Transmit+0x64>
 800b574:	1dbb      	adds	r3, r7, #6
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d104      	bne.n	800b586 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b57c:	231f      	movs	r3, #31
 800b57e:	18fb      	adds	r3, r7, r3
 800b580:	2201      	movs	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]
    goto error;
 800b584:	e11c      	b.n	800b7c0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	225d      	movs	r2, #93	@ 0x5d
 800b58a:	2103      	movs	r1, #3
 800b58c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	1dba      	adds	r2, r7, #6
 800b59e:	8812      	ldrh	r2, [r2, #0]
 800b5a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	1dba      	adds	r2, r7, #6
 800b5a6:	8812      	ldrh	r2, [r2, #0]
 800b5a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2244      	movs	r2, #68	@ 0x44
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2246      	movs	r2, #70	@ 0x46
 800b5bc:	2100      	movs	r1, #0
 800b5be:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	689a      	ldr	r2, [r3, #8]
 800b5d0:	2380      	movs	r3, #128	@ 0x80
 800b5d2:	021b      	lsls	r3, r3, #8
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d110      	bne.n	800b5fa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2140      	movs	r1, #64	@ 0x40
 800b5e4:	438a      	bics	r2, r1
 800b5e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2180      	movs	r1, #128	@ 0x80
 800b5f4:	01c9      	lsls	r1, r1, #7
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2240      	movs	r2, #64	@ 0x40
 800b602:	4013      	ands	r3, r2
 800b604:	2b40      	cmp	r3, #64	@ 0x40
 800b606:	d007      	beq.n	800b618 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2140      	movs	r1, #64	@ 0x40
 800b614:	430a      	orrs	r2, r1
 800b616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	23e0      	movs	r3, #224	@ 0xe0
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	429a      	cmp	r2, r3
 800b622:	d952      	bls.n	800b6ca <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d004      	beq.n	800b636 <HAL_SPI_Transmit+0x11e>
 800b62c:	2316      	movs	r3, #22
 800b62e:	18fb      	adds	r3, r7, r3
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d143      	bne.n	800b6be <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63a:	881a      	ldrh	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b646:	1c9a      	adds	r2, r3, #2
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b650:	b29b      	uxth	r3, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	b29a      	uxth	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b65a:	e030      	b.n	800b6be <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2202      	movs	r2, #2
 800b664:	4013      	ands	r3, r2
 800b666:	2b02      	cmp	r3, #2
 800b668:	d112      	bne.n	800b690 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b66e:	881a      	ldrh	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b67a:	1c9a      	adds	r2, r3, #2
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b684:	b29b      	uxth	r3, r3
 800b686:	3b01      	subs	r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b68e:	e016      	b.n	800b6be <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b690:	f7fc fe1c 	bl	80082cc <HAL_GetTick>
 800b694:	0002      	movs	r2, r0
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d802      	bhi.n	800b6a6 <HAL_SPI_Transmit+0x18e>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	d102      	bne.n	800b6ac <HAL_SPI_Transmit+0x194>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d108      	bne.n	800b6be <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b6ac:	231f      	movs	r3, #31
 800b6ae:	18fb      	adds	r3, r7, r3
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	225d      	movs	r2, #93	@ 0x5d
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	5499      	strb	r1, [r3, r2]
          goto error;
 800b6bc:	e080      	b.n	800b7c0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1c9      	bne.n	800b65c <HAL_SPI_Transmit+0x144>
 800b6c8:	e053      	b.n	800b772 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d004      	beq.n	800b6dc <HAL_SPI_Transmit+0x1c4>
 800b6d2:	2316      	movs	r3, #22
 800b6d4:	18fb      	adds	r3, r7, r3
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d145      	bne.n	800b768 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	7812      	ldrb	r2, [r2, #0]
 800b6e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b702:	e031      	b.n	800b768 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	2202      	movs	r2, #2
 800b70c:	4013      	ands	r3, r2
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d113      	bne.n	800b73a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	330c      	adds	r3, #12
 800b71c:	7812      	ldrb	r2, [r2, #0]
 800b71e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	b29a      	uxth	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b738:	e016      	b.n	800b768 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b73a:	f7fc fdc7 	bl	80082cc <HAL_GetTick>
 800b73e:	0002      	movs	r2, r0
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d802      	bhi.n	800b750 <HAL_SPI_Transmit+0x238>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	3301      	adds	r3, #1
 800b74e:	d102      	bne.n	800b756 <HAL_SPI_Transmit+0x23e>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d108      	bne.n	800b768 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b756:	231f      	movs	r3, #31
 800b758:	18fb      	adds	r3, r7, r3
 800b75a:	2203      	movs	r2, #3
 800b75c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	225d      	movs	r2, #93	@ 0x5d
 800b762:	2101      	movs	r1, #1
 800b764:	5499      	strb	r1, [r3, r2]
          goto error;
 800b766:	e02b      	b.n	800b7c0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1c8      	bne.n	800b704 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	0018      	movs	r0, r3
 800b77a:	f000 fcef 	bl	800c15c <SPI_EndRxTxTransaction>
 800b77e:	1e03      	subs	r3, r0, #0
 800b780:	d002      	beq.n	800b788 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2220      	movs	r2, #32
 800b786:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b790:	2300      	movs	r3, #0
 800b792:	613b      	str	r3, [r7, #16]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	613b      	str	r3, [r7, #16]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	613b      	str	r3, [r7, #16]
 800b7a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b7ae:	231f      	movs	r3, #31
 800b7b0:	18fb      	adds	r3, r7, r3
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	e003      	b.n	800b7c0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	225d      	movs	r2, #93	@ 0x5d
 800b7bc:	2101      	movs	r1, #1
 800b7be:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	225c      	movs	r2, #92	@ 0x5c
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b7c8:	231f      	movs	r3, #31
 800b7ca:	18fb      	adds	r3, r7, r3
 800b7cc:	781b      	ldrb	r3, [r3, #0]
}
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	b008      	add	sp, #32
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b089      	sub	sp, #36	@ 0x24
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	1dbb      	adds	r3, r7, #6
 800b7e6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b7e8:	2117      	movs	r1, #23
 800b7ea:	187b      	adds	r3, r7, r1
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	225d      	movs	r2, #93	@ 0x5d
 800b7f4:	5c9b      	ldrb	r3, [r3, r2]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d003      	beq.n	800b804 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800b7fc:	187b      	adds	r3, r7, r1
 800b7fe:	2202      	movs	r2, #2
 800b800:	701a      	strb	r2, [r3, #0]
    goto error;
 800b802:	e12b      	b.n	800ba5c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	2382      	movs	r3, #130	@ 0x82
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d113      	bne.n	800b838 <HAL_SPI_Receive+0x60>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10f      	bne.n	800b838 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	225d      	movs	r2, #93	@ 0x5d
 800b81c:	2104      	movs	r1, #4
 800b81e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b820:	1dbb      	adds	r3, r7, #6
 800b822:	881c      	ldrh	r4, [r3, #0]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	0023      	movs	r3, r4
 800b830:	f000 f924 	bl	800ba7c <HAL_SPI_TransmitReceive>
 800b834:	0003      	movs	r3, r0
 800b836:	e118      	b.n	800ba6a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	225c      	movs	r2, #92	@ 0x5c
 800b83c:	5c9b      	ldrb	r3, [r3, r2]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d101      	bne.n	800b846 <HAL_SPI_Receive+0x6e>
 800b842:	2302      	movs	r3, #2
 800b844:	e111      	b.n	800ba6a <HAL_SPI_Receive+0x292>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	225c      	movs	r2, #92	@ 0x5c
 800b84a:	2101      	movs	r1, #1
 800b84c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b84e:	f7fc fd3d 	bl	80082cc <HAL_GetTick>
 800b852:	0003      	movs	r3, r0
 800b854:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_SPI_Receive+0x8c>
 800b85c:	1dbb      	adds	r3, r7, #6
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d104      	bne.n	800b86e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800b864:	2317      	movs	r3, #23
 800b866:	18fb      	adds	r3, r7, r3
 800b868:	2201      	movs	r2, #1
 800b86a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b86c:	e0f6      	b.n	800ba5c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	225d      	movs	r2, #93	@ 0x5d
 800b872:	2104      	movs	r1, #4
 800b874:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	1dba      	adds	r2, r7, #6
 800b886:	2144      	movs	r1, #68	@ 0x44
 800b888:	8812      	ldrh	r2, [r2, #0]
 800b88a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	1dba      	adds	r2, r7, #6
 800b890:	2146      	movs	r1, #70	@ 0x46
 800b892:	8812      	ldrh	r2, [r2, #0]
 800b894:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68da      	ldr	r2, [r3, #12]
 800b8b8:	23e0      	movs	r3, #224	@ 0xe0
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d908      	bls.n	800b8d2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	496a      	ldr	r1, [pc, #424]	@ (800ba74 <HAL_SPI_Receive+0x29c>)
 800b8cc:	400a      	ands	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
 800b8d0:	e008      	b.n	800b8e4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2180      	movs	r1, #128	@ 0x80
 800b8de:	0149      	lsls	r1, r1, #5
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689a      	ldr	r2, [r3, #8]
 800b8e8:	2380      	movs	r3, #128	@ 0x80
 800b8ea:	021b      	lsls	r3, r3, #8
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d10f      	bne.n	800b910 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2140      	movs	r1, #64	@ 0x40
 800b8fc:	438a      	bics	r2, r1
 800b8fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	495b      	ldr	r1, [pc, #364]	@ (800ba78 <HAL_SPI_Receive+0x2a0>)
 800b90c:	400a      	ands	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2240      	movs	r2, #64	@ 0x40
 800b918:	4013      	ands	r3, r2
 800b91a:	2b40      	cmp	r3, #64	@ 0x40
 800b91c:	d007      	beq.n	800b92e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2140      	movs	r1, #64	@ 0x40
 800b92a:	430a      	orrs	r2, r1
 800b92c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	23e0      	movs	r3, #224	@ 0xe0
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	429a      	cmp	r2, r3
 800b938:	d900      	bls.n	800b93c <HAL_SPI_Receive+0x164>
 800b93a:	e071      	b.n	800ba20 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b93c:	e035      	b.n	800b9aa <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	2201      	movs	r2, #1
 800b946:	4013      	ands	r3, r2
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d117      	bne.n	800b97c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	330c      	adds	r3, #12
 800b952:	001a      	movs	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b958:	7812      	ldrb	r2, [r2, #0]
 800b95a:	b2d2      	uxtb	r2, r2
 800b95c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2246      	movs	r2, #70	@ 0x46
 800b96c:	5a9b      	ldrh	r3, [r3, r2]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	b299      	uxth	r1, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2246      	movs	r2, #70	@ 0x46
 800b978:	5299      	strh	r1, [r3, r2]
 800b97a:	e016      	b.n	800b9aa <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b97c:	f7fc fca6 	bl	80082cc <HAL_GetTick>
 800b980:	0002      	movs	r2, r0
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d802      	bhi.n	800b992 <HAL_SPI_Receive+0x1ba>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	3301      	adds	r3, #1
 800b990:	d102      	bne.n	800b998 <HAL_SPI_Receive+0x1c0>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d108      	bne.n	800b9aa <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800b998:	2317      	movs	r3, #23
 800b99a:	18fb      	adds	r3, r7, r3
 800b99c:	2203      	movs	r2, #3
 800b99e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	225d      	movs	r2, #93	@ 0x5d
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	5499      	strb	r1, [r3, r2]
          goto error;
 800b9a8:	e058      	b.n	800ba5c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2246      	movs	r2, #70	@ 0x46
 800b9ae:	5a9b      	ldrh	r3, [r3, r2]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1c3      	bne.n	800b93e <HAL_SPI_Receive+0x166>
 800b9b6:	e039      	b.n	800ba2c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d115      	bne.n	800b9f2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d0:	b292      	uxth	r2, r2
 800b9d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d8:	1c9a      	adds	r2, r3, #2
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2246      	movs	r2, #70	@ 0x46
 800b9e2:	5a9b      	ldrh	r3, [r3, r2]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b299      	uxth	r1, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2246      	movs	r2, #70	@ 0x46
 800b9ee:	5299      	strh	r1, [r3, r2]
 800b9f0:	e016      	b.n	800ba20 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9f2:	f7fc fc6b 	bl	80082cc <HAL_GetTick>
 800b9f6:	0002      	movs	r2, r0
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d802      	bhi.n	800ba08 <HAL_SPI_Receive+0x230>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	3301      	adds	r3, #1
 800ba06:	d102      	bne.n	800ba0e <HAL_SPI_Receive+0x236>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d108      	bne.n	800ba20 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800ba0e:	2317      	movs	r3, #23
 800ba10:	18fb      	adds	r3, r7, r3
 800ba12:	2203      	movs	r2, #3
 800ba14:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	225d      	movs	r2, #93	@ 0x5d
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	5499      	strb	r1, [r3, r2]
          goto error;
 800ba1e:	e01d      	b.n	800ba5c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2246      	movs	r2, #70	@ 0x46
 800ba24:	5a9b      	ldrh	r3, [r3, r2]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1c5      	bne.n	800b9b8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	0018      	movs	r0, r3
 800ba34:	f000 fb34 	bl	800c0a0 <SPI_EndRxTransaction>
 800ba38:	1e03      	subs	r3, r0, #0
 800ba3a:	d002      	beq.n	800ba42 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d004      	beq.n	800ba54 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800ba4a:	2317      	movs	r3, #23
 800ba4c:	18fb      	adds	r3, r7, r3
 800ba4e:	2201      	movs	r2, #1
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	e003      	b.n	800ba5c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	225d      	movs	r2, #93	@ 0x5d
 800ba58:	2101      	movs	r1, #1
 800ba5a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	225c      	movs	r2, #92	@ 0x5c
 800ba60:	2100      	movs	r1, #0
 800ba62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ba64:	2317      	movs	r3, #23
 800ba66:	18fb      	adds	r3, r7, r3
 800ba68:	781b      	ldrb	r3, [r3, #0]
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b007      	add	sp, #28
 800ba70:	bd90      	pop	{r4, r7, pc}
 800ba72:	46c0      	nop			@ (mov r8, r8)
 800ba74:	ffffefff 	.word	0xffffefff
 800ba78:	ffffbfff 	.word	0xffffbfff

0800ba7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08a      	sub	sp, #40	@ 0x28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	001a      	movs	r2, r3
 800ba8a:	1cbb      	adds	r3, r7, #2
 800ba8c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ba92:	2323      	movs	r3, #35	@ 0x23
 800ba94:	18fb      	adds	r3, r7, r3
 800ba96:	2200      	movs	r2, #0
 800ba98:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	225c      	movs	r2, #92	@ 0x5c
 800ba9e:	5c9b      	ldrb	r3, [r3, r2]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d101      	bne.n	800baa8 <HAL_SPI_TransmitReceive+0x2c>
 800baa4:	2302      	movs	r3, #2
 800baa6:	e1c4      	b.n	800be32 <HAL_SPI_TransmitReceive+0x3b6>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	225c      	movs	r2, #92	@ 0x5c
 800baac:	2101      	movs	r1, #1
 800baae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bab0:	f7fc fc0c 	bl	80082cc <HAL_GetTick>
 800bab4:	0003      	movs	r3, r0
 800bab6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bab8:	201b      	movs	r0, #27
 800baba:	183b      	adds	r3, r7, r0
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	215d      	movs	r1, #93	@ 0x5d
 800bac0:	5c52      	ldrb	r2, [r2, r1]
 800bac2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800baca:	2312      	movs	r3, #18
 800bacc:	18fb      	adds	r3, r7, r3
 800bace:	1cba      	adds	r2, r7, #2
 800bad0:	8812      	ldrh	r2, [r2, #0]
 800bad2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bad4:	183b      	adds	r3, r7, r0
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d011      	beq.n	800bb00 <HAL_SPI_TransmitReceive+0x84>
 800badc:	697a      	ldr	r2, [r7, #20]
 800bade:	2382      	movs	r3, #130	@ 0x82
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d107      	bne.n	800baf6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d103      	bne.n	800baf6 <HAL_SPI_TransmitReceive+0x7a>
 800baee:	183b      	adds	r3, r7, r0
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d004      	beq.n	800bb00 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800baf6:	2323      	movs	r3, #35	@ 0x23
 800baf8:	18fb      	adds	r3, r7, r3
 800bafa:	2202      	movs	r2, #2
 800bafc:	701a      	strb	r2, [r3, #0]
    goto error;
 800bafe:	e191      	b.n	800be24 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d006      	beq.n	800bb14 <HAL_SPI_TransmitReceive+0x98>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <HAL_SPI_TransmitReceive+0x98>
 800bb0c:	1cbb      	adds	r3, r7, #2
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800bb14:	2323      	movs	r3, #35	@ 0x23
 800bb16:	18fb      	adds	r3, r7, r3
 800bb18:	2201      	movs	r2, #1
 800bb1a:	701a      	strb	r2, [r3, #0]
    goto error;
 800bb1c:	e182      	b.n	800be24 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	225d      	movs	r2, #93	@ 0x5d
 800bb22:	5c9b      	ldrb	r3, [r3, r2]
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d003      	beq.n	800bb32 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	225d      	movs	r2, #93	@ 0x5d
 800bb2e:	2105      	movs	r1, #5
 800bb30:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	1cba      	adds	r2, r7, #2
 800bb42:	2146      	movs	r1, #70	@ 0x46
 800bb44:	8812      	ldrh	r2, [r2, #0]
 800bb46:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	1cba      	adds	r2, r7, #2
 800bb4c:	2144      	movs	r1, #68	@ 0x44
 800bb4e:	8812      	ldrh	r2, [r2, #0]
 800bb50:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	1cba      	adds	r2, r7, #2
 800bb5c:	8812      	ldrh	r2, [r2, #0]
 800bb5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	1cba      	adds	r2, r7, #2
 800bb64:	8812      	ldrh	r2, [r2, #0]
 800bb66:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	23e0      	movs	r3, #224	@ 0xe0
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d908      	bls.n	800bb92 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	49ac      	ldr	r1, [pc, #688]	@ (800be3c <HAL_SPI_TransmitReceive+0x3c0>)
 800bb8c:	400a      	ands	r2, r1
 800bb8e:	605a      	str	r2, [r3, #4]
 800bb90:	e008      	b.n	800bba4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2180      	movs	r1, #128	@ 0x80
 800bb9e:	0149      	lsls	r1, r1, #5
 800bba0:	430a      	orrs	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2240      	movs	r2, #64	@ 0x40
 800bbac:	4013      	ands	r3, r2
 800bbae:	2b40      	cmp	r3, #64	@ 0x40
 800bbb0:	d007      	beq.n	800bbc2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2140      	movs	r1, #64	@ 0x40
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	23e0      	movs	r3, #224	@ 0xe0
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d800      	bhi.n	800bbd0 <HAL_SPI_TransmitReceive+0x154>
 800bbce:	e083      	b.n	800bcd8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d005      	beq.n	800bbe4 <HAL_SPI_TransmitReceive+0x168>
 800bbd8:	2312      	movs	r3, #18
 800bbda:	18fb      	adds	r3, r7, r3
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d000      	beq.n	800bbe4 <HAL_SPI_TransmitReceive+0x168>
 800bbe2:	e06d      	b.n	800bcc0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe8:	881a      	ldrh	r2, [r3, #0]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf4:	1c9a      	adds	r2, r3, #2
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	3b01      	subs	r3, #1
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc08:	e05a      	b.n	800bcc0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	2202      	movs	r2, #2
 800bc12:	4013      	ands	r3, r2
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d11b      	bne.n	800bc50 <HAL_SPI_TransmitReceive+0x1d4>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d016      	beq.n	800bc50 <HAL_SPI_TransmitReceive+0x1d4>
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d113      	bne.n	800bc50 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc2c:	881a      	ldrh	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc38:	1c9a      	adds	r2, r3, #2
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	3b01      	subs	r3, #1
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	2201      	movs	r2, #1
 800bc58:	4013      	ands	r3, r2
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d11c      	bne.n	800bc98 <HAL_SPI_TransmitReceive+0x21c>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2246      	movs	r2, #70	@ 0x46
 800bc62:	5a9b      	ldrh	r3, [r3, r2]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d016      	beq.n	800bc98 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc74:	b292      	uxth	r2, r2
 800bc76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc7c:	1c9a      	adds	r2, r3, #2
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2246      	movs	r2, #70	@ 0x46
 800bc86:	5a9b      	ldrh	r3, [r3, r2]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b299      	uxth	r1, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2246      	movs	r2, #70	@ 0x46
 800bc92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc94:	2301      	movs	r3, #1
 800bc96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bc98:	f7fc fb18 	bl	80082cc <HAL_GetTick>
 800bc9c:	0002      	movs	r2, r0
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d80b      	bhi.n	800bcc0 <HAL_SPI_TransmitReceive+0x244>
 800bca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcaa:	3301      	adds	r3, #1
 800bcac:	d008      	beq.n	800bcc0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800bcae:	2323      	movs	r3, #35	@ 0x23
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	2203      	movs	r2, #3
 800bcb4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	225d      	movs	r2, #93	@ 0x5d
 800bcba:	2101      	movs	r1, #1
 800bcbc:	5499      	strb	r1, [r3, r2]
        goto error;
 800bcbe:	e0b1      	b.n	800be24 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d19f      	bne.n	800bc0a <HAL_SPI_TransmitReceive+0x18e>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2246      	movs	r2, #70	@ 0x46
 800bcce:	5a9b      	ldrh	r3, [r3, r2]
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d199      	bne.n	800bc0a <HAL_SPI_TransmitReceive+0x18e>
 800bcd6:	e089      	b.n	800bdec <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <HAL_SPI_TransmitReceive+0x270>
 800bce0:	2312      	movs	r3, #18
 800bce2:	18fb      	adds	r3, r7, r3
 800bce4:	881b      	ldrh	r3, [r3, #0]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d000      	beq.n	800bcec <HAL_SPI_TransmitReceive+0x270>
 800bcea:	e074      	b.n	800bdd6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	330c      	adds	r3, #12
 800bcf6:	7812      	ldrb	r2, [r2, #0]
 800bcf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd12:	e060      	b.n	800bdd6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d11c      	bne.n	800bd5c <HAL_SPI_TransmitReceive+0x2e0>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d017      	beq.n	800bd5c <HAL_SPI_TransmitReceive+0x2e0>
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d114      	bne.n	800bd5c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	330c      	adds	r3, #12
 800bd3c:	7812      	ldrb	r2, [r2, #0]
 800bd3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	2201      	movs	r2, #1
 800bd64:	4013      	ands	r3, r2
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d11e      	bne.n	800bda8 <HAL_SPI_TransmitReceive+0x32c>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2246      	movs	r2, #70	@ 0x46
 800bd6e:	5a9b      	ldrh	r3, [r3, r2]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d018      	beq.n	800bda8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	330c      	adds	r3, #12
 800bd7c:	001a      	movs	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd82:	7812      	ldrb	r2, [r2, #0]
 800bd84:	b2d2      	uxtb	r2, r2
 800bd86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2246      	movs	r2, #70	@ 0x46
 800bd96:	5a9b      	ldrh	r3, [r3, r2]
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	b299      	uxth	r1, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2246      	movs	r2, #70	@ 0x46
 800bda2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bda4:	2301      	movs	r3, #1
 800bda6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bda8:	f7fc fa90 	bl	80082cc <HAL_GetTick>
 800bdac:	0002      	movs	r2, r0
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d802      	bhi.n	800bdbe <HAL_SPI_TransmitReceive+0x342>
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	3301      	adds	r3, #1
 800bdbc:	d102      	bne.n	800bdc4 <HAL_SPI_TransmitReceive+0x348>
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d108      	bne.n	800bdd6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800bdc4:	2323      	movs	r3, #35	@ 0x23
 800bdc6:	18fb      	adds	r3, r7, r3
 800bdc8:	2203      	movs	r2, #3
 800bdca:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	225d      	movs	r2, #93	@ 0x5d
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	5499      	strb	r1, [r3, r2]
        goto error;
 800bdd4:	e026      	b.n	800be24 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d199      	bne.n	800bd14 <HAL_SPI_TransmitReceive+0x298>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2246      	movs	r2, #70	@ 0x46
 800bde4:	5a9b      	ldrh	r3, [r3, r2]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d193      	bne.n	800bd14 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdec:	69fa      	ldr	r2, [r7, #28]
 800bdee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f000 f9b2 	bl	800c15c <SPI_EndRxTxTransaction>
 800bdf8:	1e03      	subs	r3, r0, #0
 800bdfa:	d006      	beq.n	800be0a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800bdfc:	2323      	movs	r3, #35	@ 0x23
 800bdfe:	18fb      	adds	r3, r7, r3
 800be00:	2201      	movs	r2, #1
 800be02:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2220      	movs	r2, #32
 800be08:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d004      	beq.n	800be1c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800be12:	2323      	movs	r3, #35	@ 0x23
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	2201      	movs	r2, #1
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	e003      	b.n	800be24 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	225d      	movs	r2, #93	@ 0x5d
 800be20:	2101      	movs	r1, #1
 800be22:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	225c      	movs	r2, #92	@ 0x5c
 800be28:	2100      	movs	r1, #0
 800be2a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800be2c:	2323      	movs	r3, #35	@ 0x23
 800be2e:	18fb      	adds	r3, r7, r3
 800be30:	781b      	ldrb	r3, [r3, #0]
}
 800be32:	0018      	movs	r0, r3
 800be34:	46bd      	mov	sp, r7
 800be36:	b00a      	add	sp, #40	@ 0x28
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	46c0      	nop			@ (mov r8, r8)
 800be3c:	ffffefff 	.word	0xffffefff

0800be40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b088      	sub	sp, #32
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	603b      	str	r3, [r7, #0]
 800be4c:	1dfb      	adds	r3, r7, #7
 800be4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be50:	f7fc fa3c 	bl	80082cc <HAL_GetTick>
 800be54:	0002      	movs	r2, r0
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	1a9b      	subs	r3, r3, r2
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	18d3      	adds	r3, r2, r3
 800be5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be60:	f7fc fa34 	bl	80082cc <HAL_GetTick>
 800be64:	0003      	movs	r3, r0
 800be66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be68:	4b3a      	ldr	r3, [pc, #232]	@ (800bf54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	015b      	lsls	r3, r3, #5
 800be6e:	0d1b      	lsrs	r3, r3, #20
 800be70:	69fa      	ldr	r2, [r7, #28]
 800be72:	4353      	muls	r3, r2
 800be74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be76:	e058      	b.n	800bf2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	3301      	adds	r3, #1
 800be7c:	d055      	beq.n	800bf2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be7e:	f7fc fa25 	bl	80082cc <HAL_GetTick>
 800be82:	0002      	movs	r2, r0
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	69fa      	ldr	r2, [r7, #28]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d902      	bls.n	800be94 <SPI_WaitFlagStateUntilTimeout+0x54>
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d142      	bne.n	800bf1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	21e0      	movs	r1, #224	@ 0xe0
 800bea0:	438a      	bics	r2, r1
 800bea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	2382      	movs	r3, #130	@ 0x82
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	429a      	cmp	r2, r3
 800beae:	d113      	bne.n	800bed8 <SPI_WaitFlagStateUntilTimeout+0x98>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	689a      	ldr	r2, [r3, #8]
 800beb4:	2380      	movs	r3, #128	@ 0x80
 800beb6:	021b      	lsls	r3, r3, #8
 800beb8:	429a      	cmp	r2, r3
 800beba:	d005      	beq.n	800bec8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	2380      	movs	r3, #128	@ 0x80
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d107      	bne.n	800bed8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2140      	movs	r1, #64	@ 0x40
 800bed4:	438a      	bics	r2, r1
 800bed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bedc:	2380      	movs	r3, #128	@ 0x80
 800bede:	019b      	lsls	r3, r3, #6
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d110      	bne.n	800bf06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	491a      	ldr	r1, [pc, #104]	@ (800bf58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bef0:	400a      	ands	r2, r1
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2180      	movs	r1, #128	@ 0x80
 800bf00:	0189      	lsls	r1, r1, #6
 800bf02:	430a      	orrs	r2, r1
 800bf04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	225d      	movs	r2, #93	@ 0x5d
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	225c      	movs	r2, #92	@ 0x5c
 800bf12:	2100      	movs	r1, #0
 800bf14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e017      	b.n	800bf4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	4013      	ands	r3, r2
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	425a      	negs	r2, r3
 800bf3a:	4153      	adcs	r3, r2
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	001a      	movs	r2, r3
 800bf40:	1dfb      	adds	r3, r7, #7
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d197      	bne.n	800be78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	0018      	movs	r0, r3
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	b008      	add	sp, #32
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	46c0      	nop			@ (mov r8, r8)
 800bf54:	20000068 	.word	0x20000068
 800bf58:	ffffdfff 	.word	0xffffdfff

0800bf5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	@ 0x28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bf6a:	2317      	movs	r3, #23
 800bf6c:	18fb      	adds	r3, r7, r3
 800bf6e:	2200      	movs	r2, #0
 800bf70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bf72:	f7fc f9ab 	bl	80082cc <HAL_GetTick>
 800bf76:	0002      	movs	r2, r0
 800bf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7a:	1a9b      	subs	r3, r3, r2
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	18d3      	adds	r3, r2, r3
 800bf80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800bf82:	f7fc f9a3 	bl	80082cc <HAL_GetTick>
 800bf86:	0003      	movs	r3, r0
 800bf88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	330c      	adds	r3, #12
 800bf90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bf92:	4b41      	ldr	r3, [pc, #260]	@ (800c098 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	0013      	movs	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	189b      	adds	r3, r3, r2
 800bf9c:	00da      	lsls	r2, r3, #3
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	0d1b      	lsrs	r3, r3, #20
 800bfa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa4:	4353      	muls	r3, r2
 800bfa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bfa8:	e068      	b.n	800c07c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	23c0      	movs	r3, #192	@ 0xc0
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d10a      	bne.n	800bfca <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d107      	bne.n	800bfca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	2117      	movs	r1, #23
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bfc6:	187b      	adds	r3, r7, r1
 800bfc8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	d055      	beq.n	800c07c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bfd0:	f7fc f97c 	bl	80082cc <HAL_GetTick>
 800bfd4:	0002      	movs	r2, r0
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d902      	bls.n	800bfe6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d142      	bne.n	800c06c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	21e0      	movs	r1, #224	@ 0xe0
 800bff2:	438a      	bics	r2, r1
 800bff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	2382      	movs	r3, #130	@ 0x82
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	429a      	cmp	r2, r3
 800c000:	d113      	bne.n	800c02a <SPI_WaitFifoStateUntilTimeout+0xce>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	689a      	ldr	r2, [r3, #8]
 800c006:	2380      	movs	r3, #128	@ 0x80
 800c008:	021b      	lsls	r3, r3, #8
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d005      	beq.n	800c01a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689a      	ldr	r2, [r3, #8]
 800c012:	2380      	movs	r3, #128	@ 0x80
 800c014:	00db      	lsls	r3, r3, #3
 800c016:	429a      	cmp	r2, r3
 800c018:	d107      	bne.n	800c02a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2140      	movs	r1, #64	@ 0x40
 800c026:	438a      	bics	r2, r1
 800c028:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c02e:	2380      	movs	r3, #128	@ 0x80
 800c030:	019b      	lsls	r3, r3, #6
 800c032:	429a      	cmp	r2, r3
 800c034:	d110      	bne.n	800c058 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4916      	ldr	r1, [pc, #88]	@ (800c09c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800c042:	400a      	ands	r2, r1
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2180      	movs	r1, #128	@ 0x80
 800c052:	0189      	lsls	r1, r1, #6
 800c054:	430a      	orrs	r2, r1
 800c056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	225d      	movs	r2, #93	@ 0x5d
 800c05c:	2101      	movs	r1, #1
 800c05e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	225c      	movs	r2, #92	@ 0x5c
 800c064:	2100      	movs	r1, #0
 800c066:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e010      	b.n	800c08e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	3b01      	subs	r3, #1
 800c07a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	4013      	ands	r3, r2
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d18e      	bne.n	800bfaa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	0018      	movs	r0, r3
 800c090:	46bd      	mov	sp, r7
 800c092:	b00a      	add	sp, #40	@ 0x28
 800c094:	bd80      	pop	{r7, pc}
 800c096:	46c0      	nop			@ (mov r8, r8)
 800c098:	20000068 	.word	0x20000068
 800c09c:	ffffdfff 	.word	0xffffdfff

0800c0a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	2382      	movs	r3, #130	@ 0x82
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d113      	bne.n	800c0e0 <SPI_EndRxTransaction+0x40>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	689a      	ldr	r2, [r3, #8]
 800c0bc:	2380      	movs	r3, #128	@ 0x80
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d005      	beq.n	800c0d0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	689a      	ldr	r2, [r3, #8]
 800c0c8:	2380      	movs	r3, #128	@ 0x80
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d107      	bne.n	800c0e0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2140      	movs	r1, #64	@ 0x40
 800c0dc:	438a      	bics	r2, r1
 800c0de:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	0013      	movs	r3, r2
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2180      	movs	r1, #128	@ 0x80
 800c0ee:	f7ff fea7 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800c0f2:	1e03      	subs	r3, r0, #0
 800c0f4:	d007      	beq.n	800c106 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0fa:	2220      	movs	r2, #32
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e026      	b.n	800c154 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	2382      	movs	r3, #130	@ 0x82
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	429a      	cmp	r2, r3
 800c110:	d11f      	bne.n	800c152 <SPI_EndRxTransaction+0xb2>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	2380      	movs	r3, #128	@ 0x80
 800c118:	021b      	lsls	r3, r3, #8
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d005      	beq.n	800c12a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	689a      	ldr	r2, [r3, #8]
 800c122:	2380      	movs	r3, #128	@ 0x80
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	429a      	cmp	r2, r3
 800c128:	d113      	bne.n	800c152 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	23c0      	movs	r3, #192	@ 0xc0
 800c12e:	00d9      	lsls	r1, r3, #3
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	0013      	movs	r3, r2
 800c138:	2200      	movs	r2, #0
 800c13a:	f7ff ff0f 	bl	800bf5c <SPI_WaitFifoStateUntilTimeout>
 800c13e:	1e03      	subs	r3, r0, #0
 800c140:	d007      	beq.n	800c152 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c146:	2220      	movs	r2, #32
 800c148:	431a      	orrs	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800c14e:	2303      	movs	r3, #3
 800c150:	e000      	b.n	800c154 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	0018      	movs	r0, r3
 800c156:	46bd      	mov	sp, r7
 800c158:	b004      	add	sp, #16
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af02      	add	r7, sp, #8
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	23c0      	movs	r3, #192	@ 0xc0
 800c16c:	0159      	lsls	r1, r3, #5
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	0013      	movs	r3, r2
 800c176:	2200      	movs	r2, #0
 800c178:	f7ff fef0 	bl	800bf5c <SPI_WaitFifoStateUntilTimeout>
 800c17c:	1e03      	subs	r3, r0, #0
 800c17e:	d007      	beq.n	800c190 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c184:	2220      	movs	r2, #32
 800c186:	431a      	orrs	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e027      	b.n	800c1e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	0013      	movs	r3, r2
 800c19a:	2200      	movs	r2, #0
 800c19c:	2180      	movs	r1, #128	@ 0x80
 800c19e:	f7ff fe4f 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800c1a2:	1e03      	subs	r3, r0, #0
 800c1a4:	d007      	beq.n	800c1b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1aa:	2220      	movs	r2, #32
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e014      	b.n	800c1e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	23c0      	movs	r3, #192	@ 0xc0
 800c1ba:	00d9      	lsls	r1, r3, #3
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	0013      	movs	r3, r2
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f7ff fec9 	bl	800bf5c <SPI_WaitFifoStateUntilTimeout>
 800c1ca:	1e03      	subs	r3, r0, #0
 800c1cc:	d007      	beq.n	800c1de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1d2:	2220      	movs	r2, #32
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	e000      	b.n	800c1e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	b004      	add	sp, #16
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e04a      	b.n	800c290 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	223d      	movs	r2, #61	@ 0x3d
 800c1fe:	5c9b      	ldrb	r3, [r3, r2]
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	d107      	bne.n	800c216 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	223c      	movs	r2, #60	@ 0x3c
 800c20a:	2100      	movs	r1, #0
 800c20c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	0018      	movs	r0, r3
 800c212:	f7fb fd51 	bl	8007cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	223d      	movs	r2, #61	@ 0x3d
 800c21a:	2102      	movs	r1, #2
 800c21c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3304      	adds	r3, #4
 800c226:	0019      	movs	r1, r3
 800c228:	0010      	movs	r0, r2
 800c22a:	f000 fa8f 	bl	800c74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2248      	movs	r2, #72	@ 0x48
 800c232:	2101      	movs	r1, #1
 800c234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	223e      	movs	r2, #62	@ 0x3e
 800c23a:	2101      	movs	r1, #1
 800c23c:	5499      	strb	r1, [r3, r2]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	223f      	movs	r2, #63	@ 0x3f
 800c242:	2101      	movs	r1, #1
 800c244:	5499      	strb	r1, [r3, r2]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2240      	movs	r2, #64	@ 0x40
 800c24a:	2101      	movs	r1, #1
 800c24c:	5499      	strb	r1, [r3, r2]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2241      	movs	r2, #65	@ 0x41
 800c252:	2101      	movs	r1, #1
 800c254:	5499      	strb	r1, [r3, r2]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2242      	movs	r2, #66	@ 0x42
 800c25a:	2101      	movs	r1, #1
 800c25c:	5499      	strb	r1, [r3, r2]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2243      	movs	r2, #67	@ 0x43
 800c262:	2101      	movs	r1, #1
 800c264:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2244      	movs	r2, #68	@ 0x44
 800c26a:	2101      	movs	r1, #1
 800c26c:	5499      	strb	r1, [r3, r2]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2245      	movs	r2, #69	@ 0x45
 800c272:	2101      	movs	r1, #1
 800c274:	5499      	strb	r1, [r3, r2]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2246      	movs	r2, #70	@ 0x46
 800c27a:	2101      	movs	r1, #1
 800c27c:	5499      	strb	r1, [r3, r2]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2247      	movs	r2, #71	@ 0x47
 800c282:	2101      	movs	r1, #1
 800c284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	223d      	movs	r2, #61	@ 0x3d
 800c28a:	2101      	movs	r1, #1
 800c28c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	0018      	movs	r0, r3
 800c292:	46bd      	mov	sp, r7
 800c294:	b002      	add	sp, #8
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	223d      	movs	r2, #61	@ 0x3d
 800c2a4:	5c9b      	ldrb	r3, [r3, r2]
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d001      	beq.n	800c2b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e042      	b.n	800c336 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	223d      	movs	r2, #61	@ 0x3d
 800c2b4:	2102      	movs	r1, #2
 800c2b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	430a      	orrs	r2, r1
 800c2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a1c      	ldr	r2, [pc, #112]	@ (800c340 <HAL_TIM_Base_Start_IT+0xa8>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00f      	beq.n	800c2f2 <HAL_TIM_Base_Start_IT+0x5a>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	2380      	movs	r3, #128	@ 0x80
 800c2d8:	05db      	lsls	r3, r3, #23
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d009      	beq.n	800c2f2 <HAL_TIM_Base_Start_IT+0x5a>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a18      	ldr	r2, [pc, #96]	@ (800c344 <HAL_TIM_Base_Start_IT+0xac>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d004      	beq.n	800c2f2 <HAL_TIM_Base_Start_IT+0x5a>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a16      	ldr	r2, [pc, #88]	@ (800c348 <HAL_TIM_Base_Start_IT+0xb0>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d116      	bne.n	800c320 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	4a14      	ldr	r2, [pc, #80]	@ (800c34c <HAL_TIM_Base_Start_IT+0xb4>)
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b06      	cmp	r3, #6
 800c302:	d016      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x9a>
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	2380      	movs	r3, #128	@ 0x80
 800c308:	025b      	lsls	r3, r3, #9
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d011      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2101      	movs	r1, #1
 800c31a:	430a      	orrs	r2, r1
 800c31c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c31e:	e008      	b.n	800c332 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2101      	movs	r1, #1
 800c32c:	430a      	orrs	r2, r1
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	e000      	b.n	800c334 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c332:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	0018      	movs	r0, r3
 800c338:	46bd      	mov	sp, r7
 800c33a:	b004      	add	sp, #16
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	46c0      	nop			@ (mov r8, r8)
 800c340:	40012c00 	.word	0x40012c00
 800c344:	40000400 	.word	0x40000400
 800c348:	40014000 	.word	0x40014000
 800c34c:	00010007 	.word	0x00010007

0800c350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2202      	movs	r2, #2
 800c36c:	4013      	ands	r3, r2
 800c36e:	d021      	beq.n	800c3b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2202      	movs	r2, #2
 800c374:	4013      	ands	r3, r2
 800c376:	d01d      	beq.n	800c3b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2203      	movs	r2, #3
 800c37e:	4252      	negs	r2, r2
 800c380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	2203      	movs	r2, #3
 800c390:	4013      	ands	r3, r2
 800c392:	d004      	beq.n	800c39e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	0018      	movs	r0, r3
 800c398:	f000 f9c0 	bl	800c71c <HAL_TIM_IC_CaptureCallback>
 800c39c:	e007      	b.n	800c3ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	f000 f9b3 	bl	800c70c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	f000 f9bf 	bl	800c72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	d022      	beq.n	800c402 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2204      	movs	r2, #4
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	d01e      	beq.n	800c402 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2205      	movs	r2, #5
 800c3ca:	4252      	negs	r2, r2
 800c3cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	699a      	ldr	r2, [r3, #24]
 800c3da:	23c0      	movs	r3, #192	@ 0xc0
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4013      	ands	r3, r2
 800c3e0:	d004      	beq.n	800c3ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	f000 f999 	bl	800c71c <HAL_TIM_IC_CaptureCallback>
 800c3ea:	e007      	b.n	800c3fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	0018      	movs	r0, r3
 800c3f0:	f000 f98c 	bl	800c70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f000 f998 	bl	800c72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2208      	movs	r2, #8
 800c406:	4013      	ands	r3, r2
 800c408:	d021      	beq.n	800c44e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2208      	movs	r2, #8
 800c40e:	4013      	ands	r3, r2
 800c410:	d01d      	beq.n	800c44e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2209      	movs	r2, #9
 800c418:	4252      	negs	r2, r2
 800c41a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2204      	movs	r2, #4
 800c420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	69db      	ldr	r3, [r3, #28]
 800c428:	2203      	movs	r2, #3
 800c42a:	4013      	ands	r3, r2
 800c42c:	d004      	beq.n	800c438 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	0018      	movs	r0, r3
 800c432:	f000 f973 	bl	800c71c <HAL_TIM_IC_CaptureCallback>
 800c436:	e007      	b.n	800c448 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	0018      	movs	r0, r3
 800c43c:	f000 f966 	bl	800c70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	0018      	movs	r0, r3
 800c444:	f000 f972 	bl	800c72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2210      	movs	r2, #16
 800c452:	4013      	ands	r3, r2
 800c454:	d022      	beq.n	800c49c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2210      	movs	r2, #16
 800c45a:	4013      	ands	r3, r2
 800c45c:	d01e      	beq.n	800c49c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2211      	movs	r2, #17
 800c464:	4252      	negs	r2, r2
 800c466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2208      	movs	r2, #8
 800c46c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	69da      	ldr	r2, [r3, #28]
 800c474:	23c0      	movs	r3, #192	@ 0xc0
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4013      	ands	r3, r2
 800c47a:	d004      	beq.n	800c486 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	0018      	movs	r0, r3
 800c480:	f000 f94c 	bl	800c71c <HAL_TIM_IC_CaptureCallback>
 800c484:	e007      	b.n	800c496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	0018      	movs	r0, r3
 800c48a:	f000 f93f 	bl	800c70c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	0018      	movs	r0, r3
 800c492:	f000 f94b 	bl	800c72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	d00c      	beq.n	800c4be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	d008      	beq.n	800c4be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	4252      	negs	r2, r2
 800c4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f7fa ff3d 	bl	8007338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	2280      	movs	r2, #128	@ 0x80
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	d104      	bne.n	800c4d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	2380      	movs	r3, #128	@ 0x80
 800c4ca:	019b      	lsls	r3, r3, #6
 800c4cc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c4ce:	d00b      	beq.n	800c4e8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2280      	movs	r2, #128	@ 0x80
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	d007      	beq.n	800c4e8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a1e      	ldr	r2, [pc, #120]	@ (800c558 <HAL_TIM_IRQHandler+0x208>)
 800c4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	0018      	movs	r0, r3
 800c4e4:	f000 fad2 	bl	800ca8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	2380      	movs	r3, #128	@ 0x80
 800c4ec:	005b      	lsls	r3, r3, #1
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	d00b      	beq.n	800c50a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2280      	movs	r2, #128	@ 0x80
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	d007      	beq.n	800c50a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a17      	ldr	r2, [pc, #92]	@ (800c55c <HAL_TIM_IRQHandler+0x20c>)
 800c500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	0018      	movs	r0, r3
 800c506:	f000 fac9 	bl	800ca9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2240      	movs	r2, #64	@ 0x40
 800c50e:	4013      	ands	r3, r2
 800c510:	d00c      	beq.n	800c52c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2240      	movs	r2, #64	@ 0x40
 800c516:	4013      	ands	r3, r2
 800c518:	d008      	beq.n	800c52c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2241      	movs	r2, #65	@ 0x41
 800c520:	4252      	negs	r2, r2
 800c522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	0018      	movs	r0, r3
 800c528:	f000 f908 	bl	800c73c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2220      	movs	r2, #32
 800c530:	4013      	ands	r3, r2
 800c532:	d00c      	beq.n	800c54e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2220      	movs	r2, #32
 800c538:	4013      	ands	r3, r2
 800c53a:	d008      	beq.n	800c54e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2221      	movs	r2, #33	@ 0x21
 800c542:	4252      	negs	r2, r2
 800c544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	0018      	movs	r0, r3
 800c54a:	f000 fa97 	bl	800ca7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c54e:	46c0      	nop			@ (mov r8, r8)
 800c550:	46bd      	mov	sp, r7
 800c552:	b004      	add	sp, #16
 800c554:	bd80      	pop	{r7, pc}
 800c556:	46c0      	nop			@ (mov r8, r8)
 800c558:	ffffdf7f 	.word	0xffffdf7f
 800c55c:	fffffeff 	.word	0xfffffeff

0800c560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c56a:	230f      	movs	r3, #15
 800c56c:	18fb      	adds	r3, r7, r3
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	223c      	movs	r2, #60	@ 0x3c
 800c576:	5c9b      	ldrb	r3, [r3, r2]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d101      	bne.n	800c580 <HAL_TIM_ConfigClockSource+0x20>
 800c57c:	2302      	movs	r3, #2
 800c57e:	e0bc      	b.n	800c6fa <HAL_TIM_ConfigClockSource+0x19a>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	223c      	movs	r2, #60	@ 0x3c
 800c584:	2101      	movs	r1, #1
 800c586:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	223d      	movs	r2, #61	@ 0x3d
 800c58c:	2102      	movs	r1, #2
 800c58e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	4a5a      	ldr	r2, [pc, #360]	@ (800c704 <HAL_TIM_ConfigClockSource+0x1a4>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	4a59      	ldr	r2, [pc, #356]	@ (800c708 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2280      	movs	r2, #128	@ 0x80
 800c5b6:	0192      	lsls	r2, r2, #6
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d040      	beq.n	800c63e <HAL_TIM_ConfigClockSource+0xde>
 800c5bc:	2280      	movs	r2, #128	@ 0x80
 800c5be:	0192      	lsls	r2, r2, #6
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d900      	bls.n	800c5c6 <HAL_TIM_ConfigClockSource+0x66>
 800c5c4:	e088      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c5c6:	2280      	movs	r2, #128	@ 0x80
 800c5c8:	0152      	lsls	r2, r2, #5
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d100      	bne.n	800c5d0 <HAL_TIM_ConfigClockSource+0x70>
 800c5ce:	e088      	b.n	800c6e2 <HAL_TIM_ConfigClockSource+0x182>
 800c5d0:	2280      	movs	r2, #128	@ 0x80
 800c5d2:	0152      	lsls	r2, r2, #5
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d900      	bls.n	800c5da <HAL_TIM_ConfigClockSource+0x7a>
 800c5d8:	e07e      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c5da:	2b70      	cmp	r3, #112	@ 0x70
 800c5dc:	d018      	beq.n	800c610 <HAL_TIM_ConfigClockSource+0xb0>
 800c5de:	d900      	bls.n	800c5e2 <HAL_TIM_ConfigClockSource+0x82>
 800c5e0:	e07a      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c5e2:	2b60      	cmp	r3, #96	@ 0x60
 800c5e4:	d04f      	beq.n	800c686 <HAL_TIM_ConfigClockSource+0x126>
 800c5e6:	d900      	bls.n	800c5ea <HAL_TIM_ConfigClockSource+0x8a>
 800c5e8:	e076      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c5ea:	2b50      	cmp	r3, #80	@ 0x50
 800c5ec:	d03b      	beq.n	800c666 <HAL_TIM_ConfigClockSource+0x106>
 800c5ee:	d900      	bls.n	800c5f2 <HAL_TIM_ConfigClockSource+0x92>
 800c5f0:	e072      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c5f2:	2b40      	cmp	r3, #64	@ 0x40
 800c5f4:	d057      	beq.n	800c6a6 <HAL_TIM_ConfigClockSource+0x146>
 800c5f6:	d900      	bls.n	800c5fa <HAL_TIM_ConfigClockSource+0x9a>
 800c5f8:	e06e      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c5fa:	2b30      	cmp	r3, #48	@ 0x30
 800c5fc:	d063      	beq.n	800c6c6 <HAL_TIM_ConfigClockSource+0x166>
 800c5fe:	d86b      	bhi.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c600:	2b20      	cmp	r3, #32
 800c602:	d060      	beq.n	800c6c6 <HAL_TIM_ConfigClockSource+0x166>
 800c604:	d868      	bhi.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d05d      	beq.n	800c6c6 <HAL_TIM_ConfigClockSource+0x166>
 800c60a:	2b10      	cmp	r3, #16
 800c60c:	d05b      	beq.n	800c6c6 <HAL_TIM_ConfigClockSource+0x166>
 800c60e:	e063      	b.n	800c6d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c620:	f000 f99e 	bl	800c960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2277      	movs	r2, #119	@ 0x77
 800c630:	4313      	orrs	r3, r2
 800c632:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	609a      	str	r2, [r3, #8]
      break;
 800c63c:	e052      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c64e:	f000 f987 	bl	800c960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2180      	movs	r1, #128	@ 0x80
 800c65e:	01c9      	lsls	r1, r1, #7
 800c660:	430a      	orrs	r2, r1
 800c662:	609a      	str	r2, [r3, #8]
      break;
 800c664:	e03e      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c672:	001a      	movs	r2, r3
 800c674:	f000 f8f8 	bl	800c868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2150      	movs	r1, #80	@ 0x50
 800c67e:	0018      	movs	r0, r3
 800c680:	f000 f952 	bl	800c928 <TIM_ITRx_SetConfig>
      break;
 800c684:	e02e      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c692:	001a      	movs	r2, r3
 800c694:	f000 f916 	bl	800c8c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2160      	movs	r1, #96	@ 0x60
 800c69e:	0018      	movs	r0, r3
 800c6a0:	f000 f942 	bl	800c928 <TIM_ITRx_SetConfig>
      break;
 800c6a4:	e01e      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6b2:	001a      	movs	r2, r3
 800c6b4:	f000 f8d8 	bl	800c868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2140      	movs	r1, #64	@ 0x40
 800c6be:	0018      	movs	r0, r3
 800c6c0:	f000 f932 	bl	800c928 <TIM_ITRx_SetConfig>
      break;
 800c6c4:	e00e      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	0019      	movs	r1, r3
 800c6d0:	0010      	movs	r0, r2
 800c6d2:	f000 f929 	bl	800c928 <TIM_ITRx_SetConfig>
      break;
 800c6d6:	e005      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c6d8:	230f      	movs	r3, #15
 800c6da:	18fb      	adds	r3, r7, r3
 800c6dc:	2201      	movs	r2, #1
 800c6de:	701a      	strb	r2, [r3, #0]
      break;
 800c6e0:	e000      	b.n	800c6e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c6e2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	223d      	movs	r2, #61	@ 0x3d
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	223c      	movs	r2, #60	@ 0x3c
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	5499      	strb	r1, [r3, r2]

  return status;
 800c6f4:	230f      	movs	r3, #15
 800c6f6:	18fb      	adds	r3, r7, r3
 800c6f8:	781b      	ldrb	r3, [r3, #0]
}
 800c6fa:	0018      	movs	r0, r3
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	b004      	add	sp, #16
 800c700:	bd80      	pop	{r7, pc}
 800c702:	46c0      	nop			@ (mov r8, r8)
 800c704:	ffceff88 	.word	0xffceff88
 800c708:	ffff00ff 	.word	0xffff00ff

0800c70c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c714:	46c0      	nop			@ (mov r8, r8)
 800c716:	46bd      	mov	sp, r7
 800c718:	b002      	add	sp, #8
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c724:	46c0      	nop			@ (mov r8, r8)
 800c726:	46bd      	mov	sp, r7
 800c728:	b002      	add	sp, #8
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c734:	46c0      	nop			@ (mov r8, r8)
 800c736:	46bd      	mov	sp, r7
 800c738:	b002      	add	sp, #8
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c744:	46c0      	nop			@ (mov r8, r8)
 800c746:	46bd      	mov	sp, r7
 800c748:	b002      	add	sp, #8
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a3b      	ldr	r2, [pc, #236]	@ (800c84c <TIM_Base_SetConfig+0x100>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d008      	beq.n	800c776 <TIM_Base_SetConfig+0x2a>
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	2380      	movs	r3, #128	@ 0x80
 800c768:	05db      	lsls	r3, r3, #23
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d003      	beq.n	800c776 <TIM_Base_SetConfig+0x2a>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a37      	ldr	r2, [pc, #220]	@ (800c850 <TIM_Base_SetConfig+0x104>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d108      	bne.n	800c788 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2270      	movs	r2, #112	@ 0x70
 800c77a:	4393      	bics	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	4313      	orrs	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a30      	ldr	r2, [pc, #192]	@ (800c84c <TIM_Base_SetConfig+0x100>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d018      	beq.n	800c7c2 <TIM_Base_SetConfig+0x76>
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	2380      	movs	r3, #128	@ 0x80
 800c794:	05db      	lsls	r3, r3, #23
 800c796:	429a      	cmp	r2, r3
 800c798:	d013      	beq.n	800c7c2 <TIM_Base_SetConfig+0x76>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a2c      	ldr	r2, [pc, #176]	@ (800c850 <TIM_Base_SetConfig+0x104>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d00f      	beq.n	800c7c2 <TIM_Base_SetConfig+0x76>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a2b      	ldr	r2, [pc, #172]	@ (800c854 <TIM_Base_SetConfig+0x108>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d00b      	beq.n	800c7c2 <TIM_Base_SetConfig+0x76>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a2a      	ldr	r2, [pc, #168]	@ (800c858 <TIM_Base_SetConfig+0x10c>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d007      	beq.n	800c7c2 <TIM_Base_SetConfig+0x76>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a29      	ldr	r2, [pc, #164]	@ (800c85c <TIM_Base_SetConfig+0x110>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d003      	beq.n	800c7c2 <TIM_Base_SetConfig+0x76>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a28      	ldr	r2, [pc, #160]	@ (800c860 <TIM_Base_SetConfig+0x114>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d108      	bne.n	800c7d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	4a27      	ldr	r2, [pc, #156]	@ (800c864 <TIM_Base_SetConfig+0x118>)
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2280      	movs	r2, #128	@ 0x80
 800c7d8:	4393      	bics	r3, r2
 800c7da:	001a      	movs	r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	689a      	ldr	r2, [r3, #8]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a13      	ldr	r2, [pc, #76]	@ (800c84c <TIM_Base_SetConfig+0x100>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d00b      	beq.n	800c81a <TIM_Base_SetConfig+0xce>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a14      	ldr	r2, [pc, #80]	@ (800c858 <TIM_Base_SetConfig+0x10c>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d007      	beq.n	800c81a <TIM_Base_SetConfig+0xce>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a13      	ldr	r2, [pc, #76]	@ (800c85c <TIM_Base_SetConfig+0x110>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d003      	beq.n	800c81a <TIM_Base_SetConfig+0xce>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a12      	ldr	r2, [pc, #72]	@ (800c860 <TIM_Base_SetConfig+0x114>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d103      	bne.n	800c822 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	691a      	ldr	r2, [r3, #16]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	2201      	movs	r2, #1
 800c82e:	4013      	ands	r3, r2
 800c830:	2b01      	cmp	r3, #1
 800c832:	d106      	bne.n	800c842 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	2201      	movs	r2, #1
 800c83a:	4393      	bics	r3, r2
 800c83c:	001a      	movs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	611a      	str	r2, [r3, #16]
  }
}
 800c842:	46c0      	nop			@ (mov r8, r8)
 800c844:	46bd      	mov	sp, r7
 800c846:	b004      	add	sp, #16
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	46c0      	nop			@ (mov r8, r8)
 800c84c:	40012c00 	.word	0x40012c00
 800c850:	40000400 	.word	0x40000400
 800c854:	40002000 	.word	0x40002000
 800c858:	40014000 	.word	0x40014000
 800c85c:	40014400 	.word	0x40014400
 800c860:	40014800 	.word	0x40014800
 800c864:	fffffcff 	.word	0xfffffcff

0800c868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6a1b      	ldr	r3, [r3, #32]
 800c878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	2201      	movs	r2, #1
 800c880:	4393      	bics	r3, r2
 800c882:	001a      	movs	r2, r3
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	22f0      	movs	r2, #240	@ 0xf0
 800c892:	4393      	bics	r3, r2
 800c894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	220a      	movs	r2, #10
 800c8a4:	4393      	bics	r3, r2
 800c8a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	621a      	str	r2, [r3, #32]
}
 800c8bc:	46c0      	nop			@ (mov r8, r8)
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	b006      	add	sp, #24
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	2210      	movs	r2, #16
 800c8dc:	4393      	bics	r3, r2
 800c8de:	001a      	movs	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	4a0d      	ldr	r2, [pc, #52]	@ (800c924 <TIM_TI2_ConfigInputStage+0x60>)
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	031b      	lsls	r3, r3, #12
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	22a0      	movs	r2, #160	@ 0xa0
 800c900:	4393      	bics	r3, r2
 800c902:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	011b      	lsls	r3, r3, #4
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	621a      	str	r2, [r3, #32]
}
 800c91a:	46c0      	nop			@ (mov r8, r8)
 800c91c:	46bd      	mov	sp, r7
 800c91e:	b006      	add	sp, #24
 800c920:	bd80      	pop	{r7, pc}
 800c922:	46c0      	nop			@ (mov r8, r8)
 800c924:	ffff0fff 	.word	0xffff0fff

0800c928 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4a08      	ldr	r2, [pc, #32]	@ (800c95c <TIM_ITRx_SetConfig+0x34>)
 800c93c:	4013      	ands	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	4313      	orrs	r3, r2
 800c946:	2207      	movs	r2, #7
 800c948:	4313      	orrs	r3, r2
 800c94a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	609a      	str	r2, [r3, #8]
}
 800c952:	46c0      	nop			@ (mov r8, r8)
 800c954:	46bd      	mov	sp, r7
 800c956:	b004      	add	sp, #16
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	46c0      	nop			@ (mov r8, r8)
 800c95c:	ffcfff8f 	.word	0xffcfff8f

0800c960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
 800c96c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	4a09      	ldr	r2, [pc, #36]	@ (800c99c <TIM_ETR_SetConfig+0x3c>)
 800c978:	4013      	ands	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	021a      	lsls	r2, r3, #8
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	431a      	orrs	r2, r3
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	4313      	orrs	r3, r2
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	609a      	str	r2, [r3, #8]
}
 800c994:	46c0      	nop			@ (mov r8, r8)
 800c996:	46bd      	mov	sp, r7
 800c998:	b006      	add	sp, #24
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	ffff00ff 	.word	0xffff00ff

0800c9a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	223c      	movs	r2, #60	@ 0x3c
 800c9ae:	5c9b      	ldrb	r3, [r3, r2]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d101      	bne.n	800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	e055      	b.n	800ca64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	223c      	movs	r2, #60	@ 0x3c
 800c9bc:	2101      	movs	r1, #1
 800c9be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	223d      	movs	r2, #61	@ 0x3d
 800c9c4:	2102      	movs	r1, #2
 800c9c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a23      	ldr	r2, [pc, #140]	@ (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d108      	bne.n	800c9f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	4a22      	ldr	r2, [pc, #136]	@ (800ca70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2270      	movs	r2, #112	@ 0x70
 800c9f8:	4393      	bics	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a16      	ldr	r2, [pc, #88]	@ (800ca6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d00f      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	2380      	movs	r3, #128	@ 0x80
 800ca1e:	05db      	lsls	r3, r3, #23
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d009      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a12      	ldr	r2, [pc, #72]	@ (800ca74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d004      	beq.n	800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a11      	ldr	r2, [pc, #68]	@ (800ca78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d10c      	bne.n	800ca52 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2280      	movs	r2, #128	@ 0x80
 800ca3c:	4393      	bics	r3, r2
 800ca3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	223d      	movs	r2, #61	@ 0x3d
 800ca56:	2101      	movs	r1, #1
 800ca58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	223c      	movs	r2, #60	@ 0x3c
 800ca5e:	2100      	movs	r1, #0
 800ca60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	0018      	movs	r0, r3
 800ca66:	46bd      	mov	sp, r7
 800ca68:	b004      	add	sp, #16
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	40012c00 	.word	0x40012c00
 800ca70:	ff0fffff 	.word	0xff0fffff
 800ca74:	40000400 	.word	0x40000400
 800ca78:	40014000 	.word	0x40014000

0800ca7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca84:	46c0      	nop			@ (mov r8, r8)
 800ca86:	46bd      	mov	sp, r7
 800ca88:	b002      	add	sp, #8
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca94:	46c0      	nop			@ (mov r8, r8)
 800ca96:	46bd      	mov	sp, r7
 800ca98:	b002      	add	sp, #8
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800caa4:	46c0      	nop			@ (mov r8, r8)
 800caa6:	46bd      	mov	sp, r7
 800caa8:	b002      	add	sp, #8
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e046      	b.n	800cb4c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2288      	movs	r2, #136	@ 0x88
 800cac2:	589b      	ldr	r3, [r3, r2]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d107      	bne.n	800cad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2284      	movs	r2, #132	@ 0x84
 800cacc:	2100      	movs	r1, #0
 800cace:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	0018      	movs	r0, r3
 800cad4:	f7fb fa4a 	bl	8007f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2288      	movs	r2, #136	@ 0x88
 800cadc:	2124      	movs	r1, #36	@ 0x24
 800cade:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2101      	movs	r1, #1
 800caec:	438a      	bics	r2, r1
 800caee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d003      	beq.n	800cb00 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	0018      	movs	r0, r3
 800cafc:	f001 f882 	bl	800dc04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	0018      	movs	r0, r3
 800cb04:	f000 fdc0 	bl	800d688 <UART_SetConfig>
 800cb08:	0003      	movs	r3, r0
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d101      	bne.n	800cb12 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e01c      	b.n	800cb4c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	490d      	ldr	r1, [pc, #52]	@ (800cb54 <HAL_UART_Init+0xa8>)
 800cb1e:	400a      	ands	r2, r1
 800cb20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	212a      	movs	r1, #42	@ 0x2a
 800cb2e:	438a      	bics	r2, r1
 800cb30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	0018      	movs	r0, r3
 800cb46:	f001 f911 	bl	800dd6c <UART_CheckIdleState>
 800cb4a:	0003      	movs	r3, r0
}
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	b002      	add	sp, #8
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	ffffb7ff 	.word	0xffffb7ff

0800cb58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b08a      	sub	sp, #40	@ 0x28
 800cb5c:	af02      	add	r7, sp, #8
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	603b      	str	r3, [r7, #0]
 800cb64:	1dbb      	adds	r3, r7, #6
 800cb66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2288      	movs	r2, #136	@ 0x88
 800cb6c:	589b      	ldr	r3, [r3, r2]
 800cb6e:	2b20      	cmp	r3, #32
 800cb70:	d000      	beq.n	800cb74 <HAL_UART_Transmit+0x1c>
 800cb72:	e090      	b.n	800cc96 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <HAL_UART_Transmit+0x2a>
 800cb7a:	1dbb      	adds	r3, r7, #6
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e088      	b.n	800cc98 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	2380      	movs	r3, #128	@ 0x80
 800cb8c:	015b      	lsls	r3, r3, #5
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d109      	bne.n	800cba6 <HAL_UART_Transmit+0x4e>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	4013      	ands	r3, r2
 800cba0:	d001      	beq.n	800cba6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e078      	b.n	800cc98 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2290      	movs	r2, #144	@ 0x90
 800cbaa:	2100      	movs	r1, #0
 800cbac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2288      	movs	r2, #136	@ 0x88
 800cbb2:	2121      	movs	r1, #33	@ 0x21
 800cbb4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbb6:	f7fb fb89 	bl	80082cc <HAL_GetTick>
 800cbba:	0003      	movs	r3, r0
 800cbbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	1dba      	adds	r2, r7, #6
 800cbc2:	2154      	movs	r1, #84	@ 0x54
 800cbc4:	8812      	ldrh	r2, [r2, #0]
 800cbc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	1dba      	adds	r2, r7, #6
 800cbcc:	2156      	movs	r1, #86	@ 0x56
 800cbce:	8812      	ldrh	r2, [r2, #0]
 800cbd0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	2380      	movs	r3, #128	@ 0x80
 800cbd8:	015b      	lsls	r3, r3, #5
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d108      	bne.n	800cbf0 <HAL_UART_Transmit+0x98>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d104      	bne.n	800cbf0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	61bb      	str	r3, [r7, #24]
 800cbee:	e003      	b.n	800cbf8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbf8:	e030      	b.n	800cc5c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	0013      	movs	r3, r2
 800cc04:	2200      	movs	r2, #0
 800cc06:	2180      	movs	r1, #128	@ 0x80
 800cc08:	f001 f95a 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800cc0c:	1e03      	subs	r3, r0, #0
 800cc0e:	d005      	beq.n	800cc1c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2288      	movs	r2, #136	@ 0x88
 800cc14:	2120      	movs	r1, #32
 800cc16:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e03d      	b.n	800cc98 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10b      	bne.n	800cc3a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	001a      	movs	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	05d2      	lsls	r2, r2, #23
 800cc2e:	0dd2      	lsrs	r2, r2, #23
 800cc30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	3302      	adds	r3, #2
 800cc36:	61bb      	str	r3, [r7, #24]
 800cc38:	e007      	b.n	800cc4a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	781a      	ldrb	r2, [r3, #0]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	3301      	adds	r3, #1
 800cc48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2256      	movs	r2, #86	@ 0x56
 800cc4e:	5a9b      	ldrh	r3, [r3, r2]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	3b01      	subs	r3, #1
 800cc54:	b299      	uxth	r1, r3
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2256      	movs	r2, #86	@ 0x56
 800cc5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2256      	movs	r2, #86	@ 0x56
 800cc60:	5a9b      	ldrh	r3, [r3, r2]
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1c8      	bne.n	800cbfa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	0013      	movs	r3, r2
 800cc72:	2200      	movs	r2, #0
 800cc74:	2140      	movs	r1, #64	@ 0x40
 800cc76:	f001 f923 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800cc7a:	1e03      	subs	r3, r0, #0
 800cc7c:	d005      	beq.n	800cc8a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2288      	movs	r2, #136	@ 0x88
 800cc82:	2120      	movs	r1, #32
 800cc84:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e006      	b.n	800cc98 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2288      	movs	r2, #136	@ 0x88
 800cc8e:	2120      	movs	r1, #32
 800cc90:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e000      	b.n	800cc98 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800cc96:	2302      	movs	r3, #2
  }
}
 800cc98:	0018      	movs	r0, r3
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	b008      	add	sp, #32
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08c      	sub	sp, #48	@ 0x30
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	1dbb      	adds	r3, r7, #6
 800ccac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2288      	movs	r2, #136	@ 0x88
 800ccb2:	589b      	ldr	r3, [r3, r2]
 800ccb4:	2b20      	cmp	r3, #32
 800ccb6:	d000      	beq.n	800ccba <HAL_UART_Transmit_IT+0x1a>
 800ccb8:	e08d      	b.n	800cdd6 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d003      	beq.n	800ccc8 <HAL_UART_Transmit_IT+0x28>
 800ccc0:	1dbb      	adds	r3, r7, #6
 800ccc2:	881b      	ldrh	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e085      	b.n	800cdd8 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	689a      	ldr	r2, [r3, #8]
 800ccd0:	2380      	movs	r3, #128	@ 0x80
 800ccd2:	015b      	lsls	r3, r3, #5
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d109      	bne.n	800ccec <HAL_UART_Transmit_IT+0x4c>
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d105      	bne.n	800ccec <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2201      	movs	r2, #1
 800cce4:	4013      	ands	r3, r2
 800cce6:	d001      	beq.n	800ccec <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e075      	b.n	800cdd8 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	1dba      	adds	r2, r7, #6
 800ccf6:	2154      	movs	r1, #84	@ 0x54
 800ccf8:	8812      	ldrh	r2, [r2, #0]
 800ccfa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	1dba      	adds	r2, r7, #6
 800cd00:	2156      	movs	r1, #86	@ 0x56
 800cd02:	8812      	ldrh	r2, [r2, #0]
 800cd04:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2290      	movs	r2, #144	@ 0x90
 800cd10:	2100      	movs	r1, #0
 800cd12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2288      	movs	r2, #136	@ 0x88
 800cd18:	2121      	movs	r1, #33	@ 0x21
 800cd1a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cd20:	2380      	movs	r3, #128	@ 0x80
 800cd22:	059b      	lsls	r3, r3, #22
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d12a      	bne.n	800cd7e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	2380      	movs	r3, #128	@ 0x80
 800cd2e:	015b      	lsls	r3, r3, #5
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d107      	bne.n	800cd44 <HAL_UART_Transmit_IT+0xa4>
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d103      	bne.n	800cd44 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4a28      	ldr	r2, [pc, #160]	@ (800cde0 <HAL_UART_Transmit_IT+0x140>)
 800cd40:	679a      	str	r2, [r3, #120]	@ 0x78
 800cd42:	e002      	b.n	800cd4a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4a27      	ldr	r2, [pc, #156]	@ (800cde4 <HAL_UART_Transmit_IT+0x144>)
 800cd48:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd4a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd4e:	61fb      	str	r3, [r7, #28]
  return(result);
 800cd50:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cd52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd54:	2301      	movs	r3, #1
 800cd56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	f383 8810 	msr	PRIMASK, r3
}
 800cd5e:	46c0      	nop			@ (mov r8, r8)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2180      	movs	r1, #128	@ 0x80
 800cd6c:	0409      	lsls	r1, r1, #16
 800cd6e:	430a      	orrs	r2, r1
 800cd70:	609a      	str	r2, [r3, #8]
 800cd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd74:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	f383 8810 	msr	PRIMASK, r3
}
 800cd7c:	e029      	b.n	800cdd2 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	689a      	ldr	r2, [r3, #8]
 800cd82:	2380      	movs	r3, #128	@ 0x80
 800cd84:	015b      	lsls	r3, r3, #5
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d107      	bne.n	800cd9a <HAL_UART_Transmit_IT+0xfa>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	4a14      	ldr	r2, [pc, #80]	@ (800cde8 <HAL_UART_Transmit_IT+0x148>)
 800cd96:	679a      	str	r2, [r3, #120]	@ 0x78
 800cd98:	e002      	b.n	800cda0 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4a13      	ldr	r2, [pc, #76]	@ (800cdec <HAL_UART_Transmit_IT+0x14c>)
 800cd9e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cda0:	f3ef 8310 	mrs	r3, PRIMASK
 800cda4:	613b      	str	r3, [r7, #16]
  return(result);
 800cda6:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cda8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdaa:	2301      	movs	r3, #1
 800cdac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f383 8810 	msr	PRIMASK, r3
}
 800cdb4:	46c0      	nop			@ (mov r8, r8)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2180      	movs	r1, #128	@ 0x80
 800cdc2:	430a      	orrs	r2, r1
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	f383 8810 	msr	PRIMASK, r3
}
 800cdd0:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e000      	b.n	800cdd8 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800cdd6:	2302      	movs	r3, #2
  }
}
 800cdd8:	0018      	movs	r0, r3
 800cdda:	46bd      	mov	sp, r7
 800cddc:	b00c      	add	sp, #48	@ 0x30
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0800e541 	.word	0x0800e541
 800cde4:	0800e455 	.word	0x0800e455
 800cde8:	0800e397 	.word	0x0800e397
 800cdec:	0800e2e3 	.word	0x0800e2e3

0800cdf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b088      	sub	sp, #32
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	1dbb      	adds	r3, r7, #6
 800cdfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	228c      	movs	r2, #140	@ 0x8c
 800ce02:	589b      	ldr	r3, [r3, r2]
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d14a      	bne.n	800ce9e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <HAL_UART_Receive_IT+0x26>
 800ce0e:	1dbb      	adds	r3, r7, #6
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e042      	b.n	800cea0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	689a      	ldr	r2, [r3, #8]
 800ce1e:	2380      	movs	r3, #128	@ 0x80
 800ce20:	015b      	lsls	r3, r3, #5
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d109      	bne.n	800ce3a <HAL_UART_Receive_IT+0x4a>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2201      	movs	r2, #1
 800ce32:	4013      	ands	r3, r2
 800ce34:	d001      	beq.n	800ce3a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e032      	b.n	800cea0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a18      	ldr	r2, [pc, #96]	@ (800cea8 <HAL_UART_Receive_IT+0xb8>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d020      	beq.n	800ce8c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	2380      	movs	r3, #128	@ 0x80
 800ce52:	041b      	lsls	r3, r3, #16
 800ce54:	4013      	ands	r3, r2
 800ce56:	d019      	beq.n	800ce8c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce58:	f3ef 8310 	mrs	r3, PRIMASK
 800ce5c:	613b      	str	r3, [r7, #16]
  return(result);
 800ce5e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce60:	61fb      	str	r3, [r7, #28]
 800ce62:	2301      	movs	r3, #1
 800ce64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f383 8810 	msr	PRIMASK, r3
}
 800ce6c:	46c0      	nop			@ (mov r8, r8)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2180      	movs	r1, #128	@ 0x80
 800ce7a:	04c9      	lsls	r1, r1, #19
 800ce7c:	430a      	orrs	r2, r1
 800ce7e:	601a      	str	r2, [r3, #0]
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	f383 8810 	msr	PRIMASK, r3
}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ce8c:	1dbb      	adds	r3, r7, #6
 800ce8e:	881a      	ldrh	r2, [r3, #0]
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	0018      	movs	r0, r3
 800ce96:	f001 f883 	bl	800dfa0 <UART_Start_Receive_IT>
 800ce9a:	0003      	movs	r3, r0
 800ce9c:	e000      	b.n	800cea0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ce9e:	2302      	movs	r3, #2
  }
}
 800cea0:	0018      	movs	r0, r3
 800cea2:	46bd      	mov	sp, r7
 800cea4:	b008      	add	sp, #32
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	40008000 	.word	0x40008000

0800ceac <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b092      	sub	sp, #72	@ 0x48
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceb4:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb8:	623b      	str	r3, [r7, #32]
  return(result);
 800ceba:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800cebc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cebe:	2301      	movs	r3, #1
 800cec0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	f383 8810 	msr	PRIMASK, r3
}
 800cec8:	46c0      	nop			@ (mov r8, r8)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	494d      	ldr	r1, [pc, #308]	@ (800d00c <HAL_UART_AbortReceive+0x160>)
 800ced6:	400a      	ands	r2, r1
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cedc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee0:	f383 8810 	msr	PRIMASK, r3
}
 800cee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cee6:	f3ef 8310 	mrs	r3, PRIMASK
 800ceea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800ceec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800ceee:	643b      	str	r3, [r7, #64]	@ 0x40
 800cef0:	2301      	movs	r3, #1
 800cef2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	f383 8810 	msr	PRIMASK, r3
}
 800cefa:	46c0      	nop			@ (mov r8, r8)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	689a      	ldr	r2, [r3, #8]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4942      	ldr	r1, [pc, #264]	@ (800d010 <HAL_UART_AbortReceive+0x164>)
 800cf08:	400a      	ands	r2, r1
 800cf0a:	609a      	str	r2, [r3, #8]
 800cf0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf12:	f383 8810 	msr	PRIMASK, r3
}
 800cf16:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d118      	bne.n	800cf52 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf20:	f3ef 8310 	mrs	r3, PRIMASK
 800cf24:	617b      	str	r3, [r7, #20]
  return(result);
 800cf26:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800cf28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	f383 8810 	msr	PRIMASK, r3
}
 800cf34:	46c0      	nop			@ (mov r8, r8)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2110      	movs	r1, #16
 800cf42:	438a      	bics	r2, r1
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	f383 8810 	msr	PRIMASK, r3
}
 800cf50:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	2240      	movs	r2, #64	@ 0x40
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	2b40      	cmp	r3, #64	@ 0x40
 800cf5e:	d139      	bne.n	800cfd4 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf60:	f3ef 8310 	mrs	r3, PRIMASK
 800cf64:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf66:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f383 8810 	msr	PRIMASK, r3
}
 800cf74:	46c0      	nop			@ (mov r8, r8)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2140      	movs	r1, #64	@ 0x40
 800cf82:	438a      	bics	r2, r1
 800cf84:	609a      	str	r2, [r3, #8]
 800cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	f383 8810 	msr	PRIMASK, r3
}
 800cf90:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2280      	movs	r2, #128	@ 0x80
 800cf96:	589b      	ldr	r3, [r3, r2]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d01b      	beq.n	800cfd4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2280      	movs	r2, #128	@ 0x80
 800cfa0:	589b      	ldr	r3, [r3, r2]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2280      	movs	r2, #128	@ 0x80
 800cfaa:	589b      	ldr	r3, [r3, r2]
 800cfac:	0018      	movs	r0, r3
 800cfae:	f7fb fa95 	bl	80084dc <HAL_DMA_Abort>
 800cfb2:	1e03      	subs	r3, r0, #0
 800cfb4:	d00e      	beq.n	800cfd4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2280      	movs	r2, #128	@ 0x80
 800cfba:	589b      	ldr	r3, [r3, r2]
 800cfbc:	0018      	movs	r0, r3
 800cfbe:	f7fb fb59 	bl	8008674 <HAL_DMA_GetError>
 800cfc2:	0003      	movs	r3, r0
 800cfc4:	2b20      	cmp	r3, #32
 800cfc6:	d105      	bne.n	800cfd4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2290      	movs	r2, #144	@ 0x90
 800cfcc:	2110      	movs	r1, #16
 800cfce:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e017      	b.n	800d004 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	225e      	movs	r2, #94	@ 0x5e
 800cfd8:	2100      	movs	r1, #0
 800cfda:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	220f      	movs	r2, #15
 800cfe2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	699a      	ldr	r2, [r3, #24]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2108      	movs	r1, #8
 800cff0:	430a      	orrs	r2, r1
 800cff2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	228c      	movs	r2, #140	@ 0x8c
 800cff8:	2120      	movs	r1, #32
 800cffa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	0018      	movs	r0, r3
 800d006:	46bd      	mov	sp, r7
 800d008:	b012      	add	sp, #72	@ 0x48
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	fffffedf 	.word	0xfffffedf
 800d010:	effffffe 	.word	0xeffffffe

0800d014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d014:	b5b0      	push	{r4, r5, r7, lr}
 800d016:	b0aa      	sub	sp, #168	@ 0xa8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	22a4      	movs	r2, #164	@ 0xa4
 800d024:	18b9      	adds	r1, r7, r2
 800d026:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	20a0      	movs	r0, #160	@ 0xa0
 800d030:	1839      	adds	r1, r7, r0
 800d032:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	249c      	movs	r4, #156	@ 0x9c
 800d03c:	1939      	adds	r1, r7, r4
 800d03e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d040:	0011      	movs	r1, r2
 800d042:	18bb      	adds	r3, r7, r2
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4aa2      	ldr	r2, [pc, #648]	@ (800d2d0 <HAL_UART_IRQHandler+0x2bc>)
 800d048:	4013      	ands	r3, r2
 800d04a:	2298      	movs	r2, #152	@ 0x98
 800d04c:	18bd      	adds	r5, r7, r2
 800d04e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800d050:	18bb      	adds	r3, r7, r2
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d11a      	bne.n	800d08e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d058:	187b      	adds	r3, r7, r1
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2220      	movs	r2, #32
 800d05e:	4013      	ands	r3, r2
 800d060:	d015      	beq.n	800d08e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d062:	183b      	adds	r3, r7, r0
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2220      	movs	r2, #32
 800d068:	4013      	ands	r3, r2
 800d06a:	d105      	bne.n	800d078 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d06c:	193b      	adds	r3, r7, r4
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	2380      	movs	r3, #128	@ 0x80
 800d072:	055b      	lsls	r3, r3, #21
 800d074:	4013      	ands	r3, r2
 800d076:	d00a      	beq.n	800d08e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d100      	bne.n	800d082 <HAL_UART_IRQHandler+0x6e>
 800d080:	e2dc      	b.n	800d63c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	0010      	movs	r0, r2
 800d08a:	4798      	blx	r3
      }
      return;
 800d08c:	e2d6      	b.n	800d63c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d08e:	2398      	movs	r3, #152	@ 0x98
 800d090:	18fb      	adds	r3, r7, r3
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d100      	bne.n	800d09a <HAL_UART_IRQHandler+0x86>
 800d098:	e122      	b.n	800d2e0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d09a:	239c      	movs	r3, #156	@ 0x9c
 800d09c:	18fb      	adds	r3, r7, r3
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a8c      	ldr	r2, [pc, #560]	@ (800d2d4 <HAL_UART_IRQHandler+0x2c0>)
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	d106      	bne.n	800d0b4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d0a6:	23a0      	movs	r3, #160	@ 0xa0
 800d0a8:	18fb      	adds	r3, r7, r3
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a8a      	ldr	r2, [pc, #552]	@ (800d2d8 <HAL_UART_IRQHandler+0x2c4>)
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	d100      	bne.n	800d0b4 <HAL_UART_IRQHandler+0xa0>
 800d0b2:	e115      	b.n	800d2e0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0b4:	23a4      	movs	r3, #164	@ 0xa4
 800d0b6:	18fb      	adds	r3, r7, r3
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4013      	ands	r3, r2
 800d0be:	d012      	beq.n	800d0e6 <HAL_UART_IRQHandler+0xd2>
 800d0c0:	23a0      	movs	r3, #160	@ 0xa0
 800d0c2:	18fb      	adds	r3, r7, r3
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	2380      	movs	r3, #128	@ 0x80
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	d00b      	beq.n	800d0e6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2290      	movs	r2, #144	@ 0x90
 800d0da:	589b      	ldr	r3, [r3, r2]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2190      	movs	r1, #144	@ 0x90
 800d0e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0e6:	23a4      	movs	r3, #164	@ 0xa4
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	d011      	beq.n	800d116 <HAL_UART_IRQHandler+0x102>
 800d0f2:	239c      	movs	r3, #156	@ 0x9c
 800d0f4:	18fb      	adds	r3, r7, r3
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	d00b      	beq.n	800d116 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2202      	movs	r2, #2
 800d104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2290      	movs	r2, #144	@ 0x90
 800d10a:	589b      	ldr	r3, [r3, r2]
 800d10c:	2204      	movs	r2, #4
 800d10e:	431a      	orrs	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2190      	movs	r1, #144	@ 0x90
 800d114:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d116:	23a4      	movs	r3, #164	@ 0xa4
 800d118:	18fb      	adds	r3, r7, r3
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2204      	movs	r2, #4
 800d11e:	4013      	ands	r3, r2
 800d120:	d011      	beq.n	800d146 <HAL_UART_IRQHandler+0x132>
 800d122:	239c      	movs	r3, #156	@ 0x9c
 800d124:	18fb      	adds	r3, r7, r3
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2201      	movs	r2, #1
 800d12a:	4013      	ands	r3, r2
 800d12c:	d00b      	beq.n	800d146 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2204      	movs	r2, #4
 800d134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2290      	movs	r2, #144	@ 0x90
 800d13a:	589b      	ldr	r3, [r3, r2]
 800d13c:	2202      	movs	r2, #2
 800d13e:	431a      	orrs	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2190      	movs	r1, #144	@ 0x90
 800d144:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d146:	23a4      	movs	r3, #164	@ 0xa4
 800d148:	18fb      	adds	r3, r7, r3
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2208      	movs	r2, #8
 800d14e:	4013      	ands	r3, r2
 800d150:	d017      	beq.n	800d182 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d152:	23a0      	movs	r3, #160	@ 0xa0
 800d154:	18fb      	adds	r3, r7, r3
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2220      	movs	r2, #32
 800d15a:	4013      	ands	r3, r2
 800d15c:	d105      	bne.n	800d16a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d15e:	239c      	movs	r3, #156	@ 0x9c
 800d160:	18fb      	adds	r3, r7, r3
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a5b      	ldr	r2, [pc, #364]	@ (800d2d4 <HAL_UART_IRQHandler+0x2c0>)
 800d166:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d168:	d00b      	beq.n	800d182 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2208      	movs	r2, #8
 800d170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2290      	movs	r2, #144	@ 0x90
 800d176:	589b      	ldr	r3, [r3, r2]
 800d178:	2208      	movs	r2, #8
 800d17a:	431a      	orrs	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2190      	movs	r1, #144	@ 0x90
 800d180:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d182:	23a4      	movs	r3, #164	@ 0xa4
 800d184:	18fb      	adds	r3, r7, r3
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	2380      	movs	r3, #128	@ 0x80
 800d18a:	011b      	lsls	r3, r3, #4
 800d18c:	4013      	ands	r3, r2
 800d18e:	d013      	beq.n	800d1b8 <HAL_UART_IRQHandler+0x1a4>
 800d190:	23a0      	movs	r3, #160	@ 0xa0
 800d192:	18fb      	adds	r3, r7, r3
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	2380      	movs	r3, #128	@ 0x80
 800d198:	04db      	lsls	r3, r3, #19
 800d19a:	4013      	ands	r3, r2
 800d19c:	d00c      	beq.n	800d1b8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2280      	movs	r2, #128	@ 0x80
 800d1a4:	0112      	lsls	r2, r2, #4
 800d1a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2290      	movs	r2, #144	@ 0x90
 800d1ac:	589b      	ldr	r3, [r3, r2]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	431a      	orrs	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2190      	movs	r1, #144	@ 0x90
 800d1b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2290      	movs	r2, #144	@ 0x90
 800d1bc:	589b      	ldr	r3, [r3, r2]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d100      	bne.n	800d1c4 <HAL_UART_IRQHandler+0x1b0>
 800d1c2:	e23d      	b.n	800d640 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1c4:	23a4      	movs	r3, #164	@ 0xa4
 800d1c6:	18fb      	adds	r3, r7, r3
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2220      	movs	r2, #32
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	d015      	beq.n	800d1fc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1d0:	23a0      	movs	r3, #160	@ 0xa0
 800d1d2:	18fb      	adds	r3, r7, r3
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2220      	movs	r2, #32
 800d1d8:	4013      	ands	r3, r2
 800d1da:	d106      	bne.n	800d1ea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1dc:	239c      	movs	r3, #156	@ 0x9c
 800d1de:	18fb      	adds	r3, r7, r3
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	2380      	movs	r3, #128	@ 0x80
 800d1e4:	055b      	lsls	r3, r3, #21
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	d008      	beq.n	800d1fc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d004      	beq.n	800d1fc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	0010      	movs	r0, r2
 800d1fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2290      	movs	r2, #144	@ 0x90
 800d200:	589b      	ldr	r3, [r3, r2]
 800d202:	2194      	movs	r1, #148	@ 0x94
 800d204:	187a      	adds	r2, r7, r1
 800d206:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	2240      	movs	r2, #64	@ 0x40
 800d210:	4013      	ands	r3, r2
 800d212:	2b40      	cmp	r3, #64	@ 0x40
 800d214:	d004      	beq.n	800d220 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d216:	187b      	adds	r3, r7, r1
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2228      	movs	r2, #40	@ 0x28
 800d21c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d21e:	d04c      	beq.n	800d2ba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	0018      	movs	r0, r3
 800d224:	f000 ffe0 	bl	800e1e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	2240      	movs	r2, #64	@ 0x40
 800d230:	4013      	ands	r3, r2
 800d232:	2b40      	cmp	r3, #64	@ 0x40
 800d234:	d13c      	bne.n	800d2b0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d236:	f3ef 8310 	mrs	r3, PRIMASK
 800d23a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800d23c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d23e:	2090      	movs	r0, #144	@ 0x90
 800d240:	183a      	adds	r2, r7, r0
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	2301      	movs	r3, #1
 800d246:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d24a:	f383 8810 	msr	PRIMASK, r3
}
 800d24e:	46c0      	nop			@ (mov r8, r8)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	689a      	ldr	r2, [r3, #8]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2140      	movs	r1, #64	@ 0x40
 800d25c:	438a      	bics	r2, r1
 800d25e:	609a      	str	r2, [r3, #8]
 800d260:	183b      	adds	r3, r7, r0
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d268:	f383 8810 	msr	PRIMASK, r3
}
 800d26c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2280      	movs	r2, #128	@ 0x80
 800d272:	589b      	ldr	r3, [r3, r2]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d016      	beq.n	800d2a6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2280      	movs	r2, #128	@ 0x80
 800d27c:	589b      	ldr	r3, [r3, r2]
 800d27e:	4a17      	ldr	r2, [pc, #92]	@ (800d2dc <HAL_UART_IRQHandler+0x2c8>)
 800d280:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2280      	movs	r2, #128	@ 0x80
 800d286:	589b      	ldr	r3, [r3, r2]
 800d288:	0018      	movs	r0, r3
 800d28a:	f7fb f989 	bl	80085a0 <HAL_DMA_Abort_IT>
 800d28e:	1e03      	subs	r3, r0, #0
 800d290:	d01c      	beq.n	800d2cc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2280      	movs	r2, #128	@ 0x80
 800d296:	589b      	ldr	r3, [r3, r2]
 800d298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	2180      	movs	r1, #128	@ 0x80
 800d29e:	5852      	ldr	r2, [r2, r1]
 800d2a0:	0010      	movs	r0, r2
 800d2a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a4:	e012      	b.n	800d2cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	f000 f9d9 	bl	800d660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ae:	e00d      	b.n	800d2cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	f000 f9d4 	bl	800d660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2b8:	e008      	b.n	800d2cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f000 f9cf 	bl	800d660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2290      	movs	r2, #144	@ 0x90
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d2ca:	e1b9      	b.n	800d640 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2cc:	46c0      	nop			@ (mov r8, r8)
    return;
 800d2ce:	e1b7      	b.n	800d640 <HAL_UART_IRQHandler+0x62c>
 800d2d0:	0000080f 	.word	0x0000080f
 800d2d4:	10000001 	.word	0x10000001
 800d2d8:	04000120 	.word	0x04000120
 800d2dc:	0800e2b5 	.word	0x0800e2b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d000      	beq.n	800d2ea <HAL_UART_IRQHandler+0x2d6>
 800d2e8:	e13e      	b.n	800d568 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2ea:	23a4      	movs	r3, #164	@ 0xa4
 800d2ec:	18fb      	adds	r3, r7, r3
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2210      	movs	r2, #16
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	d100      	bne.n	800d2f8 <HAL_UART_IRQHandler+0x2e4>
 800d2f6:	e137      	b.n	800d568 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2f8:	23a0      	movs	r3, #160	@ 0xa0
 800d2fa:	18fb      	adds	r3, r7, r3
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2210      	movs	r2, #16
 800d300:	4013      	ands	r3, r2
 800d302:	d100      	bne.n	800d306 <HAL_UART_IRQHandler+0x2f2>
 800d304:	e130      	b.n	800d568 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2210      	movs	r2, #16
 800d30c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	2240      	movs	r2, #64	@ 0x40
 800d316:	4013      	ands	r3, r2
 800d318:	2b40      	cmp	r3, #64	@ 0x40
 800d31a:	d000      	beq.n	800d31e <HAL_UART_IRQHandler+0x30a>
 800d31c:	e0a4      	b.n	800d468 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2280      	movs	r2, #128	@ 0x80
 800d322:	589b      	ldr	r3, [r3, r2]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	217e      	movs	r1, #126	@ 0x7e
 800d32a:	187b      	adds	r3, r7, r1
 800d32c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d32e:	187b      	adds	r3, r7, r1
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d100      	bne.n	800d338 <HAL_UART_IRQHandler+0x324>
 800d336:	e185      	b.n	800d644 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	225c      	movs	r2, #92	@ 0x5c
 800d33c:	5a9b      	ldrh	r3, [r3, r2]
 800d33e:	187a      	adds	r2, r7, r1
 800d340:	8812      	ldrh	r2, [r2, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	d300      	bcc.n	800d348 <HAL_UART_IRQHandler+0x334>
 800d346:	e17d      	b.n	800d644 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	187a      	adds	r2, r7, r1
 800d34c:	215e      	movs	r1, #94	@ 0x5e
 800d34e:	8812      	ldrh	r2, [r2, #0]
 800d350:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2280      	movs	r2, #128	@ 0x80
 800d356:	589b      	ldr	r3, [r3, r2]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2220      	movs	r2, #32
 800d35e:	4013      	ands	r3, r2
 800d360:	d170      	bne.n	800d444 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d362:	f3ef 8310 	mrs	r3, PRIMASK
 800d366:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d36a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d36c:	2301      	movs	r3, #1
 800d36e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d372:	f383 8810 	msr	PRIMASK, r3
}
 800d376:	46c0      	nop			@ (mov r8, r8)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	49b4      	ldr	r1, [pc, #720]	@ (800d654 <HAL_UART_IRQHandler+0x640>)
 800d384:	400a      	ands	r2, r1
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d38a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38e:	f383 8810 	msr	PRIMASK, r3
}
 800d392:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d394:	f3ef 8310 	mrs	r3, PRIMASK
 800d398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800d39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d39c:	677b      	str	r3, [r7, #116]	@ 0x74
 800d39e:	2301      	movs	r3, #1
 800d3a0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3a4:	f383 8810 	msr	PRIMASK, r3
}
 800d3a8:	46c0      	nop			@ (mov r8, r8)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	689a      	ldr	r2, [r3, #8]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	438a      	bics	r2, r1
 800d3b8:	609a      	str	r2, [r3, #8]
 800d3ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3bc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3c0:	f383 8810 	msr	PRIMASK, r3
}
 800d3c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800d3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3d6:	f383 8810 	msr	PRIMASK, r3
}
 800d3da:	46c0      	nop			@ (mov r8, r8)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689a      	ldr	r2, [r3, #8]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2140      	movs	r1, #64	@ 0x40
 800d3e8:	438a      	bics	r2, r1
 800d3ea:	609a      	str	r2, [r3, #8]
 800d3ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3ee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f2:	f383 8810 	msr	PRIMASK, r3
}
 800d3f6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	228c      	movs	r2, #140	@ 0x8c
 800d3fc:	2120      	movs	r1, #32
 800d3fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d406:	f3ef 8310 	mrs	r3, PRIMASK
 800d40a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800d40c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d40e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d410:	2301      	movs	r3, #1
 800d412:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d416:	f383 8810 	msr	PRIMASK, r3
}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2110      	movs	r1, #16
 800d428:	438a      	bics	r2, r1
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d42e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d432:	f383 8810 	msr	PRIMASK, r3
}
 800d436:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2280      	movs	r2, #128	@ 0x80
 800d43c:	589b      	ldr	r3, [r3, r2]
 800d43e:	0018      	movs	r0, r3
 800d440:	f7fb f84c 	bl	80084dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2202      	movs	r2, #2
 800d448:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	225c      	movs	r2, #92	@ 0x5c
 800d44e:	5a9a      	ldrh	r2, [r3, r2]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	215e      	movs	r1, #94	@ 0x5e
 800d454:	5a5b      	ldrh	r3, [r3, r1]
 800d456:	b29b      	uxth	r3, r3
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	0011      	movs	r1, r2
 800d460:	0018      	movs	r0, r3
 800d462:	f000 f905 	bl	800d670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d466:	e0ed      	b.n	800d644 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	225c      	movs	r2, #92	@ 0x5c
 800d46c:	5a99      	ldrh	r1, [r3, r2]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	225e      	movs	r2, #94	@ 0x5e
 800d472:	5a9b      	ldrh	r3, [r3, r2]
 800d474:	b29a      	uxth	r2, r3
 800d476:	208e      	movs	r0, #142	@ 0x8e
 800d478:	183b      	adds	r3, r7, r0
 800d47a:	1a8a      	subs	r2, r1, r2
 800d47c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	225e      	movs	r2, #94	@ 0x5e
 800d482:	5a9b      	ldrh	r3, [r3, r2]
 800d484:	b29b      	uxth	r3, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d100      	bne.n	800d48c <HAL_UART_IRQHandler+0x478>
 800d48a:	e0dd      	b.n	800d648 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800d48c:	183b      	adds	r3, r7, r0
 800d48e:	881b      	ldrh	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d100      	bne.n	800d496 <HAL_UART_IRQHandler+0x482>
 800d494:	e0d8      	b.n	800d648 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d496:	f3ef 8310 	mrs	r3, PRIMASK
 800d49a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d49c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d49e:	2488      	movs	r4, #136	@ 0x88
 800d4a0:	193a      	adds	r2, r7, r4
 800d4a2:	6013      	str	r3, [r2, #0]
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	f383 8810 	msr	PRIMASK, r3
}
 800d4ae:	46c0      	nop			@ (mov r8, r8)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4967      	ldr	r1, [pc, #412]	@ (800d658 <HAL_UART_IRQHandler+0x644>)
 800d4bc:	400a      	ands	r2, r1
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	193b      	adds	r3, r7, r4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f383 8810 	msr	PRIMASK, r3
}
 800d4cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d4d2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4d4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4d6:	2484      	movs	r4, #132	@ 0x84
 800d4d8:	193a      	adds	r2, r7, r4
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	2301      	movs	r3, #1
 800d4de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	f383 8810 	msr	PRIMASK, r3
}
 800d4e6:	46c0      	nop			@ (mov r8, r8)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	689a      	ldr	r2, [r3, #8]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	495a      	ldr	r1, [pc, #360]	@ (800d65c <HAL_UART_IRQHandler+0x648>)
 800d4f4:	400a      	ands	r2, r1
 800d4f6:	609a      	str	r2, [r3, #8]
 800d4f8:	193b      	adds	r3, r7, r4
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	f383 8810 	msr	PRIMASK, r3
}
 800d504:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	228c      	movs	r2, #140	@ 0x8c
 800d50a:	2120      	movs	r1, #32
 800d50c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d51a:	f3ef 8310 	mrs	r3, PRIMASK
 800d51e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d522:	2480      	movs	r4, #128	@ 0x80
 800d524:	193a      	adds	r2, r7, r4
 800d526:	6013      	str	r3, [r2, #0]
 800d528:	2301      	movs	r3, #1
 800d52a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52e:	f383 8810 	msr	PRIMASK, r3
}
 800d532:	46c0      	nop			@ (mov r8, r8)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2110      	movs	r1, #16
 800d540:	438a      	bics	r2, r1
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	193b      	adds	r3, r7, r4
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54c:	f383 8810 	msr	PRIMASK, r3
}
 800d550:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2202      	movs	r2, #2
 800d556:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d558:	183b      	adds	r3, r7, r0
 800d55a:	881a      	ldrh	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	0011      	movs	r1, r2
 800d560:	0018      	movs	r0, r3
 800d562:	f000 f885 	bl	800d670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d566:	e06f      	b.n	800d648 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d568:	23a4      	movs	r3, #164	@ 0xa4
 800d56a:	18fb      	adds	r3, r7, r3
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	2380      	movs	r3, #128	@ 0x80
 800d570:	035b      	lsls	r3, r3, #13
 800d572:	4013      	ands	r3, r2
 800d574:	d010      	beq.n	800d598 <HAL_UART_IRQHandler+0x584>
 800d576:	239c      	movs	r3, #156	@ 0x9c
 800d578:	18fb      	adds	r3, r7, r3
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	2380      	movs	r3, #128	@ 0x80
 800d57e:	03db      	lsls	r3, r3, #15
 800d580:	4013      	ands	r3, r2
 800d582:	d009      	beq.n	800d598 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2280      	movs	r2, #128	@ 0x80
 800d58a:	0352      	lsls	r2, r2, #13
 800d58c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	0018      	movs	r0, r3
 800d592:	f001 fdfd 	bl	800f190 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d596:	e05a      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d598:	23a4      	movs	r3, #164	@ 0xa4
 800d59a:	18fb      	adds	r3, r7, r3
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2280      	movs	r2, #128	@ 0x80
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	d016      	beq.n	800d5d2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d5a4:	23a0      	movs	r3, #160	@ 0xa0
 800d5a6:	18fb      	adds	r3, r7, r3
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2280      	movs	r2, #128	@ 0x80
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	d106      	bne.n	800d5be <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d5b0:	239c      	movs	r3, #156	@ 0x9c
 800d5b2:	18fb      	adds	r3, r7, r3
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	2380      	movs	r3, #128	@ 0x80
 800d5b8:	041b      	lsls	r3, r3, #16
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	d009      	beq.n	800d5d2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d042      	beq.n	800d64c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	0010      	movs	r0, r2
 800d5ce:	4798      	blx	r3
    }
    return;
 800d5d0:	e03c      	b.n	800d64c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d5d2:	23a4      	movs	r3, #164	@ 0xa4
 800d5d4:	18fb      	adds	r3, r7, r3
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2240      	movs	r2, #64	@ 0x40
 800d5da:	4013      	ands	r3, r2
 800d5dc:	d00a      	beq.n	800d5f4 <HAL_UART_IRQHandler+0x5e0>
 800d5de:	23a0      	movs	r3, #160	@ 0xa0
 800d5e0:	18fb      	adds	r3, r7, r3
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2240      	movs	r2, #64	@ 0x40
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	d004      	beq.n	800d5f4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	0018      	movs	r0, r3
 800d5ee:	f001 f821 	bl	800e634 <UART_EndTransmit_IT>
    return;
 800d5f2:	e02c      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5f4:	23a4      	movs	r3, #164	@ 0xa4
 800d5f6:	18fb      	adds	r3, r7, r3
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	2380      	movs	r3, #128	@ 0x80
 800d5fc:	041b      	lsls	r3, r3, #16
 800d5fe:	4013      	ands	r3, r2
 800d600:	d00b      	beq.n	800d61a <HAL_UART_IRQHandler+0x606>
 800d602:	23a0      	movs	r3, #160	@ 0xa0
 800d604:	18fb      	adds	r3, r7, r3
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	2380      	movs	r3, #128	@ 0x80
 800d60a:	05db      	lsls	r3, r3, #23
 800d60c:	4013      	ands	r3, r2
 800d60e:	d004      	beq.n	800d61a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	0018      	movs	r0, r3
 800d614:	f001 fdcc 	bl	800f1b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d618:	e019      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d61a:	23a4      	movs	r3, #164	@ 0xa4
 800d61c:	18fb      	adds	r3, r7, r3
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	2380      	movs	r3, #128	@ 0x80
 800d622:	045b      	lsls	r3, r3, #17
 800d624:	4013      	ands	r3, r2
 800d626:	d012      	beq.n	800d64e <HAL_UART_IRQHandler+0x63a>
 800d628:	23a0      	movs	r3, #160	@ 0xa0
 800d62a:	18fb      	adds	r3, r7, r3
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	da0d      	bge.n	800d64e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	0018      	movs	r0, r3
 800d636:	f001 fdb3 	bl	800f1a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d63a:	e008      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
      return;
 800d63c:	46c0      	nop			@ (mov r8, r8)
 800d63e:	e006      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
    return;
 800d640:	46c0      	nop			@ (mov r8, r8)
 800d642:	e004      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
      return;
 800d644:	46c0      	nop			@ (mov r8, r8)
 800d646:	e002      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
      return;
 800d648:	46c0      	nop			@ (mov r8, r8)
 800d64a:	e000      	b.n	800d64e <HAL_UART_IRQHandler+0x63a>
    return;
 800d64c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d64e:	46bd      	mov	sp, r7
 800d650:	b02a      	add	sp, #168	@ 0xa8
 800d652:	bdb0      	pop	{r4, r5, r7, pc}
 800d654:	fffffeff 	.word	0xfffffeff
 800d658:	fffffedf 	.word	0xfffffedf
 800d65c:	effffffe 	.word	0xeffffffe

0800d660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d668:	46c0      	nop			@ (mov r8, r8)
 800d66a:	46bd      	mov	sp, r7
 800d66c:	b002      	add	sp, #8
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	000a      	movs	r2, r1
 800d67a:	1cbb      	adds	r3, r7, #2
 800d67c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d67e:	46c0      	nop			@ (mov r8, r8)
 800d680:	46bd      	mov	sp, r7
 800d682:	b002      	add	sp, #8
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d688:	b5b0      	push	{r4, r5, r7, lr}
 800d68a:	b090      	sub	sp, #64	@ 0x40
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d690:	231a      	movs	r3, #26
 800d692:	2220      	movs	r2, #32
 800d694:	189b      	adds	r3, r3, r2
 800d696:	19db      	adds	r3, r3, r7
 800d698:	2200      	movs	r2, #0
 800d69a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69e:	689a      	ldr	r2, [r3, #8]
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	431a      	orrs	r2, r3
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ae:	69db      	ldr	r3, [r3, #28]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4aaf      	ldr	r2, [pc, #700]	@ (800d978 <UART_SetConfig+0x2f0>)
 800d6bc:	4013      	ands	r3, r2
 800d6be:	0019      	movs	r1, r3
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c6:	430b      	orrs	r3, r1
 800d6c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	4aaa      	ldr	r2, [pc, #680]	@ (800d97c <UART_SetConfig+0x2f4>)
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d8:	68d9      	ldr	r1, [r3, #12]
 800d6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	0003      	movs	r3, r0
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	699b      	ldr	r3, [r3, #24]
 800d6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4aa4      	ldr	r2, [pc, #656]	@ (800d980 <UART_SetConfig+0x2f8>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d004      	beq.n	800d6fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	4a9f      	ldr	r2, [pc, #636]	@ (800d984 <UART_SetConfig+0x2fc>)
 800d706:	4013      	ands	r3, r2
 800d708:	0019      	movs	r1, r3
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d710:	430b      	orrs	r3, r1
 800d712:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d71a:	220f      	movs	r2, #15
 800d71c:	4393      	bics	r3, r2
 800d71e:	0018      	movs	r0, r3
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	0003      	movs	r3, r0
 800d72a:	430b      	orrs	r3, r1
 800d72c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a95      	ldr	r2, [pc, #596]	@ (800d988 <UART_SetConfig+0x300>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d131      	bne.n	800d79c <UART_SetConfig+0x114>
 800d738:	4b94      	ldr	r3, [pc, #592]	@ (800d98c <UART_SetConfig+0x304>)
 800d73a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d73c:	2203      	movs	r2, #3
 800d73e:	4013      	ands	r3, r2
 800d740:	2b03      	cmp	r3, #3
 800d742:	d01d      	beq.n	800d780 <UART_SetConfig+0xf8>
 800d744:	d823      	bhi.n	800d78e <UART_SetConfig+0x106>
 800d746:	2b02      	cmp	r3, #2
 800d748:	d00c      	beq.n	800d764 <UART_SetConfig+0xdc>
 800d74a:	d820      	bhi.n	800d78e <UART_SetConfig+0x106>
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <UART_SetConfig+0xce>
 800d750:	2b01      	cmp	r3, #1
 800d752:	d00e      	beq.n	800d772 <UART_SetConfig+0xea>
 800d754:	e01b      	b.n	800d78e <UART_SetConfig+0x106>
 800d756:	231b      	movs	r3, #27
 800d758:	2220      	movs	r2, #32
 800d75a:	189b      	adds	r3, r3, r2
 800d75c:	19db      	adds	r3, r3, r7
 800d75e:	2200      	movs	r2, #0
 800d760:	701a      	strb	r2, [r3, #0]
 800d762:	e0b4      	b.n	800d8ce <UART_SetConfig+0x246>
 800d764:	231b      	movs	r3, #27
 800d766:	2220      	movs	r2, #32
 800d768:	189b      	adds	r3, r3, r2
 800d76a:	19db      	adds	r3, r3, r7
 800d76c:	2202      	movs	r2, #2
 800d76e:	701a      	strb	r2, [r3, #0]
 800d770:	e0ad      	b.n	800d8ce <UART_SetConfig+0x246>
 800d772:	231b      	movs	r3, #27
 800d774:	2220      	movs	r2, #32
 800d776:	189b      	adds	r3, r3, r2
 800d778:	19db      	adds	r3, r3, r7
 800d77a:	2204      	movs	r2, #4
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	e0a6      	b.n	800d8ce <UART_SetConfig+0x246>
 800d780:	231b      	movs	r3, #27
 800d782:	2220      	movs	r2, #32
 800d784:	189b      	adds	r3, r3, r2
 800d786:	19db      	adds	r3, r3, r7
 800d788:	2208      	movs	r2, #8
 800d78a:	701a      	strb	r2, [r3, #0]
 800d78c:	e09f      	b.n	800d8ce <UART_SetConfig+0x246>
 800d78e:	231b      	movs	r3, #27
 800d790:	2220      	movs	r2, #32
 800d792:	189b      	adds	r3, r3, r2
 800d794:	19db      	adds	r3, r3, r7
 800d796:	2210      	movs	r2, #16
 800d798:	701a      	strb	r2, [r3, #0]
 800d79a:	e098      	b.n	800d8ce <UART_SetConfig+0x246>
 800d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a7b      	ldr	r2, [pc, #492]	@ (800d990 <UART_SetConfig+0x308>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d131      	bne.n	800d80a <UART_SetConfig+0x182>
 800d7a6:	4b79      	ldr	r3, [pc, #484]	@ (800d98c <UART_SetConfig+0x304>)
 800d7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7aa:	220c      	movs	r2, #12
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	2b0c      	cmp	r3, #12
 800d7b0:	d01d      	beq.n	800d7ee <UART_SetConfig+0x166>
 800d7b2:	d823      	bhi.n	800d7fc <UART_SetConfig+0x174>
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d00c      	beq.n	800d7d2 <UART_SetConfig+0x14a>
 800d7b8:	d820      	bhi.n	800d7fc <UART_SetConfig+0x174>
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <UART_SetConfig+0x13c>
 800d7be:	2b04      	cmp	r3, #4
 800d7c0:	d00e      	beq.n	800d7e0 <UART_SetConfig+0x158>
 800d7c2:	e01b      	b.n	800d7fc <UART_SetConfig+0x174>
 800d7c4:	231b      	movs	r3, #27
 800d7c6:	2220      	movs	r2, #32
 800d7c8:	189b      	adds	r3, r3, r2
 800d7ca:	19db      	adds	r3, r3, r7
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	701a      	strb	r2, [r3, #0]
 800d7d0:	e07d      	b.n	800d8ce <UART_SetConfig+0x246>
 800d7d2:	231b      	movs	r3, #27
 800d7d4:	2220      	movs	r2, #32
 800d7d6:	189b      	adds	r3, r3, r2
 800d7d8:	19db      	adds	r3, r3, r7
 800d7da:	2202      	movs	r2, #2
 800d7dc:	701a      	strb	r2, [r3, #0]
 800d7de:	e076      	b.n	800d8ce <UART_SetConfig+0x246>
 800d7e0:	231b      	movs	r3, #27
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	189b      	adds	r3, r3, r2
 800d7e6:	19db      	adds	r3, r3, r7
 800d7e8:	2204      	movs	r2, #4
 800d7ea:	701a      	strb	r2, [r3, #0]
 800d7ec:	e06f      	b.n	800d8ce <UART_SetConfig+0x246>
 800d7ee:	231b      	movs	r3, #27
 800d7f0:	2220      	movs	r2, #32
 800d7f2:	189b      	adds	r3, r3, r2
 800d7f4:	19db      	adds	r3, r3, r7
 800d7f6:	2208      	movs	r2, #8
 800d7f8:	701a      	strb	r2, [r3, #0]
 800d7fa:	e068      	b.n	800d8ce <UART_SetConfig+0x246>
 800d7fc:	231b      	movs	r3, #27
 800d7fe:	2220      	movs	r2, #32
 800d800:	189b      	adds	r3, r3, r2
 800d802:	19db      	adds	r3, r3, r7
 800d804:	2210      	movs	r2, #16
 800d806:	701a      	strb	r2, [r3, #0]
 800d808:	e061      	b.n	800d8ce <UART_SetConfig+0x246>
 800d80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a61      	ldr	r2, [pc, #388]	@ (800d994 <UART_SetConfig+0x30c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d106      	bne.n	800d822 <UART_SetConfig+0x19a>
 800d814:	231b      	movs	r3, #27
 800d816:	2220      	movs	r2, #32
 800d818:	189b      	adds	r3, r3, r2
 800d81a:	19db      	adds	r3, r3, r7
 800d81c:	2200      	movs	r2, #0
 800d81e:	701a      	strb	r2, [r3, #0]
 800d820:	e055      	b.n	800d8ce <UART_SetConfig+0x246>
 800d822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a5c      	ldr	r2, [pc, #368]	@ (800d998 <UART_SetConfig+0x310>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d106      	bne.n	800d83a <UART_SetConfig+0x1b2>
 800d82c:	231b      	movs	r3, #27
 800d82e:	2220      	movs	r2, #32
 800d830:	189b      	adds	r3, r3, r2
 800d832:	19db      	adds	r3, r3, r7
 800d834:	2200      	movs	r2, #0
 800d836:	701a      	strb	r2, [r3, #0]
 800d838:	e049      	b.n	800d8ce <UART_SetConfig+0x246>
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a50      	ldr	r2, [pc, #320]	@ (800d980 <UART_SetConfig+0x2f8>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d13e      	bne.n	800d8c2 <UART_SetConfig+0x23a>
 800d844:	4b51      	ldr	r3, [pc, #324]	@ (800d98c <UART_SetConfig+0x304>)
 800d846:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d848:	23c0      	movs	r3, #192	@ 0xc0
 800d84a:	011b      	lsls	r3, r3, #4
 800d84c:	4013      	ands	r3, r2
 800d84e:	22c0      	movs	r2, #192	@ 0xc0
 800d850:	0112      	lsls	r2, r2, #4
 800d852:	4293      	cmp	r3, r2
 800d854:	d027      	beq.n	800d8a6 <UART_SetConfig+0x21e>
 800d856:	22c0      	movs	r2, #192	@ 0xc0
 800d858:	0112      	lsls	r2, r2, #4
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d82a      	bhi.n	800d8b4 <UART_SetConfig+0x22c>
 800d85e:	2280      	movs	r2, #128	@ 0x80
 800d860:	0112      	lsls	r2, r2, #4
 800d862:	4293      	cmp	r3, r2
 800d864:	d011      	beq.n	800d88a <UART_SetConfig+0x202>
 800d866:	2280      	movs	r2, #128	@ 0x80
 800d868:	0112      	lsls	r2, r2, #4
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d822      	bhi.n	800d8b4 <UART_SetConfig+0x22c>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d004      	beq.n	800d87c <UART_SetConfig+0x1f4>
 800d872:	2280      	movs	r2, #128	@ 0x80
 800d874:	00d2      	lsls	r2, r2, #3
 800d876:	4293      	cmp	r3, r2
 800d878:	d00e      	beq.n	800d898 <UART_SetConfig+0x210>
 800d87a:	e01b      	b.n	800d8b4 <UART_SetConfig+0x22c>
 800d87c:	231b      	movs	r3, #27
 800d87e:	2220      	movs	r2, #32
 800d880:	189b      	adds	r3, r3, r2
 800d882:	19db      	adds	r3, r3, r7
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
 800d888:	e021      	b.n	800d8ce <UART_SetConfig+0x246>
 800d88a:	231b      	movs	r3, #27
 800d88c:	2220      	movs	r2, #32
 800d88e:	189b      	adds	r3, r3, r2
 800d890:	19db      	adds	r3, r3, r7
 800d892:	2202      	movs	r2, #2
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	e01a      	b.n	800d8ce <UART_SetConfig+0x246>
 800d898:	231b      	movs	r3, #27
 800d89a:	2220      	movs	r2, #32
 800d89c:	189b      	adds	r3, r3, r2
 800d89e:	19db      	adds	r3, r3, r7
 800d8a0:	2204      	movs	r2, #4
 800d8a2:	701a      	strb	r2, [r3, #0]
 800d8a4:	e013      	b.n	800d8ce <UART_SetConfig+0x246>
 800d8a6:	231b      	movs	r3, #27
 800d8a8:	2220      	movs	r2, #32
 800d8aa:	189b      	adds	r3, r3, r2
 800d8ac:	19db      	adds	r3, r3, r7
 800d8ae:	2208      	movs	r2, #8
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	e00c      	b.n	800d8ce <UART_SetConfig+0x246>
 800d8b4:	231b      	movs	r3, #27
 800d8b6:	2220      	movs	r2, #32
 800d8b8:	189b      	adds	r3, r3, r2
 800d8ba:	19db      	adds	r3, r3, r7
 800d8bc:	2210      	movs	r2, #16
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	e005      	b.n	800d8ce <UART_SetConfig+0x246>
 800d8c2:	231b      	movs	r3, #27
 800d8c4:	2220      	movs	r2, #32
 800d8c6:	189b      	adds	r3, r3, r2
 800d8c8:	19db      	adds	r3, r3, r7
 800d8ca:	2210      	movs	r2, #16
 800d8cc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a2b      	ldr	r2, [pc, #172]	@ (800d980 <UART_SetConfig+0x2f8>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d000      	beq.n	800d8da <UART_SetConfig+0x252>
 800d8d8:	e0a9      	b.n	800da2e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d8da:	231b      	movs	r3, #27
 800d8dc:	2220      	movs	r2, #32
 800d8de:	189b      	adds	r3, r3, r2
 800d8e0:	19db      	adds	r3, r3, r7
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b08      	cmp	r3, #8
 800d8e6:	d015      	beq.n	800d914 <UART_SetConfig+0x28c>
 800d8e8:	dc18      	bgt.n	800d91c <UART_SetConfig+0x294>
 800d8ea:	2b04      	cmp	r3, #4
 800d8ec:	d00d      	beq.n	800d90a <UART_SetConfig+0x282>
 800d8ee:	dc15      	bgt.n	800d91c <UART_SetConfig+0x294>
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <UART_SetConfig+0x272>
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d005      	beq.n	800d904 <UART_SetConfig+0x27c>
 800d8f8:	e010      	b.n	800d91c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8fa:	f7fd f99f 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 800d8fe:	0003      	movs	r3, r0
 800d900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d902:	e014      	b.n	800d92e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d904:	4b25      	ldr	r3, [pc, #148]	@ (800d99c <UART_SetConfig+0x314>)
 800d906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d908:	e011      	b.n	800d92e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d90a:	f7fd f90b 	bl	800ab24 <HAL_RCC_GetSysClockFreq>
 800d90e:	0003      	movs	r3, r0
 800d910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d912:	e00c      	b.n	800d92e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d914:	2380      	movs	r3, #128	@ 0x80
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d91a:	e008      	b.n	800d92e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800d91c:	2300      	movs	r3, #0
 800d91e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d920:	231a      	movs	r3, #26
 800d922:	2220      	movs	r2, #32
 800d924:	189b      	adds	r3, r3, r2
 800d926:	19db      	adds	r3, r3, r7
 800d928:	2201      	movs	r2, #1
 800d92a:	701a      	strb	r2, [r3, #0]
        break;
 800d92c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d930:	2b00      	cmp	r3, #0
 800d932:	d100      	bne.n	800d936 <UART_SetConfig+0x2ae>
 800d934:	e14b      	b.n	800dbce <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d93a:	4b19      	ldr	r3, [pc, #100]	@ (800d9a0 <UART_SetConfig+0x318>)
 800d93c:	0052      	lsls	r2, r2, #1
 800d93e:	5ad3      	ldrh	r3, [r2, r3]
 800d940:	0019      	movs	r1, r3
 800d942:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d944:	f7f2 fbfc 	bl	8000140 <__udivsi3>
 800d948:	0003      	movs	r3, r0
 800d94a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	0013      	movs	r3, r2
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	189b      	adds	r3, r3, r2
 800d956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d958:	429a      	cmp	r2, r3
 800d95a:	d305      	bcc.n	800d968 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d964:	429a      	cmp	r2, r3
 800d966:	d91d      	bls.n	800d9a4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800d968:	231a      	movs	r3, #26
 800d96a:	2220      	movs	r2, #32
 800d96c:	189b      	adds	r3, r3, r2
 800d96e:	19db      	adds	r3, r3, r7
 800d970:	2201      	movs	r2, #1
 800d972:	701a      	strb	r2, [r3, #0]
 800d974:	e12b      	b.n	800dbce <UART_SetConfig+0x546>
 800d976:	46c0      	nop			@ (mov r8, r8)
 800d978:	cfff69f3 	.word	0xcfff69f3
 800d97c:	ffffcfff 	.word	0xffffcfff
 800d980:	40008000 	.word	0x40008000
 800d984:	11fff4ff 	.word	0x11fff4ff
 800d988:	40013800 	.word	0x40013800
 800d98c:	40021000 	.word	0x40021000
 800d990:	40004400 	.word	0x40004400
 800d994:	40004800 	.word	0x40004800
 800d998:	40004c00 	.word	0x40004c00
 800d99c:	00f42400 	.word	0x00f42400
 800d9a0:	0801767c 	.word	0x0801767c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a6:	61bb      	str	r3, [r7, #24]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9b0:	4b92      	ldr	r3, [pc, #584]	@ (800dbfc <UART_SetConfig+0x574>)
 800d9b2:	0052      	lsls	r2, r2, #1
 800d9b4:	5ad3      	ldrh	r3, [r2, r3]
 800d9b6:	613b      	str	r3, [r7, #16]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	69b8      	ldr	r0, [r7, #24]
 800d9c2:	69f9      	ldr	r1, [r7, #28]
 800d9c4:	f7f2 fdaa 	bl	800051c <__aeabi_uldivmod>
 800d9c8:	0002      	movs	r2, r0
 800d9ca:	000b      	movs	r3, r1
 800d9cc:	0e11      	lsrs	r1, r2, #24
 800d9ce:	021d      	lsls	r5, r3, #8
 800d9d0:	430d      	orrs	r5, r1
 800d9d2:	0214      	lsls	r4, r2, #8
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	085b      	lsrs	r3, r3, #1
 800d9da:	60bb      	str	r3, [r7, #8]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	60fb      	str	r3, [r7, #12]
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	68f9      	ldr	r1, [r7, #12]
 800d9e4:	1900      	adds	r0, r0, r4
 800d9e6:	4169      	adcs	r1, r5
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	603b      	str	r3, [r7, #0]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	607b      	str	r3, [r7, #4]
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f7f2 fd91 	bl	800051c <__aeabi_uldivmod>
 800d9fa:	0002      	movs	r2, r0
 800d9fc:	000b      	movs	r3, r1
 800d9fe:	0013      	movs	r3, r2
 800da00:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da04:	23c0      	movs	r3, #192	@ 0xc0
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	429a      	cmp	r2, r3
 800da0a:	d309      	bcc.n	800da20 <UART_SetConfig+0x398>
 800da0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da0e:	2380      	movs	r3, #128	@ 0x80
 800da10:	035b      	lsls	r3, r3, #13
 800da12:	429a      	cmp	r2, r3
 800da14:	d204      	bcs.n	800da20 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da1c:	60da      	str	r2, [r3, #12]
 800da1e:	e0d6      	b.n	800dbce <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800da20:	231a      	movs	r3, #26
 800da22:	2220      	movs	r2, #32
 800da24:	189b      	adds	r3, r3, r2
 800da26:	19db      	adds	r3, r3, r7
 800da28:	2201      	movs	r2, #1
 800da2a:	701a      	strb	r2, [r3, #0]
 800da2c:	e0cf      	b.n	800dbce <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da30:	69da      	ldr	r2, [r3, #28]
 800da32:	2380      	movs	r3, #128	@ 0x80
 800da34:	021b      	lsls	r3, r3, #8
 800da36:	429a      	cmp	r2, r3
 800da38:	d000      	beq.n	800da3c <UART_SetConfig+0x3b4>
 800da3a:	e070      	b.n	800db1e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800da3c:	231b      	movs	r3, #27
 800da3e:	2220      	movs	r2, #32
 800da40:	189b      	adds	r3, r3, r2
 800da42:	19db      	adds	r3, r3, r7
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b08      	cmp	r3, #8
 800da48:	d015      	beq.n	800da76 <UART_SetConfig+0x3ee>
 800da4a:	dc18      	bgt.n	800da7e <UART_SetConfig+0x3f6>
 800da4c:	2b04      	cmp	r3, #4
 800da4e:	d00d      	beq.n	800da6c <UART_SetConfig+0x3e4>
 800da50:	dc15      	bgt.n	800da7e <UART_SetConfig+0x3f6>
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <UART_SetConfig+0x3d4>
 800da56:	2b02      	cmp	r3, #2
 800da58:	d005      	beq.n	800da66 <UART_SetConfig+0x3de>
 800da5a:	e010      	b.n	800da7e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da5c:	f7fd f8ee 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 800da60:	0003      	movs	r3, r0
 800da62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da64:	e014      	b.n	800da90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da66:	4b66      	ldr	r3, [pc, #408]	@ (800dc00 <UART_SetConfig+0x578>)
 800da68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da6a:	e011      	b.n	800da90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da6c:	f7fd f85a 	bl	800ab24 <HAL_RCC_GetSysClockFreq>
 800da70:	0003      	movs	r3, r0
 800da72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da74:	e00c      	b.n	800da90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da76:	2380      	movs	r3, #128	@ 0x80
 800da78:	021b      	lsls	r3, r3, #8
 800da7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da7c:	e008      	b.n	800da90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800da7e:	2300      	movs	r3, #0
 800da80:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800da82:	231a      	movs	r3, #26
 800da84:	2220      	movs	r2, #32
 800da86:	189b      	adds	r3, r3, r2
 800da88:	19db      	adds	r3, r3, r7
 800da8a:	2201      	movs	r2, #1
 800da8c:	701a      	strb	r2, [r3, #0]
        break;
 800da8e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da92:	2b00      	cmp	r3, #0
 800da94:	d100      	bne.n	800da98 <UART_SetConfig+0x410>
 800da96:	e09a      	b.n	800dbce <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da9c:	4b57      	ldr	r3, [pc, #348]	@ (800dbfc <UART_SetConfig+0x574>)
 800da9e:	0052      	lsls	r2, r2, #1
 800daa0:	5ad3      	ldrh	r3, [r2, r3]
 800daa2:	0019      	movs	r1, r3
 800daa4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800daa6:	f7f2 fb4b 	bl	8000140 <__udivsi3>
 800daaa:	0003      	movs	r3, r0
 800daac:	005a      	lsls	r2, r3, #1
 800daae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	18d2      	adds	r2, r2, r3
 800dab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	0019      	movs	r1, r3
 800dabc:	0010      	movs	r0, r2
 800dabe:	f7f2 fb3f 	bl	8000140 <__udivsi3>
 800dac2:	0003      	movs	r3, r0
 800dac4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac8:	2b0f      	cmp	r3, #15
 800daca:	d921      	bls.n	800db10 <UART_SetConfig+0x488>
 800dacc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dace:	2380      	movs	r3, #128	@ 0x80
 800dad0:	025b      	lsls	r3, r3, #9
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d21c      	bcs.n	800db10 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad8:	b29a      	uxth	r2, r3
 800dada:	200e      	movs	r0, #14
 800dadc:	2420      	movs	r4, #32
 800dade:	1903      	adds	r3, r0, r4
 800dae0:	19db      	adds	r3, r3, r7
 800dae2:	210f      	movs	r1, #15
 800dae4:	438a      	bics	r2, r1
 800dae6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daea:	085b      	lsrs	r3, r3, #1
 800daec:	b29b      	uxth	r3, r3
 800daee:	2207      	movs	r2, #7
 800daf0:	4013      	ands	r3, r2
 800daf2:	b299      	uxth	r1, r3
 800daf4:	1903      	adds	r3, r0, r4
 800daf6:	19db      	adds	r3, r3, r7
 800daf8:	1902      	adds	r2, r0, r4
 800dafa:	19d2      	adds	r2, r2, r7
 800dafc:	8812      	ldrh	r2, [r2, #0]
 800dafe:	430a      	orrs	r2, r1
 800db00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800db02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	1902      	adds	r2, r0, r4
 800db08:	19d2      	adds	r2, r2, r7
 800db0a:	8812      	ldrh	r2, [r2, #0]
 800db0c:	60da      	str	r2, [r3, #12]
 800db0e:	e05e      	b.n	800dbce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800db10:	231a      	movs	r3, #26
 800db12:	2220      	movs	r2, #32
 800db14:	189b      	adds	r3, r3, r2
 800db16:	19db      	adds	r3, r3, r7
 800db18:	2201      	movs	r2, #1
 800db1a:	701a      	strb	r2, [r3, #0]
 800db1c:	e057      	b.n	800dbce <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800db1e:	231b      	movs	r3, #27
 800db20:	2220      	movs	r2, #32
 800db22:	189b      	adds	r3, r3, r2
 800db24:	19db      	adds	r3, r3, r7
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b08      	cmp	r3, #8
 800db2a:	d015      	beq.n	800db58 <UART_SetConfig+0x4d0>
 800db2c:	dc18      	bgt.n	800db60 <UART_SetConfig+0x4d8>
 800db2e:	2b04      	cmp	r3, #4
 800db30:	d00d      	beq.n	800db4e <UART_SetConfig+0x4c6>
 800db32:	dc15      	bgt.n	800db60 <UART_SetConfig+0x4d8>
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <UART_SetConfig+0x4b6>
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d005      	beq.n	800db48 <UART_SetConfig+0x4c0>
 800db3c:	e010      	b.n	800db60 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db3e:	f7fd f87d 	bl	800ac3c <HAL_RCC_GetPCLK1Freq>
 800db42:	0003      	movs	r3, r0
 800db44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db46:	e014      	b.n	800db72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db48:	4b2d      	ldr	r3, [pc, #180]	@ (800dc00 <UART_SetConfig+0x578>)
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db4c:	e011      	b.n	800db72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db4e:	f7fc ffe9 	bl	800ab24 <HAL_RCC_GetSysClockFreq>
 800db52:	0003      	movs	r3, r0
 800db54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db56:	e00c      	b.n	800db72 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db58:	2380      	movs	r3, #128	@ 0x80
 800db5a:	021b      	lsls	r3, r3, #8
 800db5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db5e:	e008      	b.n	800db72 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800db60:	2300      	movs	r3, #0
 800db62:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800db64:	231a      	movs	r3, #26
 800db66:	2220      	movs	r2, #32
 800db68:	189b      	adds	r3, r3, r2
 800db6a:	19db      	adds	r3, r3, r7
 800db6c:	2201      	movs	r2, #1
 800db6e:	701a      	strb	r2, [r3, #0]
        break;
 800db70:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800db72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db74:	2b00      	cmp	r3, #0
 800db76:	d02a      	beq.n	800dbce <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db7c:	4b1f      	ldr	r3, [pc, #124]	@ (800dbfc <UART_SetConfig+0x574>)
 800db7e:	0052      	lsls	r2, r2, #1
 800db80:	5ad3      	ldrh	r3, [r2, r3]
 800db82:	0019      	movs	r1, r3
 800db84:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800db86:	f7f2 fadb 	bl	8000140 <__udivsi3>
 800db8a:	0003      	movs	r3, r0
 800db8c:	001a      	movs	r2, r3
 800db8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	085b      	lsrs	r3, r3, #1
 800db94:	18d2      	adds	r2, r2, r3
 800db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	0019      	movs	r1, r3
 800db9c:	0010      	movs	r0, r2
 800db9e:	f7f2 facf 	bl	8000140 <__udivsi3>
 800dba2:	0003      	movs	r3, r0
 800dba4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba8:	2b0f      	cmp	r3, #15
 800dbaa:	d90a      	bls.n	800dbc2 <UART_SetConfig+0x53a>
 800dbac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbae:	2380      	movs	r3, #128	@ 0x80
 800dbb0:	025b      	lsls	r3, r3, #9
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d205      	bcs.n	800dbc2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	60da      	str	r2, [r3, #12]
 800dbc0:	e005      	b.n	800dbce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800dbc2:	231a      	movs	r3, #26
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	189b      	adds	r3, r3, r2
 800dbc8:	19db      	adds	r3, r3, r7
 800dbca:	2201      	movs	r2, #1
 800dbcc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	226a      	movs	r2, #106	@ 0x6a
 800dbd2:	2101      	movs	r1, #1
 800dbd4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd8:	2268      	movs	r2, #104	@ 0x68
 800dbda:	2101      	movs	r1, #1
 800dbdc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dbea:	231a      	movs	r3, #26
 800dbec:	2220      	movs	r2, #32
 800dbee:	189b      	adds	r3, r3, r2
 800dbf0:	19db      	adds	r3, r3, r7
 800dbf2:	781b      	ldrb	r3, [r3, #0]
}
 800dbf4:	0018      	movs	r0, r3
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	b010      	add	sp, #64	@ 0x40
 800dbfa:	bdb0      	pop	{r4, r5, r7, pc}
 800dbfc:	0801767c 	.word	0x0801767c
 800dc00:	00f42400 	.word	0x00f42400

0800dc04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc10:	2208      	movs	r2, #8
 800dc12:	4013      	ands	r3, r2
 800dc14:	d00b      	beq.n	800dc2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	4a4a      	ldr	r2, [pc, #296]	@ (800dd48 <UART_AdvFeatureConfig+0x144>)
 800dc1e:	4013      	ands	r3, r2
 800dc20:	0019      	movs	r1, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	430a      	orrs	r2, r1
 800dc2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc32:	2201      	movs	r2, #1
 800dc34:	4013      	ands	r3, r2
 800dc36:	d00b      	beq.n	800dc50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	4a43      	ldr	r2, [pc, #268]	@ (800dd4c <UART_AdvFeatureConfig+0x148>)
 800dc40:	4013      	ands	r3, r2
 800dc42:	0019      	movs	r1, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	430a      	orrs	r2, r1
 800dc4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc54:	2202      	movs	r2, #2
 800dc56:	4013      	ands	r3, r2
 800dc58:	d00b      	beq.n	800dc72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	4a3b      	ldr	r2, [pc, #236]	@ (800dd50 <UART_AdvFeatureConfig+0x14c>)
 800dc62:	4013      	ands	r3, r2
 800dc64:	0019      	movs	r1, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc76:	2204      	movs	r2, #4
 800dc78:	4013      	ands	r3, r2
 800dc7a:	d00b      	beq.n	800dc94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	4a34      	ldr	r2, [pc, #208]	@ (800dd54 <UART_AdvFeatureConfig+0x150>)
 800dc84:	4013      	ands	r3, r2
 800dc86:	0019      	movs	r1, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	430a      	orrs	r2, r1
 800dc92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc98:	2210      	movs	r2, #16
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	d00b      	beq.n	800dcb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	4a2c      	ldr	r2, [pc, #176]	@ (800dd58 <UART_AdvFeatureConfig+0x154>)
 800dca6:	4013      	ands	r3, r2
 800dca8:	0019      	movs	r1, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcba:	2220      	movs	r2, #32
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	d00b      	beq.n	800dcd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	4a25      	ldr	r2, [pc, #148]	@ (800dd5c <UART_AdvFeatureConfig+0x158>)
 800dcc8:	4013      	ands	r3, r2
 800dcca:	0019      	movs	r1, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	430a      	orrs	r2, r1
 800dcd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcdc:	2240      	movs	r2, #64	@ 0x40
 800dcde:	4013      	ands	r3, r2
 800dce0:	d01d      	beq.n	800dd1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd60 <UART_AdvFeatureConfig+0x15c>)
 800dcea:	4013      	ands	r3, r2
 800dcec:	0019      	movs	r1, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	430a      	orrs	r2, r1
 800dcf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcfe:	2380      	movs	r3, #128	@ 0x80
 800dd00:	035b      	lsls	r3, r3, #13
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d10b      	bne.n	800dd1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	4a15      	ldr	r2, [pc, #84]	@ (800dd64 <UART_AdvFeatureConfig+0x160>)
 800dd0e:	4013      	ands	r3, r2
 800dd10:	0019      	movs	r1, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd22:	2280      	movs	r2, #128	@ 0x80
 800dd24:	4013      	ands	r3, r2
 800dd26:	d00b      	beq.n	800dd40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd68 <UART_AdvFeatureConfig+0x164>)
 800dd30:	4013      	ands	r3, r2
 800dd32:	0019      	movs	r1, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	430a      	orrs	r2, r1
 800dd3e:	605a      	str	r2, [r3, #4]
  }
}
 800dd40:	46c0      	nop			@ (mov r8, r8)
 800dd42:	46bd      	mov	sp, r7
 800dd44:	b002      	add	sp, #8
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	ffff7fff 	.word	0xffff7fff
 800dd4c:	fffdffff 	.word	0xfffdffff
 800dd50:	fffeffff 	.word	0xfffeffff
 800dd54:	fffbffff 	.word	0xfffbffff
 800dd58:	ffffefff 	.word	0xffffefff
 800dd5c:	ffffdfff 	.word	0xffffdfff
 800dd60:	ffefffff 	.word	0xffefffff
 800dd64:	ff9fffff 	.word	0xff9fffff
 800dd68:	fff7ffff 	.word	0xfff7ffff

0800dd6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b092      	sub	sp, #72	@ 0x48
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2290      	movs	r2, #144	@ 0x90
 800dd78:	2100      	movs	r1, #0
 800dd7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd7c:	f7fa faa6 	bl	80082cc <HAL_GetTick>
 800dd80:	0003      	movs	r3, r0
 800dd82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2208      	movs	r2, #8
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	2b08      	cmp	r3, #8
 800dd90:	d12d      	bne.n	800ddee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd94:	2280      	movs	r2, #128	@ 0x80
 800dd96:	0391      	lsls	r1, r2, #14
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	4a47      	ldr	r2, [pc, #284]	@ (800deb8 <UART_CheckIdleState+0x14c>)
 800dd9c:	9200      	str	r2, [sp, #0]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f000 f88e 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800dda4:	1e03      	subs	r3, r0, #0
 800dda6:	d022      	beq.n	800ddee <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dda8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ddae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ddb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb8:	f383 8810 	msr	PRIMASK, r3
}
 800ddbc:	46c0      	nop			@ (mov r8, r8)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2180      	movs	r1, #128	@ 0x80
 800ddca:	438a      	bics	r2, r1
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd4:	f383 8810 	msr	PRIMASK, r3
}
 800ddd8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2288      	movs	r2, #136	@ 0x88
 800ddde:	2120      	movs	r1, #32
 800dde0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2284      	movs	r2, #132	@ 0x84
 800dde6:	2100      	movs	r1, #0
 800dde8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddea:	2303      	movs	r3, #3
 800ddec:	e060      	b.n	800deb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2204      	movs	r2, #4
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	2b04      	cmp	r3, #4
 800ddfa:	d146      	bne.n	800de8a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfe:	2280      	movs	r2, #128	@ 0x80
 800de00:	03d1      	lsls	r1, r2, #15
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4a2c      	ldr	r2, [pc, #176]	@ (800deb8 <UART_CheckIdleState+0x14c>)
 800de06:	9200      	str	r2, [sp, #0]
 800de08:	2200      	movs	r2, #0
 800de0a:	f000 f859 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800de0e:	1e03      	subs	r3, r0, #0
 800de10:	d03b      	beq.n	800de8a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de12:	f3ef 8310 	mrs	r3, PRIMASK
 800de16:	60fb      	str	r3, [r7, #12]
  return(result);
 800de18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de1c:	2301      	movs	r3, #1
 800de1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	f383 8810 	msr	PRIMASK, r3
}
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4922      	ldr	r1, [pc, #136]	@ (800debc <UART_CheckIdleState+0x150>)
 800de34:	400a      	ands	r2, r1
 800de36:	601a      	str	r2, [r3, #0]
 800de38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	f383 8810 	msr	PRIMASK, r3
}
 800de42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de44:	f3ef 8310 	mrs	r3, PRIMASK
 800de48:	61bb      	str	r3, [r7, #24]
  return(result);
 800de4a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800de4e:	2301      	movs	r3, #1
 800de50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	f383 8810 	msr	PRIMASK, r3
}
 800de58:	46c0      	nop			@ (mov r8, r8)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	689a      	ldr	r2, [r3, #8]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2101      	movs	r1, #1
 800de66:	438a      	bics	r2, r1
 800de68:	609a      	str	r2, [r3, #8]
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	f383 8810 	msr	PRIMASK, r3
}
 800de74:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	228c      	movs	r2, #140	@ 0x8c
 800de7a:	2120      	movs	r1, #32
 800de7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2284      	movs	r2, #132	@ 0x84
 800de82:	2100      	movs	r1, #0
 800de84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	e012      	b.n	800deb0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2288      	movs	r2, #136	@ 0x88
 800de8e:	2120      	movs	r1, #32
 800de90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	228c      	movs	r2, #140	@ 0x8c
 800de96:	2120      	movs	r1, #32
 800de98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2284      	movs	r2, #132	@ 0x84
 800deaa:	2100      	movs	r1, #0
 800deac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	0018      	movs	r0, r3
 800deb2:	46bd      	mov	sp, r7
 800deb4:	b010      	add	sp, #64	@ 0x40
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	01ffffff 	.word	0x01ffffff
 800debc:	fffffedf 	.word	0xfffffedf

0800dec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	1dfb      	adds	r3, r7, #7
 800dece:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ded0:	e051      	b.n	800df76 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	3301      	adds	r3, #1
 800ded6:	d04e      	beq.n	800df76 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ded8:	f7fa f9f8 	bl	80082cc <HAL_GetTick>
 800dedc:	0002      	movs	r2, r0
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d302      	bcc.n	800deee <UART_WaitOnFlagUntilTimeout+0x2e>
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d101      	bne.n	800def2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800deee:	2303      	movs	r3, #3
 800def0:	e051      	b.n	800df96 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2204      	movs	r2, #4
 800defa:	4013      	ands	r3, r2
 800defc:	d03b      	beq.n	800df76 <UART_WaitOnFlagUntilTimeout+0xb6>
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2b80      	cmp	r3, #128	@ 0x80
 800df02:	d038      	beq.n	800df76 <UART_WaitOnFlagUntilTimeout+0xb6>
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	2b40      	cmp	r3, #64	@ 0x40
 800df08:	d035      	beq.n	800df76 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	69db      	ldr	r3, [r3, #28]
 800df10:	2208      	movs	r2, #8
 800df12:	4013      	ands	r3, r2
 800df14:	2b08      	cmp	r3, #8
 800df16:	d111      	bne.n	800df3c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2208      	movs	r2, #8
 800df1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	0018      	movs	r0, r3
 800df24:	f000 f960 	bl	800e1e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2290      	movs	r2, #144	@ 0x90
 800df2c:	2108      	movs	r1, #8
 800df2e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2284      	movs	r2, #132	@ 0x84
 800df34:	2100      	movs	r1, #0
 800df36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	e02c      	b.n	800df96 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	69da      	ldr	r2, [r3, #28]
 800df42:	2380      	movs	r3, #128	@ 0x80
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	401a      	ands	r2, r3
 800df48:	2380      	movs	r3, #128	@ 0x80
 800df4a:	011b      	lsls	r3, r3, #4
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d112      	bne.n	800df76 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2280      	movs	r2, #128	@ 0x80
 800df56:	0112      	lsls	r2, r2, #4
 800df58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	0018      	movs	r0, r3
 800df5e:	f000 f943 	bl	800e1e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2290      	movs	r2, #144	@ 0x90
 800df66:	2120      	movs	r1, #32
 800df68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2284      	movs	r2, #132	@ 0x84
 800df6e:	2100      	movs	r1, #0
 800df70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800df72:	2303      	movs	r3, #3
 800df74:	e00f      	b.n	800df96 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	4013      	ands	r3, r2
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	425a      	negs	r2, r3
 800df86:	4153      	adcs	r3, r2
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	001a      	movs	r2, r3
 800df8c:	1dfb      	adds	r3, r7, #7
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	429a      	cmp	r2, r3
 800df92:	d09e      	beq.n	800ded2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	0018      	movs	r0, r3
 800df98:	46bd      	mov	sp, r7
 800df9a:	b004      	add	sp, #16
 800df9c:	bd80      	pop	{r7, pc}
	...

0800dfa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b098      	sub	sp, #96	@ 0x60
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	1dbb      	adds	r3, r7, #6
 800dfac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	1dba      	adds	r2, r7, #6
 800dfb8:	215c      	movs	r1, #92	@ 0x5c
 800dfba:	8812      	ldrh	r2, [r2, #0]
 800dfbc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	1dba      	adds	r2, r7, #6
 800dfc2:	215e      	movs	r1, #94	@ 0x5e
 800dfc4:	8812      	ldrh	r2, [r2, #0]
 800dfc6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	689a      	ldr	r2, [r3, #8]
 800dfd2:	2380      	movs	r3, #128	@ 0x80
 800dfd4:	015b      	lsls	r3, r3, #5
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d10d      	bne.n	800dff6 <UART_Start_Receive_IT+0x56>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d104      	bne.n	800dfec <UART_Start_Receive_IT+0x4c>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2260      	movs	r2, #96	@ 0x60
 800dfe6:	497b      	ldr	r1, [pc, #492]	@ (800e1d4 <UART_Start_Receive_IT+0x234>)
 800dfe8:	5299      	strh	r1, [r3, r2]
 800dfea:	e02e      	b.n	800e04a <UART_Start_Receive_IT+0xaa>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2260      	movs	r2, #96	@ 0x60
 800dff0:	21ff      	movs	r1, #255	@ 0xff
 800dff2:	5299      	strh	r1, [r3, r2]
 800dff4:	e029      	b.n	800e04a <UART_Start_Receive_IT+0xaa>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10d      	bne.n	800e01a <UART_Start_Receive_IT+0x7a>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d104      	bne.n	800e010 <UART_Start_Receive_IT+0x70>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2260      	movs	r2, #96	@ 0x60
 800e00a:	21ff      	movs	r1, #255	@ 0xff
 800e00c:	5299      	strh	r1, [r3, r2]
 800e00e:	e01c      	b.n	800e04a <UART_Start_Receive_IT+0xaa>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2260      	movs	r2, #96	@ 0x60
 800e014:	217f      	movs	r1, #127	@ 0x7f
 800e016:	5299      	strh	r1, [r3, r2]
 800e018:	e017      	b.n	800e04a <UART_Start_Receive_IT+0xaa>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	689a      	ldr	r2, [r3, #8]
 800e01e:	2380      	movs	r3, #128	@ 0x80
 800e020:	055b      	lsls	r3, r3, #21
 800e022:	429a      	cmp	r2, r3
 800e024:	d10d      	bne.n	800e042 <UART_Start_Receive_IT+0xa2>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	691b      	ldr	r3, [r3, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d104      	bne.n	800e038 <UART_Start_Receive_IT+0x98>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2260      	movs	r2, #96	@ 0x60
 800e032:	217f      	movs	r1, #127	@ 0x7f
 800e034:	5299      	strh	r1, [r3, r2]
 800e036:	e008      	b.n	800e04a <UART_Start_Receive_IT+0xaa>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2260      	movs	r2, #96	@ 0x60
 800e03c:	213f      	movs	r1, #63	@ 0x3f
 800e03e:	5299      	strh	r1, [r3, r2]
 800e040:	e003      	b.n	800e04a <UART_Start_Receive_IT+0xaa>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2260      	movs	r2, #96	@ 0x60
 800e046:	2100      	movs	r1, #0
 800e048:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2290      	movs	r2, #144	@ 0x90
 800e04e:	2100      	movs	r1, #0
 800e050:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	228c      	movs	r2, #140	@ 0x8c
 800e056:	2122      	movs	r1, #34	@ 0x22
 800e058:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e05a:	f3ef 8310 	mrs	r3, PRIMASK
 800e05e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800e060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e064:	2301      	movs	r3, #1
 800e066:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e06a:	f383 8810 	msr	PRIMASK, r3
}
 800e06e:	46c0      	nop			@ (mov r8, r8)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	689a      	ldr	r2, [r3, #8]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2101      	movs	r1, #1
 800e07c:	430a      	orrs	r2, r1
 800e07e:	609a      	str	r2, [r3, #8]
 800e080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e082:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e086:	f383 8810 	msr	PRIMASK, r3
}
 800e08a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e090:	2380      	movs	r3, #128	@ 0x80
 800e092:	059b      	lsls	r3, r3, #22
 800e094:	429a      	cmp	r2, r3
 800e096:	d150      	bne.n	800e13a <UART_Start_Receive_IT+0x19a>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2268      	movs	r2, #104	@ 0x68
 800e09c:	5a9b      	ldrh	r3, [r3, r2]
 800e09e:	1dba      	adds	r2, r7, #6
 800e0a0:	8812      	ldrh	r2, [r2, #0]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d349      	bcc.n	800e13a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	689a      	ldr	r2, [r3, #8]
 800e0aa:	2380      	movs	r3, #128	@ 0x80
 800e0ac:	015b      	lsls	r3, r3, #5
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d107      	bne.n	800e0c2 <UART_Start_Receive_IT+0x122>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d103      	bne.n	800e0c2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	4a46      	ldr	r2, [pc, #280]	@ (800e1d8 <UART_Start_Receive_IT+0x238>)
 800e0be:	675a      	str	r2, [r3, #116]	@ 0x74
 800e0c0:	e002      	b.n	800e0c8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	4a45      	ldr	r2, [pc, #276]	@ (800e1dc <UART_Start_Receive_IT+0x23c>)
 800e0c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d019      	beq.n	800e104 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0d0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800e0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0da:	2301      	movs	r3, #1
 800e0dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e0:	f383 8810 	msr	PRIMASK, r3
}
 800e0e4:	46c0      	nop			@ (mov r8, r8)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2180      	movs	r1, #128	@ 0x80
 800e0f2:	0049      	lsls	r1, r1, #1
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	601a      	str	r2, [r3, #0]
 800e0f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0fe:	f383 8810 	msr	PRIMASK, r3
}
 800e102:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e104:	f3ef 8310 	mrs	r3, PRIMASK
 800e108:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800e10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e10c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e10e:	2301      	movs	r3, #1
 800e110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e114:	f383 8810 	msr	PRIMASK, r3
}
 800e118:	46c0      	nop			@ (mov r8, r8)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689a      	ldr	r2, [r3, #8]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2180      	movs	r1, #128	@ 0x80
 800e126:	0549      	lsls	r1, r1, #21
 800e128:	430a      	orrs	r2, r1
 800e12a:	609a      	str	r2, [r3, #8]
 800e12c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e12e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e132:	f383 8810 	msr	PRIMASK, r3
}
 800e136:	46c0      	nop			@ (mov r8, r8)
 800e138:	e047      	b.n	800e1ca <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	689a      	ldr	r2, [r3, #8]
 800e13e:	2380      	movs	r3, #128	@ 0x80
 800e140:	015b      	lsls	r3, r3, #5
 800e142:	429a      	cmp	r2, r3
 800e144:	d107      	bne.n	800e156 <UART_Start_Receive_IT+0x1b6>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d103      	bne.n	800e156 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	4a23      	ldr	r2, [pc, #140]	@ (800e1e0 <UART_Start_Receive_IT+0x240>)
 800e152:	675a      	str	r2, [r3, #116]	@ 0x74
 800e154:	e002      	b.n	800e15c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4a22      	ldr	r2, [pc, #136]	@ (800e1e4 <UART_Start_Receive_IT+0x244>)
 800e15a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d019      	beq.n	800e198 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e164:	f3ef 8310 	mrs	r3, PRIMASK
 800e168:	61fb      	str	r3, [r7, #28]
  return(result);
 800e16a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e16e:	2301      	movs	r3, #1
 800e170:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	f383 8810 	msr	PRIMASK, r3
}
 800e178:	46c0      	nop			@ (mov r8, r8)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2190      	movs	r1, #144	@ 0x90
 800e186:	0049      	lsls	r1, r1, #1
 800e188:	430a      	orrs	r2, r1
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e18e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e192:	f383 8810 	msr	PRIMASK, r3
}
 800e196:	e018      	b.n	800e1ca <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e198:	f3ef 8310 	mrs	r3, PRIMASK
 800e19c:	613b      	str	r3, [r7, #16]
  return(result);
 800e19e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e1a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f383 8810 	msr	PRIMASK, r3
}
 800e1ac:	46c0      	nop			@ (mov r8, r8)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2120      	movs	r1, #32
 800e1ba:	430a      	orrs	r2, r1
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	f383 8810 	msr	PRIMASK, r3
}
 800e1c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	0018      	movs	r0, r3
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	b018      	add	sp, #96	@ 0x60
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	000001ff 	.word	0x000001ff
 800e1d8:	0800ed55 	.word	0x0800ed55
 800e1dc:	0800ea15 	.word	0x0800ea15
 800e1e0:	0800e851 	.word	0x0800e851
 800e1e4:	0800e68d 	.word	0x0800e68d

0800e1e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08e      	sub	sp, #56	@ 0x38
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e1f4:	617b      	str	r3, [r7, #20]
  return(result);
 800e1f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	f383 8810 	msr	PRIMASK, r3
}
 800e204:	46c0      	nop			@ (mov r8, r8)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4926      	ldr	r1, [pc, #152]	@ (800e2ac <UART_EndRxTransfer+0xc4>)
 800e212:	400a      	ands	r2, r1
 800e214:	601a      	str	r2, [r3, #0]
 800e216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	f383 8810 	msr	PRIMASK, r3
}
 800e220:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e222:	f3ef 8310 	mrs	r3, PRIMASK
 800e226:	623b      	str	r3, [r7, #32]
  return(result);
 800e228:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e22a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e22c:	2301      	movs	r3, #1
 800e22e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e232:	f383 8810 	msr	PRIMASK, r3
}
 800e236:	46c0      	nop			@ (mov r8, r8)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	689a      	ldr	r2, [r3, #8]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	491b      	ldr	r1, [pc, #108]	@ (800e2b0 <UART_EndRxTransfer+0xc8>)
 800e244:	400a      	ands	r2, r1
 800e246:	609a      	str	r2, [r3, #8]
 800e248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24e:	f383 8810 	msr	PRIMASK, r3
}
 800e252:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d118      	bne.n	800e28e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e25c:	f3ef 8310 	mrs	r3, PRIMASK
 800e260:	60bb      	str	r3, [r7, #8]
  return(result);
 800e262:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e266:	2301      	movs	r3, #1
 800e268:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f383 8810 	msr	PRIMASK, r3
}
 800e270:	46c0      	nop			@ (mov r8, r8)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2110      	movs	r1, #16
 800e27e:	438a      	bics	r2, r1
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f383 8810 	msr	PRIMASK, r3
}
 800e28c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	228c      	movs	r2, #140	@ 0x8c
 800e292:	2120      	movs	r1, #32
 800e294:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e2a2:	46c0      	nop			@ (mov r8, r8)
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	b00e      	add	sp, #56	@ 0x38
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	46c0      	nop			@ (mov r8, r8)
 800e2ac:	fffffedf 	.word	0xfffffedf
 800e2b0:	effffffe 	.word	0xeffffffe

0800e2b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	225e      	movs	r2, #94	@ 0x5e
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2256      	movs	r2, #86	@ 0x56
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	0018      	movs	r0, r3
 800e2d6:	f7ff f9c3 	bl	800d660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2da:	46c0      	nop			@ (mov r8, r8)
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	b004      	add	sp, #16
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b08a      	sub	sp, #40	@ 0x28
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2288      	movs	r2, #136	@ 0x88
 800e2ee:	589b      	ldr	r3, [r3, r2]
 800e2f0:	2b21      	cmp	r3, #33	@ 0x21
 800e2f2:	d14c      	bne.n	800e38e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2256      	movs	r2, #86	@ 0x56
 800e2f8:	5a9b      	ldrh	r3, [r3, r2]
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d132      	bne.n	800e366 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e300:	f3ef 8310 	mrs	r3, PRIMASK
 800e304:	60bb      	str	r3, [r7, #8]
  return(result);
 800e306:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e308:	627b      	str	r3, [r7, #36]	@ 0x24
 800e30a:	2301      	movs	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f383 8810 	msr	PRIMASK, r3
}
 800e314:	46c0      	nop			@ (mov r8, r8)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2180      	movs	r1, #128	@ 0x80
 800e322:	438a      	bics	r2, r1
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	f383 8810 	msr	PRIMASK, r3
}
 800e330:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e332:	f3ef 8310 	mrs	r3, PRIMASK
 800e336:	617b      	str	r3, [r7, #20]
  return(result);
 800e338:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e33a:	623b      	str	r3, [r7, #32]
 800e33c:	2301      	movs	r3, #1
 800e33e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	f383 8810 	msr	PRIMASK, r3
}
 800e346:	46c0      	nop			@ (mov r8, r8)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2140      	movs	r1, #64	@ 0x40
 800e354:	430a      	orrs	r2, r1
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	f383 8810 	msr	PRIMASK, r3
}
 800e362:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e364:	e013      	b.n	800e38e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e36a:	781a      	ldrb	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2256      	movs	r2, #86	@ 0x56
 800e380:	5a9b      	ldrh	r3, [r3, r2]
 800e382:	b29b      	uxth	r3, r3
 800e384:	3b01      	subs	r3, #1
 800e386:	b299      	uxth	r1, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2256      	movs	r2, #86	@ 0x56
 800e38c:	5299      	strh	r1, [r3, r2]
}
 800e38e:	46c0      	nop			@ (mov r8, r8)
 800e390:	46bd      	mov	sp, r7
 800e392:	b00a      	add	sp, #40	@ 0x28
 800e394:	bd80      	pop	{r7, pc}

0800e396 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b08c      	sub	sp, #48	@ 0x30
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2288      	movs	r2, #136	@ 0x88
 800e3a2:	589b      	ldr	r3, [r3, r2]
 800e3a4:	2b21      	cmp	r3, #33	@ 0x21
 800e3a6:	d151      	bne.n	800e44c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2256      	movs	r2, #86	@ 0x56
 800e3ac:	5a9b      	ldrh	r3, [r3, r2]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d132      	bne.n	800e41a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800e3b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e3be:	2301      	movs	r3, #1
 800e3c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	f383 8810 	msr	PRIMASK, r3
}
 800e3c8:	46c0      	nop			@ (mov r8, r8)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2180      	movs	r1, #128	@ 0x80
 800e3d6:	438a      	bics	r2, r1
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f383 8810 	msr	PRIMASK, r3
}
 800e3e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e3ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800e3ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	f383 8810 	msr	PRIMASK, r3
}
 800e3fa:	46c0      	nop			@ (mov r8, r8)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2140      	movs	r1, #64	@ 0x40
 800e408:	430a      	orrs	r2, r1
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	f383 8810 	msr	PRIMASK, r3
}
 800e416:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e418:	e018      	b.n	800e44c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	001a      	movs	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	05d2      	lsls	r2, r2, #23
 800e42c:	0dd2      	lsrs	r2, r2, #23
 800e42e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e434:	1c9a      	adds	r2, r3, #2
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2256      	movs	r2, #86	@ 0x56
 800e43e:	5a9b      	ldrh	r3, [r3, r2]
 800e440:	b29b      	uxth	r3, r3
 800e442:	3b01      	subs	r3, #1
 800e444:	b299      	uxth	r1, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2256      	movs	r2, #86	@ 0x56
 800e44a:	5299      	strh	r1, [r3, r2]
}
 800e44c:	46c0      	nop			@ (mov r8, r8)
 800e44e:	46bd      	mov	sp, r7
 800e450:	b00c      	add	sp, #48	@ 0x30
 800e452:	bd80      	pop	{r7, pc}

0800e454 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08c      	sub	sp, #48	@ 0x30
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2288      	movs	r2, #136	@ 0x88
 800e460:	589b      	ldr	r3, [r3, r2]
 800e462:	2b21      	cmp	r3, #33	@ 0x21
 800e464:	d165      	bne.n	800e532 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e466:	232e      	movs	r3, #46	@ 0x2e
 800e468:	18fb      	adds	r3, r7, r3
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	216a      	movs	r1, #106	@ 0x6a
 800e46e:	5a52      	ldrh	r2, [r2, r1]
 800e470:	801a      	strh	r2, [r3, #0]
 800e472:	e059      	b.n	800e528 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2256      	movs	r2, #86	@ 0x56
 800e478:	5a9b      	ldrh	r3, [r3, r2]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d133      	bne.n	800e4e8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e480:	f3ef 8310 	mrs	r3, PRIMASK
 800e484:	60fb      	str	r3, [r7, #12]
  return(result);
 800e486:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e48a:	2301      	movs	r3, #1
 800e48c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	f383 8810 	msr	PRIMASK, r3
}
 800e494:	46c0      	nop			@ (mov r8, r8)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	689a      	ldr	r2, [r3, #8]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4926      	ldr	r1, [pc, #152]	@ (800e53c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800e4a2:	400a      	ands	r2, r1
 800e4a4:	609a      	str	r2, [r3, #8]
 800e4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f383 8810 	msr	PRIMASK, r3
}
 800e4b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e4b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800e4b8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4bc:	2301      	movs	r3, #1
 800e4be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	f383 8810 	msr	PRIMASK, r3
}
 800e4c6:	46c0      	nop			@ (mov r8, r8)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2140      	movs	r1, #64	@ 0x40
 800e4d4:	430a      	orrs	r2, r1
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	f383 8810 	msr	PRIMASK, r3
}
 800e4e2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800e4e4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800e4e6:	e024      	b.n	800e532 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	2280      	movs	r2, #128	@ 0x80
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	d013      	beq.n	800e51c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4f8:	781a      	ldrb	r2, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2256      	movs	r2, #86	@ 0x56
 800e50e:	5a9b      	ldrh	r3, [r3, r2]
 800e510:	b29b      	uxth	r3, r3
 800e512:	3b01      	subs	r3, #1
 800e514:	b299      	uxth	r1, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2256      	movs	r2, #86	@ 0x56
 800e51a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e51c:	212e      	movs	r1, #46	@ 0x2e
 800e51e:	187b      	adds	r3, r7, r1
 800e520:	881a      	ldrh	r2, [r3, #0]
 800e522:	187b      	adds	r3, r7, r1
 800e524:	3a01      	subs	r2, #1
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	232e      	movs	r3, #46	@ 0x2e
 800e52a:	18fb      	adds	r3, r7, r3
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1a0      	bne.n	800e474 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800e532:	46c0      	nop			@ (mov r8, r8)
 800e534:	46bd      	mov	sp, r7
 800e536:	b00c      	add	sp, #48	@ 0x30
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	46c0      	nop			@ (mov r8, r8)
 800e53c:	ff7fffff 	.word	0xff7fffff

0800e540 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b08c      	sub	sp, #48	@ 0x30
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2288      	movs	r2, #136	@ 0x88
 800e54c:	589b      	ldr	r3, [r3, r2]
 800e54e:	2b21      	cmp	r3, #33	@ 0x21
 800e550:	d16a      	bne.n	800e628 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e552:	232e      	movs	r3, #46	@ 0x2e
 800e554:	18fb      	adds	r3, r7, r3
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	216a      	movs	r1, #106	@ 0x6a
 800e55a:	5a52      	ldrh	r2, [r2, r1]
 800e55c:	801a      	strh	r2, [r3, #0]
 800e55e:	e05e      	b.n	800e61e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2256      	movs	r2, #86	@ 0x56
 800e564:	5a9b      	ldrh	r3, [r3, r2]
 800e566:	b29b      	uxth	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d133      	bne.n	800e5d4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e56c:	f3ef 8310 	mrs	r3, PRIMASK
 800e570:	60bb      	str	r3, [r7, #8]
  return(result);
 800e572:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e574:	627b      	str	r3, [r7, #36]	@ 0x24
 800e576:	2301      	movs	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f383 8810 	msr	PRIMASK, r3
}
 800e580:	46c0      	nop			@ (mov r8, r8)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	689a      	ldr	r2, [r3, #8]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4928      	ldr	r1, [pc, #160]	@ (800e630 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800e58e:	400a      	ands	r2, r1
 800e590:	609a      	str	r2, [r3, #8]
 800e592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f383 8810 	msr	PRIMASK, r3
}
 800e59c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e59e:	f3ef 8310 	mrs	r3, PRIMASK
 800e5a2:	617b      	str	r3, [r7, #20]
  return(result);
 800e5a4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5a6:	623b      	str	r3, [r7, #32]
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	f383 8810 	msr	PRIMASK, r3
}
 800e5b2:	46c0      	nop			@ (mov r8, r8)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2140      	movs	r1, #64	@ 0x40
 800e5c0:	430a      	orrs	r2, r1
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	f383 8810 	msr	PRIMASK, r3
}
 800e5ce:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800e5d0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800e5d2:	e029      	b.n	800e628 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	69db      	ldr	r3, [r3, #28]
 800e5da:	2280      	movs	r2, #128	@ 0x80
 800e5dc:	4013      	ands	r3, r2
 800e5de:	d018      	beq.n	800e612 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e8:	881b      	ldrh	r3, [r3, #0]
 800e5ea:	001a      	movs	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	05d2      	lsls	r2, r2, #23
 800e5f2:	0dd2      	lsrs	r2, r2, #23
 800e5f4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5fa:	1c9a      	adds	r2, r3, #2
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2256      	movs	r2, #86	@ 0x56
 800e604:	5a9b      	ldrh	r3, [r3, r2]
 800e606:	b29b      	uxth	r3, r3
 800e608:	3b01      	subs	r3, #1
 800e60a:	b299      	uxth	r1, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2256      	movs	r2, #86	@ 0x56
 800e610:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e612:	212e      	movs	r1, #46	@ 0x2e
 800e614:	187b      	adds	r3, r7, r1
 800e616:	881a      	ldrh	r2, [r3, #0]
 800e618:	187b      	adds	r3, r7, r1
 800e61a:	3a01      	subs	r2, #1
 800e61c:	801a      	strh	r2, [r3, #0]
 800e61e:	232e      	movs	r3, #46	@ 0x2e
 800e620:	18fb      	adds	r3, r7, r3
 800e622:	881b      	ldrh	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d19b      	bne.n	800e560 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800e628:	46c0      	nop			@ (mov r8, r8)
 800e62a:	46bd      	mov	sp, r7
 800e62c:	b00c      	add	sp, #48	@ 0x30
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	ff7fffff 	.word	0xff7fffff

0800e634 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e63c:	f3ef 8310 	mrs	r3, PRIMASK
 800e640:	60bb      	str	r3, [r7, #8]
  return(result);
 800e642:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e644:	617b      	str	r3, [r7, #20]
 800e646:	2301      	movs	r3, #1
 800e648:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f383 8810 	msr	PRIMASK, r3
}
 800e650:	46c0      	nop			@ (mov r8, r8)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2140      	movs	r1, #64	@ 0x40
 800e65e:	438a      	bics	r2, r1
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f383 8810 	msr	PRIMASK, r3
}
 800e66c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2288      	movs	r2, #136	@ 0x88
 800e672:	2120      	movs	r1, #32
 800e674:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	0018      	movs	r0, r3
 800e680:	f7f6 fe7e 	bl	8005380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e684:	46c0      	nop			@ (mov r8, r8)
 800e686:	46bd      	mov	sp, r7
 800e688:	b006      	add	sp, #24
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b094      	sub	sp, #80	@ 0x50
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e694:	204e      	movs	r0, #78	@ 0x4e
 800e696:	183b      	adds	r3, r7, r0
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	2160      	movs	r1, #96	@ 0x60
 800e69c:	5a52      	ldrh	r2, [r2, r1]
 800e69e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	228c      	movs	r2, #140	@ 0x8c
 800e6a4:	589b      	ldr	r3, [r3, r2]
 800e6a6:	2b22      	cmp	r3, #34	@ 0x22
 800e6a8:	d000      	beq.n	800e6ac <UART_RxISR_8BIT+0x20>
 800e6aa:	e0bf      	b.n	800e82c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6b2:	214c      	movs	r1, #76	@ 0x4c
 800e6b4:	187b      	adds	r3, r7, r1
 800e6b6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6b8:	187b      	adds	r3, r7, r1
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	183b      	adds	r3, r7, r0
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	b2d9      	uxtb	r1, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6c8:	400a      	ands	r2, r1
 800e6ca:	b2d2      	uxtb	r2, r2
 800e6cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	225e      	movs	r2, #94	@ 0x5e
 800e6dc:	5a9b      	ldrh	r3, [r3, r2]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b299      	uxth	r1, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	225e      	movs	r2, #94	@ 0x5e
 800e6e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	225e      	movs	r2, #94	@ 0x5e
 800e6ee:	5a9b      	ldrh	r3, [r3, r2]
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d000      	beq.n	800e6f8 <UART_RxISR_8BIT+0x6c>
 800e6f6:	e0a1      	b.n	800e83c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e700:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e702:	2301      	movs	r3, #1
 800e704:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e708:	f383 8810 	msr	PRIMASK, r3
}
 800e70c:	46c0      	nop			@ (mov r8, r8)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	494a      	ldr	r1, [pc, #296]	@ (800e844 <UART_RxISR_8BIT+0x1b8>)
 800e71a:	400a      	ands	r2, r1
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e724:	f383 8810 	msr	PRIMASK, r3
}
 800e728:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e72a:	f3ef 8310 	mrs	r3, PRIMASK
 800e72e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e732:	647b      	str	r3, [r7, #68]	@ 0x44
 800e734:	2301      	movs	r3, #1
 800e736:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e73a:	f383 8810 	msr	PRIMASK, r3
}
 800e73e:	46c0      	nop			@ (mov r8, r8)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	689a      	ldr	r2, [r3, #8]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2101      	movs	r1, #1
 800e74c:	438a      	bics	r2, r1
 800e74e:	609a      	str	r2, [r3, #8]
 800e750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e752:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e756:	f383 8810 	msr	PRIMASK, r3
}
 800e75a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	228c      	movs	r2, #140	@ 0x8c
 800e760:	2120      	movs	r1, #32
 800e762:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a34      	ldr	r2, [pc, #208]	@ (800e848 <UART_RxISR_8BIT+0x1bc>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d01f      	beq.n	800e7ba <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	2380      	movs	r3, #128	@ 0x80
 800e782:	041b      	lsls	r3, r3, #16
 800e784:	4013      	ands	r3, r2
 800e786:	d018      	beq.n	800e7ba <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e788:	f3ef 8310 	mrs	r3, PRIMASK
 800e78c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e78e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e790:	643b      	str	r3, [r7, #64]	@ 0x40
 800e792:	2301      	movs	r3, #1
 800e794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	f383 8810 	msr	PRIMASK, r3
}
 800e79c:	46c0      	nop			@ (mov r8, r8)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4928      	ldr	r1, [pc, #160]	@ (800e84c <UART_RxISR_8BIT+0x1c0>)
 800e7aa:	400a      	ands	r2, r1
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	f383 8810 	msr	PRIMASK, r3
}
 800e7b8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d12f      	bne.n	800e822 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e7cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ce:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	f383 8810 	msr	PRIMASK, r3
}
 800e7dc:	46c0      	nop			@ (mov r8, r8)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2110      	movs	r1, #16
 800e7ea:	438a      	bics	r2, r1
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f383 8810 	msr	PRIMASK, r3
}
 800e7f8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	2210      	movs	r2, #16
 800e802:	4013      	ands	r3, r2
 800e804:	2b10      	cmp	r3, #16
 800e806:	d103      	bne.n	800e810 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2210      	movs	r2, #16
 800e80e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	225c      	movs	r2, #92	@ 0x5c
 800e814:	5a9a      	ldrh	r2, [r3, r2]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	0011      	movs	r1, r2
 800e81a:	0018      	movs	r0, r3
 800e81c:	f7fe ff28 	bl	800d670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e820:	e00c      	b.n	800e83c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	0018      	movs	r0, r3
 800e826:	f7f6 fc47 	bl	80050b8 <HAL_UART_RxCpltCallback>
}
 800e82a:	e007      	b.n	800e83c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	699a      	ldr	r2, [r3, #24]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2108      	movs	r1, #8
 800e838:	430a      	orrs	r2, r1
 800e83a:	619a      	str	r2, [r3, #24]
}
 800e83c:	46c0      	nop			@ (mov r8, r8)
 800e83e:	46bd      	mov	sp, r7
 800e840:	b014      	add	sp, #80	@ 0x50
 800e842:	bd80      	pop	{r7, pc}
 800e844:	fffffedf 	.word	0xfffffedf
 800e848:	40008000 	.word	0x40008000
 800e84c:	fbffffff 	.word	0xfbffffff

0800e850 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b094      	sub	sp, #80	@ 0x50
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e858:	204e      	movs	r0, #78	@ 0x4e
 800e85a:	183b      	adds	r3, r7, r0
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	2160      	movs	r1, #96	@ 0x60
 800e860:	5a52      	ldrh	r2, [r2, r1]
 800e862:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	228c      	movs	r2, #140	@ 0x8c
 800e868:	589b      	ldr	r3, [r3, r2]
 800e86a:	2b22      	cmp	r3, #34	@ 0x22
 800e86c:	d000      	beq.n	800e870 <UART_RxISR_16BIT+0x20>
 800e86e:	e0bf      	b.n	800e9f0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e876:	214c      	movs	r1, #76	@ 0x4c
 800e878:	187b      	adds	r3, r7, r1
 800e87a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e880:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800e882:	187b      	adds	r3, r7, r1
 800e884:	183a      	adds	r2, r7, r0
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	8812      	ldrh	r2, [r2, #0]
 800e88a:	4013      	ands	r3, r2
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e890:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e896:	1c9a      	adds	r2, r3, #2
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	225e      	movs	r2, #94	@ 0x5e
 800e8a0:	5a9b      	ldrh	r3, [r3, r2]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	b299      	uxth	r1, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	225e      	movs	r2, #94	@ 0x5e
 800e8ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	225e      	movs	r2, #94	@ 0x5e
 800e8b2:	5a9b      	ldrh	r3, [r3, r2]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d000      	beq.n	800e8bc <UART_RxISR_16BIT+0x6c>
 800e8ba:	e0a1      	b.n	800ea00 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c0:	623b      	str	r3, [r7, #32]
  return(result);
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	f383 8810 	msr	PRIMASK, r3
}
 800e8d0:	46c0      	nop			@ (mov r8, r8)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	494a      	ldr	r1, [pc, #296]	@ (800ea08 <UART_RxISR_16BIT+0x1b8>)
 800e8de:	400a      	ands	r2, r1
 800e8e0:	601a      	str	r2, [r3, #0]
 800e8e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e8:	f383 8810 	msr	PRIMASK, r3
}
 800e8ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fe:	f383 8810 	msr	PRIMASK, r3
}
 800e902:	46c0      	nop			@ (mov r8, r8)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	689a      	ldr	r2, [r3, #8]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2101      	movs	r1, #1
 800e910:	438a      	bics	r2, r1
 800e912:	609a      	str	r2, [r3, #8]
 800e914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e916:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e91a:	f383 8810 	msr	PRIMASK, r3
}
 800e91e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	228c      	movs	r2, #140	@ 0x8c
 800e924:	2120      	movs	r1, #32
 800e926:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a34      	ldr	r2, [pc, #208]	@ (800ea0c <UART_RxISR_16BIT+0x1bc>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d01f      	beq.n	800e97e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	685a      	ldr	r2, [r3, #4]
 800e944:	2380      	movs	r3, #128	@ 0x80
 800e946:	041b      	lsls	r3, r3, #16
 800e948:	4013      	ands	r3, r2
 800e94a:	d018      	beq.n	800e97e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e94c:	f3ef 8310 	mrs	r3, PRIMASK
 800e950:	617b      	str	r3, [r7, #20]
  return(result);
 800e952:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e956:	2301      	movs	r3, #1
 800e958:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	f383 8810 	msr	PRIMASK, r3
}
 800e960:	46c0      	nop			@ (mov r8, r8)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4928      	ldr	r1, [pc, #160]	@ (800ea10 <UART_RxISR_16BIT+0x1c0>)
 800e96e:	400a      	ands	r2, r1
 800e970:	601a      	str	r2, [r3, #0]
 800e972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	f383 8810 	msr	PRIMASK, r3
}
 800e97c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e982:	2b01      	cmp	r3, #1
 800e984:	d12f      	bne.n	800e9e6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e98c:	f3ef 8310 	mrs	r3, PRIMASK
 800e990:	60bb      	str	r3, [r7, #8]
  return(result);
 800e992:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e994:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e996:	2301      	movs	r3, #1
 800e998:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f383 8810 	msr	PRIMASK, r3
}
 800e9a0:	46c0      	nop			@ (mov r8, r8)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2110      	movs	r1, #16
 800e9ae:	438a      	bics	r2, r1
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	f383 8810 	msr	PRIMASK, r3
}
 800e9bc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	2210      	movs	r2, #16
 800e9c6:	4013      	ands	r3, r2
 800e9c8:	2b10      	cmp	r3, #16
 800e9ca:	d103      	bne.n	800e9d4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2210      	movs	r2, #16
 800e9d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	225c      	movs	r2, #92	@ 0x5c
 800e9d8:	5a9a      	ldrh	r2, [r3, r2]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	0011      	movs	r1, r2
 800e9de:	0018      	movs	r0, r3
 800e9e0:	f7fe fe46 	bl	800d670 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9e4:	e00c      	b.n	800ea00 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	f7f6 fb65 	bl	80050b8 <HAL_UART_RxCpltCallback>
}
 800e9ee:	e007      	b.n	800ea00 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	699a      	ldr	r2, [r3, #24]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2108      	movs	r1, #8
 800e9fc:	430a      	orrs	r2, r1
 800e9fe:	619a      	str	r2, [r3, #24]
}
 800ea00:	46c0      	nop			@ (mov r8, r8)
 800ea02:	46bd      	mov	sp, r7
 800ea04:	b014      	add	sp, #80	@ 0x50
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	fffffedf 	.word	0xfffffedf
 800ea0c:	40008000 	.word	0x40008000
 800ea10:	fbffffff 	.word	0xfbffffff

0800ea14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b0a0      	sub	sp, #128	@ 0x80
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ea1c:	237a      	movs	r3, #122	@ 0x7a
 800ea1e:	18fb      	adds	r3, r7, r3
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	2160      	movs	r1, #96	@ 0x60
 800ea24:	5a52      	ldrh	r2, [r2, r1]
 800ea26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	228c      	movs	r2, #140	@ 0x8c
 800ea44:	589b      	ldr	r3, [r3, r2]
 800ea46:	2b22      	cmp	r3, #34	@ 0x22
 800ea48:	d000      	beq.n	800ea4c <UART_RxISR_8BIT_FIFOEN+0x38>
 800ea4a:	e16a      	b.n	800ed22 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ea4c:	236e      	movs	r3, #110	@ 0x6e
 800ea4e:	18fb      	adds	r3, r7, r3
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	2168      	movs	r1, #104	@ 0x68
 800ea54:	5a52      	ldrh	r2, [r2, r1]
 800ea56:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea58:	e111      	b.n	800ec7e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea60:	216c      	movs	r1, #108	@ 0x6c
 800ea62:	187b      	adds	r3, r7, r1
 800ea64:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea66:	187b      	adds	r3, r7, r1
 800ea68:	881b      	ldrh	r3, [r3, #0]
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	237a      	movs	r3, #122	@ 0x7a
 800ea6e:	18fb      	adds	r3, r7, r3
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	b2d9      	uxtb	r1, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea78:	400a      	ands	r2, r1
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea82:	1c5a      	adds	r2, r3, #1
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	225e      	movs	r2, #94	@ 0x5e
 800ea8c:	5a9b      	ldrh	r3, [r3, r2]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	3b01      	subs	r3, #1
 800ea92:	b299      	uxth	r1, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	225e      	movs	r2, #94	@ 0x5e
 800ea98:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	69db      	ldr	r3, [r3, #28]
 800eaa0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eaa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eaa4:	2207      	movs	r2, #7
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	d049      	beq.n	800eb3e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eaac:	2201      	movs	r2, #1
 800eaae:	4013      	ands	r3, r2
 800eab0:	d010      	beq.n	800ead4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800eab2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800eab4:	2380      	movs	r3, #128	@ 0x80
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	4013      	ands	r3, r2
 800eaba:	d00b      	beq.n	800ead4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2201      	movs	r2, #1
 800eac2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2290      	movs	r2, #144	@ 0x90
 800eac8:	589b      	ldr	r3, [r3, r2]
 800eaca:	2201      	movs	r2, #1
 800eacc:	431a      	orrs	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2190      	movs	r1, #144	@ 0x90
 800ead2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ead4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ead6:	2202      	movs	r2, #2
 800ead8:	4013      	ands	r3, r2
 800eada:	d00f      	beq.n	800eafc <UART_RxISR_8BIT_FIFOEN+0xe8>
 800eadc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eade:	2201      	movs	r2, #1
 800eae0:	4013      	ands	r3, r2
 800eae2:	d00b      	beq.n	800eafc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2202      	movs	r2, #2
 800eaea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2290      	movs	r2, #144	@ 0x90
 800eaf0:	589b      	ldr	r3, [r3, r2]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2190      	movs	r1, #144	@ 0x90
 800eafa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eafc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eafe:	2204      	movs	r2, #4
 800eb00:	4013      	ands	r3, r2
 800eb02:	d00f      	beq.n	800eb24 <UART_RxISR_8BIT_FIFOEN+0x110>
 800eb04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb06:	2201      	movs	r2, #1
 800eb08:	4013      	ands	r3, r2
 800eb0a:	d00b      	beq.n	800eb24 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2204      	movs	r2, #4
 800eb12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2290      	movs	r2, #144	@ 0x90
 800eb18:	589b      	ldr	r3, [r3, r2]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	431a      	orrs	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2190      	movs	r1, #144	@ 0x90
 800eb22:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2290      	movs	r2, #144	@ 0x90
 800eb28:	589b      	ldr	r3, [r3, r2]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d007      	beq.n	800eb3e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	0018      	movs	r0, r3
 800eb32:	f7fe fd95 	bl	800d660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2290      	movs	r2, #144	@ 0x90
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	225e      	movs	r2, #94	@ 0x5e
 800eb42:	5a9b      	ldrh	r3, [r3, r2]
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d000      	beq.n	800eb4c <UART_RxISR_8BIT_FIFOEN+0x138>
 800eb4a:	e098      	b.n	800ec7e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb4c:	f3ef 8310 	mrs	r3, PRIMASK
 800eb50:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800eb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb56:	2301      	movs	r3, #1
 800eb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5c:	f383 8810 	msr	PRIMASK, r3
}
 800eb60:	46c0      	nop			@ (mov r8, r8)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4973      	ldr	r1, [pc, #460]	@ (800ed3c <UART_RxISR_8BIT_FIFOEN+0x328>)
 800eb6e:	400a      	ands	r2, r1
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb74:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb78:	f383 8810 	msr	PRIMASK, r3
}
 800eb7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb7e:	f3ef 8310 	mrs	r3, PRIMASK
 800eb82:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800eb84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb86:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb88:	2301      	movs	r3, #1
 800eb8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb8e:	f383 8810 	msr	PRIMASK, r3
}
 800eb92:	46c0      	nop			@ (mov r8, r8)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	689a      	ldr	r2, [r3, #8]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4968      	ldr	r1, [pc, #416]	@ (800ed40 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800eba0:	400a      	ands	r2, r1
 800eba2:	609a      	str	r2, [r3, #8]
 800eba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebaa:	f383 8810 	msr	PRIMASK, r3
}
 800ebae:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	228c      	movs	r2, #140	@ 0x8c
 800ebb4:	2120      	movs	r1, #32
 800ebb6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a5e      	ldr	r2, [pc, #376]	@ (800ed44 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d01f      	beq.n	800ec0e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	2380      	movs	r3, #128	@ 0x80
 800ebd6:	041b      	lsls	r3, r3, #16
 800ebd8:	4013      	ands	r3, r2
 800ebda:	d018      	beq.n	800ec0e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebdc:	f3ef 8310 	mrs	r3, PRIMASK
 800ebe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800ebe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ebe4:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	f383 8810 	msr	PRIMASK, r3
}
 800ebf0:	46c0      	nop			@ (mov r8, r8)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4952      	ldr	r1, [pc, #328]	@ (800ed48 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800ebfe:	400a      	ands	r2, r1
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec04:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec08:	f383 8810 	msr	PRIMASK, r3
}
 800ec0c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d12f      	bne.n	800ec76 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec20:	623b      	str	r3, [r7, #32]
  return(result);
 800ec22:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec26:	2301      	movs	r3, #1
 800ec28:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2c:	f383 8810 	msr	PRIMASK, r3
}
 800ec30:	46c0      	nop			@ (mov r8, r8)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2110      	movs	r1, #16
 800ec3e:	438a      	bics	r2, r1
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec48:	f383 8810 	msr	PRIMASK, r3
}
 800ec4c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	2210      	movs	r2, #16
 800ec56:	4013      	ands	r3, r2
 800ec58:	2b10      	cmp	r3, #16
 800ec5a:	d103      	bne.n	800ec64 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2210      	movs	r2, #16
 800ec62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	225c      	movs	r2, #92	@ 0x5c
 800ec68:	5a9a      	ldrh	r2, [r3, r2]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	0011      	movs	r1, r2
 800ec6e:	0018      	movs	r0, r3
 800ec70:	f7fe fcfe 	bl	800d670 <HAL_UARTEx_RxEventCallback>
 800ec74:	e003      	b.n	800ec7e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f7f6 fa1d 	bl	80050b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec7e:	236e      	movs	r3, #110	@ 0x6e
 800ec80:	18fb      	adds	r3, r7, r3
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d004      	beq.n	800ec92 <UART_RxISR_8BIT_FIFOEN+0x27e>
 800ec88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec8a:	2220      	movs	r2, #32
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	d000      	beq.n	800ec92 <UART_RxISR_8BIT_FIFOEN+0x27e>
 800ec90:	e6e3      	b.n	800ea5a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ec92:	205a      	movs	r0, #90	@ 0x5a
 800ec94:	183b      	adds	r3, r7, r0
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	215e      	movs	r1, #94	@ 0x5e
 800ec9a:	5a52      	ldrh	r2, [r2, r1]
 800ec9c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ec9e:	0001      	movs	r1, r0
 800eca0:	187b      	adds	r3, r7, r1
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d044      	beq.n	800ed32 <UART_RxISR_8BIT_FIFOEN+0x31e>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2268      	movs	r2, #104	@ 0x68
 800ecac:	5a9b      	ldrh	r3, [r3, r2]
 800ecae:	187a      	adds	r2, r7, r1
 800ecb0:	8812      	ldrh	r2, [r2, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d23d      	bcs.n	800ed32 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecb6:	f3ef 8310 	mrs	r3, PRIMASK
 800ecba:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecbc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ecbe:	657b      	str	r3, [r7, #84]	@ 0x54
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f383 8810 	msr	PRIMASK, r3
}
 800ecca:	46c0      	nop			@ (mov r8, r8)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	689a      	ldr	r2, [r3, #8]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	491d      	ldr	r1, [pc, #116]	@ (800ed4c <UART_RxISR_8BIT_FIFOEN+0x338>)
 800ecd8:	400a      	ands	r2, r1
 800ecda:	609a      	str	r2, [r3, #8]
 800ecdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f383 8810 	msr	PRIMASK, r3
}
 800ece6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a19      	ldr	r2, [pc, #100]	@ (800ed50 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800ecec:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecee:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf2:	617b      	str	r3, [r7, #20]
  return(result);
 800ecf4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ecf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	f383 8810 	msr	PRIMASK, r3
}
 800ed02:	46c0      	nop			@ (mov r8, r8)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2120      	movs	r1, #32
 800ed10:	430a      	orrs	r2, r1
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	f383 8810 	msr	PRIMASK, r3
}
 800ed1e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed20:	e007      	b.n	800ed32 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	699a      	ldr	r2, [r3, #24]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2108      	movs	r1, #8
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	619a      	str	r2, [r3, #24]
}
 800ed32:	46c0      	nop			@ (mov r8, r8)
 800ed34:	46bd      	mov	sp, r7
 800ed36:	b020      	add	sp, #128	@ 0x80
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	46c0      	nop			@ (mov r8, r8)
 800ed3c:	fffffeff 	.word	0xfffffeff
 800ed40:	effffffe 	.word	0xeffffffe
 800ed44:	40008000 	.word	0x40008000
 800ed48:	fbffffff 	.word	0xfbffffff
 800ed4c:	efffffff 	.word	0xefffffff
 800ed50:	0800e68d 	.word	0x0800e68d

0800ed54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b0a2      	sub	sp, #136	@ 0x88
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ed5c:	2382      	movs	r3, #130	@ 0x82
 800ed5e:	18fb      	adds	r3, r7, r3
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	2160      	movs	r1, #96	@ 0x60
 800ed64:	5a52      	ldrh	r2, [r2, r1]
 800ed66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	69db      	ldr	r3, [r3, #28]
 800ed6e:	2284      	movs	r2, #132	@ 0x84
 800ed70:	18ba      	adds	r2, r7, r2
 800ed72:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	228c      	movs	r2, #140	@ 0x8c
 800ed88:	589b      	ldr	r3, [r3, r2]
 800ed8a:	2b22      	cmp	r3, #34	@ 0x22
 800ed8c:	d000      	beq.n	800ed90 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800ed8e:	e174      	b.n	800f07a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ed90:	2376      	movs	r3, #118	@ 0x76
 800ed92:	18fb      	adds	r3, r7, r3
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	2168      	movs	r1, #104	@ 0x68
 800ed98:	5a52      	ldrh	r2, [r2, r1]
 800ed9a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed9c:	e119      	b.n	800efd2 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eda4:	2174      	movs	r1, #116	@ 0x74
 800eda6:	187b      	adds	r3, r7, r1
 800eda8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edae:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800edb0:	187b      	adds	r3, r7, r1
 800edb2:	2282      	movs	r2, #130	@ 0x82
 800edb4:	18ba      	adds	r2, r7, r2
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	8812      	ldrh	r2, [r2, #0]
 800edba:	4013      	ands	r3, r2
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800edc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edc6:	1c9a      	adds	r2, r3, #2
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	225e      	movs	r2, #94	@ 0x5e
 800edd0:	5a9b      	ldrh	r3, [r3, r2]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	3b01      	subs	r3, #1
 800edd6:	b299      	uxth	r1, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	225e      	movs	r2, #94	@ 0x5e
 800eddc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	69db      	ldr	r3, [r3, #28]
 800ede4:	2184      	movs	r1, #132	@ 0x84
 800ede6:	187a      	adds	r2, r7, r1
 800ede8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800edea:	187b      	adds	r3, r7, r1
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2207      	movs	r2, #7
 800edf0:	4013      	ands	r3, r2
 800edf2:	d04e      	beq.n	800ee92 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800edf4:	187b      	adds	r3, r7, r1
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2201      	movs	r2, #1
 800edfa:	4013      	ands	r3, r2
 800edfc:	d010      	beq.n	800ee20 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800edfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ee00:	2380      	movs	r3, #128	@ 0x80
 800ee02:	005b      	lsls	r3, r3, #1
 800ee04:	4013      	ands	r3, r2
 800ee06:	d00b      	beq.n	800ee20 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2290      	movs	r2, #144	@ 0x90
 800ee14:	589b      	ldr	r3, [r3, r2]
 800ee16:	2201      	movs	r2, #1
 800ee18:	431a      	orrs	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2190      	movs	r1, #144	@ 0x90
 800ee1e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee20:	2384      	movs	r3, #132	@ 0x84
 800ee22:	18fb      	adds	r3, r7, r3
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2202      	movs	r2, #2
 800ee28:	4013      	ands	r3, r2
 800ee2a:	d00f      	beq.n	800ee4c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800ee2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee2e:	2201      	movs	r2, #1
 800ee30:	4013      	ands	r3, r2
 800ee32:	d00b      	beq.n	800ee4c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2202      	movs	r2, #2
 800ee3a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2290      	movs	r2, #144	@ 0x90
 800ee40:	589b      	ldr	r3, [r3, r2]
 800ee42:	2204      	movs	r2, #4
 800ee44:	431a      	orrs	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2190      	movs	r1, #144	@ 0x90
 800ee4a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee4c:	2384      	movs	r3, #132	@ 0x84
 800ee4e:	18fb      	adds	r3, r7, r3
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2204      	movs	r2, #4
 800ee54:	4013      	ands	r3, r2
 800ee56:	d00f      	beq.n	800ee78 <UART_RxISR_16BIT_FIFOEN+0x124>
 800ee58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	d00b      	beq.n	800ee78 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2204      	movs	r2, #4
 800ee66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2290      	movs	r2, #144	@ 0x90
 800ee6c:	589b      	ldr	r3, [r3, r2]
 800ee6e:	2202      	movs	r2, #2
 800ee70:	431a      	orrs	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2190      	movs	r1, #144	@ 0x90
 800ee76:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2290      	movs	r2, #144	@ 0x90
 800ee7c:	589b      	ldr	r3, [r3, r2]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d007      	beq.n	800ee92 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	0018      	movs	r0, r3
 800ee86:	f7fe fbeb 	bl	800d660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2290      	movs	r2, #144	@ 0x90
 800ee8e:	2100      	movs	r1, #0
 800ee90:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	225e      	movs	r2, #94	@ 0x5e
 800ee96:	5a9b      	ldrh	r3, [r3, r2]
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d000      	beq.n	800eea0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800ee9e:	e098      	b.n	800efd2 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eea0:	f3ef 8310 	mrs	r3, PRIMASK
 800eea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800eea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eeaa:	2301      	movs	r3, #1
 800eeac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eeae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeb0:	f383 8810 	msr	PRIMASK, r3
}
 800eeb4:	46c0      	nop			@ (mov r8, r8)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4974      	ldr	r1, [pc, #464]	@ (800f094 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800eec2:	400a      	ands	r2, r1
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eec8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eeca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eecc:	f383 8810 	msr	PRIMASK, r3
}
 800eed0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eed2:	f3ef 8310 	mrs	r3, PRIMASK
 800eed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800eed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eeda:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eedc:	2301      	movs	r3, #1
 800eede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eee2:	f383 8810 	msr	PRIMASK, r3
}
 800eee6:	46c0      	nop			@ (mov r8, r8)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689a      	ldr	r2, [r3, #8]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4969      	ldr	r1, [pc, #420]	@ (800f098 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800eef4:	400a      	ands	r2, r1
 800eef6:	609a      	str	r2, [r3, #8]
 800eef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eefa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eefc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eefe:	f383 8810 	msr	PRIMASK, r3
}
 800ef02:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	228c      	movs	r2, #140	@ 0x8c
 800ef08:	2120      	movs	r1, #32
 800ef0a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a5f      	ldr	r2, [pc, #380]	@ (800f09c <UART_RxISR_16BIT_FIFOEN+0x348>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d01f      	beq.n	800ef62 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	2380      	movs	r3, #128	@ 0x80
 800ef2a:	041b      	lsls	r3, r3, #16
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	d018      	beq.n	800ef62 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef30:	f3ef 8310 	mrs	r3, PRIMASK
 800ef34:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ef36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef38:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef40:	f383 8810 	msr	PRIMASK, r3
}
 800ef44:	46c0      	nop			@ (mov r8, r8)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4953      	ldr	r1, [pc, #332]	@ (800f0a0 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800ef52:	400a      	ands	r2, r1
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef58:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5c:	f383 8810 	msr	PRIMASK, r3
}
 800ef60:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d12f      	bne.n	800efca <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef70:	f3ef 8310 	mrs	r3, PRIMASK
 800ef74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ef76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef78:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef80:	f383 8810 	msr	PRIMASK, r3
}
 800ef84:	46c0      	nop			@ (mov r8, r8)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2110      	movs	r1, #16
 800ef92:	438a      	bics	r2, r1
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef9c:	f383 8810 	msr	PRIMASK, r3
}
 800efa0:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	69db      	ldr	r3, [r3, #28]
 800efa8:	2210      	movs	r2, #16
 800efaa:	4013      	ands	r3, r2
 800efac:	2b10      	cmp	r3, #16
 800efae:	d103      	bne.n	800efb8 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2210      	movs	r2, #16
 800efb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	225c      	movs	r2, #92	@ 0x5c
 800efbc:	5a9a      	ldrh	r2, [r3, r2]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	0011      	movs	r1, r2
 800efc2:	0018      	movs	r0, r3
 800efc4:	f7fe fb54 	bl	800d670 <HAL_UARTEx_RxEventCallback>
 800efc8:	e003      	b.n	800efd2 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	0018      	movs	r0, r3
 800efce:	f7f6 f873 	bl	80050b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800efd2:	2376      	movs	r3, #118	@ 0x76
 800efd4:	18fb      	adds	r3, r7, r3
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d006      	beq.n	800efea <UART_RxISR_16BIT_FIFOEN+0x296>
 800efdc:	2384      	movs	r3, #132	@ 0x84
 800efde:	18fb      	adds	r3, r7, r3
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2220      	movs	r2, #32
 800efe4:	4013      	ands	r3, r2
 800efe6:	d000      	beq.n	800efea <UART_RxISR_16BIT_FIFOEN+0x296>
 800efe8:	e6d9      	b.n	800ed9e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800efea:	205e      	movs	r0, #94	@ 0x5e
 800efec:	183b      	adds	r3, r7, r0
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	215e      	movs	r1, #94	@ 0x5e
 800eff2:	5a52      	ldrh	r2, [r2, r1]
 800eff4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eff6:	0001      	movs	r1, r0
 800eff8:	187b      	adds	r3, r7, r1
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d044      	beq.n	800f08a <UART_RxISR_16BIT_FIFOEN+0x336>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2268      	movs	r2, #104	@ 0x68
 800f004:	5a9b      	ldrh	r3, [r3, r2]
 800f006:	187a      	adds	r2, r7, r1
 800f008:	8812      	ldrh	r2, [r2, #0]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d23d      	bcs.n	800f08a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f00e:	f3ef 8310 	mrs	r3, PRIMASK
 800f012:	60fb      	str	r3, [r7, #12]
  return(result);
 800f014:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f016:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f018:	2301      	movs	r3, #1
 800f01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	f383 8810 	msr	PRIMASK, r3
}
 800f022:	46c0      	nop			@ (mov r8, r8)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	689a      	ldr	r2, [r3, #8]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	491d      	ldr	r1, [pc, #116]	@ (800f0a4 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800f030:	400a      	ands	r2, r1
 800f032:	609a      	str	r2, [r3, #8]
 800f034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	f383 8810 	msr	PRIMASK, r3
}
 800f03e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a19      	ldr	r2, [pc, #100]	@ (800f0a8 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800f044:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f046:	f3ef 8310 	mrs	r3, PRIMASK
 800f04a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f04c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f04e:	657b      	str	r3, [r7, #84]	@ 0x54
 800f050:	2301      	movs	r3, #1
 800f052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	f383 8810 	msr	PRIMASK, r3
}
 800f05a:	46c0      	nop			@ (mov r8, r8)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2120      	movs	r1, #32
 800f068:	430a      	orrs	r2, r1
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f06e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	f383 8810 	msr	PRIMASK, r3
}
 800f076:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f078:	e007      	b.n	800f08a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	699a      	ldr	r2, [r3, #24]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2108      	movs	r1, #8
 800f086:	430a      	orrs	r2, r1
 800f088:	619a      	str	r2, [r3, #24]
}
 800f08a:	46c0      	nop			@ (mov r8, r8)
 800f08c:	46bd      	mov	sp, r7
 800f08e:	b022      	add	sp, #136	@ 0x88
 800f090:	bd80      	pop	{r7, pc}
 800f092:	46c0      	nop			@ (mov r8, r8)
 800f094:	fffffeff 	.word	0xfffffeff
 800f098:	effffffe 	.word	0xeffffffe
 800f09c:	40008000 	.word	0x40008000
 800f0a0:	fbffffff 	.word	0xfbffffff
 800f0a4:	efffffff 	.word	0xefffffff
 800f0a8:	0800e851 	.word	0x0800e851

0800f0ac <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
 800f0b8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e05d      	b.n	800f180 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2288      	movs	r2, #136	@ 0x88
 800f0c8:	589b      	ldr	r3, [r3, r2]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d107      	bne.n	800f0de <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2284      	movs	r2, #132	@ 0x84
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f7f8 ff47 	bl	8007f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2288      	movs	r2, #136	@ 0x88
 800f0e2:	2124      	movs	r1, #36	@ 0x24
 800f0e4:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	438a      	bics	r2, r1
 800f0f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	0018      	movs	r0, r3
 800f102:	f7fe fd7f 	bl	800dc04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	0018      	movs	r0, r3
 800f10a:	f7fe fabd 	bl	800d688 <UART_SetConfig>
 800f10e:	0003      	movs	r3, r0
 800f110:	2b01      	cmp	r3, #1
 800f112:	d101      	bne.n	800f118 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	e033      	b.n	800f180 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689a      	ldr	r2, [r3, #8]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2180      	movs	r1, #128	@ 0x80
 800f124:	01c9      	lsls	r1, r1, #7
 800f126:	430a      	orrs	r2, r1
 800f128:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	4a15      	ldr	r2, [pc, #84]	@ (800f188 <HAL_RS485Ex_Init+0xdc>)
 800f132:	4013      	ands	r3, r2
 800f134:	0019      	movs	r1, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	430a      	orrs	r2, r1
 800f13e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	055b      	lsls	r3, r3, #21
 800f144:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	041b      	lsls	r3, r3, #16
 800f14a:	697a      	ldr	r2, [r7, #20]
 800f14c:	4313      	orrs	r3, r2
 800f14e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a0d      	ldr	r2, [pc, #52]	@ (800f18c <HAL_RS485Ex_Init+0xe0>)
 800f158:	4013      	ands	r3, r2
 800f15a:	0019      	movs	r1, r3
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	697a      	ldr	r2, [r7, #20]
 800f162:	430a      	orrs	r2, r1
 800f164:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2101      	movs	r1, #1
 800f172:	430a      	orrs	r2, r1
 800f174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	0018      	movs	r0, r3
 800f17a:	f7fe fdf7 	bl	800dd6c <UART_CheckIdleState>
 800f17e:	0003      	movs	r3, r0
}
 800f180:	0018      	movs	r0, r3
 800f182:	46bd      	mov	sp, r7
 800f184:	b006      	add	sp, #24
 800f186:	bd80      	pop	{r7, pc}
 800f188:	ffff7fff 	.word	0xffff7fff
 800f18c:	fc00ffff 	.word	0xfc00ffff

0800f190 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f198:	46c0      	nop			@ (mov r8, r8)
 800f19a:	46bd      	mov	sp, r7
 800f19c:	b002      	add	sp, #8
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1a8:	46c0      	nop			@ (mov r8, r8)
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	b002      	add	sp, #8
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f1b8:	46c0      	nop			@ (mov r8, r8)
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	b002      	add	sp, #8
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2284      	movs	r2, #132	@ 0x84
 800f1cc:	5c9b      	ldrb	r3, [r3, r2]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d101      	bne.n	800f1d6 <HAL_UARTEx_EnableFifoMode+0x16>
 800f1d2:	2302      	movs	r3, #2
 800f1d4:	e02d      	b.n	800f232 <HAL_UARTEx_EnableFifoMode+0x72>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2284      	movs	r2, #132	@ 0x84
 800f1da:	2101      	movs	r1, #1
 800f1dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2288      	movs	r2, #136	@ 0x88
 800f1e2:	2124      	movs	r1, #36	@ 0x24
 800f1e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2101      	movs	r1, #1
 800f1fa:	438a      	bics	r2, r1
 800f1fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2280      	movs	r2, #128	@ 0x80
 800f202:	0592      	lsls	r2, r2, #22
 800f204:	4313      	orrs	r3, r2
 800f206:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2280      	movs	r2, #128	@ 0x80
 800f20c:	0592      	lsls	r2, r2, #22
 800f20e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	0018      	movs	r0, r3
 800f21c:	f000 f8ca 	bl	800f3b4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2288      	movs	r2, #136	@ 0x88
 800f224:	2120      	movs	r1, #32
 800f226:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2284      	movs	r2, #132	@ 0x84
 800f22c:	2100      	movs	r1, #0
 800f22e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	0018      	movs	r0, r3
 800f234:	46bd      	mov	sp, r7
 800f236:	b004      	add	sp, #16
 800f238:	bd80      	pop	{r7, pc}
	...

0800f23c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2284      	movs	r2, #132	@ 0x84
 800f248:	5c9b      	ldrb	r3, [r3, r2]
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d101      	bne.n	800f252 <HAL_UARTEx_DisableFifoMode+0x16>
 800f24e:	2302      	movs	r3, #2
 800f250:	e027      	b.n	800f2a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2284      	movs	r2, #132	@ 0x84
 800f256:	2101      	movs	r1, #1
 800f258:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2288      	movs	r2, #136	@ 0x88
 800f25e:	2124      	movs	r1, #36	@ 0x24
 800f260:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2101      	movs	r1, #1
 800f276:	438a      	bics	r2, r1
 800f278:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	4a0b      	ldr	r2, [pc, #44]	@ (800f2ac <HAL_UARTEx_DisableFifoMode+0x70>)
 800f27e:	4013      	ands	r3, r2
 800f280:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2288      	movs	r2, #136	@ 0x88
 800f294:	2120      	movs	r1, #32
 800f296:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2284      	movs	r2, #132	@ 0x84
 800f29c:	2100      	movs	r1, #0
 800f29e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	0018      	movs	r0, r3
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	b004      	add	sp, #16
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	46c0      	nop			@ (mov r8, r8)
 800f2ac:	dfffffff 	.word	0xdfffffff

0800f2b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2284      	movs	r2, #132	@ 0x84
 800f2be:	5c9b      	ldrb	r3, [r3, r2]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d101      	bne.n	800f2c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e02e      	b.n	800f326 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2284      	movs	r2, #132	@ 0x84
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2288      	movs	r2, #136	@ 0x88
 800f2d4:	2124      	movs	r1, #36	@ 0x24
 800f2d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2101      	movs	r1, #1
 800f2ec:	438a      	bics	r2, r1
 800f2ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	00db      	lsls	r3, r3, #3
 800f2f8:	08d9      	lsrs	r1, r3, #3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	430a      	orrs	r2, r1
 800f302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	0018      	movs	r0, r3
 800f308:	f000 f854 	bl	800f3b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2288      	movs	r2, #136	@ 0x88
 800f318:	2120      	movs	r1, #32
 800f31a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2284      	movs	r2, #132	@ 0x84
 800f320:	2100      	movs	r1, #0
 800f322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f324:	2300      	movs	r3, #0
}
 800f326:	0018      	movs	r0, r3
 800f328:	46bd      	mov	sp, r7
 800f32a:	b004      	add	sp, #16
 800f32c:	bd80      	pop	{r7, pc}
	...

0800f330 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2284      	movs	r2, #132	@ 0x84
 800f33e:	5c9b      	ldrb	r3, [r3, r2]
 800f340:	2b01      	cmp	r3, #1
 800f342:	d101      	bne.n	800f348 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f344:	2302      	movs	r3, #2
 800f346:	e02f      	b.n	800f3a8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2284      	movs	r2, #132	@ 0x84
 800f34c:	2101      	movs	r1, #1
 800f34e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2288      	movs	r2, #136	@ 0x88
 800f354:	2124      	movs	r1, #36	@ 0x24
 800f356:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2101      	movs	r1, #1
 800f36c:	438a      	bics	r2, r1
 800f36e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	4a0e      	ldr	r2, [pc, #56]	@ (800f3b0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800f378:	4013      	ands	r3, r2
 800f37a:	0019      	movs	r1, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	683a      	ldr	r2, [r7, #0]
 800f382:	430a      	orrs	r2, r1
 800f384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	0018      	movs	r0, r3
 800f38a:	f000 f813 	bl	800f3b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2288      	movs	r2, #136	@ 0x88
 800f39a:	2120      	movs	r1, #32
 800f39c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2284      	movs	r2, #132	@ 0x84
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	0018      	movs	r0, r3
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	b004      	add	sp, #16
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	f1ffffff 	.word	0xf1ffffff

0800f3b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b6:	b085      	sub	sp, #20
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d108      	bne.n	800f3d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	226a      	movs	r2, #106	@ 0x6a
 800f3c8:	2101      	movs	r1, #1
 800f3ca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2268      	movs	r2, #104	@ 0x68
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f3d4:	e043      	b.n	800f45e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f3d6:	260f      	movs	r6, #15
 800f3d8:	19bb      	adds	r3, r7, r6
 800f3da:	2208      	movs	r2, #8
 800f3dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f3de:	200e      	movs	r0, #14
 800f3e0:	183b      	adds	r3, r7, r0
 800f3e2:	2208      	movs	r2, #8
 800f3e4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	0e5b      	lsrs	r3, r3, #25
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	240d      	movs	r4, #13
 800f3f2:	193b      	adds	r3, r7, r4
 800f3f4:	2107      	movs	r1, #7
 800f3f6:	400a      	ands	r2, r1
 800f3f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	0f5b      	lsrs	r3, r3, #29
 800f402:	b2da      	uxtb	r2, r3
 800f404:	250c      	movs	r5, #12
 800f406:	197b      	adds	r3, r7, r5
 800f408:	2107      	movs	r1, #7
 800f40a:	400a      	ands	r2, r1
 800f40c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f40e:	183b      	adds	r3, r7, r0
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	197a      	adds	r2, r7, r5
 800f414:	7812      	ldrb	r2, [r2, #0]
 800f416:	4914      	ldr	r1, [pc, #80]	@ (800f468 <UARTEx_SetNbDataToProcess+0xb4>)
 800f418:	5c8a      	ldrb	r2, [r1, r2]
 800f41a:	435a      	muls	r2, r3
 800f41c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800f41e:	197b      	adds	r3, r7, r5
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	4a12      	ldr	r2, [pc, #72]	@ (800f46c <UARTEx_SetNbDataToProcess+0xb8>)
 800f424:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f426:	0019      	movs	r1, r3
 800f428:	f7f0 ff14 	bl	8000254 <__divsi3>
 800f42c:	0003      	movs	r3, r0
 800f42e:	b299      	uxth	r1, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	226a      	movs	r2, #106	@ 0x6a
 800f434:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f436:	19bb      	adds	r3, r7, r6
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	193a      	adds	r2, r7, r4
 800f43c:	7812      	ldrb	r2, [r2, #0]
 800f43e:	490a      	ldr	r1, [pc, #40]	@ (800f468 <UARTEx_SetNbDataToProcess+0xb4>)
 800f440:	5c8a      	ldrb	r2, [r1, r2]
 800f442:	435a      	muls	r2, r3
 800f444:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800f446:	193b      	adds	r3, r7, r4
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	4a08      	ldr	r2, [pc, #32]	@ (800f46c <UARTEx_SetNbDataToProcess+0xb8>)
 800f44c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f44e:	0019      	movs	r1, r3
 800f450:	f7f0 ff00 	bl	8000254 <__divsi3>
 800f454:	0003      	movs	r3, r0
 800f456:	b299      	uxth	r1, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2268      	movs	r2, #104	@ 0x68
 800f45c:	5299      	strh	r1, [r3, r2]
}
 800f45e:	46c0      	nop			@ (mov r8, r8)
 800f460:	46bd      	mov	sp, r7
 800f462:	b005      	add	sp, #20
 800f464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f466:	46c0      	nop			@ (mov r8, r8)
 800f468:	08017694 	.word	0x08017694
 800f46c:	0801769c 	.word	0x0801769c

0800f470 <__NVIC_SetPriority>:
{
 800f470:	b590      	push	{r4, r7, lr}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	0002      	movs	r2, r0
 800f478:	6039      	str	r1, [r7, #0]
 800f47a:	1dfb      	adds	r3, r7, #7
 800f47c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f47e:	1dfb      	adds	r3, r7, #7
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b7f      	cmp	r3, #127	@ 0x7f
 800f484:	d828      	bhi.n	800f4d8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f486:	4a2f      	ldr	r2, [pc, #188]	@ (800f544 <__NVIC_SetPriority+0xd4>)
 800f488:	1dfb      	adds	r3, r7, #7
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	b25b      	sxtb	r3, r3
 800f48e:	089b      	lsrs	r3, r3, #2
 800f490:	33c0      	adds	r3, #192	@ 0xc0
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	589b      	ldr	r3, [r3, r2]
 800f496:	1dfa      	adds	r2, r7, #7
 800f498:	7812      	ldrb	r2, [r2, #0]
 800f49a:	0011      	movs	r1, r2
 800f49c:	2203      	movs	r2, #3
 800f49e:	400a      	ands	r2, r1
 800f4a0:	00d2      	lsls	r2, r2, #3
 800f4a2:	21ff      	movs	r1, #255	@ 0xff
 800f4a4:	4091      	lsls	r1, r2
 800f4a6:	000a      	movs	r2, r1
 800f4a8:	43d2      	mvns	r2, r2
 800f4aa:	401a      	ands	r2, r3
 800f4ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	019b      	lsls	r3, r3, #6
 800f4b2:	22ff      	movs	r2, #255	@ 0xff
 800f4b4:	401a      	ands	r2, r3
 800f4b6:	1dfb      	adds	r3, r7, #7
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	0018      	movs	r0, r3
 800f4bc:	2303      	movs	r3, #3
 800f4be:	4003      	ands	r3, r0
 800f4c0:	00db      	lsls	r3, r3, #3
 800f4c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4c4:	481f      	ldr	r0, [pc, #124]	@ (800f544 <__NVIC_SetPriority+0xd4>)
 800f4c6:	1dfb      	adds	r3, r7, #7
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	b25b      	sxtb	r3, r3
 800f4cc:	089b      	lsrs	r3, r3, #2
 800f4ce:	430a      	orrs	r2, r1
 800f4d0:	33c0      	adds	r3, #192	@ 0xc0
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	501a      	str	r2, [r3, r0]
}
 800f4d6:	e031      	b.n	800f53c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4d8:	4a1b      	ldr	r2, [pc, #108]	@ (800f548 <__NVIC_SetPriority+0xd8>)
 800f4da:	1dfb      	adds	r3, r7, #7
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	0019      	movs	r1, r3
 800f4e0:	230f      	movs	r3, #15
 800f4e2:	400b      	ands	r3, r1
 800f4e4:	3b08      	subs	r3, #8
 800f4e6:	089b      	lsrs	r3, r3, #2
 800f4e8:	3306      	adds	r3, #6
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	18d3      	adds	r3, r2, r3
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	1dfa      	adds	r2, r7, #7
 800f4f4:	7812      	ldrb	r2, [r2, #0]
 800f4f6:	0011      	movs	r1, r2
 800f4f8:	2203      	movs	r2, #3
 800f4fa:	400a      	ands	r2, r1
 800f4fc:	00d2      	lsls	r2, r2, #3
 800f4fe:	21ff      	movs	r1, #255	@ 0xff
 800f500:	4091      	lsls	r1, r2
 800f502:	000a      	movs	r2, r1
 800f504:	43d2      	mvns	r2, r2
 800f506:	401a      	ands	r2, r3
 800f508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	019b      	lsls	r3, r3, #6
 800f50e:	22ff      	movs	r2, #255	@ 0xff
 800f510:	401a      	ands	r2, r3
 800f512:	1dfb      	adds	r3, r7, #7
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	0018      	movs	r0, r3
 800f518:	2303      	movs	r3, #3
 800f51a:	4003      	ands	r3, r0
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f520:	4809      	ldr	r0, [pc, #36]	@ (800f548 <__NVIC_SetPriority+0xd8>)
 800f522:	1dfb      	adds	r3, r7, #7
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	001c      	movs	r4, r3
 800f528:	230f      	movs	r3, #15
 800f52a:	4023      	ands	r3, r4
 800f52c:	3b08      	subs	r3, #8
 800f52e:	089b      	lsrs	r3, r3, #2
 800f530:	430a      	orrs	r2, r1
 800f532:	3306      	adds	r3, #6
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	18c3      	adds	r3, r0, r3
 800f538:	3304      	adds	r3, #4
 800f53a:	601a      	str	r2, [r3, #0]
}
 800f53c:	46c0      	nop			@ (mov r8, r8)
 800f53e:	46bd      	mov	sp, r7
 800f540:	b003      	add	sp, #12
 800f542:	bd90      	pop	{r4, r7, pc}
 800f544:	e000e100 	.word	0xe000e100
 800f548:	e000ed00 	.word	0xe000ed00

0800f54c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f550:	4b05      	ldr	r3, [pc, #20]	@ (800f568 <SysTick_Handler+0x1c>)
 800f552:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f554:	f001 fcf2 	bl	8010f3c <xTaskGetSchedulerState>
 800f558:	0003      	movs	r3, r0
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d001      	beq.n	800f562 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f55e:	f002 fa6b 	bl	8011a38 <xPortSysTickHandler>
  }
}
 800f562:	46c0      	nop			@ (mov r8, r8)
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	e000e010 	.word	0xe000e010

0800f56c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f56c:	b580      	push	{r7, lr}
 800f56e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f570:	2305      	movs	r3, #5
 800f572:	425b      	negs	r3, r3
 800f574:	2100      	movs	r1, #0
 800f576:	0018      	movs	r0, r3
 800f578:	f7ff ff7a 	bl	800f470 <__NVIC_SetPriority>
#endif
}
 800f57c:	46c0      	nop			@ (mov r8, r8)
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
	...

0800f584 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f58a:	f3ef 8305 	mrs	r3, IPSR
 800f58e:	603b      	str	r3, [r7, #0]
  return(result);
 800f590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f592:	2b00      	cmp	r3, #0
 800f594:	d003      	beq.n	800f59e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f596:	2306      	movs	r3, #6
 800f598:	425b      	negs	r3, r3
 800f59a:	607b      	str	r3, [r7, #4]
 800f59c:	e00c      	b.n	800f5b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f59e:	4b09      	ldr	r3, [pc, #36]	@ (800f5c4 <osKernelInitialize+0x40>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d105      	bne.n	800f5b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f5a6:	4b07      	ldr	r3, [pc, #28]	@ (800f5c4 <osKernelInitialize+0x40>)
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	607b      	str	r3, [r7, #4]
 800f5b0:	e002      	b.n	800f5b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	425b      	negs	r3, r3
 800f5b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f5b8:	687b      	ldr	r3, [r7, #4]
}
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	b002      	add	sp, #8
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	46c0      	nop			@ (mov r8, r8)
 800f5c4:	20002964 	.word	0x20002964

0800f5c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5ce:	f3ef 8305 	mrs	r3, IPSR
 800f5d2:	603b      	str	r3, [r7, #0]
  return(result);
 800f5d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f5da:	2306      	movs	r3, #6
 800f5dc:	425b      	negs	r3, r3
 800f5de:	607b      	str	r3, [r7, #4]
 800f5e0:	e010      	b.n	800f604 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f5e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f610 <osKernelStart+0x48>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d109      	bne.n	800f5fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f5ea:	f7ff ffbf 	bl	800f56c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f5ee:	4b08      	ldr	r3, [pc, #32]	@ (800f610 <osKernelStart+0x48>)
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f5f4:	f001 f8ae 	bl	8010754 <vTaskStartScheduler>
      stat = osOK;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	607b      	str	r3, [r7, #4]
 800f5fc:	e002      	b.n	800f604 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f5fe:	2301      	movs	r3, #1
 800f600:	425b      	negs	r3, r3
 800f602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f604:	687b      	ldr	r3, [r7, #4]
}
 800f606:	0018      	movs	r0, r3
 800f608:	46bd      	mov	sp, r7
 800f60a:	b002      	add	sp, #8
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	46c0      	nop			@ (mov r8, r8)
 800f610:	20002964 	.word	0x20002964

0800f614 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f614:	b5b0      	push	{r4, r5, r7, lr}
 800f616:	b08e      	sub	sp, #56	@ 0x38
 800f618:	af04      	add	r7, sp, #16
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f620:	2300      	movs	r3, #0
 800f622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f624:	f3ef 8305 	mrs	r3, IPSR
 800f628:	617b      	str	r3, [r7, #20]
  return(result);
 800f62a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d000      	beq.n	800f632 <osThreadNew+0x1e>
 800f630:	e082      	b.n	800f738 <osThreadNew+0x124>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d100      	bne.n	800f63a <osThreadNew+0x26>
 800f638:	e07e      	b.n	800f738 <osThreadNew+0x124>
    stack = configMINIMAL_STACK_SIZE;
 800f63a:	2380      	movs	r3, #128	@ 0x80
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f640:	2318      	movs	r3, #24
 800f642:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f644:	2300      	movs	r3, #0
 800f646:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f648:	2301      	movs	r3, #1
 800f64a:	425b      	negs	r3, r3
 800f64c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d044      	beq.n	800f6de <osThreadNew+0xca>
      if (attr->name != NULL) {
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d002      	beq.n	800f662 <osThreadNew+0x4e>
        name = attr->name;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	699b      	ldr	r3, [r3, #24]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d002      	beq.n	800f670 <osThreadNew+0x5c>
        prio = (UBaseType_t)attr->priority;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d007      	beq.n	800f686 <osThreadNew+0x72>
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	2b38      	cmp	r3, #56	@ 0x38
 800f67a:	d804      	bhi.n	800f686 <osThreadNew+0x72>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	2201      	movs	r2, #1
 800f682:	4013      	ands	r3, r2
 800f684:	d001      	beq.n	800f68a <osThreadNew+0x76>
        return (NULL);
 800f686:	2300      	movs	r3, #0
 800f688:	e057      	b.n	800f73a <osThreadNew+0x126>
      }

      if (attr->stack_size > 0U) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	695b      	ldr	r3, [r3, #20]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d003      	beq.n	800f69a <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	695b      	ldr	r3, [r3, #20]
 800f696:	089b      	lsrs	r3, r3, #2
 800f698:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00e      	beq.n	800f6c0 <osThreadNew+0xac>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	2ba7      	cmp	r3, #167	@ 0xa7
 800f6a8:	d90a      	bls.n	800f6c0 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d006      	beq.n	800f6c0 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	695b      	ldr	r3, [r3, #20]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <osThreadNew+0xac>
        mem = 1;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	61bb      	str	r3, [r7, #24]
 800f6be:	e010      	b.n	800f6e2 <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10c      	bne.n	800f6e2 <osThreadNew+0xce>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d108      	bne.n	800f6e2 <osThreadNew+0xce>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	691b      	ldr	r3, [r3, #16]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d104      	bne.n	800f6e2 <osThreadNew+0xce>
          mem = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	61bb      	str	r3, [r7, #24]
 800f6dc:	e001      	b.n	800f6e2 <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d112      	bne.n	800f70e <osThreadNew+0xfa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f6f0:	68bd      	ldr	r5, [r7, #8]
 800f6f2:	6a3c      	ldr	r4, [r7, #32]
 800f6f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	9302      	str	r3, [sp, #8]
 800f6fa:	9201      	str	r2, [sp, #4]
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	002b      	movs	r3, r5
 800f702:	0022      	movs	r2, r4
 800f704:	f000 fe63 	bl	80103ce <xTaskCreateStatic>
 800f708:	0003      	movs	r3, r0
 800f70a:	613b      	str	r3, [r7, #16]
 800f70c:	e014      	b.n	800f738 <osThreadNew+0x124>
      #endif
    }
    else {
      if (mem == 0) {
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d111      	bne.n	800f738 <osThreadNew+0x124>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	b29a      	uxth	r2, r3
 800f718:	68bc      	ldr	r4, [r7, #8]
 800f71a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	2310      	movs	r3, #16
 800f720:	18fb      	adds	r3, r7, r3
 800f722:	9301      	str	r3, [sp, #4]
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	0023      	movs	r3, r4
 800f72a:	f000 fe97 	bl	801045c <xTaskCreate>
 800f72e:	0003      	movs	r3, r0
 800f730:	2b01      	cmp	r3, #1
 800f732:	d001      	beq.n	800f738 <osThreadNew+0x124>
            hTask = NULL;
 800f734:	2300      	movs	r3, #0
 800f736:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f738:	693b      	ldr	r3, [r7, #16]
}
 800f73a:	0018      	movs	r0, r3
 800f73c:	46bd      	mov	sp, r7
 800f73e:	b00a      	add	sp, #40	@ 0x28
 800f740:	bdb0      	pop	{r4, r5, r7, pc}

0800f742 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f742:	b580      	push	{r7, lr}
 800f744:	b084      	sub	sp, #16
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f74a:	f3ef 8305 	mrs	r3, IPSR
 800f74e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f750:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f752:	2b00      	cmp	r3, #0
 800f754:	d003      	beq.n	800f75e <osDelay+0x1c>
    stat = osErrorISR;
 800f756:	2306      	movs	r3, #6
 800f758:	425b      	negs	r3, r3
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	e008      	b.n	800f770 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800f75e:	2300      	movs	r3, #0
 800f760:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d003      	beq.n	800f770 <osDelay+0x2e>
      vTaskDelay(ticks);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	0018      	movs	r0, r3
 800f76c:	f000 ffcc 	bl	8010708 <vTaskDelay>
    }
  }

  return (stat);
 800f770:	68fb      	ldr	r3, [r7, #12]
}
 800f772:	0018      	movs	r0, r3
 800f774:	46bd      	mov	sp, r7
 800f776:	b004      	add	sp, #16
 800f778:	bd80      	pop	{r7, pc}

0800f77a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b084      	sub	sp, #16
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	0018      	movs	r0, r3
 800f786:	f002 f84b 	bl	8011820 <pvTimerGetTimerID>
 800f78a:	0003      	movs	r3, r0
 800f78c:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d005      	beq.n	800f7a0 <TimerCallback+0x26>
    callb->func (callb->arg);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	0018      	movs	r0, r3
 800f79e:	4790      	blx	r2
  }
}
 800f7a0:	46c0      	nop			@ (mov r8, r8)
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	b004      	add	sp, #16
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f7a8:	b590      	push	{r4, r7, lr}
 800f7aa:	b08d      	sub	sp, #52	@ 0x34
 800f7ac:	af02      	add	r7, sp, #8
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	607a      	str	r2, [r7, #4]
 800f7b2:	603b      	str	r3, [r7, #0]
 800f7b4:	240b      	movs	r4, #11
 800f7b6:	193b      	adds	r3, r7, r4
 800f7b8:	1c0a      	adds	r2, r1, #0
 800f7ba:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7c0:	f3ef 8305 	mrs	r3, IPSR
 800f7c4:	613b      	str	r3, [r7, #16]
  return(result);
 800f7c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d000      	beq.n	800f7ce <osTimerNew+0x26>
 800f7cc:	e06b      	b.n	800f8a6 <osTimerNew+0xfe>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d100      	bne.n	800f7d6 <osTimerNew+0x2e>
 800f7d4:	e067      	b.n	800f8a6 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f7d6:	2008      	movs	r0, #8
 800f7d8:	f002 f96a 	bl	8011ab0 <pvPortMalloc>
 800f7dc:	0003      	movs	r3, r0
 800f7de:	617b      	str	r3, [r7, #20]

    if (callb != NULL) {
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d05f      	beq.n	800f8a6 <osTimerNew+0xfe>
      callb->func = func;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f7f2:	193b      	adds	r3, r7, r4
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d102      	bne.n	800f800 <osTimerNew+0x58>
        reload = pdFALSE;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	61fb      	str	r3, [r7, #28]
 800f7fe:	e001      	b.n	800f804 <osTimerNew+0x5c>
      } else {
        reload = pdTRUE;
 800f800:	2301      	movs	r3, #1
 800f802:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f804:	2301      	movs	r3, #1
 800f806:	425b      	negs	r3, r3
 800f808:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d01c      	beq.n	800f84e <osTimerNew+0xa6>
        if (attr->name != NULL) {
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <osTimerNew+0x7a>
          name = attr->name;
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d006      	beq.n	800f838 <osTimerNew+0x90>
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f830:	d902      	bls.n	800f838 <osTimerNew+0x90>
          mem = 1;
 800f832:	2301      	movs	r3, #1
 800f834:	61bb      	str	r3, [r7, #24]
 800f836:	e00c      	b.n	800f852 <osTimerNew+0xaa>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d108      	bne.n	800f852 <osTimerNew+0xaa>
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d104      	bne.n	800f852 <osTimerNew+0xaa>
            mem = 0;
 800f848:	2300      	movs	r3, #0
 800f84a:	61bb      	str	r3, [r7, #24]
 800f84c:	e001      	b.n	800f852 <osTimerNew+0xaa>
          }
        }
      }
      else {
        mem = 0;
 800f84e:	2300      	movs	r3, #0
 800f850:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d10e      	bne.n	800f876 <osTimerNew+0xce>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	6979      	ldr	r1, [r7, #20]
 800f85e:	69fa      	ldr	r2, [r7, #28]
 800f860:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f862:	9301      	str	r3, [sp, #4]
 800f864:	4b12      	ldr	r3, [pc, #72]	@ (800f8b0 <osTimerNew+0x108>)
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	000b      	movs	r3, r1
 800f86a:	2101      	movs	r1, #1
 800f86c:	f001 fc97 	bl	801119e <xTimerCreateStatic>
 800f870:	0003      	movs	r3, r0
 800f872:	623b      	str	r3, [r7, #32]
 800f874:	e00d      	b.n	800f892 <osTimerNew+0xea>
        #endif
      }
      else {
        if (mem == 0) {
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d10a      	bne.n	800f892 <osTimerNew+0xea>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f87c:	6979      	ldr	r1, [r7, #20]
 800f87e:	69fa      	ldr	r2, [r7, #28]
 800f880:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f882:	4b0b      	ldr	r3, [pc, #44]	@ (800f8b0 <osTimerNew+0x108>)
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	000b      	movs	r3, r1
 800f888:	2101      	movs	r1, #1
 800f88a:	f001 fc65 	bl	8011158 <xTimerCreate>
 800f88e:	0003      	movs	r3, r0
 800f890:	623b      	str	r3, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f892:	6a3b      	ldr	r3, [r7, #32]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d106      	bne.n	800f8a6 <osTimerNew+0xfe>
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d003      	beq.n	800f8a6 <osTimerNew+0xfe>
        vPortFree (callb);
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	0018      	movs	r0, r3
 800f8a2:	f002 f9b5 	bl	8011c10 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f8a6:	6a3b      	ldr	r3, [r7, #32]
}
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	b00b      	add	sp, #44	@ 0x2c
 800f8ae:	bd90      	pop	{r4, r7, pc}
 800f8b0:	0800f77b 	.word	0x0800f77b

0800f8b4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b088      	sub	sp, #32
 800f8b8:	af02      	add	r7, sp, #8
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8c2:	f3ef 8305 	mrs	r3, IPSR
 800f8c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <osTimerStart+0x22>
    stat = osErrorISR;
 800f8ce:	2306      	movs	r3, #6
 800f8d0:	425b      	negs	r3, r3
 800f8d2:	617b      	str	r3, [r7, #20]
 800f8d4:	e017      	b.n	800f906 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d103      	bne.n	800f8e4 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f8dc:	2304      	movs	r3, #4
 800f8de:	425b      	negs	r3, r3
 800f8e0:	617b      	str	r3, [r7, #20]
 800f8e2:	e010      	b.n	800f906 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	6938      	ldr	r0, [r7, #16]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	2104      	movs	r1, #4
 800f8f0:	f001 fcb8 	bl	8011264 <xTimerGenericCommand>
 800f8f4:	0003      	movs	r3, r0
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d102      	bne.n	800f900 <osTimerStart+0x4c>
      stat = osOK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	617b      	str	r3, [r7, #20]
 800f8fe:	e002      	b.n	800f906 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f900:	2303      	movs	r3, #3
 800f902:	425b      	negs	r3, r3
 800f904:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f906:	697b      	ldr	r3, [r7, #20]
}
 800f908:	0018      	movs	r0, r3
 800f90a:	46bd      	mov	sp, r7
 800f90c:	b006      	add	sp, #24
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	4a06      	ldr	r2, [pc, #24]	@ (800f938 <vApplicationGetIdleTaskMemory+0x28>)
 800f920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	4a05      	ldr	r2, [pc, #20]	@ (800f93c <vApplicationGetIdleTaskMemory+0x2c>)
 800f926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2280      	movs	r2, #128	@ 0x80
 800f92c:	0052      	lsls	r2, r2, #1
 800f92e:	601a      	str	r2, [r3, #0]
}
 800f930:	46c0      	nop			@ (mov r8, r8)
 800f932:	46bd      	mov	sp, r7
 800f934:	b004      	add	sp, #16
 800f936:	bd80      	pop	{r7, pc}
 800f938:	20002968 	.word	0x20002968
 800f93c:	20002a10 	.word	0x20002a10

0800f940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4a06      	ldr	r2, [pc, #24]	@ (800f968 <vApplicationGetTimerTaskMemory+0x28>)
 800f950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	4a05      	ldr	r2, [pc, #20]	@ (800f96c <vApplicationGetTimerTaskMemory+0x2c>)
 800f956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2280      	movs	r2, #128	@ 0x80
 800f95c:	0092      	lsls	r2, r2, #2
 800f95e:	601a      	str	r2, [r3, #0]
}
 800f960:	46c0      	nop			@ (mov r8, r8)
 800f962:	46bd      	mov	sp, r7
 800f964:	b004      	add	sp, #16
 800f966:	bd80      	pop	{r7, pc}
 800f968:	20002e10 	.word	0x20002e10
 800f96c:	20002eb8 	.word	0x20002eb8

0800f970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	3308      	adds	r3, #8
 800f97c:	001a      	movs	r2, r3
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2201      	movs	r2, #1
 800f986:	4252      	negs	r2, r2
 800f988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3308      	adds	r3, #8
 800f98e:	001a      	movs	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	3308      	adds	r3, #8
 800f998:	001a      	movs	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f9a4:	46c0      	nop			@ (mov r8, r8)
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	b002      	add	sp, #8
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f9ba:	46c0      	nop			@ (mov r8, r8)
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	b002      	add	sp, #8
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	689a      	ldr	r2, [r3, #8]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	683a      	ldr	r2, [r7, #0]
 800f9e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	683a      	ldr	r2, [r7, #0]
 800f9ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	601a      	str	r2, [r3, #0]
}
 800f9fe:	46c0      	nop			@ (mov r8, r8)
 800fa00:	46bd      	mov	sp, r7
 800fa02:	b004      	add	sp, #16
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	d103      	bne.n	800fa24 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	60fb      	str	r3, [r7, #12]
 800fa22:	e00c      	b.n	800fa3e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	3308      	adds	r3, #8
 800fa28:	60fb      	str	r3, [r7, #12]
 800fa2a:	e002      	b.n	800fa32 <vListInsert+0x2c>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	60fb      	str	r3, [r7, #12]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d2f6      	bcs.n	800fa2c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	601a      	str	r2, [r3, #0]
}
 800fa6a:	46c0      	nop			@ (mov r8, r8)
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	b004      	add	sp, #16
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	691b      	ldr	r3, [r3, #16]
 800fa7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	6892      	ldr	r2, [r2, #8]
 800fa88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	6852      	ldr	r2, [r2, #4]
 800fa92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d103      	bne.n	800faa6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	689a      	ldr	r2, [r3, #8]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	1e5a      	subs	r2, r3, #1
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
}
 800faba:	0018      	movs	r0, r3
 800fabc:	46bd      	mov	sp, r7
 800fabe:	b004      	add	sp, #16
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d102      	bne.n	800fadc <xQueueGenericReset+0x1a>
 800fad6:	b672      	cpsid	i
 800fad8:	46c0      	nop			@ (mov r8, r8)
 800fada:	e7fd      	b.n	800fad8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800fadc:	f001 ff50 	bl	8011980 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faec:	434b      	muls	r3, r1
 800faee:	18d2      	adds	r2, r2, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2200      	movs	r2, #0
 800faf8:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb0a:	1e59      	subs	r1, r3, #1
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb10:	434b      	muls	r3, r1
 800fb12:	18d2      	adds	r2, r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2244      	movs	r2, #68	@ 0x44
 800fb1c:	21ff      	movs	r1, #255	@ 0xff
 800fb1e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2245      	movs	r2, #69	@ 0x45
 800fb24:	21ff      	movs	r1, #255	@ 0xff
 800fb26:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10d      	bne.n	800fb4a <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	691b      	ldr	r3, [r3, #16]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d013      	beq.n	800fb5e <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	3310      	adds	r3, #16
 800fb3a:	0018      	movs	r0, r3
 800fb3c:	f001 f862 	bl	8010c04 <xTaskRemoveFromEventList>
 800fb40:	1e03      	subs	r3, r0, #0
 800fb42:	d00c      	beq.n	800fb5e <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fb44:	f001 ff0c 	bl	8011960 <vPortYield>
 800fb48:	e009      	b.n	800fb5e <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3310      	adds	r3, #16
 800fb4e:	0018      	movs	r0, r3
 800fb50:	f7ff ff0e 	bl	800f970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	3324      	adds	r3, #36	@ 0x24
 800fb58:	0018      	movs	r0, r3
 800fb5a:	f7ff ff09 	bl	800f970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fb5e:	f001 ff21 	bl	80119a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fb62:	2301      	movs	r3, #1
}
 800fb64:	0018      	movs	r0, r3
 800fb66:	46bd      	mov	sp, r7
 800fb68:	b004      	add	sp, #16
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fb6c:	b590      	push	{r4, r7, lr}
 800fb6e:	b089      	sub	sp, #36	@ 0x24
 800fb70:	af02      	add	r7, sp, #8
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
 800fb78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d102      	bne.n	800fb86 <xQueueGenericCreateStatic+0x1a>
 800fb80:	b672      	cpsid	i
 800fb82:	46c0      	nop			@ (mov r8, r8)
 800fb84:	e7fd      	b.n	800fb82 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d102      	bne.n	800fb92 <xQueueGenericCreateStatic+0x26>
 800fb8c:	b672      	cpsid	i
 800fb8e:	46c0      	nop			@ (mov r8, r8)
 800fb90:	e7fd      	b.n	800fb8e <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <xQueueGenericCreateStatic+0x32>
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d001      	beq.n	800fba2 <xQueueGenericCreateStatic+0x36>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e000      	b.n	800fba4 <xQueueGenericCreateStatic+0x38>
 800fba2:	2300      	movs	r3, #0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d102      	bne.n	800fbae <xQueueGenericCreateStatic+0x42>
 800fba8:	b672      	cpsid	i
 800fbaa:	46c0      	nop			@ (mov r8, r8)
 800fbac:	e7fd      	b.n	800fbaa <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d102      	bne.n	800fbba <xQueueGenericCreateStatic+0x4e>
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d101      	bne.n	800fbbe <xQueueGenericCreateStatic+0x52>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e000      	b.n	800fbc0 <xQueueGenericCreateStatic+0x54>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d102      	bne.n	800fbca <xQueueGenericCreateStatic+0x5e>
 800fbc4:	b672      	cpsid	i
 800fbc6:	46c0      	nop			@ (mov r8, r8)
 800fbc8:	e7fd      	b.n	800fbc6 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fbca:	2350      	movs	r3, #80	@ 0x50
 800fbcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	2b50      	cmp	r3, #80	@ 0x50
 800fbd2:	d002      	beq.n	800fbda <xQueueGenericCreateStatic+0x6e>
 800fbd4:	b672      	cpsid	i
 800fbd6:	46c0      	nop			@ (mov r8, r8)
 800fbd8:	e7fd      	b.n	800fbd6 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fbda:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00e      	beq.n	800fc04 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	2246      	movs	r2, #70	@ 0x46
 800fbea:	2101      	movs	r1, #1
 800fbec:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fbee:	2328      	movs	r3, #40	@ 0x28
 800fbf0:	18fb      	adds	r3, r7, r3
 800fbf2:	781c      	ldrb	r4, [r3, #0]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	68b9      	ldr	r1, [r7, #8]
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	9300      	str	r3, [sp, #0]
 800fbfe:	0023      	movs	r3, r4
 800fc00:	f000 f838 	bl	800fc74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc04:	697b      	ldr	r3, [r7, #20]
	}
 800fc06:	0018      	movs	r0, r3
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	b007      	add	sp, #28
 800fc0c:	bd90      	pop	{r4, r7, pc}

0800fc0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fc0e:	b590      	push	{r4, r7, lr}
 800fc10:	b08b      	sub	sp, #44	@ 0x2c
 800fc12:	af02      	add	r7, sp, #8
 800fc14:	60f8      	str	r0, [r7, #12]
 800fc16:	60b9      	str	r1, [r7, #8]
 800fc18:	1dfb      	adds	r3, r7, #7
 800fc1a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d102      	bne.n	800fc28 <xQueueGenericCreate+0x1a>
 800fc22:	b672      	cpsid	i
 800fc24:	46c0      	nop			@ (mov r8, r8)
 800fc26:	e7fd      	b.n	800fc24 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68ba      	ldr	r2, [r7, #8]
 800fc2c:	4353      	muls	r3, r2
 800fc2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	3350      	adds	r3, #80	@ 0x50
 800fc34:	0018      	movs	r0, r3
 800fc36:	f001 ff3b 	bl	8011ab0 <pvPortMalloc>
 800fc3a:	0003      	movs	r3, r0
 800fc3c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d012      	beq.n	800fc6a <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	3350      	adds	r3, #80	@ 0x50
 800fc4c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	2246      	movs	r2, #70	@ 0x46
 800fc52:	2100      	movs	r1, #0
 800fc54:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc56:	1dfb      	adds	r3, r7, #7
 800fc58:	781c      	ldrb	r4, [r3, #0]
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	68b9      	ldr	r1, [r7, #8]
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	0023      	movs	r3, r4
 800fc66:	f000 f805 	bl	800fc74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc6a:	69bb      	ldr	r3, [r7, #24]
	}
 800fc6c:	0018      	movs	r0, r3
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	b009      	add	sp, #36	@ 0x24
 800fc72:	bd90      	pop	{r4, r7, pc}

0800fc74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
 800fc80:	001a      	movs	r2, r3
 800fc82:	1cfb      	adds	r3, r7, #3
 800fc84:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d103      	bne.n	800fc94 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	e002      	b.n	800fc9a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	2101      	movs	r1, #1
 800fcaa:	0018      	movs	r0, r3
 800fcac:	f7ff ff09 	bl	800fac2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	1cfa      	adds	r2, r7, #3
 800fcb4:	214c      	movs	r1, #76	@ 0x4c
 800fcb6:	7812      	ldrb	r2, [r2, #0]
 800fcb8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fcba:	46c0      	nop			@ (mov r8, r8)
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	b004      	add	sp, #16
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b08a      	sub	sp, #40	@ 0x28
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	60f8      	str	r0, [r7, #12]
 800fcca:	60b9      	str	r1, [r7, #8]
 800fccc:	607a      	str	r2, [r7, #4]
 800fcce:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fcd8:	6a3b      	ldr	r3, [r7, #32]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d102      	bne.n	800fce4 <xQueueGenericSend+0x22>
 800fcde:	b672      	cpsid	i
 800fce0:	46c0      	nop			@ (mov r8, r8)
 800fce2:	e7fd      	b.n	800fce0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d103      	bne.n	800fcf2 <xQueueGenericSend+0x30>
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <xQueueGenericSend+0x34>
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e000      	b.n	800fcf8 <xQueueGenericSend+0x36>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d102      	bne.n	800fd02 <xQueueGenericSend+0x40>
 800fcfc:	b672      	cpsid	i
 800fcfe:	46c0      	nop			@ (mov r8, r8)
 800fd00:	e7fd      	b.n	800fcfe <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d103      	bne.n	800fd10 <xQueueGenericSend+0x4e>
 800fd08:	6a3b      	ldr	r3, [r7, #32]
 800fd0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d101      	bne.n	800fd14 <xQueueGenericSend+0x52>
 800fd10:	2301      	movs	r3, #1
 800fd12:	e000      	b.n	800fd16 <xQueueGenericSend+0x54>
 800fd14:	2300      	movs	r3, #0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d102      	bne.n	800fd20 <xQueueGenericSend+0x5e>
 800fd1a:	b672      	cpsid	i
 800fd1c:	46c0      	nop			@ (mov r8, r8)
 800fd1e:	e7fd      	b.n	800fd1c <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd20:	f001 f90c 	bl	8010f3c <xTaskGetSchedulerState>
 800fd24:	1e03      	subs	r3, r0, #0
 800fd26:	d102      	bne.n	800fd2e <xQueueGenericSend+0x6c>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d101      	bne.n	800fd32 <xQueueGenericSend+0x70>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e000      	b.n	800fd34 <xQueueGenericSend+0x72>
 800fd32:	2300      	movs	r3, #0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d102      	bne.n	800fd3e <xQueueGenericSend+0x7c>
 800fd38:	b672      	cpsid	i
 800fd3a:	46c0      	nop			@ (mov r8, r8)
 800fd3c:	e7fd      	b.n	800fd3a <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd3e:	f001 fe1f 	bl	8011980 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd42:	6a3b      	ldr	r3, [r7, #32]
 800fd44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d302      	bcc.n	800fd54 <xQueueGenericSend+0x92>
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	2b02      	cmp	r3, #2
 800fd52:	d11e      	bne.n	800fd92 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	68b9      	ldr	r1, [r7, #8]
 800fd58:	6a3b      	ldr	r3, [r7, #32]
 800fd5a:	0018      	movs	r0, r3
 800fd5c:	f000 f9be 	bl	80100dc <prvCopyDataToQueue>
 800fd60:	0003      	movs	r3, r0
 800fd62:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd64:	6a3b      	ldr	r3, [r7, #32]
 800fd66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d009      	beq.n	800fd80 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd6c:	6a3b      	ldr	r3, [r7, #32]
 800fd6e:	3324      	adds	r3, #36	@ 0x24
 800fd70:	0018      	movs	r0, r3
 800fd72:	f000 ff47 	bl	8010c04 <xTaskRemoveFromEventList>
 800fd76:	1e03      	subs	r3, r0, #0
 800fd78:	d007      	beq.n	800fd8a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fd7a:	f001 fdf1 	bl	8011960 <vPortYield>
 800fd7e:	e004      	b.n	800fd8a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d001      	beq.n	800fd8a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fd86:	f001 fdeb 	bl	8011960 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fd8a:	f001 fe0b 	bl	80119a4 <vPortExitCritical>
				return pdPASS;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e05b      	b.n	800fe4a <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d103      	bne.n	800fda0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd98:	f001 fe04 	bl	80119a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	e054      	b.n	800fe4a <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d106      	bne.n	800fdb4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fda6:	2314      	movs	r3, #20
 800fda8:	18fb      	adds	r3, r7, r3
 800fdaa:	0018      	movs	r0, r3
 800fdac:	f000 ff88 	bl	8010cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fdb4:	f001 fdf6 	bl	80119a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fdb8:	f000 fd2c 	bl	8010814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdbc:	f001 fde0 	bl	8011980 <vPortEnterCritical>
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
 800fdc2:	2244      	movs	r2, #68	@ 0x44
 800fdc4:	5c9b      	ldrb	r3, [r3, r2]
 800fdc6:	b25b      	sxtb	r3, r3
 800fdc8:	3301      	adds	r3, #1
 800fdca:	d103      	bne.n	800fdd4 <xQueueGenericSend+0x112>
 800fdcc:	6a3b      	ldr	r3, [r7, #32]
 800fdce:	2244      	movs	r2, #68	@ 0x44
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	5499      	strb	r1, [r3, r2]
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	2245      	movs	r2, #69	@ 0x45
 800fdd8:	5c9b      	ldrb	r3, [r3, r2]
 800fdda:	b25b      	sxtb	r3, r3
 800fddc:	3301      	adds	r3, #1
 800fdde:	d103      	bne.n	800fde8 <xQueueGenericSend+0x126>
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	2245      	movs	r2, #69	@ 0x45
 800fde4:	2100      	movs	r1, #0
 800fde6:	5499      	strb	r1, [r3, r2]
 800fde8:	f001 fddc 	bl	80119a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdec:	1d3a      	adds	r2, r7, #4
 800fdee:	2314      	movs	r3, #20
 800fdf0:	18fb      	adds	r3, r7, r3
 800fdf2:	0011      	movs	r1, r2
 800fdf4:	0018      	movs	r0, r3
 800fdf6:	f000 ff77 	bl	8010ce8 <xTaskCheckForTimeOut>
 800fdfa:	1e03      	subs	r3, r0, #0
 800fdfc:	d11e      	bne.n	800fe3c <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fdfe:	6a3b      	ldr	r3, [r7, #32]
 800fe00:	0018      	movs	r0, r3
 800fe02:	f000 fa70 	bl	80102e6 <prvIsQueueFull>
 800fe06:	1e03      	subs	r3, r0, #0
 800fe08:	d011      	beq.n	800fe2e <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fe0a:	6a3b      	ldr	r3, [r7, #32]
 800fe0c:	3310      	adds	r3, #16
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	0011      	movs	r1, r2
 800fe12:	0018      	movs	r0, r3
 800fe14:	f000 feae 	bl	8010b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fe18:	6a3b      	ldr	r3, [r7, #32]
 800fe1a:	0018      	movs	r0, r3
 800fe1c:	f000 f9ef 	bl	80101fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fe20:	f000 fd04 	bl	801082c <xTaskResumeAll>
 800fe24:	1e03      	subs	r3, r0, #0
 800fe26:	d18a      	bne.n	800fd3e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800fe28:	f001 fd9a 	bl	8011960 <vPortYield>
 800fe2c:	e787      	b.n	800fd3e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fe2e:	6a3b      	ldr	r3, [r7, #32]
 800fe30:	0018      	movs	r0, r3
 800fe32:	f000 f9e4 	bl	80101fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe36:	f000 fcf9 	bl	801082c <xTaskResumeAll>
 800fe3a:	e780      	b.n	800fd3e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fe3c:	6a3b      	ldr	r3, [r7, #32]
 800fe3e:	0018      	movs	r0, r3
 800fe40:	f000 f9dd 	bl	80101fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe44:	f000 fcf2 	bl	801082c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fe48:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	b00a      	add	sp, #40	@ 0x28
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fe52:	b590      	push	{r4, r7, lr}
 800fe54:	b08b      	sub	sp, #44	@ 0x2c
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	60f8      	str	r0, [r7, #12]
 800fe5a:	60b9      	str	r1, [r7, #8]
 800fe5c:	607a      	str	r2, [r7, #4]
 800fe5e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d102      	bne.n	800fe70 <xQueueGenericSendFromISR+0x1e>
 800fe6a:	b672      	cpsid	i
 800fe6c:	46c0      	nop			@ (mov r8, r8)
 800fe6e:	e7fd      	b.n	800fe6c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d103      	bne.n	800fe7e <xQueueGenericSendFromISR+0x2c>
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <xQueueGenericSendFromISR+0x30>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e000      	b.n	800fe84 <xQueueGenericSendFromISR+0x32>
 800fe82:	2300      	movs	r3, #0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d102      	bne.n	800fe8e <xQueueGenericSendFromISR+0x3c>
 800fe88:	b672      	cpsid	i
 800fe8a:	46c0      	nop			@ (mov r8, r8)
 800fe8c:	e7fd      	b.n	800fe8a <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	d103      	bne.n	800fe9c <xQueueGenericSendFromISR+0x4a>
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d101      	bne.n	800fea0 <xQueueGenericSendFromISR+0x4e>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e000      	b.n	800fea2 <xQueueGenericSendFromISR+0x50>
 800fea0:	2300      	movs	r3, #0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d102      	bne.n	800feac <xQueueGenericSendFromISR+0x5a>
 800fea6:	b672      	cpsid	i
 800fea8:	46c0      	nop			@ (mov r8, r8)
 800feaa:	e7fd      	b.n	800fea8 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800feac:	f001 fd92 	bl	80119d4 <ulSetInterruptMaskFromISR>
 800feb0:	0003      	movs	r3, r0
 800feb2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800feb8:	6a3b      	ldr	r3, [r7, #32]
 800feba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800febc:	429a      	cmp	r2, r3
 800febe:	d302      	bcc.n	800fec6 <xQueueGenericSendFromISR+0x74>
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	2b02      	cmp	r3, #2
 800fec4:	d131      	bne.n	800ff2a <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fec6:	241b      	movs	r4, #27
 800fec8:	193b      	adds	r3, r7, r4
 800feca:	6a3a      	ldr	r2, [r7, #32]
 800fecc:	2145      	movs	r1, #69	@ 0x45
 800fece:	5c52      	ldrb	r2, [r2, r1]
 800fed0:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fed2:	6a3b      	ldr	r3, [r7, #32]
 800fed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	68b9      	ldr	r1, [r7, #8]
 800fedc:	6a3b      	ldr	r3, [r7, #32]
 800fede:	0018      	movs	r0, r3
 800fee0:	f000 f8fc 	bl	80100dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fee4:	193b      	adds	r3, r7, r4
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	b25b      	sxtb	r3, r3
 800feea:	3301      	adds	r3, #1
 800feec:	d111      	bne.n	800ff12 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d016      	beq.n	800ff24 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fef6:	6a3b      	ldr	r3, [r7, #32]
 800fef8:	3324      	adds	r3, #36	@ 0x24
 800fefa:	0018      	movs	r0, r3
 800fefc:	f000 fe82 	bl	8010c04 <xTaskRemoveFromEventList>
 800ff00:	1e03      	subs	r3, r0, #0
 800ff02:	d00f      	beq.n	800ff24 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00c      	beq.n	800ff24 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	601a      	str	r2, [r3, #0]
 800ff10:	e008      	b.n	800ff24 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff12:	231b      	movs	r3, #27
 800ff14:	18fb      	adds	r3, r7, r3
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	b259      	sxtb	r1, r3
 800ff1e:	6a3b      	ldr	r3, [r7, #32]
 800ff20:	2245      	movs	r2, #69	@ 0x45
 800ff22:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ff24:	2301      	movs	r3, #1
 800ff26:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800ff28:	e001      	b.n	800ff2e <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	0018      	movs	r0, r3
 800ff32:	f001 fd55 	bl	80119e0 <vClearInterruptMaskFromISR>

	return xReturn;
 800ff36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff38:	0018      	movs	r0, r3
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	b00b      	add	sp, #44	@ 0x2c
 800ff3e:	bd90      	pop	{r4, r7, pc}

0800ff40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b08a      	sub	sp, #40	@ 0x28
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff54:	6a3b      	ldr	r3, [r7, #32]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d102      	bne.n	800ff60 <xQueueReceive+0x20>
 800ff5a:	b672      	cpsid	i
 800ff5c:	46c0      	nop			@ (mov r8, r8)
 800ff5e:	e7fd      	b.n	800ff5c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d103      	bne.n	800ff6e <xQueueReceive+0x2e>
 800ff66:	6a3b      	ldr	r3, [r7, #32]
 800ff68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <xQueueReceive+0x32>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e000      	b.n	800ff74 <xQueueReceive+0x34>
 800ff72:	2300      	movs	r3, #0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <xQueueReceive+0x3e>
 800ff78:	b672      	cpsid	i
 800ff7a:	46c0      	nop			@ (mov r8, r8)
 800ff7c:	e7fd      	b.n	800ff7a <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff7e:	f000 ffdd 	bl	8010f3c <xTaskGetSchedulerState>
 800ff82:	1e03      	subs	r3, r0, #0
 800ff84:	d102      	bne.n	800ff8c <xQueueReceive+0x4c>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <xQueueReceive+0x50>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e000      	b.n	800ff92 <xQueueReceive+0x52>
 800ff90:	2300      	movs	r3, #0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d102      	bne.n	800ff9c <xQueueReceive+0x5c>
 800ff96:	b672      	cpsid	i
 800ff98:	46c0      	nop			@ (mov r8, r8)
 800ff9a:	e7fd      	b.n	800ff98 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff9c:	f001 fcf0 	bl	8011980 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffa4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01a      	beq.n	800ffe2 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffac:	68ba      	ldr	r2, [r7, #8]
 800ffae:	6a3b      	ldr	r3, [r7, #32]
 800ffb0:	0011      	movs	r1, r2
 800ffb2:	0018      	movs	r0, r3
 800ffb4:	f000 f8fd 	bl	80101b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	1e5a      	subs	r2, r3, #1
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffc0:	6a3b      	ldr	r3, [r7, #32]
 800ffc2:	691b      	ldr	r3, [r3, #16]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d008      	beq.n	800ffda <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffc8:	6a3b      	ldr	r3, [r7, #32]
 800ffca:	3310      	adds	r3, #16
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f000 fe19 	bl	8010c04 <xTaskRemoveFromEventList>
 800ffd2:	1e03      	subs	r3, r0, #0
 800ffd4:	d001      	beq.n	800ffda <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ffd6:	f001 fcc3 	bl	8011960 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ffda:	f001 fce3 	bl	80119a4 <vPortExitCritical>
				return pdPASS;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e062      	b.n	80100a8 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ffe8:	f001 fcdc 	bl	80119a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ffec:	2300      	movs	r3, #0
 800ffee:	e05b      	b.n	80100a8 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d106      	bne.n	8010004 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fff6:	2314      	movs	r3, #20
 800fff8:	18fb      	adds	r3, r7, r3
 800fffa:	0018      	movs	r0, r3
 800fffc:	f000 fe60 	bl	8010cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010000:	2301      	movs	r3, #1
 8010002:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010004:	f001 fcce 	bl	80119a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010008:	f000 fc04 	bl	8010814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801000c:	f001 fcb8 	bl	8011980 <vPortEnterCritical>
 8010010:	6a3b      	ldr	r3, [r7, #32]
 8010012:	2244      	movs	r2, #68	@ 0x44
 8010014:	5c9b      	ldrb	r3, [r3, r2]
 8010016:	b25b      	sxtb	r3, r3
 8010018:	3301      	adds	r3, #1
 801001a:	d103      	bne.n	8010024 <xQueueReceive+0xe4>
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	2244      	movs	r2, #68	@ 0x44
 8010020:	2100      	movs	r1, #0
 8010022:	5499      	strb	r1, [r3, r2]
 8010024:	6a3b      	ldr	r3, [r7, #32]
 8010026:	2245      	movs	r2, #69	@ 0x45
 8010028:	5c9b      	ldrb	r3, [r3, r2]
 801002a:	b25b      	sxtb	r3, r3
 801002c:	3301      	adds	r3, #1
 801002e:	d103      	bne.n	8010038 <xQueueReceive+0xf8>
 8010030:	6a3b      	ldr	r3, [r7, #32]
 8010032:	2245      	movs	r2, #69	@ 0x45
 8010034:	2100      	movs	r1, #0
 8010036:	5499      	strb	r1, [r3, r2]
 8010038:	f001 fcb4 	bl	80119a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801003c:	1d3a      	adds	r2, r7, #4
 801003e:	2314      	movs	r3, #20
 8010040:	18fb      	adds	r3, r7, r3
 8010042:	0011      	movs	r1, r2
 8010044:	0018      	movs	r0, r3
 8010046:	f000 fe4f 	bl	8010ce8 <xTaskCheckForTimeOut>
 801004a:	1e03      	subs	r3, r0, #0
 801004c:	d11e      	bne.n	801008c <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	0018      	movs	r0, r3
 8010052:	f000 f932 	bl	80102ba <prvIsQueueEmpty>
 8010056:	1e03      	subs	r3, r0, #0
 8010058:	d011      	beq.n	801007e <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	3324      	adds	r3, #36	@ 0x24
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	0011      	movs	r1, r2
 8010062:	0018      	movs	r0, r3
 8010064:	f000 fd86 	bl	8010b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	0018      	movs	r0, r3
 801006c:	f000 f8c7 	bl	80101fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010070:	f000 fbdc 	bl	801082c <xTaskResumeAll>
 8010074:	1e03      	subs	r3, r0, #0
 8010076:	d191      	bne.n	800ff9c <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8010078:	f001 fc72 	bl	8011960 <vPortYield>
 801007c:	e78e      	b.n	800ff9c <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	0018      	movs	r0, r3
 8010082:	f000 f8bc 	bl	80101fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010086:	f000 fbd1 	bl	801082c <xTaskResumeAll>
 801008a:	e787      	b.n	800ff9c <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	0018      	movs	r0, r3
 8010090:	f000 f8b5 	bl	80101fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010094:	f000 fbca 	bl	801082c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010098:	6a3b      	ldr	r3, [r7, #32]
 801009a:	0018      	movs	r0, r3
 801009c:	f000 f90d 	bl	80102ba <prvIsQueueEmpty>
 80100a0:	1e03      	subs	r3, r0, #0
 80100a2:	d100      	bne.n	80100a6 <xQueueReceive+0x166>
 80100a4:	e77a      	b.n	800ff9c <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80100a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80100a8:	0018      	movs	r0, r3
 80100aa:	46bd      	mov	sp, r7
 80100ac:	b00a      	add	sp, #40	@ 0x28
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d102      	bne.n	80100c4 <uxQueueMessagesWaiting+0x14>
 80100be:	b672      	cpsid	i
 80100c0:	46c0      	nop			@ (mov r8, r8)
 80100c2:	e7fd      	b.n	80100c0 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 80100c4:	f001 fc5c 	bl	8011980 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80100ce:	f001 fc69 	bl	80119a4 <vPortExitCritical>

	return uxReturn;
 80100d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80100d4:	0018      	movs	r0, r3
 80100d6:	46bd      	mov	sp, r7
 80100d8:	b004      	add	sp, #16
 80100da:	bd80      	pop	{r7, pc}

080100dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b086      	sub	sp, #24
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80100e8:	2300      	movs	r3, #0
 80100ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10e      	bne.n	8010118 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d14e      	bne.n	80101a0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	0018      	movs	r0, r3
 8010108:	f000 ff34 	bl	8010f74 <xTaskPriorityDisinherit>
 801010c:	0003      	movs	r3, r0
 801010e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2200      	movs	r2, #0
 8010114:	609a      	str	r2, [r3, #8]
 8010116:	e043      	b.n	80101a0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d119      	bne.n	8010152 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6858      	ldr	r0, [r3, #4]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	0019      	movs	r1, r3
 801012a:	f003 fa51 	bl	80135d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010136:	18d2      	adds	r2, r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	685a      	ldr	r2, [r3, #4]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	429a      	cmp	r2, r3
 8010146:	d32b      	bcc.n	80101a0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	605a      	str	r2, [r3, #4]
 8010150:	e026      	b.n	80101a0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	68d8      	ldr	r0, [r3, #12]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	0019      	movs	r1, r3
 801015e:	f003 fa37 	bl	80135d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	68da      	ldr	r2, [r3, #12]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801016a:	425b      	negs	r3, r3
 801016c:	18d2      	adds	r2, r2, r3
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68da      	ldr	r2, [r3, #12]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d207      	bcs.n	801018e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	689a      	ldr	r2, [r3, #8]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010186:	425b      	negs	r3, r3
 8010188:	18d2      	adds	r2, r2, r3
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d105      	bne.n	80101a0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d002      	beq.n	80101a0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	3b01      	subs	r3, #1
 801019e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	1c5a      	adds	r2, r3, #1
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80101a8:	697b      	ldr	r3, [r7, #20]
}
 80101aa:	0018      	movs	r0, r3
 80101ac:	46bd      	mov	sp, r7
 80101ae:	b006      	add	sp, #24
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b082      	sub	sp, #8
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d018      	beq.n	80101f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	68da      	ldr	r2, [r3, #12]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101cc:	18d2      	adds	r2, r2, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68da      	ldr	r2, [r3, #12]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d303      	bcc.n	80101e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	68d9      	ldr	r1, [r3, #12]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	0018      	movs	r0, r3
 80101f2:	f003 f9ed 	bl	80135d0 <memcpy>
	}
}
 80101f6:	46c0      	nop			@ (mov r8, r8)
 80101f8:	46bd      	mov	sp, r7
 80101fa:	b002      	add	sp, #8
 80101fc:	bd80      	pop	{r7, pc}

080101fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b084      	sub	sp, #16
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010206:	f001 fbbb 	bl	8011980 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801020a:	230f      	movs	r3, #15
 801020c:	18fb      	adds	r3, r7, r3
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	2145      	movs	r1, #69	@ 0x45
 8010212:	5c52      	ldrb	r2, [r2, r1]
 8010214:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010216:	e013      	b.n	8010240 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801021c:	2b00      	cmp	r3, #0
 801021e:	d016      	beq.n	801024e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	3324      	adds	r3, #36	@ 0x24
 8010224:	0018      	movs	r0, r3
 8010226:	f000 fced 	bl	8010c04 <xTaskRemoveFromEventList>
 801022a:	1e03      	subs	r3, r0, #0
 801022c:	d001      	beq.n	8010232 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801022e:	f000 fdad 	bl	8010d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010232:	210f      	movs	r1, #15
 8010234:	187b      	adds	r3, r7, r1
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	3b01      	subs	r3, #1
 801023a:	b2da      	uxtb	r2, r3
 801023c:	187b      	adds	r3, r7, r1
 801023e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010240:	230f      	movs	r3, #15
 8010242:	18fb      	adds	r3, r7, r3
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	b25b      	sxtb	r3, r3
 8010248:	2b00      	cmp	r3, #0
 801024a:	dce5      	bgt.n	8010218 <prvUnlockQueue+0x1a>
 801024c:	e000      	b.n	8010250 <prvUnlockQueue+0x52>
					break;
 801024e:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2245      	movs	r2, #69	@ 0x45
 8010254:	21ff      	movs	r1, #255	@ 0xff
 8010256:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8010258:	f001 fba4 	bl	80119a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801025c:	f001 fb90 	bl	8011980 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010260:	230e      	movs	r3, #14
 8010262:	18fb      	adds	r3, r7, r3
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	2144      	movs	r1, #68	@ 0x44
 8010268:	5c52      	ldrb	r2, [r2, r1]
 801026a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801026c:	e013      	b.n	8010296 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	691b      	ldr	r3, [r3, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d016      	beq.n	80102a4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	3310      	adds	r3, #16
 801027a:	0018      	movs	r0, r3
 801027c:	f000 fcc2 	bl	8010c04 <xTaskRemoveFromEventList>
 8010280:	1e03      	subs	r3, r0, #0
 8010282:	d001      	beq.n	8010288 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8010284:	f000 fd82 	bl	8010d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010288:	210e      	movs	r1, #14
 801028a:	187b      	adds	r3, r7, r1
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	3b01      	subs	r3, #1
 8010290:	b2da      	uxtb	r2, r3
 8010292:	187b      	adds	r3, r7, r1
 8010294:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010296:	230e      	movs	r3, #14
 8010298:	18fb      	adds	r3, r7, r3
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	b25b      	sxtb	r3, r3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	dce5      	bgt.n	801026e <prvUnlockQueue+0x70>
 80102a2:	e000      	b.n	80102a6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80102a4:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2244      	movs	r2, #68	@ 0x44
 80102aa:	21ff      	movs	r1, #255	@ 0xff
 80102ac:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80102ae:	f001 fb79 	bl	80119a4 <vPortExitCritical>
}
 80102b2:	46c0      	nop			@ (mov r8, r8)
 80102b4:	46bd      	mov	sp, r7
 80102b6:	b004      	add	sp, #16
 80102b8:	bd80      	pop	{r7, pc}

080102ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b084      	sub	sp, #16
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80102c2:	f001 fb5d 	bl	8011980 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d102      	bne.n	80102d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80102ce:	2301      	movs	r3, #1
 80102d0:	60fb      	str	r3, [r7, #12]
 80102d2:	e001      	b.n	80102d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80102d4:	2300      	movs	r3, #0
 80102d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80102d8:	f001 fb64 	bl	80119a4 <vPortExitCritical>

	return xReturn;
 80102dc:	68fb      	ldr	r3, [r7, #12]
}
 80102de:	0018      	movs	r0, r3
 80102e0:	46bd      	mov	sp, r7
 80102e2:	b004      	add	sp, #16
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b084      	sub	sp, #16
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80102ee:	f001 fb47 	bl	8011980 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d102      	bne.n	8010304 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80102fe:	2301      	movs	r3, #1
 8010300:	60fb      	str	r3, [r7, #12]
 8010302:	e001      	b.n	8010308 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010304:	2300      	movs	r3, #0
 8010306:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010308:	f001 fb4c 	bl	80119a4 <vPortExitCritical>

	return xReturn;
 801030c:	68fb      	ldr	r3, [r7, #12]
}
 801030e:	0018      	movs	r0, r3
 8010310:	46bd      	mov	sp, r7
 8010312:	b004      	add	sp, #16
 8010314:	bd80      	pop	{r7, pc}
	...

08010318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010322:	2300      	movs	r3, #0
 8010324:	60fb      	str	r3, [r7, #12]
 8010326:	e015      	b.n	8010354 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010328:	4b0e      	ldr	r3, [pc, #56]	@ (8010364 <vQueueAddToRegistry+0x4c>)
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	00d2      	lsls	r2, r2, #3
 801032e:	58d3      	ldr	r3, [r2, r3]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d10c      	bne.n	801034e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010334:	4b0b      	ldr	r3, [pc, #44]	@ (8010364 <vQueueAddToRegistry+0x4c>)
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	00d2      	lsls	r2, r2, #3
 801033a:	6839      	ldr	r1, [r7, #0]
 801033c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801033e:	4a09      	ldr	r2, [pc, #36]	@ (8010364 <vQueueAddToRegistry+0x4c>)
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	18d3      	adds	r3, r2, r3
 8010346:	3304      	adds	r3, #4
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801034c:	e006      	b.n	801035c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	3301      	adds	r3, #1
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b07      	cmp	r3, #7
 8010358:	d9e6      	bls.n	8010328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801035a:	46c0      	nop			@ (mov r8, r8)
 801035c:	46c0      	nop			@ (mov r8, r8)
 801035e:	46bd      	mov	sp, r7
 8010360:	b004      	add	sp, #16
 8010362:	bd80      	pop	{r7, pc}
 8010364:	200036b8 	.word	0x200036b8

08010368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010368:	b580      	push	{r7, lr}
 801036a:	b086      	sub	sp, #24
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010378:	f001 fb02 	bl	8011980 <vPortEnterCritical>
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	2244      	movs	r2, #68	@ 0x44
 8010380:	5c9b      	ldrb	r3, [r3, r2]
 8010382:	b25b      	sxtb	r3, r3
 8010384:	3301      	adds	r3, #1
 8010386:	d103      	bne.n	8010390 <vQueueWaitForMessageRestricted+0x28>
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	2244      	movs	r2, #68	@ 0x44
 801038c:	2100      	movs	r1, #0
 801038e:	5499      	strb	r1, [r3, r2]
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	2245      	movs	r2, #69	@ 0x45
 8010394:	5c9b      	ldrb	r3, [r3, r2]
 8010396:	b25b      	sxtb	r3, r3
 8010398:	3301      	adds	r3, #1
 801039a:	d103      	bne.n	80103a4 <vQueueWaitForMessageRestricted+0x3c>
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	2245      	movs	r2, #69	@ 0x45
 80103a0:	2100      	movs	r1, #0
 80103a2:	5499      	strb	r1, [r3, r2]
 80103a4:	f001 fafe 	bl	80119a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d106      	bne.n	80103be <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	3324      	adds	r3, #36	@ 0x24
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	68b9      	ldr	r1, [r7, #8]
 80103b8:	0018      	movs	r0, r3
 80103ba:	f000 fbfb 	bl	8010bb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	0018      	movs	r0, r3
 80103c2:	f7ff ff1c 	bl	80101fe <prvUnlockQueue>
	}
 80103c6:	46c0      	nop			@ (mov r8, r8)
 80103c8:	46bd      	mov	sp, r7
 80103ca:	b006      	add	sp, #24
 80103cc:	bd80      	pop	{r7, pc}

080103ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80103ce:	b590      	push	{r4, r7, lr}
 80103d0:	b08d      	sub	sp, #52	@ 0x34
 80103d2:	af04      	add	r7, sp, #16
 80103d4:	60f8      	str	r0, [r7, #12]
 80103d6:	60b9      	str	r1, [r7, #8]
 80103d8:	607a      	str	r2, [r7, #4]
 80103da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80103dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d102      	bne.n	80103e8 <xTaskCreateStatic+0x1a>
 80103e2:	b672      	cpsid	i
 80103e4:	46c0      	nop			@ (mov r8, r8)
 80103e6:	e7fd      	b.n	80103e4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80103e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d102      	bne.n	80103f4 <xTaskCreateStatic+0x26>
 80103ee:	b672      	cpsid	i
 80103f0:	46c0      	nop			@ (mov r8, r8)
 80103f2:	e7fd      	b.n	80103f0 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80103f4:	23a8      	movs	r3, #168	@ 0xa8
 80103f6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	2ba8      	cmp	r3, #168	@ 0xa8
 80103fc:	d002      	beq.n	8010404 <xTaskCreateStatic+0x36>
 80103fe:	b672      	cpsid	i
 8010400:	46c0      	nop			@ (mov r8, r8)
 8010402:	e7fd      	b.n	8010400 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010404:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010408:	2b00      	cmp	r3, #0
 801040a:	d020      	beq.n	801044e <xTaskCreateStatic+0x80>
 801040c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801040e:	2b00      	cmp	r3, #0
 8010410:	d01d      	beq.n	801044e <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010414:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801041a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	22a5      	movs	r2, #165	@ 0xa5
 8010420:	2102      	movs	r1, #2
 8010422:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010424:	683c      	ldr	r4, [r7, #0]
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	68b9      	ldr	r1, [r7, #8]
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	2300      	movs	r3, #0
 801042e:	9303      	str	r3, [sp, #12]
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	9302      	str	r3, [sp, #8]
 8010434:	2318      	movs	r3, #24
 8010436:	18fb      	adds	r3, r7, r3
 8010438:	9301      	str	r3, [sp, #4]
 801043a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	0023      	movs	r3, r4
 8010440:	f000 f858 	bl	80104f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	0018      	movs	r0, r3
 8010448:	f000 f8f6 	bl	8010638 <prvAddNewTaskToReadyList>
 801044c:	e001      	b.n	8010452 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 801044e:	2300      	movs	r3, #0
 8010450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010452:	69bb      	ldr	r3, [r7, #24]
	}
 8010454:	0018      	movs	r0, r3
 8010456:	46bd      	mov	sp, r7
 8010458:	b009      	add	sp, #36	@ 0x24
 801045a:	bd90      	pop	{r4, r7, pc}

0801045c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801045c:	b590      	push	{r4, r7, lr}
 801045e:	b08d      	sub	sp, #52	@ 0x34
 8010460:	af04      	add	r7, sp, #16
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	603b      	str	r3, [r7, #0]
 8010468:	1dbb      	adds	r3, r7, #6
 801046a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801046c:	1dbb      	adds	r3, r7, #6
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	0018      	movs	r0, r3
 8010474:	f001 fb1c 	bl	8011ab0 <pvPortMalloc>
 8010478:	0003      	movs	r3, r0
 801047a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d010      	beq.n	80104a4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010482:	20a8      	movs	r0, #168	@ 0xa8
 8010484:	f001 fb14 	bl	8011ab0 <pvPortMalloc>
 8010488:	0003      	movs	r3, r0
 801048a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d003      	beq.n	801049a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	697a      	ldr	r2, [r7, #20]
 8010496:	631a      	str	r2, [r3, #48]	@ 0x30
 8010498:	e006      	b.n	80104a8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	0018      	movs	r0, r3
 801049e:	f001 fbb7 	bl	8011c10 <vPortFree>
 80104a2:	e001      	b.n	80104a8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80104a4:	2300      	movs	r3, #0
 80104a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d01a      	beq.n	80104e4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	22a5      	movs	r2, #165	@ 0xa5
 80104b2:	2100      	movs	r1, #0
 80104b4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104b6:	1dbb      	adds	r3, r7, #6
 80104b8:	881a      	ldrh	r2, [r3, #0]
 80104ba:	683c      	ldr	r4, [r7, #0]
 80104bc:	68b9      	ldr	r1, [r7, #8]
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	2300      	movs	r3, #0
 80104c2:	9303      	str	r3, [sp, #12]
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	9302      	str	r3, [sp, #8]
 80104c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ca:	9301      	str	r3, [sp, #4]
 80104cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	0023      	movs	r3, r4
 80104d2:	f000 f80f 	bl	80104f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	0018      	movs	r0, r3
 80104da:	f000 f8ad 	bl	8010638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80104de:	2301      	movs	r3, #1
 80104e0:	61bb      	str	r3, [r7, #24]
 80104e2:	e002      	b.n	80104ea <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80104e4:	2301      	movs	r3, #1
 80104e6:	425b      	negs	r3, r3
 80104e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80104ea:	69bb      	ldr	r3, [r7, #24]
	}
 80104ec:	0018      	movs	r0, r3
 80104ee:	46bd      	mov	sp, r7
 80104f0:	b009      	add	sp, #36	@ 0x24
 80104f2:	bd90      	pop	{r4, r7, pc}

080104f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010504:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	001a      	movs	r2, r3
 801050c:	21a5      	movs	r1, #165	@ 0xa5
 801050e:	f002 ff6d 	bl	80133ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4943      	ldr	r1, [pc, #268]	@ (8010628 <prvInitialiseNewTask+0x134>)
 801051a:	468c      	mov	ip, r1
 801051c:	4463      	add	r3, ip
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	18d3      	adds	r3, r2, r3
 8010522:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	2207      	movs	r2, #7
 8010528:	4393      	bics	r3, r2
 801052a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	2207      	movs	r2, #7
 8010530:	4013      	ands	r3, r2
 8010532:	d002      	beq.n	801053a <prvInitialiseNewTask+0x46>
 8010534:	b672      	cpsid	i
 8010536:	46c0      	nop			@ (mov r8, r8)
 8010538:	e7fd      	b.n	8010536 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d020      	beq.n	8010582 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010540:	2300      	movs	r3, #0
 8010542:	617b      	str	r3, [r7, #20]
 8010544:	e013      	b.n	801056e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	18d3      	adds	r3, r2, r3
 801054c:	7818      	ldrb	r0, [r3, #0]
 801054e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010550:	2134      	movs	r1, #52	@ 0x34
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	18d3      	adds	r3, r2, r3
 8010556:	185b      	adds	r3, r3, r1
 8010558:	1c02      	adds	r2, r0, #0
 801055a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801055c:	68ba      	ldr	r2, [r7, #8]
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	18d3      	adds	r3, r2, r3
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d006      	beq.n	8010576 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	3301      	adds	r3, #1
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2b0f      	cmp	r3, #15
 8010572:	d9e8      	bls.n	8010546 <prvInitialiseNewTask+0x52>
 8010574:	e000      	b.n	8010578 <prvInitialiseNewTask+0x84>
			{
				break;
 8010576:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057a:	2243      	movs	r2, #67	@ 0x43
 801057c:	2100      	movs	r1, #0
 801057e:	5499      	strb	r1, [r3, r2]
 8010580:	e003      	b.n	801058a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010584:	2234      	movs	r2, #52	@ 0x34
 8010586:	2100      	movs	r1, #0
 8010588:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	2b37      	cmp	r3, #55	@ 0x37
 801058e:	d901      	bls.n	8010594 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010590:	2337      	movs	r3, #55	@ 0x37
 8010592:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010596:	6a3a      	ldr	r2, [r7, #32]
 8010598:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801059a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801059c:	6a3a      	ldr	r2, [r7, #32]
 801059e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80105a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a2:	2200      	movs	r2, #0
 80105a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80105a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a8:	3304      	adds	r3, #4
 80105aa:	0018      	movs	r0, r3
 80105ac:	f7ff f9fe 	bl	800f9ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80105b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b2:	3318      	adds	r3, #24
 80105b4:	0018      	movs	r0, r3
 80105b6:	f7ff f9f9 	bl	800f9ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80105ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80105be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105c0:	6a3b      	ldr	r3, [r7, #32]
 80105c2:	2238      	movs	r2, #56	@ 0x38
 80105c4:	1ad2      	subs	r2, r2, r3
 80105c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80105ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80105ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80105d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d2:	22a0      	movs	r2, #160	@ 0xa0
 80105d4:	2100      	movs	r1, #0
 80105d6:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105da:	22a4      	movs	r2, #164	@ 0xa4
 80105dc:	2100      	movs	r1, #0
 80105de:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80105e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e2:	3354      	adds	r3, #84	@ 0x54
 80105e4:	224c      	movs	r2, #76	@ 0x4c
 80105e6:	2100      	movs	r1, #0
 80105e8:	0018      	movs	r0, r3
 80105ea:	f002 feff 	bl	80133ec <memset>
 80105ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f0:	4a0e      	ldr	r2, [pc, #56]	@ (801062c <prvInitialiseNewTask+0x138>)
 80105f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80105f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f6:	4a0e      	ldr	r2, [pc, #56]	@ (8010630 <prvInitialiseNewTask+0x13c>)
 80105f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80105fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105fc:	4a0d      	ldr	r2, [pc, #52]	@ (8010634 <prvInitialiseNewTask+0x140>)
 80105fe:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010600:	683a      	ldr	r2, [r7, #0]
 8010602:	68f9      	ldr	r1, [r7, #12]
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	0018      	movs	r0, r3
 8010608:	f001 f922 	bl	8011850 <pxPortInitialiseStack>
 801060c:	0002      	movs	r2, r0
 801060e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010610:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801061c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801061e:	46c0      	nop			@ (mov r8, r8)
 8010620:	46bd      	mov	sp, r7
 8010622:	b006      	add	sp, #24
 8010624:	bd80      	pop	{r7, pc}
 8010626:	46c0      	nop			@ (mov r8, r8)
 8010628:	3fffffff 	.word	0x3fffffff
 801062c:	20007144 	.word	0x20007144
 8010630:	200071ac 	.word	0x200071ac
 8010634:	20007214 	.word	0x20007214

08010638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010640:	f001 f99e 	bl	8011980 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010644:	4b2a      	ldr	r3, [pc, #168]	@ (80106f0 <prvAddNewTaskToReadyList+0xb8>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	1c5a      	adds	r2, r3, #1
 801064a:	4b29      	ldr	r3, [pc, #164]	@ (80106f0 <prvAddNewTaskToReadyList+0xb8>)
 801064c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801064e:	4b29      	ldr	r3, [pc, #164]	@ (80106f4 <prvAddNewTaskToReadyList+0xbc>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d109      	bne.n	801066a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010656:	4b27      	ldr	r3, [pc, #156]	@ (80106f4 <prvAddNewTaskToReadyList+0xbc>)
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801065c:	4b24      	ldr	r3, [pc, #144]	@ (80106f0 <prvAddNewTaskToReadyList+0xb8>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d110      	bne.n	8010686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010664:	f000 fbac 	bl	8010dc0 <prvInitialiseTaskLists>
 8010668:	e00d      	b.n	8010686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801066a:	4b23      	ldr	r3, [pc, #140]	@ (80106f8 <prvAddNewTaskToReadyList+0xc0>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d109      	bne.n	8010686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010672:	4b20      	ldr	r3, [pc, #128]	@ (80106f4 <prvAddNewTaskToReadyList+0xbc>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801067c:	429a      	cmp	r2, r3
 801067e:	d802      	bhi.n	8010686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010680:	4b1c      	ldr	r3, [pc, #112]	@ (80106f4 <prvAddNewTaskToReadyList+0xbc>)
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010686:	4b1d      	ldr	r3, [pc, #116]	@ (80106fc <prvAddNewTaskToReadyList+0xc4>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	1c5a      	adds	r2, r3, #1
 801068c:	4b1b      	ldr	r3, [pc, #108]	@ (80106fc <prvAddNewTaskToReadyList+0xc4>)
 801068e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010690:	4b1a      	ldr	r3, [pc, #104]	@ (80106fc <prvAddNewTaskToReadyList+0xc4>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069c:	4b18      	ldr	r3, [pc, #96]	@ (8010700 <prvAddNewTaskToReadyList+0xc8>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d903      	bls.n	80106ac <prvAddNewTaskToReadyList+0x74>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106a8:	4b15      	ldr	r3, [pc, #84]	@ (8010700 <prvAddNewTaskToReadyList+0xc8>)
 80106aa:	601a      	str	r2, [r3, #0]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106b0:	0013      	movs	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	189b      	adds	r3, r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4a12      	ldr	r2, [pc, #72]	@ (8010704 <prvAddNewTaskToReadyList+0xcc>)
 80106ba:	189a      	adds	r2, r3, r2
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3304      	adds	r3, #4
 80106c0:	0019      	movs	r1, r3
 80106c2:	0010      	movs	r0, r2
 80106c4:	f7ff f97d 	bl	800f9c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80106c8:	f001 f96c 	bl	80119a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80106cc:	4b0a      	ldr	r3, [pc, #40]	@ (80106f8 <prvAddNewTaskToReadyList+0xc0>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d008      	beq.n	80106e6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80106d4:	4b07      	ldr	r3, [pc, #28]	@ (80106f4 <prvAddNewTaskToReadyList+0xbc>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106de:	429a      	cmp	r2, r3
 80106e0:	d201      	bcs.n	80106e6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80106e2:	f001 f93d 	bl	8011960 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106e6:	46c0      	nop			@ (mov r8, r8)
 80106e8:	46bd      	mov	sp, r7
 80106ea:	b002      	add	sp, #8
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	46c0      	nop			@ (mov r8, r8)
 80106f0:	20003bcc 	.word	0x20003bcc
 80106f4:	200036f8 	.word	0x200036f8
 80106f8:	20003bd8 	.word	0x20003bd8
 80106fc:	20003be8 	.word	0x20003be8
 8010700:	20003bd4 	.word	0x20003bd4
 8010704:	200036fc 	.word	0x200036fc

08010708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010710:	2300      	movs	r3, #0
 8010712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d011      	beq.n	801073e <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801071a:	4b0d      	ldr	r3, [pc, #52]	@ (8010750 <vTaskDelay+0x48>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <vTaskDelay+0x20>
 8010722:	b672      	cpsid	i
 8010724:	46c0      	nop			@ (mov r8, r8)
 8010726:	e7fd      	b.n	8010724 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8010728:	f000 f874 	bl	8010814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2100      	movs	r1, #0
 8010730:	0018      	movs	r0, r3
 8010732:	f000 fc7d 	bl	8011030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010736:	f000 f879 	bl	801082c <xTaskResumeAll>
 801073a:	0003      	movs	r3, r0
 801073c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d101      	bne.n	8010748 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8010744:	f001 f90c 	bl	8011960 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010748:	46c0      	nop			@ (mov r8, r8)
 801074a:	46bd      	mov	sp, r7
 801074c:	b004      	add	sp, #16
 801074e:	bd80      	pop	{r7, pc}
 8010750:	20003bf4 	.word	0x20003bf4

08010754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010754:	b590      	push	{r4, r7, lr}
 8010756:	b089      	sub	sp, #36	@ 0x24
 8010758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801075e:	2300      	movs	r3, #0
 8010760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010762:	003a      	movs	r2, r7
 8010764:	1d39      	adds	r1, r7, #4
 8010766:	2308      	movs	r3, #8
 8010768:	18fb      	adds	r3, r7, r3
 801076a:	0018      	movs	r0, r3
 801076c:	f7ff f8d0 	bl	800f910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010770:	683c      	ldr	r4, [r7, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	491f      	ldr	r1, [pc, #124]	@ (80107f4 <vTaskStartScheduler+0xa0>)
 8010778:	481f      	ldr	r0, [pc, #124]	@ (80107f8 <vTaskStartScheduler+0xa4>)
 801077a:	9202      	str	r2, [sp, #8]
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	2300      	movs	r3, #0
 8010780:	9300      	str	r3, [sp, #0]
 8010782:	2300      	movs	r3, #0
 8010784:	0022      	movs	r2, r4
 8010786:	f7ff fe22 	bl	80103ce <xTaskCreateStatic>
 801078a:	0002      	movs	r2, r0
 801078c:	4b1b      	ldr	r3, [pc, #108]	@ (80107fc <vTaskStartScheduler+0xa8>)
 801078e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010790:	4b1a      	ldr	r3, [pc, #104]	@ (80107fc <vTaskStartScheduler+0xa8>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010798:	2301      	movs	r3, #1
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	e001      	b.n	80107a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801079e:	2300      	movs	r3, #0
 80107a0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d103      	bne.n	80107b0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80107a8:	f000 fc96 	bl	80110d8 <xTimerCreateTimerTask>
 80107ac:	0003      	movs	r3, r0
 80107ae:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d113      	bne.n	80107de <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80107b6:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107b8:	4b11      	ldr	r3, [pc, #68]	@ (8010800 <vTaskStartScheduler+0xac>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3354      	adds	r3, #84	@ 0x54
 80107be:	001a      	movs	r2, r3
 80107c0:	4b10      	ldr	r3, [pc, #64]	@ (8010804 <vTaskStartScheduler+0xb0>)
 80107c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80107c4:	4b10      	ldr	r3, [pc, #64]	@ (8010808 <vTaskStartScheduler+0xb4>)
 80107c6:	2201      	movs	r2, #1
 80107c8:	4252      	negs	r2, r2
 80107ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80107cc:	4b0f      	ldr	r3, [pc, #60]	@ (801080c <vTaskStartScheduler+0xb8>)
 80107ce:	2201      	movs	r2, #1
 80107d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107d2:	4b0f      	ldr	r3, [pc, #60]	@ (8010810 <vTaskStartScheduler+0xbc>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80107d8:	f001 f89e 	bl	8011918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80107dc:	e005      	b.n	80107ea <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	3301      	adds	r3, #1
 80107e2:	d102      	bne.n	80107ea <vTaskStartScheduler+0x96>
 80107e4:	b672      	cpsid	i
 80107e6:	46c0      	nop			@ (mov r8, r8)
 80107e8:	e7fd      	b.n	80107e6 <vTaskStartScheduler+0x92>
}
 80107ea:	46c0      	nop			@ (mov r8, r8)
 80107ec:	46bd      	mov	sp, r7
 80107ee:	b005      	add	sp, #20
 80107f0:	bd90      	pop	{r4, r7, pc}
 80107f2:	46c0      	nop			@ (mov r8, r8)
 80107f4:	0801745c 	.word	0x0801745c
 80107f8:	08010da1 	.word	0x08010da1
 80107fc:	20003bf0 	.word	0x20003bf0
 8010800:	200036f8 	.word	0x200036f8
 8010804:	20000094 	.word	0x20000094
 8010808:	20003bec 	.word	0x20003bec
 801080c:	20003bd8 	.word	0x20003bd8
 8010810:	20003bd0 	.word	0x20003bd0

08010814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010814:	b580      	push	{r7, lr}
 8010816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010818:	4b03      	ldr	r3, [pc, #12]	@ (8010828 <vTaskSuspendAll+0x14>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	1c5a      	adds	r2, r3, #1
 801081e:	4b02      	ldr	r3, [pc, #8]	@ (8010828 <vTaskSuspendAll+0x14>)
 8010820:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010822:	46c0      	nop			@ (mov r8, r8)
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20003bf4 	.word	0x20003bf4

0801082c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010832:	2300      	movs	r3, #0
 8010834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010836:	2300      	movs	r3, #0
 8010838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801083a:	4b3a      	ldr	r3, [pc, #232]	@ (8010924 <xTaskResumeAll+0xf8>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d102      	bne.n	8010848 <xTaskResumeAll+0x1c>
 8010842:	b672      	cpsid	i
 8010844:	46c0      	nop			@ (mov r8, r8)
 8010846:	e7fd      	b.n	8010844 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010848:	f001 f89a 	bl	8011980 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801084c:	4b35      	ldr	r3, [pc, #212]	@ (8010924 <xTaskResumeAll+0xf8>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	1e5a      	subs	r2, r3, #1
 8010852:	4b34      	ldr	r3, [pc, #208]	@ (8010924 <xTaskResumeAll+0xf8>)
 8010854:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010856:	4b33      	ldr	r3, [pc, #204]	@ (8010924 <xTaskResumeAll+0xf8>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d15b      	bne.n	8010916 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801085e:	4b32      	ldr	r3, [pc, #200]	@ (8010928 <xTaskResumeAll+0xfc>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d057      	beq.n	8010916 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010866:	e02f      	b.n	80108c8 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010868:	4b30      	ldr	r3, [pc, #192]	@ (801092c <xTaskResumeAll+0x100>)
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	68db      	ldr	r3, [r3, #12]
 801086e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	3318      	adds	r3, #24
 8010874:	0018      	movs	r0, r3
 8010876:	f7ff f8fc 	bl	800fa72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	3304      	adds	r3, #4
 801087e:	0018      	movs	r0, r3
 8010880:	f7ff f8f7 	bl	800fa72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010888:	4b29      	ldr	r3, [pc, #164]	@ (8010930 <xTaskResumeAll+0x104>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	429a      	cmp	r2, r3
 801088e:	d903      	bls.n	8010898 <xTaskResumeAll+0x6c>
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010894:	4b26      	ldr	r3, [pc, #152]	@ (8010930 <xTaskResumeAll+0x104>)
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801089c:	0013      	movs	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	189b      	adds	r3, r3, r2
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	4a23      	ldr	r2, [pc, #140]	@ (8010934 <xTaskResumeAll+0x108>)
 80108a6:	189a      	adds	r2, r3, r2
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	3304      	adds	r3, #4
 80108ac:	0019      	movs	r1, r3
 80108ae:	0010      	movs	r0, r2
 80108b0:	f7ff f887 	bl	800f9c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108b8:	4b1f      	ldr	r3, [pc, #124]	@ (8010938 <xTaskResumeAll+0x10c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108be:	429a      	cmp	r2, r3
 80108c0:	d302      	bcc.n	80108c8 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80108c2:	4b1e      	ldr	r3, [pc, #120]	@ (801093c <xTaskResumeAll+0x110>)
 80108c4:	2201      	movs	r2, #1
 80108c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108c8:	4b18      	ldr	r3, [pc, #96]	@ (801092c <xTaskResumeAll+0x100>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1cb      	bne.n	8010868 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d001      	beq.n	80108da <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80108d6:	f000 fb13 	bl	8010f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80108da:	4b19      	ldr	r3, [pc, #100]	@ (8010940 <xTaskResumeAll+0x114>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00f      	beq.n	8010906 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80108e6:	f000 f83b 	bl	8010960 <xTaskIncrementTick>
 80108ea:	1e03      	subs	r3, r0, #0
 80108ec:	d002      	beq.n	80108f4 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 80108ee:	4b13      	ldr	r3, [pc, #76]	@ (801093c <xTaskResumeAll+0x110>)
 80108f0:	2201      	movs	r2, #1
 80108f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3b01      	subs	r3, #1
 80108f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d1f2      	bne.n	80108e6 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8010900:	4b0f      	ldr	r3, [pc, #60]	@ (8010940 <xTaskResumeAll+0x114>)
 8010902:	2200      	movs	r2, #0
 8010904:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010906:	4b0d      	ldr	r3, [pc, #52]	@ (801093c <xTaskResumeAll+0x110>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d003      	beq.n	8010916 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801090e:	2301      	movs	r3, #1
 8010910:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010912:	f001 f825 	bl	8011960 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010916:	f001 f845 	bl	80119a4 <vPortExitCritical>

	return xAlreadyYielded;
 801091a:	68bb      	ldr	r3, [r7, #8]
}
 801091c:	0018      	movs	r0, r3
 801091e:	46bd      	mov	sp, r7
 8010920:	b004      	add	sp, #16
 8010922:	bd80      	pop	{r7, pc}
 8010924:	20003bf4 	.word	0x20003bf4
 8010928:	20003bcc 	.word	0x20003bcc
 801092c:	20003b8c 	.word	0x20003b8c
 8010930:	20003bd4 	.word	0x20003bd4
 8010934:	200036fc 	.word	0x200036fc
 8010938:	200036f8 	.word	0x200036f8
 801093c:	20003be0 	.word	0x20003be0
 8010940:	20003bdc 	.word	0x20003bdc

08010944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801094a:	4b04      	ldr	r3, [pc, #16]	@ (801095c <xTaskGetTickCount+0x18>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010950:	687b      	ldr	r3, [r7, #4]
}
 8010952:	0018      	movs	r0, r3
 8010954:	46bd      	mov	sp, r7
 8010956:	b002      	add	sp, #8
 8010958:	bd80      	pop	{r7, pc}
 801095a:	46c0      	nop			@ (mov r8, r8)
 801095c:	20003bd0 	.word	0x20003bd0

08010960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010966:	2300      	movs	r3, #0
 8010968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801096a:	4b4a      	ldr	r3, [pc, #296]	@ (8010a94 <xTaskIncrementTick+0x134>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d000      	beq.n	8010974 <xTaskIncrementTick+0x14>
 8010972:	e085      	b.n	8010a80 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010974:	4b48      	ldr	r3, [pc, #288]	@ (8010a98 <xTaskIncrementTick+0x138>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	3301      	adds	r3, #1
 801097a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801097c:	4b46      	ldr	r3, [pc, #280]	@ (8010a98 <xTaskIncrementTick+0x138>)
 801097e:	693a      	ldr	r2, [r7, #16]
 8010980:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d118      	bne.n	80109ba <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010988:	4b44      	ldr	r3, [pc, #272]	@ (8010a9c <xTaskIncrementTick+0x13c>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d002      	beq.n	8010998 <xTaskIncrementTick+0x38>
 8010992:	b672      	cpsid	i
 8010994:	46c0      	nop			@ (mov r8, r8)
 8010996:	e7fd      	b.n	8010994 <xTaskIncrementTick+0x34>
 8010998:	4b40      	ldr	r3, [pc, #256]	@ (8010a9c <xTaskIncrementTick+0x13c>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	60fb      	str	r3, [r7, #12]
 801099e:	4b40      	ldr	r3, [pc, #256]	@ (8010aa0 <xTaskIncrementTick+0x140>)
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	4b3e      	ldr	r3, [pc, #248]	@ (8010a9c <xTaskIncrementTick+0x13c>)
 80109a4:	601a      	str	r2, [r3, #0]
 80109a6:	4b3e      	ldr	r3, [pc, #248]	@ (8010aa0 <xTaskIncrementTick+0x140>)
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	4b3d      	ldr	r3, [pc, #244]	@ (8010aa4 <xTaskIncrementTick+0x144>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	1c5a      	adds	r2, r3, #1
 80109b2:	4b3c      	ldr	r3, [pc, #240]	@ (8010aa4 <xTaskIncrementTick+0x144>)
 80109b4:	601a      	str	r2, [r3, #0]
 80109b6:	f000 faa3 	bl	8010f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80109ba:	4b3b      	ldr	r3, [pc, #236]	@ (8010aa8 <xTaskIncrementTick+0x148>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	693a      	ldr	r2, [r7, #16]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d349      	bcc.n	8010a58 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109c4:	4b35      	ldr	r3, [pc, #212]	@ (8010a9c <xTaskIncrementTick+0x13c>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d104      	bne.n	80109d8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109ce:	4b36      	ldr	r3, [pc, #216]	@ (8010aa8 <xTaskIncrementTick+0x148>)
 80109d0:	2201      	movs	r2, #1
 80109d2:	4252      	negs	r2, r2
 80109d4:	601a      	str	r2, [r3, #0]
					break;
 80109d6:	e03f      	b.n	8010a58 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109d8:	4b30      	ldr	r3, [pc, #192]	@ (8010a9c <xTaskIncrementTick+0x13c>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80109e8:	693a      	ldr	r2, [r7, #16]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d203      	bcs.n	80109f8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80109f0:	4b2d      	ldr	r3, [pc, #180]	@ (8010aa8 <xTaskIncrementTick+0x148>)
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80109f6:	e02f      	b.n	8010a58 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	3304      	adds	r3, #4
 80109fc:	0018      	movs	r0, r3
 80109fe:	f7ff f838 	bl	800fa72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d004      	beq.n	8010a14 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	3318      	adds	r3, #24
 8010a0e:	0018      	movs	r0, r3
 8010a10:	f7ff f82f 	bl	800fa72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a18:	4b24      	ldr	r3, [pc, #144]	@ (8010aac <xTaskIncrementTick+0x14c>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d903      	bls.n	8010a28 <xTaskIncrementTick+0xc8>
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a24:	4b21      	ldr	r3, [pc, #132]	@ (8010aac <xTaskIncrementTick+0x14c>)
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a2c:	0013      	movs	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	189b      	adds	r3, r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4a1e      	ldr	r2, [pc, #120]	@ (8010ab0 <xTaskIncrementTick+0x150>)
 8010a36:	189a      	adds	r2, r3, r2
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	0019      	movs	r1, r3
 8010a3e:	0010      	movs	r0, r2
 8010a40:	f7fe ffbf 	bl	800f9c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a48:	4b1a      	ldr	r3, [pc, #104]	@ (8010ab4 <xTaskIncrementTick+0x154>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d3b8      	bcc.n	80109c4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8010a52:	2301      	movs	r3, #1
 8010a54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a56:	e7b5      	b.n	80109c4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a58:	4b16      	ldr	r3, [pc, #88]	@ (8010ab4 <xTaskIncrementTick+0x154>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a5e:	4914      	ldr	r1, [pc, #80]	@ (8010ab0 <xTaskIncrementTick+0x150>)
 8010a60:	0013      	movs	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	189b      	adds	r3, r3, r2
 8010a66:	009b      	lsls	r3, r3, #2
 8010a68:	585b      	ldr	r3, [r3, r1]
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d901      	bls.n	8010a72 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010a72:	4b11      	ldr	r3, [pc, #68]	@ (8010ab8 <xTaskIncrementTick+0x158>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d007      	beq.n	8010a8a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	617b      	str	r3, [r7, #20]
 8010a7e:	e004      	b.n	8010a8a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010a80:	4b0e      	ldr	r3, [pc, #56]	@ (8010abc <xTaskIncrementTick+0x15c>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	1c5a      	adds	r2, r3, #1
 8010a86:	4b0d      	ldr	r3, [pc, #52]	@ (8010abc <xTaskIncrementTick+0x15c>)
 8010a88:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010a8a:	697b      	ldr	r3, [r7, #20]
}
 8010a8c:	0018      	movs	r0, r3
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	b006      	add	sp, #24
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	20003bf4 	.word	0x20003bf4
 8010a98:	20003bd0 	.word	0x20003bd0
 8010a9c:	20003b84 	.word	0x20003b84
 8010aa0:	20003b88 	.word	0x20003b88
 8010aa4:	20003be4 	.word	0x20003be4
 8010aa8:	20003bec 	.word	0x20003bec
 8010aac:	20003bd4 	.word	0x20003bd4
 8010ab0:	200036fc 	.word	0x200036fc
 8010ab4:	200036f8 	.word	0x200036f8
 8010ab8:	20003be0 	.word	0x20003be0
 8010abc:	20003bdc 	.word	0x20003bdc

08010ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ac6:	4b25      	ldr	r3, [pc, #148]	@ (8010b5c <vTaskSwitchContext+0x9c>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d003      	beq.n	8010ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010ace:	4b24      	ldr	r3, [pc, #144]	@ (8010b60 <vTaskSwitchContext+0xa0>)
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010ad4:	e03e      	b.n	8010b54 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010ad6:	4b22      	ldr	r3, [pc, #136]	@ (8010b60 <vTaskSwitchContext+0xa0>)
 8010ad8:	2200      	movs	r2, #0
 8010ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010adc:	4b21      	ldr	r3, [pc, #132]	@ (8010b64 <vTaskSwitchContext+0xa4>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	607b      	str	r3, [r7, #4]
 8010ae2:	e008      	b.n	8010af6 <vTaskSwitchContext+0x36>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d102      	bne.n	8010af0 <vTaskSwitchContext+0x30>
 8010aea:	b672      	cpsid	i
 8010aec:	46c0      	nop			@ (mov r8, r8)
 8010aee:	e7fd      	b.n	8010aec <vTaskSwitchContext+0x2c>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	3b01      	subs	r3, #1
 8010af4:	607b      	str	r3, [r7, #4]
 8010af6:	491c      	ldr	r1, [pc, #112]	@ (8010b68 <vTaskSwitchContext+0xa8>)
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	0013      	movs	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	189b      	adds	r3, r3, r2
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	585b      	ldr	r3, [r3, r1]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d0ed      	beq.n	8010ae4 <vTaskSwitchContext+0x24>
 8010b08:	687a      	ldr	r2, [r7, #4]
 8010b0a:	0013      	movs	r3, r2
 8010b0c:	009b      	lsls	r3, r3, #2
 8010b0e:	189b      	adds	r3, r3, r2
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	4a15      	ldr	r2, [pc, #84]	@ (8010b68 <vTaskSwitchContext+0xa8>)
 8010b14:	189b      	adds	r3, r3, r2
 8010b16:	603b      	str	r3, [r7, #0]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	685a      	ldr	r2, [r3, #4]
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	605a      	str	r2, [r3, #4]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	685a      	ldr	r2, [r3, #4]
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	3308      	adds	r3, #8
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d104      	bne.n	8010b38 <vTaskSwitchContext+0x78>
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	685a      	ldr	r2, [r3, #4]
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	605a      	str	r2, [r3, #4]
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	68da      	ldr	r2, [r3, #12]
 8010b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b6c <vTaskSwitchContext+0xac>)
 8010b40:	601a      	str	r2, [r3, #0]
 8010b42:	4b08      	ldr	r3, [pc, #32]	@ (8010b64 <vTaskSwitchContext+0xa4>)
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b48:	4b08      	ldr	r3, [pc, #32]	@ (8010b6c <vTaskSwitchContext+0xac>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	3354      	adds	r3, #84	@ 0x54
 8010b4e:	001a      	movs	r2, r3
 8010b50:	4b07      	ldr	r3, [pc, #28]	@ (8010b70 <vTaskSwitchContext+0xb0>)
 8010b52:	601a      	str	r2, [r3, #0]
}
 8010b54:	46c0      	nop			@ (mov r8, r8)
 8010b56:	46bd      	mov	sp, r7
 8010b58:	b002      	add	sp, #8
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	20003bf4 	.word	0x20003bf4
 8010b60:	20003be0 	.word	0x20003be0
 8010b64:	20003bd4 	.word	0x20003bd4
 8010b68:	200036fc 	.word	0x200036fc
 8010b6c:	200036f8 	.word	0x200036f8
 8010b70:	20000094 	.word	0x20000094

08010b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d102      	bne.n	8010b8a <vTaskPlaceOnEventList+0x16>
 8010b84:	b672      	cpsid	i
 8010b86:	46c0      	nop			@ (mov r8, r8)
 8010b88:	e7fd      	b.n	8010b86 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b8a:	4b09      	ldr	r3, [pc, #36]	@ (8010bb0 <vTaskPlaceOnEventList+0x3c>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	3318      	adds	r3, #24
 8010b90:	001a      	movs	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	0011      	movs	r1, r2
 8010b96:	0018      	movs	r0, r3
 8010b98:	f7fe ff35 	bl	800fa06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	2101      	movs	r1, #1
 8010ba0:	0018      	movs	r0, r3
 8010ba2:	f000 fa45 	bl	8011030 <prvAddCurrentTaskToDelayedList>
}
 8010ba6:	46c0      	nop			@ (mov r8, r8)
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	b002      	add	sp, #8
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	46c0      	nop			@ (mov r8, r8)
 8010bb0:	200036f8 	.word	0x200036f8

08010bb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d102      	bne.n	8010bcc <vTaskPlaceOnEventListRestricted+0x18>
 8010bc6:	b672      	cpsid	i
 8010bc8:	46c0      	nop			@ (mov r8, r8)
 8010bca:	e7fd      	b.n	8010bc8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8010c00 <vTaskPlaceOnEventListRestricted+0x4c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	3318      	adds	r3, #24
 8010bd2:	001a      	movs	r2, r3
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	0011      	movs	r1, r2
 8010bd8:	0018      	movs	r0, r3
 8010bda:	f7fe fef2 	bl	800f9c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8010be4:	2301      	movs	r3, #1
 8010be6:	425b      	negs	r3, r3
 8010be8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	0011      	movs	r1, r2
 8010bf0:	0018      	movs	r0, r3
 8010bf2:	f000 fa1d 	bl	8011030 <prvAddCurrentTaskToDelayedList>
	}
 8010bf6:	46c0      	nop			@ (mov r8, r8)
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	b004      	add	sp, #16
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	46c0      	nop			@ (mov r8, r8)
 8010c00:	200036f8 	.word	0x200036f8

08010c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d102      	bne.n	8010c20 <xTaskRemoveFromEventList+0x1c>
 8010c1a:	b672      	cpsid	i
 8010c1c:	46c0      	nop			@ (mov r8, r8)
 8010c1e:	e7fd      	b.n	8010c1c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	3318      	adds	r3, #24
 8010c24:	0018      	movs	r0, r3
 8010c26:	f7fe ff24 	bl	800fa72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ca8 <xTaskRemoveFromEventList+0xa4>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d11d      	bne.n	8010c6e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	3304      	adds	r3, #4
 8010c36:	0018      	movs	r0, r3
 8010c38:	f7fe ff1b 	bl	800fa72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c40:	4b1a      	ldr	r3, [pc, #104]	@ (8010cac <xTaskRemoveFromEventList+0xa8>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d903      	bls.n	8010c50 <xTaskRemoveFromEventList+0x4c>
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c4c:	4b17      	ldr	r3, [pc, #92]	@ (8010cac <xTaskRemoveFromEventList+0xa8>)
 8010c4e:	601a      	str	r2, [r3, #0]
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c54:	0013      	movs	r3, r2
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	189b      	adds	r3, r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4a14      	ldr	r2, [pc, #80]	@ (8010cb0 <xTaskRemoveFromEventList+0xac>)
 8010c5e:	189a      	adds	r2, r3, r2
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	3304      	adds	r3, #4
 8010c64:	0019      	movs	r1, r3
 8010c66:	0010      	movs	r0, r2
 8010c68:	f7fe feab 	bl	800f9c2 <vListInsertEnd>
 8010c6c:	e007      	b.n	8010c7e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	3318      	adds	r3, #24
 8010c72:	001a      	movs	r2, r3
 8010c74:	4b0f      	ldr	r3, [pc, #60]	@ (8010cb4 <xTaskRemoveFromEventList+0xb0>)
 8010c76:	0011      	movs	r1, r2
 8010c78:	0018      	movs	r0, r3
 8010c7a:	f7fe fea2 	bl	800f9c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c82:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb8 <xTaskRemoveFromEventList+0xb4>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d905      	bls.n	8010c98 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c90:	4b0a      	ldr	r3, [pc, #40]	@ (8010cbc <xTaskRemoveFromEventList+0xb8>)
 8010c92:	2201      	movs	r2, #1
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	e001      	b.n	8010c9c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
}
 8010c9e:	0018      	movs	r0, r3
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	b004      	add	sp, #16
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	46c0      	nop			@ (mov r8, r8)
 8010ca8:	20003bf4 	.word	0x20003bf4
 8010cac:	20003bd4 	.word	0x20003bd4
 8010cb0:	200036fc 	.word	0x200036fc
 8010cb4:	20003b8c 	.word	0x20003b8c
 8010cb8:	200036f8 	.word	0x200036f8
 8010cbc:	20003be0 	.word	0x20003be0

08010cc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010cc8:	4b05      	ldr	r3, [pc, #20]	@ (8010ce0 <vTaskInternalSetTimeOutState+0x20>)
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010cd0:	4b04      	ldr	r3, [pc, #16]	@ (8010ce4 <vTaskInternalSetTimeOutState+0x24>)
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	605a      	str	r2, [r3, #4]
}
 8010cd8:	46c0      	nop			@ (mov r8, r8)
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	b002      	add	sp, #8
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	20003be4 	.word	0x20003be4
 8010ce4:	20003bd0 	.word	0x20003bd0

08010ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d102      	bne.n	8010cfe <xTaskCheckForTimeOut+0x16>
 8010cf8:	b672      	cpsid	i
 8010cfa:	46c0      	nop			@ (mov r8, r8)
 8010cfc:	e7fd      	b.n	8010cfa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d102      	bne.n	8010d0a <xTaskCheckForTimeOut+0x22>
 8010d04:	b672      	cpsid	i
 8010d06:	46c0      	nop			@ (mov r8, r8)
 8010d08:	e7fd      	b.n	8010d06 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8010d0a:	f000 fe39 	bl	8011980 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8010d84 <xTaskCheckForTimeOut+0x9c>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	693a      	ldr	r2, [r7, #16]
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3301      	adds	r3, #1
 8010d24:	d102      	bne.n	8010d2c <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010d26:	2300      	movs	r3, #0
 8010d28:	617b      	str	r3, [r7, #20]
 8010d2a:	e024      	b.n	8010d76 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	4b15      	ldr	r3, [pc, #84]	@ (8010d88 <xTaskCheckForTimeOut+0xa0>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d007      	beq.n	8010d48 <xTaskCheckForTimeOut+0x60>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	693a      	ldr	r2, [r7, #16]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d302      	bcc.n	8010d48 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d42:	2301      	movs	r3, #1
 8010d44:	617b      	str	r3, [r7, #20]
 8010d46:	e016      	b.n	8010d76 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d20c      	bcs.n	8010d6c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	1ad2      	subs	r2, r2, r3
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	0018      	movs	r0, r3
 8010d62:	f7ff ffad 	bl	8010cc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010d66:	2300      	movs	r3, #0
 8010d68:	617b      	str	r3, [r7, #20]
 8010d6a:	e004      	b.n	8010d76 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010d72:	2301      	movs	r3, #1
 8010d74:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8010d76:	f000 fe15 	bl	80119a4 <vPortExitCritical>

	return xReturn;
 8010d7a:	697b      	ldr	r3, [r7, #20]
}
 8010d7c:	0018      	movs	r0, r3
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	b006      	add	sp, #24
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	20003bd0 	.word	0x20003bd0
 8010d88:	20003be4 	.word	0x20003be4

08010d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010d90:	4b02      	ldr	r3, [pc, #8]	@ (8010d9c <vTaskMissedYield+0x10>)
 8010d92:	2201      	movs	r2, #1
 8010d94:	601a      	str	r2, [r3, #0]
}
 8010d96:	46c0      	nop			@ (mov r8, r8)
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20003be0 	.word	0x20003be0

08010da0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010da8:	f000 f84e 	bl	8010e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010dac:	4b03      	ldr	r3, [pc, #12]	@ (8010dbc <prvIdleTask+0x1c>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d9f9      	bls.n	8010da8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010db4:	f000 fdd4 	bl	8011960 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010db8:	e7f6      	b.n	8010da8 <prvIdleTask+0x8>
 8010dba:	46c0      	nop			@ (mov r8, r8)
 8010dbc:	200036fc 	.word	0x200036fc

08010dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	607b      	str	r3, [r7, #4]
 8010dca:	e00c      	b.n	8010de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	0013      	movs	r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	189b      	adds	r3, r3, r2
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4a14      	ldr	r2, [pc, #80]	@ (8010e28 <prvInitialiseTaskLists+0x68>)
 8010dd8:	189b      	adds	r3, r3, r2
 8010dda:	0018      	movs	r0, r3
 8010ddc:	f7fe fdc8 	bl	800f970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	3301      	adds	r3, #1
 8010de4:	607b      	str	r3, [r7, #4]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2b37      	cmp	r3, #55	@ 0x37
 8010dea:	d9ef      	bls.n	8010dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010dec:	4b0f      	ldr	r3, [pc, #60]	@ (8010e2c <prvInitialiseTaskLists+0x6c>)
 8010dee:	0018      	movs	r0, r3
 8010df0:	f7fe fdbe 	bl	800f970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010df4:	4b0e      	ldr	r3, [pc, #56]	@ (8010e30 <prvInitialiseTaskLists+0x70>)
 8010df6:	0018      	movs	r0, r3
 8010df8:	f7fe fdba 	bl	800f970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010e34 <prvInitialiseTaskLists+0x74>)
 8010dfe:	0018      	movs	r0, r3
 8010e00:	f7fe fdb6 	bl	800f970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010e04:	4b0c      	ldr	r3, [pc, #48]	@ (8010e38 <prvInitialiseTaskLists+0x78>)
 8010e06:	0018      	movs	r0, r3
 8010e08:	f7fe fdb2 	bl	800f970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e3c <prvInitialiseTaskLists+0x7c>)
 8010e0e:	0018      	movs	r0, r3
 8010e10:	f7fe fdae 	bl	800f970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e14:	4b0a      	ldr	r3, [pc, #40]	@ (8010e40 <prvInitialiseTaskLists+0x80>)
 8010e16:	4a05      	ldr	r2, [pc, #20]	@ (8010e2c <prvInitialiseTaskLists+0x6c>)
 8010e18:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8010e44 <prvInitialiseTaskLists+0x84>)
 8010e1c:	4a04      	ldr	r2, [pc, #16]	@ (8010e30 <prvInitialiseTaskLists+0x70>)
 8010e1e:	601a      	str	r2, [r3, #0]
}
 8010e20:	46c0      	nop			@ (mov r8, r8)
 8010e22:	46bd      	mov	sp, r7
 8010e24:	b002      	add	sp, #8
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	200036fc 	.word	0x200036fc
 8010e2c:	20003b5c 	.word	0x20003b5c
 8010e30:	20003b70 	.word	0x20003b70
 8010e34:	20003b8c 	.word	0x20003b8c
 8010e38:	20003ba0 	.word	0x20003ba0
 8010e3c:	20003bb8 	.word	0x20003bb8
 8010e40:	20003b84 	.word	0x20003b84
 8010e44:	20003b88 	.word	0x20003b88

08010e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e4e:	e01a      	b.n	8010e86 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8010e50:	f000 fd96 	bl	8011980 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e54:	4b10      	ldr	r3, [pc, #64]	@ (8010e98 <prvCheckTasksWaitingTermination+0x50>)
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	3304      	adds	r3, #4
 8010e60:	0018      	movs	r0, r3
 8010e62:	f7fe fe06 	bl	800fa72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e66:	4b0d      	ldr	r3, [pc, #52]	@ (8010e9c <prvCheckTasksWaitingTermination+0x54>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	1e5a      	subs	r2, r3, #1
 8010e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e9c <prvCheckTasksWaitingTermination+0x54>)
 8010e6e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e70:	4b0b      	ldr	r3, [pc, #44]	@ (8010ea0 <prvCheckTasksWaitingTermination+0x58>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	1e5a      	subs	r2, r3, #1
 8010e76:	4b0a      	ldr	r3, [pc, #40]	@ (8010ea0 <prvCheckTasksWaitingTermination+0x58>)
 8010e78:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8010e7a:	f000 fd93 	bl	80119a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	0018      	movs	r0, r3
 8010e82:	f000 f80f 	bl	8010ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e86:	4b06      	ldr	r3, [pc, #24]	@ (8010ea0 <prvCheckTasksWaitingTermination+0x58>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d1e0      	bne.n	8010e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e8e:	46c0      	nop			@ (mov r8, r8)
 8010e90:	46c0      	nop			@ (mov r8, r8)
 8010e92:	46bd      	mov	sp, r7
 8010e94:	b002      	add	sp, #8
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	20003ba0 	.word	0x20003ba0
 8010e9c:	20003bcc 	.word	0x20003bcc
 8010ea0:	20003bb4 	.word	0x20003bb4

08010ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	3354      	adds	r3, #84	@ 0x54
 8010eb0:	0018      	movs	r0, r3
 8010eb2:	f002 fab9 	bl	8013428 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	22a5      	movs	r2, #165	@ 0xa5
 8010eba:	5c9b      	ldrb	r3, [r3, r2]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d109      	bne.n	8010ed4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ec4:	0018      	movs	r0, r3
 8010ec6:	f000 fea3 	bl	8011c10 <vPortFree>
				vPortFree( pxTCB );
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	0018      	movs	r0, r3
 8010ece:	f000 fe9f 	bl	8011c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ed2:	e011      	b.n	8010ef8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	22a5      	movs	r2, #165	@ 0xa5
 8010ed8:	5c9b      	ldrb	r3, [r3, r2]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d104      	bne.n	8010ee8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	0018      	movs	r0, r3
 8010ee2:	f000 fe95 	bl	8011c10 <vPortFree>
	}
 8010ee6:	e007      	b.n	8010ef8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	22a5      	movs	r2, #165	@ 0xa5
 8010eec:	5c9b      	ldrb	r3, [r3, r2]
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	d002      	beq.n	8010ef8 <prvDeleteTCB+0x54>
 8010ef2:	b672      	cpsid	i
 8010ef4:	46c0      	nop			@ (mov r8, r8)
 8010ef6:	e7fd      	b.n	8010ef4 <prvDeleteTCB+0x50>
	}
 8010ef8:	46c0      	nop			@ (mov r8, r8)
 8010efa:	46bd      	mov	sp, r7
 8010efc:	b002      	add	sp, #8
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f06:	4b0b      	ldr	r3, [pc, #44]	@ (8010f34 <prvResetNextTaskUnblockTime+0x34>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d104      	bne.n	8010f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f10:	4b09      	ldr	r3, [pc, #36]	@ (8010f38 <prvResetNextTaskUnblockTime+0x38>)
 8010f12:	2201      	movs	r2, #1
 8010f14:	4252      	negs	r2, r2
 8010f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010f18:	e008      	b.n	8010f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f1a:	4b06      	ldr	r3, [pc, #24]	@ (8010f34 <prvResetNextTaskUnblockTime+0x34>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	685a      	ldr	r2, [r3, #4]
 8010f28:	4b03      	ldr	r3, [pc, #12]	@ (8010f38 <prvResetNextTaskUnblockTime+0x38>)
 8010f2a:	601a      	str	r2, [r3, #0]
}
 8010f2c:	46c0      	nop			@ (mov r8, r8)
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	b002      	add	sp, #8
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	20003b84 	.word	0x20003b84
 8010f38:	20003bec 	.word	0x20003bec

08010f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010f42:	4b0a      	ldr	r3, [pc, #40]	@ (8010f6c <xTaskGetSchedulerState+0x30>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d102      	bne.n	8010f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	607b      	str	r3, [r7, #4]
 8010f4e:	e008      	b.n	8010f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f50:	4b07      	ldr	r3, [pc, #28]	@ (8010f70 <xTaskGetSchedulerState+0x34>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d102      	bne.n	8010f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f58:	2302      	movs	r3, #2
 8010f5a:	607b      	str	r3, [r7, #4]
 8010f5c:	e001      	b.n	8010f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f62:	687b      	ldr	r3, [r7, #4]
	}
 8010f64:	0018      	movs	r0, r3
 8010f66:	46bd      	mov	sp, r7
 8010f68:	b002      	add	sp, #8
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	20003bd8 	.word	0x20003bd8
 8010f70:	20003bf4 	.word	0x20003bf4

08010f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010f80:	2300      	movs	r3, #0
 8010f82:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d046      	beq.n	8011018 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010f8a:	4b26      	ldr	r3, [pc, #152]	@ (8011024 <xTaskPriorityDisinherit+0xb0>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	68ba      	ldr	r2, [r7, #8]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d002      	beq.n	8010f9a <xTaskPriorityDisinherit+0x26>
 8010f94:	b672      	cpsid	i
 8010f96:	46c0      	nop			@ (mov r8, r8)
 8010f98:	e7fd      	b.n	8010f96 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d102      	bne.n	8010fa8 <xTaskPriorityDisinherit+0x34>
 8010fa2:	b672      	cpsid	i
 8010fa4:	46c0      	nop			@ (mov r8, r8)
 8010fa6:	e7fd      	b.n	8010fa4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fac:	1e5a      	subs	r2, r3, #1
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d02c      	beq.n	8011018 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d128      	bne.n	8011018 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	3304      	adds	r3, #4
 8010fca:	0018      	movs	r0, r3
 8010fcc:	f7fe fd51 	bl	800fa72 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fdc:	2238      	movs	r2, #56	@ 0x38
 8010fde:	1ad2      	subs	r2, r2, r3
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8011028 <xTaskPriorityDisinherit+0xb4>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d903      	bls.n	8010ff8 <xTaskPriorityDisinherit+0x84>
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8011028 <xTaskPriorityDisinherit+0xb4>)
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ffc:	0013      	movs	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	189b      	adds	r3, r3, r2
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4a09      	ldr	r2, [pc, #36]	@ (801102c <xTaskPriorityDisinherit+0xb8>)
 8011006:	189a      	adds	r2, r3, r2
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	3304      	adds	r3, #4
 801100c:	0019      	movs	r1, r3
 801100e:	0010      	movs	r0, r2
 8011010:	f7fe fcd7 	bl	800f9c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011014:	2301      	movs	r3, #1
 8011016:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011018:	68fb      	ldr	r3, [r7, #12]
	}
 801101a:	0018      	movs	r0, r3
 801101c:	46bd      	mov	sp, r7
 801101e:	b004      	add	sp, #16
 8011020:	bd80      	pop	{r7, pc}
 8011022:	46c0      	nop			@ (mov r8, r8)
 8011024:	200036f8 	.word	0x200036f8
 8011028:	20003bd4 	.word	0x20003bd4
 801102c:	200036fc 	.word	0x200036fc

08011030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801103a:	4b21      	ldr	r3, [pc, #132]	@ (80110c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011040:	4b20      	ldr	r3, [pc, #128]	@ (80110c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	3304      	adds	r3, #4
 8011046:	0018      	movs	r0, r3
 8011048:	f7fe fd13 	bl	800fa72 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	3301      	adds	r3, #1
 8011050:	d10b      	bne.n	801106a <prvAddCurrentTaskToDelayedList+0x3a>
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d008      	beq.n	801106a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011058:	4b1a      	ldr	r3, [pc, #104]	@ (80110c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	1d1a      	adds	r2, r3, #4
 801105e:	4b1a      	ldr	r3, [pc, #104]	@ (80110c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011060:	0011      	movs	r1, r2
 8011062:	0018      	movs	r0, r3
 8011064:	f7fe fcad 	bl	800f9c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011068:	e026      	b.n	80110b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801106a:	68fa      	ldr	r2, [r7, #12]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	18d3      	adds	r3, r2, r3
 8011070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011072:	4b14      	ldr	r3, [pc, #80]	@ (80110c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68ba      	ldr	r2, [r7, #8]
 8011078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	429a      	cmp	r2, r3
 8011080:	d209      	bcs.n	8011096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011082:	4b12      	ldr	r3, [pc, #72]	@ (80110cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	4b0f      	ldr	r3, [pc, #60]	@ (80110c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	3304      	adds	r3, #4
 801108c:	0019      	movs	r1, r3
 801108e:	0010      	movs	r0, r2
 8011090:	f7fe fcb9 	bl	800fa06 <vListInsert>
}
 8011094:	e010      	b.n	80110b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011096:	4b0e      	ldr	r3, [pc, #56]	@ (80110d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	4b0a      	ldr	r3, [pc, #40]	@ (80110c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	3304      	adds	r3, #4
 80110a0:	0019      	movs	r1, r3
 80110a2:	0010      	movs	r0, r2
 80110a4:	f7fe fcaf 	bl	800fa06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80110a8:	4b0a      	ldr	r3, [pc, #40]	@ (80110d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d202      	bcs.n	80110b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80110b2:	4b08      	ldr	r3, [pc, #32]	@ (80110d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	601a      	str	r2, [r3, #0]
}
 80110b8:	46c0      	nop			@ (mov r8, r8)
 80110ba:	46bd      	mov	sp, r7
 80110bc:	b004      	add	sp, #16
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20003bd0 	.word	0x20003bd0
 80110c4:	200036f8 	.word	0x200036f8
 80110c8:	20003bb8 	.word	0x20003bb8
 80110cc:	20003b88 	.word	0x20003b88
 80110d0:	20003b84 	.word	0x20003b84
 80110d4:	20003bec 	.word	0x20003bec

080110d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80110d8:	b590      	push	{r4, r7, lr}
 80110da:	b089      	sub	sp, #36	@ 0x24
 80110dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80110de:	2300      	movs	r3, #0
 80110e0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80110e2:	f000 fb5b 	bl	801179c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80110e6:	4b18      	ldr	r3, [pc, #96]	@ (8011148 <xTimerCreateTimerTask+0x70>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d020      	beq.n	8011130 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80110ee:	2300      	movs	r3, #0
 80110f0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80110f2:	2300      	movs	r3, #0
 80110f4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80110f6:	003a      	movs	r2, r7
 80110f8:	1d39      	adds	r1, r7, #4
 80110fa:	2308      	movs	r3, #8
 80110fc:	18fb      	adds	r3, r7, r3
 80110fe:	0018      	movs	r0, r3
 8011100:	f7fe fc1e 	bl	800f940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011104:	683c      	ldr	r4, [r7, #0]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	68ba      	ldr	r2, [r7, #8]
 801110a:	4910      	ldr	r1, [pc, #64]	@ (801114c <xTimerCreateTimerTask+0x74>)
 801110c:	4810      	ldr	r0, [pc, #64]	@ (8011150 <xTimerCreateTimerTask+0x78>)
 801110e:	9202      	str	r2, [sp, #8]
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	2300      	movs	r3, #0
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	2300      	movs	r3, #0
 8011118:	0022      	movs	r2, r4
 801111a:	f7ff f958 	bl	80103ce <xTaskCreateStatic>
 801111e:	0002      	movs	r2, r0
 8011120:	4b0c      	ldr	r3, [pc, #48]	@ (8011154 <xTimerCreateTimerTask+0x7c>)
 8011122:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011124:	4b0b      	ldr	r3, [pc, #44]	@ (8011154 <xTimerCreateTimerTask+0x7c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d001      	beq.n	8011130 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801112c:	2301      	movs	r3, #1
 801112e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d102      	bne.n	801113c <xTimerCreateTimerTask+0x64>
 8011136:	b672      	cpsid	i
 8011138:	46c0      	nop			@ (mov r8, r8)
 801113a:	e7fd      	b.n	8011138 <xTimerCreateTimerTask+0x60>
	return xReturn;
 801113c:	68fb      	ldr	r3, [r7, #12]
}
 801113e:	0018      	movs	r0, r3
 8011140:	46bd      	mov	sp, r7
 8011142:	b005      	add	sp, #20
 8011144:	bd90      	pop	{r4, r7, pc}
 8011146:	46c0      	nop			@ (mov r8, r8)
 8011148:	20003c28 	.word	0x20003c28
 801114c:	08017464 	.word	0x08017464
 8011150:	08011389 	.word	0x08011389
 8011154:	20003c2c 	.word	0x20003c2c

08011158 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b089      	sub	sp, #36	@ 0x24
 801115c:	af02      	add	r7, sp, #8
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
 8011164:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011166:	202c      	movs	r0, #44	@ 0x2c
 8011168:	f000 fca2 	bl	8011ab0 <pvPortMalloc>
 801116c:	0003      	movs	r3, r0
 801116e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00e      	beq.n	8011194 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	2228      	movs	r2, #40	@ 0x28
 801117a:	2100      	movs	r1, #0
 801117c:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801117e:	683c      	ldr	r4, [r7, #0]
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	68b9      	ldr	r1, [r7, #8]
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	9301      	str	r3, [sp, #4]
 801118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	0023      	movs	r3, r4
 8011190:	f000 f834 	bl	80111fc <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011194:	697b      	ldr	r3, [r7, #20]
	}
 8011196:	0018      	movs	r0, r3
 8011198:	46bd      	mov	sp, r7
 801119a:	b007      	add	sp, #28
 801119c:	bd90      	pop	{r4, r7, pc}

0801119e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801119e:	b590      	push	{r4, r7, lr}
 80111a0:	b089      	sub	sp, #36	@ 0x24
 80111a2:	af02      	add	r7, sp, #8
 80111a4:	60f8      	str	r0, [r7, #12]
 80111a6:	60b9      	str	r1, [r7, #8]
 80111a8:	607a      	str	r2, [r7, #4]
 80111aa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80111ac:	232c      	movs	r3, #44	@ 0x2c
 80111ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80111b4:	d002      	beq.n	80111bc <xTimerCreateStatic+0x1e>
 80111b6:	b672      	cpsid	i
 80111b8:	46c0      	nop			@ (mov r8, r8)
 80111ba:	e7fd      	b.n	80111b8 <xTimerCreateStatic+0x1a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80111bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80111be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d102      	bne.n	80111ca <xTimerCreateStatic+0x2c>
 80111c4:	b672      	cpsid	i
 80111c6:	46c0      	nop			@ (mov r8, r8)
 80111c8:	e7fd      	b.n	80111c6 <xTimerCreateStatic+0x28>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80111ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111cc:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00e      	beq.n	80111f2 <xTimerCreateStatic+0x54>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	2228      	movs	r2, #40	@ 0x28
 80111d8:	2102      	movs	r1, #2
 80111da:	5499      	strb	r1, [r3, r2]

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80111dc:	683c      	ldr	r4, [r7, #0]
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	68b9      	ldr	r1, [r7, #8]
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	9301      	str	r3, [sp, #4]
 80111e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	0023      	movs	r3, r4
 80111ee:	f000 f805 	bl	80111fc <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80111f2:	697b      	ldr	r3, [r7, #20]
	}
 80111f4:	0018      	movs	r0, r3
 80111f6:	46bd      	mov	sp, r7
 80111f8:	b007      	add	sp, #28
 80111fa:	bd90      	pop	{r4, r7, pc}

080111fc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
 8011208:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d102      	bne.n	8011216 <prvInitialiseNewTimer+0x1a>
 8011210:	b672      	cpsid	i
 8011212:	46c0      	nop			@ (mov r8, r8)
 8011214:	e7fd      	b.n	8011212 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d01e      	beq.n	801125a <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801121c:	f000 fabe 	bl	801179c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	683a      	ldr	r2, [r7, #0]
 8011230:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	69ba      	ldr	r2, [r7, #24]
 8011236:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	3304      	adds	r3, #4
 801123c:	0018      	movs	r0, r3
 801123e:	f7fe fbb5 	bl	800f9ac <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d008      	beq.n	801125a <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	2228      	movs	r2, #40	@ 0x28
 801124c:	5c9b      	ldrb	r3, [r3, r2]
 801124e:	2204      	movs	r2, #4
 8011250:	4313      	orrs	r3, r2
 8011252:	b2d9      	uxtb	r1, r3
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	2228      	movs	r2, #40	@ 0x28
 8011258:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801125a:	46c0      	nop			@ (mov r8, r8)
 801125c:	46bd      	mov	sp, r7
 801125e:	b004      	add	sp, #16
 8011260:	bd80      	pop	{r7, pc}
	...

08011264 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011264:	b590      	push	{r4, r7, lr}
 8011266:	b08b      	sub	sp, #44	@ 0x2c
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
 8011270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011272:	2300      	movs	r3, #0
 8011274:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <xTimerGenericCommand+0x1e>
 801127c:	b672      	cpsid	i
 801127e:	46c0      	nop			@ (mov r8, r8)
 8011280:	e7fd      	b.n	801127e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011282:	4b1d      	ldr	r3, [pc, #116]	@ (80112f8 <xTimerGenericCommand+0x94>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d030      	beq.n	80112ec <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801128a:	2414      	movs	r4, #20
 801128c:	193b      	adds	r3, r7, r4
 801128e:	68ba      	ldr	r2, [r7, #8]
 8011290:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011292:	193b      	adds	r3, r7, r4
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011298:	193b      	adds	r3, r7, r4
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	2b05      	cmp	r3, #5
 80112a2:	dc19      	bgt.n	80112d8 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80112a4:	f7ff fe4a 	bl	8010f3c <xTaskGetSchedulerState>
 80112a8:	0003      	movs	r3, r0
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	d109      	bne.n	80112c2 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80112ae:	4b12      	ldr	r3, [pc, #72]	@ (80112f8 <xTimerGenericCommand+0x94>)
 80112b0:	6818      	ldr	r0, [r3, #0]
 80112b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112b4:	1939      	adds	r1, r7, r4
 80112b6:	2300      	movs	r3, #0
 80112b8:	f7fe fd03 	bl	800fcc2 <xQueueGenericSend>
 80112bc:	0003      	movs	r3, r0
 80112be:	627b      	str	r3, [r7, #36]	@ 0x24
 80112c0:	e014      	b.n	80112ec <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80112c2:	4b0d      	ldr	r3, [pc, #52]	@ (80112f8 <xTimerGenericCommand+0x94>)
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	2314      	movs	r3, #20
 80112c8:	18f9      	adds	r1, r7, r3
 80112ca:	2300      	movs	r3, #0
 80112cc:	2200      	movs	r2, #0
 80112ce:	f7fe fcf8 	bl	800fcc2 <xQueueGenericSend>
 80112d2:	0003      	movs	r3, r0
 80112d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80112d6:	e009      	b.n	80112ec <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80112d8:	4b07      	ldr	r3, [pc, #28]	@ (80112f8 <xTimerGenericCommand+0x94>)
 80112da:	6818      	ldr	r0, [r3, #0]
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	2314      	movs	r3, #20
 80112e0:	18f9      	adds	r1, r7, r3
 80112e2:	2300      	movs	r3, #0
 80112e4:	f7fe fdb5 	bl	800fe52 <xQueueGenericSendFromISR>
 80112e8:	0003      	movs	r3, r0
 80112ea:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80112ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80112ee:	0018      	movs	r0, r3
 80112f0:	46bd      	mov	sp, r7
 80112f2:	b00b      	add	sp, #44	@ 0x2c
 80112f4:	bd90      	pop	{r4, r7, pc}
 80112f6:	46c0      	nop			@ (mov r8, r8)
 80112f8:	20003c28 	.word	0x20003c28

080112fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b086      	sub	sp, #24
 8011300:	af02      	add	r7, sp, #8
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011306:	4b1f      	ldr	r3, [pc, #124]	@ (8011384 <prvProcessExpiredTimer+0x88>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	3304      	adds	r3, #4
 8011314:	0018      	movs	r0, r3
 8011316:	f7fe fbac 	bl	800fa72 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2228      	movs	r2, #40	@ 0x28
 801131e:	5c9b      	ldrb	r3, [r3, r2]
 8011320:	001a      	movs	r2, r3
 8011322:	2304      	movs	r3, #4
 8011324:	4013      	ands	r3, r2
 8011326:	d01a      	beq.n	801135e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	699a      	ldr	r2, [r3, #24]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	18d1      	adds	r1, r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f000 f8c7 	bl	80114c8 <prvInsertTimerInActiveList>
 801133a:	1e03      	subs	r3, r0, #0
 801133c:	d018      	beq.n	8011370 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	2300      	movs	r3, #0
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	2300      	movs	r3, #0
 8011348:	2100      	movs	r1, #0
 801134a:	f7ff ff8b 	bl	8011264 <xTimerGenericCommand>
 801134e:	0003      	movs	r3, r0
 8011350:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d10b      	bne.n	8011370 <prvProcessExpiredTimer+0x74>
 8011358:	b672      	cpsid	i
 801135a:	46c0      	nop			@ (mov r8, r8)
 801135c:	e7fd      	b.n	801135a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2228      	movs	r2, #40	@ 0x28
 8011362:	5c9b      	ldrb	r3, [r3, r2]
 8011364:	2201      	movs	r2, #1
 8011366:	4393      	bics	r3, r2
 8011368:	b2d9      	uxtb	r1, r3
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2228      	movs	r2, #40	@ 0x28
 801136e:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6a1b      	ldr	r3, [r3, #32]
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	0010      	movs	r0, r2
 8011378:	4798      	blx	r3
}
 801137a:	46c0      	nop			@ (mov r8, r8)
 801137c:	46bd      	mov	sp, r7
 801137e:	b004      	add	sp, #16
 8011380:	bd80      	pop	{r7, pc}
 8011382:	46c0      	nop			@ (mov r8, r8)
 8011384:	20003c20 	.word	0x20003c20

08011388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011390:	2308      	movs	r3, #8
 8011392:	18fb      	adds	r3, r7, r3
 8011394:	0018      	movs	r0, r3
 8011396:	f000 f855 	bl	8011444 <prvGetNextExpireTime>
 801139a:	0003      	movs	r3, r0
 801139c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	0011      	movs	r1, r2
 80113a4:	0018      	movs	r0, r3
 80113a6:	f000 f805 	bl	80113b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80113aa:	f000 f8cf 	bl	801154c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80113ae:	46c0      	nop			@ (mov r8, r8)
 80113b0:	e7ee      	b.n	8011390 <prvTimerTask+0x8>
	...

080113b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80113be:	f7ff fa29 	bl	8010814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113c2:	2308      	movs	r3, #8
 80113c4:	18fb      	adds	r3, r7, r3
 80113c6:	0018      	movs	r0, r3
 80113c8:	f000 f85e 	bl	8011488 <prvSampleTimeNow>
 80113cc:	0003      	movs	r3, r0
 80113ce:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d12b      	bne.n	801142e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d10c      	bne.n	80113f6 <prvProcessTimerOrBlockTask+0x42>
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d808      	bhi.n	80113f6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80113e4:	f7ff fa22 	bl	801082c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	0011      	movs	r1, r2
 80113ee:	0018      	movs	r0, r3
 80113f0:	f7ff ff84 	bl	80112fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80113f4:	e01d      	b.n	8011432 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d008      	beq.n	801140e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80113fc:	4b0f      	ldr	r3, [pc, #60]	@ (801143c <prvProcessTimerOrBlockTask+0x88>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d101      	bne.n	801140a <prvProcessTimerOrBlockTask+0x56>
 8011406:	2301      	movs	r3, #1
 8011408:	e000      	b.n	801140c <prvProcessTimerOrBlockTask+0x58>
 801140a:	2300      	movs	r3, #0
 801140c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801140e:	4b0c      	ldr	r3, [pc, #48]	@ (8011440 <prvProcessTimerOrBlockTask+0x8c>)
 8011410:	6818      	ldr	r0, [r3, #0]
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	0019      	movs	r1, r3
 801141c:	f7fe ffa4 	bl	8010368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011420:	f7ff fa04 	bl	801082c <xTaskResumeAll>
 8011424:	1e03      	subs	r3, r0, #0
 8011426:	d104      	bne.n	8011432 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8011428:	f000 fa9a 	bl	8011960 <vPortYield>
}
 801142c:	e001      	b.n	8011432 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 801142e:	f7ff f9fd 	bl	801082c <xTaskResumeAll>
}
 8011432:	46c0      	nop			@ (mov r8, r8)
 8011434:	46bd      	mov	sp, r7
 8011436:	b004      	add	sp, #16
 8011438:	bd80      	pop	{r7, pc}
 801143a:	46c0      	nop			@ (mov r8, r8)
 801143c:	20003c24 	.word	0x20003c24
 8011440:	20003c28 	.word	0x20003c28

08011444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801144c:	4b0d      	ldr	r3, [pc, #52]	@ (8011484 <prvGetNextExpireTime+0x40>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d101      	bne.n	801145a <prvGetNextExpireTime+0x16>
 8011456:	2201      	movs	r2, #1
 8011458:	e000      	b.n	801145c <prvGetNextExpireTime+0x18>
 801145a:	2200      	movs	r2, #0
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d105      	bne.n	8011474 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011468:	4b06      	ldr	r3, [pc, #24]	@ (8011484 <prvGetNextExpireTime+0x40>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	60fb      	str	r3, [r7, #12]
 8011472:	e001      	b.n	8011478 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011474:	2300      	movs	r3, #0
 8011476:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011478:	68fb      	ldr	r3, [r7, #12]
}
 801147a:	0018      	movs	r0, r3
 801147c:	46bd      	mov	sp, r7
 801147e:	b004      	add	sp, #16
 8011480:	bd80      	pop	{r7, pc}
 8011482:	46c0      	nop			@ (mov r8, r8)
 8011484:	20003c20 	.word	0x20003c20

08011488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011490:	f7ff fa58 	bl	8010944 <xTaskGetTickCount>
 8011494:	0003      	movs	r3, r0
 8011496:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8011498:	4b0a      	ldr	r3, [pc, #40]	@ (80114c4 <prvSampleTimeNow+0x3c>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d205      	bcs.n	80114ae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80114a2:	f000 f91d 	bl	80116e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2201      	movs	r2, #1
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	e002      	b.n	80114b4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80114b4:	4b03      	ldr	r3, [pc, #12]	@ (80114c4 <prvSampleTimeNow+0x3c>)
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80114ba:	68fb      	ldr	r3, [r7, #12]
}
 80114bc:	0018      	movs	r0, r3
 80114be:	46bd      	mov	sp, r7
 80114c0:	b004      	add	sp, #16
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	20003c30 	.word	0x20003c30

080114c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
 80114d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80114d6:	2300      	movs	r3, #0
 80114d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80114e6:	68ba      	ldr	r2, [r7, #8]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d812      	bhi.n	8011514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	1ad2      	subs	r2, r2, r3
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	699b      	ldr	r3, [r3, #24]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d302      	bcc.n	8011502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80114fc:	2301      	movs	r3, #1
 80114fe:	617b      	str	r3, [r7, #20]
 8011500:	e01b      	b.n	801153a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011502:	4b10      	ldr	r3, [pc, #64]	@ (8011544 <prvInsertTimerInActiveList+0x7c>)
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	3304      	adds	r3, #4
 801150a:	0019      	movs	r1, r3
 801150c:	0010      	movs	r0, r2
 801150e:	f7fe fa7a 	bl	800fa06 <vListInsert>
 8011512:	e012      	b.n	801153a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	429a      	cmp	r2, r3
 801151a:	d206      	bcs.n	801152a <prvInsertTimerInActiveList+0x62>
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	429a      	cmp	r2, r3
 8011522:	d302      	bcc.n	801152a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011524:	2301      	movs	r3, #1
 8011526:	617b      	str	r3, [r7, #20]
 8011528:	e007      	b.n	801153a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801152a:	4b07      	ldr	r3, [pc, #28]	@ (8011548 <prvInsertTimerInActiveList+0x80>)
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3304      	adds	r3, #4
 8011532:	0019      	movs	r1, r3
 8011534:	0010      	movs	r0, r2
 8011536:	f7fe fa66 	bl	800fa06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801153a:	697b      	ldr	r3, [r7, #20]
}
 801153c:	0018      	movs	r0, r3
 801153e:	46bd      	mov	sp, r7
 8011540:	b006      	add	sp, #24
 8011542:	bd80      	pop	{r7, pc}
 8011544:	20003c24 	.word	0x20003c24
 8011548:	20003c20 	.word	0x20003c20

0801154c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b08d      	sub	sp, #52	@ 0x34
 8011550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011552:	e0b1      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011554:	2208      	movs	r2, #8
 8011556:	18bb      	adds	r3, r7, r2
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	da10      	bge.n	8011580 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801155e:	18bb      	adds	r3, r7, r2
 8011560:	3304      	adds	r3, #4
 8011562:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011566:	2b00      	cmp	r3, #0
 8011568:	d102      	bne.n	8011570 <prvProcessReceivedCommands+0x24>
 801156a:	b672      	cpsid	i
 801156c:	46c0      	nop			@ (mov r8, r8)
 801156e:	e7fd      	b.n	801156c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011576:	6858      	ldr	r0, [r3, #4]
 8011578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	0019      	movs	r1, r3
 801157e:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011580:	2208      	movs	r2, #8
 8011582:	18bb      	adds	r3, r7, r2
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	da00      	bge.n	801158c <prvProcessReceivedCommands+0x40>
 801158a:	e095      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801158c:	18bb      	adds	r3, r7, r2
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011592:	6a3b      	ldr	r3, [r7, #32]
 8011594:	695b      	ldr	r3, [r3, #20]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d004      	beq.n	80115a4 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801159a:	6a3b      	ldr	r3, [r7, #32]
 801159c:	3304      	adds	r3, #4
 801159e:	0018      	movs	r0, r3
 80115a0:	f7fe fa67 	bl	800fa72 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115a4:	1d3b      	adds	r3, r7, #4
 80115a6:	0018      	movs	r0, r3
 80115a8:	f7ff ff6e 	bl	8011488 <prvSampleTimeNow>
 80115ac:	0003      	movs	r3, r0
 80115ae:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80115b0:	2308      	movs	r3, #8
 80115b2:	18fb      	adds	r3, r7, r3
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	2b09      	cmp	r3, #9
 80115b8:	d900      	bls.n	80115bc <prvProcessReceivedCommands+0x70>
 80115ba:	e07a      	b.n	80116b2 <prvProcessReceivedCommands+0x166>
 80115bc:	009a      	lsls	r2, r3, #2
 80115be:	4b46      	ldr	r3, [pc, #280]	@ (80116d8 <prvProcessReceivedCommands+0x18c>)
 80115c0:	18d3      	adds	r3, r2, r3
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115c6:	6a3b      	ldr	r3, [r7, #32]
 80115c8:	2228      	movs	r2, #40	@ 0x28
 80115ca:	5c9b      	ldrb	r3, [r3, r2]
 80115cc:	2201      	movs	r2, #1
 80115ce:	4313      	orrs	r3, r2
 80115d0:	b2d9      	uxtb	r1, r3
 80115d2:	6a3b      	ldr	r3, [r7, #32]
 80115d4:	2228      	movs	r2, #40	@ 0x28
 80115d6:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80115d8:	2408      	movs	r4, #8
 80115da:	193b      	adds	r3, r7, r4
 80115dc:	685a      	ldr	r2, [r3, #4]
 80115de:	6a3b      	ldr	r3, [r7, #32]
 80115e0:	699b      	ldr	r3, [r3, #24]
 80115e2:	18d1      	adds	r1, r2, r3
 80115e4:	193b      	adds	r3, r7, r4
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	69fa      	ldr	r2, [r7, #28]
 80115ea:	6a38      	ldr	r0, [r7, #32]
 80115ec:	f7ff ff6c 	bl	80114c8 <prvInsertTimerInActiveList>
 80115f0:	1e03      	subs	r3, r0, #0
 80115f2:	d060      	beq.n	80116b6 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115f4:	6a3b      	ldr	r3, [r7, #32]
 80115f6:	6a1b      	ldr	r3, [r3, #32]
 80115f8:	6a3a      	ldr	r2, [r7, #32]
 80115fa:	0010      	movs	r0, r2
 80115fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80115fe:	6a3b      	ldr	r3, [r7, #32]
 8011600:	2228      	movs	r2, #40	@ 0x28
 8011602:	5c9b      	ldrb	r3, [r3, r2]
 8011604:	001a      	movs	r2, r3
 8011606:	2304      	movs	r3, #4
 8011608:	4013      	ands	r3, r2
 801160a:	d054      	beq.n	80116b6 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801160c:	193b      	adds	r3, r7, r4
 801160e:	685a      	ldr	r2, [r3, #4]
 8011610:	6a3b      	ldr	r3, [r7, #32]
 8011612:	699b      	ldr	r3, [r3, #24]
 8011614:	18d2      	adds	r2, r2, r3
 8011616:	6a38      	ldr	r0, [r7, #32]
 8011618:	2300      	movs	r3, #0
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	2300      	movs	r3, #0
 801161e:	2100      	movs	r1, #0
 8011620:	f7ff fe20 	bl	8011264 <xTimerGenericCommand>
 8011624:	0003      	movs	r3, r0
 8011626:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d143      	bne.n	80116b6 <prvProcessReceivedCommands+0x16a>
 801162e:	b672      	cpsid	i
 8011630:	46c0      	nop			@ (mov r8, r8)
 8011632:	e7fd      	b.n	8011630 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011634:	6a3b      	ldr	r3, [r7, #32]
 8011636:	2228      	movs	r2, #40	@ 0x28
 8011638:	5c9b      	ldrb	r3, [r3, r2]
 801163a:	2201      	movs	r2, #1
 801163c:	4393      	bics	r3, r2
 801163e:	b2d9      	uxtb	r1, r3
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	2228      	movs	r2, #40	@ 0x28
 8011644:	5499      	strb	r1, [r3, r2]
					break;
 8011646:	e037      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011648:	6a3b      	ldr	r3, [r7, #32]
 801164a:	2228      	movs	r2, #40	@ 0x28
 801164c:	5c9b      	ldrb	r3, [r3, r2]
 801164e:	2201      	movs	r2, #1
 8011650:	4313      	orrs	r3, r2
 8011652:	b2d9      	uxtb	r1, r3
 8011654:	6a3b      	ldr	r3, [r7, #32]
 8011656:	2228      	movs	r2, #40	@ 0x28
 8011658:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801165a:	2308      	movs	r3, #8
 801165c:	18fb      	adds	r3, r7, r3
 801165e:	685a      	ldr	r2, [r3, #4]
 8011660:	6a3b      	ldr	r3, [r7, #32]
 8011662:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011664:	6a3b      	ldr	r3, [r7, #32]
 8011666:	699b      	ldr	r3, [r3, #24]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d102      	bne.n	8011672 <prvProcessReceivedCommands+0x126>
 801166c:	b672      	cpsid	i
 801166e:	46c0      	nop			@ (mov r8, r8)
 8011670:	e7fd      	b.n	801166e <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011672:	6a3b      	ldr	r3, [r7, #32]
 8011674:	699a      	ldr	r2, [r3, #24]
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	18d1      	adds	r1, r2, r3
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	69fa      	ldr	r2, [r7, #28]
 801167e:	6a38      	ldr	r0, [r7, #32]
 8011680:	f7ff ff22 	bl	80114c8 <prvInsertTimerInActiveList>
					break;
 8011684:	e018      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	2228      	movs	r2, #40	@ 0x28
 801168a:	5c9b      	ldrb	r3, [r3, r2]
 801168c:	001a      	movs	r2, r3
 801168e:	2302      	movs	r3, #2
 8011690:	4013      	ands	r3, r2
 8011692:	d104      	bne.n	801169e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	0018      	movs	r0, r3
 8011698:	f000 faba 	bl	8011c10 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801169c:	e00c      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	2228      	movs	r2, #40	@ 0x28
 80116a2:	5c9b      	ldrb	r3, [r3, r2]
 80116a4:	2201      	movs	r2, #1
 80116a6:	4393      	bics	r3, r2
 80116a8:	b2d9      	uxtb	r1, r3
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	2228      	movs	r2, #40	@ 0x28
 80116ae:	5499      	strb	r1, [r3, r2]
					break;
 80116b0:	e002      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 80116b2:	46c0      	nop			@ (mov r8, r8)
 80116b4:	e000      	b.n	80116b8 <prvProcessReceivedCommands+0x16c>
					break;
 80116b6:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116b8:	4b08      	ldr	r3, [pc, #32]	@ (80116dc <prvProcessReceivedCommands+0x190>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2208      	movs	r2, #8
 80116be:	18b9      	adds	r1, r7, r2
 80116c0:	2200      	movs	r2, #0
 80116c2:	0018      	movs	r0, r3
 80116c4:	f7fe fc3c 	bl	800ff40 <xQueueReceive>
 80116c8:	1e03      	subs	r3, r0, #0
 80116ca:	d000      	beq.n	80116ce <prvProcessReceivedCommands+0x182>
 80116cc:	e742      	b.n	8011554 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80116ce:	46c0      	nop			@ (mov r8, r8)
 80116d0:	46c0      	nop			@ (mov r8, r8)
 80116d2:	46bd      	mov	sp, r7
 80116d4:	b00b      	add	sp, #44	@ 0x2c
 80116d6:	bd90      	pop	{r4, r7, pc}
 80116d8:	080176a4 	.word	0x080176a4
 80116dc:	20003c28 	.word	0x20003c28

080116e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80116e6:	e042      	b.n	801176e <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80116e8:	4b2a      	ldr	r3, [pc, #168]	@ (8011794 <prvSwitchTimerLists+0xb4>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116f2:	4b28      	ldr	r3, [pc, #160]	@ (8011794 <prvSwitchTimerLists+0xb4>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	3304      	adds	r3, #4
 8011700:	0018      	movs	r0, r3
 8011702:	f7fe f9b6 	bl	800fa72 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	0010      	movs	r0, r2
 801170e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2228      	movs	r2, #40	@ 0x28
 8011714:	5c9b      	ldrb	r3, [r3, r2]
 8011716:	001a      	movs	r2, r3
 8011718:	2304      	movs	r3, #4
 801171a:	4013      	ands	r3, r2
 801171c:	d027      	beq.n	801176e <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	699b      	ldr	r3, [r3, #24]
 8011722:	693a      	ldr	r2, [r7, #16]
 8011724:	18d3      	adds	r3, r2, r3
 8011726:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	429a      	cmp	r2, r3
 801172e:	d90e      	bls.n	801174e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801173c:	4b15      	ldr	r3, [pc, #84]	@ (8011794 <prvSwitchTimerLists+0xb4>)
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	3304      	adds	r3, #4
 8011744:	0019      	movs	r1, r3
 8011746:	0010      	movs	r0, r2
 8011748:	f7fe f95d 	bl	800fa06 <vListInsert>
 801174c:	e00f      	b.n	801176e <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	2300      	movs	r3, #0
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	2300      	movs	r3, #0
 8011758:	2100      	movs	r1, #0
 801175a:	f7ff fd83 	bl	8011264 <xTimerGenericCommand>
 801175e:	0003      	movs	r3, r0
 8011760:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d102      	bne.n	801176e <prvSwitchTimerLists+0x8e>
 8011768:	b672      	cpsid	i
 801176a:	46c0      	nop			@ (mov r8, r8)
 801176c:	e7fd      	b.n	801176a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801176e:	4b09      	ldr	r3, [pc, #36]	@ (8011794 <prvSwitchTimerLists+0xb4>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d1b7      	bne.n	80116e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011778:	4b06      	ldr	r3, [pc, #24]	@ (8011794 <prvSwitchTimerLists+0xb4>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801177e:	4b06      	ldr	r3, [pc, #24]	@ (8011798 <prvSwitchTimerLists+0xb8>)
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	4b04      	ldr	r3, [pc, #16]	@ (8011794 <prvSwitchTimerLists+0xb4>)
 8011784:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8011786:	4b04      	ldr	r3, [pc, #16]	@ (8011798 <prvSwitchTimerLists+0xb8>)
 8011788:	697a      	ldr	r2, [r7, #20]
 801178a:	601a      	str	r2, [r3, #0]
}
 801178c:	46c0      	nop			@ (mov r8, r8)
 801178e:	46bd      	mov	sp, r7
 8011790:	b006      	add	sp, #24
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20003c20 	.word	0x20003c20
 8011798:	20003c24 	.word	0x20003c24

0801179c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80117a2:	f000 f8ed 	bl	8011980 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80117a6:	4b16      	ldr	r3, [pc, #88]	@ (8011800 <prvCheckForValidListAndQueue+0x64>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d123      	bne.n	80117f6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80117ae:	4b15      	ldr	r3, [pc, #84]	@ (8011804 <prvCheckForValidListAndQueue+0x68>)
 80117b0:	0018      	movs	r0, r3
 80117b2:	f7fe f8dd 	bl	800f970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80117b6:	4b14      	ldr	r3, [pc, #80]	@ (8011808 <prvCheckForValidListAndQueue+0x6c>)
 80117b8:	0018      	movs	r0, r3
 80117ba:	f7fe f8d9 	bl	800f970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80117be:	4b13      	ldr	r3, [pc, #76]	@ (801180c <prvCheckForValidListAndQueue+0x70>)
 80117c0:	4a10      	ldr	r2, [pc, #64]	@ (8011804 <prvCheckForValidListAndQueue+0x68>)
 80117c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80117c4:	4b12      	ldr	r3, [pc, #72]	@ (8011810 <prvCheckForValidListAndQueue+0x74>)
 80117c6:	4a10      	ldr	r2, [pc, #64]	@ (8011808 <prvCheckForValidListAndQueue+0x6c>)
 80117c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80117ca:	4b12      	ldr	r3, [pc, #72]	@ (8011814 <prvCheckForValidListAndQueue+0x78>)
 80117cc:	4a12      	ldr	r2, [pc, #72]	@ (8011818 <prvCheckForValidListAndQueue+0x7c>)
 80117ce:	2100      	movs	r1, #0
 80117d0:	9100      	str	r1, [sp, #0]
 80117d2:	2110      	movs	r1, #16
 80117d4:	200a      	movs	r0, #10
 80117d6:	f7fe f9c9 	bl	800fb6c <xQueueGenericCreateStatic>
 80117da:	0002      	movs	r2, r0
 80117dc:	4b08      	ldr	r3, [pc, #32]	@ (8011800 <prvCheckForValidListAndQueue+0x64>)
 80117de:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80117e0:	4b07      	ldr	r3, [pc, #28]	@ (8011800 <prvCheckForValidListAndQueue+0x64>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d006      	beq.n	80117f6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80117e8:	4b05      	ldr	r3, [pc, #20]	@ (8011800 <prvCheckForValidListAndQueue+0x64>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	4a0b      	ldr	r2, [pc, #44]	@ (801181c <prvCheckForValidListAndQueue+0x80>)
 80117ee:	0011      	movs	r1, r2
 80117f0:	0018      	movs	r0, r3
 80117f2:	f7fe fd91 	bl	8010318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117f6:	f000 f8d5 	bl	80119a4 <vPortExitCritical>
}
 80117fa:	46c0      	nop			@ (mov r8, r8)
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	20003c28 	.word	0x20003c28
 8011804:	20003bf8 	.word	0x20003bf8
 8011808:	20003c0c 	.word	0x20003c0c
 801180c:	20003c20 	.word	0x20003c20
 8011810:	20003c24 	.word	0x20003c24
 8011814:	20003cd4 	.word	0x20003cd4
 8011818:	20003c34 	.word	0x20003c34
 801181c:	0801746c 	.word	0x0801746c

08011820 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d102      	bne.n	8011838 <pvTimerGetTimerID+0x18>
 8011832:	b672      	cpsid	i
 8011834:	46c0      	nop			@ (mov r8, r8)
 8011836:	e7fd      	b.n	8011834 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8011838:	f000 f8a2 	bl	8011980 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	69db      	ldr	r3, [r3, #28]
 8011840:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8011842:	f000 f8af 	bl	80119a4 <vPortExitCritical>

	return pvReturn;
 8011846:	68bb      	ldr	r3, [r7, #8]
}
 8011848:	0018      	movs	r0, r3
 801184a:	46bd      	mov	sp, r7
 801184c:	b004      	add	sp, #16
 801184e:	bd80      	pop	{r7, pc}

08011850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	3b04      	subs	r3, #4
 8011860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2280      	movs	r2, #128	@ 0x80
 8011866:	0452      	lsls	r2, r2, #17
 8011868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	3b04      	subs	r3, #4
 801186e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	3b04      	subs	r3, #4
 801187a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801187c:	4a08      	ldr	r2, [pc, #32]	@ (80118a0 <pxPortInitialiseStack+0x50>)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	3b14      	subs	r3, #20
 8011886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	3b20      	subs	r3, #32
 8011892:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011894:	68fb      	ldr	r3, [r7, #12]
}
 8011896:	0018      	movs	r0, r3
 8011898:	46bd      	mov	sp, r7
 801189a:	b004      	add	sp, #16
 801189c:	bd80      	pop	{r7, pc}
 801189e:	46c0      	nop			@ (mov r8, r8)
 80118a0:	080118a5 	.word	0x080118a5

080118a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80118aa:	2300      	movs	r3, #0
 80118ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80118ae:	4b08      	ldr	r3, [pc, #32]	@ (80118d0 <prvTaskExitError+0x2c>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	3301      	adds	r3, #1
 80118b4:	d002      	beq.n	80118bc <prvTaskExitError+0x18>
 80118b6:	b672      	cpsid	i
 80118b8:	46c0      	nop			@ (mov r8, r8)
 80118ba:	e7fd      	b.n	80118b8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80118bc:	b672      	cpsid	i
	while( ulDummy == 0 )
 80118be:	46c0      	nop			@ (mov r8, r8)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d0fc      	beq.n	80118c0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80118c6:	46c0      	nop			@ (mov r8, r8)
 80118c8:	46c0      	nop			@ (mov r8, r8)
 80118ca:	46bd      	mov	sp, r7
 80118cc:	b002      	add	sp, #8
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	2000007c 	.word	0x2000007c

080118d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80118d8:	46c0      	nop			@ (mov r8, r8)
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
	...

080118e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80118e0:	4a0b      	ldr	r2, [pc, #44]	@ (8011910 <pxCurrentTCBConst2>)
 80118e2:	6813      	ldr	r3, [r2, #0]
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	3020      	adds	r0, #32
 80118e8:	f380 8809 	msr	PSP, r0
 80118ec:	2002      	movs	r0, #2
 80118ee:	f380 8814 	msr	CONTROL, r0
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80118f8:	46ae      	mov	lr, r5
 80118fa:	bc08      	pop	{r3}
 80118fc:	bc04      	pop	{r2}
 80118fe:	b662      	cpsie	i
 8011900:	4718      	bx	r3
 8011902:	46c0      	nop			@ (mov r8, r8)
 8011904:	46c0      	nop			@ (mov r8, r8)
 8011906:	46c0      	nop			@ (mov r8, r8)
 8011908:	46c0      	nop			@ (mov r8, r8)
 801190a:	46c0      	nop			@ (mov r8, r8)
 801190c:	46c0      	nop			@ (mov r8, r8)
 801190e:	46c0      	nop			@ (mov r8, r8)

08011910 <pxCurrentTCBConst2>:
 8011910:	200036f8 	.word	0x200036f8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8011914:	46c0      	nop			@ (mov r8, r8)
 8011916:	46c0      	nop			@ (mov r8, r8)

08011918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801191c:	4b0e      	ldr	r3, [pc, #56]	@ (8011958 <xPortStartScheduler+0x40>)
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	4b0d      	ldr	r3, [pc, #52]	@ (8011958 <xPortStartScheduler+0x40>)
 8011922:	21ff      	movs	r1, #255	@ 0xff
 8011924:	0409      	lsls	r1, r1, #16
 8011926:	430a      	orrs	r2, r1
 8011928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801192a:	4b0b      	ldr	r3, [pc, #44]	@ (8011958 <xPortStartScheduler+0x40>)
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	4b0a      	ldr	r3, [pc, #40]	@ (8011958 <xPortStartScheduler+0x40>)
 8011930:	21ff      	movs	r1, #255	@ 0xff
 8011932:	0609      	lsls	r1, r1, #24
 8011934:	430a      	orrs	r2, r1
 8011936:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011938:	f000 f898 	bl	8011a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801193c:	4b07      	ldr	r3, [pc, #28]	@ (801195c <xPortStartScheduler+0x44>)
 801193e:	2200      	movs	r2, #0
 8011940:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8011942:	f7ff ffcd 	bl	80118e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011946:	f7ff f8bb 	bl	8010ac0 <vTaskSwitchContext>
	prvTaskExitError();
 801194a:	f7ff ffab 	bl	80118a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801194e:	2300      	movs	r3, #0
}
 8011950:	0018      	movs	r0, r3
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	46c0      	nop			@ (mov r8, r8)
 8011958:	e000ed20 	.word	0xe000ed20
 801195c:	2000007c 	.word	0x2000007c

08011960 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011964:	4b05      	ldr	r3, [pc, #20]	@ (801197c <vPortYield+0x1c>)
 8011966:	2280      	movs	r2, #128	@ 0x80
 8011968:	0552      	lsls	r2, r2, #21
 801196a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801196c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011970:	f3bf 8f6f 	isb	sy
}
 8011974:	46c0      	nop			@ (mov r8, r8)
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	46c0      	nop			@ (mov r8, r8)
 801197c:	e000ed04 	.word	0xe000ed04

08011980 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8011984:	b672      	cpsid	i
	uxCriticalNesting++;
 8011986:	4b06      	ldr	r3, [pc, #24]	@ (80119a0 <vPortEnterCritical+0x20>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	4b04      	ldr	r3, [pc, #16]	@ (80119a0 <vPortEnterCritical+0x20>)
 801198e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8011990:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011994:	f3bf 8f6f 	isb	sy
}
 8011998:	46c0      	nop			@ (mov r8, r8)
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	46c0      	nop			@ (mov r8, r8)
 80119a0:	2000007c 	.word	0x2000007c

080119a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80119a8:	4b09      	ldr	r3, [pc, #36]	@ (80119d0 <vPortExitCritical+0x2c>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d102      	bne.n	80119b6 <vPortExitCritical+0x12>
 80119b0:	b672      	cpsid	i
 80119b2:	46c0      	nop			@ (mov r8, r8)
 80119b4:	e7fd      	b.n	80119b2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80119b6:	4b06      	ldr	r3, [pc, #24]	@ (80119d0 <vPortExitCritical+0x2c>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	1e5a      	subs	r2, r3, #1
 80119bc:	4b04      	ldr	r3, [pc, #16]	@ (80119d0 <vPortExitCritical+0x2c>)
 80119be:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80119c0:	4b03      	ldr	r3, [pc, #12]	@ (80119d0 <vPortExitCritical+0x2c>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d100      	bne.n	80119ca <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 80119c8:	b662      	cpsie	i
	}
}
 80119ca:	46c0      	nop			@ (mov r8, r8)
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	2000007c 	.word	0x2000007c

080119d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80119d4:	f3ef 8010 	mrs	r0, PRIMASK
 80119d8:	b672      	cpsid	i
 80119da:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80119dc:	46c0      	nop			@ (mov r8, r8)
 80119de:	0018      	movs	r0, r3

080119e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80119e0:	f380 8810 	msr	PRIMASK, r0
 80119e4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80119e6:	46c0      	nop			@ (mov r8, r8)
	...

080119f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80119f0:	f3ef 8009 	mrs	r0, PSP
 80119f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011a30 <pxCurrentTCBConst>)
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	3820      	subs	r0, #32
 80119fa:	6010      	str	r0, [r2, #0]
 80119fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80119fe:	4644      	mov	r4, r8
 8011a00:	464d      	mov	r5, r9
 8011a02:	4656      	mov	r6, sl
 8011a04:	465f      	mov	r7, fp
 8011a06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011a08:	b508      	push	{r3, lr}
 8011a0a:	b672      	cpsid	i
 8011a0c:	f7ff f858 	bl	8010ac0 <vTaskSwitchContext>
 8011a10:	b662      	cpsie	i
 8011a12:	bc0c      	pop	{r2, r3}
 8011a14:	6811      	ldr	r1, [r2, #0]
 8011a16:	6808      	ldr	r0, [r1, #0]
 8011a18:	3010      	adds	r0, #16
 8011a1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011a1c:	46a0      	mov	r8, r4
 8011a1e:	46a9      	mov	r9, r5
 8011a20:	46b2      	mov	sl, r6
 8011a22:	46bb      	mov	fp, r7
 8011a24:	f380 8809 	msr	PSP, r0
 8011a28:	3820      	subs	r0, #32
 8011a2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011a2c:	4718      	bx	r3
 8011a2e:	46c0      	nop			@ (mov r8, r8)

08011a30 <pxCurrentTCBConst>:
 8011a30:	200036f8 	.word	0x200036f8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8011a34:	46c0      	nop			@ (mov r8, r8)
 8011a36:	46c0      	nop			@ (mov r8, r8)

08011a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a3e:	f7ff ffc9 	bl	80119d4 <ulSetInterruptMaskFromISR>
 8011a42:	0003      	movs	r3, r0
 8011a44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a46:	f7fe ff8b 	bl	8010960 <xTaskIncrementTick>
 8011a4a:	1e03      	subs	r3, r0, #0
 8011a4c:	d003      	beq.n	8011a56 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a4e:	4b06      	ldr	r3, [pc, #24]	@ (8011a68 <xPortSysTickHandler+0x30>)
 8011a50:	2280      	movs	r2, #128	@ 0x80
 8011a52:	0552      	lsls	r2, r2, #21
 8011a54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	0018      	movs	r0, r3
 8011a5a:	f7ff ffc1 	bl	80119e0 <vClearInterruptMaskFromISR>
}
 8011a5e:	46c0      	nop			@ (mov r8, r8)
 8011a60:	46bd      	mov	sp, r7
 8011a62:	b002      	add	sp, #8
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	46c0      	nop			@ (mov r8, r8)
 8011a68:	e000ed04 	.word	0xe000ed04

08011a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a70:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa0 <vPortSetupTimerInterrupt+0x34>)
 8011a72:	2200      	movs	r2, #0
 8011a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a76:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa4 <vPortSetupTimerInterrupt+0x38>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa8 <vPortSetupTimerInterrupt+0x3c>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	22fa      	movs	r2, #250	@ 0xfa
 8011a82:	0091      	lsls	r1, r2, #2
 8011a84:	0018      	movs	r0, r3
 8011a86:	f7ee fb5b 	bl	8000140 <__udivsi3>
 8011a8a:	0003      	movs	r3, r0
 8011a8c:	001a      	movs	r2, r3
 8011a8e:	4b07      	ldr	r3, [pc, #28]	@ (8011aac <vPortSetupTimerInterrupt+0x40>)
 8011a90:	3a01      	subs	r2, #1
 8011a92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8011a94:	4b02      	ldr	r3, [pc, #8]	@ (8011aa0 <vPortSetupTimerInterrupt+0x34>)
 8011a96:	2207      	movs	r2, #7
 8011a98:	601a      	str	r2, [r3, #0]
}
 8011a9a:	46c0      	nop			@ (mov r8, r8)
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	e000e010 	.word	0xe000e010
 8011aa4:	e000e018 	.word	0xe000e018
 8011aa8:	20000068 	.word	0x20000068
 8011aac:	e000e014 	.word	0xe000e014

08011ab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8011abc:	f7fe feaa 	bl	8010814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8011bf8 <pvPortMalloc+0x148>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011ac8:	f000 f8f2 	bl	8011cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011acc:	4b4b      	ldr	r3, [pc, #300]	@ (8011bfc <pvPortMalloc+0x14c>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	4013      	ands	r3, r2
 8011ad4:	d000      	beq.n	8011ad8 <pvPortMalloc+0x28>
 8011ad6:	e080      	b.n	8011bda <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d013      	beq.n	8011b06 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8011ade:	2208      	movs	r2, #8
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	189b      	adds	r3, r3, r2
 8011ae4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2207      	movs	r2, #7
 8011aea:	4013      	ands	r3, r2
 8011aec:	d00b      	beq.n	8011b06 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2207      	movs	r2, #7
 8011af2:	4393      	bics	r3, r2
 8011af4:	3308      	adds	r3, #8
 8011af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2207      	movs	r2, #7
 8011afc:	4013      	ands	r3, r2
 8011afe:	d002      	beq.n	8011b06 <pvPortMalloc+0x56>
 8011b00:	b672      	cpsid	i
 8011b02:	46c0      	nop			@ (mov r8, r8)
 8011b04:	e7fd      	b.n	8011b02 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d066      	beq.n	8011bda <pvPortMalloc+0x12a>
 8011b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8011c00 <pvPortMalloc+0x150>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d861      	bhi.n	8011bda <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011b16:	4b3b      	ldr	r3, [pc, #236]	@ (8011c04 <pvPortMalloc+0x154>)
 8011b18:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8011b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8011c04 <pvPortMalloc+0x154>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b20:	e004      	b.n	8011b2c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d903      	bls.n	8011b3e <pvPortMalloc+0x8e>
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1f1      	bne.n	8011b22 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8011bf8 <pvPortMalloc+0x148>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d048      	beq.n	8011bda <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2208      	movs	r2, #8
 8011b4e:	189b      	adds	r3, r3, r2
 8011b50:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	685a      	ldr	r2, [r3, #4]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	1ad2      	subs	r2, r2, r3
 8011b62:	2308      	movs	r3, #8
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d917      	bls.n	8011b9a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b6a:	697a      	ldr	r2, [r7, #20]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	18d3      	adds	r3, r2, r3
 8011b70:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2207      	movs	r2, #7
 8011b76:	4013      	ands	r3, r2
 8011b78:	d002      	beq.n	8011b80 <pvPortMalloc+0xd0>
 8011b7a:	b672      	cpsid	i
 8011b7c:	46c0      	nop			@ (mov r8, r8)
 8011b7e:	e7fd      	b.n	8011b7c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	685a      	ldr	r2, [r3, #4]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	1ad2      	subs	r2, r2, r3
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	0018      	movs	r0, r3
 8011b96:	f000 f8eb 	bl	8011d70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b9a:	4b19      	ldr	r3, [pc, #100]	@ (8011c00 <pvPortMalloc+0x150>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	1ad2      	subs	r2, r2, r3
 8011ba4:	4b16      	ldr	r3, [pc, #88]	@ (8011c00 <pvPortMalloc+0x150>)
 8011ba6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011ba8:	4b15      	ldr	r3, [pc, #84]	@ (8011c00 <pvPortMalloc+0x150>)
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	4b16      	ldr	r3, [pc, #88]	@ (8011c08 <pvPortMalloc+0x158>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d203      	bcs.n	8011bbc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011bb4:	4b12      	ldr	r3, [pc, #72]	@ (8011c00 <pvPortMalloc+0x150>)
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	4b13      	ldr	r3, [pc, #76]	@ (8011c08 <pvPortMalloc+0x158>)
 8011bba:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	685a      	ldr	r2, [r3, #4]
 8011bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8011bfc <pvPortMalloc+0x14c>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	431a      	orrs	r2, r3
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8011c0c <pvPortMalloc+0x15c>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	1c5a      	adds	r2, r3, #1
 8011bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8011c0c <pvPortMalloc+0x15c>)
 8011bd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011bda:	f7fe fe27 	bl	801082c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2207      	movs	r2, #7
 8011be2:	4013      	ands	r3, r2
 8011be4:	d002      	beq.n	8011bec <pvPortMalloc+0x13c>
 8011be6:	b672      	cpsid	i
 8011be8:	46c0      	nop			@ (mov r8, r8)
 8011bea:	e7fd      	b.n	8011be8 <pvPortMalloc+0x138>
	return pvReturn;
 8011bec:	68fb      	ldr	r3, [r7, #12]
}
 8011bee:	0018      	movs	r0, r3
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	b006      	add	sp, #24
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	46c0      	nop			@ (mov r8, r8)
 8011bf8:	2000712c 	.word	0x2000712c
 8011bfc:	20007140 	.word	0x20007140
 8011c00:	20007130 	.word	0x20007130
 8011c04:	20007124 	.word	0x20007124
 8011c08:	20007134 	.word	0x20007134
 8011c0c:	20007138 	.word	0x20007138

08011c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d03c      	beq.n	8011c9c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011c22:	2308      	movs	r3, #8
 8011c24:	425b      	negs	r3, r3
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	18d3      	adds	r3, r2, r3
 8011c2a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	685a      	ldr	r2, [r3, #4]
 8011c34:	4b1b      	ldr	r3, [pc, #108]	@ (8011ca4 <vPortFree+0x94>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4013      	ands	r3, r2
 8011c3a:	d102      	bne.n	8011c42 <vPortFree+0x32>
 8011c3c:	b672      	cpsid	i
 8011c3e:	46c0      	nop			@ (mov r8, r8)
 8011c40:	e7fd      	b.n	8011c3e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d002      	beq.n	8011c50 <vPortFree+0x40>
 8011c4a:	b672      	cpsid	i
 8011c4c:	46c0      	nop			@ (mov r8, r8)
 8011c4e:	e7fd      	b.n	8011c4c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	685a      	ldr	r2, [r3, #4]
 8011c54:	4b13      	ldr	r3, [pc, #76]	@ (8011ca4 <vPortFree+0x94>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4013      	ands	r3, r2
 8011c5a:	d01f      	beq.n	8011c9c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d11b      	bne.n	8011c9c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	685a      	ldr	r2, [r3, #4]
 8011c68:	4b0e      	ldr	r3, [pc, #56]	@ (8011ca4 <vPortFree+0x94>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	43db      	mvns	r3, r3
 8011c6e:	401a      	ands	r2, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c74:	f7fe fdce 	bl	8010814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011ca8 <vPortFree+0x98>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	18d2      	adds	r2, r2, r3
 8011c82:	4b09      	ldr	r3, [pc, #36]	@ (8011ca8 <vPortFree+0x98>)
 8011c84:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	0018      	movs	r0, r3
 8011c8a:	f000 f871 	bl	8011d70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011c8e:	4b07      	ldr	r3, [pc, #28]	@ (8011cac <vPortFree+0x9c>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	4b05      	ldr	r3, [pc, #20]	@ (8011cac <vPortFree+0x9c>)
 8011c96:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8011c98:	f7fe fdc8 	bl	801082c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c9c:	46c0      	nop			@ (mov r8, r8)
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	b004      	add	sp, #16
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	20007140 	.word	0x20007140
 8011ca8:	20007130 	.word	0x20007130
 8011cac:	2000713c 	.word	0x2000713c

08011cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011cb6:	23d0      	movs	r3, #208	@ 0xd0
 8011cb8:	019b      	lsls	r3, r3, #6
 8011cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011cbc:	4b26      	ldr	r3, [pc, #152]	@ (8011d58 <prvHeapInit+0xa8>)
 8011cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2207      	movs	r2, #7
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	d00c      	beq.n	8011ce2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	3307      	adds	r3, #7
 8011ccc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2207      	movs	r2, #7
 8011cd2:	4393      	bics	r3, r2
 8011cd4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	1ad2      	subs	r2, r2, r3
 8011cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8011d58 <prvHeapInit+0xa8>)
 8011cde:	18d3      	adds	r3, r2, r3
 8011ce0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8011d5c <prvHeapInit+0xac>)
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011cec:	4b1b      	ldr	r3, [pc, #108]	@ (8011d5c <prvHeapInit+0xac>)
 8011cee:	2200      	movs	r2, #0
 8011cf0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	18d3      	adds	r3, r2, r3
 8011cf8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011cfa:	2208      	movs	r2, #8
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	1a9b      	subs	r3, r3, r2
 8011d00:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2207      	movs	r2, #7
 8011d06:	4393      	bics	r3, r2
 8011d08:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	4b14      	ldr	r3, [pc, #80]	@ (8011d60 <prvHeapInit+0xb0>)
 8011d0e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8011d10:	4b13      	ldr	r3, [pc, #76]	@ (8011d60 <prvHeapInit+0xb0>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2200      	movs	r2, #0
 8011d16:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011d18:	4b11      	ldr	r3, [pc, #68]	@ (8011d60 <prvHeapInit+0xb0>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	1ad2      	subs	r2, r2, r3
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8011d60 <prvHeapInit+0xb0>)
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	685a      	ldr	r2, [r3, #4]
 8011d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8011d64 <prvHeapInit+0xb4>)
 8011d3c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	685a      	ldr	r2, [r3, #4]
 8011d42:	4b09      	ldr	r3, [pc, #36]	@ (8011d68 <prvHeapInit+0xb8>)
 8011d44:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d46:	4b09      	ldr	r3, [pc, #36]	@ (8011d6c <prvHeapInit+0xbc>)
 8011d48:	2280      	movs	r2, #128	@ 0x80
 8011d4a:	0612      	lsls	r2, r2, #24
 8011d4c:	601a      	str	r2, [r3, #0]
}
 8011d4e:	46c0      	nop			@ (mov r8, r8)
 8011d50:	46bd      	mov	sp, r7
 8011d52:	b004      	add	sp, #16
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	46c0      	nop			@ (mov r8, r8)
 8011d58:	20003d24 	.word	0x20003d24
 8011d5c:	20007124 	.word	0x20007124
 8011d60:	2000712c 	.word	0x2000712c
 8011d64:	20007134 	.word	0x20007134
 8011d68:	20007130 	.word	0x20007130
 8011d6c:	20007140 	.word	0x20007140

08011d70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d78:	4b27      	ldr	r3, [pc, #156]	@ (8011e18 <prvInsertBlockIntoFreeList+0xa8>)
 8011d7a:	60fb      	str	r3, [r7, #12]
 8011d7c:	e002      	b.n	8011d84 <prvInsertBlockIntoFreeList+0x14>
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d8f7      	bhi.n	8011d7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	68ba      	ldr	r2, [r7, #8]
 8011d98:	18d3      	adds	r3, r2, r3
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d108      	bne.n	8011db2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	685a      	ldr	r2, [r3, #4]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	18d2      	adds	r2, r2, r3
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	18d2      	adds	r2, r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d118      	bne.n	8011df8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	4b14      	ldr	r3, [pc, #80]	@ (8011e1c <prvInsertBlockIntoFreeList+0xac>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d00d      	beq.n	8011dee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	685a      	ldr	r2, [r3, #4]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	18d2      	adds	r2, r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	e008      	b.n	8011e00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011dee:	4b0b      	ldr	r3, [pc, #44]	@ (8011e1c <prvInsertBlockIntoFreeList+0xac>)
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	601a      	str	r2, [r3, #0]
 8011df6:	e003      	b.n	8011e00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d002      	beq.n	8011e0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e0e:	46c0      	nop			@ (mov r8, r8)
 8011e10:	46bd      	mov	sp, r7
 8011e12:	b004      	add	sp, #16
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	46c0      	nop			@ (mov r8, r8)
 8011e18:	20007124 	.word	0x20007124
 8011e1c:	2000712c 	.word	0x2000712c

08011e20 <asinf>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	1c05      	adds	r5, r0, #0
 8011e24:	f000 f98e 	bl	8012144 <__ieee754_asinf>
 8011e28:	1c29      	adds	r1, r5, #0
 8011e2a:	1c04      	adds	r4, r0, #0
 8011e2c:	1c28      	adds	r0, r5, #0
 8011e2e:	f7ef fb39 	bl	80014a4 <__aeabi_fcmpun>
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d110      	bne.n	8011e58 <asinf+0x38>
 8011e36:	1c28      	adds	r0, r5, #0
 8011e38:	f000 f82e 	bl	8011e98 <fabsf>
 8011e3c:	21fe      	movs	r1, #254	@ 0xfe
 8011e3e:	0589      	lsls	r1, r1, #22
 8011e40:	f7ee fb58 	bl	80004f4 <__aeabi_fcmpgt>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d007      	beq.n	8011e58 <asinf+0x38>
 8011e48:	f001 fb8a 	bl	8013560 <__errno>
 8011e4c:	2321      	movs	r3, #33	@ 0x21
 8011e4e:	6003      	str	r3, [r0, #0]
 8011e50:	4802      	ldr	r0, [pc, #8]	@ (8011e5c <asinf+0x3c>)
 8011e52:	f000 f88f 	bl	8011f74 <nanf>
 8011e56:	1c04      	adds	r4, r0, #0
 8011e58:	1c20      	adds	r0, r4, #0
 8011e5a:	bd70      	pop	{r4, r5, r6, pc}
 8011e5c:	08017a95 	.word	0x08017a95

08011e60 <sqrtf>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	1c05      	adds	r5, r0, #0
 8011e64:	f000 f8d2 	bl	801200c <__ieee754_sqrtf>
 8011e68:	1c29      	adds	r1, r5, #0
 8011e6a:	1c04      	adds	r4, r0, #0
 8011e6c:	1c28      	adds	r0, r5, #0
 8011e6e:	f7ef fb19 	bl	80014a4 <__aeabi_fcmpun>
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d10e      	bne.n	8011e94 <sqrtf+0x34>
 8011e76:	2100      	movs	r1, #0
 8011e78:	1c28      	adds	r0, r5, #0
 8011e7a:	f7ee fb27 	bl	80004cc <__aeabi_fcmplt>
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d008      	beq.n	8011e94 <sqrtf+0x34>
 8011e82:	f001 fb6d 	bl	8013560 <__errno>
 8011e86:	2321      	movs	r3, #33	@ 0x21
 8011e88:	2100      	movs	r1, #0
 8011e8a:	6003      	str	r3, [r0, #0]
 8011e8c:	1c08      	adds	r0, r1, #0
 8011e8e:	f7ee fe41 	bl	8000b14 <__aeabi_fdiv>
 8011e92:	1c04      	adds	r4, r0, #0
 8011e94:	1c20      	adds	r0, r4, #0
 8011e96:	bd70      	pop	{r4, r5, r6, pc}

08011e98 <fabsf>:
 8011e98:	0040      	lsls	r0, r0, #1
 8011e9a:	0840      	lsrs	r0, r0, #1
 8011e9c:	4770      	bx	lr

08011e9e <fmax>:
 8011e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea0:	0004      	movs	r4, r0
 8011ea2:	000d      	movs	r5, r1
 8011ea4:	0016      	movs	r6, r2
 8011ea6:	001f      	movs	r7, r3
 8011ea8:	f000 f834 	bl	8011f14 <__fpclassifyd>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d104      	bne.n	8011eba <fmax+0x1c>
 8011eb0:	0034      	movs	r4, r6
 8011eb2:	003d      	movs	r5, r7
 8011eb4:	0029      	movs	r1, r5
 8011eb6:	0020      	movs	r0, r4
 8011eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eba:	0030      	movs	r0, r6
 8011ebc:	0039      	movs	r1, r7
 8011ebe:	f000 f829 	bl	8011f14 <__fpclassifyd>
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	d0f6      	beq.n	8011eb4 <fmax+0x16>
 8011ec6:	0032      	movs	r2, r6
 8011ec8:	003b      	movs	r3, r7
 8011eca:	0020      	movs	r0, r4
 8011ecc:	0029      	movs	r1, r5
 8011ece:	f7ee fad7 	bl	8000480 <__aeabi_dcmpgt>
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d0ec      	beq.n	8011eb0 <fmax+0x12>
 8011ed6:	e7ed      	b.n	8011eb4 <fmax+0x16>

08011ed8 <fmin>:
 8011ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eda:	0004      	movs	r4, r0
 8011edc:	000d      	movs	r5, r1
 8011ede:	0016      	movs	r6, r2
 8011ee0:	001f      	movs	r7, r3
 8011ee2:	f000 f817 	bl	8011f14 <__fpclassifyd>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d104      	bne.n	8011ef4 <fmin+0x1c>
 8011eea:	0034      	movs	r4, r6
 8011eec:	003d      	movs	r5, r7
 8011eee:	0029      	movs	r1, r5
 8011ef0:	0020      	movs	r0, r4
 8011ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ef4:	0030      	movs	r0, r6
 8011ef6:	0039      	movs	r1, r7
 8011ef8:	f000 f80c 	bl	8011f14 <__fpclassifyd>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d0f6      	beq.n	8011eee <fmin+0x16>
 8011f00:	0032      	movs	r2, r6
 8011f02:	003b      	movs	r3, r7
 8011f04:	0020      	movs	r0, r4
 8011f06:	0029      	movs	r1, r5
 8011f08:	f7ee faa6 	bl	8000458 <__aeabi_dcmplt>
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d0ec      	beq.n	8011eea <fmin+0x12>
 8011f10:	e7ed      	b.n	8011eee <fmin+0x16>
	...

08011f14 <__fpclassifyd>:
 8011f14:	000b      	movs	r3, r1
 8011f16:	b570      	push	{r4, r5, r6, lr}
 8011f18:	0004      	movs	r4, r0
 8011f1a:	0002      	movs	r2, r0
 8011f1c:	0001      	movs	r1, r0
 8011f1e:	431c      	orrs	r4, r3
 8011f20:	2002      	movs	r0, #2
 8011f22:	2c00      	cmp	r4, #0
 8011f24:	d006      	beq.n	8011f34 <__fpclassifyd+0x20>
 8011f26:	2080      	movs	r0, #128	@ 0x80
 8011f28:	0600      	lsls	r0, r0, #24
 8011f2a:	4283      	cmp	r3, r0
 8011f2c:	d103      	bne.n	8011f36 <__fpclassifyd+0x22>
 8011f2e:	1e4b      	subs	r3, r1, #1
 8011f30:	4199      	sbcs	r1, r3
 8011f32:	1c88      	adds	r0, r1, #2
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
 8011f36:	480c      	ldr	r0, [pc, #48]	@ (8011f68 <__fpclassifyd+0x54>)
 8011f38:	0059      	lsls	r1, r3, #1
 8011f3a:	0849      	lsrs	r1, r1, #1
 8011f3c:	4c0b      	ldr	r4, [pc, #44]	@ (8011f6c <__fpclassifyd+0x58>)
 8011f3e:	180e      	adds	r6, r1, r0
 8011f40:	2004      	movs	r0, #4
 8011f42:	42a6      	cmp	r6, r4
 8011f44:	d9f6      	bls.n	8011f34 <__fpclassifyd+0x20>
 8011f46:	2480      	movs	r4, #128	@ 0x80
 8011f48:	3801      	subs	r0, #1
 8011f4a:	0364      	lsls	r4, r4, #13
 8011f4c:	42a3      	cmp	r3, r4
 8011f4e:	d3f1      	bcc.n	8011f34 <__fpclassifyd+0x20>
 8011f50:	2580      	movs	r5, #128	@ 0x80
 8011f52:	062d      	lsls	r5, r5, #24
 8011f54:	195d      	adds	r5, r3, r5
 8011f56:	42a5      	cmp	r5, r4
 8011f58:	d3ec      	bcc.n	8011f34 <__fpclassifyd+0x20>
 8011f5a:	4c05      	ldr	r4, [pc, #20]	@ (8011f70 <__fpclassifyd+0x5c>)
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	42a1      	cmp	r1, r4
 8011f60:	d1e8      	bne.n	8011f34 <__fpclassifyd+0x20>
 8011f62:	4250      	negs	r0, r2
 8011f64:	4150      	adcs	r0, r2
 8011f66:	e7e5      	b.n	8011f34 <__fpclassifyd+0x20>
 8011f68:	fff00000 	.word	0xfff00000
 8011f6c:	7fdfffff 	.word	0x7fdfffff
 8011f70:	7ff00000 	.word	0x7ff00000

08011f74 <nanf>:
 8011f74:	4800      	ldr	r0, [pc, #0]	@ (8011f78 <nanf+0x4>)
 8011f76:	4770      	bx	lr
 8011f78:	7fc00000 	.word	0x7fc00000

08011f7c <fmaxf>:
 8011f7c:	b570      	push	{r4, r5, r6, lr}
 8011f7e:	1c04      	adds	r4, r0, #0
 8011f80:	1c0d      	adds	r5, r1, #0
 8011f82:	f000 f827 	bl	8011fd4 <__fpclassifyf>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d102      	bne.n	8011f90 <fmaxf+0x14>
 8011f8a:	1c2c      	adds	r4, r5, #0
 8011f8c:	1c20      	adds	r0, r4, #0
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	1c28      	adds	r0, r5, #0
 8011f92:	f000 f81f 	bl	8011fd4 <__fpclassifyf>
 8011f96:	2800      	cmp	r0, #0
 8011f98:	d0f8      	beq.n	8011f8c <fmaxf+0x10>
 8011f9a:	1c29      	adds	r1, r5, #0
 8011f9c:	1c20      	adds	r0, r4, #0
 8011f9e:	f7ee faa9 	bl	80004f4 <__aeabi_fcmpgt>
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	d0f1      	beq.n	8011f8a <fmaxf+0xe>
 8011fa6:	e7f1      	b.n	8011f8c <fmaxf+0x10>

08011fa8 <fminf>:
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	1c04      	adds	r4, r0, #0
 8011fac:	1c0d      	adds	r5, r1, #0
 8011fae:	f000 f811 	bl	8011fd4 <__fpclassifyf>
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	d102      	bne.n	8011fbc <fminf+0x14>
 8011fb6:	1c2c      	adds	r4, r5, #0
 8011fb8:	1c20      	adds	r0, r4, #0
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	1c28      	adds	r0, r5, #0
 8011fbe:	f000 f809 	bl	8011fd4 <__fpclassifyf>
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d0f8      	beq.n	8011fb8 <fminf+0x10>
 8011fc6:	1c29      	adds	r1, r5, #0
 8011fc8:	1c20      	adds	r0, r4, #0
 8011fca:	f7ee fa7f 	bl	80004cc <__aeabi_fcmplt>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d0f1      	beq.n	8011fb6 <fminf+0xe>
 8011fd2:	e7f1      	b.n	8011fb8 <fminf+0x10>

08011fd4 <__fpclassifyf>:
 8011fd4:	0043      	lsls	r3, r0, #1
 8011fd6:	085a      	lsrs	r2, r3, #1
 8011fd8:	2002      	movs	r0, #2
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00f      	beq.n	8011ffe <__fpclassifyf+0x2a>
 8011fde:	21fe      	movs	r1, #254	@ 0xfe
 8011fe0:	4b07      	ldr	r3, [pc, #28]	@ (8012000 <__fpclassifyf+0x2c>)
 8011fe2:	05c9      	lsls	r1, r1, #23
 8011fe4:	18d3      	adds	r3, r2, r3
 8011fe6:	1800      	adds	r0, r0, r0
 8011fe8:	428b      	cmp	r3, r1
 8011fea:	d308      	bcc.n	8011ffe <__fpclassifyf+0x2a>
 8011fec:	4905      	ldr	r1, [pc, #20]	@ (8012004 <__fpclassifyf+0x30>)
 8011fee:	1e53      	subs	r3, r2, #1
 8011ff0:	3801      	subs	r0, #1
 8011ff2:	428b      	cmp	r3, r1
 8011ff4:	d903      	bls.n	8011ffe <__fpclassifyf+0x2a>
 8011ff6:	4b04      	ldr	r3, [pc, #16]	@ (8012008 <__fpclassifyf+0x34>)
 8011ff8:	18d0      	adds	r0, r2, r3
 8011ffa:	4243      	negs	r3, r0
 8011ffc:	4158      	adcs	r0, r3
 8011ffe:	4770      	bx	lr
 8012000:	ff800000 	.word	0xff800000
 8012004:	007ffffe 	.word	0x007ffffe
 8012008:	80800000 	.word	0x80800000

0801200c <__ieee754_sqrtf>:
 801200c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801200e:	0003      	movs	r3, r0
 8012010:	0042      	lsls	r2, r0, #1
 8012012:	1c04      	adds	r4, r0, #0
 8012014:	20ff      	movs	r0, #255	@ 0xff
 8012016:	0852      	lsrs	r2, r2, #1
 8012018:	05c0      	lsls	r0, r0, #23
 801201a:	4282      	cmp	r2, r0
 801201c:	d30a      	bcc.n	8012034 <__ieee754_sqrtf+0x28>
 801201e:	1c21      	adds	r1, r4, #0
 8012020:	1c20      	adds	r0, r4, #0
 8012022:	f7ee ff5d 	bl	8000ee0 <__aeabi_fmul>
 8012026:	1c01      	adds	r1, r0, #0
 8012028:	1c20      	adds	r0, r4, #0
 801202a:	f7ee fbe9 	bl	8000800 <__aeabi_fadd>
 801202e:	1c04      	adds	r4, r0, #0
 8012030:	1c20      	adds	r0, r4, #0
 8012032:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012034:	2a00      	cmp	r2, #0
 8012036:	d0fb      	beq.n	8012030 <__ieee754_sqrtf+0x24>
 8012038:	2c00      	cmp	r4, #0
 801203a:	da07      	bge.n	801204c <__ieee754_sqrtf+0x40>
 801203c:	1c21      	adds	r1, r4, #0
 801203e:	1c20      	adds	r0, r4, #0
 8012040:	f7ef f88c 	bl	800115c <__aeabi_fsub>
 8012044:	1c01      	adds	r1, r0, #0
 8012046:	f7ee fd65 	bl	8000b14 <__aeabi_fdiv>
 801204a:	e7f0      	b.n	801202e <__ieee754_sqrtf+0x22>
 801204c:	0022      	movs	r2, r4
 801204e:	15e1      	asrs	r1, r4, #23
 8012050:	4002      	ands	r2, r0
 8012052:	4204      	tst	r4, r0
 8012054:	d046      	beq.n	80120e4 <__ieee754_sqrtf+0xd8>
 8012056:	2280      	movs	r2, #128	@ 0x80
 8012058:	000f      	movs	r7, r1
 801205a:	025b      	lsls	r3, r3, #9
 801205c:	0a5b      	lsrs	r3, r3, #9
 801205e:	0412      	lsls	r2, r2, #16
 8012060:	3f7f      	subs	r7, #127	@ 0x7f
 8012062:	4313      	orrs	r3, r2
 8012064:	07c9      	lsls	r1, r1, #31
 8012066:	d400      	bmi.n	801206a <__ieee754_sqrtf+0x5e>
 8012068:	005b      	lsls	r3, r3, #1
 801206a:	2400      	movs	r4, #0
 801206c:	2180      	movs	r1, #128	@ 0x80
 801206e:	2019      	movs	r0, #25
 8012070:	0026      	movs	r6, r4
 8012072:	107f      	asrs	r7, r7, #1
 8012074:	005b      	lsls	r3, r3, #1
 8012076:	0449      	lsls	r1, r1, #17
 8012078:	1875      	adds	r5, r6, r1
 801207a:	001a      	movs	r2, r3
 801207c:	429d      	cmp	r5, r3
 801207e:	dc02      	bgt.n	8012086 <__ieee754_sqrtf+0x7a>
 8012080:	186e      	adds	r6, r5, r1
 8012082:	1b5a      	subs	r2, r3, r5
 8012084:	1864      	adds	r4, r4, r1
 8012086:	3801      	subs	r0, #1
 8012088:	0053      	lsls	r3, r2, #1
 801208a:	0849      	lsrs	r1, r1, #1
 801208c:	2800      	cmp	r0, #0
 801208e:	d1f3      	bne.n	8012078 <__ieee754_sqrtf+0x6c>
 8012090:	2a00      	cmp	r2, #0
 8012092:	d019      	beq.n	80120c8 <__ieee754_sqrtf+0xbc>
 8012094:	4d17      	ldr	r5, [pc, #92]	@ (80120f4 <__ieee754_sqrtf+0xe8>)
 8012096:	4e18      	ldr	r6, [pc, #96]	@ (80120f8 <__ieee754_sqrtf+0xec>)
 8012098:	6828      	ldr	r0, [r5, #0]
 801209a:	6831      	ldr	r1, [r6, #0]
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	f7ef f85c 	bl	800115c <__aeabi_fsub>
 80120a4:	1c01      	adds	r1, r0, #0
 80120a6:	9801      	ldr	r0, [sp, #4]
 80120a8:	f7ee fa1a 	bl	80004e0 <__aeabi_fcmple>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d00b      	beq.n	80120c8 <__ieee754_sqrtf+0xbc>
 80120b0:	6828      	ldr	r0, [r5, #0]
 80120b2:	6831      	ldr	r1, [r6, #0]
 80120b4:	f7ee fba4 	bl	8000800 <__aeabi_fadd>
 80120b8:	682d      	ldr	r5, [r5, #0]
 80120ba:	1c01      	adds	r1, r0, #0
 80120bc:	1c28      	adds	r0, r5, #0
 80120be:	f7ee fa05 	bl	80004cc <__aeabi_fcmplt>
 80120c2:	2800      	cmp	r0, #0
 80120c4:	d011      	beq.n	80120ea <__ieee754_sqrtf+0xde>
 80120c6:	3402      	adds	r4, #2
 80120c8:	23fc      	movs	r3, #252	@ 0xfc
 80120ca:	1064      	asrs	r4, r4, #1
 80120cc:	059b      	lsls	r3, r3, #22
 80120ce:	18e3      	adds	r3, r4, r3
 80120d0:	05fc      	lsls	r4, r7, #23
 80120d2:	18e4      	adds	r4, r4, r3
 80120d4:	e7ac      	b.n	8012030 <__ieee754_sqrtf+0x24>
 80120d6:	005b      	lsls	r3, r3, #1
 80120d8:	3201      	adds	r2, #1
 80120da:	4203      	tst	r3, r0
 80120dc:	d0fb      	beq.n	80120d6 <__ieee754_sqrtf+0xca>
 80120de:	3a01      	subs	r2, #1
 80120e0:	1a89      	subs	r1, r1, r2
 80120e2:	e7b8      	b.n	8012056 <__ieee754_sqrtf+0x4a>
 80120e4:	2080      	movs	r0, #128	@ 0x80
 80120e6:	0400      	lsls	r0, r0, #16
 80120e8:	e7f7      	b.n	80120da <__ieee754_sqrtf+0xce>
 80120ea:	2301      	movs	r3, #1
 80120ec:	3401      	adds	r4, #1
 80120ee:	439c      	bics	r4, r3
 80120f0:	e7ea      	b.n	80120c8 <__ieee754_sqrtf+0xbc>
 80120f2:	46c0      	nop			@ (mov r8, r8)
 80120f4:	20000084 	.word	0x20000084
 80120f8:	20000080 	.word	0x20000080

080120fc <roundf>:
 80120fc:	0dc3      	lsrs	r3, r0, #23
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	3b7f      	subs	r3, #127	@ 0x7f
 8012102:	0002      	movs	r2, r0
 8012104:	b510      	push	{r4, lr}
 8012106:	2b16      	cmp	r3, #22
 8012108:	dc13      	bgt.n	8012132 <roundf+0x36>
 801210a:	2b00      	cmp	r3, #0
 801210c:	da07      	bge.n	801211e <roundf+0x22>
 801210e:	0fc2      	lsrs	r2, r0, #31
 8012110:	07d0      	lsls	r0, r2, #31
 8012112:	3301      	adds	r3, #1
 8012114:	d102      	bne.n	801211c <roundf+0x20>
 8012116:	23fe      	movs	r3, #254	@ 0xfe
 8012118:	059b      	lsls	r3, r3, #22
 801211a:	4318      	orrs	r0, r3
 801211c:	bd10      	pop	{r4, pc}
 801211e:	4908      	ldr	r1, [pc, #32]	@ (8012140 <roundf+0x44>)
 8012120:	4119      	asrs	r1, r3
 8012122:	4208      	tst	r0, r1
 8012124:	d0fa      	beq.n	801211c <roundf+0x20>
 8012126:	2080      	movs	r0, #128	@ 0x80
 8012128:	03c0      	lsls	r0, r0, #15
 801212a:	4118      	asrs	r0, r3
 801212c:	1880      	adds	r0, r0, r2
 801212e:	4388      	bics	r0, r1
 8012130:	e7f4      	b.n	801211c <roundf+0x20>
 8012132:	2b80      	cmp	r3, #128	@ 0x80
 8012134:	d1f2      	bne.n	801211c <roundf+0x20>
 8012136:	1c01      	adds	r1, r0, #0
 8012138:	f7ee fb62 	bl	8000800 <__aeabi_fadd>
 801213c:	e7ee      	b.n	801211c <roundf+0x20>
 801213e:	46c0      	nop			@ (mov r8, r8)
 8012140:	007fffff 	.word	0x007fffff

08012144 <__ieee754_asinf>:
 8012144:	23fe      	movs	r3, #254	@ 0xfe
 8012146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012148:	0046      	lsls	r6, r0, #1
 801214a:	b085      	sub	sp, #20
 801214c:	1c04      	adds	r4, r0, #0
 801214e:	9002      	str	r0, [sp, #8]
 8012150:	0876      	lsrs	r6, r6, #1
 8012152:	059b      	lsls	r3, r3, #22
 8012154:	429e      	cmp	r6, r3
 8012156:	d10c      	bne.n	8012172 <__ieee754_asinf+0x2e>
 8012158:	498e      	ldr	r1, [pc, #568]	@ (8012394 <__ieee754_asinf+0x250>)
 801215a:	f7ee fec1 	bl	8000ee0 <__aeabi_fmul>
 801215e:	498e      	ldr	r1, [pc, #568]	@ (8012398 <__ieee754_asinf+0x254>)
 8012160:	1c05      	adds	r5, r0, #0
 8012162:	1c20      	adds	r0, r4, #0
 8012164:	f7ee febc 	bl	8000ee0 <__aeabi_fmul>
 8012168:	1c01      	adds	r1, r0, #0
 801216a:	1c28      	adds	r0, r5, #0
 801216c:	f7ee fb48 	bl	8000800 <__aeabi_fadd>
 8012170:	e007      	b.n	8012182 <__ieee754_asinf+0x3e>
 8012172:	429e      	cmp	r6, r3
 8012174:	d909      	bls.n	801218a <__ieee754_asinf+0x46>
 8012176:	1c01      	adds	r1, r0, #0
 8012178:	f7ee fff0 	bl	800115c <__aeabi_fsub>
 801217c:	1c01      	adds	r1, r0, #0
 801217e:	f7ee fcc9 	bl	8000b14 <__aeabi_fdiv>
 8012182:	1c04      	adds	r4, r0, #0
 8012184:	1c20      	adds	r0, r4, #0
 8012186:	b005      	add	sp, #20
 8012188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801218a:	23fc      	movs	r3, #252	@ 0xfc
 801218c:	059b      	lsls	r3, r3, #22
 801218e:	429e      	cmp	r6, r3
 8012190:	d20c      	bcs.n	80121ac <__ieee754_asinf+0x68>
 8012192:	23c8      	movs	r3, #200	@ 0xc8
 8012194:	059b      	lsls	r3, r3, #22
 8012196:	429e      	cmp	r6, r3
 8012198:	d276      	bcs.n	8012288 <__ieee754_asinf+0x144>
 801219a:	4980      	ldr	r1, [pc, #512]	@ (801239c <__ieee754_asinf+0x258>)
 801219c:	f7ee fb30 	bl	8000800 <__aeabi_fadd>
 80121a0:	21fe      	movs	r1, #254	@ 0xfe
 80121a2:	0589      	lsls	r1, r1, #22
 80121a4:	f7ee f9a6 	bl	80004f4 <__aeabi_fcmpgt>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d1eb      	bne.n	8012184 <__ieee754_asinf+0x40>
 80121ac:	1c20      	adds	r0, r4, #0
 80121ae:	f7ff fe73 	bl	8011e98 <fabsf>
 80121b2:	1c01      	adds	r1, r0, #0
 80121b4:	20fe      	movs	r0, #254	@ 0xfe
 80121b6:	0580      	lsls	r0, r0, #22
 80121b8:	f7ee ffd0 	bl	800115c <__aeabi_fsub>
 80121bc:	21fc      	movs	r1, #252	@ 0xfc
 80121be:	0589      	lsls	r1, r1, #22
 80121c0:	f7ee fe8e 	bl	8000ee0 <__aeabi_fmul>
 80121c4:	4976      	ldr	r1, [pc, #472]	@ (80123a0 <__ieee754_asinf+0x25c>)
 80121c6:	1c04      	adds	r4, r0, #0
 80121c8:	f7ee fe8a 	bl	8000ee0 <__aeabi_fmul>
 80121cc:	4975      	ldr	r1, [pc, #468]	@ (80123a4 <__ieee754_asinf+0x260>)
 80121ce:	f7ee fb17 	bl	8000800 <__aeabi_fadd>
 80121d2:	1c21      	adds	r1, r4, #0
 80121d4:	f7ee fe84 	bl	8000ee0 <__aeabi_fmul>
 80121d8:	4973      	ldr	r1, [pc, #460]	@ (80123a8 <__ieee754_asinf+0x264>)
 80121da:	f7ee ffbf 	bl	800115c <__aeabi_fsub>
 80121de:	1c21      	adds	r1, r4, #0
 80121e0:	f7ee fe7e 	bl	8000ee0 <__aeabi_fmul>
 80121e4:	4971      	ldr	r1, [pc, #452]	@ (80123ac <__ieee754_asinf+0x268>)
 80121e6:	f7ee fb0b 	bl	8000800 <__aeabi_fadd>
 80121ea:	1c21      	adds	r1, r4, #0
 80121ec:	f7ee fe78 	bl	8000ee0 <__aeabi_fmul>
 80121f0:	496f      	ldr	r1, [pc, #444]	@ (80123b0 <__ieee754_asinf+0x26c>)
 80121f2:	f7ee ffb3 	bl	800115c <__aeabi_fsub>
 80121f6:	1c21      	adds	r1, r4, #0
 80121f8:	f7ee fe72 	bl	8000ee0 <__aeabi_fmul>
 80121fc:	496d      	ldr	r1, [pc, #436]	@ (80123b4 <__ieee754_asinf+0x270>)
 80121fe:	f7ee faff 	bl	8000800 <__aeabi_fadd>
 8012202:	1c21      	adds	r1, r4, #0
 8012204:	f7ee fe6c 	bl	8000ee0 <__aeabi_fmul>
 8012208:	496b      	ldr	r1, [pc, #428]	@ (80123b8 <__ieee754_asinf+0x274>)
 801220a:	9001      	str	r0, [sp, #4]
 801220c:	1c20      	adds	r0, r4, #0
 801220e:	f7ee fe67 	bl	8000ee0 <__aeabi_fmul>
 8012212:	496a      	ldr	r1, [pc, #424]	@ (80123bc <__ieee754_asinf+0x278>)
 8012214:	f7ee ffa2 	bl	800115c <__aeabi_fsub>
 8012218:	1c21      	adds	r1, r4, #0
 801221a:	f7ee fe61 	bl	8000ee0 <__aeabi_fmul>
 801221e:	4968      	ldr	r1, [pc, #416]	@ (80123c0 <__ieee754_asinf+0x27c>)
 8012220:	f7ee faee 	bl	8000800 <__aeabi_fadd>
 8012224:	1c21      	adds	r1, r4, #0
 8012226:	f7ee fe5b 	bl	8000ee0 <__aeabi_fmul>
 801222a:	4966      	ldr	r1, [pc, #408]	@ (80123c4 <__ieee754_asinf+0x280>)
 801222c:	f7ee ff96 	bl	800115c <__aeabi_fsub>
 8012230:	1c21      	adds	r1, r4, #0
 8012232:	f7ee fe55 	bl	8000ee0 <__aeabi_fmul>
 8012236:	21fe      	movs	r1, #254	@ 0xfe
 8012238:	0589      	lsls	r1, r1, #22
 801223a:	f7ee fae1 	bl	8000800 <__aeabi_fadd>
 801223e:	1c07      	adds	r7, r0, #0
 8012240:	1c20      	adds	r0, r4, #0
 8012242:	f7ff fee3 	bl	801200c <__ieee754_sqrtf>
 8012246:	4b60      	ldr	r3, [pc, #384]	@ (80123c8 <__ieee754_asinf+0x284>)
 8012248:	1c05      	adds	r5, r0, #0
 801224a:	429e      	cmp	r6, r3
 801224c:	d966      	bls.n	801231c <__ieee754_asinf+0x1d8>
 801224e:	1c39      	adds	r1, r7, #0
 8012250:	9801      	ldr	r0, [sp, #4]
 8012252:	f7ee fc5f 	bl	8000b14 <__aeabi_fdiv>
 8012256:	1c29      	adds	r1, r5, #0
 8012258:	f7ee fe42 	bl	8000ee0 <__aeabi_fmul>
 801225c:	1c29      	adds	r1, r5, #0
 801225e:	f7ee facf 	bl	8000800 <__aeabi_fadd>
 8012262:	1c01      	adds	r1, r0, #0
 8012264:	f7ee facc 	bl	8000800 <__aeabi_fadd>
 8012268:	4958      	ldr	r1, [pc, #352]	@ (80123cc <__ieee754_asinf+0x288>)
 801226a:	f7ee fac9 	bl	8000800 <__aeabi_fadd>
 801226e:	1c01      	adds	r1, r0, #0
 8012270:	4848      	ldr	r0, [pc, #288]	@ (8012394 <__ieee754_asinf+0x250>)
 8012272:	f7ee ff73 	bl	800115c <__aeabi_fsub>
 8012276:	9b02      	ldr	r3, [sp, #8]
 8012278:	1c04      	adds	r4, r0, #0
 801227a:	2b00      	cmp	r3, #0
 801227c:	dd00      	ble.n	8012280 <__ieee754_asinf+0x13c>
 801227e:	e781      	b.n	8012184 <__ieee754_asinf+0x40>
 8012280:	2380      	movs	r3, #128	@ 0x80
 8012282:	061b      	lsls	r3, r3, #24
 8012284:	18c4      	adds	r4, r0, r3
 8012286:	e77d      	b.n	8012184 <__ieee754_asinf+0x40>
 8012288:	1c01      	adds	r1, r0, #0
 801228a:	f7ee fe29 	bl	8000ee0 <__aeabi_fmul>
 801228e:	4944      	ldr	r1, [pc, #272]	@ (80123a0 <__ieee754_asinf+0x25c>)
 8012290:	1c05      	adds	r5, r0, #0
 8012292:	f7ee fe25 	bl	8000ee0 <__aeabi_fmul>
 8012296:	4943      	ldr	r1, [pc, #268]	@ (80123a4 <__ieee754_asinf+0x260>)
 8012298:	f7ee fab2 	bl	8000800 <__aeabi_fadd>
 801229c:	1c29      	adds	r1, r5, #0
 801229e:	f7ee fe1f 	bl	8000ee0 <__aeabi_fmul>
 80122a2:	4941      	ldr	r1, [pc, #260]	@ (80123a8 <__ieee754_asinf+0x264>)
 80122a4:	f7ee ff5a 	bl	800115c <__aeabi_fsub>
 80122a8:	1c29      	adds	r1, r5, #0
 80122aa:	f7ee fe19 	bl	8000ee0 <__aeabi_fmul>
 80122ae:	493f      	ldr	r1, [pc, #252]	@ (80123ac <__ieee754_asinf+0x268>)
 80122b0:	f7ee faa6 	bl	8000800 <__aeabi_fadd>
 80122b4:	1c29      	adds	r1, r5, #0
 80122b6:	f7ee fe13 	bl	8000ee0 <__aeabi_fmul>
 80122ba:	493d      	ldr	r1, [pc, #244]	@ (80123b0 <__ieee754_asinf+0x26c>)
 80122bc:	f7ee ff4e 	bl	800115c <__aeabi_fsub>
 80122c0:	1c29      	adds	r1, r5, #0
 80122c2:	f7ee fe0d 	bl	8000ee0 <__aeabi_fmul>
 80122c6:	493b      	ldr	r1, [pc, #236]	@ (80123b4 <__ieee754_asinf+0x270>)
 80122c8:	f7ee fa9a 	bl	8000800 <__aeabi_fadd>
 80122cc:	1c29      	adds	r1, r5, #0
 80122ce:	f7ee fe07 	bl	8000ee0 <__aeabi_fmul>
 80122d2:	4939      	ldr	r1, [pc, #228]	@ (80123b8 <__ieee754_asinf+0x274>)
 80122d4:	1c06      	adds	r6, r0, #0
 80122d6:	1c28      	adds	r0, r5, #0
 80122d8:	f7ee fe02 	bl	8000ee0 <__aeabi_fmul>
 80122dc:	4937      	ldr	r1, [pc, #220]	@ (80123bc <__ieee754_asinf+0x278>)
 80122de:	f7ee ff3d 	bl	800115c <__aeabi_fsub>
 80122e2:	1c29      	adds	r1, r5, #0
 80122e4:	f7ee fdfc 	bl	8000ee0 <__aeabi_fmul>
 80122e8:	4935      	ldr	r1, [pc, #212]	@ (80123c0 <__ieee754_asinf+0x27c>)
 80122ea:	f7ee fa89 	bl	8000800 <__aeabi_fadd>
 80122ee:	1c29      	adds	r1, r5, #0
 80122f0:	f7ee fdf6 	bl	8000ee0 <__aeabi_fmul>
 80122f4:	4933      	ldr	r1, [pc, #204]	@ (80123c4 <__ieee754_asinf+0x280>)
 80122f6:	f7ee ff31 	bl	800115c <__aeabi_fsub>
 80122fa:	1c29      	adds	r1, r5, #0
 80122fc:	f7ee fdf0 	bl	8000ee0 <__aeabi_fmul>
 8012300:	21fe      	movs	r1, #254	@ 0xfe
 8012302:	0589      	lsls	r1, r1, #22
 8012304:	f7ee fa7c 	bl	8000800 <__aeabi_fadd>
 8012308:	1c01      	adds	r1, r0, #0
 801230a:	1c30      	adds	r0, r6, #0
 801230c:	f7ee fc02 	bl	8000b14 <__aeabi_fdiv>
 8012310:	1c21      	adds	r1, r4, #0
 8012312:	f7ee fde5 	bl	8000ee0 <__aeabi_fmul>
 8012316:	1c01      	adds	r1, r0, #0
 8012318:	1c20      	adds	r0, r4, #0
 801231a:	e727      	b.n	801216c <__ieee754_asinf+0x28>
 801231c:	1c01      	adds	r1, r0, #0
 801231e:	0b06      	lsrs	r6, r0, #12
 8012320:	f7ee fa6e 	bl	8000800 <__aeabi_fadd>
 8012324:	1c39      	adds	r1, r7, #0
 8012326:	9003      	str	r0, [sp, #12]
 8012328:	9801      	ldr	r0, [sp, #4]
 801232a:	f7ee fbf3 	bl	8000b14 <__aeabi_fdiv>
 801232e:	1c01      	adds	r1, r0, #0
 8012330:	9803      	ldr	r0, [sp, #12]
 8012332:	f7ee fdd5 	bl	8000ee0 <__aeabi_fmul>
 8012336:	0336      	lsls	r6, r6, #12
 8012338:	1c07      	adds	r7, r0, #0
 801233a:	1c31      	adds	r1, r6, #0
 801233c:	1c30      	adds	r0, r6, #0
 801233e:	f7ee fdcf 	bl	8000ee0 <__aeabi_fmul>
 8012342:	1c01      	adds	r1, r0, #0
 8012344:	1c20      	adds	r0, r4, #0
 8012346:	f7ee ff09 	bl	800115c <__aeabi_fsub>
 801234a:	1c31      	adds	r1, r6, #0
 801234c:	1c04      	adds	r4, r0, #0
 801234e:	1c28      	adds	r0, r5, #0
 8012350:	f7ee fa56 	bl	8000800 <__aeabi_fadd>
 8012354:	1c01      	adds	r1, r0, #0
 8012356:	1c20      	adds	r0, r4, #0
 8012358:	f7ee fbdc 	bl	8000b14 <__aeabi_fdiv>
 801235c:	1c01      	adds	r1, r0, #0
 801235e:	f7ee fa4f 	bl	8000800 <__aeabi_fadd>
 8012362:	1c01      	adds	r1, r0, #0
 8012364:	480c      	ldr	r0, [pc, #48]	@ (8012398 <__ieee754_asinf+0x254>)
 8012366:	f7ee fef9 	bl	800115c <__aeabi_fsub>
 801236a:	1c01      	adds	r1, r0, #0
 801236c:	1c38      	adds	r0, r7, #0
 801236e:	f7ee fef5 	bl	800115c <__aeabi_fsub>
 8012372:	1c31      	adds	r1, r6, #0
 8012374:	1c04      	adds	r4, r0, #0
 8012376:	1c30      	adds	r0, r6, #0
 8012378:	f7ee fa42 	bl	8000800 <__aeabi_fadd>
 801237c:	1c01      	adds	r1, r0, #0
 801237e:	4814      	ldr	r0, [pc, #80]	@ (80123d0 <__ieee754_asinf+0x28c>)
 8012380:	f7ee feec 	bl	800115c <__aeabi_fsub>
 8012384:	1c01      	adds	r1, r0, #0
 8012386:	1c20      	adds	r0, r4, #0
 8012388:	f7ee fee8 	bl	800115c <__aeabi_fsub>
 801238c:	1c01      	adds	r1, r0, #0
 801238e:	4810      	ldr	r0, [pc, #64]	@ (80123d0 <__ieee754_asinf+0x28c>)
 8012390:	e76f      	b.n	8012272 <__ieee754_asinf+0x12e>
 8012392:	46c0      	nop			@ (mov r8, r8)
 8012394:	3fc90fdb 	.word	0x3fc90fdb
 8012398:	b33bbd2e 	.word	0xb33bbd2e
 801239c:	7149f2ca 	.word	0x7149f2ca
 80123a0:	3811ef08 	.word	0x3811ef08
 80123a4:	3a4f7f04 	.word	0x3a4f7f04
 80123a8:	3d241146 	.word	0x3d241146
 80123ac:	3e4e0aa8 	.word	0x3e4e0aa8
 80123b0:	3ea6b090 	.word	0x3ea6b090
 80123b4:	3e2aaaab 	.word	0x3e2aaaab
 80123b8:	3d9dc62e 	.word	0x3d9dc62e
 80123bc:	3f303361 	.word	0x3f303361
 80123c0:	4001572d 	.word	0x4001572d
 80123c4:	4019d139 	.word	0x4019d139
 80123c8:	3f799999 	.word	0x3f799999
 80123cc:	333bbd2e 	.word	0x333bbd2e
 80123d0:	3f490fdb 	.word	0x3f490fdb

080123d4 <__cvt>:
 80123d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123d6:	001f      	movs	r7, r3
 80123d8:	2300      	movs	r3, #0
 80123da:	0016      	movs	r6, r2
 80123dc:	b08b      	sub	sp, #44	@ 0x2c
 80123de:	429f      	cmp	r7, r3
 80123e0:	da04      	bge.n	80123ec <__cvt+0x18>
 80123e2:	2180      	movs	r1, #128	@ 0x80
 80123e4:	0609      	lsls	r1, r1, #24
 80123e6:	187b      	adds	r3, r7, r1
 80123e8:	001f      	movs	r7, r3
 80123ea:	232d      	movs	r3, #45	@ 0x2d
 80123ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80123ee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80123f0:	7013      	strb	r3, [r2, #0]
 80123f2:	2320      	movs	r3, #32
 80123f4:	2203      	movs	r2, #3
 80123f6:	439d      	bics	r5, r3
 80123f8:	2d46      	cmp	r5, #70	@ 0x46
 80123fa:	d007      	beq.n	801240c <__cvt+0x38>
 80123fc:	002b      	movs	r3, r5
 80123fe:	3b45      	subs	r3, #69	@ 0x45
 8012400:	4259      	negs	r1, r3
 8012402:	414b      	adcs	r3, r1
 8012404:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012406:	3a01      	subs	r2, #1
 8012408:	18cb      	adds	r3, r1, r3
 801240a:	9310      	str	r3, [sp, #64]	@ 0x40
 801240c:	ab09      	add	r3, sp, #36	@ 0x24
 801240e:	9304      	str	r3, [sp, #16]
 8012410:	ab08      	add	r3, sp, #32
 8012412:	9303      	str	r3, [sp, #12]
 8012414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012416:	9200      	str	r2, [sp, #0]
 8012418:	9302      	str	r3, [sp, #8]
 801241a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801241c:	0032      	movs	r2, r6
 801241e:	9301      	str	r3, [sp, #4]
 8012420:	003b      	movs	r3, r7
 8012422:	f001 f96d 	bl	8013700 <_dtoa_r>
 8012426:	0004      	movs	r4, r0
 8012428:	2d47      	cmp	r5, #71	@ 0x47
 801242a:	d11b      	bne.n	8012464 <__cvt+0x90>
 801242c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801242e:	07db      	lsls	r3, r3, #31
 8012430:	d511      	bpl.n	8012456 <__cvt+0x82>
 8012432:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012434:	18c3      	adds	r3, r0, r3
 8012436:	9307      	str	r3, [sp, #28]
 8012438:	2200      	movs	r2, #0
 801243a:	2300      	movs	r3, #0
 801243c:	0030      	movs	r0, r6
 801243e:	0039      	movs	r1, r7
 8012440:	f7ee f804 	bl	800044c <__aeabi_dcmpeq>
 8012444:	2800      	cmp	r0, #0
 8012446:	d001      	beq.n	801244c <__cvt+0x78>
 8012448:	9b07      	ldr	r3, [sp, #28]
 801244a:	9309      	str	r3, [sp, #36]	@ 0x24
 801244c:	2230      	movs	r2, #48	@ 0x30
 801244e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012450:	9907      	ldr	r1, [sp, #28]
 8012452:	428b      	cmp	r3, r1
 8012454:	d320      	bcc.n	8012498 <__cvt+0xc4>
 8012456:	0020      	movs	r0, r4
 8012458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801245a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801245c:	1b1b      	subs	r3, r3, r4
 801245e:	6013      	str	r3, [r2, #0]
 8012460:	b00b      	add	sp, #44	@ 0x2c
 8012462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012466:	18c3      	adds	r3, r0, r3
 8012468:	9307      	str	r3, [sp, #28]
 801246a:	2d46      	cmp	r5, #70	@ 0x46
 801246c:	d1e4      	bne.n	8012438 <__cvt+0x64>
 801246e:	7803      	ldrb	r3, [r0, #0]
 8012470:	2b30      	cmp	r3, #48	@ 0x30
 8012472:	d10c      	bne.n	801248e <__cvt+0xba>
 8012474:	2200      	movs	r2, #0
 8012476:	2300      	movs	r3, #0
 8012478:	0030      	movs	r0, r6
 801247a:	0039      	movs	r1, r7
 801247c:	f7ed ffe6 	bl	800044c <__aeabi_dcmpeq>
 8012480:	2800      	cmp	r0, #0
 8012482:	d104      	bne.n	801248e <__cvt+0xba>
 8012484:	2301      	movs	r3, #1
 8012486:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012488:	1a9b      	subs	r3, r3, r2
 801248a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801248c:	6013      	str	r3, [r2, #0]
 801248e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012490:	9a07      	ldr	r2, [sp, #28]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	18d3      	adds	r3, r2, r3
 8012496:	e7ce      	b.n	8012436 <__cvt+0x62>
 8012498:	1c59      	adds	r1, r3, #1
 801249a:	9109      	str	r1, [sp, #36]	@ 0x24
 801249c:	701a      	strb	r2, [r3, #0]
 801249e:	e7d6      	b.n	801244e <__cvt+0x7a>

080124a0 <__exponent>:
 80124a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124a2:	232b      	movs	r3, #43	@ 0x2b
 80124a4:	0005      	movs	r5, r0
 80124a6:	000c      	movs	r4, r1
 80124a8:	b085      	sub	sp, #20
 80124aa:	7002      	strb	r2, [r0, #0]
 80124ac:	2900      	cmp	r1, #0
 80124ae:	da01      	bge.n	80124b4 <__exponent+0x14>
 80124b0:	424c      	negs	r4, r1
 80124b2:	3302      	adds	r3, #2
 80124b4:	706b      	strb	r3, [r5, #1]
 80124b6:	2c09      	cmp	r4, #9
 80124b8:	dd2c      	ble.n	8012514 <__exponent+0x74>
 80124ba:	ab02      	add	r3, sp, #8
 80124bc:	1dde      	adds	r6, r3, #7
 80124be:	0020      	movs	r0, r4
 80124c0:	210a      	movs	r1, #10
 80124c2:	f7ed ffad 	bl	8000420 <__aeabi_idivmod>
 80124c6:	0037      	movs	r7, r6
 80124c8:	3130      	adds	r1, #48	@ 0x30
 80124ca:	3e01      	subs	r6, #1
 80124cc:	0020      	movs	r0, r4
 80124ce:	7031      	strb	r1, [r6, #0]
 80124d0:	210a      	movs	r1, #10
 80124d2:	9401      	str	r4, [sp, #4]
 80124d4:	f7ed febe 	bl	8000254 <__divsi3>
 80124d8:	9b01      	ldr	r3, [sp, #4]
 80124da:	0004      	movs	r4, r0
 80124dc:	2b63      	cmp	r3, #99	@ 0x63
 80124de:	dcee      	bgt.n	80124be <__exponent+0x1e>
 80124e0:	1eba      	subs	r2, r7, #2
 80124e2:	1ca8      	adds	r0, r5, #2
 80124e4:	0001      	movs	r1, r0
 80124e6:	0013      	movs	r3, r2
 80124e8:	3430      	adds	r4, #48	@ 0x30
 80124ea:	7014      	strb	r4, [r2, #0]
 80124ec:	ac02      	add	r4, sp, #8
 80124ee:	3407      	adds	r4, #7
 80124f0:	429c      	cmp	r4, r3
 80124f2:	d80a      	bhi.n	801250a <__exponent+0x6a>
 80124f4:	2300      	movs	r3, #0
 80124f6:	42a2      	cmp	r2, r4
 80124f8:	d803      	bhi.n	8012502 <__exponent+0x62>
 80124fa:	3309      	adds	r3, #9
 80124fc:	aa02      	add	r2, sp, #8
 80124fe:	189b      	adds	r3, r3, r2
 8012500:	1bdb      	subs	r3, r3, r7
 8012502:	18c0      	adds	r0, r0, r3
 8012504:	1b40      	subs	r0, r0, r5
 8012506:	b005      	add	sp, #20
 8012508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801250a:	781c      	ldrb	r4, [r3, #0]
 801250c:	3301      	adds	r3, #1
 801250e:	700c      	strb	r4, [r1, #0]
 8012510:	3101      	adds	r1, #1
 8012512:	e7eb      	b.n	80124ec <__exponent+0x4c>
 8012514:	2330      	movs	r3, #48	@ 0x30
 8012516:	18e4      	adds	r4, r4, r3
 8012518:	70ab      	strb	r3, [r5, #2]
 801251a:	1d28      	adds	r0, r5, #4
 801251c:	70ec      	strb	r4, [r5, #3]
 801251e:	e7f1      	b.n	8012504 <__exponent+0x64>

08012520 <_printf_float>:
 8012520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012522:	b097      	sub	sp, #92	@ 0x5c
 8012524:	000d      	movs	r5, r1
 8012526:	920a      	str	r2, [sp, #40]	@ 0x28
 8012528:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801252a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801252c:	9009      	str	r0, [sp, #36]	@ 0x24
 801252e:	f000 ff65 	bl	80133fc <_localeconv_r>
 8012532:	6803      	ldr	r3, [r0, #0]
 8012534:	0018      	movs	r0, r3
 8012536:	930d      	str	r3, [sp, #52]	@ 0x34
 8012538:	f7ed fde6 	bl	8000108 <strlen>
 801253c:	2300      	movs	r3, #0
 801253e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012540:	9314      	str	r3, [sp, #80]	@ 0x50
 8012542:	7e2b      	ldrb	r3, [r5, #24]
 8012544:	2207      	movs	r2, #7
 8012546:	930c      	str	r3, [sp, #48]	@ 0x30
 8012548:	682b      	ldr	r3, [r5, #0]
 801254a:	930e      	str	r3, [sp, #56]	@ 0x38
 801254c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801254e:	6823      	ldr	r3, [r4, #0]
 8012550:	05c9      	lsls	r1, r1, #23
 8012552:	d545      	bpl.n	80125e0 <_printf_float+0xc0>
 8012554:	189b      	adds	r3, r3, r2
 8012556:	4393      	bics	r3, r2
 8012558:	001a      	movs	r2, r3
 801255a:	3208      	adds	r2, #8
 801255c:	6022      	str	r2, [r4, #0]
 801255e:	2201      	movs	r2, #1
 8012560:	681e      	ldr	r6, [r3, #0]
 8012562:	685f      	ldr	r7, [r3, #4]
 8012564:	007b      	lsls	r3, r7, #1
 8012566:	085b      	lsrs	r3, r3, #1
 8012568:	9311      	str	r3, [sp, #68]	@ 0x44
 801256a:	9610      	str	r6, [sp, #64]	@ 0x40
 801256c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801256e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8012570:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012572:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012574:	4ba7      	ldr	r3, [pc, #668]	@ (8012814 <_printf_float+0x2f4>)
 8012576:	4252      	negs	r2, r2
 8012578:	f7f0 fe64 	bl	8003244 <__aeabi_dcmpun>
 801257c:	2800      	cmp	r0, #0
 801257e:	d131      	bne.n	80125e4 <_printf_float+0xc4>
 8012580:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012582:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012584:	2201      	movs	r2, #1
 8012586:	4ba3      	ldr	r3, [pc, #652]	@ (8012814 <_printf_float+0x2f4>)
 8012588:	4252      	negs	r2, r2
 801258a:	f7ed ff6f 	bl	800046c <__aeabi_dcmple>
 801258e:	2800      	cmp	r0, #0
 8012590:	d128      	bne.n	80125e4 <_printf_float+0xc4>
 8012592:	2200      	movs	r2, #0
 8012594:	2300      	movs	r3, #0
 8012596:	0030      	movs	r0, r6
 8012598:	0039      	movs	r1, r7
 801259a:	f7ed ff5d 	bl	8000458 <__aeabi_dcmplt>
 801259e:	2800      	cmp	r0, #0
 80125a0:	d003      	beq.n	80125aa <_printf_float+0x8a>
 80125a2:	002b      	movs	r3, r5
 80125a4:	222d      	movs	r2, #45	@ 0x2d
 80125a6:	3343      	adds	r3, #67	@ 0x43
 80125a8:	701a      	strb	r2, [r3, #0]
 80125aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125ac:	4f9a      	ldr	r7, [pc, #616]	@ (8012818 <_printf_float+0x2f8>)
 80125ae:	2b47      	cmp	r3, #71	@ 0x47
 80125b0:	d900      	bls.n	80125b4 <_printf_float+0x94>
 80125b2:	4f9a      	ldr	r7, [pc, #616]	@ (801281c <_printf_float+0x2fc>)
 80125b4:	2303      	movs	r3, #3
 80125b6:	2400      	movs	r4, #0
 80125b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125ba:	612b      	str	r3, [r5, #16]
 80125bc:	3301      	adds	r3, #1
 80125be:	439a      	bics	r2, r3
 80125c0:	602a      	str	r2, [r5, #0]
 80125c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125c4:	0029      	movs	r1, r5
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125cc:	aa15      	add	r2, sp, #84	@ 0x54
 80125ce:	f000 f9e5 	bl	801299c <_printf_common>
 80125d2:	3001      	adds	r0, #1
 80125d4:	d000      	beq.n	80125d8 <_printf_float+0xb8>
 80125d6:	e09f      	b.n	8012718 <_printf_float+0x1f8>
 80125d8:	2001      	movs	r0, #1
 80125da:	4240      	negs	r0, r0
 80125dc:	b017      	add	sp, #92	@ 0x5c
 80125de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125e0:	3307      	adds	r3, #7
 80125e2:	e7b8      	b.n	8012556 <_printf_float+0x36>
 80125e4:	0032      	movs	r2, r6
 80125e6:	003b      	movs	r3, r7
 80125e8:	0030      	movs	r0, r6
 80125ea:	0039      	movs	r1, r7
 80125ec:	f7f0 fe2a 	bl	8003244 <__aeabi_dcmpun>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d00b      	beq.n	801260c <_printf_float+0xec>
 80125f4:	2f00      	cmp	r7, #0
 80125f6:	da03      	bge.n	8012600 <_printf_float+0xe0>
 80125f8:	002b      	movs	r3, r5
 80125fa:	222d      	movs	r2, #45	@ 0x2d
 80125fc:	3343      	adds	r3, #67	@ 0x43
 80125fe:	701a      	strb	r2, [r3, #0]
 8012600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012602:	4f87      	ldr	r7, [pc, #540]	@ (8012820 <_printf_float+0x300>)
 8012604:	2b47      	cmp	r3, #71	@ 0x47
 8012606:	d9d5      	bls.n	80125b4 <_printf_float+0x94>
 8012608:	4f86      	ldr	r7, [pc, #536]	@ (8012824 <_printf_float+0x304>)
 801260a:	e7d3      	b.n	80125b4 <_printf_float+0x94>
 801260c:	2220      	movs	r2, #32
 801260e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012610:	686b      	ldr	r3, [r5, #4]
 8012612:	4394      	bics	r4, r2
 8012614:	1c5a      	adds	r2, r3, #1
 8012616:	d146      	bne.n	80126a6 <_printf_float+0x186>
 8012618:	3307      	adds	r3, #7
 801261a:	606b      	str	r3, [r5, #4]
 801261c:	2380      	movs	r3, #128	@ 0x80
 801261e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	4313      	orrs	r3, r2
 8012624:	2200      	movs	r2, #0
 8012626:	602b      	str	r3, [r5, #0]
 8012628:	9206      	str	r2, [sp, #24]
 801262a:	aa14      	add	r2, sp, #80	@ 0x50
 801262c:	9205      	str	r2, [sp, #20]
 801262e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012630:	a90a      	add	r1, sp, #40	@ 0x28
 8012632:	9204      	str	r2, [sp, #16]
 8012634:	aa13      	add	r2, sp, #76	@ 0x4c
 8012636:	9203      	str	r2, [sp, #12]
 8012638:	2223      	movs	r2, #35	@ 0x23
 801263a:	1852      	adds	r2, r2, r1
 801263c:	9202      	str	r2, [sp, #8]
 801263e:	9301      	str	r3, [sp, #4]
 8012640:	686b      	ldr	r3, [r5, #4]
 8012642:	0032      	movs	r2, r6
 8012644:	9300      	str	r3, [sp, #0]
 8012646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012648:	003b      	movs	r3, r7
 801264a:	f7ff fec3 	bl	80123d4 <__cvt>
 801264e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012650:	0007      	movs	r7, r0
 8012652:	2c47      	cmp	r4, #71	@ 0x47
 8012654:	d12d      	bne.n	80126b2 <_printf_float+0x192>
 8012656:	1cd3      	adds	r3, r2, #3
 8012658:	db02      	blt.n	8012660 <_printf_float+0x140>
 801265a:	686b      	ldr	r3, [r5, #4]
 801265c:	429a      	cmp	r2, r3
 801265e:	dd48      	ble.n	80126f2 <_printf_float+0x1d2>
 8012660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012662:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012664:	3b02      	subs	r3, #2
 8012666:	b2db      	uxtb	r3, r3
 8012668:	930c      	str	r3, [sp, #48]	@ 0x30
 801266a:	0028      	movs	r0, r5
 801266c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801266e:	3901      	subs	r1, #1
 8012670:	3050      	adds	r0, #80	@ 0x50
 8012672:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012674:	f7ff ff14 	bl	80124a0 <__exponent>
 8012678:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801267a:	0004      	movs	r4, r0
 801267c:	1813      	adds	r3, r2, r0
 801267e:	612b      	str	r3, [r5, #16]
 8012680:	2a01      	cmp	r2, #1
 8012682:	dc02      	bgt.n	801268a <_printf_float+0x16a>
 8012684:	682a      	ldr	r2, [r5, #0]
 8012686:	07d2      	lsls	r2, r2, #31
 8012688:	d501      	bpl.n	801268e <_printf_float+0x16e>
 801268a:	3301      	adds	r3, #1
 801268c:	612b      	str	r3, [r5, #16]
 801268e:	2323      	movs	r3, #35	@ 0x23
 8012690:	aa0a      	add	r2, sp, #40	@ 0x28
 8012692:	189b      	adds	r3, r3, r2
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d100      	bne.n	801269c <_printf_float+0x17c>
 801269a:	e792      	b.n	80125c2 <_printf_float+0xa2>
 801269c:	002b      	movs	r3, r5
 801269e:	222d      	movs	r2, #45	@ 0x2d
 80126a0:	3343      	adds	r3, #67	@ 0x43
 80126a2:	701a      	strb	r2, [r3, #0]
 80126a4:	e78d      	b.n	80125c2 <_printf_float+0xa2>
 80126a6:	2c47      	cmp	r4, #71	@ 0x47
 80126a8:	d1b8      	bne.n	801261c <_printf_float+0xfc>
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d1b6      	bne.n	801261c <_printf_float+0xfc>
 80126ae:	3301      	adds	r3, #1
 80126b0:	e7b3      	b.n	801261a <_printf_float+0xfa>
 80126b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126b4:	0011      	movs	r1, r2
 80126b6:	2b65      	cmp	r3, #101	@ 0x65
 80126b8:	d9d7      	bls.n	801266a <_printf_float+0x14a>
 80126ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126bc:	2b66      	cmp	r3, #102	@ 0x66
 80126be:	d11a      	bne.n	80126f6 <_printf_float+0x1d6>
 80126c0:	686b      	ldr	r3, [r5, #4]
 80126c2:	2a00      	cmp	r2, #0
 80126c4:	dd09      	ble.n	80126da <_printf_float+0x1ba>
 80126c6:	612a      	str	r2, [r5, #16]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d102      	bne.n	80126d2 <_printf_float+0x1b2>
 80126cc:	6829      	ldr	r1, [r5, #0]
 80126ce:	07c9      	lsls	r1, r1, #31
 80126d0:	d50b      	bpl.n	80126ea <_printf_float+0x1ca>
 80126d2:	3301      	adds	r3, #1
 80126d4:	189b      	adds	r3, r3, r2
 80126d6:	612b      	str	r3, [r5, #16]
 80126d8:	e007      	b.n	80126ea <_printf_float+0x1ca>
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d103      	bne.n	80126e6 <_printf_float+0x1c6>
 80126de:	2201      	movs	r2, #1
 80126e0:	6829      	ldr	r1, [r5, #0]
 80126e2:	4211      	tst	r1, r2
 80126e4:	d000      	beq.n	80126e8 <_printf_float+0x1c8>
 80126e6:	1c9a      	adds	r2, r3, #2
 80126e8:	612a      	str	r2, [r5, #16]
 80126ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80126ec:	2400      	movs	r4, #0
 80126ee:	65ab      	str	r3, [r5, #88]	@ 0x58
 80126f0:	e7cd      	b.n	801268e <_printf_float+0x16e>
 80126f2:	2367      	movs	r3, #103	@ 0x67
 80126f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80126f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80126f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80126fa:	4299      	cmp	r1, r3
 80126fc:	db06      	blt.n	801270c <_printf_float+0x1ec>
 80126fe:	682b      	ldr	r3, [r5, #0]
 8012700:	6129      	str	r1, [r5, #16]
 8012702:	07db      	lsls	r3, r3, #31
 8012704:	d5f1      	bpl.n	80126ea <_printf_float+0x1ca>
 8012706:	3101      	adds	r1, #1
 8012708:	6129      	str	r1, [r5, #16]
 801270a:	e7ee      	b.n	80126ea <_printf_float+0x1ca>
 801270c:	2201      	movs	r2, #1
 801270e:	2900      	cmp	r1, #0
 8012710:	dce0      	bgt.n	80126d4 <_printf_float+0x1b4>
 8012712:	1892      	adds	r2, r2, r2
 8012714:	1a52      	subs	r2, r2, r1
 8012716:	e7dd      	b.n	80126d4 <_printf_float+0x1b4>
 8012718:	682a      	ldr	r2, [r5, #0]
 801271a:	0553      	lsls	r3, r2, #21
 801271c:	d408      	bmi.n	8012730 <_printf_float+0x210>
 801271e:	692b      	ldr	r3, [r5, #16]
 8012720:	003a      	movs	r2, r7
 8012722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012726:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012728:	47a0      	blx	r4
 801272a:	3001      	adds	r0, #1
 801272c:	d129      	bne.n	8012782 <_printf_float+0x262>
 801272e:	e753      	b.n	80125d8 <_printf_float+0xb8>
 8012730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012732:	2b65      	cmp	r3, #101	@ 0x65
 8012734:	d800      	bhi.n	8012738 <_printf_float+0x218>
 8012736:	e0da      	b.n	80128ee <_printf_float+0x3ce>
 8012738:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801273a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801273c:	2200      	movs	r2, #0
 801273e:	2300      	movs	r3, #0
 8012740:	f7ed fe84 	bl	800044c <__aeabi_dcmpeq>
 8012744:	2800      	cmp	r0, #0
 8012746:	d033      	beq.n	80127b0 <_printf_float+0x290>
 8012748:	2301      	movs	r3, #1
 801274a:	4a37      	ldr	r2, [pc, #220]	@ (8012828 <_printf_float+0x308>)
 801274c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801274e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012750:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012752:	47a0      	blx	r4
 8012754:	3001      	adds	r0, #1
 8012756:	d100      	bne.n	801275a <_printf_float+0x23a>
 8012758:	e73e      	b.n	80125d8 <_printf_float+0xb8>
 801275a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801275c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801275e:	42b3      	cmp	r3, r6
 8012760:	db02      	blt.n	8012768 <_printf_float+0x248>
 8012762:	682b      	ldr	r3, [r5, #0]
 8012764:	07db      	lsls	r3, r3, #31
 8012766:	d50c      	bpl.n	8012782 <_printf_float+0x262>
 8012768:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801276a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801276c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801276e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012770:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012772:	47a0      	blx	r4
 8012774:	2400      	movs	r4, #0
 8012776:	3001      	adds	r0, #1
 8012778:	d100      	bne.n	801277c <_printf_float+0x25c>
 801277a:	e72d      	b.n	80125d8 <_printf_float+0xb8>
 801277c:	1e73      	subs	r3, r6, #1
 801277e:	42a3      	cmp	r3, r4
 8012780:	dc0a      	bgt.n	8012798 <_printf_float+0x278>
 8012782:	682b      	ldr	r3, [r5, #0]
 8012784:	079b      	lsls	r3, r3, #30
 8012786:	d500      	bpl.n	801278a <_printf_float+0x26a>
 8012788:	e105      	b.n	8012996 <_printf_float+0x476>
 801278a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801278c:	68e8      	ldr	r0, [r5, #12]
 801278e:	4298      	cmp	r0, r3
 8012790:	db00      	blt.n	8012794 <_printf_float+0x274>
 8012792:	e723      	b.n	80125dc <_printf_float+0xbc>
 8012794:	0018      	movs	r0, r3
 8012796:	e721      	b.n	80125dc <_printf_float+0xbc>
 8012798:	002a      	movs	r2, r5
 801279a:	2301      	movs	r3, #1
 801279c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801279e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80127a2:	321a      	adds	r2, #26
 80127a4:	47b8      	blx	r7
 80127a6:	3001      	adds	r0, #1
 80127a8:	d100      	bne.n	80127ac <_printf_float+0x28c>
 80127aa:	e715      	b.n	80125d8 <_printf_float+0xb8>
 80127ac:	3401      	adds	r4, #1
 80127ae:	e7e5      	b.n	801277c <_printf_float+0x25c>
 80127b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	dc3a      	bgt.n	801282c <_printf_float+0x30c>
 80127b6:	2301      	movs	r3, #1
 80127b8:	4a1b      	ldr	r2, [pc, #108]	@ (8012828 <_printf_float+0x308>)
 80127ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80127bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80127c0:	47a0      	blx	r4
 80127c2:	3001      	adds	r0, #1
 80127c4:	d100      	bne.n	80127c8 <_printf_float+0x2a8>
 80127c6:	e707      	b.n	80125d8 <_printf_float+0xb8>
 80127c8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80127ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80127cc:	4333      	orrs	r3, r6
 80127ce:	d102      	bne.n	80127d6 <_printf_float+0x2b6>
 80127d0:	682b      	ldr	r3, [r5, #0]
 80127d2:	07db      	lsls	r3, r3, #31
 80127d4:	d5d5      	bpl.n	8012782 <_printf_float+0x262>
 80127d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80127da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80127dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80127e0:	47a0      	blx	r4
 80127e2:	2300      	movs	r3, #0
 80127e4:	3001      	adds	r0, #1
 80127e6:	d100      	bne.n	80127ea <_printf_float+0x2ca>
 80127e8:	e6f6      	b.n	80125d8 <_printf_float+0xb8>
 80127ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80127ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80127ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80127f0:	425b      	negs	r3, r3
 80127f2:	4293      	cmp	r3, r2
 80127f4:	dc01      	bgt.n	80127fa <_printf_float+0x2da>
 80127f6:	0033      	movs	r3, r6
 80127f8:	e792      	b.n	8012720 <_printf_float+0x200>
 80127fa:	002a      	movs	r2, r5
 80127fc:	2301      	movs	r3, #1
 80127fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012800:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012802:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012804:	321a      	adds	r2, #26
 8012806:	47a0      	blx	r4
 8012808:	3001      	adds	r0, #1
 801280a:	d100      	bne.n	801280e <_printf_float+0x2ee>
 801280c:	e6e4      	b.n	80125d8 <_printf_float+0xb8>
 801280e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012810:	3301      	adds	r3, #1
 8012812:	e7ea      	b.n	80127ea <_printf_float+0x2ca>
 8012814:	7fefffff 	.word	0x7fefffff
 8012818:	080176cc 	.word	0x080176cc
 801281c:	080176d0 	.word	0x080176d0
 8012820:	080176d4 	.word	0x080176d4
 8012824:	080176d8 	.word	0x080176d8
 8012828:	080176dc 	.word	0x080176dc
 801282c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801282e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8012830:	930c      	str	r3, [sp, #48]	@ 0x30
 8012832:	429e      	cmp	r6, r3
 8012834:	dd00      	ble.n	8012838 <_printf_float+0x318>
 8012836:	001e      	movs	r6, r3
 8012838:	2e00      	cmp	r6, #0
 801283a:	dc31      	bgt.n	80128a0 <_printf_float+0x380>
 801283c:	43f3      	mvns	r3, r6
 801283e:	2400      	movs	r4, #0
 8012840:	17db      	asrs	r3, r3, #31
 8012842:	4033      	ands	r3, r6
 8012844:	930e      	str	r3, [sp, #56]	@ 0x38
 8012846:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8012848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801284a:	1af3      	subs	r3, r6, r3
 801284c:	42a3      	cmp	r3, r4
 801284e:	dc30      	bgt.n	80128b2 <_printf_float+0x392>
 8012850:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012852:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012854:	429a      	cmp	r2, r3
 8012856:	dc38      	bgt.n	80128ca <_printf_float+0x3aa>
 8012858:	682b      	ldr	r3, [r5, #0]
 801285a:	07db      	lsls	r3, r3, #31
 801285c:	d435      	bmi.n	80128ca <_printf_float+0x3aa>
 801285e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8012860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012862:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012864:	1b9b      	subs	r3, r3, r6
 8012866:	1b14      	subs	r4, r2, r4
 8012868:	429c      	cmp	r4, r3
 801286a:	dd00      	ble.n	801286e <_printf_float+0x34e>
 801286c:	001c      	movs	r4, r3
 801286e:	2c00      	cmp	r4, #0
 8012870:	dc34      	bgt.n	80128dc <_printf_float+0x3bc>
 8012872:	43e3      	mvns	r3, r4
 8012874:	2600      	movs	r6, #0
 8012876:	17db      	asrs	r3, r3, #31
 8012878:	401c      	ands	r4, r3
 801287a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801287c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	1b1b      	subs	r3, r3, r4
 8012882:	42b3      	cmp	r3, r6
 8012884:	dc00      	bgt.n	8012888 <_printf_float+0x368>
 8012886:	e77c      	b.n	8012782 <_printf_float+0x262>
 8012888:	002a      	movs	r2, r5
 801288a:	2301      	movs	r3, #1
 801288c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801288e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012890:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012892:	321a      	adds	r2, #26
 8012894:	47b8      	blx	r7
 8012896:	3001      	adds	r0, #1
 8012898:	d100      	bne.n	801289c <_printf_float+0x37c>
 801289a:	e69d      	b.n	80125d8 <_printf_float+0xb8>
 801289c:	3601      	adds	r6, #1
 801289e:	e7ec      	b.n	801287a <_printf_float+0x35a>
 80128a0:	0033      	movs	r3, r6
 80128a2:	003a      	movs	r2, r7
 80128a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80128a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80128aa:	47a0      	blx	r4
 80128ac:	3001      	adds	r0, #1
 80128ae:	d1c5      	bne.n	801283c <_printf_float+0x31c>
 80128b0:	e692      	b.n	80125d8 <_printf_float+0xb8>
 80128b2:	002a      	movs	r2, r5
 80128b4:	2301      	movs	r3, #1
 80128b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80128b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80128bc:	321a      	adds	r2, #26
 80128be:	47b0      	blx	r6
 80128c0:	3001      	adds	r0, #1
 80128c2:	d100      	bne.n	80128c6 <_printf_float+0x3a6>
 80128c4:	e688      	b.n	80125d8 <_printf_float+0xb8>
 80128c6:	3401      	adds	r4, #1
 80128c8:	e7bd      	b.n	8012846 <_printf_float+0x326>
 80128ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80128ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80128d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80128d4:	47a0      	blx	r4
 80128d6:	3001      	adds	r0, #1
 80128d8:	d1c1      	bne.n	801285e <_printf_float+0x33e>
 80128da:	e67d      	b.n	80125d8 <_printf_float+0xb8>
 80128dc:	19ba      	adds	r2, r7, r6
 80128de:	0023      	movs	r3, r4
 80128e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80128e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80128e6:	47b0      	blx	r6
 80128e8:	3001      	adds	r0, #1
 80128ea:	d1c2      	bne.n	8012872 <_printf_float+0x352>
 80128ec:	e674      	b.n	80125d8 <_printf_float+0xb8>
 80128ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80128f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	dc02      	bgt.n	80128fc <_printf_float+0x3dc>
 80128f6:	2301      	movs	r3, #1
 80128f8:	421a      	tst	r2, r3
 80128fa:	d039      	beq.n	8012970 <_printf_float+0x450>
 80128fc:	2301      	movs	r3, #1
 80128fe:	003a      	movs	r2, r7
 8012900:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012904:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012906:	47b0      	blx	r6
 8012908:	3001      	adds	r0, #1
 801290a:	d100      	bne.n	801290e <_printf_float+0x3ee>
 801290c:	e664      	b.n	80125d8 <_printf_float+0xb8>
 801290e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012914:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012916:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012918:	47b0      	blx	r6
 801291a:	3001      	adds	r0, #1
 801291c:	d100      	bne.n	8012920 <_printf_float+0x400>
 801291e:	e65b      	b.n	80125d8 <_printf_float+0xb8>
 8012920:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8012922:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8012924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012926:	2200      	movs	r2, #0
 8012928:	3b01      	subs	r3, #1
 801292a:	930c      	str	r3, [sp, #48]	@ 0x30
 801292c:	2300      	movs	r3, #0
 801292e:	f7ed fd8d 	bl	800044c <__aeabi_dcmpeq>
 8012932:	2800      	cmp	r0, #0
 8012934:	d11a      	bne.n	801296c <_printf_float+0x44c>
 8012936:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012938:	1c7a      	adds	r2, r7, #1
 801293a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801293c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801293e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012940:	47b0      	blx	r6
 8012942:	3001      	adds	r0, #1
 8012944:	d10e      	bne.n	8012964 <_printf_float+0x444>
 8012946:	e647      	b.n	80125d8 <_printf_float+0xb8>
 8012948:	002a      	movs	r2, r5
 801294a:	2301      	movs	r3, #1
 801294c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801294e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012950:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012952:	321a      	adds	r2, #26
 8012954:	47b8      	blx	r7
 8012956:	3001      	adds	r0, #1
 8012958:	d100      	bne.n	801295c <_printf_float+0x43c>
 801295a:	e63d      	b.n	80125d8 <_printf_float+0xb8>
 801295c:	3601      	adds	r6, #1
 801295e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012960:	429e      	cmp	r6, r3
 8012962:	dbf1      	blt.n	8012948 <_printf_float+0x428>
 8012964:	002a      	movs	r2, r5
 8012966:	0023      	movs	r3, r4
 8012968:	3250      	adds	r2, #80	@ 0x50
 801296a:	e6da      	b.n	8012722 <_printf_float+0x202>
 801296c:	2600      	movs	r6, #0
 801296e:	e7f6      	b.n	801295e <_printf_float+0x43e>
 8012970:	003a      	movs	r2, r7
 8012972:	e7e2      	b.n	801293a <_printf_float+0x41a>
 8012974:	002a      	movs	r2, r5
 8012976:	2301      	movs	r3, #1
 8012978:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801297a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801297c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801297e:	3219      	adds	r2, #25
 8012980:	47b0      	blx	r6
 8012982:	3001      	adds	r0, #1
 8012984:	d100      	bne.n	8012988 <_printf_float+0x468>
 8012986:	e627      	b.n	80125d8 <_printf_float+0xb8>
 8012988:	3401      	adds	r4, #1
 801298a:	68eb      	ldr	r3, [r5, #12]
 801298c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801298e:	1a9b      	subs	r3, r3, r2
 8012990:	42a3      	cmp	r3, r4
 8012992:	dcef      	bgt.n	8012974 <_printf_float+0x454>
 8012994:	e6f9      	b.n	801278a <_printf_float+0x26a>
 8012996:	2400      	movs	r4, #0
 8012998:	e7f7      	b.n	801298a <_printf_float+0x46a>
 801299a:	46c0      	nop			@ (mov r8, r8)

0801299c <_printf_common>:
 801299c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801299e:	0016      	movs	r6, r2
 80129a0:	9301      	str	r3, [sp, #4]
 80129a2:	688a      	ldr	r2, [r1, #8]
 80129a4:	690b      	ldr	r3, [r1, #16]
 80129a6:	000c      	movs	r4, r1
 80129a8:	9000      	str	r0, [sp, #0]
 80129aa:	4293      	cmp	r3, r2
 80129ac:	da00      	bge.n	80129b0 <_printf_common+0x14>
 80129ae:	0013      	movs	r3, r2
 80129b0:	0022      	movs	r2, r4
 80129b2:	6033      	str	r3, [r6, #0]
 80129b4:	3243      	adds	r2, #67	@ 0x43
 80129b6:	7812      	ldrb	r2, [r2, #0]
 80129b8:	2a00      	cmp	r2, #0
 80129ba:	d001      	beq.n	80129c0 <_printf_common+0x24>
 80129bc:	3301      	adds	r3, #1
 80129be:	6033      	str	r3, [r6, #0]
 80129c0:	6823      	ldr	r3, [r4, #0]
 80129c2:	069b      	lsls	r3, r3, #26
 80129c4:	d502      	bpl.n	80129cc <_printf_common+0x30>
 80129c6:	6833      	ldr	r3, [r6, #0]
 80129c8:	3302      	adds	r3, #2
 80129ca:	6033      	str	r3, [r6, #0]
 80129cc:	6822      	ldr	r2, [r4, #0]
 80129ce:	2306      	movs	r3, #6
 80129d0:	0015      	movs	r5, r2
 80129d2:	401d      	ands	r5, r3
 80129d4:	421a      	tst	r2, r3
 80129d6:	d027      	beq.n	8012a28 <_printf_common+0x8c>
 80129d8:	0023      	movs	r3, r4
 80129da:	3343      	adds	r3, #67	@ 0x43
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	1e5a      	subs	r2, r3, #1
 80129e0:	4193      	sbcs	r3, r2
 80129e2:	6822      	ldr	r2, [r4, #0]
 80129e4:	0692      	lsls	r2, r2, #26
 80129e6:	d430      	bmi.n	8012a4a <_printf_common+0xae>
 80129e8:	0022      	movs	r2, r4
 80129ea:	9901      	ldr	r1, [sp, #4]
 80129ec:	9800      	ldr	r0, [sp, #0]
 80129ee:	9d08      	ldr	r5, [sp, #32]
 80129f0:	3243      	adds	r2, #67	@ 0x43
 80129f2:	47a8      	blx	r5
 80129f4:	3001      	adds	r0, #1
 80129f6:	d025      	beq.n	8012a44 <_printf_common+0xa8>
 80129f8:	2206      	movs	r2, #6
 80129fa:	6823      	ldr	r3, [r4, #0]
 80129fc:	2500      	movs	r5, #0
 80129fe:	4013      	ands	r3, r2
 8012a00:	2b04      	cmp	r3, #4
 8012a02:	d105      	bne.n	8012a10 <_printf_common+0x74>
 8012a04:	6833      	ldr	r3, [r6, #0]
 8012a06:	68e5      	ldr	r5, [r4, #12]
 8012a08:	1aed      	subs	r5, r5, r3
 8012a0a:	43eb      	mvns	r3, r5
 8012a0c:	17db      	asrs	r3, r3, #31
 8012a0e:	401d      	ands	r5, r3
 8012a10:	68a3      	ldr	r3, [r4, #8]
 8012a12:	6922      	ldr	r2, [r4, #16]
 8012a14:	4293      	cmp	r3, r2
 8012a16:	dd01      	ble.n	8012a1c <_printf_common+0x80>
 8012a18:	1a9b      	subs	r3, r3, r2
 8012a1a:	18ed      	adds	r5, r5, r3
 8012a1c:	2600      	movs	r6, #0
 8012a1e:	42b5      	cmp	r5, r6
 8012a20:	d120      	bne.n	8012a64 <_printf_common+0xc8>
 8012a22:	2000      	movs	r0, #0
 8012a24:	e010      	b.n	8012a48 <_printf_common+0xac>
 8012a26:	3501      	adds	r5, #1
 8012a28:	68e3      	ldr	r3, [r4, #12]
 8012a2a:	6832      	ldr	r2, [r6, #0]
 8012a2c:	1a9b      	subs	r3, r3, r2
 8012a2e:	42ab      	cmp	r3, r5
 8012a30:	ddd2      	ble.n	80129d8 <_printf_common+0x3c>
 8012a32:	0022      	movs	r2, r4
 8012a34:	2301      	movs	r3, #1
 8012a36:	9901      	ldr	r1, [sp, #4]
 8012a38:	9800      	ldr	r0, [sp, #0]
 8012a3a:	9f08      	ldr	r7, [sp, #32]
 8012a3c:	3219      	adds	r2, #25
 8012a3e:	47b8      	blx	r7
 8012a40:	3001      	adds	r0, #1
 8012a42:	d1f0      	bne.n	8012a26 <_printf_common+0x8a>
 8012a44:	2001      	movs	r0, #1
 8012a46:	4240      	negs	r0, r0
 8012a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012a4a:	2030      	movs	r0, #48	@ 0x30
 8012a4c:	18e1      	adds	r1, r4, r3
 8012a4e:	3143      	adds	r1, #67	@ 0x43
 8012a50:	7008      	strb	r0, [r1, #0]
 8012a52:	0021      	movs	r1, r4
 8012a54:	1c5a      	adds	r2, r3, #1
 8012a56:	3145      	adds	r1, #69	@ 0x45
 8012a58:	7809      	ldrb	r1, [r1, #0]
 8012a5a:	18a2      	adds	r2, r4, r2
 8012a5c:	3243      	adds	r2, #67	@ 0x43
 8012a5e:	3302      	adds	r3, #2
 8012a60:	7011      	strb	r1, [r2, #0]
 8012a62:	e7c1      	b.n	80129e8 <_printf_common+0x4c>
 8012a64:	0022      	movs	r2, r4
 8012a66:	2301      	movs	r3, #1
 8012a68:	9901      	ldr	r1, [sp, #4]
 8012a6a:	9800      	ldr	r0, [sp, #0]
 8012a6c:	9f08      	ldr	r7, [sp, #32]
 8012a6e:	321a      	adds	r2, #26
 8012a70:	47b8      	blx	r7
 8012a72:	3001      	adds	r0, #1
 8012a74:	d0e6      	beq.n	8012a44 <_printf_common+0xa8>
 8012a76:	3601      	adds	r6, #1
 8012a78:	e7d1      	b.n	8012a1e <_printf_common+0x82>
	...

08012a7c <_printf_i>:
 8012a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a7e:	b08b      	sub	sp, #44	@ 0x2c
 8012a80:	9206      	str	r2, [sp, #24]
 8012a82:	000a      	movs	r2, r1
 8012a84:	3243      	adds	r2, #67	@ 0x43
 8012a86:	9307      	str	r3, [sp, #28]
 8012a88:	9005      	str	r0, [sp, #20]
 8012a8a:	9203      	str	r2, [sp, #12]
 8012a8c:	7e0a      	ldrb	r2, [r1, #24]
 8012a8e:	000c      	movs	r4, r1
 8012a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a92:	2a78      	cmp	r2, #120	@ 0x78
 8012a94:	d809      	bhi.n	8012aaa <_printf_i+0x2e>
 8012a96:	2a62      	cmp	r2, #98	@ 0x62
 8012a98:	d80b      	bhi.n	8012ab2 <_printf_i+0x36>
 8012a9a:	2a00      	cmp	r2, #0
 8012a9c:	d100      	bne.n	8012aa0 <_printf_i+0x24>
 8012a9e:	e0bc      	b.n	8012c1a <_printf_i+0x19e>
 8012aa0:	497b      	ldr	r1, [pc, #492]	@ (8012c90 <_printf_i+0x214>)
 8012aa2:	9104      	str	r1, [sp, #16]
 8012aa4:	2a58      	cmp	r2, #88	@ 0x58
 8012aa6:	d100      	bne.n	8012aaa <_printf_i+0x2e>
 8012aa8:	e090      	b.n	8012bcc <_printf_i+0x150>
 8012aaa:	0025      	movs	r5, r4
 8012aac:	3542      	adds	r5, #66	@ 0x42
 8012aae:	702a      	strb	r2, [r5, #0]
 8012ab0:	e022      	b.n	8012af8 <_printf_i+0x7c>
 8012ab2:	0010      	movs	r0, r2
 8012ab4:	3863      	subs	r0, #99	@ 0x63
 8012ab6:	2815      	cmp	r0, #21
 8012ab8:	d8f7      	bhi.n	8012aaa <_printf_i+0x2e>
 8012aba:	f7ed fb37 	bl	800012c <__gnu_thumb1_case_shi>
 8012abe:	0016      	.short	0x0016
 8012ac0:	fff6001f 	.word	0xfff6001f
 8012ac4:	fff6fff6 	.word	0xfff6fff6
 8012ac8:	001ffff6 	.word	0x001ffff6
 8012acc:	fff6fff6 	.word	0xfff6fff6
 8012ad0:	fff6fff6 	.word	0xfff6fff6
 8012ad4:	003600a1 	.word	0x003600a1
 8012ad8:	fff60080 	.word	0xfff60080
 8012adc:	00b2fff6 	.word	0x00b2fff6
 8012ae0:	0036fff6 	.word	0x0036fff6
 8012ae4:	fff6fff6 	.word	0xfff6fff6
 8012ae8:	0084      	.short	0x0084
 8012aea:	0025      	movs	r5, r4
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	3542      	adds	r5, #66	@ 0x42
 8012af0:	1d11      	adds	r1, r2, #4
 8012af2:	6019      	str	r1, [r3, #0]
 8012af4:	6813      	ldr	r3, [r2, #0]
 8012af6:	702b      	strb	r3, [r5, #0]
 8012af8:	2301      	movs	r3, #1
 8012afa:	e0a0      	b.n	8012c3e <_printf_i+0x1c2>
 8012afc:	6818      	ldr	r0, [r3, #0]
 8012afe:	6809      	ldr	r1, [r1, #0]
 8012b00:	1d02      	adds	r2, r0, #4
 8012b02:	060d      	lsls	r5, r1, #24
 8012b04:	d50b      	bpl.n	8012b1e <_printf_i+0xa2>
 8012b06:	6806      	ldr	r6, [r0, #0]
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	2e00      	cmp	r6, #0
 8012b0c:	da03      	bge.n	8012b16 <_printf_i+0x9a>
 8012b0e:	232d      	movs	r3, #45	@ 0x2d
 8012b10:	9a03      	ldr	r2, [sp, #12]
 8012b12:	4276      	negs	r6, r6
 8012b14:	7013      	strb	r3, [r2, #0]
 8012b16:	4b5e      	ldr	r3, [pc, #376]	@ (8012c90 <_printf_i+0x214>)
 8012b18:	270a      	movs	r7, #10
 8012b1a:	9304      	str	r3, [sp, #16]
 8012b1c:	e018      	b.n	8012b50 <_printf_i+0xd4>
 8012b1e:	6806      	ldr	r6, [r0, #0]
 8012b20:	601a      	str	r2, [r3, #0]
 8012b22:	0649      	lsls	r1, r1, #25
 8012b24:	d5f1      	bpl.n	8012b0a <_printf_i+0x8e>
 8012b26:	b236      	sxth	r6, r6
 8012b28:	e7ef      	b.n	8012b0a <_printf_i+0x8e>
 8012b2a:	6808      	ldr	r0, [r1, #0]
 8012b2c:	6819      	ldr	r1, [r3, #0]
 8012b2e:	c940      	ldmia	r1!, {r6}
 8012b30:	0605      	lsls	r5, r0, #24
 8012b32:	d402      	bmi.n	8012b3a <_printf_i+0xbe>
 8012b34:	0640      	lsls	r0, r0, #25
 8012b36:	d500      	bpl.n	8012b3a <_printf_i+0xbe>
 8012b38:	b2b6      	uxth	r6, r6
 8012b3a:	6019      	str	r1, [r3, #0]
 8012b3c:	4b54      	ldr	r3, [pc, #336]	@ (8012c90 <_printf_i+0x214>)
 8012b3e:	270a      	movs	r7, #10
 8012b40:	9304      	str	r3, [sp, #16]
 8012b42:	2a6f      	cmp	r2, #111	@ 0x6f
 8012b44:	d100      	bne.n	8012b48 <_printf_i+0xcc>
 8012b46:	3f02      	subs	r7, #2
 8012b48:	0023      	movs	r3, r4
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	3343      	adds	r3, #67	@ 0x43
 8012b4e:	701a      	strb	r2, [r3, #0]
 8012b50:	6863      	ldr	r3, [r4, #4]
 8012b52:	60a3      	str	r3, [r4, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	db03      	blt.n	8012b60 <_printf_i+0xe4>
 8012b58:	2104      	movs	r1, #4
 8012b5a:	6822      	ldr	r2, [r4, #0]
 8012b5c:	438a      	bics	r2, r1
 8012b5e:	6022      	str	r2, [r4, #0]
 8012b60:	2e00      	cmp	r6, #0
 8012b62:	d102      	bne.n	8012b6a <_printf_i+0xee>
 8012b64:	9d03      	ldr	r5, [sp, #12]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d00c      	beq.n	8012b84 <_printf_i+0x108>
 8012b6a:	9d03      	ldr	r5, [sp, #12]
 8012b6c:	0030      	movs	r0, r6
 8012b6e:	0039      	movs	r1, r7
 8012b70:	f7ed fb6c 	bl	800024c <__aeabi_uidivmod>
 8012b74:	9b04      	ldr	r3, [sp, #16]
 8012b76:	3d01      	subs	r5, #1
 8012b78:	5c5b      	ldrb	r3, [r3, r1]
 8012b7a:	702b      	strb	r3, [r5, #0]
 8012b7c:	0033      	movs	r3, r6
 8012b7e:	0006      	movs	r6, r0
 8012b80:	429f      	cmp	r7, r3
 8012b82:	d9f3      	bls.n	8012b6c <_printf_i+0xf0>
 8012b84:	2f08      	cmp	r7, #8
 8012b86:	d109      	bne.n	8012b9c <_printf_i+0x120>
 8012b88:	6823      	ldr	r3, [r4, #0]
 8012b8a:	07db      	lsls	r3, r3, #31
 8012b8c:	d506      	bpl.n	8012b9c <_printf_i+0x120>
 8012b8e:	6862      	ldr	r2, [r4, #4]
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	dc02      	bgt.n	8012b9c <_printf_i+0x120>
 8012b96:	2330      	movs	r3, #48	@ 0x30
 8012b98:	3d01      	subs	r5, #1
 8012b9a:	702b      	strb	r3, [r5, #0]
 8012b9c:	9b03      	ldr	r3, [sp, #12]
 8012b9e:	1b5b      	subs	r3, r3, r5
 8012ba0:	6123      	str	r3, [r4, #16]
 8012ba2:	9b07      	ldr	r3, [sp, #28]
 8012ba4:	0021      	movs	r1, r4
 8012ba6:	9300      	str	r3, [sp, #0]
 8012ba8:	9805      	ldr	r0, [sp, #20]
 8012baa:	9b06      	ldr	r3, [sp, #24]
 8012bac:	aa09      	add	r2, sp, #36	@ 0x24
 8012bae:	f7ff fef5 	bl	801299c <_printf_common>
 8012bb2:	3001      	adds	r0, #1
 8012bb4:	d148      	bne.n	8012c48 <_printf_i+0x1cc>
 8012bb6:	2001      	movs	r0, #1
 8012bb8:	4240      	negs	r0, r0
 8012bba:	b00b      	add	sp, #44	@ 0x2c
 8012bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bbe:	2220      	movs	r2, #32
 8012bc0:	6809      	ldr	r1, [r1, #0]
 8012bc2:	430a      	orrs	r2, r1
 8012bc4:	6022      	str	r2, [r4, #0]
 8012bc6:	2278      	movs	r2, #120	@ 0x78
 8012bc8:	4932      	ldr	r1, [pc, #200]	@ (8012c94 <_printf_i+0x218>)
 8012bca:	9104      	str	r1, [sp, #16]
 8012bcc:	0021      	movs	r1, r4
 8012bce:	3145      	adds	r1, #69	@ 0x45
 8012bd0:	700a      	strb	r2, [r1, #0]
 8012bd2:	6819      	ldr	r1, [r3, #0]
 8012bd4:	6822      	ldr	r2, [r4, #0]
 8012bd6:	c940      	ldmia	r1!, {r6}
 8012bd8:	0610      	lsls	r0, r2, #24
 8012bda:	d402      	bmi.n	8012be2 <_printf_i+0x166>
 8012bdc:	0650      	lsls	r0, r2, #25
 8012bde:	d500      	bpl.n	8012be2 <_printf_i+0x166>
 8012be0:	b2b6      	uxth	r6, r6
 8012be2:	6019      	str	r1, [r3, #0]
 8012be4:	07d3      	lsls	r3, r2, #31
 8012be6:	d502      	bpl.n	8012bee <_printf_i+0x172>
 8012be8:	2320      	movs	r3, #32
 8012bea:	4313      	orrs	r3, r2
 8012bec:	6023      	str	r3, [r4, #0]
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	d001      	beq.n	8012bf6 <_printf_i+0x17a>
 8012bf2:	2710      	movs	r7, #16
 8012bf4:	e7a8      	b.n	8012b48 <_printf_i+0xcc>
 8012bf6:	2220      	movs	r2, #32
 8012bf8:	6823      	ldr	r3, [r4, #0]
 8012bfa:	4393      	bics	r3, r2
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	e7f8      	b.n	8012bf2 <_printf_i+0x176>
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	680d      	ldr	r5, [r1, #0]
 8012c04:	1d10      	adds	r0, r2, #4
 8012c06:	6949      	ldr	r1, [r1, #20]
 8012c08:	6018      	str	r0, [r3, #0]
 8012c0a:	6813      	ldr	r3, [r2, #0]
 8012c0c:	062e      	lsls	r6, r5, #24
 8012c0e:	d501      	bpl.n	8012c14 <_printf_i+0x198>
 8012c10:	6019      	str	r1, [r3, #0]
 8012c12:	e002      	b.n	8012c1a <_printf_i+0x19e>
 8012c14:	066d      	lsls	r5, r5, #25
 8012c16:	d5fb      	bpl.n	8012c10 <_printf_i+0x194>
 8012c18:	8019      	strh	r1, [r3, #0]
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	9d03      	ldr	r5, [sp, #12]
 8012c1e:	6123      	str	r3, [r4, #16]
 8012c20:	e7bf      	b.n	8012ba2 <_printf_i+0x126>
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	1d11      	adds	r1, r2, #4
 8012c26:	6019      	str	r1, [r3, #0]
 8012c28:	6815      	ldr	r5, [r2, #0]
 8012c2a:	2100      	movs	r1, #0
 8012c2c:	0028      	movs	r0, r5
 8012c2e:	6862      	ldr	r2, [r4, #4]
 8012c30:	f000 fcc3 	bl	80135ba <memchr>
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d001      	beq.n	8012c3c <_printf_i+0x1c0>
 8012c38:	1b40      	subs	r0, r0, r5
 8012c3a:	6060      	str	r0, [r4, #4]
 8012c3c:	6863      	ldr	r3, [r4, #4]
 8012c3e:	6123      	str	r3, [r4, #16]
 8012c40:	2300      	movs	r3, #0
 8012c42:	9a03      	ldr	r2, [sp, #12]
 8012c44:	7013      	strb	r3, [r2, #0]
 8012c46:	e7ac      	b.n	8012ba2 <_printf_i+0x126>
 8012c48:	002a      	movs	r2, r5
 8012c4a:	6923      	ldr	r3, [r4, #16]
 8012c4c:	9906      	ldr	r1, [sp, #24]
 8012c4e:	9805      	ldr	r0, [sp, #20]
 8012c50:	9d07      	ldr	r5, [sp, #28]
 8012c52:	47a8      	blx	r5
 8012c54:	3001      	adds	r0, #1
 8012c56:	d0ae      	beq.n	8012bb6 <_printf_i+0x13a>
 8012c58:	6823      	ldr	r3, [r4, #0]
 8012c5a:	079b      	lsls	r3, r3, #30
 8012c5c:	d415      	bmi.n	8012c8a <_printf_i+0x20e>
 8012c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c60:	68e0      	ldr	r0, [r4, #12]
 8012c62:	4298      	cmp	r0, r3
 8012c64:	daa9      	bge.n	8012bba <_printf_i+0x13e>
 8012c66:	0018      	movs	r0, r3
 8012c68:	e7a7      	b.n	8012bba <_printf_i+0x13e>
 8012c6a:	0022      	movs	r2, r4
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	9906      	ldr	r1, [sp, #24]
 8012c70:	9805      	ldr	r0, [sp, #20]
 8012c72:	9e07      	ldr	r6, [sp, #28]
 8012c74:	3219      	adds	r2, #25
 8012c76:	47b0      	blx	r6
 8012c78:	3001      	adds	r0, #1
 8012c7a:	d09c      	beq.n	8012bb6 <_printf_i+0x13a>
 8012c7c:	3501      	adds	r5, #1
 8012c7e:	68e3      	ldr	r3, [r4, #12]
 8012c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c82:	1a9b      	subs	r3, r3, r2
 8012c84:	42ab      	cmp	r3, r5
 8012c86:	dcf0      	bgt.n	8012c6a <_printf_i+0x1ee>
 8012c88:	e7e9      	b.n	8012c5e <_printf_i+0x1e2>
 8012c8a:	2500      	movs	r5, #0
 8012c8c:	e7f7      	b.n	8012c7e <_printf_i+0x202>
 8012c8e:	46c0      	nop			@ (mov r8, r8)
 8012c90:	080176de 	.word	0x080176de
 8012c94:	080176ef 	.word	0x080176ef

08012c98 <_scanf_float>:
 8012c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c9a:	b08b      	sub	sp, #44	@ 0x2c
 8012c9c:	0016      	movs	r6, r2
 8012c9e:	9003      	str	r0, [sp, #12]
 8012ca0:	22ae      	movs	r2, #174	@ 0xae
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	9307      	str	r3, [sp, #28]
 8012ca6:	688b      	ldr	r3, [r1, #8]
 8012ca8:	000c      	movs	r4, r1
 8012caa:	1e59      	subs	r1, r3, #1
 8012cac:	0052      	lsls	r2, r2, #1
 8012cae:	9006      	str	r0, [sp, #24]
 8012cb0:	4291      	cmp	r1, r2
 8012cb2:	d905      	bls.n	8012cc0 <_scanf_float+0x28>
 8012cb4:	3b5e      	subs	r3, #94	@ 0x5e
 8012cb6:	3bff      	subs	r3, #255	@ 0xff
 8012cb8:	9306      	str	r3, [sp, #24]
 8012cba:	235e      	movs	r3, #94	@ 0x5e
 8012cbc:	33ff      	adds	r3, #255	@ 0xff
 8012cbe:	60a3      	str	r3, [r4, #8]
 8012cc0:	23f0      	movs	r3, #240	@ 0xf0
 8012cc2:	6822      	ldr	r2, [r4, #0]
 8012cc4:	00db      	lsls	r3, r3, #3
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	6023      	str	r3, [r4, #0]
 8012cca:	0023      	movs	r3, r4
 8012ccc:	2500      	movs	r5, #0
 8012cce:	331c      	adds	r3, #28
 8012cd0:	001f      	movs	r7, r3
 8012cd2:	9304      	str	r3, [sp, #16]
 8012cd4:	9502      	str	r5, [sp, #8]
 8012cd6:	9509      	str	r5, [sp, #36]	@ 0x24
 8012cd8:	9508      	str	r5, [sp, #32]
 8012cda:	9501      	str	r5, [sp, #4]
 8012cdc:	9505      	str	r5, [sp, #20]
 8012cde:	68a2      	ldr	r2, [r4, #8]
 8012ce0:	2a00      	cmp	r2, #0
 8012ce2:	d00a      	beq.n	8012cfa <_scanf_float+0x62>
 8012ce4:	6833      	ldr	r3, [r6, #0]
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	2b4e      	cmp	r3, #78	@ 0x4e
 8012cea:	d844      	bhi.n	8012d76 <_scanf_float+0xde>
 8012cec:	0018      	movs	r0, r3
 8012cee:	2b40      	cmp	r3, #64	@ 0x40
 8012cf0:	d82c      	bhi.n	8012d4c <_scanf_float+0xb4>
 8012cf2:	382b      	subs	r0, #43	@ 0x2b
 8012cf4:	b2c1      	uxtb	r1, r0
 8012cf6:	290e      	cmp	r1, #14
 8012cf8:	d92a      	bls.n	8012d50 <_scanf_float+0xb8>
 8012cfa:	9b01      	ldr	r3, [sp, #4]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d003      	beq.n	8012d08 <_scanf_float+0x70>
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	4aa6      	ldr	r2, [pc, #664]	@ (8012f9c <_scanf_float+0x304>)
 8012d04:	4013      	ands	r3, r2
 8012d06:	6023      	str	r3, [r4, #0]
 8012d08:	9b02      	ldr	r3, [sp, #8]
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d900      	bls.n	8012d12 <_scanf_float+0x7a>
 8012d10:	e0fe      	b.n	8012f10 <_scanf_float+0x278>
 8012d12:	25be      	movs	r5, #190	@ 0xbe
 8012d14:	006d      	lsls	r5, r5, #1
 8012d16:	9b04      	ldr	r3, [sp, #16]
 8012d18:	429f      	cmp	r7, r3
 8012d1a:	d900      	bls.n	8012d1e <_scanf_float+0x86>
 8012d1c:	e0ee      	b.n	8012efc <_scanf_float+0x264>
 8012d1e:	2001      	movs	r0, #1
 8012d20:	b00b      	add	sp, #44	@ 0x2c
 8012d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d24:	0018      	movs	r0, r3
 8012d26:	3861      	subs	r0, #97	@ 0x61
 8012d28:	280d      	cmp	r0, #13
 8012d2a:	d8e6      	bhi.n	8012cfa <_scanf_float+0x62>
 8012d2c:	f7ed f9fe 	bl	800012c <__gnu_thumb1_case_shi>
 8012d30:	ffe50089 	.word	0xffe50089
 8012d34:	ffe5ffe5 	.word	0xffe5ffe5
 8012d38:	00a700bb 	.word	0x00a700bb
 8012d3c:	ffe5ffe5 	.word	0xffe5ffe5
 8012d40:	ffe5008f 	.word	0xffe5008f
 8012d44:	ffe5ffe5 	.word	0xffe5ffe5
 8012d48:	006bffe5 	.word	0x006bffe5
 8012d4c:	3841      	subs	r0, #65	@ 0x41
 8012d4e:	e7eb      	b.n	8012d28 <_scanf_float+0x90>
 8012d50:	280e      	cmp	r0, #14
 8012d52:	d8d2      	bhi.n	8012cfa <_scanf_float+0x62>
 8012d54:	f7ed f9ea 	bl	800012c <__gnu_thumb1_case_shi>
 8012d58:	ffd1004f 	.word	0xffd1004f
 8012d5c:	009d004f 	.word	0x009d004f
 8012d60:	0021ffd1 	.word	0x0021ffd1
 8012d64:	00410041 	.word	0x00410041
 8012d68:	00410041 	.word	0x00410041
 8012d6c:	00410041 	.word	0x00410041
 8012d70:	00410041 	.word	0x00410041
 8012d74:	0041      	.short	0x0041
 8012d76:	2b6e      	cmp	r3, #110	@ 0x6e
 8012d78:	d80a      	bhi.n	8012d90 <_scanf_float+0xf8>
 8012d7a:	2b60      	cmp	r3, #96	@ 0x60
 8012d7c:	d8d2      	bhi.n	8012d24 <_scanf_float+0x8c>
 8012d7e:	2b54      	cmp	r3, #84	@ 0x54
 8012d80:	d100      	bne.n	8012d84 <_scanf_float+0xec>
 8012d82:	e081      	b.n	8012e88 <_scanf_float+0x1f0>
 8012d84:	2b59      	cmp	r3, #89	@ 0x59
 8012d86:	d1b8      	bne.n	8012cfa <_scanf_float+0x62>
 8012d88:	2d07      	cmp	r5, #7
 8012d8a:	d1b6      	bne.n	8012cfa <_scanf_float+0x62>
 8012d8c:	2508      	movs	r5, #8
 8012d8e:	e02f      	b.n	8012df0 <_scanf_float+0x158>
 8012d90:	2b74      	cmp	r3, #116	@ 0x74
 8012d92:	d079      	beq.n	8012e88 <_scanf_float+0x1f0>
 8012d94:	2b79      	cmp	r3, #121	@ 0x79
 8012d96:	d0f7      	beq.n	8012d88 <_scanf_float+0xf0>
 8012d98:	e7af      	b.n	8012cfa <_scanf_float+0x62>
 8012d9a:	6821      	ldr	r1, [r4, #0]
 8012d9c:	05c8      	lsls	r0, r1, #23
 8012d9e:	d51c      	bpl.n	8012dda <_scanf_float+0x142>
 8012da0:	2380      	movs	r3, #128	@ 0x80
 8012da2:	4399      	bics	r1, r3
 8012da4:	9b01      	ldr	r3, [sp, #4]
 8012da6:	6021      	str	r1, [r4, #0]
 8012da8:	3301      	adds	r3, #1
 8012daa:	9301      	str	r3, [sp, #4]
 8012dac:	9b06      	ldr	r3, [sp, #24]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d003      	beq.n	8012dba <_scanf_float+0x122>
 8012db2:	3b01      	subs	r3, #1
 8012db4:	3201      	adds	r2, #1
 8012db6:	9306      	str	r3, [sp, #24]
 8012db8:	60a2      	str	r2, [r4, #8]
 8012dba:	68a3      	ldr	r3, [r4, #8]
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	60a3      	str	r3, [r4, #8]
 8012dc0:	6923      	ldr	r3, [r4, #16]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	6123      	str	r3, [r4, #16]
 8012dc6:	6873      	ldr	r3, [r6, #4]
 8012dc8:	3b01      	subs	r3, #1
 8012dca:	6073      	str	r3, [r6, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	dc00      	bgt.n	8012dd2 <_scanf_float+0x13a>
 8012dd0:	e08a      	b.n	8012ee8 <_scanf_float+0x250>
 8012dd2:	6833      	ldr	r3, [r6, #0]
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	6033      	str	r3, [r6, #0]
 8012dd8:	e781      	b.n	8012cde <_scanf_float+0x46>
 8012dda:	9a02      	ldr	r2, [sp, #8]
 8012ddc:	1951      	adds	r1, r2, r5
 8012dde:	2900      	cmp	r1, #0
 8012de0:	d000      	beq.n	8012de4 <_scanf_float+0x14c>
 8012de2:	e78a      	b.n	8012cfa <_scanf_float+0x62>
 8012de4:	000d      	movs	r5, r1
 8012de6:	6822      	ldr	r2, [r4, #0]
 8012de8:	486d      	ldr	r0, [pc, #436]	@ (8012fa0 <_scanf_float+0x308>)
 8012dea:	9102      	str	r1, [sp, #8]
 8012dec:	4002      	ands	r2, r0
 8012dee:	6022      	str	r2, [r4, #0]
 8012df0:	703b      	strb	r3, [r7, #0]
 8012df2:	3701      	adds	r7, #1
 8012df4:	e7e1      	b.n	8012dba <_scanf_float+0x122>
 8012df6:	2180      	movs	r1, #128	@ 0x80
 8012df8:	6822      	ldr	r2, [r4, #0]
 8012dfa:	420a      	tst	r2, r1
 8012dfc:	d100      	bne.n	8012e00 <_scanf_float+0x168>
 8012dfe:	e77c      	b.n	8012cfa <_scanf_float+0x62>
 8012e00:	438a      	bics	r2, r1
 8012e02:	6022      	str	r2, [r4, #0]
 8012e04:	e7f4      	b.n	8012df0 <_scanf_float+0x158>
 8012e06:	9a02      	ldr	r2, [sp, #8]
 8012e08:	2a00      	cmp	r2, #0
 8012e0a:	d10f      	bne.n	8012e2c <_scanf_float+0x194>
 8012e0c:	9a01      	ldr	r2, [sp, #4]
 8012e0e:	2a00      	cmp	r2, #0
 8012e10:	d10f      	bne.n	8012e32 <_scanf_float+0x19a>
 8012e12:	6822      	ldr	r2, [r4, #0]
 8012e14:	21e0      	movs	r1, #224	@ 0xe0
 8012e16:	0010      	movs	r0, r2
 8012e18:	00c9      	lsls	r1, r1, #3
 8012e1a:	4008      	ands	r0, r1
 8012e1c:	4288      	cmp	r0, r1
 8012e1e:	d108      	bne.n	8012e32 <_scanf_float+0x19a>
 8012e20:	4960      	ldr	r1, [pc, #384]	@ (8012fa4 <_scanf_float+0x30c>)
 8012e22:	400a      	ands	r2, r1
 8012e24:	6022      	str	r2, [r4, #0]
 8012e26:	2201      	movs	r2, #1
 8012e28:	9202      	str	r2, [sp, #8]
 8012e2a:	e7e1      	b.n	8012df0 <_scanf_float+0x158>
 8012e2c:	9a02      	ldr	r2, [sp, #8]
 8012e2e:	2a02      	cmp	r2, #2
 8012e30:	d058      	beq.n	8012ee4 <_scanf_float+0x24c>
 8012e32:	2d01      	cmp	r5, #1
 8012e34:	d002      	beq.n	8012e3c <_scanf_float+0x1a4>
 8012e36:	2d04      	cmp	r5, #4
 8012e38:	d000      	beq.n	8012e3c <_scanf_float+0x1a4>
 8012e3a:	e75e      	b.n	8012cfa <_scanf_float+0x62>
 8012e3c:	3501      	adds	r5, #1
 8012e3e:	b2ed      	uxtb	r5, r5
 8012e40:	e7d6      	b.n	8012df0 <_scanf_float+0x158>
 8012e42:	9a02      	ldr	r2, [sp, #8]
 8012e44:	2a01      	cmp	r2, #1
 8012e46:	d000      	beq.n	8012e4a <_scanf_float+0x1b2>
 8012e48:	e757      	b.n	8012cfa <_scanf_float+0x62>
 8012e4a:	2202      	movs	r2, #2
 8012e4c:	e7ec      	b.n	8012e28 <_scanf_float+0x190>
 8012e4e:	2d00      	cmp	r5, #0
 8012e50:	d110      	bne.n	8012e74 <_scanf_float+0x1dc>
 8012e52:	9a01      	ldr	r2, [sp, #4]
 8012e54:	2a00      	cmp	r2, #0
 8012e56:	d000      	beq.n	8012e5a <_scanf_float+0x1c2>
 8012e58:	e752      	b.n	8012d00 <_scanf_float+0x68>
 8012e5a:	6822      	ldr	r2, [r4, #0]
 8012e5c:	21e0      	movs	r1, #224	@ 0xe0
 8012e5e:	0010      	movs	r0, r2
 8012e60:	00c9      	lsls	r1, r1, #3
 8012e62:	4008      	ands	r0, r1
 8012e64:	4288      	cmp	r0, r1
 8012e66:	d000      	beq.n	8012e6a <_scanf_float+0x1d2>
 8012e68:	e11d      	b.n	80130a6 <_scanf_float+0x40e>
 8012e6a:	494e      	ldr	r1, [pc, #312]	@ (8012fa4 <_scanf_float+0x30c>)
 8012e6c:	3501      	adds	r5, #1
 8012e6e:	400a      	ands	r2, r1
 8012e70:	6022      	str	r2, [r4, #0]
 8012e72:	e7bd      	b.n	8012df0 <_scanf_float+0x158>
 8012e74:	21fd      	movs	r1, #253	@ 0xfd
 8012e76:	1eea      	subs	r2, r5, #3
 8012e78:	420a      	tst	r2, r1
 8012e7a:	d0df      	beq.n	8012e3c <_scanf_float+0x1a4>
 8012e7c:	e73d      	b.n	8012cfa <_scanf_float+0x62>
 8012e7e:	2d02      	cmp	r5, #2
 8012e80:	d000      	beq.n	8012e84 <_scanf_float+0x1ec>
 8012e82:	e73a      	b.n	8012cfa <_scanf_float+0x62>
 8012e84:	2503      	movs	r5, #3
 8012e86:	e7b3      	b.n	8012df0 <_scanf_float+0x158>
 8012e88:	2d06      	cmp	r5, #6
 8012e8a:	d000      	beq.n	8012e8e <_scanf_float+0x1f6>
 8012e8c:	e735      	b.n	8012cfa <_scanf_float+0x62>
 8012e8e:	2507      	movs	r5, #7
 8012e90:	e7ae      	b.n	8012df0 <_scanf_float+0x158>
 8012e92:	6822      	ldr	r2, [r4, #0]
 8012e94:	0591      	lsls	r1, r2, #22
 8012e96:	d400      	bmi.n	8012e9a <_scanf_float+0x202>
 8012e98:	e72f      	b.n	8012cfa <_scanf_float+0x62>
 8012e9a:	4943      	ldr	r1, [pc, #268]	@ (8012fa8 <_scanf_float+0x310>)
 8012e9c:	400a      	ands	r2, r1
 8012e9e:	6022      	str	r2, [r4, #0]
 8012ea0:	9a01      	ldr	r2, [sp, #4]
 8012ea2:	9205      	str	r2, [sp, #20]
 8012ea4:	e7a4      	b.n	8012df0 <_scanf_float+0x158>
 8012ea6:	21a0      	movs	r1, #160	@ 0xa0
 8012ea8:	2080      	movs	r0, #128	@ 0x80
 8012eaa:	6822      	ldr	r2, [r4, #0]
 8012eac:	00c9      	lsls	r1, r1, #3
 8012eae:	4011      	ands	r1, r2
 8012eb0:	00c0      	lsls	r0, r0, #3
 8012eb2:	4281      	cmp	r1, r0
 8012eb4:	d006      	beq.n	8012ec4 <_scanf_float+0x22c>
 8012eb6:	4202      	tst	r2, r0
 8012eb8:	d100      	bne.n	8012ebc <_scanf_float+0x224>
 8012eba:	e71e      	b.n	8012cfa <_scanf_float+0x62>
 8012ebc:	9901      	ldr	r1, [sp, #4]
 8012ebe:	2900      	cmp	r1, #0
 8012ec0:	d100      	bne.n	8012ec4 <_scanf_float+0x22c>
 8012ec2:	e0f0      	b.n	80130a6 <_scanf_float+0x40e>
 8012ec4:	0591      	lsls	r1, r2, #22
 8012ec6:	d404      	bmi.n	8012ed2 <_scanf_float+0x23a>
 8012ec8:	9901      	ldr	r1, [sp, #4]
 8012eca:	9805      	ldr	r0, [sp, #20]
 8012ecc:	9709      	str	r7, [sp, #36]	@ 0x24
 8012ece:	1a09      	subs	r1, r1, r0
 8012ed0:	9108      	str	r1, [sp, #32]
 8012ed2:	4934      	ldr	r1, [pc, #208]	@ (8012fa4 <_scanf_float+0x30c>)
 8012ed4:	400a      	ands	r2, r1
 8012ed6:	21c0      	movs	r1, #192	@ 0xc0
 8012ed8:	0049      	lsls	r1, r1, #1
 8012eda:	430a      	orrs	r2, r1
 8012edc:	6022      	str	r2, [r4, #0]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	9201      	str	r2, [sp, #4]
 8012ee2:	e785      	b.n	8012df0 <_scanf_float+0x158>
 8012ee4:	2203      	movs	r2, #3
 8012ee6:	e79f      	b.n	8012e28 <_scanf_float+0x190>
 8012ee8:	23c0      	movs	r3, #192	@ 0xc0
 8012eea:	005b      	lsls	r3, r3, #1
 8012eec:	0031      	movs	r1, r6
 8012eee:	58e3      	ldr	r3, [r4, r3]
 8012ef0:	9803      	ldr	r0, [sp, #12]
 8012ef2:	4798      	blx	r3
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d100      	bne.n	8012efa <_scanf_float+0x262>
 8012ef8:	e6f1      	b.n	8012cde <_scanf_float+0x46>
 8012efa:	e6fe      	b.n	8012cfa <_scanf_float+0x62>
 8012efc:	3f01      	subs	r7, #1
 8012efe:	5963      	ldr	r3, [r4, r5]
 8012f00:	0032      	movs	r2, r6
 8012f02:	7839      	ldrb	r1, [r7, #0]
 8012f04:	9803      	ldr	r0, [sp, #12]
 8012f06:	4798      	blx	r3
 8012f08:	6923      	ldr	r3, [r4, #16]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	6123      	str	r3, [r4, #16]
 8012f0e:	e702      	b.n	8012d16 <_scanf_float+0x7e>
 8012f10:	1e6b      	subs	r3, r5, #1
 8012f12:	2b06      	cmp	r3, #6
 8012f14:	d80e      	bhi.n	8012f34 <_scanf_float+0x29c>
 8012f16:	9702      	str	r7, [sp, #8]
 8012f18:	2d02      	cmp	r5, #2
 8012f1a:	d920      	bls.n	8012f5e <_scanf_float+0x2c6>
 8012f1c:	1beb      	subs	r3, r5, r7
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	9306      	str	r3, [sp, #24]
 8012f22:	9b02      	ldr	r3, [sp, #8]
 8012f24:	9a06      	ldr	r2, [sp, #24]
 8012f26:	189b      	adds	r3, r3, r2
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	2b03      	cmp	r3, #3
 8012f2c:	d127      	bne.n	8012f7e <_scanf_float+0x2e6>
 8012f2e:	3d03      	subs	r5, #3
 8012f30:	b2ed      	uxtb	r5, r5
 8012f32:	1b7f      	subs	r7, r7, r5
 8012f34:	6823      	ldr	r3, [r4, #0]
 8012f36:	05da      	lsls	r2, r3, #23
 8012f38:	d553      	bpl.n	8012fe2 <_scanf_float+0x34a>
 8012f3a:	055b      	lsls	r3, r3, #21
 8012f3c:	d536      	bpl.n	8012fac <_scanf_float+0x314>
 8012f3e:	25be      	movs	r5, #190	@ 0xbe
 8012f40:	006d      	lsls	r5, r5, #1
 8012f42:	9b04      	ldr	r3, [sp, #16]
 8012f44:	429f      	cmp	r7, r3
 8012f46:	d800      	bhi.n	8012f4a <_scanf_float+0x2b2>
 8012f48:	e6e9      	b.n	8012d1e <_scanf_float+0x86>
 8012f4a:	3f01      	subs	r7, #1
 8012f4c:	5963      	ldr	r3, [r4, r5]
 8012f4e:	0032      	movs	r2, r6
 8012f50:	7839      	ldrb	r1, [r7, #0]
 8012f52:	9803      	ldr	r0, [sp, #12]
 8012f54:	4798      	blx	r3
 8012f56:	6923      	ldr	r3, [r4, #16]
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	6123      	str	r3, [r4, #16]
 8012f5c:	e7f1      	b.n	8012f42 <_scanf_float+0x2aa>
 8012f5e:	25be      	movs	r5, #190	@ 0xbe
 8012f60:	006d      	lsls	r5, r5, #1
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	429f      	cmp	r7, r3
 8012f66:	d800      	bhi.n	8012f6a <_scanf_float+0x2d2>
 8012f68:	e6d9      	b.n	8012d1e <_scanf_float+0x86>
 8012f6a:	3f01      	subs	r7, #1
 8012f6c:	5963      	ldr	r3, [r4, r5]
 8012f6e:	0032      	movs	r2, r6
 8012f70:	7839      	ldrb	r1, [r7, #0]
 8012f72:	9803      	ldr	r0, [sp, #12]
 8012f74:	4798      	blx	r3
 8012f76:	6923      	ldr	r3, [r4, #16]
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	6123      	str	r3, [r4, #16]
 8012f7c:	e7f1      	b.n	8012f62 <_scanf_float+0x2ca>
 8012f7e:	9b02      	ldr	r3, [sp, #8]
 8012f80:	0032      	movs	r2, r6
 8012f82:	3b01      	subs	r3, #1
 8012f84:	7819      	ldrb	r1, [r3, #0]
 8012f86:	9302      	str	r3, [sp, #8]
 8012f88:	23be      	movs	r3, #190	@ 0xbe
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	58e3      	ldr	r3, [r4, r3]
 8012f8e:	9803      	ldr	r0, [sp, #12]
 8012f90:	4798      	blx	r3
 8012f92:	6923      	ldr	r3, [r4, #16]
 8012f94:	3b01      	subs	r3, #1
 8012f96:	6123      	str	r3, [r4, #16]
 8012f98:	e7c3      	b.n	8012f22 <_scanf_float+0x28a>
 8012f9a:	46c0      	nop			@ (mov r8, r8)
 8012f9c:	fffffeff 	.word	0xfffffeff
 8012fa0:	fffffe7f 	.word	0xfffffe7f
 8012fa4:	fffff87f 	.word	0xfffff87f
 8012fa8:	fffffd7f 	.word	0xfffffd7f
 8012fac:	6923      	ldr	r3, [r4, #16]
 8012fae:	1e7d      	subs	r5, r7, #1
 8012fb0:	7829      	ldrb	r1, [r5, #0]
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	6123      	str	r3, [r4, #16]
 8012fb6:	2965      	cmp	r1, #101	@ 0x65
 8012fb8:	d00c      	beq.n	8012fd4 <_scanf_float+0x33c>
 8012fba:	2945      	cmp	r1, #69	@ 0x45
 8012fbc:	d00a      	beq.n	8012fd4 <_scanf_float+0x33c>
 8012fbe:	23be      	movs	r3, #190	@ 0xbe
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	58e3      	ldr	r3, [r4, r3]
 8012fc4:	0032      	movs	r2, r6
 8012fc6:	9803      	ldr	r0, [sp, #12]
 8012fc8:	4798      	blx	r3
 8012fca:	6923      	ldr	r3, [r4, #16]
 8012fcc:	1ebd      	subs	r5, r7, #2
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	7829      	ldrb	r1, [r5, #0]
 8012fd2:	6123      	str	r3, [r4, #16]
 8012fd4:	23be      	movs	r3, #190	@ 0xbe
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	0032      	movs	r2, r6
 8012fda:	58e3      	ldr	r3, [r4, r3]
 8012fdc:	9803      	ldr	r0, [sp, #12]
 8012fde:	4798      	blx	r3
 8012fe0:	002f      	movs	r7, r5
 8012fe2:	6821      	ldr	r1, [r4, #0]
 8012fe4:	2310      	movs	r3, #16
 8012fe6:	000a      	movs	r2, r1
 8012fe8:	401a      	ands	r2, r3
 8012fea:	4219      	tst	r1, r3
 8012fec:	d001      	beq.n	8012ff2 <_scanf_float+0x35a>
 8012fee:	2000      	movs	r0, #0
 8012ff0:	e696      	b.n	8012d20 <_scanf_float+0x88>
 8012ff2:	21c0      	movs	r1, #192	@ 0xc0
 8012ff4:	703a      	strb	r2, [r7, #0]
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	00c9      	lsls	r1, r1, #3
 8012ffa:	400b      	ands	r3, r1
 8012ffc:	2180      	movs	r1, #128	@ 0x80
 8012ffe:	00c9      	lsls	r1, r1, #3
 8013000:	428b      	cmp	r3, r1
 8013002:	d11c      	bne.n	801303e <_scanf_float+0x3a6>
 8013004:	9b05      	ldr	r3, [sp, #20]
 8013006:	9a01      	ldr	r2, [sp, #4]
 8013008:	9905      	ldr	r1, [sp, #20]
 801300a:	1a9a      	subs	r2, r3, r2
 801300c:	9b01      	ldr	r3, [sp, #4]
 801300e:	428b      	cmp	r3, r1
 8013010:	d121      	bne.n	8013056 <_scanf_float+0x3be>
 8013012:	2200      	movs	r2, #0
 8013014:	9904      	ldr	r1, [sp, #16]
 8013016:	9803      	ldr	r0, [sp, #12]
 8013018:	f002 fd40 	bl	8015a9c <_strtod_r>
 801301c:	9b07      	ldr	r3, [sp, #28]
 801301e:	6822      	ldr	r2, [r4, #0]
 8013020:	0006      	movs	r6, r0
 8013022:	000f      	movs	r7, r1
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	0791      	lsls	r1, r2, #30
 8013028:	d522      	bpl.n	8013070 <_scanf_float+0x3d8>
 801302a:	9907      	ldr	r1, [sp, #28]
 801302c:	1d1a      	adds	r2, r3, #4
 801302e:	600a      	str	r2, [r1, #0]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	601e      	str	r6, [r3, #0]
 8013034:	605f      	str	r7, [r3, #4]
 8013036:	68e3      	ldr	r3, [r4, #12]
 8013038:	3301      	adds	r3, #1
 801303a:	60e3      	str	r3, [r4, #12]
 801303c:	e7d7      	b.n	8012fee <_scanf_float+0x356>
 801303e:	9b08      	ldr	r3, [sp, #32]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d0e6      	beq.n	8013012 <_scanf_float+0x37a>
 8013044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013046:	9803      	ldr	r0, [sp, #12]
 8013048:	1c59      	adds	r1, r3, #1
 801304a:	230a      	movs	r3, #10
 801304c:	f002 fdb8 	bl	8015bc0 <_strtol_r>
 8013050:	9b08      	ldr	r3, [sp, #32]
 8013052:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8013054:	1ac2      	subs	r2, r0, r3
 8013056:	0023      	movs	r3, r4
 8013058:	3370      	adds	r3, #112	@ 0x70
 801305a:	33ff      	adds	r3, #255	@ 0xff
 801305c:	429f      	cmp	r7, r3
 801305e:	d302      	bcc.n	8013066 <_scanf_float+0x3ce>
 8013060:	0027      	movs	r7, r4
 8013062:	376f      	adds	r7, #111	@ 0x6f
 8013064:	37ff      	adds	r7, #255	@ 0xff
 8013066:	0038      	movs	r0, r7
 8013068:	4910      	ldr	r1, [pc, #64]	@ (80130ac <_scanf_float+0x414>)
 801306a:	f000 f91b 	bl	80132a4 <siprintf>
 801306e:	e7d0      	b.n	8013012 <_scanf_float+0x37a>
 8013070:	1d19      	adds	r1, r3, #4
 8013072:	0752      	lsls	r2, r2, #29
 8013074:	d502      	bpl.n	801307c <_scanf_float+0x3e4>
 8013076:	9a07      	ldr	r2, [sp, #28]
 8013078:	6011      	str	r1, [r2, #0]
 801307a:	e7d9      	b.n	8013030 <_scanf_float+0x398>
 801307c:	9a07      	ldr	r2, [sp, #28]
 801307e:	0030      	movs	r0, r6
 8013080:	6011      	str	r1, [r2, #0]
 8013082:	681d      	ldr	r5, [r3, #0]
 8013084:	0032      	movs	r2, r6
 8013086:	003b      	movs	r3, r7
 8013088:	0039      	movs	r1, r7
 801308a:	f7f0 f8db 	bl	8003244 <__aeabi_dcmpun>
 801308e:	2800      	cmp	r0, #0
 8013090:	d004      	beq.n	801309c <_scanf_float+0x404>
 8013092:	4807      	ldr	r0, [pc, #28]	@ (80130b0 <_scanf_float+0x418>)
 8013094:	f7fe ff6e 	bl	8011f74 <nanf>
 8013098:	6028      	str	r0, [r5, #0]
 801309a:	e7cc      	b.n	8013036 <_scanf_float+0x39e>
 801309c:	0030      	movs	r0, r6
 801309e:	0039      	movs	r1, r7
 80130a0:	f7f0 f9c8 	bl	8003434 <__aeabi_d2f>
 80130a4:	e7f8      	b.n	8013098 <_scanf_float+0x400>
 80130a6:	2300      	movs	r3, #0
 80130a8:	9301      	str	r3, [sp, #4]
 80130aa:	e62d      	b.n	8012d08 <_scanf_float+0x70>
 80130ac:	08017700 	.word	0x08017700
 80130b0:	08017a95 	.word	0x08017a95

080130b4 <std>:
 80130b4:	2300      	movs	r3, #0
 80130b6:	b510      	push	{r4, lr}
 80130b8:	0004      	movs	r4, r0
 80130ba:	6003      	str	r3, [r0, #0]
 80130bc:	6043      	str	r3, [r0, #4]
 80130be:	6083      	str	r3, [r0, #8]
 80130c0:	8181      	strh	r1, [r0, #12]
 80130c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80130c4:	81c2      	strh	r2, [r0, #14]
 80130c6:	6103      	str	r3, [r0, #16]
 80130c8:	6143      	str	r3, [r0, #20]
 80130ca:	6183      	str	r3, [r0, #24]
 80130cc:	0019      	movs	r1, r3
 80130ce:	2208      	movs	r2, #8
 80130d0:	305c      	adds	r0, #92	@ 0x5c
 80130d2:	f000 f98b 	bl	80133ec <memset>
 80130d6:	4b0b      	ldr	r3, [pc, #44]	@ (8013104 <std+0x50>)
 80130d8:	6224      	str	r4, [r4, #32]
 80130da:	6263      	str	r3, [r4, #36]	@ 0x24
 80130dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013108 <std+0x54>)
 80130de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80130e0:	4b0a      	ldr	r3, [pc, #40]	@ (801310c <std+0x58>)
 80130e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80130e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013110 <std+0x5c>)
 80130e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80130e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013114 <std+0x60>)
 80130ea:	429c      	cmp	r4, r3
 80130ec:	d005      	beq.n	80130fa <std+0x46>
 80130ee:	4b0a      	ldr	r3, [pc, #40]	@ (8013118 <std+0x64>)
 80130f0:	429c      	cmp	r4, r3
 80130f2:	d002      	beq.n	80130fa <std+0x46>
 80130f4:	4b09      	ldr	r3, [pc, #36]	@ (801311c <std+0x68>)
 80130f6:	429c      	cmp	r4, r3
 80130f8:	d103      	bne.n	8013102 <std+0x4e>
 80130fa:	0020      	movs	r0, r4
 80130fc:	3058      	adds	r0, #88	@ 0x58
 80130fe:	f000 fa59 	bl	80135b4 <__retarget_lock_init_recursive>
 8013102:	bd10      	pop	{r4, pc}
 8013104:	080132e5 	.word	0x080132e5
 8013108:	0801330d 	.word	0x0801330d
 801310c:	08013345 	.word	0x08013345
 8013110:	08013371 	.word	0x08013371
 8013114:	20007144 	.word	0x20007144
 8013118:	200071ac 	.word	0x200071ac
 801311c:	20007214 	.word	0x20007214

08013120 <stdio_exit_handler>:
 8013120:	b510      	push	{r4, lr}
 8013122:	4a03      	ldr	r2, [pc, #12]	@ (8013130 <stdio_exit_handler+0x10>)
 8013124:	4903      	ldr	r1, [pc, #12]	@ (8013134 <stdio_exit_handler+0x14>)
 8013126:	4804      	ldr	r0, [pc, #16]	@ (8013138 <stdio_exit_handler+0x18>)
 8013128:	f000 f86c 	bl	8013204 <_fwalk_sglue>
 801312c:	bd10      	pop	{r4, pc}
 801312e:	46c0      	nop			@ (mov r8, r8)
 8013130:	20000088 	.word	0x20000088
 8013134:	08015f91 	.word	0x08015f91
 8013138:	20000098 	.word	0x20000098

0801313c <cleanup_stdio>:
 801313c:	6841      	ldr	r1, [r0, #4]
 801313e:	4b0b      	ldr	r3, [pc, #44]	@ (801316c <cleanup_stdio+0x30>)
 8013140:	b510      	push	{r4, lr}
 8013142:	0004      	movs	r4, r0
 8013144:	4299      	cmp	r1, r3
 8013146:	d001      	beq.n	801314c <cleanup_stdio+0x10>
 8013148:	f002 ff22 	bl	8015f90 <_fflush_r>
 801314c:	68a1      	ldr	r1, [r4, #8]
 801314e:	4b08      	ldr	r3, [pc, #32]	@ (8013170 <cleanup_stdio+0x34>)
 8013150:	4299      	cmp	r1, r3
 8013152:	d002      	beq.n	801315a <cleanup_stdio+0x1e>
 8013154:	0020      	movs	r0, r4
 8013156:	f002 ff1b 	bl	8015f90 <_fflush_r>
 801315a:	68e1      	ldr	r1, [r4, #12]
 801315c:	4b05      	ldr	r3, [pc, #20]	@ (8013174 <cleanup_stdio+0x38>)
 801315e:	4299      	cmp	r1, r3
 8013160:	d002      	beq.n	8013168 <cleanup_stdio+0x2c>
 8013162:	0020      	movs	r0, r4
 8013164:	f002 ff14 	bl	8015f90 <_fflush_r>
 8013168:	bd10      	pop	{r4, pc}
 801316a:	46c0      	nop			@ (mov r8, r8)
 801316c:	20007144 	.word	0x20007144
 8013170:	200071ac 	.word	0x200071ac
 8013174:	20007214 	.word	0x20007214

08013178 <global_stdio_init.part.0>:
 8013178:	b510      	push	{r4, lr}
 801317a:	4b09      	ldr	r3, [pc, #36]	@ (80131a0 <global_stdio_init.part.0+0x28>)
 801317c:	4a09      	ldr	r2, [pc, #36]	@ (80131a4 <global_stdio_init.part.0+0x2c>)
 801317e:	2104      	movs	r1, #4
 8013180:	601a      	str	r2, [r3, #0]
 8013182:	4809      	ldr	r0, [pc, #36]	@ (80131a8 <global_stdio_init.part.0+0x30>)
 8013184:	2200      	movs	r2, #0
 8013186:	f7ff ff95 	bl	80130b4 <std>
 801318a:	2201      	movs	r2, #1
 801318c:	2109      	movs	r1, #9
 801318e:	4807      	ldr	r0, [pc, #28]	@ (80131ac <global_stdio_init.part.0+0x34>)
 8013190:	f7ff ff90 	bl	80130b4 <std>
 8013194:	2202      	movs	r2, #2
 8013196:	2112      	movs	r1, #18
 8013198:	4805      	ldr	r0, [pc, #20]	@ (80131b0 <global_stdio_init.part.0+0x38>)
 801319a:	f7ff ff8b 	bl	80130b4 <std>
 801319e:	bd10      	pop	{r4, pc}
 80131a0:	2000727c 	.word	0x2000727c
 80131a4:	08013121 	.word	0x08013121
 80131a8:	20007144 	.word	0x20007144
 80131ac:	200071ac 	.word	0x200071ac
 80131b0:	20007214 	.word	0x20007214

080131b4 <__sfp_lock_acquire>:
 80131b4:	b510      	push	{r4, lr}
 80131b6:	4802      	ldr	r0, [pc, #8]	@ (80131c0 <__sfp_lock_acquire+0xc>)
 80131b8:	f000 f9fd 	bl	80135b6 <__retarget_lock_acquire_recursive>
 80131bc:	bd10      	pop	{r4, pc}
 80131be:	46c0      	nop			@ (mov r8, r8)
 80131c0:	20007285 	.word	0x20007285

080131c4 <__sfp_lock_release>:
 80131c4:	b510      	push	{r4, lr}
 80131c6:	4802      	ldr	r0, [pc, #8]	@ (80131d0 <__sfp_lock_release+0xc>)
 80131c8:	f000 f9f6 	bl	80135b8 <__retarget_lock_release_recursive>
 80131cc:	bd10      	pop	{r4, pc}
 80131ce:	46c0      	nop			@ (mov r8, r8)
 80131d0:	20007285 	.word	0x20007285

080131d4 <__sinit>:
 80131d4:	b510      	push	{r4, lr}
 80131d6:	0004      	movs	r4, r0
 80131d8:	f7ff ffec 	bl	80131b4 <__sfp_lock_acquire>
 80131dc:	6a23      	ldr	r3, [r4, #32]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d002      	beq.n	80131e8 <__sinit+0x14>
 80131e2:	f7ff ffef 	bl	80131c4 <__sfp_lock_release>
 80131e6:	bd10      	pop	{r4, pc}
 80131e8:	4b04      	ldr	r3, [pc, #16]	@ (80131fc <__sinit+0x28>)
 80131ea:	6223      	str	r3, [r4, #32]
 80131ec:	4b04      	ldr	r3, [pc, #16]	@ (8013200 <__sinit+0x2c>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d1f6      	bne.n	80131e2 <__sinit+0xe>
 80131f4:	f7ff ffc0 	bl	8013178 <global_stdio_init.part.0>
 80131f8:	e7f3      	b.n	80131e2 <__sinit+0xe>
 80131fa:	46c0      	nop			@ (mov r8, r8)
 80131fc:	0801313d 	.word	0x0801313d
 8013200:	2000727c 	.word	0x2000727c

08013204 <_fwalk_sglue>:
 8013204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013206:	0014      	movs	r4, r2
 8013208:	2600      	movs	r6, #0
 801320a:	9000      	str	r0, [sp, #0]
 801320c:	9101      	str	r1, [sp, #4]
 801320e:	68a5      	ldr	r5, [r4, #8]
 8013210:	6867      	ldr	r7, [r4, #4]
 8013212:	3f01      	subs	r7, #1
 8013214:	d504      	bpl.n	8013220 <_fwalk_sglue+0x1c>
 8013216:	6824      	ldr	r4, [r4, #0]
 8013218:	2c00      	cmp	r4, #0
 801321a:	d1f8      	bne.n	801320e <_fwalk_sglue+0xa>
 801321c:	0030      	movs	r0, r6
 801321e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013220:	89ab      	ldrh	r3, [r5, #12]
 8013222:	2b01      	cmp	r3, #1
 8013224:	d908      	bls.n	8013238 <_fwalk_sglue+0x34>
 8013226:	220e      	movs	r2, #14
 8013228:	5eab      	ldrsh	r3, [r5, r2]
 801322a:	3301      	adds	r3, #1
 801322c:	d004      	beq.n	8013238 <_fwalk_sglue+0x34>
 801322e:	0029      	movs	r1, r5
 8013230:	9800      	ldr	r0, [sp, #0]
 8013232:	9b01      	ldr	r3, [sp, #4]
 8013234:	4798      	blx	r3
 8013236:	4306      	orrs	r6, r0
 8013238:	3568      	adds	r5, #104	@ 0x68
 801323a:	e7ea      	b.n	8013212 <_fwalk_sglue+0xe>

0801323c <sniprintf>:
 801323c:	b40c      	push	{r2, r3}
 801323e:	b530      	push	{r4, r5, lr}
 8013240:	4b17      	ldr	r3, [pc, #92]	@ (80132a0 <sniprintf+0x64>)
 8013242:	000c      	movs	r4, r1
 8013244:	681d      	ldr	r5, [r3, #0]
 8013246:	b09d      	sub	sp, #116	@ 0x74
 8013248:	2900      	cmp	r1, #0
 801324a:	da08      	bge.n	801325e <sniprintf+0x22>
 801324c:	238b      	movs	r3, #139	@ 0x8b
 801324e:	2001      	movs	r0, #1
 8013250:	602b      	str	r3, [r5, #0]
 8013252:	4240      	negs	r0, r0
 8013254:	b01d      	add	sp, #116	@ 0x74
 8013256:	bc30      	pop	{r4, r5}
 8013258:	bc08      	pop	{r3}
 801325a:	b002      	add	sp, #8
 801325c:	4718      	bx	r3
 801325e:	2382      	movs	r3, #130	@ 0x82
 8013260:	466a      	mov	r2, sp
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	8293      	strh	r3, [r2, #20]
 8013266:	2300      	movs	r3, #0
 8013268:	9002      	str	r0, [sp, #8]
 801326a:	9006      	str	r0, [sp, #24]
 801326c:	4299      	cmp	r1, r3
 801326e:	d000      	beq.n	8013272 <sniprintf+0x36>
 8013270:	1e4b      	subs	r3, r1, #1
 8013272:	9304      	str	r3, [sp, #16]
 8013274:	9307      	str	r3, [sp, #28]
 8013276:	2301      	movs	r3, #1
 8013278:	466a      	mov	r2, sp
 801327a:	425b      	negs	r3, r3
 801327c:	82d3      	strh	r3, [r2, #22]
 801327e:	0028      	movs	r0, r5
 8013280:	ab21      	add	r3, sp, #132	@ 0x84
 8013282:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013284:	a902      	add	r1, sp, #8
 8013286:	9301      	str	r3, [sp, #4]
 8013288:	f002 fcfe 	bl	8015c88 <_svfiprintf_r>
 801328c:	1c43      	adds	r3, r0, #1
 801328e:	da01      	bge.n	8013294 <sniprintf+0x58>
 8013290:	238b      	movs	r3, #139	@ 0x8b
 8013292:	602b      	str	r3, [r5, #0]
 8013294:	2c00      	cmp	r4, #0
 8013296:	d0dd      	beq.n	8013254 <sniprintf+0x18>
 8013298:	2200      	movs	r2, #0
 801329a:	9b02      	ldr	r3, [sp, #8]
 801329c:	701a      	strb	r2, [r3, #0]
 801329e:	e7d9      	b.n	8013254 <sniprintf+0x18>
 80132a0:	20000094 	.word	0x20000094

080132a4 <siprintf>:
 80132a4:	b40e      	push	{r1, r2, r3}
 80132a6:	b500      	push	{lr}
 80132a8:	490b      	ldr	r1, [pc, #44]	@ (80132d8 <siprintf+0x34>)
 80132aa:	b09c      	sub	sp, #112	@ 0x70
 80132ac:	ab1d      	add	r3, sp, #116	@ 0x74
 80132ae:	9002      	str	r0, [sp, #8]
 80132b0:	9006      	str	r0, [sp, #24]
 80132b2:	9107      	str	r1, [sp, #28]
 80132b4:	9104      	str	r1, [sp, #16]
 80132b6:	4809      	ldr	r0, [pc, #36]	@ (80132dc <siprintf+0x38>)
 80132b8:	4909      	ldr	r1, [pc, #36]	@ (80132e0 <siprintf+0x3c>)
 80132ba:	cb04      	ldmia	r3!, {r2}
 80132bc:	9105      	str	r1, [sp, #20]
 80132be:	6800      	ldr	r0, [r0, #0]
 80132c0:	a902      	add	r1, sp, #8
 80132c2:	9301      	str	r3, [sp, #4]
 80132c4:	f002 fce0 	bl	8015c88 <_svfiprintf_r>
 80132c8:	2200      	movs	r2, #0
 80132ca:	9b02      	ldr	r3, [sp, #8]
 80132cc:	701a      	strb	r2, [r3, #0]
 80132ce:	b01c      	add	sp, #112	@ 0x70
 80132d0:	bc08      	pop	{r3}
 80132d2:	b003      	add	sp, #12
 80132d4:	4718      	bx	r3
 80132d6:	46c0      	nop			@ (mov r8, r8)
 80132d8:	7fffffff 	.word	0x7fffffff
 80132dc:	20000094 	.word	0x20000094
 80132e0:	ffff0208 	.word	0xffff0208

080132e4 <__sread>:
 80132e4:	b570      	push	{r4, r5, r6, lr}
 80132e6:	000c      	movs	r4, r1
 80132e8:	250e      	movs	r5, #14
 80132ea:	5f49      	ldrsh	r1, [r1, r5]
 80132ec:	f000 f910 	bl	8013510 <_read_r>
 80132f0:	2800      	cmp	r0, #0
 80132f2:	db03      	blt.n	80132fc <__sread+0x18>
 80132f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80132f6:	181b      	adds	r3, r3, r0
 80132f8:	6563      	str	r3, [r4, #84]	@ 0x54
 80132fa:	bd70      	pop	{r4, r5, r6, pc}
 80132fc:	89a3      	ldrh	r3, [r4, #12]
 80132fe:	4a02      	ldr	r2, [pc, #8]	@ (8013308 <__sread+0x24>)
 8013300:	4013      	ands	r3, r2
 8013302:	81a3      	strh	r3, [r4, #12]
 8013304:	e7f9      	b.n	80132fa <__sread+0x16>
 8013306:	46c0      	nop			@ (mov r8, r8)
 8013308:	ffffefff 	.word	0xffffefff

0801330c <__swrite>:
 801330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330e:	001f      	movs	r7, r3
 8013310:	898b      	ldrh	r3, [r1, #12]
 8013312:	0005      	movs	r5, r0
 8013314:	000c      	movs	r4, r1
 8013316:	0016      	movs	r6, r2
 8013318:	05db      	lsls	r3, r3, #23
 801331a:	d505      	bpl.n	8013328 <__swrite+0x1c>
 801331c:	230e      	movs	r3, #14
 801331e:	5ec9      	ldrsh	r1, [r1, r3]
 8013320:	2200      	movs	r2, #0
 8013322:	2302      	movs	r3, #2
 8013324:	f000 f8e0 	bl	80134e8 <_lseek_r>
 8013328:	89a3      	ldrh	r3, [r4, #12]
 801332a:	4a05      	ldr	r2, [pc, #20]	@ (8013340 <__swrite+0x34>)
 801332c:	0028      	movs	r0, r5
 801332e:	4013      	ands	r3, r2
 8013330:	81a3      	strh	r3, [r4, #12]
 8013332:	0032      	movs	r2, r6
 8013334:	230e      	movs	r3, #14
 8013336:	5ee1      	ldrsh	r1, [r4, r3]
 8013338:	003b      	movs	r3, r7
 801333a:	f000 f8fd 	bl	8013538 <_write_r>
 801333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013340:	ffffefff 	.word	0xffffefff

08013344 <__sseek>:
 8013344:	b570      	push	{r4, r5, r6, lr}
 8013346:	000c      	movs	r4, r1
 8013348:	250e      	movs	r5, #14
 801334a:	5f49      	ldrsh	r1, [r1, r5]
 801334c:	f000 f8cc 	bl	80134e8 <_lseek_r>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	1c42      	adds	r2, r0, #1
 8013354:	d103      	bne.n	801335e <__sseek+0x1a>
 8013356:	4a05      	ldr	r2, [pc, #20]	@ (801336c <__sseek+0x28>)
 8013358:	4013      	ands	r3, r2
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	bd70      	pop	{r4, r5, r6, pc}
 801335e:	2280      	movs	r2, #128	@ 0x80
 8013360:	0152      	lsls	r2, r2, #5
 8013362:	4313      	orrs	r3, r2
 8013364:	81a3      	strh	r3, [r4, #12]
 8013366:	6560      	str	r0, [r4, #84]	@ 0x54
 8013368:	e7f8      	b.n	801335c <__sseek+0x18>
 801336a:	46c0      	nop			@ (mov r8, r8)
 801336c:	ffffefff 	.word	0xffffefff

08013370 <__sclose>:
 8013370:	b510      	push	{r4, lr}
 8013372:	230e      	movs	r3, #14
 8013374:	5ec9      	ldrsh	r1, [r1, r3]
 8013376:	f000 f845 	bl	8013404 <_close_r>
 801337a:	bd10      	pop	{r4, pc}

0801337c <_vsniprintf_r>:
 801337c:	b530      	push	{r4, r5, lr}
 801337e:	0014      	movs	r4, r2
 8013380:	0005      	movs	r5, r0
 8013382:	001a      	movs	r2, r3
 8013384:	b09b      	sub	sp, #108	@ 0x6c
 8013386:	2c00      	cmp	r4, #0
 8013388:	da05      	bge.n	8013396 <_vsniprintf_r+0x1a>
 801338a:	238b      	movs	r3, #139	@ 0x8b
 801338c:	6003      	str	r3, [r0, #0]
 801338e:	2001      	movs	r0, #1
 8013390:	4240      	negs	r0, r0
 8013392:	b01b      	add	sp, #108	@ 0x6c
 8013394:	bd30      	pop	{r4, r5, pc}
 8013396:	2382      	movs	r3, #130	@ 0x82
 8013398:	4668      	mov	r0, sp
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	8183      	strh	r3, [r0, #12]
 801339e:	2300      	movs	r3, #0
 80133a0:	9100      	str	r1, [sp, #0]
 80133a2:	9104      	str	r1, [sp, #16]
 80133a4:	429c      	cmp	r4, r3
 80133a6:	d000      	beq.n	80133aa <_vsniprintf_r+0x2e>
 80133a8:	1e63      	subs	r3, r4, #1
 80133aa:	9302      	str	r3, [sp, #8]
 80133ac:	9305      	str	r3, [sp, #20]
 80133ae:	2301      	movs	r3, #1
 80133b0:	4669      	mov	r1, sp
 80133b2:	425b      	negs	r3, r3
 80133b4:	81cb      	strh	r3, [r1, #14]
 80133b6:	0028      	movs	r0, r5
 80133b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80133ba:	f002 fc65 	bl	8015c88 <_svfiprintf_r>
 80133be:	1c43      	adds	r3, r0, #1
 80133c0:	da01      	bge.n	80133c6 <_vsniprintf_r+0x4a>
 80133c2:	238b      	movs	r3, #139	@ 0x8b
 80133c4:	602b      	str	r3, [r5, #0]
 80133c6:	2c00      	cmp	r4, #0
 80133c8:	d0e3      	beq.n	8013392 <_vsniprintf_r+0x16>
 80133ca:	2200      	movs	r2, #0
 80133cc:	9b00      	ldr	r3, [sp, #0]
 80133ce:	701a      	strb	r2, [r3, #0]
 80133d0:	e7df      	b.n	8013392 <_vsniprintf_r+0x16>
	...

080133d4 <vsniprintf>:
 80133d4:	b513      	push	{r0, r1, r4, lr}
 80133d6:	4c04      	ldr	r4, [pc, #16]	@ (80133e8 <vsniprintf+0x14>)
 80133d8:	9300      	str	r3, [sp, #0]
 80133da:	0013      	movs	r3, r2
 80133dc:	000a      	movs	r2, r1
 80133de:	0001      	movs	r1, r0
 80133e0:	6820      	ldr	r0, [r4, #0]
 80133e2:	f7ff ffcb 	bl	801337c <_vsniprintf_r>
 80133e6:	bd16      	pop	{r1, r2, r4, pc}
 80133e8:	20000094 	.word	0x20000094

080133ec <memset>:
 80133ec:	0003      	movs	r3, r0
 80133ee:	1882      	adds	r2, r0, r2
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d100      	bne.n	80133f6 <memset+0xa>
 80133f4:	4770      	bx	lr
 80133f6:	7019      	strb	r1, [r3, #0]
 80133f8:	3301      	adds	r3, #1
 80133fa:	e7f9      	b.n	80133f0 <memset+0x4>

080133fc <_localeconv_r>:
 80133fc:	4800      	ldr	r0, [pc, #0]	@ (8013400 <_localeconv_r+0x4>)
 80133fe:	4770      	bx	lr
 8013400:	200001d4 	.word	0x200001d4

08013404 <_close_r>:
 8013404:	2300      	movs	r3, #0
 8013406:	b570      	push	{r4, r5, r6, lr}
 8013408:	4d06      	ldr	r5, [pc, #24]	@ (8013424 <_close_r+0x20>)
 801340a:	0004      	movs	r4, r0
 801340c:	0008      	movs	r0, r1
 801340e:	602b      	str	r3, [r5, #0]
 8013410:	f7f4 fb3c 	bl	8007a8c <_close>
 8013414:	1c43      	adds	r3, r0, #1
 8013416:	d103      	bne.n	8013420 <_close_r+0x1c>
 8013418:	682b      	ldr	r3, [r5, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d000      	beq.n	8013420 <_close_r+0x1c>
 801341e:	6023      	str	r3, [r4, #0]
 8013420:	bd70      	pop	{r4, r5, r6, pc}
 8013422:	46c0      	nop			@ (mov r8, r8)
 8013424:	20007280 	.word	0x20007280

08013428 <_reclaim_reent>:
 8013428:	4b2e      	ldr	r3, [pc, #184]	@ (80134e4 <_reclaim_reent+0xbc>)
 801342a:	b570      	push	{r4, r5, r6, lr}
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	0004      	movs	r4, r0
 8013430:	4283      	cmp	r3, r0
 8013432:	d04f      	beq.n	80134d4 <_reclaim_reent+0xac>
 8013434:	69c3      	ldr	r3, [r0, #28]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d017      	beq.n	801346a <_reclaim_reent+0x42>
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00d      	beq.n	801345c <_reclaim_reent+0x34>
 8013440:	2500      	movs	r5, #0
 8013442:	69e3      	ldr	r3, [r4, #28]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	5959      	ldr	r1, [r3, r5]
 8013448:	2900      	cmp	r1, #0
 801344a:	d144      	bne.n	80134d6 <_reclaim_reent+0xae>
 801344c:	3504      	adds	r5, #4
 801344e:	2d80      	cmp	r5, #128	@ 0x80
 8013450:	d1f7      	bne.n	8013442 <_reclaim_reent+0x1a>
 8013452:	69e3      	ldr	r3, [r4, #28]
 8013454:	0020      	movs	r0, r4
 8013456:	68d9      	ldr	r1, [r3, #12]
 8013458:	f000 ff46 	bl	80142e8 <_free_r>
 801345c:	69e3      	ldr	r3, [r4, #28]
 801345e:	6819      	ldr	r1, [r3, #0]
 8013460:	2900      	cmp	r1, #0
 8013462:	d002      	beq.n	801346a <_reclaim_reent+0x42>
 8013464:	0020      	movs	r0, r4
 8013466:	f000 ff3f 	bl	80142e8 <_free_r>
 801346a:	6961      	ldr	r1, [r4, #20]
 801346c:	2900      	cmp	r1, #0
 801346e:	d002      	beq.n	8013476 <_reclaim_reent+0x4e>
 8013470:	0020      	movs	r0, r4
 8013472:	f000 ff39 	bl	80142e8 <_free_r>
 8013476:	69e1      	ldr	r1, [r4, #28]
 8013478:	2900      	cmp	r1, #0
 801347a:	d002      	beq.n	8013482 <_reclaim_reent+0x5a>
 801347c:	0020      	movs	r0, r4
 801347e:	f000 ff33 	bl	80142e8 <_free_r>
 8013482:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013484:	2900      	cmp	r1, #0
 8013486:	d002      	beq.n	801348e <_reclaim_reent+0x66>
 8013488:	0020      	movs	r0, r4
 801348a:	f000 ff2d 	bl	80142e8 <_free_r>
 801348e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013490:	2900      	cmp	r1, #0
 8013492:	d002      	beq.n	801349a <_reclaim_reent+0x72>
 8013494:	0020      	movs	r0, r4
 8013496:	f000 ff27 	bl	80142e8 <_free_r>
 801349a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801349c:	2900      	cmp	r1, #0
 801349e:	d002      	beq.n	80134a6 <_reclaim_reent+0x7e>
 80134a0:	0020      	movs	r0, r4
 80134a2:	f000 ff21 	bl	80142e8 <_free_r>
 80134a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80134a8:	2900      	cmp	r1, #0
 80134aa:	d002      	beq.n	80134b2 <_reclaim_reent+0x8a>
 80134ac:	0020      	movs	r0, r4
 80134ae:	f000 ff1b 	bl	80142e8 <_free_r>
 80134b2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80134b4:	2900      	cmp	r1, #0
 80134b6:	d002      	beq.n	80134be <_reclaim_reent+0x96>
 80134b8:	0020      	movs	r0, r4
 80134ba:	f000 ff15 	bl	80142e8 <_free_r>
 80134be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80134c0:	2900      	cmp	r1, #0
 80134c2:	d002      	beq.n	80134ca <_reclaim_reent+0xa2>
 80134c4:	0020      	movs	r0, r4
 80134c6:	f000 ff0f 	bl	80142e8 <_free_r>
 80134ca:	6a23      	ldr	r3, [r4, #32]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d001      	beq.n	80134d4 <_reclaim_reent+0xac>
 80134d0:	0020      	movs	r0, r4
 80134d2:	4798      	blx	r3
 80134d4:	bd70      	pop	{r4, r5, r6, pc}
 80134d6:	680e      	ldr	r6, [r1, #0]
 80134d8:	0020      	movs	r0, r4
 80134da:	f000 ff05 	bl	80142e8 <_free_r>
 80134de:	0031      	movs	r1, r6
 80134e0:	e7b2      	b.n	8013448 <_reclaim_reent+0x20>
 80134e2:	46c0      	nop			@ (mov r8, r8)
 80134e4:	20000094 	.word	0x20000094

080134e8 <_lseek_r>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	0004      	movs	r4, r0
 80134ec:	0008      	movs	r0, r1
 80134ee:	0011      	movs	r1, r2
 80134f0:	001a      	movs	r2, r3
 80134f2:	2300      	movs	r3, #0
 80134f4:	4d05      	ldr	r5, [pc, #20]	@ (801350c <_lseek_r+0x24>)
 80134f6:	602b      	str	r3, [r5, #0]
 80134f8:	f7f4 fae9 	bl	8007ace <_lseek>
 80134fc:	1c43      	adds	r3, r0, #1
 80134fe:	d103      	bne.n	8013508 <_lseek_r+0x20>
 8013500:	682b      	ldr	r3, [r5, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d000      	beq.n	8013508 <_lseek_r+0x20>
 8013506:	6023      	str	r3, [r4, #0]
 8013508:	bd70      	pop	{r4, r5, r6, pc}
 801350a:	46c0      	nop			@ (mov r8, r8)
 801350c:	20007280 	.word	0x20007280

08013510 <_read_r>:
 8013510:	b570      	push	{r4, r5, r6, lr}
 8013512:	0004      	movs	r4, r0
 8013514:	0008      	movs	r0, r1
 8013516:	0011      	movs	r1, r2
 8013518:	001a      	movs	r2, r3
 801351a:	2300      	movs	r3, #0
 801351c:	4d05      	ldr	r5, [pc, #20]	@ (8013534 <_read_r+0x24>)
 801351e:	602b      	str	r3, [r5, #0]
 8013520:	f7f4 fa7b 	bl	8007a1a <_read>
 8013524:	1c43      	adds	r3, r0, #1
 8013526:	d103      	bne.n	8013530 <_read_r+0x20>
 8013528:	682b      	ldr	r3, [r5, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d000      	beq.n	8013530 <_read_r+0x20>
 801352e:	6023      	str	r3, [r4, #0]
 8013530:	bd70      	pop	{r4, r5, r6, pc}
 8013532:	46c0      	nop			@ (mov r8, r8)
 8013534:	20007280 	.word	0x20007280

08013538 <_write_r>:
 8013538:	b570      	push	{r4, r5, r6, lr}
 801353a:	0004      	movs	r4, r0
 801353c:	0008      	movs	r0, r1
 801353e:	0011      	movs	r1, r2
 8013540:	001a      	movs	r2, r3
 8013542:	2300      	movs	r3, #0
 8013544:	4d05      	ldr	r5, [pc, #20]	@ (801355c <_write_r+0x24>)
 8013546:	602b      	str	r3, [r5, #0]
 8013548:	f7f4 fa84 	bl	8007a54 <_write>
 801354c:	1c43      	adds	r3, r0, #1
 801354e:	d103      	bne.n	8013558 <_write_r+0x20>
 8013550:	682b      	ldr	r3, [r5, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d000      	beq.n	8013558 <_write_r+0x20>
 8013556:	6023      	str	r3, [r4, #0]
 8013558:	bd70      	pop	{r4, r5, r6, pc}
 801355a:	46c0      	nop			@ (mov r8, r8)
 801355c:	20007280 	.word	0x20007280

08013560 <__errno>:
 8013560:	4b01      	ldr	r3, [pc, #4]	@ (8013568 <__errno+0x8>)
 8013562:	6818      	ldr	r0, [r3, #0]
 8013564:	4770      	bx	lr
 8013566:	46c0      	nop			@ (mov r8, r8)
 8013568:	20000094 	.word	0x20000094

0801356c <__libc_init_array>:
 801356c:	b570      	push	{r4, r5, r6, lr}
 801356e:	2600      	movs	r6, #0
 8013570:	4c0c      	ldr	r4, [pc, #48]	@ (80135a4 <__libc_init_array+0x38>)
 8013572:	4d0d      	ldr	r5, [pc, #52]	@ (80135a8 <__libc_init_array+0x3c>)
 8013574:	1b64      	subs	r4, r4, r5
 8013576:	10a4      	asrs	r4, r4, #2
 8013578:	42a6      	cmp	r6, r4
 801357a:	d109      	bne.n	8013590 <__libc_init_array+0x24>
 801357c:	2600      	movs	r6, #0
 801357e:	f003 fc3f 	bl	8016e00 <_init>
 8013582:	4c0a      	ldr	r4, [pc, #40]	@ (80135ac <__libc_init_array+0x40>)
 8013584:	4d0a      	ldr	r5, [pc, #40]	@ (80135b0 <__libc_init_array+0x44>)
 8013586:	1b64      	subs	r4, r4, r5
 8013588:	10a4      	asrs	r4, r4, #2
 801358a:	42a6      	cmp	r6, r4
 801358c:	d105      	bne.n	801359a <__libc_init_array+0x2e>
 801358e:	bd70      	pop	{r4, r5, r6, pc}
 8013590:	00b3      	lsls	r3, r6, #2
 8013592:	58eb      	ldr	r3, [r5, r3]
 8013594:	4798      	blx	r3
 8013596:	3601      	adds	r6, #1
 8013598:	e7ee      	b.n	8013578 <__libc_init_array+0xc>
 801359a:	00b3      	lsls	r3, r6, #2
 801359c:	58eb      	ldr	r3, [r5, r3]
 801359e:	4798      	blx	r3
 80135a0:	3601      	adds	r6, #1
 80135a2:	e7f2      	b.n	801358a <__libc_init_array+0x1e>
 80135a4:	08017b00 	.word	0x08017b00
 80135a8:	08017b00 	.word	0x08017b00
 80135ac:	08017b08 	.word	0x08017b08
 80135b0:	08017b00 	.word	0x08017b00

080135b4 <__retarget_lock_init_recursive>:
 80135b4:	4770      	bx	lr

080135b6 <__retarget_lock_acquire_recursive>:
 80135b6:	4770      	bx	lr

080135b8 <__retarget_lock_release_recursive>:
 80135b8:	4770      	bx	lr

080135ba <memchr>:
 80135ba:	b2c9      	uxtb	r1, r1
 80135bc:	1882      	adds	r2, r0, r2
 80135be:	4290      	cmp	r0, r2
 80135c0:	d101      	bne.n	80135c6 <memchr+0xc>
 80135c2:	2000      	movs	r0, #0
 80135c4:	4770      	bx	lr
 80135c6:	7803      	ldrb	r3, [r0, #0]
 80135c8:	428b      	cmp	r3, r1
 80135ca:	d0fb      	beq.n	80135c4 <memchr+0xa>
 80135cc:	3001      	adds	r0, #1
 80135ce:	e7f6      	b.n	80135be <memchr+0x4>

080135d0 <memcpy>:
 80135d0:	2300      	movs	r3, #0
 80135d2:	b510      	push	{r4, lr}
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d100      	bne.n	80135da <memcpy+0xa>
 80135d8:	bd10      	pop	{r4, pc}
 80135da:	5ccc      	ldrb	r4, [r1, r3]
 80135dc:	54c4      	strb	r4, [r0, r3]
 80135de:	3301      	adds	r3, #1
 80135e0:	e7f8      	b.n	80135d4 <memcpy+0x4>

080135e2 <quorem>:
 80135e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135e4:	6902      	ldr	r2, [r0, #16]
 80135e6:	690f      	ldr	r7, [r1, #16]
 80135e8:	b087      	sub	sp, #28
 80135ea:	0006      	movs	r6, r0
 80135ec:	000b      	movs	r3, r1
 80135ee:	2000      	movs	r0, #0
 80135f0:	9102      	str	r1, [sp, #8]
 80135f2:	42ba      	cmp	r2, r7
 80135f4:	db6d      	blt.n	80136d2 <quorem+0xf0>
 80135f6:	3f01      	subs	r7, #1
 80135f8:	00bc      	lsls	r4, r7, #2
 80135fa:	3314      	adds	r3, #20
 80135fc:	9305      	str	r3, [sp, #20]
 80135fe:	191b      	adds	r3, r3, r4
 8013600:	9303      	str	r3, [sp, #12]
 8013602:	0033      	movs	r3, r6
 8013604:	3314      	adds	r3, #20
 8013606:	191c      	adds	r4, r3, r4
 8013608:	9301      	str	r3, [sp, #4]
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	9304      	str	r3, [sp, #16]
 801360e:	9b03      	ldr	r3, [sp, #12]
 8013610:	9804      	ldr	r0, [sp, #16]
 8013612:	681d      	ldr	r5, [r3, #0]
 8013614:	3501      	adds	r5, #1
 8013616:	0029      	movs	r1, r5
 8013618:	f7ec fd92 	bl	8000140 <__udivsi3>
 801361c:	9b04      	ldr	r3, [sp, #16]
 801361e:	9000      	str	r0, [sp, #0]
 8013620:	42ab      	cmp	r3, r5
 8013622:	d32b      	bcc.n	801367c <quorem+0x9a>
 8013624:	9b05      	ldr	r3, [sp, #20]
 8013626:	9d01      	ldr	r5, [sp, #4]
 8013628:	469c      	mov	ip, r3
 801362a:	2300      	movs	r3, #0
 801362c:	9305      	str	r3, [sp, #20]
 801362e:	9304      	str	r3, [sp, #16]
 8013630:	4662      	mov	r2, ip
 8013632:	ca08      	ldmia	r2!, {r3}
 8013634:	6828      	ldr	r0, [r5, #0]
 8013636:	4694      	mov	ip, r2
 8013638:	9a00      	ldr	r2, [sp, #0]
 801363a:	b299      	uxth	r1, r3
 801363c:	4351      	muls	r1, r2
 801363e:	9a05      	ldr	r2, [sp, #20]
 8013640:	0c1b      	lsrs	r3, r3, #16
 8013642:	1889      	adds	r1, r1, r2
 8013644:	9a00      	ldr	r2, [sp, #0]
 8013646:	4353      	muls	r3, r2
 8013648:	0c0a      	lsrs	r2, r1, #16
 801364a:	189b      	adds	r3, r3, r2
 801364c:	0c1a      	lsrs	r2, r3, #16
 801364e:	b289      	uxth	r1, r1
 8013650:	9205      	str	r2, [sp, #20]
 8013652:	b282      	uxth	r2, r0
 8013654:	1a52      	subs	r2, r2, r1
 8013656:	9904      	ldr	r1, [sp, #16]
 8013658:	0c00      	lsrs	r0, r0, #16
 801365a:	1852      	adds	r2, r2, r1
 801365c:	b29b      	uxth	r3, r3
 801365e:	1411      	asrs	r1, r2, #16
 8013660:	1ac3      	subs	r3, r0, r3
 8013662:	185b      	adds	r3, r3, r1
 8013664:	1419      	asrs	r1, r3, #16
 8013666:	b292      	uxth	r2, r2
 8013668:	041b      	lsls	r3, r3, #16
 801366a:	431a      	orrs	r2, r3
 801366c:	9b03      	ldr	r3, [sp, #12]
 801366e:	9104      	str	r1, [sp, #16]
 8013670:	c504      	stmia	r5!, {r2}
 8013672:	4563      	cmp	r3, ip
 8013674:	d2dc      	bcs.n	8013630 <quorem+0x4e>
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d030      	beq.n	80136de <quorem+0xfc>
 801367c:	0030      	movs	r0, r6
 801367e:	9902      	ldr	r1, [sp, #8]
 8013680:	f001 fa12 	bl	8014aa8 <__mcmp>
 8013684:	2800      	cmp	r0, #0
 8013686:	db23      	blt.n	80136d0 <quorem+0xee>
 8013688:	0034      	movs	r4, r6
 801368a:	2500      	movs	r5, #0
 801368c:	9902      	ldr	r1, [sp, #8]
 801368e:	3414      	adds	r4, #20
 8013690:	3114      	adds	r1, #20
 8013692:	6823      	ldr	r3, [r4, #0]
 8013694:	c901      	ldmia	r1!, {r0}
 8013696:	9302      	str	r3, [sp, #8]
 8013698:	466b      	mov	r3, sp
 801369a:	891b      	ldrh	r3, [r3, #8]
 801369c:	b282      	uxth	r2, r0
 801369e:	1a9a      	subs	r2, r3, r2
 80136a0:	9b02      	ldr	r3, [sp, #8]
 80136a2:	1952      	adds	r2, r2, r5
 80136a4:	0c00      	lsrs	r0, r0, #16
 80136a6:	0c1b      	lsrs	r3, r3, #16
 80136a8:	1a1b      	subs	r3, r3, r0
 80136aa:	1410      	asrs	r0, r2, #16
 80136ac:	181b      	adds	r3, r3, r0
 80136ae:	141d      	asrs	r5, r3, #16
 80136b0:	b292      	uxth	r2, r2
 80136b2:	041b      	lsls	r3, r3, #16
 80136b4:	431a      	orrs	r2, r3
 80136b6:	9b03      	ldr	r3, [sp, #12]
 80136b8:	c404      	stmia	r4!, {r2}
 80136ba:	428b      	cmp	r3, r1
 80136bc:	d2e9      	bcs.n	8013692 <quorem+0xb0>
 80136be:	9a01      	ldr	r2, [sp, #4]
 80136c0:	00bb      	lsls	r3, r7, #2
 80136c2:	18d3      	adds	r3, r2, r3
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	d013      	beq.n	80136f2 <quorem+0x110>
 80136ca:	9b00      	ldr	r3, [sp, #0]
 80136cc:	3301      	adds	r3, #1
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	9800      	ldr	r0, [sp, #0]
 80136d2:	b007      	add	sp, #28
 80136d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d104      	bne.n	80136e6 <quorem+0x104>
 80136dc:	3f01      	subs	r7, #1
 80136de:	9b01      	ldr	r3, [sp, #4]
 80136e0:	3c04      	subs	r4, #4
 80136e2:	42a3      	cmp	r3, r4
 80136e4:	d3f7      	bcc.n	80136d6 <quorem+0xf4>
 80136e6:	6137      	str	r7, [r6, #16]
 80136e8:	e7c8      	b.n	801367c <quorem+0x9a>
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	2a00      	cmp	r2, #0
 80136ee:	d104      	bne.n	80136fa <quorem+0x118>
 80136f0:	3f01      	subs	r7, #1
 80136f2:	9a01      	ldr	r2, [sp, #4]
 80136f4:	3b04      	subs	r3, #4
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d3f7      	bcc.n	80136ea <quorem+0x108>
 80136fa:	6137      	str	r7, [r6, #16]
 80136fc:	e7e5      	b.n	80136ca <quorem+0xe8>
	...

08013700 <_dtoa_r>:
 8013700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013702:	0014      	movs	r4, r2
 8013704:	001d      	movs	r5, r3
 8013706:	69c6      	ldr	r6, [r0, #28]
 8013708:	b09d      	sub	sp, #116	@ 0x74
 801370a:	940a      	str	r4, [sp, #40]	@ 0x28
 801370c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801370e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8013710:	9003      	str	r0, [sp, #12]
 8013712:	2e00      	cmp	r6, #0
 8013714:	d10f      	bne.n	8013736 <_dtoa_r+0x36>
 8013716:	2010      	movs	r0, #16
 8013718:	f000 fe30 	bl	801437c <malloc>
 801371c:	9b03      	ldr	r3, [sp, #12]
 801371e:	1e02      	subs	r2, r0, #0
 8013720:	61d8      	str	r0, [r3, #28]
 8013722:	d104      	bne.n	801372e <_dtoa_r+0x2e>
 8013724:	21ef      	movs	r1, #239	@ 0xef
 8013726:	4bc7      	ldr	r3, [pc, #796]	@ (8013a44 <_dtoa_r+0x344>)
 8013728:	48c7      	ldr	r0, [pc, #796]	@ (8013a48 <_dtoa_r+0x348>)
 801372a:	f002 fc99 	bl	8016060 <__assert_func>
 801372e:	6046      	str	r6, [r0, #4]
 8013730:	6086      	str	r6, [r0, #8]
 8013732:	6006      	str	r6, [r0, #0]
 8013734:	60c6      	str	r6, [r0, #12]
 8013736:	9b03      	ldr	r3, [sp, #12]
 8013738:	69db      	ldr	r3, [r3, #28]
 801373a:	6819      	ldr	r1, [r3, #0]
 801373c:	2900      	cmp	r1, #0
 801373e:	d00b      	beq.n	8013758 <_dtoa_r+0x58>
 8013740:	685a      	ldr	r2, [r3, #4]
 8013742:	2301      	movs	r3, #1
 8013744:	4093      	lsls	r3, r2
 8013746:	604a      	str	r2, [r1, #4]
 8013748:	608b      	str	r3, [r1, #8]
 801374a:	9803      	ldr	r0, [sp, #12]
 801374c:	f000 ff16 	bl	801457c <_Bfree>
 8013750:	2200      	movs	r2, #0
 8013752:	9b03      	ldr	r3, [sp, #12]
 8013754:	69db      	ldr	r3, [r3, #28]
 8013756:	601a      	str	r2, [r3, #0]
 8013758:	2d00      	cmp	r5, #0
 801375a:	da1e      	bge.n	801379a <_dtoa_r+0x9a>
 801375c:	2301      	movs	r3, #1
 801375e:	603b      	str	r3, [r7, #0]
 8013760:	006b      	lsls	r3, r5, #1
 8013762:	085b      	lsrs	r3, r3, #1
 8013764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013766:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013768:	4bb8      	ldr	r3, [pc, #736]	@ (8013a4c <_dtoa_r+0x34c>)
 801376a:	4ab8      	ldr	r2, [pc, #736]	@ (8013a4c <_dtoa_r+0x34c>)
 801376c:	403b      	ands	r3, r7
 801376e:	4293      	cmp	r3, r2
 8013770:	d116      	bne.n	80137a0 <_dtoa_r+0xa0>
 8013772:	4bb7      	ldr	r3, [pc, #732]	@ (8013a50 <_dtoa_r+0x350>)
 8013774:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013776:	6013      	str	r3, [r2, #0]
 8013778:	033b      	lsls	r3, r7, #12
 801377a:	0b1b      	lsrs	r3, r3, #12
 801377c:	4323      	orrs	r3, r4
 801377e:	d101      	bne.n	8013784 <_dtoa_r+0x84>
 8013780:	f000 fd83 	bl	801428a <_dtoa_r+0xb8a>
 8013784:	4bb3      	ldr	r3, [pc, #716]	@ (8013a54 <_dtoa_r+0x354>)
 8013786:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013788:	9308      	str	r3, [sp, #32]
 801378a:	2a00      	cmp	r2, #0
 801378c:	d002      	beq.n	8013794 <_dtoa_r+0x94>
 801378e:	4bb2      	ldr	r3, [pc, #712]	@ (8013a58 <_dtoa_r+0x358>)
 8013790:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013792:	6013      	str	r3, [r2, #0]
 8013794:	9808      	ldr	r0, [sp, #32]
 8013796:	b01d      	add	sp, #116	@ 0x74
 8013798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801379a:	2300      	movs	r3, #0
 801379c:	603b      	str	r3, [r7, #0]
 801379e:	e7e2      	b.n	8013766 <_dtoa_r+0x66>
 80137a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137a4:	9212      	str	r2, [sp, #72]	@ 0x48
 80137a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80137aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80137ac:	2200      	movs	r2, #0
 80137ae:	2300      	movs	r3, #0
 80137b0:	f7ec fe4c 	bl	800044c <__aeabi_dcmpeq>
 80137b4:	1e06      	subs	r6, r0, #0
 80137b6:	d00b      	beq.n	80137d0 <_dtoa_r+0xd0>
 80137b8:	2301      	movs	r3, #1
 80137ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80137bc:	6013      	str	r3, [r2, #0]
 80137be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <_dtoa_r+0xca>
 80137c4:	4ba5      	ldr	r3, [pc, #660]	@ (8013a5c <_dtoa_r+0x35c>)
 80137c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80137c8:	6013      	str	r3, [r2, #0]
 80137ca:	4ba5      	ldr	r3, [pc, #660]	@ (8013a60 <_dtoa_r+0x360>)
 80137cc:	9308      	str	r3, [sp, #32]
 80137ce:	e7e1      	b.n	8013794 <_dtoa_r+0x94>
 80137d0:	ab1a      	add	r3, sp, #104	@ 0x68
 80137d2:	9301      	str	r3, [sp, #4]
 80137d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	9803      	ldr	r0, [sp, #12]
 80137da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80137dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80137de:	f001 fa85 	bl	8014cec <__d2b>
 80137e2:	007a      	lsls	r2, r7, #1
 80137e4:	9005      	str	r0, [sp, #20]
 80137e6:	0d52      	lsrs	r2, r2, #21
 80137e8:	d100      	bne.n	80137ec <_dtoa_r+0xec>
 80137ea:	e07b      	b.n	80138e4 <_dtoa_r+0x1e4>
 80137ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80137ee:	9618      	str	r6, [sp, #96]	@ 0x60
 80137f0:	0319      	lsls	r1, r3, #12
 80137f2:	4b9c      	ldr	r3, [pc, #624]	@ (8013a64 <_dtoa_r+0x364>)
 80137f4:	0b09      	lsrs	r1, r1, #12
 80137f6:	430b      	orrs	r3, r1
 80137f8:	499b      	ldr	r1, [pc, #620]	@ (8013a68 <_dtoa_r+0x368>)
 80137fa:	1857      	adds	r7, r2, r1
 80137fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80137fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013800:	0019      	movs	r1, r3
 8013802:	2200      	movs	r2, #0
 8013804:	4b99      	ldr	r3, [pc, #612]	@ (8013a6c <_dtoa_r+0x36c>)
 8013806:	f7ef f981 	bl	8002b0c <__aeabi_dsub>
 801380a:	4a99      	ldr	r2, [pc, #612]	@ (8013a70 <_dtoa_r+0x370>)
 801380c:	4b99      	ldr	r3, [pc, #612]	@ (8013a74 <_dtoa_r+0x374>)
 801380e:	f7ee feb5 	bl	800257c <__aeabi_dmul>
 8013812:	4a99      	ldr	r2, [pc, #612]	@ (8013a78 <_dtoa_r+0x378>)
 8013814:	4b99      	ldr	r3, [pc, #612]	@ (8013a7c <_dtoa_r+0x37c>)
 8013816:	f7ed ff09 	bl	800162c <__aeabi_dadd>
 801381a:	0004      	movs	r4, r0
 801381c:	0038      	movs	r0, r7
 801381e:	000d      	movs	r5, r1
 8013820:	f7ef fd6e 	bl	8003300 <__aeabi_i2d>
 8013824:	4a96      	ldr	r2, [pc, #600]	@ (8013a80 <_dtoa_r+0x380>)
 8013826:	4b97      	ldr	r3, [pc, #604]	@ (8013a84 <_dtoa_r+0x384>)
 8013828:	f7ee fea8 	bl	800257c <__aeabi_dmul>
 801382c:	0002      	movs	r2, r0
 801382e:	000b      	movs	r3, r1
 8013830:	0020      	movs	r0, r4
 8013832:	0029      	movs	r1, r5
 8013834:	f7ed fefa 	bl	800162c <__aeabi_dadd>
 8013838:	0004      	movs	r4, r0
 801383a:	000d      	movs	r5, r1
 801383c:	f7ef fd24 	bl	8003288 <__aeabi_d2iz>
 8013840:	2200      	movs	r2, #0
 8013842:	9004      	str	r0, [sp, #16]
 8013844:	2300      	movs	r3, #0
 8013846:	0020      	movs	r0, r4
 8013848:	0029      	movs	r1, r5
 801384a:	f7ec fe05 	bl	8000458 <__aeabi_dcmplt>
 801384e:	2800      	cmp	r0, #0
 8013850:	d00b      	beq.n	801386a <_dtoa_r+0x16a>
 8013852:	9804      	ldr	r0, [sp, #16]
 8013854:	f7ef fd54 	bl	8003300 <__aeabi_i2d>
 8013858:	002b      	movs	r3, r5
 801385a:	0022      	movs	r2, r4
 801385c:	f7ec fdf6 	bl	800044c <__aeabi_dcmpeq>
 8013860:	4243      	negs	r3, r0
 8013862:	4158      	adcs	r0, r3
 8013864:	9b04      	ldr	r3, [sp, #16]
 8013866:	1a1b      	subs	r3, r3, r0
 8013868:	9304      	str	r3, [sp, #16]
 801386a:	2301      	movs	r3, #1
 801386c:	9315      	str	r3, [sp, #84]	@ 0x54
 801386e:	9b04      	ldr	r3, [sp, #16]
 8013870:	2b16      	cmp	r3, #22
 8013872:	d810      	bhi.n	8013896 <_dtoa_r+0x196>
 8013874:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013876:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013878:	9a04      	ldr	r2, [sp, #16]
 801387a:	4b83      	ldr	r3, [pc, #524]	@ (8013a88 <_dtoa_r+0x388>)
 801387c:	00d2      	lsls	r2, r2, #3
 801387e:	189b      	adds	r3, r3, r2
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	f7ec fde8 	bl	8000458 <__aeabi_dcmplt>
 8013888:	2800      	cmp	r0, #0
 801388a:	d047      	beq.n	801391c <_dtoa_r+0x21c>
 801388c:	9b04      	ldr	r3, [sp, #16]
 801388e:	3b01      	subs	r3, #1
 8013890:	9304      	str	r3, [sp, #16]
 8013892:	2300      	movs	r3, #0
 8013894:	9315      	str	r3, [sp, #84]	@ 0x54
 8013896:	2200      	movs	r2, #0
 8013898:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801389a:	9206      	str	r2, [sp, #24]
 801389c:	1bdb      	subs	r3, r3, r7
 801389e:	1e5a      	subs	r2, r3, #1
 80138a0:	d53e      	bpl.n	8013920 <_dtoa_r+0x220>
 80138a2:	2201      	movs	r2, #1
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	9306      	str	r3, [sp, #24]
 80138a8:	2300      	movs	r3, #0
 80138aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80138ac:	9b04      	ldr	r3, [sp, #16]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	db38      	blt.n	8013924 <_dtoa_r+0x224>
 80138b2:	9a04      	ldr	r2, [sp, #16]
 80138b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138b6:	4694      	mov	ip, r2
 80138b8:	4463      	add	r3, ip
 80138ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80138bc:	2300      	movs	r3, #0
 80138be:	9214      	str	r2, [sp, #80]	@ 0x50
 80138c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80138c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80138c4:	2401      	movs	r4, #1
 80138c6:	2b09      	cmp	r3, #9
 80138c8:	d867      	bhi.n	801399a <_dtoa_r+0x29a>
 80138ca:	2b05      	cmp	r3, #5
 80138cc:	dd02      	ble.n	80138d4 <_dtoa_r+0x1d4>
 80138ce:	2400      	movs	r4, #0
 80138d0:	3b04      	subs	r3, #4
 80138d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80138d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80138d6:	1e98      	subs	r0, r3, #2
 80138d8:	2803      	cmp	r0, #3
 80138da:	d867      	bhi.n	80139ac <_dtoa_r+0x2ac>
 80138dc:	f7ec fc1c 	bl	8000118 <__gnu_thumb1_case_uqi>
 80138e0:	5b383a2b 	.word	0x5b383a2b
 80138e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80138e6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80138e8:	18f6      	adds	r6, r6, r3
 80138ea:	4b68      	ldr	r3, [pc, #416]	@ (8013a8c <_dtoa_r+0x38c>)
 80138ec:	18f2      	adds	r2, r6, r3
 80138ee:	2a20      	cmp	r2, #32
 80138f0:	dd0f      	ble.n	8013912 <_dtoa_r+0x212>
 80138f2:	2340      	movs	r3, #64	@ 0x40
 80138f4:	1a9b      	subs	r3, r3, r2
 80138f6:	409f      	lsls	r7, r3
 80138f8:	4b65      	ldr	r3, [pc, #404]	@ (8013a90 <_dtoa_r+0x390>)
 80138fa:	0038      	movs	r0, r7
 80138fc:	18f3      	adds	r3, r6, r3
 80138fe:	40dc      	lsrs	r4, r3
 8013900:	4320      	orrs	r0, r4
 8013902:	f7ef fd2b 	bl	800335c <__aeabi_ui2d>
 8013906:	2201      	movs	r2, #1
 8013908:	4b62      	ldr	r3, [pc, #392]	@ (8013a94 <_dtoa_r+0x394>)
 801390a:	1e77      	subs	r7, r6, #1
 801390c:	18cb      	adds	r3, r1, r3
 801390e:	9218      	str	r2, [sp, #96]	@ 0x60
 8013910:	e776      	b.n	8013800 <_dtoa_r+0x100>
 8013912:	2320      	movs	r3, #32
 8013914:	0020      	movs	r0, r4
 8013916:	1a9b      	subs	r3, r3, r2
 8013918:	4098      	lsls	r0, r3
 801391a:	e7f2      	b.n	8013902 <_dtoa_r+0x202>
 801391c:	9015      	str	r0, [sp, #84]	@ 0x54
 801391e:	e7ba      	b.n	8013896 <_dtoa_r+0x196>
 8013920:	920d      	str	r2, [sp, #52]	@ 0x34
 8013922:	e7c3      	b.n	80138ac <_dtoa_r+0x1ac>
 8013924:	9b06      	ldr	r3, [sp, #24]
 8013926:	9a04      	ldr	r2, [sp, #16]
 8013928:	1a9b      	subs	r3, r3, r2
 801392a:	9306      	str	r3, [sp, #24]
 801392c:	4253      	negs	r3, r2
 801392e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013930:	2300      	movs	r3, #0
 8013932:	9314      	str	r3, [sp, #80]	@ 0x50
 8013934:	e7c5      	b.n	80138c2 <_dtoa_r+0x1c2>
 8013936:	2300      	movs	r3, #0
 8013938:	9310      	str	r3, [sp, #64]	@ 0x40
 801393a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801393c:	930e      	str	r3, [sp, #56]	@ 0x38
 801393e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013940:	2b00      	cmp	r3, #0
 8013942:	dc13      	bgt.n	801396c <_dtoa_r+0x26c>
 8013944:	2301      	movs	r3, #1
 8013946:	001a      	movs	r2, r3
 8013948:	930e      	str	r3, [sp, #56]	@ 0x38
 801394a:	9309      	str	r3, [sp, #36]	@ 0x24
 801394c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801394e:	e00d      	b.n	801396c <_dtoa_r+0x26c>
 8013950:	2301      	movs	r3, #1
 8013952:	e7f1      	b.n	8013938 <_dtoa_r+0x238>
 8013954:	2300      	movs	r3, #0
 8013956:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013958:	9310      	str	r3, [sp, #64]	@ 0x40
 801395a:	4694      	mov	ip, r2
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	4463      	add	r3, ip
 8013960:	930e      	str	r3, [sp, #56]	@ 0x38
 8013962:	3301      	adds	r3, #1
 8013964:	9309      	str	r3, [sp, #36]	@ 0x24
 8013966:	2b00      	cmp	r3, #0
 8013968:	dc00      	bgt.n	801396c <_dtoa_r+0x26c>
 801396a:	2301      	movs	r3, #1
 801396c:	9a03      	ldr	r2, [sp, #12]
 801396e:	2100      	movs	r1, #0
 8013970:	69d0      	ldr	r0, [r2, #28]
 8013972:	2204      	movs	r2, #4
 8013974:	0015      	movs	r5, r2
 8013976:	3514      	adds	r5, #20
 8013978:	429d      	cmp	r5, r3
 801397a:	d91b      	bls.n	80139b4 <_dtoa_r+0x2b4>
 801397c:	6041      	str	r1, [r0, #4]
 801397e:	9803      	ldr	r0, [sp, #12]
 8013980:	f000 fdb8 	bl	80144f4 <_Balloc>
 8013984:	9008      	str	r0, [sp, #32]
 8013986:	2800      	cmp	r0, #0
 8013988:	d117      	bne.n	80139ba <_dtoa_r+0x2ba>
 801398a:	21b0      	movs	r1, #176	@ 0xb0
 801398c:	4b42      	ldr	r3, [pc, #264]	@ (8013a98 <_dtoa_r+0x398>)
 801398e:	482e      	ldr	r0, [pc, #184]	@ (8013a48 <_dtoa_r+0x348>)
 8013990:	9a08      	ldr	r2, [sp, #32]
 8013992:	31ff      	adds	r1, #255	@ 0xff
 8013994:	e6c9      	b.n	801372a <_dtoa_r+0x2a>
 8013996:	2301      	movs	r3, #1
 8013998:	e7dd      	b.n	8013956 <_dtoa_r+0x256>
 801399a:	2300      	movs	r3, #0
 801399c:	9410      	str	r4, [sp, #64]	@ 0x40
 801399e:	9322      	str	r3, [sp, #136]	@ 0x88
 80139a0:	3b01      	subs	r3, #1
 80139a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80139a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80139a6:	2200      	movs	r2, #0
 80139a8:	3313      	adds	r3, #19
 80139aa:	e7cf      	b.n	801394c <_dtoa_r+0x24c>
 80139ac:	2301      	movs	r3, #1
 80139ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80139b0:	3b02      	subs	r3, #2
 80139b2:	e7f6      	b.n	80139a2 <_dtoa_r+0x2a2>
 80139b4:	3101      	adds	r1, #1
 80139b6:	0052      	lsls	r2, r2, #1
 80139b8:	e7dc      	b.n	8013974 <_dtoa_r+0x274>
 80139ba:	9b03      	ldr	r3, [sp, #12]
 80139bc:	9a08      	ldr	r2, [sp, #32]
 80139be:	69db      	ldr	r3, [r3, #28]
 80139c0:	601a      	str	r2, [r3, #0]
 80139c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139c4:	2b0e      	cmp	r3, #14
 80139c6:	d900      	bls.n	80139ca <_dtoa_r+0x2ca>
 80139c8:	e0d9      	b.n	8013b7e <_dtoa_r+0x47e>
 80139ca:	2c00      	cmp	r4, #0
 80139cc:	d100      	bne.n	80139d0 <_dtoa_r+0x2d0>
 80139ce:	e0d6      	b.n	8013b7e <_dtoa_r+0x47e>
 80139d0:	9b04      	ldr	r3, [sp, #16]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	dd64      	ble.n	8013aa0 <_dtoa_r+0x3a0>
 80139d6:	210f      	movs	r1, #15
 80139d8:	9a04      	ldr	r2, [sp, #16]
 80139da:	4b2b      	ldr	r3, [pc, #172]	@ (8013a88 <_dtoa_r+0x388>)
 80139dc:	400a      	ands	r2, r1
 80139de:	00d2      	lsls	r2, r2, #3
 80139e0:	189b      	adds	r3, r3, r2
 80139e2:	681e      	ldr	r6, [r3, #0]
 80139e4:	685f      	ldr	r7, [r3, #4]
 80139e6:	9b04      	ldr	r3, [sp, #16]
 80139e8:	2402      	movs	r4, #2
 80139ea:	111d      	asrs	r5, r3, #4
 80139ec:	05db      	lsls	r3, r3, #23
 80139ee:	d50a      	bpl.n	8013a06 <_dtoa_r+0x306>
 80139f0:	4b2a      	ldr	r3, [pc, #168]	@ (8013a9c <_dtoa_r+0x39c>)
 80139f2:	400d      	ands	r5, r1
 80139f4:	6a1a      	ldr	r2, [r3, #32]
 80139f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80139fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80139fc:	f7ee f97a 	bl	8001cf4 <__aeabi_ddiv>
 8013a00:	900a      	str	r0, [sp, #40]	@ 0x28
 8013a02:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013a04:	3401      	adds	r4, #1
 8013a06:	4b25      	ldr	r3, [pc, #148]	@ (8013a9c <_dtoa_r+0x39c>)
 8013a08:	930c      	str	r3, [sp, #48]	@ 0x30
 8013a0a:	2d00      	cmp	r5, #0
 8013a0c:	d108      	bne.n	8013a20 <_dtoa_r+0x320>
 8013a0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013a10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013a12:	0032      	movs	r2, r6
 8013a14:	003b      	movs	r3, r7
 8013a16:	f7ee f96d 	bl	8001cf4 <__aeabi_ddiv>
 8013a1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8013a1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013a1e:	e05a      	b.n	8013ad6 <_dtoa_r+0x3d6>
 8013a20:	2301      	movs	r3, #1
 8013a22:	421d      	tst	r5, r3
 8013a24:	d009      	beq.n	8013a3a <_dtoa_r+0x33a>
 8013a26:	18e4      	adds	r4, r4, r3
 8013a28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a2a:	0030      	movs	r0, r6
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	0039      	movs	r1, r7
 8013a32:	f7ee fda3 	bl	800257c <__aeabi_dmul>
 8013a36:	0006      	movs	r6, r0
 8013a38:	000f      	movs	r7, r1
 8013a3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a3c:	106d      	asrs	r5, r5, #1
 8013a3e:	3308      	adds	r3, #8
 8013a40:	e7e2      	b.n	8013a08 <_dtoa_r+0x308>
 8013a42:	46c0      	nop			@ (mov r8, r8)
 8013a44:	08017712 	.word	0x08017712
 8013a48:	08017729 	.word	0x08017729
 8013a4c:	7ff00000 	.word	0x7ff00000
 8013a50:	0000270f 	.word	0x0000270f
 8013a54:	0801770e 	.word	0x0801770e
 8013a58:	08017711 	.word	0x08017711
 8013a5c:	080176dd 	.word	0x080176dd
 8013a60:	080176dc 	.word	0x080176dc
 8013a64:	3ff00000 	.word	0x3ff00000
 8013a68:	fffffc01 	.word	0xfffffc01
 8013a6c:	3ff80000 	.word	0x3ff80000
 8013a70:	636f4361 	.word	0x636f4361
 8013a74:	3fd287a7 	.word	0x3fd287a7
 8013a78:	8b60c8b3 	.word	0x8b60c8b3
 8013a7c:	3fc68a28 	.word	0x3fc68a28
 8013a80:	509f79fb 	.word	0x509f79fb
 8013a84:	3fd34413 	.word	0x3fd34413
 8013a88:	08017820 	.word	0x08017820
 8013a8c:	00000432 	.word	0x00000432
 8013a90:	00000412 	.word	0x00000412
 8013a94:	fe100000 	.word	0xfe100000
 8013a98:	08017781 	.word	0x08017781
 8013a9c:	080177f8 	.word	0x080177f8
 8013aa0:	9b04      	ldr	r3, [sp, #16]
 8013aa2:	2402      	movs	r4, #2
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d016      	beq.n	8013ad6 <_dtoa_r+0x3d6>
 8013aa8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013aaa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013aac:	220f      	movs	r2, #15
 8013aae:	425d      	negs	r5, r3
 8013ab0:	402a      	ands	r2, r5
 8013ab2:	4bd7      	ldr	r3, [pc, #860]	@ (8013e10 <_dtoa_r+0x710>)
 8013ab4:	00d2      	lsls	r2, r2, #3
 8013ab6:	189b      	adds	r3, r3, r2
 8013ab8:	681a      	ldr	r2, [r3, #0]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	f7ee fd5e 	bl	800257c <__aeabi_dmul>
 8013ac0:	2701      	movs	r7, #1
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	900a      	str	r0, [sp, #40]	@ 0x28
 8013ac6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013ac8:	4ed2      	ldr	r6, [pc, #840]	@ (8013e14 <_dtoa_r+0x714>)
 8013aca:	112d      	asrs	r5, r5, #4
 8013acc:	2d00      	cmp	r5, #0
 8013ace:	d000      	beq.n	8013ad2 <_dtoa_r+0x3d2>
 8013ad0:	e0ba      	b.n	8013c48 <_dtoa_r+0x548>
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d1a1      	bne.n	8013a1a <_dtoa_r+0x31a>
 8013ad6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013ad8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013ada:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d100      	bne.n	8013ae2 <_dtoa_r+0x3e2>
 8013ae0:	e0bd      	b.n	8013c5e <_dtoa_r+0x55e>
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	0030      	movs	r0, r6
 8013ae6:	0039      	movs	r1, r7
 8013ae8:	4bcb      	ldr	r3, [pc, #812]	@ (8013e18 <_dtoa_r+0x718>)
 8013aea:	f7ec fcb5 	bl	8000458 <__aeabi_dcmplt>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d100      	bne.n	8013af4 <_dtoa_r+0x3f4>
 8013af2:	e0b4      	b.n	8013c5e <_dtoa_r+0x55e>
 8013af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d100      	bne.n	8013afc <_dtoa_r+0x3fc>
 8013afa:	e0b0      	b.n	8013c5e <_dtoa_r+0x55e>
 8013afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	dd39      	ble.n	8013b76 <_dtoa_r+0x476>
 8013b02:	9b04      	ldr	r3, [sp, #16]
 8013b04:	2200      	movs	r2, #0
 8013b06:	3b01      	subs	r3, #1
 8013b08:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b0a:	0030      	movs	r0, r6
 8013b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8013e1c <_dtoa_r+0x71c>)
 8013b0e:	0039      	movs	r1, r7
 8013b10:	f7ee fd34 	bl	800257c <__aeabi_dmul>
 8013b14:	900a      	str	r0, [sp, #40]	@ 0x28
 8013b16:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b1a:	3401      	adds	r4, #1
 8013b1c:	0020      	movs	r0, r4
 8013b1e:	9311      	str	r3, [sp, #68]	@ 0x44
 8013b20:	f7ef fbee 	bl	8003300 <__aeabi_i2d>
 8013b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b28:	f7ee fd28 	bl	800257c <__aeabi_dmul>
 8013b2c:	4bbc      	ldr	r3, [pc, #752]	@ (8013e20 <_dtoa_r+0x720>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f7ed fd7c 	bl	800162c <__aeabi_dadd>
 8013b34:	4bbb      	ldr	r3, [pc, #748]	@ (8013e24 <_dtoa_r+0x724>)
 8013b36:	0006      	movs	r6, r0
 8013b38:	18cf      	adds	r7, r1, r3
 8013b3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d000      	beq.n	8013b42 <_dtoa_r+0x442>
 8013b40:	e091      	b.n	8013c66 <_dtoa_r+0x566>
 8013b42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013b44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013b46:	2200      	movs	r2, #0
 8013b48:	4bb7      	ldr	r3, [pc, #732]	@ (8013e28 <_dtoa_r+0x728>)
 8013b4a:	f7ee ffdf 	bl	8002b0c <__aeabi_dsub>
 8013b4e:	0032      	movs	r2, r6
 8013b50:	003b      	movs	r3, r7
 8013b52:	0004      	movs	r4, r0
 8013b54:	000d      	movs	r5, r1
 8013b56:	f7ec fc93 	bl	8000480 <__aeabi_dcmpgt>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d000      	beq.n	8013b60 <_dtoa_r+0x460>
 8013b5e:	e29d      	b.n	801409c <_dtoa_r+0x99c>
 8013b60:	2180      	movs	r1, #128	@ 0x80
 8013b62:	0609      	lsls	r1, r1, #24
 8013b64:	187b      	adds	r3, r7, r1
 8013b66:	0032      	movs	r2, r6
 8013b68:	0020      	movs	r0, r4
 8013b6a:	0029      	movs	r1, r5
 8013b6c:	f7ec fc74 	bl	8000458 <__aeabi_dcmplt>
 8013b70:	2800      	cmp	r0, #0
 8013b72:	d000      	beq.n	8013b76 <_dtoa_r+0x476>
 8013b74:	e130      	b.n	8013dd8 <_dtoa_r+0x6d8>
 8013b76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b78:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013b7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	da00      	bge.n	8013b86 <_dtoa_r+0x486>
 8013b84:	e177      	b.n	8013e76 <_dtoa_r+0x776>
 8013b86:	9a04      	ldr	r2, [sp, #16]
 8013b88:	2a0e      	cmp	r2, #14
 8013b8a:	dd00      	ble.n	8013b8e <_dtoa_r+0x48e>
 8013b8c:	e173      	b.n	8013e76 <_dtoa_r+0x776>
 8013b8e:	4ba0      	ldr	r3, [pc, #640]	@ (8013e10 <_dtoa_r+0x710>)
 8013b90:	00d2      	lsls	r2, r2, #3
 8013b92:	189b      	adds	r3, r3, r2
 8013b94:	685c      	ldr	r4, [r3, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	9306      	str	r3, [sp, #24]
 8013b9a:	9407      	str	r4, [sp, #28]
 8013b9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	da03      	bge.n	8013baa <_dtoa_r+0x4aa>
 8013ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	dc00      	bgt.n	8013baa <_dtoa_r+0x4aa>
 8013ba8:	e106      	b.n	8013db8 <_dtoa_r+0x6b8>
 8013baa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013bac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bb0:	9d08      	ldr	r5, [sp, #32]
 8013bb2:	3b01      	subs	r3, #1
 8013bb4:	195b      	adds	r3, r3, r5
 8013bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bb8:	9a06      	ldr	r2, [sp, #24]
 8013bba:	9b07      	ldr	r3, [sp, #28]
 8013bbc:	0030      	movs	r0, r6
 8013bbe:	0039      	movs	r1, r7
 8013bc0:	f7ee f898 	bl	8001cf4 <__aeabi_ddiv>
 8013bc4:	f7ef fb60 	bl	8003288 <__aeabi_d2iz>
 8013bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8013bca:	f7ef fb99 	bl	8003300 <__aeabi_i2d>
 8013bce:	9a06      	ldr	r2, [sp, #24]
 8013bd0:	9b07      	ldr	r3, [sp, #28]
 8013bd2:	f7ee fcd3 	bl	800257c <__aeabi_dmul>
 8013bd6:	0002      	movs	r2, r0
 8013bd8:	000b      	movs	r3, r1
 8013bda:	0030      	movs	r0, r6
 8013bdc:	0039      	movs	r1, r7
 8013bde:	f7ee ff95 	bl	8002b0c <__aeabi_dsub>
 8013be2:	002b      	movs	r3, r5
 8013be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013be6:	3501      	adds	r5, #1
 8013be8:	3230      	adds	r2, #48	@ 0x30
 8013bea:	701a      	strb	r2, [r3, #0]
 8013bec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013bee:	002c      	movs	r4, r5
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d000      	beq.n	8013bf6 <_dtoa_r+0x4f6>
 8013bf4:	e131      	b.n	8013e5a <_dtoa_r+0x75a>
 8013bf6:	0002      	movs	r2, r0
 8013bf8:	000b      	movs	r3, r1
 8013bfa:	f7ed fd17 	bl	800162c <__aeabi_dadd>
 8013bfe:	9a06      	ldr	r2, [sp, #24]
 8013c00:	9b07      	ldr	r3, [sp, #28]
 8013c02:	0006      	movs	r6, r0
 8013c04:	000f      	movs	r7, r1
 8013c06:	f7ec fc3b 	bl	8000480 <__aeabi_dcmpgt>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d000      	beq.n	8013c10 <_dtoa_r+0x510>
 8013c0e:	e10f      	b.n	8013e30 <_dtoa_r+0x730>
 8013c10:	9a06      	ldr	r2, [sp, #24]
 8013c12:	9b07      	ldr	r3, [sp, #28]
 8013c14:	0030      	movs	r0, r6
 8013c16:	0039      	movs	r1, r7
 8013c18:	f7ec fc18 	bl	800044c <__aeabi_dcmpeq>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d003      	beq.n	8013c28 <_dtoa_r+0x528>
 8013c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c22:	07dd      	lsls	r5, r3, #31
 8013c24:	d500      	bpl.n	8013c28 <_dtoa_r+0x528>
 8013c26:	e103      	b.n	8013e30 <_dtoa_r+0x730>
 8013c28:	9905      	ldr	r1, [sp, #20]
 8013c2a:	9803      	ldr	r0, [sp, #12]
 8013c2c:	f000 fca6 	bl	801457c <_Bfree>
 8013c30:	2300      	movs	r3, #0
 8013c32:	7023      	strb	r3, [r4, #0]
 8013c34:	9b04      	ldr	r3, [sp, #16]
 8013c36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013c38:	3301      	adds	r3, #1
 8013c3a:	6013      	str	r3, [r2, #0]
 8013c3c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d100      	bne.n	8013c44 <_dtoa_r+0x544>
 8013c42:	e5a7      	b.n	8013794 <_dtoa_r+0x94>
 8013c44:	601c      	str	r4, [r3, #0]
 8013c46:	e5a5      	b.n	8013794 <_dtoa_r+0x94>
 8013c48:	423d      	tst	r5, r7
 8013c4a:	d005      	beq.n	8013c58 <_dtoa_r+0x558>
 8013c4c:	6832      	ldr	r2, [r6, #0]
 8013c4e:	6873      	ldr	r3, [r6, #4]
 8013c50:	f7ee fc94 	bl	800257c <__aeabi_dmul>
 8013c54:	003b      	movs	r3, r7
 8013c56:	3401      	adds	r4, #1
 8013c58:	106d      	asrs	r5, r5, #1
 8013c5a:	3608      	adds	r6, #8
 8013c5c:	e736      	b.n	8013acc <_dtoa_r+0x3cc>
 8013c5e:	9b04      	ldr	r3, [sp, #16]
 8013c60:	930c      	str	r3, [sp, #48]	@ 0x30
 8013c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c64:	e75a      	b.n	8013b1c <_dtoa_r+0x41c>
 8013c66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013c68:	4b69      	ldr	r3, [pc, #420]	@ (8013e10 <_dtoa_r+0x710>)
 8013c6a:	3a01      	subs	r2, #1
 8013c6c:	00d2      	lsls	r2, r2, #3
 8013c6e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013c70:	189b      	adds	r3, r3, r2
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	2900      	cmp	r1, #0
 8013c78:	d04c      	beq.n	8013d14 <_dtoa_r+0x614>
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	496b      	ldr	r1, [pc, #428]	@ (8013e2c <_dtoa_r+0x72c>)
 8013c7e:	f7ee f839 	bl	8001cf4 <__aeabi_ddiv>
 8013c82:	0032      	movs	r2, r6
 8013c84:	003b      	movs	r3, r7
 8013c86:	f7ee ff41 	bl	8002b0c <__aeabi_dsub>
 8013c8a:	9a08      	ldr	r2, [sp, #32]
 8013c8c:	0006      	movs	r6, r0
 8013c8e:	4694      	mov	ip, r2
 8013c90:	000f      	movs	r7, r1
 8013c92:	9b08      	ldr	r3, [sp, #32]
 8013c94:	9316      	str	r3, [sp, #88]	@ 0x58
 8013c96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c98:	4463      	add	r3, ip
 8013c9a:	9311      	str	r3, [sp, #68]	@ 0x44
 8013c9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013c9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013ca0:	f7ef faf2 	bl	8003288 <__aeabi_d2iz>
 8013ca4:	0005      	movs	r5, r0
 8013ca6:	f7ef fb2b 	bl	8003300 <__aeabi_i2d>
 8013caa:	0002      	movs	r2, r0
 8013cac:	000b      	movs	r3, r1
 8013cae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013cb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013cb2:	f7ee ff2b 	bl	8002b0c <__aeabi_dsub>
 8013cb6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013cb8:	3530      	adds	r5, #48	@ 0x30
 8013cba:	1c5c      	adds	r4, r3, #1
 8013cbc:	701d      	strb	r5, [r3, #0]
 8013cbe:	0032      	movs	r2, r6
 8013cc0:	003b      	movs	r3, r7
 8013cc2:	900a      	str	r0, [sp, #40]	@ 0x28
 8013cc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013cc6:	f7ec fbc7 	bl	8000458 <__aeabi_dcmplt>
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	d16a      	bne.n	8013da4 <_dtoa_r+0x6a4>
 8013cce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013cd2:	2000      	movs	r0, #0
 8013cd4:	4950      	ldr	r1, [pc, #320]	@ (8013e18 <_dtoa_r+0x718>)
 8013cd6:	f7ee ff19 	bl	8002b0c <__aeabi_dsub>
 8013cda:	0032      	movs	r2, r6
 8013cdc:	003b      	movs	r3, r7
 8013cde:	f7ec fbbb 	bl	8000458 <__aeabi_dcmplt>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	d000      	beq.n	8013ce8 <_dtoa_r+0x5e8>
 8013ce6:	e0a5      	b.n	8013e34 <_dtoa_r+0x734>
 8013ce8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013cea:	42a3      	cmp	r3, r4
 8013cec:	d100      	bne.n	8013cf0 <_dtoa_r+0x5f0>
 8013cee:	e742      	b.n	8013b76 <_dtoa_r+0x476>
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	0030      	movs	r0, r6
 8013cf4:	0039      	movs	r1, r7
 8013cf6:	4b49      	ldr	r3, [pc, #292]	@ (8013e1c <_dtoa_r+0x71c>)
 8013cf8:	f7ee fc40 	bl	800257c <__aeabi_dmul>
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	0006      	movs	r6, r0
 8013d00:	000f      	movs	r7, r1
 8013d02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013d04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d06:	4b45      	ldr	r3, [pc, #276]	@ (8013e1c <_dtoa_r+0x71c>)
 8013d08:	f7ee fc38 	bl	800257c <__aeabi_dmul>
 8013d0c:	9416      	str	r4, [sp, #88]	@ 0x58
 8013d0e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013d10:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013d12:	e7c3      	b.n	8013c9c <_dtoa_r+0x59c>
 8013d14:	0030      	movs	r0, r6
 8013d16:	0039      	movs	r1, r7
 8013d18:	f7ee fc30 	bl	800257c <__aeabi_dmul>
 8013d1c:	9d08      	ldr	r5, [sp, #32]
 8013d1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d20:	002b      	movs	r3, r5
 8013d22:	4694      	mov	ip, r2
 8013d24:	9016      	str	r0, [sp, #88]	@ 0x58
 8013d26:	9117      	str	r1, [sp, #92]	@ 0x5c
 8013d28:	4463      	add	r3, ip
 8013d2a:	9319      	str	r3, [sp, #100]	@ 0x64
 8013d2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013d2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d30:	f7ef faaa 	bl	8003288 <__aeabi_d2iz>
 8013d34:	0004      	movs	r4, r0
 8013d36:	f7ef fae3 	bl	8003300 <__aeabi_i2d>
 8013d3a:	000b      	movs	r3, r1
 8013d3c:	0002      	movs	r2, r0
 8013d3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013d42:	f7ee fee3 	bl	8002b0c <__aeabi_dsub>
 8013d46:	3430      	adds	r4, #48	@ 0x30
 8013d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013d4a:	702c      	strb	r4, [r5, #0]
 8013d4c:	3501      	adds	r5, #1
 8013d4e:	0006      	movs	r6, r0
 8013d50:	000f      	movs	r7, r1
 8013d52:	42ab      	cmp	r3, r5
 8013d54:	d129      	bne.n	8013daa <_dtoa_r+0x6aa>
 8013d56:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013d58:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013d5a:	9b08      	ldr	r3, [sp, #32]
 8013d5c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8013d5e:	469c      	mov	ip, r3
 8013d60:	2200      	movs	r2, #0
 8013d62:	4b32      	ldr	r3, [pc, #200]	@ (8013e2c <_dtoa_r+0x72c>)
 8013d64:	4464      	add	r4, ip
 8013d66:	f7ed fc61 	bl	800162c <__aeabi_dadd>
 8013d6a:	0002      	movs	r2, r0
 8013d6c:	000b      	movs	r3, r1
 8013d6e:	0030      	movs	r0, r6
 8013d70:	0039      	movs	r1, r7
 8013d72:	f7ec fb85 	bl	8000480 <__aeabi_dcmpgt>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d15c      	bne.n	8013e34 <_dtoa_r+0x734>
 8013d7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013d7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013d7e:	2000      	movs	r0, #0
 8013d80:	492a      	ldr	r1, [pc, #168]	@ (8013e2c <_dtoa_r+0x72c>)
 8013d82:	f7ee fec3 	bl	8002b0c <__aeabi_dsub>
 8013d86:	0002      	movs	r2, r0
 8013d88:	000b      	movs	r3, r1
 8013d8a:	0030      	movs	r0, r6
 8013d8c:	0039      	movs	r1, r7
 8013d8e:	f7ec fb63 	bl	8000458 <__aeabi_dcmplt>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d100      	bne.n	8013d98 <_dtoa_r+0x698>
 8013d96:	e6ee      	b.n	8013b76 <_dtoa_r+0x476>
 8013d98:	0023      	movs	r3, r4
 8013d9a:	3c01      	subs	r4, #1
 8013d9c:	7822      	ldrb	r2, [r4, #0]
 8013d9e:	2a30      	cmp	r2, #48	@ 0x30
 8013da0:	d0fa      	beq.n	8013d98 <_dtoa_r+0x698>
 8013da2:	001c      	movs	r4, r3
 8013da4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013da6:	9304      	str	r3, [sp, #16]
 8013da8:	e73e      	b.n	8013c28 <_dtoa_r+0x528>
 8013daa:	2200      	movs	r2, #0
 8013dac:	4b1b      	ldr	r3, [pc, #108]	@ (8013e1c <_dtoa_r+0x71c>)
 8013dae:	f7ee fbe5 	bl	800257c <__aeabi_dmul>
 8013db2:	900a      	str	r0, [sp, #40]	@ 0x28
 8013db4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013db6:	e7b9      	b.n	8013d2c <_dtoa_r+0x62c>
 8013db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d10c      	bne.n	8013dd8 <_dtoa_r+0x6d8>
 8013dbe:	9806      	ldr	r0, [sp, #24]
 8013dc0:	9907      	ldr	r1, [sp, #28]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	4b18      	ldr	r3, [pc, #96]	@ (8013e28 <_dtoa_r+0x728>)
 8013dc6:	f7ee fbd9 	bl	800257c <__aeabi_dmul>
 8013dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013dcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013dce:	f7ec fb61 	bl	8000494 <__aeabi_dcmpge>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d100      	bne.n	8013dd8 <_dtoa_r+0x6d8>
 8013dd6:	e164      	b.n	80140a2 <_dtoa_r+0x9a2>
 8013dd8:	2600      	movs	r6, #0
 8013dda:	0037      	movs	r7, r6
 8013ddc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013dde:	9c08      	ldr	r4, [sp, #32]
 8013de0:	43db      	mvns	r3, r3
 8013de2:	930c      	str	r3, [sp, #48]	@ 0x30
 8013de4:	2300      	movs	r3, #0
 8013de6:	9304      	str	r3, [sp, #16]
 8013de8:	0031      	movs	r1, r6
 8013dea:	9803      	ldr	r0, [sp, #12]
 8013dec:	f000 fbc6 	bl	801457c <_Bfree>
 8013df0:	2f00      	cmp	r7, #0
 8013df2:	d0d7      	beq.n	8013da4 <_dtoa_r+0x6a4>
 8013df4:	9b04      	ldr	r3, [sp, #16]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d005      	beq.n	8013e06 <_dtoa_r+0x706>
 8013dfa:	42bb      	cmp	r3, r7
 8013dfc:	d003      	beq.n	8013e06 <_dtoa_r+0x706>
 8013dfe:	0019      	movs	r1, r3
 8013e00:	9803      	ldr	r0, [sp, #12]
 8013e02:	f000 fbbb 	bl	801457c <_Bfree>
 8013e06:	0039      	movs	r1, r7
 8013e08:	9803      	ldr	r0, [sp, #12]
 8013e0a:	f000 fbb7 	bl	801457c <_Bfree>
 8013e0e:	e7c9      	b.n	8013da4 <_dtoa_r+0x6a4>
 8013e10:	08017820 	.word	0x08017820
 8013e14:	080177f8 	.word	0x080177f8
 8013e18:	3ff00000 	.word	0x3ff00000
 8013e1c:	40240000 	.word	0x40240000
 8013e20:	401c0000 	.word	0x401c0000
 8013e24:	fcc00000 	.word	0xfcc00000
 8013e28:	40140000 	.word	0x40140000
 8013e2c:	3fe00000 	.word	0x3fe00000
 8013e30:	9b04      	ldr	r3, [sp, #16]
 8013e32:	930c      	str	r3, [sp, #48]	@ 0x30
 8013e34:	0023      	movs	r3, r4
 8013e36:	001c      	movs	r4, r3
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	781a      	ldrb	r2, [r3, #0]
 8013e3c:	2a39      	cmp	r2, #57	@ 0x39
 8013e3e:	d108      	bne.n	8013e52 <_dtoa_r+0x752>
 8013e40:	9a08      	ldr	r2, [sp, #32]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d1f7      	bne.n	8013e36 <_dtoa_r+0x736>
 8013e46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013e48:	9908      	ldr	r1, [sp, #32]
 8013e4a:	3201      	adds	r2, #1
 8013e4c:	920c      	str	r2, [sp, #48]	@ 0x30
 8013e4e:	2230      	movs	r2, #48	@ 0x30
 8013e50:	700a      	strb	r2, [r1, #0]
 8013e52:	781a      	ldrb	r2, [r3, #0]
 8013e54:	3201      	adds	r2, #1
 8013e56:	701a      	strb	r2, [r3, #0]
 8013e58:	e7a4      	b.n	8013da4 <_dtoa_r+0x6a4>
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	4bc6      	ldr	r3, [pc, #792]	@ (8014178 <_dtoa_r+0xa78>)
 8013e5e:	f7ee fb8d 	bl	800257c <__aeabi_dmul>
 8013e62:	2200      	movs	r2, #0
 8013e64:	2300      	movs	r3, #0
 8013e66:	0006      	movs	r6, r0
 8013e68:	000f      	movs	r7, r1
 8013e6a:	f7ec faef 	bl	800044c <__aeabi_dcmpeq>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d100      	bne.n	8013e74 <_dtoa_r+0x774>
 8013e72:	e6a1      	b.n	8013bb8 <_dtoa_r+0x4b8>
 8013e74:	e6d8      	b.n	8013c28 <_dtoa_r+0x528>
 8013e76:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8013e78:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013e7a:	9c06      	ldr	r4, [sp, #24]
 8013e7c:	2f00      	cmp	r7, #0
 8013e7e:	d014      	beq.n	8013eaa <_dtoa_r+0x7aa>
 8013e80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013e82:	2a01      	cmp	r2, #1
 8013e84:	dd00      	ble.n	8013e88 <_dtoa_r+0x788>
 8013e86:	e0c8      	b.n	801401a <_dtoa_r+0x91a>
 8013e88:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013e8a:	2a00      	cmp	r2, #0
 8013e8c:	d100      	bne.n	8013e90 <_dtoa_r+0x790>
 8013e8e:	e0be      	b.n	801400e <_dtoa_r+0x90e>
 8013e90:	4aba      	ldr	r2, [pc, #744]	@ (801417c <_dtoa_r+0xa7c>)
 8013e92:	189b      	adds	r3, r3, r2
 8013e94:	9a06      	ldr	r2, [sp, #24]
 8013e96:	2101      	movs	r1, #1
 8013e98:	18d2      	adds	r2, r2, r3
 8013e9a:	9206      	str	r2, [sp, #24]
 8013e9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013e9e:	9803      	ldr	r0, [sp, #12]
 8013ea0:	18d3      	adds	r3, r2, r3
 8013ea2:	930d      	str	r3, [sp, #52]	@ 0x34
 8013ea4:	f000 fc6e 	bl	8014784 <__i2b>
 8013ea8:	0007      	movs	r7, r0
 8013eaa:	2c00      	cmp	r4, #0
 8013eac:	d00e      	beq.n	8013ecc <_dtoa_r+0x7cc>
 8013eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	dd0b      	ble.n	8013ecc <_dtoa_r+0x7cc>
 8013eb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013eb6:	0023      	movs	r3, r4
 8013eb8:	4294      	cmp	r4, r2
 8013eba:	dd00      	ble.n	8013ebe <_dtoa_r+0x7be>
 8013ebc:	0013      	movs	r3, r2
 8013ebe:	9a06      	ldr	r2, [sp, #24]
 8013ec0:	1ae4      	subs	r4, r4, r3
 8013ec2:	1ad2      	subs	r2, r2, r3
 8013ec4:	9206      	str	r2, [sp, #24]
 8013ec6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ec8:	1ad3      	subs	r3, r2, r3
 8013eca:	930d      	str	r3, [sp, #52]	@ 0x34
 8013ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d01f      	beq.n	8013f12 <_dtoa_r+0x812>
 8013ed2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d100      	bne.n	8013eda <_dtoa_r+0x7da>
 8013ed8:	e0b5      	b.n	8014046 <_dtoa_r+0x946>
 8013eda:	2d00      	cmp	r5, #0
 8013edc:	d010      	beq.n	8013f00 <_dtoa_r+0x800>
 8013ede:	0039      	movs	r1, r7
 8013ee0:	002a      	movs	r2, r5
 8013ee2:	9803      	ldr	r0, [sp, #12]
 8013ee4:	f000 fd18 	bl	8014918 <__pow5mult>
 8013ee8:	9a05      	ldr	r2, [sp, #20]
 8013eea:	0001      	movs	r1, r0
 8013eec:	0007      	movs	r7, r0
 8013eee:	9803      	ldr	r0, [sp, #12]
 8013ef0:	f000 fc60 	bl	80147b4 <__multiply>
 8013ef4:	0006      	movs	r6, r0
 8013ef6:	9905      	ldr	r1, [sp, #20]
 8013ef8:	9803      	ldr	r0, [sp, #12]
 8013efa:	f000 fb3f 	bl	801457c <_Bfree>
 8013efe:	9605      	str	r6, [sp, #20]
 8013f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f02:	1b5a      	subs	r2, r3, r5
 8013f04:	42ab      	cmp	r3, r5
 8013f06:	d004      	beq.n	8013f12 <_dtoa_r+0x812>
 8013f08:	9905      	ldr	r1, [sp, #20]
 8013f0a:	9803      	ldr	r0, [sp, #12]
 8013f0c:	f000 fd04 	bl	8014918 <__pow5mult>
 8013f10:	9005      	str	r0, [sp, #20]
 8013f12:	2101      	movs	r1, #1
 8013f14:	9803      	ldr	r0, [sp, #12]
 8013f16:	f000 fc35 	bl	8014784 <__i2b>
 8013f1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013f1c:	0006      	movs	r6, r0
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d100      	bne.n	8013f24 <_dtoa_r+0x824>
 8013f22:	e1bc      	b.n	801429e <_dtoa_r+0xb9e>
 8013f24:	001a      	movs	r2, r3
 8013f26:	0001      	movs	r1, r0
 8013f28:	9803      	ldr	r0, [sp, #12]
 8013f2a:	f000 fcf5 	bl	8014918 <__pow5mult>
 8013f2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013f30:	0006      	movs	r6, r0
 8013f32:	2500      	movs	r5, #0
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	dc16      	bgt.n	8013f66 <_dtoa_r+0x866>
 8013f38:	2500      	movs	r5, #0
 8013f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f3c:	42ab      	cmp	r3, r5
 8013f3e:	d10e      	bne.n	8013f5e <_dtoa_r+0x85e>
 8013f40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f42:	031b      	lsls	r3, r3, #12
 8013f44:	42ab      	cmp	r3, r5
 8013f46:	d10a      	bne.n	8013f5e <_dtoa_r+0x85e>
 8013f48:	4b8d      	ldr	r3, [pc, #564]	@ (8014180 <_dtoa_r+0xa80>)
 8013f4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f4c:	4213      	tst	r3, r2
 8013f4e:	d006      	beq.n	8013f5e <_dtoa_r+0x85e>
 8013f50:	9b06      	ldr	r3, [sp, #24]
 8013f52:	3501      	adds	r5, #1
 8013f54:	3301      	adds	r3, #1
 8013f56:	9306      	str	r3, [sp, #24]
 8013f58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	930d      	str	r3, [sp, #52]	@ 0x34
 8013f5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013f60:	2001      	movs	r0, #1
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d008      	beq.n	8013f78 <_dtoa_r+0x878>
 8013f66:	6933      	ldr	r3, [r6, #16]
 8013f68:	3303      	adds	r3, #3
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	18f3      	adds	r3, r6, r3
 8013f6e:	6858      	ldr	r0, [r3, #4]
 8013f70:	f000 fbb8 	bl	80146e4 <__hi0bits>
 8013f74:	2320      	movs	r3, #32
 8013f76:	1a18      	subs	r0, r3, r0
 8013f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f7a:	1818      	adds	r0, r3, r0
 8013f7c:	0002      	movs	r2, r0
 8013f7e:	231f      	movs	r3, #31
 8013f80:	401a      	ands	r2, r3
 8013f82:	4218      	tst	r0, r3
 8013f84:	d065      	beq.n	8014052 <_dtoa_r+0x952>
 8013f86:	3301      	adds	r3, #1
 8013f88:	1a9b      	subs	r3, r3, r2
 8013f8a:	2b04      	cmp	r3, #4
 8013f8c:	dd5d      	ble.n	801404a <_dtoa_r+0x94a>
 8013f8e:	231c      	movs	r3, #28
 8013f90:	1a9b      	subs	r3, r3, r2
 8013f92:	9a06      	ldr	r2, [sp, #24]
 8013f94:	18e4      	adds	r4, r4, r3
 8013f96:	18d2      	adds	r2, r2, r3
 8013f98:	9206      	str	r2, [sp, #24]
 8013f9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013f9c:	18d3      	adds	r3, r2, r3
 8013f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013fa0:	9b06      	ldr	r3, [sp, #24]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	dd05      	ble.n	8013fb2 <_dtoa_r+0x8b2>
 8013fa6:	001a      	movs	r2, r3
 8013fa8:	9905      	ldr	r1, [sp, #20]
 8013faa:	9803      	ldr	r0, [sp, #12]
 8013fac:	f000 fd10 	bl	80149d0 <__lshift>
 8013fb0:	9005      	str	r0, [sp, #20]
 8013fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	dd05      	ble.n	8013fc4 <_dtoa_r+0x8c4>
 8013fb8:	0031      	movs	r1, r6
 8013fba:	001a      	movs	r2, r3
 8013fbc:	9803      	ldr	r0, [sp, #12]
 8013fbe:	f000 fd07 	bl	80149d0 <__lshift>
 8013fc2:	0006      	movs	r6, r0
 8013fc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d045      	beq.n	8014056 <_dtoa_r+0x956>
 8013fca:	0031      	movs	r1, r6
 8013fcc:	9805      	ldr	r0, [sp, #20]
 8013fce:	f000 fd6b 	bl	8014aa8 <__mcmp>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	da3f      	bge.n	8014056 <_dtoa_r+0x956>
 8013fd6:	9b04      	ldr	r3, [sp, #16]
 8013fd8:	220a      	movs	r2, #10
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8013fde:	9905      	ldr	r1, [sp, #20]
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	9803      	ldr	r0, [sp, #12]
 8013fe4:	f000 faee 	bl	80145c4 <__multadd>
 8013fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013fea:	9005      	str	r0, [sp, #20]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d100      	bne.n	8013ff2 <_dtoa_r+0x8f2>
 8013ff0:	e15c      	b.n	80142ac <_dtoa_r+0xbac>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	0039      	movs	r1, r7
 8013ff6:	220a      	movs	r2, #10
 8013ff8:	9803      	ldr	r0, [sp, #12]
 8013ffa:	f000 fae3 	bl	80145c4 <__multadd>
 8013ffe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014000:	0007      	movs	r7, r0
 8014002:	2b00      	cmp	r3, #0
 8014004:	dc55      	bgt.n	80140b2 <_dtoa_r+0x9b2>
 8014006:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014008:	2b02      	cmp	r3, #2
 801400a:	dc2d      	bgt.n	8014068 <_dtoa_r+0x968>
 801400c:	e051      	b.n	80140b2 <_dtoa_r+0x9b2>
 801400e:	2336      	movs	r3, #54	@ 0x36
 8014010:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014012:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8014014:	9c06      	ldr	r4, [sp, #24]
 8014016:	1a9b      	subs	r3, r3, r2
 8014018:	e73c      	b.n	8013e94 <_dtoa_r+0x794>
 801401a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801401c:	1e5d      	subs	r5, r3, #1
 801401e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014020:	42ab      	cmp	r3, r5
 8014022:	db08      	blt.n	8014036 <_dtoa_r+0x936>
 8014024:	1b5d      	subs	r5, r3, r5
 8014026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014028:	9c06      	ldr	r4, [sp, #24]
 801402a:	2b00      	cmp	r3, #0
 801402c:	db00      	blt.n	8014030 <_dtoa_r+0x930>
 801402e:	e731      	b.n	8013e94 <_dtoa_r+0x794>
 8014030:	1ae4      	subs	r4, r4, r3
 8014032:	2300      	movs	r3, #0
 8014034:	e72e      	b.n	8013e94 <_dtoa_r+0x794>
 8014036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014038:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801403a:	1aeb      	subs	r3, r5, r3
 801403c:	18d3      	adds	r3, r2, r3
 801403e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014040:	9314      	str	r3, [sp, #80]	@ 0x50
 8014042:	2500      	movs	r5, #0
 8014044:	e7ef      	b.n	8014026 <_dtoa_r+0x926>
 8014046:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014048:	e75e      	b.n	8013f08 <_dtoa_r+0x808>
 801404a:	2b04      	cmp	r3, #4
 801404c:	d0a8      	beq.n	8013fa0 <_dtoa_r+0x8a0>
 801404e:	331c      	adds	r3, #28
 8014050:	e79f      	b.n	8013f92 <_dtoa_r+0x892>
 8014052:	0013      	movs	r3, r2
 8014054:	e7fb      	b.n	801404e <_dtoa_r+0x94e>
 8014056:	9b04      	ldr	r3, [sp, #16]
 8014058:	930c      	str	r3, [sp, #48]	@ 0x30
 801405a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405c:	930e      	str	r3, [sp, #56]	@ 0x38
 801405e:	2b00      	cmp	r3, #0
 8014060:	dc23      	bgt.n	80140aa <_dtoa_r+0x9aa>
 8014062:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014064:	2b02      	cmp	r3, #2
 8014066:	dd20      	ble.n	80140aa <_dtoa_r+0x9aa>
 8014068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801406a:	2b00      	cmp	r3, #0
 801406c:	d000      	beq.n	8014070 <_dtoa_r+0x970>
 801406e:	e6b5      	b.n	8013ddc <_dtoa_r+0x6dc>
 8014070:	0031      	movs	r1, r6
 8014072:	2205      	movs	r2, #5
 8014074:	9803      	ldr	r0, [sp, #12]
 8014076:	f000 faa5 	bl	80145c4 <__multadd>
 801407a:	0006      	movs	r6, r0
 801407c:	0001      	movs	r1, r0
 801407e:	9805      	ldr	r0, [sp, #20]
 8014080:	f000 fd12 	bl	8014aa8 <__mcmp>
 8014084:	2800      	cmp	r0, #0
 8014086:	dc00      	bgt.n	801408a <_dtoa_r+0x98a>
 8014088:	e6a8      	b.n	8013ddc <_dtoa_r+0x6dc>
 801408a:	9b08      	ldr	r3, [sp, #32]
 801408c:	9a08      	ldr	r2, [sp, #32]
 801408e:	1c5c      	adds	r4, r3, #1
 8014090:	2331      	movs	r3, #49	@ 0x31
 8014092:	7013      	strb	r3, [r2, #0]
 8014094:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014096:	3301      	adds	r3, #1
 8014098:	930c      	str	r3, [sp, #48]	@ 0x30
 801409a:	e6a3      	b.n	8013de4 <_dtoa_r+0x6e4>
 801409c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801409e:	0037      	movs	r7, r6
 80140a0:	e7f3      	b.n	801408a <_dtoa_r+0x98a>
 80140a2:	9b04      	ldr	r3, [sp, #16]
 80140a4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80140a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80140a8:	e7f9      	b.n	801409e <_dtoa_r+0x99e>
 80140aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d100      	bne.n	80140b2 <_dtoa_r+0x9b2>
 80140b0:	e100      	b.n	80142b4 <_dtoa_r+0xbb4>
 80140b2:	2c00      	cmp	r4, #0
 80140b4:	dd05      	ble.n	80140c2 <_dtoa_r+0x9c2>
 80140b6:	0039      	movs	r1, r7
 80140b8:	0022      	movs	r2, r4
 80140ba:	9803      	ldr	r0, [sp, #12]
 80140bc:	f000 fc88 	bl	80149d0 <__lshift>
 80140c0:	0007      	movs	r7, r0
 80140c2:	0038      	movs	r0, r7
 80140c4:	2d00      	cmp	r5, #0
 80140c6:	d018      	beq.n	80140fa <_dtoa_r+0x9fa>
 80140c8:	6879      	ldr	r1, [r7, #4]
 80140ca:	9803      	ldr	r0, [sp, #12]
 80140cc:	f000 fa12 	bl	80144f4 <_Balloc>
 80140d0:	1e04      	subs	r4, r0, #0
 80140d2:	d105      	bne.n	80140e0 <_dtoa_r+0x9e0>
 80140d4:	0022      	movs	r2, r4
 80140d6:	4b2b      	ldr	r3, [pc, #172]	@ (8014184 <_dtoa_r+0xa84>)
 80140d8:	482b      	ldr	r0, [pc, #172]	@ (8014188 <_dtoa_r+0xa88>)
 80140da:	492c      	ldr	r1, [pc, #176]	@ (801418c <_dtoa_r+0xa8c>)
 80140dc:	f7ff fb25 	bl	801372a <_dtoa_r+0x2a>
 80140e0:	0039      	movs	r1, r7
 80140e2:	693a      	ldr	r2, [r7, #16]
 80140e4:	310c      	adds	r1, #12
 80140e6:	3202      	adds	r2, #2
 80140e8:	0092      	lsls	r2, r2, #2
 80140ea:	300c      	adds	r0, #12
 80140ec:	f7ff fa70 	bl	80135d0 <memcpy>
 80140f0:	2201      	movs	r2, #1
 80140f2:	0021      	movs	r1, r4
 80140f4:	9803      	ldr	r0, [sp, #12]
 80140f6:	f000 fc6b 	bl	80149d0 <__lshift>
 80140fa:	9b08      	ldr	r3, [sp, #32]
 80140fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140fe:	9306      	str	r3, [sp, #24]
 8014100:	3b01      	subs	r3, #1
 8014102:	189b      	adds	r3, r3, r2
 8014104:	2201      	movs	r2, #1
 8014106:	9704      	str	r7, [sp, #16]
 8014108:	0007      	movs	r7, r0
 801410a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801410c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801410e:	4013      	ands	r3, r2
 8014110:	930e      	str	r3, [sp, #56]	@ 0x38
 8014112:	0031      	movs	r1, r6
 8014114:	9805      	ldr	r0, [sp, #20]
 8014116:	f7ff fa64 	bl	80135e2 <quorem>
 801411a:	9904      	ldr	r1, [sp, #16]
 801411c:	0005      	movs	r5, r0
 801411e:	900a      	str	r0, [sp, #40]	@ 0x28
 8014120:	9805      	ldr	r0, [sp, #20]
 8014122:	f000 fcc1 	bl	8014aa8 <__mcmp>
 8014126:	003a      	movs	r2, r7
 8014128:	900d      	str	r0, [sp, #52]	@ 0x34
 801412a:	0031      	movs	r1, r6
 801412c:	9803      	ldr	r0, [sp, #12]
 801412e:	f000 fcd7 	bl	8014ae0 <__mdiff>
 8014132:	2201      	movs	r2, #1
 8014134:	68c3      	ldr	r3, [r0, #12]
 8014136:	0004      	movs	r4, r0
 8014138:	3530      	adds	r5, #48	@ 0x30
 801413a:	9209      	str	r2, [sp, #36]	@ 0x24
 801413c:	2b00      	cmp	r3, #0
 801413e:	d104      	bne.n	801414a <_dtoa_r+0xa4a>
 8014140:	0001      	movs	r1, r0
 8014142:	9805      	ldr	r0, [sp, #20]
 8014144:	f000 fcb0 	bl	8014aa8 <__mcmp>
 8014148:	9009      	str	r0, [sp, #36]	@ 0x24
 801414a:	0021      	movs	r1, r4
 801414c:	9803      	ldr	r0, [sp, #12]
 801414e:	f000 fa15 	bl	801457c <_Bfree>
 8014152:	9b06      	ldr	r3, [sp, #24]
 8014154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014156:	1c5c      	adds	r4, r3, #1
 8014158:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801415a:	4313      	orrs	r3, r2
 801415c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801415e:	4313      	orrs	r3, r2
 8014160:	d116      	bne.n	8014190 <_dtoa_r+0xa90>
 8014162:	2d39      	cmp	r5, #57	@ 0x39
 8014164:	d02f      	beq.n	80141c6 <_dtoa_r+0xac6>
 8014166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014168:	2b00      	cmp	r3, #0
 801416a:	dd01      	ble.n	8014170 <_dtoa_r+0xa70>
 801416c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801416e:	3531      	adds	r5, #49	@ 0x31
 8014170:	9b06      	ldr	r3, [sp, #24]
 8014172:	701d      	strb	r5, [r3, #0]
 8014174:	e638      	b.n	8013de8 <_dtoa_r+0x6e8>
 8014176:	46c0      	nop			@ (mov r8, r8)
 8014178:	40240000 	.word	0x40240000
 801417c:	00000433 	.word	0x00000433
 8014180:	7ff00000 	.word	0x7ff00000
 8014184:	08017781 	.word	0x08017781
 8014188:	08017729 	.word	0x08017729
 801418c:	000002ef 	.word	0x000002ef
 8014190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014192:	2b00      	cmp	r3, #0
 8014194:	db04      	blt.n	80141a0 <_dtoa_r+0xaa0>
 8014196:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014198:	4313      	orrs	r3, r2
 801419a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801419c:	4313      	orrs	r3, r2
 801419e:	d11e      	bne.n	80141de <_dtoa_r+0xade>
 80141a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	dde4      	ble.n	8014170 <_dtoa_r+0xa70>
 80141a6:	9905      	ldr	r1, [sp, #20]
 80141a8:	2201      	movs	r2, #1
 80141aa:	9803      	ldr	r0, [sp, #12]
 80141ac:	f000 fc10 	bl	80149d0 <__lshift>
 80141b0:	0031      	movs	r1, r6
 80141b2:	9005      	str	r0, [sp, #20]
 80141b4:	f000 fc78 	bl	8014aa8 <__mcmp>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	dc02      	bgt.n	80141c2 <_dtoa_r+0xac2>
 80141bc:	d1d8      	bne.n	8014170 <_dtoa_r+0xa70>
 80141be:	07eb      	lsls	r3, r5, #31
 80141c0:	d5d6      	bpl.n	8014170 <_dtoa_r+0xa70>
 80141c2:	2d39      	cmp	r5, #57	@ 0x39
 80141c4:	d1d2      	bne.n	801416c <_dtoa_r+0xa6c>
 80141c6:	2339      	movs	r3, #57	@ 0x39
 80141c8:	9a06      	ldr	r2, [sp, #24]
 80141ca:	7013      	strb	r3, [r2, #0]
 80141cc:	0023      	movs	r3, r4
 80141ce:	001c      	movs	r4, r3
 80141d0:	3b01      	subs	r3, #1
 80141d2:	781a      	ldrb	r2, [r3, #0]
 80141d4:	2a39      	cmp	r2, #57	@ 0x39
 80141d6:	d04f      	beq.n	8014278 <_dtoa_r+0xb78>
 80141d8:	3201      	adds	r2, #1
 80141da:	701a      	strb	r2, [r3, #0]
 80141dc:	e604      	b.n	8013de8 <_dtoa_r+0x6e8>
 80141de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	dd03      	ble.n	80141ec <_dtoa_r+0xaec>
 80141e4:	2d39      	cmp	r5, #57	@ 0x39
 80141e6:	d0ee      	beq.n	80141c6 <_dtoa_r+0xac6>
 80141e8:	3501      	adds	r5, #1
 80141ea:	e7c1      	b.n	8014170 <_dtoa_r+0xa70>
 80141ec:	9b06      	ldr	r3, [sp, #24]
 80141ee:	9a06      	ldr	r2, [sp, #24]
 80141f0:	701d      	strb	r5, [r3, #0]
 80141f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d02a      	beq.n	801424e <_dtoa_r+0xb4e>
 80141f8:	2300      	movs	r3, #0
 80141fa:	220a      	movs	r2, #10
 80141fc:	9905      	ldr	r1, [sp, #20]
 80141fe:	9803      	ldr	r0, [sp, #12]
 8014200:	f000 f9e0 	bl	80145c4 <__multadd>
 8014204:	9b04      	ldr	r3, [sp, #16]
 8014206:	9005      	str	r0, [sp, #20]
 8014208:	42bb      	cmp	r3, r7
 801420a:	d109      	bne.n	8014220 <_dtoa_r+0xb20>
 801420c:	2300      	movs	r3, #0
 801420e:	220a      	movs	r2, #10
 8014210:	9904      	ldr	r1, [sp, #16]
 8014212:	9803      	ldr	r0, [sp, #12]
 8014214:	f000 f9d6 	bl	80145c4 <__multadd>
 8014218:	9004      	str	r0, [sp, #16]
 801421a:	0007      	movs	r7, r0
 801421c:	9406      	str	r4, [sp, #24]
 801421e:	e778      	b.n	8014112 <_dtoa_r+0xa12>
 8014220:	9904      	ldr	r1, [sp, #16]
 8014222:	2300      	movs	r3, #0
 8014224:	220a      	movs	r2, #10
 8014226:	9803      	ldr	r0, [sp, #12]
 8014228:	f000 f9cc 	bl	80145c4 <__multadd>
 801422c:	2300      	movs	r3, #0
 801422e:	9004      	str	r0, [sp, #16]
 8014230:	220a      	movs	r2, #10
 8014232:	0039      	movs	r1, r7
 8014234:	9803      	ldr	r0, [sp, #12]
 8014236:	f000 f9c5 	bl	80145c4 <__multadd>
 801423a:	e7ee      	b.n	801421a <_dtoa_r+0xb1a>
 801423c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801423e:	2401      	movs	r4, #1
 8014240:	2b00      	cmp	r3, #0
 8014242:	dd00      	ble.n	8014246 <_dtoa_r+0xb46>
 8014244:	001c      	movs	r4, r3
 8014246:	9b08      	ldr	r3, [sp, #32]
 8014248:	191c      	adds	r4, r3, r4
 801424a:	2300      	movs	r3, #0
 801424c:	9304      	str	r3, [sp, #16]
 801424e:	9905      	ldr	r1, [sp, #20]
 8014250:	2201      	movs	r2, #1
 8014252:	9803      	ldr	r0, [sp, #12]
 8014254:	f000 fbbc 	bl	80149d0 <__lshift>
 8014258:	0031      	movs	r1, r6
 801425a:	9005      	str	r0, [sp, #20]
 801425c:	f000 fc24 	bl	8014aa8 <__mcmp>
 8014260:	2800      	cmp	r0, #0
 8014262:	dcb3      	bgt.n	80141cc <_dtoa_r+0xacc>
 8014264:	d101      	bne.n	801426a <_dtoa_r+0xb6a>
 8014266:	07ed      	lsls	r5, r5, #31
 8014268:	d4b0      	bmi.n	80141cc <_dtoa_r+0xacc>
 801426a:	0023      	movs	r3, r4
 801426c:	001c      	movs	r4, r3
 801426e:	3b01      	subs	r3, #1
 8014270:	781a      	ldrb	r2, [r3, #0]
 8014272:	2a30      	cmp	r2, #48	@ 0x30
 8014274:	d0fa      	beq.n	801426c <_dtoa_r+0xb6c>
 8014276:	e5b7      	b.n	8013de8 <_dtoa_r+0x6e8>
 8014278:	9a08      	ldr	r2, [sp, #32]
 801427a:	429a      	cmp	r2, r3
 801427c:	d1a7      	bne.n	80141ce <_dtoa_r+0xace>
 801427e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014280:	3301      	adds	r3, #1
 8014282:	930c      	str	r3, [sp, #48]	@ 0x30
 8014284:	2331      	movs	r3, #49	@ 0x31
 8014286:	7013      	strb	r3, [r2, #0]
 8014288:	e5ae      	b.n	8013de8 <_dtoa_r+0x6e8>
 801428a:	4b15      	ldr	r3, [pc, #84]	@ (80142e0 <_dtoa_r+0xbe0>)
 801428c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801428e:	9308      	str	r3, [sp, #32]
 8014290:	4b14      	ldr	r3, [pc, #80]	@ (80142e4 <_dtoa_r+0xbe4>)
 8014292:	2a00      	cmp	r2, #0
 8014294:	d001      	beq.n	801429a <_dtoa_r+0xb9a>
 8014296:	f7ff fa7b 	bl	8013790 <_dtoa_r+0x90>
 801429a:	f7ff fa7b 	bl	8013794 <_dtoa_r+0x94>
 801429e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	dc00      	bgt.n	80142a6 <_dtoa_r+0xba6>
 80142a4:	e648      	b.n	8013f38 <_dtoa_r+0x838>
 80142a6:	2001      	movs	r0, #1
 80142a8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80142aa:	e665      	b.n	8013f78 <_dtoa_r+0x878>
 80142ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	dc00      	bgt.n	80142b4 <_dtoa_r+0xbb4>
 80142b2:	e6d6      	b.n	8014062 <_dtoa_r+0x962>
 80142b4:	2400      	movs	r4, #0
 80142b6:	0031      	movs	r1, r6
 80142b8:	9805      	ldr	r0, [sp, #20]
 80142ba:	f7ff f992 	bl	80135e2 <quorem>
 80142be:	9b08      	ldr	r3, [sp, #32]
 80142c0:	3030      	adds	r0, #48	@ 0x30
 80142c2:	5518      	strb	r0, [r3, r4]
 80142c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142c6:	3401      	adds	r4, #1
 80142c8:	0005      	movs	r5, r0
 80142ca:	429c      	cmp	r4, r3
 80142cc:	dab6      	bge.n	801423c <_dtoa_r+0xb3c>
 80142ce:	2300      	movs	r3, #0
 80142d0:	220a      	movs	r2, #10
 80142d2:	9905      	ldr	r1, [sp, #20]
 80142d4:	9803      	ldr	r0, [sp, #12]
 80142d6:	f000 f975 	bl	80145c4 <__multadd>
 80142da:	9005      	str	r0, [sp, #20]
 80142dc:	e7eb      	b.n	80142b6 <_dtoa_r+0xbb6>
 80142de:	46c0      	nop			@ (mov r8, r8)
 80142e0:	08017705 	.word	0x08017705
 80142e4:	0801770d 	.word	0x0801770d

080142e8 <_free_r>:
 80142e8:	b570      	push	{r4, r5, r6, lr}
 80142ea:	0005      	movs	r5, r0
 80142ec:	1e0c      	subs	r4, r1, #0
 80142ee:	d010      	beq.n	8014312 <_free_r+0x2a>
 80142f0:	3c04      	subs	r4, #4
 80142f2:	6823      	ldr	r3, [r4, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	da00      	bge.n	80142fa <_free_r+0x12>
 80142f8:	18e4      	adds	r4, r4, r3
 80142fa:	0028      	movs	r0, r5
 80142fc:	f000 f8ea 	bl	80144d4 <__malloc_lock>
 8014300:	4a1d      	ldr	r2, [pc, #116]	@ (8014378 <_free_r+0x90>)
 8014302:	6813      	ldr	r3, [r2, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d105      	bne.n	8014314 <_free_r+0x2c>
 8014308:	6063      	str	r3, [r4, #4]
 801430a:	6014      	str	r4, [r2, #0]
 801430c:	0028      	movs	r0, r5
 801430e:	f000 f8e9 	bl	80144e4 <__malloc_unlock>
 8014312:	bd70      	pop	{r4, r5, r6, pc}
 8014314:	42a3      	cmp	r3, r4
 8014316:	d908      	bls.n	801432a <_free_r+0x42>
 8014318:	6820      	ldr	r0, [r4, #0]
 801431a:	1821      	adds	r1, r4, r0
 801431c:	428b      	cmp	r3, r1
 801431e:	d1f3      	bne.n	8014308 <_free_r+0x20>
 8014320:	6819      	ldr	r1, [r3, #0]
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	1809      	adds	r1, r1, r0
 8014326:	6021      	str	r1, [r4, #0]
 8014328:	e7ee      	b.n	8014308 <_free_r+0x20>
 801432a:	001a      	movs	r2, r3
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d001      	beq.n	8014336 <_free_r+0x4e>
 8014332:	42a3      	cmp	r3, r4
 8014334:	d9f9      	bls.n	801432a <_free_r+0x42>
 8014336:	6811      	ldr	r1, [r2, #0]
 8014338:	1850      	adds	r0, r2, r1
 801433a:	42a0      	cmp	r0, r4
 801433c:	d10b      	bne.n	8014356 <_free_r+0x6e>
 801433e:	6820      	ldr	r0, [r4, #0]
 8014340:	1809      	adds	r1, r1, r0
 8014342:	1850      	adds	r0, r2, r1
 8014344:	6011      	str	r1, [r2, #0]
 8014346:	4283      	cmp	r3, r0
 8014348:	d1e0      	bne.n	801430c <_free_r+0x24>
 801434a:	6818      	ldr	r0, [r3, #0]
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	1841      	adds	r1, r0, r1
 8014350:	6011      	str	r1, [r2, #0]
 8014352:	6053      	str	r3, [r2, #4]
 8014354:	e7da      	b.n	801430c <_free_r+0x24>
 8014356:	42a0      	cmp	r0, r4
 8014358:	d902      	bls.n	8014360 <_free_r+0x78>
 801435a:	230c      	movs	r3, #12
 801435c:	602b      	str	r3, [r5, #0]
 801435e:	e7d5      	b.n	801430c <_free_r+0x24>
 8014360:	6820      	ldr	r0, [r4, #0]
 8014362:	1821      	adds	r1, r4, r0
 8014364:	428b      	cmp	r3, r1
 8014366:	d103      	bne.n	8014370 <_free_r+0x88>
 8014368:	6819      	ldr	r1, [r3, #0]
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	1809      	adds	r1, r1, r0
 801436e:	6021      	str	r1, [r4, #0]
 8014370:	6063      	str	r3, [r4, #4]
 8014372:	6054      	str	r4, [r2, #4]
 8014374:	e7ca      	b.n	801430c <_free_r+0x24>
 8014376:	46c0      	nop			@ (mov r8, r8)
 8014378:	2000728c 	.word	0x2000728c

0801437c <malloc>:
 801437c:	b510      	push	{r4, lr}
 801437e:	4b03      	ldr	r3, [pc, #12]	@ (801438c <malloc+0x10>)
 8014380:	0001      	movs	r1, r0
 8014382:	6818      	ldr	r0, [r3, #0]
 8014384:	f000 f826 	bl	80143d4 <_malloc_r>
 8014388:	bd10      	pop	{r4, pc}
 801438a:	46c0      	nop			@ (mov r8, r8)
 801438c:	20000094 	.word	0x20000094

08014390 <sbrk_aligned>:
 8014390:	b570      	push	{r4, r5, r6, lr}
 8014392:	4e0f      	ldr	r6, [pc, #60]	@ (80143d0 <sbrk_aligned+0x40>)
 8014394:	000d      	movs	r5, r1
 8014396:	6831      	ldr	r1, [r6, #0]
 8014398:	0004      	movs	r4, r0
 801439a:	2900      	cmp	r1, #0
 801439c:	d102      	bne.n	80143a4 <sbrk_aligned+0x14>
 801439e:	f001 fe47 	bl	8016030 <_sbrk_r>
 80143a2:	6030      	str	r0, [r6, #0]
 80143a4:	0029      	movs	r1, r5
 80143a6:	0020      	movs	r0, r4
 80143a8:	f001 fe42 	bl	8016030 <_sbrk_r>
 80143ac:	1c43      	adds	r3, r0, #1
 80143ae:	d103      	bne.n	80143b8 <sbrk_aligned+0x28>
 80143b0:	2501      	movs	r5, #1
 80143b2:	426d      	negs	r5, r5
 80143b4:	0028      	movs	r0, r5
 80143b6:	bd70      	pop	{r4, r5, r6, pc}
 80143b8:	2303      	movs	r3, #3
 80143ba:	1cc5      	adds	r5, r0, #3
 80143bc:	439d      	bics	r5, r3
 80143be:	42a8      	cmp	r0, r5
 80143c0:	d0f8      	beq.n	80143b4 <sbrk_aligned+0x24>
 80143c2:	1a29      	subs	r1, r5, r0
 80143c4:	0020      	movs	r0, r4
 80143c6:	f001 fe33 	bl	8016030 <_sbrk_r>
 80143ca:	3001      	adds	r0, #1
 80143cc:	d1f2      	bne.n	80143b4 <sbrk_aligned+0x24>
 80143ce:	e7ef      	b.n	80143b0 <sbrk_aligned+0x20>
 80143d0:	20007288 	.word	0x20007288

080143d4 <_malloc_r>:
 80143d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143d6:	2203      	movs	r2, #3
 80143d8:	1ccb      	adds	r3, r1, #3
 80143da:	4393      	bics	r3, r2
 80143dc:	3308      	adds	r3, #8
 80143de:	0005      	movs	r5, r0
 80143e0:	001f      	movs	r7, r3
 80143e2:	2b0c      	cmp	r3, #12
 80143e4:	d234      	bcs.n	8014450 <_malloc_r+0x7c>
 80143e6:	270c      	movs	r7, #12
 80143e8:	42b9      	cmp	r1, r7
 80143ea:	d833      	bhi.n	8014454 <_malloc_r+0x80>
 80143ec:	0028      	movs	r0, r5
 80143ee:	f000 f871 	bl	80144d4 <__malloc_lock>
 80143f2:	4e37      	ldr	r6, [pc, #220]	@ (80144d0 <_malloc_r+0xfc>)
 80143f4:	6833      	ldr	r3, [r6, #0]
 80143f6:	001c      	movs	r4, r3
 80143f8:	2c00      	cmp	r4, #0
 80143fa:	d12f      	bne.n	801445c <_malloc_r+0x88>
 80143fc:	0039      	movs	r1, r7
 80143fe:	0028      	movs	r0, r5
 8014400:	f7ff ffc6 	bl	8014390 <sbrk_aligned>
 8014404:	0004      	movs	r4, r0
 8014406:	1c43      	adds	r3, r0, #1
 8014408:	d15f      	bne.n	80144ca <_malloc_r+0xf6>
 801440a:	6834      	ldr	r4, [r6, #0]
 801440c:	9400      	str	r4, [sp, #0]
 801440e:	9b00      	ldr	r3, [sp, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d14a      	bne.n	80144aa <_malloc_r+0xd6>
 8014414:	2c00      	cmp	r4, #0
 8014416:	d052      	beq.n	80144be <_malloc_r+0xea>
 8014418:	6823      	ldr	r3, [r4, #0]
 801441a:	0028      	movs	r0, r5
 801441c:	18e3      	adds	r3, r4, r3
 801441e:	9900      	ldr	r1, [sp, #0]
 8014420:	9301      	str	r3, [sp, #4]
 8014422:	f001 fe05 	bl	8016030 <_sbrk_r>
 8014426:	9b01      	ldr	r3, [sp, #4]
 8014428:	4283      	cmp	r3, r0
 801442a:	d148      	bne.n	80144be <_malloc_r+0xea>
 801442c:	6823      	ldr	r3, [r4, #0]
 801442e:	0028      	movs	r0, r5
 8014430:	1aff      	subs	r7, r7, r3
 8014432:	0039      	movs	r1, r7
 8014434:	f7ff ffac 	bl	8014390 <sbrk_aligned>
 8014438:	3001      	adds	r0, #1
 801443a:	d040      	beq.n	80144be <_malloc_r+0xea>
 801443c:	6823      	ldr	r3, [r4, #0]
 801443e:	19db      	adds	r3, r3, r7
 8014440:	6023      	str	r3, [r4, #0]
 8014442:	6833      	ldr	r3, [r6, #0]
 8014444:	685a      	ldr	r2, [r3, #4]
 8014446:	2a00      	cmp	r2, #0
 8014448:	d133      	bne.n	80144b2 <_malloc_r+0xde>
 801444a:	9b00      	ldr	r3, [sp, #0]
 801444c:	6033      	str	r3, [r6, #0]
 801444e:	e019      	b.n	8014484 <_malloc_r+0xb0>
 8014450:	2b00      	cmp	r3, #0
 8014452:	dac9      	bge.n	80143e8 <_malloc_r+0x14>
 8014454:	230c      	movs	r3, #12
 8014456:	602b      	str	r3, [r5, #0]
 8014458:	2000      	movs	r0, #0
 801445a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801445c:	6821      	ldr	r1, [r4, #0]
 801445e:	1bc9      	subs	r1, r1, r7
 8014460:	d420      	bmi.n	80144a4 <_malloc_r+0xd0>
 8014462:	290b      	cmp	r1, #11
 8014464:	d90a      	bls.n	801447c <_malloc_r+0xa8>
 8014466:	19e2      	adds	r2, r4, r7
 8014468:	6027      	str	r7, [r4, #0]
 801446a:	42a3      	cmp	r3, r4
 801446c:	d104      	bne.n	8014478 <_malloc_r+0xa4>
 801446e:	6032      	str	r2, [r6, #0]
 8014470:	6863      	ldr	r3, [r4, #4]
 8014472:	6011      	str	r1, [r2, #0]
 8014474:	6053      	str	r3, [r2, #4]
 8014476:	e005      	b.n	8014484 <_malloc_r+0xb0>
 8014478:	605a      	str	r2, [r3, #4]
 801447a:	e7f9      	b.n	8014470 <_malloc_r+0x9c>
 801447c:	6862      	ldr	r2, [r4, #4]
 801447e:	42a3      	cmp	r3, r4
 8014480:	d10e      	bne.n	80144a0 <_malloc_r+0xcc>
 8014482:	6032      	str	r2, [r6, #0]
 8014484:	0028      	movs	r0, r5
 8014486:	f000 f82d 	bl	80144e4 <__malloc_unlock>
 801448a:	0020      	movs	r0, r4
 801448c:	2207      	movs	r2, #7
 801448e:	300b      	adds	r0, #11
 8014490:	1d23      	adds	r3, r4, #4
 8014492:	4390      	bics	r0, r2
 8014494:	1ac2      	subs	r2, r0, r3
 8014496:	4298      	cmp	r0, r3
 8014498:	d0df      	beq.n	801445a <_malloc_r+0x86>
 801449a:	1a1b      	subs	r3, r3, r0
 801449c:	50a3      	str	r3, [r4, r2]
 801449e:	e7dc      	b.n	801445a <_malloc_r+0x86>
 80144a0:	605a      	str	r2, [r3, #4]
 80144a2:	e7ef      	b.n	8014484 <_malloc_r+0xb0>
 80144a4:	0023      	movs	r3, r4
 80144a6:	6864      	ldr	r4, [r4, #4]
 80144a8:	e7a6      	b.n	80143f8 <_malloc_r+0x24>
 80144aa:	9c00      	ldr	r4, [sp, #0]
 80144ac:	6863      	ldr	r3, [r4, #4]
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	e7ad      	b.n	801440e <_malloc_r+0x3a>
 80144b2:	001a      	movs	r2, r3
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	42a3      	cmp	r3, r4
 80144b8:	d1fb      	bne.n	80144b2 <_malloc_r+0xde>
 80144ba:	2300      	movs	r3, #0
 80144bc:	e7da      	b.n	8014474 <_malloc_r+0xa0>
 80144be:	230c      	movs	r3, #12
 80144c0:	0028      	movs	r0, r5
 80144c2:	602b      	str	r3, [r5, #0]
 80144c4:	f000 f80e 	bl	80144e4 <__malloc_unlock>
 80144c8:	e7c6      	b.n	8014458 <_malloc_r+0x84>
 80144ca:	6007      	str	r7, [r0, #0]
 80144cc:	e7da      	b.n	8014484 <_malloc_r+0xb0>
 80144ce:	46c0      	nop			@ (mov r8, r8)
 80144d0:	2000728c 	.word	0x2000728c

080144d4 <__malloc_lock>:
 80144d4:	b510      	push	{r4, lr}
 80144d6:	4802      	ldr	r0, [pc, #8]	@ (80144e0 <__malloc_lock+0xc>)
 80144d8:	f7ff f86d 	bl	80135b6 <__retarget_lock_acquire_recursive>
 80144dc:	bd10      	pop	{r4, pc}
 80144de:	46c0      	nop			@ (mov r8, r8)
 80144e0:	20007284 	.word	0x20007284

080144e4 <__malloc_unlock>:
 80144e4:	b510      	push	{r4, lr}
 80144e6:	4802      	ldr	r0, [pc, #8]	@ (80144f0 <__malloc_unlock+0xc>)
 80144e8:	f7ff f866 	bl	80135b8 <__retarget_lock_release_recursive>
 80144ec:	bd10      	pop	{r4, pc}
 80144ee:	46c0      	nop			@ (mov r8, r8)
 80144f0:	20007284 	.word	0x20007284

080144f4 <_Balloc>:
 80144f4:	b570      	push	{r4, r5, r6, lr}
 80144f6:	69c5      	ldr	r5, [r0, #28]
 80144f8:	0006      	movs	r6, r0
 80144fa:	000c      	movs	r4, r1
 80144fc:	2d00      	cmp	r5, #0
 80144fe:	d10e      	bne.n	801451e <_Balloc+0x2a>
 8014500:	2010      	movs	r0, #16
 8014502:	f7ff ff3b 	bl	801437c <malloc>
 8014506:	1e02      	subs	r2, r0, #0
 8014508:	61f0      	str	r0, [r6, #28]
 801450a:	d104      	bne.n	8014516 <_Balloc+0x22>
 801450c:	216b      	movs	r1, #107	@ 0x6b
 801450e:	4b19      	ldr	r3, [pc, #100]	@ (8014574 <_Balloc+0x80>)
 8014510:	4819      	ldr	r0, [pc, #100]	@ (8014578 <_Balloc+0x84>)
 8014512:	f001 fda5 	bl	8016060 <__assert_func>
 8014516:	6045      	str	r5, [r0, #4]
 8014518:	6085      	str	r5, [r0, #8]
 801451a:	6005      	str	r5, [r0, #0]
 801451c:	60c5      	str	r5, [r0, #12]
 801451e:	69f5      	ldr	r5, [r6, #28]
 8014520:	68eb      	ldr	r3, [r5, #12]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d013      	beq.n	801454e <_Balloc+0x5a>
 8014526:	69f3      	ldr	r3, [r6, #28]
 8014528:	00a2      	lsls	r2, r4, #2
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	189b      	adds	r3, r3, r2
 801452e:	6818      	ldr	r0, [r3, #0]
 8014530:	2800      	cmp	r0, #0
 8014532:	d118      	bne.n	8014566 <_Balloc+0x72>
 8014534:	2101      	movs	r1, #1
 8014536:	000d      	movs	r5, r1
 8014538:	40a5      	lsls	r5, r4
 801453a:	1d6a      	adds	r2, r5, #5
 801453c:	0030      	movs	r0, r6
 801453e:	0092      	lsls	r2, r2, #2
 8014540:	f001 fdac 	bl	801609c <_calloc_r>
 8014544:	2800      	cmp	r0, #0
 8014546:	d00c      	beq.n	8014562 <_Balloc+0x6e>
 8014548:	6044      	str	r4, [r0, #4]
 801454a:	6085      	str	r5, [r0, #8]
 801454c:	e00d      	b.n	801456a <_Balloc+0x76>
 801454e:	2221      	movs	r2, #33	@ 0x21
 8014550:	2104      	movs	r1, #4
 8014552:	0030      	movs	r0, r6
 8014554:	f001 fda2 	bl	801609c <_calloc_r>
 8014558:	69f3      	ldr	r3, [r6, #28]
 801455a:	60e8      	str	r0, [r5, #12]
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d1e1      	bne.n	8014526 <_Balloc+0x32>
 8014562:	2000      	movs	r0, #0
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	6802      	ldr	r2, [r0, #0]
 8014568:	601a      	str	r2, [r3, #0]
 801456a:	2300      	movs	r3, #0
 801456c:	6103      	str	r3, [r0, #16]
 801456e:	60c3      	str	r3, [r0, #12]
 8014570:	e7f8      	b.n	8014564 <_Balloc+0x70>
 8014572:	46c0      	nop			@ (mov r8, r8)
 8014574:	08017712 	.word	0x08017712
 8014578:	08017792 	.word	0x08017792

0801457c <_Bfree>:
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	69c6      	ldr	r6, [r0, #28]
 8014580:	0005      	movs	r5, r0
 8014582:	000c      	movs	r4, r1
 8014584:	2e00      	cmp	r6, #0
 8014586:	d10e      	bne.n	80145a6 <_Bfree+0x2a>
 8014588:	2010      	movs	r0, #16
 801458a:	f7ff fef7 	bl	801437c <malloc>
 801458e:	1e02      	subs	r2, r0, #0
 8014590:	61e8      	str	r0, [r5, #28]
 8014592:	d104      	bne.n	801459e <_Bfree+0x22>
 8014594:	218f      	movs	r1, #143	@ 0x8f
 8014596:	4b09      	ldr	r3, [pc, #36]	@ (80145bc <_Bfree+0x40>)
 8014598:	4809      	ldr	r0, [pc, #36]	@ (80145c0 <_Bfree+0x44>)
 801459a:	f001 fd61 	bl	8016060 <__assert_func>
 801459e:	6046      	str	r6, [r0, #4]
 80145a0:	6086      	str	r6, [r0, #8]
 80145a2:	6006      	str	r6, [r0, #0]
 80145a4:	60c6      	str	r6, [r0, #12]
 80145a6:	2c00      	cmp	r4, #0
 80145a8:	d007      	beq.n	80145ba <_Bfree+0x3e>
 80145aa:	69eb      	ldr	r3, [r5, #28]
 80145ac:	6862      	ldr	r2, [r4, #4]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	0092      	lsls	r2, r2, #2
 80145b2:	189b      	adds	r3, r3, r2
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	6022      	str	r2, [r4, #0]
 80145b8:	601c      	str	r4, [r3, #0]
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
 80145bc:	08017712 	.word	0x08017712
 80145c0:	08017792 	.word	0x08017792

080145c4 <__multadd>:
 80145c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145c6:	000f      	movs	r7, r1
 80145c8:	9001      	str	r0, [sp, #4]
 80145ca:	000c      	movs	r4, r1
 80145cc:	001e      	movs	r6, r3
 80145ce:	2000      	movs	r0, #0
 80145d0:	690d      	ldr	r5, [r1, #16]
 80145d2:	3714      	adds	r7, #20
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	3001      	adds	r0, #1
 80145d8:	b299      	uxth	r1, r3
 80145da:	4351      	muls	r1, r2
 80145dc:	0c1b      	lsrs	r3, r3, #16
 80145de:	4353      	muls	r3, r2
 80145e0:	1989      	adds	r1, r1, r6
 80145e2:	0c0e      	lsrs	r6, r1, #16
 80145e4:	199b      	adds	r3, r3, r6
 80145e6:	0c1e      	lsrs	r6, r3, #16
 80145e8:	b289      	uxth	r1, r1
 80145ea:	041b      	lsls	r3, r3, #16
 80145ec:	185b      	adds	r3, r3, r1
 80145ee:	c708      	stmia	r7!, {r3}
 80145f0:	4285      	cmp	r5, r0
 80145f2:	dcef      	bgt.n	80145d4 <__multadd+0x10>
 80145f4:	2e00      	cmp	r6, #0
 80145f6:	d022      	beq.n	801463e <__multadd+0x7a>
 80145f8:	68a3      	ldr	r3, [r4, #8]
 80145fa:	42ab      	cmp	r3, r5
 80145fc:	dc19      	bgt.n	8014632 <__multadd+0x6e>
 80145fe:	6861      	ldr	r1, [r4, #4]
 8014600:	9801      	ldr	r0, [sp, #4]
 8014602:	3101      	adds	r1, #1
 8014604:	f7ff ff76 	bl	80144f4 <_Balloc>
 8014608:	1e07      	subs	r7, r0, #0
 801460a:	d105      	bne.n	8014618 <__multadd+0x54>
 801460c:	003a      	movs	r2, r7
 801460e:	21ba      	movs	r1, #186	@ 0xba
 8014610:	4b0c      	ldr	r3, [pc, #48]	@ (8014644 <__multadd+0x80>)
 8014612:	480d      	ldr	r0, [pc, #52]	@ (8014648 <__multadd+0x84>)
 8014614:	f001 fd24 	bl	8016060 <__assert_func>
 8014618:	0021      	movs	r1, r4
 801461a:	6922      	ldr	r2, [r4, #16]
 801461c:	310c      	adds	r1, #12
 801461e:	3202      	adds	r2, #2
 8014620:	0092      	lsls	r2, r2, #2
 8014622:	300c      	adds	r0, #12
 8014624:	f7fe ffd4 	bl	80135d0 <memcpy>
 8014628:	0021      	movs	r1, r4
 801462a:	9801      	ldr	r0, [sp, #4]
 801462c:	f7ff ffa6 	bl	801457c <_Bfree>
 8014630:	003c      	movs	r4, r7
 8014632:	1d2b      	adds	r3, r5, #4
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	18e3      	adds	r3, r4, r3
 8014638:	3501      	adds	r5, #1
 801463a:	605e      	str	r6, [r3, #4]
 801463c:	6125      	str	r5, [r4, #16]
 801463e:	0020      	movs	r0, r4
 8014640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014642:	46c0      	nop			@ (mov r8, r8)
 8014644:	08017781 	.word	0x08017781
 8014648:	08017792 	.word	0x08017792

0801464c <__s2b>:
 801464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801464e:	0007      	movs	r7, r0
 8014650:	0018      	movs	r0, r3
 8014652:	000c      	movs	r4, r1
 8014654:	3008      	adds	r0, #8
 8014656:	2109      	movs	r1, #9
 8014658:	9301      	str	r3, [sp, #4]
 801465a:	0015      	movs	r5, r2
 801465c:	f7eb fdfa 	bl	8000254 <__divsi3>
 8014660:	2301      	movs	r3, #1
 8014662:	2100      	movs	r1, #0
 8014664:	4283      	cmp	r3, r0
 8014666:	db0a      	blt.n	801467e <__s2b+0x32>
 8014668:	0038      	movs	r0, r7
 801466a:	f7ff ff43 	bl	80144f4 <_Balloc>
 801466e:	1e01      	subs	r1, r0, #0
 8014670:	d108      	bne.n	8014684 <__s2b+0x38>
 8014672:	000a      	movs	r2, r1
 8014674:	4b19      	ldr	r3, [pc, #100]	@ (80146dc <__s2b+0x90>)
 8014676:	481a      	ldr	r0, [pc, #104]	@ (80146e0 <__s2b+0x94>)
 8014678:	31d3      	adds	r1, #211	@ 0xd3
 801467a:	f001 fcf1 	bl	8016060 <__assert_func>
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	3101      	adds	r1, #1
 8014682:	e7ef      	b.n	8014664 <__s2b+0x18>
 8014684:	9b08      	ldr	r3, [sp, #32]
 8014686:	6143      	str	r3, [r0, #20]
 8014688:	2301      	movs	r3, #1
 801468a:	6103      	str	r3, [r0, #16]
 801468c:	2d09      	cmp	r5, #9
 801468e:	dd18      	ble.n	80146c2 <__s2b+0x76>
 8014690:	0023      	movs	r3, r4
 8014692:	3309      	adds	r3, #9
 8014694:	001e      	movs	r6, r3
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	1964      	adds	r4, r4, r5
 801469a:	7833      	ldrb	r3, [r6, #0]
 801469c:	220a      	movs	r2, #10
 801469e:	0038      	movs	r0, r7
 80146a0:	3b30      	subs	r3, #48	@ 0x30
 80146a2:	f7ff ff8f 	bl	80145c4 <__multadd>
 80146a6:	3601      	adds	r6, #1
 80146a8:	0001      	movs	r1, r0
 80146aa:	42a6      	cmp	r6, r4
 80146ac:	d1f5      	bne.n	801469a <__s2b+0x4e>
 80146ae:	002c      	movs	r4, r5
 80146b0:	9b00      	ldr	r3, [sp, #0]
 80146b2:	3c08      	subs	r4, #8
 80146b4:	191c      	adds	r4, r3, r4
 80146b6:	002e      	movs	r6, r5
 80146b8:	9b01      	ldr	r3, [sp, #4]
 80146ba:	429e      	cmp	r6, r3
 80146bc:	db04      	blt.n	80146c8 <__s2b+0x7c>
 80146be:	0008      	movs	r0, r1
 80146c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80146c2:	2509      	movs	r5, #9
 80146c4:	340a      	adds	r4, #10
 80146c6:	e7f6      	b.n	80146b6 <__s2b+0x6a>
 80146c8:	1b63      	subs	r3, r4, r5
 80146ca:	5d9b      	ldrb	r3, [r3, r6]
 80146cc:	220a      	movs	r2, #10
 80146ce:	0038      	movs	r0, r7
 80146d0:	3b30      	subs	r3, #48	@ 0x30
 80146d2:	f7ff ff77 	bl	80145c4 <__multadd>
 80146d6:	3601      	adds	r6, #1
 80146d8:	0001      	movs	r1, r0
 80146da:	e7ed      	b.n	80146b8 <__s2b+0x6c>
 80146dc:	08017781 	.word	0x08017781
 80146e0:	08017792 	.word	0x08017792

080146e4 <__hi0bits>:
 80146e4:	2280      	movs	r2, #128	@ 0x80
 80146e6:	0003      	movs	r3, r0
 80146e8:	0252      	lsls	r2, r2, #9
 80146ea:	2000      	movs	r0, #0
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d201      	bcs.n	80146f4 <__hi0bits+0x10>
 80146f0:	041b      	lsls	r3, r3, #16
 80146f2:	3010      	adds	r0, #16
 80146f4:	2280      	movs	r2, #128	@ 0x80
 80146f6:	0452      	lsls	r2, r2, #17
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d201      	bcs.n	8014700 <__hi0bits+0x1c>
 80146fc:	3008      	adds	r0, #8
 80146fe:	021b      	lsls	r3, r3, #8
 8014700:	2280      	movs	r2, #128	@ 0x80
 8014702:	0552      	lsls	r2, r2, #21
 8014704:	4293      	cmp	r3, r2
 8014706:	d201      	bcs.n	801470c <__hi0bits+0x28>
 8014708:	3004      	adds	r0, #4
 801470a:	011b      	lsls	r3, r3, #4
 801470c:	2280      	movs	r2, #128	@ 0x80
 801470e:	05d2      	lsls	r2, r2, #23
 8014710:	4293      	cmp	r3, r2
 8014712:	d201      	bcs.n	8014718 <__hi0bits+0x34>
 8014714:	3002      	adds	r0, #2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	2b00      	cmp	r3, #0
 801471a:	db03      	blt.n	8014724 <__hi0bits+0x40>
 801471c:	3001      	adds	r0, #1
 801471e:	4213      	tst	r3, r2
 8014720:	d100      	bne.n	8014724 <__hi0bits+0x40>
 8014722:	2020      	movs	r0, #32
 8014724:	4770      	bx	lr

08014726 <__lo0bits>:
 8014726:	6803      	ldr	r3, [r0, #0]
 8014728:	0001      	movs	r1, r0
 801472a:	2207      	movs	r2, #7
 801472c:	0018      	movs	r0, r3
 801472e:	4010      	ands	r0, r2
 8014730:	4213      	tst	r3, r2
 8014732:	d00d      	beq.n	8014750 <__lo0bits+0x2a>
 8014734:	3a06      	subs	r2, #6
 8014736:	2000      	movs	r0, #0
 8014738:	4213      	tst	r3, r2
 801473a:	d105      	bne.n	8014748 <__lo0bits+0x22>
 801473c:	3002      	adds	r0, #2
 801473e:	4203      	tst	r3, r0
 8014740:	d003      	beq.n	801474a <__lo0bits+0x24>
 8014742:	40d3      	lsrs	r3, r2
 8014744:	0010      	movs	r0, r2
 8014746:	600b      	str	r3, [r1, #0]
 8014748:	4770      	bx	lr
 801474a:	089b      	lsrs	r3, r3, #2
 801474c:	600b      	str	r3, [r1, #0]
 801474e:	e7fb      	b.n	8014748 <__lo0bits+0x22>
 8014750:	b29a      	uxth	r2, r3
 8014752:	2a00      	cmp	r2, #0
 8014754:	d101      	bne.n	801475a <__lo0bits+0x34>
 8014756:	2010      	movs	r0, #16
 8014758:	0c1b      	lsrs	r3, r3, #16
 801475a:	b2da      	uxtb	r2, r3
 801475c:	2a00      	cmp	r2, #0
 801475e:	d101      	bne.n	8014764 <__lo0bits+0x3e>
 8014760:	3008      	adds	r0, #8
 8014762:	0a1b      	lsrs	r3, r3, #8
 8014764:	071a      	lsls	r2, r3, #28
 8014766:	d101      	bne.n	801476c <__lo0bits+0x46>
 8014768:	3004      	adds	r0, #4
 801476a:	091b      	lsrs	r3, r3, #4
 801476c:	079a      	lsls	r2, r3, #30
 801476e:	d101      	bne.n	8014774 <__lo0bits+0x4e>
 8014770:	3002      	adds	r0, #2
 8014772:	089b      	lsrs	r3, r3, #2
 8014774:	07da      	lsls	r2, r3, #31
 8014776:	d4e9      	bmi.n	801474c <__lo0bits+0x26>
 8014778:	3001      	adds	r0, #1
 801477a:	085b      	lsrs	r3, r3, #1
 801477c:	d1e6      	bne.n	801474c <__lo0bits+0x26>
 801477e:	2020      	movs	r0, #32
 8014780:	e7e2      	b.n	8014748 <__lo0bits+0x22>
	...

08014784 <__i2b>:
 8014784:	b510      	push	{r4, lr}
 8014786:	000c      	movs	r4, r1
 8014788:	2101      	movs	r1, #1
 801478a:	f7ff feb3 	bl	80144f4 <_Balloc>
 801478e:	2800      	cmp	r0, #0
 8014790:	d107      	bne.n	80147a2 <__i2b+0x1e>
 8014792:	2146      	movs	r1, #70	@ 0x46
 8014794:	4c05      	ldr	r4, [pc, #20]	@ (80147ac <__i2b+0x28>)
 8014796:	0002      	movs	r2, r0
 8014798:	4b05      	ldr	r3, [pc, #20]	@ (80147b0 <__i2b+0x2c>)
 801479a:	0020      	movs	r0, r4
 801479c:	31ff      	adds	r1, #255	@ 0xff
 801479e:	f001 fc5f 	bl	8016060 <__assert_func>
 80147a2:	2301      	movs	r3, #1
 80147a4:	6144      	str	r4, [r0, #20]
 80147a6:	6103      	str	r3, [r0, #16]
 80147a8:	bd10      	pop	{r4, pc}
 80147aa:	46c0      	nop			@ (mov r8, r8)
 80147ac:	08017792 	.word	0x08017792
 80147b0:	08017781 	.word	0x08017781

080147b4 <__multiply>:
 80147b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147b6:	0014      	movs	r4, r2
 80147b8:	690a      	ldr	r2, [r1, #16]
 80147ba:	6923      	ldr	r3, [r4, #16]
 80147bc:	000d      	movs	r5, r1
 80147be:	b08b      	sub	sp, #44	@ 0x2c
 80147c0:	429a      	cmp	r2, r3
 80147c2:	db02      	blt.n	80147ca <__multiply+0x16>
 80147c4:	0023      	movs	r3, r4
 80147c6:	000c      	movs	r4, r1
 80147c8:	001d      	movs	r5, r3
 80147ca:	6927      	ldr	r7, [r4, #16]
 80147cc:	692e      	ldr	r6, [r5, #16]
 80147ce:	6861      	ldr	r1, [r4, #4]
 80147d0:	19bb      	adds	r3, r7, r6
 80147d2:	9303      	str	r3, [sp, #12]
 80147d4:	68a3      	ldr	r3, [r4, #8]
 80147d6:	19ba      	adds	r2, r7, r6
 80147d8:	4293      	cmp	r3, r2
 80147da:	da00      	bge.n	80147de <__multiply+0x2a>
 80147dc:	3101      	adds	r1, #1
 80147de:	f7ff fe89 	bl	80144f4 <_Balloc>
 80147e2:	9002      	str	r0, [sp, #8]
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d106      	bne.n	80147f6 <__multiply+0x42>
 80147e8:	21b1      	movs	r1, #177	@ 0xb1
 80147ea:	4b49      	ldr	r3, [pc, #292]	@ (8014910 <__multiply+0x15c>)
 80147ec:	4849      	ldr	r0, [pc, #292]	@ (8014914 <__multiply+0x160>)
 80147ee:	9a02      	ldr	r2, [sp, #8]
 80147f0:	0049      	lsls	r1, r1, #1
 80147f2:	f001 fc35 	bl	8016060 <__assert_func>
 80147f6:	9b02      	ldr	r3, [sp, #8]
 80147f8:	2200      	movs	r2, #0
 80147fa:	3314      	adds	r3, #20
 80147fc:	469c      	mov	ip, r3
 80147fe:	19bb      	adds	r3, r7, r6
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	4463      	add	r3, ip
 8014804:	9304      	str	r3, [sp, #16]
 8014806:	4663      	mov	r3, ip
 8014808:	9904      	ldr	r1, [sp, #16]
 801480a:	428b      	cmp	r3, r1
 801480c:	d32a      	bcc.n	8014864 <__multiply+0xb0>
 801480e:	0023      	movs	r3, r4
 8014810:	00bf      	lsls	r7, r7, #2
 8014812:	3314      	adds	r3, #20
 8014814:	3514      	adds	r5, #20
 8014816:	9308      	str	r3, [sp, #32]
 8014818:	00b6      	lsls	r6, r6, #2
 801481a:	19db      	adds	r3, r3, r7
 801481c:	9305      	str	r3, [sp, #20]
 801481e:	19ab      	adds	r3, r5, r6
 8014820:	9309      	str	r3, [sp, #36]	@ 0x24
 8014822:	2304      	movs	r3, #4
 8014824:	9306      	str	r3, [sp, #24]
 8014826:	0023      	movs	r3, r4
 8014828:	9a05      	ldr	r2, [sp, #20]
 801482a:	3315      	adds	r3, #21
 801482c:	9501      	str	r5, [sp, #4]
 801482e:	429a      	cmp	r2, r3
 8014830:	d305      	bcc.n	801483e <__multiply+0x8a>
 8014832:	1b13      	subs	r3, r2, r4
 8014834:	3b15      	subs	r3, #21
 8014836:	089b      	lsrs	r3, r3, #2
 8014838:	3301      	adds	r3, #1
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	9306      	str	r3, [sp, #24]
 801483e:	9b01      	ldr	r3, [sp, #4]
 8014840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014842:	4293      	cmp	r3, r2
 8014844:	d310      	bcc.n	8014868 <__multiply+0xb4>
 8014846:	9b03      	ldr	r3, [sp, #12]
 8014848:	2b00      	cmp	r3, #0
 801484a:	dd05      	ble.n	8014858 <__multiply+0xa4>
 801484c:	9b04      	ldr	r3, [sp, #16]
 801484e:	3b04      	subs	r3, #4
 8014850:	9304      	str	r3, [sp, #16]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d056      	beq.n	8014906 <__multiply+0x152>
 8014858:	9b02      	ldr	r3, [sp, #8]
 801485a:	9a03      	ldr	r2, [sp, #12]
 801485c:	0018      	movs	r0, r3
 801485e:	611a      	str	r2, [r3, #16]
 8014860:	b00b      	add	sp, #44	@ 0x2c
 8014862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014864:	c304      	stmia	r3!, {r2}
 8014866:	e7cf      	b.n	8014808 <__multiply+0x54>
 8014868:	9b01      	ldr	r3, [sp, #4]
 801486a:	6818      	ldr	r0, [r3, #0]
 801486c:	b280      	uxth	r0, r0
 801486e:	2800      	cmp	r0, #0
 8014870:	d01e      	beq.n	80148b0 <__multiply+0xfc>
 8014872:	4667      	mov	r7, ip
 8014874:	2500      	movs	r5, #0
 8014876:	9e08      	ldr	r6, [sp, #32]
 8014878:	ce02      	ldmia	r6!, {r1}
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	9307      	str	r3, [sp, #28]
 801487e:	b28b      	uxth	r3, r1
 8014880:	4343      	muls	r3, r0
 8014882:	001a      	movs	r2, r3
 8014884:	466b      	mov	r3, sp
 8014886:	0c09      	lsrs	r1, r1, #16
 8014888:	8b9b      	ldrh	r3, [r3, #28]
 801488a:	4341      	muls	r1, r0
 801488c:	18d3      	adds	r3, r2, r3
 801488e:	9a07      	ldr	r2, [sp, #28]
 8014890:	195b      	adds	r3, r3, r5
 8014892:	0c12      	lsrs	r2, r2, #16
 8014894:	1889      	adds	r1, r1, r2
 8014896:	0c1a      	lsrs	r2, r3, #16
 8014898:	188a      	adds	r2, r1, r2
 801489a:	b29b      	uxth	r3, r3
 801489c:	0c15      	lsrs	r5, r2, #16
 801489e:	0412      	lsls	r2, r2, #16
 80148a0:	431a      	orrs	r2, r3
 80148a2:	9b05      	ldr	r3, [sp, #20]
 80148a4:	c704      	stmia	r7!, {r2}
 80148a6:	42b3      	cmp	r3, r6
 80148a8:	d8e6      	bhi.n	8014878 <__multiply+0xc4>
 80148aa:	4663      	mov	r3, ip
 80148ac:	9a06      	ldr	r2, [sp, #24]
 80148ae:	509d      	str	r5, [r3, r2]
 80148b0:	9b01      	ldr	r3, [sp, #4]
 80148b2:	6818      	ldr	r0, [r3, #0]
 80148b4:	0c00      	lsrs	r0, r0, #16
 80148b6:	d020      	beq.n	80148fa <__multiply+0x146>
 80148b8:	4663      	mov	r3, ip
 80148ba:	0025      	movs	r5, r4
 80148bc:	4661      	mov	r1, ip
 80148be:	2700      	movs	r7, #0
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	3514      	adds	r5, #20
 80148c4:	682a      	ldr	r2, [r5, #0]
 80148c6:	680e      	ldr	r6, [r1, #0]
 80148c8:	b292      	uxth	r2, r2
 80148ca:	4342      	muls	r2, r0
 80148cc:	0c36      	lsrs	r6, r6, #16
 80148ce:	1992      	adds	r2, r2, r6
 80148d0:	19d2      	adds	r2, r2, r7
 80148d2:	0416      	lsls	r6, r2, #16
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	431e      	orrs	r6, r3
 80148d8:	600e      	str	r6, [r1, #0]
 80148da:	cd40      	ldmia	r5!, {r6}
 80148dc:	684b      	ldr	r3, [r1, #4]
 80148de:	0c36      	lsrs	r6, r6, #16
 80148e0:	4346      	muls	r6, r0
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	0c12      	lsrs	r2, r2, #16
 80148e6:	18f3      	adds	r3, r6, r3
 80148e8:	189b      	adds	r3, r3, r2
 80148ea:	9a05      	ldr	r2, [sp, #20]
 80148ec:	0c1f      	lsrs	r7, r3, #16
 80148ee:	3104      	adds	r1, #4
 80148f0:	42aa      	cmp	r2, r5
 80148f2:	d8e7      	bhi.n	80148c4 <__multiply+0x110>
 80148f4:	4662      	mov	r2, ip
 80148f6:	9906      	ldr	r1, [sp, #24]
 80148f8:	5053      	str	r3, [r2, r1]
 80148fa:	9b01      	ldr	r3, [sp, #4]
 80148fc:	3304      	adds	r3, #4
 80148fe:	9301      	str	r3, [sp, #4]
 8014900:	2304      	movs	r3, #4
 8014902:	449c      	add	ip, r3
 8014904:	e79b      	b.n	801483e <__multiply+0x8a>
 8014906:	9b03      	ldr	r3, [sp, #12]
 8014908:	3b01      	subs	r3, #1
 801490a:	9303      	str	r3, [sp, #12]
 801490c:	e79b      	b.n	8014846 <__multiply+0x92>
 801490e:	46c0      	nop			@ (mov r8, r8)
 8014910:	08017781 	.word	0x08017781
 8014914:	08017792 	.word	0x08017792

08014918 <__pow5mult>:
 8014918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801491a:	2303      	movs	r3, #3
 801491c:	0015      	movs	r5, r2
 801491e:	0007      	movs	r7, r0
 8014920:	000e      	movs	r6, r1
 8014922:	401a      	ands	r2, r3
 8014924:	421d      	tst	r5, r3
 8014926:	d008      	beq.n	801493a <__pow5mult+0x22>
 8014928:	4925      	ldr	r1, [pc, #148]	@ (80149c0 <__pow5mult+0xa8>)
 801492a:	3a01      	subs	r2, #1
 801492c:	0092      	lsls	r2, r2, #2
 801492e:	5852      	ldr	r2, [r2, r1]
 8014930:	2300      	movs	r3, #0
 8014932:	0031      	movs	r1, r6
 8014934:	f7ff fe46 	bl	80145c4 <__multadd>
 8014938:	0006      	movs	r6, r0
 801493a:	10ad      	asrs	r5, r5, #2
 801493c:	d03d      	beq.n	80149ba <__pow5mult+0xa2>
 801493e:	69fc      	ldr	r4, [r7, #28]
 8014940:	2c00      	cmp	r4, #0
 8014942:	d10f      	bne.n	8014964 <__pow5mult+0x4c>
 8014944:	2010      	movs	r0, #16
 8014946:	f7ff fd19 	bl	801437c <malloc>
 801494a:	1e02      	subs	r2, r0, #0
 801494c:	61f8      	str	r0, [r7, #28]
 801494e:	d105      	bne.n	801495c <__pow5mult+0x44>
 8014950:	21b4      	movs	r1, #180	@ 0xb4
 8014952:	4b1c      	ldr	r3, [pc, #112]	@ (80149c4 <__pow5mult+0xac>)
 8014954:	481c      	ldr	r0, [pc, #112]	@ (80149c8 <__pow5mult+0xb0>)
 8014956:	31ff      	adds	r1, #255	@ 0xff
 8014958:	f001 fb82 	bl	8016060 <__assert_func>
 801495c:	6044      	str	r4, [r0, #4]
 801495e:	6084      	str	r4, [r0, #8]
 8014960:	6004      	str	r4, [r0, #0]
 8014962:	60c4      	str	r4, [r0, #12]
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	689c      	ldr	r4, [r3, #8]
 8014968:	9301      	str	r3, [sp, #4]
 801496a:	2c00      	cmp	r4, #0
 801496c:	d108      	bne.n	8014980 <__pow5mult+0x68>
 801496e:	0038      	movs	r0, r7
 8014970:	4916      	ldr	r1, [pc, #88]	@ (80149cc <__pow5mult+0xb4>)
 8014972:	f7ff ff07 	bl	8014784 <__i2b>
 8014976:	9b01      	ldr	r3, [sp, #4]
 8014978:	0004      	movs	r4, r0
 801497a:	6098      	str	r0, [r3, #8]
 801497c:	2300      	movs	r3, #0
 801497e:	6003      	str	r3, [r0, #0]
 8014980:	2301      	movs	r3, #1
 8014982:	421d      	tst	r5, r3
 8014984:	d00a      	beq.n	801499c <__pow5mult+0x84>
 8014986:	0031      	movs	r1, r6
 8014988:	0022      	movs	r2, r4
 801498a:	0038      	movs	r0, r7
 801498c:	f7ff ff12 	bl	80147b4 <__multiply>
 8014990:	0031      	movs	r1, r6
 8014992:	9001      	str	r0, [sp, #4]
 8014994:	0038      	movs	r0, r7
 8014996:	f7ff fdf1 	bl	801457c <_Bfree>
 801499a:	9e01      	ldr	r6, [sp, #4]
 801499c:	106d      	asrs	r5, r5, #1
 801499e:	d00c      	beq.n	80149ba <__pow5mult+0xa2>
 80149a0:	6820      	ldr	r0, [r4, #0]
 80149a2:	2800      	cmp	r0, #0
 80149a4:	d107      	bne.n	80149b6 <__pow5mult+0x9e>
 80149a6:	0022      	movs	r2, r4
 80149a8:	0021      	movs	r1, r4
 80149aa:	0038      	movs	r0, r7
 80149ac:	f7ff ff02 	bl	80147b4 <__multiply>
 80149b0:	2300      	movs	r3, #0
 80149b2:	6020      	str	r0, [r4, #0]
 80149b4:	6003      	str	r3, [r0, #0]
 80149b6:	0004      	movs	r4, r0
 80149b8:	e7e2      	b.n	8014980 <__pow5mult+0x68>
 80149ba:	0030      	movs	r0, r6
 80149bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80149be:	46c0      	nop			@ (mov r8, r8)
 80149c0:	080177ec 	.word	0x080177ec
 80149c4:	08017712 	.word	0x08017712
 80149c8:	08017792 	.word	0x08017792
 80149cc:	00000271 	.word	0x00000271

080149d0 <__lshift>:
 80149d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149d2:	000c      	movs	r4, r1
 80149d4:	0016      	movs	r6, r2
 80149d6:	6923      	ldr	r3, [r4, #16]
 80149d8:	1157      	asrs	r7, r2, #5
 80149da:	b085      	sub	sp, #20
 80149dc:	18fb      	adds	r3, r7, r3
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	3301      	adds	r3, #1
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	6849      	ldr	r1, [r1, #4]
 80149e6:	68a3      	ldr	r3, [r4, #8]
 80149e8:	9002      	str	r0, [sp, #8]
 80149ea:	9a00      	ldr	r2, [sp, #0]
 80149ec:	4293      	cmp	r3, r2
 80149ee:	db10      	blt.n	8014a12 <__lshift+0x42>
 80149f0:	9802      	ldr	r0, [sp, #8]
 80149f2:	f7ff fd7f 	bl	80144f4 <_Balloc>
 80149f6:	2300      	movs	r3, #0
 80149f8:	0001      	movs	r1, r0
 80149fa:	0005      	movs	r5, r0
 80149fc:	001a      	movs	r2, r3
 80149fe:	3114      	adds	r1, #20
 8014a00:	4298      	cmp	r0, r3
 8014a02:	d10c      	bne.n	8014a1e <__lshift+0x4e>
 8014a04:	21ef      	movs	r1, #239	@ 0xef
 8014a06:	002a      	movs	r2, r5
 8014a08:	4b25      	ldr	r3, [pc, #148]	@ (8014aa0 <__lshift+0xd0>)
 8014a0a:	4826      	ldr	r0, [pc, #152]	@ (8014aa4 <__lshift+0xd4>)
 8014a0c:	0049      	lsls	r1, r1, #1
 8014a0e:	f001 fb27 	bl	8016060 <__assert_func>
 8014a12:	3101      	adds	r1, #1
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	e7e8      	b.n	80149ea <__lshift+0x1a>
 8014a18:	0098      	lsls	r0, r3, #2
 8014a1a:	500a      	str	r2, [r1, r0]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	42bb      	cmp	r3, r7
 8014a20:	dbfa      	blt.n	8014a18 <__lshift+0x48>
 8014a22:	43fb      	mvns	r3, r7
 8014a24:	17db      	asrs	r3, r3, #31
 8014a26:	401f      	ands	r7, r3
 8014a28:	00bf      	lsls	r7, r7, #2
 8014a2a:	0023      	movs	r3, r4
 8014a2c:	201f      	movs	r0, #31
 8014a2e:	19c9      	adds	r1, r1, r7
 8014a30:	0037      	movs	r7, r6
 8014a32:	6922      	ldr	r2, [r4, #16]
 8014a34:	3314      	adds	r3, #20
 8014a36:	0092      	lsls	r2, r2, #2
 8014a38:	189a      	adds	r2, r3, r2
 8014a3a:	4007      	ands	r7, r0
 8014a3c:	4206      	tst	r6, r0
 8014a3e:	d029      	beq.n	8014a94 <__lshift+0xc4>
 8014a40:	3001      	adds	r0, #1
 8014a42:	1bc0      	subs	r0, r0, r7
 8014a44:	9003      	str	r0, [sp, #12]
 8014a46:	468c      	mov	ip, r1
 8014a48:	2000      	movs	r0, #0
 8014a4a:	681e      	ldr	r6, [r3, #0]
 8014a4c:	40be      	lsls	r6, r7
 8014a4e:	4306      	orrs	r6, r0
 8014a50:	4660      	mov	r0, ip
 8014a52:	c040      	stmia	r0!, {r6}
 8014a54:	4684      	mov	ip, r0
 8014a56:	9e03      	ldr	r6, [sp, #12]
 8014a58:	cb01      	ldmia	r3!, {r0}
 8014a5a:	40f0      	lsrs	r0, r6
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d8f4      	bhi.n	8014a4a <__lshift+0x7a>
 8014a60:	0026      	movs	r6, r4
 8014a62:	3615      	adds	r6, #21
 8014a64:	2304      	movs	r3, #4
 8014a66:	42b2      	cmp	r2, r6
 8014a68:	d304      	bcc.n	8014a74 <__lshift+0xa4>
 8014a6a:	1b13      	subs	r3, r2, r4
 8014a6c:	3b15      	subs	r3, #21
 8014a6e:	089b      	lsrs	r3, r3, #2
 8014a70:	3301      	adds	r3, #1
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	50c8      	str	r0, [r1, r3]
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d002      	beq.n	8014a80 <__lshift+0xb0>
 8014a7a:	9b01      	ldr	r3, [sp, #4]
 8014a7c:	3302      	adds	r3, #2
 8014a7e:	9300      	str	r3, [sp, #0]
 8014a80:	9b00      	ldr	r3, [sp, #0]
 8014a82:	9802      	ldr	r0, [sp, #8]
 8014a84:	3b01      	subs	r3, #1
 8014a86:	0021      	movs	r1, r4
 8014a88:	612b      	str	r3, [r5, #16]
 8014a8a:	f7ff fd77 	bl	801457c <_Bfree>
 8014a8e:	0028      	movs	r0, r5
 8014a90:	b005      	add	sp, #20
 8014a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a94:	cb01      	ldmia	r3!, {r0}
 8014a96:	c101      	stmia	r1!, {r0}
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d8fb      	bhi.n	8014a94 <__lshift+0xc4>
 8014a9c:	e7f0      	b.n	8014a80 <__lshift+0xb0>
 8014a9e:	46c0      	nop			@ (mov r8, r8)
 8014aa0:	08017781 	.word	0x08017781
 8014aa4:	08017792 	.word	0x08017792

08014aa8 <__mcmp>:
 8014aa8:	b530      	push	{r4, r5, lr}
 8014aaa:	690b      	ldr	r3, [r1, #16]
 8014aac:	6904      	ldr	r4, [r0, #16]
 8014aae:	0002      	movs	r2, r0
 8014ab0:	1ae0      	subs	r0, r4, r3
 8014ab2:	429c      	cmp	r4, r3
 8014ab4:	d10f      	bne.n	8014ad6 <__mcmp+0x2e>
 8014ab6:	3214      	adds	r2, #20
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	3114      	adds	r1, #20
 8014abc:	0014      	movs	r4, r2
 8014abe:	18c9      	adds	r1, r1, r3
 8014ac0:	18d2      	adds	r2, r2, r3
 8014ac2:	3a04      	subs	r2, #4
 8014ac4:	3904      	subs	r1, #4
 8014ac6:	6815      	ldr	r5, [r2, #0]
 8014ac8:	680b      	ldr	r3, [r1, #0]
 8014aca:	429d      	cmp	r5, r3
 8014acc:	d004      	beq.n	8014ad8 <__mcmp+0x30>
 8014ace:	2001      	movs	r0, #1
 8014ad0:	429d      	cmp	r5, r3
 8014ad2:	d200      	bcs.n	8014ad6 <__mcmp+0x2e>
 8014ad4:	3802      	subs	r0, #2
 8014ad6:	bd30      	pop	{r4, r5, pc}
 8014ad8:	4294      	cmp	r4, r2
 8014ada:	d3f2      	bcc.n	8014ac2 <__mcmp+0x1a>
 8014adc:	e7fb      	b.n	8014ad6 <__mcmp+0x2e>
	...

08014ae0 <__mdiff>:
 8014ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ae2:	000c      	movs	r4, r1
 8014ae4:	b087      	sub	sp, #28
 8014ae6:	9000      	str	r0, [sp, #0]
 8014ae8:	0011      	movs	r1, r2
 8014aea:	0020      	movs	r0, r4
 8014aec:	0017      	movs	r7, r2
 8014aee:	f7ff ffdb 	bl	8014aa8 <__mcmp>
 8014af2:	1e05      	subs	r5, r0, #0
 8014af4:	d110      	bne.n	8014b18 <__mdiff+0x38>
 8014af6:	0001      	movs	r1, r0
 8014af8:	9800      	ldr	r0, [sp, #0]
 8014afa:	f7ff fcfb 	bl	80144f4 <_Balloc>
 8014afe:	1e02      	subs	r2, r0, #0
 8014b00:	d104      	bne.n	8014b0c <__mdiff+0x2c>
 8014b02:	4b40      	ldr	r3, [pc, #256]	@ (8014c04 <__mdiff+0x124>)
 8014b04:	4840      	ldr	r0, [pc, #256]	@ (8014c08 <__mdiff+0x128>)
 8014b06:	4941      	ldr	r1, [pc, #260]	@ (8014c0c <__mdiff+0x12c>)
 8014b08:	f001 faaa 	bl	8016060 <__assert_func>
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	6145      	str	r5, [r0, #20]
 8014b10:	6103      	str	r3, [r0, #16]
 8014b12:	0010      	movs	r0, r2
 8014b14:	b007      	add	sp, #28
 8014b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b18:	2600      	movs	r6, #0
 8014b1a:	42b0      	cmp	r0, r6
 8014b1c:	da03      	bge.n	8014b26 <__mdiff+0x46>
 8014b1e:	0023      	movs	r3, r4
 8014b20:	003c      	movs	r4, r7
 8014b22:	001f      	movs	r7, r3
 8014b24:	3601      	adds	r6, #1
 8014b26:	6861      	ldr	r1, [r4, #4]
 8014b28:	9800      	ldr	r0, [sp, #0]
 8014b2a:	f7ff fce3 	bl	80144f4 <_Balloc>
 8014b2e:	1e02      	subs	r2, r0, #0
 8014b30:	d103      	bne.n	8014b3a <__mdiff+0x5a>
 8014b32:	4b34      	ldr	r3, [pc, #208]	@ (8014c04 <__mdiff+0x124>)
 8014b34:	4834      	ldr	r0, [pc, #208]	@ (8014c08 <__mdiff+0x128>)
 8014b36:	4936      	ldr	r1, [pc, #216]	@ (8014c10 <__mdiff+0x130>)
 8014b38:	e7e6      	b.n	8014b08 <__mdiff+0x28>
 8014b3a:	6923      	ldr	r3, [r4, #16]
 8014b3c:	3414      	adds	r4, #20
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	18e3      	adds	r3, r4, r3
 8014b44:	0021      	movs	r1, r4
 8014b46:	9401      	str	r4, [sp, #4]
 8014b48:	003c      	movs	r4, r7
 8014b4a:	9302      	str	r3, [sp, #8]
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	3414      	adds	r4, #20
 8014b50:	009b      	lsls	r3, r3, #2
 8014b52:	18e3      	adds	r3, r4, r3
 8014b54:	9303      	str	r3, [sp, #12]
 8014b56:	0003      	movs	r3, r0
 8014b58:	60c6      	str	r6, [r0, #12]
 8014b5a:	468c      	mov	ip, r1
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	3314      	adds	r3, #20
 8014b60:	9304      	str	r3, [sp, #16]
 8014b62:	9305      	str	r3, [sp, #20]
 8014b64:	4663      	mov	r3, ip
 8014b66:	cb20      	ldmia	r3!, {r5}
 8014b68:	b2a9      	uxth	r1, r5
 8014b6a:	000e      	movs	r6, r1
 8014b6c:	469c      	mov	ip, r3
 8014b6e:	cc08      	ldmia	r4!, {r3}
 8014b70:	0c2d      	lsrs	r5, r5, #16
 8014b72:	b299      	uxth	r1, r3
 8014b74:	1a71      	subs	r1, r6, r1
 8014b76:	1809      	adds	r1, r1, r0
 8014b78:	0c1b      	lsrs	r3, r3, #16
 8014b7a:	1408      	asrs	r0, r1, #16
 8014b7c:	1aeb      	subs	r3, r5, r3
 8014b7e:	181b      	adds	r3, r3, r0
 8014b80:	1418      	asrs	r0, r3, #16
 8014b82:	b289      	uxth	r1, r1
 8014b84:	041b      	lsls	r3, r3, #16
 8014b86:	4319      	orrs	r1, r3
 8014b88:	9b05      	ldr	r3, [sp, #20]
 8014b8a:	c302      	stmia	r3!, {r1}
 8014b8c:	9305      	str	r3, [sp, #20]
 8014b8e:	9b03      	ldr	r3, [sp, #12]
 8014b90:	42a3      	cmp	r3, r4
 8014b92:	d8e7      	bhi.n	8014b64 <__mdiff+0x84>
 8014b94:	0039      	movs	r1, r7
 8014b96:	9c03      	ldr	r4, [sp, #12]
 8014b98:	3115      	adds	r1, #21
 8014b9a:	2304      	movs	r3, #4
 8014b9c:	428c      	cmp	r4, r1
 8014b9e:	d304      	bcc.n	8014baa <__mdiff+0xca>
 8014ba0:	1be3      	subs	r3, r4, r7
 8014ba2:	3b15      	subs	r3, #21
 8014ba4:	089b      	lsrs	r3, r3, #2
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	9901      	ldr	r1, [sp, #4]
 8014bac:	18cd      	adds	r5, r1, r3
 8014bae:	9904      	ldr	r1, [sp, #16]
 8014bb0:	002e      	movs	r6, r5
 8014bb2:	18cb      	adds	r3, r1, r3
 8014bb4:	001f      	movs	r7, r3
 8014bb6:	9902      	ldr	r1, [sp, #8]
 8014bb8:	428e      	cmp	r6, r1
 8014bba:	d311      	bcc.n	8014be0 <__mdiff+0x100>
 8014bbc:	9c02      	ldr	r4, [sp, #8]
 8014bbe:	1ee9      	subs	r1, r5, #3
 8014bc0:	2000      	movs	r0, #0
 8014bc2:	428c      	cmp	r4, r1
 8014bc4:	d304      	bcc.n	8014bd0 <__mdiff+0xf0>
 8014bc6:	0021      	movs	r1, r4
 8014bc8:	3103      	adds	r1, #3
 8014bca:	1b49      	subs	r1, r1, r5
 8014bcc:	0889      	lsrs	r1, r1, #2
 8014bce:	0088      	lsls	r0, r1, #2
 8014bd0:	181b      	adds	r3, r3, r0
 8014bd2:	3b04      	subs	r3, #4
 8014bd4:	6819      	ldr	r1, [r3, #0]
 8014bd6:	2900      	cmp	r1, #0
 8014bd8:	d010      	beq.n	8014bfc <__mdiff+0x11c>
 8014bda:	9b00      	ldr	r3, [sp, #0]
 8014bdc:	6113      	str	r3, [r2, #16]
 8014bde:	e798      	b.n	8014b12 <__mdiff+0x32>
 8014be0:	4684      	mov	ip, r0
 8014be2:	ce02      	ldmia	r6!, {r1}
 8014be4:	b288      	uxth	r0, r1
 8014be6:	4460      	add	r0, ip
 8014be8:	1400      	asrs	r0, r0, #16
 8014bea:	0c0c      	lsrs	r4, r1, #16
 8014bec:	1904      	adds	r4, r0, r4
 8014bee:	4461      	add	r1, ip
 8014bf0:	1420      	asrs	r0, r4, #16
 8014bf2:	b289      	uxth	r1, r1
 8014bf4:	0424      	lsls	r4, r4, #16
 8014bf6:	4321      	orrs	r1, r4
 8014bf8:	c702      	stmia	r7!, {r1}
 8014bfa:	e7dc      	b.n	8014bb6 <__mdiff+0xd6>
 8014bfc:	9900      	ldr	r1, [sp, #0]
 8014bfe:	3901      	subs	r1, #1
 8014c00:	9100      	str	r1, [sp, #0]
 8014c02:	e7e6      	b.n	8014bd2 <__mdiff+0xf2>
 8014c04:	08017781 	.word	0x08017781
 8014c08:	08017792 	.word	0x08017792
 8014c0c:	00000237 	.word	0x00000237
 8014c10:	00000245 	.word	0x00000245

08014c14 <__ulp>:
 8014c14:	b510      	push	{r4, lr}
 8014c16:	2400      	movs	r4, #0
 8014c18:	4b0c      	ldr	r3, [pc, #48]	@ (8014c4c <__ulp+0x38>)
 8014c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8014c50 <__ulp+0x3c>)
 8014c1c:	400b      	ands	r3, r1
 8014c1e:	189b      	adds	r3, r3, r2
 8014c20:	42a3      	cmp	r3, r4
 8014c22:	dc06      	bgt.n	8014c32 <__ulp+0x1e>
 8014c24:	425b      	negs	r3, r3
 8014c26:	151a      	asrs	r2, r3, #20
 8014c28:	2a13      	cmp	r2, #19
 8014c2a:	dc05      	bgt.n	8014c38 <__ulp+0x24>
 8014c2c:	2380      	movs	r3, #128	@ 0x80
 8014c2e:	031b      	lsls	r3, r3, #12
 8014c30:	4113      	asrs	r3, r2
 8014c32:	0019      	movs	r1, r3
 8014c34:	0020      	movs	r0, r4
 8014c36:	bd10      	pop	{r4, pc}
 8014c38:	3a14      	subs	r2, #20
 8014c3a:	2401      	movs	r4, #1
 8014c3c:	2a1e      	cmp	r2, #30
 8014c3e:	dc02      	bgt.n	8014c46 <__ulp+0x32>
 8014c40:	2480      	movs	r4, #128	@ 0x80
 8014c42:	0624      	lsls	r4, r4, #24
 8014c44:	40d4      	lsrs	r4, r2
 8014c46:	2300      	movs	r3, #0
 8014c48:	e7f3      	b.n	8014c32 <__ulp+0x1e>
 8014c4a:	46c0      	nop			@ (mov r8, r8)
 8014c4c:	7ff00000 	.word	0x7ff00000
 8014c50:	fcc00000 	.word	0xfcc00000

08014c54 <__b2d>:
 8014c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c56:	0006      	movs	r6, r0
 8014c58:	6903      	ldr	r3, [r0, #16]
 8014c5a:	3614      	adds	r6, #20
 8014c5c:	009b      	lsls	r3, r3, #2
 8014c5e:	18f3      	adds	r3, r6, r3
 8014c60:	1f1d      	subs	r5, r3, #4
 8014c62:	682c      	ldr	r4, [r5, #0]
 8014c64:	000f      	movs	r7, r1
 8014c66:	0020      	movs	r0, r4
 8014c68:	9301      	str	r3, [sp, #4]
 8014c6a:	f7ff fd3b 	bl	80146e4 <__hi0bits>
 8014c6e:	2220      	movs	r2, #32
 8014c70:	1a12      	subs	r2, r2, r0
 8014c72:	603a      	str	r2, [r7, #0]
 8014c74:	0003      	movs	r3, r0
 8014c76:	4a1c      	ldr	r2, [pc, #112]	@ (8014ce8 <__b2d+0x94>)
 8014c78:	280a      	cmp	r0, #10
 8014c7a:	dc15      	bgt.n	8014ca8 <__b2d+0x54>
 8014c7c:	210b      	movs	r1, #11
 8014c7e:	0027      	movs	r7, r4
 8014c80:	1a09      	subs	r1, r1, r0
 8014c82:	40cf      	lsrs	r7, r1
 8014c84:	433a      	orrs	r2, r7
 8014c86:	468c      	mov	ip, r1
 8014c88:	0011      	movs	r1, r2
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	42ae      	cmp	r6, r5
 8014c8e:	d202      	bcs.n	8014c96 <__b2d+0x42>
 8014c90:	9a01      	ldr	r2, [sp, #4]
 8014c92:	3a08      	subs	r2, #8
 8014c94:	6812      	ldr	r2, [r2, #0]
 8014c96:	3315      	adds	r3, #21
 8014c98:	409c      	lsls	r4, r3
 8014c9a:	4663      	mov	r3, ip
 8014c9c:	0027      	movs	r7, r4
 8014c9e:	40da      	lsrs	r2, r3
 8014ca0:	4317      	orrs	r7, r2
 8014ca2:	0038      	movs	r0, r7
 8014ca4:	b003      	add	sp, #12
 8014ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ca8:	2700      	movs	r7, #0
 8014caa:	42ae      	cmp	r6, r5
 8014cac:	d202      	bcs.n	8014cb4 <__b2d+0x60>
 8014cae:	9d01      	ldr	r5, [sp, #4]
 8014cb0:	3d08      	subs	r5, #8
 8014cb2:	682f      	ldr	r7, [r5, #0]
 8014cb4:	210b      	movs	r1, #11
 8014cb6:	4249      	negs	r1, r1
 8014cb8:	468c      	mov	ip, r1
 8014cba:	449c      	add	ip, r3
 8014cbc:	2b0b      	cmp	r3, #11
 8014cbe:	d010      	beq.n	8014ce2 <__b2d+0x8e>
 8014cc0:	4661      	mov	r1, ip
 8014cc2:	2320      	movs	r3, #32
 8014cc4:	408c      	lsls	r4, r1
 8014cc6:	1a5b      	subs	r3, r3, r1
 8014cc8:	0039      	movs	r1, r7
 8014cca:	40d9      	lsrs	r1, r3
 8014ccc:	430c      	orrs	r4, r1
 8014cce:	4322      	orrs	r2, r4
 8014cd0:	0011      	movs	r1, r2
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	42b5      	cmp	r5, r6
 8014cd6:	d901      	bls.n	8014cdc <__b2d+0x88>
 8014cd8:	3d04      	subs	r5, #4
 8014cda:	682a      	ldr	r2, [r5, #0]
 8014cdc:	4664      	mov	r4, ip
 8014cde:	40a7      	lsls	r7, r4
 8014ce0:	e7dd      	b.n	8014c9e <__b2d+0x4a>
 8014ce2:	4322      	orrs	r2, r4
 8014ce4:	0011      	movs	r1, r2
 8014ce6:	e7dc      	b.n	8014ca2 <__b2d+0x4e>
 8014ce8:	3ff00000 	.word	0x3ff00000

08014cec <__d2b>:
 8014cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cee:	2101      	movs	r1, #1
 8014cf0:	0016      	movs	r6, r2
 8014cf2:	001f      	movs	r7, r3
 8014cf4:	f7ff fbfe 	bl	80144f4 <_Balloc>
 8014cf8:	1e04      	subs	r4, r0, #0
 8014cfa:	d105      	bne.n	8014d08 <__d2b+0x1c>
 8014cfc:	0022      	movs	r2, r4
 8014cfe:	4b25      	ldr	r3, [pc, #148]	@ (8014d94 <__d2b+0xa8>)
 8014d00:	4825      	ldr	r0, [pc, #148]	@ (8014d98 <__d2b+0xac>)
 8014d02:	4926      	ldr	r1, [pc, #152]	@ (8014d9c <__d2b+0xb0>)
 8014d04:	f001 f9ac 	bl	8016060 <__assert_func>
 8014d08:	033b      	lsls	r3, r7, #12
 8014d0a:	007d      	lsls	r5, r7, #1
 8014d0c:	0b1b      	lsrs	r3, r3, #12
 8014d0e:	0d6d      	lsrs	r5, r5, #21
 8014d10:	d002      	beq.n	8014d18 <__d2b+0x2c>
 8014d12:	2280      	movs	r2, #128	@ 0x80
 8014d14:	0352      	lsls	r2, r2, #13
 8014d16:	4313      	orrs	r3, r2
 8014d18:	9301      	str	r3, [sp, #4]
 8014d1a:	2e00      	cmp	r6, #0
 8014d1c:	d025      	beq.n	8014d6a <__d2b+0x7e>
 8014d1e:	4668      	mov	r0, sp
 8014d20:	9600      	str	r6, [sp, #0]
 8014d22:	f7ff fd00 	bl	8014726 <__lo0bits>
 8014d26:	9b01      	ldr	r3, [sp, #4]
 8014d28:	9900      	ldr	r1, [sp, #0]
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	d01b      	beq.n	8014d66 <__d2b+0x7a>
 8014d2e:	2220      	movs	r2, #32
 8014d30:	001e      	movs	r6, r3
 8014d32:	1a12      	subs	r2, r2, r0
 8014d34:	4096      	lsls	r6, r2
 8014d36:	0032      	movs	r2, r6
 8014d38:	40c3      	lsrs	r3, r0
 8014d3a:	430a      	orrs	r2, r1
 8014d3c:	6162      	str	r2, [r4, #20]
 8014d3e:	9301      	str	r3, [sp, #4]
 8014d40:	9e01      	ldr	r6, [sp, #4]
 8014d42:	61a6      	str	r6, [r4, #24]
 8014d44:	1e73      	subs	r3, r6, #1
 8014d46:	419e      	sbcs	r6, r3
 8014d48:	3601      	adds	r6, #1
 8014d4a:	6126      	str	r6, [r4, #16]
 8014d4c:	2d00      	cmp	r5, #0
 8014d4e:	d014      	beq.n	8014d7a <__d2b+0x8e>
 8014d50:	2635      	movs	r6, #53	@ 0x35
 8014d52:	4b13      	ldr	r3, [pc, #76]	@ (8014da0 <__d2b+0xb4>)
 8014d54:	18ed      	adds	r5, r5, r3
 8014d56:	9b08      	ldr	r3, [sp, #32]
 8014d58:	182d      	adds	r5, r5, r0
 8014d5a:	601d      	str	r5, [r3, #0]
 8014d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d5e:	1a36      	subs	r6, r6, r0
 8014d60:	601e      	str	r6, [r3, #0]
 8014d62:	0020      	movs	r0, r4
 8014d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014d66:	6161      	str	r1, [r4, #20]
 8014d68:	e7ea      	b.n	8014d40 <__d2b+0x54>
 8014d6a:	a801      	add	r0, sp, #4
 8014d6c:	f7ff fcdb 	bl	8014726 <__lo0bits>
 8014d70:	9b01      	ldr	r3, [sp, #4]
 8014d72:	2601      	movs	r6, #1
 8014d74:	6163      	str	r3, [r4, #20]
 8014d76:	3020      	adds	r0, #32
 8014d78:	e7e7      	b.n	8014d4a <__d2b+0x5e>
 8014d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8014da4 <__d2b+0xb8>)
 8014d7c:	18c0      	adds	r0, r0, r3
 8014d7e:	9b08      	ldr	r3, [sp, #32]
 8014d80:	6018      	str	r0, [r3, #0]
 8014d82:	4b09      	ldr	r3, [pc, #36]	@ (8014da8 <__d2b+0xbc>)
 8014d84:	18f3      	adds	r3, r6, r3
 8014d86:	009b      	lsls	r3, r3, #2
 8014d88:	18e3      	adds	r3, r4, r3
 8014d8a:	6958      	ldr	r0, [r3, #20]
 8014d8c:	f7ff fcaa 	bl	80146e4 <__hi0bits>
 8014d90:	0176      	lsls	r6, r6, #5
 8014d92:	e7e3      	b.n	8014d5c <__d2b+0x70>
 8014d94:	08017781 	.word	0x08017781
 8014d98:	08017792 	.word	0x08017792
 8014d9c:	0000030f 	.word	0x0000030f
 8014da0:	fffffbcd 	.word	0xfffffbcd
 8014da4:	fffffbce 	.word	0xfffffbce
 8014da8:	3fffffff 	.word	0x3fffffff

08014dac <__ratio>:
 8014dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dae:	b087      	sub	sp, #28
 8014db0:	000f      	movs	r7, r1
 8014db2:	a904      	add	r1, sp, #16
 8014db4:	0006      	movs	r6, r0
 8014db6:	f7ff ff4d 	bl	8014c54 <__b2d>
 8014dba:	9000      	str	r0, [sp, #0]
 8014dbc:	9101      	str	r1, [sp, #4]
 8014dbe:	9b00      	ldr	r3, [sp, #0]
 8014dc0:	9c01      	ldr	r4, [sp, #4]
 8014dc2:	0038      	movs	r0, r7
 8014dc4:	a905      	add	r1, sp, #20
 8014dc6:	9302      	str	r3, [sp, #8]
 8014dc8:	9403      	str	r4, [sp, #12]
 8014dca:	f7ff ff43 	bl	8014c54 <__b2d>
 8014dce:	000d      	movs	r5, r1
 8014dd0:	0002      	movs	r2, r0
 8014dd2:	000b      	movs	r3, r1
 8014dd4:	6930      	ldr	r0, [r6, #16]
 8014dd6:	6939      	ldr	r1, [r7, #16]
 8014dd8:	9e04      	ldr	r6, [sp, #16]
 8014dda:	1a40      	subs	r0, r0, r1
 8014ddc:	9905      	ldr	r1, [sp, #20]
 8014dde:	0140      	lsls	r0, r0, #5
 8014de0:	1a71      	subs	r1, r6, r1
 8014de2:	1841      	adds	r1, r0, r1
 8014de4:	0508      	lsls	r0, r1, #20
 8014de6:	2900      	cmp	r1, #0
 8014de8:	dd08      	ble.n	8014dfc <__ratio+0x50>
 8014dea:	9901      	ldr	r1, [sp, #4]
 8014dec:	1841      	adds	r1, r0, r1
 8014dee:	9103      	str	r1, [sp, #12]
 8014df0:	9802      	ldr	r0, [sp, #8]
 8014df2:	9903      	ldr	r1, [sp, #12]
 8014df4:	f7ec ff7e 	bl	8001cf4 <__aeabi_ddiv>
 8014df8:	b007      	add	sp, #28
 8014dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dfc:	1a2b      	subs	r3, r5, r0
 8014dfe:	e7f7      	b.n	8014df0 <__ratio+0x44>

08014e00 <__copybits>:
 8014e00:	b570      	push	{r4, r5, r6, lr}
 8014e02:	0014      	movs	r4, r2
 8014e04:	0005      	movs	r5, r0
 8014e06:	3901      	subs	r1, #1
 8014e08:	6913      	ldr	r3, [r2, #16]
 8014e0a:	1149      	asrs	r1, r1, #5
 8014e0c:	3101      	adds	r1, #1
 8014e0e:	0089      	lsls	r1, r1, #2
 8014e10:	3414      	adds	r4, #20
 8014e12:	009b      	lsls	r3, r3, #2
 8014e14:	1841      	adds	r1, r0, r1
 8014e16:	18e3      	adds	r3, r4, r3
 8014e18:	42a3      	cmp	r3, r4
 8014e1a:	d80d      	bhi.n	8014e38 <__copybits+0x38>
 8014e1c:	0014      	movs	r4, r2
 8014e1e:	3411      	adds	r4, #17
 8014e20:	2500      	movs	r5, #0
 8014e22:	429c      	cmp	r4, r3
 8014e24:	d803      	bhi.n	8014e2e <__copybits+0x2e>
 8014e26:	1a9b      	subs	r3, r3, r2
 8014e28:	3b11      	subs	r3, #17
 8014e2a:	089b      	lsrs	r3, r3, #2
 8014e2c:	009d      	lsls	r5, r3, #2
 8014e2e:	2300      	movs	r3, #0
 8014e30:	1940      	adds	r0, r0, r5
 8014e32:	4281      	cmp	r1, r0
 8014e34:	d803      	bhi.n	8014e3e <__copybits+0x3e>
 8014e36:	bd70      	pop	{r4, r5, r6, pc}
 8014e38:	cc40      	ldmia	r4!, {r6}
 8014e3a:	c540      	stmia	r5!, {r6}
 8014e3c:	e7ec      	b.n	8014e18 <__copybits+0x18>
 8014e3e:	c008      	stmia	r0!, {r3}
 8014e40:	e7f7      	b.n	8014e32 <__copybits+0x32>

08014e42 <__any_on>:
 8014e42:	0002      	movs	r2, r0
 8014e44:	6900      	ldr	r0, [r0, #16]
 8014e46:	b510      	push	{r4, lr}
 8014e48:	3214      	adds	r2, #20
 8014e4a:	114b      	asrs	r3, r1, #5
 8014e4c:	4298      	cmp	r0, r3
 8014e4e:	db13      	blt.n	8014e78 <__any_on+0x36>
 8014e50:	dd0c      	ble.n	8014e6c <__any_on+0x2a>
 8014e52:	241f      	movs	r4, #31
 8014e54:	0008      	movs	r0, r1
 8014e56:	4020      	ands	r0, r4
 8014e58:	4221      	tst	r1, r4
 8014e5a:	d007      	beq.n	8014e6c <__any_on+0x2a>
 8014e5c:	0099      	lsls	r1, r3, #2
 8014e5e:	588c      	ldr	r4, [r1, r2]
 8014e60:	0021      	movs	r1, r4
 8014e62:	40c1      	lsrs	r1, r0
 8014e64:	4081      	lsls	r1, r0
 8014e66:	2001      	movs	r0, #1
 8014e68:	428c      	cmp	r4, r1
 8014e6a:	d104      	bne.n	8014e76 <__any_on+0x34>
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	18d3      	adds	r3, r2, r3
 8014e70:	4293      	cmp	r3, r2
 8014e72:	d803      	bhi.n	8014e7c <__any_on+0x3a>
 8014e74:	2000      	movs	r0, #0
 8014e76:	bd10      	pop	{r4, pc}
 8014e78:	0003      	movs	r3, r0
 8014e7a:	e7f7      	b.n	8014e6c <__any_on+0x2a>
 8014e7c:	3b04      	subs	r3, #4
 8014e7e:	6819      	ldr	r1, [r3, #0]
 8014e80:	2900      	cmp	r1, #0
 8014e82:	d0f5      	beq.n	8014e70 <__any_on+0x2e>
 8014e84:	2001      	movs	r0, #1
 8014e86:	e7f6      	b.n	8014e76 <__any_on+0x34>

08014e88 <sulp>:
 8014e88:	b570      	push	{r4, r5, r6, lr}
 8014e8a:	0016      	movs	r6, r2
 8014e8c:	000d      	movs	r5, r1
 8014e8e:	f7ff fec1 	bl	8014c14 <__ulp>
 8014e92:	2e00      	cmp	r6, #0
 8014e94:	d00d      	beq.n	8014eb2 <sulp+0x2a>
 8014e96:	236b      	movs	r3, #107	@ 0x6b
 8014e98:	006a      	lsls	r2, r5, #1
 8014e9a:	0d52      	lsrs	r2, r2, #21
 8014e9c:	1a9b      	subs	r3, r3, r2
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	dd07      	ble.n	8014eb2 <sulp+0x2a>
 8014ea2:	2400      	movs	r4, #0
 8014ea4:	4a03      	ldr	r2, [pc, #12]	@ (8014eb4 <sulp+0x2c>)
 8014ea6:	051b      	lsls	r3, r3, #20
 8014ea8:	189d      	adds	r5, r3, r2
 8014eaa:	002b      	movs	r3, r5
 8014eac:	0022      	movs	r2, r4
 8014eae:	f7ed fb65 	bl	800257c <__aeabi_dmul>
 8014eb2:	bd70      	pop	{r4, r5, r6, pc}
 8014eb4:	3ff00000 	.word	0x3ff00000

08014eb8 <_strtod_l>:
 8014eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eba:	b0a3      	sub	sp, #140	@ 0x8c
 8014ebc:	921b      	str	r2, [sp, #108]	@ 0x6c
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	2600      	movs	r6, #0
 8014ec2:	2700      	movs	r7, #0
 8014ec4:	9005      	str	r0, [sp, #20]
 8014ec6:	9109      	str	r1, [sp, #36]	@ 0x24
 8014ec8:	921e      	str	r2, [sp, #120]	@ 0x78
 8014eca:	911d      	str	r1, [sp, #116]	@ 0x74
 8014ecc:	780a      	ldrb	r2, [r1, #0]
 8014ece:	2a2b      	cmp	r2, #43	@ 0x2b
 8014ed0:	d053      	beq.n	8014f7a <_strtod_l+0xc2>
 8014ed2:	d83f      	bhi.n	8014f54 <_strtod_l+0x9c>
 8014ed4:	2a0d      	cmp	r2, #13
 8014ed6:	d839      	bhi.n	8014f4c <_strtod_l+0x94>
 8014ed8:	2a08      	cmp	r2, #8
 8014eda:	d839      	bhi.n	8014f50 <_strtod_l+0x98>
 8014edc:	2a00      	cmp	r2, #0
 8014ede:	d042      	beq.n	8014f66 <_strtod_l+0xae>
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	9212      	str	r2, [sp, #72]	@ 0x48
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8014ee8:	910c      	str	r1, [sp, #48]	@ 0x30
 8014eea:	782a      	ldrb	r2, [r5, #0]
 8014eec:	2a30      	cmp	r2, #48	@ 0x30
 8014eee:	d000      	beq.n	8014ef2 <_strtod_l+0x3a>
 8014ef0:	e083      	b.n	8014ffa <_strtod_l+0x142>
 8014ef2:	786a      	ldrb	r2, [r5, #1]
 8014ef4:	3120      	adds	r1, #32
 8014ef6:	438a      	bics	r2, r1
 8014ef8:	2a58      	cmp	r2, #88	@ 0x58
 8014efa:	d000      	beq.n	8014efe <_strtod_l+0x46>
 8014efc:	e073      	b.n	8014fe6 <_strtod_l+0x12e>
 8014efe:	9302      	str	r3, [sp, #8]
 8014f00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014f02:	4a95      	ldr	r2, [pc, #596]	@ (8015158 <_strtod_l+0x2a0>)
 8014f04:	9301      	str	r3, [sp, #4]
 8014f06:	ab1e      	add	r3, sp, #120	@ 0x78
 8014f08:	9300      	str	r3, [sp, #0]
 8014f0a:	9805      	ldr	r0, [sp, #20]
 8014f0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014f0e:	a91d      	add	r1, sp, #116	@ 0x74
 8014f10:	f001 f95a 	bl	80161c8 <__gethex>
 8014f14:	230f      	movs	r3, #15
 8014f16:	0002      	movs	r2, r0
 8014f18:	401a      	ands	r2, r3
 8014f1a:	0004      	movs	r4, r0
 8014f1c:	9206      	str	r2, [sp, #24]
 8014f1e:	4218      	tst	r0, r3
 8014f20:	d005      	beq.n	8014f2e <_strtod_l+0x76>
 8014f22:	2a06      	cmp	r2, #6
 8014f24:	d12b      	bne.n	8014f7e <_strtod_l+0xc6>
 8014f26:	2300      	movs	r3, #0
 8014f28:	3501      	adds	r5, #1
 8014f2a:	951d      	str	r5, [sp, #116]	@ 0x74
 8014f2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8014f2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d002      	beq.n	8014f3a <_strtod_l+0x82>
 8014f34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f36:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014f38:	6013      	str	r3, [r2, #0]
 8014f3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d019      	beq.n	8014f74 <_strtod_l+0xbc>
 8014f40:	2380      	movs	r3, #128	@ 0x80
 8014f42:	0030      	movs	r0, r6
 8014f44:	061b      	lsls	r3, r3, #24
 8014f46:	18f9      	adds	r1, r7, r3
 8014f48:	b023      	add	sp, #140	@ 0x8c
 8014f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f4c:	2a20      	cmp	r2, #32
 8014f4e:	d1c7      	bne.n	8014ee0 <_strtod_l+0x28>
 8014f50:	3101      	adds	r1, #1
 8014f52:	e7ba      	b.n	8014eca <_strtod_l+0x12>
 8014f54:	2a2d      	cmp	r2, #45	@ 0x2d
 8014f56:	d1c3      	bne.n	8014ee0 <_strtod_l+0x28>
 8014f58:	3a2c      	subs	r2, #44	@ 0x2c
 8014f5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8014f5c:	1c4a      	adds	r2, r1, #1
 8014f5e:	921d      	str	r2, [sp, #116]	@ 0x74
 8014f60:	784a      	ldrb	r2, [r1, #1]
 8014f62:	2a00      	cmp	r2, #0
 8014f64:	d1be      	bne.n	8014ee4 <_strtod_l+0x2c>
 8014f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f68:	931d      	str	r3, [sp, #116]	@ 0x74
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8014f6e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d1df      	bne.n	8014f34 <_strtod_l+0x7c>
 8014f74:	0030      	movs	r0, r6
 8014f76:	0039      	movs	r1, r7
 8014f78:	e7e6      	b.n	8014f48 <_strtod_l+0x90>
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	e7ed      	b.n	8014f5a <_strtod_l+0xa2>
 8014f7e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8014f80:	2a00      	cmp	r2, #0
 8014f82:	d007      	beq.n	8014f94 <_strtod_l+0xdc>
 8014f84:	2135      	movs	r1, #53	@ 0x35
 8014f86:	a820      	add	r0, sp, #128	@ 0x80
 8014f88:	f7ff ff3a 	bl	8014e00 <__copybits>
 8014f8c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8014f8e:	9805      	ldr	r0, [sp, #20]
 8014f90:	f7ff faf4 	bl	801457c <_Bfree>
 8014f94:	9806      	ldr	r0, [sp, #24]
 8014f96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014f98:	3801      	subs	r0, #1
 8014f9a:	2804      	cmp	r0, #4
 8014f9c:	d806      	bhi.n	8014fac <_strtod_l+0xf4>
 8014f9e:	f7eb f8bb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8014fa2:	0312      	.short	0x0312
 8014fa4:	1e1c      	.short	0x1e1c
 8014fa6:	12          	.byte	0x12
 8014fa7:	00          	.byte	0x00
 8014fa8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014faa:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8014fac:	05e4      	lsls	r4, r4, #23
 8014fae:	d502      	bpl.n	8014fb6 <_strtod_l+0xfe>
 8014fb0:	2380      	movs	r3, #128	@ 0x80
 8014fb2:	061b      	lsls	r3, r3, #24
 8014fb4:	431f      	orrs	r7, r3
 8014fb6:	4b69      	ldr	r3, [pc, #420]	@ (801515c <_strtod_l+0x2a4>)
 8014fb8:	423b      	tst	r3, r7
 8014fba:	d1b8      	bne.n	8014f2e <_strtod_l+0x76>
 8014fbc:	f7fe fad0 	bl	8013560 <__errno>
 8014fc0:	2322      	movs	r3, #34	@ 0x22
 8014fc2:	6003      	str	r3, [r0, #0]
 8014fc4:	e7b3      	b.n	8014f2e <_strtod_l+0x76>
 8014fc6:	4966      	ldr	r1, [pc, #408]	@ (8015160 <_strtod_l+0x2a8>)
 8014fc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014fca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014fcc:	400a      	ands	r2, r1
 8014fce:	4965      	ldr	r1, [pc, #404]	@ (8015164 <_strtod_l+0x2ac>)
 8014fd0:	185b      	adds	r3, r3, r1
 8014fd2:	051b      	lsls	r3, r3, #20
 8014fd4:	431a      	orrs	r2, r3
 8014fd6:	0017      	movs	r7, r2
 8014fd8:	e7e8      	b.n	8014fac <_strtod_l+0xf4>
 8014fda:	4f60      	ldr	r7, [pc, #384]	@ (801515c <_strtod_l+0x2a4>)
 8014fdc:	e7e6      	b.n	8014fac <_strtod_l+0xf4>
 8014fde:	2601      	movs	r6, #1
 8014fe0:	4f61      	ldr	r7, [pc, #388]	@ (8015168 <_strtod_l+0x2b0>)
 8014fe2:	4276      	negs	r6, r6
 8014fe4:	e7e2      	b.n	8014fac <_strtod_l+0xf4>
 8014fe6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014fe8:	1c5a      	adds	r2, r3, #1
 8014fea:	921d      	str	r2, [sp, #116]	@ 0x74
 8014fec:	785b      	ldrb	r3, [r3, #1]
 8014fee:	2b30      	cmp	r3, #48	@ 0x30
 8014ff0:	d0f9      	beq.n	8014fe6 <_strtod_l+0x12e>
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d09b      	beq.n	8014f2e <_strtod_l+0x76>
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	930c      	str	r3, [sp, #48]	@ 0x30
 8014ffa:	2500      	movs	r5, #0
 8014ffc:	220a      	movs	r2, #10
 8014ffe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015000:	950d      	str	r5, [sp, #52]	@ 0x34
 8015002:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015004:	9508      	str	r5, [sp, #32]
 8015006:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015008:	7804      	ldrb	r4, [r0, #0]
 801500a:	0023      	movs	r3, r4
 801500c:	3b30      	subs	r3, #48	@ 0x30
 801500e:	b2d9      	uxtb	r1, r3
 8015010:	2909      	cmp	r1, #9
 8015012:	d927      	bls.n	8015064 <_strtod_l+0x1ac>
 8015014:	2201      	movs	r2, #1
 8015016:	4955      	ldr	r1, [pc, #340]	@ (801516c <_strtod_l+0x2b4>)
 8015018:	f000 fff8 	bl	801600c <strncmp>
 801501c:	2800      	cmp	r0, #0
 801501e:	d031      	beq.n	8015084 <_strtod_l+0x1cc>
 8015020:	2000      	movs	r0, #0
 8015022:	0023      	movs	r3, r4
 8015024:	4684      	mov	ip, r0
 8015026:	9a08      	ldr	r2, [sp, #32]
 8015028:	900e      	str	r0, [sp, #56]	@ 0x38
 801502a:	9206      	str	r2, [sp, #24]
 801502c:	2220      	movs	r2, #32
 801502e:	0019      	movs	r1, r3
 8015030:	4391      	bics	r1, r2
 8015032:	000a      	movs	r2, r1
 8015034:	2100      	movs	r1, #0
 8015036:	9107      	str	r1, [sp, #28]
 8015038:	2a45      	cmp	r2, #69	@ 0x45
 801503a:	d000      	beq.n	801503e <_strtod_l+0x186>
 801503c:	e0c0      	b.n	80151c0 <_strtod_l+0x308>
 801503e:	9b06      	ldr	r3, [sp, #24]
 8015040:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015042:	4303      	orrs	r3, r0
 8015044:	4313      	orrs	r3, r2
 8015046:	428b      	cmp	r3, r1
 8015048:	d08d      	beq.n	8014f66 <_strtod_l+0xae>
 801504a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801504c:	9309      	str	r3, [sp, #36]	@ 0x24
 801504e:	3301      	adds	r3, #1
 8015050:	931d      	str	r3, [sp, #116]	@ 0x74
 8015052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015054:	785b      	ldrb	r3, [r3, #1]
 8015056:	2b2b      	cmp	r3, #43	@ 0x2b
 8015058:	d070      	beq.n	801513c <_strtod_l+0x284>
 801505a:	000c      	movs	r4, r1
 801505c:	2b2d      	cmp	r3, #45	@ 0x2d
 801505e:	d173      	bne.n	8015148 <_strtod_l+0x290>
 8015060:	2401      	movs	r4, #1
 8015062:	e06c      	b.n	801513e <_strtod_l+0x286>
 8015064:	9908      	ldr	r1, [sp, #32]
 8015066:	2908      	cmp	r1, #8
 8015068:	dc09      	bgt.n	801507e <_strtod_l+0x1c6>
 801506a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801506c:	4351      	muls	r1, r2
 801506e:	185b      	adds	r3, r3, r1
 8015070:	930d      	str	r3, [sp, #52]	@ 0x34
 8015072:	9b08      	ldr	r3, [sp, #32]
 8015074:	3001      	adds	r0, #1
 8015076:	3301      	adds	r3, #1
 8015078:	9308      	str	r3, [sp, #32]
 801507a:	901d      	str	r0, [sp, #116]	@ 0x74
 801507c:	e7c3      	b.n	8015006 <_strtod_l+0x14e>
 801507e:	4355      	muls	r5, r2
 8015080:	195d      	adds	r5, r3, r5
 8015082:	e7f6      	b.n	8015072 <_strtod_l+0x1ba>
 8015084:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015086:	1c5a      	adds	r2, r3, #1
 8015088:	921d      	str	r2, [sp, #116]	@ 0x74
 801508a:	9a08      	ldr	r2, [sp, #32]
 801508c:	785b      	ldrb	r3, [r3, #1]
 801508e:	2a00      	cmp	r2, #0
 8015090:	d03a      	beq.n	8015108 <_strtod_l+0x250>
 8015092:	900e      	str	r0, [sp, #56]	@ 0x38
 8015094:	9206      	str	r2, [sp, #24]
 8015096:	001a      	movs	r2, r3
 8015098:	3a30      	subs	r2, #48	@ 0x30
 801509a:	2a09      	cmp	r2, #9
 801509c:	d912      	bls.n	80150c4 <_strtod_l+0x20c>
 801509e:	2201      	movs	r2, #1
 80150a0:	4694      	mov	ip, r2
 80150a2:	e7c3      	b.n	801502c <_strtod_l+0x174>
 80150a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80150a6:	3001      	adds	r0, #1
 80150a8:	1c5a      	adds	r2, r3, #1
 80150aa:	921d      	str	r2, [sp, #116]	@ 0x74
 80150ac:	785b      	ldrb	r3, [r3, #1]
 80150ae:	2b30      	cmp	r3, #48	@ 0x30
 80150b0:	d0f8      	beq.n	80150a4 <_strtod_l+0x1ec>
 80150b2:	001a      	movs	r2, r3
 80150b4:	3a31      	subs	r2, #49	@ 0x31
 80150b6:	2a08      	cmp	r2, #8
 80150b8:	d83b      	bhi.n	8015132 <_strtod_l+0x27a>
 80150ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80150bc:	2000      	movs	r0, #0
 80150be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80150c0:	9006      	str	r0, [sp, #24]
 80150c2:	9213      	str	r2, [sp, #76]	@ 0x4c
 80150c4:	001a      	movs	r2, r3
 80150c6:	1c41      	adds	r1, r0, #1
 80150c8:	3a30      	subs	r2, #48	@ 0x30
 80150ca:	2b30      	cmp	r3, #48	@ 0x30
 80150cc:	d016      	beq.n	80150fc <_strtod_l+0x244>
 80150ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150d0:	185b      	adds	r3, r3, r1
 80150d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80150d4:	9b06      	ldr	r3, [sp, #24]
 80150d6:	210a      	movs	r1, #10
 80150d8:	469c      	mov	ip, r3
 80150da:	4484      	add	ip, r0
 80150dc:	459c      	cmp	ip, r3
 80150de:	d115      	bne.n	801510c <_strtod_l+0x254>
 80150e0:	9906      	ldr	r1, [sp, #24]
 80150e2:	9b06      	ldr	r3, [sp, #24]
 80150e4:	3101      	adds	r1, #1
 80150e6:	1809      	adds	r1, r1, r0
 80150e8:	181b      	adds	r3, r3, r0
 80150ea:	9106      	str	r1, [sp, #24]
 80150ec:	2b08      	cmp	r3, #8
 80150ee:	dc19      	bgt.n	8015124 <_strtod_l+0x26c>
 80150f0:	230a      	movs	r3, #10
 80150f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80150f4:	434b      	muls	r3, r1
 80150f6:	2100      	movs	r1, #0
 80150f8:	18d3      	adds	r3, r2, r3
 80150fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80150fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80150fe:	0008      	movs	r0, r1
 8015100:	1c5a      	adds	r2, r3, #1
 8015102:	921d      	str	r2, [sp, #116]	@ 0x74
 8015104:	785b      	ldrb	r3, [r3, #1]
 8015106:	e7c6      	b.n	8015096 <_strtod_l+0x1de>
 8015108:	9808      	ldr	r0, [sp, #32]
 801510a:	e7d0      	b.n	80150ae <_strtod_l+0x1f6>
 801510c:	1c5c      	adds	r4, r3, #1
 801510e:	2b08      	cmp	r3, #8
 8015110:	dc04      	bgt.n	801511c <_strtod_l+0x264>
 8015112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015114:	434b      	muls	r3, r1
 8015116:	930d      	str	r3, [sp, #52]	@ 0x34
 8015118:	0023      	movs	r3, r4
 801511a:	e7df      	b.n	80150dc <_strtod_l+0x224>
 801511c:	2c10      	cmp	r4, #16
 801511e:	dcfb      	bgt.n	8015118 <_strtod_l+0x260>
 8015120:	434d      	muls	r5, r1
 8015122:	e7f9      	b.n	8015118 <_strtod_l+0x260>
 8015124:	2100      	movs	r1, #0
 8015126:	2b0f      	cmp	r3, #15
 8015128:	dce8      	bgt.n	80150fc <_strtod_l+0x244>
 801512a:	230a      	movs	r3, #10
 801512c:	435d      	muls	r5, r3
 801512e:	1955      	adds	r5, r2, r5
 8015130:	e7e4      	b.n	80150fc <_strtod_l+0x244>
 8015132:	2200      	movs	r2, #0
 8015134:	920e      	str	r2, [sp, #56]	@ 0x38
 8015136:	9206      	str	r2, [sp, #24]
 8015138:	3201      	adds	r2, #1
 801513a:	e7b1      	b.n	80150a0 <_strtod_l+0x1e8>
 801513c:	2400      	movs	r4, #0
 801513e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015140:	3302      	adds	r3, #2
 8015142:	931d      	str	r3, [sp, #116]	@ 0x74
 8015144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015146:	789b      	ldrb	r3, [r3, #2]
 8015148:	001a      	movs	r2, r3
 801514a:	3a30      	subs	r2, #48	@ 0x30
 801514c:	2a09      	cmp	r2, #9
 801514e:	d913      	bls.n	8015178 <_strtod_l+0x2c0>
 8015150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015152:	921d      	str	r2, [sp, #116]	@ 0x74
 8015154:	2200      	movs	r2, #0
 8015156:	e032      	b.n	80151be <_strtod_l+0x306>
 8015158:	08017900 	.word	0x08017900
 801515c:	7ff00000 	.word	0x7ff00000
 8015160:	ffefffff 	.word	0xffefffff
 8015164:	00000433 	.word	0x00000433
 8015168:	7fffffff 	.word	0x7fffffff
 801516c:	080178e8 	.word	0x080178e8
 8015170:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015172:	1c5a      	adds	r2, r3, #1
 8015174:	921d      	str	r2, [sp, #116]	@ 0x74
 8015176:	785b      	ldrb	r3, [r3, #1]
 8015178:	2b30      	cmp	r3, #48	@ 0x30
 801517a:	d0f9      	beq.n	8015170 <_strtod_l+0x2b8>
 801517c:	2200      	movs	r2, #0
 801517e:	9207      	str	r2, [sp, #28]
 8015180:	001a      	movs	r2, r3
 8015182:	3a31      	subs	r2, #49	@ 0x31
 8015184:	2a08      	cmp	r2, #8
 8015186:	d81b      	bhi.n	80151c0 <_strtod_l+0x308>
 8015188:	3b30      	subs	r3, #48	@ 0x30
 801518a:	9310      	str	r3, [sp, #64]	@ 0x40
 801518c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801518e:	9307      	str	r3, [sp, #28]
 8015190:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015192:	1c59      	adds	r1, r3, #1
 8015194:	911d      	str	r1, [sp, #116]	@ 0x74
 8015196:	785b      	ldrb	r3, [r3, #1]
 8015198:	001a      	movs	r2, r3
 801519a:	3a30      	subs	r2, #48	@ 0x30
 801519c:	2a09      	cmp	r2, #9
 801519e:	d93a      	bls.n	8015216 <_strtod_l+0x35e>
 80151a0:	9a07      	ldr	r2, [sp, #28]
 80151a2:	1a8a      	subs	r2, r1, r2
 80151a4:	49b4      	ldr	r1, [pc, #720]	@ (8015478 <_strtod_l+0x5c0>)
 80151a6:	9107      	str	r1, [sp, #28]
 80151a8:	2a08      	cmp	r2, #8
 80151aa:	dc04      	bgt.n	80151b6 <_strtod_l+0x2fe>
 80151ac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80151ae:	9207      	str	r2, [sp, #28]
 80151b0:	428a      	cmp	r2, r1
 80151b2:	dd00      	ble.n	80151b6 <_strtod_l+0x2fe>
 80151b4:	9107      	str	r1, [sp, #28]
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	d002      	beq.n	80151c0 <_strtod_l+0x308>
 80151ba:	9a07      	ldr	r2, [sp, #28]
 80151bc:	4252      	negs	r2, r2
 80151be:	9207      	str	r2, [sp, #28]
 80151c0:	9a06      	ldr	r2, [sp, #24]
 80151c2:	2a00      	cmp	r2, #0
 80151c4:	d14d      	bne.n	8015262 <_strtod_l+0x3aa>
 80151c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80151c8:	4310      	orrs	r0, r2
 80151ca:	d000      	beq.n	80151ce <_strtod_l+0x316>
 80151cc:	e6af      	b.n	8014f2e <_strtod_l+0x76>
 80151ce:	4662      	mov	r2, ip
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	d000      	beq.n	80151d6 <_strtod_l+0x31e>
 80151d4:	e6c7      	b.n	8014f66 <_strtod_l+0xae>
 80151d6:	2b69      	cmp	r3, #105	@ 0x69
 80151d8:	d027      	beq.n	801522a <_strtod_l+0x372>
 80151da:	dc23      	bgt.n	8015224 <_strtod_l+0x36c>
 80151dc:	2b49      	cmp	r3, #73	@ 0x49
 80151de:	d024      	beq.n	801522a <_strtod_l+0x372>
 80151e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80151e2:	d000      	beq.n	80151e6 <_strtod_l+0x32e>
 80151e4:	e6bf      	b.n	8014f66 <_strtod_l+0xae>
 80151e6:	49a5      	ldr	r1, [pc, #660]	@ (801547c <_strtod_l+0x5c4>)
 80151e8:	a81d      	add	r0, sp, #116	@ 0x74
 80151ea:	f001 fa23 	bl	8016634 <__match>
 80151ee:	2800      	cmp	r0, #0
 80151f0:	d100      	bne.n	80151f4 <_strtod_l+0x33c>
 80151f2:	e6b8      	b.n	8014f66 <_strtod_l+0xae>
 80151f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	2b28      	cmp	r3, #40	@ 0x28
 80151fa:	d12c      	bne.n	8015256 <_strtod_l+0x39e>
 80151fc:	49a0      	ldr	r1, [pc, #640]	@ (8015480 <_strtod_l+0x5c8>)
 80151fe:	aa20      	add	r2, sp, #128	@ 0x80
 8015200:	a81d      	add	r0, sp, #116	@ 0x74
 8015202:	f001 fa2b 	bl	801665c <__hexnan>
 8015206:	2805      	cmp	r0, #5
 8015208:	d125      	bne.n	8015256 <_strtod_l+0x39e>
 801520a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801520c:	4a9d      	ldr	r2, [pc, #628]	@ (8015484 <_strtod_l+0x5cc>)
 801520e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8015210:	431a      	orrs	r2, r3
 8015212:	0017      	movs	r7, r2
 8015214:	e68b      	b.n	8014f2e <_strtod_l+0x76>
 8015216:	220a      	movs	r2, #10
 8015218:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801521a:	434a      	muls	r2, r1
 801521c:	18d2      	adds	r2, r2, r3
 801521e:	3a30      	subs	r2, #48	@ 0x30
 8015220:	9210      	str	r2, [sp, #64]	@ 0x40
 8015222:	e7b5      	b.n	8015190 <_strtod_l+0x2d8>
 8015224:	2b6e      	cmp	r3, #110	@ 0x6e
 8015226:	d0de      	beq.n	80151e6 <_strtod_l+0x32e>
 8015228:	e69d      	b.n	8014f66 <_strtod_l+0xae>
 801522a:	4997      	ldr	r1, [pc, #604]	@ (8015488 <_strtod_l+0x5d0>)
 801522c:	a81d      	add	r0, sp, #116	@ 0x74
 801522e:	f001 fa01 	bl	8016634 <__match>
 8015232:	2800      	cmp	r0, #0
 8015234:	d100      	bne.n	8015238 <_strtod_l+0x380>
 8015236:	e696      	b.n	8014f66 <_strtod_l+0xae>
 8015238:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801523a:	4994      	ldr	r1, [pc, #592]	@ (801548c <_strtod_l+0x5d4>)
 801523c:	3b01      	subs	r3, #1
 801523e:	a81d      	add	r0, sp, #116	@ 0x74
 8015240:	931d      	str	r3, [sp, #116]	@ 0x74
 8015242:	f001 f9f7 	bl	8016634 <__match>
 8015246:	2800      	cmp	r0, #0
 8015248:	d102      	bne.n	8015250 <_strtod_l+0x398>
 801524a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801524c:	3301      	adds	r3, #1
 801524e:	931d      	str	r3, [sp, #116]	@ 0x74
 8015250:	2600      	movs	r6, #0
 8015252:	4f8c      	ldr	r7, [pc, #560]	@ (8015484 <_strtod_l+0x5cc>)
 8015254:	e66b      	b.n	8014f2e <_strtod_l+0x76>
 8015256:	488e      	ldr	r0, [pc, #568]	@ (8015490 <_strtod_l+0x5d8>)
 8015258:	f000 fefc 	bl	8016054 <nan>
 801525c:	0006      	movs	r6, r0
 801525e:	000f      	movs	r7, r1
 8015260:	e665      	b.n	8014f2e <_strtod_l+0x76>
 8015262:	9b07      	ldr	r3, [sp, #28]
 8015264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015266:	1a9b      	subs	r3, r3, r2
 8015268:	930c      	str	r3, [sp, #48]	@ 0x30
 801526a:	9b08      	ldr	r3, [sp, #32]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d101      	bne.n	8015274 <_strtod_l+0x3bc>
 8015270:	9b06      	ldr	r3, [sp, #24]
 8015272:	9308      	str	r3, [sp, #32]
 8015274:	9c06      	ldr	r4, [sp, #24]
 8015276:	2c10      	cmp	r4, #16
 8015278:	dd00      	ble.n	801527c <_strtod_l+0x3c4>
 801527a:	2410      	movs	r4, #16
 801527c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801527e:	f7ee f86d 	bl	800335c <__aeabi_ui2d>
 8015282:	9b06      	ldr	r3, [sp, #24]
 8015284:	0006      	movs	r6, r0
 8015286:	000f      	movs	r7, r1
 8015288:	2b09      	cmp	r3, #9
 801528a:	dc13      	bgt.n	80152b4 <_strtod_l+0x3fc>
 801528c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801528e:	2b00      	cmp	r3, #0
 8015290:	d100      	bne.n	8015294 <_strtod_l+0x3dc>
 8015292:	e64c      	b.n	8014f2e <_strtod_l+0x76>
 8015294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015296:	2b00      	cmp	r3, #0
 8015298:	dc00      	bgt.n	801529c <_strtod_l+0x3e4>
 801529a:	e07e      	b.n	801539a <_strtod_l+0x4e2>
 801529c:	2b16      	cmp	r3, #22
 801529e:	dc63      	bgt.n	8015368 <_strtod_l+0x4b0>
 80152a0:	497c      	ldr	r1, [pc, #496]	@ (8015494 <_strtod_l+0x5dc>)
 80152a2:	00db      	lsls	r3, r3, #3
 80152a4:	18c9      	adds	r1, r1, r3
 80152a6:	0032      	movs	r2, r6
 80152a8:	6808      	ldr	r0, [r1, #0]
 80152aa:	6849      	ldr	r1, [r1, #4]
 80152ac:	003b      	movs	r3, r7
 80152ae:	f7ed f965 	bl	800257c <__aeabi_dmul>
 80152b2:	e7d3      	b.n	801525c <_strtod_l+0x3a4>
 80152b4:	0022      	movs	r2, r4
 80152b6:	4b77      	ldr	r3, [pc, #476]	@ (8015494 <_strtod_l+0x5dc>)
 80152b8:	3a09      	subs	r2, #9
 80152ba:	00d2      	lsls	r2, r2, #3
 80152bc:	189b      	adds	r3, r3, r2
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	f7ed f95b 	bl	800257c <__aeabi_dmul>
 80152c6:	0006      	movs	r6, r0
 80152c8:	0028      	movs	r0, r5
 80152ca:	000f      	movs	r7, r1
 80152cc:	f7ee f846 	bl	800335c <__aeabi_ui2d>
 80152d0:	000b      	movs	r3, r1
 80152d2:	0002      	movs	r2, r0
 80152d4:	0039      	movs	r1, r7
 80152d6:	0030      	movs	r0, r6
 80152d8:	f7ec f9a8 	bl	800162c <__aeabi_dadd>
 80152dc:	9b06      	ldr	r3, [sp, #24]
 80152de:	0006      	movs	r6, r0
 80152e0:	000f      	movs	r7, r1
 80152e2:	2b0f      	cmp	r3, #15
 80152e4:	ddd2      	ble.n	801528c <_strtod_l+0x3d4>
 80152e6:	9b06      	ldr	r3, [sp, #24]
 80152e8:	1b1c      	subs	r4, r3, r4
 80152ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152ec:	18e4      	adds	r4, r4, r3
 80152ee:	2c00      	cmp	r4, #0
 80152f0:	dc00      	bgt.n	80152f4 <_strtod_l+0x43c>
 80152f2:	e09b      	b.n	801542c <_strtod_l+0x574>
 80152f4:	220f      	movs	r2, #15
 80152f6:	0023      	movs	r3, r4
 80152f8:	4013      	ands	r3, r2
 80152fa:	4214      	tst	r4, r2
 80152fc:	d00a      	beq.n	8015314 <_strtod_l+0x45c>
 80152fe:	4965      	ldr	r1, [pc, #404]	@ (8015494 <_strtod_l+0x5dc>)
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	18c9      	adds	r1, r1, r3
 8015304:	0032      	movs	r2, r6
 8015306:	6808      	ldr	r0, [r1, #0]
 8015308:	6849      	ldr	r1, [r1, #4]
 801530a:	003b      	movs	r3, r7
 801530c:	f7ed f936 	bl	800257c <__aeabi_dmul>
 8015310:	0006      	movs	r6, r0
 8015312:	000f      	movs	r7, r1
 8015314:	230f      	movs	r3, #15
 8015316:	439c      	bics	r4, r3
 8015318:	d073      	beq.n	8015402 <_strtod_l+0x54a>
 801531a:	3326      	adds	r3, #38	@ 0x26
 801531c:	33ff      	adds	r3, #255	@ 0xff
 801531e:	429c      	cmp	r4, r3
 8015320:	dd4b      	ble.n	80153ba <_strtod_l+0x502>
 8015322:	2300      	movs	r3, #0
 8015324:	9306      	str	r3, [sp, #24]
 8015326:	9307      	str	r3, [sp, #28]
 8015328:	930d      	str	r3, [sp, #52]	@ 0x34
 801532a:	9308      	str	r3, [sp, #32]
 801532c:	2322      	movs	r3, #34	@ 0x22
 801532e:	2600      	movs	r6, #0
 8015330:	9a05      	ldr	r2, [sp, #20]
 8015332:	4f54      	ldr	r7, [pc, #336]	@ (8015484 <_strtod_l+0x5cc>)
 8015334:	6013      	str	r3, [r2, #0]
 8015336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015338:	42b3      	cmp	r3, r6
 801533a:	d100      	bne.n	801533e <_strtod_l+0x486>
 801533c:	e5f7      	b.n	8014f2e <_strtod_l+0x76>
 801533e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8015340:	9805      	ldr	r0, [sp, #20]
 8015342:	f7ff f91b 	bl	801457c <_Bfree>
 8015346:	9908      	ldr	r1, [sp, #32]
 8015348:	9805      	ldr	r0, [sp, #20]
 801534a:	f7ff f917 	bl	801457c <_Bfree>
 801534e:	9907      	ldr	r1, [sp, #28]
 8015350:	9805      	ldr	r0, [sp, #20]
 8015352:	f7ff f913 	bl	801457c <_Bfree>
 8015356:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015358:	9805      	ldr	r0, [sp, #20]
 801535a:	f7ff f90f 	bl	801457c <_Bfree>
 801535e:	9906      	ldr	r1, [sp, #24]
 8015360:	9805      	ldr	r0, [sp, #20]
 8015362:	f7ff f90b 	bl	801457c <_Bfree>
 8015366:	e5e2      	b.n	8014f2e <_strtod_l+0x76>
 8015368:	2325      	movs	r3, #37	@ 0x25
 801536a:	9a06      	ldr	r2, [sp, #24]
 801536c:	1a9b      	subs	r3, r3, r2
 801536e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015370:	4293      	cmp	r3, r2
 8015372:	dbb8      	blt.n	80152e6 <_strtod_l+0x42e>
 8015374:	240f      	movs	r4, #15
 8015376:	9b06      	ldr	r3, [sp, #24]
 8015378:	4d46      	ldr	r5, [pc, #280]	@ (8015494 <_strtod_l+0x5dc>)
 801537a:	1ae4      	subs	r4, r4, r3
 801537c:	00e1      	lsls	r1, r4, #3
 801537e:	1869      	adds	r1, r5, r1
 8015380:	0032      	movs	r2, r6
 8015382:	6808      	ldr	r0, [r1, #0]
 8015384:	6849      	ldr	r1, [r1, #4]
 8015386:	003b      	movs	r3, r7
 8015388:	f7ed f8f8 	bl	800257c <__aeabi_dmul>
 801538c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801538e:	1b1c      	subs	r4, r3, r4
 8015390:	00e4      	lsls	r4, r4, #3
 8015392:	192d      	adds	r5, r5, r4
 8015394:	682a      	ldr	r2, [r5, #0]
 8015396:	686b      	ldr	r3, [r5, #4]
 8015398:	e789      	b.n	80152ae <_strtod_l+0x3f6>
 801539a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801539c:	3316      	adds	r3, #22
 801539e:	dba2      	blt.n	80152e6 <_strtod_l+0x42e>
 80153a0:	9907      	ldr	r1, [sp, #28]
 80153a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80153a4:	4b3b      	ldr	r3, [pc, #236]	@ (8015494 <_strtod_l+0x5dc>)
 80153a6:	1a52      	subs	r2, r2, r1
 80153a8:	00d2      	lsls	r2, r2, #3
 80153aa:	189b      	adds	r3, r3, r2
 80153ac:	0030      	movs	r0, r6
 80153ae:	681a      	ldr	r2, [r3, #0]
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	0039      	movs	r1, r7
 80153b4:	f7ec fc9e 	bl	8001cf4 <__aeabi_ddiv>
 80153b8:	e750      	b.n	801525c <_strtod_l+0x3a4>
 80153ba:	2300      	movs	r3, #0
 80153bc:	0030      	movs	r0, r6
 80153be:	0039      	movs	r1, r7
 80153c0:	4d35      	ldr	r5, [pc, #212]	@ (8015498 <_strtod_l+0x5e0>)
 80153c2:	1124      	asrs	r4, r4, #4
 80153c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80153c6:	2c01      	cmp	r4, #1
 80153c8:	dc1e      	bgt.n	8015408 <_strtod_l+0x550>
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d001      	beq.n	80153d2 <_strtod_l+0x51a>
 80153ce:	0006      	movs	r6, r0
 80153d0:	000f      	movs	r7, r1
 80153d2:	4b32      	ldr	r3, [pc, #200]	@ (801549c <_strtod_l+0x5e4>)
 80153d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153d6:	18ff      	adds	r7, r7, r3
 80153d8:	4b2f      	ldr	r3, [pc, #188]	@ (8015498 <_strtod_l+0x5e0>)
 80153da:	00d5      	lsls	r5, r2, #3
 80153dc:	195d      	adds	r5, r3, r5
 80153de:	0032      	movs	r2, r6
 80153e0:	6828      	ldr	r0, [r5, #0]
 80153e2:	6869      	ldr	r1, [r5, #4]
 80153e4:	003b      	movs	r3, r7
 80153e6:	f7ed f8c9 	bl	800257c <__aeabi_dmul>
 80153ea:	4b26      	ldr	r3, [pc, #152]	@ (8015484 <_strtod_l+0x5cc>)
 80153ec:	4a2c      	ldr	r2, [pc, #176]	@ (80154a0 <_strtod_l+0x5e8>)
 80153ee:	0006      	movs	r6, r0
 80153f0:	400b      	ands	r3, r1
 80153f2:	4293      	cmp	r3, r2
 80153f4:	d895      	bhi.n	8015322 <_strtod_l+0x46a>
 80153f6:	4a2b      	ldr	r2, [pc, #172]	@ (80154a4 <_strtod_l+0x5ec>)
 80153f8:	4293      	cmp	r3, r2
 80153fa:	d913      	bls.n	8015424 <_strtod_l+0x56c>
 80153fc:	2601      	movs	r6, #1
 80153fe:	4f2a      	ldr	r7, [pc, #168]	@ (80154a8 <_strtod_l+0x5f0>)
 8015400:	4276      	negs	r6, r6
 8015402:	2300      	movs	r3, #0
 8015404:	9309      	str	r3, [sp, #36]	@ 0x24
 8015406:	e086      	b.n	8015516 <_strtod_l+0x65e>
 8015408:	2201      	movs	r2, #1
 801540a:	4214      	tst	r4, r2
 801540c:	d004      	beq.n	8015418 <_strtod_l+0x560>
 801540e:	682a      	ldr	r2, [r5, #0]
 8015410:	686b      	ldr	r3, [r5, #4]
 8015412:	f7ed f8b3 	bl	800257c <__aeabi_dmul>
 8015416:	2301      	movs	r3, #1
 8015418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801541a:	1064      	asrs	r4, r4, #1
 801541c:	3201      	adds	r2, #1
 801541e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015420:	3508      	adds	r5, #8
 8015422:	e7d0      	b.n	80153c6 <_strtod_l+0x50e>
 8015424:	23d4      	movs	r3, #212	@ 0xd4
 8015426:	049b      	lsls	r3, r3, #18
 8015428:	18cf      	adds	r7, r1, r3
 801542a:	e7ea      	b.n	8015402 <_strtod_l+0x54a>
 801542c:	2c00      	cmp	r4, #0
 801542e:	d0e8      	beq.n	8015402 <_strtod_l+0x54a>
 8015430:	4264      	negs	r4, r4
 8015432:	230f      	movs	r3, #15
 8015434:	0022      	movs	r2, r4
 8015436:	401a      	ands	r2, r3
 8015438:	421c      	tst	r4, r3
 801543a:	d00a      	beq.n	8015452 <_strtod_l+0x59a>
 801543c:	4b15      	ldr	r3, [pc, #84]	@ (8015494 <_strtod_l+0x5dc>)
 801543e:	00d2      	lsls	r2, r2, #3
 8015440:	189b      	adds	r3, r3, r2
 8015442:	0030      	movs	r0, r6
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	0039      	movs	r1, r7
 801544a:	f7ec fc53 	bl	8001cf4 <__aeabi_ddiv>
 801544e:	0006      	movs	r6, r0
 8015450:	000f      	movs	r7, r1
 8015452:	1124      	asrs	r4, r4, #4
 8015454:	d0d5      	beq.n	8015402 <_strtod_l+0x54a>
 8015456:	2c1f      	cmp	r4, #31
 8015458:	dd28      	ble.n	80154ac <_strtod_l+0x5f4>
 801545a:	2300      	movs	r3, #0
 801545c:	9306      	str	r3, [sp, #24]
 801545e:	9307      	str	r3, [sp, #28]
 8015460:	930d      	str	r3, [sp, #52]	@ 0x34
 8015462:	9308      	str	r3, [sp, #32]
 8015464:	2322      	movs	r3, #34	@ 0x22
 8015466:	9a05      	ldr	r2, [sp, #20]
 8015468:	2600      	movs	r6, #0
 801546a:	6013      	str	r3, [r2, #0]
 801546c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801546e:	2700      	movs	r7, #0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d000      	beq.n	8015476 <_strtod_l+0x5be>
 8015474:	e763      	b.n	801533e <_strtod_l+0x486>
 8015476:	e55a      	b.n	8014f2e <_strtod_l+0x76>
 8015478:	00004e1f 	.word	0x00004e1f
 801547c:	080176d9 	.word	0x080176d9
 8015480:	080178ec 	.word	0x080178ec
 8015484:	7ff00000 	.word	0x7ff00000
 8015488:	080176d1 	.word	0x080176d1
 801548c:	08017708 	.word	0x08017708
 8015490:	08017a95 	.word	0x08017a95
 8015494:	08017820 	.word	0x08017820
 8015498:	080177f8 	.word	0x080177f8
 801549c:	fcb00000 	.word	0xfcb00000
 80154a0:	7ca00000 	.word	0x7ca00000
 80154a4:	7c900000 	.word	0x7c900000
 80154a8:	7fefffff 	.word	0x7fefffff
 80154ac:	2310      	movs	r3, #16
 80154ae:	0022      	movs	r2, r4
 80154b0:	401a      	ands	r2, r3
 80154b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80154b4:	421c      	tst	r4, r3
 80154b6:	d001      	beq.n	80154bc <_strtod_l+0x604>
 80154b8:	335a      	adds	r3, #90	@ 0x5a
 80154ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80154bc:	0030      	movs	r0, r6
 80154be:	0039      	movs	r1, r7
 80154c0:	2300      	movs	r3, #0
 80154c2:	4dbf      	ldr	r5, [pc, #764]	@ (80157c0 <_strtod_l+0x908>)
 80154c4:	2201      	movs	r2, #1
 80154c6:	4214      	tst	r4, r2
 80154c8:	d004      	beq.n	80154d4 <_strtod_l+0x61c>
 80154ca:	682a      	ldr	r2, [r5, #0]
 80154cc:	686b      	ldr	r3, [r5, #4]
 80154ce:	f7ed f855 	bl	800257c <__aeabi_dmul>
 80154d2:	2301      	movs	r3, #1
 80154d4:	1064      	asrs	r4, r4, #1
 80154d6:	3508      	adds	r5, #8
 80154d8:	2c00      	cmp	r4, #0
 80154da:	d1f3      	bne.n	80154c4 <_strtod_l+0x60c>
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d001      	beq.n	80154e4 <_strtod_l+0x62c>
 80154e0:	0006      	movs	r6, r0
 80154e2:	000f      	movs	r7, r1
 80154e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d00d      	beq.n	8015506 <_strtod_l+0x64e>
 80154ea:	236b      	movs	r3, #107	@ 0x6b
 80154ec:	007a      	lsls	r2, r7, #1
 80154ee:	0d52      	lsrs	r2, r2, #21
 80154f0:	0039      	movs	r1, r7
 80154f2:	1a9b      	subs	r3, r3, r2
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	dd06      	ble.n	8015506 <_strtod_l+0x64e>
 80154f8:	2b1f      	cmp	r3, #31
 80154fa:	dd5a      	ble.n	80155b2 <_strtod_l+0x6fa>
 80154fc:	2600      	movs	r6, #0
 80154fe:	2b34      	cmp	r3, #52	@ 0x34
 8015500:	dd50      	ble.n	80155a4 <_strtod_l+0x6ec>
 8015502:	27dc      	movs	r7, #220	@ 0xdc
 8015504:	04bf      	lsls	r7, r7, #18
 8015506:	2200      	movs	r2, #0
 8015508:	2300      	movs	r3, #0
 801550a:	0030      	movs	r0, r6
 801550c:	0039      	movs	r1, r7
 801550e:	f7ea ff9d 	bl	800044c <__aeabi_dcmpeq>
 8015512:	2800      	cmp	r0, #0
 8015514:	d1a1      	bne.n	801545a <_strtod_l+0x5a2>
 8015516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015518:	9a08      	ldr	r2, [sp, #32]
 801551a:	9300      	str	r3, [sp, #0]
 801551c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801551e:	9b06      	ldr	r3, [sp, #24]
 8015520:	9805      	ldr	r0, [sp, #20]
 8015522:	f7ff f893 	bl	801464c <__s2b>
 8015526:	900d      	str	r0, [sp, #52]	@ 0x34
 8015528:	2800      	cmp	r0, #0
 801552a:	d100      	bne.n	801552e <_strtod_l+0x676>
 801552c:	e6f9      	b.n	8015322 <_strtod_l+0x46a>
 801552e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015530:	9907      	ldr	r1, [sp, #28]
 8015532:	17da      	asrs	r2, r3, #31
 8015534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015536:	1a5b      	subs	r3, r3, r1
 8015538:	401a      	ands	r2, r3
 801553a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801553c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801553e:	43db      	mvns	r3, r3
 8015540:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015542:	17db      	asrs	r3, r3, #31
 8015544:	401a      	ands	r2, r3
 8015546:	2300      	movs	r3, #0
 8015548:	921a      	str	r2, [sp, #104]	@ 0x68
 801554a:	9306      	str	r3, [sp, #24]
 801554c:	9307      	str	r3, [sp, #28]
 801554e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015550:	9805      	ldr	r0, [sp, #20]
 8015552:	6859      	ldr	r1, [r3, #4]
 8015554:	f7fe ffce 	bl	80144f4 <_Balloc>
 8015558:	9008      	str	r0, [sp, #32]
 801555a:	2800      	cmp	r0, #0
 801555c:	d100      	bne.n	8015560 <_strtod_l+0x6a8>
 801555e:	e6e5      	b.n	801532c <_strtod_l+0x474>
 8015560:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015562:	300c      	adds	r0, #12
 8015564:	0019      	movs	r1, r3
 8015566:	691a      	ldr	r2, [r3, #16]
 8015568:	310c      	adds	r1, #12
 801556a:	3202      	adds	r2, #2
 801556c:	0092      	lsls	r2, r2, #2
 801556e:	f7fe f82f 	bl	80135d0 <memcpy>
 8015572:	ab20      	add	r3, sp, #128	@ 0x80
 8015574:	9301      	str	r3, [sp, #4]
 8015576:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015578:	9300      	str	r3, [sp, #0]
 801557a:	0032      	movs	r2, r6
 801557c:	003b      	movs	r3, r7
 801557e:	9805      	ldr	r0, [sp, #20]
 8015580:	9610      	str	r6, [sp, #64]	@ 0x40
 8015582:	9711      	str	r7, [sp, #68]	@ 0x44
 8015584:	f7ff fbb2 	bl	8014cec <__d2b>
 8015588:	901e      	str	r0, [sp, #120]	@ 0x78
 801558a:	2800      	cmp	r0, #0
 801558c:	d100      	bne.n	8015590 <_strtod_l+0x6d8>
 801558e:	e6cd      	b.n	801532c <_strtod_l+0x474>
 8015590:	2101      	movs	r1, #1
 8015592:	9805      	ldr	r0, [sp, #20]
 8015594:	f7ff f8f6 	bl	8014784 <__i2b>
 8015598:	9007      	str	r0, [sp, #28]
 801559a:	2800      	cmp	r0, #0
 801559c:	d10e      	bne.n	80155bc <_strtod_l+0x704>
 801559e:	2300      	movs	r3, #0
 80155a0:	9307      	str	r3, [sp, #28]
 80155a2:	e6c3      	b.n	801532c <_strtod_l+0x474>
 80155a4:	234b      	movs	r3, #75	@ 0x4b
 80155a6:	1a9a      	subs	r2, r3, r2
 80155a8:	3b4c      	subs	r3, #76	@ 0x4c
 80155aa:	4093      	lsls	r3, r2
 80155ac:	4019      	ands	r1, r3
 80155ae:	000f      	movs	r7, r1
 80155b0:	e7a9      	b.n	8015506 <_strtod_l+0x64e>
 80155b2:	2201      	movs	r2, #1
 80155b4:	4252      	negs	r2, r2
 80155b6:	409a      	lsls	r2, r3
 80155b8:	4016      	ands	r6, r2
 80155ba:	e7a4      	b.n	8015506 <_strtod_l+0x64e>
 80155bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80155be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80155c0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80155c2:	1ad4      	subs	r4, r2, r3
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	db01      	blt.n	80155cc <_strtod_l+0x714>
 80155c8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80155ca:	195d      	adds	r5, r3, r5
 80155cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80155ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80155d0:	1a5b      	subs	r3, r3, r1
 80155d2:	2136      	movs	r1, #54	@ 0x36
 80155d4:	189b      	adds	r3, r3, r2
 80155d6:	1a8a      	subs	r2, r1, r2
 80155d8:	497a      	ldr	r1, [pc, #488]	@ (80157c4 <_strtod_l+0x90c>)
 80155da:	2001      	movs	r0, #1
 80155dc:	468c      	mov	ip, r1
 80155de:	2100      	movs	r1, #0
 80155e0:	3b01      	subs	r3, #1
 80155e2:	9116      	str	r1, [sp, #88]	@ 0x58
 80155e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80155e6:	4563      	cmp	r3, ip
 80155e8:	da06      	bge.n	80155f8 <_strtod_l+0x740>
 80155ea:	4661      	mov	r1, ip
 80155ec:	1ac9      	subs	r1, r1, r3
 80155ee:	1a52      	subs	r2, r2, r1
 80155f0:	291f      	cmp	r1, #31
 80155f2:	dc3f      	bgt.n	8015674 <_strtod_l+0x7bc>
 80155f4:	4088      	lsls	r0, r1
 80155f6:	9014      	str	r0, [sp, #80]	@ 0x50
 80155f8:	18ab      	adds	r3, r5, r2
 80155fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80155fc:	18a4      	adds	r4, r4, r2
 80155fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015602:	191c      	adds	r4, r3, r4
 8015604:	002b      	movs	r3, r5
 8015606:	4295      	cmp	r5, r2
 8015608:	dd00      	ble.n	801560c <_strtod_l+0x754>
 801560a:	0013      	movs	r3, r2
 801560c:	42a3      	cmp	r3, r4
 801560e:	dd00      	ble.n	8015612 <_strtod_l+0x75a>
 8015610:	0023      	movs	r3, r4
 8015612:	2b00      	cmp	r3, #0
 8015614:	dd04      	ble.n	8015620 <_strtod_l+0x768>
 8015616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015618:	1ae4      	subs	r4, r4, r3
 801561a:	1ad2      	subs	r2, r2, r3
 801561c:	920e      	str	r2, [sp, #56]	@ 0x38
 801561e:	1aed      	subs	r5, r5, r3
 8015620:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015622:	2b00      	cmp	r3, #0
 8015624:	dd16      	ble.n	8015654 <_strtod_l+0x79c>
 8015626:	001a      	movs	r2, r3
 8015628:	9907      	ldr	r1, [sp, #28]
 801562a:	9805      	ldr	r0, [sp, #20]
 801562c:	f7ff f974 	bl	8014918 <__pow5mult>
 8015630:	9007      	str	r0, [sp, #28]
 8015632:	2800      	cmp	r0, #0
 8015634:	d0b3      	beq.n	801559e <_strtod_l+0x6e6>
 8015636:	0001      	movs	r1, r0
 8015638:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801563a:	9805      	ldr	r0, [sp, #20]
 801563c:	f7ff f8ba 	bl	80147b4 <__multiply>
 8015640:	9013      	str	r0, [sp, #76]	@ 0x4c
 8015642:	2800      	cmp	r0, #0
 8015644:	d100      	bne.n	8015648 <_strtod_l+0x790>
 8015646:	e671      	b.n	801532c <_strtod_l+0x474>
 8015648:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801564a:	9805      	ldr	r0, [sp, #20]
 801564c:	f7fe ff96 	bl	801457c <_Bfree>
 8015650:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015652:	931e      	str	r3, [sp, #120]	@ 0x78
 8015654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015656:	2b00      	cmp	r3, #0
 8015658:	dc12      	bgt.n	8015680 <_strtod_l+0x7c8>
 801565a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801565c:	2b00      	cmp	r3, #0
 801565e:	dd18      	ble.n	8015692 <_strtod_l+0x7da>
 8015660:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015662:	9908      	ldr	r1, [sp, #32]
 8015664:	9805      	ldr	r0, [sp, #20]
 8015666:	f7ff f957 	bl	8014918 <__pow5mult>
 801566a:	9008      	str	r0, [sp, #32]
 801566c:	2800      	cmp	r0, #0
 801566e:	d110      	bne.n	8015692 <_strtod_l+0x7da>
 8015670:	2300      	movs	r3, #0
 8015672:	e65a      	b.n	801532a <_strtod_l+0x472>
 8015674:	4954      	ldr	r1, [pc, #336]	@ (80157c8 <_strtod_l+0x910>)
 8015676:	1acb      	subs	r3, r1, r3
 8015678:	0001      	movs	r1, r0
 801567a:	4099      	lsls	r1, r3
 801567c:	9116      	str	r1, [sp, #88]	@ 0x58
 801567e:	e7ba      	b.n	80155f6 <_strtod_l+0x73e>
 8015680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015682:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8015684:	9805      	ldr	r0, [sp, #20]
 8015686:	f7ff f9a3 	bl	80149d0 <__lshift>
 801568a:	901e      	str	r0, [sp, #120]	@ 0x78
 801568c:	2800      	cmp	r0, #0
 801568e:	d1e4      	bne.n	801565a <_strtod_l+0x7a2>
 8015690:	e64c      	b.n	801532c <_strtod_l+0x474>
 8015692:	2c00      	cmp	r4, #0
 8015694:	dd07      	ble.n	80156a6 <_strtod_l+0x7ee>
 8015696:	0022      	movs	r2, r4
 8015698:	9908      	ldr	r1, [sp, #32]
 801569a:	9805      	ldr	r0, [sp, #20]
 801569c:	f7ff f998 	bl	80149d0 <__lshift>
 80156a0:	9008      	str	r0, [sp, #32]
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d0e4      	beq.n	8015670 <_strtod_l+0x7b8>
 80156a6:	2d00      	cmp	r5, #0
 80156a8:	dd08      	ble.n	80156bc <_strtod_l+0x804>
 80156aa:	002a      	movs	r2, r5
 80156ac:	9907      	ldr	r1, [sp, #28]
 80156ae:	9805      	ldr	r0, [sp, #20]
 80156b0:	f7ff f98e 	bl	80149d0 <__lshift>
 80156b4:	9007      	str	r0, [sp, #28]
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d100      	bne.n	80156bc <_strtod_l+0x804>
 80156ba:	e637      	b.n	801532c <_strtod_l+0x474>
 80156bc:	9a08      	ldr	r2, [sp, #32]
 80156be:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80156c0:	9805      	ldr	r0, [sp, #20]
 80156c2:	f7ff fa0d 	bl	8014ae0 <__mdiff>
 80156c6:	9006      	str	r0, [sp, #24]
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d100      	bne.n	80156ce <_strtod_l+0x816>
 80156cc:	e62e      	b.n	801532c <_strtod_l+0x474>
 80156ce:	68c3      	ldr	r3, [r0, #12]
 80156d0:	9907      	ldr	r1, [sp, #28]
 80156d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80156d4:	2300      	movs	r3, #0
 80156d6:	60c3      	str	r3, [r0, #12]
 80156d8:	f7ff f9e6 	bl	8014aa8 <__mcmp>
 80156dc:	2800      	cmp	r0, #0
 80156de:	da3b      	bge.n	8015758 <_strtod_l+0x8a0>
 80156e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80156e2:	4333      	orrs	r3, r6
 80156e4:	d167      	bne.n	80157b6 <_strtod_l+0x8fe>
 80156e6:	033b      	lsls	r3, r7, #12
 80156e8:	d165      	bne.n	80157b6 <_strtod_l+0x8fe>
 80156ea:	22d6      	movs	r2, #214	@ 0xd6
 80156ec:	4b37      	ldr	r3, [pc, #220]	@ (80157cc <_strtod_l+0x914>)
 80156ee:	04d2      	lsls	r2, r2, #19
 80156f0:	403b      	ands	r3, r7
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d95f      	bls.n	80157b6 <_strtod_l+0x8fe>
 80156f6:	9b06      	ldr	r3, [sp, #24]
 80156f8:	695b      	ldr	r3, [r3, #20]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d103      	bne.n	8015706 <_strtod_l+0x84e>
 80156fe:	9b06      	ldr	r3, [sp, #24]
 8015700:	691b      	ldr	r3, [r3, #16]
 8015702:	2b01      	cmp	r3, #1
 8015704:	dd57      	ble.n	80157b6 <_strtod_l+0x8fe>
 8015706:	9906      	ldr	r1, [sp, #24]
 8015708:	2201      	movs	r2, #1
 801570a:	9805      	ldr	r0, [sp, #20]
 801570c:	f7ff f960 	bl	80149d0 <__lshift>
 8015710:	9907      	ldr	r1, [sp, #28]
 8015712:	9006      	str	r0, [sp, #24]
 8015714:	f7ff f9c8 	bl	8014aa8 <__mcmp>
 8015718:	2800      	cmp	r0, #0
 801571a:	dd4c      	ble.n	80157b6 <_strtod_l+0x8fe>
 801571c:	4b2b      	ldr	r3, [pc, #172]	@ (80157cc <_strtod_l+0x914>)
 801571e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015720:	403b      	ands	r3, r7
 8015722:	2a00      	cmp	r2, #0
 8015724:	d074      	beq.n	8015810 <_strtod_l+0x958>
 8015726:	22d6      	movs	r2, #214	@ 0xd6
 8015728:	04d2      	lsls	r2, r2, #19
 801572a:	4293      	cmp	r3, r2
 801572c:	d870      	bhi.n	8015810 <_strtod_l+0x958>
 801572e:	22dc      	movs	r2, #220	@ 0xdc
 8015730:	0492      	lsls	r2, r2, #18
 8015732:	4293      	cmp	r3, r2
 8015734:	d800      	bhi.n	8015738 <_strtod_l+0x880>
 8015736:	e695      	b.n	8015464 <_strtod_l+0x5ac>
 8015738:	0030      	movs	r0, r6
 801573a:	0039      	movs	r1, r7
 801573c:	4b24      	ldr	r3, [pc, #144]	@ (80157d0 <_strtod_l+0x918>)
 801573e:	2200      	movs	r2, #0
 8015740:	f7ec ff1c 	bl	800257c <__aeabi_dmul>
 8015744:	4b21      	ldr	r3, [pc, #132]	@ (80157cc <_strtod_l+0x914>)
 8015746:	0006      	movs	r6, r0
 8015748:	000f      	movs	r7, r1
 801574a:	420b      	tst	r3, r1
 801574c:	d000      	beq.n	8015750 <_strtod_l+0x898>
 801574e:	e5f6      	b.n	801533e <_strtod_l+0x486>
 8015750:	2322      	movs	r3, #34	@ 0x22
 8015752:	9a05      	ldr	r2, [sp, #20]
 8015754:	6013      	str	r3, [r2, #0]
 8015756:	e5f2      	b.n	801533e <_strtod_l+0x486>
 8015758:	970e      	str	r7, [sp, #56]	@ 0x38
 801575a:	2800      	cmp	r0, #0
 801575c:	d175      	bne.n	801584a <_strtod_l+0x992>
 801575e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015760:	033b      	lsls	r3, r7, #12
 8015762:	0b1b      	lsrs	r3, r3, #12
 8015764:	2a00      	cmp	r2, #0
 8015766:	d039      	beq.n	80157dc <_strtod_l+0x924>
 8015768:	4a1a      	ldr	r2, [pc, #104]	@ (80157d4 <_strtod_l+0x91c>)
 801576a:	4293      	cmp	r3, r2
 801576c:	d138      	bne.n	80157e0 <_strtod_l+0x928>
 801576e:	2101      	movs	r1, #1
 8015770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015772:	4249      	negs	r1, r1
 8015774:	0032      	movs	r2, r6
 8015776:	0008      	movs	r0, r1
 8015778:	2b00      	cmp	r3, #0
 801577a:	d00b      	beq.n	8015794 <_strtod_l+0x8dc>
 801577c:	24d4      	movs	r4, #212	@ 0xd4
 801577e:	4b13      	ldr	r3, [pc, #76]	@ (80157cc <_strtod_l+0x914>)
 8015780:	0008      	movs	r0, r1
 8015782:	403b      	ands	r3, r7
 8015784:	04e4      	lsls	r4, r4, #19
 8015786:	42a3      	cmp	r3, r4
 8015788:	d804      	bhi.n	8015794 <_strtod_l+0x8dc>
 801578a:	306c      	adds	r0, #108	@ 0x6c
 801578c:	0d1b      	lsrs	r3, r3, #20
 801578e:	1ac3      	subs	r3, r0, r3
 8015790:	4099      	lsls	r1, r3
 8015792:	0008      	movs	r0, r1
 8015794:	4282      	cmp	r2, r0
 8015796:	d123      	bne.n	80157e0 <_strtod_l+0x928>
 8015798:	4b0f      	ldr	r3, [pc, #60]	@ (80157d8 <_strtod_l+0x920>)
 801579a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801579c:	4299      	cmp	r1, r3
 801579e:	d102      	bne.n	80157a6 <_strtod_l+0x8ee>
 80157a0:	3201      	adds	r2, #1
 80157a2:	d100      	bne.n	80157a6 <_strtod_l+0x8ee>
 80157a4:	e5c2      	b.n	801532c <_strtod_l+0x474>
 80157a6:	4b09      	ldr	r3, [pc, #36]	@ (80157cc <_strtod_l+0x914>)
 80157a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80157aa:	2600      	movs	r6, #0
 80157ac:	401a      	ands	r2, r3
 80157ae:	0013      	movs	r3, r2
 80157b0:	2280      	movs	r2, #128	@ 0x80
 80157b2:	0352      	lsls	r2, r2, #13
 80157b4:	189f      	adds	r7, r3, r2
 80157b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d1bd      	bne.n	8015738 <_strtod_l+0x880>
 80157bc:	e5bf      	b.n	801533e <_strtod_l+0x486>
 80157be:	46c0      	nop			@ (mov r8, r8)
 80157c0:	08017918 	.word	0x08017918
 80157c4:	fffffc02 	.word	0xfffffc02
 80157c8:	fffffbe2 	.word	0xfffffbe2
 80157cc:	7ff00000 	.word	0x7ff00000
 80157d0:	39500000 	.word	0x39500000
 80157d4:	000fffff 	.word	0x000fffff
 80157d8:	7fefffff 	.word	0x7fefffff
 80157dc:	4333      	orrs	r3, r6
 80157de:	d09d      	beq.n	801571c <_strtod_l+0x864>
 80157e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d01c      	beq.n	8015820 <_strtod_l+0x968>
 80157e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80157ea:	4213      	tst	r3, r2
 80157ec:	d0e3      	beq.n	80157b6 <_strtod_l+0x8fe>
 80157ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80157f0:	0030      	movs	r0, r6
 80157f2:	0039      	movs	r1, r7
 80157f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d016      	beq.n	8015828 <_strtod_l+0x970>
 80157fa:	f7ff fb45 	bl	8014e88 <sulp>
 80157fe:	0002      	movs	r2, r0
 8015800:	000b      	movs	r3, r1
 8015802:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015804:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015806:	f7eb ff11 	bl	800162c <__aeabi_dadd>
 801580a:	0006      	movs	r6, r0
 801580c:	000f      	movs	r7, r1
 801580e:	e7d2      	b.n	80157b6 <_strtod_l+0x8fe>
 8015810:	2601      	movs	r6, #1
 8015812:	4a92      	ldr	r2, [pc, #584]	@ (8015a5c <_strtod_l+0xba4>)
 8015814:	4276      	negs	r6, r6
 8015816:	189b      	adds	r3, r3, r2
 8015818:	4a91      	ldr	r2, [pc, #580]	@ (8015a60 <_strtod_l+0xba8>)
 801581a:	431a      	orrs	r2, r3
 801581c:	0017      	movs	r7, r2
 801581e:	e7ca      	b.n	80157b6 <_strtod_l+0x8fe>
 8015820:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015822:	4233      	tst	r3, r6
 8015824:	d0c7      	beq.n	80157b6 <_strtod_l+0x8fe>
 8015826:	e7e2      	b.n	80157ee <_strtod_l+0x936>
 8015828:	f7ff fb2e 	bl	8014e88 <sulp>
 801582c:	0002      	movs	r2, r0
 801582e:	000b      	movs	r3, r1
 8015830:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015832:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015834:	f7ed f96a 	bl	8002b0c <__aeabi_dsub>
 8015838:	2200      	movs	r2, #0
 801583a:	2300      	movs	r3, #0
 801583c:	0006      	movs	r6, r0
 801583e:	000f      	movs	r7, r1
 8015840:	f7ea fe04 	bl	800044c <__aeabi_dcmpeq>
 8015844:	2800      	cmp	r0, #0
 8015846:	d0b6      	beq.n	80157b6 <_strtod_l+0x8fe>
 8015848:	e60c      	b.n	8015464 <_strtod_l+0x5ac>
 801584a:	9907      	ldr	r1, [sp, #28]
 801584c:	9806      	ldr	r0, [sp, #24]
 801584e:	f7ff faad 	bl	8014dac <__ratio>
 8015852:	2380      	movs	r3, #128	@ 0x80
 8015854:	2200      	movs	r2, #0
 8015856:	05db      	lsls	r3, r3, #23
 8015858:	0004      	movs	r4, r0
 801585a:	000d      	movs	r5, r1
 801585c:	f7ea fe06 	bl	800046c <__aeabi_dcmple>
 8015860:	2800      	cmp	r0, #0
 8015862:	d06c      	beq.n	801593e <_strtod_l+0xa86>
 8015864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015866:	2b00      	cmp	r3, #0
 8015868:	d177      	bne.n	801595a <_strtod_l+0xaa2>
 801586a:	2e00      	cmp	r6, #0
 801586c:	d157      	bne.n	801591e <_strtod_l+0xa66>
 801586e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015870:	031b      	lsls	r3, r3, #12
 8015872:	d15a      	bne.n	801592a <_strtod_l+0xa72>
 8015874:	2200      	movs	r2, #0
 8015876:	0020      	movs	r0, r4
 8015878:	0029      	movs	r1, r5
 801587a:	4b7a      	ldr	r3, [pc, #488]	@ (8015a64 <_strtod_l+0xbac>)
 801587c:	f7ea fdec 	bl	8000458 <__aeabi_dcmplt>
 8015880:	2800      	cmp	r0, #0
 8015882:	d159      	bne.n	8015938 <_strtod_l+0xa80>
 8015884:	0020      	movs	r0, r4
 8015886:	0029      	movs	r1, r5
 8015888:	2200      	movs	r2, #0
 801588a:	4b77      	ldr	r3, [pc, #476]	@ (8015a68 <_strtod_l+0xbb0>)
 801588c:	f7ec fe76 	bl	800257c <__aeabi_dmul>
 8015890:	0004      	movs	r4, r0
 8015892:	000d      	movs	r5, r1
 8015894:	2380      	movs	r3, #128	@ 0x80
 8015896:	061b      	lsls	r3, r3, #24
 8015898:	18eb      	adds	r3, r5, r3
 801589a:	940a      	str	r4, [sp, #40]	@ 0x28
 801589c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801589e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80158a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80158a2:	9214      	str	r2, [sp, #80]	@ 0x50
 80158a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80158a6:	4a71      	ldr	r2, [pc, #452]	@ (8015a6c <_strtod_l+0xbb4>)
 80158a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158aa:	4013      	ands	r3, r2
 80158ac:	9316      	str	r3, [sp, #88]	@ 0x58
 80158ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80158b0:	4b6f      	ldr	r3, [pc, #444]	@ (8015a70 <_strtod_l+0xbb8>)
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d000      	beq.n	80158b8 <_strtod_l+0xa00>
 80158b6:	e087      	b.n	80159c8 <_strtod_l+0xb10>
 80158b8:	4a6e      	ldr	r2, [pc, #440]	@ (8015a74 <_strtod_l+0xbbc>)
 80158ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158bc:	4694      	mov	ip, r2
 80158be:	4463      	add	r3, ip
 80158c0:	001f      	movs	r7, r3
 80158c2:	0030      	movs	r0, r6
 80158c4:	0019      	movs	r1, r3
 80158c6:	f7ff f9a5 	bl	8014c14 <__ulp>
 80158ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80158cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80158ce:	f7ec fe55 	bl	800257c <__aeabi_dmul>
 80158d2:	0032      	movs	r2, r6
 80158d4:	003b      	movs	r3, r7
 80158d6:	f7eb fea9 	bl	800162c <__aeabi_dadd>
 80158da:	4a64      	ldr	r2, [pc, #400]	@ (8015a6c <_strtod_l+0xbb4>)
 80158dc:	4b66      	ldr	r3, [pc, #408]	@ (8015a78 <_strtod_l+0xbc0>)
 80158de:	0006      	movs	r6, r0
 80158e0:	400a      	ands	r2, r1
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d940      	bls.n	8015968 <_strtod_l+0xab0>
 80158e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80158e8:	4a64      	ldr	r2, [pc, #400]	@ (8015a7c <_strtod_l+0xbc4>)
 80158ea:	4293      	cmp	r3, r2
 80158ec:	d103      	bne.n	80158f6 <_strtod_l+0xa3e>
 80158ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80158f0:	3301      	adds	r3, #1
 80158f2:	d100      	bne.n	80158f6 <_strtod_l+0xa3e>
 80158f4:	e51a      	b.n	801532c <_strtod_l+0x474>
 80158f6:	2601      	movs	r6, #1
 80158f8:	4f60      	ldr	r7, [pc, #384]	@ (8015a7c <_strtod_l+0xbc4>)
 80158fa:	4276      	negs	r6, r6
 80158fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80158fe:	9805      	ldr	r0, [sp, #20]
 8015900:	f7fe fe3c 	bl	801457c <_Bfree>
 8015904:	9908      	ldr	r1, [sp, #32]
 8015906:	9805      	ldr	r0, [sp, #20]
 8015908:	f7fe fe38 	bl	801457c <_Bfree>
 801590c:	9907      	ldr	r1, [sp, #28]
 801590e:	9805      	ldr	r0, [sp, #20]
 8015910:	f7fe fe34 	bl	801457c <_Bfree>
 8015914:	9906      	ldr	r1, [sp, #24]
 8015916:	9805      	ldr	r0, [sp, #20]
 8015918:	f7fe fe30 	bl	801457c <_Bfree>
 801591c:	e617      	b.n	801554e <_strtod_l+0x696>
 801591e:	2e01      	cmp	r6, #1
 8015920:	d103      	bne.n	801592a <_strtod_l+0xa72>
 8015922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015924:	2b00      	cmp	r3, #0
 8015926:	d100      	bne.n	801592a <_strtod_l+0xa72>
 8015928:	e59c      	b.n	8015464 <_strtod_l+0x5ac>
 801592a:	2300      	movs	r3, #0
 801592c:	4c54      	ldr	r4, [pc, #336]	@ (8015a80 <_strtod_l+0xbc8>)
 801592e:	4d4d      	ldr	r5, [pc, #308]	@ (8015a64 <_strtod_l+0xbac>)
 8015930:	930a      	str	r3, [sp, #40]	@ 0x28
 8015932:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015934:	2400      	movs	r4, #0
 8015936:	e7b2      	b.n	801589e <_strtod_l+0x9e6>
 8015938:	2400      	movs	r4, #0
 801593a:	4d4b      	ldr	r5, [pc, #300]	@ (8015a68 <_strtod_l+0xbb0>)
 801593c:	e7aa      	b.n	8015894 <_strtod_l+0x9dc>
 801593e:	0020      	movs	r0, r4
 8015940:	0029      	movs	r1, r5
 8015942:	4b49      	ldr	r3, [pc, #292]	@ (8015a68 <_strtod_l+0xbb0>)
 8015944:	2200      	movs	r2, #0
 8015946:	f7ec fe19 	bl	800257c <__aeabi_dmul>
 801594a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801594c:	0004      	movs	r4, r0
 801594e:	000d      	movs	r5, r1
 8015950:	2b00      	cmp	r3, #0
 8015952:	d09f      	beq.n	8015894 <_strtod_l+0x9dc>
 8015954:	940a      	str	r4, [sp, #40]	@ 0x28
 8015956:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015958:	e7a1      	b.n	801589e <_strtod_l+0x9e6>
 801595a:	2300      	movs	r3, #0
 801595c:	4c41      	ldr	r4, [pc, #260]	@ (8015a64 <_strtod_l+0xbac>)
 801595e:	0025      	movs	r5, r4
 8015960:	930a      	str	r3, [sp, #40]	@ 0x28
 8015962:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015964:	001c      	movs	r4, r3
 8015966:	e79a      	b.n	801589e <_strtod_l+0x9e6>
 8015968:	23d4      	movs	r3, #212	@ 0xd4
 801596a:	049b      	lsls	r3, r3, #18
 801596c:	18cf      	adds	r7, r1, r3
 801596e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015970:	9710      	str	r7, [sp, #64]	@ 0x40
 8015972:	2b00      	cmp	r3, #0
 8015974:	d1c2      	bne.n	80158fc <_strtod_l+0xa44>
 8015976:	4b3d      	ldr	r3, [pc, #244]	@ (8015a6c <_strtod_l+0xbb4>)
 8015978:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801597a:	403b      	ands	r3, r7
 801597c:	429a      	cmp	r2, r3
 801597e:	d1bd      	bne.n	80158fc <_strtod_l+0xa44>
 8015980:	0020      	movs	r0, r4
 8015982:	0029      	movs	r1, r5
 8015984:	f7ea fe20 	bl	80005c8 <__aeabi_d2lz>
 8015988:	f7ea fe58 	bl	800063c <__aeabi_l2d>
 801598c:	0002      	movs	r2, r0
 801598e:	000b      	movs	r3, r1
 8015990:	0020      	movs	r0, r4
 8015992:	0029      	movs	r1, r5
 8015994:	f7ed f8ba 	bl	8002b0c <__aeabi_dsub>
 8015998:	033c      	lsls	r4, r7, #12
 801599a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801599c:	0b24      	lsrs	r4, r4, #12
 801599e:	4334      	orrs	r4, r6
 80159a0:	900e      	str	r0, [sp, #56]	@ 0x38
 80159a2:	910f      	str	r1, [sp, #60]	@ 0x3c
 80159a4:	4a37      	ldr	r2, [pc, #220]	@ (8015a84 <_strtod_l+0xbcc>)
 80159a6:	431c      	orrs	r4, r3
 80159a8:	d052      	beq.n	8015a50 <_strtod_l+0xb98>
 80159aa:	4b37      	ldr	r3, [pc, #220]	@ (8015a88 <_strtod_l+0xbd0>)
 80159ac:	f7ea fd54 	bl	8000458 <__aeabi_dcmplt>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d000      	beq.n	80159b6 <_strtod_l+0xafe>
 80159b4:	e4c3      	b.n	801533e <_strtod_l+0x486>
 80159b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80159b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80159ba:	4a34      	ldr	r2, [pc, #208]	@ (8015a8c <_strtod_l+0xbd4>)
 80159bc:	4b2a      	ldr	r3, [pc, #168]	@ (8015a68 <_strtod_l+0xbb0>)
 80159be:	f7ea fd5f 	bl	8000480 <__aeabi_dcmpgt>
 80159c2:	2800      	cmp	r0, #0
 80159c4:	d09a      	beq.n	80158fc <_strtod_l+0xa44>
 80159c6:	e4ba      	b.n	801533e <_strtod_l+0x486>
 80159c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d02a      	beq.n	8015a24 <_strtod_l+0xb6c>
 80159ce:	23d4      	movs	r3, #212	@ 0xd4
 80159d0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80159d2:	04db      	lsls	r3, r3, #19
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d825      	bhi.n	8015a24 <_strtod_l+0xb6c>
 80159d8:	0020      	movs	r0, r4
 80159da:	0029      	movs	r1, r5
 80159dc:	4a2c      	ldr	r2, [pc, #176]	@ (8015a90 <_strtod_l+0xbd8>)
 80159de:	4b2d      	ldr	r3, [pc, #180]	@ (8015a94 <_strtod_l+0xbdc>)
 80159e0:	f7ea fd44 	bl	800046c <__aeabi_dcmple>
 80159e4:	2800      	cmp	r0, #0
 80159e6:	d016      	beq.n	8015a16 <_strtod_l+0xb5e>
 80159e8:	0020      	movs	r0, r4
 80159ea:	0029      	movs	r1, r5
 80159ec:	f7ea fdce 	bl	800058c <__aeabi_d2uiz>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d100      	bne.n	80159f6 <_strtod_l+0xb3e>
 80159f4:	3001      	adds	r0, #1
 80159f6:	f7ed fcb1 	bl	800335c <__aeabi_ui2d>
 80159fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80159fc:	0004      	movs	r4, r0
 80159fe:	000d      	movs	r5, r1
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d122      	bne.n	8015a4a <_strtod_l+0xb92>
 8015a04:	2380      	movs	r3, #128	@ 0x80
 8015a06:	061b      	lsls	r3, r3, #24
 8015a08:	18cb      	adds	r3, r1, r3
 8015a0a:	9018      	str	r0, [sp, #96]	@ 0x60
 8015a0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8015a0e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015a12:	9214      	str	r2, [sp, #80]	@ 0x50
 8015a14:	9315      	str	r3, [sp, #84]	@ 0x54
 8015a16:	22d6      	movs	r2, #214	@ 0xd6
 8015a18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015a1a:	04d2      	lsls	r2, r2, #19
 8015a1c:	189b      	adds	r3, r3, r2
 8015a1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015a20:	1a9b      	subs	r3, r3, r2
 8015a22:	9315      	str	r3, [sp, #84]	@ 0x54
 8015a24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015a26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015a28:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015a2a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015a2c:	f7ff f8f2 	bl	8014c14 <__ulp>
 8015a30:	0002      	movs	r2, r0
 8015a32:	000b      	movs	r3, r1
 8015a34:	0030      	movs	r0, r6
 8015a36:	0039      	movs	r1, r7
 8015a38:	f7ec fda0 	bl	800257c <__aeabi_dmul>
 8015a3c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015a3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a40:	f7eb fdf4 	bl	800162c <__aeabi_dadd>
 8015a44:	0006      	movs	r6, r0
 8015a46:	000f      	movs	r7, r1
 8015a48:	e791      	b.n	801596e <_strtod_l+0xab6>
 8015a4a:	9418      	str	r4, [sp, #96]	@ 0x60
 8015a4c:	9519      	str	r5, [sp, #100]	@ 0x64
 8015a4e:	e7de      	b.n	8015a0e <_strtod_l+0xb56>
 8015a50:	4b11      	ldr	r3, [pc, #68]	@ (8015a98 <_strtod_l+0xbe0>)
 8015a52:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015a54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015a56:	f7ea fcff 	bl	8000458 <__aeabi_dcmplt>
 8015a5a:	e7b2      	b.n	80159c2 <_strtod_l+0xb0a>
 8015a5c:	fff00000 	.word	0xfff00000
 8015a60:	000fffff 	.word	0x000fffff
 8015a64:	3ff00000 	.word	0x3ff00000
 8015a68:	3fe00000 	.word	0x3fe00000
 8015a6c:	7ff00000 	.word	0x7ff00000
 8015a70:	7fe00000 	.word	0x7fe00000
 8015a74:	fcb00000 	.word	0xfcb00000
 8015a78:	7c9fffff 	.word	0x7c9fffff
 8015a7c:	7fefffff 	.word	0x7fefffff
 8015a80:	bff00000 	.word	0xbff00000
 8015a84:	94a03595 	.word	0x94a03595
 8015a88:	3fdfffff 	.word	0x3fdfffff
 8015a8c:	35afe535 	.word	0x35afe535
 8015a90:	ffc00000 	.word	0xffc00000
 8015a94:	41dfffff 	.word	0x41dfffff
 8015a98:	3fcfffff 	.word	0x3fcfffff

08015a9c <_strtod_r>:
 8015a9c:	b510      	push	{r4, lr}
 8015a9e:	4b02      	ldr	r3, [pc, #8]	@ (8015aa8 <_strtod_r+0xc>)
 8015aa0:	f7ff fa0a 	bl	8014eb8 <_strtod_l>
 8015aa4:	bd10      	pop	{r4, pc}
 8015aa6:	46c0      	nop			@ (mov r8, r8)
 8015aa8:	200000e4 	.word	0x200000e4

08015aac <_strtol_l.constprop.0>:
 8015aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	0017      	movs	r7, r2
 8015ab2:	001e      	movs	r6, r3
 8015ab4:	9003      	str	r0, [sp, #12]
 8015ab6:	9101      	str	r1, [sp, #4]
 8015ab8:	2b24      	cmp	r3, #36	@ 0x24
 8015aba:	d844      	bhi.n	8015b46 <_strtol_l.constprop.0+0x9a>
 8015abc:	000c      	movs	r4, r1
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d041      	beq.n	8015b46 <_strtol_l.constprop.0+0x9a>
 8015ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8015bb8 <_strtol_l.constprop.0+0x10c>)
 8015ac4:	2208      	movs	r2, #8
 8015ac6:	469c      	mov	ip, r3
 8015ac8:	0023      	movs	r3, r4
 8015aca:	4661      	mov	r1, ip
 8015acc:	781d      	ldrb	r5, [r3, #0]
 8015ace:	3401      	adds	r4, #1
 8015ad0:	5d48      	ldrb	r0, [r1, r5]
 8015ad2:	0001      	movs	r1, r0
 8015ad4:	4011      	ands	r1, r2
 8015ad6:	4210      	tst	r0, r2
 8015ad8:	d1f6      	bne.n	8015ac8 <_strtol_l.constprop.0+0x1c>
 8015ada:	2d2d      	cmp	r5, #45	@ 0x2d
 8015adc:	d13a      	bne.n	8015b54 <_strtol_l.constprop.0+0xa8>
 8015ade:	7825      	ldrb	r5, [r4, #0]
 8015ae0:	1c9c      	adds	r4, r3, #2
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	9300      	str	r3, [sp, #0]
 8015ae6:	2210      	movs	r2, #16
 8015ae8:	0033      	movs	r3, r6
 8015aea:	4393      	bics	r3, r2
 8015aec:	d109      	bne.n	8015b02 <_strtol_l.constprop.0+0x56>
 8015aee:	2d30      	cmp	r5, #48	@ 0x30
 8015af0:	d136      	bne.n	8015b60 <_strtol_l.constprop.0+0xb4>
 8015af2:	2120      	movs	r1, #32
 8015af4:	7823      	ldrb	r3, [r4, #0]
 8015af6:	438b      	bics	r3, r1
 8015af8:	2b58      	cmp	r3, #88	@ 0x58
 8015afa:	d131      	bne.n	8015b60 <_strtol_l.constprop.0+0xb4>
 8015afc:	0016      	movs	r6, r2
 8015afe:	7865      	ldrb	r5, [r4, #1]
 8015b00:	3402      	adds	r4, #2
 8015b02:	4a2e      	ldr	r2, [pc, #184]	@ (8015bbc <_strtol_l.constprop.0+0x110>)
 8015b04:	9b00      	ldr	r3, [sp, #0]
 8015b06:	4694      	mov	ip, r2
 8015b08:	4463      	add	r3, ip
 8015b0a:	0031      	movs	r1, r6
 8015b0c:	0018      	movs	r0, r3
 8015b0e:	9302      	str	r3, [sp, #8]
 8015b10:	f7ea fb9c 	bl	800024c <__aeabi_uidivmod>
 8015b14:	2200      	movs	r2, #0
 8015b16:	4684      	mov	ip, r0
 8015b18:	0010      	movs	r0, r2
 8015b1a:	002b      	movs	r3, r5
 8015b1c:	3b30      	subs	r3, #48	@ 0x30
 8015b1e:	2b09      	cmp	r3, #9
 8015b20:	d825      	bhi.n	8015b6e <_strtol_l.constprop.0+0xc2>
 8015b22:	001d      	movs	r5, r3
 8015b24:	42ae      	cmp	r6, r5
 8015b26:	dd31      	ble.n	8015b8c <_strtol_l.constprop.0+0xe0>
 8015b28:	1c53      	adds	r3, r2, #1
 8015b2a:	d009      	beq.n	8015b40 <_strtol_l.constprop.0+0x94>
 8015b2c:	2201      	movs	r2, #1
 8015b2e:	4252      	negs	r2, r2
 8015b30:	4584      	cmp	ip, r0
 8015b32:	d305      	bcc.n	8015b40 <_strtol_l.constprop.0+0x94>
 8015b34:	d101      	bne.n	8015b3a <_strtol_l.constprop.0+0x8e>
 8015b36:	42a9      	cmp	r1, r5
 8015b38:	db25      	blt.n	8015b86 <_strtol_l.constprop.0+0xda>
 8015b3a:	2201      	movs	r2, #1
 8015b3c:	4370      	muls	r0, r6
 8015b3e:	1828      	adds	r0, r5, r0
 8015b40:	7825      	ldrb	r5, [r4, #0]
 8015b42:	3401      	adds	r4, #1
 8015b44:	e7e9      	b.n	8015b1a <_strtol_l.constprop.0+0x6e>
 8015b46:	f7fd fd0b 	bl	8013560 <__errno>
 8015b4a:	2316      	movs	r3, #22
 8015b4c:	6003      	str	r3, [r0, #0]
 8015b4e:	2000      	movs	r0, #0
 8015b50:	b005      	add	sp, #20
 8015b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b54:	9100      	str	r1, [sp, #0]
 8015b56:	2d2b      	cmp	r5, #43	@ 0x2b
 8015b58:	d1c5      	bne.n	8015ae6 <_strtol_l.constprop.0+0x3a>
 8015b5a:	7825      	ldrb	r5, [r4, #0]
 8015b5c:	1c9c      	adds	r4, r3, #2
 8015b5e:	e7c2      	b.n	8015ae6 <_strtol_l.constprop.0+0x3a>
 8015b60:	2e00      	cmp	r6, #0
 8015b62:	d1ce      	bne.n	8015b02 <_strtol_l.constprop.0+0x56>
 8015b64:	3608      	adds	r6, #8
 8015b66:	2d30      	cmp	r5, #48	@ 0x30
 8015b68:	d0cb      	beq.n	8015b02 <_strtol_l.constprop.0+0x56>
 8015b6a:	3602      	adds	r6, #2
 8015b6c:	e7c9      	b.n	8015b02 <_strtol_l.constprop.0+0x56>
 8015b6e:	002b      	movs	r3, r5
 8015b70:	3b41      	subs	r3, #65	@ 0x41
 8015b72:	2b19      	cmp	r3, #25
 8015b74:	d801      	bhi.n	8015b7a <_strtol_l.constprop.0+0xce>
 8015b76:	3d37      	subs	r5, #55	@ 0x37
 8015b78:	e7d4      	b.n	8015b24 <_strtol_l.constprop.0+0x78>
 8015b7a:	002b      	movs	r3, r5
 8015b7c:	3b61      	subs	r3, #97	@ 0x61
 8015b7e:	2b19      	cmp	r3, #25
 8015b80:	d804      	bhi.n	8015b8c <_strtol_l.constprop.0+0xe0>
 8015b82:	3d57      	subs	r5, #87	@ 0x57
 8015b84:	e7ce      	b.n	8015b24 <_strtol_l.constprop.0+0x78>
 8015b86:	2201      	movs	r2, #1
 8015b88:	4252      	negs	r2, r2
 8015b8a:	e7d9      	b.n	8015b40 <_strtol_l.constprop.0+0x94>
 8015b8c:	1c53      	adds	r3, r2, #1
 8015b8e:	d108      	bne.n	8015ba2 <_strtol_l.constprop.0+0xf6>
 8015b90:	2322      	movs	r3, #34	@ 0x22
 8015b92:	9a03      	ldr	r2, [sp, #12]
 8015b94:	9802      	ldr	r0, [sp, #8]
 8015b96:	6013      	str	r3, [r2, #0]
 8015b98:	2f00      	cmp	r7, #0
 8015b9a:	d0d9      	beq.n	8015b50 <_strtol_l.constprop.0+0xa4>
 8015b9c:	1e63      	subs	r3, r4, #1
 8015b9e:	9301      	str	r3, [sp, #4]
 8015ba0:	e007      	b.n	8015bb2 <_strtol_l.constprop.0+0x106>
 8015ba2:	9b00      	ldr	r3, [sp, #0]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d000      	beq.n	8015baa <_strtol_l.constprop.0+0xfe>
 8015ba8:	4240      	negs	r0, r0
 8015baa:	2f00      	cmp	r7, #0
 8015bac:	d0d0      	beq.n	8015b50 <_strtol_l.constprop.0+0xa4>
 8015bae:	2a00      	cmp	r2, #0
 8015bb0:	d1f4      	bne.n	8015b9c <_strtol_l.constprop.0+0xf0>
 8015bb2:	9b01      	ldr	r3, [sp, #4]
 8015bb4:	603b      	str	r3, [r7, #0]
 8015bb6:	e7cb      	b.n	8015b50 <_strtol_l.constprop.0+0xa4>
 8015bb8:	08017941 	.word	0x08017941
 8015bbc:	7fffffff 	.word	0x7fffffff

08015bc0 <_strtol_r>:
 8015bc0:	b510      	push	{r4, lr}
 8015bc2:	f7ff ff73 	bl	8015aac <_strtol_l.constprop.0>
 8015bc6:	bd10      	pop	{r4, pc}

08015bc8 <__ssputs_r>:
 8015bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bca:	688e      	ldr	r6, [r1, #8]
 8015bcc:	b085      	sub	sp, #20
 8015bce:	001f      	movs	r7, r3
 8015bd0:	000c      	movs	r4, r1
 8015bd2:	680b      	ldr	r3, [r1, #0]
 8015bd4:	9002      	str	r0, [sp, #8]
 8015bd6:	9203      	str	r2, [sp, #12]
 8015bd8:	42be      	cmp	r6, r7
 8015bda:	d830      	bhi.n	8015c3e <__ssputs_r+0x76>
 8015bdc:	210c      	movs	r1, #12
 8015bde:	5e62      	ldrsh	r2, [r4, r1]
 8015be0:	2190      	movs	r1, #144	@ 0x90
 8015be2:	00c9      	lsls	r1, r1, #3
 8015be4:	420a      	tst	r2, r1
 8015be6:	d028      	beq.n	8015c3a <__ssputs_r+0x72>
 8015be8:	2003      	movs	r0, #3
 8015bea:	6921      	ldr	r1, [r4, #16]
 8015bec:	1a5b      	subs	r3, r3, r1
 8015bee:	9301      	str	r3, [sp, #4]
 8015bf0:	6963      	ldr	r3, [r4, #20]
 8015bf2:	4343      	muls	r3, r0
 8015bf4:	9801      	ldr	r0, [sp, #4]
 8015bf6:	0fdd      	lsrs	r5, r3, #31
 8015bf8:	18ed      	adds	r5, r5, r3
 8015bfa:	1c7b      	adds	r3, r7, #1
 8015bfc:	181b      	adds	r3, r3, r0
 8015bfe:	106d      	asrs	r5, r5, #1
 8015c00:	42ab      	cmp	r3, r5
 8015c02:	d900      	bls.n	8015c06 <__ssputs_r+0x3e>
 8015c04:	001d      	movs	r5, r3
 8015c06:	0552      	lsls	r2, r2, #21
 8015c08:	d528      	bpl.n	8015c5c <__ssputs_r+0x94>
 8015c0a:	0029      	movs	r1, r5
 8015c0c:	9802      	ldr	r0, [sp, #8]
 8015c0e:	f7fe fbe1 	bl	80143d4 <_malloc_r>
 8015c12:	1e06      	subs	r6, r0, #0
 8015c14:	d02c      	beq.n	8015c70 <__ssputs_r+0xa8>
 8015c16:	9a01      	ldr	r2, [sp, #4]
 8015c18:	6921      	ldr	r1, [r4, #16]
 8015c1a:	f7fd fcd9 	bl	80135d0 <memcpy>
 8015c1e:	89a2      	ldrh	r2, [r4, #12]
 8015c20:	4b18      	ldr	r3, [pc, #96]	@ (8015c84 <__ssputs_r+0xbc>)
 8015c22:	401a      	ands	r2, r3
 8015c24:	2380      	movs	r3, #128	@ 0x80
 8015c26:	4313      	orrs	r3, r2
 8015c28:	81a3      	strh	r3, [r4, #12]
 8015c2a:	9b01      	ldr	r3, [sp, #4]
 8015c2c:	6126      	str	r6, [r4, #16]
 8015c2e:	18f6      	adds	r6, r6, r3
 8015c30:	6026      	str	r6, [r4, #0]
 8015c32:	003e      	movs	r6, r7
 8015c34:	6165      	str	r5, [r4, #20]
 8015c36:	1aed      	subs	r5, r5, r3
 8015c38:	60a5      	str	r5, [r4, #8]
 8015c3a:	42be      	cmp	r6, r7
 8015c3c:	d900      	bls.n	8015c40 <__ssputs_r+0x78>
 8015c3e:	003e      	movs	r6, r7
 8015c40:	0032      	movs	r2, r6
 8015c42:	9903      	ldr	r1, [sp, #12]
 8015c44:	6820      	ldr	r0, [r4, #0]
 8015c46:	f000 f9ce 	bl	8015fe6 <memmove>
 8015c4a:	2000      	movs	r0, #0
 8015c4c:	68a3      	ldr	r3, [r4, #8]
 8015c4e:	1b9b      	subs	r3, r3, r6
 8015c50:	60a3      	str	r3, [r4, #8]
 8015c52:	6823      	ldr	r3, [r4, #0]
 8015c54:	199b      	adds	r3, r3, r6
 8015c56:	6023      	str	r3, [r4, #0]
 8015c58:	b005      	add	sp, #20
 8015c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c5c:	002a      	movs	r2, r5
 8015c5e:	9802      	ldr	r0, [sp, #8]
 8015c60:	f000 fdb6 	bl	80167d0 <_realloc_r>
 8015c64:	1e06      	subs	r6, r0, #0
 8015c66:	d1e0      	bne.n	8015c2a <__ssputs_r+0x62>
 8015c68:	6921      	ldr	r1, [r4, #16]
 8015c6a:	9802      	ldr	r0, [sp, #8]
 8015c6c:	f7fe fb3c 	bl	80142e8 <_free_r>
 8015c70:	230c      	movs	r3, #12
 8015c72:	2001      	movs	r0, #1
 8015c74:	9a02      	ldr	r2, [sp, #8]
 8015c76:	4240      	negs	r0, r0
 8015c78:	6013      	str	r3, [r2, #0]
 8015c7a:	89a2      	ldrh	r2, [r4, #12]
 8015c7c:	3334      	adds	r3, #52	@ 0x34
 8015c7e:	4313      	orrs	r3, r2
 8015c80:	81a3      	strh	r3, [r4, #12]
 8015c82:	e7e9      	b.n	8015c58 <__ssputs_r+0x90>
 8015c84:	fffffb7f 	.word	0xfffffb7f

08015c88 <_svfiprintf_r>:
 8015c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8a:	b0a1      	sub	sp, #132	@ 0x84
 8015c8c:	9003      	str	r0, [sp, #12]
 8015c8e:	001d      	movs	r5, r3
 8015c90:	898b      	ldrh	r3, [r1, #12]
 8015c92:	000f      	movs	r7, r1
 8015c94:	0016      	movs	r6, r2
 8015c96:	061b      	lsls	r3, r3, #24
 8015c98:	d511      	bpl.n	8015cbe <_svfiprintf_r+0x36>
 8015c9a:	690b      	ldr	r3, [r1, #16]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d10e      	bne.n	8015cbe <_svfiprintf_r+0x36>
 8015ca0:	2140      	movs	r1, #64	@ 0x40
 8015ca2:	f7fe fb97 	bl	80143d4 <_malloc_r>
 8015ca6:	6038      	str	r0, [r7, #0]
 8015ca8:	6138      	str	r0, [r7, #16]
 8015caa:	2800      	cmp	r0, #0
 8015cac:	d105      	bne.n	8015cba <_svfiprintf_r+0x32>
 8015cae:	230c      	movs	r3, #12
 8015cb0:	9a03      	ldr	r2, [sp, #12]
 8015cb2:	6013      	str	r3, [r2, #0]
 8015cb4:	2001      	movs	r0, #1
 8015cb6:	4240      	negs	r0, r0
 8015cb8:	e0cf      	b.n	8015e5a <_svfiprintf_r+0x1d2>
 8015cba:	2340      	movs	r3, #64	@ 0x40
 8015cbc:	617b      	str	r3, [r7, #20]
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	ac08      	add	r4, sp, #32
 8015cc2:	6163      	str	r3, [r4, #20]
 8015cc4:	3320      	adds	r3, #32
 8015cc6:	7663      	strb	r3, [r4, #25]
 8015cc8:	3310      	adds	r3, #16
 8015cca:	76a3      	strb	r3, [r4, #26]
 8015ccc:	9507      	str	r5, [sp, #28]
 8015cce:	0035      	movs	r5, r6
 8015cd0:	782b      	ldrb	r3, [r5, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d001      	beq.n	8015cda <_svfiprintf_r+0x52>
 8015cd6:	2b25      	cmp	r3, #37	@ 0x25
 8015cd8:	d148      	bne.n	8015d6c <_svfiprintf_r+0xe4>
 8015cda:	1bab      	subs	r3, r5, r6
 8015cdc:	9305      	str	r3, [sp, #20]
 8015cde:	42b5      	cmp	r5, r6
 8015ce0:	d00b      	beq.n	8015cfa <_svfiprintf_r+0x72>
 8015ce2:	0032      	movs	r2, r6
 8015ce4:	0039      	movs	r1, r7
 8015ce6:	9803      	ldr	r0, [sp, #12]
 8015ce8:	f7ff ff6e 	bl	8015bc8 <__ssputs_r>
 8015cec:	3001      	adds	r0, #1
 8015cee:	d100      	bne.n	8015cf2 <_svfiprintf_r+0x6a>
 8015cf0:	e0ae      	b.n	8015e50 <_svfiprintf_r+0x1c8>
 8015cf2:	6963      	ldr	r3, [r4, #20]
 8015cf4:	9a05      	ldr	r2, [sp, #20]
 8015cf6:	189b      	adds	r3, r3, r2
 8015cf8:	6163      	str	r3, [r4, #20]
 8015cfa:	782b      	ldrb	r3, [r5, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d100      	bne.n	8015d02 <_svfiprintf_r+0x7a>
 8015d00:	e0a6      	b.n	8015e50 <_svfiprintf_r+0x1c8>
 8015d02:	2201      	movs	r2, #1
 8015d04:	2300      	movs	r3, #0
 8015d06:	4252      	negs	r2, r2
 8015d08:	6062      	str	r2, [r4, #4]
 8015d0a:	a904      	add	r1, sp, #16
 8015d0c:	3254      	adds	r2, #84	@ 0x54
 8015d0e:	1852      	adds	r2, r2, r1
 8015d10:	1c6e      	adds	r6, r5, #1
 8015d12:	6023      	str	r3, [r4, #0]
 8015d14:	60e3      	str	r3, [r4, #12]
 8015d16:	60a3      	str	r3, [r4, #8]
 8015d18:	7013      	strb	r3, [r2, #0]
 8015d1a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8015d1c:	4b54      	ldr	r3, [pc, #336]	@ (8015e70 <_svfiprintf_r+0x1e8>)
 8015d1e:	2205      	movs	r2, #5
 8015d20:	0018      	movs	r0, r3
 8015d22:	7831      	ldrb	r1, [r6, #0]
 8015d24:	9305      	str	r3, [sp, #20]
 8015d26:	f7fd fc48 	bl	80135ba <memchr>
 8015d2a:	1c75      	adds	r5, r6, #1
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d11f      	bne.n	8015d70 <_svfiprintf_r+0xe8>
 8015d30:	6822      	ldr	r2, [r4, #0]
 8015d32:	06d3      	lsls	r3, r2, #27
 8015d34:	d504      	bpl.n	8015d40 <_svfiprintf_r+0xb8>
 8015d36:	2353      	movs	r3, #83	@ 0x53
 8015d38:	a904      	add	r1, sp, #16
 8015d3a:	185b      	adds	r3, r3, r1
 8015d3c:	2120      	movs	r1, #32
 8015d3e:	7019      	strb	r1, [r3, #0]
 8015d40:	0713      	lsls	r3, r2, #28
 8015d42:	d504      	bpl.n	8015d4e <_svfiprintf_r+0xc6>
 8015d44:	2353      	movs	r3, #83	@ 0x53
 8015d46:	a904      	add	r1, sp, #16
 8015d48:	185b      	adds	r3, r3, r1
 8015d4a:	212b      	movs	r1, #43	@ 0x2b
 8015d4c:	7019      	strb	r1, [r3, #0]
 8015d4e:	7833      	ldrb	r3, [r6, #0]
 8015d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d52:	d016      	beq.n	8015d82 <_svfiprintf_r+0xfa>
 8015d54:	0035      	movs	r5, r6
 8015d56:	2100      	movs	r1, #0
 8015d58:	200a      	movs	r0, #10
 8015d5a:	68e3      	ldr	r3, [r4, #12]
 8015d5c:	782a      	ldrb	r2, [r5, #0]
 8015d5e:	1c6e      	adds	r6, r5, #1
 8015d60:	3a30      	subs	r2, #48	@ 0x30
 8015d62:	2a09      	cmp	r2, #9
 8015d64:	d950      	bls.n	8015e08 <_svfiprintf_r+0x180>
 8015d66:	2900      	cmp	r1, #0
 8015d68:	d111      	bne.n	8015d8e <_svfiprintf_r+0x106>
 8015d6a:	e017      	b.n	8015d9c <_svfiprintf_r+0x114>
 8015d6c:	3501      	adds	r5, #1
 8015d6e:	e7af      	b.n	8015cd0 <_svfiprintf_r+0x48>
 8015d70:	9b05      	ldr	r3, [sp, #20]
 8015d72:	6822      	ldr	r2, [r4, #0]
 8015d74:	1ac0      	subs	r0, r0, r3
 8015d76:	2301      	movs	r3, #1
 8015d78:	4083      	lsls	r3, r0
 8015d7a:	4313      	orrs	r3, r2
 8015d7c:	002e      	movs	r6, r5
 8015d7e:	6023      	str	r3, [r4, #0]
 8015d80:	e7cc      	b.n	8015d1c <_svfiprintf_r+0x94>
 8015d82:	9b07      	ldr	r3, [sp, #28]
 8015d84:	1d19      	adds	r1, r3, #4
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	9107      	str	r1, [sp, #28]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	db01      	blt.n	8015d92 <_svfiprintf_r+0x10a>
 8015d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015d90:	e004      	b.n	8015d9c <_svfiprintf_r+0x114>
 8015d92:	425b      	negs	r3, r3
 8015d94:	60e3      	str	r3, [r4, #12]
 8015d96:	2302      	movs	r3, #2
 8015d98:	4313      	orrs	r3, r2
 8015d9a:	6023      	str	r3, [r4, #0]
 8015d9c:	782b      	ldrb	r3, [r5, #0]
 8015d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015da0:	d10c      	bne.n	8015dbc <_svfiprintf_r+0x134>
 8015da2:	786b      	ldrb	r3, [r5, #1]
 8015da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015da6:	d134      	bne.n	8015e12 <_svfiprintf_r+0x18a>
 8015da8:	9b07      	ldr	r3, [sp, #28]
 8015daa:	3502      	adds	r5, #2
 8015dac:	1d1a      	adds	r2, r3, #4
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	9207      	str	r2, [sp, #28]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	da01      	bge.n	8015dba <_svfiprintf_r+0x132>
 8015db6:	2301      	movs	r3, #1
 8015db8:	425b      	negs	r3, r3
 8015dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8015dbc:	4e2d      	ldr	r6, [pc, #180]	@ (8015e74 <_svfiprintf_r+0x1ec>)
 8015dbe:	2203      	movs	r2, #3
 8015dc0:	0030      	movs	r0, r6
 8015dc2:	7829      	ldrb	r1, [r5, #0]
 8015dc4:	f7fd fbf9 	bl	80135ba <memchr>
 8015dc8:	2800      	cmp	r0, #0
 8015dca:	d006      	beq.n	8015dda <_svfiprintf_r+0x152>
 8015dcc:	2340      	movs	r3, #64	@ 0x40
 8015dce:	1b80      	subs	r0, r0, r6
 8015dd0:	4083      	lsls	r3, r0
 8015dd2:	6822      	ldr	r2, [r4, #0]
 8015dd4:	3501      	adds	r5, #1
 8015dd6:	4313      	orrs	r3, r2
 8015dd8:	6023      	str	r3, [r4, #0]
 8015dda:	7829      	ldrb	r1, [r5, #0]
 8015ddc:	2206      	movs	r2, #6
 8015dde:	4826      	ldr	r0, [pc, #152]	@ (8015e78 <_svfiprintf_r+0x1f0>)
 8015de0:	1c6e      	adds	r6, r5, #1
 8015de2:	7621      	strb	r1, [r4, #24]
 8015de4:	f7fd fbe9 	bl	80135ba <memchr>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d038      	beq.n	8015e5e <_svfiprintf_r+0x1d6>
 8015dec:	4b23      	ldr	r3, [pc, #140]	@ (8015e7c <_svfiprintf_r+0x1f4>)
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d122      	bne.n	8015e38 <_svfiprintf_r+0x1b0>
 8015df2:	2207      	movs	r2, #7
 8015df4:	9b07      	ldr	r3, [sp, #28]
 8015df6:	3307      	adds	r3, #7
 8015df8:	4393      	bics	r3, r2
 8015dfa:	3308      	adds	r3, #8
 8015dfc:	9307      	str	r3, [sp, #28]
 8015dfe:	6963      	ldr	r3, [r4, #20]
 8015e00:	9a04      	ldr	r2, [sp, #16]
 8015e02:	189b      	adds	r3, r3, r2
 8015e04:	6163      	str	r3, [r4, #20]
 8015e06:	e762      	b.n	8015cce <_svfiprintf_r+0x46>
 8015e08:	4343      	muls	r3, r0
 8015e0a:	0035      	movs	r5, r6
 8015e0c:	2101      	movs	r1, #1
 8015e0e:	189b      	adds	r3, r3, r2
 8015e10:	e7a4      	b.n	8015d5c <_svfiprintf_r+0xd4>
 8015e12:	2300      	movs	r3, #0
 8015e14:	200a      	movs	r0, #10
 8015e16:	0019      	movs	r1, r3
 8015e18:	3501      	adds	r5, #1
 8015e1a:	6063      	str	r3, [r4, #4]
 8015e1c:	782a      	ldrb	r2, [r5, #0]
 8015e1e:	1c6e      	adds	r6, r5, #1
 8015e20:	3a30      	subs	r2, #48	@ 0x30
 8015e22:	2a09      	cmp	r2, #9
 8015e24:	d903      	bls.n	8015e2e <_svfiprintf_r+0x1a6>
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d0c8      	beq.n	8015dbc <_svfiprintf_r+0x134>
 8015e2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8015e2c:	e7c6      	b.n	8015dbc <_svfiprintf_r+0x134>
 8015e2e:	4341      	muls	r1, r0
 8015e30:	0035      	movs	r5, r6
 8015e32:	2301      	movs	r3, #1
 8015e34:	1889      	adds	r1, r1, r2
 8015e36:	e7f1      	b.n	8015e1c <_svfiprintf_r+0x194>
 8015e38:	aa07      	add	r2, sp, #28
 8015e3a:	9200      	str	r2, [sp, #0]
 8015e3c:	0021      	movs	r1, r4
 8015e3e:	003a      	movs	r2, r7
 8015e40:	4b0f      	ldr	r3, [pc, #60]	@ (8015e80 <_svfiprintf_r+0x1f8>)
 8015e42:	9803      	ldr	r0, [sp, #12]
 8015e44:	f7fc fb6c 	bl	8012520 <_printf_float>
 8015e48:	9004      	str	r0, [sp, #16]
 8015e4a:	9b04      	ldr	r3, [sp, #16]
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	d1d6      	bne.n	8015dfe <_svfiprintf_r+0x176>
 8015e50:	89bb      	ldrh	r3, [r7, #12]
 8015e52:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8015e54:	065b      	lsls	r3, r3, #25
 8015e56:	d500      	bpl.n	8015e5a <_svfiprintf_r+0x1d2>
 8015e58:	e72c      	b.n	8015cb4 <_svfiprintf_r+0x2c>
 8015e5a:	b021      	add	sp, #132	@ 0x84
 8015e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e5e:	aa07      	add	r2, sp, #28
 8015e60:	9200      	str	r2, [sp, #0]
 8015e62:	0021      	movs	r1, r4
 8015e64:	003a      	movs	r2, r7
 8015e66:	4b06      	ldr	r3, [pc, #24]	@ (8015e80 <_svfiprintf_r+0x1f8>)
 8015e68:	9803      	ldr	r0, [sp, #12]
 8015e6a:	f7fc fe07 	bl	8012a7c <_printf_i>
 8015e6e:	e7eb      	b.n	8015e48 <_svfiprintf_r+0x1c0>
 8015e70:	08017a41 	.word	0x08017a41
 8015e74:	08017a47 	.word	0x08017a47
 8015e78:	08017a4b 	.word	0x08017a4b
 8015e7c:	08012521 	.word	0x08012521
 8015e80:	08015bc9 	.word	0x08015bc9

08015e84 <__sflush_r>:
 8015e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e86:	220c      	movs	r2, #12
 8015e88:	5e8b      	ldrsh	r3, [r1, r2]
 8015e8a:	0005      	movs	r5, r0
 8015e8c:	000c      	movs	r4, r1
 8015e8e:	071a      	lsls	r2, r3, #28
 8015e90:	d456      	bmi.n	8015f40 <__sflush_r+0xbc>
 8015e92:	684a      	ldr	r2, [r1, #4]
 8015e94:	2a00      	cmp	r2, #0
 8015e96:	dc02      	bgt.n	8015e9e <__sflush_r+0x1a>
 8015e98:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8015e9a:	2a00      	cmp	r2, #0
 8015e9c:	dd4e      	ble.n	8015f3c <__sflush_r+0xb8>
 8015e9e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015ea0:	2f00      	cmp	r7, #0
 8015ea2:	d04b      	beq.n	8015f3c <__sflush_r+0xb8>
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	2080      	movs	r0, #128	@ 0x80
 8015ea8:	682e      	ldr	r6, [r5, #0]
 8015eaa:	602a      	str	r2, [r5, #0]
 8015eac:	001a      	movs	r2, r3
 8015eae:	0140      	lsls	r0, r0, #5
 8015eb0:	6a21      	ldr	r1, [r4, #32]
 8015eb2:	4002      	ands	r2, r0
 8015eb4:	4203      	tst	r3, r0
 8015eb6:	d033      	beq.n	8015f20 <__sflush_r+0x9c>
 8015eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015eba:	89a3      	ldrh	r3, [r4, #12]
 8015ebc:	075b      	lsls	r3, r3, #29
 8015ebe:	d506      	bpl.n	8015ece <__sflush_r+0x4a>
 8015ec0:	6863      	ldr	r3, [r4, #4]
 8015ec2:	1ad2      	subs	r2, r2, r3
 8015ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d001      	beq.n	8015ece <__sflush_r+0x4a>
 8015eca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015ecc:	1ad2      	subs	r2, r2, r3
 8015ece:	2300      	movs	r3, #0
 8015ed0:	0028      	movs	r0, r5
 8015ed2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015ed4:	6a21      	ldr	r1, [r4, #32]
 8015ed6:	47b8      	blx	r7
 8015ed8:	89a2      	ldrh	r2, [r4, #12]
 8015eda:	1c43      	adds	r3, r0, #1
 8015edc:	d106      	bne.n	8015eec <__sflush_r+0x68>
 8015ede:	6829      	ldr	r1, [r5, #0]
 8015ee0:	291d      	cmp	r1, #29
 8015ee2:	d846      	bhi.n	8015f72 <__sflush_r+0xee>
 8015ee4:	4b29      	ldr	r3, [pc, #164]	@ (8015f8c <__sflush_r+0x108>)
 8015ee6:	410b      	asrs	r3, r1
 8015ee8:	07db      	lsls	r3, r3, #31
 8015eea:	d442      	bmi.n	8015f72 <__sflush_r+0xee>
 8015eec:	2300      	movs	r3, #0
 8015eee:	6063      	str	r3, [r4, #4]
 8015ef0:	6923      	ldr	r3, [r4, #16]
 8015ef2:	6023      	str	r3, [r4, #0]
 8015ef4:	04d2      	lsls	r2, r2, #19
 8015ef6:	d505      	bpl.n	8015f04 <__sflush_r+0x80>
 8015ef8:	1c43      	adds	r3, r0, #1
 8015efa:	d102      	bne.n	8015f02 <__sflush_r+0x7e>
 8015efc:	682b      	ldr	r3, [r5, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d100      	bne.n	8015f04 <__sflush_r+0x80>
 8015f02:	6560      	str	r0, [r4, #84]	@ 0x54
 8015f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015f06:	602e      	str	r6, [r5, #0]
 8015f08:	2900      	cmp	r1, #0
 8015f0a:	d017      	beq.n	8015f3c <__sflush_r+0xb8>
 8015f0c:	0023      	movs	r3, r4
 8015f0e:	3344      	adds	r3, #68	@ 0x44
 8015f10:	4299      	cmp	r1, r3
 8015f12:	d002      	beq.n	8015f1a <__sflush_r+0x96>
 8015f14:	0028      	movs	r0, r5
 8015f16:	f7fe f9e7 	bl	80142e8 <_free_r>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015f1e:	e00d      	b.n	8015f3c <__sflush_r+0xb8>
 8015f20:	2301      	movs	r3, #1
 8015f22:	0028      	movs	r0, r5
 8015f24:	47b8      	blx	r7
 8015f26:	0002      	movs	r2, r0
 8015f28:	1c43      	adds	r3, r0, #1
 8015f2a:	d1c6      	bne.n	8015eba <__sflush_r+0x36>
 8015f2c:	682b      	ldr	r3, [r5, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d0c3      	beq.n	8015eba <__sflush_r+0x36>
 8015f32:	2b1d      	cmp	r3, #29
 8015f34:	d001      	beq.n	8015f3a <__sflush_r+0xb6>
 8015f36:	2b16      	cmp	r3, #22
 8015f38:	d11a      	bne.n	8015f70 <__sflush_r+0xec>
 8015f3a:	602e      	str	r6, [r5, #0]
 8015f3c:	2000      	movs	r0, #0
 8015f3e:	e01e      	b.n	8015f7e <__sflush_r+0xfa>
 8015f40:	690e      	ldr	r6, [r1, #16]
 8015f42:	2e00      	cmp	r6, #0
 8015f44:	d0fa      	beq.n	8015f3c <__sflush_r+0xb8>
 8015f46:	680f      	ldr	r7, [r1, #0]
 8015f48:	600e      	str	r6, [r1, #0]
 8015f4a:	1bba      	subs	r2, r7, r6
 8015f4c:	9201      	str	r2, [sp, #4]
 8015f4e:	2200      	movs	r2, #0
 8015f50:	079b      	lsls	r3, r3, #30
 8015f52:	d100      	bne.n	8015f56 <__sflush_r+0xd2>
 8015f54:	694a      	ldr	r2, [r1, #20]
 8015f56:	60a2      	str	r2, [r4, #8]
 8015f58:	9b01      	ldr	r3, [sp, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	ddee      	ble.n	8015f3c <__sflush_r+0xb8>
 8015f5e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015f60:	0032      	movs	r2, r6
 8015f62:	001f      	movs	r7, r3
 8015f64:	0028      	movs	r0, r5
 8015f66:	9b01      	ldr	r3, [sp, #4]
 8015f68:	6a21      	ldr	r1, [r4, #32]
 8015f6a:	47b8      	blx	r7
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	dc07      	bgt.n	8015f80 <__sflush_r+0xfc>
 8015f70:	89a2      	ldrh	r2, [r4, #12]
 8015f72:	2340      	movs	r3, #64	@ 0x40
 8015f74:	2001      	movs	r0, #1
 8015f76:	4313      	orrs	r3, r2
 8015f78:	b21b      	sxth	r3, r3
 8015f7a:	81a3      	strh	r3, [r4, #12]
 8015f7c:	4240      	negs	r0, r0
 8015f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015f80:	9b01      	ldr	r3, [sp, #4]
 8015f82:	1836      	adds	r6, r6, r0
 8015f84:	1a1b      	subs	r3, r3, r0
 8015f86:	9301      	str	r3, [sp, #4]
 8015f88:	e7e6      	b.n	8015f58 <__sflush_r+0xd4>
 8015f8a:	46c0      	nop			@ (mov r8, r8)
 8015f8c:	dfbffffe 	.word	0xdfbffffe

08015f90 <_fflush_r>:
 8015f90:	690b      	ldr	r3, [r1, #16]
 8015f92:	b570      	push	{r4, r5, r6, lr}
 8015f94:	0005      	movs	r5, r0
 8015f96:	000c      	movs	r4, r1
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d102      	bne.n	8015fa2 <_fflush_r+0x12>
 8015f9c:	2500      	movs	r5, #0
 8015f9e:	0028      	movs	r0, r5
 8015fa0:	bd70      	pop	{r4, r5, r6, pc}
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	d004      	beq.n	8015fb0 <_fflush_r+0x20>
 8015fa6:	6a03      	ldr	r3, [r0, #32]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d101      	bne.n	8015fb0 <_fflush_r+0x20>
 8015fac:	f7fd f912 	bl	80131d4 <__sinit>
 8015fb0:	220c      	movs	r2, #12
 8015fb2:	5ea3      	ldrsh	r3, [r4, r2]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d0f1      	beq.n	8015f9c <_fflush_r+0xc>
 8015fb8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015fba:	07d2      	lsls	r2, r2, #31
 8015fbc:	d404      	bmi.n	8015fc8 <_fflush_r+0x38>
 8015fbe:	059b      	lsls	r3, r3, #22
 8015fc0:	d402      	bmi.n	8015fc8 <_fflush_r+0x38>
 8015fc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fc4:	f7fd faf7 	bl	80135b6 <__retarget_lock_acquire_recursive>
 8015fc8:	0028      	movs	r0, r5
 8015fca:	0021      	movs	r1, r4
 8015fcc:	f7ff ff5a 	bl	8015e84 <__sflush_r>
 8015fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015fd2:	0005      	movs	r5, r0
 8015fd4:	07db      	lsls	r3, r3, #31
 8015fd6:	d4e2      	bmi.n	8015f9e <_fflush_r+0xe>
 8015fd8:	89a3      	ldrh	r3, [r4, #12]
 8015fda:	059b      	lsls	r3, r3, #22
 8015fdc:	d4df      	bmi.n	8015f9e <_fflush_r+0xe>
 8015fde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fe0:	f7fd faea 	bl	80135b8 <__retarget_lock_release_recursive>
 8015fe4:	e7db      	b.n	8015f9e <_fflush_r+0xe>

08015fe6 <memmove>:
 8015fe6:	b510      	push	{r4, lr}
 8015fe8:	4288      	cmp	r0, r1
 8015fea:	d806      	bhi.n	8015ffa <memmove+0x14>
 8015fec:	2300      	movs	r3, #0
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d008      	beq.n	8016004 <memmove+0x1e>
 8015ff2:	5ccc      	ldrb	r4, [r1, r3]
 8015ff4:	54c4      	strb	r4, [r0, r3]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	e7f9      	b.n	8015fee <memmove+0x8>
 8015ffa:	188b      	adds	r3, r1, r2
 8015ffc:	4298      	cmp	r0, r3
 8015ffe:	d2f5      	bcs.n	8015fec <memmove+0x6>
 8016000:	3a01      	subs	r2, #1
 8016002:	d200      	bcs.n	8016006 <memmove+0x20>
 8016004:	bd10      	pop	{r4, pc}
 8016006:	5c8b      	ldrb	r3, [r1, r2]
 8016008:	5483      	strb	r3, [r0, r2]
 801600a:	e7f9      	b.n	8016000 <memmove+0x1a>

0801600c <strncmp>:
 801600c:	b530      	push	{r4, r5, lr}
 801600e:	0005      	movs	r5, r0
 8016010:	1e10      	subs	r0, r2, #0
 8016012:	d00b      	beq.n	801602c <strncmp+0x20>
 8016014:	2400      	movs	r4, #0
 8016016:	3a01      	subs	r2, #1
 8016018:	5d2b      	ldrb	r3, [r5, r4]
 801601a:	5d08      	ldrb	r0, [r1, r4]
 801601c:	4283      	cmp	r3, r0
 801601e:	d104      	bne.n	801602a <strncmp+0x1e>
 8016020:	42a2      	cmp	r2, r4
 8016022:	d002      	beq.n	801602a <strncmp+0x1e>
 8016024:	3401      	adds	r4, #1
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1f6      	bne.n	8016018 <strncmp+0xc>
 801602a:	1a18      	subs	r0, r3, r0
 801602c:	bd30      	pop	{r4, r5, pc}
	...

08016030 <_sbrk_r>:
 8016030:	2300      	movs	r3, #0
 8016032:	b570      	push	{r4, r5, r6, lr}
 8016034:	4d06      	ldr	r5, [pc, #24]	@ (8016050 <_sbrk_r+0x20>)
 8016036:	0004      	movs	r4, r0
 8016038:	0008      	movs	r0, r1
 801603a:	602b      	str	r3, [r5, #0]
 801603c:	f7f1 fd52 	bl	8007ae4 <_sbrk>
 8016040:	1c43      	adds	r3, r0, #1
 8016042:	d103      	bne.n	801604c <_sbrk_r+0x1c>
 8016044:	682b      	ldr	r3, [r5, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d000      	beq.n	801604c <_sbrk_r+0x1c>
 801604a:	6023      	str	r3, [r4, #0]
 801604c:	bd70      	pop	{r4, r5, r6, pc}
 801604e:	46c0      	nop			@ (mov r8, r8)
 8016050:	20007280 	.word	0x20007280

08016054 <nan>:
 8016054:	2000      	movs	r0, #0
 8016056:	4901      	ldr	r1, [pc, #4]	@ (801605c <nan+0x8>)
 8016058:	4770      	bx	lr
 801605a:	46c0      	nop			@ (mov r8, r8)
 801605c:	7ff80000 	.word	0x7ff80000

08016060 <__assert_func>:
 8016060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016062:	0014      	movs	r4, r2
 8016064:	001a      	movs	r2, r3
 8016066:	4b09      	ldr	r3, [pc, #36]	@ (801608c <__assert_func+0x2c>)
 8016068:	0005      	movs	r5, r0
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	000e      	movs	r6, r1
 801606e:	68d8      	ldr	r0, [r3, #12]
 8016070:	4b07      	ldr	r3, [pc, #28]	@ (8016090 <__assert_func+0x30>)
 8016072:	2c00      	cmp	r4, #0
 8016074:	d101      	bne.n	801607a <__assert_func+0x1a>
 8016076:	4b07      	ldr	r3, [pc, #28]	@ (8016094 <__assert_func+0x34>)
 8016078:	001c      	movs	r4, r3
 801607a:	4907      	ldr	r1, [pc, #28]	@ (8016098 <__assert_func+0x38>)
 801607c:	9301      	str	r3, [sp, #4]
 801607e:	9402      	str	r4, [sp, #8]
 8016080:	002b      	movs	r3, r5
 8016082:	9600      	str	r6, [sp, #0]
 8016084:	f000 fbe0 	bl	8016848 <fiprintf>
 8016088:	f000 fbee 	bl	8016868 <abort>
 801608c:	20000094 	.word	0x20000094
 8016090:	08017a5a 	.word	0x08017a5a
 8016094:	08017a95 	.word	0x08017a95
 8016098:	08017a67 	.word	0x08017a67

0801609c <_calloc_r>:
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	0c0b      	lsrs	r3, r1, #16
 80160a0:	0c15      	lsrs	r5, r2, #16
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d11e      	bne.n	80160e4 <_calloc_r+0x48>
 80160a6:	2d00      	cmp	r5, #0
 80160a8:	d10c      	bne.n	80160c4 <_calloc_r+0x28>
 80160aa:	b289      	uxth	r1, r1
 80160ac:	b294      	uxth	r4, r2
 80160ae:	434c      	muls	r4, r1
 80160b0:	0021      	movs	r1, r4
 80160b2:	f7fe f98f 	bl	80143d4 <_malloc_r>
 80160b6:	1e05      	subs	r5, r0, #0
 80160b8:	d01a      	beq.n	80160f0 <_calloc_r+0x54>
 80160ba:	0022      	movs	r2, r4
 80160bc:	2100      	movs	r1, #0
 80160be:	f7fd f995 	bl	80133ec <memset>
 80160c2:	e016      	b.n	80160f2 <_calloc_r+0x56>
 80160c4:	1c2b      	adds	r3, r5, #0
 80160c6:	1c0c      	adds	r4, r1, #0
 80160c8:	b289      	uxth	r1, r1
 80160ca:	b292      	uxth	r2, r2
 80160cc:	434a      	muls	r2, r1
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	b2a1      	uxth	r1, r4
 80160d2:	4359      	muls	r1, r3
 80160d4:	0c14      	lsrs	r4, r2, #16
 80160d6:	190c      	adds	r4, r1, r4
 80160d8:	0c23      	lsrs	r3, r4, #16
 80160da:	d107      	bne.n	80160ec <_calloc_r+0x50>
 80160dc:	0424      	lsls	r4, r4, #16
 80160de:	b292      	uxth	r2, r2
 80160e0:	4314      	orrs	r4, r2
 80160e2:	e7e5      	b.n	80160b0 <_calloc_r+0x14>
 80160e4:	2d00      	cmp	r5, #0
 80160e6:	d101      	bne.n	80160ec <_calloc_r+0x50>
 80160e8:	1c14      	adds	r4, r2, #0
 80160ea:	e7ed      	b.n	80160c8 <_calloc_r+0x2c>
 80160ec:	230c      	movs	r3, #12
 80160ee:	6003      	str	r3, [r0, #0]
 80160f0:	2500      	movs	r5, #0
 80160f2:	0028      	movs	r0, r5
 80160f4:	bd70      	pop	{r4, r5, r6, pc}

080160f6 <rshift>:
 80160f6:	0002      	movs	r2, r0
 80160f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160fa:	6904      	ldr	r4, [r0, #16]
 80160fc:	b085      	sub	sp, #20
 80160fe:	3214      	adds	r2, #20
 8016100:	114b      	asrs	r3, r1, #5
 8016102:	0016      	movs	r6, r2
 8016104:	9302      	str	r3, [sp, #8]
 8016106:	429c      	cmp	r4, r3
 8016108:	dd31      	ble.n	801616e <rshift+0x78>
 801610a:	261f      	movs	r6, #31
 801610c:	000f      	movs	r7, r1
 801610e:	009b      	lsls	r3, r3, #2
 8016110:	00a5      	lsls	r5, r4, #2
 8016112:	18d3      	adds	r3, r2, r3
 8016114:	4037      	ands	r7, r6
 8016116:	1955      	adds	r5, r2, r5
 8016118:	9300      	str	r3, [sp, #0]
 801611a:	9701      	str	r7, [sp, #4]
 801611c:	4231      	tst	r1, r6
 801611e:	d10d      	bne.n	801613c <rshift+0x46>
 8016120:	0016      	movs	r6, r2
 8016122:	0019      	movs	r1, r3
 8016124:	428d      	cmp	r5, r1
 8016126:	d836      	bhi.n	8016196 <rshift+0xa0>
 8016128:	9b00      	ldr	r3, [sp, #0]
 801612a:	2600      	movs	r6, #0
 801612c:	3b03      	subs	r3, #3
 801612e:	429d      	cmp	r5, r3
 8016130:	d302      	bcc.n	8016138 <rshift+0x42>
 8016132:	9b02      	ldr	r3, [sp, #8]
 8016134:	1ae4      	subs	r4, r4, r3
 8016136:	00a6      	lsls	r6, r4, #2
 8016138:	1996      	adds	r6, r2, r6
 801613a:	e018      	b.n	801616e <rshift+0x78>
 801613c:	2120      	movs	r1, #32
 801613e:	9e01      	ldr	r6, [sp, #4]
 8016140:	9f01      	ldr	r7, [sp, #4]
 8016142:	1b89      	subs	r1, r1, r6
 8016144:	9e00      	ldr	r6, [sp, #0]
 8016146:	9103      	str	r1, [sp, #12]
 8016148:	ce02      	ldmia	r6!, {r1}
 801614a:	4694      	mov	ip, r2
 801614c:	40f9      	lsrs	r1, r7
 801614e:	42b5      	cmp	r5, r6
 8016150:	d816      	bhi.n	8016180 <rshift+0x8a>
 8016152:	9b00      	ldr	r3, [sp, #0]
 8016154:	2600      	movs	r6, #0
 8016156:	3301      	adds	r3, #1
 8016158:	429d      	cmp	r5, r3
 801615a:	d303      	bcc.n	8016164 <rshift+0x6e>
 801615c:	9b02      	ldr	r3, [sp, #8]
 801615e:	1ae4      	subs	r4, r4, r3
 8016160:	00a6      	lsls	r6, r4, #2
 8016162:	3e04      	subs	r6, #4
 8016164:	1996      	adds	r6, r2, r6
 8016166:	6031      	str	r1, [r6, #0]
 8016168:	2900      	cmp	r1, #0
 801616a:	d000      	beq.n	801616e <rshift+0x78>
 801616c:	3604      	adds	r6, #4
 801616e:	1ab1      	subs	r1, r6, r2
 8016170:	1089      	asrs	r1, r1, #2
 8016172:	6101      	str	r1, [r0, #16]
 8016174:	4296      	cmp	r6, r2
 8016176:	d101      	bne.n	801617c <rshift+0x86>
 8016178:	2300      	movs	r3, #0
 801617a:	6143      	str	r3, [r0, #20]
 801617c:	b005      	add	sp, #20
 801617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016180:	6837      	ldr	r7, [r6, #0]
 8016182:	9b03      	ldr	r3, [sp, #12]
 8016184:	409f      	lsls	r7, r3
 8016186:	430f      	orrs	r7, r1
 8016188:	4661      	mov	r1, ip
 801618a:	c180      	stmia	r1!, {r7}
 801618c:	468c      	mov	ip, r1
 801618e:	9b01      	ldr	r3, [sp, #4]
 8016190:	ce02      	ldmia	r6!, {r1}
 8016192:	40d9      	lsrs	r1, r3
 8016194:	e7db      	b.n	801614e <rshift+0x58>
 8016196:	c980      	ldmia	r1!, {r7}
 8016198:	c680      	stmia	r6!, {r7}
 801619a:	e7c3      	b.n	8016124 <rshift+0x2e>

0801619c <__hexdig_fun>:
 801619c:	0002      	movs	r2, r0
 801619e:	3a30      	subs	r2, #48	@ 0x30
 80161a0:	0003      	movs	r3, r0
 80161a2:	2a09      	cmp	r2, #9
 80161a4:	d802      	bhi.n	80161ac <__hexdig_fun+0x10>
 80161a6:	3b20      	subs	r3, #32
 80161a8:	b2d8      	uxtb	r0, r3
 80161aa:	4770      	bx	lr
 80161ac:	0002      	movs	r2, r0
 80161ae:	3a61      	subs	r2, #97	@ 0x61
 80161b0:	2a05      	cmp	r2, #5
 80161b2:	d801      	bhi.n	80161b8 <__hexdig_fun+0x1c>
 80161b4:	3b47      	subs	r3, #71	@ 0x47
 80161b6:	e7f7      	b.n	80161a8 <__hexdig_fun+0xc>
 80161b8:	001a      	movs	r2, r3
 80161ba:	3a41      	subs	r2, #65	@ 0x41
 80161bc:	2000      	movs	r0, #0
 80161be:	2a05      	cmp	r2, #5
 80161c0:	d8f3      	bhi.n	80161aa <__hexdig_fun+0xe>
 80161c2:	3b27      	subs	r3, #39	@ 0x27
 80161c4:	e7f0      	b.n	80161a8 <__hexdig_fun+0xc>
	...

080161c8 <__gethex>:
 80161c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ca:	b089      	sub	sp, #36	@ 0x24
 80161cc:	9307      	str	r3, [sp, #28]
 80161ce:	680b      	ldr	r3, [r1, #0]
 80161d0:	9201      	str	r2, [sp, #4]
 80161d2:	9003      	str	r0, [sp, #12]
 80161d4:	9106      	str	r1, [sp, #24]
 80161d6:	1c9a      	adds	r2, r3, #2
 80161d8:	0011      	movs	r1, r2
 80161da:	3201      	adds	r2, #1
 80161dc:	1e50      	subs	r0, r2, #1
 80161de:	7800      	ldrb	r0, [r0, #0]
 80161e0:	2830      	cmp	r0, #48	@ 0x30
 80161e2:	d0f9      	beq.n	80161d8 <__gethex+0x10>
 80161e4:	1acb      	subs	r3, r1, r3
 80161e6:	3b02      	subs	r3, #2
 80161e8:	9305      	str	r3, [sp, #20]
 80161ea:	9100      	str	r1, [sp, #0]
 80161ec:	f7ff ffd6 	bl	801619c <__hexdig_fun>
 80161f0:	2300      	movs	r3, #0
 80161f2:	001d      	movs	r5, r3
 80161f4:	9302      	str	r3, [sp, #8]
 80161f6:	4298      	cmp	r0, r3
 80161f8:	d11e      	bne.n	8016238 <__gethex+0x70>
 80161fa:	2201      	movs	r2, #1
 80161fc:	49a6      	ldr	r1, [pc, #664]	@ (8016498 <__gethex+0x2d0>)
 80161fe:	9800      	ldr	r0, [sp, #0]
 8016200:	f7ff ff04 	bl	801600c <strncmp>
 8016204:	0007      	movs	r7, r0
 8016206:	42a8      	cmp	r0, r5
 8016208:	d000      	beq.n	801620c <__gethex+0x44>
 801620a:	e06a      	b.n	80162e2 <__gethex+0x11a>
 801620c:	9b00      	ldr	r3, [sp, #0]
 801620e:	7858      	ldrb	r0, [r3, #1]
 8016210:	1c5c      	adds	r4, r3, #1
 8016212:	f7ff ffc3 	bl	801619c <__hexdig_fun>
 8016216:	2301      	movs	r3, #1
 8016218:	9302      	str	r3, [sp, #8]
 801621a:	42a8      	cmp	r0, r5
 801621c:	d02f      	beq.n	801627e <__gethex+0xb6>
 801621e:	9400      	str	r4, [sp, #0]
 8016220:	9b00      	ldr	r3, [sp, #0]
 8016222:	7818      	ldrb	r0, [r3, #0]
 8016224:	2830      	cmp	r0, #48	@ 0x30
 8016226:	d009      	beq.n	801623c <__gethex+0x74>
 8016228:	f7ff ffb8 	bl	801619c <__hexdig_fun>
 801622c:	4242      	negs	r2, r0
 801622e:	4142      	adcs	r2, r0
 8016230:	2301      	movs	r3, #1
 8016232:	0025      	movs	r5, r4
 8016234:	9202      	str	r2, [sp, #8]
 8016236:	9305      	str	r3, [sp, #20]
 8016238:	9c00      	ldr	r4, [sp, #0]
 801623a:	e004      	b.n	8016246 <__gethex+0x7e>
 801623c:	9b00      	ldr	r3, [sp, #0]
 801623e:	3301      	adds	r3, #1
 8016240:	9300      	str	r3, [sp, #0]
 8016242:	e7ed      	b.n	8016220 <__gethex+0x58>
 8016244:	3401      	adds	r4, #1
 8016246:	7820      	ldrb	r0, [r4, #0]
 8016248:	f7ff ffa8 	bl	801619c <__hexdig_fun>
 801624c:	1e07      	subs	r7, r0, #0
 801624e:	d1f9      	bne.n	8016244 <__gethex+0x7c>
 8016250:	2201      	movs	r2, #1
 8016252:	0020      	movs	r0, r4
 8016254:	4990      	ldr	r1, [pc, #576]	@ (8016498 <__gethex+0x2d0>)
 8016256:	f7ff fed9 	bl	801600c <strncmp>
 801625a:	2800      	cmp	r0, #0
 801625c:	d10d      	bne.n	801627a <__gethex+0xb2>
 801625e:	2d00      	cmp	r5, #0
 8016260:	d106      	bne.n	8016270 <__gethex+0xa8>
 8016262:	3401      	adds	r4, #1
 8016264:	0025      	movs	r5, r4
 8016266:	7820      	ldrb	r0, [r4, #0]
 8016268:	f7ff ff98 	bl	801619c <__hexdig_fun>
 801626c:	2800      	cmp	r0, #0
 801626e:	d102      	bne.n	8016276 <__gethex+0xae>
 8016270:	1b2d      	subs	r5, r5, r4
 8016272:	00af      	lsls	r7, r5, #2
 8016274:	e003      	b.n	801627e <__gethex+0xb6>
 8016276:	3401      	adds	r4, #1
 8016278:	e7f5      	b.n	8016266 <__gethex+0x9e>
 801627a:	2d00      	cmp	r5, #0
 801627c:	d1f8      	bne.n	8016270 <__gethex+0xa8>
 801627e:	2220      	movs	r2, #32
 8016280:	7823      	ldrb	r3, [r4, #0]
 8016282:	0026      	movs	r6, r4
 8016284:	4393      	bics	r3, r2
 8016286:	2b50      	cmp	r3, #80	@ 0x50
 8016288:	d11d      	bne.n	80162c6 <__gethex+0xfe>
 801628a:	7863      	ldrb	r3, [r4, #1]
 801628c:	2b2b      	cmp	r3, #43	@ 0x2b
 801628e:	d02d      	beq.n	80162ec <__gethex+0x124>
 8016290:	2b2d      	cmp	r3, #45	@ 0x2d
 8016292:	d02f      	beq.n	80162f4 <__gethex+0x12c>
 8016294:	2300      	movs	r3, #0
 8016296:	1c66      	adds	r6, r4, #1
 8016298:	9304      	str	r3, [sp, #16]
 801629a:	7830      	ldrb	r0, [r6, #0]
 801629c:	f7ff ff7e 	bl	801619c <__hexdig_fun>
 80162a0:	1e43      	subs	r3, r0, #1
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	0005      	movs	r5, r0
 80162a6:	2b18      	cmp	r3, #24
 80162a8:	d82a      	bhi.n	8016300 <__gethex+0x138>
 80162aa:	7870      	ldrb	r0, [r6, #1]
 80162ac:	f7ff ff76 	bl	801619c <__hexdig_fun>
 80162b0:	1e43      	subs	r3, r0, #1
 80162b2:	b2db      	uxtb	r3, r3
 80162b4:	3601      	adds	r6, #1
 80162b6:	3d10      	subs	r5, #16
 80162b8:	2b18      	cmp	r3, #24
 80162ba:	d91d      	bls.n	80162f8 <__gethex+0x130>
 80162bc:	9b04      	ldr	r3, [sp, #16]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d000      	beq.n	80162c4 <__gethex+0xfc>
 80162c2:	426d      	negs	r5, r5
 80162c4:	197f      	adds	r7, r7, r5
 80162c6:	9b06      	ldr	r3, [sp, #24]
 80162c8:	601e      	str	r6, [r3, #0]
 80162ca:	9b02      	ldr	r3, [sp, #8]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d019      	beq.n	8016304 <__gethex+0x13c>
 80162d0:	9b05      	ldr	r3, [sp, #20]
 80162d2:	2606      	movs	r6, #6
 80162d4:	425a      	negs	r2, r3
 80162d6:	4153      	adcs	r3, r2
 80162d8:	425b      	negs	r3, r3
 80162da:	401e      	ands	r6, r3
 80162dc:	0030      	movs	r0, r6
 80162de:	b009      	add	sp, #36	@ 0x24
 80162e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162e2:	2301      	movs	r3, #1
 80162e4:	2700      	movs	r7, #0
 80162e6:	9c00      	ldr	r4, [sp, #0]
 80162e8:	9302      	str	r3, [sp, #8]
 80162ea:	e7c8      	b.n	801627e <__gethex+0xb6>
 80162ec:	2300      	movs	r3, #0
 80162ee:	9304      	str	r3, [sp, #16]
 80162f0:	1ca6      	adds	r6, r4, #2
 80162f2:	e7d2      	b.n	801629a <__gethex+0xd2>
 80162f4:	2301      	movs	r3, #1
 80162f6:	e7fa      	b.n	80162ee <__gethex+0x126>
 80162f8:	230a      	movs	r3, #10
 80162fa:	435d      	muls	r5, r3
 80162fc:	182d      	adds	r5, r5, r0
 80162fe:	e7d4      	b.n	80162aa <__gethex+0xe2>
 8016300:	0026      	movs	r6, r4
 8016302:	e7e0      	b.n	80162c6 <__gethex+0xfe>
 8016304:	9b00      	ldr	r3, [sp, #0]
 8016306:	9902      	ldr	r1, [sp, #8]
 8016308:	1ae3      	subs	r3, r4, r3
 801630a:	3b01      	subs	r3, #1
 801630c:	2b07      	cmp	r3, #7
 801630e:	dc0a      	bgt.n	8016326 <__gethex+0x15e>
 8016310:	9803      	ldr	r0, [sp, #12]
 8016312:	f7fe f8ef 	bl	80144f4 <_Balloc>
 8016316:	1e05      	subs	r5, r0, #0
 8016318:	d108      	bne.n	801632c <__gethex+0x164>
 801631a:	002a      	movs	r2, r5
 801631c:	21e4      	movs	r1, #228	@ 0xe4
 801631e:	4b5f      	ldr	r3, [pc, #380]	@ (801649c <__gethex+0x2d4>)
 8016320:	485f      	ldr	r0, [pc, #380]	@ (80164a0 <__gethex+0x2d8>)
 8016322:	f7ff fe9d 	bl	8016060 <__assert_func>
 8016326:	3101      	adds	r1, #1
 8016328:	105b      	asrs	r3, r3, #1
 801632a:	e7ef      	b.n	801630c <__gethex+0x144>
 801632c:	0003      	movs	r3, r0
 801632e:	3314      	adds	r3, #20
 8016330:	9302      	str	r3, [sp, #8]
 8016332:	9305      	str	r3, [sp, #20]
 8016334:	2300      	movs	r3, #0
 8016336:	001e      	movs	r6, r3
 8016338:	9304      	str	r3, [sp, #16]
 801633a:	9b00      	ldr	r3, [sp, #0]
 801633c:	42a3      	cmp	r3, r4
 801633e:	d338      	bcc.n	80163b2 <__gethex+0x1ea>
 8016340:	9c05      	ldr	r4, [sp, #20]
 8016342:	9b02      	ldr	r3, [sp, #8]
 8016344:	c440      	stmia	r4!, {r6}
 8016346:	1ae4      	subs	r4, r4, r3
 8016348:	10a4      	asrs	r4, r4, #2
 801634a:	0030      	movs	r0, r6
 801634c:	612c      	str	r4, [r5, #16]
 801634e:	f7fe f9c9 	bl	80146e4 <__hi0bits>
 8016352:	9b01      	ldr	r3, [sp, #4]
 8016354:	0164      	lsls	r4, r4, #5
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	1a26      	subs	r6, r4, r0
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	429e      	cmp	r6, r3
 801635e:	dd52      	ble.n	8016406 <__gethex+0x23e>
 8016360:	1af6      	subs	r6, r6, r3
 8016362:	0031      	movs	r1, r6
 8016364:	0028      	movs	r0, r5
 8016366:	f7fe fd6c 	bl	8014e42 <__any_on>
 801636a:	1e04      	subs	r4, r0, #0
 801636c:	d00f      	beq.n	801638e <__gethex+0x1c6>
 801636e:	2401      	movs	r4, #1
 8016370:	231f      	movs	r3, #31
 8016372:	0020      	movs	r0, r4
 8016374:	1e72      	subs	r2, r6, #1
 8016376:	4013      	ands	r3, r2
 8016378:	4098      	lsls	r0, r3
 801637a:	0003      	movs	r3, r0
 801637c:	1151      	asrs	r1, r2, #5
 801637e:	9802      	ldr	r0, [sp, #8]
 8016380:	0089      	lsls	r1, r1, #2
 8016382:	5809      	ldr	r1, [r1, r0]
 8016384:	4219      	tst	r1, r3
 8016386:	d002      	beq.n	801638e <__gethex+0x1c6>
 8016388:	42a2      	cmp	r2, r4
 801638a:	dc34      	bgt.n	80163f6 <__gethex+0x22e>
 801638c:	2402      	movs	r4, #2
 801638e:	0031      	movs	r1, r6
 8016390:	0028      	movs	r0, r5
 8016392:	f7ff feb0 	bl	80160f6 <rshift>
 8016396:	19bf      	adds	r7, r7, r6
 8016398:	9b01      	ldr	r3, [sp, #4]
 801639a:	689b      	ldr	r3, [r3, #8]
 801639c:	42bb      	cmp	r3, r7
 801639e:	da42      	bge.n	8016426 <__gethex+0x25e>
 80163a0:	0029      	movs	r1, r5
 80163a2:	9803      	ldr	r0, [sp, #12]
 80163a4:	f7fe f8ea 	bl	801457c <_Bfree>
 80163a8:	2300      	movs	r3, #0
 80163aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80163ac:	26a3      	movs	r6, #163	@ 0xa3
 80163ae:	6013      	str	r3, [r2, #0]
 80163b0:	e794      	b.n	80162dc <__gethex+0x114>
 80163b2:	3c01      	subs	r4, #1
 80163b4:	7823      	ldrb	r3, [r4, #0]
 80163b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80163b8:	d012      	beq.n	80163e0 <__gethex+0x218>
 80163ba:	9b04      	ldr	r3, [sp, #16]
 80163bc:	2b20      	cmp	r3, #32
 80163be:	d104      	bne.n	80163ca <__gethex+0x202>
 80163c0:	9b05      	ldr	r3, [sp, #20]
 80163c2:	c340      	stmia	r3!, {r6}
 80163c4:	2600      	movs	r6, #0
 80163c6:	9305      	str	r3, [sp, #20]
 80163c8:	9604      	str	r6, [sp, #16]
 80163ca:	7820      	ldrb	r0, [r4, #0]
 80163cc:	f7ff fee6 	bl	801619c <__hexdig_fun>
 80163d0:	230f      	movs	r3, #15
 80163d2:	4018      	ands	r0, r3
 80163d4:	9b04      	ldr	r3, [sp, #16]
 80163d6:	4098      	lsls	r0, r3
 80163d8:	3304      	adds	r3, #4
 80163da:	4306      	orrs	r6, r0
 80163dc:	9304      	str	r3, [sp, #16]
 80163de:	e7ac      	b.n	801633a <__gethex+0x172>
 80163e0:	9b00      	ldr	r3, [sp, #0]
 80163e2:	42a3      	cmp	r3, r4
 80163e4:	d8e9      	bhi.n	80163ba <__gethex+0x1f2>
 80163e6:	2201      	movs	r2, #1
 80163e8:	0020      	movs	r0, r4
 80163ea:	492b      	ldr	r1, [pc, #172]	@ (8016498 <__gethex+0x2d0>)
 80163ec:	f7ff fe0e 	bl	801600c <strncmp>
 80163f0:	2800      	cmp	r0, #0
 80163f2:	d1e2      	bne.n	80163ba <__gethex+0x1f2>
 80163f4:	e7a1      	b.n	801633a <__gethex+0x172>
 80163f6:	0028      	movs	r0, r5
 80163f8:	1eb1      	subs	r1, r6, #2
 80163fa:	f7fe fd22 	bl	8014e42 <__any_on>
 80163fe:	2800      	cmp	r0, #0
 8016400:	d0c4      	beq.n	801638c <__gethex+0x1c4>
 8016402:	2403      	movs	r4, #3
 8016404:	e7c3      	b.n	801638e <__gethex+0x1c6>
 8016406:	9b00      	ldr	r3, [sp, #0]
 8016408:	2400      	movs	r4, #0
 801640a:	429e      	cmp	r6, r3
 801640c:	dac4      	bge.n	8016398 <__gethex+0x1d0>
 801640e:	1b9e      	subs	r6, r3, r6
 8016410:	0029      	movs	r1, r5
 8016412:	0032      	movs	r2, r6
 8016414:	9803      	ldr	r0, [sp, #12]
 8016416:	f7fe fadb 	bl	80149d0 <__lshift>
 801641a:	0003      	movs	r3, r0
 801641c:	3314      	adds	r3, #20
 801641e:	0005      	movs	r5, r0
 8016420:	1bbf      	subs	r7, r7, r6
 8016422:	9302      	str	r3, [sp, #8]
 8016424:	e7b8      	b.n	8016398 <__gethex+0x1d0>
 8016426:	9b01      	ldr	r3, [sp, #4]
 8016428:	685e      	ldr	r6, [r3, #4]
 801642a:	42be      	cmp	r6, r7
 801642c:	dd6f      	ble.n	801650e <__gethex+0x346>
 801642e:	9b00      	ldr	r3, [sp, #0]
 8016430:	1bf6      	subs	r6, r6, r7
 8016432:	42b3      	cmp	r3, r6
 8016434:	dc36      	bgt.n	80164a4 <__gethex+0x2dc>
 8016436:	9b01      	ldr	r3, [sp, #4]
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	2b02      	cmp	r3, #2
 801643c:	d024      	beq.n	8016488 <__gethex+0x2c0>
 801643e:	2b03      	cmp	r3, #3
 8016440:	d026      	beq.n	8016490 <__gethex+0x2c8>
 8016442:	2b01      	cmp	r3, #1
 8016444:	d117      	bne.n	8016476 <__gethex+0x2ae>
 8016446:	9b00      	ldr	r3, [sp, #0]
 8016448:	42b3      	cmp	r3, r6
 801644a:	d114      	bne.n	8016476 <__gethex+0x2ae>
 801644c:	2b01      	cmp	r3, #1
 801644e:	d10b      	bne.n	8016468 <__gethex+0x2a0>
 8016450:	9b01      	ldr	r3, [sp, #4]
 8016452:	9a07      	ldr	r2, [sp, #28]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	2662      	movs	r6, #98	@ 0x62
 8016458:	6013      	str	r3, [r2, #0]
 801645a:	2301      	movs	r3, #1
 801645c:	9a02      	ldr	r2, [sp, #8]
 801645e:	612b      	str	r3, [r5, #16]
 8016460:	6013      	str	r3, [r2, #0]
 8016462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016464:	601d      	str	r5, [r3, #0]
 8016466:	e739      	b.n	80162dc <__gethex+0x114>
 8016468:	9900      	ldr	r1, [sp, #0]
 801646a:	0028      	movs	r0, r5
 801646c:	3901      	subs	r1, #1
 801646e:	f7fe fce8 	bl	8014e42 <__any_on>
 8016472:	2800      	cmp	r0, #0
 8016474:	d1ec      	bne.n	8016450 <__gethex+0x288>
 8016476:	0029      	movs	r1, r5
 8016478:	9803      	ldr	r0, [sp, #12]
 801647a:	f7fe f87f 	bl	801457c <_Bfree>
 801647e:	2300      	movs	r3, #0
 8016480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016482:	2650      	movs	r6, #80	@ 0x50
 8016484:	6013      	str	r3, [r2, #0]
 8016486:	e729      	b.n	80162dc <__gethex+0x114>
 8016488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801648a:	2b00      	cmp	r3, #0
 801648c:	d1f3      	bne.n	8016476 <__gethex+0x2ae>
 801648e:	e7df      	b.n	8016450 <__gethex+0x288>
 8016490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016492:	2b00      	cmp	r3, #0
 8016494:	d1dc      	bne.n	8016450 <__gethex+0x288>
 8016496:	e7ee      	b.n	8016476 <__gethex+0x2ae>
 8016498:	080178e8 	.word	0x080178e8
 801649c:	08017781 	.word	0x08017781
 80164a0:	08017a96 	.word	0x08017a96
 80164a4:	1e77      	subs	r7, r6, #1
 80164a6:	2c00      	cmp	r4, #0
 80164a8:	d12f      	bne.n	801650a <__gethex+0x342>
 80164aa:	2f00      	cmp	r7, #0
 80164ac:	d004      	beq.n	80164b8 <__gethex+0x2f0>
 80164ae:	0039      	movs	r1, r7
 80164b0:	0028      	movs	r0, r5
 80164b2:	f7fe fcc6 	bl	8014e42 <__any_on>
 80164b6:	0004      	movs	r4, r0
 80164b8:	231f      	movs	r3, #31
 80164ba:	117a      	asrs	r2, r7, #5
 80164bc:	401f      	ands	r7, r3
 80164be:	3b1e      	subs	r3, #30
 80164c0:	40bb      	lsls	r3, r7
 80164c2:	9902      	ldr	r1, [sp, #8]
 80164c4:	0092      	lsls	r2, r2, #2
 80164c6:	5852      	ldr	r2, [r2, r1]
 80164c8:	421a      	tst	r2, r3
 80164ca:	d001      	beq.n	80164d0 <__gethex+0x308>
 80164cc:	2302      	movs	r3, #2
 80164ce:	431c      	orrs	r4, r3
 80164d0:	9b00      	ldr	r3, [sp, #0]
 80164d2:	0031      	movs	r1, r6
 80164d4:	1b9b      	subs	r3, r3, r6
 80164d6:	2602      	movs	r6, #2
 80164d8:	0028      	movs	r0, r5
 80164da:	9300      	str	r3, [sp, #0]
 80164dc:	f7ff fe0b 	bl	80160f6 <rshift>
 80164e0:	9b01      	ldr	r3, [sp, #4]
 80164e2:	685f      	ldr	r7, [r3, #4]
 80164e4:	2c00      	cmp	r4, #0
 80164e6:	d03f      	beq.n	8016568 <__gethex+0x3a0>
 80164e8:	9b01      	ldr	r3, [sp, #4]
 80164ea:	68db      	ldr	r3, [r3, #12]
 80164ec:	2b02      	cmp	r3, #2
 80164ee:	d010      	beq.n	8016512 <__gethex+0x34a>
 80164f0:	2b03      	cmp	r3, #3
 80164f2:	d012      	beq.n	801651a <__gethex+0x352>
 80164f4:	2b01      	cmp	r3, #1
 80164f6:	d106      	bne.n	8016506 <__gethex+0x33e>
 80164f8:	07a2      	lsls	r2, r4, #30
 80164fa:	d504      	bpl.n	8016506 <__gethex+0x33e>
 80164fc:	9a02      	ldr	r2, [sp, #8]
 80164fe:	6812      	ldr	r2, [r2, #0]
 8016500:	4314      	orrs	r4, r2
 8016502:	421c      	tst	r4, r3
 8016504:	d10c      	bne.n	8016520 <__gethex+0x358>
 8016506:	2310      	movs	r3, #16
 8016508:	e02d      	b.n	8016566 <__gethex+0x39e>
 801650a:	2401      	movs	r4, #1
 801650c:	e7d4      	b.n	80164b8 <__gethex+0x2f0>
 801650e:	2601      	movs	r6, #1
 8016510:	e7e8      	b.n	80164e4 <__gethex+0x31c>
 8016512:	2301      	movs	r3, #1
 8016514:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016516:	1a9b      	subs	r3, r3, r2
 8016518:	930f      	str	r3, [sp, #60]	@ 0x3c
 801651a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801651c:	2b00      	cmp	r3, #0
 801651e:	d0f2      	beq.n	8016506 <__gethex+0x33e>
 8016520:	692b      	ldr	r3, [r5, #16]
 8016522:	2000      	movs	r0, #0
 8016524:	9302      	str	r3, [sp, #8]
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	9304      	str	r3, [sp, #16]
 801652a:	002b      	movs	r3, r5
 801652c:	9a04      	ldr	r2, [sp, #16]
 801652e:	3314      	adds	r3, #20
 8016530:	1899      	adds	r1, r3, r2
 8016532:	681a      	ldr	r2, [r3, #0]
 8016534:	1c54      	adds	r4, r2, #1
 8016536:	d01c      	beq.n	8016572 <__gethex+0x3aa>
 8016538:	3201      	adds	r2, #1
 801653a:	601a      	str	r2, [r3, #0]
 801653c:	002b      	movs	r3, r5
 801653e:	3314      	adds	r3, #20
 8016540:	2e02      	cmp	r6, #2
 8016542:	d13f      	bne.n	80165c4 <__gethex+0x3fc>
 8016544:	9a01      	ldr	r2, [sp, #4]
 8016546:	9900      	ldr	r1, [sp, #0]
 8016548:	6812      	ldr	r2, [r2, #0]
 801654a:	3a01      	subs	r2, #1
 801654c:	428a      	cmp	r2, r1
 801654e:	d109      	bne.n	8016564 <__gethex+0x39c>
 8016550:	000a      	movs	r2, r1
 8016552:	201f      	movs	r0, #31
 8016554:	4010      	ands	r0, r2
 8016556:	2201      	movs	r2, #1
 8016558:	4082      	lsls	r2, r0
 801655a:	1149      	asrs	r1, r1, #5
 801655c:	0089      	lsls	r1, r1, #2
 801655e:	58cb      	ldr	r3, [r1, r3]
 8016560:	4213      	tst	r3, r2
 8016562:	d13d      	bne.n	80165e0 <__gethex+0x418>
 8016564:	2320      	movs	r3, #32
 8016566:	431e      	orrs	r6, r3
 8016568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801656a:	601d      	str	r5, [r3, #0]
 801656c:	9b07      	ldr	r3, [sp, #28]
 801656e:	601f      	str	r7, [r3, #0]
 8016570:	e6b4      	b.n	80162dc <__gethex+0x114>
 8016572:	c301      	stmia	r3!, {r0}
 8016574:	4299      	cmp	r1, r3
 8016576:	d8dc      	bhi.n	8016532 <__gethex+0x36a>
 8016578:	68ab      	ldr	r3, [r5, #8]
 801657a:	9a02      	ldr	r2, [sp, #8]
 801657c:	429a      	cmp	r2, r3
 801657e:	db18      	blt.n	80165b2 <__gethex+0x3ea>
 8016580:	6869      	ldr	r1, [r5, #4]
 8016582:	9803      	ldr	r0, [sp, #12]
 8016584:	3101      	adds	r1, #1
 8016586:	f7fd ffb5 	bl	80144f4 <_Balloc>
 801658a:	1e04      	subs	r4, r0, #0
 801658c:	d104      	bne.n	8016598 <__gethex+0x3d0>
 801658e:	0022      	movs	r2, r4
 8016590:	2184      	movs	r1, #132	@ 0x84
 8016592:	4b1d      	ldr	r3, [pc, #116]	@ (8016608 <__gethex+0x440>)
 8016594:	481d      	ldr	r0, [pc, #116]	@ (801660c <__gethex+0x444>)
 8016596:	e6c4      	b.n	8016322 <__gethex+0x15a>
 8016598:	0029      	movs	r1, r5
 801659a:	692a      	ldr	r2, [r5, #16]
 801659c:	310c      	adds	r1, #12
 801659e:	3202      	adds	r2, #2
 80165a0:	0092      	lsls	r2, r2, #2
 80165a2:	300c      	adds	r0, #12
 80165a4:	f7fd f814 	bl	80135d0 <memcpy>
 80165a8:	0029      	movs	r1, r5
 80165aa:	9803      	ldr	r0, [sp, #12]
 80165ac:	f7fd ffe6 	bl	801457c <_Bfree>
 80165b0:	0025      	movs	r5, r4
 80165b2:	692b      	ldr	r3, [r5, #16]
 80165b4:	1c5a      	adds	r2, r3, #1
 80165b6:	612a      	str	r2, [r5, #16]
 80165b8:	2201      	movs	r2, #1
 80165ba:	3304      	adds	r3, #4
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	18eb      	adds	r3, r5, r3
 80165c0:	605a      	str	r2, [r3, #4]
 80165c2:	e7bb      	b.n	801653c <__gethex+0x374>
 80165c4:	692a      	ldr	r2, [r5, #16]
 80165c6:	9902      	ldr	r1, [sp, #8]
 80165c8:	428a      	cmp	r2, r1
 80165ca:	dd0b      	ble.n	80165e4 <__gethex+0x41c>
 80165cc:	2101      	movs	r1, #1
 80165ce:	0028      	movs	r0, r5
 80165d0:	f7ff fd91 	bl	80160f6 <rshift>
 80165d4:	9b01      	ldr	r3, [sp, #4]
 80165d6:	3701      	adds	r7, #1
 80165d8:	689b      	ldr	r3, [r3, #8]
 80165da:	42bb      	cmp	r3, r7
 80165dc:	da00      	bge.n	80165e0 <__gethex+0x418>
 80165de:	e6df      	b.n	80163a0 <__gethex+0x1d8>
 80165e0:	2601      	movs	r6, #1
 80165e2:	e7bf      	b.n	8016564 <__gethex+0x39c>
 80165e4:	221f      	movs	r2, #31
 80165e6:	9c00      	ldr	r4, [sp, #0]
 80165e8:	9900      	ldr	r1, [sp, #0]
 80165ea:	4014      	ands	r4, r2
 80165ec:	4211      	tst	r1, r2
 80165ee:	d0f7      	beq.n	80165e0 <__gethex+0x418>
 80165f0:	9a04      	ldr	r2, [sp, #16]
 80165f2:	189b      	adds	r3, r3, r2
 80165f4:	3b04      	subs	r3, #4
 80165f6:	6818      	ldr	r0, [r3, #0]
 80165f8:	f7fe f874 	bl	80146e4 <__hi0bits>
 80165fc:	2320      	movs	r3, #32
 80165fe:	1b1b      	subs	r3, r3, r4
 8016600:	4298      	cmp	r0, r3
 8016602:	dbe3      	blt.n	80165cc <__gethex+0x404>
 8016604:	e7ec      	b.n	80165e0 <__gethex+0x418>
 8016606:	46c0      	nop			@ (mov r8, r8)
 8016608:	08017781 	.word	0x08017781
 801660c:	08017a96 	.word	0x08017a96

08016610 <L_shift>:
 8016610:	2308      	movs	r3, #8
 8016612:	b570      	push	{r4, r5, r6, lr}
 8016614:	2520      	movs	r5, #32
 8016616:	1a9a      	subs	r2, r3, r2
 8016618:	0092      	lsls	r2, r2, #2
 801661a:	1aad      	subs	r5, r5, r2
 801661c:	6843      	ldr	r3, [r0, #4]
 801661e:	6804      	ldr	r4, [r0, #0]
 8016620:	001e      	movs	r6, r3
 8016622:	40ae      	lsls	r6, r5
 8016624:	40d3      	lsrs	r3, r2
 8016626:	4334      	orrs	r4, r6
 8016628:	6004      	str	r4, [r0, #0]
 801662a:	6043      	str	r3, [r0, #4]
 801662c:	3004      	adds	r0, #4
 801662e:	4288      	cmp	r0, r1
 8016630:	d3f4      	bcc.n	801661c <L_shift+0xc>
 8016632:	bd70      	pop	{r4, r5, r6, pc}

08016634 <__match>:
 8016634:	b530      	push	{r4, r5, lr}
 8016636:	6803      	ldr	r3, [r0, #0]
 8016638:	780c      	ldrb	r4, [r1, #0]
 801663a:	3301      	adds	r3, #1
 801663c:	2c00      	cmp	r4, #0
 801663e:	d102      	bne.n	8016646 <__match+0x12>
 8016640:	6003      	str	r3, [r0, #0]
 8016642:	2001      	movs	r0, #1
 8016644:	bd30      	pop	{r4, r5, pc}
 8016646:	781a      	ldrb	r2, [r3, #0]
 8016648:	0015      	movs	r5, r2
 801664a:	3d41      	subs	r5, #65	@ 0x41
 801664c:	2d19      	cmp	r5, #25
 801664e:	d800      	bhi.n	8016652 <__match+0x1e>
 8016650:	3220      	adds	r2, #32
 8016652:	3101      	adds	r1, #1
 8016654:	42a2      	cmp	r2, r4
 8016656:	d0ef      	beq.n	8016638 <__match+0x4>
 8016658:	2000      	movs	r0, #0
 801665a:	e7f3      	b.n	8016644 <__match+0x10>

0801665c <__hexnan>:
 801665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665e:	680b      	ldr	r3, [r1, #0]
 8016660:	b08b      	sub	sp, #44	@ 0x2c
 8016662:	9201      	str	r2, [sp, #4]
 8016664:	9901      	ldr	r1, [sp, #4]
 8016666:	115a      	asrs	r2, r3, #5
 8016668:	0092      	lsls	r2, r2, #2
 801666a:	188a      	adds	r2, r1, r2
 801666c:	9202      	str	r2, [sp, #8]
 801666e:	0019      	movs	r1, r3
 8016670:	221f      	movs	r2, #31
 8016672:	4011      	ands	r1, r2
 8016674:	9008      	str	r0, [sp, #32]
 8016676:	9106      	str	r1, [sp, #24]
 8016678:	4213      	tst	r3, r2
 801667a:	d002      	beq.n	8016682 <__hexnan+0x26>
 801667c:	9b02      	ldr	r3, [sp, #8]
 801667e:	3304      	adds	r3, #4
 8016680:	9302      	str	r3, [sp, #8]
 8016682:	9b02      	ldr	r3, [sp, #8]
 8016684:	2500      	movs	r5, #0
 8016686:	1f1f      	subs	r7, r3, #4
 8016688:	003e      	movs	r6, r7
 801668a:	003c      	movs	r4, r7
 801668c:	9b08      	ldr	r3, [sp, #32]
 801668e:	603d      	str	r5, [r7, #0]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	9507      	str	r5, [sp, #28]
 8016694:	9305      	str	r3, [sp, #20]
 8016696:	9503      	str	r5, [sp, #12]
 8016698:	9b05      	ldr	r3, [sp, #20]
 801669a:	3301      	adds	r3, #1
 801669c:	9309      	str	r3, [sp, #36]	@ 0x24
 801669e:	9b05      	ldr	r3, [sp, #20]
 80166a0:	785b      	ldrb	r3, [r3, #1]
 80166a2:	9304      	str	r3, [sp, #16]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d028      	beq.n	80166fa <__hexnan+0x9e>
 80166a8:	9804      	ldr	r0, [sp, #16]
 80166aa:	f7ff fd77 	bl	801619c <__hexdig_fun>
 80166ae:	2800      	cmp	r0, #0
 80166b0:	d155      	bne.n	801675e <__hexnan+0x102>
 80166b2:	9b04      	ldr	r3, [sp, #16]
 80166b4:	2b20      	cmp	r3, #32
 80166b6:	d819      	bhi.n	80166ec <__hexnan+0x90>
 80166b8:	9b03      	ldr	r3, [sp, #12]
 80166ba:	9a07      	ldr	r2, [sp, #28]
 80166bc:	4293      	cmp	r3, r2
 80166be:	dd12      	ble.n	80166e6 <__hexnan+0x8a>
 80166c0:	42b4      	cmp	r4, r6
 80166c2:	d206      	bcs.n	80166d2 <__hexnan+0x76>
 80166c4:	2d07      	cmp	r5, #7
 80166c6:	dc04      	bgt.n	80166d2 <__hexnan+0x76>
 80166c8:	002a      	movs	r2, r5
 80166ca:	0031      	movs	r1, r6
 80166cc:	0020      	movs	r0, r4
 80166ce:	f7ff ff9f 	bl	8016610 <L_shift>
 80166d2:	9b01      	ldr	r3, [sp, #4]
 80166d4:	2508      	movs	r5, #8
 80166d6:	429c      	cmp	r4, r3
 80166d8:	d905      	bls.n	80166e6 <__hexnan+0x8a>
 80166da:	1f26      	subs	r6, r4, #4
 80166dc:	2500      	movs	r5, #0
 80166de:	0034      	movs	r4, r6
 80166e0:	9b03      	ldr	r3, [sp, #12]
 80166e2:	6035      	str	r5, [r6, #0]
 80166e4:	9307      	str	r3, [sp, #28]
 80166e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166e8:	9305      	str	r3, [sp, #20]
 80166ea:	e7d5      	b.n	8016698 <__hexnan+0x3c>
 80166ec:	9b04      	ldr	r3, [sp, #16]
 80166ee:	2b29      	cmp	r3, #41	@ 0x29
 80166f0:	d15a      	bne.n	80167a8 <__hexnan+0x14c>
 80166f2:	9b05      	ldr	r3, [sp, #20]
 80166f4:	9a08      	ldr	r2, [sp, #32]
 80166f6:	3302      	adds	r3, #2
 80166f8:	6013      	str	r3, [r2, #0]
 80166fa:	9b03      	ldr	r3, [sp, #12]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d053      	beq.n	80167a8 <__hexnan+0x14c>
 8016700:	42b4      	cmp	r4, r6
 8016702:	d206      	bcs.n	8016712 <__hexnan+0xb6>
 8016704:	2d07      	cmp	r5, #7
 8016706:	dc04      	bgt.n	8016712 <__hexnan+0xb6>
 8016708:	002a      	movs	r2, r5
 801670a:	0031      	movs	r1, r6
 801670c:	0020      	movs	r0, r4
 801670e:	f7ff ff7f 	bl	8016610 <L_shift>
 8016712:	9b01      	ldr	r3, [sp, #4]
 8016714:	429c      	cmp	r4, r3
 8016716:	d936      	bls.n	8016786 <__hexnan+0x12a>
 8016718:	001a      	movs	r2, r3
 801671a:	0023      	movs	r3, r4
 801671c:	cb02      	ldmia	r3!, {r1}
 801671e:	c202      	stmia	r2!, {r1}
 8016720:	429f      	cmp	r7, r3
 8016722:	d2fb      	bcs.n	801671c <__hexnan+0xc0>
 8016724:	9b02      	ldr	r3, [sp, #8]
 8016726:	1c61      	adds	r1, r4, #1
 8016728:	1eda      	subs	r2, r3, #3
 801672a:	2304      	movs	r3, #4
 801672c:	4291      	cmp	r1, r2
 801672e:	d805      	bhi.n	801673c <__hexnan+0xe0>
 8016730:	9b02      	ldr	r3, [sp, #8]
 8016732:	3b04      	subs	r3, #4
 8016734:	1b1b      	subs	r3, r3, r4
 8016736:	089b      	lsrs	r3, r3, #2
 8016738:	3301      	adds	r3, #1
 801673a:	009b      	lsls	r3, r3, #2
 801673c:	9a01      	ldr	r2, [sp, #4]
 801673e:	18d3      	adds	r3, r2, r3
 8016740:	2200      	movs	r2, #0
 8016742:	c304      	stmia	r3!, {r2}
 8016744:	429f      	cmp	r7, r3
 8016746:	d2fc      	bcs.n	8016742 <__hexnan+0xe6>
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d104      	bne.n	8016758 <__hexnan+0xfc>
 801674e:	9b01      	ldr	r3, [sp, #4]
 8016750:	429f      	cmp	r7, r3
 8016752:	d127      	bne.n	80167a4 <__hexnan+0x148>
 8016754:	2301      	movs	r3, #1
 8016756:	603b      	str	r3, [r7, #0]
 8016758:	2005      	movs	r0, #5
 801675a:	b00b      	add	sp, #44	@ 0x2c
 801675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801675e:	9b03      	ldr	r3, [sp, #12]
 8016760:	3501      	adds	r5, #1
 8016762:	3301      	adds	r3, #1
 8016764:	9303      	str	r3, [sp, #12]
 8016766:	2d08      	cmp	r5, #8
 8016768:	dd06      	ble.n	8016778 <__hexnan+0x11c>
 801676a:	9b01      	ldr	r3, [sp, #4]
 801676c:	429c      	cmp	r4, r3
 801676e:	d9ba      	bls.n	80166e6 <__hexnan+0x8a>
 8016770:	2300      	movs	r3, #0
 8016772:	2501      	movs	r5, #1
 8016774:	3c04      	subs	r4, #4
 8016776:	6023      	str	r3, [r4, #0]
 8016778:	220f      	movs	r2, #15
 801677a:	6823      	ldr	r3, [r4, #0]
 801677c:	4010      	ands	r0, r2
 801677e:	011b      	lsls	r3, r3, #4
 8016780:	4303      	orrs	r3, r0
 8016782:	6023      	str	r3, [r4, #0]
 8016784:	e7af      	b.n	80166e6 <__hexnan+0x8a>
 8016786:	9b06      	ldr	r3, [sp, #24]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d0dd      	beq.n	8016748 <__hexnan+0xec>
 801678c:	2320      	movs	r3, #32
 801678e:	9a06      	ldr	r2, [sp, #24]
 8016790:	9902      	ldr	r1, [sp, #8]
 8016792:	1a9b      	subs	r3, r3, r2
 8016794:	2201      	movs	r2, #1
 8016796:	4252      	negs	r2, r2
 8016798:	40da      	lsrs	r2, r3
 801679a:	3904      	subs	r1, #4
 801679c:	680b      	ldr	r3, [r1, #0]
 801679e:	4013      	ands	r3, r2
 80167a0:	600b      	str	r3, [r1, #0]
 80167a2:	e7d1      	b.n	8016748 <__hexnan+0xec>
 80167a4:	3f04      	subs	r7, #4
 80167a6:	e7cf      	b.n	8016748 <__hexnan+0xec>
 80167a8:	2004      	movs	r0, #4
 80167aa:	e7d6      	b.n	801675a <__hexnan+0xfe>

080167ac <__ascii_mbtowc>:
 80167ac:	b082      	sub	sp, #8
 80167ae:	2900      	cmp	r1, #0
 80167b0:	d100      	bne.n	80167b4 <__ascii_mbtowc+0x8>
 80167b2:	a901      	add	r1, sp, #4
 80167b4:	1e10      	subs	r0, r2, #0
 80167b6:	d006      	beq.n	80167c6 <__ascii_mbtowc+0x1a>
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d006      	beq.n	80167ca <__ascii_mbtowc+0x1e>
 80167bc:	7813      	ldrb	r3, [r2, #0]
 80167be:	600b      	str	r3, [r1, #0]
 80167c0:	7810      	ldrb	r0, [r2, #0]
 80167c2:	1e43      	subs	r3, r0, #1
 80167c4:	4198      	sbcs	r0, r3
 80167c6:	b002      	add	sp, #8
 80167c8:	4770      	bx	lr
 80167ca:	2002      	movs	r0, #2
 80167cc:	4240      	negs	r0, r0
 80167ce:	e7fa      	b.n	80167c6 <__ascii_mbtowc+0x1a>

080167d0 <_realloc_r>:
 80167d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80167d2:	0006      	movs	r6, r0
 80167d4:	000c      	movs	r4, r1
 80167d6:	0015      	movs	r5, r2
 80167d8:	2900      	cmp	r1, #0
 80167da:	d105      	bne.n	80167e8 <_realloc_r+0x18>
 80167dc:	0011      	movs	r1, r2
 80167de:	f7fd fdf9 	bl	80143d4 <_malloc_r>
 80167e2:	0004      	movs	r4, r0
 80167e4:	0020      	movs	r0, r4
 80167e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80167e8:	2a00      	cmp	r2, #0
 80167ea:	d103      	bne.n	80167f4 <_realloc_r+0x24>
 80167ec:	f7fd fd7c 	bl	80142e8 <_free_r>
 80167f0:	2400      	movs	r4, #0
 80167f2:	e7f7      	b.n	80167e4 <_realloc_r+0x14>
 80167f4:	f000 f83f 	bl	8016876 <_malloc_usable_size_r>
 80167f8:	0007      	movs	r7, r0
 80167fa:	4285      	cmp	r5, r0
 80167fc:	d802      	bhi.n	8016804 <_realloc_r+0x34>
 80167fe:	0843      	lsrs	r3, r0, #1
 8016800:	42ab      	cmp	r3, r5
 8016802:	d3ef      	bcc.n	80167e4 <_realloc_r+0x14>
 8016804:	0029      	movs	r1, r5
 8016806:	0030      	movs	r0, r6
 8016808:	f7fd fde4 	bl	80143d4 <_malloc_r>
 801680c:	9001      	str	r0, [sp, #4]
 801680e:	2800      	cmp	r0, #0
 8016810:	d0ee      	beq.n	80167f0 <_realloc_r+0x20>
 8016812:	002a      	movs	r2, r5
 8016814:	42bd      	cmp	r5, r7
 8016816:	d900      	bls.n	801681a <_realloc_r+0x4a>
 8016818:	003a      	movs	r2, r7
 801681a:	0021      	movs	r1, r4
 801681c:	9801      	ldr	r0, [sp, #4]
 801681e:	f7fc fed7 	bl	80135d0 <memcpy>
 8016822:	0021      	movs	r1, r4
 8016824:	0030      	movs	r0, r6
 8016826:	f7fd fd5f 	bl	80142e8 <_free_r>
 801682a:	9c01      	ldr	r4, [sp, #4]
 801682c:	e7da      	b.n	80167e4 <_realloc_r+0x14>

0801682e <__ascii_wctomb>:
 801682e:	0003      	movs	r3, r0
 8016830:	1e08      	subs	r0, r1, #0
 8016832:	d005      	beq.n	8016840 <__ascii_wctomb+0x12>
 8016834:	2aff      	cmp	r2, #255	@ 0xff
 8016836:	d904      	bls.n	8016842 <__ascii_wctomb+0x14>
 8016838:	228a      	movs	r2, #138	@ 0x8a
 801683a:	2001      	movs	r0, #1
 801683c:	601a      	str	r2, [r3, #0]
 801683e:	4240      	negs	r0, r0
 8016840:	4770      	bx	lr
 8016842:	2001      	movs	r0, #1
 8016844:	700a      	strb	r2, [r1, #0]
 8016846:	e7fb      	b.n	8016840 <__ascii_wctomb+0x12>

08016848 <fiprintf>:
 8016848:	b40e      	push	{r1, r2, r3}
 801684a:	b517      	push	{r0, r1, r2, r4, lr}
 801684c:	4c05      	ldr	r4, [pc, #20]	@ (8016864 <fiprintf+0x1c>)
 801684e:	ab05      	add	r3, sp, #20
 8016850:	cb04      	ldmia	r3!, {r2}
 8016852:	0001      	movs	r1, r0
 8016854:	6820      	ldr	r0, [r4, #0]
 8016856:	9301      	str	r3, [sp, #4]
 8016858:	f000 f83c 	bl	80168d4 <_vfiprintf_r>
 801685c:	bc1e      	pop	{r1, r2, r3, r4}
 801685e:	bc08      	pop	{r3}
 8016860:	b003      	add	sp, #12
 8016862:	4718      	bx	r3
 8016864:	20000094 	.word	0x20000094

08016868 <abort>:
 8016868:	2006      	movs	r0, #6
 801686a:	b510      	push	{r4, lr}
 801686c:	f000 fa18 	bl	8016ca0 <raise>
 8016870:	2001      	movs	r0, #1
 8016872:	f7f1 f8c5 	bl	8007a00 <_exit>

08016876 <_malloc_usable_size_r>:
 8016876:	1f0b      	subs	r3, r1, #4
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	1f18      	subs	r0, r3, #4
 801687c:	2b00      	cmp	r3, #0
 801687e:	da01      	bge.n	8016884 <_malloc_usable_size_r+0xe>
 8016880:	580b      	ldr	r3, [r1, r0]
 8016882:	18c0      	adds	r0, r0, r3
 8016884:	4770      	bx	lr

08016886 <__sfputc_r>:
 8016886:	6893      	ldr	r3, [r2, #8]
 8016888:	b510      	push	{r4, lr}
 801688a:	3b01      	subs	r3, #1
 801688c:	6093      	str	r3, [r2, #8]
 801688e:	2b00      	cmp	r3, #0
 8016890:	da04      	bge.n	801689c <__sfputc_r+0x16>
 8016892:	6994      	ldr	r4, [r2, #24]
 8016894:	42a3      	cmp	r3, r4
 8016896:	db07      	blt.n	80168a8 <__sfputc_r+0x22>
 8016898:	290a      	cmp	r1, #10
 801689a:	d005      	beq.n	80168a8 <__sfputc_r+0x22>
 801689c:	6813      	ldr	r3, [r2, #0]
 801689e:	1c58      	adds	r0, r3, #1
 80168a0:	6010      	str	r0, [r2, #0]
 80168a2:	7019      	strb	r1, [r3, #0]
 80168a4:	0008      	movs	r0, r1
 80168a6:	bd10      	pop	{r4, pc}
 80168a8:	f000 f930 	bl	8016b0c <__swbuf_r>
 80168ac:	0001      	movs	r1, r0
 80168ae:	e7f9      	b.n	80168a4 <__sfputc_r+0x1e>

080168b0 <__sfputs_r>:
 80168b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b2:	0006      	movs	r6, r0
 80168b4:	000f      	movs	r7, r1
 80168b6:	0014      	movs	r4, r2
 80168b8:	18d5      	adds	r5, r2, r3
 80168ba:	42ac      	cmp	r4, r5
 80168bc:	d101      	bne.n	80168c2 <__sfputs_r+0x12>
 80168be:	2000      	movs	r0, #0
 80168c0:	e007      	b.n	80168d2 <__sfputs_r+0x22>
 80168c2:	7821      	ldrb	r1, [r4, #0]
 80168c4:	003a      	movs	r2, r7
 80168c6:	0030      	movs	r0, r6
 80168c8:	f7ff ffdd 	bl	8016886 <__sfputc_r>
 80168cc:	3401      	adds	r4, #1
 80168ce:	1c43      	adds	r3, r0, #1
 80168d0:	d1f3      	bne.n	80168ba <__sfputs_r+0xa>
 80168d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080168d4 <_vfiprintf_r>:
 80168d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168d6:	b0a1      	sub	sp, #132	@ 0x84
 80168d8:	000f      	movs	r7, r1
 80168da:	0015      	movs	r5, r2
 80168dc:	001e      	movs	r6, r3
 80168de:	9003      	str	r0, [sp, #12]
 80168e0:	2800      	cmp	r0, #0
 80168e2:	d004      	beq.n	80168ee <_vfiprintf_r+0x1a>
 80168e4:	6a03      	ldr	r3, [r0, #32]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d101      	bne.n	80168ee <_vfiprintf_r+0x1a>
 80168ea:	f7fc fc73 	bl	80131d4 <__sinit>
 80168ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80168f0:	07db      	lsls	r3, r3, #31
 80168f2:	d405      	bmi.n	8016900 <_vfiprintf_r+0x2c>
 80168f4:	89bb      	ldrh	r3, [r7, #12]
 80168f6:	059b      	lsls	r3, r3, #22
 80168f8:	d402      	bmi.n	8016900 <_vfiprintf_r+0x2c>
 80168fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80168fc:	f7fc fe5b 	bl	80135b6 <__retarget_lock_acquire_recursive>
 8016900:	89bb      	ldrh	r3, [r7, #12]
 8016902:	071b      	lsls	r3, r3, #28
 8016904:	d502      	bpl.n	801690c <_vfiprintf_r+0x38>
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d113      	bne.n	8016934 <_vfiprintf_r+0x60>
 801690c:	0039      	movs	r1, r7
 801690e:	9803      	ldr	r0, [sp, #12]
 8016910:	f000 f93e 	bl	8016b90 <__swsetup_r>
 8016914:	2800      	cmp	r0, #0
 8016916:	d00d      	beq.n	8016934 <_vfiprintf_r+0x60>
 8016918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801691a:	07db      	lsls	r3, r3, #31
 801691c:	d503      	bpl.n	8016926 <_vfiprintf_r+0x52>
 801691e:	2001      	movs	r0, #1
 8016920:	4240      	negs	r0, r0
 8016922:	b021      	add	sp, #132	@ 0x84
 8016924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016926:	89bb      	ldrh	r3, [r7, #12]
 8016928:	059b      	lsls	r3, r3, #22
 801692a:	d4f8      	bmi.n	801691e <_vfiprintf_r+0x4a>
 801692c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801692e:	f7fc fe43 	bl	80135b8 <__retarget_lock_release_recursive>
 8016932:	e7f4      	b.n	801691e <_vfiprintf_r+0x4a>
 8016934:	2300      	movs	r3, #0
 8016936:	ac08      	add	r4, sp, #32
 8016938:	6163      	str	r3, [r4, #20]
 801693a:	3320      	adds	r3, #32
 801693c:	7663      	strb	r3, [r4, #25]
 801693e:	3310      	adds	r3, #16
 8016940:	76a3      	strb	r3, [r4, #26]
 8016942:	9607      	str	r6, [sp, #28]
 8016944:	002e      	movs	r6, r5
 8016946:	7833      	ldrb	r3, [r6, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d001      	beq.n	8016950 <_vfiprintf_r+0x7c>
 801694c:	2b25      	cmp	r3, #37	@ 0x25
 801694e:	d148      	bne.n	80169e2 <_vfiprintf_r+0x10e>
 8016950:	1b73      	subs	r3, r6, r5
 8016952:	9305      	str	r3, [sp, #20]
 8016954:	42ae      	cmp	r6, r5
 8016956:	d00b      	beq.n	8016970 <_vfiprintf_r+0x9c>
 8016958:	002a      	movs	r2, r5
 801695a:	0039      	movs	r1, r7
 801695c:	9803      	ldr	r0, [sp, #12]
 801695e:	f7ff ffa7 	bl	80168b0 <__sfputs_r>
 8016962:	3001      	adds	r0, #1
 8016964:	d100      	bne.n	8016968 <_vfiprintf_r+0x94>
 8016966:	e0ae      	b.n	8016ac6 <_vfiprintf_r+0x1f2>
 8016968:	6963      	ldr	r3, [r4, #20]
 801696a:	9a05      	ldr	r2, [sp, #20]
 801696c:	189b      	adds	r3, r3, r2
 801696e:	6163      	str	r3, [r4, #20]
 8016970:	7833      	ldrb	r3, [r6, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d100      	bne.n	8016978 <_vfiprintf_r+0xa4>
 8016976:	e0a6      	b.n	8016ac6 <_vfiprintf_r+0x1f2>
 8016978:	2201      	movs	r2, #1
 801697a:	2300      	movs	r3, #0
 801697c:	4252      	negs	r2, r2
 801697e:	6062      	str	r2, [r4, #4]
 8016980:	a904      	add	r1, sp, #16
 8016982:	3254      	adds	r2, #84	@ 0x54
 8016984:	1852      	adds	r2, r2, r1
 8016986:	1c75      	adds	r5, r6, #1
 8016988:	6023      	str	r3, [r4, #0]
 801698a:	60e3      	str	r3, [r4, #12]
 801698c:	60a3      	str	r3, [r4, #8]
 801698e:	7013      	strb	r3, [r2, #0]
 8016990:	65a3      	str	r3, [r4, #88]	@ 0x58
 8016992:	4b59      	ldr	r3, [pc, #356]	@ (8016af8 <_vfiprintf_r+0x224>)
 8016994:	2205      	movs	r2, #5
 8016996:	0018      	movs	r0, r3
 8016998:	7829      	ldrb	r1, [r5, #0]
 801699a:	9305      	str	r3, [sp, #20]
 801699c:	f7fc fe0d 	bl	80135ba <memchr>
 80169a0:	1c6e      	adds	r6, r5, #1
 80169a2:	2800      	cmp	r0, #0
 80169a4:	d11f      	bne.n	80169e6 <_vfiprintf_r+0x112>
 80169a6:	6822      	ldr	r2, [r4, #0]
 80169a8:	06d3      	lsls	r3, r2, #27
 80169aa:	d504      	bpl.n	80169b6 <_vfiprintf_r+0xe2>
 80169ac:	2353      	movs	r3, #83	@ 0x53
 80169ae:	a904      	add	r1, sp, #16
 80169b0:	185b      	adds	r3, r3, r1
 80169b2:	2120      	movs	r1, #32
 80169b4:	7019      	strb	r1, [r3, #0]
 80169b6:	0713      	lsls	r3, r2, #28
 80169b8:	d504      	bpl.n	80169c4 <_vfiprintf_r+0xf0>
 80169ba:	2353      	movs	r3, #83	@ 0x53
 80169bc:	a904      	add	r1, sp, #16
 80169be:	185b      	adds	r3, r3, r1
 80169c0:	212b      	movs	r1, #43	@ 0x2b
 80169c2:	7019      	strb	r1, [r3, #0]
 80169c4:	782b      	ldrb	r3, [r5, #0]
 80169c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80169c8:	d016      	beq.n	80169f8 <_vfiprintf_r+0x124>
 80169ca:	002e      	movs	r6, r5
 80169cc:	2100      	movs	r1, #0
 80169ce:	200a      	movs	r0, #10
 80169d0:	68e3      	ldr	r3, [r4, #12]
 80169d2:	7832      	ldrb	r2, [r6, #0]
 80169d4:	1c75      	adds	r5, r6, #1
 80169d6:	3a30      	subs	r2, #48	@ 0x30
 80169d8:	2a09      	cmp	r2, #9
 80169da:	d950      	bls.n	8016a7e <_vfiprintf_r+0x1aa>
 80169dc:	2900      	cmp	r1, #0
 80169de:	d111      	bne.n	8016a04 <_vfiprintf_r+0x130>
 80169e0:	e017      	b.n	8016a12 <_vfiprintf_r+0x13e>
 80169e2:	3601      	adds	r6, #1
 80169e4:	e7af      	b.n	8016946 <_vfiprintf_r+0x72>
 80169e6:	9b05      	ldr	r3, [sp, #20]
 80169e8:	6822      	ldr	r2, [r4, #0]
 80169ea:	1ac0      	subs	r0, r0, r3
 80169ec:	2301      	movs	r3, #1
 80169ee:	4083      	lsls	r3, r0
 80169f0:	4313      	orrs	r3, r2
 80169f2:	0035      	movs	r5, r6
 80169f4:	6023      	str	r3, [r4, #0]
 80169f6:	e7cc      	b.n	8016992 <_vfiprintf_r+0xbe>
 80169f8:	9b07      	ldr	r3, [sp, #28]
 80169fa:	1d19      	adds	r1, r3, #4
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	9107      	str	r1, [sp, #28]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	db01      	blt.n	8016a08 <_vfiprintf_r+0x134>
 8016a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016a06:	e004      	b.n	8016a12 <_vfiprintf_r+0x13e>
 8016a08:	425b      	negs	r3, r3
 8016a0a:	60e3      	str	r3, [r4, #12]
 8016a0c:	2302      	movs	r3, #2
 8016a0e:	4313      	orrs	r3, r2
 8016a10:	6023      	str	r3, [r4, #0]
 8016a12:	7833      	ldrb	r3, [r6, #0]
 8016a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a16:	d10c      	bne.n	8016a32 <_vfiprintf_r+0x15e>
 8016a18:	7873      	ldrb	r3, [r6, #1]
 8016a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a1c:	d134      	bne.n	8016a88 <_vfiprintf_r+0x1b4>
 8016a1e:	9b07      	ldr	r3, [sp, #28]
 8016a20:	3602      	adds	r6, #2
 8016a22:	1d1a      	adds	r2, r3, #4
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	9207      	str	r2, [sp, #28]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	da01      	bge.n	8016a30 <_vfiprintf_r+0x15c>
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	425b      	negs	r3, r3
 8016a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a32:	4d32      	ldr	r5, [pc, #200]	@ (8016afc <_vfiprintf_r+0x228>)
 8016a34:	2203      	movs	r2, #3
 8016a36:	0028      	movs	r0, r5
 8016a38:	7831      	ldrb	r1, [r6, #0]
 8016a3a:	f7fc fdbe 	bl	80135ba <memchr>
 8016a3e:	2800      	cmp	r0, #0
 8016a40:	d006      	beq.n	8016a50 <_vfiprintf_r+0x17c>
 8016a42:	2340      	movs	r3, #64	@ 0x40
 8016a44:	1b40      	subs	r0, r0, r5
 8016a46:	4083      	lsls	r3, r0
 8016a48:	6822      	ldr	r2, [r4, #0]
 8016a4a:	3601      	adds	r6, #1
 8016a4c:	4313      	orrs	r3, r2
 8016a4e:	6023      	str	r3, [r4, #0]
 8016a50:	7831      	ldrb	r1, [r6, #0]
 8016a52:	2206      	movs	r2, #6
 8016a54:	482a      	ldr	r0, [pc, #168]	@ (8016b00 <_vfiprintf_r+0x22c>)
 8016a56:	1c75      	adds	r5, r6, #1
 8016a58:	7621      	strb	r1, [r4, #24]
 8016a5a:	f7fc fdae 	bl	80135ba <memchr>
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	d040      	beq.n	8016ae4 <_vfiprintf_r+0x210>
 8016a62:	4b28      	ldr	r3, [pc, #160]	@ (8016b04 <_vfiprintf_r+0x230>)
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d122      	bne.n	8016aae <_vfiprintf_r+0x1da>
 8016a68:	2207      	movs	r2, #7
 8016a6a:	9b07      	ldr	r3, [sp, #28]
 8016a6c:	3307      	adds	r3, #7
 8016a6e:	4393      	bics	r3, r2
 8016a70:	3308      	adds	r3, #8
 8016a72:	9307      	str	r3, [sp, #28]
 8016a74:	6963      	ldr	r3, [r4, #20]
 8016a76:	9a04      	ldr	r2, [sp, #16]
 8016a78:	189b      	adds	r3, r3, r2
 8016a7a:	6163      	str	r3, [r4, #20]
 8016a7c:	e762      	b.n	8016944 <_vfiprintf_r+0x70>
 8016a7e:	4343      	muls	r3, r0
 8016a80:	002e      	movs	r6, r5
 8016a82:	2101      	movs	r1, #1
 8016a84:	189b      	adds	r3, r3, r2
 8016a86:	e7a4      	b.n	80169d2 <_vfiprintf_r+0xfe>
 8016a88:	2300      	movs	r3, #0
 8016a8a:	200a      	movs	r0, #10
 8016a8c:	0019      	movs	r1, r3
 8016a8e:	3601      	adds	r6, #1
 8016a90:	6063      	str	r3, [r4, #4]
 8016a92:	7832      	ldrb	r2, [r6, #0]
 8016a94:	1c75      	adds	r5, r6, #1
 8016a96:	3a30      	subs	r2, #48	@ 0x30
 8016a98:	2a09      	cmp	r2, #9
 8016a9a:	d903      	bls.n	8016aa4 <_vfiprintf_r+0x1d0>
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d0c8      	beq.n	8016a32 <_vfiprintf_r+0x15e>
 8016aa0:	9109      	str	r1, [sp, #36]	@ 0x24
 8016aa2:	e7c6      	b.n	8016a32 <_vfiprintf_r+0x15e>
 8016aa4:	4341      	muls	r1, r0
 8016aa6:	002e      	movs	r6, r5
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	1889      	adds	r1, r1, r2
 8016aac:	e7f1      	b.n	8016a92 <_vfiprintf_r+0x1be>
 8016aae:	aa07      	add	r2, sp, #28
 8016ab0:	9200      	str	r2, [sp, #0]
 8016ab2:	0021      	movs	r1, r4
 8016ab4:	003a      	movs	r2, r7
 8016ab6:	4b14      	ldr	r3, [pc, #80]	@ (8016b08 <_vfiprintf_r+0x234>)
 8016ab8:	9803      	ldr	r0, [sp, #12]
 8016aba:	f7fb fd31 	bl	8012520 <_printf_float>
 8016abe:	9004      	str	r0, [sp, #16]
 8016ac0:	9b04      	ldr	r3, [sp, #16]
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	d1d6      	bne.n	8016a74 <_vfiprintf_r+0x1a0>
 8016ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ac8:	07db      	lsls	r3, r3, #31
 8016aca:	d405      	bmi.n	8016ad8 <_vfiprintf_r+0x204>
 8016acc:	89bb      	ldrh	r3, [r7, #12]
 8016ace:	059b      	lsls	r3, r3, #22
 8016ad0:	d402      	bmi.n	8016ad8 <_vfiprintf_r+0x204>
 8016ad2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016ad4:	f7fc fd70 	bl	80135b8 <__retarget_lock_release_recursive>
 8016ad8:	89bb      	ldrh	r3, [r7, #12]
 8016ada:	065b      	lsls	r3, r3, #25
 8016adc:	d500      	bpl.n	8016ae0 <_vfiprintf_r+0x20c>
 8016ade:	e71e      	b.n	801691e <_vfiprintf_r+0x4a>
 8016ae0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8016ae2:	e71e      	b.n	8016922 <_vfiprintf_r+0x4e>
 8016ae4:	aa07      	add	r2, sp, #28
 8016ae6:	9200      	str	r2, [sp, #0]
 8016ae8:	0021      	movs	r1, r4
 8016aea:	003a      	movs	r2, r7
 8016aec:	4b06      	ldr	r3, [pc, #24]	@ (8016b08 <_vfiprintf_r+0x234>)
 8016aee:	9803      	ldr	r0, [sp, #12]
 8016af0:	f7fb ffc4 	bl	8012a7c <_printf_i>
 8016af4:	e7e3      	b.n	8016abe <_vfiprintf_r+0x1ea>
 8016af6:	46c0      	nop			@ (mov r8, r8)
 8016af8:	08017a41 	.word	0x08017a41
 8016afc:	08017a47 	.word	0x08017a47
 8016b00:	08017a4b 	.word	0x08017a4b
 8016b04:	08012521 	.word	0x08012521
 8016b08:	080168b1 	.word	0x080168b1

08016b0c <__swbuf_r>:
 8016b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b0e:	0006      	movs	r6, r0
 8016b10:	000d      	movs	r5, r1
 8016b12:	0014      	movs	r4, r2
 8016b14:	2800      	cmp	r0, #0
 8016b16:	d004      	beq.n	8016b22 <__swbuf_r+0x16>
 8016b18:	6a03      	ldr	r3, [r0, #32]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d101      	bne.n	8016b22 <__swbuf_r+0x16>
 8016b1e:	f7fc fb59 	bl	80131d4 <__sinit>
 8016b22:	69a3      	ldr	r3, [r4, #24]
 8016b24:	60a3      	str	r3, [r4, #8]
 8016b26:	89a3      	ldrh	r3, [r4, #12]
 8016b28:	071b      	lsls	r3, r3, #28
 8016b2a:	d502      	bpl.n	8016b32 <__swbuf_r+0x26>
 8016b2c:	6923      	ldr	r3, [r4, #16]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d109      	bne.n	8016b46 <__swbuf_r+0x3a>
 8016b32:	0021      	movs	r1, r4
 8016b34:	0030      	movs	r0, r6
 8016b36:	f000 f82b 	bl	8016b90 <__swsetup_r>
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	d003      	beq.n	8016b46 <__swbuf_r+0x3a>
 8016b3e:	2501      	movs	r5, #1
 8016b40:	426d      	negs	r5, r5
 8016b42:	0028      	movs	r0, r5
 8016b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b46:	6923      	ldr	r3, [r4, #16]
 8016b48:	6820      	ldr	r0, [r4, #0]
 8016b4a:	b2ef      	uxtb	r7, r5
 8016b4c:	1ac0      	subs	r0, r0, r3
 8016b4e:	6963      	ldr	r3, [r4, #20]
 8016b50:	b2ed      	uxtb	r5, r5
 8016b52:	4283      	cmp	r3, r0
 8016b54:	dc05      	bgt.n	8016b62 <__swbuf_r+0x56>
 8016b56:	0021      	movs	r1, r4
 8016b58:	0030      	movs	r0, r6
 8016b5a:	f7ff fa19 	bl	8015f90 <_fflush_r>
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	d1ed      	bne.n	8016b3e <__swbuf_r+0x32>
 8016b62:	68a3      	ldr	r3, [r4, #8]
 8016b64:	3001      	adds	r0, #1
 8016b66:	3b01      	subs	r3, #1
 8016b68:	60a3      	str	r3, [r4, #8]
 8016b6a:	6823      	ldr	r3, [r4, #0]
 8016b6c:	1c5a      	adds	r2, r3, #1
 8016b6e:	6022      	str	r2, [r4, #0]
 8016b70:	701f      	strb	r7, [r3, #0]
 8016b72:	6963      	ldr	r3, [r4, #20]
 8016b74:	4283      	cmp	r3, r0
 8016b76:	d004      	beq.n	8016b82 <__swbuf_r+0x76>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	07db      	lsls	r3, r3, #31
 8016b7c:	d5e1      	bpl.n	8016b42 <__swbuf_r+0x36>
 8016b7e:	2d0a      	cmp	r5, #10
 8016b80:	d1df      	bne.n	8016b42 <__swbuf_r+0x36>
 8016b82:	0021      	movs	r1, r4
 8016b84:	0030      	movs	r0, r6
 8016b86:	f7ff fa03 	bl	8015f90 <_fflush_r>
 8016b8a:	2800      	cmp	r0, #0
 8016b8c:	d0d9      	beq.n	8016b42 <__swbuf_r+0x36>
 8016b8e:	e7d6      	b.n	8016b3e <__swbuf_r+0x32>

08016b90 <__swsetup_r>:
 8016b90:	4b2d      	ldr	r3, [pc, #180]	@ (8016c48 <__swsetup_r+0xb8>)
 8016b92:	b570      	push	{r4, r5, r6, lr}
 8016b94:	0005      	movs	r5, r0
 8016b96:	6818      	ldr	r0, [r3, #0]
 8016b98:	000c      	movs	r4, r1
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	d004      	beq.n	8016ba8 <__swsetup_r+0x18>
 8016b9e:	6a03      	ldr	r3, [r0, #32]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d101      	bne.n	8016ba8 <__swsetup_r+0x18>
 8016ba4:	f7fc fb16 	bl	80131d4 <__sinit>
 8016ba8:	230c      	movs	r3, #12
 8016baa:	5ee2      	ldrsh	r2, [r4, r3]
 8016bac:	0713      	lsls	r3, r2, #28
 8016bae:	d423      	bmi.n	8016bf8 <__swsetup_r+0x68>
 8016bb0:	06d3      	lsls	r3, r2, #27
 8016bb2:	d407      	bmi.n	8016bc4 <__swsetup_r+0x34>
 8016bb4:	2309      	movs	r3, #9
 8016bb6:	602b      	str	r3, [r5, #0]
 8016bb8:	2340      	movs	r3, #64	@ 0x40
 8016bba:	2001      	movs	r0, #1
 8016bbc:	4313      	orrs	r3, r2
 8016bbe:	81a3      	strh	r3, [r4, #12]
 8016bc0:	4240      	negs	r0, r0
 8016bc2:	e03a      	b.n	8016c3a <__swsetup_r+0xaa>
 8016bc4:	0752      	lsls	r2, r2, #29
 8016bc6:	d513      	bpl.n	8016bf0 <__swsetup_r+0x60>
 8016bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016bca:	2900      	cmp	r1, #0
 8016bcc:	d008      	beq.n	8016be0 <__swsetup_r+0x50>
 8016bce:	0023      	movs	r3, r4
 8016bd0:	3344      	adds	r3, #68	@ 0x44
 8016bd2:	4299      	cmp	r1, r3
 8016bd4:	d002      	beq.n	8016bdc <__swsetup_r+0x4c>
 8016bd6:	0028      	movs	r0, r5
 8016bd8:	f7fd fb86 	bl	80142e8 <_free_r>
 8016bdc:	2300      	movs	r3, #0
 8016bde:	6363      	str	r3, [r4, #52]	@ 0x34
 8016be0:	2224      	movs	r2, #36	@ 0x24
 8016be2:	89a3      	ldrh	r3, [r4, #12]
 8016be4:	4393      	bics	r3, r2
 8016be6:	81a3      	strh	r3, [r4, #12]
 8016be8:	2300      	movs	r3, #0
 8016bea:	6063      	str	r3, [r4, #4]
 8016bec:	6923      	ldr	r3, [r4, #16]
 8016bee:	6023      	str	r3, [r4, #0]
 8016bf0:	2308      	movs	r3, #8
 8016bf2:	89a2      	ldrh	r2, [r4, #12]
 8016bf4:	4313      	orrs	r3, r2
 8016bf6:	81a3      	strh	r3, [r4, #12]
 8016bf8:	6923      	ldr	r3, [r4, #16]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d10b      	bne.n	8016c16 <__swsetup_r+0x86>
 8016bfe:	21a0      	movs	r1, #160	@ 0xa0
 8016c00:	2280      	movs	r2, #128	@ 0x80
 8016c02:	89a3      	ldrh	r3, [r4, #12]
 8016c04:	0089      	lsls	r1, r1, #2
 8016c06:	0092      	lsls	r2, r2, #2
 8016c08:	400b      	ands	r3, r1
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	d003      	beq.n	8016c16 <__swsetup_r+0x86>
 8016c0e:	0021      	movs	r1, r4
 8016c10:	0028      	movs	r0, r5
 8016c12:	f000 f88f 	bl	8016d34 <__smakebuf_r>
 8016c16:	230c      	movs	r3, #12
 8016c18:	5ee2      	ldrsh	r2, [r4, r3]
 8016c1a:	2101      	movs	r1, #1
 8016c1c:	0013      	movs	r3, r2
 8016c1e:	400b      	ands	r3, r1
 8016c20:	420a      	tst	r2, r1
 8016c22:	d00b      	beq.n	8016c3c <__swsetup_r+0xac>
 8016c24:	2300      	movs	r3, #0
 8016c26:	60a3      	str	r3, [r4, #8]
 8016c28:	6963      	ldr	r3, [r4, #20]
 8016c2a:	425b      	negs	r3, r3
 8016c2c:	61a3      	str	r3, [r4, #24]
 8016c2e:	2000      	movs	r0, #0
 8016c30:	6923      	ldr	r3, [r4, #16]
 8016c32:	4283      	cmp	r3, r0
 8016c34:	d101      	bne.n	8016c3a <__swsetup_r+0xaa>
 8016c36:	0613      	lsls	r3, r2, #24
 8016c38:	d4be      	bmi.n	8016bb8 <__swsetup_r+0x28>
 8016c3a:	bd70      	pop	{r4, r5, r6, pc}
 8016c3c:	0791      	lsls	r1, r2, #30
 8016c3e:	d400      	bmi.n	8016c42 <__swsetup_r+0xb2>
 8016c40:	6963      	ldr	r3, [r4, #20]
 8016c42:	60a3      	str	r3, [r4, #8]
 8016c44:	e7f3      	b.n	8016c2e <__swsetup_r+0x9e>
 8016c46:	46c0      	nop			@ (mov r8, r8)
 8016c48:	20000094 	.word	0x20000094

08016c4c <_raise_r>:
 8016c4c:	b570      	push	{r4, r5, r6, lr}
 8016c4e:	0004      	movs	r4, r0
 8016c50:	000d      	movs	r5, r1
 8016c52:	291f      	cmp	r1, #31
 8016c54:	d904      	bls.n	8016c60 <_raise_r+0x14>
 8016c56:	2316      	movs	r3, #22
 8016c58:	6003      	str	r3, [r0, #0]
 8016c5a:	2001      	movs	r0, #1
 8016c5c:	4240      	negs	r0, r0
 8016c5e:	bd70      	pop	{r4, r5, r6, pc}
 8016c60:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d004      	beq.n	8016c70 <_raise_r+0x24>
 8016c66:	008a      	lsls	r2, r1, #2
 8016c68:	189b      	adds	r3, r3, r2
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	2a00      	cmp	r2, #0
 8016c6e:	d108      	bne.n	8016c82 <_raise_r+0x36>
 8016c70:	0020      	movs	r0, r4
 8016c72:	f000 f831 	bl	8016cd8 <_getpid_r>
 8016c76:	002a      	movs	r2, r5
 8016c78:	0001      	movs	r1, r0
 8016c7a:	0020      	movs	r0, r4
 8016c7c:	f000 f81a 	bl	8016cb4 <_kill_r>
 8016c80:	e7ed      	b.n	8016c5e <_raise_r+0x12>
 8016c82:	2a01      	cmp	r2, #1
 8016c84:	d009      	beq.n	8016c9a <_raise_r+0x4e>
 8016c86:	1c51      	adds	r1, r2, #1
 8016c88:	d103      	bne.n	8016c92 <_raise_r+0x46>
 8016c8a:	2316      	movs	r3, #22
 8016c8c:	6003      	str	r3, [r0, #0]
 8016c8e:	2001      	movs	r0, #1
 8016c90:	e7e5      	b.n	8016c5e <_raise_r+0x12>
 8016c92:	2100      	movs	r1, #0
 8016c94:	0028      	movs	r0, r5
 8016c96:	6019      	str	r1, [r3, #0]
 8016c98:	4790      	blx	r2
 8016c9a:	2000      	movs	r0, #0
 8016c9c:	e7df      	b.n	8016c5e <_raise_r+0x12>
	...

08016ca0 <raise>:
 8016ca0:	b510      	push	{r4, lr}
 8016ca2:	4b03      	ldr	r3, [pc, #12]	@ (8016cb0 <raise+0x10>)
 8016ca4:	0001      	movs	r1, r0
 8016ca6:	6818      	ldr	r0, [r3, #0]
 8016ca8:	f7ff ffd0 	bl	8016c4c <_raise_r>
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	46c0      	nop			@ (mov r8, r8)
 8016cb0:	20000094 	.word	0x20000094

08016cb4 <_kill_r>:
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	b570      	push	{r4, r5, r6, lr}
 8016cb8:	4d06      	ldr	r5, [pc, #24]	@ (8016cd4 <_kill_r+0x20>)
 8016cba:	0004      	movs	r4, r0
 8016cbc:	0008      	movs	r0, r1
 8016cbe:	0011      	movs	r1, r2
 8016cc0:	602b      	str	r3, [r5, #0]
 8016cc2:	f7f0 fe8d 	bl	80079e0 <_kill>
 8016cc6:	1c43      	adds	r3, r0, #1
 8016cc8:	d103      	bne.n	8016cd2 <_kill_r+0x1e>
 8016cca:	682b      	ldr	r3, [r5, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d000      	beq.n	8016cd2 <_kill_r+0x1e>
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	bd70      	pop	{r4, r5, r6, pc}
 8016cd4:	20007280 	.word	0x20007280

08016cd8 <_getpid_r>:
 8016cd8:	b510      	push	{r4, lr}
 8016cda:	f7f0 fe7b 	bl	80079d4 <_getpid>
 8016cde:	bd10      	pop	{r4, pc}

08016ce0 <__swhatbuf_r>:
 8016ce0:	b570      	push	{r4, r5, r6, lr}
 8016ce2:	000e      	movs	r6, r1
 8016ce4:	001d      	movs	r5, r3
 8016ce6:	230e      	movs	r3, #14
 8016ce8:	5ec9      	ldrsh	r1, [r1, r3]
 8016cea:	0014      	movs	r4, r2
 8016cec:	b096      	sub	sp, #88	@ 0x58
 8016cee:	2900      	cmp	r1, #0
 8016cf0:	da0c      	bge.n	8016d0c <__swhatbuf_r+0x2c>
 8016cf2:	89b2      	ldrh	r2, [r6, #12]
 8016cf4:	2380      	movs	r3, #128	@ 0x80
 8016cf6:	0011      	movs	r1, r2
 8016cf8:	4019      	ands	r1, r3
 8016cfa:	421a      	tst	r2, r3
 8016cfc:	d114      	bne.n	8016d28 <__swhatbuf_r+0x48>
 8016cfe:	2380      	movs	r3, #128	@ 0x80
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	2000      	movs	r0, #0
 8016d04:	6029      	str	r1, [r5, #0]
 8016d06:	6023      	str	r3, [r4, #0]
 8016d08:	b016      	add	sp, #88	@ 0x58
 8016d0a:	bd70      	pop	{r4, r5, r6, pc}
 8016d0c:	466a      	mov	r2, sp
 8016d0e:	f000 f853 	bl	8016db8 <_fstat_r>
 8016d12:	2800      	cmp	r0, #0
 8016d14:	dbed      	blt.n	8016cf2 <__swhatbuf_r+0x12>
 8016d16:	23f0      	movs	r3, #240	@ 0xf0
 8016d18:	9901      	ldr	r1, [sp, #4]
 8016d1a:	021b      	lsls	r3, r3, #8
 8016d1c:	4019      	ands	r1, r3
 8016d1e:	4b04      	ldr	r3, [pc, #16]	@ (8016d30 <__swhatbuf_r+0x50>)
 8016d20:	18c9      	adds	r1, r1, r3
 8016d22:	424b      	negs	r3, r1
 8016d24:	4159      	adcs	r1, r3
 8016d26:	e7ea      	b.n	8016cfe <__swhatbuf_r+0x1e>
 8016d28:	2100      	movs	r1, #0
 8016d2a:	2340      	movs	r3, #64	@ 0x40
 8016d2c:	e7e9      	b.n	8016d02 <__swhatbuf_r+0x22>
 8016d2e:	46c0      	nop			@ (mov r8, r8)
 8016d30:	ffffe000 	.word	0xffffe000

08016d34 <__smakebuf_r>:
 8016d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d36:	2602      	movs	r6, #2
 8016d38:	898b      	ldrh	r3, [r1, #12]
 8016d3a:	0005      	movs	r5, r0
 8016d3c:	000c      	movs	r4, r1
 8016d3e:	b085      	sub	sp, #20
 8016d40:	4233      	tst	r3, r6
 8016d42:	d007      	beq.n	8016d54 <__smakebuf_r+0x20>
 8016d44:	0023      	movs	r3, r4
 8016d46:	3347      	adds	r3, #71	@ 0x47
 8016d48:	6023      	str	r3, [r4, #0]
 8016d4a:	6123      	str	r3, [r4, #16]
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	6163      	str	r3, [r4, #20]
 8016d50:	b005      	add	sp, #20
 8016d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d54:	ab03      	add	r3, sp, #12
 8016d56:	aa02      	add	r2, sp, #8
 8016d58:	f7ff ffc2 	bl	8016ce0 <__swhatbuf_r>
 8016d5c:	9f02      	ldr	r7, [sp, #8]
 8016d5e:	9001      	str	r0, [sp, #4]
 8016d60:	0039      	movs	r1, r7
 8016d62:	0028      	movs	r0, r5
 8016d64:	f7fd fb36 	bl	80143d4 <_malloc_r>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	d108      	bne.n	8016d7e <__smakebuf_r+0x4a>
 8016d6c:	220c      	movs	r2, #12
 8016d6e:	5ea3      	ldrsh	r3, [r4, r2]
 8016d70:	059a      	lsls	r2, r3, #22
 8016d72:	d4ed      	bmi.n	8016d50 <__smakebuf_r+0x1c>
 8016d74:	2203      	movs	r2, #3
 8016d76:	4393      	bics	r3, r2
 8016d78:	431e      	orrs	r6, r3
 8016d7a:	81a6      	strh	r6, [r4, #12]
 8016d7c:	e7e2      	b.n	8016d44 <__smakebuf_r+0x10>
 8016d7e:	2380      	movs	r3, #128	@ 0x80
 8016d80:	89a2      	ldrh	r2, [r4, #12]
 8016d82:	6020      	str	r0, [r4, #0]
 8016d84:	4313      	orrs	r3, r2
 8016d86:	81a3      	strh	r3, [r4, #12]
 8016d88:	9b03      	ldr	r3, [sp, #12]
 8016d8a:	6120      	str	r0, [r4, #16]
 8016d8c:	6167      	str	r7, [r4, #20]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d00c      	beq.n	8016dac <__smakebuf_r+0x78>
 8016d92:	0028      	movs	r0, r5
 8016d94:	230e      	movs	r3, #14
 8016d96:	5ee1      	ldrsh	r1, [r4, r3]
 8016d98:	f000 f820 	bl	8016ddc <_isatty_r>
 8016d9c:	2800      	cmp	r0, #0
 8016d9e:	d005      	beq.n	8016dac <__smakebuf_r+0x78>
 8016da0:	2303      	movs	r3, #3
 8016da2:	89a2      	ldrh	r2, [r4, #12]
 8016da4:	439a      	bics	r2, r3
 8016da6:	3b02      	subs	r3, #2
 8016da8:	4313      	orrs	r3, r2
 8016daa:	81a3      	strh	r3, [r4, #12]
 8016dac:	89a3      	ldrh	r3, [r4, #12]
 8016dae:	9a01      	ldr	r2, [sp, #4]
 8016db0:	4313      	orrs	r3, r2
 8016db2:	81a3      	strh	r3, [r4, #12]
 8016db4:	e7cc      	b.n	8016d50 <__smakebuf_r+0x1c>
	...

08016db8 <_fstat_r>:
 8016db8:	2300      	movs	r3, #0
 8016dba:	b570      	push	{r4, r5, r6, lr}
 8016dbc:	4d06      	ldr	r5, [pc, #24]	@ (8016dd8 <_fstat_r+0x20>)
 8016dbe:	0004      	movs	r4, r0
 8016dc0:	0008      	movs	r0, r1
 8016dc2:	0011      	movs	r1, r2
 8016dc4:	602b      	str	r3, [r5, #0]
 8016dc6:	f7f0 fe6b 	bl	8007aa0 <_fstat>
 8016dca:	1c43      	adds	r3, r0, #1
 8016dcc:	d103      	bne.n	8016dd6 <_fstat_r+0x1e>
 8016dce:	682b      	ldr	r3, [r5, #0]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d000      	beq.n	8016dd6 <_fstat_r+0x1e>
 8016dd4:	6023      	str	r3, [r4, #0]
 8016dd6:	bd70      	pop	{r4, r5, r6, pc}
 8016dd8:	20007280 	.word	0x20007280

08016ddc <_isatty_r>:
 8016ddc:	2300      	movs	r3, #0
 8016dde:	b570      	push	{r4, r5, r6, lr}
 8016de0:	4d06      	ldr	r5, [pc, #24]	@ (8016dfc <_isatty_r+0x20>)
 8016de2:	0004      	movs	r4, r0
 8016de4:	0008      	movs	r0, r1
 8016de6:	602b      	str	r3, [r5, #0]
 8016de8:	f7f0 fe68 	bl	8007abc <_isatty>
 8016dec:	1c43      	adds	r3, r0, #1
 8016dee:	d103      	bne.n	8016df8 <_isatty_r+0x1c>
 8016df0:	682b      	ldr	r3, [r5, #0]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d000      	beq.n	8016df8 <_isatty_r+0x1c>
 8016df6:	6023      	str	r3, [r4, #0]
 8016df8:	bd70      	pop	{r4, r5, r6, pc}
 8016dfa:	46c0      	nop			@ (mov r8, r8)
 8016dfc:	20007280 	.word	0x20007280

08016e00 <_init>:
 8016e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e02:	46c0      	nop			@ (mov r8, r8)
 8016e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e06:	bc08      	pop	{r3}
 8016e08:	469e      	mov	lr, r3
 8016e0a:	4770      	bx	lr

08016e0c <_fini>:
 8016e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e0e:	46c0      	nop			@ (mov r8, r8)
 8016e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e12:	bc08      	pop	{r3}
 8016e14:	469e      	mov	lr, r3
 8016e16:	4770      	bx	lr

08016e18 <__FLASH_Program_Fast_veneer>:
 8016e18:	b401      	push	{r0}
 8016e1a:	4802      	ldr	r0, [pc, #8]	@ (8016e24 <__FLASH_Program_Fast_veneer+0xc>)
 8016e1c:	4684      	mov	ip, r0
 8016e1e:	bc01      	pop	{r0}
 8016e20:	4760      	bx	ip
 8016e22:	bf00      	nop
 8016e24:	20000251 	.word	0x20000251

Disassembly of section .data:

20000000 <counter_ads_max>:
20000000:	00000032                                2...

20000004 <terminal_parser_state>:
20000004:	0000000b                                ....

20000008 <config>:
	...
20000014:	00010000 00000000 00000000 00000000     ................
	...

20000050 <platform_number>:
20000050:	00003330                                03..

20000054 <in_window>:
20000054:	20000400                                ... 

20000058 <current_debug_buffer_pointer>:
20000058:	200004b4                                ... 

2000005c <need_logging>:
2000005c:	00000001                                ....

20000060 <SENSORS_I2C>:
20000060:	200024bc                                .$. 

20000064 <ACCELEROMETER_SPI>:
20000064:	200025a8                                .%. 

20000068 <SystemCoreClock>:
20000068:	00f42400                                .$..

2000006c <debug_uart>:
2000006c:	2000281c                                .(. 

20000070 <terminal_uart>:
20000070:	20002788                                .'. 

20000074 <uwTickPrio>:
20000074:	00000004                                ....

20000078 <uwTickFreq>:
20000078:	00000001                                ....

2000007c <uxCriticalNesting>:
2000007c:	aaaaaaaa                                ....

20000080 <tiny>:
20000080:	0da24260                                `B..

20000084 <one>:
20000084:	3f800000                                ...?

20000088 <__sglue>:
20000088:	00000000 00000003 20007144              ........Dq. 

20000094 <_impure_ptr>:
20000094:	20000098                                ... 

20000098 <_impure_data>:
20000098:	00000000 20007144 200071ac 20007214     ....Dq. .q. .r. 
	...

200000e4 <__global_locale>:
200000e4:	00000043 00000000 00000000 00000000     C...............
	...
20000104:	00000043 00000000 00000000 00000000     C...............
	...
20000124:	00000043 00000000 00000000 00000000     C...............
	...
20000144:	00000043 00000000 00000000 00000000     C...............
	...
20000164:	00000043 00000000 00000000 00000000     C...............
	...
20000184:	00000043 00000000 00000000 00000000     C...............
	...
200001a4:	00000043 00000000 00000000 00000000     C...............
	...
200001c4:	0801682f 080167ad 00000000 08017940     /h...g......@y..
200001d4:	080178e8 08017a95 08017a95 08017a95     .x...z...z...z..
200001e4:	08017a95 08017a95 08017a95 08017a95     .z...z...z...z..
200001f4:	08017a95 08017a95 ffffffff ffffffff     .z...z..........
20000204:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2000022c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000250 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000250:	b580      	push	{r7, lr}
20000252:	b088      	sub	sp, #32
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
20000258:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000025a:	231f      	movs	r3, #31
2000025c:	18fb      	adds	r3, r7, r3
2000025e:	2200      	movs	r2, #0
20000260:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b1a      	ldr	r3, [pc, #104]	@ (200002d4 <FLASH_Program_Fast+0x84>)
2000026c:	695a      	ldr	r2, [r3, #20]
2000026e:	4b19      	ldr	r3, [pc, #100]	@ (200002d4 <FLASH_Program_Fast+0x84>)
20000270:	2180      	movs	r1, #128	@ 0x80
20000272:	02c9      	lsls	r1, r1, #11
20000274:	430a      	orrs	r2, r1
20000276:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000278:	f3ef 8310 	mrs	r3, PRIMASK
2000027c:	60fb      	str	r3, [r7, #12]
  return(result);
2000027e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000282:	b672      	cpsid	i
}
20000284:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000286:	e00f      	b.n	200002a8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000288:	697a      	ldr	r2, [r7, #20]
2000028a:	69bb      	ldr	r3, [r7, #24]
2000028c:	6812      	ldr	r2, [r2, #0]
2000028e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000290:	697b      	ldr	r3, [r7, #20]
20000292:	3304      	adds	r3, #4
20000294:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	3304      	adds	r3, #4
2000029a:	61bb      	str	r3, [r7, #24]
    index++;
2000029c:	211f      	movs	r1, #31
2000029e:	187b      	adds	r3, r7, r1
200002a0:	781a      	ldrb	r2, [r3, #0]
200002a2:	187b      	adds	r3, r7, r1
200002a4:	3201      	adds	r2, #1
200002a6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002a8:	231f      	movs	r3, #31
200002aa:	18fb      	adds	r3, r7, r3
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b3f      	cmp	r3, #63	@ 0x3f
200002b0:	d9ea      	bls.n	20000288 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200002b2:	46c0      	nop			@ (mov r8, r8)
200002b4:	4b07      	ldr	r3, [pc, #28]	@ (200002d4 <FLASH_Program_Fast+0x84>)
200002b6:	691a      	ldr	r2, [r3, #16]
200002b8:	2380      	movs	r3, #128	@ 0x80
200002ba:	025b      	lsls	r3, r3, #9
200002bc:	4013      	ands	r3, r2
200002be:	d1f9      	bne.n	200002b4 <FLASH_Program_Fast+0x64>
200002c0:	693b      	ldr	r3, [r7, #16]
200002c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002c4:	68bb      	ldr	r3, [r7, #8]
200002c6:	f383 8810 	msr	PRIMASK, r3
}
200002ca:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002cc:	46c0      	nop			@ (mov r8, r8)
200002ce:	46bd      	mov	sp, r7
200002d0:	b008      	add	sp, #32
200002d2:	bd80      	pop	{r7, pc}
200002d4:	40022000 	.word	0x40022000
