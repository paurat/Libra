
nais_bk002_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016818  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  080168d8  080168d8  000178d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017740  08017740  000192d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017740  08017740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017748  08017748  000192d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017748  08017748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017750  08017750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08017754  00019000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00006fb0  200002d8  08017a2c  000192d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007288  08017a2c  0001a288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000192d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b59  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f2b  00000000  00000000  00049e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d0  00000000  00000000  00050d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c8a  00000000  00000000  00053258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cd4  00000000  00000000  00054ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031ca9  00000000  00000000  00078bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1aff  00000000  00000000  000aa85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c35e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cf8  00000000  00000000  0016c3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0017609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d8 	.word	0x200002d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080168ac 	.word	0x080168ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002dc 	.word	0x200002dc
 8000104:	080168ac 	.word	0x080168ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f82b 	bl	8002498 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff6b 	bl	8002328 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f81d 	bl	8002498 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f813 	bl	8002498 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff95 	bl	80023b0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff8b 	bl	80023b0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fcc7 	bl	8000e44 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc47 	bl	8000d54 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcb9 	bl	8000e44 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fcaf 	bl	8000e44 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc55 	bl	8000da4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc4b 	bl	8000da4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f88c 	bl	8000668 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_f2uiz>:
 800055c:	219e      	movs	r1, #158	@ 0x9e
 800055e:	b510      	push	{r4, lr}
 8000560:	05c9      	lsls	r1, r1, #23
 8000562:	1c04      	adds	r4, r0, #0
 8000564:	f7ff ffd0 	bl	8000508 <__aeabi_fcmpge>
 8000568:	2800      	cmp	r0, #0
 800056a:	d103      	bne.n	8000574 <__aeabi_f2uiz+0x18>
 800056c:	1c20      	adds	r0, r4, #0
 800056e:	f000 ffaf 	bl	80014d0 <__aeabi_f2iz>
 8000572:	bd10      	pop	{r4, pc}
 8000574:	219e      	movs	r1, #158	@ 0x9e
 8000576:	1c20      	adds	r0, r4, #0
 8000578:	05c9      	lsls	r1, r1, #23
 800057a:	f000 fdef 	bl	800115c <__aeabi_fsub>
 800057e:	f000 ffa7 	bl	80014d0 <__aeabi_f2iz>
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	469c      	mov	ip, r3
 8000588:	4460      	add	r0, ip
 800058a:	e7f2      	b.n	8000572 <__aeabi_f2uiz+0x16>

0800058c <__aeabi_d2uiz>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2200      	movs	r2, #0
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 8000592:	0004      	movs	r4, r0
 8000594:	000d      	movs	r5, r1
 8000596:	f7ff ff7d 	bl	8000494 <__aeabi_dcmpge>
 800059a:	2800      	cmp	r0, #0
 800059c:	d104      	bne.n	80005a8 <__aeabi_d2uiz+0x1c>
 800059e:	0020      	movs	r0, r4
 80005a0:	0029      	movs	r1, r5
 80005a2:	f002 fe71 	bl	8003288 <__aeabi_d2iz>
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <__aeabi_d2uiz+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f002 faac 	bl	8002b0c <__aeabi_dsub>
 80005b4:	f002 fe68 	bl	8003288 <__aeabi_d2iz>
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	061b      	lsls	r3, r3, #24
 80005bc:	469c      	mov	ip, r3
 80005be:	4460      	add	r0, ip
 80005c0:	e7f1      	b.n	80005a6 <__aeabi_d2uiz+0x1a>
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	41e00000 	.word	0x41e00000

080005c8 <__aeabi_d2lz>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	0004      	movs	r4, r0
 80005d0:	000d      	movs	r5, r1
 80005d2:	f7ff ff41 	bl	8000458 <__aeabi_dcmplt>
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d108      	bne.n	80005ec <__aeabi_d2lz+0x24>
 80005da:	0020      	movs	r0, r4
 80005dc:	0029      	movs	r1, r5
 80005de:	f000 f80f 	bl	8000600 <__aeabi_d2ulz>
 80005e2:	0002      	movs	r2, r0
 80005e4:	000b      	movs	r3, r1
 80005e6:	0010      	movs	r0, r2
 80005e8:	0019      	movs	r1, r3
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	18e9      	adds	r1, r5, r3
 80005f2:	0020      	movs	r0, r4
 80005f4:	f000 f804 	bl	8000600 <__aeabi_d2ulz>
 80005f8:	2300      	movs	r3, #0
 80005fa:	4242      	negs	r2, r0
 80005fc:	418b      	sbcs	r3, r1
 80005fe:	e7f2      	b.n	80005e6 <__aeabi_d2lz+0x1e>

08000600 <__aeabi_d2ulz>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2200      	movs	r2, #0
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <__aeabi_d2ulz+0x34>)
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	f001 ffb7 	bl	800257c <__aeabi_dmul>
 800060e:	f7ff ffbd 	bl	800058c <__aeabi_d2uiz>
 8000612:	0006      	movs	r6, r0
 8000614:	f002 fea2 	bl	800335c <__aeabi_ui2d>
 8000618:	2200      	movs	r2, #0
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <__aeabi_d2ulz+0x38>)
 800061c:	f001 ffae 	bl	800257c <__aeabi_dmul>
 8000620:	0002      	movs	r2, r0
 8000622:	000b      	movs	r3, r1
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 fa70 	bl	8002b0c <__aeabi_dsub>
 800062c:	f7ff ffae 	bl	800058c <__aeabi_d2uiz>
 8000630:	0031      	movs	r1, r6
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	3df00000 	.word	0x3df00000
 8000638:	41f00000 	.word	0x41f00000

0800063c <__aeabi_l2d>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	0006      	movs	r6, r0
 8000640:	0008      	movs	r0, r1
 8000642:	f002 fe5d 	bl	8003300 <__aeabi_i2d>
 8000646:	2200      	movs	r2, #0
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <__aeabi_l2d+0x28>)
 800064a:	f001 ff97 	bl	800257c <__aeabi_dmul>
 800064e:	000d      	movs	r5, r1
 8000650:	0004      	movs	r4, r0
 8000652:	0030      	movs	r0, r6
 8000654:	f002 fe82 	bl	800335c <__aeabi_ui2d>
 8000658:	002b      	movs	r3, r5
 800065a:	0022      	movs	r2, r4
 800065c:	f000 ffe6 	bl	800162c <__aeabi_dadd>
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	41f00000 	.word	0x41f00000

08000668 <__udivmoddi4>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	4657      	mov	r7, sl
 800066c:	464e      	mov	r6, r9
 800066e:	4645      	mov	r5, r8
 8000670:	46de      	mov	lr, fp
 8000672:	b5e0      	push	{r5, r6, r7, lr}
 8000674:	0004      	movs	r4, r0
 8000676:	000d      	movs	r5, r1
 8000678:	4692      	mov	sl, r2
 800067a:	4699      	mov	r9, r3
 800067c:	b083      	sub	sp, #12
 800067e:	428b      	cmp	r3, r1
 8000680:	d830      	bhi.n	80006e4 <__udivmoddi4+0x7c>
 8000682:	d02d      	beq.n	80006e0 <__udivmoddi4+0x78>
 8000684:	4649      	mov	r1, r9
 8000686:	4650      	mov	r0, sl
 8000688:	f002 ff76 	bl	8003578 <__clzdi2>
 800068c:	0029      	movs	r1, r5
 800068e:	0006      	movs	r6, r0
 8000690:	0020      	movs	r0, r4
 8000692:	f002 ff71 	bl	8003578 <__clzdi2>
 8000696:	1a33      	subs	r3, r6, r0
 8000698:	4698      	mov	r8, r3
 800069a:	3b20      	subs	r3, #32
 800069c:	d434      	bmi.n	8000708 <__udivmoddi4+0xa0>
 800069e:	469b      	mov	fp, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	465a      	mov	r2, fp
 80006a4:	4093      	lsls	r3, r2
 80006a6:	4642      	mov	r2, r8
 80006a8:	001f      	movs	r7, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	4093      	lsls	r3, r2
 80006ae:	001e      	movs	r6, r3
 80006b0:	42af      	cmp	r7, r5
 80006b2:	d83b      	bhi.n	800072c <__udivmoddi4+0xc4>
 80006b4:	42af      	cmp	r7, r5
 80006b6:	d100      	bne.n	80006ba <__udivmoddi4+0x52>
 80006b8:	e079      	b.n	80007ae <__udivmoddi4+0x146>
 80006ba:	465b      	mov	r3, fp
 80006bc:	1ba4      	subs	r4, r4, r6
 80006be:	41bd      	sbcs	r5, r7
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da00      	bge.n	80006c6 <__udivmoddi4+0x5e>
 80006c4:	e076      	b.n	80007b4 <__udivmoddi4+0x14c>
 80006c6:	2200      	movs	r2, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	9200      	str	r2, [sp, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	465a      	mov	r2, fp
 80006d2:	4093      	lsls	r3, r2
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2301      	movs	r3, #1
 80006d8:	4642      	mov	r2, r8
 80006da:	4093      	lsls	r3, r2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	e029      	b.n	8000734 <__udivmoddi4+0xcc>
 80006e0:	4282      	cmp	r2, r0
 80006e2:	d9cf      	bls.n	8000684 <__udivmoddi4+0x1c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <__udivmoddi4+0x8e>
 80006f2:	601c      	str	r4, [r3, #0]
 80006f4:	605d      	str	r5, [r3, #4]
 80006f6:	9800      	ldr	r0, [sp, #0]
 80006f8:	9901      	ldr	r1, [sp, #4]
 80006fa:	b003      	add	sp, #12
 80006fc:	bcf0      	pop	{r4, r5, r6, r7}
 80006fe:	46bb      	mov	fp, r7
 8000700:	46b2      	mov	sl, r6
 8000702:	46a9      	mov	r9, r5
 8000704:	46a0      	mov	r8, r4
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000708:	4642      	mov	r2, r8
 800070a:	469b      	mov	fp, r3
 800070c:	2320      	movs	r3, #32
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	4652      	mov	r2, sl
 8000712:	40da      	lsrs	r2, r3
 8000714:	4641      	mov	r1, r8
 8000716:	0013      	movs	r3, r2
 8000718:	464a      	mov	r2, r9
 800071a:	408a      	lsls	r2, r1
 800071c:	0017      	movs	r7, r2
 800071e:	4642      	mov	r2, r8
 8000720:	431f      	orrs	r7, r3
 8000722:	4653      	mov	r3, sl
 8000724:	4093      	lsls	r3, r2
 8000726:	001e      	movs	r6, r3
 8000728:	42af      	cmp	r7, r5
 800072a:	d9c3      	bls.n	80006b4 <__udivmoddi4+0x4c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4643      	mov	r3, r8
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0d8      	beq.n	80006ec <__udivmoddi4+0x84>
 800073a:	07fb      	lsls	r3, r7, #31
 800073c:	0872      	lsrs	r2, r6, #1
 800073e:	431a      	orrs	r2, r3
 8000740:	4646      	mov	r6, r8
 8000742:	087b      	lsrs	r3, r7, #1
 8000744:	e00e      	b.n	8000764 <__udivmoddi4+0xfc>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d101      	bne.n	800074e <__udivmoddi4+0xe6>
 800074a:	42a2      	cmp	r2, r4
 800074c:	d80c      	bhi.n	8000768 <__udivmoddi4+0x100>
 800074e:	1aa4      	subs	r4, r4, r2
 8000750:	419d      	sbcs	r5, r3
 8000752:	2001      	movs	r0, #1
 8000754:	1924      	adds	r4, r4, r4
 8000756:	416d      	adcs	r5, r5
 8000758:	2100      	movs	r1, #0
 800075a:	3e01      	subs	r6, #1
 800075c:	1824      	adds	r4, r4, r0
 800075e:	414d      	adcs	r5, r1
 8000760:	2e00      	cmp	r6, #0
 8000762:	d006      	beq.n	8000772 <__udivmoddi4+0x10a>
 8000764:	42ab      	cmp	r3, r5
 8000766:	d9ee      	bls.n	8000746 <__udivmoddi4+0xde>
 8000768:	3e01      	subs	r6, #1
 800076a:	1924      	adds	r4, r4, r4
 800076c:	416d      	adcs	r5, r5
 800076e:	2e00      	cmp	r6, #0
 8000770:	d1f8      	bne.n	8000764 <__udivmoddi4+0xfc>
 8000772:	9800      	ldr	r0, [sp, #0]
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	465b      	mov	r3, fp
 8000778:	1900      	adds	r0, r0, r4
 800077a:	4169      	adcs	r1, r5
 800077c:	2b00      	cmp	r3, #0
 800077e:	db24      	blt.n	80007ca <__udivmoddi4+0x162>
 8000780:	002b      	movs	r3, r5
 8000782:	465a      	mov	r2, fp
 8000784:	4644      	mov	r4, r8
 8000786:	40d3      	lsrs	r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	40e2      	lsrs	r2, r4
 800078c:	001c      	movs	r4, r3
 800078e:	465b      	mov	r3, fp
 8000790:	0015      	movs	r5, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	db2a      	blt.n	80007ec <__udivmoddi4+0x184>
 8000796:	0026      	movs	r6, r4
 8000798:	409e      	lsls	r6, r3
 800079a:	0033      	movs	r3, r6
 800079c:	0026      	movs	r6, r4
 800079e:	4647      	mov	r7, r8
 80007a0:	40be      	lsls	r6, r7
 80007a2:	0032      	movs	r2, r6
 80007a4:	1a80      	subs	r0, r0, r2
 80007a6:	4199      	sbcs	r1, r3
 80007a8:	9000      	str	r0, [sp, #0]
 80007aa:	9101      	str	r1, [sp, #4]
 80007ac:	e79e      	b.n	80006ec <__udivmoddi4+0x84>
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d8bc      	bhi.n	800072c <__udivmoddi4+0xc4>
 80007b2:	e782      	b.n	80006ba <__udivmoddi4+0x52>
 80007b4:	4642      	mov	r2, r8
 80007b6:	2320      	movs	r3, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	40da      	lsrs	r2, r3
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	e785      	b.n	80006d6 <__udivmoddi4+0x6e>
 80007ca:	4642      	mov	r2, r8
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	4646      	mov	r6, r8
 80007d4:	409a      	lsls	r2, r3
 80007d6:	0023      	movs	r3, r4
 80007d8:	40f3      	lsrs	r3, r6
 80007da:	4644      	mov	r4, r8
 80007dc:	4313      	orrs	r3, r2
 80007de:	002a      	movs	r2, r5
 80007e0:	40e2      	lsrs	r2, r4
 80007e2:	001c      	movs	r4, r3
 80007e4:	465b      	mov	r3, fp
 80007e6:	0015      	movs	r5, r2
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dad4      	bge.n	8000796 <__udivmoddi4+0x12e>
 80007ec:	4642      	mov	r2, r8
 80007ee:	002f      	movs	r7, r5
 80007f0:	2320      	movs	r3, #32
 80007f2:	0026      	movs	r6, r4
 80007f4:	4097      	lsls	r7, r2
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	40de      	lsrs	r6, r3
 80007fa:	003b      	movs	r3, r7
 80007fc:	4333      	orrs	r3, r6
 80007fe:	e7cd      	b.n	800079c <__udivmoddi4+0x134>

08000800 <__aeabi_fadd>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	46ce      	mov	lr, r9
 8000804:	4647      	mov	r7, r8
 8000806:	0243      	lsls	r3, r0, #9
 8000808:	0a5a      	lsrs	r2, r3, #9
 800080a:	024e      	lsls	r6, r1, #9
 800080c:	0045      	lsls	r5, r0, #1
 800080e:	0fc4      	lsrs	r4, r0, #31
 8000810:	0048      	lsls	r0, r1, #1
 8000812:	4691      	mov	r9, r2
 8000814:	0e2d      	lsrs	r5, r5, #24
 8000816:	0a72      	lsrs	r2, r6, #9
 8000818:	0e00      	lsrs	r0, r0, #24
 800081a:	4694      	mov	ip, r2
 800081c:	b580      	push	{r7, lr}
 800081e:	099b      	lsrs	r3, r3, #6
 8000820:	0fc9      	lsrs	r1, r1, #31
 8000822:	09b6      	lsrs	r6, r6, #6
 8000824:	1a2a      	subs	r2, r5, r0
 8000826:	428c      	cmp	r4, r1
 8000828:	d021      	beq.n	800086e <__aeabi_fadd+0x6e>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dd0d      	ble.n	800084a <__aeabi_fadd+0x4a>
 800082e:	2800      	cmp	r0, #0
 8000830:	d12d      	bne.n	800088e <__aeabi_fadd+0x8e>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x38>
 8000836:	e08d      	b.n	8000954 <__aeabi_fadd+0x154>
 8000838:	1e51      	subs	r1, r2, #1
 800083a:	2a01      	cmp	r2, #1
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x40>
 800083e:	e11d      	b.n	8000a7c <__aeabi_fadd+0x27c>
 8000840:	2aff      	cmp	r2, #255	@ 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0x46>
 8000844:	e0ab      	b.n	800099e <__aeabi_fadd+0x19e>
 8000846:	000a      	movs	r2, r1
 8000848:	e027      	b.n	800089a <__aeabi_fadd+0x9a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d04d      	beq.n	80008ea <__aeabi_fadd+0xea>
 800084e:	1b42      	subs	r2, r0, r5
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x56>
 8000854:	e0cc      	b.n	80009f0 <__aeabi_fadd+0x1f0>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x5c>
 800085a:	e079      	b.n	8000950 <__aeabi_fadd+0x150>
 800085c:	1e54      	subs	r4, r2, #1
 800085e:	2a01      	cmp	r2, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x64>
 8000862:	e128      	b.n	8000ab6 <__aeabi_fadd+0x2b6>
 8000864:	2aff      	cmp	r2, #255	@ 0xff
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0x6a>
 8000868:	e097      	b.n	800099a <__aeabi_fadd+0x19a>
 800086a:	0022      	movs	r2, r4
 800086c:	e0c5      	b.n	80009fa <__aeabi_fadd+0x1fa>
 800086e:	2a00      	cmp	r2, #0
 8000870:	dc00      	bgt.n	8000874 <__aeabi_fadd+0x74>
 8000872:	e096      	b.n	80009a2 <__aeabi_fadd+0x1a2>
 8000874:	2800      	cmp	r0, #0
 8000876:	d04f      	beq.n	8000918 <__aeabi_fadd+0x118>
 8000878:	2dff      	cmp	r5, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x7e>
 800087c:	e08f      	b.n	800099e <__aeabi_fadd+0x19e>
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	04c9      	lsls	r1, r1, #19
 8000882:	430e      	orrs	r6, r1
 8000884:	2a1b      	cmp	r2, #27
 8000886:	dd51      	ble.n	800092c <__aeabi_fadd+0x12c>
 8000888:	002a      	movs	r2, r5
 800088a:	3301      	adds	r3, #1
 800088c:	e018      	b.n	80008c0 <__aeabi_fadd+0xc0>
 800088e:	2dff      	cmp	r5, #255	@ 0xff
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x94>
 8000892:	e084      	b.n	800099e <__aeabi_fadd+0x19e>
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	04c9      	lsls	r1, r1, #19
 8000898:	430e      	orrs	r6, r1
 800089a:	2101      	movs	r1, #1
 800089c:	2a1b      	cmp	r2, #27
 800089e:	dc08      	bgt.n	80008b2 <__aeabi_fadd+0xb2>
 80008a0:	0031      	movs	r1, r6
 80008a2:	2020      	movs	r0, #32
 80008a4:	40d1      	lsrs	r1, r2
 80008a6:	1a82      	subs	r2, r0, r2
 80008a8:	4096      	lsls	r6, r2
 80008aa:	0032      	movs	r2, r6
 80008ac:	1e50      	subs	r0, r2, #1
 80008ae:	4182      	sbcs	r2, r0
 80008b0:	4311      	orrs	r1, r2
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	015a      	lsls	r2, r3, #5
 80008b6:	d459      	bmi.n	800096c <__aeabi_fadd+0x16c>
 80008b8:	2107      	movs	r1, #7
 80008ba:	002a      	movs	r2, r5
 80008bc:	4019      	ands	r1, r3
 80008be:	d049      	beq.n	8000954 <__aeabi_fadd+0x154>
 80008c0:	210f      	movs	r1, #15
 80008c2:	4019      	ands	r1, r3
 80008c4:	2904      	cmp	r1, #4
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0xca>
 80008c8:	3304      	adds	r3, #4
 80008ca:	0159      	lsls	r1, r3, #5
 80008cc:	d542      	bpl.n	8000954 <__aeabi_fadd+0x154>
 80008ce:	1c50      	adds	r0, r2, #1
 80008d0:	2afe      	cmp	r2, #254	@ 0xfe
 80008d2:	d03a      	beq.n	800094a <__aeabi_fadd+0x14a>
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	b2c0      	uxtb	r0, r0
 80008d8:	0a5b      	lsrs	r3, r3, #9
 80008da:	05c0      	lsls	r0, r0, #23
 80008dc:	4318      	orrs	r0, r3
 80008de:	07e4      	lsls	r4, r4, #31
 80008e0:	4320      	orrs	r0, r4
 80008e2:	bcc0      	pop	{r6, r7}
 80008e4:	46b9      	mov	r9, r7
 80008e6:	46b0      	mov	r8, r6
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ea:	20fe      	movs	r0, #254	@ 0xfe
 80008ec:	4680      	mov	r8, r0
 80008ee:	1c6f      	adds	r7, r5, #1
 80008f0:	0038      	movs	r0, r7
 80008f2:	4647      	mov	r7, r8
 80008f4:	4207      	tst	r7, r0
 80008f6:	d000      	beq.n	80008fa <__aeabi_fadd+0xfa>
 80008f8:	e08e      	b.n	8000a18 <__aeabi_fadd+0x218>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d000      	beq.n	8000900 <__aeabi_fadd+0x100>
 80008fe:	e0b4      	b.n	8000a6a <__aeabi_fadd+0x26a>
 8000900:	2b00      	cmp	r3, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x106>
 8000904:	e0db      	b.n	8000abe <__aeabi_fadd+0x2be>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d06c      	beq.n	80009e4 <__aeabi_fadd+0x1e4>
 800090a:	1b98      	subs	r0, r3, r6
 800090c:	0145      	lsls	r5, r0, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x112>
 8000910:	e0f7      	b.n	8000b02 <__aeabi_fadd+0x302>
 8000912:	000c      	movs	r4, r1
 8000914:	1af3      	subs	r3, r6, r3
 8000916:	e03d      	b.n	8000994 <__aeabi_fadd+0x194>
 8000918:	2e00      	cmp	r6, #0
 800091a:	d01b      	beq.n	8000954 <__aeabi_fadd+0x154>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x124>
 8000922:	e082      	b.n	8000a2a <__aeabi_fadd+0x22a>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d03a      	beq.n	800099e <__aeabi_fadd+0x19e>
 8000928:	000a      	movs	r2, r1
 800092a:	e7ab      	b.n	8000884 <__aeabi_fadd+0x84>
 800092c:	0031      	movs	r1, r6
 800092e:	2020      	movs	r0, #32
 8000930:	40d1      	lsrs	r1, r2
 8000932:	1a82      	subs	r2, r0, r2
 8000934:	4096      	lsls	r6, r2
 8000936:	0032      	movs	r2, r6
 8000938:	1e50      	subs	r0, r2, #1
 800093a:	4182      	sbcs	r2, r0
 800093c:	430a      	orrs	r2, r1
 800093e:	189b      	adds	r3, r3, r2
 8000940:	015a      	lsls	r2, r3, #5
 8000942:	d5b9      	bpl.n	80008b8 <__aeabi_fadd+0xb8>
 8000944:	1c6a      	adds	r2, r5, #1
 8000946:	2dfe      	cmp	r5, #254	@ 0xfe
 8000948:	d175      	bne.n	8000a36 <__aeabi_fadd+0x236>
 800094a:	20ff      	movs	r0, #255	@ 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7c4      	b.n	80008da <__aeabi_fadd+0xda>
 8000950:	000c      	movs	r4, r1
 8000952:	0033      	movs	r3, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	2aff      	cmp	r2, #255	@ 0xff
 8000958:	d146      	bne.n	80009e8 <__aeabi_fadd+0x1e8>
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f5      	beq.n	800094a <__aeabi_fadd+0x14a>
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	4313      	orrs	r3, r2
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	0a5b      	lsrs	r3, r3, #9
 800096a:	e7b6      	b.n	80008da <__aeabi_fadd+0xda>
 800096c:	019f      	lsls	r7, r3, #6
 800096e:	09bf      	lsrs	r7, r7, #6
 8000970:	0038      	movs	r0, r7
 8000972:	f002 fde3 	bl	800353c <__clzsi2>
 8000976:	3805      	subs	r0, #5
 8000978:	4087      	lsls	r7, r0
 800097a:	4285      	cmp	r5, r0
 800097c:	dc24      	bgt.n	80009c8 <__aeabi_fadd+0x1c8>
 800097e:	003b      	movs	r3, r7
 8000980:	2120      	movs	r1, #32
 8000982:	1b42      	subs	r2, r0, r5
 8000984:	3201      	adds	r2, #1
 8000986:	40d3      	lsrs	r3, r2
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	4097      	lsls	r7, r2
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	4197      	sbcs	r7, r2
 8000990:	2200      	movs	r2, #0
 8000992:	433b      	orrs	r3, r7
 8000994:	0759      	lsls	r1, r3, #29
 8000996:	d193      	bne.n	80008c0 <__aeabi_fadd+0xc0>
 8000998:	e797      	b.n	80008ca <__aeabi_fadd+0xca>
 800099a:	000c      	movs	r4, r1
 800099c:	0033      	movs	r3, r6
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	e7db      	b.n	800095a <__aeabi_fadd+0x15a>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d014      	beq.n	80009d0 <__aeabi_fadd+0x1d0>
 80009a6:	1b42      	subs	r2, r0, r5
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d14b      	bne.n	8000a44 <__aeabi_fadd+0x244>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0d0      	beq.n	8000952 <__aeabi_fadd+0x152>
 80009b0:	1e51      	subs	r1, r2, #1
 80009b2:	2a01      	cmp	r2, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x1b8>
 80009b6:	e09e      	b.n	8000af6 <__aeabi_fadd+0x2f6>
 80009b8:	2aff      	cmp	r2, #255	@ 0xff
 80009ba:	d0ef      	beq.n	800099c <__aeabi_fadd+0x19c>
 80009bc:	000a      	movs	r2, r1
 80009be:	2a1b      	cmp	r2, #27
 80009c0:	dd5f      	ble.n	8000a82 <__aeabi_fadd+0x282>
 80009c2:	0002      	movs	r2, r0
 80009c4:	1c73      	adds	r3, r6, #1
 80009c6:	e77b      	b.n	80008c0 <__aeabi_fadd+0xc0>
 80009c8:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <__aeabi_fadd+0x30c>)
 80009ca:	1a2a      	subs	r2, r5, r0
 80009cc:	403b      	ands	r3, r7
 80009ce:	e7e1      	b.n	8000994 <__aeabi_fadd+0x194>
 80009d0:	21fe      	movs	r1, #254	@ 0xfe
 80009d2:	1c6a      	adds	r2, r5, #1
 80009d4:	4211      	tst	r1, r2
 80009d6:	d13b      	bne.n	8000a50 <__aeabi_fadd+0x250>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d15d      	bne.n	8000a98 <__aeabi_fadd+0x298>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d07f      	beq.n	8000ae0 <__aeabi_fadd+0x2e0>
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d17f      	bne.n	8000ae4 <__aeabi_fadd+0x2e4>
 80009e4:	2200      	movs	r2, #0
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	b2d0      	uxtb	r0, r2
 80009ee:	e774      	b.n	80008da <__aeabi_fadd+0xda>
 80009f0:	28ff      	cmp	r0, #255	@ 0xff
 80009f2:	d0d2      	beq.n	800099a <__aeabi_fadd+0x19a>
 80009f4:	2480      	movs	r4, #128	@ 0x80
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	4323      	orrs	r3, r4
 80009fa:	2401      	movs	r4, #1
 80009fc:	2a1b      	cmp	r2, #27
 80009fe:	dc07      	bgt.n	8000a10 <__aeabi_fadd+0x210>
 8000a00:	001c      	movs	r4, r3
 8000a02:	2520      	movs	r5, #32
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	1aaa      	subs	r2, r5, r2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	1b33      	subs	r3, r6, r4
 8000a12:	0005      	movs	r5, r0
 8000a14:	000c      	movs	r4, r1
 8000a16:	e74d      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a18:	1b9f      	subs	r7, r3, r6
 8000a1a:	017a      	lsls	r2, r7, #5
 8000a1c:	d422      	bmi.n	8000a64 <__aeabi_fadd+0x264>
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d1a6      	bne.n	8000970 <__aeabi_fadd+0x170>
 8000a22:	2400      	movs	r4, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	2300      	movs	r3, #0
 8000a28:	e757      	b.n	80008da <__aeabi_fadd+0xda>
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	3201      	adds	r2, #1
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d400      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000a34:	e740      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000a36:	2101      	movs	r1, #1
 8000a38:	4835      	ldr	r0, [pc, #212]	@ (8000b10 <__aeabi_fadd+0x310>)
 8000a3a:	4019      	ands	r1, r3
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	4003      	ands	r3, r0
 8000a40:	430b      	orrs	r3, r1
 8000a42:	e7a7      	b.n	8000994 <__aeabi_fadd+0x194>
 8000a44:	28ff      	cmp	r0, #255	@ 0xff
 8000a46:	d0a9      	beq.n	800099c <__aeabi_fadd+0x19c>
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	04c9      	lsls	r1, r1, #19
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	e7b6      	b.n	80009be <__aeabi_fadd+0x1be>
 8000a50:	2aff      	cmp	r2, #255	@ 0xff
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fadd+0x256>
 8000a54:	e779      	b.n	800094a <__aeabi_fadd+0x14a>
 8000a56:	199b      	adds	r3, r3, r6
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	0759      	lsls	r1, r3, #29
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fadd+0x260>
 8000a5e:	e72f      	b.n	80008c0 <__aeabi_fadd+0xc0>
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	e7c1      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000a64:	000c      	movs	r4, r1
 8000a66:	1af7      	subs	r7, r6, r3
 8000a68:	e782      	b.n	8000970 <__aeabi_fadd+0x170>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d12c      	bne.n	8000ac8 <__aeabi_fadd+0x2c8>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d193      	bne.n	800099a <__aeabi_fadd+0x19a>
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	2400      	movs	r4, #0
 8000a76:	20ff      	movs	r0, #255	@ 0xff
 8000a78:	03db      	lsls	r3, r3, #15
 8000a7a:	e72e      	b.n	80008da <__aeabi_fadd+0xda>
 8000a7c:	2501      	movs	r5, #1
 8000a7e:	1b9b      	subs	r3, r3, r6
 8000a80:	e718      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000a82:	0019      	movs	r1, r3
 8000a84:	2520      	movs	r5, #32
 8000a86:	40d1      	lsrs	r1, r2
 8000a88:	1aaa      	subs	r2, r5, r2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	4193      	sbcs	r3, r2
 8000a90:	430b      	orrs	r3, r1
 8000a92:	0005      	movs	r5, r0
 8000a94:	199b      	adds	r3, r3, r6
 8000a96:	e753      	b.n	8000940 <__aeabi_fadd+0x140>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x29e>
 8000a9c:	e77e      	b.n	800099c <__aeabi_fadd+0x19c>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fadd+0x2a4>
 8000aa2:	e77c      	b.n	800099e <__aeabi_fadd+0x19e>
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	03d2      	lsls	r2, r2, #15
 8000aa8:	4591      	cmp	r9, r2
 8000aaa:	d302      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000aac:	4594      	cmp	ip, r2
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	e753      	b.n	800095e <__aeabi_fadd+0x15e>
 8000ab6:	000c      	movs	r4, r1
 8000ab8:	1af3      	subs	r3, r6, r3
 8000aba:	3501      	adds	r5, #1
 8000abc:	e6fa      	b.n	80008b4 <__aeabi_fadd+0xb4>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0af      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	0033      	movs	r3, r6
 8000ac6:	e78d      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_fadd+0x2ce>
 8000acc:	e767      	b.n	800099e <__aeabi_fadd+0x19e>
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	03d2      	lsls	r2, r2, #15
 8000ad2:	4591      	cmp	r9, r2
 8000ad4:	d3ed      	bcc.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ad6:	4594      	cmp	ip, r2
 8000ad8:	d2eb      	bcs.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ada:	000c      	movs	r4, r1
 8000adc:	0033      	movs	r3, r6
 8000ade:	e7e8      	b.n	8000ab2 <__aeabi_fadd+0x2b2>
 8000ae0:	0033      	movs	r3, r6
 8000ae2:	e77f      	b.n	80009e4 <__aeabi_fadd+0x1e4>
 8000ae4:	199b      	adds	r3, r3, r6
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0159      	lsls	r1, r3, #5
 8000aea:	d5b9      	bpl.n	8000a60 <__aeabi_fadd+0x260>
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <__aeabi_fadd+0x30c>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	2201      	movs	r2, #1
 8000af4:	e778      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000af6:	199b      	adds	r3, r3, r6
 8000af8:	3201      	adds	r2, #1
 8000afa:	3501      	adds	r5, #1
 8000afc:	0159      	lsls	r1, r3, #5
 8000afe:	d49a      	bmi.n	8000a36 <__aeabi_fadd+0x236>
 8000b00:	e6da      	b.n	80008b8 <__aeabi_fadd+0xb8>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d08d      	beq.n	8000a22 <__aeabi_fadd+0x222>
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	e76e      	b.n	80009e8 <__aeabi_fadd+0x1e8>
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	fbffffff 	.word	0xfbffffff
 8000b10:	7dffffff 	.word	0x7dffffff

08000b14 <__aeabi_fdiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	464f      	mov	r7, r9
 8000b18:	4646      	mov	r6, r8
 8000b1a:	46d6      	mov	lr, sl
 8000b1c:	0244      	lsls	r4, r0, #9
 8000b1e:	b5c0      	push	{r6, r7, lr}
 8000b20:	0047      	lsls	r7, r0, #1
 8000b22:	1c0e      	adds	r6, r1, #0
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	0e3f      	lsrs	r7, r7, #24
 8000b28:	0fc5      	lsrs	r5, r0, #31
 8000b2a:	2f00      	cmp	r7, #0
 8000b2c:	d03c      	beq.n	8000ba8 <__aeabi_fdiv+0x94>
 8000b2e:	2fff      	cmp	r7, #255	@ 0xff
 8000b30:	d042      	beq.n	8000bb8 <__aeabi_fdiv+0xa4>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	4699      	mov	r9, r3
 8000b38:	469a      	mov	sl, r3
 8000b3a:	00e4      	lsls	r4, r4, #3
 8000b3c:	04d2      	lsls	r2, r2, #19
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	3f7f      	subs	r7, #127	@ 0x7f
 8000b42:	0273      	lsls	r3, r6, #9
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	4698      	mov	r8, r3
 8000b48:	0073      	lsls	r3, r6, #1
 8000b4a:	0e1b      	lsrs	r3, r3, #24
 8000b4c:	0ff6      	lsrs	r6, r6, #31
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d01b      	beq.n	8000b8a <__aeabi_fdiv+0x76>
 8000b52:	2bff      	cmp	r3, #255	@ 0xff
 8000b54:	d013      	beq.n	8000b7e <__aeabi_fdiv+0x6a>
 8000b56:	4642      	mov	r2, r8
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	04c9      	lsls	r1, r1, #19
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	2000      	movs	r0, #0
 8000b64:	3b7f      	subs	r3, #127	@ 0x7f
 8000b66:	0029      	movs	r1, r5
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	4071      	eors	r1, r6
 8000b6e:	b2c9      	uxtb	r1, r1
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d900      	bls.n	8000b76 <__aeabi_fdiv+0x62>
 8000b74:	e0b5      	b.n	8000ce2 <__aeabi_fdiv+0x1ce>
 8000b76:	4a74      	ldr	r2, [pc, #464]	@ (8000d48 <__aeabi_fdiv+0x234>)
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	58d3      	ldr	r3, [r2, r3]
 8000b7c:	469f      	mov	pc, r3
 8000b7e:	4643      	mov	r3, r8
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d13f      	bne.n	8000c04 <__aeabi_fdiv+0xf0>
 8000b84:	3fff      	subs	r7, #255	@ 0xff
 8000b86:	3302      	adds	r3, #2
 8000b88:	e003      	b.n	8000b92 <__aeabi_fdiv+0x7e>
 8000b8a:	4643      	mov	r3, r8
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d12d      	bne.n	8000bec <__aeabi_fdiv+0xd8>
 8000b90:	2301      	movs	r3, #1
 8000b92:	0029      	movs	r1, r5
 8000b94:	464a      	mov	r2, r9
 8000b96:	4071      	eors	r1, r6
 8000b98:	b2c9      	uxtb	r1, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	2a0e      	cmp	r2, #14
 8000b9e:	d838      	bhi.n	8000c12 <__aeabi_fdiv+0xfe>
 8000ba0:	486a      	ldr	r0, [pc, #424]	@ (8000d4c <__aeabi_fdiv+0x238>)
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	5882      	ldr	r2, [r0, r2]
 8000ba6:	4697      	mov	pc, r2
 8000ba8:	2c00      	cmp	r4, #0
 8000baa:	d113      	bne.n	8000bd4 <__aeabi_fdiv+0xc0>
 8000bac:	2304      	movs	r3, #4
 8000bae:	4699      	mov	r9, r3
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	e7c4      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_fdiv+0xb4>
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	3b06      	subs	r3, #6
 8000bc2:	27ff      	movs	r7, #255	@ 0xff
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	e7bc      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bc8:	230c      	movs	r3, #12
 8000bca:	4699      	mov	r9, r3
 8000bcc:	3b09      	subs	r3, #9
 8000bce:	27ff      	movs	r7, #255	@ 0xff
 8000bd0:	469a      	mov	sl, r3
 8000bd2:	e7b6      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bd4:	0020      	movs	r0, r4
 8000bd6:	f002 fcb1 	bl	800353c <__clzsi2>
 8000bda:	2776      	movs	r7, #118	@ 0x76
 8000bdc:	1f43      	subs	r3, r0, #5
 8000bde:	409c      	lsls	r4, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	427f      	negs	r7, r7
 8000be4:	4699      	mov	r9, r3
 8000be6:	469a      	mov	sl, r3
 8000be8:	1a3f      	subs	r7, r7, r0
 8000bea:	e7aa      	b.n	8000b42 <__aeabi_fdiv+0x2e>
 8000bec:	4640      	mov	r0, r8
 8000bee:	f002 fca5 	bl	800353c <__clzsi2>
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	1f43      	subs	r3, r0, #5
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	2376      	movs	r3, #118	@ 0x76
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	1a1b      	subs	r3, r3, r0
 8000bfe:	4690      	mov	r8, r2
 8000c00:	2000      	movs	r0, #0
 8000c02:	e7b0      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c04:	2303      	movs	r3, #3
 8000c06:	464a      	mov	r2, r9
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	33fc      	adds	r3, #252	@ 0xfc
 8000c10:	e7a9      	b.n	8000b66 <__aeabi_fdiv+0x52>
 8000c12:	000d      	movs	r5, r1
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	2200      	movs	r2, #0
 8000c18:	05c0      	lsls	r0, r0, #23
 8000c1a:	07ed      	lsls	r5, r5, #31
 8000c1c:	4310      	orrs	r0, r2
 8000c1e:	4328      	orrs	r0, r5
 8000c20:	bce0      	pop	{r5, r6, r7}
 8000c22:	46ba      	mov	sl, r7
 8000c24:	46b1      	mov	r9, r6
 8000c26:	46a8      	mov	r8, r5
 8000c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2a:	000d      	movs	r5, r1
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e7f2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c32:	4653      	mov	r3, sl
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d0ed      	beq.n	8000c14 <__aeabi_fdiv+0x100>
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d033      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <__aeabi_fdiv+0x13a>
 8000c42:	2000      	movs	r0, #0
 8000c44:	2200      	movs	r2, #0
 8000c46:	e7e7      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c48:	0035      	movs	r5, r6
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d07a      	beq.n	8000d44 <__aeabi_fdiv+0x230>
 8000c4e:	003b      	movs	r3, r7
 8000c50:	337f      	adds	r3, #127	@ 0x7f
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dd2d      	ble.n	8000cb2 <__aeabi_fdiv+0x19e>
 8000c56:	4642      	mov	r2, r8
 8000c58:	0752      	lsls	r2, r2, #29
 8000c5a:	d007      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	4641      	mov	r1, r8
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a04      	cmp	r2, #4
 8000c64:	d002      	beq.n	8000c6c <__aeabi_fdiv+0x158>
 8000c66:	2204      	movs	r2, #4
 8000c68:	4694      	mov	ip, r2
 8000c6a:	44e0      	add	r8, ip
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	d505      	bpl.n	8000c7e <__aeabi_fdiv+0x16a>
 8000c72:	4642      	mov	r2, r8
 8000c74:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <__aeabi_fdiv+0x23c>)
 8000c76:	401a      	ands	r2, r3
 8000c78:	003b      	movs	r3, r7
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	3380      	adds	r3, #128	@ 0x80
 8000c7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c80:	dcc8      	bgt.n	8000c14 <__aeabi_fdiv+0x100>
 8000c82:	4642      	mov	r2, r8
 8000c84:	0192      	lsls	r2, r2, #6
 8000c86:	0a52      	lsrs	r2, r2, #9
 8000c88:	b2d8      	uxtb	r0, r3
 8000c8a:	e7c5      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	2500      	movs	r5, #0
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	03d2      	lsls	r2, r2, #15
 8000c94:	e7c0      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000c96:	2280      	movs	r2, #128	@ 0x80
 8000c98:	03d2      	lsls	r2, r2, #15
 8000c9a:	4214      	tst	r4, r2
 8000c9c:	d002      	beq.n	8000ca4 <__aeabi_fdiv+0x190>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	d049      	beq.n	8000d38 <__aeabi_fdiv+0x224>
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	03d2      	lsls	r2, r2, #15
 8000ca8:	4322      	orrs	r2, r4
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	20ff      	movs	r0, #255	@ 0xff
 8000cae:	0a52      	lsrs	r2, r2, #9
 8000cb0:	e7b2      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b1b      	cmp	r3, #27
 8000cb8:	dcc3      	bgt.n	8000c42 <__aeabi_fdiv+0x12e>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	40da      	lsrs	r2, r3
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	379e      	adds	r7, #158	@ 0x9e
 8000cc2:	40bb      	lsls	r3, r7
 8000cc4:	1e59      	subs	r1, r3, #1
 8000cc6:	418b      	sbcs	r3, r1
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	0753      	lsls	r3, r2, #29
 8000ccc:	d004      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cce:	230f      	movs	r3, #15
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_fdiv+0x1c4>
 8000cd6:	3204      	adds	r2, #4
 8000cd8:	0153      	lsls	r3, r2, #5
 8000cda:	d529      	bpl.n	8000d30 <__aeabi_fdiv+0x21c>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e79a      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	0163      	lsls	r3, r4, #5
 8000ce6:	0155      	lsls	r5, r2, #5
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d215      	bcs.n	8000d18 <__aeabi_fdiv+0x204>
 8000cec:	201b      	movs	r0, #27
 8000cee:	2200      	movs	r2, #0
 8000cf0:	3f01      	subs	r7, #1
 8000cf2:	2601      	movs	r6, #1
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	db01      	blt.n	8000d02 <__aeabi_fdiv+0x1ee>
 8000cfe:	429d      	cmp	r5, r3
 8000d00:	d801      	bhi.n	8000d06 <__aeabi_fdiv+0x1f2>
 8000d02:	1b5b      	subs	r3, r3, r5
 8000d04:	4332      	orrs	r2, r6
 8000d06:	3801      	subs	r0, #1
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <__aeabi_fdiv+0x1e0>
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	4183      	sbcs	r3, r0
 8000d10:	4313      	orrs	r3, r2
 8000d12:	4698      	mov	r8, r3
 8000d14:	000d      	movs	r5, r1
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fdiv+0x13a>
 8000d18:	201a      	movs	r0, #26
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	1b5b      	subs	r3, r3, r5
 8000d1e:	e7e8      	b.n	8000cf2 <__aeabi_fdiv+0x1de>
 8000d20:	3b02      	subs	r3, #2
 8000d22:	425a      	negs	r2, r3
 8000d24:	4153      	adcs	r3, r2
 8000d26:	425b      	negs	r3, r3
 8000d28:	0035      	movs	r5, r6
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e773      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d30:	0192      	lsls	r2, r2, #6
 8000d32:	2000      	movs	r0, #0
 8000d34:	0a52      	lsrs	r2, r2, #9
 8000d36:	e76f      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	0252      	lsls	r2, r2, #9
 8000d3c:	0035      	movs	r5, r6
 8000d3e:	20ff      	movs	r0, #255	@ 0xff
 8000d40:	0a52      	lsrs	r2, r2, #9
 8000d42:	e769      	b.n	8000c18 <__aeabi_fdiv+0x104>
 8000d44:	4644      	mov	r4, r8
 8000d46:	e7ad      	b.n	8000ca4 <__aeabi_fdiv+0x190>
 8000d48:	080170e0 	.word	0x080170e0
 8000d4c:	08017120 	.word	0x08017120
 8000d50:	f7ffffff 	.word	0xf7ffffff

08000d54 <__eqsf2>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	024e      	lsls	r6, r1, #9
 8000d5a:	004c      	lsls	r4, r1, #1
 8000d5c:	0245      	lsls	r5, r0, #9
 8000d5e:	0a6d      	lsrs	r5, r5, #9
 8000d60:	0e12      	lsrs	r2, r2, #24
 8000d62:	0fc3      	lsrs	r3, r0, #31
 8000d64:	0a76      	lsrs	r6, r6, #9
 8000d66:	0e24      	lsrs	r4, r4, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d010      	beq.n	8000d90 <__eqsf2+0x3c>
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d00c      	beq.n	8000d8c <__eqsf2+0x38>
 8000d72:	2001      	movs	r0, #1
 8000d74:	42a2      	cmp	r2, r4
 8000d76:	d10a      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d78:	42b5      	cmp	r5, r6
 8000d7a:	d108      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d00f      	beq.n	8000da0 <__eqsf2+0x4c>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d104      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d84:	0028      	movs	r0, r5
 8000d86:	1e43      	subs	r3, r0, #1
 8000d88:	4198      	sbcs	r0, r3
 8000d8a:	e000      	b.n	8000d8e <__eqsf2+0x3a>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	2001      	movs	r0, #1
 8000d92:	2cff      	cmp	r4, #255	@ 0xff
 8000d94:	d1fb      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d96:	4335      	orrs	r5, r6
 8000d98:	d1f9      	bne.n	8000d8e <__eqsf2+0x3a>
 8000d9a:	404b      	eors	r3, r1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	e7f6      	b.n	8000d8e <__eqsf2+0x3a>
 8000da0:	2000      	movs	r0, #0
 8000da2:	e7f4      	b.n	8000d8e <__eqsf2+0x3a>

08000da4 <__gesf2>:
 8000da4:	b530      	push	{r4, r5, lr}
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	0244      	lsls	r4, r0, #9
 8000daa:	024d      	lsls	r5, r1, #9
 8000dac:	0fc3      	lsrs	r3, r0, #31
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	0e12      	lsrs	r2, r2, #24
 8000db4:	0a6d      	lsrs	r5, r5, #9
 8000db6:	0e00      	lsrs	r0, r0, #24
 8000db8:	0fc9      	lsrs	r1, r1, #31
 8000dba:	2aff      	cmp	r2, #255	@ 0xff
 8000dbc:	d019      	beq.n	8000df2 <__gesf2+0x4e>
 8000dbe:	28ff      	cmp	r0, #255	@ 0xff
 8000dc0:	d00b      	beq.n	8000dda <__gesf2+0x36>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d11e      	bne.n	8000e04 <__gesf2+0x60>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d10b      	bne.n	8000de2 <__gesf2+0x3e>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d027      	beq.n	8000e1e <__gesf2+0x7a>
 8000dce:	2c00      	cmp	r4, #0
 8000dd0:	d134      	bne.n	8000e3c <__gesf2+0x98>
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d02f      	beq.n	8000e36 <__gesf2+0x92>
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	bd30      	pop	{r4, r5, pc}
 8000dda:	2d00      	cmp	r5, #0
 8000ddc:	d128      	bne.n	8000e30 <__gesf2+0x8c>
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d101      	bne.n	8000de6 <__gesf2+0x42>
 8000de2:	2c00      	cmp	r4, #0
 8000de4:	d0f5      	beq.n	8000dd2 <__gesf2+0x2e>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d107      	bne.n	8000dfa <__gesf2+0x56>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d023      	beq.n	8000e36 <__gesf2+0x92>
 8000dee:	0018      	movs	r0, r3
 8000df0:	e7f2      	b.n	8000dd8 <__gesf2+0x34>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d11c      	bne.n	8000e30 <__gesf2+0x8c>
 8000df6:	28ff      	cmp	r0, #255	@ 0xff
 8000df8:	d014      	beq.n	8000e24 <__gesf2+0x80>
 8000dfa:	1e58      	subs	r0, r3, #1
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	4018      	ands	r0, r3
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7e9      	b.n	8000dd8 <__gesf2+0x34>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d0f8      	beq.n	8000dfa <__gesf2+0x56>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d1f6      	bne.n	8000dfa <__gesf2+0x56>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	dcf4      	bgt.n	8000dfa <__gesf2+0x56>
 8000e10:	dbeb      	blt.n	8000dea <__gesf2+0x46>
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	d8f1      	bhi.n	8000dfa <__gesf2+0x56>
 8000e16:	2000      	movs	r0, #0
 8000e18:	42ac      	cmp	r4, r5
 8000e1a:	d2dd      	bcs.n	8000dd8 <__gesf2+0x34>
 8000e1c:	e7e5      	b.n	8000dea <__gesf2+0x46>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d0da      	beq.n	8000dd8 <__gesf2+0x34>
 8000e22:	e7ea      	b.n	8000dfa <__gesf2+0x56>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d103      	bne.n	8000e30 <__gesf2+0x8c>
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d1e6      	bne.n	8000dfa <__gesf2+0x56>
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7d3      	b.n	8000dd8 <__gesf2+0x34>
 8000e30:	2002      	movs	r0, #2
 8000e32:	4240      	negs	r0, r0
 8000e34:	e7d0      	b.n	8000dd8 <__gesf2+0x34>
 8000e36:	2001      	movs	r0, #1
 8000e38:	4240      	negs	r0, r0
 8000e3a:	e7cd      	b.n	8000dd8 <__gesf2+0x34>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d0e8      	beq.n	8000e12 <__gesf2+0x6e>
 8000e40:	e7db      	b.n	8000dfa <__gesf2+0x56>
 8000e42:	46c0      	nop			@ (mov r8, r8)

08000e44 <__lesf2>:
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0244      	lsls	r4, r0, #9
 8000e4a:	024d      	lsls	r5, r1, #9
 8000e4c:	0fc3      	lsrs	r3, r0, #31
 8000e4e:	0048      	lsls	r0, r1, #1
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	0e12      	lsrs	r2, r2, #24
 8000e54:	0a6d      	lsrs	r5, r5, #9
 8000e56:	0e00      	lsrs	r0, r0, #24
 8000e58:	0fc9      	lsrs	r1, r1, #31
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d01a      	beq.n	8000e94 <__lesf2+0x50>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d00e      	beq.n	8000e80 <__lesf2+0x3c>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d11e      	bne.n	8000ea4 <__lesf2+0x60>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d10e      	bne.n	8000e88 <__lesf2+0x44>
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d02a      	beq.n	8000ec4 <__lesf2+0x80>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d00c      	beq.n	8000e8c <__lesf2+0x48>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d01d      	beq.n	8000eb2 <__lesf2+0x6e>
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	2302      	movs	r3, #2
 8000e7a:	4018      	ands	r0, r3
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e010      	b.n	8000ea2 <__lesf2+0x5e>
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d10d      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d120      	bne.n	8000eca <__lesf2+0x86>
 8000e88:	2c00      	cmp	r4, #0
 8000e8a:	d11e      	bne.n	8000eca <__lesf2+0x86>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d023      	beq.n	8000ed8 <__lesf2+0x94>
 8000e90:	0008      	movs	r0, r1
 8000e92:	e006      	b.n	8000ea2 <__lesf2+0x5e>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d103      	bne.n	8000ea0 <__lesf2+0x5c>
 8000e98:	28ff      	cmp	r0, #255	@ 0xff
 8000e9a:	d1ec      	bne.n	8000e76 <__lesf2+0x32>
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d017      	beq.n	8000ed0 <__lesf2+0x8c>
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0e6      	beq.n	8000e76 <__lesf2+0x32>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1e4      	bne.n	8000e76 <__lesf2+0x32>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	dce2      	bgt.n	8000e76 <__lesf2+0x32>
 8000eb0:	db04      	blt.n	8000ebc <__lesf2+0x78>
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d8df      	bhi.n	8000e76 <__lesf2+0x32>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d2f2      	bcs.n	8000ea2 <__lesf2+0x5e>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <__lesf2+0x94>
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	e7ee      	b.n	8000ea2 <__lesf2+0x5e>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d0ec      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ec8:	e7d5      	b.n	8000e76 <__lesf2+0x32>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1d3      	bne.n	8000e76 <__lesf2+0x32>
 8000ece:	e7f5      	b.n	8000ebc <__lesf2+0x78>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d0e5      	beq.n	8000ea2 <__lesf2+0x5e>
 8000ed6:	e7ce      	b.n	8000e76 <__lesf2+0x32>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4240      	negs	r0, r0
 8000edc:	e7e1      	b.n	8000ea2 <__lesf2+0x5e>
 8000ede:	46c0      	nop			@ (mov r8, r8)

08000ee0 <__aeabi_fmul>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	464f      	mov	r7, r9
 8000ee4:	4646      	mov	r6, r8
 8000ee6:	46d6      	mov	lr, sl
 8000ee8:	0243      	lsls	r3, r0, #9
 8000eea:	0a5b      	lsrs	r3, r3, #9
 8000eec:	0045      	lsls	r5, r0, #1
 8000eee:	b5c0      	push	{r6, r7, lr}
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	1c0f      	adds	r7, r1, #0
 8000ef4:	0e2d      	lsrs	r5, r5, #24
 8000ef6:	0fc6      	lsrs	r6, r0, #31
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fmul+0x1e>
 8000efc:	e088      	b.n	8001010 <__aeabi_fmul+0x130>
 8000efe:	2dff      	cmp	r5, #255	@ 0xff
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fmul+0x24>
 8000f02:	e08d      	b.n	8001020 <__aeabi_fmul+0x140>
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	04d2      	lsls	r2, r2, #19
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4691      	mov	r9, r2
 8000f10:	4698      	mov	r8, r3
 8000f12:	469a      	mov	sl, r3
 8000f14:	3d7f      	subs	r5, #127	@ 0x7f
 8000f16:	027c      	lsls	r4, r7, #9
 8000f18:	007b      	lsls	r3, r7, #1
 8000f1a:	0a64      	lsrs	r4, r4, #9
 8000f1c:	0e1b      	lsrs	r3, r3, #24
 8000f1e:	0fff      	lsrs	r7, r7, #31
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d068      	beq.n	8000ff6 <__aeabi_fmul+0x116>
 8000f24:	2bff      	cmp	r3, #255	@ 0xff
 8000f26:	d021      	beq.n	8000f6c <__aeabi_fmul+0x8c>
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	00e4      	lsls	r4, r4, #3
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	4314      	orrs	r4, r2
 8000f30:	4642      	mov	r2, r8
 8000f32:	3b7f      	subs	r3, #127	@ 0x7f
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	2100      	movs	r1, #0
 8000f38:	1c5d      	adds	r5, r3, #1
 8000f3a:	2a0a      	cmp	r2, #10
 8000f3c:	dc2e      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8000f3e:	407e      	eors	r6, r7
 8000f40:	4642      	mov	r2, r8
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	dc23      	bgt.n	8000f8e <__aeabi_fmul+0xae>
 8000f46:	3a01      	subs	r2, #1
 8000f48:	2a01      	cmp	r2, #1
 8000f4a:	d900      	bls.n	8000f4e <__aeabi_fmul+0x6e>
 8000f4c:	e0bd      	b.n	80010ca <__aeabi_fmul+0x1ea>
 8000f4e:	2902      	cmp	r1, #2
 8000f50:	d06e      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000f52:	2901      	cmp	r1, #1
 8000f54:	d12c      	bne.n	8000fb0 <__aeabi_fmul+0xd0>
 8000f56:	2000      	movs	r0, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	05c0      	lsls	r0, r0, #23
 8000f5c:	07f6      	lsls	r6, r6, #31
 8000f5e:	4310      	orrs	r0, r2
 8000f60:	4330      	orrs	r0, r6
 8000f62:	bce0      	pop	{r5, r6, r7}
 8000f64:	46ba      	mov	sl, r7
 8000f66:	46b1      	mov	r9, r6
 8000f68:	46a8      	mov	r8, r5
 8000f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	33ff      	adds	r3, #255	@ 0xff
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d065      	beq.n	8001040 <__aeabi_fmul+0x160>
 8000f74:	2203      	movs	r2, #3
 8000f76:	4641      	mov	r1, r8
 8000f78:	4311      	orrs	r1, r2
 8000f7a:	0032      	movs	r2, r6
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	4688      	mov	r8, r1
 8000f80:	407a      	eors	r2, r7
 8000f82:	35ff      	adds	r5, #255	@ 0xff
 8000f84:	290a      	cmp	r1, #10
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_fmul+0xaa>
 8000f88:	e0d8      	b.n	800113c <__aeabi_fmul+0x25c>
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4640      	mov	r0, r8
 8000f90:	2201      	movs	r2, #1
 8000f92:	4082      	lsls	r2, r0
 8000f94:	20a6      	movs	r0, #166	@ 0xa6
 8000f96:	00c0      	lsls	r0, r0, #3
 8000f98:	4202      	tst	r2, r0
 8000f9a:	d020      	beq.n	8000fde <__aeabi_fmul+0xfe>
 8000f9c:	4653      	mov	r3, sl
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d046      	beq.n	8001030 <__aeabi_fmul+0x150>
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fmul+0xc8>
 8000fa6:	e0bb      	b.n	8001120 <__aeabi_fmul+0x240>
 8000fa8:	4651      	mov	r1, sl
 8000faa:	464c      	mov	r4, r9
 8000fac:	2901      	cmp	r1, #1
 8000fae:	d0d2      	beq.n	8000f56 <__aeabi_fmul+0x76>
 8000fb0:	002b      	movs	r3, r5
 8000fb2:	337f      	adds	r3, #127	@ 0x7f
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd70      	ble.n	800109a <__aeabi_fmul+0x1ba>
 8000fb8:	0762      	lsls	r2, r4, #29
 8000fba:	d004      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	4022      	ands	r2, r4
 8000fc0:	2a04      	cmp	r2, #4
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fmul+0xe6>
 8000fc4:	3404      	adds	r4, #4
 8000fc6:	0122      	lsls	r2, r4, #4
 8000fc8:	d503      	bpl.n	8000fd2 <__aeabi_fmul+0xf2>
 8000fca:	4b63      	ldr	r3, [pc, #396]	@ (8001158 <__aeabi_fmul+0x278>)
 8000fcc:	401c      	ands	r4, r3
 8000fce:	002b      	movs	r3, r5
 8000fd0:	3380      	adds	r3, #128	@ 0x80
 8000fd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fd4:	dc2c      	bgt.n	8001030 <__aeabi_fmul+0x150>
 8000fd6:	01a2      	lsls	r2, r4, #6
 8000fd8:	0a52      	lsrs	r2, r2, #9
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	e7bd      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8000fde:	2090      	movs	r0, #144	@ 0x90
 8000fe0:	0080      	lsls	r0, r0, #2
 8000fe2:	4202      	tst	r2, r0
 8000fe4:	d127      	bne.n	8001036 <__aeabi_fmul+0x156>
 8000fe6:	38b9      	subs	r0, #185	@ 0xb9
 8000fe8:	38ff      	subs	r0, #255	@ 0xff
 8000fea:	4210      	tst	r0, r2
 8000fec:	d06d      	beq.n	80010ca <__aeabi_fmul+0x1ea>
 8000fee:	003e      	movs	r6, r7
 8000ff0:	46a1      	mov	r9, r4
 8000ff2:	468a      	mov	sl, r1
 8000ff4:	e7d2      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d141      	bne.n	800107e <__aeabi_fmul+0x19e>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4690      	mov	r8, r2
 8001002:	002b      	movs	r3, r5
 8001004:	4642      	mov	r2, r8
 8001006:	2101      	movs	r1, #1
 8001008:	1c5d      	adds	r5, r3, #1
 800100a:	2a0a      	cmp	r2, #10
 800100c:	dd97      	ble.n	8000f3e <__aeabi_fmul+0x5e>
 800100e:	e7c5      	b.n	8000f9c <__aeabi_fmul+0xbc>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d126      	bne.n	8001062 <__aeabi_fmul+0x182>
 8001014:	2304      	movs	r3, #4
 8001016:	4698      	mov	r8, r3
 8001018:	3b03      	subs	r3, #3
 800101a:	2500      	movs	r5, #0
 800101c:	469a      	mov	sl, r3
 800101e:	e77a      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d118      	bne.n	8001056 <__aeabi_fmul+0x176>
 8001024:	2308      	movs	r3, #8
 8001026:	4698      	mov	r8, r3
 8001028:	3b06      	subs	r3, #6
 800102a:	25ff      	movs	r5, #255	@ 0xff
 800102c:	469a      	mov	sl, r3
 800102e:	e772      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001030:	20ff      	movs	r0, #255	@ 0xff
 8001032:	2200      	movs	r2, #0
 8001034:	e791      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	2600      	movs	r6, #0
 800103a:	20ff      	movs	r0, #255	@ 0xff
 800103c:	03d2      	lsls	r2, r2, #15
 800103e:	e78c      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001040:	4641      	mov	r1, r8
 8001042:	2202      	movs	r2, #2
 8001044:	3501      	adds	r5, #1
 8001046:	4311      	orrs	r1, r2
 8001048:	4688      	mov	r8, r1
 800104a:	35ff      	adds	r5, #255	@ 0xff
 800104c:	290a      	cmp	r1, #10
 800104e:	dca5      	bgt.n	8000f9c <__aeabi_fmul+0xbc>
 8001050:	2102      	movs	r1, #2
 8001052:	407e      	eors	r6, r7
 8001054:	e774      	b.n	8000f40 <__aeabi_fmul+0x60>
 8001056:	230c      	movs	r3, #12
 8001058:	4698      	mov	r8, r3
 800105a:	3b09      	subs	r3, #9
 800105c:	25ff      	movs	r5, #255	@ 0xff
 800105e:	469a      	mov	sl, r3
 8001060:	e759      	b.n	8000f16 <__aeabi_fmul+0x36>
 8001062:	0018      	movs	r0, r3
 8001064:	f002 fa6a 	bl	800353c <__clzsi2>
 8001068:	464a      	mov	r2, r9
 800106a:	1f43      	subs	r3, r0, #5
 800106c:	2576      	movs	r5, #118	@ 0x76
 800106e:	409a      	lsls	r2, r3
 8001070:	2300      	movs	r3, #0
 8001072:	426d      	negs	r5, r5
 8001074:	4691      	mov	r9, r2
 8001076:	4698      	mov	r8, r3
 8001078:	469a      	mov	sl, r3
 800107a:	1a2d      	subs	r5, r5, r0
 800107c:	e74b      	b.n	8000f16 <__aeabi_fmul+0x36>
 800107e:	0020      	movs	r0, r4
 8001080:	f002 fa5c 	bl	800353c <__clzsi2>
 8001084:	4642      	mov	r2, r8
 8001086:	1f43      	subs	r3, r0, #5
 8001088:	409c      	lsls	r4, r3
 800108a:	1a2b      	subs	r3, r5, r0
 800108c:	3b76      	subs	r3, #118	@ 0x76
 800108e:	2100      	movs	r1, #0
 8001090:	1c5d      	adds	r5, r3, #1
 8001092:	2a0a      	cmp	r2, #10
 8001094:	dc00      	bgt.n	8001098 <__aeabi_fmul+0x1b8>
 8001096:	e752      	b.n	8000f3e <__aeabi_fmul+0x5e>
 8001098:	e780      	b.n	8000f9c <__aeabi_fmul+0xbc>
 800109a:	2201      	movs	r2, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b1b      	cmp	r3, #27
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_fmul+0x1c4>
 80010a2:	e758      	b.n	8000f56 <__aeabi_fmul+0x76>
 80010a4:	359e      	adds	r5, #158	@ 0x9e
 80010a6:	0022      	movs	r2, r4
 80010a8:	40ac      	lsls	r4, r5
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	1e63      	subs	r3, r4, #1
 80010ae:	419c      	sbcs	r4, r3
 80010b0:	4322      	orrs	r2, r4
 80010b2:	0753      	lsls	r3, r2, #29
 80010b4:	d004      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010b6:	230f      	movs	r3, #15
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d000      	beq.n	80010c0 <__aeabi_fmul+0x1e0>
 80010be:	3204      	adds	r2, #4
 80010c0:	0153      	lsls	r3, r2, #5
 80010c2:	d537      	bpl.n	8001134 <__aeabi_fmul+0x254>
 80010c4:	2001      	movs	r0, #1
 80010c6:	2200      	movs	r2, #0
 80010c8:	e747      	b.n	8000f5a <__aeabi_fmul+0x7a>
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	464a      	mov	r2, r9
 80010ce:	0424      	lsls	r4, r4, #16
 80010d0:	0c24      	lsrs	r4, r4, #16
 80010d2:	0027      	movs	r7, r4
 80010d4:	0c10      	lsrs	r0, r2, #16
 80010d6:	0412      	lsls	r2, r2, #16
 80010d8:	0c12      	lsrs	r2, r2, #16
 80010da:	4344      	muls	r4, r0
 80010dc:	4357      	muls	r7, r2
 80010de:	4348      	muls	r0, r1
 80010e0:	4351      	muls	r1, r2
 80010e2:	0c3a      	lsrs	r2, r7, #16
 80010e4:	1909      	adds	r1, r1, r4
 80010e6:	1852      	adds	r2, r2, r1
 80010e8:	4294      	cmp	r4, r2
 80010ea:	d903      	bls.n	80010f4 <__aeabi_fmul+0x214>
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	0249      	lsls	r1, r1, #9
 80010f0:	468c      	mov	ip, r1
 80010f2:	4460      	add	r0, ip
 80010f4:	043f      	lsls	r7, r7, #16
 80010f6:	0411      	lsls	r1, r2, #16
 80010f8:	0c3f      	lsrs	r7, r7, #16
 80010fa:	19c9      	adds	r1, r1, r7
 80010fc:	018c      	lsls	r4, r1, #6
 80010fe:	1e67      	subs	r7, r4, #1
 8001100:	41bc      	sbcs	r4, r7
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	0e89      	lsrs	r1, r1, #26
 8001106:	1812      	adds	r2, r2, r0
 8001108:	430c      	orrs	r4, r1
 800110a:	0192      	lsls	r2, r2, #6
 800110c:	4314      	orrs	r4, r2
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	d50e      	bpl.n	8001130 <__aeabi_fmul+0x250>
 8001112:	2301      	movs	r3, #1
 8001114:	0862      	lsrs	r2, r4, #1
 8001116:	401c      	ands	r4, r3
 8001118:	4314      	orrs	r4, r2
 800111a:	e749      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 800111c:	003e      	movs	r6, r7
 800111e:	46a1      	mov	r9, r4
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	464b      	mov	r3, r9
 8001124:	03d2      	lsls	r2, r2, #15
 8001126:	431a      	orrs	r2, r3
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	20ff      	movs	r0, #255	@ 0xff
 800112c:	0a52      	lsrs	r2, r2, #9
 800112e:	e714      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001130:	001d      	movs	r5, r3
 8001132:	e73d      	b.n	8000fb0 <__aeabi_fmul+0xd0>
 8001134:	0192      	lsls	r2, r2, #6
 8001136:	2000      	movs	r0, #0
 8001138:	0a52      	lsrs	r2, r2, #9
 800113a:	e70e      	b.n	8000f5a <__aeabi_fmul+0x7a>
 800113c:	290f      	cmp	r1, #15
 800113e:	d1ed      	bne.n	800111c <__aeabi_fmul+0x23c>
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	464b      	mov	r3, r9
 8001144:	03d2      	lsls	r2, r2, #15
 8001146:	4213      	tst	r3, r2
 8001148:	d0ea      	beq.n	8001120 <__aeabi_fmul+0x240>
 800114a:	4214      	tst	r4, r2
 800114c:	d1e8      	bne.n	8001120 <__aeabi_fmul+0x240>
 800114e:	003e      	movs	r6, r7
 8001150:	20ff      	movs	r0, #255	@ 0xff
 8001152:	4322      	orrs	r2, r4
 8001154:	e701      	b.n	8000f5a <__aeabi_fmul+0x7a>
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	f7ffffff 	.word	0xf7ffffff

0800115c <__aeabi_fsub>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	4647      	mov	r7, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	024e      	lsls	r6, r1, #9
 8001164:	0243      	lsls	r3, r0, #9
 8001166:	0045      	lsls	r5, r0, #1
 8001168:	0a72      	lsrs	r2, r6, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0048      	lsls	r0, r1, #1
 800116e:	b580      	push	{r7, lr}
 8001170:	4694      	mov	ip, r2
 8001172:	0a5f      	lsrs	r7, r3, #9
 8001174:	0e2d      	lsrs	r5, r5, #24
 8001176:	099b      	lsrs	r3, r3, #6
 8001178:	0e00      	lsrs	r0, r0, #24
 800117a:	0fc9      	lsrs	r1, r1, #31
 800117c:	09b6      	lsrs	r6, r6, #6
 800117e:	28ff      	cmp	r0, #255	@ 0xff
 8001180:	d024      	beq.n	80011cc <__aeabi_fsub+0x70>
 8001182:	2201      	movs	r2, #1
 8001184:	4051      	eors	r1, r2
 8001186:	1a2a      	subs	r2, r5, r0
 8001188:	428c      	cmp	r4, r1
 800118a:	d00f      	beq.n	80011ac <__aeabi_fsub+0x50>
 800118c:	2a00      	cmp	r2, #0
 800118e:	dc00      	bgt.n	8001192 <__aeabi_fsub+0x36>
 8001190:	e16a      	b.n	8001468 <__aeabi_fsub+0x30c>
 8001192:	2800      	cmp	r0, #0
 8001194:	d135      	bne.n	8001202 <__aeabi_fsub+0xa6>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x40>
 800119a:	e0a2      	b.n	80012e2 <__aeabi_fsub+0x186>
 800119c:	1e51      	subs	r1, r2, #1
 800119e:	2a01      	cmp	r2, #1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x48>
 80011a2:	e124      	b.n	80013ee <__aeabi_fsub+0x292>
 80011a4:	2aff      	cmp	r2, #255	@ 0xff
 80011a6:	d021      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011a8:	000a      	movs	r2, r1
 80011aa:	e02f      	b.n	800120c <__aeabi_fsub+0xb0>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	dc00      	bgt.n	80011b2 <__aeabi_fsub+0x56>
 80011b0:	e167      	b.n	8001482 <__aeabi_fsub+0x326>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d05e      	beq.n	8001274 <__aeabi_fsub+0x118>
 80011b6:	2dff      	cmp	r5, #255	@ 0xff
 80011b8:	d018      	beq.n	80011ec <__aeabi_fsub+0x90>
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	04c9      	lsls	r1, r1, #19
 80011be:	430e      	orrs	r6, r1
 80011c0:	2a1b      	cmp	r2, #27
 80011c2:	dc00      	bgt.n	80011c6 <__aeabi_fsub+0x6a>
 80011c4:	e076      	b.n	80012b4 <__aeabi_fsub+0x158>
 80011c6:	002a      	movs	r2, r5
 80011c8:	3301      	adds	r3, #1
 80011ca:	e032      	b.n	8001232 <__aeabi_fsub+0xd6>
 80011cc:	002a      	movs	r2, r5
 80011ce:	3aff      	subs	r2, #255	@ 0xff
 80011d0:	4691      	mov	r9, r2
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d042      	beq.n	800125c <__aeabi_fsub+0x100>
 80011d6:	428c      	cmp	r4, r1
 80011d8:	d055      	beq.n	8001286 <__aeabi_fsub+0x12a>
 80011da:	464a      	mov	r2, r9
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x86>
 80011e0:	e09c      	b.n	800131c <__aeabi_fsub+0x1c0>
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x8c>
 80011e6:	e077      	b.n	80012d8 <__aeabi_fsub+0x17c>
 80011e8:	000c      	movs	r4, r1
 80011ea:	0033      	movs	r3, r6
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x98>
 80011f2:	e06e      	b.n	80012d2 <__aeabi_fsub+0x176>
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	03d2      	lsls	r2, r2, #15
 80011f8:	4313      	orrs	r3, r2
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	20ff      	movs	r0, #255	@ 0xff
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	e024      	b.n	800124c <__aeabi_fsub+0xf0>
 8001202:	2dff      	cmp	r5, #255	@ 0xff
 8001204:	d0f2      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	04c9      	lsls	r1, r1, #19
 800120a:	430e      	orrs	r6, r1
 800120c:	2101      	movs	r1, #1
 800120e:	2a1b      	cmp	r2, #27
 8001210:	dc08      	bgt.n	8001224 <__aeabi_fsub+0xc8>
 8001212:	0031      	movs	r1, r6
 8001214:	2020      	movs	r0, #32
 8001216:	40d1      	lsrs	r1, r2
 8001218:	1a82      	subs	r2, r0, r2
 800121a:	4096      	lsls	r6, r2
 800121c:	0032      	movs	r2, r6
 800121e:	1e50      	subs	r0, r2, #1
 8001220:	4182      	sbcs	r2, r0
 8001222:	4311      	orrs	r1, r2
 8001224:	1a5b      	subs	r3, r3, r1
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	d460      	bmi.n	80012ec <__aeabi_fsub+0x190>
 800122a:	2107      	movs	r1, #7
 800122c:	002a      	movs	r2, r5
 800122e:	4019      	ands	r1, r3
 8001230:	d057      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001232:	210f      	movs	r1, #15
 8001234:	4019      	ands	r1, r3
 8001236:	2904      	cmp	r1, #4
 8001238:	d000      	beq.n	800123c <__aeabi_fsub+0xe0>
 800123a:	3304      	adds	r3, #4
 800123c:	0159      	lsls	r1, r3, #5
 800123e:	d550      	bpl.n	80012e2 <__aeabi_fsub+0x186>
 8001240:	1c50      	adds	r0, r2, #1
 8001242:	2afe      	cmp	r2, #254	@ 0xfe
 8001244:	d045      	beq.n	80012d2 <__aeabi_fsub+0x176>
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	b2c0      	uxtb	r0, r0
 800124a:	0a5b      	lsrs	r3, r3, #9
 800124c:	05c0      	lsls	r0, r0, #23
 800124e:	4318      	orrs	r0, r3
 8001250:	07e4      	lsls	r4, r4, #31
 8001252:	4320      	orrs	r0, r4
 8001254:	bcc0      	pop	{r6, r7}
 8001256:	46b9      	mov	r9, r7
 8001258:	46b0      	mov	r8, r6
 800125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125c:	2201      	movs	r2, #1
 800125e:	4051      	eors	r1, r2
 8001260:	428c      	cmp	r4, r1
 8001262:	d1ba      	bne.n	80011da <__aeabi_fsub+0x7e>
 8001264:	464a      	mov	r2, r9
 8001266:	2a00      	cmp	r2, #0
 8001268:	d010      	beq.n	800128c <__aeabi_fsub+0x130>
 800126a:	2d00      	cmp	r5, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_fsub+0x114>
 800126e:	e098      	b.n	80013a2 <__aeabi_fsub+0x246>
 8001270:	2300      	movs	r3, #0
 8001272:	e7bb      	b.n	80011ec <__aeabi_fsub+0x90>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d034      	beq.n	80012e2 <__aeabi_fsub+0x186>
 8001278:	1e51      	subs	r1, r2, #1
 800127a:	2a01      	cmp	r2, #1
 800127c:	d06e      	beq.n	800135c <__aeabi_fsub+0x200>
 800127e:	2aff      	cmp	r2, #255	@ 0xff
 8001280:	d0b4      	beq.n	80011ec <__aeabi_fsub+0x90>
 8001282:	000a      	movs	r2, r1
 8001284:	e79c      	b.n	80011c0 <__aeabi_fsub+0x64>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d000      	beq.n	800128c <__aeabi_fsub+0x130>
 800128a:	e088      	b.n	800139e <__aeabi_fsub+0x242>
 800128c:	20fe      	movs	r0, #254	@ 0xfe
 800128e:	1c6a      	adds	r2, r5, #1
 8001290:	4210      	tst	r0, r2
 8001292:	d000      	beq.n	8001296 <__aeabi_fsub+0x13a>
 8001294:	e092      	b.n	80013bc <__aeabi_fsub+0x260>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d000      	beq.n	800129c <__aeabi_fsub+0x140>
 800129a:	e0a4      	b.n	80013e6 <__aeabi_fsub+0x28a>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x146>
 80012a0:	e0cb      	b.n	800143a <__aeabi_fsub+0x2de>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 80012a6:	e0ca      	b.n	800143e <__aeabi_fsub+0x2e2>
 80012a8:	2200      	movs	r2, #0
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	b2d0      	uxtb	r0, r2
 80012b2:	e7cb      	b.n	800124c <__aeabi_fsub+0xf0>
 80012b4:	0031      	movs	r1, r6
 80012b6:	2020      	movs	r0, #32
 80012b8:	40d1      	lsrs	r1, r2
 80012ba:	1a82      	subs	r2, r0, r2
 80012bc:	4096      	lsls	r6, r2
 80012be:	0032      	movs	r2, r6
 80012c0:	1e50      	subs	r0, r2, #1
 80012c2:	4182      	sbcs	r2, r0
 80012c4:	430a      	orrs	r2, r1
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	d5ae      	bpl.n	800122a <__aeabi_fsub+0xce>
 80012cc:	1c6a      	adds	r2, r5, #1
 80012ce:	2dfe      	cmp	r5, #254	@ 0xfe
 80012d0:	d14a      	bne.n	8001368 <__aeabi_fsub+0x20c>
 80012d2:	20ff      	movs	r0, #255	@ 0xff
 80012d4:	2300      	movs	r3, #0
 80012d6:	e7b9      	b.n	800124c <__aeabi_fsub+0xf0>
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d14b      	bne.n	8001376 <__aeabi_fsub+0x21a>
 80012de:	000c      	movs	r4, r1
 80012e0:	0033      	movs	r3, r6
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	2aff      	cmp	r2, #255	@ 0xff
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x18e>
 80012e8:	e781      	b.n	80011ee <__aeabi_fsub+0x92>
 80012ea:	e7df      	b.n	80012ac <__aeabi_fsub+0x150>
 80012ec:	019f      	lsls	r7, r3, #6
 80012ee:	09bf      	lsrs	r7, r7, #6
 80012f0:	0038      	movs	r0, r7
 80012f2:	f002 f923 	bl	800353c <__clzsi2>
 80012f6:	3805      	subs	r0, #5
 80012f8:	4087      	lsls	r7, r0
 80012fa:	4285      	cmp	r5, r0
 80012fc:	dc21      	bgt.n	8001342 <__aeabi_fsub+0x1e6>
 80012fe:	003b      	movs	r3, r7
 8001300:	2120      	movs	r1, #32
 8001302:	1b42      	subs	r2, r0, r5
 8001304:	3201      	adds	r2, #1
 8001306:	40d3      	lsrs	r3, r2
 8001308:	1a8a      	subs	r2, r1, r2
 800130a:	4097      	lsls	r7, r2
 800130c:	1e7a      	subs	r2, r7, #1
 800130e:	4197      	sbcs	r7, r2
 8001310:	2200      	movs	r2, #0
 8001312:	433b      	orrs	r3, r7
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x1be>
 8001318:	e78b      	b.n	8001232 <__aeabi_fsub+0xd6>
 800131a:	e78f      	b.n	800123c <__aeabi_fsub+0xe0>
 800131c:	20fe      	movs	r0, #254	@ 0xfe
 800131e:	1c6a      	adds	r2, r5, #1
 8001320:	4210      	tst	r0, r2
 8001322:	d112      	bne.n	800134a <__aeabi_fsub+0x1ee>
 8001324:	2d00      	cmp	r5, #0
 8001326:	d152      	bne.n	80013ce <__aeabi_fsub+0x272>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07c      	beq.n	8001426 <__aeabi_fsub+0x2ca>
 800132c:	2e00      	cmp	r6, #0
 800132e:	d0bb      	beq.n	80012a8 <__aeabi_fsub+0x14c>
 8001330:	1b9a      	subs	r2, r3, r6
 8001332:	0150      	lsls	r0, r2, #5
 8001334:	d400      	bmi.n	8001338 <__aeabi_fsub+0x1dc>
 8001336:	e08b      	b.n	8001450 <__aeabi_fsub+0x2f4>
 8001338:	2401      	movs	r4, #1
 800133a:	2200      	movs	r2, #0
 800133c:	1af3      	subs	r3, r6, r3
 800133e:	400c      	ands	r4, r1
 8001340:	e7e8      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <__aeabi_fsub+0x340>)
 8001344:	1a2a      	subs	r2, r5, r0
 8001346:	403b      	ands	r3, r7
 8001348:	e7e4      	b.n	8001314 <__aeabi_fsub+0x1b8>
 800134a:	1b9f      	subs	r7, r3, r6
 800134c:	017a      	lsls	r2, r7, #5
 800134e:	d446      	bmi.n	80013de <__aeabi_fsub+0x282>
 8001350:	2f00      	cmp	r7, #0
 8001352:	d1cd      	bne.n	80012f0 <__aeabi_fsub+0x194>
 8001354:	2400      	movs	r4, #0
 8001356:	2000      	movs	r0, #0
 8001358:	2300      	movs	r3, #0
 800135a:	e777      	b.n	800124c <__aeabi_fsub+0xf0>
 800135c:	199b      	adds	r3, r3, r6
 800135e:	2501      	movs	r5, #1
 8001360:	3201      	adds	r2, #1
 8001362:	0159      	lsls	r1, r3, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x20c>
 8001366:	e760      	b.n	800122a <__aeabi_fsub+0xce>
 8001368:	2101      	movs	r1, #1
 800136a:	484d      	ldr	r0, [pc, #308]	@ (80014a0 <__aeabi_fsub+0x344>)
 800136c:	4019      	ands	r1, r3
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	4003      	ands	r3, r0
 8001372:	430b      	orrs	r3, r1
 8001374:	e7ce      	b.n	8001314 <__aeabi_fsub+0x1b8>
 8001376:	1e57      	subs	r7, r2, #1
 8001378:	2a01      	cmp	r2, #1
 800137a:	d05a      	beq.n	8001432 <__aeabi_fsub+0x2d6>
 800137c:	000c      	movs	r4, r1
 800137e:	2aff      	cmp	r2, #255	@ 0xff
 8001380:	d033      	beq.n	80013ea <__aeabi_fsub+0x28e>
 8001382:	2201      	movs	r2, #1
 8001384:	2f1b      	cmp	r7, #27
 8001386:	dc07      	bgt.n	8001398 <__aeabi_fsub+0x23c>
 8001388:	2120      	movs	r1, #32
 800138a:	1bc9      	subs	r1, r1, r7
 800138c:	001a      	movs	r2, r3
 800138e:	408b      	lsls	r3, r1
 8001390:	40fa      	lsrs	r2, r7
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	418b      	sbcs	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	0005      	movs	r5, r0
 800139a:	1ab3      	subs	r3, r6, r2
 800139c:	e743      	b.n	8001226 <__aeabi_fsub+0xca>
 800139e:	2d00      	cmp	r5, #0
 80013a0:	d123      	bne.n	80013ea <__aeabi_fsub+0x28e>
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d09b      	beq.n	80012e0 <__aeabi_fsub+0x184>
 80013a8:	1e51      	subs	r1, r2, #1
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d0d6      	beq.n	800135c <__aeabi_fsub+0x200>
 80013ae:	2aff      	cmp	r2, #255	@ 0xff
 80013b0:	d01b      	beq.n	80013ea <__aeabi_fsub+0x28e>
 80013b2:	291b      	cmp	r1, #27
 80013b4:	dd2c      	ble.n	8001410 <__aeabi_fsub+0x2b4>
 80013b6:	0002      	movs	r2, r0
 80013b8:	1c73      	adds	r3, r6, #1
 80013ba:	e73a      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013bc:	2aff      	cmp	r2, #255	@ 0xff
 80013be:	d088      	beq.n	80012d2 <__aeabi_fsub+0x176>
 80013c0:	199b      	adds	r3, r3, r6
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x26e>
 80013c8:	e733      	b.n	8001232 <__aeabi_fsub+0xd6>
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e76e      	b.n	80012ac <__aeabi_fsub+0x150>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d110      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d043      	beq.n	800145e <__aeabi_fsub+0x302>
 80013d6:	2401      	movs	r4, #1
 80013d8:	0033      	movs	r3, r6
 80013da:	400c      	ands	r4, r1
 80013dc:	e706      	b.n	80011ec <__aeabi_fsub+0x90>
 80013de:	2401      	movs	r4, #1
 80013e0:	1af7      	subs	r7, r6, r3
 80013e2:	400c      	ands	r4, r1
 80013e4:	e784      	b.n	80012f0 <__aeabi_fsub+0x194>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d104      	bne.n	80013f4 <__aeabi_fsub+0x298>
 80013ea:	0033      	movs	r3, r6
 80013ec:	e6fe      	b.n	80011ec <__aeabi_fsub+0x90>
 80013ee:	2501      	movs	r5, #1
 80013f0:	1b9b      	subs	r3, r3, r6
 80013f2:	e718      	b.n	8001226 <__aeabi_fsub+0xca>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_fsub+0x29e>
 80013f8:	e6f8      	b.n	80011ec <__aeabi_fsub+0x90>
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	03d2      	lsls	r2, r2, #15
 80013fe:	4297      	cmp	r7, r2
 8001400:	d304      	bcc.n	800140c <__aeabi_fsub+0x2b0>
 8001402:	4594      	cmp	ip, r2
 8001404:	d202      	bcs.n	800140c <__aeabi_fsub+0x2b0>
 8001406:	2401      	movs	r4, #1
 8001408:	0033      	movs	r3, r6
 800140a:	400c      	ands	r4, r1
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	e6f1      	b.n	80011f4 <__aeabi_fsub+0x98>
 8001410:	001a      	movs	r2, r3
 8001412:	2520      	movs	r5, #32
 8001414:	40ca      	lsrs	r2, r1
 8001416:	1a69      	subs	r1, r5, r1
 8001418:	408b      	lsls	r3, r1
 800141a:	1e59      	subs	r1, r3, #1
 800141c:	418b      	sbcs	r3, r1
 800141e:	4313      	orrs	r3, r2
 8001420:	0005      	movs	r5, r0
 8001422:	199b      	adds	r3, r3, r6
 8001424:	e750      	b.n	80012c8 <__aeabi_fsub+0x16c>
 8001426:	2e00      	cmp	r6, #0
 8001428:	d094      	beq.n	8001354 <__aeabi_fsub+0x1f8>
 800142a:	2401      	movs	r4, #1
 800142c:	0033      	movs	r3, r6
 800142e:	400c      	ands	r4, r1
 8001430:	e73a      	b.n	80012a8 <__aeabi_fsub+0x14c>
 8001432:	000c      	movs	r4, r1
 8001434:	2501      	movs	r5, #1
 8001436:	1af3      	subs	r3, r6, r3
 8001438:	e6f5      	b.n	8001226 <__aeabi_fsub+0xca>
 800143a:	0033      	movs	r3, r6
 800143c:	e734      	b.n	80012a8 <__aeabi_fsub+0x14c>
 800143e:	199b      	adds	r3, r3, r6
 8001440:	2200      	movs	r2, #0
 8001442:	0159      	lsls	r1, r3, #5
 8001444:	d5c1      	bpl.n	80013ca <__aeabi_fsub+0x26e>
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <__aeabi_fsub+0x340>)
 8001448:	4013      	ands	r3, r2
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	2201      	movs	r2, #1
 800144e:	e72d      	b.n	80012ac <__aeabi_fsub+0x150>
 8001450:	2a00      	cmp	r2, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_fsub+0x2fa>
 8001454:	e77e      	b.n	8001354 <__aeabi_fsub+0x1f8>
 8001456:	0013      	movs	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	e726      	b.n	80012ac <__aeabi_fsub+0x150>
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	2400      	movs	r4, #0
 8001462:	20ff      	movs	r0, #255	@ 0xff
 8001464:	03db      	lsls	r3, r3, #15
 8001466:	e6f1      	b.n	800124c <__aeabi_fsub+0xf0>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_fsub+0x312>
 800146c:	e756      	b.n	800131c <__aeabi_fsub+0x1c0>
 800146e:	1b47      	subs	r7, r0, r5
 8001470:	003a      	movs	r2, r7
 8001472:	2d00      	cmp	r5, #0
 8001474:	d100      	bne.n	8001478 <__aeabi_fsub+0x31c>
 8001476:	e730      	b.n	80012da <__aeabi_fsub+0x17e>
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	04d2      	lsls	r2, r2, #19
 800147c:	000c      	movs	r4, r1
 800147e:	4313      	orrs	r3, r2
 8001480:	e77f      	b.n	8001382 <__aeabi_fsub+0x226>
 8001482:	2a00      	cmp	r2, #0
 8001484:	d100      	bne.n	8001488 <__aeabi_fsub+0x32c>
 8001486:	e701      	b.n	800128c <__aeabi_fsub+0x130>
 8001488:	1b41      	subs	r1, r0, r5
 800148a:	2d00      	cmp	r5, #0
 800148c:	d101      	bne.n	8001492 <__aeabi_fsub+0x336>
 800148e:	000a      	movs	r2, r1
 8001490:	e788      	b.n	80013a4 <__aeabi_fsub+0x248>
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	04d2      	lsls	r2, r2, #19
 8001496:	4313      	orrs	r3, r2
 8001498:	e78b      	b.n	80013b2 <__aeabi_fsub+0x256>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	fbffffff 	.word	0xfbffffff
 80014a0:	7dffffff 	.word	0x7dffffff

080014a4 <__aeabi_fcmpun>:
 80014a4:	0243      	lsls	r3, r0, #9
 80014a6:	024a      	lsls	r2, r1, #9
 80014a8:	0040      	lsls	r0, r0, #1
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	0a5b      	lsrs	r3, r3, #9
 80014ae:	0a52      	lsrs	r2, r2, #9
 80014b0:	0e09      	lsrs	r1, r1, #24
 80014b2:	0e00      	lsrs	r0, r0, #24
 80014b4:	28ff      	cmp	r0, #255	@ 0xff
 80014b6:	d006      	beq.n	80014c6 <__aeabi_fcmpun+0x22>
 80014b8:	2000      	movs	r0, #0
 80014ba:	29ff      	cmp	r1, #255	@ 0xff
 80014bc:	d102      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014be:	1e53      	subs	r3, r2, #1
 80014c0:	419a      	sbcs	r2, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	4770      	bx	lr
 80014c6:	38fe      	subs	r0, #254	@ 0xfe
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1fb      	bne.n	80014c4 <__aeabi_fcmpun+0x20>
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_fcmpun+0x14>
 80014ce:	46c0      	nop			@ (mov r8, r8)

080014d0 <__aeabi_f2iz>:
 80014d0:	0241      	lsls	r1, r0, #9
 80014d2:	0042      	lsls	r2, r0, #1
 80014d4:	0fc3      	lsrs	r3, r0, #31
 80014d6:	0a49      	lsrs	r1, r1, #9
 80014d8:	2000      	movs	r0, #0
 80014da:	0e12      	lsrs	r2, r2, #24
 80014dc:	2a7e      	cmp	r2, #126	@ 0x7e
 80014de:	dd03      	ble.n	80014e8 <__aeabi_f2iz+0x18>
 80014e0:	2a9d      	cmp	r2, #157	@ 0x9d
 80014e2:	dd02      	ble.n	80014ea <__aeabi_f2iz+0x1a>
 80014e4:	4a09      	ldr	r2, [pc, #36]	@ (800150c <__aeabi_f2iz+0x3c>)
 80014e6:	1898      	adds	r0, r3, r2
 80014e8:	4770      	bx	lr
 80014ea:	2080      	movs	r0, #128	@ 0x80
 80014ec:	0400      	lsls	r0, r0, #16
 80014ee:	4301      	orrs	r1, r0
 80014f0:	2a95      	cmp	r2, #149	@ 0x95
 80014f2:	dc07      	bgt.n	8001504 <__aeabi_f2iz+0x34>
 80014f4:	2096      	movs	r0, #150	@ 0x96
 80014f6:	1a82      	subs	r2, r0, r2
 80014f8:	40d1      	lsrs	r1, r2
 80014fa:	4248      	negs	r0, r1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f3      	bne.n	80014e8 <__aeabi_f2iz+0x18>
 8001500:	0008      	movs	r0, r1
 8001502:	e7f1      	b.n	80014e8 <__aeabi_f2iz+0x18>
 8001504:	3a96      	subs	r2, #150	@ 0x96
 8001506:	4091      	lsls	r1, r2
 8001508:	e7f7      	b.n	80014fa <__aeabi_f2iz+0x2a>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	7fffffff 	.word	0x7fffffff

08001510 <__aeabi_i2f>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	2800      	cmp	r0, #0
 8001514:	d013      	beq.n	800153e <__aeabi_i2f+0x2e>
 8001516:	17c3      	asrs	r3, r0, #31
 8001518:	18c5      	adds	r5, r0, r3
 800151a:	405d      	eors	r5, r3
 800151c:	0fc4      	lsrs	r4, r0, #31
 800151e:	0028      	movs	r0, r5
 8001520:	f002 f80c 	bl	800353c <__clzsi2>
 8001524:	239e      	movs	r3, #158	@ 0x9e
 8001526:	0001      	movs	r1, r0
 8001528:	1a1b      	subs	r3, r3, r0
 800152a:	2b96      	cmp	r3, #150	@ 0x96
 800152c:	dc0f      	bgt.n	800154e <__aeabi_i2f+0x3e>
 800152e:	2808      	cmp	r0, #8
 8001530:	d034      	beq.n	800159c <__aeabi_i2f+0x8c>
 8001532:	3908      	subs	r1, #8
 8001534:	408d      	lsls	r5, r1
 8001536:	026d      	lsls	r5, r5, #9
 8001538:	0a6d      	lsrs	r5, r5, #9
 800153a:	b2d8      	uxtb	r0, r3
 800153c:	e002      	b.n	8001544 <__aeabi_i2f+0x34>
 800153e:	2400      	movs	r4, #0
 8001540:	2000      	movs	r0, #0
 8001542:	2500      	movs	r5, #0
 8001544:	05c0      	lsls	r0, r0, #23
 8001546:	4328      	orrs	r0, r5
 8001548:	07e4      	lsls	r4, r4, #31
 800154a:	4320      	orrs	r0, r4
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	2b99      	cmp	r3, #153	@ 0x99
 8001550:	dc16      	bgt.n	8001580 <__aeabi_i2f+0x70>
 8001552:	1f42      	subs	r2, r0, #5
 8001554:	2805      	cmp	r0, #5
 8001556:	d000      	beq.n	800155a <__aeabi_i2f+0x4a>
 8001558:	4095      	lsls	r5, r2
 800155a:	002a      	movs	r2, r5
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <__aeabi_i2f+0x94>)
 800155e:	4002      	ands	r2, r0
 8001560:	076e      	lsls	r6, r5, #29
 8001562:	d009      	beq.n	8001578 <__aeabi_i2f+0x68>
 8001564:	260f      	movs	r6, #15
 8001566:	4035      	ands	r5, r6
 8001568:	2d04      	cmp	r5, #4
 800156a:	d005      	beq.n	8001578 <__aeabi_i2f+0x68>
 800156c:	3204      	adds	r2, #4
 800156e:	0155      	lsls	r5, r2, #5
 8001570:	d502      	bpl.n	8001578 <__aeabi_i2f+0x68>
 8001572:	239f      	movs	r3, #159	@ 0x9f
 8001574:	4002      	ands	r2, r0
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	0192      	lsls	r2, r2, #6
 800157a:	0a55      	lsrs	r5, r2, #9
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	e7e1      	b.n	8001544 <__aeabi_i2f+0x34>
 8001580:	2205      	movs	r2, #5
 8001582:	1a12      	subs	r2, r2, r0
 8001584:	0028      	movs	r0, r5
 8001586:	40d0      	lsrs	r0, r2
 8001588:	0002      	movs	r2, r0
 800158a:	0008      	movs	r0, r1
 800158c:	301b      	adds	r0, #27
 800158e:	4085      	lsls	r5, r0
 8001590:	0028      	movs	r0, r5
 8001592:	1e45      	subs	r5, r0, #1
 8001594:	41a8      	sbcs	r0, r5
 8001596:	4302      	orrs	r2, r0
 8001598:	0015      	movs	r5, r2
 800159a:	e7de      	b.n	800155a <__aeabi_i2f+0x4a>
 800159c:	026d      	lsls	r5, r5, #9
 800159e:	2096      	movs	r0, #150	@ 0x96
 80015a0:	0a6d      	lsrs	r5, r5, #9
 80015a2:	e7cf      	b.n	8001544 <__aeabi_i2f+0x34>
 80015a4:	fbffffff 	.word	0xfbffffff

080015a8 <__aeabi_ui2f>:
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	1e04      	subs	r4, r0, #0
 80015ac:	d00e      	beq.n	80015cc <__aeabi_ui2f+0x24>
 80015ae:	f001 ffc5 	bl	800353c <__clzsi2>
 80015b2:	239e      	movs	r3, #158	@ 0x9e
 80015b4:	0001      	movs	r1, r0
 80015b6:	1a1b      	subs	r3, r3, r0
 80015b8:	2b96      	cmp	r3, #150	@ 0x96
 80015ba:	dc0c      	bgt.n	80015d6 <__aeabi_ui2f+0x2e>
 80015bc:	2808      	cmp	r0, #8
 80015be:	d02f      	beq.n	8001620 <__aeabi_ui2f+0x78>
 80015c0:	3908      	subs	r1, #8
 80015c2:	408c      	lsls	r4, r1
 80015c4:	0264      	lsls	r4, r4, #9
 80015c6:	0a64      	lsrs	r4, r4, #9
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	e001      	b.n	80015d0 <__aeabi_ui2f+0x28>
 80015cc:	2000      	movs	r0, #0
 80015ce:	2400      	movs	r4, #0
 80015d0:	05c0      	lsls	r0, r0, #23
 80015d2:	4320      	orrs	r0, r4
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	2b99      	cmp	r3, #153	@ 0x99
 80015d8:	dc16      	bgt.n	8001608 <__aeabi_ui2f+0x60>
 80015da:	1f42      	subs	r2, r0, #5
 80015dc:	2805      	cmp	r0, #5
 80015de:	d000      	beq.n	80015e2 <__aeabi_ui2f+0x3a>
 80015e0:	4094      	lsls	r4, r2
 80015e2:	0022      	movs	r2, r4
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <__aeabi_ui2f+0x80>)
 80015e6:	4002      	ands	r2, r0
 80015e8:	0765      	lsls	r5, r4, #29
 80015ea:	d009      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015ec:	250f      	movs	r5, #15
 80015ee:	402c      	ands	r4, r5
 80015f0:	2c04      	cmp	r4, #4
 80015f2:	d005      	beq.n	8001600 <__aeabi_ui2f+0x58>
 80015f4:	3204      	adds	r2, #4
 80015f6:	0154      	lsls	r4, r2, #5
 80015f8:	d502      	bpl.n	8001600 <__aeabi_ui2f+0x58>
 80015fa:	239f      	movs	r3, #159	@ 0x9f
 80015fc:	4002      	ands	r2, r0
 80015fe:	1a5b      	subs	r3, r3, r1
 8001600:	0192      	lsls	r2, r2, #6
 8001602:	0a54      	lsrs	r4, r2, #9
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	e7e3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001608:	0002      	movs	r2, r0
 800160a:	0020      	movs	r0, r4
 800160c:	321b      	adds	r2, #27
 800160e:	4090      	lsls	r0, r2
 8001610:	0002      	movs	r2, r0
 8001612:	1e50      	subs	r0, r2, #1
 8001614:	4182      	sbcs	r2, r0
 8001616:	2005      	movs	r0, #5
 8001618:	1a40      	subs	r0, r0, r1
 800161a:	40c4      	lsrs	r4, r0
 800161c:	4314      	orrs	r4, r2
 800161e:	e7e0      	b.n	80015e2 <__aeabi_ui2f+0x3a>
 8001620:	0264      	lsls	r4, r4, #9
 8001622:	2096      	movs	r0, #150	@ 0x96
 8001624:	0a64      	lsrs	r4, r4, #9
 8001626:	e7d3      	b.n	80015d0 <__aeabi_ui2f+0x28>
 8001628:	fbffffff 	.word	0xfbffffff

0800162c <__aeabi_dadd>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4657      	mov	r7, sl
 8001630:	464e      	mov	r6, r9
 8001632:	4645      	mov	r5, r8
 8001634:	46de      	mov	lr, fp
 8001636:	b5e0      	push	{r5, r6, r7, lr}
 8001638:	b083      	sub	sp, #12
 800163a:	9000      	str	r0, [sp, #0]
 800163c:	9101      	str	r1, [sp, #4]
 800163e:	030c      	lsls	r4, r1, #12
 8001640:	004f      	lsls	r7, r1, #1
 8001642:	0fce      	lsrs	r6, r1, #31
 8001644:	0a61      	lsrs	r1, r4, #9
 8001646:	9c00      	ldr	r4, [sp, #0]
 8001648:	031d      	lsls	r5, r3, #12
 800164a:	0f64      	lsrs	r4, r4, #29
 800164c:	430c      	orrs	r4, r1
 800164e:	9900      	ldr	r1, [sp, #0]
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	00c8      	lsls	r0, r1, #3
 8001656:	0059      	lsls	r1, r3, #1
 8001658:	0d4b      	lsrs	r3, r1, #21
 800165a:	4699      	mov	r9, r3
 800165c:	9a00      	ldr	r2, [sp, #0]
 800165e:	9b01      	ldr	r3, [sp, #4]
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	0fd9      	lsrs	r1, r3, #31
 8001664:	0f53      	lsrs	r3, r2, #29
 8001666:	432b      	orrs	r3, r5
 8001668:	469a      	mov	sl, r3
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	0d7f      	lsrs	r7, r7, #21
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4694      	mov	ip, r2
 8001672:	464a      	mov	r2, r9
 8001674:	46b0      	mov	r8, r6
 8001676:	1aba      	subs	r2, r7, r2
 8001678:	428e      	cmp	r6, r1
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x52>
 800167c:	e0b0      	b.n	80017e0 <__aeabi_dadd+0x1b4>
 800167e:	2a00      	cmp	r2, #0
 8001680:	dc00      	bgt.n	8001684 <__aeabi_dadd+0x58>
 8001682:	e078      	b.n	8001776 <__aeabi_dadd+0x14a>
 8001684:	4649      	mov	r1, r9
 8001686:	2900      	cmp	r1, #0
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x60>
 800168a:	e0e9      	b.n	8001860 <__aeabi_dadd+0x234>
 800168c:	49c9      	ldr	r1, [pc, #804]	@ (80019b4 <__aeabi_dadd+0x388>)
 800168e:	428f      	cmp	r7, r1
 8001690:	d100      	bne.n	8001694 <__aeabi_dadd+0x68>
 8001692:	e195      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001694:	2501      	movs	r5, #1
 8001696:	2a38      	cmp	r2, #56	@ 0x38
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_dadd+0x9c>
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	4653      	mov	r3, sl
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	430b      	orrs	r3, r1
 80016a2:	469a      	mov	sl, r3
 80016a4:	2a1f      	cmp	r2, #31
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dadd+0x7e>
 80016a8:	e1e7      	b.n	8001a7a <__aeabi_dadd+0x44e>
 80016aa:	2120      	movs	r1, #32
 80016ac:	4655      	mov	r5, sl
 80016ae:	1a8b      	subs	r3, r1, r2
 80016b0:	4661      	mov	r1, ip
 80016b2:	409d      	lsls	r5, r3
 80016b4:	40d1      	lsrs	r1, r2
 80016b6:	430d      	orrs	r5, r1
 80016b8:	4661      	mov	r1, ip
 80016ba:	4099      	lsls	r1, r3
 80016bc:	1e4b      	subs	r3, r1, #1
 80016be:	4199      	sbcs	r1, r3
 80016c0:	4653      	mov	r3, sl
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	430d      	orrs	r5, r1
 80016c6:	1ae4      	subs	r4, r4, r3
 80016c8:	1b45      	subs	r5, r0, r5
 80016ca:	42a8      	cmp	r0, r5
 80016cc:	4180      	sbcs	r0, r0
 80016ce:	4240      	negs	r0, r0
 80016d0:	1a24      	subs	r4, r4, r0
 80016d2:	0223      	lsls	r3, r4, #8
 80016d4:	d400      	bmi.n	80016d8 <__aeabi_dadd+0xac>
 80016d6:	e10f      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 80016d8:	0264      	lsls	r4, r4, #9
 80016da:	0a64      	lsrs	r4, r4, #9
 80016dc:	2c00      	cmp	r4, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0xb6>
 80016e0:	e139      	b.n	8001956 <__aeabi_dadd+0x32a>
 80016e2:	0020      	movs	r0, r4
 80016e4:	f001 ff2a 	bl	800353c <__clzsi2>
 80016e8:	0003      	movs	r3, r0
 80016ea:	3b08      	subs	r3, #8
 80016ec:	2120      	movs	r1, #32
 80016ee:	0028      	movs	r0, r5
 80016f0:	1aca      	subs	r2, r1, r3
 80016f2:	40d0      	lsrs	r0, r2
 80016f4:	409c      	lsls	r4, r3
 80016f6:	0002      	movs	r2, r0
 80016f8:	409d      	lsls	r5, r3
 80016fa:	4322      	orrs	r2, r4
 80016fc:	429f      	cmp	r7, r3
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dadd+0xd6>
 8001700:	e173      	b.n	80019ea <__aeabi_dadd+0x3be>
 8001702:	1bd8      	subs	r0, r3, r7
 8001704:	3001      	adds	r0, #1
 8001706:	1a09      	subs	r1, r1, r0
 8001708:	002c      	movs	r4, r5
 800170a:	408d      	lsls	r5, r1
 800170c:	40c4      	lsrs	r4, r0
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	0013      	movs	r3, r2
 8001714:	40c2      	lsrs	r2, r0
 8001716:	408b      	lsls	r3, r1
 8001718:	4325      	orrs	r5, r4
 800171a:	2700      	movs	r7, #0
 800171c:	0014      	movs	r4, r2
 800171e:	431d      	orrs	r5, r3
 8001720:	076b      	lsls	r3, r5, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dadd+0x10c>
 8001724:	230f      	movs	r3, #15
 8001726:	402b      	ands	r3, r5
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dadd+0x10c>
 800172c:	1d2b      	adds	r3, r5, #4
 800172e:	42ab      	cmp	r3, r5
 8001730:	41ad      	sbcs	r5, r5
 8001732:	426d      	negs	r5, r5
 8001734:	1964      	adds	r4, r4, r5
 8001736:	001d      	movs	r5, r3
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d400      	bmi.n	800173e <__aeabi_dadd+0x112>
 800173c:	e12d      	b.n	800199a <__aeabi_dadd+0x36e>
 800173e:	4a9d      	ldr	r2, [pc, #628]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001740:	3701      	adds	r7, #1
 8001742:	4297      	cmp	r7, r2
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x11c>
 8001746:	e0d3      	b.n	80018f0 <__aeabi_dadd+0x2c4>
 8001748:	4646      	mov	r6, r8
 800174a:	499b      	ldr	r1, [pc, #620]	@ (80019b8 <__aeabi_dadd+0x38c>)
 800174c:	08ed      	lsrs	r5, r5, #3
 800174e:	4021      	ands	r1, r4
 8001750:	074a      	lsls	r2, r1, #29
 8001752:	432a      	orrs	r2, r5
 8001754:	057c      	lsls	r4, r7, #21
 8001756:	024d      	lsls	r5, r1, #9
 8001758:	0b2d      	lsrs	r5, r5, #12
 800175a:	0d64      	lsrs	r4, r4, #21
 800175c:	0524      	lsls	r4, r4, #20
 800175e:	432c      	orrs	r4, r5
 8001760:	07f6      	lsls	r6, r6, #31
 8001762:	4334      	orrs	r4, r6
 8001764:	0010      	movs	r0, r2
 8001766:	0021      	movs	r1, r4
 8001768:	b003      	add	sp, #12
 800176a:	bcf0      	pop	{r4, r5, r6, r7}
 800176c:	46bb      	mov	fp, r7
 800176e:	46b2      	mov	sl, r6
 8001770:	46a9      	mov	r9, r5
 8001772:	46a0      	mov	r8, r4
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	2a00      	cmp	r2, #0
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x150>
 800177a:	e084      	b.n	8001886 <__aeabi_dadd+0x25a>
 800177c:	464a      	mov	r2, r9
 800177e:	1bd2      	subs	r2, r2, r7
 8001780:	2f00      	cmp	r7, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x15a>
 8001784:	e16d      	b.n	8001a62 <__aeabi_dadd+0x436>
 8001786:	0025      	movs	r5, r4
 8001788:	4305      	orrs	r5, r0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x162>
 800178c:	e127      	b.n	80019de <__aeabi_dadd+0x3b2>
 800178e:	1e56      	subs	r6, r2, #1
 8001790:	2a01      	cmp	r2, #1
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x16a>
 8001794:	e23b      	b.n	8001c0e <__aeabi_dadd+0x5e2>
 8001796:	4d87      	ldr	r5, [pc, #540]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001798:	42aa      	cmp	r2, r5
 800179a:	d100      	bne.n	800179e <__aeabi_dadd+0x172>
 800179c:	e26a      	b.n	8001c74 <__aeabi_dadd+0x648>
 800179e:	2501      	movs	r5, #1
 80017a0:	2e38      	cmp	r6, #56	@ 0x38
 80017a2:	dc12      	bgt.n	80017ca <__aeabi_dadd+0x19e>
 80017a4:	0032      	movs	r2, r6
 80017a6:	2a1f      	cmp	r2, #31
 80017a8:	dd00      	ble.n	80017ac <__aeabi_dadd+0x180>
 80017aa:	e1f8      	b.n	8001b9e <__aeabi_dadd+0x572>
 80017ac:	2620      	movs	r6, #32
 80017ae:	0025      	movs	r5, r4
 80017b0:	1ab6      	subs	r6, r6, r2
 80017b2:	0007      	movs	r7, r0
 80017b4:	4653      	mov	r3, sl
 80017b6:	40b0      	lsls	r0, r6
 80017b8:	40d4      	lsrs	r4, r2
 80017ba:	40b5      	lsls	r5, r6
 80017bc:	40d7      	lsrs	r7, r2
 80017be:	1e46      	subs	r6, r0, #1
 80017c0:	41b0      	sbcs	r0, r6
 80017c2:	1b1b      	subs	r3, r3, r4
 80017c4:	469a      	mov	sl, r3
 80017c6:	433d      	orrs	r5, r7
 80017c8:	4305      	orrs	r5, r0
 80017ca:	4662      	mov	r2, ip
 80017cc:	1b55      	subs	r5, r2, r5
 80017ce:	45ac      	cmp	ip, r5
 80017d0:	4192      	sbcs	r2, r2
 80017d2:	4653      	mov	r3, sl
 80017d4:	4252      	negs	r2, r2
 80017d6:	000e      	movs	r6, r1
 80017d8:	464f      	mov	r7, r9
 80017da:	4688      	mov	r8, r1
 80017dc:	1a9c      	subs	r4, r3, r2
 80017de:	e778      	b.n	80016d2 <__aeabi_dadd+0xa6>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	dc00      	bgt.n	80017e6 <__aeabi_dadd+0x1ba>
 80017e4:	e08e      	b.n	8001904 <__aeabi_dadd+0x2d8>
 80017e6:	4649      	mov	r1, r9
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d175      	bne.n	80018d8 <__aeabi_dadd+0x2ac>
 80017ec:	4661      	mov	r1, ip
 80017ee:	4653      	mov	r3, sl
 80017f0:	4319      	orrs	r1, r3
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x1ca>
 80017f4:	e0f6      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 80017f6:	1e51      	subs	r1, r2, #1
 80017f8:	2a01      	cmp	r2, #1
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x1d2>
 80017fc:	e191      	b.n	8001b22 <__aeabi_dadd+0x4f6>
 80017fe:	4d6d      	ldr	r5, [pc, #436]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001800:	42aa      	cmp	r2, r5
 8001802:	d100      	bne.n	8001806 <__aeabi_dadd+0x1da>
 8001804:	e0dc      	b.n	80019c0 <__aeabi_dadd+0x394>
 8001806:	2501      	movs	r5, #1
 8001808:	2938      	cmp	r1, #56	@ 0x38
 800180a:	dc14      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 800180c:	000a      	movs	r2, r1
 800180e:	2a1f      	cmp	r2, #31
 8001810:	dd00      	ble.n	8001814 <__aeabi_dadd+0x1e8>
 8001812:	e1a2      	b.n	8001b5a <__aeabi_dadd+0x52e>
 8001814:	2120      	movs	r1, #32
 8001816:	4653      	mov	r3, sl
 8001818:	1a89      	subs	r1, r1, r2
 800181a:	408b      	lsls	r3, r1
 800181c:	001d      	movs	r5, r3
 800181e:	4663      	mov	r3, ip
 8001820:	40d3      	lsrs	r3, r2
 8001822:	431d      	orrs	r5, r3
 8001824:	4663      	mov	r3, ip
 8001826:	408b      	lsls	r3, r1
 8001828:	0019      	movs	r1, r3
 800182a:	1e4b      	subs	r3, r1, #1
 800182c:	4199      	sbcs	r1, r3
 800182e:	4653      	mov	r3, sl
 8001830:	40d3      	lsrs	r3, r2
 8001832:	430d      	orrs	r5, r1
 8001834:	18e4      	adds	r4, r4, r3
 8001836:	182d      	adds	r5, r5, r0
 8001838:	4285      	cmp	r5, r0
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1824      	adds	r4, r4, r0
 8001840:	0223      	lsls	r3, r4, #8
 8001842:	d559      	bpl.n	80018f8 <__aeabi_dadd+0x2cc>
 8001844:	4b5b      	ldr	r3, [pc, #364]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001846:	3701      	adds	r7, #1
 8001848:	429f      	cmp	r7, r3
 800184a:	d051      	beq.n	80018f0 <__aeabi_dadd+0x2c4>
 800184c:	2101      	movs	r1, #1
 800184e:	4b5a      	ldr	r3, [pc, #360]	@ (80019b8 <__aeabi_dadd+0x38c>)
 8001850:	086a      	lsrs	r2, r5, #1
 8001852:	401c      	ands	r4, r3
 8001854:	4029      	ands	r1, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	07e5      	lsls	r5, r4, #31
 800185a:	4315      	orrs	r5, r2
 800185c:	0864      	lsrs	r4, r4, #1
 800185e:	e75f      	b.n	8001720 <__aeabi_dadd+0xf4>
 8001860:	4661      	mov	r1, ip
 8001862:	4653      	mov	r3, sl
 8001864:	4319      	orrs	r1, r3
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x23e>
 8001868:	e0bc      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 800186a:	1e51      	subs	r1, r2, #1
 800186c:	2a01      	cmp	r2, #1
 800186e:	d100      	bne.n	8001872 <__aeabi_dadd+0x246>
 8001870:	e164      	b.n	8001b3c <__aeabi_dadd+0x510>
 8001872:	4d50      	ldr	r5, [pc, #320]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001874:	42aa      	cmp	r2, r5
 8001876:	d100      	bne.n	800187a <__aeabi_dadd+0x24e>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dadd+0x524>
 800187a:	2501      	movs	r5, #1
 800187c:	2938      	cmp	r1, #56	@ 0x38
 800187e:	dd00      	ble.n	8001882 <__aeabi_dadd+0x256>
 8001880:	e722      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001882:	000a      	movs	r2, r1
 8001884:	e70e      	b.n	80016a4 <__aeabi_dadd+0x78>
 8001886:	4a4d      	ldr	r2, [pc, #308]	@ (80019bc <__aeabi_dadd+0x390>)
 8001888:	1c7d      	adds	r5, r7, #1
 800188a:	4215      	tst	r5, r2
 800188c:	d000      	beq.n	8001890 <__aeabi_dadd+0x264>
 800188e:	e0d0      	b.n	8001a32 <__aeabi_dadd+0x406>
 8001890:	0025      	movs	r5, r4
 8001892:	4662      	mov	r2, ip
 8001894:	4653      	mov	r3, sl
 8001896:	4305      	orrs	r5, r0
 8001898:	431a      	orrs	r2, r3
 800189a:	2f00      	cmp	r7, #0
 800189c:	d000      	beq.n	80018a0 <__aeabi_dadd+0x274>
 800189e:	e137      	b.n	8001b10 <__aeabi_dadd+0x4e4>
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x27a>
 80018a4:	e1a8      	b.n	8001bf8 <__aeabi_dadd+0x5cc>
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x280>
 80018aa:	e16a      	b.n	8001b82 <__aeabi_dadd+0x556>
 80018ac:	4663      	mov	r3, ip
 80018ae:	1ac5      	subs	r5, r0, r3
 80018b0:	4653      	mov	r3, sl
 80018b2:	1ae2      	subs	r2, r4, r3
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	419b      	sbcs	r3, r3
 80018b8:	425b      	negs	r3, r3
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dadd+0x296>
 80018c0:	e203      	b.n	8001cca <__aeabi_dadd+0x69e>
 80018c2:	4663      	mov	r3, ip
 80018c4:	1a1d      	subs	r5, r3, r0
 80018c6:	45ac      	cmp	ip, r5
 80018c8:	4192      	sbcs	r2, r2
 80018ca:	4653      	mov	r3, sl
 80018cc:	4252      	negs	r2, r2
 80018ce:	1b1c      	subs	r4, r3, r4
 80018d0:	000e      	movs	r6, r1
 80018d2:	4688      	mov	r8, r1
 80018d4:	1aa4      	subs	r4, r4, r2
 80018d6:	e723      	b.n	8001720 <__aeabi_dadd+0xf4>
 80018d8:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <__aeabi_dadd+0x388>)
 80018da:	428f      	cmp	r7, r1
 80018dc:	d070      	beq.n	80019c0 <__aeabi_dadd+0x394>
 80018de:	2501      	movs	r5, #1
 80018e0:	2a38      	cmp	r2, #56	@ 0x38
 80018e2:	dca8      	bgt.n	8001836 <__aeabi_dadd+0x20a>
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	4653      	mov	r3, sl
 80018e8:	0409      	lsls	r1, r1, #16
 80018ea:	430b      	orrs	r3, r1
 80018ec:	469a      	mov	sl, r3
 80018ee:	e78e      	b.n	800180e <__aeabi_dadd+0x1e2>
 80018f0:	003c      	movs	r4, r7
 80018f2:	2500      	movs	r5, #0
 80018f4:	2200      	movs	r2, #0
 80018f6:	e731      	b.n	800175c <__aeabi_dadd+0x130>
 80018f8:	2307      	movs	r3, #7
 80018fa:	402b      	ands	r3, r5
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dadd+0x2d6>
 8001900:	e710      	b.n	8001724 <__aeabi_dadd+0xf8>
 8001902:	e093      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001904:	2a00      	cmp	r2, #0
 8001906:	d074      	beq.n	80019f2 <__aeabi_dadd+0x3c6>
 8001908:	464a      	mov	r2, r9
 800190a:	1bd2      	subs	r2, r2, r7
 800190c:	2f00      	cmp	r7, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x2e6>
 8001910:	e0c7      	b.n	8001aa2 <__aeabi_dadd+0x476>
 8001912:	4928      	ldr	r1, [pc, #160]	@ (80019b4 <__aeabi_dadd+0x388>)
 8001914:	4589      	cmp	r9, r1
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x2ee>
 8001918:	e185      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 800191a:	2501      	movs	r5, #1
 800191c:	2a38      	cmp	r2, #56	@ 0x38
 800191e:	dc12      	bgt.n	8001946 <__aeabi_dadd+0x31a>
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	0409      	lsls	r1, r1, #16
 8001924:	430c      	orrs	r4, r1
 8001926:	2a1f      	cmp	r2, #31
 8001928:	dd00      	ble.n	800192c <__aeabi_dadd+0x300>
 800192a:	e1ab      	b.n	8001c84 <__aeabi_dadd+0x658>
 800192c:	2120      	movs	r1, #32
 800192e:	0025      	movs	r5, r4
 8001930:	1a89      	subs	r1, r1, r2
 8001932:	0007      	movs	r7, r0
 8001934:	4088      	lsls	r0, r1
 8001936:	408d      	lsls	r5, r1
 8001938:	40d7      	lsrs	r7, r2
 800193a:	1e41      	subs	r1, r0, #1
 800193c:	4188      	sbcs	r0, r1
 800193e:	40d4      	lsrs	r4, r2
 8001940:	433d      	orrs	r5, r7
 8001942:	4305      	orrs	r5, r0
 8001944:	44a2      	add	sl, r4
 8001946:	4465      	add	r5, ip
 8001948:	4565      	cmp	r5, ip
 800194a:	4192      	sbcs	r2, r2
 800194c:	4252      	negs	r2, r2
 800194e:	4452      	add	r2, sl
 8001950:	0014      	movs	r4, r2
 8001952:	464f      	mov	r7, r9
 8001954:	e774      	b.n	8001840 <__aeabi_dadd+0x214>
 8001956:	0028      	movs	r0, r5
 8001958:	f001 fdf0 	bl	800353c <__clzsi2>
 800195c:	0003      	movs	r3, r0
 800195e:	3318      	adds	r3, #24
 8001960:	2b1f      	cmp	r3, #31
 8001962:	dc00      	bgt.n	8001966 <__aeabi_dadd+0x33a>
 8001964:	e6c2      	b.n	80016ec <__aeabi_dadd+0xc0>
 8001966:	002a      	movs	r2, r5
 8001968:	3808      	subs	r0, #8
 800196a:	4082      	lsls	r2, r0
 800196c:	429f      	cmp	r7, r3
 800196e:	dd00      	ble.n	8001972 <__aeabi_dadd+0x346>
 8001970:	e0a9      	b.n	8001ac6 <__aeabi_dadd+0x49a>
 8001972:	1bdb      	subs	r3, r3, r7
 8001974:	1c58      	adds	r0, r3, #1
 8001976:	281f      	cmp	r0, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_dadd+0x350>
 800197a:	e1ac      	b.n	8001cd6 <__aeabi_dadd+0x6aa>
 800197c:	0015      	movs	r5, r2
 800197e:	3b1f      	subs	r3, #31
 8001980:	40dd      	lsrs	r5, r3
 8001982:	2820      	cmp	r0, #32
 8001984:	d005      	beq.n	8001992 <__aeabi_dadd+0x366>
 8001986:	2340      	movs	r3, #64	@ 0x40
 8001988:	1a1b      	subs	r3, r3, r0
 800198a:	409a      	lsls	r2, r3
 800198c:	1e53      	subs	r3, r2, #1
 800198e:	419a      	sbcs	r2, r3
 8001990:	4315      	orrs	r5, r2
 8001992:	2307      	movs	r3, #7
 8001994:	2700      	movs	r7, #0
 8001996:	402b      	ands	r3, r5
 8001998:	e7b0      	b.n	80018fc <__aeabi_dadd+0x2d0>
 800199a:	08ed      	lsrs	r5, r5, #3
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <__aeabi_dadd+0x388>)
 800199e:	0762      	lsls	r2, r4, #29
 80019a0:	432a      	orrs	r2, r5
 80019a2:	08e4      	lsrs	r4, r4, #3
 80019a4:	429f      	cmp	r7, r3
 80019a6:	d00f      	beq.n	80019c8 <__aeabi_dadd+0x39c>
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	0b25      	lsrs	r5, r4, #12
 80019ac:	057c      	lsls	r4, r7, #21
 80019ae:	0d64      	lsrs	r4, r4, #21
 80019b0:	e6d4      	b.n	800175c <__aeabi_dadd+0x130>
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	ff7fffff 	.word	0xff7fffff
 80019bc:	000007fe 	.word	0x000007fe
 80019c0:	08c0      	lsrs	r0, r0, #3
 80019c2:	0762      	lsls	r2, r4, #29
 80019c4:	4302      	orrs	r2, r0
 80019c6:	08e4      	lsrs	r4, r4, #3
 80019c8:	0013      	movs	r3, r2
 80019ca:	4323      	orrs	r3, r4
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3a4>
 80019ce:	e186      	b.n	8001cde <__aeabi_dadd+0x6b2>
 80019d0:	2580      	movs	r5, #128	@ 0x80
 80019d2:	032d      	lsls	r5, r5, #12
 80019d4:	4325      	orrs	r5, r4
 80019d6:	032d      	lsls	r5, r5, #12
 80019d8:	4cc3      	ldr	r4, [pc, #780]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 80019da:	0b2d      	lsrs	r5, r5, #12
 80019dc:	e6be      	b.n	800175c <__aeabi_dadd+0x130>
 80019de:	4660      	mov	r0, ip
 80019e0:	4654      	mov	r4, sl
 80019e2:	000e      	movs	r6, r1
 80019e4:	0017      	movs	r7, r2
 80019e6:	08c5      	lsrs	r5, r0, #3
 80019e8:	e7d8      	b.n	800199c <__aeabi_dadd+0x370>
 80019ea:	4cc0      	ldr	r4, [pc, #768]	@ (8001cec <__aeabi_dadd+0x6c0>)
 80019ec:	1aff      	subs	r7, r7, r3
 80019ee:	4014      	ands	r4, r2
 80019f0:	e696      	b.n	8001720 <__aeabi_dadd+0xf4>
 80019f2:	4abf      	ldr	r2, [pc, #764]	@ (8001cf0 <__aeabi_dadd+0x6c4>)
 80019f4:	1c79      	adds	r1, r7, #1
 80019f6:	4211      	tst	r1, r2
 80019f8:	d16b      	bne.n	8001ad2 <__aeabi_dadd+0x4a6>
 80019fa:	0022      	movs	r2, r4
 80019fc:	4302      	orrs	r2, r0
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dadd+0x3d8>
 8001a02:	e0db      	b.n	8001bbc <__aeabi_dadd+0x590>
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x3de>
 8001a08:	e12d      	b.n	8001c66 <__aeabi_dadd+0x63a>
 8001a0a:	4662      	mov	r2, ip
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x3e8>
 8001a12:	e0b6      	b.n	8001b82 <__aeabi_dadd+0x556>
 8001a14:	4663      	mov	r3, ip
 8001a16:	18c5      	adds	r5, r0, r3
 8001a18:	4285      	cmp	r5, r0
 8001a1a:	4180      	sbcs	r0, r0
 8001a1c:	4454      	add	r4, sl
 8001a1e:	4240      	negs	r0, r0
 8001a20:	1824      	adds	r4, r4, r0
 8001a22:	0223      	lsls	r3, r4, #8
 8001a24:	d502      	bpl.n	8001a2c <__aeabi_dadd+0x400>
 8001a26:	000f      	movs	r7, r1
 8001a28:	4bb0      	ldr	r3, [pc, #704]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001a2a:	401c      	ands	r4, r3
 8001a2c:	003a      	movs	r2, r7
 8001a2e:	0028      	movs	r0, r5
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001a32:	4662      	mov	r2, ip
 8001a34:	1a85      	subs	r5, r0, r2
 8001a36:	42a8      	cmp	r0, r5
 8001a38:	4192      	sbcs	r2, r2
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	4691      	mov	r9, r2
 8001a40:	1ae3      	subs	r3, r4, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	464b      	mov	r3, r9
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	d454      	bmi.n	8001afa <__aeabi_dadd+0x4ce>
 8001a50:	464a      	mov	r2, r9
 8001a52:	464c      	mov	r4, r9
 8001a54:	432a      	orrs	r2, r5
 8001a56:	d000      	beq.n	8001a5a <__aeabi_dadd+0x42e>
 8001a58:	e640      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	2500      	movs	r5, #0
 8001a60:	e67c      	b.n	800175c <__aeabi_dadd+0x130>
 8001a62:	4da1      	ldr	r5, [pc, #644]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001a64:	45a9      	cmp	r9, r5
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x43e>
 8001a68:	e090      	b.n	8001b8c <__aeabi_dadd+0x560>
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	2a38      	cmp	r2, #56	@ 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dadd+0x446>
 8001a70:	e6ab      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001a72:	2580      	movs	r5, #128	@ 0x80
 8001a74:	042d      	lsls	r5, r5, #16
 8001a76:	432c      	orrs	r4, r5
 8001a78:	e695      	b.n	80017a6 <__aeabi_dadd+0x17a>
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	4655      	mov	r5, sl
 8001a7e:	3920      	subs	r1, #32
 8001a80:	40cd      	lsrs	r5, r1
 8001a82:	46a9      	mov	r9, r5
 8001a84:	2a20      	cmp	r2, #32
 8001a86:	d006      	beq.n	8001a96 <__aeabi_dadd+0x46a>
 8001a88:	2140      	movs	r1, #64	@ 0x40
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	1a8a      	subs	r2, r1, r2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	4662      	mov	r2, ip
 8001a92:	431a      	orrs	r2, r3
 8001a94:	4694      	mov	ip, r2
 8001a96:	4665      	mov	r5, ip
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	419d      	sbcs	r5, r3
 8001a9c:	464b      	mov	r3, r9
 8001a9e:	431d      	orrs	r5, r3
 8001aa0:	e612      	b.n	80016c8 <__aeabi_dadd+0x9c>
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	4301      	orrs	r1, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x47e>
 8001aa8:	e0c4      	b.n	8001c34 <__aeabi_dadd+0x608>
 8001aaa:	1e51      	subs	r1, r2, #1
 8001aac:	2a01      	cmp	r2, #1
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x486>
 8001ab0:	e0fb      	b.n	8001caa <__aeabi_dadd+0x67e>
 8001ab2:	4d8d      	ldr	r5, [pc, #564]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ab4:	42aa      	cmp	r2, r5
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dadd+0x48e>
 8001ab8:	e0b5      	b.n	8001c26 <__aeabi_dadd+0x5fa>
 8001aba:	2501      	movs	r5, #1
 8001abc:	2938      	cmp	r1, #56	@ 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dadd+0x496>
 8001ac0:	e741      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	e72f      	b.n	8001926 <__aeabi_dadd+0x2fa>
 8001ac6:	4c89      	ldr	r4, [pc, #548]	@ (8001cec <__aeabi_dadd+0x6c0>)
 8001ac8:	1aff      	subs	r7, r7, r3
 8001aca:	4014      	ands	r4, r2
 8001acc:	0762      	lsls	r2, r4, #29
 8001ace:	08e4      	lsrs	r4, r4, #3
 8001ad0:	e76a      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001ad2:	4a85      	ldr	r2, [pc, #532]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ad4:	4291      	cmp	r1, r2
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dadd+0x4ae>
 8001ad8:	e0e3      	b.n	8001ca2 <__aeabi_dadd+0x676>
 8001ada:	4663      	mov	r3, ip
 8001adc:	18c2      	adds	r2, r0, r3
 8001ade:	4282      	cmp	r2, r0
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	0023      	movs	r3, r4
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	4453      	add	r3, sl
 8001ae8:	181b      	adds	r3, r3, r0
 8001aea:	07dd      	lsls	r5, r3, #31
 8001aec:	085c      	lsrs	r4, r3, #1
 8001aee:	2307      	movs	r3, #7
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	4315      	orrs	r5, r2
 8001af4:	000f      	movs	r7, r1
 8001af6:	402b      	ands	r3, r5
 8001af8:	e700      	b.n	80018fc <__aeabi_dadd+0x2d0>
 8001afa:	4663      	mov	r3, ip
 8001afc:	1a1d      	subs	r5, r3, r0
 8001afe:	45ac      	cmp	ip, r5
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	4653      	mov	r3, sl
 8001b04:	4252      	negs	r2, r2
 8001b06:	1b1c      	subs	r4, r3, r4
 8001b08:	000e      	movs	r6, r1
 8001b0a:	4688      	mov	r8, r1
 8001b0c:	1aa4      	subs	r4, r4, r2
 8001b0e:	e5e5      	b.n	80016dc <__aeabi_dadd+0xb0>
 8001b10:	2d00      	cmp	r5, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dadd+0x4ea>
 8001b14:	e091      	b.n	8001c3a <__aeabi_dadd+0x60e>
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d138      	bne.n	8001b8c <__aeabi_dadd+0x560>
 8001b1a:	2480      	movs	r4, #128	@ 0x80
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	e756      	b.n	80019d0 <__aeabi_dadd+0x3a4>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c5      	adds	r5, r0, r3
 8001b26:	4285      	cmp	r5, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	4454      	add	r4, sl
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	1824      	adds	r4, r4, r0
 8001b30:	2701      	movs	r7, #1
 8001b32:	0223      	lsls	r3, r4, #8
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dadd+0x50c>
 8001b36:	e6df      	b.n	80018f8 <__aeabi_dadd+0x2cc>
 8001b38:	2702      	movs	r7, #2
 8001b3a:	e687      	b.n	800184c <__aeabi_dadd+0x220>
 8001b3c:	4663      	mov	r3, ip
 8001b3e:	1ac5      	subs	r5, r0, r3
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	4653      	mov	r3, sl
 8001b46:	4240      	negs	r0, r0
 8001b48:	1ae4      	subs	r4, r4, r3
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	1a24      	subs	r4, r4, r0
 8001b4e:	e5c0      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001b50:	0762      	lsls	r2, r4, #29
 8001b52:	08c0      	lsrs	r0, r0, #3
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08e4      	lsrs	r4, r4, #3
 8001b58:	e736      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	4653      	mov	r3, sl
 8001b5e:	3920      	subs	r1, #32
 8001b60:	40cb      	lsrs	r3, r1
 8001b62:	4699      	mov	r9, r3
 8001b64:	2a20      	cmp	r2, #32
 8001b66:	d006      	beq.n	8001b76 <__aeabi_dadd+0x54a>
 8001b68:	2140      	movs	r1, #64	@ 0x40
 8001b6a:	4653      	mov	r3, sl
 8001b6c:	1a8a      	subs	r2, r1, r2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	4662      	mov	r2, ip
 8001b72:	431a      	orrs	r2, r3
 8001b74:	4694      	mov	ip, r2
 8001b76:	4665      	mov	r5, ip
 8001b78:	1e6b      	subs	r3, r5, #1
 8001b7a:	419d      	sbcs	r5, r3
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	431d      	orrs	r5, r3
 8001b80:	e659      	b.n	8001836 <__aeabi_dadd+0x20a>
 8001b82:	0762      	lsls	r2, r4, #29
 8001b84:	08c0      	lsrs	r0, r0, #3
 8001b86:	4302      	orrs	r2, r0
 8001b88:	08e4      	lsrs	r4, r4, #3
 8001b8a:	e70d      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	075a      	lsls	r2, r3, #29
 8001b90:	4663      	mov	r3, ip
 8001b92:	08d8      	lsrs	r0, r3, #3
 8001b94:	4653      	mov	r3, sl
 8001b96:	000e      	movs	r6, r1
 8001b98:	4302      	orrs	r2, r0
 8001b9a:	08dc      	lsrs	r4, r3, #3
 8001b9c:	e714      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	0026      	movs	r6, r4
 8001ba2:	3d20      	subs	r5, #32
 8001ba4:	40ee      	lsrs	r6, r5
 8001ba6:	2a20      	cmp	r2, #32
 8001ba8:	d003      	beq.n	8001bb2 <__aeabi_dadd+0x586>
 8001baa:	2540      	movs	r5, #64	@ 0x40
 8001bac:	1aaa      	subs	r2, r5, r2
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4320      	orrs	r0, r4
 8001bb2:	1e42      	subs	r2, r0, #1
 8001bb4:	4190      	sbcs	r0, r2
 8001bb6:	0005      	movs	r5, r0
 8001bb8:	4335      	orrs	r5, r6
 8001bba:	e606      	b.n	80017ca <__aeabi_dadd+0x19e>
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d07c      	beq.n	8001cba <__aeabi_dadd+0x68e>
 8001bc0:	4662      	mov	r2, ip
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dadd+0x5a0>
 8001bca:	e6fa      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001bcc:	0762      	lsls	r2, r4, #29
 8001bce:	4310      	orrs	r0, r2
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	08e4      	lsrs	r4, r4, #3
 8001bd4:	0312      	lsls	r2, r2, #12
 8001bd6:	4214      	tst	r4, r2
 8001bd8:	d008      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001bda:	08d9      	lsrs	r1, r3, #3
 8001bdc:	4211      	tst	r1, r2
 8001bde:	d105      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001be0:	4663      	mov	r3, ip
 8001be2:	08d8      	lsrs	r0, r3, #3
 8001be4:	4653      	mov	r3, sl
 8001be6:	000c      	movs	r4, r1
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	4318      	orrs	r0, r3
 8001bec:	0f42      	lsrs	r2, r0, #29
 8001bee:	00c0      	lsls	r0, r0, #3
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	e6e7      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x5d2>
 8001bfc:	e72d      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001bfe:	4663      	mov	r3, ip
 8001c00:	08d8      	lsrs	r0, r3, #3
 8001c02:	4653      	mov	r3, sl
 8001c04:	075a      	lsls	r2, r3, #29
 8001c06:	000e      	movs	r6, r1
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	08dc      	lsrs	r4, r3, #3
 8001c0c:	e6cc      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c0e:	4663      	mov	r3, ip
 8001c10:	1a1d      	subs	r5, r3, r0
 8001c12:	45ac      	cmp	ip, r5
 8001c14:	4192      	sbcs	r2, r2
 8001c16:	4653      	mov	r3, sl
 8001c18:	4252      	negs	r2, r2
 8001c1a:	1b1c      	subs	r4, r3, r4
 8001c1c:	000e      	movs	r6, r1
 8001c1e:	4688      	mov	r8, r1
 8001c20:	1aa4      	subs	r4, r4, r2
 8001c22:	3701      	adds	r7, #1
 8001c24:	e555      	b.n	80016d2 <__aeabi_dadd+0xa6>
 8001c26:	4663      	mov	r3, ip
 8001c28:	08d9      	lsrs	r1, r3, #3
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	075a      	lsls	r2, r3, #29
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	08dc      	lsrs	r4, r3, #3
 8001c32:	e6c9      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c34:	4660      	mov	r0, ip
 8001c36:	4654      	mov	r4, sl
 8001c38:	e6d4      	b.n	80019e4 <__aeabi_dadd+0x3b8>
 8001c3a:	08c0      	lsrs	r0, r0, #3
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dadd+0x616>
 8001c40:	e6bf      	b.n	80019c2 <__aeabi_dadd+0x396>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	4310      	orrs	r0, r2
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	0312      	lsls	r2, r2, #12
 8001c4c:	4214      	tst	r4, r2
 8001c4e:	d0cd      	beq.n	8001bec <__aeabi_dadd+0x5c0>
 8001c50:	08dd      	lsrs	r5, r3, #3
 8001c52:	4215      	tst	r5, r2
 8001c54:	d1ca      	bne.n	8001bec <__aeabi_dadd+0x5c0>
 8001c56:	4663      	mov	r3, ip
 8001c58:	08d8      	lsrs	r0, r3, #3
 8001c5a:	4653      	mov	r3, sl
 8001c5c:	075b      	lsls	r3, r3, #29
 8001c5e:	000e      	movs	r6, r1
 8001c60:	002c      	movs	r4, r5
 8001c62:	4318      	orrs	r0, r3
 8001c64:	e7c2      	b.n	8001bec <__aeabi_dadd+0x5c0>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e699      	b.n	80019a8 <__aeabi_dadd+0x37c>
 8001c74:	4663      	mov	r3, ip
 8001c76:	08d8      	lsrs	r0, r3, #3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	075a      	lsls	r2, r3, #29
 8001c7c:	000e      	movs	r6, r1
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	08dc      	lsrs	r4, r3, #3
 8001c82:	e6a1      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001c84:	0011      	movs	r1, r2
 8001c86:	0027      	movs	r7, r4
 8001c88:	3920      	subs	r1, #32
 8001c8a:	40cf      	lsrs	r7, r1
 8001c8c:	2a20      	cmp	r2, #32
 8001c8e:	d003      	beq.n	8001c98 <__aeabi_dadd+0x66c>
 8001c90:	2140      	movs	r1, #64	@ 0x40
 8001c92:	1a8a      	subs	r2, r1, r2
 8001c94:	4094      	lsls	r4, r2
 8001c96:	4320      	orrs	r0, r4
 8001c98:	1e42      	subs	r2, r0, #1
 8001c9a:	4190      	sbcs	r0, r2
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	433d      	orrs	r5, r7
 8001ca0:	e651      	b.n	8001946 <__aeabi_dadd+0x31a>
 8001ca2:	000c      	movs	r4, r1
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	e558      	b.n	800175c <__aeabi_dadd+0x130>
 8001caa:	4460      	add	r0, ip
 8001cac:	4560      	cmp	r0, ip
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	4454      	add	r4, sl
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	18a4      	adds	r4, r4, r2
 8001cb8:	e73a      	b.n	8001b30 <__aeabi_dadd+0x504>
 8001cba:	4653      	mov	r3, sl
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08dc      	lsrs	r4, r3, #3
 8001cc8:	e67e      	b.n	80019c8 <__aeabi_dadd+0x39c>
 8001cca:	001a      	movs	r2, r3
 8001ccc:	001c      	movs	r4, r3
 8001cce:	432a      	orrs	r2, r5
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dadd+0x6a8>
 8001cd2:	e6ab      	b.n	8001a2c <__aeabi_dadd+0x400>
 8001cd4:	e6c1      	b.n	8001a5a <__aeabi_dadd+0x42e>
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	2500      	movs	r5, #0
 8001cda:	1a09      	subs	r1, r1, r0
 8001cdc:	e519      	b.n	8001712 <__aeabi_dadd+0xe6>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	4c01      	ldr	r4, [pc, #4]	@ (8001ce8 <__aeabi_dadd+0x6bc>)
 8001ce4:	e53a      	b.n	800175c <__aeabi_dadd+0x130>
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	ff7fffff 	.word	0xff7fffff
 8001cf0:	000007fe 	.word	0x000007fe

08001cf4 <__aeabi_ddiv>:
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	46de      	mov	lr, fp
 8001cf8:	4645      	mov	r5, r8
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	b5e0      	push	{r5, r6, r7, lr}
 8001d00:	b087      	sub	sp, #28
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	030b      	lsls	r3, r1, #12
 8001d08:	0b1b      	lsrs	r3, r3, #12
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	0fca      	lsrs	r2, r1, #31
 8001d0e:	004b      	lsls	r3, r1, #1
 8001d10:	0004      	movs	r4, r0
 8001d12:	4680      	mov	r8, r0
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x28>
 8001d1a:	e16a      	b.n	8001ff2 <__aeabi_ddiv+0x2fe>
 8001d1c:	4ad4      	ldr	r2, [pc, #848]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x30>
 8001d22:	e18c      	b.n	800203e <__aeabi_ddiv+0x34a>
 8001d24:	4659      	mov	r1, fp
 8001d26:	0f42      	lsrs	r2, r0, #29
 8001d28:	00c9      	lsls	r1, r1, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	0409      	lsls	r1, r1, #16
 8001d30:	4311      	orrs	r1, r2
 8001d32:	00c2      	lsls	r2, r0, #3
 8001d34:	4690      	mov	r8, r2
 8001d36:	4acf      	ldr	r2, [pc, #828]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d38:	4689      	mov	r9, r1
 8001d3a:	4692      	mov	sl, r2
 8001d3c:	449a      	add	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2400      	movs	r4, #0
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	9e00      	ldr	r6, [sp, #0]
 8001d46:	9f01      	ldr	r7, [sp, #4]
 8001d48:	033b      	lsls	r3, r7, #12
 8001d4a:	0b1b      	lsrs	r3, r3, #12
 8001d4c:	469b      	mov	fp, r3
 8001d4e:	007b      	lsls	r3, r7, #1
 8001d50:	0030      	movs	r0, r6
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	0ffd      	lsrs	r5, r7, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x68>
 8001d5a:	e128      	b.n	8001fae <__aeabi_ddiv+0x2ba>
 8001d5c:	4ac4      	ldr	r2, [pc, #784]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x70>
 8001d62:	e177      	b.n	8002054 <__aeabi_ddiv+0x360>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f72      	lsrs	r2, r6, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	468b      	mov	fp, r1
 8001d74:	49bf      	ldr	r1, [pc, #764]	@ (8002074 <__aeabi_ddiv+0x380>)
 8001d76:	00f2      	lsls	r2, r6, #3
 8001d78:	468c      	mov	ip, r1
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	4463      	add	r3, ip
 8001d7e:	1acb      	subs	r3, r1, r3
 8001d80:	469a      	mov	sl, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	9e02      	ldr	r6, [sp, #8]
 8001d86:	406e      	eors	r6, r5
 8001d88:	2c0f      	cmp	r4, #15
 8001d8a:	d827      	bhi.n	8001ddc <__aeabi_ddiv+0xe8>
 8001d8c:	49ba      	ldr	r1, [pc, #744]	@ (8002078 <__aeabi_ddiv+0x384>)
 8001d8e:	00a4      	lsls	r4, r4, #2
 8001d90:	5909      	ldr	r1, [r1, r4]
 8001d92:	468f      	mov	pc, r1
 8001d94:	46cb      	mov	fp, r9
 8001d96:	4642      	mov	r2, r8
 8001d98:	9e02      	ldr	r6, [sp, #8]
 8001d9a:	9b03      	ldr	r3, [sp, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d016      	beq.n	8001dce <__aeabi_ddiv+0xda>
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0xb2>
 8001da4:	e2a6      	b.n	80022f4 <__aeabi_ddiv+0x600>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d000      	beq.n	8001dac <__aeabi_ddiv+0xb8>
 8001daa:	e0df      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8001dac:	2200      	movs	r2, #0
 8001dae:	2300      	movs	r3, #0
 8001db0:	2400      	movs	r4, #0
 8001db2:	4690      	mov	r8, r2
 8001db4:	051b      	lsls	r3, r3, #20
 8001db6:	4323      	orrs	r3, r4
 8001db8:	07f6      	lsls	r6, r6, #31
 8001dba:	4333      	orrs	r3, r6
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	b007      	add	sp, #28
 8001dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc4:	46bb      	mov	fp, r7
 8001dc6:	46b2      	mov	sl, r6
 8001dc8:	46a9      	mov	r9, r5
 8001dca:	46a0      	mov	r8, r4
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8002070 <__aeabi_ddiv+0x37c>)
 8001dd6:	e7ed      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001dd8:	002e      	movs	r6, r5
 8001dda:	e7df      	b.n	8001d9c <__aeabi_ddiv+0xa8>
 8001ddc:	45cb      	cmp	fp, r9
 8001dde:	d200      	bcs.n	8001de2 <__aeabi_ddiv+0xee>
 8001de0:	e1d4      	b.n	800218c <__aeabi_ddiv+0x498>
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xf2>
 8001de4:	e1cf      	b.n	8002186 <__aeabi_ddiv+0x492>
 8001de6:	2301      	movs	r3, #1
 8001de8:	425b      	negs	r3, r3
 8001dea:	469c      	mov	ip, r3
 8001dec:	4644      	mov	r4, r8
 8001dee:	4648      	mov	r0, r9
 8001df0:	2700      	movs	r7, #0
 8001df2:	44e2      	add	sl, ip
 8001df4:	465b      	mov	r3, fp
 8001df6:	0e15      	lsrs	r5, r2, #24
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	431d      	orrs	r5, r3
 8001dfc:	0c19      	lsrs	r1, r3, #16
 8001dfe:	042b      	lsls	r3, r5, #16
 8001e00:	0212      	lsls	r2, r2, #8
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	0c1d      	lsrs	r5, r3, #16
 8001e06:	4691      	mov	r9, r2
 8001e08:	9102      	str	r1, [sp, #8]
 8001e0a:	9503      	str	r5, [sp, #12]
 8001e0c:	f7fe fa1e 	bl	800024c <__aeabi_uidivmod>
 8001e10:	0002      	movs	r2, r0
 8001e12:	436a      	muls	r2, r5
 8001e14:	040b      	lsls	r3, r1, #16
 8001e16:	0c21      	lsrs	r1, r4, #16
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4319      	orrs	r1, r3
 8001e1c:	428a      	cmp	r2, r1
 8001e1e:	d909      	bls.n	8001e34 <__aeabi_ddiv+0x140>
 8001e20:	9d00      	ldr	r5, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	46ac      	mov	ip, r5
 8001e26:	425b      	negs	r3, r3
 8001e28:	4461      	add	r1, ip
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	44e0      	add	r8, ip
 8001e2e:	428d      	cmp	r5, r1
 8001e30:	d800      	bhi.n	8001e34 <__aeabi_ddiv+0x140>
 8001e32:	e1fb      	b.n	800222c <__aeabi_ddiv+0x538>
 8001e34:	1a88      	subs	r0, r1, r2
 8001e36:	9902      	ldr	r1, [sp, #8]
 8001e38:	f7fe fa08 	bl	800024c <__aeabi_uidivmod>
 8001e3c:	9a03      	ldr	r2, [sp, #12]
 8001e3e:	0424      	lsls	r4, r4, #16
 8001e40:	4342      	muls	r2, r0
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	0c24      	lsrs	r4, r4, #16
 8001e46:	0003      	movs	r3, r0
 8001e48:	430c      	orrs	r4, r1
 8001e4a:	42a2      	cmp	r2, r4
 8001e4c:	d906      	bls.n	8001e5c <__aeabi_ddiv+0x168>
 8001e4e:	9900      	ldr	r1, [sp, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	468c      	mov	ip, r1
 8001e54:	4464      	add	r4, ip
 8001e56:	42a1      	cmp	r1, r4
 8001e58:	d800      	bhi.n	8001e5c <__aeabi_ddiv+0x168>
 8001e5a:	e1e1      	b.n	8002220 <__aeabi_ddiv+0x52c>
 8001e5c:	1aa0      	subs	r0, r4, r2
 8001e5e:	4642      	mov	r2, r8
 8001e60:	0412      	lsls	r2, r2, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4693      	mov	fp, r2
 8001e66:	464b      	mov	r3, r9
 8001e68:	4659      	mov	r1, fp
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	001d      	movs	r5, r3
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	040b      	lsls	r3, r1, #16
 8001e72:	4649      	mov	r1, r9
 8001e74:	0409      	lsls	r1, r1, #16
 8001e76:	0c09      	lsrs	r1, r1, #16
 8001e78:	000c      	movs	r4, r1
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	435c      	muls	r4, r3
 8001e7e:	0c12      	lsrs	r2, r2, #16
 8001e80:	436b      	muls	r3, r5
 8001e82:	4688      	mov	r8, r1
 8001e84:	4351      	muls	r1, r2
 8001e86:	436a      	muls	r2, r5
 8001e88:	0c25      	lsrs	r5, r4, #16
 8001e8a:	46ac      	mov	ip, r5
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	4463      	add	r3, ip
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d903      	bls.n	8001e9c <__aeabi_ddiv+0x1a8>
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0249      	lsls	r1, r1, #9
 8001e98:	468c      	mov	ip, r1
 8001e9a:	4462      	add	r2, ip
 8001e9c:	0c19      	lsrs	r1, r3, #16
 8001e9e:	0424      	lsls	r4, r4, #16
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	0c24      	lsrs	r4, r4, #16
 8001ea4:	188a      	adds	r2, r1, r2
 8001ea6:	191c      	adds	r4, r3, r4
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	d302      	bcc.n	8001eb2 <__aeabi_ddiv+0x1be>
 8001eac:	d116      	bne.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eae:	42a7      	cmp	r7, r4
 8001eb0:	d214      	bcs.n	8001edc <__aeabi_ddiv+0x1e8>
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	9d00      	ldr	r5, [sp, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	444f      	add	r7, r9
 8001eba:	9305      	str	r3, [sp, #20]
 8001ebc:	454f      	cmp	r7, r9
 8001ebe:	419b      	sbcs	r3, r3
 8001ec0:	46ac      	mov	ip, r5
 8001ec2:	425b      	negs	r3, r3
 8001ec4:	4463      	add	r3, ip
 8001ec6:	18c0      	adds	r0, r0, r3
 8001ec8:	4285      	cmp	r5, r0
 8001eca:	d300      	bcc.n	8001ece <__aeabi_ddiv+0x1da>
 8001ecc:	e1a1      	b.n	8002212 <__aeabi_ddiv+0x51e>
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	d900      	bls.n	8001ed4 <__aeabi_ddiv+0x1e0>
 8001ed2:	e1f6      	b.n	80022c2 <__aeabi_ddiv+0x5ce>
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8001ed6:	e1f1      	b.n	80022bc <__aeabi_ddiv+0x5c8>
 8001ed8:	9b05      	ldr	r3, [sp, #20]
 8001eda:	469b      	mov	fp, r3
 8001edc:	1b3c      	subs	r4, r7, r4
 8001ede:	42a7      	cmp	r7, r4
 8001ee0:	41bf      	sbcs	r7, r7
 8001ee2:	9d00      	ldr	r5, [sp, #0]
 8001ee4:	1a80      	subs	r0, r0, r2
 8001ee6:	427f      	negs	r7, r7
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	4285      	cmp	r5, r0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_ddiv+0x1fc>
 8001eee:	e1d0      	b.n	8002292 <__aeabi_ddiv+0x59e>
 8001ef0:	9902      	ldr	r1, [sp, #8]
 8001ef2:	f7fe f9ab 	bl	800024c <__aeabi_uidivmod>
 8001ef6:	9a03      	ldr	r2, [sp, #12]
 8001ef8:	040b      	lsls	r3, r1, #16
 8001efa:	4342      	muls	r2, r0
 8001efc:	0c21      	lsrs	r1, r4, #16
 8001efe:	0007      	movs	r7, r0
 8001f00:	4319      	orrs	r1, r3
 8001f02:	428a      	cmp	r2, r1
 8001f04:	d900      	bls.n	8001f08 <__aeabi_ddiv+0x214>
 8001f06:	e178      	b.n	80021fa <__aeabi_ddiv+0x506>
 8001f08:	1a88      	subs	r0, r1, r2
 8001f0a:	9902      	ldr	r1, [sp, #8]
 8001f0c:	f7fe f99e 	bl	800024c <__aeabi_uidivmod>
 8001f10:	9a03      	ldr	r2, [sp, #12]
 8001f12:	0424      	lsls	r4, r4, #16
 8001f14:	4342      	muls	r2, r0
 8001f16:	0409      	lsls	r1, r1, #16
 8001f18:	0c24      	lsrs	r4, r4, #16
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	430c      	orrs	r4, r1
 8001f1e:	42a2      	cmp	r2, r4
 8001f20:	d900      	bls.n	8001f24 <__aeabi_ddiv+0x230>
 8001f22:	e15d      	b.n	80021e0 <__aeabi_ddiv+0x4ec>
 8001f24:	4641      	mov	r1, r8
 8001f26:	1aa4      	subs	r4, r4, r2
 8001f28:	043a      	lsls	r2, r7, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	9d04      	ldr	r5, [sp, #16]
 8001f2e:	0413      	lsls	r3, r2, #16
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	4359      	muls	r1, r3
 8001f34:	4647      	mov	r7, r8
 8001f36:	436b      	muls	r3, r5
 8001f38:	469c      	mov	ip, r3
 8001f3a:	0c10      	lsrs	r0, r2, #16
 8001f3c:	4347      	muls	r7, r0
 8001f3e:	0c0b      	lsrs	r3, r1, #16
 8001f40:	44bc      	add	ip, r7
 8001f42:	4463      	add	r3, ip
 8001f44:	4368      	muls	r0, r5
 8001f46:	429f      	cmp	r7, r3
 8001f48:	d903      	bls.n	8001f52 <__aeabi_ddiv+0x25e>
 8001f4a:	2580      	movs	r5, #128	@ 0x80
 8001f4c:	026d      	lsls	r5, r5, #9
 8001f4e:	46ac      	mov	ip, r5
 8001f50:	4460      	add	r0, ip
 8001f52:	0c1f      	lsrs	r7, r3, #16
 8001f54:	0409      	lsls	r1, r1, #16
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	0c09      	lsrs	r1, r1, #16
 8001f5a:	183f      	adds	r7, r7, r0
 8001f5c:	185b      	adds	r3, r3, r1
 8001f5e:	42bc      	cmp	r4, r7
 8001f60:	d200      	bcs.n	8001f64 <__aeabi_ddiv+0x270>
 8001f62:	e102      	b.n	800216a <__aeabi_ddiv+0x476>
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x274>
 8001f66:	e0fd      	b.n	8002164 <__aeabi_ddiv+0x470>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	4b43      	ldr	r3, [pc, #268]	@ (800207c <__aeabi_ddiv+0x388>)
 8001f6e:	4453      	add	r3, sl
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dc00      	bgt.n	8001f76 <__aeabi_ddiv+0x282>
 8001f74:	e0ae      	b.n	80020d4 <__aeabi_ddiv+0x3e0>
 8001f76:	0751      	lsls	r1, r2, #29
 8001f78:	d000      	beq.n	8001f7c <__aeabi_ddiv+0x288>
 8001f7a:	e198      	b.n	80022ae <__aeabi_ddiv+0x5ba>
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	01c9      	lsls	r1, r1, #7
 8001f80:	d506      	bpl.n	8001f90 <__aeabi_ddiv+0x29c>
 8001f82:	4659      	mov	r1, fp
 8001f84:	4b3e      	ldr	r3, [pc, #248]	@ (8002080 <__aeabi_ddiv+0x38c>)
 8001f86:	4019      	ands	r1, r3
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	468b      	mov	fp, r1
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4453      	add	r3, sl
 8001f90:	493c      	ldr	r1, [pc, #240]	@ (8002084 <__aeabi_ddiv+0x390>)
 8001f92:	428b      	cmp	r3, r1
 8001f94:	dd00      	ble.n	8001f98 <__aeabi_ddiv+0x2a4>
 8001f96:	e71a      	b.n	8001dce <__aeabi_ddiv+0xda>
 8001f98:	4659      	mov	r1, fp
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	0749      	lsls	r1, r1, #29
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	465a      	mov	r2, fp
 8001fa2:	055b      	lsls	r3, r3, #21
 8001fa4:	0254      	lsls	r4, r2, #9
 8001fa6:	4688      	mov	r8, r1
 8001fa8:	0b24      	lsrs	r4, r4, #12
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	e702      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8001fae:	465a      	mov	r2, fp
 8001fb0:	9b00      	ldr	r3, [sp, #0]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_ddiv+0x2c4>
 8001fb6:	e07e      	b.n	80020b6 <__aeabi_ddiv+0x3c2>
 8001fb8:	465b      	mov	r3, fp
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_ddiv+0x2cc>
 8001fbe:	e100      	b.n	80021c2 <__aeabi_ddiv+0x4ce>
 8001fc0:	4658      	mov	r0, fp
 8001fc2:	f001 fabb 	bl	800353c <__clzsi2>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3a0b      	subs	r2, #11
 8001fcc:	271d      	movs	r7, #29
 8001fce:	9e00      	ldr	r6, [sp, #0]
 8001fd0:	1aba      	subs	r2, r7, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	4658      	mov	r0, fp
 8001fd6:	40d6      	lsrs	r6, r2
 8001fd8:	3908      	subs	r1, #8
 8001fda:	4088      	lsls	r0, r1
 8001fdc:	0032      	movs	r2, r6
 8001fde:	4302      	orrs	r2, r0
 8001fe0:	4693      	mov	fp, r2
 8001fe2:	9a00      	ldr	r2, [sp, #0]
 8001fe4:	408a      	lsls	r2, r1
 8001fe6:	4928      	ldr	r1, [pc, #160]	@ (8002088 <__aeabi_ddiv+0x394>)
 8001fe8:	4453      	add	r3, sl
 8001fea:	468a      	mov	sl, r1
 8001fec:	449a      	add	sl, r3
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e6c8      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8001ff2:	465b      	mov	r3, fp
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	d056      	beq.n	80020a8 <__aeabi_ddiv+0x3b4>
 8001ffa:	465b      	mov	r3, fp
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0x30e>
 8002000:	e0cd      	b.n	800219e <__aeabi_ddiv+0x4aa>
 8002002:	4658      	mov	r0, fp
 8002004:	f001 fa9a 	bl	800353c <__clzsi2>
 8002008:	230b      	movs	r3, #11
 800200a:	425b      	negs	r3, r3
 800200c:	469c      	mov	ip, r3
 800200e:	0002      	movs	r2, r0
 8002010:	4484      	add	ip, r0
 8002012:	4666      	mov	r6, ip
 8002014:	231d      	movs	r3, #29
 8002016:	1b9b      	subs	r3, r3, r6
 8002018:	0026      	movs	r6, r4
 800201a:	0011      	movs	r1, r2
 800201c:	4658      	mov	r0, fp
 800201e:	40de      	lsrs	r6, r3
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0033      	movs	r3, r6
 8002026:	4303      	orrs	r3, r0
 8002028:	4699      	mov	r9, r3
 800202a:	0023      	movs	r3, r4
 800202c:	408b      	lsls	r3, r1
 800202e:	4698      	mov	r8, r3
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <__aeabi_ddiv+0x398>)
 8002032:	2400      	movs	r4, #0
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	469a      	mov	sl, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9303      	str	r3, [sp, #12]
 800203c:	e682      	b.n	8001d44 <__aeabi_ddiv+0x50>
 800203e:	465a      	mov	r2, fp
 8002040:	4302      	orrs	r2, r0
 8002042:	4691      	mov	r9, r2
 8002044:	d12a      	bne.n	800209c <__aeabi_ddiv+0x3a8>
 8002046:	2200      	movs	r2, #0
 8002048:	469a      	mov	sl, r3
 800204a:	2302      	movs	r3, #2
 800204c:	4690      	mov	r8, r2
 800204e:	2408      	movs	r4, #8
 8002050:	9303      	str	r3, [sp, #12]
 8002052:	e677      	b.n	8001d44 <__aeabi_ddiv+0x50>
 8002054:	465a      	mov	r2, fp
 8002056:	9b00      	ldr	r3, [sp, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <__aeabi_ddiv+0x39c>)
 800205c:	469c      	mov	ip, r3
 800205e:	44e2      	add	sl, ip
 8002060:	2a00      	cmp	r2, #0
 8002062:	d117      	bne.n	8002094 <__aeabi_ddiv+0x3a0>
 8002064:	2302      	movs	r3, #2
 8002066:	431c      	orrs	r4, r3
 8002068:	2300      	movs	r3, #0
 800206a:	469b      	mov	fp, r3
 800206c:	3302      	adds	r3, #2
 800206e:	e689      	b.n	8001d84 <__aeabi_ddiv+0x90>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	fffffc01 	.word	0xfffffc01
 8002078:	0801715c 	.word	0x0801715c
 800207c:	000003ff 	.word	0x000003ff
 8002080:	feffffff 	.word	0xfeffffff
 8002084:	000007fe 	.word	0x000007fe
 8002088:	000003f3 	.word	0x000003f3
 800208c:	fffffc0d 	.word	0xfffffc0d
 8002090:	fffff801 	.word	0xfffff801
 8002094:	2303      	movs	r3, #3
 8002096:	0032      	movs	r2, r6
 8002098:	431c      	orrs	r4, r3
 800209a:	e673      	b.n	8001d84 <__aeabi_ddiv+0x90>
 800209c:	469a      	mov	sl, r3
 800209e:	2303      	movs	r3, #3
 80020a0:	46d9      	mov	r9, fp
 80020a2:	240c      	movs	r4, #12
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	e64d      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020a8:	2300      	movs	r3, #0
 80020aa:	4698      	mov	r8, r3
 80020ac:	469a      	mov	sl, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	2404      	movs	r4, #4
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	e646      	b.n	8001d44 <__aeabi_ddiv+0x50>
 80020b6:	2301      	movs	r3, #1
 80020b8:	431c      	orrs	r4, r3
 80020ba:	2300      	movs	r3, #0
 80020bc:	469b      	mov	fp, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	e660      	b.n	8001d84 <__aeabi_ddiv+0x90>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2480      	movs	r4, #128	@ 0x80
 80020c6:	4698      	mov	r8, r3
 80020c8:	2600      	movs	r6, #0
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <__aeabi_ddiv+0x620>)
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	e671      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 80020d0:	2201      	movs	r2, #1
 80020d2:	4252      	negs	r2, r2
 80020d4:	2101      	movs	r1, #1
 80020d6:	1ac9      	subs	r1, r1, r3
 80020d8:	2938      	cmp	r1, #56	@ 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_ddiv+0x3ea>
 80020dc:	e666      	b.n	8001dac <__aeabi_ddiv+0xb8>
 80020de:	291f      	cmp	r1, #31
 80020e0:	dc00      	bgt.n	80020e4 <__aeabi_ddiv+0x3f0>
 80020e2:	e0ab      	b.n	800223c <__aeabi_ddiv+0x548>
 80020e4:	201f      	movs	r0, #31
 80020e6:	4240      	negs	r0, r0
 80020e8:	1ac3      	subs	r3, r0, r3
 80020ea:	4658      	mov	r0, fp
 80020ec:	40d8      	lsrs	r0, r3
 80020ee:	0003      	movs	r3, r0
 80020f0:	2920      	cmp	r1, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_ddiv+0x40a>
 80020f4:	4658      	mov	r0, fp
 80020f6:	4988      	ldr	r1, [pc, #544]	@ (8002318 <__aeabi_ddiv+0x624>)
 80020f8:	4451      	add	r1, sl
 80020fa:	4088      	lsls	r0, r1
 80020fc:	4302      	orrs	r2, r0
 80020fe:	1e51      	subs	r1, r2, #1
 8002100:	418a      	sbcs	r2, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	2307      	movs	r3, #7
 8002106:	0019      	movs	r1, r3
 8002108:	2400      	movs	r4, #0
 800210a:	4011      	ands	r1, r2
 800210c:	4213      	tst	r3, r2
 800210e:	d00c      	beq.n	800212a <__aeabi_ddiv+0x436>
 8002110:	230f      	movs	r3, #15
 8002112:	4013      	ands	r3, r2
 8002114:	2b04      	cmp	r3, #4
 8002116:	d100      	bne.n	800211a <__aeabi_ddiv+0x426>
 8002118:	e0f9      	b.n	800230e <__aeabi_ddiv+0x61a>
 800211a:	1d11      	adds	r1, r2, #4
 800211c:	4291      	cmp	r1, r2
 800211e:	419b      	sbcs	r3, r3
 8002120:	000a      	movs	r2, r1
 8002122:	425b      	negs	r3, r3
 8002124:	0759      	lsls	r1, r3, #29
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	0b1c      	lsrs	r4, r3, #12
 800212a:	08d2      	lsrs	r2, r2, #3
 800212c:	430a      	orrs	r2, r1
 800212e:	4690      	mov	r8, r2
 8002130:	2300      	movs	r3, #0
 8002132:	e63f      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002134:	2480      	movs	r4, #128	@ 0x80
 8002136:	464b      	mov	r3, r9
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	4223      	tst	r3, r4
 800213c:	d009      	beq.n	8002152 <__aeabi_ddiv+0x45e>
 800213e:	465b      	mov	r3, fp
 8002140:	4223      	tst	r3, r4
 8002142:	d106      	bne.n	8002152 <__aeabi_ddiv+0x45e>
 8002144:	431c      	orrs	r4, r3
 8002146:	0324      	lsls	r4, r4, #12
 8002148:	002e      	movs	r6, r5
 800214a:	4690      	mov	r8, r2
 800214c:	4b71      	ldr	r3, [pc, #452]	@ (8002314 <__aeabi_ddiv+0x620>)
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	e630      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002152:	2480      	movs	r4, #128	@ 0x80
 8002154:	464b      	mov	r3, r9
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	431c      	orrs	r4, r3
 800215a:	0324      	lsls	r4, r4, #12
 800215c:	9e02      	ldr	r6, [sp, #8]
 800215e:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002160:	0b24      	lsrs	r4, r4, #12
 8002162:	e627      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_ddiv+0x476>
 8002168:	e700      	b.n	8001f6c <__aeabi_ddiv+0x278>
 800216a:	9800      	ldr	r0, [sp, #0]
 800216c:	1e51      	subs	r1, r2, #1
 800216e:	4684      	mov	ip, r0
 8002170:	4464      	add	r4, ip
 8002172:	4284      	cmp	r4, r0
 8002174:	d200      	bcs.n	8002178 <__aeabi_ddiv+0x484>
 8002176:	e084      	b.n	8002282 <__aeabi_ddiv+0x58e>
 8002178:	42bc      	cmp	r4, r7
 800217a:	d200      	bcs.n	800217e <__aeabi_ddiv+0x48a>
 800217c:	e0ae      	b.n	80022dc <__aeabi_ddiv+0x5e8>
 800217e:	d100      	bne.n	8002182 <__aeabi_ddiv+0x48e>
 8002180:	e0c1      	b.n	8002306 <__aeabi_ddiv+0x612>
 8002182:	000a      	movs	r2, r1
 8002184:	e6f0      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002186:	4542      	cmp	r2, r8
 8002188:	d900      	bls.n	800218c <__aeabi_ddiv+0x498>
 800218a:	e62c      	b.n	8001de6 <__aeabi_ddiv+0xf2>
 800218c:	464b      	mov	r3, r9
 800218e:	07dc      	lsls	r4, r3, #31
 8002190:	0858      	lsrs	r0, r3, #1
 8002192:	4643      	mov	r3, r8
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	431c      	orrs	r4, r3
 8002198:	4643      	mov	r3, r8
 800219a:	07df      	lsls	r7, r3, #31
 800219c:	e62a      	b.n	8001df4 <__aeabi_ddiv+0x100>
 800219e:	f001 f9cd 	bl	800353c <__clzsi2>
 80021a2:	2315      	movs	r3, #21
 80021a4:	469c      	mov	ip, r3
 80021a6:	4484      	add	ip, r0
 80021a8:	0002      	movs	r2, r0
 80021aa:	4663      	mov	r3, ip
 80021ac:	3220      	adds	r2, #32
 80021ae:	2b1c      	cmp	r3, #28
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_ddiv+0x4c0>
 80021b2:	e72e      	b.n	8002012 <__aeabi_ddiv+0x31e>
 80021b4:	0023      	movs	r3, r4
 80021b6:	3808      	subs	r0, #8
 80021b8:	4083      	lsls	r3, r0
 80021ba:	4699      	mov	r9, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	4698      	mov	r8, r3
 80021c0:	e736      	b.n	8002030 <__aeabi_ddiv+0x33c>
 80021c2:	f001 f9bb 	bl	800353c <__clzsi2>
 80021c6:	0002      	movs	r2, r0
 80021c8:	0003      	movs	r3, r0
 80021ca:	3215      	adds	r2, #21
 80021cc:	3320      	adds	r3, #32
 80021ce:	2a1c      	cmp	r2, #28
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_ddiv+0x4e0>
 80021d2:	e6fb      	b.n	8001fcc <__aeabi_ddiv+0x2d8>
 80021d4:	9900      	ldr	r1, [sp, #0]
 80021d6:	3808      	subs	r0, #8
 80021d8:	4081      	lsls	r1, r0
 80021da:	2200      	movs	r2, #0
 80021dc:	468b      	mov	fp, r1
 80021de:	e702      	b.n	8001fe6 <__aeabi_ddiv+0x2f2>
 80021e0:	9900      	ldr	r1, [sp, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	468c      	mov	ip, r1
 80021e6:	4464      	add	r4, ip
 80021e8:	42a1      	cmp	r1, r4
 80021ea:	d900      	bls.n	80021ee <__aeabi_ddiv+0x4fa>
 80021ec:	e69a      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021ee:	42a2      	cmp	r2, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x500>
 80021f2:	e697      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021f4:	1e83      	subs	r3, r0, #2
 80021f6:	4464      	add	r4, ip
 80021f8:	e694      	b.n	8001f24 <__aeabi_ddiv+0x230>
 80021fa:	46ac      	mov	ip, r5
 80021fc:	4461      	add	r1, ip
 80021fe:	3f01      	subs	r7, #1
 8002200:	428d      	cmp	r5, r1
 8002202:	d900      	bls.n	8002206 <__aeabi_ddiv+0x512>
 8002204:	e680      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002206:	428a      	cmp	r2, r1
 8002208:	d800      	bhi.n	800220c <__aeabi_ddiv+0x518>
 800220a:	e67d      	b.n	8001f08 <__aeabi_ddiv+0x214>
 800220c:	1e87      	subs	r7, r0, #2
 800220e:	4461      	add	r1, ip
 8002210:	e67a      	b.n	8001f08 <__aeabi_ddiv+0x214>
 8002212:	4285      	cmp	r5, r0
 8002214:	d000      	beq.n	8002218 <__aeabi_ddiv+0x524>
 8002216:	e65f      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 8002218:	45b9      	cmp	r9, r7
 800221a:	d900      	bls.n	800221e <__aeabi_ddiv+0x52a>
 800221c:	e65c      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 800221e:	e656      	b.n	8001ece <__aeabi_ddiv+0x1da>
 8002220:	42a2      	cmp	r2, r4
 8002222:	d800      	bhi.n	8002226 <__aeabi_ddiv+0x532>
 8002224:	e61a      	b.n	8001e5c <__aeabi_ddiv+0x168>
 8002226:	1e83      	subs	r3, r0, #2
 8002228:	4464      	add	r4, ip
 800222a:	e617      	b.n	8001e5c <__aeabi_ddiv+0x168>
 800222c:	428a      	cmp	r2, r1
 800222e:	d800      	bhi.n	8002232 <__aeabi_ddiv+0x53e>
 8002230:	e600      	b.n	8001e34 <__aeabi_ddiv+0x140>
 8002232:	46ac      	mov	ip, r5
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4698      	mov	r8, r3
 8002238:	4461      	add	r1, ip
 800223a:	e5fb      	b.n	8001e34 <__aeabi_ddiv+0x140>
 800223c:	4837      	ldr	r0, [pc, #220]	@ (800231c <__aeabi_ddiv+0x628>)
 800223e:	0014      	movs	r4, r2
 8002240:	4450      	add	r0, sl
 8002242:	4082      	lsls	r2, r0
 8002244:	465b      	mov	r3, fp
 8002246:	0017      	movs	r7, r2
 8002248:	4083      	lsls	r3, r0
 800224a:	40cc      	lsrs	r4, r1
 800224c:	1e7a      	subs	r2, r7, #1
 800224e:	4197      	sbcs	r7, r2
 8002250:	4323      	orrs	r3, r4
 8002252:	433b      	orrs	r3, r7
 8002254:	001a      	movs	r2, r3
 8002256:	465b      	mov	r3, fp
 8002258:	40cb      	lsrs	r3, r1
 800225a:	0751      	lsls	r1, r2, #29
 800225c:	d009      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 800225e:	210f      	movs	r1, #15
 8002260:	4011      	ands	r1, r2
 8002262:	2904      	cmp	r1, #4
 8002264:	d005      	beq.n	8002272 <__aeabi_ddiv+0x57e>
 8002266:	1d11      	adds	r1, r2, #4
 8002268:	4291      	cmp	r1, r2
 800226a:	4192      	sbcs	r2, r2
 800226c:	4252      	negs	r2, r2
 800226e:	189b      	adds	r3, r3, r2
 8002270:	000a      	movs	r2, r1
 8002272:	0219      	lsls	r1, r3, #8
 8002274:	d400      	bmi.n	8002278 <__aeabi_ddiv+0x584>
 8002276:	e755      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002278:	2200      	movs	r2, #0
 800227a:	2301      	movs	r3, #1
 800227c:	2400      	movs	r4, #0
 800227e:	4690      	mov	r8, r2
 8002280:	e598      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002282:	000a      	movs	r2, r1
 8002284:	42bc      	cmp	r4, r7
 8002286:	d000      	beq.n	800228a <__aeabi_ddiv+0x596>
 8002288:	e66e      	b.n	8001f68 <__aeabi_ddiv+0x274>
 800228a:	454b      	cmp	r3, r9
 800228c:	d000      	beq.n	8002290 <__aeabi_ddiv+0x59c>
 800228e:	e66b      	b.n	8001f68 <__aeabi_ddiv+0x274>
 8002290:	e66c      	b.n	8001f6c <__aeabi_ddiv+0x278>
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <__aeabi_ddiv+0x62c>)
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <__aeabi_ddiv+0x630>)
 8002296:	4453      	add	r3, sl
 8002298:	4592      	cmp	sl, r2
 800229a:	da00      	bge.n	800229e <__aeabi_ddiv+0x5aa>
 800229c:	e718      	b.n	80020d0 <__aeabi_ddiv+0x3dc>
 800229e:	2101      	movs	r1, #1
 80022a0:	4249      	negs	r1, r1
 80022a2:	1d0a      	adds	r2, r1, #4
 80022a4:	428a      	cmp	r2, r1
 80022a6:	4189      	sbcs	r1, r1
 80022a8:	4249      	negs	r1, r1
 80022aa:	448b      	add	fp, r1
 80022ac:	e666      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022ae:	210f      	movs	r1, #15
 80022b0:	4011      	ands	r1, r2
 80022b2:	2904      	cmp	r1, #4
 80022b4:	d100      	bne.n	80022b8 <__aeabi_ddiv+0x5c4>
 80022b6:	e661      	b.n	8001f7c <__aeabi_ddiv+0x288>
 80022b8:	0011      	movs	r1, r2
 80022ba:	e7f2      	b.n	80022a2 <__aeabi_ddiv+0x5ae>
 80022bc:	42bc      	cmp	r4, r7
 80022be:	d800      	bhi.n	80022c2 <__aeabi_ddiv+0x5ce>
 80022c0:	e60a      	b.n	8001ed8 <__aeabi_ddiv+0x1e4>
 80022c2:	2302      	movs	r3, #2
 80022c4:	425b      	negs	r3, r3
 80022c6:	469c      	mov	ip, r3
 80022c8:	9900      	ldr	r1, [sp, #0]
 80022ca:	444f      	add	r7, r9
 80022cc:	454f      	cmp	r7, r9
 80022ce:	419b      	sbcs	r3, r3
 80022d0:	44e3      	add	fp, ip
 80022d2:	468c      	mov	ip, r1
 80022d4:	425b      	negs	r3, r3
 80022d6:	4463      	add	r3, ip
 80022d8:	18c0      	adds	r0, r0, r3
 80022da:	e5ff      	b.n	8001edc <__aeabi_ddiv+0x1e8>
 80022dc:	4649      	mov	r1, r9
 80022de:	9d00      	ldr	r5, [sp, #0]
 80022e0:	0048      	lsls	r0, r1, #1
 80022e2:	4548      	cmp	r0, r9
 80022e4:	4189      	sbcs	r1, r1
 80022e6:	46ac      	mov	ip, r5
 80022e8:	4249      	negs	r1, r1
 80022ea:	4461      	add	r1, ip
 80022ec:	4681      	mov	r9, r0
 80022ee:	3a02      	subs	r2, #2
 80022f0:	1864      	adds	r4, r4, r1
 80022f2:	e7c7      	b.n	8002284 <__aeabi_ddiv+0x590>
 80022f4:	2480      	movs	r4, #128	@ 0x80
 80022f6:	465b      	mov	r3, fp
 80022f8:	0324      	lsls	r4, r4, #12
 80022fa:	431c      	orrs	r4, r3
 80022fc:	0324      	lsls	r4, r4, #12
 80022fe:	4690      	mov	r8, r2
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <__aeabi_ddiv+0x620>)
 8002302:	0b24      	lsrs	r4, r4, #12
 8002304:	e556      	b.n	8001db4 <__aeabi_ddiv+0xc0>
 8002306:	4599      	cmp	r9, r3
 8002308:	d3e8      	bcc.n	80022dc <__aeabi_ddiv+0x5e8>
 800230a:	000a      	movs	r2, r1
 800230c:	e7bd      	b.n	800228a <__aeabi_ddiv+0x596>
 800230e:	2300      	movs	r3, #0
 8002310:	e708      	b.n	8002124 <__aeabi_ddiv+0x430>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	0000043e 	.word	0x0000043e
 800231c:	0000041e 	.word	0x0000041e
 8002320:	000003ff 	.word	0x000003ff
 8002324:	fffffc02 	.word	0xfffffc02

08002328 <__eqdf2>:
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	4657      	mov	r7, sl
 800232c:	46de      	mov	lr, fp
 800232e:	464e      	mov	r6, r9
 8002330:	4645      	mov	r5, r8
 8002332:	b5e0      	push	{r5, r6, r7, lr}
 8002334:	000d      	movs	r5, r1
 8002336:	0004      	movs	r4, r0
 8002338:	0fe8      	lsrs	r0, r5, #31
 800233a:	4683      	mov	fp, r0
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0fd8      	lsrs	r0, r3, #31
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	4682      	mov	sl, r0
 8002344:	4819      	ldr	r0, [pc, #100]	@ (80023ac <__eqdf2+0x84>)
 8002346:	468c      	mov	ip, r1
 8002348:	031f      	lsls	r7, r3, #12
 800234a:	0069      	lsls	r1, r5, #1
 800234c:	005e      	lsls	r6, r3, #1
 800234e:	0d49      	lsrs	r1, r1, #21
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0d76      	lsrs	r6, r6, #21
 8002354:	4281      	cmp	r1, r0
 8002356:	d018      	beq.n	800238a <__eqdf2+0x62>
 8002358:	4286      	cmp	r6, r0
 800235a:	d00f      	beq.n	800237c <__eqdf2+0x54>
 800235c:	2001      	movs	r0, #1
 800235e:	42b1      	cmp	r1, r6
 8002360:	d10d      	bne.n	800237e <__eqdf2+0x56>
 8002362:	45bc      	cmp	ip, r7
 8002364:	d10b      	bne.n	800237e <__eqdf2+0x56>
 8002366:	4294      	cmp	r4, r2
 8002368:	d109      	bne.n	800237e <__eqdf2+0x56>
 800236a:	45d3      	cmp	fp, sl
 800236c:	d01c      	beq.n	80023a8 <__eqdf2+0x80>
 800236e:	2900      	cmp	r1, #0
 8002370:	d105      	bne.n	800237e <__eqdf2+0x56>
 8002372:	4660      	mov	r0, ip
 8002374:	4320      	orrs	r0, r4
 8002376:	1e43      	subs	r3, r0, #1
 8002378:	4198      	sbcs	r0, r3
 800237a:	e000      	b.n	800237e <__eqdf2+0x56>
 800237c:	2001      	movs	r0, #1
 800237e:	bcf0      	pop	{r4, r5, r6, r7}
 8002380:	46bb      	mov	fp, r7
 8002382:	46b2      	mov	sl, r6
 8002384:	46a9      	mov	r9, r5
 8002386:	46a0      	mov	r8, r4
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2001      	movs	r0, #1
 800238c:	428e      	cmp	r6, r1
 800238e:	d1f6      	bne.n	800237e <__eqdf2+0x56>
 8002390:	4661      	mov	r1, ip
 8002392:	4339      	orrs	r1, r7
 8002394:	000f      	movs	r7, r1
 8002396:	4317      	orrs	r7, r2
 8002398:	4327      	orrs	r7, r4
 800239a:	d1f0      	bne.n	800237e <__eqdf2+0x56>
 800239c:	465b      	mov	r3, fp
 800239e:	4652      	mov	r2, sl
 80023a0:	1a98      	subs	r0, r3, r2
 80023a2:	1e43      	subs	r3, r0, #1
 80023a4:	4198      	sbcs	r0, r3
 80023a6:	e7ea      	b.n	800237e <__eqdf2+0x56>
 80023a8:	2000      	movs	r0, #0
 80023aa:	e7e8      	b.n	800237e <__eqdf2+0x56>
 80023ac:	000007ff 	.word	0x000007ff

080023b0 <__gedf2>:
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	4657      	mov	r7, sl
 80023b4:	464e      	mov	r6, r9
 80023b6:	4645      	mov	r5, r8
 80023b8:	46de      	mov	lr, fp
 80023ba:	b5e0      	push	{r5, r6, r7, lr}
 80023bc:	000d      	movs	r5, r1
 80023be:	030f      	lsls	r7, r1, #12
 80023c0:	0b39      	lsrs	r1, r7, #12
 80023c2:	b083      	sub	sp, #12
 80023c4:	0004      	movs	r4, r0
 80023c6:	4680      	mov	r8, r0
 80023c8:	9101      	str	r1, [sp, #4]
 80023ca:	0058      	lsls	r0, r3, #1
 80023cc:	0fe9      	lsrs	r1, r5, #31
 80023ce:	4f31      	ldr	r7, [pc, #196]	@ (8002494 <__gedf2+0xe4>)
 80023d0:	0d40      	lsrs	r0, r0, #21
 80023d2:	468c      	mov	ip, r1
 80023d4:	006e      	lsls	r6, r5, #1
 80023d6:	0319      	lsls	r1, r3, #12
 80023d8:	4682      	mov	sl, r0
 80023da:	4691      	mov	r9, r2
 80023dc:	0d76      	lsrs	r6, r6, #21
 80023de:	0b09      	lsrs	r1, r1, #12
 80023e0:	0fd8      	lsrs	r0, r3, #31
 80023e2:	42be      	cmp	r6, r7
 80023e4:	d01f      	beq.n	8002426 <__gedf2+0x76>
 80023e6:	45ba      	cmp	sl, r7
 80023e8:	d00f      	beq.n	800240a <__gedf2+0x5a>
 80023ea:	2e00      	cmp	r6, #0
 80023ec:	d12f      	bne.n	800244e <__gedf2+0x9e>
 80023ee:	4655      	mov	r5, sl
 80023f0:	9e01      	ldr	r6, [sp, #4]
 80023f2:	4334      	orrs	r4, r6
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	d127      	bne.n	8002448 <__gedf2+0x98>
 80023f8:	430a      	orrs	r2, r1
 80023fa:	d03a      	beq.n	8002472 <__gedf2+0xc2>
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d145      	bne.n	800248c <__gedf2+0xdc>
 8002400:	2800      	cmp	r0, #0
 8002402:	d11a      	bne.n	800243a <__gedf2+0x8a>
 8002404:	2001      	movs	r0, #1
 8002406:	4240      	negs	r0, r0
 8002408:	e017      	b.n	800243a <__gedf2+0x8a>
 800240a:	4311      	orrs	r1, r2
 800240c:	d13b      	bne.n	8002486 <__gedf2+0xd6>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d102      	bne.n	8002418 <__gedf2+0x68>
 8002412:	9f01      	ldr	r7, [sp, #4]
 8002414:	4327      	orrs	r7, r4
 8002416:	d0f3      	beq.n	8002400 <__gedf2+0x50>
 8002418:	4584      	cmp	ip, r0
 800241a:	d109      	bne.n	8002430 <__gedf2+0x80>
 800241c:	4663      	mov	r3, ip
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <__gedf2+0x54>
 8002422:	4660      	mov	r0, ip
 8002424:	e009      	b.n	800243a <__gedf2+0x8a>
 8002426:	9f01      	ldr	r7, [sp, #4]
 8002428:	4327      	orrs	r7, r4
 800242a:	d12c      	bne.n	8002486 <__gedf2+0xd6>
 800242c:	45b2      	cmp	sl, r6
 800242e:	d024      	beq.n	800247a <__gedf2+0xca>
 8002430:	4663      	mov	r3, ip
 8002432:	2002      	movs	r0, #2
 8002434:	3b01      	subs	r3, #1
 8002436:	4018      	ands	r0, r3
 8002438:	3801      	subs	r0, #1
 800243a:	b003      	add	sp, #12
 800243c:	bcf0      	pop	{r4, r5, r6, r7}
 800243e:	46bb      	mov	fp, r7
 8002440:	46b2      	mov	sl, r6
 8002442:	46a9      	mov	r9, r5
 8002444:	46a0      	mov	r8, r4
 8002446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002448:	2c00      	cmp	r4, #0
 800244a:	d0d9      	beq.n	8002400 <__gedf2+0x50>
 800244c:	e7e4      	b.n	8002418 <__gedf2+0x68>
 800244e:	4654      	mov	r4, sl
 8002450:	2c00      	cmp	r4, #0
 8002452:	d0ed      	beq.n	8002430 <__gedf2+0x80>
 8002454:	4584      	cmp	ip, r0
 8002456:	d1eb      	bne.n	8002430 <__gedf2+0x80>
 8002458:	4556      	cmp	r6, sl
 800245a:	dce9      	bgt.n	8002430 <__gedf2+0x80>
 800245c:	dbde      	blt.n	800241c <__gedf2+0x6c>
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	428b      	cmp	r3, r1
 8002462:	d8e5      	bhi.n	8002430 <__gedf2+0x80>
 8002464:	d1da      	bne.n	800241c <__gedf2+0x6c>
 8002466:	45c8      	cmp	r8, r9
 8002468:	d8e2      	bhi.n	8002430 <__gedf2+0x80>
 800246a:	2000      	movs	r0, #0
 800246c:	45c8      	cmp	r8, r9
 800246e:	d2e4      	bcs.n	800243a <__gedf2+0x8a>
 8002470:	e7d4      	b.n	800241c <__gedf2+0x6c>
 8002472:	2000      	movs	r0, #0
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0e0      	beq.n	800243a <__gedf2+0x8a>
 8002478:	e7da      	b.n	8002430 <__gedf2+0x80>
 800247a:	4311      	orrs	r1, r2
 800247c:	d103      	bne.n	8002486 <__gedf2+0xd6>
 800247e:	4584      	cmp	ip, r0
 8002480:	d1d6      	bne.n	8002430 <__gedf2+0x80>
 8002482:	2000      	movs	r0, #0
 8002484:	e7d9      	b.n	800243a <__gedf2+0x8a>
 8002486:	2002      	movs	r0, #2
 8002488:	4240      	negs	r0, r0
 800248a:	e7d6      	b.n	800243a <__gedf2+0x8a>
 800248c:	4584      	cmp	ip, r0
 800248e:	d0e6      	beq.n	800245e <__gedf2+0xae>
 8002490:	e7ce      	b.n	8002430 <__gedf2+0x80>
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	000007ff 	.word	0x000007ff

08002498 <__ledf2>:
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	4657      	mov	r7, sl
 800249c:	464e      	mov	r6, r9
 800249e:	4645      	mov	r5, r8
 80024a0:	46de      	mov	lr, fp
 80024a2:	b5e0      	push	{r5, r6, r7, lr}
 80024a4:	000d      	movs	r5, r1
 80024a6:	030f      	lsls	r7, r1, #12
 80024a8:	0004      	movs	r4, r0
 80024aa:	4680      	mov	r8, r0
 80024ac:	0fe8      	lsrs	r0, r5, #31
 80024ae:	0b39      	lsrs	r1, r7, #12
 80024b0:	4684      	mov	ip, r0
 80024b2:	b083      	sub	sp, #12
 80024b4:	0058      	lsls	r0, r3, #1
 80024b6:	4f30      	ldr	r7, [pc, #192]	@ (8002578 <__ledf2+0xe0>)
 80024b8:	0d40      	lsrs	r0, r0, #21
 80024ba:	9101      	str	r1, [sp, #4]
 80024bc:	031e      	lsls	r6, r3, #12
 80024be:	0069      	lsls	r1, r5, #1
 80024c0:	4682      	mov	sl, r0
 80024c2:	4691      	mov	r9, r2
 80024c4:	0d49      	lsrs	r1, r1, #21
 80024c6:	0b36      	lsrs	r6, r6, #12
 80024c8:	0fd8      	lsrs	r0, r3, #31
 80024ca:	42b9      	cmp	r1, r7
 80024cc:	d020      	beq.n	8002510 <__ledf2+0x78>
 80024ce:	45ba      	cmp	sl, r7
 80024d0:	d00f      	beq.n	80024f2 <__ledf2+0x5a>
 80024d2:	2900      	cmp	r1, #0
 80024d4:	d12b      	bne.n	800252e <__ledf2+0x96>
 80024d6:	9901      	ldr	r1, [sp, #4]
 80024d8:	430c      	orrs	r4, r1
 80024da:	4651      	mov	r1, sl
 80024dc:	2900      	cmp	r1, #0
 80024de:	d137      	bne.n	8002550 <__ledf2+0xb8>
 80024e0:	4332      	orrs	r2, r6
 80024e2:	d038      	beq.n	8002556 <__ledf2+0xbe>
 80024e4:	2c00      	cmp	r4, #0
 80024e6:	d144      	bne.n	8002572 <__ledf2+0xda>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d119      	bne.n	8002520 <__ledf2+0x88>
 80024ec:	2001      	movs	r0, #1
 80024ee:	4240      	negs	r0, r0
 80024f0:	e016      	b.n	8002520 <__ledf2+0x88>
 80024f2:	4316      	orrs	r6, r2
 80024f4:	d113      	bne.n	800251e <__ledf2+0x86>
 80024f6:	2900      	cmp	r1, #0
 80024f8:	d102      	bne.n	8002500 <__ledf2+0x68>
 80024fa:	9f01      	ldr	r7, [sp, #4]
 80024fc:	4327      	orrs	r7, r4
 80024fe:	d0f3      	beq.n	80024e8 <__ledf2+0x50>
 8002500:	4584      	cmp	ip, r0
 8002502:	d020      	beq.n	8002546 <__ledf2+0xae>
 8002504:	4663      	mov	r3, ip
 8002506:	2002      	movs	r0, #2
 8002508:	3b01      	subs	r3, #1
 800250a:	4018      	ands	r0, r3
 800250c:	3801      	subs	r0, #1
 800250e:	e007      	b.n	8002520 <__ledf2+0x88>
 8002510:	9f01      	ldr	r7, [sp, #4]
 8002512:	4327      	orrs	r7, r4
 8002514:	d103      	bne.n	800251e <__ledf2+0x86>
 8002516:	458a      	cmp	sl, r1
 8002518:	d1f4      	bne.n	8002504 <__ledf2+0x6c>
 800251a:	4316      	orrs	r6, r2
 800251c:	d01f      	beq.n	800255e <__ledf2+0xc6>
 800251e:	2002      	movs	r0, #2
 8002520:	b003      	add	sp, #12
 8002522:	bcf0      	pop	{r4, r5, r6, r7}
 8002524:	46bb      	mov	fp, r7
 8002526:	46b2      	mov	sl, r6
 8002528:	46a9      	mov	r9, r5
 800252a:	46a0      	mov	r8, r4
 800252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252e:	4654      	mov	r4, sl
 8002530:	2c00      	cmp	r4, #0
 8002532:	d0e7      	beq.n	8002504 <__ledf2+0x6c>
 8002534:	4584      	cmp	ip, r0
 8002536:	d1e5      	bne.n	8002504 <__ledf2+0x6c>
 8002538:	4551      	cmp	r1, sl
 800253a:	dce3      	bgt.n	8002504 <__ledf2+0x6c>
 800253c:	db03      	blt.n	8002546 <__ledf2+0xae>
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	42b3      	cmp	r3, r6
 8002542:	d8df      	bhi.n	8002504 <__ledf2+0x6c>
 8002544:	d00f      	beq.n	8002566 <__ledf2+0xce>
 8002546:	4663      	mov	r3, ip
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0cf      	beq.n	80024ec <__ledf2+0x54>
 800254c:	4660      	mov	r0, ip
 800254e:	e7e7      	b.n	8002520 <__ledf2+0x88>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d0c9      	beq.n	80024e8 <__ledf2+0x50>
 8002554:	e7d4      	b.n	8002500 <__ledf2+0x68>
 8002556:	2000      	movs	r0, #0
 8002558:	2c00      	cmp	r4, #0
 800255a:	d0e1      	beq.n	8002520 <__ledf2+0x88>
 800255c:	e7d2      	b.n	8002504 <__ledf2+0x6c>
 800255e:	4584      	cmp	ip, r0
 8002560:	d1d0      	bne.n	8002504 <__ledf2+0x6c>
 8002562:	2000      	movs	r0, #0
 8002564:	e7dc      	b.n	8002520 <__ledf2+0x88>
 8002566:	45c8      	cmp	r8, r9
 8002568:	d8cc      	bhi.n	8002504 <__ledf2+0x6c>
 800256a:	2000      	movs	r0, #0
 800256c:	45c8      	cmp	r8, r9
 800256e:	d2d7      	bcs.n	8002520 <__ledf2+0x88>
 8002570:	e7e9      	b.n	8002546 <__ledf2+0xae>
 8002572:	4584      	cmp	ip, r0
 8002574:	d0e3      	beq.n	800253e <__ledf2+0xa6>
 8002576:	e7c5      	b.n	8002504 <__ledf2+0x6c>
 8002578:	000007ff 	.word	0x000007ff

0800257c <__aeabi_dmul>:
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	4657      	mov	r7, sl
 8002580:	46de      	mov	lr, fp
 8002582:	464e      	mov	r6, r9
 8002584:	4645      	mov	r5, r8
 8002586:	b5e0      	push	{r5, r6, r7, lr}
 8002588:	001f      	movs	r7, r3
 800258a:	030b      	lsls	r3, r1, #12
 800258c:	0b1b      	lsrs	r3, r3, #12
 800258e:	0016      	movs	r6, r2
 8002590:	469a      	mov	sl, r3
 8002592:	0fca      	lsrs	r2, r1, #31
 8002594:	004b      	lsls	r3, r1, #1
 8002596:	0004      	movs	r4, r0
 8002598:	4693      	mov	fp, r2
 800259a:	b087      	sub	sp, #28
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	d100      	bne.n	80025a2 <__aeabi_dmul+0x26>
 80025a0:	e0d5      	b.n	800274e <__aeabi_dmul+0x1d2>
 80025a2:	4abb      	ldr	r2, [pc, #748]	@ (8002890 <__aeabi_dmul+0x314>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <__aeabi_dmul+0x2e>
 80025a8:	e0f8      	b.n	800279c <__aeabi_dmul+0x220>
 80025aa:	4651      	mov	r1, sl
 80025ac:	0f42      	lsrs	r2, r0, #29
 80025ae:	00c9      	lsls	r1, r1, #3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	0409      	lsls	r1, r1, #16
 80025b6:	4311      	orrs	r1, r2
 80025b8:	00c2      	lsls	r2, r0, #3
 80025ba:	4691      	mov	r9, r2
 80025bc:	4ab5      	ldr	r2, [pc, #724]	@ (8002894 <__aeabi_dmul+0x318>)
 80025be:	468a      	mov	sl, r1
 80025c0:	189d      	adds	r5, r3, r2
 80025c2:	2300      	movs	r3, #0
 80025c4:	4698      	mov	r8, r3
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	033c      	lsls	r4, r7, #12
 80025ca:	007b      	lsls	r3, r7, #1
 80025cc:	0ffa      	lsrs	r2, r7, #31
 80025ce:	0030      	movs	r0, r6
 80025d0:	0b24      	lsrs	r4, r4, #12
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	9200      	str	r2, [sp, #0]
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0x5e>
 80025d8:	e096      	b.n	8002708 <__aeabi_dmul+0x18c>
 80025da:	4aad      	ldr	r2, [pc, #692]	@ (8002890 <__aeabi_dmul+0x314>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d031      	beq.n	8002644 <__aeabi_dmul+0xc8>
 80025e0:	0f72      	lsrs	r2, r6, #29
 80025e2:	00e4      	lsls	r4, r4, #3
 80025e4:	4322      	orrs	r2, r4
 80025e6:	2480      	movs	r4, #128	@ 0x80
 80025e8:	0424      	lsls	r4, r4, #16
 80025ea:	4314      	orrs	r4, r2
 80025ec:	4aa9      	ldr	r2, [pc, #676]	@ (8002894 <__aeabi_dmul+0x318>)
 80025ee:	00f0      	lsls	r0, r6, #3
 80025f0:	4694      	mov	ip, r2
 80025f2:	4463      	add	r3, ip
 80025f4:	195b      	adds	r3, r3, r5
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	4642      	mov	r2, r8
 80025fc:	2600      	movs	r6, #0
 80025fe:	2a0a      	cmp	r2, #10
 8002600:	dc42      	bgt.n	8002688 <__aeabi_dmul+0x10c>
 8002602:	465a      	mov	r2, fp
 8002604:	9900      	ldr	r1, [sp, #0]
 8002606:	404a      	eors	r2, r1
 8002608:	4693      	mov	fp, r2
 800260a:	4642      	mov	r2, r8
 800260c:	2a02      	cmp	r2, #2
 800260e:	dc32      	bgt.n	8002676 <__aeabi_dmul+0xfa>
 8002610:	3a01      	subs	r2, #1
 8002612:	2a01      	cmp	r2, #1
 8002614:	d900      	bls.n	8002618 <__aeabi_dmul+0x9c>
 8002616:	e149      	b.n	80028ac <__aeabi_dmul+0x330>
 8002618:	2e02      	cmp	r6, #2
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0xa2>
 800261c:	e0ca      	b.n	80027b4 <__aeabi_dmul+0x238>
 800261e:	2e01      	cmp	r6, #1
 8002620:	d13d      	bne.n	800269e <__aeabi_dmul+0x122>
 8002622:	2300      	movs	r3, #0
 8002624:	2400      	movs	r4, #0
 8002626:	2200      	movs	r2, #0
 8002628:	0010      	movs	r0, r2
 800262a:	465a      	mov	r2, fp
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4323      	orrs	r3, r4
 8002630:	07d2      	lsls	r2, r2, #31
 8002632:	4313      	orrs	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	b007      	add	sp, #28
 8002638:	bcf0      	pop	{r4, r5, r6, r7}
 800263a:	46bb      	mov	fp, r7
 800263c:	46b2      	mov	sl, r6
 800263e:	46a9      	mov	r9, r5
 8002640:	46a0      	mov	r8, r4
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002644:	4b92      	ldr	r3, [pc, #584]	@ (8002890 <__aeabi_dmul+0x314>)
 8002646:	4326      	orrs	r6, r4
 8002648:	18eb      	adds	r3, r5, r3
 800264a:	2e00      	cmp	r6, #0
 800264c:	d100      	bne.n	8002650 <__aeabi_dmul+0xd4>
 800264e:	e0bb      	b.n	80027c8 <__aeabi_dmul+0x24c>
 8002650:	2203      	movs	r2, #3
 8002652:	4641      	mov	r1, r8
 8002654:	4311      	orrs	r1, r2
 8002656:	465a      	mov	r2, fp
 8002658:	4688      	mov	r8, r1
 800265a:	9900      	ldr	r1, [sp, #0]
 800265c:	404a      	eors	r2, r1
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0109      	lsls	r1, r1, #4
 8002662:	468c      	mov	ip, r1
 8002664:	0029      	movs	r1, r5
 8002666:	4461      	add	r1, ip
 8002668:	9101      	str	r1, [sp, #4]
 800266a:	4641      	mov	r1, r8
 800266c:	290a      	cmp	r1, #10
 800266e:	dd00      	ble.n	8002672 <__aeabi_dmul+0xf6>
 8002670:	e233      	b.n	8002ada <__aeabi_dmul+0x55e>
 8002672:	4693      	mov	fp, r2
 8002674:	2603      	movs	r6, #3
 8002676:	4642      	mov	r2, r8
 8002678:	2701      	movs	r7, #1
 800267a:	4097      	lsls	r7, r2
 800267c:	21a6      	movs	r1, #166	@ 0xa6
 800267e:	003a      	movs	r2, r7
 8002680:	00c9      	lsls	r1, r1, #3
 8002682:	400a      	ands	r2, r1
 8002684:	420f      	tst	r7, r1
 8002686:	d031      	beq.n	80026ec <__aeabi_dmul+0x170>
 8002688:	9e02      	ldr	r6, [sp, #8]
 800268a:	2e02      	cmp	r6, #2
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0x114>
 800268e:	e235      	b.n	8002afc <__aeabi_dmul+0x580>
 8002690:	2e03      	cmp	r6, #3
 8002692:	d100      	bne.n	8002696 <__aeabi_dmul+0x11a>
 8002694:	e1d2      	b.n	8002a3c <__aeabi_dmul+0x4c0>
 8002696:	4654      	mov	r4, sl
 8002698:	4648      	mov	r0, r9
 800269a:	2e01      	cmp	r6, #1
 800269c:	d0c1      	beq.n	8002622 <__aeabi_dmul+0xa6>
 800269e:	9a01      	ldr	r2, [sp, #4]
 80026a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002898 <__aeabi_dmul+0x31c>)
 80026a2:	4694      	mov	ip, r2
 80026a4:	4463      	add	r3, ip
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dc00      	bgt.n	80026ac <__aeabi_dmul+0x130>
 80026aa:	e0c0      	b.n	800282e <__aeabi_dmul+0x2b2>
 80026ac:	0742      	lsls	r2, r0, #29
 80026ae:	d009      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b0:	220f      	movs	r2, #15
 80026b2:	4002      	ands	r2, r0
 80026b4:	2a04      	cmp	r2, #4
 80026b6:	d005      	beq.n	80026c4 <__aeabi_dmul+0x148>
 80026b8:	1d02      	adds	r2, r0, #4
 80026ba:	4282      	cmp	r2, r0
 80026bc:	4180      	sbcs	r0, r0
 80026be:	4240      	negs	r0, r0
 80026c0:	1824      	adds	r4, r4, r0
 80026c2:	0010      	movs	r0, r2
 80026c4:	01e2      	lsls	r2, r4, #7
 80026c6:	d506      	bpl.n	80026d6 <__aeabi_dmul+0x15a>
 80026c8:	4b74      	ldr	r3, [pc, #464]	@ (800289c <__aeabi_dmul+0x320>)
 80026ca:	9a01      	ldr	r2, [sp, #4]
 80026cc:	401c      	ands	r4, r3
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	4694      	mov	ip, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4463      	add	r3, ip
 80026d6:	4a72      	ldr	r2, [pc, #456]	@ (80028a0 <__aeabi_dmul+0x324>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	dc6b      	bgt.n	80027b4 <__aeabi_dmul+0x238>
 80026dc:	0762      	lsls	r2, r4, #29
 80026de:	08c0      	lsrs	r0, r0, #3
 80026e0:	0264      	lsls	r4, r4, #9
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4302      	orrs	r2, r0
 80026e6:	0b24      	lsrs	r4, r4, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e79d      	b.n	8002628 <__aeabi_dmul+0xac>
 80026ec:	2190      	movs	r1, #144	@ 0x90
 80026ee:	0089      	lsls	r1, r1, #2
 80026f0:	420f      	tst	r7, r1
 80026f2:	d163      	bne.n	80027bc <__aeabi_dmul+0x240>
 80026f4:	2288      	movs	r2, #136	@ 0x88
 80026f6:	423a      	tst	r2, r7
 80026f8:	d100      	bne.n	80026fc <__aeabi_dmul+0x180>
 80026fa:	e0d7      	b.n	80028ac <__aeabi_dmul+0x330>
 80026fc:	9b00      	ldr	r3, [sp, #0]
 80026fe:	46a2      	mov	sl, r4
 8002700:	469b      	mov	fp, r3
 8002702:	4681      	mov	r9, r0
 8002704:	9602      	str	r6, [sp, #8]
 8002706:	e7bf      	b.n	8002688 <__aeabi_dmul+0x10c>
 8002708:	0023      	movs	r3, r4
 800270a:	4333      	orrs	r3, r6
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0x194>
 800270e:	e07f      	b.n	8002810 <__aeabi_dmul+0x294>
 8002710:	2c00      	cmp	r4, #0
 8002712:	d100      	bne.n	8002716 <__aeabi_dmul+0x19a>
 8002714:	e1ad      	b.n	8002a72 <__aeabi_dmul+0x4f6>
 8002716:	0020      	movs	r0, r4
 8002718:	f000 ff10 	bl	800353c <__clzsi2>
 800271c:	0002      	movs	r2, r0
 800271e:	0003      	movs	r3, r0
 8002720:	3a0b      	subs	r2, #11
 8002722:	201d      	movs	r0, #29
 8002724:	0019      	movs	r1, r3
 8002726:	1a82      	subs	r2, r0, r2
 8002728:	0030      	movs	r0, r6
 800272a:	3908      	subs	r1, #8
 800272c:	40d0      	lsrs	r0, r2
 800272e:	408c      	lsls	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	0030      	movs	r0, r6
 8002734:	4088      	lsls	r0, r1
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002738:	1aeb      	subs	r3, r5, r3
 800273a:	4694      	mov	ip, r2
 800273c:	4463      	add	r3, ip
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	4642      	mov	r2, r8
 8002744:	2600      	movs	r6, #0
 8002746:	2a0a      	cmp	r2, #10
 8002748:	dc00      	bgt.n	800274c <__aeabi_dmul+0x1d0>
 800274a:	e75a      	b.n	8002602 <__aeabi_dmul+0x86>
 800274c:	e79c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800274e:	4653      	mov	r3, sl
 8002750:	4303      	orrs	r3, r0
 8002752:	4699      	mov	r9, r3
 8002754:	d054      	beq.n	8002800 <__aeabi_dmul+0x284>
 8002756:	4653      	mov	r3, sl
 8002758:	2b00      	cmp	r3, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x1e2>
 800275c:	e177      	b.n	8002a4e <__aeabi_dmul+0x4d2>
 800275e:	4650      	mov	r0, sl
 8002760:	f000 feec 	bl	800353c <__clzsi2>
 8002764:	230b      	movs	r3, #11
 8002766:	425b      	negs	r3, r3
 8002768:	469c      	mov	ip, r3
 800276a:	0002      	movs	r2, r0
 800276c:	4484      	add	ip, r0
 800276e:	0011      	movs	r1, r2
 8002770:	4650      	mov	r0, sl
 8002772:	3908      	subs	r1, #8
 8002774:	4088      	lsls	r0, r1
 8002776:	231d      	movs	r3, #29
 8002778:	4680      	mov	r8, r0
 800277a:	4660      	mov	r0, ip
 800277c:	1a1b      	subs	r3, r3, r0
 800277e:	0020      	movs	r0, r4
 8002780:	40d8      	lsrs	r0, r3
 8002782:	0003      	movs	r3, r0
 8002784:	4640      	mov	r0, r8
 8002786:	4303      	orrs	r3, r0
 8002788:	469a      	mov	sl, r3
 800278a:	0023      	movs	r3, r4
 800278c:	408b      	lsls	r3, r1
 800278e:	4699      	mov	r9, r3
 8002790:	2300      	movs	r3, #0
 8002792:	4d44      	ldr	r5, [pc, #272]	@ (80028a4 <__aeabi_dmul+0x328>)
 8002794:	4698      	mov	r8, r3
 8002796:	1aad      	subs	r5, r5, r2
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	e715      	b.n	80025c8 <__aeabi_dmul+0x4c>
 800279c:	4652      	mov	r2, sl
 800279e:	4302      	orrs	r2, r0
 80027a0:	4691      	mov	r9, r2
 80027a2:	d126      	bne.n	80027f2 <__aeabi_dmul+0x276>
 80027a4:	2200      	movs	r2, #0
 80027a6:	001d      	movs	r5, r3
 80027a8:	2302      	movs	r3, #2
 80027aa:	4692      	mov	sl, r2
 80027ac:	3208      	adds	r2, #8
 80027ae:	4690      	mov	r8, r2
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	e709      	b.n	80025c8 <__aeabi_dmul+0x4c>
 80027b4:	2400      	movs	r4, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <__aeabi_dmul+0x314>)
 80027ba:	e735      	b.n	8002628 <__aeabi_dmul+0xac>
 80027bc:	2300      	movs	r3, #0
 80027be:	2480      	movs	r4, #128	@ 0x80
 80027c0:	469b      	mov	fp, r3
 80027c2:	0324      	lsls	r4, r4, #12
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <__aeabi_dmul+0x314>)
 80027c6:	e72f      	b.n	8002628 <__aeabi_dmul+0xac>
 80027c8:	2202      	movs	r2, #2
 80027ca:	4641      	mov	r1, r8
 80027cc:	4311      	orrs	r1, r2
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4694      	mov	ip, r2
 80027d4:	002a      	movs	r2, r5
 80027d6:	4462      	add	r2, ip
 80027d8:	4688      	mov	r8, r1
 80027da:	9201      	str	r2, [sp, #4]
 80027dc:	290a      	cmp	r1, #10
 80027de:	dd00      	ble.n	80027e2 <__aeabi_dmul+0x266>
 80027e0:	e752      	b.n	8002688 <__aeabi_dmul+0x10c>
 80027e2:	465a      	mov	r2, fp
 80027e4:	2000      	movs	r0, #0
 80027e6:	9900      	ldr	r1, [sp, #0]
 80027e8:	0004      	movs	r4, r0
 80027ea:	404a      	eors	r2, r1
 80027ec:	4693      	mov	fp, r2
 80027ee:	2602      	movs	r6, #2
 80027f0:	e70b      	b.n	800260a <__aeabi_dmul+0x8e>
 80027f2:	220c      	movs	r2, #12
 80027f4:	001d      	movs	r5, r3
 80027f6:	2303      	movs	r3, #3
 80027f8:	4681      	mov	r9, r0
 80027fa:	4690      	mov	r8, r2
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	e6e3      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002800:	2300      	movs	r3, #0
 8002802:	469a      	mov	sl, r3
 8002804:	3304      	adds	r3, #4
 8002806:	4698      	mov	r8, r3
 8002808:	3b03      	subs	r3, #3
 800280a:	2500      	movs	r5, #0
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	e6db      	b.n	80025c8 <__aeabi_dmul+0x4c>
 8002810:	4642      	mov	r2, r8
 8002812:	3301      	adds	r3, #1
 8002814:	431a      	orrs	r2, r3
 8002816:	002b      	movs	r3, r5
 8002818:	4690      	mov	r8, r2
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	9201      	str	r2, [sp, #4]
 800281e:	4642      	mov	r2, r8
 8002820:	2400      	movs	r4, #0
 8002822:	2000      	movs	r0, #0
 8002824:	2601      	movs	r6, #1
 8002826:	2a0a      	cmp	r2, #10
 8002828:	dc00      	bgt.n	800282c <__aeabi_dmul+0x2b0>
 800282a:	e6ea      	b.n	8002602 <__aeabi_dmul+0x86>
 800282c:	e72c      	b.n	8002688 <__aeabi_dmul+0x10c>
 800282e:	2201      	movs	r2, #1
 8002830:	1ad2      	subs	r2, r2, r3
 8002832:	2a38      	cmp	r2, #56	@ 0x38
 8002834:	dd00      	ble.n	8002838 <__aeabi_dmul+0x2bc>
 8002836:	e6f4      	b.n	8002622 <__aeabi_dmul+0xa6>
 8002838:	2a1f      	cmp	r2, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dmul+0x2c2>
 800283c:	e12a      	b.n	8002a94 <__aeabi_dmul+0x518>
 800283e:	211f      	movs	r1, #31
 8002840:	4249      	negs	r1, r1
 8002842:	1acb      	subs	r3, r1, r3
 8002844:	0021      	movs	r1, r4
 8002846:	40d9      	lsrs	r1, r3
 8002848:	000b      	movs	r3, r1
 800284a:	2a20      	cmp	r2, #32
 800284c:	d005      	beq.n	800285a <__aeabi_dmul+0x2de>
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <__aeabi_dmul+0x32c>)
 8002850:	9d01      	ldr	r5, [sp, #4]
 8002852:	4694      	mov	ip, r2
 8002854:	4465      	add	r5, ip
 8002856:	40ac      	lsls	r4, r5
 8002858:	4320      	orrs	r0, r4
 800285a:	1e42      	subs	r2, r0, #1
 800285c:	4190      	sbcs	r0, r2
 800285e:	4318      	orrs	r0, r3
 8002860:	2307      	movs	r3, #7
 8002862:	0019      	movs	r1, r3
 8002864:	2400      	movs	r4, #0
 8002866:	4001      	ands	r1, r0
 8002868:	4203      	tst	r3, r0
 800286a:	d00c      	beq.n	8002886 <__aeabi_dmul+0x30a>
 800286c:	230f      	movs	r3, #15
 800286e:	4003      	ands	r3, r0
 8002870:	2b04      	cmp	r3, #4
 8002872:	d100      	bne.n	8002876 <__aeabi_dmul+0x2fa>
 8002874:	e140      	b.n	8002af8 <__aeabi_dmul+0x57c>
 8002876:	1d03      	adds	r3, r0, #4
 8002878:	4283      	cmp	r3, r0
 800287a:	41a4      	sbcs	r4, r4
 800287c:	0018      	movs	r0, r3
 800287e:	4264      	negs	r4, r4
 8002880:	0761      	lsls	r1, r4, #29
 8002882:	0264      	lsls	r4, r4, #9
 8002884:	0b24      	lsrs	r4, r4, #12
 8002886:	08c2      	lsrs	r2, r0, #3
 8002888:	2300      	movs	r3, #0
 800288a:	430a      	orrs	r2, r1
 800288c:	e6cc      	b.n	8002628 <__aeabi_dmul+0xac>
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	000007ff 	.word	0x000007ff
 8002894:	fffffc01 	.word	0xfffffc01
 8002898:	000003ff 	.word	0x000003ff
 800289c:	feffffff 	.word	0xfeffffff
 80028a0:	000007fe 	.word	0x000007fe
 80028a4:	fffffc0d 	.word	0xfffffc0d
 80028a8:	0000043e 	.word	0x0000043e
 80028ac:	4649      	mov	r1, r9
 80028ae:	464a      	mov	r2, r9
 80028b0:	0409      	lsls	r1, r1, #16
 80028b2:	0c09      	lsrs	r1, r1, #16
 80028b4:	000d      	movs	r5, r1
 80028b6:	0c16      	lsrs	r6, r2, #16
 80028b8:	0c02      	lsrs	r2, r0, #16
 80028ba:	0400      	lsls	r0, r0, #16
 80028bc:	0c00      	lsrs	r0, r0, #16
 80028be:	4345      	muls	r5, r0
 80028c0:	46ac      	mov	ip, r5
 80028c2:	0005      	movs	r5, r0
 80028c4:	4375      	muls	r5, r6
 80028c6:	46a8      	mov	r8, r5
 80028c8:	0015      	movs	r5, r2
 80028ca:	000f      	movs	r7, r1
 80028cc:	4375      	muls	r5, r6
 80028ce:	9200      	str	r2, [sp, #0]
 80028d0:	9502      	str	r5, [sp, #8]
 80028d2:	002a      	movs	r2, r5
 80028d4:	9d00      	ldr	r5, [sp, #0]
 80028d6:	436f      	muls	r7, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	0c2d      	lsrs	r5, r5, #16
 80028dc:	46a9      	mov	r9, r5
 80028de:	4447      	add	r7, r8
 80028e0:	444f      	add	r7, r9
 80028e2:	45b8      	cmp	r8, r7
 80028e4:	d905      	bls.n	80028f2 <__aeabi_dmul+0x376>
 80028e6:	0015      	movs	r5, r2
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	0252      	lsls	r2, r2, #9
 80028ec:	4690      	mov	r8, r2
 80028ee:	4445      	add	r5, r8
 80028f0:	9502      	str	r5, [sp, #8]
 80028f2:	0c3d      	lsrs	r5, r7, #16
 80028f4:	9503      	str	r5, [sp, #12]
 80028f6:	4665      	mov	r5, ip
 80028f8:	042d      	lsls	r5, r5, #16
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	0c2d      	lsrs	r5, r5, #16
 80028fe:	46ac      	mov	ip, r5
 8002900:	003d      	movs	r5, r7
 8002902:	4465      	add	r5, ip
 8002904:	9504      	str	r5, [sp, #16]
 8002906:	0c25      	lsrs	r5, r4, #16
 8002908:	0424      	lsls	r4, r4, #16
 800290a:	0c24      	lsrs	r4, r4, #16
 800290c:	46ac      	mov	ip, r5
 800290e:	0025      	movs	r5, r4
 8002910:	4375      	muls	r5, r6
 8002912:	46a8      	mov	r8, r5
 8002914:	4665      	mov	r5, ip
 8002916:	000f      	movs	r7, r1
 8002918:	4369      	muls	r1, r5
 800291a:	4441      	add	r1, r8
 800291c:	4689      	mov	r9, r1
 800291e:	4367      	muls	r7, r4
 8002920:	0c39      	lsrs	r1, r7, #16
 8002922:	4449      	add	r1, r9
 8002924:	436e      	muls	r6, r5
 8002926:	4588      	cmp	r8, r1
 8002928:	d903      	bls.n	8002932 <__aeabi_dmul+0x3b6>
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	0252      	lsls	r2, r2, #9
 800292e:	4690      	mov	r8, r2
 8002930:	4446      	add	r6, r8
 8002932:	0c0d      	lsrs	r5, r1, #16
 8002934:	46a8      	mov	r8, r5
 8002936:	0035      	movs	r5, r6
 8002938:	4445      	add	r5, r8
 800293a:	9505      	str	r5, [sp, #20]
 800293c:	9d03      	ldr	r5, [sp, #12]
 800293e:	043f      	lsls	r7, r7, #16
 8002940:	46a8      	mov	r8, r5
 8002942:	0c3f      	lsrs	r7, r7, #16
 8002944:	0409      	lsls	r1, r1, #16
 8002946:	19c9      	adds	r1, r1, r7
 8002948:	4488      	add	r8, r1
 800294a:	4645      	mov	r5, r8
 800294c:	9503      	str	r5, [sp, #12]
 800294e:	4655      	mov	r5, sl
 8002950:	042e      	lsls	r6, r5, #16
 8002952:	0c36      	lsrs	r6, r6, #16
 8002954:	0c2f      	lsrs	r7, r5, #16
 8002956:	0035      	movs	r5, r6
 8002958:	4345      	muls	r5, r0
 800295a:	4378      	muls	r0, r7
 800295c:	4681      	mov	r9, r0
 800295e:	0038      	movs	r0, r7
 8002960:	46a8      	mov	r8, r5
 8002962:	0c2d      	lsrs	r5, r5, #16
 8002964:	46aa      	mov	sl, r5
 8002966:	9a00      	ldr	r2, [sp, #0]
 8002968:	4350      	muls	r0, r2
 800296a:	4372      	muls	r2, r6
 800296c:	444a      	add	r2, r9
 800296e:	4452      	add	r2, sl
 8002970:	4591      	cmp	r9, r2
 8002972:	d903      	bls.n	800297c <__aeabi_dmul+0x400>
 8002974:	2580      	movs	r5, #128	@ 0x80
 8002976:	026d      	lsls	r5, r5, #9
 8002978:	46a9      	mov	r9, r5
 800297a:	4448      	add	r0, r9
 800297c:	0c15      	lsrs	r5, r2, #16
 800297e:	46a9      	mov	r9, r5
 8002980:	4645      	mov	r5, r8
 8002982:	042d      	lsls	r5, r5, #16
 8002984:	0c2d      	lsrs	r5, r5, #16
 8002986:	46a8      	mov	r8, r5
 8002988:	4665      	mov	r5, ip
 800298a:	437d      	muls	r5, r7
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	4448      	add	r0, r9
 8002990:	4490      	add	r8, r2
 8002992:	46a9      	mov	r9, r5
 8002994:	0032      	movs	r2, r6
 8002996:	4665      	mov	r5, ip
 8002998:	4362      	muls	r2, r4
 800299a:	436e      	muls	r6, r5
 800299c:	437c      	muls	r4, r7
 800299e:	0c17      	lsrs	r7, r2, #16
 80029a0:	1936      	adds	r6, r6, r4
 80029a2:	19bf      	adds	r7, r7, r6
 80029a4:	42bc      	cmp	r4, r7
 80029a6:	d903      	bls.n	80029b0 <__aeabi_dmul+0x434>
 80029a8:	2480      	movs	r4, #128	@ 0x80
 80029aa:	0264      	lsls	r4, r4, #9
 80029ac:	46a4      	mov	ip, r4
 80029ae:	44e1      	add	r9, ip
 80029b0:	9c02      	ldr	r4, [sp, #8]
 80029b2:	9e03      	ldr	r6, [sp, #12]
 80029b4:	46a4      	mov	ip, r4
 80029b6:	9d05      	ldr	r5, [sp, #20]
 80029b8:	4466      	add	r6, ip
 80029ba:	428e      	cmp	r6, r1
 80029bc:	4189      	sbcs	r1, r1
 80029be:	46ac      	mov	ip, r5
 80029c0:	0412      	lsls	r2, r2, #16
 80029c2:	043c      	lsls	r4, r7, #16
 80029c4:	0c12      	lsrs	r2, r2, #16
 80029c6:	18a2      	adds	r2, r4, r2
 80029c8:	4462      	add	r2, ip
 80029ca:	4249      	negs	r1, r1
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4446      	add	r6, r8
 80029d0:	46a4      	mov	ip, r4
 80029d2:	4546      	cmp	r6, r8
 80029d4:	41a4      	sbcs	r4, r4
 80029d6:	4682      	mov	sl, r0
 80029d8:	4264      	negs	r4, r4
 80029da:	46a0      	mov	r8, r4
 80029dc:	42aa      	cmp	r2, r5
 80029de:	4192      	sbcs	r2, r2
 80029e0:	458c      	cmp	ip, r1
 80029e2:	4189      	sbcs	r1, r1
 80029e4:	44e2      	add	sl, ip
 80029e6:	44d0      	add	r8, sl
 80029e8:	4249      	negs	r1, r1
 80029ea:	4252      	negs	r2, r2
 80029ec:	430a      	orrs	r2, r1
 80029ee:	45a0      	cmp	r8, r4
 80029f0:	41a4      	sbcs	r4, r4
 80029f2:	4582      	cmp	sl, r0
 80029f4:	4189      	sbcs	r1, r1
 80029f6:	4264      	negs	r4, r4
 80029f8:	4249      	negs	r1, r1
 80029fa:	430c      	orrs	r4, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	0c3f      	lsrs	r7, r7, #16
 8002a00:	19d2      	adds	r2, r2, r7
 8002a02:	1912      	adds	r2, r2, r4
 8002a04:	0dcc      	lsrs	r4, r1, #23
 8002a06:	9904      	ldr	r1, [sp, #16]
 8002a08:	0270      	lsls	r0, r6, #9
 8002a0a:	4308      	orrs	r0, r1
 8002a0c:	1e41      	subs	r1, r0, #1
 8002a0e:	4188      	sbcs	r0, r1
 8002a10:	4641      	mov	r1, r8
 8002a12:	444a      	add	r2, r9
 8002a14:	0df6      	lsrs	r6, r6, #23
 8002a16:	0252      	lsls	r2, r2, #9
 8002a18:	4330      	orrs	r0, r6
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	4314      	orrs	r4, r2
 8002a1e:	4308      	orrs	r0, r1
 8002a20:	01d2      	lsls	r2, r2, #7
 8002a22:	d535      	bpl.n	8002a90 <__aeabi_dmul+0x514>
 8002a24:	2201      	movs	r2, #1
 8002a26:	0843      	lsrs	r3, r0, #1
 8002a28:	4002      	ands	r2, r0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	07e0      	lsls	r0, r4, #31
 8002a2e:	4318      	orrs	r0, r3
 8002a30:	0864      	lsrs	r4, r4, #1
 8002a32:	e634      	b.n	800269e <__aeabi_dmul+0x122>
 8002a34:	9b00      	ldr	r3, [sp, #0]
 8002a36:	46a2      	mov	sl, r4
 8002a38:	469b      	mov	fp, r3
 8002a3a:	4681      	mov	r9, r0
 8002a3c:	2480      	movs	r4, #128	@ 0x80
 8002a3e:	4653      	mov	r3, sl
 8002a40:	0324      	lsls	r4, r4, #12
 8002a42:	431c      	orrs	r4, r3
 8002a44:	0324      	lsls	r4, r4, #12
 8002a46:	464a      	mov	r2, r9
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002a4a:	0b24      	lsrs	r4, r4, #12
 8002a4c:	e5ec      	b.n	8002628 <__aeabi_dmul+0xac>
 8002a4e:	f000 fd75 	bl	800353c <__clzsi2>
 8002a52:	2315      	movs	r3, #21
 8002a54:	469c      	mov	ip, r3
 8002a56:	4484      	add	ip, r0
 8002a58:	0002      	movs	r2, r0
 8002a5a:	4663      	mov	r3, ip
 8002a5c:	3220      	adds	r2, #32
 8002a5e:	2b1c      	cmp	r3, #28
 8002a60:	dc00      	bgt.n	8002a64 <__aeabi_dmul+0x4e8>
 8002a62:	e684      	b.n	800276e <__aeabi_dmul+0x1f2>
 8002a64:	2300      	movs	r3, #0
 8002a66:	4699      	mov	r9, r3
 8002a68:	0023      	movs	r3, r4
 8002a6a:	3808      	subs	r0, #8
 8002a6c:	4083      	lsls	r3, r0
 8002a6e:	469a      	mov	sl, r3
 8002a70:	e68e      	b.n	8002790 <__aeabi_dmul+0x214>
 8002a72:	f000 fd63 	bl	800353c <__clzsi2>
 8002a76:	0002      	movs	r2, r0
 8002a78:	0003      	movs	r3, r0
 8002a7a:	3215      	adds	r2, #21
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	2a1c      	cmp	r2, #28
 8002a80:	dc00      	bgt.n	8002a84 <__aeabi_dmul+0x508>
 8002a82:	e64e      	b.n	8002722 <__aeabi_dmul+0x1a6>
 8002a84:	0002      	movs	r2, r0
 8002a86:	0034      	movs	r4, r6
 8002a88:	3a08      	subs	r2, #8
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4094      	lsls	r4, r2
 8002a8e:	e652      	b.n	8002736 <__aeabi_dmul+0x1ba>
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	e604      	b.n	800269e <__aeabi_dmul+0x122>
 8002a94:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <__aeabi_dmul+0x58c>)
 8002a96:	0021      	movs	r1, r4
 8002a98:	469c      	mov	ip, r3
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	9d01      	ldr	r5, [sp, #4]
 8002a9e:	40d3      	lsrs	r3, r2
 8002aa0:	4465      	add	r5, ip
 8002aa2:	40a9      	lsls	r1, r5
 8002aa4:	4319      	orrs	r1, r3
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	40ab      	lsls	r3, r5
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	4183      	sbcs	r3, r0
 8002aae:	4319      	orrs	r1, r3
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	40d4      	lsrs	r4, r2
 8002ab4:	074b      	lsls	r3, r1, #29
 8002ab6:	d009      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ab8:	230f      	movs	r3, #15
 8002aba:	400b      	ands	r3, r1
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d005      	beq.n	8002acc <__aeabi_dmul+0x550>
 8002ac0:	1d0b      	adds	r3, r1, #4
 8002ac2:	428b      	cmp	r3, r1
 8002ac4:	4180      	sbcs	r0, r0
 8002ac6:	4240      	negs	r0, r0
 8002ac8:	1824      	adds	r4, r4, r0
 8002aca:	0018      	movs	r0, r3
 8002acc:	0223      	lsls	r3, r4, #8
 8002ace:	d400      	bmi.n	8002ad2 <__aeabi_dmul+0x556>
 8002ad0:	e6d6      	b.n	8002880 <__aeabi_dmul+0x304>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	e5a6      	b.n	8002628 <__aeabi_dmul+0xac>
 8002ada:	290f      	cmp	r1, #15
 8002adc:	d1aa      	bne.n	8002a34 <__aeabi_dmul+0x4b8>
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	421a      	tst	r2, r3
 8002ae6:	d0a9      	beq.n	8002a3c <__aeabi_dmul+0x4c0>
 8002ae8:	421c      	tst	r4, r3
 8002aea:	d1a7      	bne.n	8002a3c <__aeabi_dmul+0x4c0>
 8002aec:	431c      	orrs	r4, r3
 8002aee:	9b00      	ldr	r3, [sp, #0]
 8002af0:	0002      	movs	r2, r0
 8002af2:	469b      	mov	fp, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002af6:	e597      	b.n	8002628 <__aeabi_dmul+0xac>
 8002af8:	2400      	movs	r4, #0
 8002afa:	e6c1      	b.n	8002880 <__aeabi_dmul+0x304>
 8002afc:	2400      	movs	r4, #0
 8002afe:	4b01      	ldr	r3, [pc, #4]	@ (8002b04 <__aeabi_dmul+0x588>)
 8002b00:	0022      	movs	r2, r4
 8002b02:	e591      	b.n	8002628 <__aeabi_dmul+0xac>
 8002b04:	000007ff 	.word	0x000007ff
 8002b08:	0000041e 	.word	0x0000041e

08002b0c <__aeabi_dsub>:
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	464e      	mov	r6, r9
 8002b10:	4645      	mov	r5, r8
 8002b12:	46de      	mov	lr, fp
 8002b14:	4657      	mov	r7, sl
 8002b16:	b5e0      	push	{r5, r6, r7, lr}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	9000      	str	r0, [sp, #0]
 8002b1c:	9101      	str	r1, [sp, #4]
 8002b1e:	030c      	lsls	r4, r1, #12
 8002b20:	004f      	lsls	r7, r1, #1
 8002b22:	0fce      	lsrs	r6, r1, #31
 8002b24:	0a61      	lsrs	r1, r4, #9
 8002b26:	9c00      	ldr	r4, [sp, #0]
 8002b28:	46b0      	mov	r8, r6
 8002b2a:	0f64      	lsrs	r4, r4, #29
 8002b2c:	430c      	orrs	r4, r1
 8002b2e:	9900      	ldr	r1, [sp, #0]
 8002b30:	0d7f      	lsrs	r7, r7, #21
 8002b32:	00c8      	lsls	r0, r1, #3
 8002b34:	0011      	movs	r1, r2
 8002b36:	001a      	movs	r2, r3
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	469c      	mov	ip, r3
 8002b3c:	9100      	str	r1, [sp, #0]
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	0051      	lsls	r1, r2, #1
 8002b42:	0d4b      	lsrs	r3, r1, #21
 8002b44:	4699      	mov	r9, r3
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	9d00      	ldr	r5, [sp, #0]
 8002b4a:	0fd9      	lsrs	r1, r3, #31
 8002b4c:	4663      	mov	r3, ip
 8002b4e:	0f6a      	lsrs	r2, r5, #29
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	4313      	orrs	r3, r2
 8002b54:	00ea      	lsls	r2, r5, #3
 8002b56:	4694      	mov	ip, r2
 8002b58:	4693      	mov	fp, r2
 8002b5a:	4ac1      	ldr	r2, [pc, #772]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002b5c:	9003      	str	r0, [sp, #12]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	4591      	cmp	r9, r2
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x5a>
 8002b64:	e0cd      	b.n	8002d02 <__aeabi_dsub+0x1f6>
 8002b66:	2501      	movs	r5, #1
 8002b68:	4069      	eors	r1, r5
 8002b6a:	464d      	mov	r5, r9
 8002b6c:	1b7d      	subs	r5, r7, r5
 8002b6e:	46aa      	mov	sl, r5
 8002b70:	428e      	cmp	r6, r1
 8002b72:	d100      	bne.n	8002b76 <__aeabi_dsub+0x6a>
 8002b74:	e080      	b.n	8002c78 <__aeabi_dsub+0x16c>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	dc00      	bgt.n	8002b7c <__aeabi_dsub+0x70>
 8002b7a:	e335      	b.n	80031e8 <__aeabi_dsub+0x6dc>
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x78>
 8002b82:	e0df      	b.n	8002d44 <__aeabi_dsub+0x238>
 8002b84:	4297      	cmp	r7, r2
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x7e>
 8002b88:	e194      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002b8a:	4652      	mov	r2, sl
 8002b8c:	2501      	movs	r5, #1
 8002b8e:	2a38      	cmp	r2, #56	@ 0x38
 8002b90:	dc19      	bgt.n	8002bc6 <__aeabi_dsub+0xba>
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	9b02      	ldr	r3, [sp, #8]
 8002b96:	0412      	lsls	r2, r2, #16
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	4652      	mov	r2, sl
 8002b9e:	2a1f      	cmp	r2, #31
 8002ba0:	dd00      	ble.n	8002ba4 <__aeabi_dsub+0x98>
 8002ba2:	e1e3      	b.n	8002f6c <__aeabi_dsub+0x460>
 8002ba4:	4653      	mov	r3, sl
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	4661      	mov	r1, ip
 8002baa:	9d02      	ldr	r5, [sp, #8]
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	4095      	lsls	r5, r2
 8002bb0:	40d9      	lsrs	r1, r3
 8002bb2:	430d      	orrs	r5, r1
 8002bb4:	4661      	mov	r1, ip
 8002bb6:	4091      	lsls	r1, r2
 8002bb8:	000a      	movs	r2, r1
 8002bba:	1e51      	subs	r1, r2, #1
 8002bbc:	418a      	sbcs	r2, r1
 8002bbe:	4315      	orrs	r5, r2
 8002bc0:	9a02      	ldr	r2, [sp, #8]
 8002bc2:	40da      	lsrs	r2, r3
 8002bc4:	1aa4      	subs	r4, r4, r2
 8002bc6:	1b45      	subs	r5, r0, r5
 8002bc8:	42a8      	cmp	r0, r5
 8002bca:	4180      	sbcs	r0, r0
 8002bcc:	4240      	negs	r0, r0
 8002bce:	1a24      	subs	r4, r4, r0
 8002bd0:	0223      	lsls	r3, r4, #8
 8002bd2:	d400      	bmi.n	8002bd6 <__aeabi_dsub+0xca>
 8002bd4:	e13d      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002bd6:	0264      	lsls	r4, r4, #9
 8002bd8:	0a64      	lsrs	r4, r4, #9
 8002bda:	2c00      	cmp	r4, #0
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0xd4>
 8002bde:	e147      	b.n	8002e70 <__aeabi_dsub+0x364>
 8002be0:	0020      	movs	r0, r4
 8002be2:	f000 fcab 	bl	800353c <__clzsi2>
 8002be6:	0003      	movs	r3, r0
 8002be8:	3b08      	subs	r3, #8
 8002bea:	2120      	movs	r1, #32
 8002bec:	0028      	movs	r0, r5
 8002bee:	1aca      	subs	r2, r1, r3
 8002bf0:	40d0      	lsrs	r0, r2
 8002bf2:	409c      	lsls	r4, r3
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	409d      	lsls	r5, r3
 8002bf8:	4322      	orrs	r2, r4
 8002bfa:	429f      	cmp	r7, r3
 8002bfc:	dd00      	ble.n	8002c00 <__aeabi_dsub+0xf4>
 8002bfe:	e177      	b.n	8002ef0 <__aeabi_dsub+0x3e4>
 8002c00:	1bd8      	subs	r0, r3, r7
 8002c02:	3001      	adds	r0, #1
 8002c04:	1a09      	subs	r1, r1, r0
 8002c06:	002c      	movs	r4, r5
 8002c08:	408d      	lsls	r5, r1
 8002c0a:	40c4      	lsrs	r4, r0
 8002c0c:	1e6b      	subs	r3, r5, #1
 8002c0e:	419d      	sbcs	r5, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	40c2      	lsrs	r2, r0
 8002c14:	408b      	lsls	r3, r1
 8002c16:	4325      	orrs	r5, r4
 8002c18:	2700      	movs	r7, #0
 8002c1a:	0014      	movs	r4, r2
 8002c1c:	431d      	orrs	r5, r3
 8002c1e:	076b      	lsls	r3, r5, #29
 8002c20:	d009      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c22:	230f      	movs	r3, #15
 8002c24:	402b      	ands	r3, r5
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d005      	beq.n	8002c36 <__aeabi_dsub+0x12a>
 8002c2a:	1d2b      	adds	r3, r5, #4
 8002c2c:	42ab      	cmp	r3, r5
 8002c2e:	41ad      	sbcs	r5, r5
 8002c30:	426d      	negs	r5, r5
 8002c32:	1964      	adds	r4, r4, r5
 8002c34:	001d      	movs	r5, r3
 8002c36:	0223      	lsls	r3, r4, #8
 8002c38:	d400      	bmi.n	8002c3c <__aeabi_dsub+0x130>
 8002c3a:	e140      	b.n	8002ebe <__aeabi_dsub+0x3b2>
 8002c3c:	4a88      	ldr	r2, [pc, #544]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002c3e:	3701      	adds	r7, #1
 8002c40:	4297      	cmp	r7, r2
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dsub+0x13a>
 8002c44:	e101      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002c46:	2601      	movs	r6, #1
 8002c48:	4643      	mov	r3, r8
 8002c4a:	4986      	ldr	r1, [pc, #536]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002c4c:	08ed      	lsrs	r5, r5, #3
 8002c4e:	4021      	ands	r1, r4
 8002c50:	074a      	lsls	r2, r1, #29
 8002c52:	432a      	orrs	r2, r5
 8002c54:	057c      	lsls	r4, r7, #21
 8002c56:	024d      	lsls	r5, r1, #9
 8002c58:	0b2d      	lsrs	r5, r5, #12
 8002c5a:	0d64      	lsrs	r4, r4, #21
 8002c5c:	401e      	ands	r6, r3
 8002c5e:	0524      	lsls	r4, r4, #20
 8002c60:	432c      	orrs	r4, r5
 8002c62:	07f6      	lsls	r6, r6, #31
 8002c64:	4334      	orrs	r4, r6
 8002c66:	0010      	movs	r0, r2
 8002c68:	0021      	movs	r1, r4
 8002c6a:	b005      	add	sp, #20
 8002c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c6e:	46bb      	mov	fp, r7
 8002c70:	46b2      	mov	sl, r6
 8002c72:	46a9      	mov	r9, r5
 8002c74:	46a0      	mov	r8, r4
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	dc00      	bgt.n	8002c7e <__aeabi_dsub+0x172>
 8002c7c:	e2d0      	b.n	8003220 <__aeabi_dsub+0x714>
 8002c7e:	4649      	mov	r1, r9
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d000      	beq.n	8002c86 <__aeabi_dsub+0x17a>
 8002c84:	e0d4      	b.n	8002e30 <__aeabi_dsub+0x324>
 8002c86:	4661      	mov	r1, ip
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x184>
 8002c8e:	e12b      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002c90:	1e69      	subs	r1, r5, #1
 8002c92:	2d01      	cmp	r5, #1
 8002c94:	d100      	bne.n	8002c98 <__aeabi_dsub+0x18c>
 8002c96:	e1d9      	b.n	800304c <__aeabi_dsub+0x540>
 8002c98:	4295      	cmp	r5, r2
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x192>
 8002c9c:	e10a      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002c9e:	2501      	movs	r5, #1
 8002ca0:	2938      	cmp	r1, #56	@ 0x38
 8002ca2:	dc17      	bgt.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002ca4:	468a      	mov	sl, r1
 8002ca6:	4653      	mov	r3, sl
 8002ca8:	2b1f      	cmp	r3, #31
 8002caa:	dd00      	ble.n	8002cae <__aeabi_dsub+0x1a2>
 8002cac:	e1e7      	b.n	800307e <__aeabi_dsub+0x572>
 8002cae:	2220      	movs	r2, #32
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	9b02      	ldr	r3, [sp, #8]
 8002cb4:	4661      	mov	r1, ip
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	001d      	movs	r5, r3
 8002cba:	4653      	mov	r3, sl
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	430d      	orrs	r5, r1
 8002cc6:	1e51      	subs	r1, r2, #1
 8002cc8:	418a      	sbcs	r2, r1
 8002cca:	4653      	mov	r3, sl
 8002ccc:	4315      	orrs	r5, r2
 8002cce:	9a02      	ldr	r2, [sp, #8]
 8002cd0:	40da      	lsrs	r2, r3
 8002cd2:	18a4      	adds	r4, r4, r2
 8002cd4:	182d      	adds	r5, r5, r0
 8002cd6:	4285      	cmp	r5, r0
 8002cd8:	4180      	sbcs	r0, r0
 8002cda:	4240      	negs	r0, r0
 8002cdc:	1824      	adds	r4, r4, r0
 8002cde:	0223      	lsls	r3, r4, #8
 8002ce0:	d400      	bmi.n	8002ce4 <__aeabi_dsub+0x1d8>
 8002ce2:	e0b6      	b.n	8002e52 <__aeabi_dsub+0x346>
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002ce6:	3701      	adds	r7, #1
 8002ce8:	429f      	cmp	r7, r3
 8002cea:	d100      	bne.n	8002cee <__aeabi_dsub+0x1e2>
 8002cec:	e0ad      	b.n	8002e4a <__aeabi_dsub+0x33e>
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <__aeabi_dsub+0x358>)
 8002cf2:	086a      	lsrs	r2, r5, #1
 8002cf4:	401c      	ands	r4, r3
 8002cf6:	4029      	ands	r1, r5
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	07e5      	lsls	r5, r4, #31
 8002cfc:	4315      	orrs	r5, r2
 8002cfe:	0864      	lsrs	r4, r4, #1
 8002d00:	e78d      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002d02:	4a59      	ldr	r2, [pc, #356]	@ (8002e68 <__aeabi_dsub+0x35c>)
 8002d04:	9b02      	ldr	r3, [sp, #8]
 8002d06:	4692      	mov	sl, r2
 8002d08:	4662      	mov	r2, ip
 8002d0a:	44ba      	add	sl, r7
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	d02c      	beq.n	8002d6a <__aeabi_dsub+0x25e>
 8002d10:	428e      	cmp	r6, r1
 8002d12:	d02e      	beq.n	8002d72 <__aeabi_dsub+0x266>
 8002d14:	4652      	mov	r2, sl
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d060      	beq.n	8002ddc <__aeabi_dsub+0x2d0>
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d100      	bne.n	8002d20 <__aeabi_dsub+0x214>
 8002d1e:	e0db      	b.n	8002ed8 <__aeabi_dsub+0x3cc>
 8002d20:	4663      	mov	r3, ip
 8002d22:	000e      	movs	r6, r1
 8002d24:	9c02      	ldr	r4, [sp, #8]
 8002d26:	08d8      	lsrs	r0, r3, #3
 8002d28:	0762      	lsls	r2, r4, #29
 8002d2a:	4302      	orrs	r2, r0
 8002d2c:	08e4      	lsrs	r4, r4, #3
 8002d2e:	0013      	movs	r3, r2
 8002d30:	4323      	orrs	r3, r4
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x22a>
 8002d34:	e254      	b.n	80031e0 <__aeabi_dsub+0x6d4>
 8002d36:	2580      	movs	r5, #128	@ 0x80
 8002d38:	032d      	lsls	r5, r5, #12
 8002d3a:	4325      	orrs	r5, r4
 8002d3c:	032d      	lsls	r5, r5, #12
 8002d3e:	4c48      	ldr	r4, [pc, #288]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d40:	0b2d      	lsrs	r5, r5, #12
 8002d42:	e78c      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002d44:	4661      	mov	r1, ip
 8002d46:	9b02      	ldr	r3, [sp, #8]
 8002d48:	4319      	orrs	r1, r3
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x242>
 8002d4c:	e0cc      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002d4e:	0029      	movs	r1, r5
 8002d50:	3901      	subs	r1, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x24c>
 8002d56:	e188      	b.n	800306a <__aeabi_dsub+0x55e>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x252>
 8002d5c:	e0aa      	b.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dd00      	ble.n	8002d66 <__aeabi_dsub+0x25a>
 8002d64:	e72f      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002d66:	468a      	mov	sl, r1
 8002d68:	e718      	b.n	8002b9c <__aeabi_dsub+0x90>
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4051      	eors	r1, r2
 8002d6e:	428e      	cmp	r6, r1
 8002d70:	d1d0      	bne.n	8002d14 <__aeabi_dsub+0x208>
 8002d72:	4653      	mov	r3, sl
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d100      	bne.n	8002d7a <__aeabi_dsub+0x26e>
 8002d78:	e0be      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	d000      	beq.n	8002d80 <__aeabi_dsub+0x274>
 8002d7e:	e138      	b.n	8002ff2 <__aeabi_dsub+0x4e6>
 8002d80:	46ca      	mov	sl, r9
 8002d82:	0022      	movs	r2, r4
 8002d84:	4302      	orrs	r2, r0
 8002d86:	d100      	bne.n	8002d8a <__aeabi_dsub+0x27e>
 8002d88:	e1e2      	b.n	8003150 <__aeabi_dsub+0x644>
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	1e59      	subs	r1, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d100      	bne.n	8002d94 <__aeabi_dsub+0x288>
 8002d92:	e20d      	b.n	80031b0 <__aeabi_dsub+0x6a4>
 8002d94:	4a32      	ldr	r2, [pc, #200]	@ (8002e60 <__aeabi_dsub+0x354>)
 8002d96:	4592      	cmp	sl, r2
 8002d98:	d100      	bne.n	8002d9c <__aeabi_dsub+0x290>
 8002d9a:	e1d2      	b.n	8003142 <__aeabi_dsub+0x636>
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	2938      	cmp	r1, #56	@ 0x38
 8002da0:	dc13      	bgt.n	8002dca <__aeabi_dsub+0x2be>
 8002da2:	291f      	cmp	r1, #31
 8002da4:	dd00      	ble.n	8002da8 <__aeabi_dsub+0x29c>
 8002da6:	e1ee      	b.n	8003186 <__aeabi_dsub+0x67a>
 8002da8:	2220      	movs	r2, #32
 8002daa:	9b02      	ldr	r3, [sp, #8]
 8002dac:	1a52      	subs	r2, r2, r1
 8002dae:	0025      	movs	r5, r4
 8002db0:	0007      	movs	r7, r0
 8002db2:	469a      	mov	sl, r3
 8002db4:	40cc      	lsrs	r4, r1
 8002db6:	4090      	lsls	r0, r2
 8002db8:	4095      	lsls	r5, r2
 8002dba:	40cf      	lsrs	r7, r1
 8002dbc:	44a2      	add	sl, r4
 8002dbe:	1e42      	subs	r2, r0, #1
 8002dc0:	4190      	sbcs	r0, r2
 8002dc2:	4653      	mov	r3, sl
 8002dc4:	432f      	orrs	r7, r5
 8002dc6:	4307      	orrs	r7, r0
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	003d      	movs	r5, r7
 8002dcc:	4465      	add	r5, ip
 8002dce:	4565      	cmp	r5, ip
 8002dd0:	4192      	sbcs	r2, r2
 8002dd2:	9b02      	ldr	r3, [sp, #8]
 8002dd4:	4252      	negs	r2, r2
 8002dd6:	464f      	mov	r7, r9
 8002dd8:	18d4      	adds	r4, r2, r3
 8002dda:	e780      	b.n	8002cde <__aeabi_dsub+0x1d2>
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <__aeabi_dsub+0x360>)
 8002dde:	1c7d      	adds	r5, r7, #1
 8002de0:	4215      	tst	r5, r2
 8002de2:	d000      	beq.n	8002de6 <__aeabi_dsub+0x2da>
 8002de4:	e0aa      	b.n	8002f3c <__aeabi_dsub+0x430>
 8002de6:	4662      	mov	r2, ip
 8002de8:	0025      	movs	r5, r4
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	4305      	orrs	r5, r0
 8002dee:	431a      	orrs	r2, r3
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	d000      	beq.n	8002df6 <__aeabi_dsub+0x2ea>
 8002df4:	e0f5      	b.n	8002fe2 <__aeabi_dsub+0x4d6>
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x2f0>
 8002dfa:	e16b      	b.n	80030d4 <__aeabi_dsub+0x5c8>
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d100      	bne.n	8002e02 <__aeabi_dsub+0x2f6>
 8002e00:	e152      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002e02:	4663      	mov	r3, ip
 8002e04:	1ac5      	subs	r5, r0, r3
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	1ae2      	subs	r2, r4, r3
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	419b      	sbcs	r3, r3
 8002e0e:	425b      	negs	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	d400      	bmi.n	8002e18 <__aeabi_dsub+0x30c>
 8002e16:	e1d5      	b.n	80031c4 <__aeabi_dsub+0x6b8>
 8002e18:	4663      	mov	r3, ip
 8002e1a:	1a1d      	subs	r5, r3, r0
 8002e1c:	45ac      	cmp	ip, r5
 8002e1e:	4192      	sbcs	r2, r2
 8002e20:	2601      	movs	r6, #1
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	4252      	negs	r2, r2
 8002e26:	1b1c      	subs	r4, r3, r4
 8002e28:	4688      	mov	r8, r1
 8002e2a:	1aa4      	subs	r4, r4, r2
 8002e2c:	400e      	ands	r6, r1
 8002e2e:	e6f6      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002e30:	4297      	cmp	r7, r2
 8002e32:	d03f      	beq.n	8002eb4 <__aeabi_dsub+0x3a8>
 8002e34:	4652      	mov	r2, sl
 8002e36:	2501      	movs	r5, #1
 8002e38:	2a38      	cmp	r2, #56	@ 0x38
 8002e3a:	dd00      	ble.n	8002e3e <__aeabi_dsub+0x332>
 8002e3c:	e74a      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	9b02      	ldr	r3, [sp, #8]
 8002e42:	0412      	lsls	r2, r2, #16
 8002e44:	4313      	orrs	r3, r2
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	e72d      	b.n	8002ca6 <__aeabi_dsub+0x19a>
 8002e4a:	003c      	movs	r4, r7
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	e705      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002e52:	2307      	movs	r3, #7
 8002e54:	402b      	ands	r3, r5
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x350>
 8002e5a:	e6e2      	b.n	8002c22 <__aeabi_dsub+0x116>
 8002e5c:	e06b      	b.n	8002f36 <__aeabi_dsub+0x42a>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	000007ff 	.word	0x000007ff
 8002e64:	ff7fffff 	.word	0xff7fffff
 8002e68:	fffff801 	.word	0xfffff801
 8002e6c:	000007fe 	.word	0x000007fe
 8002e70:	0028      	movs	r0, r5
 8002e72:	f000 fb63 	bl	800353c <__clzsi2>
 8002e76:	0003      	movs	r3, r0
 8002e78:	3318      	adds	r3, #24
 8002e7a:	2b1f      	cmp	r3, #31
 8002e7c:	dc00      	bgt.n	8002e80 <__aeabi_dsub+0x374>
 8002e7e:	e6b4      	b.n	8002bea <__aeabi_dsub+0xde>
 8002e80:	002a      	movs	r2, r5
 8002e82:	3808      	subs	r0, #8
 8002e84:	4082      	lsls	r2, r0
 8002e86:	429f      	cmp	r7, r3
 8002e88:	dd00      	ble.n	8002e8c <__aeabi_dsub+0x380>
 8002e8a:	e0b9      	b.n	8003000 <__aeabi_dsub+0x4f4>
 8002e8c:	1bdb      	subs	r3, r3, r7
 8002e8e:	1c58      	adds	r0, r3, #1
 8002e90:	281f      	cmp	r0, #31
 8002e92:	dc00      	bgt.n	8002e96 <__aeabi_dsub+0x38a>
 8002e94:	e1a0      	b.n	80031d8 <__aeabi_dsub+0x6cc>
 8002e96:	0015      	movs	r5, r2
 8002e98:	3b1f      	subs	r3, #31
 8002e9a:	40dd      	lsrs	r5, r3
 8002e9c:	2820      	cmp	r0, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x3a0>
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	1e53      	subs	r3, r2, #1
 8002ea8:	419a      	sbcs	r2, r3
 8002eaa:	4315      	orrs	r5, r2
 8002eac:	2307      	movs	r3, #7
 8002eae:	2700      	movs	r7, #0
 8002eb0:	402b      	ands	r3, r5
 8002eb2:	e7d0      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8002eb4:	08c0      	lsrs	r0, r0, #3
 8002eb6:	0762      	lsls	r2, r4, #29
 8002eb8:	4302      	orrs	r2, r0
 8002eba:	08e4      	lsrs	r4, r4, #3
 8002ebc:	e737      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ebe:	08ea      	lsrs	r2, r5, #3
 8002ec0:	0763      	lsls	r3, r4, #29
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4bd3      	ldr	r3, [pc, #844]	@ (8003214 <__aeabi_dsub+0x708>)
 8002ec6:	08e4      	lsrs	r4, r4, #3
 8002ec8:	429f      	cmp	r7, r3
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x3c2>
 8002ecc:	e72f      	b.n	8002d2e <__aeabi_dsub+0x222>
 8002ece:	0324      	lsls	r4, r4, #12
 8002ed0:	0b25      	lsrs	r5, r4, #12
 8002ed2:	057c      	lsls	r4, r7, #21
 8002ed4:	0d64      	lsrs	r4, r4, #21
 8002ed6:	e6c2      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002ed8:	46ca      	mov	sl, r9
 8002eda:	0022      	movs	r2, r4
 8002edc:	4302      	orrs	r2, r0
 8002ede:	d158      	bne.n	8002f92 <__aeabi_dsub+0x486>
 8002ee0:	4663      	mov	r3, ip
 8002ee2:	000e      	movs	r6, r1
 8002ee4:	9c02      	ldr	r4, [sp, #8]
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	4657      	mov	r7, sl
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	e7e7      	b.n	8002ec0 <__aeabi_dsub+0x3b4>
 8002ef0:	4cc9      	ldr	r4, [pc, #804]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002ef2:	1aff      	subs	r7, r7, r3
 8002ef4:	4014      	ands	r4, r2
 8002ef6:	e692      	b.n	8002c1e <__aeabi_dsub+0x112>
 8002ef8:	4dc8      	ldr	r5, [pc, #800]	@ (800321c <__aeabi_dsub+0x710>)
 8002efa:	1c7a      	adds	r2, r7, #1
 8002efc:	422a      	tst	r2, r5
 8002efe:	d000      	beq.n	8002f02 <__aeabi_dsub+0x3f6>
 8002f00:	e084      	b.n	800300c <__aeabi_dsub+0x500>
 8002f02:	0022      	movs	r2, r4
 8002f04:	4302      	orrs	r2, r0
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d000      	beq.n	8002f0c <__aeabi_dsub+0x400>
 8002f0a:	e0ef      	b.n	80030ec <__aeabi_dsub+0x5e0>
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x406>
 8002f10:	e0e5      	b.n	80030de <__aeabi_dsub+0x5d2>
 8002f12:	4662      	mov	r2, ip
 8002f14:	9902      	ldr	r1, [sp, #8]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	d100      	bne.n	8002f1c <__aeabi_dsub+0x410>
 8002f1a:	e0c5      	b.n	80030a8 <__aeabi_dsub+0x59c>
 8002f1c:	4663      	mov	r3, ip
 8002f1e:	18c5      	adds	r5, r0, r3
 8002f20:	468c      	mov	ip, r1
 8002f22:	4285      	cmp	r5, r0
 8002f24:	4180      	sbcs	r0, r0
 8002f26:	4464      	add	r4, ip
 8002f28:	4240      	negs	r0, r0
 8002f2a:	1824      	adds	r4, r4, r0
 8002f2c:	0223      	lsls	r3, r4, #8
 8002f2e:	d502      	bpl.n	8002f36 <__aeabi_dsub+0x42a>
 8002f30:	4bb9      	ldr	r3, [pc, #740]	@ (8003218 <__aeabi_dsub+0x70c>)
 8002f32:	3701      	adds	r7, #1
 8002f34:	401c      	ands	r4, r3
 8002f36:	46ba      	mov	sl, r7
 8002f38:	9503      	str	r5, [sp, #12]
 8002f3a:	e7d5      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8002f3c:	4662      	mov	r2, ip
 8002f3e:	1a85      	subs	r5, r0, r2
 8002f40:	42a8      	cmp	r0, r5
 8002f42:	4192      	sbcs	r2, r2
 8002f44:	4252      	negs	r2, r2
 8002f46:	4691      	mov	r9, r2
 8002f48:	9b02      	ldr	r3, [sp, #8]
 8002f4a:	1ae3      	subs	r3, r4, r3
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1ad2      	subs	r2, r2, r3
 8002f52:	0013      	movs	r3, r2
 8002f54:	4691      	mov	r9, r2
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	d46c      	bmi.n	8003034 <__aeabi_dsub+0x528>
 8002f5a:	464a      	mov	r2, r9
 8002f5c:	464c      	mov	r4, r9
 8002f5e:	432a      	orrs	r2, r5
 8002f60:	d000      	beq.n	8002f64 <__aeabi_dsub+0x458>
 8002f62:	e63a      	b.n	8002bda <__aeabi_dsub+0xce>
 8002f64:	2600      	movs	r6, #0
 8002f66:	2400      	movs	r4, #0
 8002f68:	2500      	movs	r5, #0
 8002f6a:	e678      	b.n	8002c5e <__aeabi_dsub+0x152>
 8002f6c:	9902      	ldr	r1, [sp, #8]
 8002f6e:	4653      	mov	r3, sl
 8002f70:	000d      	movs	r5, r1
 8002f72:	3a20      	subs	r2, #32
 8002f74:	40d5      	lsrs	r5, r2
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d006      	beq.n	8002f88 <__aeabi_dsub+0x47c>
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	000b      	movs	r3, r1
 8002f80:	4093      	lsls	r3, r2
 8002f82:	4662      	mov	r2, ip
 8002f84:	431a      	orrs	r2, r3
 8002f86:	4693      	mov	fp, r2
 8002f88:	465b      	mov	r3, fp
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	4193      	sbcs	r3, r2
 8002f8e:	431d      	orrs	r5, r3
 8002f90:	e619      	b.n	8002bc6 <__aeabi_dsub+0xba>
 8002f92:	4653      	mov	r3, sl
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d100      	bne.n	8002f9c <__aeabi_dsub+0x490>
 8002f9a:	e0c6      	b.n	800312a <__aeabi_dsub+0x61e>
 8002f9c:	4e9d      	ldr	r6, [pc, #628]	@ (8003214 <__aeabi_dsub+0x708>)
 8002f9e:	45b2      	cmp	sl, r6
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x498>
 8002fa2:	e6bd      	b.n	8002d20 <__aeabi_dsub+0x214>
 8002fa4:	4688      	mov	r8, r1
 8002fa6:	000e      	movs	r6, r1
 8002fa8:	2501      	movs	r5, #1
 8002faa:	2a38      	cmp	r2, #56	@ 0x38
 8002fac:	dc10      	bgt.n	8002fd0 <__aeabi_dsub+0x4c4>
 8002fae:	2a1f      	cmp	r2, #31
 8002fb0:	dc7f      	bgt.n	80030b2 <__aeabi_dsub+0x5a6>
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	0025      	movs	r5, r4
 8002fb6:	1a89      	subs	r1, r1, r2
 8002fb8:	0007      	movs	r7, r0
 8002fba:	4088      	lsls	r0, r1
 8002fbc:	408d      	lsls	r5, r1
 8002fbe:	40d7      	lsrs	r7, r2
 8002fc0:	40d4      	lsrs	r4, r2
 8002fc2:	1e41      	subs	r1, r0, #1
 8002fc4:	4188      	sbcs	r0, r1
 8002fc6:	9b02      	ldr	r3, [sp, #8]
 8002fc8:	433d      	orrs	r5, r7
 8002fca:	1b1b      	subs	r3, r3, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	9302      	str	r3, [sp, #8]
 8002fd0:	4662      	mov	r2, ip
 8002fd2:	1b55      	subs	r5, r2, r5
 8002fd4:	45ac      	cmp	ip, r5
 8002fd6:	4192      	sbcs	r2, r2
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4252      	negs	r2, r2
 8002fdc:	464f      	mov	r7, r9
 8002fde:	1a9c      	subs	r4, r3, r2
 8002fe0:	e5f6      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	d000      	beq.n	8002fe8 <__aeabi_dsub+0x4dc>
 8002fe6:	e0b7      	b.n	8003158 <__aeabi_dsub+0x64c>
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d100      	bne.n	8002fee <__aeabi_dsub+0x4e2>
 8002fec:	e0f0      	b.n	80031d0 <__aeabi_dsub+0x6c4>
 8002fee:	2601      	movs	r6, #1
 8002ff0:	400e      	ands	r6, r1
 8002ff2:	4663      	mov	r3, ip
 8002ff4:	9802      	ldr	r0, [sp, #8]
 8002ff6:	08d9      	lsrs	r1, r3, #3
 8002ff8:	0742      	lsls	r2, r0, #29
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	08c4      	lsrs	r4, r0, #3
 8002ffe:	e696      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003000:	4c85      	ldr	r4, [pc, #532]	@ (8003218 <__aeabi_dsub+0x70c>)
 8003002:	1aff      	subs	r7, r7, r3
 8003004:	4014      	ands	r4, r2
 8003006:	0762      	lsls	r2, r4, #29
 8003008:	08e4      	lsrs	r4, r4, #3
 800300a:	e760      	b.n	8002ece <__aeabi_dsub+0x3c2>
 800300c:	4981      	ldr	r1, [pc, #516]	@ (8003214 <__aeabi_dsub+0x708>)
 800300e:	428a      	cmp	r2, r1
 8003010:	d100      	bne.n	8003014 <__aeabi_dsub+0x508>
 8003012:	e0c9      	b.n	80031a8 <__aeabi_dsub+0x69c>
 8003014:	4663      	mov	r3, ip
 8003016:	18c1      	adds	r1, r0, r3
 8003018:	4281      	cmp	r1, r0
 800301a:	4180      	sbcs	r0, r0
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	4240      	negs	r0, r0
 8003020:	18e3      	adds	r3, r4, r3
 8003022:	181b      	adds	r3, r3, r0
 8003024:	07dd      	lsls	r5, r3, #31
 8003026:	085c      	lsrs	r4, r3, #1
 8003028:	2307      	movs	r3, #7
 800302a:	0849      	lsrs	r1, r1, #1
 800302c:	430d      	orrs	r5, r1
 800302e:	0017      	movs	r7, r2
 8003030:	402b      	ands	r3, r5
 8003032:	e710      	b.n	8002e56 <__aeabi_dsub+0x34a>
 8003034:	4663      	mov	r3, ip
 8003036:	1a1d      	subs	r5, r3, r0
 8003038:	45ac      	cmp	ip, r5
 800303a:	4192      	sbcs	r2, r2
 800303c:	2601      	movs	r6, #1
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	4252      	negs	r2, r2
 8003042:	1b1c      	subs	r4, r3, r4
 8003044:	4688      	mov	r8, r1
 8003046:	1aa4      	subs	r4, r4, r2
 8003048:	400e      	ands	r6, r1
 800304a:	e5c6      	b.n	8002bda <__aeabi_dsub+0xce>
 800304c:	4663      	mov	r3, ip
 800304e:	18c5      	adds	r5, r0, r3
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	4285      	cmp	r5, r0
 8003054:	4180      	sbcs	r0, r0
 8003056:	469c      	mov	ip, r3
 8003058:	4240      	negs	r0, r0
 800305a:	4464      	add	r4, ip
 800305c:	1824      	adds	r4, r4, r0
 800305e:	2701      	movs	r7, #1
 8003060:	0223      	lsls	r3, r4, #8
 8003062:	d400      	bmi.n	8003066 <__aeabi_dsub+0x55a>
 8003064:	e6f5      	b.n	8002e52 <__aeabi_dsub+0x346>
 8003066:	2702      	movs	r7, #2
 8003068:	e641      	b.n	8002cee <__aeabi_dsub+0x1e2>
 800306a:	4663      	mov	r3, ip
 800306c:	1ac5      	subs	r5, r0, r3
 800306e:	42a8      	cmp	r0, r5
 8003070:	4180      	sbcs	r0, r0
 8003072:	9b02      	ldr	r3, [sp, #8]
 8003074:	4240      	negs	r0, r0
 8003076:	1ae4      	subs	r4, r4, r3
 8003078:	2701      	movs	r7, #1
 800307a:	1a24      	subs	r4, r4, r0
 800307c:	e5a8      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 800307e:	9d02      	ldr	r5, [sp, #8]
 8003080:	4652      	mov	r2, sl
 8003082:	002b      	movs	r3, r5
 8003084:	3a20      	subs	r2, #32
 8003086:	40d3      	lsrs	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	4653      	mov	r3, sl
 800308c:	2b20      	cmp	r3, #32
 800308e:	d006      	beq.n	800309e <__aeabi_dsub+0x592>
 8003090:	2240      	movs	r2, #64	@ 0x40
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	002b      	movs	r3, r5
 8003096:	4093      	lsls	r3, r2
 8003098:	4662      	mov	r2, ip
 800309a:	431a      	orrs	r2, r3
 800309c:	4693      	mov	fp, r2
 800309e:	465d      	mov	r5, fp
 80030a0:	1e6b      	subs	r3, r5, #1
 80030a2:	419d      	sbcs	r5, r3
 80030a4:	430d      	orrs	r5, r1
 80030a6:	e615      	b.n	8002cd4 <__aeabi_dsub+0x1c8>
 80030a8:	0762      	lsls	r2, r4, #29
 80030aa:	08c0      	lsrs	r0, r0, #3
 80030ac:	4302      	orrs	r2, r0
 80030ae:	08e4      	lsrs	r4, r4, #3
 80030b0:	e70d      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030b2:	0011      	movs	r1, r2
 80030b4:	0027      	movs	r7, r4
 80030b6:	3920      	subs	r1, #32
 80030b8:	40cf      	lsrs	r7, r1
 80030ba:	2a20      	cmp	r2, #32
 80030bc:	d005      	beq.n	80030ca <__aeabi_dsub+0x5be>
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	1a8a      	subs	r2, r1, r2
 80030c2:	4094      	lsls	r4, r2
 80030c4:	0025      	movs	r5, r4
 80030c6:	4305      	orrs	r5, r0
 80030c8:	9503      	str	r5, [sp, #12]
 80030ca:	9d03      	ldr	r5, [sp, #12]
 80030cc:	1e6a      	subs	r2, r5, #1
 80030ce:	4195      	sbcs	r5, r2
 80030d0:	433d      	orrs	r5, r7
 80030d2:	e77d      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d100      	bne.n	80030da <__aeabi_dsub+0x5ce>
 80030d8:	e744      	b.n	8002f64 <__aeabi_dsub+0x458>
 80030da:	2601      	movs	r6, #1
 80030dc:	400e      	ands	r6, r1
 80030de:	4663      	mov	r3, ip
 80030e0:	08d9      	lsrs	r1, r3, #3
 80030e2:	9b02      	ldr	r3, [sp, #8]
 80030e4:	075a      	lsls	r2, r3, #29
 80030e6:	430a      	orrs	r2, r1
 80030e8:	08dc      	lsrs	r4, r3, #3
 80030ea:	e6f0      	b.n	8002ece <__aeabi_dsub+0x3c2>
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d028      	beq.n	8003142 <__aeabi_dsub+0x636>
 80030f0:	4662      	mov	r2, ip
 80030f2:	9f02      	ldr	r7, [sp, #8]
 80030f4:	08c0      	lsrs	r0, r0, #3
 80030f6:	433a      	orrs	r2, r7
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x5f0>
 80030fa:	e6dc      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 80030fc:	0762      	lsls	r2, r4, #29
 80030fe:	4310      	orrs	r0, r2
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	08e4      	lsrs	r4, r4, #3
 8003104:	0312      	lsls	r2, r2, #12
 8003106:	4214      	tst	r4, r2
 8003108:	d009      	beq.n	800311e <__aeabi_dsub+0x612>
 800310a:	08fd      	lsrs	r5, r7, #3
 800310c:	4215      	tst	r5, r2
 800310e:	d106      	bne.n	800311e <__aeabi_dsub+0x612>
 8003110:	4663      	mov	r3, ip
 8003112:	2601      	movs	r6, #1
 8003114:	002c      	movs	r4, r5
 8003116:	08d8      	lsrs	r0, r3, #3
 8003118:	077b      	lsls	r3, r7, #29
 800311a:	4318      	orrs	r0, r3
 800311c:	400e      	ands	r6, r1
 800311e:	0f42      	lsrs	r2, r0, #29
 8003120:	00c0      	lsls	r0, r0, #3
 8003122:	08c0      	lsrs	r0, r0, #3
 8003124:	0752      	lsls	r2, r2, #29
 8003126:	4302      	orrs	r2, r0
 8003128:	e601      	b.n	8002d2e <__aeabi_dsub+0x222>
 800312a:	4663      	mov	r3, ip
 800312c:	1a1d      	subs	r5, r3, r0
 800312e:	45ac      	cmp	ip, r5
 8003130:	4192      	sbcs	r2, r2
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4252      	negs	r2, r2
 8003136:	1b1c      	subs	r4, r3, r4
 8003138:	000e      	movs	r6, r1
 800313a:	4688      	mov	r8, r1
 800313c:	2701      	movs	r7, #1
 800313e:	1aa4      	subs	r4, r4, r2
 8003140:	e546      	b.n	8002bd0 <__aeabi_dsub+0xc4>
 8003142:	4663      	mov	r3, ip
 8003144:	08d9      	lsrs	r1, r3, #3
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	075a      	lsls	r2, r3, #29
 800314a:	430a      	orrs	r2, r1
 800314c:	08dc      	lsrs	r4, r3, #3
 800314e:	e5ee      	b.n	8002d2e <__aeabi_dsub+0x222>
 8003150:	4663      	mov	r3, ip
 8003152:	9c02      	ldr	r4, [sp, #8]
 8003154:	9303      	str	r3, [sp, #12]
 8003156:	e6c7      	b.n	8002ee8 <__aeabi_dsub+0x3dc>
 8003158:	08c0      	lsrs	r0, r0, #3
 800315a:	2a00      	cmp	r2, #0
 800315c:	d100      	bne.n	8003160 <__aeabi_dsub+0x654>
 800315e:	e6aa      	b.n	8002eb6 <__aeabi_dsub+0x3aa>
 8003160:	0762      	lsls	r2, r4, #29
 8003162:	4310      	orrs	r0, r2
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	08e4      	lsrs	r4, r4, #3
 8003168:	0312      	lsls	r2, r2, #12
 800316a:	4214      	tst	r4, r2
 800316c:	d0d7      	beq.n	800311e <__aeabi_dsub+0x612>
 800316e:	9f02      	ldr	r7, [sp, #8]
 8003170:	08fd      	lsrs	r5, r7, #3
 8003172:	4215      	tst	r5, r2
 8003174:	d1d3      	bne.n	800311e <__aeabi_dsub+0x612>
 8003176:	4663      	mov	r3, ip
 8003178:	2601      	movs	r6, #1
 800317a:	08d8      	lsrs	r0, r3, #3
 800317c:	077b      	lsls	r3, r7, #29
 800317e:	002c      	movs	r4, r5
 8003180:	4318      	orrs	r0, r3
 8003182:	400e      	ands	r6, r1
 8003184:	e7cb      	b.n	800311e <__aeabi_dsub+0x612>
 8003186:	000a      	movs	r2, r1
 8003188:	0027      	movs	r7, r4
 800318a:	3a20      	subs	r2, #32
 800318c:	40d7      	lsrs	r7, r2
 800318e:	2920      	cmp	r1, #32
 8003190:	d005      	beq.n	800319e <__aeabi_dsub+0x692>
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	1a52      	subs	r2, r2, r1
 8003196:	4094      	lsls	r4, r2
 8003198:	0025      	movs	r5, r4
 800319a:	4305      	orrs	r5, r0
 800319c:	9503      	str	r5, [sp, #12]
 800319e:	9d03      	ldr	r5, [sp, #12]
 80031a0:	1e6a      	subs	r2, r5, #1
 80031a2:	4195      	sbcs	r5, r2
 80031a4:	432f      	orrs	r7, r5
 80031a6:	e610      	b.n	8002dca <__aeabi_dsub+0x2be>
 80031a8:	0014      	movs	r4, r2
 80031aa:	2500      	movs	r5, #0
 80031ac:	2200      	movs	r2, #0
 80031ae:	e556      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031b0:	9b02      	ldr	r3, [sp, #8]
 80031b2:	4460      	add	r0, ip
 80031b4:	4699      	mov	r9, r3
 80031b6:	4560      	cmp	r0, ip
 80031b8:	4192      	sbcs	r2, r2
 80031ba:	444c      	add	r4, r9
 80031bc:	4252      	negs	r2, r2
 80031be:	0005      	movs	r5, r0
 80031c0:	18a4      	adds	r4, r4, r2
 80031c2:	e74c      	b.n	800305e <__aeabi_dsub+0x552>
 80031c4:	001a      	movs	r2, r3
 80031c6:	001c      	movs	r4, r3
 80031c8:	432a      	orrs	r2, r5
 80031ca:	d000      	beq.n	80031ce <__aeabi_dsub+0x6c2>
 80031cc:	e6b3      	b.n	8002f36 <__aeabi_dsub+0x42a>
 80031ce:	e6c9      	b.n	8002f64 <__aeabi_dsub+0x458>
 80031d0:	2480      	movs	r4, #128	@ 0x80
 80031d2:	2600      	movs	r6, #0
 80031d4:	0324      	lsls	r4, r4, #12
 80031d6:	e5ae      	b.n	8002d36 <__aeabi_dsub+0x22a>
 80031d8:	2120      	movs	r1, #32
 80031da:	2500      	movs	r5, #0
 80031dc:	1a09      	subs	r1, r1, r0
 80031de:	e517      	b.n	8002c10 <__aeabi_dsub+0x104>
 80031e0:	2200      	movs	r2, #0
 80031e2:	2500      	movs	r5, #0
 80031e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003214 <__aeabi_dsub+0x708>)
 80031e6:	e53a      	b.n	8002c5e <__aeabi_dsub+0x152>
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	d100      	bne.n	80031ee <__aeabi_dsub+0x6e2>
 80031ec:	e5f6      	b.n	8002ddc <__aeabi_dsub+0x2d0>
 80031ee:	464b      	mov	r3, r9
 80031f0:	1bda      	subs	r2, r3, r7
 80031f2:	4692      	mov	sl, r2
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	d100      	bne.n	80031fa <__aeabi_dsub+0x6ee>
 80031f8:	e66f      	b.n	8002eda <__aeabi_dsub+0x3ce>
 80031fa:	2a38      	cmp	r2, #56	@ 0x38
 80031fc:	dc05      	bgt.n	800320a <__aeabi_dsub+0x6fe>
 80031fe:	2680      	movs	r6, #128	@ 0x80
 8003200:	0436      	lsls	r6, r6, #16
 8003202:	4334      	orrs	r4, r6
 8003204:	4688      	mov	r8, r1
 8003206:	000e      	movs	r6, r1
 8003208:	e6d1      	b.n	8002fae <__aeabi_dsub+0x4a2>
 800320a:	4688      	mov	r8, r1
 800320c:	000e      	movs	r6, r1
 800320e:	2501      	movs	r5, #1
 8003210:	e6de      	b.n	8002fd0 <__aeabi_dsub+0x4c4>
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	000007ff 	.word	0x000007ff
 8003218:	ff7fffff 	.word	0xff7fffff
 800321c:	000007fe 	.word	0x000007fe
 8003220:	2d00      	cmp	r5, #0
 8003222:	d100      	bne.n	8003226 <__aeabi_dsub+0x71a>
 8003224:	e668      	b.n	8002ef8 <__aeabi_dsub+0x3ec>
 8003226:	464b      	mov	r3, r9
 8003228:	1bd9      	subs	r1, r3, r7
 800322a:	2f00      	cmp	r7, #0
 800322c:	d101      	bne.n	8003232 <__aeabi_dsub+0x726>
 800322e:	468a      	mov	sl, r1
 8003230:	e5a7      	b.n	8002d82 <__aeabi_dsub+0x276>
 8003232:	2701      	movs	r7, #1
 8003234:	2938      	cmp	r1, #56	@ 0x38
 8003236:	dd00      	ble.n	800323a <__aeabi_dsub+0x72e>
 8003238:	e5c7      	b.n	8002dca <__aeabi_dsub+0x2be>
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	0412      	lsls	r2, r2, #16
 800323e:	4314      	orrs	r4, r2
 8003240:	e5af      	b.n	8002da2 <__aeabi_dsub+0x296>
 8003242:	46c0      	nop			@ (mov r8, r8)

08003244 <__aeabi_dcmpun>:
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	46c6      	mov	lr, r8
 8003248:	031e      	lsls	r6, r3, #12
 800324a:	0b36      	lsrs	r6, r6, #12
 800324c:	46b0      	mov	r8, r6
 800324e:	4e0d      	ldr	r6, [pc, #52]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003250:	030c      	lsls	r4, r1, #12
 8003252:	004d      	lsls	r5, r1, #1
 8003254:	005f      	lsls	r7, r3, #1
 8003256:	b500      	push	{lr}
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d6d      	lsrs	r5, r5, #21
 800325c:	0d7f      	lsrs	r7, r7, #21
 800325e:	42b5      	cmp	r5, r6
 8003260:	d00b      	beq.n	800327a <__aeabi_dcmpun+0x36>
 8003262:	4908      	ldr	r1, [pc, #32]	@ (8003284 <__aeabi_dcmpun+0x40>)
 8003264:	2000      	movs	r0, #0
 8003266:	428f      	cmp	r7, r1
 8003268:	d104      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 800326a:	4646      	mov	r6, r8
 800326c:	4316      	orrs	r6, r2
 800326e:	0030      	movs	r0, r6
 8003270:	1e43      	subs	r3, r0, #1
 8003272:	4198      	sbcs	r0, r3
 8003274:	bc80      	pop	{r7}
 8003276:	46b8      	mov	r8, r7
 8003278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800327a:	4304      	orrs	r4, r0
 800327c:	2001      	movs	r0, #1
 800327e:	2c00      	cmp	r4, #0
 8003280:	d1f8      	bne.n	8003274 <__aeabi_dcmpun+0x30>
 8003282:	e7ee      	b.n	8003262 <__aeabi_dcmpun+0x1e>
 8003284:	000007ff 	.word	0x000007ff

08003288 <__aeabi_d2iz>:
 8003288:	000b      	movs	r3, r1
 800328a:	0002      	movs	r2, r0
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d16      	ldr	r5, [pc, #88]	@ (80032e8 <__aeabi_d2iz+0x60>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	b082      	sub	sp, #8
 8003294:	0049      	lsls	r1, r1, #1
 8003296:	2000      	movs	r0, #0
 8003298:	9200      	str	r2, [sp, #0]
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	0b24      	lsrs	r4, r4, #12
 800329e:	0d49      	lsrs	r1, r1, #21
 80032a0:	0fde      	lsrs	r6, r3, #31
 80032a2:	42a9      	cmp	r1, r5
 80032a4:	dd04      	ble.n	80032b0 <__aeabi_d2iz+0x28>
 80032a6:	4811      	ldr	r0, [pc, #68]	@ (80032ec <__aeabi_d2iz+0x64>)
 80032a8:	4281      	cmp	r1, r0
 80032aa:	dd03      	ble.n	80032b4 <__aeabi_d2iz+0x2c>
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <__aeabi_d2iz+0x68>)
 80032ae:	18f0      	adds	r0, r6, r3
 80032b0:	b002      	add	sp, #8
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	2080      	movs	r0, #128	@ 0x80
 80032b6:	0340      	lsls	r0, r0, #13
 80032b8:	4320      	orrs	r0, r4
 80032ba:	4c0e      	ldr	r4, [pc, #56]	@ (80032f4 <__aeabi_d2iz+0x6c>)
 80032bc:	1a64      	subs	r4, r4, r1
 80032be:	2c1f      	cmp	r4, #31
 80032c0:	dd08      	ble.n	80032d4 <__aeabi_d2iz+0x4c>
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <__aeabi_d2iz+0x70>)
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	40d8      	lsrs	r0, r3
 80032c8:	0003      	movs	r3, r0
 80032ca:	4258      	negs	r0, r3
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	d1ef      	bne.n	80032b0 <__aeabi_d2iz+0x28>
 80032d0:	0018      	movs	r0, r3
 80032d2:	e7ed      	b.n	80032b0 <__aeabi_d2iz+0x28>
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <__aeabi_d2iz+0x74>)
 80032d6:	9a00      	ldr	r2, [sp, #0]
 80032d8:	469c      	mov	ip, r3
 80032da:	0003      	movs	r3, r0
 80032dc:	4461      	add	r1, ip
 80032de:	408b      	lsls	r3, r1
 80032e0:	40e2      	lsrs	r2, r4
 80032e2:	4313      	orrs	r3, r2
 80032e4:	e7f1      	b.n	80032ca <__aeabi_d2iz+0x42>
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	000003fe 	.word	0x000003fe
 80032ec:	0000041d 	.word	0x0000041d
 80032f0:	7fffffff 	.word	0x7fffffff
 80032f4:	00000433 	.word	0x00000433
 80032f8:	00000413 	.word	0x00000413
 80032fc:	fffffbed 	.word	0xfffffbed

08003300 <__aeabi_i2d>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2800      	cmp	r0, #0
 8003304:	d016      	beq.n	8003334 <__aeabi_i2d+0x34>
 8003306:	17c3      	asrs	r3, r0, #31
 8003308:	18c5      	adds	r5, r0, r3
 800330a:	405d      	eors	r5, r3
 800330c:	0fc4      	lsrs	r4, r0, #31
 800330e:	0028      	movs	r0, r5
 8003310:	f000 f914 	bl	800353c <__clzsi2>
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <__aeabi_i2d+0x58>)
 8003316:	1a1b      	subs	r3, r3, r0
 8003318:	055b      	lsls	r3, r3, #21
 800331a:	0d5b      	lsrs	r3, r3, #21
 800331c:	280a      	cmp	r0, #10
 800331e:	dc14      	bgt.n	800334a <__aeabi_i2d+0x4a>
 8003320:	0002      	movs	r2, r0
 8003322:	002e      	movs	r6, r5
 8003324:	3215      	adds	r2, #21
 8003326:	4096      	lsls	r6, r2
 8003328:	220b      	movs	r2, #11
 800332a:	1a12      	subs	r2, r2, r0
 800332c:	40d5      	lsrs	r5, r2
 800332e:	032d      	lsls	r5, r5, #12
 8003330:	0b2d      	lsrs	r5, r5, #12
 8003332:	e003      	b.n	800333c <__aeabi_i2d+0x3c>
 8003334:	2400      	movs	r4, #0
 8003336:	2300      	movs	r3, #0
 8003338:	2500      	movs	r5, #0
 800333a:	2600      	movs	r6, #0
 800333c:	051b      	lsls	r3, r3, #20
 800333e:	432b      	orrs	r3, r5
 8003340:	07e4      	lsls	r4, r4, #31
 8003342:	4323      	orrs	r3, r4
 8003344:	0030      	movs	r0, r6
 8003346:	0019      	movs	r1, r3
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	380b      	subs	r0, #11
 800334c:	4085      	lsls	r5, r0
 800334e:	032d      	lsls	r5, r5, #12
 8003350:	2600      	movs	r6, #0
 8003352:	0b2d      	lsrs	r5, r5, #12
 8003354:	e7f2      	b.n	800333c <__aeabi_i2d+0x3c>
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	0000041e 	.word	0x0000041e

0800335c <__aeabi_ui2d>:
 800335c:	b510      	push	{r4, lr}
 800335e:	1e04      	subs	r4, r0, #0
 8003360:	d010      	beq.n	8003384 <__aeabi_ui2d+0x28>
 8003362:	f000 f8eb 	bl	800353c <__clzsi2>
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <__aeabi_ui2d+0x44>)
 8003368:	1a1b      	subs	r3, r3, r0
 800336a:	055b      	lsls	r3, r3, #21
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	280a      	cmp	r0, #10
 8003370:	dc0f      	bgt.n	8003392 <__aeabi_ui2d+0x36>
 8003372:	220b      	movs	r2, #11
 8003374:	0021      	movs	r1, r4
 8003376:	1a12      	subs	r2, r2, r0
 8003378:	40d1      	lsrs	r1, r2
 800337a:	3015      	adds	r0, #21
 800337c:	030a      	lsls	r2, r1, #12
 800337e:	4084      	lsls	r4, r0
 8003380:	0b12      	lsrs	r2, r2, #12
 8003382:	e001      	b.n	8003388 <__aeabi_ui2d+0x2c>
 8003384:	2300      	movs	r3, #0
 8003386:	2200      	movs	r2, #0
 8003388:	051b      	lsls	r3, r3, #20
 800338a:	4313      	orrs	r3, r2
 800338c:	0020      	movs	r0, r4
 800338e:	0019      	movs	r1, r3
 8003390:	bd10      	pop	{r4, pc}
 8003392:	0022      	movs	r2, r4
 8003394:	380b      	subs	r0, #11
 8003396:	4082      	lsls	r2, r0
 8003398:	0312      	lsls	r2, r2, #12
 800339a:	2400      	movs	r4, #0
 800339c:	0b12      	lsrs	r2, r2, #12
 800339e:	e7f3      	b.n	8003388 <__aeabi_ui2d+0x2c>
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_f2d>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	0242      	lsls	r2, r0, #9
 80033a8:	0043      	lsls	r3, r0, #1
 80033aa:	0fc4      	lsrs	r4, r0, #31
 80033ac:	20fe      	movs	r0, #254	@ 0xfe
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	1c59      	adds	r1, r3, #1
 80033b2:	0a55      	lsrs	r5, r2, #9
 80033b4:	4208      	tst	r0, r1
 80033b6:	d00c      	beq.n	80033d2 <__aeabi_f2d+0x2e>
 80033b8:	21e0      	movs	r1, #224	@ 0xe0
 80033ba:	0089      	lsls	r1, r1, #2
 80033bc:	468c      	mov	ip, r1
 80033be:	076d      	lsls	r5, r5, #29
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	4463      	add	r3, ip
 80033c4:	051b      	lsls	r3, r3, #20
 80033c6:	4313      	orrs	r3, r2
 80033c8:	07e4      	lsls	r4, r4, #31
 80033ca:	4323      	orrs	r3, r4
 80033cc:	0028      	movs	r0, r5
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <__aeabi_f2d+0x5c>
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	d01b      	beq.n	8003412 <__aeabi_f2d+0x6e>
 80033da:	0028      	movs	r0, r5
 80033dc:	f000 f8ae 	bl	800353c <__clzsi2>
 80033e0:	280a      	cmp	r0, #10
 80033e2:	dc1c      	bgt.n	800341e <__aeabi_f2d+0x7a>
 80033e4:	230b      	movs	r3, #11
 80033e6:	002a      	movs	r2, r5
 80033e8:	1a1b      	subs	r3, r3, r0
 80033ea:	40da      	lsrs	r2, r3
 80033ec:	0003      	movs	r3, r0
 80033ee:	3315      	adds	r3, #21
 80033f0:	409d      	lsls	r5, r3
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <__aeabi_f2d+0x88>)
 80033f4:	0312      	lsls	r2, r2, #12
 80033f6:	1a1b      	subs	r3, r3, r0
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	0b12      	lsrs	r2, r2, #12
 80033fc:	0d5b      	lsrs	r3, r3, #21
 80033fe:	e7e1      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003400:	2d00      	cmp	r5, #0
 8003402:	d009      	beq.n	8003418 <__aeabi_f2d+0x74>
 8003404:	0b13      	lsrs	r3, r2, #12
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	0312      	lsls	r2, r2, #12
 800340a:	431a      	orrs	r2, r3
 800340c:	076d      	lsls	r5, r5, #29
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <__aeabi_f2d+0x8c>)
 8003410:	e7d8      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003412:	2300      	movs	r3, #0
 8003414:	2200      	movs	r2, #0
 8003416:	e7d5      	b.n	80033c4 <__aeabi_f2d+0x20>
 8003418:	2200      	movs	r2, #0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <__aeabi_f2d+0x8c>)
 800341c:	e7d2      	b.n	80033c4 <__aeabi_f2d+0x20>
 800341e:	0003      	movs	r3, r0
 8003420:	002a      	movs	r2, r5
 8003422:	3b0b      	subs	r3, #11
 8003424:	409a      	lsls	r2, r3
 8003426:	2500      	movs	r5, #0
 8003428:	e7e3      	b.n	80033f2 <__aeabi_f2d+0x4e>
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	00000389 	.word	0x00000389
 8003430:	000007ff 	.word	0x000007ff

08003434 <__aeabi_d2f>:
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	004b      	lsls	r3, r1, #1
 8003438:	030f      	lsls	r7, r1, #12
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	4c3b      	ldr	r4, [pc, #236]	@ (800352c <__aeabi_d2f+0xf8>)
 800343e:	0f45      	lsrs	r5, r0, #29
 8003440:	b083      	sub	sp, #12
 8003442:	0a7f      	lsrs	r7, r7, #9
 8003444:	1c5e      	adds	r6, r3, #1
 8003446:	432f      	orrs	r7, r5
 8003448:	9000      	str	r0, [sp, #0]
 800344a:	9101      	str	r1, [sp, #4]
 800344c:	0fca      	lsrs	r2, r1, #31
 800344e:	00c5      	lsls	r5, r0, #3
 8003450:	4226      	tst	r6, r4
 8003452:	d00b      	beq.n	800346c <__aeabi_d2f+0x38>
 8003454:	4936      	ldr	r1, [pc, #216]	@ (8003530 <__aeabi_d2f+0xfc>)
 8003456:	185c      	adds	r4, r3, r1
 8003458:	2cfe      	cmp	r4, #254	@ 0xfe
 800345a:	dd13      	ble.n	8003484 <__aeabi_d2f+0x50>
 800345c:	20ff      	movs	r0, #255	@ 0xff
 800345e:	2300      	movs	r3, #0
 8003460:	05c0      	lsls	r0, r0, #23
 8003462:	4318      	orrs	r0, r3
 8003464:	07d2      	lsls	r2, r2, #31
 8003466:	4310      	orrs	r0, r2
 8003468:	b003      	add	sp, #12
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <__aeabi_d2f+0x42>
 8003470:	2000      	movs	r0, #0
 8003472:	2300      	movs	r3, #0
 8003474:	e7f4      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003476:	433d      	orrs	r5, r7
 8003478:	d0f0      	beq.n	800345c <__aeabi_d2f+0x28>
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	03db      	lsls	r3, r3, #15
 800347e:	20ff      	movs	r0, #255	@ 0xff
 8003480:	433b      	orrs	r3, r7
 8003482:	e7ed      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003484:	2c00      	cmp	r4, #0
 8003486:	dd14      	ble.n	80034b2 <__aeabi_d2f+0x7e>
 8003488:	9b00      	ldr	r3, [sp, #0]
 800348a:	00ff      	lsls	r7, r7, #3
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	4183      	sbcs	r3, r0
 8003492:	0f69      	lsrs	r1, r5, #29
 8003494:	433b      	orrs	r3, r7
 8003496:	430b      	orrs	r3, r1
 8003498:	0759      	lsls	r1, r3, #29
 800349a:	d041      	beq.n	8003520 <__aeabi_d2f+0xec>
 800349c:	210f      	movs	r1, #15
 800349e:	4019      	ands	r1, r3
 80034a0:	2904      	cmp	r1, #4
 80034a2:	d028      	beq.n	80034f6 <__aeabi_d2f+0xc2>
 80034a4:	3304      	adds	r3, #4
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	d525      	bpl.n	80034f6 <__aeabi_d2f+0xc2>
 80034aa:	3401      	adds	r4, #1
 80034ac:	2300      	movs	r3, #0
 80034ae:	b2e0      	uxtb	r0, r4
 80034b0:	e7d6      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034b2:	0021      	movs	r1, r4
 80034b4:	3117      	adds	r1, #23
 80034b6:	dbdb      	blt.n	8003470 <__aeabi_d2f+0x3c>
 80034b8:	2180      	movs	r1, #128	@ 0x80
 80034ba:	201e      	movs	r0, #30
 80034bc:	0409      	lsls	r1, r1, #16
 80034be:	4339      	orrs	r1, r7
 80034c0:	1b00      	subs	r0, r0, r4
 80034c2:	281f      	cmp	r0, #31
 80034c4:	dd1b      	ble.n	80034fe <__aeabi_d2f+0xca>
 80034c6:	2602      	movs	r6, #2
 80034c8:	4276      	negs	r6, r6
 80034ca:	1b34      	subs	r4, r6, r4
 80034cc:	000e      	movs	r6, r1
 80034ce:	40e6      	lsrs	r6, r4
 80034d0:	0034      	movs	r4, r6
 80034d2:	2820      	cmp	r0, #32
 80034d4:	d004      	beq.n	80034e0 <__aeabi_d2f+0xac>
 80034d6:	4817      	ldr	r0, [pc, #92]	@ (8003534 <__aeabi_d2f+0x100>)
 80034d8:	4684      	mov	ip, r0
 80034da:	4463      	add	r3, ip
 80034dc:	4099      	lsls	r1, r3
 80034de:	430d      	orrs	r5, r1
 80034e0:	002b      	movs	r3, r5
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	418b      	sbcs	r3, r1
 80034e6:	4323      	orrs	r3, r4
 80034e8:	0759      	lsls	r1, r3, #29
 80034ea:	d015      	beq.n	8003518 <__aeabi_d2f+0xe4>
 80034ec:	210f      	movs	r1, #15
 80034ee:	2400      	movs	r4, #0
 80034f0:	4019      	ands	r1, r3
 80034f2:	2904      	cmp	r1, #4
 80034f4:	d117      	bne.n	8003526 <__aeabi_d2f+0xf2>
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	0a5b      	lsrs	r3, r3, #9
 80034fa:	b2e0      	uxtb	r0, r4
 80034fc:	e7b0      	b.n	8003460 <__aeabi_d2f+0x2c>
 80034fe:	4c0e      	ldr	r4, [pc, #56]	@ (8003538 <__aeabi_d2f+0x104>)
 8003500:	191c      	adds	r4, r3, r4
 8003502:	002b      	movs	r3, r5
 8003504:	40a5      	lsls	r5, r4
 8003506:	40c3      	lsrs	r3, r0
 8003508:	40a1      	lsls	r1, r4
 800350a:	1e68      	subs	r0, r5, #1
 800350c:	4185      	sbcs	r5, r0
 800350e:	4329      	orrs	r1, r5
 8003510:	430b      	orrs	r3, r1
 8003512:	2400      	movs	r4, #0
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d1c1      	bne.n	800349c <__aeabi_d2f+0x68>
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	2000      	movs	r0, #0
 800351c:	0a5b      	lsrs	r3, r3, #9
 800351e:	e79f      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	b2e0      	uxtb	r0, r4
 8003524:	e79c      	b.n	8003460 <__aeabi_d2f+0x2c>
 8003526:	3304      	adds	r3, #4
 8003528:	e7e5      	b.n	80034f6 <__aeabi_d2f+0xc2>
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	000007fe 	.word	0x000007fe
 8003530:	fffffc80 	.word	0xfffffc80
 8003534:	fffffca2 	.word	0xfffffca2
 8003538:	fffffc82 	.word	0xfffffc82

0800353c <__clzsi2>:
 800353c:	211c      	movs	r1, #28
 800353e:	2301      	movs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4298      	cmp	r0, r3
 8003544:	d301      	bcc.n	800354a <__clzsi2+0xe>
 8003546:	0c00      	lsrs	r0, r0, #16
 8003548:	3910      	subs	r1, #16
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	4298      	cmp	r0, r3
 800354e:	d301      	bcc.n	8003554 <__clzsi2+0x18>
 8003550:	0a00      	lsrs	r0, r0, #8
 8003552:	3908      	subs	r1, #8
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	4298      	cmp	r0, r3
 8003558:	d301      	bcc.n	800355e <__clzsi2+0x22>
 800355a:	0900      	lsrs	r0, r0, #4
 800355c:	3904      	subs	r1, #4
 800355e:	a202      	add	r2, pc, #8	@ (adr r2, 8003568 <__clzsi2+0x2c>)
 8003560:	5c10      	ldrb	r0, [r2, r0]
 8003562:	1840      	adds	r0, r0, r1
 8003564:	4770      	bx	lr
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	02020304 	.word	0x02020304
 800356c:	01010101 	.word	0x01010101
	...

08003578 <__clzdi2>:
 8003578:	b510      	push	{r4, lr}
 800357a:	2900      	cmp	r1, #0
 800357c:	d103      	bne.n	8003586 <__clzdi2+0xe>
 800357e:	f7ff ffdd 	bl	800353c <__clzsi2>
 8003582:	3020      	adds	r0, #32
 8003584:	e002      	b.n	800358c <__clzdi2+0x14>
 8003586:	0008      	movs	r0, r1
 8003588:	f7ff ffd8 	bl	800353c <__clzsi2>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)

08003590 <set_ADS_pins>:
				  GPIO_TypeDef *pdwn_port,
				  uint16_t in_pin,
				  uint16_t out_pin,
				  uint16_t pdwdn_pin,
				  void(*f)(int))
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	001a      	movs	r2, r3
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	801a      	strh	r2, [r3, #0]
	IN_PORT = in_port;
 80035a2:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <set_ADS_pins+0x50>)
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]
	OUT_PORT = out_port;
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <set_ADS_pins+0x54>)
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	601a      	str	r2, [r3, #0]
	PDWN_PORT=pdwn_port;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <set_ADS_pins+0x58>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
	IN_PIN=in_pin;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <set_ADS_pins+0x5c>)
 80035b6:	1cba      	adds	r2, r7, #2
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
	OUT_PIN=out_pin;
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <set_ADS_pins+0x60>)
 80035be:	2318      	movs	r3, #24
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	8013      	strh	r3, [r2, #0]
	PDWDN_PIN=pdwdn_pin;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <set_ADS_pins+0x64>)
 80035c8:	221c      	movs	r2, #28
 80035ca:	18ba      	adds	r2, r7, r2
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	801a      	strh	r2, [r3, #0]
	ads_callback = f;
 80035d0:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <set_ADS_pins+0x68>)
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000310 	.word	0x20000310
 80035e4:	20000314 	.word	0x20000314
 80035e8:	20000318 	.word	0x20000318
 80035ec:	2000031c 	.word	0x2000031c
 80035f0:	2000031e 	.word	0x2000031e
 80035f4:	20000320 	.word	0x20000320
 80035f8:	20000324 	.word	0x20000324

080035fc <Timer_Event>:

void Timer_Event() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0

	MISO_Val=HAL_GPIO_ReadPin(IN_PORT, IN_PIN);
 8003600:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <Timer_Event+0x11c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b45      	ldr	r3, [pc, #276]	@ (800371c <Timer_Event+0x120>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	0019      	movs	r1, r3
 800360a:	0010      	movs	r0, r2
 800360c:	f005 f86a 	bl	80086e4 <HAL_GPIO_ReadPin>
 8003610:	0003      	movs	r3, r0
 8003612:	001a      	movs	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <Timer_Event+0x124>)
 8003616:	601a      	str	r2, [r3, #0]
	if (counter_ads==0 && MISO_Val==1){
 8003618:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <Timer_Event+0x128>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <Timer_Event+0x2e>
 8003620:	4b3f      	ldr	r3, [pc, #252]	@ (8003720 <Timer_Event+0x124>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d100      	bne.n	800362a <Timer_Event+0x2e>
 8003628:	e072      	b.n	8003710 <Timer_Event+0x114>
		return;
	}
	if (counter_ads==0){
 800362a:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <Timer_Event+0x128>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <Timer_Event+0x40>
		//TIM->ARR=((Period_htim+1)*10)-1;
		TIM->ARR=Period_htim;
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <Timer_Event+0x12c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3d      	ldr	r2, [pc, #244]	@ (800372c <Timer_Event+0x130>)
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
	}
	if (counter_ads%2==0){
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <Timer_Event+0x128>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d10d      	bne.n	8003664 <Timer_Event+0x68>
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_SET);
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <Timer_Event+0x134>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <Timer_Event+0x138>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	0019      	movs	r1, r3
 8003654:	f005 f863 	bl	800871e <HAL_GPIO_WritePin>
		counter_ads++;
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <Timer_Event+0x128>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <Timer_Event+0x128>)
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e026      	b.n	80036b2 <Timer_Event+0xb6>
	}
	else{
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 8003664:	4b32      	ldr	r3, [pc, #200]	@ (8003730 <Timer_Event+0x134>)
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	4b32      	ldr	r3, [pc, #200]	@ (8003734 <Timer_Event+0x138>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	0019      	movs	r1, r3
 8003670:	f005 f855 	bl	800871e <HAL_GPIO_WritePin>
		if (counter_ads_max-2>=counter_ads){
 8003674:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <Timer_Event+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <Timer_Event+0x128>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	dd0d      	ble.n	800369e <Timer_Event+0xa2>
			value_ads|=(MISO_Val<<23-bit_ads);//23-bit_ads отзеркаливаем значение value_ads
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <Timer_Event+0x124>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <Timer_Event+0x140>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2117      	movs	r1, #23
 800368c:	1acb      	subs	r3, r1, r3
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	001a      	movs	r2, r3
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <Timer_Event+0x144>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	431a      	orrs	r2, r3
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <Timer_Event+0x144>)
 800369c:	601a      	str	r2, [r3, #0]

		}

		counter_ads++;
 800369e:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <Timer_Event+0x128>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003724 <Timer_Event+0x128>)
 80036a6:	601a      	str	r2, [r3, #0]
		bit_ads++;
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <Timer_Event+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <Timer_Event+0x140>)
 80036b0:	601a      	str	r2, [r3, #0]
	}
	if(counter_ads==counter_ads_max){
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <Timer_Event+0x128>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <Timer_Event+0x13c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d129      	bne.n	8003712 <Timer_Event+0x116>
		//HAL_TIM_Base_Stop_IT(htim);
		HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <Timer_Event+0x134>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <Timer_Event+0x138>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	0019      	movs	r1, r3
 80036ca:	f005 f828 	bl	800871e <HAL_GPIO_WritePin>
		if (ads_callback != NULL)
 80036ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <Timer_Event+0x148>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <Timer_Event+0xe6>
		{
			ads_callback(value_ads);
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <Timer_Event+0x148>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <Timer_Event+0x144>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0018      	movs	r0, r3
 80036e0:	4790      	blx	r2
		}

		TIM->ARR=((TIM->ARR+1)*10)-1;
 80036e2:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <Timer_Event+0x12c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	0013      	movs	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <Timer_Event+0x12c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		//ARR_Chek=TIM->ARR;
		counter_ads=0;
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <Timer_Event+0x128>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
		value_ads=0;
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <Timer_Event+0x144>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
		bit_ads=0;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <Timer_Event+0x140>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e000      	b.n	8003712 <Timer_Event+0x116>
		return;
 8003710:	46c0      	nop			@ (mov r8, r8)
		//HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_RESET);
	}
}
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000310 	.word	0x20000310
 800371c:	2000031c 	.word	0x2000031c
 8003720:	200002f8 	.word	0x200002f8
 8003724:	200002f4 	.word	0x200002f4
 8003728:	2000030c 	.word	0x2000030c
 800372c:	20000308 	.word	0x20000308
 8003730:	20000314 	.word	0x20000314
 8003734:	2000031e 	.word	0x2000031e
 8003738:	20000000 	.word	0x20000000
 800373c:	200002fc 	.word	0x200002fc
 8003740:	20000300 	.word	0x20000300
 8003744:	20000324 	.word	0x20000324

08003748 <Start_read>:
void Start_read(TIM_HandleTypeDef *htim_ptr, TIM_TypeDef *TIM_ads){
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PDWN_PORT, PDWDN_PIN, GPIO_PIN_SET);
 8003752:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <Start_read+0x70>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <Start_read+0x74>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	0019      	movs	r1, r3
 800375e:	f004 ffde 	bl	800871e <HAL_GPIO_WritePin>
	if (counter_ads>0&&counter_ads<counter_ads_max){
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <Start_read+0x78>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dd05      	ble.n	8003776 <Start_read+0x2e>
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <Start_read+0x78>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <Start_read+0x7c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	db1c      	blt.n	80037b0 <Start_read+0x68>
		return;
	}
	htim = htim_ptr;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <Start_read+0x80>)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
	TIM = TIM_ads;
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <Start_read+0x84>)
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
	Period_htim=htim->Init.Period;
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <Start_read+0x80>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <Start_read+0x88>)
 800378a:	601a      	str	r2, [r3, #0]
	counter_ads=0;
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <Start_read+0x78>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
	value_ads=0;
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <Start_read+0x8c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
	bit_ads=0;
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <Start_read+0x90>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(OUT_PORT, OUT_PIN, GPIO_PIN_RESET);
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <Start_read+0x94>)
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <Start_read+0x98>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	0019      	movs	r1, r3
 80037aa:	f004 ffb8 	bl	800871e <HAL_GPIO_WritePin>
 80037ae:	e000      	b.n	80037b2 <Start_read+0x6a>
		return;
 80037b0:	46c0      	nop			@ (mov r8, r8)
	//HAL_TIM_Base_Start_IT(htim);
}
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000318 	.word	0x20000318
 80037bc:	20000320 	.word	0x20000320
 80037c0:	200002f4 	.word	0x200002f4
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000304 	.word	0x20000304
 80037cc:	2000030c 	.word	0x2000030c
 80037d0:	20000308 	.word	0x20000308
 80037d4:	20000300 	.word	0x20000300
 80037d8:	200002fc 	.word	0x200002fc
 80037dc:	20000314 	.word	0x20000314
 80037e0:	2000031e 	.word	0x2000031e

080037e4 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "main.h"
#define CONFIGURATION_START_ADDR 0x0801f800
void clearFlash(){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0

	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstPage = 63;//flash memory sector
 80037ea:	233f      	movs	r3, #63	@ 0x3f
 80037ec:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfPages = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
	//uint32_t Flash_BANK = 1;

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <clearFlash+0x58>)
 80037f4:	2202      	movs	r2, #2
 80037f6:	601a      	str	r2, [r3, #0]
	//EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.Page = FirstPage;
 80037f8:	4b10      	ldr	r3, [pc, #64]	@ (800383c <clearFlash+0x58>)
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <clearFlash+0x58>)
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	60da      	str	r2, [r3, #12]
	uint32_t PageError = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Lock();
 8003808:	f004 fcca 	bl	80081a0 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800380c:	f004 fca4 	bl	8008158 <HAL_FLASH_Unlock>
	//FLASH_PageErase(FLASH_BANK_1,FirstPage);
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8003810:	003a      	movs	r2, r7
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <clearFlash+0x58>)
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f004 fd5c 	bl	80082d4 <HAL_FLASHEx_Erase>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d006      	beq.n	800382e <clearFlash+0x4a>
		/*Error occurred while sector erase.
User can add here some code to deal with this error.
SectorError will contain the faulty sector and then to know the code error on this sector,
user can call function 'HAL_FLASH_GetError()'
		 */
		uint32_t errorcode = HAL_FLASH_GetError();
 8003820:	f004 fce0 	bl	80081e4 <HAL_FLASH_GetError>
 8003824:	0003      	movs	r3, r0
 8003826:	607b      	str	r3, [r7, #4]
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();
		osDelay(1);
 8003828:	2001      	movs	r0, #1
 800382a:	f00b fca4 	bl	800f176 <osDelay>
	}
	//CLEAR_BIT(FLASH->CR, FLASH_CR_PER);

	HAL_FLASH_Lock();
 800382e:	f004 fcb7 	bl	80081a0 <HAL_FLASH_Lock>

}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000328 	.word	0x20000328

08003840 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(uint8_t* data, int size, int offset) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <WriteDeviceAddressOffset+0x70>)
 8003850:	4694      	mov	ip, r2
 8003852:	4463      	add	r3, ip
 8003854:	623b      	str	r3, [r7, #32]
	HAL_FLASH_Lock();
 8003856:	f004 fca3 	bl	80081a0 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 800385a:	f004 fc7d 	bl	8008158 <HAL_FLASH_Unlock>
	//osDelay(10);
	for (int i = 0; i<size; i+=8){
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	e01b      	b.n	800389c <WriteDeviceAddressOffset+0x5c>
		uint64_t data_64 = *(uint64_t*)(&data[i]);
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	18d3      	adds	r3, r2, r3
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61ba      	str	r2, [r7, #24]
 8003870:	61fb      	str	r3, [r7, #28]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address+i, data_64) != HAL_OK){
 8003872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	18d1      	adds	r1, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2001      	movs	r0, #1
 800387e:	f004 fc1d 	bl	80080bc <HAL_FLASH_Program>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d007      	beq.n	8003896 <WriteDeviceAddressOffset+0x56>
User can add here some code to deal with this error */
			/*
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			uint32_t errorcode = HAL_FLASH_GetError();
 8003886:	f004 fcad 	bl	80081e4 <HAL_FLASH_GetError>
 800388a:	0003      	movs	r3, r0
 800388c:	617b      	str	r3, [r7, #20]
			osDelay(1);
 800388e:	2001      	movs	r0, #1
 8003890:	f00b fc71 	bl	800f176 <osDelay>
			break;
 8003894:	e006      	b.n	80038a4 <WriteDeviceAddressOffset+0x64>
	for (int i = 0; i<size; i+=8){
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3308      	adds	r3, #8
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbdf      	blt.n	8003864 <WriteDeviceAddressOffset+0x24>
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80038a4:	f004 fc7c 	bl	80081a0 <HAL_FLASH_Lock>
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b00a      	add	sp, #40	@ 0x28
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0801f800 	.word	0x0801f800

080038b4 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(uint8_t* Dout, int size, int offset)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <ReadDeviceAddressOffset+0x48>)
 80038c4:	4694      	mov	ip, r2
 80038c6:	4463      	add	r3, ip
 80038c8:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00c      	b.n	80038ea <ReadDeviceAddressOffset+0x36>
		Dout[i] = *(__IO uint8_t*)(Address+i);
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	0019      	movs	r1, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	780a      	ldrb	r2, [r1, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbee      	blt.n	80038d0 <ReadDeviceAddressOffset+0x1c>
	}
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	0801f800 	.word	0x0801f800

08003900 <get_platform_number>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void check_errors();

void get_platform_number() {
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
//	}
//
//	platform_number.number_ch = '0' + platform_number.number;
//
//	debug("PLATFORM NUMBER: %d \r\n", platform_number.number);
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN Init */

	serial_number =(uint16_t)(crc32b((uint8_t *)UID_BASE, 8));
 8003912:	4b6e      	ldr	r3, [pc, #440]	@ (8003acc <MX_FREERTOS_Init+0x1c0>)
 8003914:	2108      	movs	r1, #8
 8003916:	0018      	movs	r0, r3
 8003918:	f003 f9ea 	bl	8006cf0 <crc32b>
 800391c:	0003      	movs	r3, r0
 800391e:	b29a      	uxth	r2, r3
 8003920:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad0 <MX_FREERTOS_Init+0x1c4>)
 8003922:	801a      	strh	r2, [r3, #0]
	serial_number_control = abs((int16_t)serial_number);
 8003924:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad0 <MX_FREERTOS_Init+0x1c4>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b21b      	sxth	r3, r3
 800392a:	17da      	asrs	r2, r3, #31
 800392c:	189b      	adds	r3, r3, r2
 800392e:	4053      	eors	r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	b21a      	sxth	r2, r3
 8003934:	4b67      	ldr	r3, [pc, #412]	@ (8003ad4 <MX_FREERTOS_Init+0x1c8>)
 8003936:	801a      	strh	r2, [r3, #0]
	ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003938:	4b67      	ldr	r3, [pc, #412]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b67      	ldr	r3, [pc, #412]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 800393e:	2108      	movs	r1, #8
 8003940:	0018      	movs	r0, r3
 8003942:	f7ff ffb7 	bl	80038b4 <ReadDeviceAddressOffset>
	//memset(transmitting_command, 0, sizeof(transmitting_command));
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003946:	e016      	b.n	8003976 <MX_FREERTOS_Init+0x6a>
	{
		if(offset>=248){
 8003948:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2bf7      	cmp	r3, #247	@ 0xf7
 800394e:	dd05      	ble.n	800395c <MX_FREERTOS_Init+0x50>
//
			offset=0;
 8003950:	4b61      	ldr	r3, [pc, #388]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
			clearFlash();
 8003956:	f7ff ff45 	bl	80037e4 <clearFlash>
			break;
 800395a:	e010      	b.n	800397e <MX_FREERTOS_Init+0x72>
		}
		offset+=sizeof(sensor_inf);
 800395c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	001a      	movs	r2, r3
 8003964:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 8003966:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8003968:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b5b      	ldr	r3, [pc, #364]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 800396e:	2108      	movs	r1, #8
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff ff9f 	bl	80038b4 <ReadDeviceAddressOffset>
	while (sensor_inf.platform_adr[0]!=0xFF)
 8003976:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2bff      	cmp	r3, #255	@ 0xff
 800397c:	d1e4      	bne.n	8003948 <MX_FREERTOS_Init+0x3c>
	}
	if(offset<8){
 800397e:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b07      	cmp	r3, #7
 8003984:	dc1c      	bgt.n	80039c0 <MX_FREERTOS_Init+0xb4>

		//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
		memset(&sensor_inf, 0, sizeof(sensor_inf));
 8003986:	4b55      	ldr	r3, [pc, #340]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003988:	2208      	movs	r2, #8
 800398a:	2100      	movs	r1, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f00f fa83 	bl	8012e98 <memset>
		sensor_inf.platform_adr[0]='0';
 8003992:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003994:	2230      	movs	r2, #48	@ 0x30
 8003996:	701a      	strb	r2, [r3, #0]
		sensor_inf.platform_adr[1]='1';
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 800399a:	2231      	movs	r2, #49	@ 0x31
 800399c:	705a      	strb	r2, [r3, #1]
		sensor_inf.received_BDR=38400;
 800399e:	4b4f      	ldr	r3, [pc, #316]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 80039a0:	2296      	movs	r2, #150	@ 0x96
 80039a2:	0212      	lsls	r2, r2, #8
 80039a4:	605a      	str	r2, [r3, #4]
		WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80039a6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b4c      	ldr	r3, [pc, #304]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 80039ac:	2108      	movs	r1, #8
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7ff ff46 	bl	8003840 <WriteDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 80039b4:	4b48      	ldr	r3, [pc, #288]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	001a      	movs	r2, r3
 80039bc:	4b46      	ldr	r3, [pc, #280]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039be:	601a      	str	r2, [r3, #0]
	}
	if(offset>=8){
 80039c0:	4b45      	ldr	r3, [pc, #276]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	dd12      	ble.n	80039ee <MX_FREERTOS_Init+0xe2>

		offset-=sizeof(sensor_inf);
 80039c8:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b08      	subs	r3, #8
 80039ce:	001a      	movs	r2, r3
 80039d0:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039d2:	601a      	str	r2, [r3, #0]
		ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 80039d4:	4b40      	ldr	r3, [pc, #256]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b40      	ldr	r3, [pc, #256]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 80039da:	2108      	movs	r1, #8
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff69 	bl	80038b4 <ReadDeviceAddressOffset>
		offset+=sizeof(sensor_inf);
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3308      	adds	r3, #8
 80039e8:	001a      	movs	r2, r3
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <MX_FREERTOS_Init+0x1cc>)
 80039ec:	601a      	str	r2, [r3, #0]
	}

	 while (!(USART2->ISR & USART_ISR_TC)) {
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2240      	movs	r2, #64	@ 0x40
 80039f6:	4013      	ands	r3, r2
 80039f8:	d0fa      	beq.n	80039f0 <MX_FREERTOS_Init+0xe4>
	 // Ожидание, пока передача завершится
	 }

	 // Отключаем USART перед изменением настроек
	 USART2->CR1 &= ~USART_CR1_UE;
 80039fa:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b38      	ldr	r3, [pc, #224]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
     // �?зменение скорости
	 USART2->BRR = (SystemCoreClock+12800) / sensor_inf.received_BDR;
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <MX_FREERTOS_Init+0x1d8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	22c8      	movs	r2, #200	@ 0xc8
 8003a0c:	0192      	lsls	r2, r2, #6
 8003a0e:	189a      	adds	r2, r3, r2
 8003a10:	4b32      	ldr	r3, [pc, #200]	@ (8003adc <MX_FREERTOS_Init+0x1d0>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4c32      	ldr	r4, [pc, #200]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a16:	0019      	movs	r1, r3
 8003a18:	0010      	movs	r0, r2
 8003a1a:	f7fc fb91 	bl	8000140 <__udivsi3>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	60e3      	str	r3, [r4, #12]
	 // Включаем USART обратно
	 USART2->CR1 |= USART_CR1_UE;
 8003a22:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae0 <MX_FREERTOS_Init+0x1d4>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]

	//ReadDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
	//offset+=sizeof(sensor_inf);
	//clearFlash();
	//WriteDeviceAddressOffset((uint8_t*)&sensor_inf, sizeof(sensor_inf), offset);
	sensorsState.hdc_fail = 0;
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae8 <MX_FREERTOS_Init+0x1dc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
	sensorsState.lps_fail = 0;
 8003a34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae8 <MX_FREERTOS_Init+0x1dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
	 set_ADS_pins(GPIOA,
 8003a3a:	23a0      	movs	r3, #160	@ 0xa0
 8003a3c:	05da      	lsls	r2, r3, #23
 8003a3e:	23a0      	movs	r3, #160	@ 0xa0
 8003a40:	05d9      	lsls	r1, r3, #23
 8003a42:	23a0      	movs	r3, #160	@ 0xa0
 8003a44:	05d8      	lsls	r0, r3, #23
 8003a46:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <MX_FREERTOS_Init+0x1e0>)
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2301      	movs	r3, #1
 8003a54:	f7ff fd9c 	bl	8003590 <set_ADS_pins>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of maximumsPeriodTimer */
  maximumsPeriodTimerHandle = osTimerNew(maximumsPeriodTimer_callback, osTimerPeriodic, NULL, &maximumsPeriodTimer_attributes);
 8003a58:	4b25      	ldr	r3, [pc, #148]	@ (8003af0 <MX_FREERTOS_Init+0x1e4>)
 8003a5a:	4826      	ldr	r0, [pc, #152]	@ (8003af4 <MX_FREERTOS_Init+0x1e8>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f00b fbbc 	bl	800f1dc <osTimerNew>
 8003a64:	0002      	movs	r2, r0
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <MX_FREERTOS_Init+0x1ec>)
 8003a68:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of debugTask */
  debugTaskHandle = osThreadNew(StartDebugTask, NULL, &debugTask_attributes);
 8003a6a:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <MX_FREERTOS_Init+0x1f0>)
 8003a6c:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <MX_FREERTOS_Init+0x1f4>)
 8003a6e:	2100      	movs	r1, #0
 8003a70:	0018      	movs	r0, r3
 8003a72:	f00b fae9 	bl	800f048 <osThreadNew>
 8003a76:	0002      	movs	r2, r0
 8003a78:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <MX_FREERTOS_Init+0x1f8>)
 8003a7a:	601a      	str	r2, [r3, #0]

  /* creation of rxCommandsTask */
  rxCommandsTaskHandle = osThreadNew(StartTaskRxCommands, NULL, &rxCommandsTask_attributes);
 8003a7c:	4a22      	ldr	r2, [pc, #136]	@ (8003b08 <MX_FREERTOS_Init+0x1fc>)
 8003a7e:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <MX_FREERTOS_Init+0x200>)
 8003a80:	2100      	movs	r1, #0
 8003a82:	0018      	movs	r0, r3
 8003a84:	f00b fae0 	bl	800f048 <osThreadNew>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <MX_FREERTOS_Init+0x204>)
 8003a8c:	601a      	str	r2, [r3, #0]

  /* creation of accelTask */
  accelTaskHandle = osThreadNew(StartTaskAccelerometer, NULL, &accelTask_attributes);
 8003a8e:	4a21      	ldr	r2, [pc, #132]	@ (8003b14 <MX_FREERTOS_Init+0x208>)
 8003a90:	4b21      	ldr	r3, [pc, #132]	@ (8003b18 <MX_FREERTOS_Init+0x20c>)
 8003a92:	2100      	movs	r1, #0
 8003a94:	0018      	movs	r0, r3
 8003a96:	f00b fad7 	bl	800f048 <osThreadNew>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <MX_FREERTOS_Init+0x210>)
 8003a9e:	601a      	str	r2, [r3, #0]

  /* creation of sensorsPolling */
  sensorsPollingHandle = osThreadNew(StartSensorsPolling, NULL, &sensorsPolling_attributes);
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b20 <MX_FREERTOS_Init+0x214>)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <MX_FREERTOS_Init+0x218>)
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f00b face 	bl	800f048 <osThreadNew>
 8003aac:	0002      	movs	r2, r0
 8003aae:	4b1e      	ldr	r3, [pc, #120]	@ (8003b28 <MX_FREERTOS_Init+0x21c>)
 8003ab0:	601a      	str	r2, [r3, #0]

  /* creation of ADS1232Task */
  ADS1232TaskHandle = osThreadNew(StartADS1232Task, NULL, &ADS1232Task_attributes);
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b2c <MX_FREERTOS_Init+0x220>)
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <MX_FREERTOS_Init+0x224>)
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f00b fac5 	bl	800f048 <osThreadNew>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b34 <MX_FREERTOS_Init+0x228>)
 8003ac2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b001      	add	sp, #4
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	1fff7590 	.word	0x1fff7590
 8003ad0:	200003ac 	.word	0x200003ac
 8003ad4:	200003ae 	.word	0x200003ae
 8003ad8:	200003a8 	.word	0x200003a8
 8003adc:	200003a0 	.word	0x200003a0
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	20000068 	.word	0x20000068
 8003ae8:	20000338 	.word	0x20000338
 8003aec:	08004fbd 	.word	0x08004fbd
 8003af0:	08017250 	.word	0x08017250
 8003af4:	08004c35 	.word	0x08004c35
 8003af8:	200003d0 	.word	0x200003d0
 8003afc:	0801719c 	.word	0x0801719c
 8003b00:	08003b39 	.word	0x08003b39
 8003b04:	200003bc 	.word	0x200003bc
 8003b08:	080171c0 	.word	0x080171c0
 8003b0c:	08003e41 	.word	0x08003e41
 8003b10:	200003c0 	.word	0x200003c0
 8003b14:	080171e4 	.word	0x080171e4
 8003b18:	080048c5 	.word	0x080048c5
 8003b1c:	200003c4 	.word	0x200003c4
 8003b20:	08017208 	.word	0x08017208
 8003b24:	08004aad 	.word	0x08004aad
 8003b28:	200003c8 	.word	0x200003c8
 8003b2c:	0801722c 	.word	0x0801722c
 8003b30:	08004c09 	.word	0x08004c09
 8003b34:	200003cc 	.word	0x200003cc

08003b38 <StartDebugTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	46de      	mov	lr, fp
 8003b3c:	4657      	mov	r7, sl
 8003b3e:	464e      	mov	r6, r9
 8003b40:	4645      	mov	r5, r8
 8003b42:	b5e0      	push	{r5, r6, r7, lr}
 8003b44:	b0e3      	sub	sp, #396	@ 0x18c
 8003b46:	af12      	add	r7, sp, #72	@ 0x48
 8003b48:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartDebugTask */

  /* Infinite loop */
	check_errors();
 8003b4a:	f001 f9e7 	bl	8004f1c <check_errors>

	get_platform_number();
 8003b4e:	f7ff fed7 	bl	8003900 <get_platform_number>

	osTimerStart(maximumsPeriodTimerHandle, timer_period);	// запуск таймера с периодом срабатывания 10 минут
 8003b52:	4bac      	ldr	r3, [pc, #688]	@ (8003e04 <StartDebugTask+0x2cc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4aac      	ldr	r2, [pc, #688]	@ (8003e08 <StartDebugTask+0x2d0>)
 8003b58:	0011      	movs	r1, r2
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f00b fbc4 	bl	800f2e8 <osTimerStart>
	debug("\r\nSN: %05d\r\n", serial_number);
 8003b60:	4baa      	ldr	r3, [pc, #680]	@ (8003e0c <StartDebugTask+0x2d4>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	001a      	movs	r2, r3
 8003b66:	4baa      	ldr	r3, [pc, #680]	@ (8003e10 <StartDebugTask+0x2d8>)
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f001 ffba 	bl	8005ae4 <debug>
	debug("\r\nMax mediums timer set to %d ms\r\n", timer_period);
 8003b70:	4aa5      	ldr	r2, [pc, #660]	@ (8003e08 <StartDebugTask+0x2d0>)
 8003b72:	4ba8      	ldr	r3, [pc, #672]	@ (8003e14 <StartDebugTask+0x2dc>)
 8003b74:	0011      	movs	r1, r2
 8003b76:	0018      	movs	r0, r3
 8003b78:	f001 ffb4 	bl	8005ae4 <debug>

	if (!debug_enabled()) {
 8003b7c:	f001 ffac 	bl	8005ad8 <debug_enabled>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d137      	bne.n	8003bf4 <StartDebugTask+0xbc>

		uint8_t message_sn[64] = { 0, };
 8003b84:	4ba4      	ldr	r3, [pc, #656]	@ (8003e18 <StartDebugTask+0x2e0>)
 8003b86:	228c      	movs	r2, #140	@ 0x8c
 8003b88:	0052      	lsls	r2, r2, #1
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	2228      	movs	r2, #40	@ 0x28
 8003b8e:	4694      	mov	ip, r2
 8003b90:	44bc      	add	ip, r7
 8003b92:	4463      	add	r3, ip
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	223c      	movs	r2, #60	@ 0x3c
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f00f f97a 	bl	8012e98 <memset>
		memset(message_sn, 0, sizeof(message_sn));
 8003ba4:	2408      	movs	r4, #8
 8003ba6:	2528      	movs	r5, #40	@ 0x28
 8003ba8:	1963      	adds	r3, r4, r5
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	2240      	movs	r2, #64	@ 0x40
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f00f f971 	bl	8012e98 <memset>

		int size = snprintf((char *)message_sn, sizeof(message_sn), "SN: %05d \r\n", serial_number);
 8003bb6:	4b95      	ldr	r3, [pc, #596]	@ (8003e0c <StartDebugTask+0x2d4>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	4a98      	ldr	r2, [pc, #608]	@ (8003e1c <StartDebugTask+0x2e4>)
 8003bbc:	1961      	adds	r1, r4, r5
 8003bbe:	19c8      	adds	r0, r1, r7
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	f00f f891 	bl	8012ce8 <sniprintf>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	228a      	movs	r2, #138	@ 0x8a
 8003bca:	0052      	lsls	r2, r2, #1
 8003bcc:	1951      	adds	r1, r2, r5
 8003bce:	19c9      	adds	r1, r1, r7
 8003bd0:	600b      	str	r3, [r1, #0]

		if (size > 0) {
 8003bd2:	0029      	movs	r1, r5
 8003bd4:	1853      	adds	r3, r2, r1
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd0a      	ble.n	8003bf4 <StartDebugTask+0xbc>
			HAL_UART_Transmit(debug_uart, message_sn, size, 100);
 8003bde:	4b90      	ldr	r3, [pc, #576]	@ (8003e20 <StartDebugTask+0x2e8>)
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	1853      	adds	r3, r2, r1
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	1863      	adds	r3, r4, r1
 8003bec:	19d9      	adds	r1, r3, r7
 8003bee:	2364      	movs	r3, #100	@ 0x64
 8003bf0:	f008 fccc 	bl	800c58c <HAL_UART_Transmit>
		}

	}

	vTaskDelay(100);
 8003bf4:	2064      	movs	r0, #100	@ 0x64
 8003bf6:	f00c fa57 	bl	80100a8 <vTaskDelay>

	for (;;) {

		send_debug_messages();
 8003bfa:	f002 f817 	bl	8005c2c <send_debug_messages>

		if (!debug_enabled()) {
 8003bfe:	f001 ff6b 	bl	8005ad8 <debug_enabled>
 8003c02:	1e03      	subs	r3, r0, #0
 8003c04:	d000      	beq.n	8003c08 <StartDebugTask+0xd0>
 8003c06:	e0f4      	b.n	8003df2 <StartDebugTask+0x2ba>

			float max_acceleration = fmax(
					round_and_limit_float(get_max_positive_acceleration()),
 8003c08:	f001 feb8 	bl	800597c <get_max_positive_acceleration>
 8003c0c:	1c03      	adds	r3, r0, #0
 8003c0e:	1c18      	adds	r0, r3, #0
 8003c10:	f001 fedc 	bl	80059cc <round_and_limit_float>
 8003c14:	1c03      	adds	r3, r0, #0
			float max_acceleration = fmax(
 8003c16:	1c18      	adds	r0, r3, #0
 8003c18:	f7ff fbc4 	bl	80033a4 <__aeabi_f2d>
 8003c1c:	0004      	movs	r4, r0
 8003c1e:	000d      	movs	r5, r1
					round_and_limit_float(get_max_negative_acceleration()));
 8003c20:	f001 feb6 	bl	8005990 <get_max_negative_acceleration>
 8003c24:	1c03      	adds	r3, r0, #0
 8003c26:	1c18      	adds	r0, r3, #0
 8003c28:	f001 fed0 	bl	80059cc <round_and_limit_float>
 8003c2c:	1c03      	adds	r3, r0, #0
			float max_acceleration = fmax(
 8003c2e:	1c18      	adds	r0, r3, #0
 8003c30:	f7ff fbb8 	bl	80033a4 <__aeabi_f2d>
 8003c34:	0002      	movs	r2, r0
 8003c36:	000b      	movs	r3, r1
 8003c38:	0020      	movs	r0, r4
 8003c3a:	0029      	movs	r1, r5
 8003c3c:	f00d fec7 	bl	80119ce <fmax>
 8003c40:	0002      	movs	r2, r0
 8003c42:	000b      	movs	r3, r1
 8003c44:	0010      	movs	r0, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	f7ff fbf4 	bl	8003434 <__aeabi_d2f>
 8003c4c:	1c03      	adds	r3, r0, #0
 8003c4e:	2686      	movs	r6, #134	@ 0x86
 8003c50:	0076      	lsls	r6, r6, #1
 8003c52:	2428      	movs	r4, #40	@ 0x28
 8003c54:	1932      	adds	r2, r6, r4
 8003c56:	19d2      	adds	r2, r2, r7
 8003c58:	6013      	str	r3, [r2, #0]

			float maximum_move = fmax(
					round_and_limit_float(get_max_positive_move()),
 8003c5a:	f001 fea3 	bl	80059a4 <get_max_positive_move>
 8003c5e:	1c03      	adds	r3, r0, #0
 8003c60:	1c18      	adds	r0, r3, #0
 8003c62:	f001 feb3 	bl	80059cc <round_and_limit_float>
 8003c66:	1c03      	adds	r3, r0, #0
			float maximum_move = fmax(
 8003c68:	1c18      	adds	r0, r3, #0
 8003c6a:	f7ff fb9b 	bl	80033a4 <__aeabi_f2d>
 8003c6e:	0004      	movs	r4, r0
 8003c70:	000d      	movs	r5, r1
					round_and_limit_float(get_max_negative_move()));
 8003c72:	f001 fea1 	bl	80059b8 <get_max_negative_move>
 8003c76:	1c03      	adds	r3, r0, #0
 8003c78:	1c18      	adds	r0, r3, #0
 8003c7a:	f001 fea7 	bl	80059cc <round_and_limit_float>
 8003c7e:	1c03      	adds	r3, r0, #0
			float maximum_move = fmax(
 8003c80:	1c18      	adds	r0, r3, #0
 8003c82:	f7ff fb8f 	bl	80033a4 <__aeabi_f2d>
 8003c86:	0002      	movs	r2, r0
 8003c88:	000b      	movs	r3, r1
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	0029      	movs	r1, r5
 8003c8e:	f00d fe9e 	bl	80119ce <fmax>
 8003c92:	0002      	movs	r2, r0
 8003c94:	000b      	movs	r3, r1
 8003c96:	0010      	movs	r0, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	f7ff fbcb 	bl	8003434 <__aeabi_d2f>
 8003c9e:	1c03      	adds	r3, r0, #0
 8003ca0:	2584      	movs	r5, #132	@ 0x84
 8003ca2:	006d      	lsls	r5, r5, #1
 8003ca4:	2428      	movs	r4, #40	@ 0x28
 8003ca6:	192a      	adds	r2, r5, r4
 8003ca8:	19d2      	adds	r2, r2, r7
 8003caa:	6013      	str	r3, [r2, #0]

			uint8_t message[256] = { 0, };
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <StartDebugTask+0x2e0>)
 8003cae:	228c      	movs	r2, #140	@ 0x8c
 8003cb0:	0052      	lsls	r2, r2, #1
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	2228      	movs	r2, #40	@ 0x28
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	44bc      	add	ip, r7
 8003cba:	4463      	add	r3, ip
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	22fc      	movs	r2, #252	@ 0xfc
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f00f f8e6 	bl	8012e98 <memset>
			memset(message, 0, sizeof(message));
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	005a      	lsls	r2, r3, #1
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	191b      	adds	r3, r3, r4
 8003cd4:	19db      	adds	r3, r3, r7
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f00f f8dd 	bl	8012e98 <memset>

			int size = snprintf((char *)message, sizeof(message),
				"ACCEL: 0x%08X, LENGTH: 0x%08X, MAX_ACCEL: 0x%08X, MAX_LENGTH: 0x%08X, PRESSURE: %.2f HUMIDITY: %d, TEMP %.2f\r\n\nACCEL: %06.2f,     LENGTH: %06.2f,     MAX_ACCEL: %06.2f,     MAX_LENGTH: %06.2f\r\n\n",
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003cde:	0034      	movs	r4, r6
 8003ce0:	2628      	movs	r6, #40	@ 0x28
 8003ce2:	19a3      	adds	r3, r4, r6
 8003ce4:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4693      	mov	fp, r2
				*(uint32_t*)&max_acceleration, *(uint32_t*)&maximum_move,
 8003cea:	19ab      	adds	r3, r5, r6
 8003cec:	19db      	adds	r3, r3, r7
			int size = snprintf((char *)message, sizeof(message),
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4690      	mov	r8, r2
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8003e24 <StartDebugTask+0x2ec>)
			int size = snprintf((char *)message, sizeof(message),
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4691      	mov	r9, r2
				*(uint32_t*)&max_acceleration_in_period, *(uint32_t*)&maximum_move_in_period,
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <StartDebugTask+0x2f0>)
			int size = snprintf((char *)message, sizeof(message),
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4692      	mov	sl, r2
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <StartDebugTask+0x2f4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	1c18      	adds	r0, r3, #0
 8003d04:	f7ff fb4e 	bl	80033a4 <__aeabi_f2d>
			int size = snprintf((char *)message, sizeof(message),
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4b49      	ldr	r3, [pc, #292]	@ (8003e30 <StartDebugTask+0x2f8>)
 8003d0c:	f7fd fff2 	bl	8001cf4 <__aeabi_ddiv>
 8003d10:	0002      	movs	r2, r0
 8003d12:	000b      	movs	r3, r1
 8003d14:	623a      	str	r2, [r7, #32]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
				(LPS_data.last_pressure / 1024.0), HDC_config.last_humidity,
 8003d18:	4b46      	ldr	r3, [pc, #280]	@ (8003e34 <StartDebugTask+0x2fc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
			int size = snprintf((char *)message, sizeof(message),
 8003d1c:	1c18      	adds	r0, r3, #0
 8003d1e:	f7ff fb41 	bl	80033a4 <__aeabi_f2d>
 8003d22:	61b8      	str	r0, [r7, #24]
 8003d24:	61f9      	str	r1, [r7, #28]
				HDC_config.last_temperature,
 8003d26:	4b43      	ldr	r3, [pc, #268]	@ (8003e34 <StartDebugTask+0x2fc>)
 8003d28:	685b      	ldr	r3, [r3, #4]
			int size = snprintf((char *)message, sizeof(message),
 8003d2a:	1c18      	adds	r0, r3, #0
 8003d2c:	f7ff fb3a 	bl	80033a4 <__aeabi_f2d>
 8003d30:	6138      	str	r0, [r7, #16]
 8003d32:	6179      	str	r1, [r7, #20]
 8003d34:	19a3      	adds	r3, r4, r6
 8003d36:	19d9      	adds	r1, r3, r7
 8003d38:	680b      	ldr	r3, [r1, #0]
 8003d3a:	1c18      	adds	r0, r3, #0
 8003d3c:	f7ff fb32 	bl	80033a4 <__aeabi_f2d>
 8003d40:	60b8      	str	r0, [r7, #8]
 8003d42:	60f9      	str	r1, [r7, #12]
 8003d44:	19aa      	adds	r2, r5, r6
 8003d46:	19d1      	adds	r1, r2, r7
 8003d48:	680b      	ldr	r3, [r1, #0]
 8003d4a:	1c18      	adds	r0, r3, #0
 8003d4c:	f7ff fb2a 	bl	80033a4 <__aeabi_f2d>
 8003d50:	6038      	str	r0, [r7, #0]
 8003d52:	6079      	str	r1, [r7, #4]
 8003d54:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <StartDebugTask+0x2ec>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	1c18      	adds	r0, r3, #0
 8003d5a:	f7ff fb23 	bl	80033a4 <__aeabi_f2d>
 8003d5e:	0004      	movs	r4, r0
 8003d60:	000d      	movs	r5, r1
 8003d62:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <StartDebugTask+0x2f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	1c18      	adds	r0, r3, #0
 8003d68:	f7ff fb1c 	bl	80033a4 <__aeabi_f2d>
 8003d6c:	4a32      	ldr	r2, [pc, #200]	@ (8003e38 <StartDebugTask+0x300>)
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	005e      	lsls	r6, r3, #1
 8003d72:	46b4      	mov	ip, r6
 8003d74:	2608      	movs	r6, #8
 8003d76:	2328      	movs	r3, #40	@ 0x28
 8003d78:	18f6      	adds	r6, r6, r3
 8003d7a:	19f6      	adds	r6, r6, r7
 8003d7c:	9010      	str	r0, [sp, #64]	@ 0x40
 8003d7e:	9111      	str	r1, [sp, #68]	@ 0x44
 8003d80:	940e      	str	r4, [sp, #56]	@ 0x38
 8003d82:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687c      	ldr	r4, [r7, #4]
 8003d88:	930c      	str	r3, [sp, #48]	@ 0x30
 8003d8a:	940d      	str	r4, [sp, #52]	@ 0x34
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	68fc      	ldr	r4, [r7, #12]
 8003d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	697c      	ldr	r4, [r7, #20]
 8003d98:	9308      	str	r3, [sp, #32]
 8003d9a:	9409      	str	r4, [sp, #36]	@ 0x24
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	69fc      	ldr	r4, [r7, #28]
 8003da0:	9306      	str	r3, [sp, #24]
 8003da2:	9407      	str	r4, [sp, #28]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003da8:	9304      	str	r3, [sp, #16]
 8003daa:	9405      	str	r4, [sp, #20]
 8003dac:	4651      	mov	r1, sl
 8003dae:	9102      	str	r1, [sp, #8]
 8003db0:	4649      	mov	r1, r9
 8003db2:	9101      	str	r1, [sp, #4]
 8003db4:	4641      	mov	r1, r8
 8003db6:	9100      	str	r1, [sp, #0]
 8003db8:	465b      	mov	r3, fp
 8003dba:	4661      	mov	r1, ip
 8003dbc:	0030      	movs	r0, r6
 8003dbe:	f00e ff93 	bl	8012ce8 <sniprintf>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	2288      	movs	r2, #136	@ 0x88
 8003dc6:	0052      	lsls	r2, r2, #1
 8003dc8:	2428      	movs	r4, #40	@ 0x28
 8003dca:	1911      	adds	r1, r2, r4
 8003dcc:	19c9      	adds	r1, r1, r7
 8003dce:	600b      	str	r3, [r1, #0]
				max_acceleration, maximum_move,
				max_acceleration_in_period, maximum_move_in_period);

			if (size > 0) {
 8003dd0:	1913      	adds	r3, r2, r4
 8003dd2:	19d9      	adds	r1, r3, r7
 8003dd4:	680b      	ldr	r3, [r1, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dd0b      	ble.n	8003df2 <StartDebugTask+0x2ba>
				HAL_UART_Transmit(debug_uart, message, size, 100);
 8003dda:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <StartDebugTask+0x2e8>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	1913      	adds	r3, r2, r4
 8003de0:	19da      	adds	r2, r3, r7
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	2608      	movs	r6, #8
 8003de8:	1933      	adds	r3, r6, r4
 8003dea:	19d9      	adds	r1, r3, r7
 8003dec:	2364      	movs	r3, #100	@ 0x64
 8003dee:	f008 fbcd 	bl	800c58c <HAL_UART_Transmit>
			}

		}

		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8003df2:	4b12      	ldr	r3, [pc, #72]	@ (8003e3c <StartDebugTask+0x304>)
 8003df4:	2108      	movs	r1, #8
 8003df6:	0018      	movs	r0, r3
 8003df8:	f004 fcae 	bl	8008758 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	f00c f953 	bl	80100a8 <vTaskDelay>
		send_debug_messages();
 8003e02:	e6fa      	b.n	8003bfa <StartDebugTask+0xc2>
 8003e04:	200003d0 	.word	0x200003d0
 8003e08:	000927c0 	.word	0x000927c0
 8003e0c:	200003ac 	.word	0x200003ac
 8003e10:	08016930 	.word	0x08016930
 8003e14:	08016940 	.word	0x08016940
 8003e18:	fffffef0 	.word	0xfffffef0
 8003e1c:	08016964 	.word	0x08016964
 8003e20:	2000006c 	.word	0x2000006c
 8003e24:	200003b8 	.word	0x200003b8
 8003e28:	200003b4 	.word	0x200003b4
 8003e2c:	2000038c 	.word	0x2000038c
 8003e30:	40900000 	.word	0x40900000
 8003e34:	20000394 	.word	0x20000394
 8003e38:	08016970 	.word	0x08016970
 8003e3c:	50000c00 	.word	0x50000c00

08003e40 <StartTaskRxCommands>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRxCommands */
void StartTaskRxCommands(void *argument)
{
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	46de      	mov	lr, fp
 8003e44:	4657      	mov	r7, sl
 8003e46:	464e      	mov	r6, r9
 8003e48:	4645      	mov	r5, r8
 8003e4a:	b5e0      	push	{r5, r6, r7, lr}
 8003e4c:	b0c1      	sub	sp, #260	@ 0x104
 8003e4e:	af14      	add	r7, sp, #80	@ 0x50
 8003e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN StartTaskRxCommands */
	/* Infinite loop */
	uint32_t ulNotifiedValue;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 500 );
 8003e52:	23fa      	movs	r3, #250	@ 0xfa
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	22a0      	movs	r2, #160	@ 0xa0
 8003e58:	18ba      	adds	r2, r7, r2
 8003e5a:	6013      	str	r3, [r2, #0]
	memset(received_command, 0x0, sizeof(received_command));
 8003e5c:	4bf7      	ldr	r3, [pc, #988]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8003e5e:	2216      	movs	r2, #22
 8003e60:	2100      	movs	r1, #0
 8003e62:	0018      	movs	r0, r3
 8003e64:	f00f f818 	bl	8012e98 <memset>
	memset(transmitting_command, 0x0, sizeof(transmitting_command));
 8003e68:	4bf5      	ldr	r3, [pc, #980]	@ (8004240 <StartTaskRxCommands+0x400>)
 8003e6a:	2216      	movs	r2, #22
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f00f f812 	bl	8012e98 <memset>

	//receive(terminal_uart, received_command, 1);
	  receive(terminal_uart, RX_command_buff, 1);
 8003e74:	4bf3      	ldr	r3, [pc, #972]	@ (8004244 <StartTaskRxCommands+0x404>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	49f3      	ldr	r1, [pc, #972]	@ (8004248 <StartTaskRxCommands+0x408>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f001 feae 	bl	8005bde <receive>
	for (;;) {

		    ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );
 8003e82:	23a0      	movs	r3, #160	@ 0xa0
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0019      	movs	r1, r3
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f00c fda0 	bl	80109d0 <ulTaskNotifyTake>
 8003e90:	0003      	movs	r3, r0
 8003e92:	229c      	movs	r2, #156	@ 0x9c
 8003e94:	18b9      	adds	r1, r7, r2
 8003e96:	600b      	str	r3, [r1, #0]

		    if( ulNotifiedValue == 0 )
 8003e98:	18bb      	adds	r3, r7, r2
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <StartTaskRxCommands+0x64>
 8003ea0:	f000 fcec 	bl	800487c <StartTaskRxCommands+0xa3c>
			{
		    	continue;
			}

			HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_SET);
 8003ea4:	4be9      	ldr	r3, [pc, #932]	@ (800424c <StartTaskRxCommands+0x40c>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2108      	movs	r1, #8
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f004 fc37 	bl	800871e <HAL_GPIO_WritePin>

			debug("Received <<%s>>\r\n", received_command);
 8003eb0:	4ae2      	ldr	r2, [pc, #904]	@ (800423c <StartTaskRxCommands+0x3fc>)
 8003eb2:	4be7      	ldr	r3, [pc, #924]	@ (8004250 <StartTaskRxCommands+0x410>)
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f001 fe14 	bl	8005ae4 <debug>

			if (terminal_parser_state == PARSER_S4x) { // если посылка S4x;
 8003ebc:	4be5      	ldr	r3, [pc, #916]	@ (8004254 <StartTaskRxCommands+0x414>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d000      	beq.n	8003ec6 <StartTaskRxCommands+0x86>
 8003ec4:	e13d      	b.n	8004142 <StartTaskRxCommands+0x302>

				float maximum = fmax(
						round_and_limit_float(get_max_positive_move()),
 8003ec6:	f001 fd6d 	bl	80059a4 <get_max_positive_move>
 8003eca:	1c03      	adds	r3, r0, #0
 8003ecc:	1c18      	adds	r0, r3, #0
 8003ece:	f001 fd7d 	bl	80059cc <round_and_limit_float>
 8003ed2:	1c03      	adds	r3, r0, #0
				float maximum = fmax(
 8003ed4:	1c18      	adds	r0, r3, #0
 8003ed6:	f7ff fa65 	bl	80033a4 <__aeabi_f2d>
 8003eda:	0004      	movs	r4, r0
 8003edc:	000d      	movs	r5, r1
						round_and_limit_float(get_max_negative_move()));
 8003ede:	f001 fd6b 	bl	80059b8 <get_max_negative_move>
 8003ee2:	1c03      	adds	r3, r0, #0
 8003ee4:	1c18      	adds	r0, r3, #0
 8003ee6:	f001 fd71 	bl	80059cc <round_and_limit_float>
 8003eea:	1c03      	adds	r3, r0, #0
				float maximum = fmax(
 8003eec:	1c18      	adds	r0, r3, #0
 8003eee:	f7ff fa59 	bl	80033a4 <__aeabi_f2d>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	000b      	movs	r3, r1
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	0029      	movs	r1, r5
 8003efa:	f00d fd68 	bl	80119ce <fmax>
 8003efe:	0002      	movs	r2, r0
 8003f00:	000b      	movs	r3, r1
 8003f02:	0010      	movs	r0, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	f7ff fa95 	bl	8003434 <__aeabi_d2f>
 8003f0a:	1c03      	adds	r3, r0, #0
 8003f0c:	2284      	movs	r2, #132	@ 0x84
 8003f0e:	18ba      	adds	r2, r7, r2
 8003f10:	6013      	str	r3, [r2, #0]

				float max_acceleration = fmax(
						round_and_limit_float(get_max_positive_acceleration()),
 8003f12:	f001 fd33 	bl	800597c <get_max_positive_acceleration>
 8003f16:	1c03      	adds	r3, r0, #0
 8003f18:	1c18      	adds	r0, r3, #0
 8003f1a:	f001 fd57 	bl	80059cc <round_and_limit_float>
 8003f1e:	1c03      	adds	r3, r0, #0
				float max_acceleration = fmax(
 8003f20:	1c18      	adds	r0, r3, #0
 8003f22:	f7ff fa3f 	bl	80033a4 <__aeabi_f2d>
 8003f26:	0004      	movs	r4, r0
 8003f28:	000d      	movs	r5, r1
						round_and_limit_float(get_max_negative_acceleration()));
 8003f2a:	f001 fd31 	bl	8005990 <get_max_negative_acceleration>
 8003f2e:	1c03      	adds	r3, r0, #0
 8003f30:	1c18      	adds	r0, r3, #0
 8003f32:	f001 fd4b 	bl	80059cc <round_and_limit_float>
 8003f36:	1c03      	adds	r3, r0, #0
				float max_acceleration = fmax(
 8003f38:	1c18      	adds	r0, r3, #0
 8003f3a:	f7ff fa33 	bl	80033a4 <__aeabi_f2d>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	000b      	movs	r3, r1
 8003f42:	0020      	movs	r0, r4
 8003f44:	0029      	movs	r1, r5
 8003f46:	f00d fd42 	bl	80119ce <fmax>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	000b      	movs	r3, r1
 8003f4e:	0010      	movs	r0, r2
 8003f50:	0019      	movs	r1, r3
 8003f52:	f7ff fa6f 	bl	8003434 <__aeabi_d2f>
 8003f56:	1c03      	adds	r3, r0, #0
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	18ba      	adds	r2, r7, r2
 8003f5c:	6013      	str	r3, [r2, #0]

				uint8_t flags = 0;
 8003f5e:	2073      	movs	r0, #115	@ 0x73
 8003f60:	2428      	movs	r4, #40	@ 0x28
 8003f62:	1903      	adds	r3, r0, r4
 8003f64:	19db      	adds	r3, r3, r7
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8003f6a:	4bbb      	ldr	r3, [pc, #748]	@ (8004258 <StartTaskRxCommands+0x418>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0019      	movs	r1, r3
 8003f70:	1903      	adds	r3, r0, r4
 8003f72:	19db      	adds	r3, r3, r7
 8003f74:	1902      	adds	r2, r0, r4
 8003f76:	19d2      	adds	r2, r2, r7
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 8003f7e:	4bb7      	ldr	r3, [pc, #732]	@ (800425c <StartTaskRxCommands+0x41c>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	b25a      	sxtb	r2, r3
 8003f86:	1903      	adds	r3, r0, r4
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b25a      	sxtb	r2, r3
 8003f92:	1903      	adds	r3, r0, r4
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8003f98:	4bb0      	ldr	r3, [pc, #704]	@ (800425c <StartTaskRxCommands+0x41c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <StartTaskRxCommands+0x166>
 8003fa0:	4bae      	ldr	r3, [pc, #696]	@ (800425c <StartTaskRxCommands+0x41c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]

					transmitting_command[0] = HDC_config.last_temperature;
 8003fa6:	4bae      	ldr	r3, [pc, #696]	@ (8004260 <StartTaskRxCommands+0x420>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	1c18      	adds	r0, r3, #0
 8003fac:	f7fc fad6 	bl	800055c <__aeabi_f2uiz>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4ba2      	ldr	r3, [pc, #648]	@ (8004240 <StartTaskRxCommands+0x400>)
 8003fb6:	701a      	strb	r2, [r3, #0]
					transmitting_command[1] = HDC_config.last_humidity;
 8003fb8:	4ba9      	ldr	r3, [pc, #676]	@ (8004260 <StartTaskRxCommands+0x420>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	1c18      	adds	r0, r3, #0
 8003fbe:	f7fc facd 	bl	800055c <__aeabi_f2uiz>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4b9e      	ldr	r3, [pc, #632]	@ (8004240 <StartTaskRxCommands+0x400>)
 8003fc8:	705a      	strb	r2, [r3, #1]
					transmitting_command[2] = flags;
 8003fca:	4b9d      	ldr	r3, [pc, #628]	@ (8004240 <StartTaskRxCommands+0x400>)
 8003fcc:	2273      	movs	r2, #115	@ 0x73
 8003fce:	2128      	movs	r1, #40	@ 0x28
 8003fd0:	1852      	adds	r2, r2, r1
 8003fd2:	19d2      	adds	r2, r2, r7
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	709a      	strb	r2, [r3, #2]
					transmitting_command[3] = (((LPS_data.last_pressure / 1000) - 0.5) / 1.5 * 100);
 8003fd8:	4ba2      	ldr	r3, [pc, #648]	@ (8004264 <StartTaskRxCommands+0x424>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	49a2      	ldr	r1, [pc, #648]	@ (8004268 <StartTaskRxCommands+0x428>)
 8003fde:	1c18      	adds	r0, r3, #0
 8003fe0:	f7fc fd98 	bl	8000b14 <__aeabi_fdiv>
 8003fe4:	1c03      	adds	r3, r0, #0
 8003fe6:	1c18      	adds	r0, r3, #0
 8003fe8:	f7ff f9dc 	bl	80033a4 <__aeabi_f2d>
 8003fec:	2200      	movs	r2, #0
 8003fee:	4b9f      	ldr	r3, [pc, #636]	@ (800426c <StartTaskRxCommands+0x42c>)
 8003ff0:	f7fe fd8c 	bl	8002b0c <__aeabi_dsub>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	000b      	movs	r3, r1
 8003ff8:	0010      	movs	r0, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8004270 <StartTaskRxCommands+0x430>)
 8004000:	f7fd fe78 	bl	8001cf4 <__aeabi_ddiv>
 8004004:	0002      	movs	r2, r0
 8004006:	000b      	movs	r3, r1
 8004008:	0010      	movs	r0, r2
 800400a:	0019      	movs	r1, r3
 800400c:	2200      	movs	r2, #0
 800400e:	4b99      	ldr	r3, [pc, #612]	@ (8004274 <StartTaskRxCommands+0x434>)
 8004010:	f7fe fab4 	bl	800257c <__aeabi_dmul>
 8004014:	0002      	movs	r2, r0
 8004016:	000b      	movs	r3, r1
 8004018:	0010      	movs	r0, r2
 800401a:	0019      	movs	r1, r3
 800401c:	f7fc fab6 	bl	800058c <__aeabi_d2uiz>
 8004020:	0003      	movs	r3, r0
 8004022:	b2da      	uxtb	r2, r3
 8004024:	4b86      	ldr	r3, [pc, #536]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004026:	70da      	strb	r2, [r3, #3]

					memcpy(&transmitting_command[4], &maximum, 4);
 8004028:	2384      	movs	r3, #132	@ 0x84
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b84      	ldr	r3, [pc, #528]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004030:	605a      	str	r2, [r3, #4]
					memcpy(&transmitting_command[8], &max_acceleration, 4);
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b81      	ldr	r3, [pc, #516]	@ (8004240 <StartTaskRxCommands+0x400>)
 800403a:	609a      	str	r2, [r3, #8]
					memcpy(&transmitting_command[12], &maximum_move_in_period, 4);
 800403c:	4b8e      	ldr	r3, [pc, #568]	@ (8004278 <StartTaskRxCommands+0x438>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b7f      	ldr	r3, [pc, #508]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004042:	60da      	str	r2, [r3, #12]
					memcpy(&transmitting_command[16], &max_acceleration_in_period, 4);
 8004044:	4b8d      	ldr	r3, [pc, #564]	@ (800427c <StartTaskRxCommands+0x43c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b7d      	ldr	r3, [pc, #500]	@ (8004240 <StartTaskRxCommands+0x400>)
 800404a:	611a      	str	r2, [r3, #16]
					memcpy(&transmitting_command[20], &serial_number_control, 2);
 800404c:	4b8c      	ldr	r3, [pc, #560]	@ (8004280 <StartTaskRxCommands+0x440>)
 800404e:	881a      	ldrh	r2, [r3, #0]
 8004050:	4b7b      	ldr	r3, [pc, #492]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004052:	829a      	strh	r2, [r3, #20]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004054:	4b7d      	ldr	r3, [pc, #500]	@ (800424c <StartTaskRxCommands+0x40c>)
 8004056:	2201      	movs	r2, #1
 8004058:	2110      	movs	r1, #16
 800405a:	0018      	movs	r0, r3
 800405c:	f004 fb5f 	bl	800871e <HAL_GPIO_WritePin>

					HAL_UART_Transmit_IT(terminal_uart, transmitting_command, 22);
 8004060:	4b78      	ldr	r3, [pc, #480]	@ (8004244 <StartTaskRxCommands+0x404>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4976      	ldr	r1, [pc, #472]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004066:	2216      	movs	r2, #22
 8004068:	0018      	movs	r0, r3
 800406a:	f008 fb33 	bl	800c6d4 <HAL_UART_Transmit_IT>

					//memset(transmitting_command, 0, sizeof(transmitting_command));
					terminal_parser_state =	PARSER_EMPT;
 800406e:	4b79      	ldr	r3, [pc, #484]	@ (8004254 <StartTaskRxCommands+0x414>)
 8004070:	2209      	movs	r2, #9
 8004072:	701a      	strb	r2, [r3, #0]

					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
							transmitting_command[0], transmitting_command[1],
 8004074:	4b72      	ldr	r3, [pc, #456]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004076:	781b      	ldrb	r3, [r3, #0]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
							transmitting_command[0], transmitting_command[1],
 800407a:	4b71      	ldr	r3, [pc, #452]	@ (8004240 <StartTaskRxCommands+0x400>)
 800407c:	785b      	ldrb	r3, [r3, #1]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
							transmitting_command[2], transmitting_command[3],
 8004080:	4b6f      	ldr	r3, [pc, #444]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004082:	789b      	ldrb	r3, [r3, #2]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004084:	623b      	str	r3, [r7, #32]
							transmitting_command[2], transmitting_command[3],
 8004086:	4b6e      	ldr	r3, [pc, #440]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004088:	78db      	ldrb	r3, [r3, #3]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800408a:	469b      	mov	fp, r3
							transmitting_command[4], transmitting_command[5],
 800408c:	4b6c      	ldr	r3, [pc, #432]	@ (8004240 <StartTaskRxCommands+0x400>)
 800408e:	791b      	ldrb	r3, [r3, #4]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004090:	61fb      	str	r3, [r7, #28]
							transmitting_command[4], transmitting_command[5],
 8004092:	4b6b      	ldr	r3, [pc, #428]	@ (8004240 <StartTaskRxCommands+0x400>)
 8004094:	795b      	ldrb	r3, [r3, #5]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 8004096:	61bb      	str	r3, [r7, #24]
							transmitting_command[6], transmitting_command[7],
 8004098:	4b69      	ldr	r3, [pc, #420]	@ (8004240 <StartTaskRxCommands+0x400>)
 800409a:	799b      	ldrb	r3, [r3, #6]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 800409c:	617b      	str	r3, [r7, #20]
							transmitting_command[6], transmitting_command[7],
 800409e:	4b68      	ldr	r3, [pc, #416]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040a0:	79db      	ldrb	r3, [r3, #7]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040a2:	613b      	str	r3, [r7, #16]
							transmitting_command[8], transmitting_command[9],
 80040a4:	4b66      	ldr	r3, [pc, #408]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040a6:	7a1b      	ldrb	r3, [r3, #8]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040a8:	60fb      	str	r3, [r7, #12]
							transmitting_command[8], transmitting_command[9],
 80040aa:	4b65      	ldr	r3, [pc, #404]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040ac:	7a5b      	ldrb	r3, [r3, #9]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ae:	60bb      	str	r3, [r7, #8]
							transmitting_command[10], transmitting_command[11],
 80040b0:	4b63      	ldr	r3, [pc, #396]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040b2:	7a9b      	ldrb	r3, [r3, #10]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040b4:	607b      	str	r3, [r7, #4]
							transmitting_command[10], transmitting_command[11],
 80040b6:	4b62      	ldr	r3, [pc, #392]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040b8:	7adb      	ldrb	r3, [r3, #11]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ba:	603b      	str	r3, [r7, #0]
							transmitting_command[12], transmitting_command[13],
 80040bc:	4b60      	ldr	r3, [pc, #384]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040be:	7b1b      	ldrb	r3, [r3, #12]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040c0:	469a      	mov	sl, r3
							transmitting_command[12], transmitting_command[13],
 80040c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040c4:	7b5b      	ldrb	r3, [r3, #13]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040c6:	4699      	mov	r9, r3
							transmitting_command[14], transmitting_command[15],
 80040c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040ca:	7b9b      	ldrb	r3, [r3, #14]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040cc:	4698      	mov	r8, r3
							transmitting_command[14], transmitting_command[15],
 80040ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040d0:	7bdb      	ldrb	r3, [r3, #15]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040d2:	469c      	mov	ip, r3
							transmitting_command[16], transmitting_command[17],
 80040d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040d6:	7c1b      	ldrb	r3, [r3, #16]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040d8:	001e      	movs	r6, r3
							transmitting_command[16], transmitting_command[17],
 80040da:	4b59      	ldr	r3, [pc, #356]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040dc:	7c5b      	ldrb	r3, [r3, #17]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040de:	001d      	movs	r5, r3
							transmitting_command[18], transmitting_command[19],
 80040e0:	4b57      	ldr	r3, [pc, #348]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040e2:	7c9b      	ldrb	r3, [r3, #18]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040e4:	001c      	movs	r4, r3
							transmitting_command[18], transmitting_command[19],
 80040e6:	4b56      	ldr	r3, [pc, #344]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040e8:	7cdb      	ldrb	r3, [r3, #19]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040ea:	0019      	movs	r1, r3
							transmitting_command[20], transmitting_command[21]);
 80040ec:	4b54      	ldr	r3, [pc, #336]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040ee:	7d1b      	ldrb	r3, [r3, #20]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040f0:	001a      	movs	r2, r3
							transmitting_command[20], transmitting_command[21]);
 80040f2:	4b53      	ldr	r3, [pc, #332]	@ (8004240 <StartTaskRxCommands+0x400>)
 80040f4:	7d5b      	ldrb	r3, [r3, #21]
					debug("Transmit to terminal: <%02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x %02x %02x  %02x %02x>",
 80040f6:	4863      	ldr	r0, [pc, #396]	@ (8004284 <StartTaskRxCommands+0x444>)
 80040f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80040fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80040fc:	9110      	str	r1, [sp, #64]	@ 0x40
 80040fe:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004100:	950e      	str	r5, [sp, #56]	@ 0x38
 8004102:	960d      	str	r6, [sp, #52]	@ 0x34
 8004104:	4664      	mov	r4, ip
 8004106:	940c      	str	r4, [sp, #48]	@ 0x30
 8004108:	4644      	mov	r4, r8
 800410a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800410c:	464c      	mov	r4, r9
 800410e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004110:	4654      	mov	r4, sl
 8004112:	9409      	str	r4, [sp, #36]	@ 0x24
 8004114:	683c      	ldr	r4, [r7, #0]
 8004116:	9408      	str	r4, [sp, #32]
 8004118:	687c      	ldr	r4, [r7, #4]
 800411a:	9407      	str	r4, [sp, #28]
 800411c:	68bc      	ldr	r4, [r7, #8]
 800411e:	9406      	str	r4, [sp, #24]
 8004120:	68fc      	ldr	r4, [r7, #12]
 8004122:	9405      	str	r4, [sp, #20]
 8004124:	693c      	ldr	r4, [r7, #16]
 8004126:	9404      	str	r4, [sp, #16]
 8004128:	697c      	ldr	r4, [r7, #20]
 800412a:	9403      	str	r4, [sp, #12]
 800412c:	69bc      	ldr	r4, [r7, #24]
 800412e:	9402      	str	r4, [sp, #8]
 8004130:	69fc      	ldr	r4, [r7, #28]
 8004132:	9401      	str	r4, [sp, #4]
 8004134:	465c      	mov	r4, fp
 8004136:	9400      	str	r4, [sp, #0]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800413e:	f001 fcd1 	bl	8005ae4 <debug>

			}

			if (terminal_parser_state == PARSER_Sxx) { // если посылка S0x;
 8004142:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <StartTaskRxCommands+0x414>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d000      	beq.n	800414c <StartTaskRxCommands+0x30c>
 800414a:	e129      	b.n	80043a0 <StartTaskRxCommands+0x560>



						uint8_t flags = 0;
 800414c:	2072      	movs	r0, #114	@ 0x72
 800414e:	2428      	movs	r4, #40	@ 0x28
 8004150:	1903      	adds	r3, r0, r4
 8004152:	19db      	adds	r3, r3, r7
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
						flags |= (case_opened << 0);
 8004158:	4b3f      	ldr	r3, [pc, #252]	@ (8004258 <StartTaskRxCommands+0x418>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	0019      	movs	r1, r3
 800415e:	1903      	adds	r3, r0, r4
 8004160:	19db      	adds	r3, r3, r7
 8004162:	1902      	adds	r2, r0, r4
 8004164:	19d2      	adds	r2, r2, r7
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	701a      	strb	r2, [r3, #0]
						flags |= (is_error << 1);
 800416c:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <StartTaskRxCommands+0x41c>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	b25a      	sxtb	r2, r3
 8004174:	1903      	adds	r3, r0, r4
 8004176:	19db      	adds	r3, r3, r7
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	b25b      	sxtb	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b25a      	sxtb	r2, r3
 8004180:	1903      	adds	r3, r0, r4
 8004182:	19db      	adds	r3, r3, r7
 8004184:	701a      	strb	r2, [r3, #0]
						if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8004186:	4b35      	ldr	r3, [pc, #212]	@ (800425c <StartTaskRxCommands+0x41c>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <StartTaskRxCommands+0x354>
 800418e:	4b33      	ldr	r3, [pc, #204]	@ (800425c <StartTaskRxCommands+0x41c>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
						IDN=1;
 8004194:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <StartTaskRxCommands+0x448>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
						if (MSV0==1&&ADR==0) {	// Анализируем третий символ, отвечающий за конкретный БК
 800419a:	4b3c      	ldr	r3, [pc, #240]	@ (800428c <StartTaskRxCommands+0x44c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d149      	bne.n	8004236 <StartTaskRxCommands+0x3f6>
 80041a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004290 <StartTaskRxCommands+0x450>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d145      	bne.n	8004236 <StartTaskRxCommands+0x3f6>

							uint8_t buf[4] = {0,0,0,0};
 80041aa:	2154      	movs	r1, #84	@ 0x54
 80041ac:	2028      	movs	r0, #40	@ 0x28
 80041ae:	180b      	adds	r3, r1, r0
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
							//uint32_t val = (ads_val*100)/421 ;
							//uint32_t val = (8388607*100)/421 ;
							    //uint32_t val =  1401366;
							uint32_t val = (ads_val);
 80041b6:	4b37      	ldr	r3, [pc, #220]	@ (8004294 <StartTaskRxCommands+0x454>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2494      	movs	r4, #148	@ 0x94
 80041bc:	193a      	adds	r2, r7, r4
 80041be:	6013      	str	r3, [r2, #0]
									//	отправ	EE FF 0B 00
							//0x78730B00;
							    buf[3] = (val >> (2*8)) & 0xFF;
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	180b      	adds	r3, r1, r0
 80041ca:	19db      	adds	r3, r3, r7
 80041cc:	70da      	strb	r2, [r3, #3]
							    buf[2] = (val >> (1*8)) & 0xFF;
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	180b      	adds	r3, r1, r0
 80041d8:	19db      	adds	r3, r3, r7
 80041da:	709a      	strb	r2, [r3, #2]
							    buf[1] = (val >> (0*8)) & 0xFF;
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	000c      	movs	r4, r1
 80041e4:	0005      	movs	r5, r0
 80041e6:	1963      	adds	r3, r4, r5
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	705a      	strb	r2, [r3, #1]
							    buf[0] = buf[1]^buf[2]^buf[3];
 80041ec:	1963      	adds	r3, r4, r5
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	785a      	ldrb	r2, [r3, #1]
 80041f2:	1963      	adds	r3, r4, r5
 80041f4:	19db      	adds	r3, r3, r7
 80041f6:	789b      	ldrb	r3, [r3, #2]
 80041f8:	4053      	eors	r3, r2
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	1963      	adds	r3, r4, r5
 80041fe:	19db      	adds	r3, r3, r7
 8004200:	78db      	ldrb	r3, [r3, #3]
 8004202:	4053      	eors	r3, r2
 8004204:	b2da      	uxtb	r2, r3
 8004206:	1963      	adds	r3, r4, r5
 8004208:	19db      	adds	r3, r3, r7
 800420a:	701a      	strb	r2, [r3, #0]



							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800420c:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <StartTaskRxCommands+0x40c>)
 800420e:	2201      	movs	r2, #1
 8004210:	2110      	movs	r1, #16
 8004212:	0018      	movs	r0, r3
 8004214:	f004 fa83 	bl	800871e <HAL_GPIO_WritePin>

							HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <StartTaskRxCommands+0x404>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	1962      	adds	r2, r4, r5
 800421e:	19d1      	adds	r1, r2, r7
 8004220:	2204      	movs	r2, #4
 8004222:	0018      	movs	r0, r3
 8004224:	f008 fa56 	bl	800c6d4 <HAL_UART_Transmit_IT>
							debug("Transmit to terminal: <%x>",
 8004228:	1963      	adds	r3, r4, r5
 800422a:	19da      	adds	r2, r3, r7
 800422c:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <StartTaskRxCommands+0x458>)
 800422e:	0011      	movs	r1, r2
 8004230:	0018      	movs	r0, r3
 8004232:	f001 fc57 	bl	8005ae4 <debug>
									buf);
						}
						if (ADR==1&&MSV==0) {	// Анализируем третий символ, отвечающий за конкретный БК
 8004236:	4b16      	ldr	r3, [pc, #88]	@ (8004290 <StartTaskRxCommands+0x450>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	e02f      	b.n	800429c <StartTaskRxCommands+0x45c>
 800423c:	20000354 	.word	0x20000354
 8004240:	2000033c 	.word	0x2000033c
 8004244:	20000070 	.word	0x20000070
 8004248:	20000374 	.word	0x20000374
 800424c:	50000c00 	.word	0x50000c00
 8004250:	08016a34 	.word	0x08016a34
 8004254:	20000004 	.word	0x20000004
 8004258:	200003b1 	.word	0x200003b1
 800425c:	200003b0 	.word	0x200003b0
 8004260:	20000394 	.word	0x20000394
 8004264:	2000038c 	.word	0x2000038c
 8004268:	447a0000 	.word	0x447a0000
 800426c:	3fe00000 	.word	0x3fe00000
 8004270:	3ff80000 	.word	0x3ff80000
 8004274:	40590000 	.word	0x40590000
 8004278:	200003b4 	.word	0x200003b4
 800427c:	200003b8 	.word	0x200003b8
 8004280:	200003ae 	.word	0x200003ae
 8004284:	08016a48 	.word	0x08016a48
 8004288:	20000370 	.word	0x20000370
 800428c:	2000037c 	.word	0x2000037c
 8004290:	20000384 	.word	0x20000384
 8004294:	2000036c 	.word	0x2000036c
 8004298:	08016ad4 	.word	0x08016ad4
 800429c:	2b01      	cmp	r3, #1
 800429e:	d127      	bne.n	80042f0 <StartTaskRxCommands+0x4b0>
 80042a0:	4ba4      	ldr	r3, [pc, #656]	@ (8004534 <StartTaskRxCommands+0x6f4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d123      	bne.n	80042f0 <StartTaskRxCommands+0x4b0>
							 char str_adr[20];
							 sprintf(str_adr,"%c%c\r\n",sensor_inf.platform_adr[0],sensor_inf.platform_adr[1]);
 80042a8:	4ba3      	ldr	r3, [pc, #652]	@ (8004538 <StartTaskRxCommands+0x6f8>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	001a      	movs	r2, r3
 80042ae:	4ba2      	ldr	r3, [pc, #648]	@ (8004538 <StartTaskRxCommands+0x6f8>)
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	49a2      	ldr	r1, [pc, #648]	@ (800453c <StartTaskRxCommands+0x6fc>)
 80042b4:	2540      	movs	r5, #64	@ 0x40
 80042b6:	2628      	movs	r6, #40	@ 0x28
 80042b8:	19a8      	adds	r0, r5, r6
 80042ba:	19c0      	adds	r0, r0, r7
 80042bc:	f00e fd48 	bl	8012d50 <siprintf>

							 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80042c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004540 <StartTaskRxCommands+0x700>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	2110      	movs	r1, #16
 80042c6:	0018      	movs	r0, r3
 80042c8:	f004 fa29 	bl	800871e <HAL_GPIO_WritePin>
							 HAL_UART_Transmit_IT(terminal_uart, (uint8_t*)str_adr, strlen(str_adr));
 80042cc:	4b9d      	ldr	r3, [pc, #628]	@ (8004544 <StartTaskRxCommands+0x704>)
 80042ce:	681c      	ldr	r4, [r3, #0]
 80042d0:	19ab      	adds	r3, r5, r6
 80042d2:	19db      	adds	r3, r3, r7
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7fb ff17 	bl	8000108 <strlen>
 80042da:	0003      	movs	r3, r0
 80042dc:	b29a      	uxth	r2, r3
 80042de:	19ab      	adds	r3, r5, r6
 80042e0:	19db      	adds	r3, r3, r7
 80042e2:	0019      	movs	r1, r3
 80042e4:	0020      	movs	r0, r4
 80042e6:	f008 f9f5 	bl	800c6d4 <HAL_UART_Transmit_IT>

							 ADR=0;
 80042ea:	4b97      	ldr	r3, [pc, #604]	@ (8004548 <StartTaskRxCommands+0x708>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
						}
						if (MSV==1&&ADR==0&&MSV0==0) {	// Анализируем третий символ, отвечающий за конкретный БК
 80042f0:	4b90      	ldr	r3, [pc, #576]	@ (8004534 <StartTaskRxCommands+0x6f4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d150      	bne.n	800439a <StartTaskRxCommands+0x55a>
 80042f8:	4b93      	ldr	r3, [pc, #588]	@ (8004548 <StartTaskRxCommands+0x708>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d14c      	bne.n	800439a <StartTaskRxCommands+0x55a>
 8004300:	4b92      	ldr	r3, [pc, #584]	@ (800454c <StartTaskRxCommands+0x70c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d148      	bne.n	800439a <StartTaskRxCommands+0x55a>

						   uint8_t buf[4] = {0,0,0,0};
 8004308:	213c      	movs	r1, #60	@ 0x3c
 800430a:	2028      	movs	r0, #40	@ 0x28
 800430c:	180b      	adds	r3, r1, r0
 800430e:	19db      	adds	r3, r3, r7
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
													//uint32_t val = (ads_val*100)/421 ;
													//uint32_t val = (8388607*100)/421 ;
													    //uint32_t val =  1401366;
						   uint32_t val = (ads_val);
 8004314:	4b8e      	ldr	r3, [pc, #568]	@ (8004550 <StartTaskRxCommands+0x710>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2490      	movs	r4, #144	@ 0x90
 800431a:	193a      	adds	r2, r7, r4
 800431c:	6013      	str	r3, [r2, #0]
															//	отправ	EE FF 0B 00
													//0x78730B00;
						   buf[3] = (val >> (2*8)) & 0xFF;
 800431e:	193b      	adds	r3, r7, r4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b2da      	uxtb	r2, r3
 8004326:	180b      	adds	r3, r1, r0
 8004328:	19db      	adds	r3, r3, r7
 800432a:	70da      	strb	r2, [r3, #3]
						   buf[2] = (val >> (1*8)) & 0xFF;
 800432c:	193b      	adds	r3, r7, r4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	b2da      	uxtb	r2, r3
 8004334:	180b      	adds	r3, r1, r0
 8004336:	19db      	adds	r3, r3, r7
 8004338:	709a      	strb	r2, [r3, #2]
						   buf[1] = (val >> (0*8)) & 0xFF;
 800433a:	193b      	adds	r3, r7, r4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	000c      	movs	r4, r1
 8004342:	0005      	movs	r5, r0
 8004344:	1963      	adds	r3, r4, r5
 8004346:	19db      	adds	r3, r3, r7
 8004348:	705a      	strb	r2, [r3, #1]
						   buf[0] = buf[1]^buf[2]^buf[3];
 800434a:	1963      	adds	r3, r4, r5
 800434c:	19db      	adds	r3, r3, r7
 800434e:	785a      	ldrb	r2, [r3, #1]
 8004350:	1963      	adds	r3, r4, r5
 8004352:	19db      	adds	r3, r3, r7
 8004354:	789b      	ldrb	r3, [r3, #2]
 8004356:	4053      	eors	r3, r2
 8004358:	b2da      	uxtb	r2, r3
 800435a:	1963      	adds	r3, r4, r5
 800435c:	19db      	adds	r3, r3, r7
 800435e:	78db      	ldrb	r3, [r3, #3]
 8004360:	4053      	eors	r3, r2
 8004362:	b2da      	uxtb	r2, r3
 8004364:	1963      	adds	r3, r4, r5
 8004366:	19db      	adds	r3, r3, r7
 8004368:	701a      	strb	r2, [r3, #0]


						    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800436a:	4b75      	ldr	r3, [pc, #468]	@ (8004540 <StartTaskRxCommands+0x700>)
 800436c:	2201      	movs	r2, #1
 800436e:	2110      	movs	r1, #16
 8004370:	0018      	movs	r0, r3
 8004372:	f004 f9d4 	bl	800871e <HAL_GPIO_WritePin>
							HAL_UART_Transmit_IT(terminal_uart, buf, 4);
 8004376:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <StartTaskRxCommands+0x704>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1962      	adds	r2, r4, r5
 800437c:	19d1      	adds	r1, r2, r7
 800437e:	2204      	movs	r2, #4
 8004380:	0018      	movs	r0, r3
 8004382:	f008 f9a7 	bl	800c6d4 <HAL_UART_Transmit_IT>
							debug("Transmit to terminal: <%x>",
 8004386:	1963      	adds	r3, r4, r5
 8004388:	19da      	adds	r2, r3, r7
 800438a:	4b72      	ldr	r3, [pc, #456]	@ (8004554 <StartTaskRxCommands+0x714>)
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f001 fba8 	bl	8005ae4 <debug>
							buf);

							MSV=0;
 8004394:	4b67      	ldr	r3, [pc, #412]	@ (8004534 <StartTaskRxCommands+0x6f4>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
						}


							terminal_parser_state =	PARSER_EMPT;
 800439a:	4b6f      	ldr	r3, [pc, #444]	@ (8004558 <StartTaskRxCommands+0x718>)
 800439c:	2209      	movs	r2, #9
 800439e:	701a      	strb	r2, [r3, #0]
					}

			if (terminal_parser_state == PARSER_MSV70) { // если посылка Sxx;
 80043a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004558 <StartTaskRxCommands+0x718>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d12f      	bne.n	8004408 <StartTaskRxCommands+0x5c8>



									uint8_t flags = 0;
 80043a8:	2067      	movs	r0, #103	@ 0x67
 80043aa:	2428      	movs	r4, #40	@ 0x28
 80043ac:	1903      	adds	r3, r0, r4
 80043ae:	19db      	adds	r3, r3, r7
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
									flags |= (case_opened << 0);
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <StartTaskRxCommands+0x71c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	0019      	movs	r1, r3
 80043ba:	1903      	adds	r3, r0, r4
 80043bc:	19db      	adds	r3, r3, r7
 80043be:	1902      	adds	r2, r0, r4
 80043c0:	19d2      	adds	r2, r2, r7
 80043c2:	7812      	ldrb	r2, [r2, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	701a      	strb	r2, [r3, #0]
									flags |= (is_error << 1);
 80043c8:	4b65      	ldr	r3, [pc, #404]	@ (8004560 <StartTaskRxCommands+0x720>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	b25a      	sxtb	r2, r3
 80043d0:	1903      	adds	r3, r0, r4
 80043d2:	19db      	adds	r3, r3, r7
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	4313      	orrs	r3, r2
 80043da:	b25a      	sxtb	r2, r3
 80043dc:	1903      	adds	r3, r0, r4
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	701a      	strb	r2, [r3, #0]
									if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 80043e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004560 <StartTaskRxCommands+0x720>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <StartTaskRxCommands+0x5b0>
 80043ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004560 <StartTaskRxCommands+0x720>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]

										// Анализируем третий символ, отвечающий за конкретный БК

										MSV0=1;
 80043f0:	4b56      	ldr	r3, [pc, #344]	@ (800454c <StartTaskRxCommands+0x70c>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
										//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
										debug("Transmit to terminal: <%x>",
 80043f6:	4a55      	ldr	r2, [pc, #340]	@ (800454c <StartTaskRxCommands+0x70c>)
 80043f8:	4b56      	ldr	r3, [pc, #344]	@ (8004554 <StartTaskRxCommands+0x714>)
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f001 fb71 	bl	8005ae4 <debug>
												&MSV0);
										terminal_parser_state =	PARSER_EMPT;
 8004402:	4b55      	ldr	r3, [pc, #340]	@ (8004558 <StartTaskRxCommands+0x718>)
 8004404:	2209      	movs	r2, #9
 8004406:	701a      	strb	r2, [r3, #0]

								}
			if (terminal_parser_state == PARSER_MSV7) { // если посылка Sxx;
 8004408:	4b53      	ldr	r3, [pc, #332]	@ (8004558 <StartTaskRxCommands+0x718>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d12f      	bne.n	8004470 <StartTaskRxCommands+0x630>



					uint8_t flags = 0;
 8004410:	2066      	movs	r0, #102	@ 0x66
 8004412:	2428      	movs	r4, #40	@ 0x28
 8004414:	1903      	adds	r3, r0, r4
 8004416:	19db      	adds	r3, r3, r7
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
					flags |= (case_opened << 0);
 800441c:	4b4f      	ldr	r3, [pc, #316]	@ (800455c <StartTaskRxCommands+0x71c>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	0019      	movs	r1, r3
 8004422:	1903      	adds	r3, r0, r4
 8004424:	19db      	adds	r3, r3, r7
 8004426:	1902      	adds	r2, r0, r4
 8004428:	19d2      	adds	r2, r2, r7
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	701a      	strb	r2, [r3, #0]
					flags |= (is_error << 1);
 8004430:	4b4b      	ldr	r3, [pc, #300]	@ (8004560 <StartTaskRxCommands+0x720>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	b25a      	sxtb	r2, r3
 8004438:	1903      	adds	r3, r0, r4
 800443a:	19db      	adds	r3, r3, r7
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b25b      	sxtb	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b25a      	sxtb	r2, r3
 8004444:	1903      	adds	r3, r0, r4
 8004446:	19db      	adds	r3, r3, r7
 8004448:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 800444a:	4b45      	ldr	r3, [pc, #276]	@ (8004560 <StartTaskRxCommands+0x720>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <StartTaskRxCommands+0x618>
 8004452:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <StartTaskRxCommands+0x720>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]

						// Анализируем третий символ, отвечающий за конкретный БК

						MSV=1;
 8004458:	4b36      	ldr	r3, [pc, #216]	@ (8004534 <StartTaskRxCommands+0x6f4>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
				//HAL_UART_Transmit_IT(terminal_uart, &MSV, 1);
				debug("Transmit to terminal: <%x>",&MSV);
 800445e:	4a35      	ldr	r2, [pc, #212]	@ (8004534 <StartTaskRxCommands+0x6f4>)
 8004460:	4b3c      	ldr	r3, [pc, #240]	@ (8004554 <StartTaskRxCommands+0x714>)
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f001 fb3d 	bl	8005ae4 <debug>
				terminal_parser_state =	PARSER_EMPT;
 800446a:	4b3b      	ldr	r3, [pc, #236]	@ (8004558 <StartTaskRxCommands+0x718>)
 800446c:	2209      	movs	r2, #9
 800446e:	701a      	strb	r2, [r3, #0]

			}
			if (terminal_parser_state == PARSER_ADR7) { // если посылка S0x;
 8004470:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <StartTaskRxCommands+0x718>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b07      	cmp	r3, #7
 8004476:	d129      	bne.n	80044cc <StartTaskRxCommands+0x68c>



				uint8_t flags = 0;
 8004478:	2065      	movs	r0, #101	@ 0x65
 800447a:	2428      	movs	r4, #40	@ 0x28
 800447c:	1903      	adds	r3, r0, r4
 800447e:	19db      	adds	r3, r3, r7
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 8004484:	4b35      	ldr	r3, [pc, #212]	@ (800455c <StartTaskRxCommands+0x71c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	0019      	movs	r1, r3
 800448a:	1903      	adds	r3, r0, r4
 800448c:	19db      	adds	r3, r3, r7
 800448e:	1902      	adds	r2, r0, r4
 8004490:	19d2      	adds	r2, r2, r7
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 8004498:	4b31      	ldr	r3, [pc, #196]	@ (8004560 <StartTaskRxCommands+0x720>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b25a      	sxtb	r2, r3
 80044a0:	1903      	adds	r3, r0, r4
 80044a2:	19db      	adds	r3, r3, r7
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	b25a      	sxtb	r2, r3
 80044ac:	1903      	adds	r3, r0, r4
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 80044b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <StartTaskRxCommands+0x720>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <StartTaskRxCommands+0x680>
 80044ba:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <StartTaskRxCommands+0x720>)
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]

				// Анализируем третий символ, отвечающий за конкретный БК
				ADR=1;
 80044c0:	4b21      	ldr	r3, [pc, #132]	@ (8004548 <StartTaskRxCommands+0x708>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
				terminal_parser_state =	PARSER_EMPT;
 80044c6:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <StartTaskRxCommands+0x718>)
 80044c8:	2209      	movs	r2, #9
 80044ca:	701a      	strb	r2, [r3, #0]

				}
			if (terminal_parser_state == PARSER_ADRNUM) { // если посылка S0x;
 80044cc:	4b22      	ldr	r3, [pc, #136]	@ (8004558 <StartTaskRxCommands+0x718>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d000      	beq.n	80044d6 <StartTaskRxCommands+0x696>
 80044d4:	e0ae      	b.n	8004634 <StartTaskRxCommands+0x7f4>


				uint8_t flags = 0;
 80044d6:	2064      	movs	r0, #100	@ 0x64
 80044d8:	2428      	movs	r4, #40	@ 0x28
 80044da:	1903      	adds	r3, r0, r4
 80044dc:	19db      	adds	r3, r3, r7
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <StartTaskRxCommands+0x71c>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	0019      	movs	r1, r3
 80044e8:	1903      	adds	r3, r0, r4
 80044ea:	19db      	adds	r3, r3, r7
 80044ec:	1902      	adds	r2, r0, r4
 80044ee:	19d2      	adds	r2, r2, r7
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <StartTaskRxCommands+0x720>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	b25a      	sxtb	r2, r3
 80044fe:	1903      	adds	r3, r0, r4
 8004500:	19db      	adds	r3, r3, r7
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b25b      	sxtb	r3, r3
 8004506:	4313      	orrs	r3, r2
 8004508:	b25a      	sxtb	r2, r3
 800450a:	1903      	adds	r3, r0, r4
 800450c:	19db      	adds	r3, r3, r7
 800450e:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8004510:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <StartTaskRxCommands+0x720>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <StartTaskRxCommands+0x6de>
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <StartTaskRxCommands+0x720>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
				received_number=0;
 800451e:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <StartTaskRxCommands+0x724>)
 8004520:	2200      	movs	r2, #0
 8004522:	801a      	strh	r2, [r3, #0]
				for (int i = 7; i < 14; i++) {
 8004524:	2307      	movs	r3, #7
 8004526:	2284      	movs	r2, #132	@ 0x84
 8004528:	2128      	movs	r1, #40	@ 0x28
 800452a:	1852      	adds	r2, r2, r1
 800452c:	19d2      	adds	r2, r2, r7
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e048      	b.n	80045c4 <StartTaskRxCommands+0x784>
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	20000380 	.word	0x20000380
 8004538:	200003a0 	.word	0x200003a0
 800453c:	08016af0 	.word	0x08016af0
 8004540:	50000c00 	.word	0x50000c00
 8004544:	20000070 	.word	0x20000070
 8004548:	20000384 	.word	0x20000384
 800454c:	2000037c 	.word	0x2000037c
 8004550:	2000036c 	.word	0x2000036c
 8004554:	08016ad4 	.word	0x08016ad4
 8004558:	20000004 	.word	0x20000004
 800455c:	200003b1 	.word	0x200003b1
 8004560:	200003b0 	.word	0x200003b0
 8004564:	2000036a 	.word	0x2000036a
					if (received_command[i] >= '0' && received_command[i] <= '9') {
 8004568:	4ac6      	ldr	r2, [pc, #792]	@ (8004884 <StartTaskRxCommands+0xa44>)
 800456a:	2084      	movs	r0, #132	@ 0x84
 800456c:	2428      	movs	r4, #40	@ 0x28
 800456e:	1903      	adds	r3, r0, r4
 8004570:	19db      	adds	r3, r3, r7
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	18d3      	adds	r3, r2, r3
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b2f      	cmp	r3, #47	@ 0x2f
 800457a:	d91a      	bls.n	80045b2 <StartTaskRxCommands+0x772>
 800457c:	4ac1      	ldr	r2, [pc, #772]	@ (8004884 <StartTaskRxCommands+0xa44>)
 800457e:	1903      	adds	r3, r0, r4
 8004580:	19db      	adds	r3, r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	18d3      	adds	r3, r2, r3
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b39      	cmp	r3, #57	@ 0x39
 800458a:	d812      	bhi.n	80045b2 <StartTaskRxCommands+0x772>
						received_number = received_number * 10 + (received_command[i] - '0');
 800458c:	4bbe      	ldr	r3, [pc, #760]	@ (8004888 <StartTaskRxCommands+0xa48>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	1c1a      	adds	r2, r3, #0
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	18d3      	adds	r3, r2, r3
 8004596:	18db      	adds	r3, r3, r3
 8004598:	b29b      	uxth	r3, r3
 800459a:	49ba      	ldr	r1, [pc, #744]	@ (8004884 <StartTaskRxCommands+0xa44>)
 800459c:	1902      	adds	r2, r0, r4
 800459e:	19d2      	adds	r2, r2, r7
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	188a      	adds	r2, r1, r2
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b30      	subs	r3, #48	@ 0x30
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	4bb6      	ldr	r3, [pc, #728]	@ (8004888 <StartTaskRxCommands+0xa48>)
 80045b0:	801a      	strh	r2, [r3, #0]
				for (int i = 7; i < 14; i++) {
 80045b2:	2284      	movs	r2, #132	@ 0x84
 80045b4:	2128      	movs	r1, #40	@ 0x28
 80045b6:	1853      	adds	r3, r2, r1
 80045b8:	19db      	adds	r3, r3, r7
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	1852      	adds	r2, r2, r1
 80045c0:	19d2      	adds	r2, r2, r7
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	2384      	movs	r3, #132	@ 0x84
 80045c6:	2228      	movs	r2, #40	@ 0x28
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b0d      	cmp	r3, #13
 80045d0:	ddca      	ble.n	8004568 <StartTaskRxCommands+0x728>
					}

				}

				// Проверка serial_number
				 if (received_number == serial_number) {
 80045d2:	4bad      	ldr	r3, [pc, #692]	@ (8004888 <StartTaskRxCommands+0xa48>)
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	4bad      	ldr	r3, [pc, #692]	@ (800488c <StartTaskRxCommands+0xa4c>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d127      	bne.n	800462e <StartTaskRxCommands+0x7ee>
					 memset(sensor_inf.platform_adr, '0', sizeof(sensor_inf.platform_adr));
 80045de:	4bac      	ldr	r3, [pc, #688]	@ (8004890 <StartTaskRxCommands+0xa50>)
 80045e0:	2202      	movs	r2, #2
 80045e2:	2130      	movs	r1, #48	@ 0x30
 80045e4:	0018      	movs	r0, r3
 80045e6:	f00e fc57 	bl	8012e98 <memset>
					 sensor_inf.platform_adr[0]=received_command[3];
 80045ea:	4ba6      	ldr	r3, [pc, #664]	@ (8004884 <StartTaskRxCommands+0xa44>)
 80045ec:	78da      	ldrb	r2, [r3, #3]
 80045ee:	4ba8      	ldr	r3, [pc, #672]	@ (8004890 <StartTaskRxCommands+0xa50>)
 80045f0:	701a      	strb	r2, [r3, #0]
					 sensor_inf.platform_adr[1]=received_command[4];
 80045f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004884 <StartTaskRxCommands+0xa44>)
 80045f4:	791a      	ldrb	r2, [r3, #4]
 80045f6:	4ba6      	ldr	r3, [pc, #664]	@ (8004890 <StartTaskRxCommands+0xa50>)
 80045f8:	705a      	strb	r2, [r3, #1]
					// clearFlash();
					 //offset=0;
					 if(offset>=248){
 80045fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004894 <StartTaskRxCommands+0xa54>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2bf7      	cmp	r3, #247	@ 0xf7
 8004600:	dd04      	ble.n	800460c <StartTaskRxCommands+0x7cc>

					 		offset=0;
 8004602:	4ba4      	ldr	r3, [pc, #656]	@ (8004894 <StartTaskRxCommands+0xa54>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
					 		clearFlash();
 8004608:	f7ff f8ec 	bl	80037e4 <clearFlash>
					 	}
					 taskENTER_CRITICAL();
 800460c:	f00c ff50 	bl	80114b0 <vPortEnterCritical>
					 WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 8004610:	4ba0      	ldr	r3, [pc, #640]	@ (8004894 <StartTaskRxCommands+0xa54>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b9e      	ldr	r3, [pc, #632]	@ (8004890 <StartTaskRxCommands+0xa50>)
 8004616:	2108      	movs	r1, #8
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff f911 	bl	8003840 <WriteDeviceAddressOffset>
					 taskEXIT_CRITICAL();
 800461e:	f00c ff59 	bl	80114d4 <vPortExitCritical>

					 offset+=sizeof(sensor_inf);
 8004622:	4b9c      	ldr	r3, [pc, #624]	@ (8004894 <StartTaskRxCommands+0xa54>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	001a      	movs	r2, r3
 800462a:	4b9a      	ldr	r3, [pc, #616]	@ (8004894 <StartTaskRxCommands+0xa54>)
 800462c:	601a      	str	r2, [r3, #0]
				 }

				 //sensor_inf.crc_platform=(uint8_t)(crc32b((uint8_t *)sensor_inf.platform_adr, 2));
				 terminal_parser_state =PARSER_EMPT;
 800462e:	4b9a      	ldr	r3, [pc, #616]	@ (8004898 <StartTaskRxCommands+0xa58>)
 8004630:	2209      	movs	r2, #9
 8004632:	701a      	strb	r2, [r3, #0]

			}

			if (terminal_parser_state == PARSER_BDR) { // если посылка S0x;
 8004634:	4b98      	ldr	r3, [pc, #608]	@ (8004898 <StartTaskRxCommands+0xa58>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d000      	beq.n	800463e <StartTaskRxCommands+0x7fe>
 800463c:	e0c0      	b.n	80047c0 <StartTaskRxCommands+0x980>


							uint8_t flags = 0;
 800463e:	2063      	movs	r0, #99	@ 0x63
 8004640:	2428      	movs	r4, #40	@ 0x28
 8004642:	1903      	adds	r3, r0, r4
 8004644:	19db      	adds	r3, r3, r7
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
							flags |= (case_opened << 0);
 800464a:	4b94      	ldr	r3, [pc, #592]	@ (800489c <StartTaskRxCommands+0xa5c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	0019      	movs	r1, r3
 8004650:	1903      	adds	r3, r0, r4
 8004652:	19db      	adds	r3, r3, r7
 8004654:	1902      	adds	r2, r0, r4
 8004656:	19d2      	adds	r2, r2, r7
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	701a      	strb	r2, [r3, #0]
							flags |= (is_error << 1);
 800465e:	4b90      	ldr	r3, [pc, #576]	@ (80048a0 <StartTaskRxCommands+0xa60>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	b25a      	sxtb	r2, r3
 8004666:	1903      	adds	r3, r0, r4
 8004668:	19db      	adds	r3, r3, r7
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b25b      	sxtb	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b25a      	sxtb	r2, r3
 8004672:	1903      	adds	r3, r0, r4
 8004674:	19db      	adds	r3, r3, r7
 8004676:	701a      	strb	r2, [r3, #0]
							if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8004678:	4b89      	ldr	r3, [pc, #548]	@ (80048a0 <StartTaskRxCommands+0xa60>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <StartTaskRxCommands+0x846>
 8004680:	4b87      	ldr	r3, [pc, #540]	@ (80048a0 <StartTaskRxCommands+0xa60>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
							sensor_inf.received_BDR=0;
 8004686:	4b82      	ldr	r3, [pc, #520]	@ (8004890 <StartTaskRxCommands+0xa50>)
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]

							for (int i = 0; i < 22; i++) {
 800468c:	2300      	movs	r3, #0
 800468e:	2280      	movs	r2, #128	@ 0x80
 8004690:	2128      	movs	r1, #40	@ 0x28
 8004692:	1852      	adds	r2, r2, r1
 8004694:	19d2      	adds	r2, r2, r7
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e025      	b.n	80046e6 <StartTaskRxCommands+0x8a6>
								if (received_command[i] != ';') {
 800469a:	4a7a      	ldr	r2, [pc, #488]	@ (8004884 <StartTaskRxCommands+0xa44>)
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	2128      	movs	r1, #40	@ 0x28
 80046a0:	185b      	adds	r3, r3, r1
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80046ac:	d004      	beq.n	80046b8 <StartTaskRxCommands+0x878>
									END_Cmd = END_Cmd+1;
 80046ae:	4b7d      	ldr	r3, [pc, #500]	@ (80048a4 <StartTaskRxCommands+0xa64>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	4b7b      	ldr	r3, [pc, #492]	@ (80048a4 <StartTaskRxCommands+0xa64>)
 80046b6:	601a      	str	r2, [r3, #0]
								}
								if (received_command[i] == ';') {
 80046b8:	4a72      	ldr	r2, [pc, #456]	@ (8004884 <StartTaskRxCommands+0xa44>)
 80046ba:	2180      	movs	r1, #128	@ 0x80
 80046bc:	2028      	movs	r0, #40	@ 0x28
 80046be:	180b      	adds	r3, r1, r0
 80046c0:	19db      	adds	r3, r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	18d3      	adds	r3, r2, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80046ca:	d103      	bne.n	80046d4 <StartTaskRxCommands+0x894>
									i=22;
 80046cc:	2316      	movs	r3, #22
 80046ce:	180a      	adds	r2, r1, r0
 80046d0:	19d2      	adds	r2, r2, r7
 80046d2:	6013      	str	r3, [r2, #0]
							for (int i = 0; i < 22; i++) {
 80046d4:	2280      	movs	r2, #128	@ 0x80
 80046d6:	2128      	movs	r1, #40	@ 0x28
 80046d8:	1853      	adds	r3, r2, r1
 80046da:	19db      	adds	r3, r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	1852      	adds	r2, r2, r1
 80046e2:	19d2      	adds	r2, r2, r7
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	2380      	movs	r3, #128	@ 0x80
 80046e8:	2228      	movs	r2, #40	@ 0x28
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	19db      	adds	r3, r3, r7
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b15      	cmp	r3, #21
 80046f2:	ddd2      	ble.n	800469a <StartTaskRxCommands+0x85a>
								}
							}

							for (int i = 3; i < END_Cmd; i++) {
 80046f4:	2303      	movs	r3, #3
 80046f6:	22a4      	movs	r2, #164	@ 0xa4
 80046f8:	18ba      	adds	r2, r7, r2
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e025      	b.n	800474a <StartTaskRxCommands+0x90a>
								if (received_command[i] >= '0' && received_command[i] <= '9') {
 80046fe:	4a61      	ldr	r2, [pc, #388]	@ (8004884 <StartTaskRxCommands+0xa44>)
 8004700:	20a4      	movs	r0, #164	@ 0xa4
 8004702:	183b      	adds	r3, r7, r0
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	18d3      	adds	r3, r2, r3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b2f      	cmp	r3, #47	@ 0x2f
 800470c:	d917      	bls.n	800473e <StartTaskRxCommands+0x8fe>
 800470e:	4a5d      	ldr	r2, [pc, #372]	@ (8004884 <StartTaskRxCommands+0xa44>)
 8004710:	183b      	adds	r3, r7, r0
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b39      	cmp	r3, #57	@ 0x39
 800471a:	d810      	bhi.n	800473e <StartTaskRxCommands+0x8fe>
									sensor_inf.received_BDR = sensor_inf.received_BDR * 10 + (received_command[i] - '0');
 800471c:	4b5c      	ldr	r3, [pc, #368]	@ (8004890 <StartTaskRxCommands+0xa50>)
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	0013      	movs	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	189b      	adds	r3, r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	0019      	movs	r1, r3
 800472a:	4a56      	ldr	r2, [pc, #344]	@ (8004884 <StartTaskRxCommands+0xa44>)
 800472c:	183b      	adds	r3, r7, r0
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	18cb      	adds	r3, r1, r3
 8004736:	3b30      	subs	r3, #48	@ 0x30
 8004738:	001a      	movs	r2, r3
 800473a:	4b55      	ldr	r3, [pc, #340]	@ (8004890 <StartTaskRxCommands+0xa50>)
 800473c:	605a      	str	r2, [r3, #4]
							for (int i = 3; i < END_Cmd; i++) {
 800473e:	22a4      	movs	r2, #164	@ 0xa4
 8004740:	18bb      	adds	r3, r7, r2
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	18ba      	adds	r2, r7, r2
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b56      	ldr	r3, [pc, #344]	@ (80048a4 <StartTaskRxCommands+0xa64>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	22a4      	movs	r2, #164	@ 0xa4
 8004750:	18ba      	adds	r2, r7, r2
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	dbd2      	blt.n	80046fe <StartTaskRxCommands+0x8be>
								}

							}

				  while (!(USART2->ISR & USART_ISR_TC)) {
 8004758:	46c0      	nop			@ (mov r8, r8)
 800475a:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <StartTaskRxCommands+0xa68>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2240      	movs	r2, #64	@ 0x40
 8004760:	4013      	ands	r3, r2
 8004762:	d0fa      	beq.n	800475a <StartTaskRxCommands+0x91a>
				         // Ожидание, пока передача завершится
				     }

				     // Отключаем USART перед изменением настроек
				     USART2->CR1 &= ~USART_CR1_UE;
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <StartTaskRxCommands+0xa68>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b4f      	ldr	r3, [pc, #316]	@ (80048a8 <StartTaskRxCommands+0xa68>)
 800476a:	2101      	movs	r1, #1
 800476c:	438a      	bics	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

				     // �?зменение скорости
				     USART2->BRR = (SystemCoreClock+12800) / sensor_inf.received_BDR;
 8004770:	4b4e      	ldr	r3, [pc, #312]	@ (80048ac <StartTaskRxCommands+0xa6c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	22c8      	movs	r2, #200	@ 0xc8
 8004776:	0192      	lsls	r2, r2, #6
 8004778:	189a      	adds	r2, r3, r2
 800477a:	4b45      	ldr	r3, [pc, #276]	@ (8004890 <StartTaskRxCommands+0xa50>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4c4a      	ldr	r4, [pc, #296]	@ (80048a8 <StartTaskRxCommands+0xa68>)
 8004780:	0019      	movs	r1, r3
 8004782:	0010      	movs	r0, r2
 8004784:	f7fb fcdc 	bl	8000140 <__udivsi3>
 8004788:	0003      	movs	r3, r0
 800478a:	60e3      	str	r3, [r4, #12]

				     // Включаем USART обратно
				     USART2->CR1 |= USART_CR1_UE;
 800478c:	4b46      	ldr	r3, [pc, #280]	@ (80048a8 <StartTaskRxCommands+0xa68>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b45      	ldr	r3, [pc, #276]	@ (80048a8 <StartTaskRxCommands+0xa68>)
 8004792:	2101      	movs	r1, #1
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

				     taskENTER_CRITICAL();
 8004798:	f00c fe8a 	bl	80114b0 <vPortEnterCritical>
				     WriteDeviceAddressOffset((uint8_t*) &sensor_inf, sizeof(sensor_inf), offset);
 800479c:	4b3d      	ldr	r3, [pc, #244]	@ (8004894 <StartTaskRxCommands+0xa54>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <StartTaskRxCommands+0xa50>)
 80047a2:	2108      	movs	r1, #8
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff f84b 	bl	8003840 <WriteDeviceAddressOffset>
				     taskEXIT_CRITICAL();
 80047aa:	f00c fe93 	bl	80114d4 <vPortExitCritical>
				     offset+=sizeof(sensor_inf);
 80047ae:	4b39      	ldr	r3, [pc, #228]	@ (8004894 <StartTaskRxCommands+0xa54>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3308      	adds	r3, #8
 80047b4:	001a      	movs	r2, r3
 80047b6:	4b37      	ldr	r3, [pc, #220]	@ (8004894 <StartTaskRxCommands+0xa54>)
 80047b8:	601a      	str	r2, [r3, #0]

							 terminal_parser_state =PARSER_EMPT;
 80047ba:	4b37      	ldr	r3, [pc, #220]	@ (8004898 <StartTaskRxCommands+0xa58>)
 80047bc:	2209      	movs	r2, #9
 80047be:	701a      	strb	r2, [r3, #0]

						}



			if (terminal_parser_state == PARSER_IDN7) { // если посылка S0x;
 80047c0:	4b35      	ldr	r3, [pc, #212]	@ (8004898 <StartTaskRxCommands+0xa58>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b06      	cmp	r3, #6
 80047c6:	d14d      	bne.n	8004864 <StartTaskRxCommands+0xa24>



				uint8_t flags = 0;
 80047c8:	2062      	movs	r0, #98	@ 0x62
 80047ca:	2428      	movs	r4, #40	@ 0x28
 80047cc:	1903      	adds	r3, r0, r4
 80047ce:	19db      	adds	r3, r3, r7
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
				flags |= (case_opened << 0);
 80047d4:	4b31      	ldr	r3, [pc, #196]	@ (800489c <StartTaskRxCommands+0xa5c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	0019      	movs	r1, r3
 80047da:	1903      	adds	r3, r0, r4
 80047dc:	19db      	adds	r3, r3, r7
 80047de:	1902      	adds	r2, r0, r4
 80047e0:	19d2      	adds	r2, r2, r7
 80047e2:	7812      	ldrb	r2, [r2, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	701a      	strb	r2, [r3, #0]
				flags |= (is_error << 1);
 80047e8:	4b2d      	ldr	r3, [pc, #180]	@ (80048a0 <StartTaskRxCommands+0xa60>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	b25a      	sxtb	r2, r3
 80047f0:	1903      	adds	r3, r0, r4
 80047f2:	19db      	adds	r3, r3, r7
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b25b      	sxtb	r3, r3
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b25a      	sxtb	r2, r3
 80047fc:	1903      	adds	r3, r0, r4
 80047fe:	19db      	adds	r3, r3, r7
 8004800:	701a      	strb	r2, [r3, #0]
				if (is_error) is_error = false;// сбрасываем флаг ошибки после отправки на терминал
 8004802:	4b27      	ldr	r3, [pc, #156]	@ (80048a0 <StartTaskRxCommands+0xa60>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <StartTaskRxCommands+0x9d0>
 800480a:	4b25      	ldr	r3, [pc, #148]	@ (80048a0 <StartTaskRxCommands+0xa60>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
				if(IDN==1){
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <StartTaskRxCommands+0xa70>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d125      	bne.n	8004864 <StartTaskRxCommands+0xa24>
				char str_idn[50];
				sprintf(str_idn,"CAS,BCA5/5kg     ,%d,P80\r\n",serial_number);
 8004818:	4b1c      	ldr	r3, [pc, #112]	@ (800488c <StartTaskRxCommands+0xa4c>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	001a      	movs	r2, r3
 800481e:	4925      	ldr	r1, [pc, #148]	@ (80048b4 <StartTaskRxCommands+0xa74>)
 8004820:	2508      	movs	r5, #8
 8004822:	2628      	movs	r6, #40	@ 0x28
 8004824:	19ab      	adds	r3, r5, r6
 8004826:	19db      	adds	r3, r3, r7
 8004828:	0018      	movs	r0, r3
 800482a:	f00e fa91 	bl	8012d50 <siprintf>

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800482e:	4b22      	ldr	r3, [pc, #136]	@ (80048b8 <StartTaskRxCommands+0xa78>)
 8004830:	2201      	movs	r2, #1
 8004832:	2110      	movs	r1, #16
 8004834:	0018      	movs	r0, r3
 8004836:	f003 ff72 	bl	800871e <HAL_GPIO_WritePin>
					HAL_UART_Transmit_IT(terminal_uart, (uint8_t*)str_idn, strlen(str_idn));
 800483a:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <StartTaskRxCommands+0xa7c>)
 800483c:	681c      	ldr	r4, [r3, #0]
 800483e:	19ab      	adds	r3, r5, r6
 8004840:	19db      	adds	r3, r3, r7
 8004842:	0018      	movs	r0, r3
 8004844:	f7fb fc60 	bl	8000108 <strlen>
 8004848:	0003      	movs	r3, r0
 800484a:	b29a      	uxth	r2, r3
 800484c:	19ab      	adds	r3, r5, r6
 800484e:	19db      	adds	r3, r3, r7
 8004850:	0019      	movs	r1, r3
 8004852:	0020      	movs	r0, r4
 8004854:	f007 ff3e 	bl	800c6d4 <HAL_UART_Transmit_IT>
					IDN=0;
 8004858:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <StartTaskRxCommands+0xa70>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
					terminal_parser_state =	PARSER_EMPT;
 800485e:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <StartTaskRxCommands+0xa58>)
 8004860:	2209      	movs	r2, #9
 8004862:	701a      	strb	r2, [r3, #0]
					//debug("Transmit to terminal: <%x>", &str_idn);
				}
			}

			memset(received_command, 0, sizeof(received_command));
 8004864:	4b07      	ldr	r3, [pc, #28]	@ (8004884 <StartTaskRxCommands+0xa44>)
 8004866:	2216      	movs	r2, #22
 8004868:	2100      	movs	r1, #0
 800486a:	0018      	movs	r0, r3
 800486c:	f00e fb14 	bl	8012e98 <memset>
			//receive(terminal_uart, received_command, 1);
			//receive(terminal_uart, RX_command_buff, 1);
			debug("Receive from task\r\n");
 8004870:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <StartTaskRxCommands+0xa80>)
 8004872:	0018      	movs	r0, r3
 8004874:	f001 f936 	bl	8005ae4 <debug>
 8004878:	f7ff fb03 	bl	8003e82 <StartTaskRxCommands+0x42>
		    	continue;
 800487c:	46c0      	nop			@ (mov r8, r8)
		    ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );
 800487e:	f7ff fb00 	bl	8003e82 <StartTaskRxCommands+0x42>
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	20000354 	.word	0x20000354
 8004888:	2000036a 	.word	0x2000036a
 800488c:	200003ac 	.word	0x200003ac
 8004890:	200003a0 	.word	0x200003a0
 8004894:	200003a8 	.word	0x200003a8
 8004898:	20000004 	.word	0x20000004
 800489c:	200003b1 	.word	0x200003b1
 80048a0:	200003b0 	.word	0x200003b0
 80048a4:	20000388 	.word	0x20000388
 80048a8:	40004400 	.word	0x40004400
 80048ac:	20000068 	.word	0x20000068
 80048b0:	20000370 	.word	0x20000370
 80048b4:	08016af8 	.word	0x08016af8
 80048b8:	50000c00 	.word	0x50000c00
 80048bc:	20000070 	.word	0x20000070
 80048c0:	08016b14 	.word	0x08016b14

080048c4 <StartTaskAccelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAccelerometer */
void StartTaskAccelerometer(void *argument)
{
 80048c4:	b5b0      	push	{r4, r5, r7, lr}
 80048c6:	b08e      	sub	sp, #56	@ 0x38
 80048c8:	af06      	add	r7, sp, #24
 80048ca:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskAccelerometer */
  /* Infinite loop */
	if(lis331dlh_init_spi(&config, ACCELEROMETER_SPI, ACCEL_CS_GPIO_Port, ACCEL_CS_Pin)) {
 80048cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004a88 <StartTaskAccelerometer+0x1c4>)
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	015b      	lsls	r3, r3, #5
 80048d4:	4a6d      	ldr	r2, [pc, #436]	@ (8004a8c <StartTaskAccelerometer+0x1c8>)
 80048d6:	486e      	ldr	r0, [pc, #440]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 80048d8:	f001 fe8e 	bl	80065f8 <lis331dlh_init_spi>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d005      	beq.n	80048ec <StartTaskAccelerometer+0x28>
		debug("LIS331DLH DOESN'T WORK OR DOESN'T SOLDERED");
 80048e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a94 <StartTaskAccelerometer+0x1d0>)
 80048e2:	0018      	movs	r0, r3
 80048e4:	f001 f8fe 	bl	8005ae4 <debug>
		HardFault_Handler();
 80048e8:	f002 fd04 	bl	80072f4 <HardFault_Handler>
	}
	lis331dlh_update_config(&config);
 80048ec:	4b68      	ldr	r3, [pc, #416]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 80048ee:	0018      	movs	r0, r3
 80048f0:	f001 ff2e 	bl	8006750 <lis331dlh_update_config>

//	lis331dlh_print_config(&config);
	// нахождение угла наклона
	find_degree(&config);
 80048f4:	4b66      	ldr	r3, [pc, #408]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fbcc 	bl	8005094 <find_degree>

	while (1) {

		// проверка готовности
		lis331dlh_read_status(&config);
 80048fc:	4b64      	ldr	r3, [pc, #400]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 80048fe:	0018      	movs	r0, r3
 8004900:	f001 ff56 	bl	80067b0 <lis331dlh_read_status>
		check_overrun(&config);
 8004904:	4b62      	ldr	r3, [pc, #392]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 8004906:	0018      	movs	r0, r3
 8004908:	f000 fcdc 	bl	80052c4 <check_overrun>

		if (is_measurement_ready(&config)) {
 800490c:	4b60      	ldr	r3, [pc, #384]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 800490e:	0018      	movs	r0, r3
 8004910:	f000 fcf2 	bl	80052f8 <is_measurement_ready>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d00b      	beq.n	8004930 <StartTaskAccelerometer+0x6c>
			// обновление данных с датчика ускорения
			lis331dlh_update_accelaration(&config);
 8004918:	4b5d      	ldr	r3, [pc, #372]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 800491a:	0018      	movs	r0, r3
 800491c:	f001 fecc 	bl	80066b8 <lis331dlh_update_accelaration>

			// сброс максимумом и минимумов по таймерам
			reset_move_maximums();
 8004920:	f001 f806 	bl	8005930 <reset_move_maximums>
			reset_acceleration_maximums();
 8004924:	f000 ffde 	bl	80058e4 <reset_acceleration_maximums>

			// алгоритм вычисления длины перемещений
			calc_length(&config);
 8004928:	4b59      	ldr	r3, [pc, #356]	@ (8004a90 <StartTaskAccelerometer+0x1cc>)
 800492a:	0018      	movs	r0, r3
 800492c:	f000 ff3e 	bl	80057ac <calc_length>
		}

		vTaskDelay(5);
 8004930:	2005      	movs	r0, #5
 8004932:	f00b fbb9 	bl	80100a8 <vTaskDelay>

		float maximum = fmax(
				round_and_limit_float(get_max_positive_move()),
 8004936:	f001 f835 	bl	80059a4 <get_max_positive_move>
 800493a:	1c03      	adds	r3, r0, #0
 800493c:	1c18      	adds	r0, r3, #0
 800493e:	f001 f845 	bl	80059cc <round_and_limit_float>
 8004942:	1c03      	adds	r3, r0, #0
		float maximum = fmax(
 8004944:	1c18      	adds	r0, r3, #0
 8004946:	f7fe fd2d 	bl	80033a4 <__aeabi_f2d>
 800494a:	0004      	movs	r4, r0
 800494c:	000d      	movs	r5, r1
				round_and_limit_float(get_max_negative_move()));
 800494e:	f001 f833 	bl	80059b8 <get_max_negative_move>
 8004952:	1c03      	adds	r3, r0, #0
 8004954:	1c18      	adds	r0, r3, #0
 8004956:	f001 f839 	bl	80059cc <round_and_limit_float>
 800495a:	1c03      	adds	r3, r0, #0
		float maximum = fmax(
 800495c:	1c18      	adds	r0, r3, #0
 800495e:	f7fe fd21 	bl	80033a4 <__aeabi_f2d>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0020      	movs	r0, r4
 8004968:	0029      	movs	r1, r5
 800496a:	f00d f830 	bl	80119ce <fmax>
 800496e:	0002      	movs	r2, r0
 8004970:	000b      	movs	r3, r1
 8004972:	0010      	movs	r0, r2
 8004974:	0019      	movs	r1, r3
 8004976:	f7fe fd5d 	bl	8003434 <__aeabi_d2f>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	61fb      	str	r3, [r7, #28]

		float max_acceleration = fmax(
				round_and_limit_float(get_max_positive_acceleration()),
 800497e:	f000 fffd 	bl	800597c <get_max_positive_acceleration>
 8004982:	1c03      	adds	r3, r0, #0
 8004984:	1c18      	adds	r0, r3, #0
 8004986:	f001 f821 	bl	80059cc <round_and_limit_float>
 800498a:	1c03      	adds	r3, r0, #0
		float max_acceleration = fmax(
 800498c:	1c18      	adds	r0, r3, #0
 800498e:	f7fe fd09 	bl	80033a4 <__aeabi_f2d>
 8004992:	0004      	movs	r4, r0
 8004994:	000d      	movs	r5, r1
				round_and_limit_float(get_max_negative_acceleration()));
 8004996:	f000 fffb 	bl	8005990 <get_max_negative_acceleration>
 800499a:	1c03      	adds	r3, r0, #0
 800499c:	1c18      	adds	r0, r3, #0
 800499e:	f001 f815 	bl	80059cc <round_and_limit_float>
 80049a2:	1c03      	adds	r3, r0, #0
		float max_acceleration = fmax(
 80049a4:	1c18      	adds	r0, r3, #0
 80049a6:	f7fe fcfd 	bl	80033a4 <__aeabi_f2d>
 80049aa:	0002      	movs	r2, r0
 80049ac:	000b      	movs	r3, r1
 80049ae:	0020      	movs	r0, r4
 80049b0:	0029      	movs	r1, r5
 80049b2:	f00d f80c 	bl	80119ce <fmax>
 80049b6:	0002      	movs	r2, r0
 80049b8:	000b      	movs	r3, r1
 80049ba:	0010      	movs	r0, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	f7fe fd39 	bl	8003434 <__aeabi_d2f>
 80049c2:	1c03      	adds	r3, r0, #0
 80049c4:	61bb      	str	r3, [r7, #24]

		if(period_expired) {
 80049c6:	4b34      	ldr	r3, [pc, #208]	@ (8004a98 <StartTaskAccelerometer+0x1d4>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d044      	beq.n	8004a58 <StartTaskAccelerometer+0x194>
			debug("\r\nTaskAccelerometer: Timer done. current maximum = %f maximum_in_period = %f current max_acceleration = %f max_acceleration_in_period = %f \r\n",
 80049ce:	69f8      	ldr	r0, [r7, #28]
 80049d0:	f7fe fce8 	bl	80033a4 <__aeabi_f2d>
 80049d4:	60b8      	str	r0, [r7, #8]
 80049d6:	60f9      	str	r1, [r7, #12]
 80049d8:	4b30      	ldr	r3, [pc, #192]	@ (8004a9c <StartTaskAccelerometer+0x1d8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	1c18      	adds	r0, r3, #0
 80049de:	f7fe fce1 	bl	80033a4 <__aeabi_f2d>
 80049e2:	0004      	movs	r4, r0
 80049e4:	000d      	movs	r5, r1
 80049e6:	69b8      	ldr	r0, [r7, #24]
 80049e8:	f7fe fcdc 	bl	80033a4 <__aeabi_f2d>
 80049ec:	6038      	str	r0, [r7, #0]
 80049ee:	6079      	str	r1, [r7, #4]
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <StartTaskAccelerometer+0x1dc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	1c18      	adds	r0, r3, #0
 80049f6:	f7fe fcd5 	bl	80033a4 <__aeabi_f2d>
 80049fa:	0002      	movs	r2, r0
 80049fc:	000b      	movs	r3, r1
 80049fe:	4929      	ldr	r1, [pc, #164]	@ (8004aa4 <StartTaskAccelerometer+0x1e0>)
 8004a00:	9204      	str	r2, [sp, #16]
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	9202      	str	r2, [sp, #8]
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	9400      	str	r4, [sp, #0]
 8004a0e:	9501      	str	r5, [sp, #4]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	0008      	movs	r0, r1
 8004a16:	f001 f865 	bl	8005ae4 <debug>
					maximum, maximum_move_in_period,
					max_acceleration, max_acceleration_in_period);
			period_expired = false;
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a98 <StartTaskAccelerometer+0x1d4>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
			maximum_move_in_period = 0;
 8004a20:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <StartTaskAccelerometer+0x1d8>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
			max_acceleration_in_period = 0;
 8004a26:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa0 <StartTaskAccelerometer+0x1dc>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
			debug("\r\nTaskAccelerometer: Timer resetted. maximum_in_period = %f max_acceleration_in_period = %f \r\n", maximum_move_in_period, max_acceleration_in_period);
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <StartTaskAccelerometer+0x1d8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	1c18      	adds	r0, r3, #0
 8004a32:	f7fe fcb7 	bl	80033a4 <__aeabi_f2d>
 8004a36:	0004      	movs	r4, r0
 8004a38:	000d      	movs	r5, r1
 8004a3a:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <StartTaskAccelerometer+0x1dc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	1c18      	adds	r0, r3, #0
 8004a40:	f7fe fcb0 	bl	80033a4 <__aeabi_f2d>
 8004a44:	0002      	movs	r2, r0
 8004a46:	000b      	movs	r3, r1
 8004a48:	4917      	ldr	r1, [pc, #92]	@ (8004aa8 <StartTaskAccelerometer+0x1e4>)
 8004a4a:	9200      	str	r2, [sp, #0]
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	0022      	movs	r2, r4
 8004a50:	002b      	movs	r3, r5
 8004a52:	0008      	movs	r0, r1
 8004a54:	f001 f846 	bl	8005ae4 <debug>
		}

		if(maximum > maximum_move_in_period) maximum_move_in_period = maximum;
 8004a58:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <StartTaskAccelerometer+0x1d8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1c19      	adds	r1, r3, #0
 8004a5e:	69f8      	ldr	r0, [r7, #28]
 8004a60:	f7fb fd48 	bl	80004f4 <__aeabi_fcmpgt>
 8004a64:	1e03      	subs	r3, r0, #0
 8004a66:	d002      	beq.n	8004a6e <StartTaskAccelerometer+0x1aa>
 8004a68:	4b0c      	ldr	r3, [pc, #48]	@ (8004a9c <StartTaskAccelerometer+0x1d8>)
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	601a      	str	r2, [r3, #0]
		if(max_acceleration > max_acceleration_in_period) max_acceleration_in_period = max_acceleration;
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <StartTaskAccelerometer+0x1dc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	1c19      	adds	r1, r3, #0
 8004a74:	69b8      	ldr	r0, [r7, #24]
 8004a76:	f7fb fd3d 	bl	80004f4 <__aeabi_fcmpgt>
 8004a7a:	1e03      	subs	r3, r0, #0
 8004a7c:	d002      	beq.n	8004a84 <StartTaskAccelerometer+0x1c0>
 8004a7e:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <StartTaskAccelerometer+0x1dc>)
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	601a      	str	r2, [r3, #0]
	while (1) {
 8004a84:	e73a      	b.n	80048fc <StartTaskAccelerometer+0x38>
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	20000064 	.word	0x20000064
 8004a8c:	50000400 	.word	0x50000400
 8004a90:	20000008 	.word	0x20000008
 8004a94:	08016b28 	.word	0x08016b28
 8004a98:	200003b2 	.word	0x200003b2
 8004a9c:	200003b4 	.word	0x200003b4
 8004aa0:	200003b8 	.word	0x200003b8
 8004aa4:	08016b54 	.word	0x08016b54
 8004aa8:	08016be4 	.word	0x08016be4

08004aac <StartSensorsPolling>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsPolling */
void StartSensorsPolling(void *argument)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsPolling */
 /* Infinite loop */

	//vTaskDelay(200);
	taskENTER_CRITICAL();
 8004ab4:	f00c fcfc 	bl	80114b0 <vPortEnterCritical>
	if(!hdc1080_init(SENSORS_I2C, HDC_config.temperature_resolution, HDC_config.humidity_resolution)) {
 8004ab8:	4b49      	ldr	r3, [pc, #292]	@ (8004be0 <StartSensorsPolling+0x134>)
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	4b49      	ldr	r3, [pc, #292]	@ (8004be4 <StartSensorsPolling+0x138>)
 8004abe:	7819      	ldrb	r1, [r3, #0]
 8004ac0:	4b48      	ldr	r3, [pc, #288]	@ (8004be4 <StartSensorsPolling+0x138>)
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	001a      	movs	r2, r3
 8004ac6:	f001 faa7 	bl	8006018 <hdc1080_init>
 8004aca:	0003      	movs	r3, r0
 8004acc:	001a      	movs	r2, r3
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4053      	eors	r3, r2
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <StartSensorsPolling+0x38>
		debug("HDC1080 DOESN'T WORK OR DOESN'T SOLDERED");
 8004ad8:	4b43      	ldr	r3, [pc, #268]	@ (8004be8 <StartSensorsPolling+0x13c>)
 8004ada:	0018      	movs	r0, r3
 8004adc:	f001 f802 	bl	8005ae4 <debug>
		HardFault_Handler();
 8004ae0:	f002 fc08 	bl	80072f4 <HardFault_Handler>
	}

	if(!lps22hb_init(SENSORS_I2C)) {
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8004be0 <StartSensorsPolling+0x134>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f001 fed5 	bl	8006898 <lps22hb_init>
 8004aee:	0003      	movs	r3, r0
 8004af0:	001a      	movs	r2, r3
 8004af2:	2301      	movs	r3, #1
 8004af4:	4053      	eors	r3, r2
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <StartSensorsPolling+0x5c>
		debug("LPS22HB DOESN'T WORK OR DOESN'T SOLDERED");
 8004afc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <StartSensorsPolling+0x140>)
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 fff0 	bl	8005ae4 <debug>
		HardFault_Handler();
 8004b04:	f002 fbf6 	bl	80072f4 <HardFault_Handler>
	}
	taskEXIT_CRITICAL();
 8004b08:	f00c fce4 	bl	80114d4 <vPortExitCritical>
			osDelay(200);
 8004b0c:	20c8      	movs	r0, #200	@ 0xc8
 8004b0e:	f00a fb32 	bl	800f176 <osDelay>

	for (;;) {

		uint8_t status = lps22hb_get_status(&config);
 8004b12:	250f      	movs	r5, #15
 8004b14:	197c      	adds	r4, r7, r5
 8004b16:	4b36      	ldr	r3, [pc, #216]	@ (8004bf0 <StartSensorsPolling+0x144>)
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f001 ff2d 	bl	8006978 <lps22hb_get_status>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	7023      	strb	r3, [r4, #0]
		lps22hb_check_pressure_overrun(status);
 8004b22:	002c      	movs	r4, r5
 8004b24:	193b      	adds	r3, r7, r4
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f001 ff37 	bl	800699c <lps22hb_check_pressure_overrun>
		lps22hb_check_temperature_overrun(status);
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f001 ff56 	bl	80069e4 <lps22hb_check_temperature_overrun>

		if (lps22hb_check_pressure_data_available(status) && lps22hb_check_temperature_data_available(status))
 8004b38:	193b      	adds	r3, r7, r4
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f001 ff75 	bl	8006a2c <lps22hb_check_pressure_data_available>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d048      	beq.n	8004bd8 <StartSensorsPolling+0x12c>
 8004b46:	193b      	adds	r3, r7, r4
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f001 ff7f 	bl	8006a4e <lps22hb_check_temperature_data_available>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d041      	beq.n	8004bd8 <StartSensorsPolling+0x12c>
		{
			hdc1080_start_measurement(&HDC_config.last_temperature, &HDC_config.last_humidity);
 8004b54:	4a27      	ldr	r2, [pc, #156]	@ (8004bf4 <StartSensorsPolling+0x148>)
 8004b56:	4b28      	ldr	r3, [pc, #160]	@ (8004bf8 <StartSensorsPolling+0x14c>)
 8004b58:	0011      	movs	r1, r2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f001 face 	bl	80060fc <hdc1080_start_measurement>
						debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
								HDC_config.last_temperature,
 8004b60:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <StartSensorsPolling+0x138>)
 8004b62:	685b      	ldr	r3, [r3, #4]
						debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
 8004b64:	1c18      	adds	r0, r3, #0
 8004b66:	f7fe fc1d 	bl	80033a4 <__aeabi_f2d>
 8004b6a:	0004      	movs	r4, r0
 8004b6c:	000d      	movs	r5, r1
								HDC_config.last_humidity);
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004be4 <StartSensorsPolling+0x138>)
 8004b70:	689b      	ldr	r3, [r3, #8]
						debug("HDC1080 TEMP: %f HDC1080 HUMIDITY: %f\n\r",
 8004b72:	1c18      	adds	r0, r3, #0
 8004b74:	f7fe fc16 	bl	80033a4 <__aeabi_f2d>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	000b      	movs	r3, r1
 8004b7c:	491f      	ldr	r1, [pc, #124]	@ (8004bfc <StartSensorsPolling+0x150>)
 8004b7e:	9200      	str	r2, [sp, #0]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	0022      	movs	r2, r4
 8004b84:	002b      	movs	r3, r5
 8004b86:	0008      	movs	r0, r1
 8004b88:	f000 ffac 	bl	8005ae4 <debug>

						LPS_data.last_pressure = lps22hb_read_pressure();
 8004b8c:	f001 ff70 	bl	8006a70 <lps22hb_read_pressure>
 8004b90:	1c02      	adds	r2, r0, #0
 8004b92:	4b1b      	ldr	r3, [pc, #108]	@ (8004c00 <StartSensorsPolling+0x154>)
 8004b94:	605a      	str	r2, [r3, #4]
						LPS_data.last_temperature = lps22hb_read_temperature();
 8004b96:	f001 ffd3 	bl	8006b40 <lps22hb_read_temperature>
 8004b9a:	1c02      	adds	r2, r0, #0
 8004b9c:	4b18      	ldr	r3, [pc, #96]	@ (8004c00 <StartSensorsPolling+0x154>)
 8004b9e:	601a      	str	r2, [r3, #0]
						debug("LPS22HB TEMP: %f LPS22HB PRESSURE: %f\n\r",
								LPS_data.last_temperature,
 8004ba0:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <StartSensorsPolling+0x154>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
						debug("LPS22HB TEMP: %f LPS22HB PRESSURE: %f\n\r",
 8004ba4:	1c18      	adds	r0, r3, #0
 8004ba6:	f7fe fbfd 	bl	80033a4 <__aeabi_f2d>
 8004baa:	0004      	movs	r4, r0
 8004bac:	000d      	movs	r5, r1
								LPS_data.last_pressure);
 8004bae:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <StartSensorsPolling+0x154>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
						debug("LPS22HB TEMP: %f LPS22HB PRESSURE: %f\n\r",
 8004bb2:	1c18      	adds	r0, r3, #0
 8004bb4:	f7fe fbf6 	bl	80033a4 <__aeabi_f2d>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	000b      	movs	r3, r1
 8004bbc:	4911      	ldr	r1, [pc, #68]	@ (8004c04 <StartSensorsPolling+0x158>)
 8004bbe:	9200      	str	r2, [sp, #0]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	0022      	movs	r2, r4
 8004bc4:	002b      	movs	r3, r5
 8004bc6:	0008      	movs	r0, r1
 8004bc8:	f000 ff8c 	bl	8005ae4 <debug>
//			LPS_data.last_temperature = lps22hb_read_temperature();
//			debug("LPS22HB RAW TEMP: 0x%4x RAW PRESSURE: 0x%4x\r\n",
//					LPS_data.last_temperature,
//					LPS_data.last_pressure);

			vTaskDelay(1000);
 8004bcc:	23fa      	movs	r3, #250	@ 0xfa
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f00b fa69 	bl	80100a8 <vTaskDelay>
 8004bd6:	e002      	b.n	8004bde <StartSensorsPolling+0x132>
//														HAL_UART_Transmit (&huart3, last_temperatureLps_prin, len4, 100);


		}
		else {
			vTaskDelay(10);
 8004bd8:	200a      	movs	r0, #10
 8004bda:	f00b fa65 	bl	80100a8 <vTaskDelay>
	for (;;) {
 8004bde:	e798      	b.n	8004b12 <StartSensorsPolling+0x66>
 8004be0:	20000060 	.word	0x20000060
 8004be4:	20000394 	.word	0x20000394
 8004be8:	08016c44 	.word	0x08016c44
 8004bec:	08016c70 	.word	0x08016c70
 8004bf0:	20000008 	.word	0x20000008
 8004bf4:	2000039c 	.word	0x2000039c
 8004bf8:	20000398 	.word	0x20000398
 8004bfc:	08016c9c 	.word	0x08016c9c
 8004c00:	2000038c 	.word	0x2000038c
 8004c04:	08016cc4 	.word	0x08016cc4

08004c08 <StartADS1232Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADS1232Task */
void StartADS1232Task(void *argument)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADS1232Task */
  /* Infinite loop */

	HAL_TIM_Base_Start_IT(&htim2);
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <StartADS1232Task+0x28>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f007 f85a 	bl	800bccc <HAL_TIM_Base_Start_IT>
	Start_read(&htim2, TIM2);
 8004c18:	2380      	movs	r3, #128	@ 0x80
 8004c1a:	05da      	lsls	r2, r3, #23
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <StartADS1232Task+0x28>)
 8004c1e:	0011      	movs	r1, r2
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7fe fd91 	bl	8003748 <Start_read>

  for(;;)
  {
	 // Start_read(&htim2, TIM2);
	      vTaskDelay(100);
 8004c26:	2064      	movs	r0, #100	@ 0x64
 8004c28:	f00b fa3e 	bl	80100a8 <vTaskDelay>
 8004c2c:	e7fb      	b.n	8004c26 <StartADS1232Task+0x1e>
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	200026a0 	.word	0x200026a0

08004c34 <maximumsPeriodTimer_callback>:
  /* USER CODE END StartADS1232Task */
}

/* maximumsPeriodTimer_callback function */
void maximumsPeriodTimer_callback(void *argument)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN maximumsPeriodTimer_callback */
	debug("\r\n===Timer 10 minutes: reloaded===\r\n");
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <maximumsPeriodTimer_callback+0x20>)
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 ff50 	bl	8005ae4 <debug>
	period_expired = true;
 8004c44:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <maximumsPeriodTimer_callback+0x24>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
  /* USER CODE END maximumsPeriodTimer_callback */
}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b002      	add	sp, #8
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	08016cec 	.word	0x08016cec
 8004c58:	200003b2 	.word	0x200003b2

08004c5c <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения приема данных
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

	if(huart == &huart2) {
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4b91      	ldr	r3, [pc, #580]	@ (8004eb0 <HAL_UART_RxCpltCallback+0x254>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d000      	beq.n	8004c72 <HAL_UART_RxCpltCallback+0x16>
 8004c70:	e11a      	b.n	8004ea8 <HAL_UART_RxCpltCallback+0x24c>
			//extended_debug("Current state = %d, receive <%c>\r\n", terminal_parser_state, received_command[terminal_parser_state]);

			if ((RX_command_buff[0] == 'S'||RX_command_buff[0] == 'M'||RX_command_buff[0] == 'I'||RX_command_buff[0] == 'B'||RX_command_buff[0] == 'A')&&RX_command_count==0) {
 8004c72:	4b90      	ldr	r3, [pc, #576]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b53      	cmp	r3, #83	@ 0x53
 8004c78:	d00f      	beq.n	8004c9a <HAL_UART_RxCpltCallback+0x3e>
 8004c7a:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b4d      	cmp	r3, #77	@ 0x4d
 8004c80:	d00b      	beq.n	8004c9a <HAL_UART_RxCpltCallback+0x3e>
 8004c82:	4b8c      	ldr	r3, [pc, #560]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b49      	cmp	r3, #73	@ 0x49
 8004c88:	d007      	beq.n	8004c9a <HAL_UART_RxCpltCallback+0x3e>
 8004c8a:	4b8a      	ldr	r3, [pc, #552]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b42      	cmp	r3, #66	@ 0x42
 8004c90:	d003      	beq.n	8004c9a <HAL_UART_RxCpltCallback+0x3e>
 8004c92:	4b88      	ldr	r3, [pc, #544]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b41      	cmp	r3, #65	@ 0x41
 8004c98:	d10f      	bne.n	8004cba <HAL_UART_RxCpltCallback+0x5e>
 8004c9a:	4b87      	ldr	r3, [pc, #540]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <HAL_UART_RxCpltCallback+0x5e>
				received_command[RX_command_count]=RX_command_buff[0];
 8004ca2:	4b85      	ldr	r3, [pc, #532]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a83      	ldr	r2, [pc, #524]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004ca8:	7811      	ldrb	r1, [r2, #0]
 8004caa:	4a84      	ldr	r2, [pc, #528]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004cac:	54d1      	strb	r1, [r2, r3]
				RX_command_count=RX_command_count+1;
 8004cae:	4b82      	ldr	r3, [pc, #520]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	4b80      	ldr	r3, [pc, #512]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e0e3      	b.n	8004e82 <HAL_UART_RxCpltCallback+0x226>
			}
			else if (RX_command_buff[0]!= ';'&&RX_command_count!=0&&RX_command_count<=17) {
 8004cba:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8004cc0:	d013      	beq.n	8004cea <HAL_UART_RxCpltCallback+0x8e>
 8004cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <HAL_UART_RxCpltCallback+0x8e>
 8004cca:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b11      	cmp	r3, #17
 8004cd0:	dc0b      	bgt.n	8004cea <HAL_UART_RxCpltCallback+0x8e>
				received_command[RX_command_count]=RX_command_buff[0];
 8004cd2:	4b79      	ldr	r3, [pc, #484]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a77      	ldr	r2, [pc, #476]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004cd8:	7811      	ldrb	r1, [r2, #0]
 8004cda:	4a78      	ldr	r2, [pc, #480]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004cdc:	54d1      	strb	r1, [r2, r3]
				RX_command_count=RX_command_count+1;
 8004cde:	4b76      	ldr	r3, [pc, #472]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	4b74      	ldr	r3, [pc, #464]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e0cb      	b.n	8004e82 <HAL_UART_RxCpltCallback+0x226>
			}
			else if (RX_command_buff[0]== ';'&&RX_command_count!=0) {
 8004cea:	4b72      	ldr	r3, [pc, #456]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b3b      	cmp	r3, #59	@ 0x3b
 8004cf0:	d000      	beq.n	8004cf4 <HAL_UART_RxCpltCallback+0x98>
 8004cf2:	e0c6      	b.n	8004e82 <HAL_UART_RxCpltCallback+0x226>
 8004cf4:	4b70      	ldr	r3, [pc, #448]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d100      	bne.n	8004cfe <HAL_UART_RxCpltCallback+0xa2>
 8004cfc:	e0c1      	b.n	8004e82 <HAL_UART_RxCpltCallback+0x226>
				received_command[RX_command_count]=RX_command_buff[0];
 8004cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6c      	ldr	r2, [pc, #432]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004d04:	7811      	ldrb	r1, [r2, #0]
 8004d06:	4a6d      	ldr	r2, [pc, #436]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d08:	54d1      	strb	r1, [r2, r3]
				RX_command_count=0;
 8004d0a:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]



				if (received_command[0]=='S'){
 8004d10:	4b6a      	ldr	r3, [pc, #424]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b53      	cmp	r3, #83	@ 0x53
 8004d16:	d12b      	bne.n	8004d70 <HAL_UART_RxCpltCallback+0x114>

					if (received_command[1]=='4'&&received_command[2]==platform_number.number_ch){
 8004d18:	4b68      	ldr	r3, [pc, #416]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b34      	cmp	r3, #52	@ 0x34
 8004d1e:	d109      	bne.n	8004d34 <HAL_UART_RxCpltCallback+0xd8>
 8004d20:	4b66      	ldr	r3, [pc, #408]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d22:	789a      	ldrb	r2, [r3, #2]
 8004d24:	4b66      	ldr	r3, [pc, #408]	@ (8004ec0 <HAL_UART_RxCpltCallback+0x264>)
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d103      	bne.n	8004d34 <HAL_UART_RxCpltCallback+0xd8>

						terminal_parser_state = PARSER_S4x;
 8004d2c:	4b65      	ldr	r3, [pc, #404]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e098      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>

					}
					else if (received_command[1]==sensor_inf.platform_adr[0]&& (received_command[2]==(sensor_inf.platform_adr[1]))){
 8004d34:	4b61      	ldr	r3, [pc, #388]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d36:	785a      	ldrb	r2, [r3, #1]
 8004d38:	4b63      	ldr	r3, [pc, #396]	@ (8004ec8 <HAL_UART_RxCpltCallback+0x26c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d109      	bne.n	8004d54 <HAL_UART_RxCpltCallback+0xf8>
 8004d40:	4b5e      	ldr	r3, [pc, #376]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d42:	789a      	ldrb	r2, [r3, #2]
 8004d44:	4b60      	ldr	r3, [pc, #384]	@ (8004ec8 <HAL_UART_RxCpltCallback+0x26c>)
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d103      	bne.n	8004d54 <HAL_UART_RxCpltCallback+0xf8>

						terminal_parser_state = PARSER_Sxx;
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e088      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
					}
					else if (received_command[1]=='9'&&received_command[2]=='8'){
 8004d54:	4b59      	ldr	r3, [pc, #356]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b39      	cmp	r3, #57	@ 0x39
 8004d5a:	d000      	beq.n	8004d5e <HAL_UART_RxCpltCallback+0x102>
 8004d5c:	e083      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
 8004d5e:	4b57      	ldr	r3, [pc, #348]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d60:	789b      	ldrb	r3, [r3, #2]
 8004d62:	2b38      	cmp	r3, #56	@ 0x38
 8004d64:	d000      	beq.n	8004d68 <HAL_UART_RxCpltCallback+0x10c>
 8004d66:	e07e      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>

						terminal_parser_state = PARSER_S98; //(Ничего не отвечаем)
 8004d68:	4b56      	ldr	r3, [pc, #344]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e07a      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
					}
				}
				else if (received_command[0]=='M'&&received_command[1]=='S'&&received_command[2]=='V'&&received_command[3]=='?'&&received_command[4]=='0') {
 8004d70:	4b52      	ldr	r3, [pc, #328]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b4d      	cmp	r3, #77	@ 0x4d
 8004d76:	d113      	bne.n	8004da0 <HAL_UART_RxCpltCallback+0x144>
 8004d78:	4b50      	ldr	r3, [pc, #320]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b53      	cmp	r3, #83	@ 0x53
 8004d7e:	d10f      	bne.n	8004da0 <HAL_UART_RxCpltCallback+0x144>
 8004d80:	4b4e      	ldr	r3, [pc, #312]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d82:	789b      	ldrb	r3, [r3, #2]
 8004d84:	2b56      	cmp	r3, #86	@ 0x56
 8004d86:	d10b      	bne.n	8004da0 <HAL_UART_RxCpltCallback+0x144>
 8004d88:	4b4c      	ldr	r3, [pc, #304]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d8a:	78db      	ldrb	r3, [r3, #3]
 8004d8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d8e:	d107      	bne.n	8004da0 <HAL_UART_RxCpltCallback+0x144>
 8004d90:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004d92:	791b      	ldrb	r3, [r3, #4]
 8004d94:	2b30      	cmp	r3, #48	@ 0x30
 8004d96:	d103      	bne.n	8004da0 <HAL_UART_RxCpltCallback+0x144>

					terminal_parser_state = PARSER_MSV70;
 8004d98:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e062      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='M'&&received_command[1]=='S'&&received_command[2]=='V'&&received_command[3]=='?'&&received_command[4]!='0') {
 8004da0:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b4d      	cmp	r3, #77	@ 0x4d
 8004da6:	d113      	bne.n	8004dd0 <HAL_UART_RxCpltCallback+0x174>
 8004da8:	4b44      	ldr	r3, [pc, #272]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b53      	cmp	r3, #83	@ 0x53
 8004dae:	d10f      	bne.n	8004dd0 <HAL_UART_RxCpltCallback+0x174>
 8004db0:	4b42      	ldr	r3, [pc, #264]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	2b56      	cmp	r3, #86	@ 0x56
 8004db6:	d10b      	bne.n	8004dd0 <HAL_UART_RxCpltCallback+0x174>
 8004db8:	4b40      	ldr	r3, [pc, #256]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dbe:	d107      	bne.n	8004dd0 <HAL_UART_RxCpltCallback+0x174>
 8004dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004dc2:	791b      	ldrb	r3, [r3, #4]
 8004dc4:	2b30      	cmp	r3, #48	@ 0x30
 8004dc6:	d003      	beq.n	8004dd0 <HAL_UART_RxCpltCallback+0x174>

					terminal_parser_state = PARSER_MSV7;
 8004dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004dca:	2205      	movs	r2, #5
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e04a      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='I'&&received_command[1]=='D'&&received_command[2]=='N'&&received_command[3]=='?') {
 8004dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b49      	cmp	r3, #73	@ 0x49
 8004dd6:	d10f      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x19c>
 8004dd8:	4b38      	ldr	r3, [pc, #224]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b44      	cmp	r3, #68	@ 0x44
 8004dde:	d10b      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x19c>
 8004de0:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004de2:	789b      	ldrb	r3, [r3, #2]
 8004de4:	2b4e      	cmp	r3, #78	@ 0x4e
 8004de6:	d107      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x19c>
 8004de8:	4b34      	ldr	r3, [pc, #208]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dee:	d103      	bne.n	8004df8 <HAL_UART_RxCpltCallback+0x19c>

					terminal_parser_state = PARSER_IDN7;
 8004df0:	4b34      	ldr	r3, [pc, #208]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004df2:	2206      	movs	r2, #6
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e036      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='A'&&received_command[1]=='D'&&received_command[2]=='R'&&received_command[3]=='?') {
 8004df8:	4b30      	ldr	r3, [pc, #192]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b41      	cmp	r3, #65	@ 0x41
 8004dfe:	d10f      	bne.n	8004e20 <HAL_UART_RxCpltCallback+0x1c4>
 8004e00:	4b2e      	ldr	r3, [pc, #184]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b44      	cmp	r3, #68	@ 0x44
 8004e06:	d10b      	bne.n	8004e20 <HAL_UART_RxCpltCallback+0x1c4>
 8004e08:	4b2c      	ldr	r3, [pc, #176]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e0a:	789b      	ldrb	r3, [r3, #2]
 8004e0c:	2b52      	cmp	r3, #82	@ 0x52
 8004e0e:	d107      	bne.n	8004e20 <HAL_UART_RxCpltCallback+0x1c4>
 8004e10:	4b2a      	ldr	r3, [pc, #168]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e16:	d103      	bne.n	8004e20 <HAL_UART_RxCpltCallback+0x1c4>

					terminal_parser_state = PARSER_ADR7;
 8004e18:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004e1a:	2207      	movs	r2, #7
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e022      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
				}
				else if (received_command[0]=='A'&&received_command[1]=='D'&&received_command[2]=='R'&&received_command[3]!='?') {
 8004e20:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b41      	cmp	r3, #65	@ 0x41
 8004e26:	d10f      	bne.n	8004e48 <HAL_UART_RxCpltCallback+0x1ec>
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b44      	cmp	r3, #68	@ 0x44
 8004e2e:	d10b      	bne.n	8004e48 <HAL_UART_RxCpltCallback+0x1ec>
 8004e30:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e32:	789b      	ldrb	r3, [r3, #2]
 8004e34:	2b52      	cmp	r3, #82	@ 0x52
 8004e36:	d107      	bne.n	8004e48 <HAL_UART_RxCpltCallback+0x1ec>
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e3e:	d003      	beq.n	8004e48 <HAL_UART_RxCpltCallback+0x1ec>

					terminal_parser_state = PARSER_ADRNUM;
 8004e40:	4b20      	ldr	r3, [pc, #128]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004e42:	2208      	movs	r2, #8
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e00e      	b.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
					}
				else if (received_command[0]=='B'&&received_command[1]=='D'&&received_command[2]=='R') {
 8004e48:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b42      	cmp	r3, #66	@ 0x42
 8004e4e:	d10a      	bne.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
 8004e50:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b44      	cmp	r3, #68	@ 0x44
 8004e56:	d106      	bne.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>
 8004e58:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <HAL_UART_RxCpltCallback+0x260>)
 8004e5a:	789b      	ldrb	r3, [r3, #2]
 8004e5c:	2b52      	cmp	r3, #82	@ 0x52
 8004e5e:	d102      	bne.n	8004e66 <HAL_UART_RxCpltCallback+0x20a>

				     terminal_parser_state = PARSER_BDR;
 8004e60:	4b18      	ldr	r3, [pc, #96]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004e62:	2204      	movs	r2, #4
 8004e64:	701a      	strb	r2, [r3, #0]
				}
				RX_command_count = 0;
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x25c>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
				RX_command_buff[0] = 0;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
				vTaskNotifyGiveFromISR( rxCommandsTaskHandle, &xHigherPriorityTaskWoken );
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <HAL_UART_RxCpltCallback+0x270>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	220c      	movs	r2, #12
 8004e78:	18ba      	adds	r2, r7, r2
 8004e7a:	0011      	movs	r1, r2
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f00b fded 	bl	8010a5c <vTaskNotifyGiveFromISR>
			}
		extended_debug("New state = %d\r\n", terminal_parser_state);
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x268>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	001a      	movs	r2, r3
 8004e88:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <HAL_UART_RxCpltCallback+0x274>)
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f000 fe9d 	bl	8005bcc <extended_debug>
		HAL_UART_Receive_IT(terminal_uart, RX_command_buff, 1);
 8004e92:	4b10      	ldr	r3, [pc, #64]	@ (8004ed4 <HAL_UART_RxCpltCallback+0x278>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4907      	ldr	r1, [pc, #28]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x258>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f007 fcc2 	bl	800c824 <HAL_UART_Receive_IT>
		extended_debug("Receive from handler\r\n");
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed8 <HAL_UART_RxCpltCallback+0x27c>)
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 fe92 	bl	8005bcc <extended_debug>
		}



}
 8004ea8:	46c0      	nop			@ (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b004      	add	sp, #16
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20002780 	.word	0x20002780
 8004eb4:	20000374 	.word	0x20000374
 8004eb8:	20000378 	.word	0x20000378
 8004ebc:	20000354 	.word	0x20000354
 8004ec0:	2000004c 	.word	0x2000004c
 8004ec4:	20000004 	.word	0x20000004
 8004ec8:	200003a0 	.word	0x200003a0
 8004ecc:	200003c0 	.word	0x200003c0
 8004ed0:	08016d14 	.word	0x08016d14
 8004ed4:	20000070 	.word	0x20000070
 8004ed8:	08016d28 	.word	0x08016d28

08004edc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {	//Callback-функция завершения передачи данных
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 ) {
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <HAL_UART_TxCpltCallback+0x34>)
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d105      	bne.n	8004ef8 <HAL_UART_TxCpltCallback+0x1c>
		//osDelay(1);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004eec:	4b09      	ldr	r3, [pc, #36]	@ (8004f14 <HAL_UART_TxCpltCallback+0x38>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2110      	movs	r1, #16
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f003 fc13 	bl	800871e <HAL_GPIO_WritePin>
	}
	if (huart == debug_uart) {
 8004ef8:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <HAL_UART_TxCpltCallback+0x3c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_TxCpltCallback+0x2a>
		reset_debug_variables();
 8004f02:	f000 fd8b 	bl	8005a1c <reset_debug_variables>
	}
}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	20002780 	.word	0x20002780
 8004f14:	50000c00 	.word	0x50000c00
 8004f18:	2000006c 	.word	0x2000006c

08004f1c <check_errors>:

void check_errors() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xBBBB){
 8004f20:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa0 <check_errors+0x84>)
 8004f22:	2100      	movs	r1, #0
 8004f24:	0018      	movs	r0, r3
 8004f26:	f005 ff3e 	bl	800ada6 <HAL_RTCEx_BKUPRead>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <check_errors+0x88>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d114      	bne.n	8004f5c <check_errors+0x40>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <check_errors+0x8c>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	2104      	movs	r1, #4
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f003 fbf0 	bl	800871e <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 8004f3e:	f004 fe8f 	bl	8009c60 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004f42:	4b17      	ldr	r3, [pc, #92]	@ (8004fa0 <check_errors+0x84>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	2100      	movs	r1, #0
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f005 ff0f 	bl	800ad6c <HAL_RTCEx_BKUPWrite>
		is_error = true;
 8004f4e:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <check_errors+0x90>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: HardFault ====================\r\n");
 8004f54:	4b16      	ldr	r3, [pc, #88]	@ (8004fb0 <check_errors+0x94>)
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 fdc4 	bl	8005ae4 <debug>
	}

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xAAAA){
 8004f5c:	4b10      	ldr	r3, [pc, #64]	@ (8004fa0 <check_errors+0x84>)
 8004f5e:	2100      	movs	r1, #0
 8004f60:	0018      	movs	r0, r3
 8004f62:	f005 ff20 	bl	800ada6 <HAL_RTCEx_BKUPRead>
 8004f66:	0003      	movs	r3, r0
 8004f68:	4a12      	ldr	r2, [pc, #72]	@ (8004fb4 <check_errors+0x98>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d114      	bne.n	8004f98 <check_errors+0x7c>
		HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <check_errors+0x8c>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	2104      	movs	r1, #4
 8004f74:	0018      	movs	r0, r3
 8004f76:	f003 fbd2 	bl	800871e <HAL_GPIO_WritePin>
		HAL_PWR_EnableBkUpAccess();
 8004f7a:	f004 fe71 	bl	8009c60 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004f7e:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <check_errors+0x84>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	0018      	movs	r0, r3
 8004f86:	f005 fef1 	bl	800ad6c <HAL_RTCEx_BKUPWrite>
		is_error = true;
 8004f8a:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <check_errors+0x90>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
		debug("==================== REBOOT REASON: ErrorHandler ====================\r\n");
 8004f90:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <check_errors+0x9c>)
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 fda6 	bl	8005ae4 <debug>
	}
}
 8004f98:	46c0      	nop			@ (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	20002510 	.word	0x20002510
 8004fa4:	0000bbbb 	.word	0x0000bbbb
 8004fa8:	50000c00 	.word	0x50000c00
 8004fac:	200003b0 	.word	0x200003b0
 8004fb0:	08016d40 	.word	0x08016d40
 8004fb4:	0000aaaa 	.word	0x0000aaaa
 8004fb8:	08016d88 	.word	0x08016d88

08004fbc <ADS_Callback>:
void ADS_Callback(uint32_t value){
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b091      	sub	sp, #68	@ 0x44
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

	 ads_val = value;
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <ADS_Callback+0x38>)
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
		char ADS_val_prin[50]; //size of the number
		int len5 =  sprintf(ADS_val_prin, "ADS_VAL: %d\n\r", ads_val);
 8004fca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <ADS_Callback+0x38>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	490a      	ldr	r1, [pc, #40]	@ (8004ff8 <ADS_Callback+0x3c>)
 8004fd0:	2408      	movs	r4, #8
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f00d febb 	bl	8012d50 <siprintf>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c

		HAL_UART_Transmit (&huart3, ADS_val_prin, len5, 100);
 8004fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	1939      	adds	r1, r7, r4
 8004fe4:	4805      	ldr	r0, [pc, #20]	@ (8004ffc <ADS_Callback+0x40>)
 8004fe6:	2364      	movs	r3, #100	@ 0x64
 8004fe8:	f007 fad0 	bl	800c58c <HAL_UART_Transmit>

}
 8004fec:	46c0      	nop			@ (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b011      	add	sp, #68	@ 0x44
 8004ff2:	bd90      	pop	{r4, r7, pc}
 8004ff4:	2000036c 	.word	0x2000036c
 8004ff8:	08016dd0 	.word	0x08016dd0
 8004ffc:	20002814 	.word	0x20002814

08005000 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	1c18      	adds	r0, r3, #0
 8005010:	46bd      	mov	sp, r7
 8005012:	b002      	add	sp, #8
 8005014:	bd80      	pop	{r7, pc}

08005016 <_ZSt4fmaxff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1c11      	adds	r1, r2, #0
 8005026:	1c18      	adds	r0, r3, #0
 8005028:	f00c fd22 	bl	8011a70 <fmaxf>
 800502c:	1c03      	adds	r3, r0, #0
 800502e:	1c18      	adds	r0, r3, #0
 8005030:	46bd      	mov	sp, r7
 8005032:	b002      	add	sp, #8
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1c11      	adds	r1, r2, #0
 8005046:	1c18      	adds	r0, r3, #0
 8005048:	f00c fd28 	bl	8011a9c <fminf>
 800504c:	1c03      	adds	r3, r0, #0
 800504e:	1c18      	adds	r0, r3, #0
 8005050:	46bd      	mov	sp, r7
 8005052:	b002      	add	sp, #8
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <_Z21get_acceleration_dataP11lis331dlh_t>:
// поправочный коэффициент на наклон
float incline_factor = 0;


// функция получения ускорения по рабочей оси
int32_t get_acceleration_data(lis331dlh_t * config) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

	if(config->axis_select_x_z == AXIS_X) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7d1b      	ldrb	r3, [r3, #20]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d102      	bne.n	800506e <_Z21get_acceleration_dataP11lis331dlh_t+0x16>
		return config->accelarations.x;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506c:	e00b      	b.n	8005086 <_Z21get_acceleration_dataP11lis331dlh_t+0x2e>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7d1b      	ldrb	r3, [r3, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <_Z21get_acceleration_dataP11lis331dlh_t+0x24>
		return config->accelarations.z;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	e004      	b.n	8005086 <_Z21get_acceleration_dataP11lis331dlh_t+0x2e>
	}

	debug("ERROR: wrong axis selected!");
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <_Z21get_acceleration_dataP11lis331dlh_t+0x38>)
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fd30 	bl	8005ae4 <debug>
	return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b002      	add	sp, #8
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	08016de0 	.word	0x08016de0

08005094 <find_degree>:


// нахождение угла наклона платы относительно целевой оси
void find_degree(lis331dlh_t * config) {
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b08c      	sub	sp, #48	@ 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	int32_t summ = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float vector = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	int count = 50;
 80050a4:	2332      	movs	r3, #50	@ 0x32
 80050a6:	623b      	str	r3, [r7, #32]

	uint32_t timer = HAL_GetTick();
 80050a8:	f002 fe2a 	bl	8007d00 <HAL_GetTick>
 80050ac:	0003      	movs	r3, r0
 80050ae:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < count;) {
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b4:	e04b      	b.n	800514e <find_degree+0xba>
		lis331dlh_read_status(config);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f001 fb79 	bl	80067b0 <lis331dlh_read_status>
		if (is_measurement_ready(config)) {					// если данные готовы
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f000 f919 	bl	80052f8 <is_measurement_ready>
 80050c6:	0003      	movs	r3, r0
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	4193      	sbcs	r3, r2
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d02d      	beq.n	800512e <find_degree+0x9a>
			lis331dlh_update_accelaration(config);			// обновление данных
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f001 faef 	bl	80066b8 <lis331dlh_update_accelaration>
			summ += get_acceleration_data(config);			// вытаскиваем ускорение по конкретной оси
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f7ff ffbb 	bl	8005058 <_Z21get_acceleration_dataP11lis331dlh_t>
 80050e2:	0002      	movs	r2, r0
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	435a      	muls	r2, r3
						+ config->accelarations.y * config->accelarations.y
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fc:	434b      	muls	r3, r1
 80050fe:	18d2      	adds	r2, r2, r3
						+ config->accelarations.z * config->accelarations.z);	// вычисление длины вектора
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	434b      	muls	r3, r1
 800510a:	18d3      	adds	r3, r2, r3
			vector += sqrtf(config->accelarations.x * config->accelarations.x
 800510c:	0018      	movs	r0, r3
 800510e:	f7fc f9ff 	bl	8001510 <__aeabi_i2f>
 8005112:	1c03      	adds	r3, r0, #0
 8005114:	1c18      	adds	r0, r3, #0
 8005116:	f00c fc3b 	bl	8011990 <sqrtf>
 800511a:	1c03      	adds	r3, r0, #0
 800511c:	1c19      	adds	r1, r3, #0
 800511e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005120:	f7fb fb6e 	bl	8000800 <__aeabi_fadd>
 8005124:	1c03      	adds	r3, r0, #0
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28
			++i;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	3301      	adds	r3, #1
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		uint32_t time_passed = HAL_GetTick() - timer;
 800512e:	f002 fde7 	bl	8007d00 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	60bb      	str	r3, [r7, #8]
		if (time_passed > 1000) {
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	23fa      	movs	r3, #250	@ 0xfa
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d904      	bls.n	800514e <find_degree+0xba>
			debug("LIS331 timeout error");
 8005144:	4b53      	ldr	r3, [pc, #332]	@ (8005294 <find_degree+0x200>)
 8005146:	0018      	movs	r0, r3
 8005148:	f000 fccc 	bl	8005ae4 <debug>
			return;
 800514c:	e09e      	b.n	800528c <find_degree+0x1f8>
	for (int i = 0; i < count;) {
 800514e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	429a      	cmp	r2, r3
 8005154:	dbaf      	blt.n	80050b6 <find_degree+0x22>
		}  // выход, если датчик не отвечает
	}

	float sinus = fabs(summ) / vector;
 8005156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005158:	0018      	movs	r0, r3
 800515a:	f000 fc4b 	bl	80059f4 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800515e:	0004      	movs	r4, r0
 8005160:	000d      	movs	r5, r1
 8005162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005164:	f7fe f91e 	bl	80033a4 <__aeabi_f2d>
 8005168:	0002      	movs	r2, r0
 800516a:	000b      	movs	r3, r1
 800516c:	0020      	movs	r0, r4
 800516e:	0029      	movs	r1, r5
 8005170:	f7fc fdc0 	bl	8001cf4 <__aeabi_ddiv>
 8005174:	0002      	movs	r2, r0
 8005176:	000b      	movs	r3, r1
 8005178:	0010      	movs	r0, r2
 800517a:	0019      	movs	r1, r3
 800517c:	f7fe f95a 	bl	8003434 <__aeabi_d2f>
 8005180:	1c03      	adds	r3, r0, #0
 8005182:	61bb      	str	r3, [r7, #24]

	if (sinus > 0.001) {
 8005184:	69b8      	ldr	r0, [r7, #24]
 8005186:	f7fe f90d 	bl	80033a4 <__aeabi_f2d>
 800518a:	4a43      	ldr	r2, [pc, #268]	@ (8005298 <find_degree+0x204>)
 800518c:	4b43      	ldr	r3, [pc, #268]	@ (800529c <find_degree+0x208>)
 800518e:	f7fb f977 	bl	8000480 <__aeabi_dcmpgt>
 8005192:	1e03      	subs	r3, r0, #0
 8005194:	d072      	beq.n	800527c <find_degree+0x1e8>
		float degree = asinf(sinus) * 180 / M_PI;	// нахождение арксинуса и преобразование из радиан в градусы
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	1c18      	adds	r0, r3, #0
 800519a:	f00c fbd9 	bl	8011950 <asinf>
 800519e:	1c03      	adds	r3, r0, #0
 80051a0:	493f      	ldr	r1, [pc, #252]	@ (80052a0 <find_degree+0x20c>)
 80051a2:	1c18      	adds	r0, r3, #0
 80051a4:	f7fb fe9c 	bl	8000ee0 <__aeabi_fmul>
 80051a8:	1c03      	adds	r3, r0, #0
 80051aa:	1c18      	adds	r0, r3, #0
 80051ac:	f7fe f8fa 	bl	80033a4 <__aeabi_f2d>
 80051b0:	4a3c      	ldr	r2, [pc, #240]	@ (80052a4 <find_degree+0x210>)
 80051b2:	4b3d      	ldr	r3, [pc, #244]	@ (80052a8 <find_degree+0x214>)
 80051b4:	f7fc fd9e 	bl	8001cf4 <__aeabi_ddiv>
 80051b8:	0002      	movs	r2, r0
 80051ba:	000b      	movs	r3, r1
 80051bc:	0010      	movs	r0, r2
 80051be:	0019      	movs	r1, r3
 80051c0:	f7fe f938 	bl	8003434 <__aeabi_d2f>
 80051c4:	1c03      	adds	r3, r0, #0
 80051c6:	617b      	str	r3, [r7, #20]
		float mean_axis = fabs(summ) / (float)count;
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	0018      	movs	r0, r3
 80051cc:	f000 fc12 	bl	80059f4 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80051d0:	0004      	movs	r4, r0
 80051d2:	000d      	movs	r5, r1
 80051d4:	6a38      	ldr	r0, [r7, #32]
 80051d6:	f7fc f99b 	bl	8001510 <__aeabi_i2f>
 80051da:	1c03      	adds	r3, r0, #0
 80051dc:	1c18      	adds	r0, r3, #0
 80051de:	f7fe f8e1 	bl	80033a4 <__aeabi_f2d>
 80051e2:	0002      	movs	r2, r0
 80051e4:	000b      	movs	r3, r1
 80051e6:	0020      	movs	r0, r4
 80051e8:	0029      	movs	r1, r5
 80051ea:	f7fc fd83 	bl	8001cf4 <__aeabi_ddiv>
 80051ee:	0002      	movs	r2, r0
 80051f0:	000b      	movs	r3, r1
 80051f2:	0010      	movs	r0, r2
 80051f4:	0019      	movs	r1, r3
 80051f6:	f7fe f91d 	bl	8003434 <__aeabi_d2f>
 80051fa:	1c03      	adds	r3, r0, #0
 80051fc:	613b      	str	r3, [r7, #16]
		float mean_vector = vector / (float)count;
 80051fe:	6a38      	ldr	r0, [r7, #32]
 8005200:	f7fc f986 	bl	8001510 <__aeabi_i2f>
 8005204:	1c03      	adds	r3, r0, #0
 8005206:	1c19      	adds	r1, r3, #0
 8005208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800520a:	f7fb fc83 	bl	8000b14 <__aeabi_fdiv>
 800520e:	1c03      	adds	r3, r0, #0
 8005210:	60fb      	str	r3, [r7, #12]
		incline_factor = 1 + mean_axis / mean_vector;	// вычисление поправочного коэффициента на угол наклона
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	6938      	ldr	r0, [r7, #16]
 8005216:	f7fb fc7d 	bl	8000b14 <__aeabi_fdiv>
 800521a:	1c03      	adds	r3, r0, #0
 800521c:	21fe      	movs	r1, #254	@ 0xfe
 800521e:	0589      	lsls	r1, r1, #22
 8005220:	1c18      	adds	r0, r3, #0
 8005222:	f7fb faed 	bl	8000800 <__aeabi_fadd>
 8005226:	1c03      	adds	r3, r0, #0
 8005228:	1c1a      	adds	r2, r3, #0
 800522a:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <find_degree+0x218>)
 800522c:	601a      	str	r2, [r3, #0]

		debug("Mean = %f\r\n", mean_axis);
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f7fe f8b8 	bl	80033a4 <__aeabi_f2d>
 8005234:	0002      	movs	r2, r0
 8005236:	000b      	movs	r3, r1
 8005238:	491d      	ldr	r1, [pc, #116]	@ (80052b0 <find_degree+0x21c>)
 800523a:	0008      	movs	r0, r1
 800523c:	f000 fc52 	bl	8005ae4 <debug>
		debug("Full = %f\r\n", mean_vector);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7fe f8af 	bl	80033a4 <__aeabi_f2d>
 8005246:	0002      	movs	r2, r0
 8005248:	000b      	movs	r3, r1
 800524a:	491a      	ldr	r1, [pc, #104]	@ (80052b4 <find_degree+0x220>)
 800524c:	0008      	movs	r0, r1
 800524e:	f000 fc49 	bl	8005ae4 <debug>
		debug("degree = %f\r\n", degree);
 8005252:	6978      	ldr	r0, [r7, #20]
 8005254:	f7fe f8a6 	bl	80033a4 <__aeabi_f2d>
 8005258:	0002      	movs	r2, r0
 800525a:	000b      	movs	r3, r1
 800525c:	4916      	ldr	r1, [pc, #88]	@ (80052b8 <find_degree+0x224>)
 800525e:	0008      	movs	r0, r1
 8005260:	f000 fc40 	bl	8005ae4 <debug>
		debug("incline factor = %f\r\n", incline_factor);
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <find_degree+0x218>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	1c18      	adds	r0, r3, #0
 800526a:	f7fe f89b 	bl	80033a4 <__aeabi_f2d>
 800526e:	0002      	movs	r2, r0
 8005270:	000b      	movs	r3, r1
 8005272:	4912      	ldr	r1, [pc, #72]	@ (80052bc <find_degree+0x228>)
 8005274:	0008      	movs	r0, r1
 8005276:	f000 fc35 	bl	8005ae4 <debug>
 800527a:	e007      	b.n	800528c <find_degree+0x1f8>
	}
	else {
		debug("Incline factor > 2. Error!");
 800527c:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <find_degree+0x22c>)
 800527e:	0018      	movs	r0, r3
 8005280:	f000 fc30 	bl	8005ae4 <debug>
		incline_factor = 2;
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <find_degree+0x218>)
 8005286:	2280      	movs	r2, #128	@ 0x80
 8005288:	05d2      	lsls	r2, r2, #23
 800528a:	601a      	str	r2, [r3, #0]
	}

}
 800528c:	46bd      	mov	sp, r7
 800528e:	b00c      	add	sp, #48	@ 0x30
 8005290:	bdb0      	pop	{r4, r5, r7, pc}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	08016dfc 	.word	0x08016dfc
 8005298:	d2f1a9fc 	.word	0xd2f1a9fc
 800529c:	3f50624d 	.word	0x3f50624d
 80052a0:	43340000 	.word	0x43340000
 80052a4:	54442d18 	.word	0x54442d18
 80052a8:	400921fb 	.word	0x400921fb
 80052ac:	200004a8 	.word	0x200004a8
 80052b0:	08016e14 	.word	0x08016e14
 80052b4:	08016e20 	.word	0x08016e20
 80052b8:	08016e2c 	.word	0x08016e2c
 80052bc:	08016e3c 	.word	0x08016e3c
 80052c0:	08016e54 	.word	0x08016e54

080052c4 <check_overrun>:

// проверка, что данные ускорений не были перезаписаны
void check_overrun(lis331dlh_t * config) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	if ((config->status_register & 0xF0) > 0) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7f1b      	ldrb	r3, [r3, #28]
 80052d0:	001a      	movs	r2, r3
 80052d2:	23f0      	movs	r3, #240	@ 0xf0
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dd07      	ble.n	80052ea <check_overrun+0x26>
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_SET);
		debug("Acceleration data overrun! SR %02x\r\n", config->status_register);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	7f1b      	ldrb	r3, [r3, #28]
 80052de:	001a      	movs	r2, r3
 80052e0:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <check_overrun+0x30>)
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 fbfd 	bl	8005ae4 <debug>
//		HAL_UART_Transmit_IT(debug_uart, (uint8_t*)"XYZ Overrun\r\n", 13);
//		HAL_GPIO_WritePin(ONEWIRE_GPIO_Port, ONEWIRE_Pin, GPIO_PIN_RESET);
	}
}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b002      	add	sp, #8
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	08016e70 	.word	0x08016e70

080052f8 <is_measurement_ready>:

// проверка, что данные готовы для считывания
uint8_t is_measurement_ready(lis331dlh_t * config) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	return config->status_register & 0x08;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	7f1b      	ldrb	r3, [r3, #28]
 8005304:	2208      	movs	r2, #8
 8005306:	4013      	ands	r3, r2
 8005308:	b2db      	uxtb	r3, r3
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b002      	add	sp, #8
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <_Z14save_in_windowf>:

// сохранение данных в "окне" за последние 400 мс.
// Важно учитывать, что запись данных круговая
void save_in_window(float value) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	size_t window_position = (in_window - window);
 800531c:	4b1f      	ldr	r3, [pc, #124]	@ (800539c <_Z14save_in_windowf+0x88>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b1f      	ldr	r3, [pc, #124]	@ (80053a0 <_Z14save_in_windowf+0x8c>)
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	109b      	asrs	r3, r3, #2
 8005326:	60fb      	str	r3, [r7, #12]
	if (window_position == WINDOW_SIZE) {
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b28      	cmp	r3, #40	@ 0x28
 800532c:	d105      	bne.n	800533a <_Z14save_in_windowf+0x26>
		in_window = window;
 800532e:	4b1b      	ldr	r3, [pc, #108]	@ (800539c <_Z14save_in_windowf+0x88>)
 8005330:	4a1b      	ldr	r2, [pc, #108]	@ (80053a0 <_Z14save_in_windowf+0x8c>)
 8005332:	601a      	str	r2, [r3, #0]
		window_ready = 1;
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <_Z14save_in_windowf+0x90>)
 8005336:	2201      	movs	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
	}

	if (!window_ready) {
 800533a:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <_Z14save_in_windowf+0x90>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <_Z14save_in_windowf+0x3a>
		++window_value_counts;
 8005342:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <_Z14save_in_windowf+0x94>)
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <_Z14save_in_windowf+0x94>)
 800534c:	801a      	strh	r2, [r3, #0]
	}

	part_sum -= *in_window;
 800534e:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <_Z14save_in_windowf+0x98>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b12      	ldr	r3, [pc, #72]	@ (800539c <_Z14save_in_windowf+0x88>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <_Z14save_in_windowf+0x98>)
 800535c:	601a      	str	r2, [r3, #0]
	*in_window++ = value;
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fc f8b6 	bl	80014d0 <__aeabi_f2iz>
 8005364:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <_Z14save_in_windowf+0x88>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1d19      	adds	r1, r3, #4
 800536a:	4a0c      	ldr	r2, [pc, #48]	@ (800539c <_Z14save_in_windowf+0x88>)
 800536c:	6011      	str	r1, [r2, #0]
 800536e:	6018      	str	r0, [r3, #0]
	part_sum += value;
 8005370:	4b0e      	ldr	r3, [pc, #56]	@ (80053ac <_Z14save_in_windowf+0x98>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	0018      	movs	r0, r3
 8005376:	f7fc f8cb 	bl	8001510 <__aeabi_i2f>
 800537a:	1c03      	adds	r3, r0, #0
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	1c18      	adds	r0, r3, #0
 8005380:	f7fb fa3e 	bl	8000800 <__aeabi_fadd>
 8005384:	1c03      	adds	r3, r0, #0
 8005386:	1c18      	adds	r0, r3, #0
 8005388:	f7fc f8a2 	bl	80014d0 <__aeabi_f2iz>
 800538c:	0002      	movs	r2, r0
 800538e:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <_Z14save_in_windowf+0x98>)
 8005390:	601a      	str	r2, [r3, #0]
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b004      	add	sp, #16
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	20000054 	.word	0x20000054
 80053a0:	200003f8 	.word	0x200003f8
 80053a4:	200003f2 	.word	0x200003f2
 80053a8:	20000498 	.word	0x20000498
 80053ac:	2000049c 	.word	0x2000049c

080053b0 <_Z26get_mean_value_from_windowv>:

float get_mean_value_from_window() {
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	af00      	add	r7, sp, #0
	return part_sum / (float)window_value_counts;
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <_Z26get_mean_value_from_windowv+0x2c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7fc f8a9 	bl	8001510 <__aeabi_i2f>
 80053be:	1c04      	adds	r4, r0, #0
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <_Z26get_mean_value_from_windowv+0x30>)
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7fc f8ef 	bl	80015a8 <__aeabi_ui2f>
 80053ca:	1c03      	adds	r3, r0, #0
 80053cc:	1c19      	adds	r1, r3, #0
 80053ce:	1c20      	adds	r0, r4, #0
 80053d0:	f7fb fba0 	bl	8000b14 <__aeabi_fdiv>
 80053d4:	1c03      	adds	r3, r0, #0
}
 80053d6:	1c18      	adds	r0, r3, #0
 80053d8:	46bd      	mov	sp, r7
 80053da:	bdb0      	pop	{r4, r5, r7, pc}
 80053dc:	2000049c 	.word	0x2000049c
 80053e0:	20000498 	.word	0x20000498

080053e4 <is_need_stop_measuring>:

// проверка, что пора остановить измерения
// есть два главных условия для этого:
// 		измерение происходит дольше 400 мс (это означает, что платформа уже остановилась)
//		изменение знака скорости (это означает, что платформа прошла точку экстремума)
uint8_t is_need_stop_measuring() {
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	af00      	add	r7, sp, #0
	return measuring_started && (watchdog == WINDOW_SIZE || is_positive_speed ^ (speed > 0));
 80053e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005428 <is_need_stop_measuring+0x44>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d017      	beq.n	8005420 <is_need_stop_measuring+0x3c>
 80053f0:	4b0e      	ldr	r3, [pc, #56]	@ (800542c <is_need_stop_measuring+0x48>)
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	2b28      	cmp	r3, #40	@ 0x28
 80053f6:	d011      	beq.n	800541c <is_need_stop_measuring+0x38>
 80053f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <is_need_stop_measuring+0x4c>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	001c      	movs	r4, r3
 80053fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <is_need_stop_measuring+0x50>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2201      	movs	r2, #1
 8005404:	1c15      	adds	r5, r2, #0
 8005406:	2100      	movs	r1, #0
 8005408:	1c18      	adds	r0, r3, #0
 800540a:	f7fb f873 	bl	80004f4 <__aeabi_fcmpgt>
 800540e:	1e03      	subs	r3, r0, #0
 8005410:	d101      	bne.n	8005416 <is_need_stop_measuring+0x32>
 8005412:	2300      	movs	r3, #0
 8005414:	1c1d      	adds	r5, r3, #0
 8005416:	b2eb      	uxtb	r3, r5
 8005418:	429c      	cmp	r4, r3
 800541a:	d001      	beq.n	8005420 <is_need_stop_measuring+0x3c>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <is_need_stop_measuring+0x3e>
 8005420:	2300      	movs	r3, #0
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	bdb0      	pop	{r4, r5, r7, pc}
 8005428:	200003f1 	.word	0x200003f1
 800542c:	200003f4 	.word	0x200003f4
 8005430:	200003f0 	.word	0x200003f0
 8005434:	200003e8 	.word	0x200003e8

08005438 <get_real_length>:

// преобразование длины из "попугаев" в мм
// 		9.8 - ускорение 1g
//		1000 - преобразование единиц измерений
//		1024 - соответствует 1g при использовании диапазона 2G
float get_real_length() {
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
	return length * 9.8 / (float)1000 / (float)1024;
 800543c:	4b11      	ldr	r3, [pc, #68]	@ (8005484 <get_real_length+0x4c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1c18      	adds	r0, r3, #0
 8005442:	f7fd ffaf 	bl	80033a4 <__aeabi_f2d>
 8005446:	4a10      	ldr	r2, [pc, #64]	@ (8005488 <get_real_length+0x50>)
 8005448:	4b10      	ldr	r3, [pc, #64]	@ (800548c <get_real_length+0x54>)
 800544a:	f7fd f897 	bl	800257c <__aeabi_dmul>
 800544e:	0002      	movs	r2, r0
 8005450:	000b      	movs	r3, r1
 8005452:	0010      	movs	r0, r2
 8005454:	0019      	movs	r1, r3
 8005456:	2200      	movs	r2, #0
 8005458:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <get_real_length+0x58>)
 800545a:	f7fc fc4b 	bl	8001cf4 <__aeabi_ddiv>
 800545e:	0002      	movs	r2, r0
 8005460:	000b      	movs	r3, r1
 8005462:	0010      	movs	r0, r2
 8005464:	0019      	movs	r1, r3
 8005466:	2200      	movs	r2, #0
 8005468:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <get_real_length+0x5c>)
 800546a:	f7fc fc43 	bl	8001cf4 <__aeabi_ddiv>
 800546e:	0002      	movs	r2, r0
 8005470:	000b      	movs	r3, r1
 8005472:	0010      	movs	r0, r2
 8005474:	0019      	movs	r1, r3
 8005476:	f7fd ffdd 	bl	8003434 <__aeabi_d2f>
 800547a:	1c03      	adds	r3, r0, #0
}
 800547c:	1c18      	adds	r0, r3, #0
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	200003ec 	.word	0x200003ec
 8005488:	9999999a 	.word	0x9999999a
 800548c:	40239999 	.word	0x40239999
 8005490:	408f4000 	.word	0x408f4000
 8005494:	40900000 	.word	0x40900000

08005498 <is_measuring_meaningful>:

// проверка данных на корректность. условия два:
// 		перемещения меньше 1 считаем погрешностью
// 		должно быть готово "окно" для вычисления сдивига
uint8_t is_measuring_meaningful(float real_length) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	return window_ready && (fabs(real_length) > 1.001f);
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <is_measuring_meaningful+0x34>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <is_measuring_meaningful+0x2a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	1c18      	adds	r0, r3, #0
 80054ac:	f7ff fda8 	bl	8005000 <_ZSt4fabsf>
 80054b0:	1c03      	adds	r3, r0, #0
 80054b2:	4907      	ldr	r1, [pc, #28]	@ (80054d0 <is_measuring_meaningful+0x38>)
 80054b4:	1c18      	adds	r0, r3, #0
 80054b6:	f7fb f81d 	bl	80004f4 <__aeabi_fcmpgt>
 80054ba:	1e03      	subs	r3, r0, #0
 80054bc:	d001      	beq.n	80054c2 <is_measuring_meaningful+0x2a>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <is_measuring_meaningful+0x2c>
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200003f2 	.word	0x200003f2
 80054d0:	3f8020c5 	.word	0x3f8020c5

080054d4 <reset_variables>:

// сброс переменных
void reset_variables() {
 80054d4:	b5b0      	push	{r4, r5, r7, lr}
 80054d6:	af00      	add	r7, sp, #0
	if (watchdog == WINDOW_SIZE) {
 80054d8:	4b13      	ldr	r3, [pc, #76]	@ (8005528 <reset_variables+0x54>)
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	2b28      	cmp	r3, #40	@ 0x28
 80054de:	d102      	bne.n	80054e6 <reset_variables+0x12>
		speed = 0;
 80054e0:	4b12      	ldr	r3, [pc, #72]	@ (800552c <reset_variables+0x58>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	}

	measuring_started = 0;
 80054e6:	4b12      	ldr	r3, [pc, #72]	@ (8005530 <reset_variables+0x5c>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
	length = 0;
 80054ec:	4b11      	ldr	r3, [pc, #68]	@ (8005534 <reset_variables+0x60>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
	watchdog = 0;
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <reset_variables+0x54>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	801a      	strh	r2, [r3, #0]
	is_positive_speed = fabs(speed) > 0;
 80054f8:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <reset_variables+0x58>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1c18      	adds	r0, r3, #0
 80054fe:	f7ff fd7f 	bl	8005000 <_ZSt4fabsf>
 8005502:	1c03      	adds	r3, r0, #0
 8005504:	2201      	movs	r2, #1
 8005506:	1c14      	adds	r4, r2, #0
 8005508:	2100      	movs	r1, #0
 800550a:	1c18      	adds	r0, r3, #0
 800550c:	f7fa fff2 	bl	80004f4 <__aeabi_fcmpgt>
 8005510:	1e03      	subs	r3, r0, #0
 8005512:	d101      	bne.n	8005518 <reset_variables+0x44>
 8005514:	2300      	movs	r3, #0
 8005516:	1c1c      	adds	r4, r3, #0
 8005518:	b2e3      	uxtb	r3, r4
 800551a:	001a      	movs	r2, r3
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <reset_variables+0x64>)
 800551e:	701a      	strb	r2, [r3, #0]
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	bdb0      	pop	{r4, r5, r7, pc}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	200003f4 	.word	0x200003f4
 800552c:	200003e8 	.word	0x200003e8
 8005530:	200003f1 	.word	0x200003f1
 8005534:	200003ec 	.word	0x200003ec
 8005538:	200003f0 	.word	0x200003f0

0800553c <check_positive_speed>:

// проверяем направление движения
void check_positive_speed() {
 800553c:	b5b0      	push	{r4, r5, r7, lr}
 800553e:	af00      	add	r7, sp, #0
	if (fabs(speed) < 0.001) {
 8005540:	4b1e      	ldr	r3, [pc, #120]	@ (80055bc <check_positive_speed+0x80>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	1c18      	adds	r0, r3, #0
 8005546:	f7ff fd5b 	bl	8005000 <_ZSt4fabsf>
 800554a:	1c03      	adds	r3, r0, #0
 800554c:	1c18      	adds	r0, r3, #0
 800554e:	f7fd ff29 	bl	80033a4 <__aeabi_f2d>
 8005552:	2301      	movs	r3, #1
 8005554:	1c1c      	adds	r4, r3, #0
 8005556:	4a1a      	ldr	r2, [pc, #104]	@ (80055c0 <check_positive_speed+0x84>)
 8005558:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <check_positive_speed+0x88>)
 800555a:	f7fa ff7d 	bl	8000458 <__aeabi_dcmplt>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d101      	bne.n	8005566 <check_positive_speed+0x2a>
 8005562:	2300      	movs	r3, #0
 8005564:	1c1c      	adds	r4, r3, #0
 8005566:	b2e3      	uxtb	r3, r4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d013      	beq.n	8005594 <check_positive_speed+0x58>
		is_positive_speed = acceleration > 0.0f;
 800556c:	4b16      	ldr	r3, [pc, #88]	@ (80055c8 <check_positive_speed+0x8c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	1c14      	adds	r4, r2, #0
 8005574:	2100      	movs	r1, #0
 8005576:	1c18      	adds	r0, r3, #0
 8005578:	f7fa ffbc 	bl	80004f4 <__aeabi_fcmpgt>
 800557c:	1e03      	subs	r3, r0, #0
 800557e:	d101      	bne.n	8005584 <check_positive_speed+0x48>
 8005580:	2300      	movs	r3, #0
 8005582:	1c1c      	adds	r4, r3, #0
 8005584:	b2e3      	uxtb	r3, r4
 8005586:	001a      	movs	r2, r3
 8005588:	4b10      	ldr	r3, [pc, #64]	@ (80055cc <check_positive_speed+0x90>)
 800558a:	701a      	strb	r2, [r3, #0]
		speed = 0.0f;
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <check_positive_speed+0x80>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
	}
	else {
		is_positive_speed = speed > 0.0f;
	}
}
 8005592:	e00f      	b.n	80055b4 <check_positive_speed+0x78>
		is_positive_speed = speed > 0.0f;
 8005594:	4b09      	ldr	r3, [pc, #36]	@ (80055bc <check_positive_speed+0x80>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	1c14      	adds	r4, r2, #0
 800559c:	2100      	movs	r1, #0
 800559e:	1c18      	adds	r0, r3, #0
 80055a0:	f7fa ffa8 	bl	80004f4 <__aeabi_fcmpgt>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d101      	bne.n	80055ac <check_positive_speed+0x70>
 80055a8:	2300      	movs	r3, #0
 80055aa:	1c1c      	adds	r4, r3, #0
 80055ac:	b2e3      	uxtb	r3, r4
 80055ae:	001a      	movs	r2, r3
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <check_positive_speed+0x90>)
 80055b2:	701a      	strb	r2, [r3, #0]
}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	200003e8 	.word	0x200003e8
 80055c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80055c4:	3f50624d 	.word	0x3f50624d
 80055c8:	200003e4 	.word	0x200003e4
 80055cc:	200003f0 	.word	0x200003f0

080055d0 <_Z23update_speed_and_lengthP11lis331dlh_t>:

// интегрирование ускорения и скорости
void update_speed_and_length(lis331dlh_t * config) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	if (measuring_started) {
 80055d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005644 <_Z23update_speed_and_lengthP11lis331dlh_t+0x74>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02d      	beq.n	800563c <_Z23update_speed_and_lengthP11lis331dlh_t+0x6c>
		speed += acceleration * config->range_factor;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	4b18      	ldr	r3, [pc, #96]	@ (8005648 <_Z23update_speed_and_lengthP11lis331dlh_t+0x78>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1c19      	adds	r1, r3, #0
 80055ea:	1c10      	adds	r0, r2, #0
 80055ec:	f7fb fc78 	bl	8000ee0 <__aeabi_fmul>
 80055f0:	1c03      	adds	r3, r0, #0
 80055f2:	1c1a      	adds	r2, r3, #0
 80055f4:	4b15      	ldr	r3, [pc, #84]	@ (800564c <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	1c19      	adds	r1, r3, #0
 80055fa:	1c10      	adds	r0, r2, #0
 80055fc:	f7fb f900 	bl	8000800 <__aeabi_fadd>
 8005600:	1c03      	adds	r3, r0, #0
 8005602:	1c1a      	adds	r2, r3, #0
 8005604:	4b11      	ldr	r3, [pc, #68]	@ (800564c <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 8005606:	601a      	str	r2, [r3, #0]
		length += speed * config->range_factor;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	4b0f      	ldr	r3, [pc, #60]	@ (800564c <_Z23update_speed_and_lengthP11lis331dlh_t+0x7c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	1c19      	adds	r1, r3, #0
 8005612:	1c10      	adds	r0, r2, #0
 8005614:	f7fb fc64 	bl	8000ee0 <__aeabi_fmul>
 8005618:	1c03      	adds	r3, r0, #0
 800561a:	1c1a      	adds	r2, r3, #0
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	1c19      	adds	r1, r3, #0
 8005622:	1c10      	adds	r0, r2, #0
 8005624:	f7fb f8ec 	bl	8000800 <__aeabi_fadd>
 8005628:	1c03      	adds	r3, r0, #0
 800562a:	1c1a      	adds	r2, r3, #0
 800562c:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <_Z23update_speed_and_lengthP11lis331dlh_t+0x80>)
 800562e:	601a      	str	r2, [r3, #0]
		++watchdog;
 8005630:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <_Z23update_speed_and_lengthP11lis331dlh_t+0x84>)
 800563a:	801a      	strh	r2, [r3, #0]
	}
}
 800563c:	46c0      	nop			@ (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}
 8005644:	200003f1 	.word	0x200003f1
 8005648:	200003e4 	.word	0x200003e4
 800564c:	200003e8 	.word	0x200003e8
 8005650:	200003ec 	.word	0x200003ec
 8005654:	200003f4 	.word	0x200003f4

08005658 <print_result>:

// дебажная печать результатов вычислений
void print_result(float real_length) {
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565a:	b08f      	sub	sp, #60	@ 0x3c
 800565c:	af08      	add	r7, sp, #32
 800565e:	6178      	str	r0, [r7, #20]
	if (is_measuring_meaningful(real_length)) {
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1c18      	adds	r0, r3, #0
 8005664:	f7ff ff18 	bl	8005498 <is_measuring_meaningful>
 8005668:	0003      	movs	r3, r0
 800566a:	1e5a      	subs	r2, r3, #1
 800566c:	4193      	sbcs	r3, r2
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02b      	beq.n	80056cc <print_result+0x74>
		debug("LENGTH = %f, speed = %f, watchdog = %lu, max = %.2f, min = %.2f\r\n",
 8005674:	6978      	ldr	r0, [r7, #20]
 8005676:	f7fd fe95 	bl	80033a4 <__aeabi_f2d>
 800567a:	60b8      	str	r0, [r7, #8]
 800567c:	60f9      	str	r1, [r7, #12]
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <print_result+0x7c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1c18      	adds	r0, r3, #0
 8005684:	f7fd fe8e 	bl	80033a4 <__aeabi_f2d>
 8005688:	0004      	movs	r4, r0
 800568a:	000d      	movs	r5, r1
 800568c:	4b12      	ldr	r3, [pc, #72]	@ (80056d8 <print_result+0x80>)
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	001e      	movs	r6, r3
 8005692:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <print_result+0x84>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1c18      	adds	r0, r3, #0
 8005698:	f7fd fe84 	bl	80033a4 <__aeabi_f2d>
 800569c:	6038      	str	r0, [r7, #0]
 800569e:	6079      	str	r1, [r7, #4]
 80056a0:	4b0f      	ldr	r3, [pc, #60]	@ (80056e0 <print_result+0x88>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	1c18      	adds	r0, r3, #0
 80056a6:	f7fd fe7d 	bl	80033a4 <__aeabi_f2d>
 80056aa:	0002      	movs	r2, r0
 80056ac:	000b      	movs	r3, r1
 80056ae:	490d      	ldr	r1, [pc, #52]	@ (80056e4 <print_result+0x8c>)
 80056b0:	9206      	str	r2, [sp, #24]
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	9204      	str	r2, [sp, #16]
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	9602      	str	r6, [sp, #8]
 80056be:	9400      	str	r4, [sp, #0]
 80056c0:	9501      	str	r5, [sp, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	0008      	movs	r0, r1
 80056c8:	f000 fa0c 	bl	8005ae4 <debug>
			real_length, speed, watchdog, max_positive_move, max_negative_move);
	}
}
 80056cc:	46c0      	nop			@ (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b007      	add	sp, #28
 80056d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d4:	200003e8 	.word	0x200003e8
 80056d8:	200003f4 	.word	0x200003f4
 80056dc:	200003d4 	.word	0x200003d4
 80056e0:	200003d8 	.word	0x200003d8
 80056e4:	08016e98 	.word	0x08016e98

080056e8 <_Z25find_maxmin_accelerationsv>:

void find_maxmin_accelerations() {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
	float real_acceleration = acceleration * 9.8 / (float)1024;
 80056ee:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <_Z25find_maxmin_accelerationsv+0xa8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	1c18      	adds	r0, r3, #0
 80056f4:	f7fd fe56 	bl	80033a4 <__aeabi_f2d>
 80056f8:	4a26      	ldr	r2, [pc, #152]	@ (8005794 <_Z25find_maxmin_accelerationsv+0xac>)
 80056fa:	4b27      	ldr	r3, [pc, #156]	@ (8005798 <_Z25find_maxmin_accelerationsv+0xb0>)
 80056fc:	f7fc ff3e 	bl	800257c <__aeabi_dmul>
 8005700:	0002      	movs	r2, r0
 8005702:	000b      	movs	r3, r1
 8005704:	0010      	movs	r0, r2
 8005706:	0019      	movs	r1, r3
 8005708:	2200      	movs	r2, #0
 800570a:	4b24      	ldr	r3, [pc, #144]	@ (800579c <_Z25find_maxmin_accelerationsv+0xb4>)
 800570c:	f7fc faf2 	bl	8001cf4 <__aeabi_ddiv>
 8005710:	0002      	movs	r2, r0
 8005712:	000b      	movs	r3, r1
 8005714:	0010      	movs	r0, r2
 8005716:	0019      	movs	r1, r3
 8005718:	f7fd fe8c 	bl	8003434 <__aeabi_d2f>
 800571c:	1c03      	adds	r3, r0, #0
 800571e:	607b      	str	r3, [r7, #4]
	if (max_positive_acceleration < real_acceleration) {
 8005720:	4b1f      	ldr	r3, [pc, #124]	@ (80057a0 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1c19      	adds	r1, r3, #0
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fa fee4 	bl	80004f4 <__aeabi_fcmpgt>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d007      	beq.n	8005740 <_Z25find_maxmin_accelerationsv+0x58>
		max_positive_acceleration = real_acceleration;
 8005730:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 8005736:	f002 fae3 	bl	8007d00 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	4b19      	ldr	r3, [pc, #100]	@ (80057a4 <_Z25find_maxmin_accelerationsv+0xbc>)
 800573e:	601a      	str	r2, [r3, #0]
	}

	if (max_negative_acceleration > real_acceleration) {
 8005740:	4b19      	ldr	r3, [pc, #100]	@ (80057a8 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	1c19      	adds	r1, r3, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fa fec0 	bl	80004cc <__aeabi_fcmplt>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d007      	beq.n	8005760 <_Z25find_maxmin_accelerationsv+0x78>
		max_negative_acceleration = real_acceleration;
 8005750:	4b15      	ldr	r3, [pc, #84]	@ (80057a8 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	601a      	str	r2, [r3, #0]
		acceleration_timestamp = HAL_GetTick();
 8005756:	f002 fad3 	bl	8007d00 <HAL_GetTick>
 800575a:	0002      	movs	r2, r0
 800575c:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <_Z25find_maxmin_accelerationsv+0xbc>)
 800575e:	601a      	str	r2, [r3, #0]
	}

	max_positive_acceleration = fmax(max_positive_acceleration, real_acceleration);
 8005760:	4b0f      	ldr	r3, [pc, #60]	@ (80057a0 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	1c11      	adds	r1, r2, #0
 8005768:	1c18      	adds	r0, r3, #0
 800576a:	f7ff fc54 	bl	8005016 <_ZSt4fmaxff>
 800576e:	1c02      	adds	r2, r0, #0
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <_Z25find_maxmin_accelerationsv+0xb8>)
 8005772:	601a      	str	r2, [r3, #0]
	max_negative_acceleration = fmin(max_negative_acceleration, real_acceleration);
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	1c11      	adds	r1, r2, #0
 800577c:	1c18      	adds	r0, r3, #0
 800577e:	f7ff fc5a 	bl	8005036 <_ZSt4fminff>
 8005782:	1c02      	adds	r2, r0, #0
 8005784:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <_Z25find_maxmin_accelerationsv+0xc0>)
 8005786:	601a      	str	r2, [r3, #0]

}
 8005788:	46c0      	nop			@ (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}
 8005790:	200003e4 	.word	0x200003e4
 8005794:	9999999a 	.word	0x9999999a
 8005798:	40239999 	.word	0x40239999
 800579c:	40900000 	.word	0x40900000
 80057a0:	200003dc 	.word	0x200003dc
 80057a4:	200004a4 	.word	0x200004a4
 80057a8:	200003e0 	.word	0x200003e0

080057ac <calc_length>:

// основной алгоритм вычисления длины перемещений
void calc_length(lis331dlh_t * config) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
//	debug("Get data\r\n");
	// получение данных ускорений
	acceleration = get_acceleration_data(config);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff fc4e 	bl	8005058 <_Z21get_acceleration_dataP11lis331dlh_t>
 80057bc:	0003      	movs	r3, r0
 80057be:	0018      	movs	r0, r3
 80057c0:	f7fb fea6 	bl	8001510 <__aeabi_i2f>
 80057c4:	1c02      	adds	r2, r0, #0
 80057c6:	4b40      	ldr	r3, [pc, #256]	@ (80058c8 <calc_length+0x11c>)
 80057c8:	601a      	str	r2, [r3, #0]

	// сохранение значения в окне на 40мс для вычисления среднего для компенсации
	// репроекции осей при движении
	save_in_window(acceleration);
 80057ca:	4b3f      	ldr	r3, [pc, #252]	@ (80058c8 <calc_length+0x11c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	1c18      	adds	r0, r3, #0
 80057d0:	f7ff fda0 	bl	8005314 <_Z14save_in_windowf>

	// вычитание среднего значения за последние 400 мс
	// необходимо для исключения ускорение свободного падения
	// и компенсации ошибки репроекции осей
	acceleration -= get_mean_value_from_window();
 80057d4:	f7ff fdec 	bl	80053b0 <_Z26get_mean_value_from_windowv>
 80057d8:	1c02      	adds	r2, r0, #0
 80057da:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <calc_length+0x11c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1c11      	adds	r1, r2, #0
 80057e0:	1c18      	adds	r0, r3, #0
 80057e2:	f7fb fcbb 	bl	800115c <__aeabi_fsub>
 80057e6:	1c03      	adds	r3, r0, #0
 80057e8:	1c1a      	adds	r2, r3, #0
 80057ea:	4b37      	ldr	r3, [pc, #220]	@ (80058c8 <calc_length+0x11c>)
 80057ec:	601a      	str	r2, [r3, #0]
	// компенсация угла наклона
	acceleration *= incline_factor;
 80057ee:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <calc_length+0x11c>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <calc_length+0x120>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	1c19      	adds	r1, r3, #0
 80057f8:	1c10      	adds	r0, r2, #0
 80057fa:	f7fb fb71 	bl	8000ee0 <__aeabi_fmul>
 80057fe:	1c03      	adds	r3, r0, #0
 8005800:	1c1a      	adds	r2, r3, #0
 8005802:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <calc_length+0x11c>)
 8005804:	601a      	str	r2, [r3, #0]

	// нахождение максимумов и минимумов ускорений
	find_maxmin_accelerations();
 8005806:	f7ff ff6f 	bl	80056e8 <_Z25find_maxmin_accelerationsv>

	// старт измерений происходит при значении ускорения больше 5
	// число 5.0 подобрано эмпирическим путем и является компромиссом
	// между точностью и ложными срабатываниями
	if (!measuring_started && fabs(acceleration) > 5.0f) {
 800580a:	4b31      	ldr	r3, [pc, #196]	@ (80058d0 <calc_length+0x124>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <calc_length+0x82>
 8005812:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <calc_length+0x11c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1c18      	adds	r0, r3, #0
 8005818:	f7ff fbf2 	bl	8005000 <_ZSt4fabsf>
 800581c:	1c03      	adds	r3, r0, #0
 800581e:	492d      	ldr	r1, [pc, #180]	@ (80058d4 <calc_length+0x128>)
 8005820:	1c18      	adds	r0, r3, #0
 8005822:	f7fa fe67 	bl	80004f4 <__aeabi_fcmpgt>
 8005826:	1e03      	subs	r3, r0, #0
 8005828:	d001      	beq.n	800582e <calc_length+0x82>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <calc_length+0x84>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <calc_length+0x92>
		// флаг начала измерений
		measuring_started = 1;
 8005834:	4b26      	ldr	r3, [pc, #152]	@ (80058d0 <calc_length+0x124>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
		// проверка направления (необходимо для остановки измерений)
		check_positive_speed();
 800583a:	f7ff fe7f 	bl	800553c <check_positive_speed>
	}


//	debug("Integrate\r\n");
	// интегрирование
	update_speed_and_length(config);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f7ff fec5 	bl	80055d0 <_Z23update_speed_and_lengthP11lis331dlh_t>

	// проверка условий остановки
	if (is_need_stop_measuring()) {
 8005846:	f7ff fdcd 	bl	80053e4 <is_need_stop_measuring>
 800584a:	0003      	movs	r3, r0
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	4193      	sbcs	r3, r2
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d033      	beq.n	80058be <calc_length+0x112>
		// преобразование сырых данных в систему счисления
		float real_length = get_real_length();
 8005856:	f7ff fdef 	bl	8005438 <get_real_length>
 800585a:	1c03      	adds	r3, r0, #0
 800585c:	60fb      	str	r3, [r7, #12]

		// нахождение максимумов и минимумов по перемещениям
		if (is_measuring_meaningful(real_length)) {
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1c18      	adds	r0, r3, #0
 8005862:	f7ff fe19 	bl	8005498 <is_measuring_meaningful>
 8005866:	0003      	movs	r3, r0
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	4193      	sbcs	r3, r2
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01f      	beq.n	80058b2 <calc_length+0x106>
			if (max_positive_move < real_length) {
 8005872:	4b19      	ldr	r3, [pc, #100]	@ (80058d8 <calc_length+0x12c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	1c19      	adds	r1, r3, #0
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7fa fe3b 	bl	80004f4 <__aeabi_fcmpgt>
 800587e:	1e03      	subs	r3, r0, #0
 8005880:	d007      	beq.n	8005892 <calc_length+0xe6>
				max_positive_move = real_length;
 8005882:	4b15      	ldr	r3, [pc, #84]	@ (80058d8 <calc_length+0x12c>)
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 8005888:	f002 fa3a 	bl	8007d00 <HAL_GetTick>
 800588c:	0002      	movs	r2, r0
 800588e:	4b13      	ldr	r3, [pc, #76]	@ (80058dc <calc_length+0x130>)
 8005890:	601a      	str	r2, [r3, #0]
			}

			if (max_negative_move > real_length) {
 8005892:	4b13      	ldr	r3, [pc, #76]	@ (80058e0 <calc_length+0x134>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1c19      	adds	r1, r3, #0
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7fa fe17 	bl	80004cc <__aeabi_fcmplt>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d007      	beq.n	80058b2 <calc_length+0x106>
				max_negative_move = real_length;
 80058a2:	4b0f      	ldr	r3, [pc, #60]	@ (80058e0 <calc_length+0x134>)
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]
				move_timestamp = HAL_GetTick();
 80058a8:	f002 fa2a 	bl	8007d00 <HAL_GetTick>
 80058ac:	0002      	movs	r2, r0
 80058ae:	4b0b      	ldr	r3, [pc, #44]	@ (80058dc <calc_length+0x130>)
 80058b0:	601a      	str	r2, [r3, #0]
			}
		}
		print_result(real_length);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1c18      	adds	r0, r3, #0
 80058b6:	f7ff fecf 	bl	8005658 <print_result>
		reset_variables();
 80058ba:	f7ff fe0b 	bl	80054d4 <reset_variables>
	}
//	debug("Return\r\n");
}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b004      	add	sp, #16
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	200003e4 	.word	0x200003e4
 80058cc:	200004a8 	.word	0x200004a8
 80058d0:	200003f1 	.word	0x200003f1
 80058d4:	40a00000 	.word	0x40a00000
 80058d8:	200003d4 	.word	0x200003d4
 80058dc:	200004a0 	.word	0x200004a0
 80058e0:	200003d8 	.word	0x200003d8

080058e4 <reset_acceleration_maximums>:

// сброс максимумом ускорений
void reset_acceleration_maximums() {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - acceleration_timestamp) > maxmin_timeout_ms) {
 80058e8:	f002 fa0a 	bl	8007d00 <HAL_GetTick>
 80058ec:	0002      	movs	r2, r0
 80058ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <reset_acceleration_maximums+0x3c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <reset_acceleration_maximums+0x40>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4293      	cmp	r3, r2
 80058fa:	419b      	sbcs	r3, r3
 80058fc:	425b      	negs	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <reset_acceleration_maximums+0x36>
		acceleration_timestamp = HAL_GetTick();
 8005904:	f002 f9fc 	bl	8007d00 <HAL_GetTick>
 8005908:	0002      	movs	r2, r0
 800590a:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <reset_acceleration_maximums+0x3c>)
 800590c:	601a      	str	r2, [r3, #0]

		max_positive_acceleration = 0.0f;
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <reset_acceleration_maximums+0x44>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
		max_negative_acceleration = 0.0f;
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <reset_acceleration_maximums+0x48>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
	}
}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	200004a4 	.word	0x200004a4
 8005924:	20000050 	.word	0x20000050
 8005928:	200003dc 	.word	0x200003dc
 800592c:	200003e0 	.word	0x200003e0

08005930 <reset_move_maximums>:

// сброс максимумом по перемещениям
void reset_move_maximums() {
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - move_timestamp) > maxmin_timeout_ms) {
 8005934:	f002 f9e4 	bl	8007d00 <HAL_GetTick>
 8005938:	0002      	movs	r2, r0
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <reset_move_maximums+0x3c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <reset_move_maximums+0x40>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4293      	cmp	r3, r2
 8005946:	419b      	sbcs	r3, r3
 8005948:	425b      	negs	r3, r3
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <reset_move_maximums+0x36>
		move_timestamp = HAL_GetTick();
 8005950:	f002 f9d6 	bl	8007d00 <HAL_GetTick>
 8005954:	0002      	movs	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	@ (800596c <reset_move_maximums+0x3c>)
 8005958:	601a      	str	r2, [r3, #0]

		max_positive_move = 0.0f;
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <reset_move_maximums+0x44>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
		max_negative_move = 0.0f;
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <reset_move_maximums+0x48>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
	}
}
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200004a0 	.word	0x200004a0
 8005970:	20000050 	.word	0x20000050
 8005974:	200003d4 	.word	0x200003d4
 8005978:	200003d8 	.word	0x200003d8

0800597c <get_max_positive_acceleration>:

// получить максимум ускорения в +
float get_max_positive_acceleration() {
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
	return max_positive_acceleration;
 8005980:	4b02      	ldr	r3, [pc, #8]	@ (800598c <get_max_positive_acceleration+0x10>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	1c18      	adds	r0, r3, #0
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			@ (mov r8, r8)
 800598c:	200003dc 	.word	0x200003dc

08005990 <get_max_negative_acceleration>:


// получить максимум ускорения в -
float get_max_negative_acceleration() {
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
	return max_negative_acceleration;
 8005994:	4b02      	ldr	r3, [pc, #8]	@ (80059a0 <get_max_negative_acceleration+0x10>)
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	1c18      	adds	r0, r3, #0
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	200003e0 	.word	0x200003e0

080059a4 <get_max_positive_move>:

// получить максимум перемещения в +
float get_max_positive_move() {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
	return max_positive_move;
 80059a8:	4b02      	ldr	r3, [pc, #8]	@ (80059b4 <get_max_positive_move+0x10>)
 80059aa:	681b      	ldr	r3, [r3, #0]
}
 80059ac:	1c18      	adds	r0, r3, #0
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	200003d4 	.word	0x200003d4

080059b8 <get_max_negative_move>:

// получить максимум перемещения в -
float get_max_negative_move() {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
	return max_negative_move;
 80059bc:	4b02      	ldr	r3, [pc, #8]	@ (80059c8 <get_max_negative_move+0x10>)
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	1c18      	adds	r0, r3, #0
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	200003d8 	.word	0x200003d8

080059cc <round_and_limit_float>:
	}

	return (uint8_t)fmin(roundf(value), limit);
}

float round_and_limit_float(float value) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	if (value < 0) {
 80059d4:	2100      	movs	r1, #0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fa fd78 	bl	80004cc <__aeabi_fcmplt>
 80059dc:	1e03      	subs	r3, r0, #0
 80059de:	d004      	beq.n	80059ea <round_and_limit_float+0x1e>
		value *= -1;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2280      	movs	r2, #128	@ 0x80
 80059e4:	0612      	lsls	r2, r2, #24
 80059e6:	4053      	eors	r3, r2
 80059e8:	607b      	str	r3, [r7, #4]
	}

	return value;
 80059ea:	687b      	ldr	r3, [r7, #4]
}
 80059ec:	1c18      	adds	r0, r3, #0
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b002      	add	sp, #8
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_ZSt4fabsIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fd fc7f 	bl	8003300 <__aeabi_i2d>
 8005a02:	0002      	movs	r2, r0
 8005a04:	000b      	movs	r3, r1
 8005a06:	0011      	movs	r1, r2
 8005a08:	000c      	movs	r4, r1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	085d      	lsrs	r5, r3, #1
 8005a0e:	0022      	movs	r2, r4
 8005a10:	002b      	movs	r3, r5
 8005a12:	0010      	movs	r0, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bdb0      	pop	{r4, r5, r7, pc}

08005a1c <reset_debug_variables>:


bool need_logging = true;


void reset_debug_variables() {
 8005a1c:	b5b0      	push	{r4, r5, r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
	if (current_debug_buffer_pointer == last_trasmited_debug_buffer) {
 8005a20:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <reset_debug_variables+0x54>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b13      	ldr	r3, [pc, #76]	@ (8005a74 <reset_debug_variables+0x58>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d10d      	bne.n	8005a48 <reset_debug_variables+0x2c>
		need_logging = true;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <reset_debug_variables+0x5c>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
		memset(debug_buffer, 0, DEBUG_BUFFER_SIZE);
 8005a32:	2380      	movs	r3, #128	@ 0x80
 8005a34:	019a      	lsls	r2, r3, #6
 8005a36:	4b11      	ldr	r3, [pc, #68]	@ (8005a7c <reset_debug_variables+0x60>)
 8005a38:	2100      	movs	r1, #0
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f00d fa2c 	bl	8012e98 <memset>
		current_debug_buffer_pointer = debug_buffer;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <reset_debug_variables+0x54>)
 8005a42:	4a0e      	ldr	r2, [pc, #56]	@ (8005a7c <reset_debug_variables+0x60>)
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e00b      	b.n	8005a60 <reset_debug_variables+0x44>
	}
	else {
		transmit(
 8005a48:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <reset_debug_variables+0x64>)
 8005a4a:	681c      	ldr	r4, [r3, #0]
 8005a4c:	4b09      	ldr	r3, [pc, #36]	@ (8005a74 <reset_debug_variables+0x58>)
 8005a4e:	681d      	ldr	r5, [r3, #0]
 8005a50:	f000 f832 	bl	8005ab8 <get_debug_buffer_length_to_send>
 8005a54:	0003      	movs	r3, r0
 8005a56:	001a      	movs	r2, r3
 8005a58:	0029      	movs	r1, r5
 8005a5a:	0020      	movs	r0, r4
 8005a5c:	f000 f8d4 	bl	8005c08 <transmit>
			debug_uart, last_trasmited_debug_buffer,
			get_debug_buffer_length_to_send()
		);
	}
	last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005a60:	4b03      	ldr	r3, [pc, #12]	@ (8005a70 <reset_debug_variables+0x54>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <reset_debug_variables+0x58>)
 8005a66:	601a      	str	r2, [r3, #0]
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	20000058 	.word	0x20000058
 8005a74:	200024ac 	.word	0x200024ac
 8005a78:	2000005c 	.word	0x2000005c
 8005a7c:	200004ac 	.word	0x200004ac
 8005a80:	2000006c 	.word	0x2000006c

08005a84 <get_free_debug_buffer_size>:


inline size_t get_free_debug_buffer_size() {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	int32_t size = (int32_t)debug_buffer + (int32_t)DEBUG_BUFFER_SIZE - (int32_t)current_debug_buffer_pointer;
 8005a8a:	4b09      	ldr	r3, [pc, #36]	@ (8005ab0 <get_free_debug_buffer_size+0x2c>)
 8005a8c:	2280      	movs	r2, #128	@ 0x80
 8005a8e:	0192      	lsls	r2, r2, #6
 8005a90:	189a      	adds	r2, r3, r2
 8005a92:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <get_free_debug_buffer_size+0x30>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	607b      	str	r3, [r7, #4]

	if (size < 0) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	da01      	bge.n	8005aa4 <get_free_debug_buffer_size+0x20>
		size = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	607b      	str	r3, [r7, #4]
	}

	return static_cast<size_t>(size);
 8005aa4:	687b      	ldr	r3, [r7, #4]
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	200004ac 	.word	0x200004ac
 8005ab4:	20000058 	.word	0x20000058

08005ab8 <get_debug_buffer_length_to_send>:

inline uint16_t get_debug_buffer_length_to_send() {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
//	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
//	size = std::min(size, MAX_DEBUG_MESSAGE_SIZE);
	return current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005abc:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <get_debug_buffer_length_to_send+0x18>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b04      	ldr	r3, [pc, #16]	@ (8005ad4 <get_debug_buffer_length_to_send+0x1c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	b29b      	uxth	r3, r3
}
 8005ac8:	0018      	movs	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	20000058 	.word	0x20000058
 8005ad4:	200024ac 	.word	0x200024ac

08005ad8 <debug_enabled>:

uint8_t debug_enabled() {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	return DEBUG_ENABLED;
 8005adc:	2301      	movs	r3, #1
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <debug>:

void debug(const char * message, ...) {
 8005ae4:	b40f      	push	{r0, r1, r2, r3}
 8005ae6:	b590      	push	{r4, r7, lr}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
	if constexpr (DEBUG_ENABLED) {
		size_t max_buffer_size = get_free_debug_buffer_size();
 8005aec:	f7ff ffca 	bl	8005a84 <get_free_debug_buffer_size>
 8005af0:	0003      	movs	r3, r0
 8005af2:	60bb      	str	r3, [r7, #8]

		if (max_buffer_size > 0) {
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d058      	beq.n	8005bac <debug+0xc8>
			int16_t recorded = snprintf((char *)current_debug_buffer_pointer, max_buffer_size, "%lu ms: ", HAL_GetTick());
 8005afa:	4b31      	ldr	r3, [pc, #196]	@ (8005bc0 <debug+0xdc>)
 8005afc:	681c      	ldr	r4, [r3, #0]
 8005afe:	f002 f8ff 	bl	8007d00 <HAL_GetTick>
 8005b02:	0003      	movs	r3, r0
 8005b04:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc4 <debug+0xe0>)
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	0020      	movs	r0, r4
 8005b0a:	f00d f8ed 	bl	8012ce8 <sniprintf>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	1dbb      	adds	r3, r7, #6
 8005b12:	801a      	strh	r2, [r3, #0]

			uint16_t length = recorded > 0 ? (uint16_t)recorded : 0;
 8005b14:	1dbb      	adds	r3, r7, #6
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b21a      	sxth	r2, r3
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	da00      	bge.n	8005b20 <debug+0x3c>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	b21a      	sxth	r2, r3
 8005b22:	210e      	movs	r1, #14
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	801a      	strh	r2, [r3, #0]
//			uint16_t length = 0;

			if (max_buffer_size > length) {
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d93e      	bls.n	8005bb0 <debug+0xcc>
				max_buffer_size -= length;
 8005b32:	187b      	adds	r3, r7, r1
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	60bb      	str	r3, [r7, #8]

				va_list args;
				va_start (args, message);
 8005b3c:	2324      	movs	r3, #36	@ 0x24
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	603b      	str	r3, [r7, #0]
				recorded = vsnprintf((char *)(current_debug_buffer_pointer + length), max_buffer_size, message, args);
 8005b42:	4b1f      	ldr	r3, [pc, #124]	@ (8005bc0 <debug+0xdc>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	18d0      	adds	r0, r2, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	f00d f995 	bl	8012e80 <vsniprintf>
 8005b56:	0002      	movs	r2, r0
 8005b58:	1dbb      	adds	r3, r7, #6
 8005b5a:	801a      	strh	r2, [r3, #0]
				va_end (args);

				if (recorded > 0) {
 8005b5c:	1dbb      	adds	r3, r7, #6
 8005b5e:	2200      	movs	r2, #0
 8005b60:	5e9b      	ldrsh	r3, [r3, r2]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	dd11      	ble.n	8005b8a <debug+0xa6>
					length += recorded < (int16_t)max_buffer_size ? recorded : max_buffer_size;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	b21b      	sxth	r3, r3
 8005b6a:	1dba      	adds	r2, r7, #6
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5e52      	ldrsh	r2, [r2, r1]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	db02      	blt.n	8005b7a <debug+0x96>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	e001      	b.n	8005b7e <debug+0x9a>
 8005b7a:	1dbb      	adds	r3, r7, #6
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	210e      	movs	r1, #14
 8005b80:	187a      	adds	r2, r7, r1
 8005b82:	1879      	adds	r1, r7, r1
 8005b84:	8809      	ldrh	r1, [r1, #0]
 8005b86:	185b      	adds	r3, r3, r1
 8005b88:	8013      	strh	r3, [r2, #0]
				}

				current_debug_buffer_pointer += length;
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <debug+0xdc>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	230e      	movs	r3, #14
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	18d2      	adds	r2, r2, r3
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <debug+0xdc>)
 8005b98:	601a      	str	r2, [r3, #0]

				if (current_debug_buffer_pointer > (debug_buffer + 8192)) {
 8005b9a:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <debug+0xdc>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <debug+0xe4>)
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d905      	bls.n	8005bb0 <debug+0xcc>
					current_debug_buffer_pointer = debug_buffer + 8192;
 8005ba4:	4a08      	ldr	r2, [pc, #32]	@ (8005bc8 <debug+0xe4>)
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <debug+0xdc>)
 8005ba8:	601a      	str	r2, [r3, #0]
		}
		else {
			reset_debug_variables();
		}
	}
}
 8005baa:	e001      	b.n	8005bb0 <debug+0xcc>
			reset_debug_variables();
 8005bac:	f7ff ff36 	bl	8005a1c <reset_debug_variables>
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b005      	add	sp, #20
 8005bb6:	bc90      	pop	{r4, r7}
 8005bb8:	bc08      	pop	{r3}
 8005bba:	b004      	add	sp, #16
 8005bbc:	4718      	bx	r3
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	20000058 	.word	0x20000058
 8005bc4:	08016edc 	.word	0x08016edc
 8005bc8:	200024ac 	.word	0x200024ac

08005bcc <extended_debug>:

void extended_debug(const char * message, ...) {
 8005bcc:	b40f      	push	{r0, r1, r2, r3}
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	af00      	add	r7, sp, #0
		va_list args;
		va_start (args, message);
		debug(message, args);
		va_end (args);
	}
}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	bc08      	pop	{r3}
 8005bda:	b004      	add	sp, #16
 8005bdc:	4718      	bx	r3

08005bde <receive>:
//
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)str, len, 100);
//	HAL_UART_Transmit(debug_uart, (const uint8_t*)res, 10, 100);
//}

void receive(uart_t * uart, uint8_t * buffer, size_t size) {
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
	HAL_UART_AbortReceive(uart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	0018      	movs	r0, r3
 8005bee:	f006 fe77 	bl	800c8e0 <HAL_UART_AbortReceive>

	HAL_UART_Receive_IT(uart, buffer, size);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f006 fe12 	bl	800c824 <HAL_UART_Receive_IT>
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b004      	add	sp, #16
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <transmit>:

void transmit(uart_t * uart, uint8_t * buffer, uint16_t size) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	1dbb      	adds	r3, r7, #6
 8005c14:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(uart, buffer, size);
 8005c16:	1dbb      	adds	r3, r7, #6
 8005c18:	881a      	ldrh	r2, [r3, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f006 fd58 	bl	800c6d4 <HAL_UART_Transmit_IT>
}
 8005c24:	46c0      	nop			@ (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <send_debug_messages>:

void send_debug_messages() {
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
	uint16_t size = get_debug_buffer_length_to_send();
 8005c32:	1dbc      	adds	r4, r7, #6
 8005c34:	f7ff ff40 	bl	8005ab8 <get_debug_buffer_length_to_send>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	8023      	strh	r3, [r4, #0]

	if (need_logging && size > 0) {
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c78 <send_debug_messages+0x4c>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d015      	beq.n	8005c70 <send_debug_messages+0x44>
 8005c44:	1dbb      	adds	r3, r7, #6
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d011      	beq.n	8005c70 <send_debug_messages+0x44>
		transmit(debug_uart, debug_buffer, size);
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <send_debug_messages+0x50>)
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	1dbb      	adds	r3, r7, #6
 8005c52:	881a      	ldrh	r2, [r3, #0]
 8005c54:	4b0a      	ldr	r3, [pc, #40]	@ (8005c80 <send_debug_messages+0x54>)
 8005c56:	0019      	movs	r1, r3
 8005c58:	f7ff ffd6 	bl	8005c08 <transmit>
		need_logging = false;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <send_debug_messages+0x4c>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
		last_trasmited_debug_buffer += size;
 8005c62:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <send_debug_messages+0x58>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	1dbb      	adds	r3, r7, #6
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	18d2      	adds	r2, r2, r3
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <send_debug_messages+0x58>)
 8005c6e:	601a      	str	r2, [r3, #0]
	}
}
 8005c70:	46c0      	nop			@ (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b003      	add	sp, #12
 8005c76:	bd90      	pop	{r4, r7, pc}
 8005c78:	2000005c 	.word	0x2000005c
 8005c7c:	2000006c 	.word	0x2000006c
 8005c80:	200004ac 	.word	0x200004ac
 8005c84:	200024ac 	.word	0x200024ac

08005c88 <send_all_debug_buffer_blocking>:

void send_all_debug_buffer_blocking() {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	size_t size = current_debug_buffer_pointer - last_trasmited_debug_buffer;
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <send_all_debug_buffer_blocking+0x2c>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <send_all_debug_buffer_blocking+0x30>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(debug_uart, debug_buffer, size, 100);
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <send_all_debug_buffer_blocking+0x34>)
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	4907      	ldr	r1, [pc, #28]	@ (8005cc0 <send_all_debug_buffer_blocking+0x38>)
 8005ca4:	2364      	movs	r3, #100	@ 0x64
 8005ca6:	f006 fc71 	bl	800c58c <HAL_UART_Transmit>
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	20000058 	.word	0x20000058
 8005cb8:	200024ac 	.word	0x200024ac
 8005cbc:	2000006c 	.word	0x2000006c
 8005cc0:	200004ac 	.word	0x200004ac

08005cc4 <_Z41__static_initialization_and_destruction_0ii>:
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d107      	bne.n	8005ce4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	4a05      	ldr	r2, [pc, #20]	@ (8005cec <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <_Z41__static_initialization_and_destruction_0ii+0x20>
uint8_t * last_trasmited_debug_buffer = current_debug_buffer_pointer;
 8005cdc:	4b04      	ldr	r3, [pc, #16]	@ (8005cf0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	46c0      	nop			@ (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	0000ffff 	.word	0x0000ffff
 8005cf0:	20000058 	.word	0x20000058
 8005cf4:	200024ac 	.word	0x200024ac

08005cf8 <_GLOBAL__sub_I_receive_buffer>:
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <_GLOBAL__sub_I_receive_buffer+0x14>)
 8005cfe:	0019      	movs	r1, r3
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7ff ffdf 	bl	8005cc4 <_Z41__static_initialization_and_destruction_0ii>
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	0000ffff 	.word	0x0000ffff

08005d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b08b      	sub	sp, #44	@ 0x2c
 8005d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d16:	2414      	movs	r4, #20
 8005d18:	193b      	adds	r3, r7, r4
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	2314      	movs	r3, #20
 8005d1e:	001a      	movs	r2, r3
 8005d20:	2100      	movs	r1, #0
 8005d22:	f00d f8b9 	bl	8012e98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d26:	4bb6      	ldr	r3, [pc, #728]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d2a:	4bb5      	ldr	r3, [pc, #724]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d2c:	2104      	movs	r1, #4
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d32:	4bb3      	ldr	r3, [pc, #716]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d36:	2204      	movs	r2, #4
 8005d38:	4013      	ands	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d3e:	4bb0      	ldr	r3, [pc, #704]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d42:	4baf      	ldr	r3, [pc, #700]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d44:	2120      	movs	r1, #32
 8005d46:	430a      	orrs	r2, r1
 8005d48:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d4a:	4bad      	ldr	r3, [pc, #692]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4e:	2220      	movs	r2, #32
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d56:	4baa      	ldr	r3, [pc, #680]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d62:	4ba7      	ldr	r3, [pc, #668]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d66:	2201      	movs	r2, #1
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d72:	4ba3      	ldr	r3, [pc, #652]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d74:	2102      	movs	r1, #2
 8005d76:	430a      	orrs	r2, r1
 8005d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d7a:	4ba1      	ldr	r3, [pc, #644]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7e:	2202      	movs	r2, #2
 8005d80:	4013      	ands	r3, r2
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d86:	4b9e      	ldr	r3, [pc, #632]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d8a:	4b9d      	ldr	r3, [pc, #628]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d8c:	2108      	movs	r1, #8
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d92:	4b9b      	ldr	r3, [pc, #620]	@ (8006000 <MX_GPIO_Init+0x2f0>)
 8005d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d96:	2208      	movs	r2, #8
 8005d98:	4013      	ands	r3, r2
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GAIN1_Pin|GAIN0_Pin, GPIO_PIN_SET);
 8005d9e:	4b99      	ldr	r3, [pc, #612]	@ (8006004 <MX_GPIO_Init+0x2f4>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	2103      	movs	r1, #3
 8005da4:	0018      	movs	r0, r3
 8005da6:	f002 fcba 	bl	800871e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|TEMP_Pin|FLASH_NSS_Pin|DBG_GPIO1_Pin, GPIO_PIN_RESET);
 8005daa:	23a3      	movs	r3, #163	@ 0xa3
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4895      	ldr	r0, [pc, #596]	@ (8006004 <MX_GPIO_Init+0x2f4>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	0019      	movs	r1, r3
 8005db4:	f002 fcb3 	bl	800871e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCLK_Pin|SPEED_Pin|FLASH_HOLD_Pin, GPIO_PIN_RESET);
 8005db8:	4993      	ldr	r1, [pc, #588]	@ (8006008 <MX_GPIO_Init+0x2f8>)
 8005dba:	23a0      	movs	r3, #160	@ 0xa0
 8005dbc:	05db      	lsls	r3, r3, #23
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f002 fcac 	bl	800871e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PDWN_GPIO_Port, PDWN_Pin, GPIO_PIN_SET);
 8005dc6:	23a0      	movs	r3, #160	@ 0xa0
 8005dc8:	05db      	lsls	r3, r3, #23
 8005dca:	2201      	movs	r2, #1
 8005dcc:	2104      	movs	r1, #4
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f002 fca5 	bl	800871e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_CS_GPIO_Port, ACCEL_CS_Pin, GPIO_PIN_RESET);
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	015b      	lsls	r3, r3, #5
 8005dd8:	488c      	ldr	r0, [pc, #560]	@ (800600c <MX_GPIO_Init+0x2fc>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	0019      	movs	r1, r3
 8005dde:	f002 fc9e 	bl	800871e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_WP_Pin|DBG_GPIO2_Pin|LED_ERROR_Pin|LED_STATUS_Pin
 8005de2:	498b      	ldr	r1, [pc, #556]	@ (8006010 <MX_GPIO_Init+0x300>)
 8005de4:	4b8b      	ldr	r3, [pc, #556]	@ (8006014 <MX_GPIO_Init+0x304>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	0018      	movs	r0, r3
 8005dea:	f002 fc98 	bl	800871e <HAL_GPIO_WritePin>
                          |USART2DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GAIN1_Pin|GAIN0_Pin;
 8005dee:	193b      	adds	r3, r7, r4
 8005df0:	2203      	movs	r2, #3
 8005df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005df4:	193b      	adds	r3, r7, r4
 8005df6:	2201      	movs	r2, #1
 8005df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e00:	193b      	adds	r3, r7, r4
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e06:	193b      	adds	r3, r7, r4
 8005e08:	4a7e      	ldr	r2, [pc, #504]	@ (8006004 <MX_GPIO_Init+0x2f4>)
 8005e0a:	0019      	movs	r1, r3
 8005e0c:	0010      	movs	r0, r2
 8005e0e:	f002 fb05 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A0_Pin|TEMP_Pin;
 8005e12:	193b      	adds	r3, r7, r4
 8005e14:	220c      	movs	r2, #12
 8005e16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e18:	193b      	adds	r3, r7, r4
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e1e:	193b      	adds	r3, r7, r4
 8005e20:	2202      	movs	r2, #2
 8005e22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	2200      	movs	r2, #0
 8005e28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e2a:	193b      	adds	r3, r7, r4
 8005e2c:	4a75      	ldr	r2, [pc, #468]	@ (8006004 <MX_GPIO_Init+0x2f4>)
 8005e2e:	0019      	movs	r1, r3
 8005e30:	0010      	movs	r0, r2
 8005e32:	f002 faf3 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY_DROUT_Pin;
 8005e36:	193b      	adds	r3, r7, r4
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e3c:	193b      	adds	r3, r7, r4
 8005e3e:	2200      	movs	r2, #0
 8005e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e42:	193b      	adds	r3, r7, r4
 8005e44:	2200      	movs	r2, #0
 8005e46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DRDY_DROUT_GPIO_Port, &GPIO_InitStruct);
 8005e48:	193a      	adds	r2, r7, r4
 8005e4a:	23a0      	movs	r3, #160	@ 0xa0
 8005e4c:	05db      	lsls	r3, r3, #23
 8005e4e:	0011      	movs	r1, r2
 8005e50:	0018      	movs	r0, r3
 8005e52:	f002 fae3 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SCLK_Pin|SPEED_Pin;
 8005e56:	193b      	adds	r3, r7, r4
 8005e58:	220a      	movs	r2, #10
 8005e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e5c:	193b      	adds	r3, r7, r4
 8005e5e:	2201      	movs	r2, #1
 8005e60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e62:	193b      	adds	r3, r7, r4
 8005e64:	2202      	movs	r2, #2
 8005e66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e68:	193b      	adds	r3, r7, r4
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6e:	193a      	adds	r2, r7, r4
 8005e70:	23a0      	movs	r3, #160	@ 0xa0
 8005e72:	05db      	lsls	r3, r3, #23
 8005e74:	0011      	movs	r1, r2
 8005e76:	0018      	movs	r0, r3
 8005e78:	f002 fad0 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDWN_Pin;
 8005e7c:	193b      	adds	r3, r7, r4
 8005e7e:	2204      	movs	r2, #4
 8005e80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e82:	193b      	adds	r3, r7, r4
 8005e84:	2201      	movs	r2, #1
 8005e86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e88:	193b      	adds	r3, r7, r4
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e8e:	193b      	adds	r3, r7, r4
 8005e90:	2200      	movs	r2, #0
 8005e92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PDWN_GPIO_Port, &GPIO_InitStruct);
 8005e94:	193a      	adds	r2, r7, r4
 8005e96:	23a0      	movs	r3, #160	@ 0xa0
 8005e98:	05db      	lsls	r3, r3, #23
 8005e9a:	0011      	movs	r1, r2
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f002 fabd 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_Z_SELECT_Pin;
 8005ea2:	193b      	adds	r3, r7, r4
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ea8:	193b      	adds	r3, r7, r4
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eae:	193b      	adds	r3, r7, r4
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(X_Z_SELECT_GPIO_Port, &GPIO_InitStruct);
 8005eb4:	193b      	adds	r3, r7, r4
 8005eb6:	4a55      	ldr	r2, [pc, #340]	@ (800600c <MX_GPIO_Init+0x2fc>)
 8005eb8:	0019      	movs	r1, r3
 8005eba:	0010      	movs	r0, r2
 8005ebc:	f002 faae 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 8005ec0:	0021      	movs	r1, r4
 8005ec2:	187b      	adds	r3, r7, r1
 8005ec4:	2280      	movs	r2, #128	@ 0x80
 8005ec6:	0152      	lsls	r2, r2, #5
 8005ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eca:	000c      	movs	r4, r1
 8005ecc:	193b      	adds	r3, r7, r4
 8005ece:	2201      	movs	r2, #1
 8005ed0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed2:	193b      	adds	r3, r7, r4
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed8:	193b      	adds	r3, r7, r4
 8005eda:	2200      	movs	r2, #0
 8005edc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 8005ede:	193b      	adds	r3, r7, r4
 8005ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800600c <MX_GPIO_Init+0x2fc>)
 8005ee2:	0019      	movs	r1, r3
 8005ee4:	0010      	movs	r0, r2
 8005ee6:	f002 fa99 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin;
 8005eea:	193b      	adds	r3, r7, r4
 8005eec:	2280      	movs	r2, #128	@ 0x80
 8005eee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ef0:	193b      	adds	r3, r7, r4
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef6:	193b      	adds	r3, r7, r4
 8005ef8:	2200      	movs	r2, #0
 8005efa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efc:	193b      	adds	r3, r7, r4
 8005efe:	2200      	movs	r2, #0
 8005f00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_NSS_GPIO_Port, &GPIO_InitStruct);
 8005f02:	193b      	adds	r3, r7, r4
 8005f04:	4a3f      	ldr	r2, [pc, #252]	@ (8006004 <MX_GPIO_Init+0x2f4>)
 8005f06:	0019      	movs	r1, r3
 8005f08:	0010      	movs	r0, r2
 8005f0a:	f002 fa87 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_WP_Pin|LED_ERROR_Pin|LED_STATUS_Pin;
 8005f0e:	0021      	movs	r1, r4
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	2283      	movs	r2, #131	@ 0x83
 8005f14:	0092      	lsls	r2, r2, #2
 8005f16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f18:	000c      	movs	r4, r1
 8005f1a:	193b      	adds	r3, r7, r4
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	2200      	movs	r2, #0
 8005f24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f26:	193b      	adds	r3, r7, r4
 8005f28:	2200      	movs	r2, #0
 8005f2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f2c:	193b      	adds	r3, r7, r4
 8005f2e:	4a39      	ldr	r2, [pc, #228]	@ (8006014 <MX_GPIO_Init+0x304>)
 8005f30:	0019      	movs	r1, r3
 8005f32:	0010      	movs	r0, r2
 8005f34:	f002 fa72 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_HOLD_Pin;
 8005f38:	0021      	movs	r1, r4
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	2280      	movs	r2, #128	@ 0x80
 8005f3e:	00d2      	lsls	r2, r2, #3
 8005f40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f42:	000c      	movs	r4, r1
 8005f44:	193b      	adds	r3, r7, r4
 8005f46:	2201      	movs	r2, #1
 8005f48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4a:	193b      	adds	r3, r7, r4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f50:	193b      	adds	r3, r7, r4
 8005f52:	2200      	movs	r2, #0
 8005f54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_HOLD_GPIO_Port, &GPIO_InitStruct);
 8005f56:	193a      	adds	r2, r7, r4
 8005f58:	23a0      	movs	r3, #160	@ 0xa0
 8005f5a:	05db      	lsls	r3, r3, #23
 8005f5c:	0011      	movs	r1, r2
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f002 fa5c 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO1_Pin;
 8005f64:	0021      	movs	r1, r4
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	2280      	movs	r2, #128	@ 0x80
 8005f6a:	0092      	lsls	r2, r2, #2
 8005f6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f6e:	000c      	movs	r4, r1
 8005f70:	193b      	adds	r3, r7, r4
 8005f72:	2201      	movs	r2, #1
 8005f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f76:	193b      	adds	r3, r7, r4
 8005f78:	2200      	movs	r2, #0
 8005f7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7c:	193b      	adds	r3, r7, r4
 8005f7e:	2203      	movs	r2, #3
 8005f80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8005f82:	193b      	adds	r3, r7, r4
 8005f84:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <MX_GPIO_Init+0x2f4>)
 8005f86:	0019      	movs	r1, r3
 8005f88:	0010      	movs	r0, r2
 8005f8a:	f002 fa47 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_pin_3_Pin;
 8005f8e:	193b      	adds	r3, r7, r4
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f94:	193b      	adds	r3, r7, r4
 8005f96:	2200      	movs	r2, #0
 8005f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f9a:	193b      	adds	r3, r7, r4
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Test_pin_3_GPIO_Port, &GPIO_InitStruct);
 8005fa0:	193b      	adds	r3, r7, r4
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <MX_GPIO_Init+0x304>)
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	0010      	movs	r0, r2
 8005fa8:	f002 fa38 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DBG_GPIO2_Pin;
 8005fac:	193b      	adds	r3, r7, r4
 8005fae:	2202      	movs	r2, #2
 8005fb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fb2:	193b      	adds	r3, r7, r4
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb8:	193b      	adds	r3, r7, r4
 8005fba:	2200      	movs	r2, #0
 8005fbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fbe:	193b      	adds	r3, r7, r4
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_GPIO2_GPIO_Port, &GPIO_InitStruct);
 8005fc4:	193b      	adds	r3, r7, r4
 8005fc6:	4a13      	ldr	r2, [pc, #76]	@ (8006014 <MX_GPIO_Init+0x304>)
 8005fc8:	0019      	movs	r1, r3
 8005fca:	0010      	movs	r0, r2
 8005fcc:	f002 fa26 	bl	800841c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2DE_Pin;
 8005fd0:	0021      	movs	r1, r4
 8005fd2:	187b      	adds	r3, r7, r1
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fd8:	187b      	adds	r3, r7, r1
 8005fda:	2201      	movs	r2, #1
 8005fdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005fde:	187b      	adds	r3, r7, r1
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USART2DE_GPIO_Port, &GPIO_InitStruct);
 8005fea:	187b      	adds	r3, r7, r1
 8005fec:	4a09      	ldr	r2, [pc, #36]	@ (8006014 <MX_GPIO_Init+0x304>)
 8005fee:	0019      	movs	r1, r3
 8005ff0:	0010      	movs	r0, r2
 8005ff2:	f002 fa13 	bl	800841c <HAL_GPIO_Init>

}
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b00b      	add	sp, #44	@ 0x2c
 8005ffc:	bd90      	pop	{r4, r7, pc}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	40021000 	.word	0x40021000
 8006004:	50000800 	.word	0x50000800
 8006008:	0000040a 	.word	0x0000040a
 800600c:	50000400 	.word	0x50000400
 8006010:	0000021e 	.word	0x0000021e
 8006014:	50000c00 	.word	0x50000c00

08006018 <hdc1080_init>:
#include "sensors_state.h"
#include "debug.h"

I2C_HandleTypeDef* hi2c_hdc1080;

bool hdc1080_init(I2C_HandleTypeDef* _hi2c_hdc1080, Temp_Reso Temperature_Resolution_x_bit, Humi_Reso Humidity_Resolution_x_bit)	{
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601a:	b089      	sub	sp, #36	@ 0x24
 800601c:	af04      	add	r7, sp, #16
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	0008      	movs	r0, r1
 8006022:	0011      	movs	r1, r2
 8006024:	1cfb      	adds	r3, r7, #3
 8006026:	1c02      	adds	r2, r0, #0
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	1cbb      	adds	r3, r7, #2
 800602c:	1c0a      	adds	r2, r1, #0
 800602e:	701a      	strb	r2, [r3, #0]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value = 0x1000;
 8006030:	210e      	movs	r1, #14
 8006032:	187b      	adds	r3, r7, r1
 8006034:	2280      	movs	r2, #128	@ 0x80
 8006036:	0152      	lsls	r2, r2, #5
 8006038:	801a      	strh	r2, [r3, #0]
	uint8_t data_send[2];
	hi2c_hdc1080 = _hi2c_hdc1080;
 800603a:	4b2f      	ldr	r3, [pc, #188]	@ (80060f8 <hdc1080_init+0xe0>)
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit) {
 8006040:	1cfb      	adds	r3, r7, #3
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <hdc1080_init+0x3e>
		config_reg_value |= (1 << 10); //11 bit
 8006048:	187b      	adds	r3, r7, r1
 800604a:	187a      	adds	r2, r7, r1
 800604c:	8812      	ldrh	r2, [r2, #0]
 800604e:	2180      	movs	r1, #128	@ 0x80
 8006050:	00c9      	lsls	r1, r1, #3
 8006052:	430a      	orrs	r2, r1
 8006054:	801a      	strh	r2, [r3, #0]
	}

	switch(Humidity_Resolution_x_bit) {
 8006056:	1cbb      	adds	r3, r7, #2
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d00d      	beq.n	800607a <hdc1080_init+0x62>
 800605e:	dc16      	bgt.n	800608e <hdc1080_init+0x76>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <hdc1080_init+0x74>
 8006064:	2b01      	cmp	r3, #1
 8006066:	d112      	bne.n	800608e <hdc1080_init+0x76>
		case Humidity_Resolution_11_bit:
			config_reg_value |= (1 << 8);
 8006068:	220e      	movs	r2, #14
 800606a:	18bb      	adds	r3, r7, r2
 800606c:	18ba      	adds	r2, r7, r2
 800606e:	8812      	ldrh	r2, [r2, #0]
 8006070:	2180      	movs	r1, #128	@ 0x80
 8006072:	0049      	lsls	r1, r1, #1
 8006074:	430a      	orrs	r2, r1
 8006076:	801a      	strh	r2, [r3, #0]
			break;
 8006078:	e009      	b.n	800608e <hdc1080_init+0x76>
		case Humidity_Resolution_8_bit:
			config_reg_value |= (1 << 9);
 800607a:	220e      	movs	r2, #14
 800607c:	18bb      	adds	r3, r7, r2
 800607e:	18ba      	adds	r2, r7, r2
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	2180      	movs	r1, #128	@ 0x80
 8006084:	0089      	lsls	r1, r1, #2
 8006086:	430a      	orrs	r2, r1
 8006088:	801a      	strh	r2, [r3, #0]
			break;
 800608a:	e000      	b.n	800608e <hdc1080_init+0x76>
		case Humidity_Resolution_14_bit:
			break;
 800608c:	46c0      	nop			@ (mov r8, r8)
	}

	data_send[0] = (config_reg_value >> 8);
 800608e:	210e      	movs	r1, #14
 8006090:	187b      	adds	r3, r7, r1
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	b29b      	uxth	r3, r3
 8006098:	b2da      	uxtb	r2, r3
 800609a:	2508      	movs	r5, #8
 800609c:	197b      	adds	r3, r7, r5
 800609e:	701a      	strb	r2, [r3, #0]
	data_send[1] = (config_reg_value & 0x00ff);
 80060a0:	187b      	adds	r3, r7, r1
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	197b      	adds	r3, r7, r5
 80060a8:	705a      	strb	r2, [r3, #1]


	HAL_StatusTypeDef status = HAL_OK;
 80060aa:	260d      	movs	r6, #13
 80060ac:	19bb      	adds	r3, r7, r6
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(hi2c_hdc1080, HDC_1080_ADDR, 10, 100);
 80060b2:	4b11      	ldr	r3, [pc, #68]	@ (80060f8 <hdc1080_init+0xe0>)
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	19bc      	adds	r4, r7, r6
 80060b8:	2364      	movs	r3, #100	@ 0x64
 80060ba:	220a      	movs	r2, #10
 80060bc:	2180      	movs	r1, #128	@ 0x80
 80060be:	f003 f8a1 	bl	8009204 <HAL_I2C_IsDeviceReady>
 80060c2:	0003      	movs	r3, r0
 80060c4:	7023      	strb	r3, [r4, #0]
	if(status == HAL_OK) {
 80060c6:	19bb      	adds	r3, r7, r6
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <hdc1080_init+0xd6>
		HAL_I2C_Mem_Write(hi2c_hdc1080, HDC_1080_ADDR, Configuration_register_add, I2C_MEMADD_SIZE_8BIT, data_send, 2, 1000);
 80060ce:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <hdc1080_init+0xe0>)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	23fa      	movs	r3, #250	@ 0xfa
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	2302      	movs	r3, #2
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	197b      	adds	r3, r7, r5
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2301      	movs	r3, #1
 80060e2:	2202      	movs	r2, #2
 80060e4:	2180      	movs	r1, #128	@ 0x80
 80060e6:	f002 fe2b 	bl	8008d40 <HAL_I2C_Mem_Write>
		return true;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <hdc1080_init+0xd8>
	} else {
		return false;
 80060ee:	2300      	movs	r3, #0
	}
}
 80060f0:	0018      	movs	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b005      	add	sp, #20
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f8:	200024b0 	.word	0x200024b0

080060fc <hdc1080_start_measurement>:


int8_t hdc1080_start_measurement(float * temperature, float * humidity)	{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b089      	sub	sp, #36	@ 0x24
 8006100:	af02      	add	r7, sp, #8
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]

	uint8_t receive_data[4];
	uint16_t temp_x, humi_x;
	uint8_t send_data = Temperature_register_add;
 8006106:	210f      	movs	r1, #15
 8006108:	187b      	adds	r3, r7, r1
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(hi2c_hdc1080, HDC_1080_ADDR, &send_data, 1, 100);
 800610e:	4b3a      	ldr	r3, [pc, #232]	@ (80061f8 <hdc1080_start_measurement+0xfc>)
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	187a      	adds	r2, r7, r1
 8006114:	2364      	movs	r3, #100	@ 0x64
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2301      	movs	r3, #1
 800611a:	2180      	movs	r1, #128	@ 0x80
 800611c:	f002 fbde 	bl	80088dc <HAL_I2C_Master_Transmit>

 	vTaskDelay(20);
 8006120:	2014      	movs	r0, #20
 8006122:	f009 ffc1 	bl	80100a8 <vTaskDelay>

	/* Read temperature and humidity */
 	HAL_I2C_Master_Receive(hi2c_hdc1080, HDC_1080_ADDR, receive_data, 4, 100);
 8006126:	4b34      	ldr	r3, [pc, #208]	@ (80061f8 <hdc1080_start_measurement+0xfc>)
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	2410      	movs	r4, #16
 800612c:	193a      	adds	r2, r7, r4
 800612e:	2364      	movs	r3, #100	@ 0x64
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2304      	movs	r3, #4
 8006134:	2180      	movs	r1, #128	@ 0x80
 8006136:	f002 fcfb 	bl	8008b30 <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0] << 8) | receive_data[1]);
 800613a:	0021      	movs	r1, r4
 800613c:	187b      	adds	r3, r7, r1
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	b21a      	sxth	r2, r3
 8006144:	187b      	adds	r3, r7, r1
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	b21b      	sxth	r3, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	b21a      	sxth	r2, r3
 800614e:	2016      	movs	r0, #22
 8006150:	183b      	adds	r3, r7, r0
 8006152:	801a      	strh	r2, [r3, #0]
	humi_x =((receive_data[2] << 8) | receive_data[3]);
 8006154:	187b      	adds	r3, r7, r1
 8006156:	789b      	ldrb	r3, [r3, #2]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	b21a      	sxth	r2, r3
 800615c:	187b      	adds	r3, r7, r1
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	b21b      	sxth	r3, r3
 8006162:	4313      	orrs	r3, r2
 8006164:	b21a      	sxth	r2, r3
 8006166:	2414      	movs	r4, #20
 8006168:	193b      	adds	r3, r7, r4
 800616a:	801a      	strh	r2, [r3, #0]

	*temperature=((temp_x / 65536.0) * 165.0) - 40.0;
 800616c:	183b      	adds	r3, r7, r0
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	0018      	movs	r0, r3
 8006172:	f7fd f8c5 	bl	8003300 <__aeabi_i2d>
 8006176:	2200      	movs	r2, #0
 8006178:	4b20      	ldr	r3, [pc, #128]	@ (80061fc <hdc1080_start_measurement+0x100>)
 800617a:	f7fb fdbb 	bl	8001cf4 <__aeabi_ddiv>
 800617e:	0002      	movs	r2, r0
 8006180:	000b      	movs	r3, r1
 8006182:	0010      	movs	r0, r2
 8006184:	0019      	movs	r1, r3
 8006186:	2200      	movs	r2, #0
 8006188:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <hdc1080_start_measurement+0x104>)
 800618a:	f7fc f9f7 	bl	800257c <__aeabi_dmul>
 800618e:	0002      	movs	r2, r0
 8006190:	000b      	movs	r3, r1
 8006192:	0010      	movs	r0, r2
 8006194:	0019      	movs	r1, r3
 8006196:	2200      	movs	r2, #0
 8006198:	4b1a      	ldr	r3, [pc, #104]	@ (8006204 <hdc1080_start_measurement+0x108>)
 800619a:	f7fc fcb7 	bl	8002b0c <__aeabi_dsub>
 800619e:	0002      	movs	r2, r0
 80061a0:	000b      	movs	r3, r1
 80061a2:	0010      	movs	r0, r2
 80061a4:	0019      	movs	r1, r3
 80061a6:	f7fd f945 	bl	8003434 <__aeabi_d2f>
 80061aa:	1c02      	adds	r2, r0, #0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	*humidity=(uint8_t)((humi_x / 65536.0) * 100.0);
 80061b0:	193b      	adds	r3, r7, r4
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7fd f8a3 	bl	8003300 <__aeabi_i2d>
 80061ba:	2200      	movs	r2, #0
 80061bc:	4b0f      	ldr	r3, [pc, #60]	@ (80061fc <hdc1080_start_measurement+0x100>)
 80061be:	f7fb fd99 	bl	8001cf4 <__aeabi_ddiv>
 80061c2:	0002      	movs	r2, r0
 80061c4:	000b      	movs	r3, r1
 80061c6:	0010      	movs	r0, r2
 80061c8:	0019      	movs	r1, r3
 80061ca:	2200      	movs	r2, #0
 80061cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <hdc1080_start_measurement+0x10c>)
 80061ce:	f7fc f9d5 	bl	800257c <__aeabi_dmul>
 80061d2:	0002      	movs	r2, r0
 80061d4:	000b      	movs	r3, r1
 80061d6:	0010      	movs	r0, r2
 80061d8:	0019      	movs	r1, r3
 80061da:	f7fa f9d7 	bl	800058c <__aeabi_d2uiz>
 80061de:	0003      	movs	r3, r0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7fb f9e0 	bl	80015a8 <__aeabi_ui2f>
 80061e8:	1c02      	adds	r2, r0, #0
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	601a      	str	r2, [r3, #0]

	return true;
 80061ee:	2301      	movs	r3, #1
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b007      	add	sp, #28
 80061f6:	bd90      	pop	{r4, r7, pc}
 80061f8:	200024b0 	.word	0x200024b0
 80061fc:	40f00000 	.word	0x40f00000
 8006200:	4064a000 	.word	0x4064a000
 8006204:	40440000 	.word	0x40440000
 8006208:	40590000 	.word	0x40590000

0800620c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006210:	4b1b      	ldr	r3, [pc, #108]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006212:	4a1c      	ldr	r2, [pc, #112]	@ (8006284 <MX_I2C2_Init+0x78>)
 8006214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8006216:	4b1a      	ldr	r3, [pc, #104]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006218:	4a1b      	ldr	r2, [pc, #108]	@ (8006288 <MX_I2C2_Init+0x7c>)
 800621a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800621c:	4b18      	ldr	r3, [pc, #96]	@ (8006280 <MX_I2C2_Init+0x74>)
 800621e:	2200      	movs	r2, #0
 8006220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006222:	4b17      	ldr	r3, [pc, #92]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006224:	2201      	movs	r2, #1
 8006226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006228:	4b15      	ldr	r3, [pc, #84]	@ (8006280 <MX_I2C2_Init+0x74>)
 800622a:	2200      	movs	r2, #0
 800622c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800622e:	4b14      	ldr	r3, [pc, #80]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006230:	2200      	movs	r2, #0
 8006232:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006234:	4b12      	ldr	r3, [pc, #72]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006236:	2200      	movs	r2, #0
 8006238:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800623a:	4b11      	ldr	r3, [pc, #68]	@ (8006280 <MX_I2C2_Init+0x74>)
 800623c:	2200      	movs	r2, #0
 800623e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006240:	4b0f      	ldr	r3, [pc, #60]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006242:	2200      	movs	r2, #0
 8006244:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006246:	4b0e      	ldr	r3, [pc, #56]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006248:	0018      	movs	r0, r3
 800624a:	f002 faa1 	bl	8008790 <HAL_I2C_Init>
 800624e:	1e03      	subs	r3, r0, #0
 8006250:	d001      	beq.n	8006256 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006252:	f000 fda5 	bl	8006da0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006256:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <MX_I2C2_Init+0x74>)
 8006258:	2100      	movs	r1, #0
 800625a:	0018      	movs	r0, r3
 800625c:	f003 fc68 	bl	8009b30 <HAL_I2CEx_ConfigAnalogFilter>
 8006260:	1e03      	subs	r3, r0, #0
 8006262:	d001      	beq.n	8006268 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006264:	f000 fd9c 	bl	8006da0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006268:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <MX_I2C2_Init+0x74>)
 800626a:	2100      	movs	r1, #0
 800626c:	0018      	movs	r0, r3
 800626e:	f003 fcab 	bl	8009bc8 <HAL_I2CEx_ConfigDigitalFilter>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d001      	beq.n	800627a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006276:	f000 fd93 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	200024b4 	.word	0x200024b4
 8006284:	40005800 	.word	0x40005800
 8006288:	10707dbc 	.word	0x10707dbc

0800628c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b08b      	sub	sp, #44	@ 0x2c
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006294:	2414      	movs	r4, #20
 8006296:	193b      	adds	r3, r7, r4
 8006298:	0018      	movs	r0, r3
 800629a:	2314      	movs	r3, #20
 800629c:	001a      	movs	r2, r3
 800629e:	2100      	movs	r1, #0
 80062a0:	f00c fdfa 	bl	8012e98 <memset>
  if(i2cHandle->Instance==I2C2)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006318 <HAL_I2C_MspInit+0x8c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d130      	bne.n	8006310 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062ae:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <HAL_I2C_MspInit+0x90>)
 80062b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062b2:	4b1a      	ldr	r3, [pc, #104]	@ (800631c <HAL_I2C_MspInit+0x90>)
 80062b4:	2102      	movs	r1, #2
 80062b6:	430a      	orrs	r2, r1
 80062b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80062ba:	4b18      	ldr	r3, [pc, #96]	@ (800631c <HAL_I2C_MspInit+0x90>)
 80062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062be:	2202      	movs	r2, #2
 80062c0:	4013      	ands	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C2_SCL_Pin|SENSOR_I2C2_SDA_Pin;
 80062c6:	193b      	adds	r3, r7, r4
 80062c8:	22c0      	movs	r2, #192	@ 0xc0
 80062ca:	01d2      	lsls	r2, r2, #7
 80062cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80062ce:	0021      	movs	r1, r4
 80062d0:	187b      	adds	r3, r7, r1
 80062d2:	2212      	movs	r2, #18
 80062d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	2200      	movs	r2, #0
 80062da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062dc:	187b      	adds	r3, r7, r1
 80062de:	2200      	movs	r2, #0
 80062e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	2206      	movs	r2, #6
 80062e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006320 <HAL_I2C_MspInit+0x94>)
 80062ec:	0019      	movs	r1, r3
 80062ee:	0010      	movs	r0, r2
 80062f0:	f002 f894 	bl	800841c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80062f4:	4b09      	ldr	r3, [pc, #36]	@ (800631c <HAL_I2C_MspInit+0x90>)
 80062f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062f8:	4b08      	ldr	r3, [pc, #32]	@ (800631c <HAL_I2C_MspInit+0x90>)
 80062fa:	2180      	movs	r1, #128	@ 0x80
 80062fc:	03c9      	lsls	r1, r1, #15
 80062fe:	430a      	orrs	r2, r1
 8006300:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006302:	4b06      	ldr	r3, [pc, #24]	@ (800631c <HAL_I2C_MspInit+0x90>)
 8006304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	03db      	lsls	r3, r3, #15
 800630a:	4013      	ands	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006310:	46c0      	nop			@ (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	b00b      	add	sp, #44	@ 0x2c
 8006316:	bd90      	pop	{r4, r7, pc}
 8006318:	40005800 	.word	0x40005800
 800631c:	40021000 	.word	0x40021000
 8006320:	50000400 	.word	0x50000400

08006324 <DATA_RATE_TO_TIME>:
	}

	return range_value;
}

float DATA_RATE_TO_TIME(data_rate_t data_rate) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	0002      	movs	r2, r0
 800632c:	1dfb      	adds	r3, r7, #7
 800632e:	701a      	strb	r2, [r3, #0]
	float integral_factor = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

	switch(data_rate) {
 8006334:	1dfb      	adds	r3, r7, #7
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d008      	beq.n	800634e <DATA_RATE_TO_TIME+0x2a>
 800633c:	dc14      	bgt.n	8006368 <DATA_RATE_TO_TIME+0x44>
 800633e:	2b02      	cmp	r3, #2
 8006340:	d00f      	beq.n	8006362 <DATA_RATE_TO_TIME+0x3e>
 8006342:	dc11      	bgt.n	8006368 <DATA_RATE_TO_TIME+0x44>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <DATA_RATE_TO_TIME+0x38>
 8006348:	2b01      	cmp	r3, #1
 800634a:	d004      	beq.n	8006356 <DATA_RATE_TO_TIME+0x32>
 800634c:	e00c      	b.n	8006368 <DATA_RATE_TO_TIME+0x44>
	case DATA_RATE_1000:
		integral_factor = 1;
 800634e:	23fe      	movs	r3, #254	@ 0xfe
 8006350:	059b      	lsls	r3, r3, #22
 8006352:	60fb      	str	r3, [r7, #12]
		break;
 8006354:	e008      	b.n	8006368 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_100:
		integral_factor = 10;
 8006356:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <DATA_RATE_TO_TIME+0x50>)
 8006358:	60fb      	str	r3, [r7, #12]
		break;
 800635a:	e005      	b.n	8006368 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_50:
		integral_factor = 20;
 800635c:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <DATA_RATE_TO_TIME+0x54>)
 800635e:	60fb      	str	r3, [r7, #12]
		break;
 8006360:	e002      	b.n	8006368 <DATA_RATE_TO_TIME+0x44>

	case DATA_RATE_400:
		integral_factor = 2.5;
 8006362:	4b06      	ldr	r3, [pc, #24]	@ (800637c <DATA_RATE_TO_TIME+0x58>)
 8006364:	60fb      	str	r3, [r7, #12]
		break;
 8006366:	46c0      	nop			@ (mov r8, r8)
	}

	return integral_factor;
 8006368:	68fb      	ldr	r3, [r7, #12]
}
 800636a:	1c18      	adds	r0, r3, #0
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bd80      	pop	{r7, pc}
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	41200000 	.word	0x41200000
 8006378:	41a00000 	.word	0x41a00000
 800637c:	40200000 	.word	0x40200000

08006380 <_Z11chip_selectP11lis331dlh_t>:

void chip_select(lis331dlh_t * config) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_RESET);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6898      	ldr	r0, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	899b      	ldrh	r3, [r3, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	0019      	movs	r1, r3
 8006394:	f002 f9c3 	bl	800871e <HAL_GPIO_WritePin>
}
 8006398:	46c0      	nop			@ (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	b002      	add	sp, #8
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_Z13chip_deselectP11lis331dlh_t>:


void chip_deselect(lis331dlh_t * config) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config->chip_select_port, config->chip_select_pin, GPIO_PIN_SET);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6898      	ldr	r0, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	899b      	ldrh	r3, [r3, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	0019      	movs	r1, r3
 80063b4:	f002 f9b3 	bl	800871e <HAL_GPIO_WritePin>
}
 80063b8:	46c0      	nop			@ (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <_Z13read_registerP11lis331dlh_thPhh>:


void read_register(
	lis331dlh_t * config, uint8_t address,
	uint8_t * for_receive, uint8_t receive_length = 1
) {
 80063c0:	b5b0      	push	{r4, r5, r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	0008      	movs	r0, r1
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	0019      	movs	r1, r3
 80063ce:	240b      	movs	r4, #11
 80063d0:	193b      	adds	r3, r7, r4
 80063d2:	1c02      	adds	r2, r0, #0
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	250a      	movs	r5, #10
 80063d8:	197b      	adds	r3, r7, r5
 80063da:	1c0a      	adds	r2, r1, #0
 80063dc:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d020      	beq.n	8006428 <_Z13read_registerP11lis331dlh_thPhh+0x68>
		chip_select(config);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff ffc9 	bl	8006380 <_Z11chip_selectP11lis331dlh_t>

		address |= 0xC0;
 80063ee:	193b      	adds	r3, r7, r4
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2240      	movs	r2, #64	@ 0x40
 80063f4:	4252      	negs	r2, r2
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	193b      	adds	r3, r7, r4
 80063fc:	701a      	strb	r2, [r3, #0]

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	1939      	adds	r1, r7, r4
 8006404:	2364      	movs	r3, #100	@ 0x64
 8006406:	2201      	movs	r2, #1
 8006408:	f004 fda0 	bl	800af4c <HAL_SPI_Transmit>
		HAL_SPI_Receive(config->spi, for_receive, receive_length, 100);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	197b      	adds	r3, r7, r5
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b29a      	uxth	r2, r3
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	2364      	movs	r3, #100	@ 0x64
 800641a:	f004 fef7 	bl	800b20c <HAL_SPI_Receive>

		chip_deselect(config);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0018      	movs	r0, r3
 8006422:	f7ff ffbd 	bl	80063a0 <_Z13chip_deselectP11lis331dlh_t>
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
//			HAL_Delay(1);
		}
	}
}
 8006426:	e031      	b.n	800648c <_Z13read_registerP11lis331dlh_thPhh+0xcc>
		for (uint8_t i = 0; i < receive_length; ++i) {
 8006428:	2317      	movs	r3, #23
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e024      	b.n	800647c <_Z13read_registerP11lis331dlh_thPhh+0xbc>
			uint8_t current = address++;
 8006432:	200b      	movs	r0, #11
 8006434:	183b      	adds	r3, r7, r0
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	b2d1      	uxtb	r1, r2
 800643c:	183a      	adds	r2, r7, r0
 800643e:	7011      	strb	r1, [r2, #0]
 8006440:	2116      	movs	r1, #22
 8006442:	187a      	adds	r2, r7, r1
 8006444:	7013      	strb	r3, [r2, #0]
			HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, &current, 1, 50);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6858      	ldr	r0, [r3, #4]
 800644a:	187a      	adds	r2, r7, r1
 800644c:	2332      	movs	r3, #50	@ 0x32
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2301      	movs	r3, #1
 8006452:	2132      	movs	r1, #50	@ 0x32
 8006454:	f002 fa42 	bl	80088dc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(config->i2c, (uint16_t)0x32, &for_receive[i], 1, 50);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6858      	ldr	r0, [r3, #4]
 800645c:	2417      	movs	r4, #23
 800645e:	193b      	adds	r3, r7, r4
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	18d2      	adds	r2, r2, r3
 8006466:	2332      	movs	r3, #50	@ 0x32
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	2301      	movs	r3, #1
 800646c:	2132      	movs	r1, #50	@ 0x32
 800646e:	f002 fb5f 	bl	8008b30 <HAL_I2C_Master_Receive>
		for (uint8_t i = 0; i < receive_length; ++i) {
 8006472:	193b      	adds	r3, r7, r4
 8006474:	193a      	adds	r2, r7, r4
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	3201      	adds	r2, #1
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	2317      	movs	r3, #23
 800647e:	18fa      	adds	r2, r7, r3
 8006480:	230a      	movs	r3, #10
 8006482:	18fb      	adds	r3, r7, r3
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d3d2      	bcc.n	8006432 <_Z13read_registerP11lis331dlh_thPhh+0x72>
}
 800648c:	46c0      	nop			@ (mov r8, r8)
 800648e:	46bd      	mov	sp, r7
 8006490:	b006      	add	sp, #24
 8006492:	bdb0      	pop	{r4, r5, r7, pc}

08006494 <_Z14write_registerP11lis331dlh_thh>:


void write_register(lis331dlh_t * config, uint8_t address, uint8_t value) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af02      	add	r7, sp, #8
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	0008      	movs	r0, r1
 800649e:	0011      	movs	r1, r2
 80064a0:	1cfb      	adds	r3, r7, #3
 80064a2:	1c02      	adds	r2, r0, #0
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	1cbb      	adds	r3, r7, #2
 80064a8:	1c0a      	adds	r2, r1, #0
 80064aa:	701a      	strb	r2, [r3, #0]
	if (config->spi != NULL) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d016      	beq.n	80064e2 <_Z14write_registerP11lis331dlh_thh+0x4e>
		chip_select(config);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f7ff ff62 	bl	8006380 <_Z11chip_selectP11lis331dlh_t>

		HAL_SPI_Transmit(config->spi, &address, 1, 100);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	1cf9      	adds	r1, r7, #3
 80064c2:	2364      	movs	r3, #100	@ 0x64
 80064c4:	2201      	movs	r2, #1
 80064c6:	f004 fd41 	bl	800af4c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(config->spi, &value, 1, 10);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	1cb9      	adds	r1, r7, #2
 80064d0:	230a      	movs	r3, #10
 80064d2:	2201      	movs	r2, #1
 80064d4:	f004 fd3a 	bl	800af4c <HAL_SPI_Transmit>

		chip_deselect(config);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0018      	movs	r0, r3
 80064dc:	f7ff ff60 	bl	80063a0 <_Z13chip_deselectP11lis331dlh_t>
	}
	else {
		uint8_t buffer[] = { address, value };
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
	}
}
 80064e0:	e011      	b.n	8006506 <_Z14write_registerP11lis331dlh_thh+0x72>
		uint8_t buffer[] = { address, value };
 80064e2:	1cfb      	adds	r3, r7, #3
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	210c      	movs	r1, #12
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	1cbb      	adds	r3, r7, #2
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	187b      	adds	r3, r7, r1
 80064f2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(config->i2c, (uint16_t)0x32, buffer, 2, 100);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6858      	ldr	r0, [r3, #4]
 80064f8:	187a      	adds	r2, r7, r1
 80064fa:	2364      	movs	r3, #100	@ 0x64
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2302      	movs	r3, #2
 8006500:	2132      	movs	r1, #50	@ 0x32
 8006502:	f002 f9eb 	bl	80088dc <HAL_I2C_Master_Transmit>
}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	46bd      	mov	sp, r7
 800650a:	b004      	add	sp, #16
 800650c:	bd80      	pop	{r7, pc}

0800650e <_Z24lis331dlh_check_presenceP11lis331dlh_t>:

int lis331dlh_check_presence(lis331dlh_t * config) {
 800650e:	b590      	push	{r4, r7, lr}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]

	uint8_t lis331_who_am_i_contents;

	read_register(config, WHO_AM_I, &lis331_who_am_i_contents);
 8006516:	240f      	movs	r4, #15
 8006518:	193a      	adds	r2, r7, r4
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	2301      	movs	r3, #1
 800651e:	210f      	movs	r1, #15
 8006520:	f7ff ff4e 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>

	return(lis331_who_am_i_contents != WHO_AM_I_VALUE);
 8006524:	193b      	adds	r3, r7, r4
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3b32      	subs	r3, #50	@ 0x32
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	4193      	sbcs	r3, r2
 800652e:	b2db      	uxtb	r3, r3
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b005      	add	sp, #20
 8006536:	bd90      	pop	{r4, r7, pc}

08006538 <_Z14lis331dlh_initP11lis331dlh_t>:

int lis331dlh_init(lis331dlh_t * config) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

	if(lis331dlh_check_presence(config)) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	0018      	movs	r0, r3
 8006544:	f7ff ffe3 	bl	800650e <_Z24lis331dlh_check_presenceP11lis331dlh_t>
 8006548:	0003      	movs	r3, r0
 800654a:	1e5a      	subs	r2, r3, #1
 800654c:	4193      	sbcs	r3, r2
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <_Z14lis331dlh_initP11lis331dlh_t+0x20>
		return 1;
 8006554:	2301      	movs	r3, #1
 8006556:	e04a      	b.n	80065ee <_Z14lis331dlh_initP11lis331dlh_t+0xb6>
	}

	config->range_factor = DATA_RATE_TO_TIME(config->data_rate);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	7b9b      	ldrb	r3, [r3, #14]
 800655c:	0018      	movs	r0, r3
 800655e:	f7ff fee1 	bl	8006324 <DATA_RATE_TO_TIME>
 8006562:	1c02      	adds	r2, r0, #0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	611a      	str	r2, [r3, #16]

	lis331dlh_update_config(config);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f8f0 	bl	8006750 <lis331dlh_update_config>

//	config->control_registers[0] &= !(0b11 << 3);
//	config->control_registers[0] |= 0x27 | (config->data_rate << 3);

	config->control_registers[0] = 0x27 | (config->data_rate << 3);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7b9b      	ldrb	r3, [r3, #14]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	b25b      	sxtb	r3, r3
 8006578:	2227      	movs	r2, #39	@ 0x27
 800657a:	4313      	orrs	r3, r2
 800657c:	b25b      	sxtb	r3, r3
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	759a      	strb	r2, [r3, #22]

//	config->control_registers[1] &= !(0b10011);
//	config->control_registers[1] |= (0 << 4) | 0b00;

	config->control_registers[1] = 0;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	75da      	strb	r2, [r3, #23]

//	config->control_registers[3] &= !(0b11 << 5);
//	config->control_registers[3] |= (config->range << 4) | (1 << 7);

	config->control_registers[3] = (config->range << 4) | (1 << 7);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7bdb      	ldrb	r3, [r3, #15]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	b25b      	sxtb	r3, r3
 8006592:	2280      	movs	r2, #128	@ 0x80
 8006594:	4252      	negs	r2, r2
 8006596:	4313      	orrs	r3, r2
 8006598:	b25b      	sxtb	r3, r3
 800659a:	b2da      	uxtb	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	765a      	strb	r2, [r3, #25]

	write_register(config, CTRL_REG1, config->control_registers[0]);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	7d9a      	ldrb	r2, [r3, #22]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2120      	movs	r1, #32
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7ff ff73 	bl	8006494 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG2, config->control_registers[1]);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7dda      	ldrb	r2, [r3, #23]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2121      	movs	r1, #33	@ 0x21
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7ff ff6c 	bl	8006494 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG3, config->control_registers[2]);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7e1a      	ldrb	r2, [r3, #24]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2122      	movs	r1, #34	@ 0x22
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7ff ff65 	bl	8006494 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG4, config->control_registers[3]);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	7e5a      	ldrb	r2, [r3, #25]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2123      	movs	r1, #35	@ 0x23
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7ff ff5e 	bl	8006494 <_Z14write_registerP11lis331dlh_thh>
	write_register(config, CTRL_REG5, config->control_registers[4]);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7e9a      	ldrb	r2, [r3, #26]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2124      	movs	r1, #36	@ 0x24
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7ff ff57 	bl	8006494 <_Z14write_registerP11lis331dlh_thh>

	HAL_Delay(10);
 80065e6:	200a      	movs	r0, #10
 80065e8:	f001 fb94 	bl	8007d14 <HAL_Delay>

	return 0;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <lis331dlh_init_spi>:

int lis331dlh_init_spi(
		lis331dlh_t * config,  SPI_HandleTypeDef * spi,
		GPIO_TypeDef * port, uint16_t pin
) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	001a      	movs	r2, r3
 8006606:	1cbb      	adds	r3, r7, #2
 8006608:	801a      	strh	r2, [r3, #0]
	config->spi = spi;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	601a      	str	r2, [r3, #0]
	config->chip_select_port = port;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	609a      	str	r2, [r3, #8]
	config->chip_select_pin = pin;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1cba      	adds	r2, r7, #2
 800661a:	8812      	ldrh	r2, [r2, #0]
 800661c:	819a      	strh	r2, [r3, #12]

	config->axis_select_x_z = (axis_select_t) HAL_GPIO_ReadPin(X_Z_SELECT_GPIO_Port, X_Z_SELECT_Pin);
 800661e:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <lis331dlh_init_spi+0x7c>)
 8006620:	2101      	movs	r1, #1
 8006622:	0018      	movs	r0, r3
 8006624:	f002 f85e 	bl	80086e4 <HAL_GPIO_ReadPin>
 8006628:	0003      	movs	r3, r0
 800662a:	001a      	movs	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	751a      	strb	r2, [r3, #20]

	if(config->axis_select_x_z == AXIS_X) {
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	7d1b      	ldrb	r3, [r3, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d103      	bne.n	8006640 <lis331dlh_init_spi+0x48>
		debug("AXIS SELECTED: X\r\n");
 8006638:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <lis331dlh_init_spi+0x80>)
 800663a:	0018      	movs	r0, r3
 800663c:	f7ff fa52 	bl	8005ae4 <debug>
	}

	if(config->axis_select_x_z == AXIS_Z) {
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	7d1b      	ldrb	r3, [r3, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <lis331dlh_init_spi+0x58>
		debug("AXIS SELECTED: Z\r\n");
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <lis331dlh_init_spi+0x84>)
 800664a:	0018      	movs	r0, r3
 800664c:	f7ff fa4a 	bl	8005ae4 <debug>
	}

	if(lis331dlh_init(config)) {
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	0018      	movs	r0, r3
 8006654:	f7ff ff70 	bl	8006538 <_Z14lis331dlh_initP11lis331dlh_t>
 8006658:	0003      	movs	r3, r0
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	4193      	sbcs	r3, r2
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <lis331dlh_init_spi+0x70>
		return 1;
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <lis331dlh_init_spi+0x72>
	}

	return 0;
 8006668:	2300      	movs	r3, #0
}
 800666a:	0018      	movs	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	b004      	add	sp, #16
 8006670:	bd80      	pop	{r7, pc}
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	50000400 	.word	0x50000400
 8006678:	08016ee8 	.word	0x08016ee8
 800667c:	08016efc 	.word	0x08016efc

08006680 <_Z23get_scaled_accelarationhh20acceleration_range_t>:

	return 0;
}


inline int16_t get_scaled_accelaration(uint8_t low_byte, uint8_t high_byte, acceleration_range_t range) {
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	0004      	movs	r4, r0
 8006688:	0008      	movs	r0, r1
 800668a:	0011      	movs	r1, r2
 800668c:	1dfb      	adds	r3, r7, #7
 800668e:	1c22      	adds	r2, r4, #0
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	1dbb      	adds	r3, r7, #6
 8006694:	1c02      	adds	r2, r0, #0
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	1d7b      	adds	r3, r7, #5
 800669a:	1c0a      	adds	r2, r1, #0
 800669c:	701a      	strb	r2, [r3, #0]
	return static_cast<int16_t>(high_byte << 8 | low_byte); 		// 12 бит число представлено в виде
 800669e:	1dbb      	adds	r3, r7, #6
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	b21a      	sxth	r2, r3
 80066a6:	1dfb      	adds	r3, r7, #7
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b21b      	sxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b21b      	sxth	r3, r3
																	// 16 бит и младшие 4 бита - нулевые
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b003      	add	sp, #12
 80066b6:	bd90      	pop	{r4, r7, pc}

080066b8 <lis331dlh_update_accelaration>:

int lis331dlh_update_accelaration(lis331dlh_t * config) {
 80066b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	read_register(config, OUT_X_L, &config->out_x_low, 6);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	331d      	adds	r3, #29
 80066c4:	001a      	movs	r2, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	2306      	movs	r3, #6
 80066ca:	2128      	movs	r1, #40	@ 0x28
 80066cc:	f7ff fe78 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>

	config->accelarations = {
		HAL_GetTick(),
 80066d0:	f001 fb16 	bl	8007d00 <HAL_GetTick>
 80066d4:	0004      	movs	r4, r0
		get_scaled_accelaration(config->out_x_low, config->out_x_high, config->range) / 16,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7f58      	ldrb	r0, [r3, #29]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7f99      	ldrb	r1, [r3, #30]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7bdb      	ldrb	r3, [r3, #15]
 80066e2:	001a      	movs	r2, r3
 80066e4:	f7ff ffcc 	bl	8006680 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 80066e8:	1e03      	subs	r3, r0, #0
 80066ea:	da00      	bge.n	80066ee <lis331dlh_update_accelaration+0x36>
 80066ec:	330f      	adds	r3, #15
 80066ee:	111b      	asrs	r3, r3, #4
 80066f0:	b21b      	sxth	r3, r3
 80066f2:	001e      	movs	r6, r3
		get_scaled_accelaration(config->out_y_low, config->out_y_high, config->range) / 16,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7fd8      	ldrb	r0, [r3, #31]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	5c99      	ldrb	r1, [r3, r2]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7bdb      	ldrb	r3, [r3, #15]
 8006702:	001a      	movs	r2, r3
 8006704:	f7ff ffbc 	bl	8006680 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	da00      	bge.n	800670e <lis331dlh_update_accelaration+0x56>
 800670c:	330f      	adds	r3, #15
 800670e:	111b      	asrs	r3, r3, #4
 8006710:	b21b      	sxth	r3, r3
 8006712:	001d      	movs	r5, r3
		get_scaled_accelaration(config->out_z_low, config->out_z_high, config->range) / 16,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2221      	movs	r2, #33	@ 0x21
 8006718:	5c98      	ldrb	r0, [r3, r2]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2222      	movs	r2, #34	@ 0x22
 800671e:	5c99      	ldrb	r1, [r3, r2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7bdb      	ldrb	r3, [r3, #15]
 8006724:	001a      	movs	r2, r3
 8006726:	f7ff ffab 	bl	8006680 <_Z23get_scaled_accelarationhh20acceleration_range_t>
 800672a:	1e03      	subs	r3, r0, #0
 800672c:	da00      	bge.n	8006730 <lis331dlh_update_accelaration+0x78>
 800672e:	330f      	adds	r3, #15
 8006730:	111b      	asrs	r3, r3, #4
 8006732:	b21b      	sxth	r3, r3
 8006734:	001a      	movs	r2, r3
	config->accelarations = {
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	62dc      	str	r4, [r3, #44]	@ 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	631e      	str	r6, [r3, #48]	@ 0x30
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	635d      	str	r5, [r3, #52]	@ 0x34
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
	};

	return 0;
 8006746:	2300      	movs	r3, #0
}
 8006748:	0018      	movs	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	b003      	add	sp, #12
 800674e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006750 <lis331dlh_update_config>:

	return 0;
}


void lis331dlh_update_config(lis331dlh_t * config) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	read_register(config, WHO_AM_I, &config->device_id);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3315      	adds	r3, #21
 800675c:	001a      	movs	r2, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	2301      	movs	r3, #1
 8006762:	210f      	movs	r1, #15
 8006764:	f7ff fe2c 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, STATUS_REG, &config->status_register);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	331c      	adds	r3, #28
 800676c:	001a      	movs	r2, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	2301      	movs	r3, #1
 8006772:	2127      	movs	r1, #39	@ 0x27
 8006774:	f7ff fe24 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>

	read_register(config, CTRL_REG1, (uint8_t *)&config->control_registers,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3316      	adds	r3, #22
 800677c:	001a      	movs	r2, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	2305      	movs	r3, #5
 8006782:	2120      	movs	r1, #32
 8006784:	f7ff fe1c 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>
			sizeof(config->control_registers));

	read_register(config, INT1_CFG, (uint8_t *)&config->interrupt_1, sizeof(interrupt_register_t));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3323      	adds	r3, #35	@ 0x23
 800678c:	001a      	movs	r2, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	2304      	movs	r3, #4
 8006792:	2130      	movs	r1, #48	@ 0x30
 8006794:	f7ff fe14 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>
	read_register(config, INT2_CFG, (uint8_t *)&config->interrupt_2, sizeof(interrupt_register_t));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3327      	adds	r3, #39	@ 0x27
 800679c:	001a      	movs	r2, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	2304      	movs	r3, #4
 80067a2:	2134      	movs	r1, #52	@ 0x34
 80067a4:	f7ff fe0c 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b002      	add	sp, #8
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <lis331dlh_read_status>:


uint8_t lis331dlh_read_status(lis331dlh_t * config) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	read_register(config, STATUS_REG, &config->status_register);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	331c      	adds	r3, #28
 80067bc:	001a      	movs	r2, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	2301      	movs	r3, #1
 80067c2:	2127      	movs	r1, #39	@ 0x27
 80067c4:	f7ff fdfc 	bl	80063c0 <_Z13read_registerP11lis331dlh_thPhh>
	return config->status_register;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	7f1b      	ldrb	r3, [r3, #28]
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_Z15SENSOR_IO_Writehhh>:

#include "lps22.h"

I2C_HandleTypeDef * i2c;

void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value){
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af02      	add	r7, sp, #8
 80067da:	0004      	movs	r4, r0
 80067dc:	0008      	movs	r0, r1
 80067de:	0011      	movs	r1, r2
 80067e0:	1dfb      	adds	r3, r7, #7
 80067e2:	1c22      	adds	r2, r4, #0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	1dbb      	adds	r3, r7, #6
 80067e8:	1c02      	adds	r2, r0, #0
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	1d7b      	adds	r3, r7, #5
 80067ee:	1c0a      	adds	r2, r1, #0
 80067f0:	701a      	strb	r2, [r3, #0]

	uint8_t data[] = {Reg, Value};
 80067f2:	240c      	movs	r4, #12
 80067f4:	193b      	adds	r3, r7, r4
 80067f6:	1dba      	adds	r2, r7, #6
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	193b      	adds	r3, r7, r4
 80067fe:	1d7a      	adds	r2, r7, #5
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(SENSORS_I2C, Addr, data, 2, 100);
 8006804:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <_Z15SENSOR_IO_Writehhh+0x50>)
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	1dfb      	adds	r3, r7, #7
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	b299      	uxth	r1, r3
 800680e:	193a      	adds	r2, r7, r4
 8006810:	2364      	movs	r3, #100	@ 0x64
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	2302      	movs	r3, #2
 8006816:	f002 f861 	bl	80088dc <HAL_I2C_Master_Transmit>
}
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	46bd      	mov	sp, r7
 800681e:	b005      	add	sp, #20
 8006820:	bd90      	pop	{r4, r7, pc}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	20000060 	.word	0x20000060

08006828 <_Z14SENSOR_IO_ReadhhPh>:

uint8_t  SENSOR_IO_Read(uint8_t Addr, uint8_t Reg, uint8_t* state = NULL){
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b089      	sub	sp, #36	@ 0x24
 800682c:	af04      	add	r7, sp, #16
 800682e:	603a      	str	r2, [r7, #0]
 8006830:	1dfb      	adds	r3, r7, #7
 8006832:	1c02      	adds	r2, r0, #0
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	1dbb      	adds	r3, r7, #6
 8006838:	1c0a      	adds	r2, r1, #0
 800683a:	701a      	strb	r2, [r3, #0]

	uint8_t data = 0;
 800683c:	250e      	movs	r5, #14
 800683e:	197b      	adds	r3, r7, r5
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
	uint8_t st = HAL_I2C_Mem_Read(SENSORS_I2C, Addr, Reg, 1, &data, 1, 100);
 8006844:	4b13      	ldr	r3, [pc, #76]	@ (8006894 <_Z14SENSOR_IO_ReadhhPh+0x6c>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	1dfb      	adds	r3, r7, #7
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	b299      	uxth	r1, r3
 800684e:	1dbb      	adds	r3, r7, #6
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b29a      	uxth	r2, r3
 8006854:	260f      	movs	r6, #15
 8006856:	19bc      	adds	r4, r7, r6
 8006858:	2364      	movs	r3, #100	@ 0x64
 800685a:	9302      	str	r3, [sp, #8]
 800685c:	2301      	movs	r3, #1
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	197b      	adds	r3, r7, r5
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	2301      	movs	r3, #1
 8006866:	f002 fb99 	bl	8008f9c <HAL_I2C_Mem_Read>
 800686a:	0003      	movs	r3, r0
 800686c:	7023      	strb	r3, [r4, #0]

	if(state != NULL) *state = (st == HAL_OK);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <_Z14SENSOR_IO_ReadhhPh+0x5c>
 8006874:	19bb      	adds	r3, r7, r6
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	425a      	negs	r2, r3
 800687a:	4153      	adcs	r3, r2
 800687c:	b2db      	uxtb	r3, r3
 800687e:	001a      	movs	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	701a      	strb	r2, [r3, #0]

	return data;
 8006884:	230e      	movs	r3, #14
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	781b      	ldrb	r3, [r3, #0]
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b005      	add	sp, #20
 8006890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	20000060 	.word	0x20000060

08006898 <lps22hb_init>:

bool lps22hb_init(I2C_HandleTypeDef * i2c_handler){
 8006898:	b5b0      	push	{r4, r5, r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

	i2c = i2c_handler;
 80068a0:	4b34      	ldr	r3, [pc, #208]	@ (8006974 <lps22hb_init+0xdc>)
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(i2c, LPS_LOWER_ADDRESS, 3, 1000) != HAL_OK) return false;
 80068a6:	4b33      	ldr	r3, [pc, #204]	@ (8006974 <lps22hb_init+0xdc>)
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	23fa      	movs	r3, #250	@ 0xfa
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	2203      	movs	r2, #3
 80068b0:	21b8      	movs	r1, #184	@ 0xb8
 80068b2:	f002 fca7 	bl	8009204 <HAL_I2C_IsDeviceReady>
 80068b6:	0003      	movs	r3, r0
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	4193      	sbcs	r3, r2
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <lps22hb_init+0x2e>
 80068c2:	2300      	movs	r3, #0
 80068c4:	e052      	b.n	800696c <lps22hb_init+0xd4>

	uint8_t tmp;

	/* Set Power mode */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_RES_CONF_REG);
 80068c6:	250f      	movs	r5, #15
 80068c8:	197c      	adds	r4, r7, r5
 80068ca:	2200      	movs	r2, #0
 80068cc:	211a      	movs	r1, #26
 80068ce:	20b8      	movs	r0, #184	@ 0xb8
 80068d0:	f7ff ffaa 	bl	8006828 <_Z14SENSOR_IO_ReadhhPh>
 80068d4:	0003      	movs	r3, r0
 80068d6:	7023      	strb	r3, [r4, #0]

	tmp &= ~LPS22HB_LCEN_MASK;
 80068d8:	0028      	movs	r0, r5
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	183a      	adds	r2, r7, r0
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	2101      	movs	r1, #1
 80068e2:	438a      	bics	r2, r1
 80068e4:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x01; /* Set low current mode */
 80068e6:	183b      	adds	r3, r7, r0
 80068e8:	183a      	adds	r2, r7, r0
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	2101      	movs	r1, #1
 80068ee:	430a      	orrs	r2, r1
 80068f0:	701a      	strb	r2, [r3, #0]

	/* Read CTRL_REG1 */
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1);
 80068f2:	0005      	movs	r5, r0
 80068f4:	183c      	adds	r4, r7, r0
 80068f6:	2200      	movs	r2, #0
 80068f8:	2110      	movs	r1, #16
 80068fa:	20b8      	movs	r0, #184	@ 0xb8
 80068fc:	f7ff ff94 	bl	8006828 <_Z14SENSOR_IO_ReadhhPh>
 8006900:	0003      	movs	r3, r0
 8006902:	7023      	strb	r3, [r4, #0]

	/* Set default ODR */
	tmp &= ~LPS22HB_ODR_MASK;
 8006904:	0028      	movs	r0, r5
 8006906:	183b      	adds	r3, r7, r0
 8006908:	183a      	adds	r2, r7, r0
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	2170      	movs	r1, #112	@ 0x70
 800690e:	438a      	bics	r2, r1
 8006910:	701a      	strb	r2, [r3, #0]
	tmp |= (uint8_t)0x20; /* Set ODR to 10Hz */
 8006912:	183b      	adds	r3, r7, r0
 8006914:	183a      	adds	r2, r7, r0
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	2120      	movs	r1, #32
 800691a:	430a      	orrs	r2, r1
 800691c:	701a      	strb	r2, [r3, #0]

	/* Enable BDU */
	tmp &= ~LPS22HB_BDU_MASK;
 800691e:	183b      	adds	r3, r7, r0
 8006920:	183a      	adds	r2, r7, r0
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	2102      	movs	r1, #2
 8006926:	438a      	bics	r2, r1
 8006928:	701a      	strb	r2, [r3, #0]
	tmp |= ((uint8_t)0x02);
 800692a:	183b      	adds	r3, r7, r0
 800692c:	183a      	adds	r2, r7, r0
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	2102      	movs	r1, #2
 8006932:	430a      	orrs	r2, r1
 8006934:	701a      	strb	r2, [r3, #0]

	/* Apply settings to CTRL_REG1 */
	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG1, tmp);
 8006936:	0005      	movs	r5, r0
 8006938:	197b      	adds	r3, r7, r5
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	001a      	movs	r2, r3
 800693e:	2110      	movs	r1, #16
 8006940:	20b8      	movs	r0, #184	@ 0xb8
 8006942:	f7ff ff47 	bl	80067d4 <_Z15SENSOR_IO_Writehhh>


	// включаем работу DATA_READY пина
	tmp = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3);
 8006946:	197c      	adds	r4, r7, r5
 8006948:	2200      	movs	r2, #0
 800694a:	2112      	movs	r1, #18
 800694c:	20b8      	movs	r0, #184	@ 0xb8
 800694e:	f7ff ff6b 	bl	8006828 <_Z14SENSOR_IO_ReadhhPh>
 8006952:	0003      	movs	r3, r0
 8006954:	7023      	strb	r3, [r4, #0]

	SENSOR_IO_Write(LPS_LOWER_ADDRESS, LPS22HB_CTRL_REG3, tmp | LPS22HB_DRDY_MASK);
 8006956:	197b      	adds	r3, r7, r5
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2204      	movs	r2, #4
 800695c:	4313      	orrs	r3, r2
 800695e:	b2db      	uxtb	r3, r3
 8006960:	001a      	movs	r2, r3
 8006962:	2112      	movs	r1, #18
 8006964:	20b8      	movs	r0, #184	@ 0xb8
 8006966:	f7ff ff35 	bl	80067d4 <_Z15SENSOR_IO_Writehhh>

	return true;
 800696a:	2301      	movs	r3, #1
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b004      	add	sp, #16
 8006972:	bdb0      	pop	{r4, r5, r7, pc}
 8006974:	20002508 	.word	0x20002508

08006978 <lps22hb_get_status>:


uint8_t lps22hb_get_status() {
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
	uint8_t status = SENSOR_IO_Read(LPS_LOWER_ADDRESS, LPS22HB_STATUS_REG);
 800697e:	1dfc      	adds	r4, r7, #7
 8006980:	2200      	movs	r2, #0
 8006982:	2127      	movs	r1, #39	@ 0x27
 8006984:	20b8      	movs	r0, #184	@ 0xb8
 8006986:	f7ff ff4f 	bl	8006828 <_Z14SENSOR_IO_ReadhhPh>
 800698a:	0003      	movs	r3, r0
 800698c:	7023      	strb	r3, [r4, #0]
	return status;
 800698e:	1dfb      	adds	r3, r7, #7
 8006990:	781b      	ldrb	r3, [r3, #0]
}
 8006992:	0018      	movs	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	b003      	add	sp, #12
 8006998:	bd90      	pop	{r4, r7, pc}
	...

0800699c <lps22hb_check_pressure_overrun>:

bool lps22hb_check_pressure_overrun(uint8_t status) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	0002      	movs	r2, r0
 80069a4:	1dfb      	adds	r3, r7, #7
 80069a6:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x10;
 80069a8:	1dfb      	adds	r3, r7, #7
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2210      	movs	r2, #16
 80069ae:	401a      	ands	r2, r3
 80069b0:	200f      	movs	r0, #15
 80069b2:	183b      	adds	r3, r7, r0
 80069b4:	1e51      	subs	r1, r2, #1
 80069b6:	418a      	sbcs	r2, r1
 80069b8:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 80069ba:	183b      	adds	r3, r7, r0
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <lps22hb_check_pressure_overrun+0x34>
		debug("Pressure data overrun! SR %02x\r\n", status);
 80069c2:	1dfb      	adds	r3, r7, #7
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	4b06      	ldr	r3, [pc, #24]	@ (80069e0 <lps22hb_check_pressure_overrun+0x44>)
 80069c8:	0011      	movs	r1, r2
 80069ca:	0018      	movs	r0, r3
 80069cc:	f7ff f88a 	bl	8005ae4 <debug>
	}

	return is_overrun;
 80069d0:	230f      	movs	r3, #15
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	781b      	ldrb	r3, [r3, #0]
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b004      	add	sp, #16
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	08017004 	.word	0x08017004

080069e4 <lps22hb_check_temperature_overrun>:

bool lps22hb_check_temperature_overrun(uint8_t status) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	0002      	movs	r2, r0
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	701a      	strb	r2, [r3, #0]
	bool is_overrun = status & 0x20;
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2220      	movs	r2, #32
 80069f6:	401a      	ands	r2, r3
 80069f8:	200f      	movs	r0, #15
 80069fa:	183b      	adds	r3, r7, r0
 80069fc:	1e51      	subs	r1, r2, #1
 80069fe:	418a      	sbcs	r2, r1
 8006a00:	701a      	strb	r2, [r3, #0]
	if (is_overrun) {
 8006a02:	183b      	adds	r3, r7, r0
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d006      	beq.n	8006a18 <lps22hb_check_temperature_overrun+0x34>
		debug("Temperature data overrun! SR %02x\r\n", status);
 8006a0a:	1dfb      	adds	r3, r7, #7
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <lps22hb_check_temperature_overrun+0x44>)
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7ff f866 	bl	8005ae4 <debug>
	}

	return is_overrun;
 8006a18:	230f      	movs	r3, #15
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	781b      	ldrb	r3, [r3, #0]
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b004      	add	sp, #16
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	08017028 	.word	0x08017028

08006a2c <lps22hb_check_pressure_data_available>:

bool lps22hb_check_pressure_data_available(uint8_t status) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	0002      	movs	r2, r0
 8006a34:	1dfb      	adds	r3, r7, #7
 8006a36:	701a      	strb	r2, [r3, #0]
	return status & 0x01;
 8006a38:	1dfb      	adds	r3, r7, #7
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4013      	ands	r3, r2
 8006a40:	1e5a      	subs	r2, r3, #1
 8006a42:	4193      	sbcs	r3, r2
 8006a44:	b2db      	uxtb	r3, r3
}
 8006a46:	0018      	movs	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b002      	add	sp, #8
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <lps22hb_check_temperature_data_available>:

bool lps22hb_check_temperature_data_available(uint8_t status) {
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	0002      	movs	r2, r0
 8006a56:	1dfb      	adds	r3, r7, #7
 8006a58:	701a      	strb	r2, [r3, #0]
	return status & 0x02;
 8006a5a:	1dfb      	adds	r3, r7, #7
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	4013      	ands	r3, r2
 8006a62:	1e5a      	subs	r2, r3, #1
 8006a64:	4193      	sbcs	r3, r2
 8006a66:	b2db      	uxtb	r3, r3
}
 8006a68:	0018      	movs	r0, r3
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <lps22hb_read_pressure>:
	  return ctrl;
}

int32_t raw_press = 0;

float lps22hb_read_pressure(){
 8006a70:	b5b0      	push	{r4, r5, r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0

	uint8_t buffer[3];
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8006a76:	230f      	movs	r3, #15
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e013      	b.n	8006aa8 <lps22hb_read_pressure+0x38>
		buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_PRESS_OUT_XL_REG + i));
 8006a80:	250f      	movs	r5, #15
 8006a82:	197b      	adds	r3, r7, r5
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	3328      	adds	r3, #40	@ 0x28
 8006a88:	b2d9      	uxtb	r1, r3
 8006a8a:	197b      	adds	r3, r7, r5
 8006a8c:	781c      	ldrb	r4, [r3, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	20b8      	movs	r0, #184	@ 0xb8
 8006a92:	f7ff fec9 	bl	8006828 <_Z14SENSOR_IO_ReadhhPh>
 8006a96:	0003      	movs	r3, r0
 8006a98:	001a      	movs	r2, r3
 8006a9a:	003b      	movs	r3, r7
 8006a9c:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < sizeof(buffer); i++) {
 8006a9e:	197b      	adds	r3, r7, r5
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	197b      	adds	r3, r7, r5
 8006aa4:	3201      	adds	r2, #1
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	230f      	movs	r3, #15
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d9e6      	bls.n	8006a80 <lps22hb_read_pressure+0x10>
	}

	/* Build the raw data */
	uint32_t tmp = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	e00e      	b.n	8006ada <lps22hb_read_pressure+0x6a>
		tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8006abc:	003a      	movs	r2, r7
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	18d3      	adds	r3, r2, r3
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	001a      	movs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	409a      	lsls	r2, r3
 8006acc:	0013      	movs	r3, r2
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 3; i++) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	607b      	str	r3, [r7, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	dded      	ble.n	8006abc <lps22hb_read_pressure+0x4c>
	}

	/* convert the 2's complement 24 bit to 2's complement 32 bit */
	if(tmp & 0x00800000) {
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	2380      	movs	r3, #128	@ 0x80
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <lps22hb_read_pressure+0x84>
		tmp |= 0xFF000000;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	22ff      	movs	r2, #255	@ 0xff
 8006aee:	0612      	lsls	r2, r2, #24
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]
	}

	raw_press = ((int32_t)tmp);
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <lps22hb_read_pressure+0xc4>)
 8006af8:	601a      	str	r2, [r3, #0]
	raw_press = (raw_press * 100) / 4096;
 8006afa:	4b0e      	ldr	r3, [pc, #56]	@ (8006b34 <lps22hb_read_pressure+0xc4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2264      	movs	r2, #100	@ 0x64
 8006b00:	4353      	muls	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	da02      	bge.n	8006b0c <lps22hb_read_pressure+0x9c>
 8006b06:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <lps22hb_read_pressure+0xc8>)
 8006b08:	4694      	mov	ip, r2
 8006b0a:	4463      	add	r3, ip
 8006b0c:	131b      	asrs	r3, r3, #12
 8006b0e:	001a      	movs	r2, r3
 8006b10:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <lps22hb_read_pressure+0xc4>)
 8006b12:	601a      	str	r2, [r3, #0]

	return (float)((float)raw_press / 100.0f);
 8006b14:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <lps22hb_read_pressure+0xc4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7fa fcf9 	bl	8001510 <__aeabi_i2f>
 8006b1e:	1c03      	adds	r3, r0, #0
 8006b20:	4906      	ldr	r1, [pc, #24]	@ (8006b3c <lps22hb_read_pressure+0xcc>)
 8006b22:	1c18      	adds	r0, r3, #0
 8006b24:	f7f9 fff6 	bl	8000b14 <__aeabi_fdiv>
 8006b28:	1c03      	adds	r3, r0, #0
}
 8006b2a:	1c18      	adds	r0, r3, #0
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b004      	add	sp, #16
 8006b30:	bdb0      	pop	{r4, r5, r7, pc}
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	2000250c 	.word	0x2000250c
 8006b38:	00000fff 	.word	0x00000fff
 8006b3c:	42c80000 	.word	0x42c80000

08006b40 <lps22hb_read_temperature>:

float lps22hb_read_temperature(){
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
	  int16_t raw_data;
	  uint8_t buffer[2];
	  uint16_t tmp;
	  uint8_t i;

	  for(i = 0; i < 2; i++)
 8006b46:	1dfb      	adds	r3, r7, #7
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	e012      	b.n	8006b74 <lps22hb_read_temperature+0x34>
	  {
	    buffer[i] = SENSOR_IO_Read(LPS_LOWER_ADDRESS, (LPS22HB_TEMP_OUT_L_REG + i));
 8006b4e:	1dfb      	adds	r3, r7, #7
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	332b      	adds	r3, #43	@ 0x2b
 8006b54:	b2d9      	uxtb	r1, r3
 8006b56:	1dfb      	adds	r3, r7, #7
 8006b58:	781c      	ldrb	r4, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	20b8      	movs	r0, #184	@ 0xb8
 8006b5e:	f7ff fe63 	bl	8006828 <_Z14SENSOR_IO_ReadhhPh>
 8006b62:	0003      	movs	r3, r0
 8006b64:	001a      	movs	r2, r3
 8006b66:	003b      	movs	r3, r7
 8006b68:	551a      	strb	r2, [r3, r4]
	  for(i = 0; i < 2; i++)
 8006b6a:	1dfb      	adds	r3, r7, #7
 8006b6c:	781a      	ldrb	r2, [r3, #0]
 8006b6e:	1dfb      	adds	r3, r7, #7
 8006b70:	3201      	adds	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	1dfb      	adds	r3, r7, #7
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d9e8      	bls.n	8006b4e <lps22hb_read_temperature+0xe>
	  }

	  /* Build the raw tmp */
	  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8006b7c:	003b      	movs	r3, r7
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	003b      	movs	r3, r7
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	0019      	movs	r1, r3
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	1852      	adds	r2, r2, r1
 8006b8e:	801a      	strh	r2, [r3, #0]

	  raw_data = (tmp * 10) / 100;
 8006b90:	1d3b      	adds	r3, r7, #4
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	210a      	movs	r1, #10
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7f9 fb5c 	bl	8000254 <__divsi3>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	001a      	movs	r2, r3
 8006ba0:	1cbb      	adds	r3, r7, #2
 8006ba2:	801a      	strh	r2, [r3, #0]

	  return ((float)(raw_data / 10.0f));
 8006ba4:	1cbb      	adds	r3, r7, #2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	5e9b      	ldrsh	r3, [r3, r2]
 8006baa:	0018      	movs	r0, r3
 8006bac:	f7fa fcb0 	bl	8001510 <__aeabi_i2f>
 8006bb0:	1c03      	adds	r3, r0, #0
 8006bb2:	4904      	ldr	r1, [pc, #16]	@ (8006bc4 <lps22hb_read_temperature+0x84>)
 8006bb4:	1c18      	adds	r0, r3, #0
 8006bb6:	f7f9 ffad 	bl	8000b14 <__aeabi_fdiv>
 8006bba:	1c03      	adds	r3, r0, #0
}
 8006bbc:	1c18      	adds	r0, r3, #0
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b003      	add	sp, #12
 8006bc2:	bd90      	pop	{r4, r7, pc}
 8006bc4:	41200000 	.word	0x41200000

08006bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bcc:	f001 f866 	bl	8007c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bd0:	f000 f830 	bl	8006c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bd4:	f7ff f89c 	bl	8005d10 <MX_GPIO_Init>
  MX_I2C2_Init();
 8006bd8:	f7ff fb18 	bl	800620c <MX_I2C2_Init>
  MX_SPI1_Init();
 8006bdc:	f000 f97a 	bl	8006ed4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006be0:	f000 f9b6 	bl	8006f50 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8006be4:	f000 fdd4 	bl	8007790 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006be8:	f000 fe22 	bl	8007830 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006bec:	f000 fe70 	bl	80078d0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8006bf0:	f000 fcce 	bl	8007590 <MX_TIM1_Init>
  MX_RTC_Init();
 8006bf4:	f000 f902 	bl	8006dfc <MX_RTC_Init>
  MX_USART4_UART_Init();
 8006bf8:	f000 fe9e 	bl	8007938 <MX_USART4_UART_Init>
  MX_TIM2_Init();
 8006bfc:	f000 fd24 	bl	8007648 <MX_TIM2_Init>
//	    Error_Handler();
//	  }
 // }


  debug("\r\n\r\nInited\r\n");
 8006c00:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <main+0x60>)
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fe ff6e 	bl	8005ae4 <debug>
  HAL_UART_Transmit_IT(terminal_uart, "123456789\r\n", 12);
 8006c08:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <main+0x64>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4908      	ldr	r1, [pc, #32]	@ (8006c30 <main+0x68>)
 8006c0e:	220c      	movs	r2, #12
 8006c10:	0018      	movs	r0, r3
 8006c12:	f005 fd5f 	bl	800c6d4 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006c16:	f008 f9cf 	bl	800efb8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8006c1a:	f7fc fe77 	bl	800390c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006c1e:	f008 f9ed 	bl	800effc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	e7fd      	b.n	8006c22 <main+0x5a>
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	0801704c 	.word	0x0801704c
 8006c2c:	20000070 	.word	0x20000070
 8006c30:	0801705c 	.word	0x0801705c

08006c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b093      	sub	sp, #76	@ 0x4c
 8006c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c3a:	2410      	movs	r4, #16
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	0018      	movs	r0, r3
 8006c40:	2338      	movs	r3, #56	@ 0x38
 8006c42:	001a      	movs	r2, r3
 8006c44:	2100      	movs	r1, #0
 8006c46:	f00c f927 	bl	8012e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c4a:	003b      	movs	r3, r7
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	2310      	movs	r3, #16
 8006c50:	001a      	movs	r2, r3
 8006c52:	2100      	movs	r1, #0
 8006c54:	f00c f920 	bl	8012e98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f003 f80d 	bl	8009c7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	2209      	movs	r2, #9
 8006c66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006c68:	193b      	adds	r3, r7, r4
 8006c6a:	2280      	movs	r2, #128	@ 0x80
 8006c6c:	0252      	lsls	r2, r2, #9
 8006c6e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006c70:	0021      	movs	r1, r4
 8006c72:	187b      	adds	r3, r7, r1
 8006c74:	2201      	movs	r2, #1
 8006c76:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	2203      	movs	r2, #3
 8006c82:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	2200      	movs	r2, #0
 8006c88:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	2210      	movs	r2, #16
 8006c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c90:	187b      	adds	r3, r7, r1
 8006c92:	2280      	movs	r2, #128	@ 0x80
 8006c94:	0292      	lsls	r2, r2, #10
 8006c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006c98:	187b      	adds	r3, r7, r1
 8006c9a:	22a0      	movs	r2, #160	@ 0xa0
 8006c9c:	0512      	lsls	r2, r2, #20
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8006ca0:	187b      	adds	r3, r7, r1
 8006ca2:	2280      	movs	r2, #128	@ 0x80
 8006ca4:	05d2      	lsls	r2, r2, #23
 8006ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ca8:	187b      	adds	r3, r7, r1
 8006caa:	0018      	movs	r0, r3
 8006cac:	f003 f832 	bl	8009d14 <HAL_RCC_OscConfig>
 8006cb0:	1e03      	subs	r3, r0, #0
 8006cb2:	d001      	beq.n	8006cb8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006cb4:	f000 f874 	bl	8006da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cb8:	003b      	movs	r3, r7
 8006cba:	2207      	movs	r2, #7
 8006cbc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cbe:	003b      	movs	r3, r7
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cc4:	003b      	movs	r3, r7
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006cca:	003b      	movs	r3, r7
 8006ccc:	2200      	movs	r2, #0
 8006cce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cd0:	003b      	movs	r3, r7
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f003 fb37 	bl	800a348 <HAL_RCC_ClockConfig>
 8006cda:	1e03      	subs	r3, r0, #0
 8006cdc:	d001      	beq.n	8006ce2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006cde:	f000 f85f 	bl	8006da0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8006ce2:	f003 fd05 	bl	800a6f0 <HAL_RCC_EnableCSS>
}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b013      	add	sp, #76	@ 0x4c
 8006cec:	bd90      	pop	{r4, r7, pc}
	...

08006cf0 <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
     int i, j;
     uint32_t byte, crc, mask;

     i = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
     crc = 0xFFFFFFFF;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	425b      	negs	r3, r3
 8006d02:	617b      	str	r3, [r7, #20]
     for(int k = 0; k<size;k++) {
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	e023      	b.n	8006d52 <crc32b+0x62>
        byte = message[k];            // Get next byte.
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	18d3      	adds	r3, r2, r3
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
        crc = crc ^ byte;
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4053      	eors	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8006d1c:	2307      	movs	r3, #7
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e00e      	b.n	8006d40 <crc32b+0x50>
           mask = -(crc & 1);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2201      	movs	r2, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	425b      	negs	r3, r3
 8006d2a:	60bb      	str	r3, [r7, #8]
           crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	085a      	lsrs	r2, r3, #1
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	490d      	ldr	r1, [pc, #52]	@ (8006d68 <crc32b+0x78>)
 8006d34:	400b      	ands	r3, r1
 8006d36:	4053      	eors	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
        for (j = 7; j >= 0; j--) {    // Do eight times.
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	daed      	bge.n	8006d22 <crc32b+0x32>
        }
        i = i + 1;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]
     for(int k = 0; k<size;k++) {
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d8d7      	bhi.n	8006d0a <crc32b+0x1a>
     }
     return ~crc;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	43db      	mvns	r3, r3
  }
 8006d5e:	0018      	movs	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b008      	add	sp, #32
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	edb88320 	.word	0xedb88320

08006d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a08      	ldr	r2, [pc, #32]	@ (8006d9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006d7e:	f000 ffad 	bl	8007cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	2380      	movs	r3, #128	@ 0x80
 8006d88:	05db      	lsls	r3, r3, #23
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PeriodElapsedCallback+0x26>

  	  Timer_Event();
 8006d8e:	f7fc fc35 	bl	80035fc <Timer_Event>
  }
  /* USER CODE END Callback 1 */
}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b002      	add	sp, #8
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			@ (mov r8, r8)
 8006d9c:	40014800 	.word	0x40014800

08006da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006da4:	b672      	cpsid	i
}
 8006da6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_PWR_EnableBkUpAccess();
 8006da8:	f002 ff5a 	bl	8009c60 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xAAAA);
 8006dac:	4a0e      	ldr	r2, [pc, #56]	@ (8006de8 <Error_Handler+0x48>)
 8006dae:	4b0f      	ldr	r3, [pc, #60]	@ (8006dec <Error_Handler+0x4c>)
 8006db0:	2100      	movs	r1, #0
 8006db2:	0018      	movs	r0, r3
 8006db4:	f003 ffda 	bl	800ad6c <HAL_RTCEx_BKUPWrite>

	debug("==========\r\n");
 8006db8:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <Error_Handler+0x50>)
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f7fe fe92 	bl	8005ae4 <debug>
	debug("ERROR HANDLER\r\n");
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <Error_Handler+0x54>)
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f7fe fe8e 	bl	8005ae4 <debug>
	debug("==========\r\n");
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <Error_Handler+0x50>)
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7fe fe8a 	bl	8005ae4 <debug>

	send_all_debug_buffer_blocking();
 8006dd0:	f7fe ff5a 	bl	8005c88 <send_all_debug_buffer_blocking>

	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 8006dd4:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <Error_Handler+0x58>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2104      	movs	r1, #4
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f001 fc9f 	bl	800871e <HAL_GPIO_WritePin>

	HAL_NVIC_SystemReset();
 8006de0:	f001 f891 	bl	8007f06 <HAL_NVIC_SystemReset>

  while (1)
 8006de4:	46c0      	nop			@ (mov r8, r8)
 8006de6:	e7fd      	b.n	8006de4 <Error_Handler+0x44>
 8006de8:	0000aaaa 	.word	0x0000aaaa
 8006dec:	20002510 	.word	0x20002510
 8006df0:	08017068 	.word	0x08017068
 8006df4:	08017078 	.word	0x08017078
 8006df8:	50000c00 	.word	0x50000c00

08006dfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006e00:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e02:	4a14      	ldr	r2, [pc, #80]	@ (8006e54 <MX_RTC_Init+0x58>)
 8006e04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006e06:	4b12      	ldr	r3, [pc, #72]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8006e0c:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e0e:	227f      	movs	r2, #127	@ 0x7f
 8006e10:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8006e12:	4b0f      	ldr	r3, [pc, #60]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e14:	22ff      	movs	r2, #255	@ 0xff
 8006e16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006e18:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e2a:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e2c:	2280      	movs	r2, #128	@ 0x80
 8006e2e:	05d2      	lsls	r2, r2, #23
 8006e30:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8006e32:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e38:	4b05      	ldr	r3, [pc, #20]	@ (8006e50 <MX_RTC_Init+0x54>)
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f003 fe48 	bl	800aad0 <HAL_RTC_Init>
 8006e40:	1e03      	subs	r3, r0, #0
 8006e42:	d001      	beq.n	8006e48 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8006e44:	f7ff ffac 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006e48:	46c0      	nop			@ (mov r8, r8)
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	20002510 	.word	0x20002510
 8006e54:	40002800 	.word	0x40002800

08006e58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b091      	sub	sp, #68	@ 0x44
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e60:	240c      	movs	r4, #12
 8006e62:	193b      	adds	r3, r7, r4
 8006e64:	0018      	movs	r0, r3
 8006e66:	2334      	movs	r3, #52	@ 0x34
 8006e68:	001a      	movs	r2, r3
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f00c f814 	bl	8012e98 <memset>
  if(rtcHandle->Instance==RTC)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a15      	ldr	r2, [pc, #84]	@ (8006ecc <HAL_RTC_MspInit+0x74>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d124      	bne.n	8006ec4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006e7a:	193b      	adds	r3, r7, r4
 8006e7c:	2280      	movs	r2, #128	@ 0x80
 8006e7e:	0292      	lsls	r2, r2, #10
 8006e80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006e82:	193b      	adds	r3, r7, r4
 8006e84:	2280      	movs	r2, #128	@ 0x80
 8006e86:	0092      	lsls	r2, r2, #2
 8006e88:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e8a:	193b      	adds	r3, r7, r4
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f003 fc67 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8006e92:	1e03      	subs	r3, r0, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006e96:	f7ff ff83 	bl	8006da0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <HAL_RTC_MspInit+0x78>)
 8006e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <HAL_RTC_MspInit+0x78>)
 8006ea0:	2180      	movs	r1, #128	@ 0x80
 8006ea2:	0209      	lsls	r1, r1, #8
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006ea8:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <HAL_RTC_MspInit+0x78>)
 8006eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eac:	4b08      	ldr	r3, [pc, #32]	@ (8006ed0 <HAL_RTC_MspInit+0x78>)
 8006eae:	2180      	movs	r1, #128	@ 0x80
 8006eb0:	00c9      	lsls	r1, r1, #3
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006eb6:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <HAL_RTC_MspInit+0x78>)
 8006eb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eba:	2380      	movs	r3, #128	@ 0x80
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006ec4:	46c0      	nop			@ (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b011      	add	sp, #68	@ 0x44
 8006eca:	bd90      	pop	{r4, r7, pc}
 8006ecc:	40002800 	.word	0x40002800
 8006ed0:	40021000 	.word	0x40021000

08006ed4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006eda:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <MX_SPI1_Init+0x78>)
 8006edc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006ede:	4b1a      	ldr	r3, [pc, #104]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006ee0:	2282      	movs	r2, #130	@ 0x82
 8006ee2:	0052      	lsls	r2, r2, #1
 8006ee4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ee6:	4b18      	ldr	r3, [pc, #96]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006eec:	4b16      	ldr	r3, [pc, #88]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006eee:	22e0      	movs	r2, #224	@ 0xe0
 8006ef0:	00d2      	lsls	r2, r2, #3
 8006ef2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ef4:	4b14      	ldr	r3, [pc, #80]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006efa:	4b13      	ldr	r3, [pc, #76]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f00:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f02:	2280      	movs	r2, #128	@ 0x80
 8006f04:	0092      	lsls	r2, r2, #2
 8006f06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f08:	4b0f      	ldr	r3, [pc, #60]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006f20:	4b09      	ldr	r3, [pc, #36]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f22:	2207      	movs	r2, #7
 8006f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f2e:	2208      	movs	r2, #8
 8006f30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f32:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <MX_SPI1_Init+0x74>)
 8006f34:	0018      	movs	r0, r3
 8006f36:	f003 ff51 	bl	800addc <HAL_SPI_Init>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d001      	beq.n	8006f42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006f3e:	f7ff ff2f 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	2000253c 	.word	0x2000253c
 8006f4c:	40013000 	.word	0x40013000

08006f50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006f54:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f56:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc8 <MX_SPI2_Init+0x78>)
 8006f58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f5c:	2282      	movs	r2, #130	@ 0x82
 8006f5e:	0052      	lsls	r2, r2, #1
 8006f60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006f62:	4b18      	ldr	r3, [pc, #96]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f68:	4b16      	ldr	r3, [pc, #88]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f6a:	22e0      	movs	r2, #224	@ 0xe0
 8006f6c:	00d2      	lsls	r2, r2, #3
 8006f6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f70:	4b14      	ldr	r3, [pc, #80]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f76:	4b13      	ldr	r3, [pc, #76]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f7e:	2280      	movs	r2, #128	@ 0x80
 8006f80:	0092      	lsls	r2, r2, #2
 8006f82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006f84:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f86:	2210      	movs	r2, #16
 8006f88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f90:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006f9e:	2207      	movs	r2, #7
 8006fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006fa2:	4b08      	ldr	r3, [pc, #32]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006faa:	2208      	movs	r2, #8
 8006fac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006fae:	4b05      	ldr	r3, [pc, #20]	@ (8006fc4 <MX_SPI2_Init+0x74>)
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f003 ff13 	bl	800addc <HAL_SPI_Init>
 8006fb6:	1e03      	subs	r3, r0, #0
 8006fb8:	d001      	beq.n	8006fbe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006fba:	f7ff fef1 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	200025a0 	.word	0x200025a0
 8006fc8:	40003800 	.word	0x40003800

08006fcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b08d      	sub	sp, #52	@ 0x34
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd4:	241c      	movs	r4, #28
 8006fd6:	193b      	adds	r3, r7, r4
 8006fd8:	0018      	movs	r0, r3
 8006fda:	2314      	movs	r3, #20
 8006fdc:	001a      	movs	r2, r3
 8006fde:	2100      	movs	r1, #0
 8006fe0:	f00b ff5a 	bl	8012e98 <memset>
  if(spiHandle->Instance==SPI1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8007168 <HAL_SPI_MspInit+0x19c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d154      	bne.n	8007098 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006fee:	4b5f      	ldr	r3, [pc, #380]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8006ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8006ff4:	2180      	movs	r1, #128	@ 0x80
 8006ff6:	0149      	lsls	r1, r1, #5
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8006ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007000:	2380      	movs	r3, #128	@ 0x80
 8007002:	015b      	lsls	r3, r3, #5
 8007004:	4013      	ands	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800700a:	4b58      	ldr	r3, [pc, #352]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 800700c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800700e:	4b57      	ldr	r3, [pc, #348]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8007010:	2108      	movs	r1, #8
 8007012:	430a      	orrs	r2, r1
 8007014:	635a      	str	r2, [r3, #52]	@ 0x34
 8007016:	4b55      	ldr	r3, [pc, #340]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8007018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701a:	2208      	movs	r2, #8
 800701c:	4013      	ands	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007022:	4b52      	ldr	r3, [pc, #328]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8007024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007026:	4b51      	ldr	r3, [pc, #324]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8007028:	2101      	movs	r1, #1
 800702a:	430a      	orrs	r2, r1
 800702c:	635a      	str	r2, [r3, #52]	@ 0x34
 800702e:	4b4f      	ldr	r3, [pc, #316]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 8007030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007032:	2201      	movs	r2, #1
 8007034:	4013      	ands	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
 800703a:	193b      	adds	r3, r7, r4
 800703c:	2280      	movs	r2, #128	@ 0x80
 800703e:	0052      	lsls	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007042:	193b      	adds	r3, r7, r4
 8007044:	2202      	movs	r2, #2
 8007046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007048:	193b      	adds	r3, r7, r4
 800704a:	2200      	movs	r2, #0
 800704c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800704e:	193b      	adds	r3, r7, r4
 8007050:	2203      	movs	r2, #3
 8007052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007054:	193b      	adds	r3, r7, r4
 8007056:	2201      	movs	r2, #1
 8007058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
 800705a:	193b      	adds	r3, r7, r4
 800705c:	4a44      	ldr	r2, [pc, #272]	@ (8007170 <HAL_SPI_MspInit+0x1a4>)
 800705e:	0019      	movs	r1, r3
 8007060:	0010      	movs	r0, r2
 8007062:	f001 f9db 	bl	800841c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8007066:	0021      	movs	r1, r4
 8007068:	187b      	adds	r3, r7, r1
 800706a:	22c0      	movs	r2, #192	@ 0xc0
 800706c:	0152      	lsls	r2, r2, #5
 800706e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007070:	187b      	adds	r3, r7, r1
 8007072:	2202      	movs	r2, #2
 8007074:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007076:	187b      	adds	r3, r7, r1
 8007078:	2200      	movs	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800707c:	187b      	adds	r3, r7, r1
 800707e:	2203      	movs	r2, #3
 8007080:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007082:	187b      	adds	r3, r7, r1
 8007084:	2200      	movs	r2, #0
 8007086:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007088:	187a      	adds	r2, r7, r1
 800708a:	23a0      	movs	r3, #160	@ 0xa0
 800708c:	05db      	lsls	r3, r3, #23
 800708e:	0011      	movs	r1, r2
 8007090:	0018      	movs	r0, r3
 8007092:	f001 f9c3 	bl	800841c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007096:	e063      	b.n	8007160 <HAL_SPI_MspInit+0x194>
  else if(spiHandle->Instance==SPI2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a35      	ldr	r2, [pc, #212]	@ (8007174 <HAL_SPI_MspInit+0x1a8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d15e      	bne.n	8007160 <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80070a2:	4b32      	ldr	r3, [pc, #200]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 80070a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070a6:	4b31      	ldr	r3, [pc, #196]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 80070a8:	2180      	movs	r1, #128	@ 0x80
 80070aa:	01c9      	lsls	r1, r1, #7
 80070ac:	430a      	orrs	r2, r1
 80070ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070b0:	4b2e      	ldr	r3, [pc, #184]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 80070b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070b4:	2380      	movs	r3, #128	@ 0x80
 80070b6:	01db      	lsls	r3, r3, #7
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070be:	4b2b      	ldr	r3, [pc, #172]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 80070c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070c2:	4b2a      	ldr	r3, [pc, #168]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 80070c4:	2102      	movs	r1, #2
 80070c6:	430a      	orrs	r2, r1
 80070c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80070ca:	4b28      	ldr	r3, [pc, #160]	@ (800716c <HAL_SPI_MspInit+0x1a0>)
 80070cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ce:	2202      	movs	r2, #2
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_MISO_Pin;
 80070d6:	241c      	movs	r4, #28
 80070d8:	193b      	adds	r3, r7, r4
 80070da:	2204      	movs	r2, #4
 80070dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070de:	193b      	adds	r3, r7, r4
 80070e0:	2202      	movs	r2, #2
 80070e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	2200      	movs	r2, #0
 80070e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ea:	193b      	adds	r3, r7, r4
 80070ec:	2203      	movs	r2, #3
 80070ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80070f0:	193b      	adds	r3, r7, r4
 80070f2:	2201      	movs	r2, #1
 80070f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MISO_GPIO_Port, &GPIO_InitStruct);
 80070f6:	193b      	adds	r3, r7, r4
 80070f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007178 <HAL_SPI_MspInit+0x1ac>)
 80070fa:	0019      	movs	r1, r3
 80070fc:	0010      	movs	r0, r2
 80070fe:	f001 f98d 	bl	800841c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_SCK_Pin;
 8007102:	0021      	movs	r1, r4
 8007104:	187b      	adds	r3, r7, r1
 8007106:	2280      	movs	r2, #128	@ 0x80
 8007108:	00d2      	lsls	r2, r2, #3
 800710a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710c:	000c      	movs	r4, r1
 800710e:	193b      	adds	r3, r7, r4
 8007110:	2202      	movs	r2, #2
 8007112:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007114:	193b      	adds	r3, r7, r4
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800711a:	193b      	adds	r3, r7, r4
 800711c:	2203      	movs	r2, #3
 800711e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007120:	193b      	adds	r3, r7, r4
 8007122:	2205      	movs	r2, #5
 8007124:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_SCK_GPIO_Port, &GPIO_InitStruct);
 8007126:	193b      	adds	r3, r7, r4
 8007128:	4a13      	ldr	r2, [pc, #76]	@ (8007178 <HAL_SPI_MspInit+0x1ac>)
 800712a:	0019      	movs	r1, r3
 800712c:	0010      	movs	r0, r2
 800712e:	f001 f975 	bl	800841c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACCEL_MOSI_Pin;
 8007132:	0021      	movs	r1, r4
 8007134:	187b      	adds	r3, r7, r1
 8007136:	2280      	movs	r2, #128	@ 0x80
 8007138:	0112      	lsls	r2, r2, #4
 800713a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	187b      	adds	r3, r7, r1
 800713e:	2202      	movs	r2, #2
 8007140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007142:	187b      	adds	r3, r7, r1
 8007144:	2200      	movs	r2, #0
 8007146:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007148:	187b      	adds	r3, r7, r1
 800714a:	2203      	movs	r2, #3
 800714c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800714e:	187b      	adds	r3, r7, r1
 8007150:	2200      	movs	r2, #0
 8007152:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ACCEL_MOSI_GPIO_Port, &GPIO_InitStruct);
 8007154:	187b      	adds	r3, r7, r1
 8007156:	4a08      	ldr	r2, [pc, #32]	@ (8007178 <HAL_SPI_MspInit+0x1ac>)
 8007158:	0019      	movs	r1, r3
 800715a:	0010      	movs	r0, r2
 800715c:	f001 f95e 	bl	800841c <HAL_GPIO_Init>
}
 8007160:	46c0      	nop			@ (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b00d      	add	sp, #52	@ 0x34
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	40013000 	.word	0x40013000
 800716c:	40021000 	.word	0x40021000
 8007170:	50000c00 	.word	0x50000c00
 8007174:	40003800 	.word	0x40003800
 8007178:	50000400 	.word	0x50000400

0800717c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007182:	4b15      	ldr	r3, [pc, #84]	@ (80071d8 <HAL_MspInit+0x5c>)
 8007184:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007186:	4b14      	ldr	r3, [pc, #80]	@ (80071d8 <HAL_MspInit+0x5c>)
 8007188:	2101      	movs	r1, #1
 800718a:	430a      	orrs	r2, r1
 800718c:	641a      	str	r2, [r3, #64]	@ 0x40
 800718e:	4b12      	ldr	r3, [pc, #72]	@ (80071d8 <HAL_MspInit+0x5c>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007192:	2201      	movs	r2, #1
 8007194:	4013      	ands	r3, r2
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	4b0f      	ldr	r3, [pc, #60]	@ (80071d8 <HAL_MspInit+0x5c>)
 800719c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800719e:	4b0e      	ldr	r3, [pc, #56]	@ (80071d8 <HAL_MspInit+0x5c>)
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	0549      	lsls	r1, r1, #21
 80071a4:	430a      	orrs	r2, r1
 80071a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071a8:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <HAL_MspInit+0x5c>)
 80071aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ac:	2380      	movs	r3, #128	@ 0x80
 80071ae:	055b      	lsls	r3, r3, #21
 80071b0:	4013      	ands	r3, r2
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80071b6:	2302      	movs	r3, #2
 80071b8:	425b      	negs	r3, r3
 80071ba:	2200      	movs	r2, #0
 80071bc:	2103      	movs	r1, #3
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 fe7c 	bl	8007ebc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80071c4:	23c0      	movs	r3, #192	@ 0xc0
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fdc7 	bl	8007d5c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071ce:	46c0      	nop			@ (mov r8, r8)
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b002      	add	sp, #8
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	46c0      	nop			@ (mov r8, r8)
 80071d8:	40021000 	.word	0x40021000

080071dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071dc:	b5b0      	push	{r4, r5, r7, lr}
 80071de:	b08c      	sub	sp, #48	@ 0x30
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80071e4:	232b      	movs	r3, #43	@ 0x2b
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2200      	movs	r2, #0
 80071ea:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80071ec:	4b38      	ldr	r3, [pc, #224]	@ (80072d0 <HAL_InitTick+0xf4>)
 80071ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071f0:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <HAL_InitTick+0xf4>)
 80071f2:	2180      	movs	r1, #128	@ 0x80
 80071f4:	02c9      	lsls	r1, r1, #11
 80071f6:	430a      	orrs	r2, r1
 80071f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80071fa:	4b35      	ldr	r3, [pc, #212]	@ (80072d0 <HAL_InitTick+0xf4>)
 80071fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071fe:	2380      	movs	r3, #128	@ 0x80
 8007200:	02db      	lsls	r3, r3, #11
 8007202:	4013      	ands	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]
 8007206:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007208:	230c      	movs	r3, #12
 800720a:	18fa      	adds	r2, r7, r3
 800720c:	2410      	movs	r4, #16
 800720e:	193b      	adds	r3, r7, r4
 8007210:	0011      	movs	r1, r2
 8007212:	0018      	movs	r0, r3
 8007214:	f003 fa42 	bl	800a69c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007218:	193b      	adds	r3, r7, r4
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007224:	f003 fa24 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 8007228:	0003      	movs	r3, r0
 800722a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800722c:	e004      	b.n	8007238 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800722e:	f003 fa1f 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 8007232:	0003      	movs	r3, r0
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723a:	4926      	ldr	r1, [pc, #152]	@ (80072d4 <HAL_InitTick+0xf8>)
 800723c:	0018      	movs	r0, r3
 800723e:	f7f8 ff7f 	bl	8000140 <__udivsi3>
 8007242:	0003      	movs	r3, r0
 8007244:	3b01      	subs	r3, #1
 8007246:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8007248:	4b23      	ldr	r3, [pc, #140]	@ (80072d8 <HAL_InitTick+0xfc>)
 800724a:	4a24      	ldr	r2, [pc, #144]	@ (80072dc <HAL_InitTick+0x100>)
 800724c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800724e:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <HAL_InitTick+0xfc>)
 8007250:	4a23      	ldr	r2, [pc, #140]	@ (80072e0 <HAL_InitTick+0x104>)
 8007252:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8007254:	4b20      	ldr	r3, [pc, #128]	@ (80072d8 <HAL_InitTick+0xfc>)
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 800725a:	4b1f      	ldr	r3, [pc, #124]	@ (80072d8 <HAL_InitTick+0xfc>)
 800725c:	2200      	movs	r2, #0
 800725e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007260:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <HAL_InitTick+0xfc>)
 8007262:	2200      	movs	r2, #0
 8007264:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007266:	4b1c      	ldr	r3, [pc, #112]	@ (80072d8 <HAL_InitTick+0xfc>)
 8007268:	2200      	movs	r2, #0
 800726a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800726c:	252b      	movs	r5, #43	@ 0x2b
 800726e:	197c      	adds	r4, r7, r5
 8007270:	4b19      	ldr	r3, [pc, #100]	@ (80072d8 <HAL_InitTick+0xfc>)
 8007272:	0018      	movs	r0, r3
 8007274:	f004 fcd2 	bl	800bc1c <HAL_TIM_Base_Init>
 8007278:	0003      	movs	r3, r0
 800727a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800727c:	197b      	adds	r3, r7, r5
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11e      	bne.n	80072c2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8007284:	197c      	adds	r4, r7, r5
 8007286:	4b14      	ldr	r3, [pc, #80]	@ (80072d8 <HAL_InitTick+0xfc>)
 8007288:	0018      	movs	r0, r3
 800728a:	f004 fd1f 	bl	800bccc <HAL_TIM_Base_Start_IT>
 800728e:	0003      	movs	r3, r0
 8007290:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8007292:	197b      	adds	r3, r7, r5
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d113      	bne.n	80072c2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800729a:	2016      	movs	r0, #22
 800729c:	f000 fe23 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d809      	bhi.n	80072ba <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	0019      	movs	r1, r3
 80072ac:	2016      	movs	r0, #22
 80072ae:	f000 fe05 	bl	8007ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80072b2:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <HAL_InitTick+0x108>)
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e003      	b.n	80072c2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80072ba:	232b      	movs	r3, #43	@ 0x2b
 80072bc:	18fb      	adds	r3, r7, r3
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80072c2:	232b      	movs	r3, #43	@ 0x2b
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	781b      	ldrb	r3, [r3, #0]
}
 80072c8:	0018      	movs	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b00c      	add	sp, #48	@ 0x30
 80072ce:	bdb0      	pop	{r4, r5, r7, pc}
 80072d0:	40021000 	.word	0x40021000
 80072d4:	000f4240 	.word	0x000f4240
 80072d8:	20002604 	.word	0x20002604
 80072dc:	40014800 	.word	0x40014800
 80072e0:	000003e7 	.word	0x000003e7
 80072e4:	20000074 	.word	0x20000074

080072e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80072ec:	f003 fa0e 	bl	800a70c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072f0:	46c0      	nop			@ (mov r8, r8)
 80072f2:	e7fd      	b.n	80072f0 <NMI_Handler+0x8>

080072f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <HardFault_Handler+0x64>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	2104      	movs	r1, #4
 80072fe:	0018      	movs	r0, r3
 8007300:	f001 fa0d 	bl	800871e <HAL_GPIO_WritePin>
	HAL_PWR_EnableBkUpAccess();
 8007304:	f002 fcac 	bl	8009c60 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 8007308:	4a14      	ldr	r2, [pc, #80]	@ (800735c <HardFault_Handler+0x68>)
 800730a:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <HardFault_Handler+0x6c>)
 800730c:	2100      	movs	r1, #0
 800730e:	0018      	movs	r0, r3
 8007310:	f003 fd2c 	bl	800ad6c <HAL_RTCEx_BKUPWrite>

	if (debug_enabled()) {
 8007314:	f7fe fbe0 	bl	8005ad8 <debug_enabled>
 8007318:	1e03      	subs	r3, r0, #0
 800731a:	d010      	beq.n	800733e <HardFault_Handler+0x4a>
		debug("==========");
 800731c:	4b11      	ldr	r3, [pc, #68]	@ (8007364 <HardFault_Handler+0x70>)
 800731e:	0018      	movs	r0, r3
 8007320:	f7fe fbe0 	bl	8005ae4 <debug>
		debug("HARD FAULT");
 8007324:	4b10      	ldr	r3, [pc, #64]	@ (8007368 <HardFault_Handler+0x74>)
 8007326:	0018      	movs	r0, r3
 8007328:	f7fe fbdc 	bl	8005ae4 <debug>
		debug("==========");
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <HardFault_Handler+0x70>)
 800732e:	0018      	movs	r0, r3
 8007330:	f7fe fbd8 	bl	8005ae4 <debug>

		send_all_debug_buffer_blocking();
 8007334:	f7fe fca8 	bl	8005c88 <send_all_debug_buffer_blocking>
		HAL_NVIC_SystemReset();
 8007338:	f000 fde5 	bl	8007f06 <HAL_NVIC_SystemReset>
 800733c:	e009      	b.n	8007352 <HardFault_Handler+0x5e>
	}
	else {
		HAL_PWR_EnableBkUpAccess();
 800733e:	f002 fc8f 	bl	8009c60 <HAL_PWR_EnableBkUpAccess>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBBBB);
 8007342:	4a06      	ldr	r2, [pc, #24]	@ (800735c <HardFault_Handler+0x68>)
 8007344:	4b06      	ldr	r3, [pc, #24]	@ (8007360 <HardFault_Handler+0x6c>)
 8007346:	2100      	movs	r1, #0
 8007348:	0018      	movs	r0, r3
 800734a:	f003 fd0f 	bl	800ad6c <HAL_RTCEx_BKUPWrite>
//		HAL_Delay(200);
		HAL_NVIC_SystemReset();		//Software Reset
 800734e:	f000 fdda 	bl	8007f06 <HAL_NVIC_SystemReset>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  vTaskSuspendAll();
 8007352:	f008 ff2f 	bl	80101b4 <vTaskSuspendAll>
 8007356:	e7fc      	b.n	8007352 <HardFault_Handler+0x5e>
 8007358:	50000c00 	.word	0x50000c00
 800735c:	0000bbbb 	.word	0x0000bbbb
 8007360:	20002510 	.word	0x20002510
 8007364:	08017088 	.word	0x08017088
 8007368:	08017094 	.word	0x08017094

0800736c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007370:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <TIM2_IRQHandler+0x14>)
 8007372:	0018      	movs	r0, r3
 8007374:	f004 fd06 	bl	800bd84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007378:	46c0      	nop			@ (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	200026a0 	.word	0x200026a0

08007384 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007388:	4b03      	ldr	r3, [pc, #12]	@ (8007398 <TIM17_IRQHandler+0x14>)
 800738a:	0018      	movs	r0, r3
 800738c:	f004 fcfa 	bl	800bd84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8007390:	46c0      	nop			@ (mov r8, r8)
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	20002604 	.word	0x20002604

0800739c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	extended_debug("USART1_IRQHandler\r\n");
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <USART1_IRQHandler+0x1c>)
 80073a2:	0018      	movs	r0, r3
 80073a4:	f7fe fc12 	bl	8005bcc <extended_debug>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80073a8:	4b04      	ldr	r3, [pc, #16]	@ (80073bc <USART1_IRQHandler+0x20>)
 80073aa:	0018      	movs	r0, r3
 80073ac:	f005 fb4c 	bl	800ca48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80073b0:	46c0      	nop			@ (mov r8, r8)
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	080170a0 	.word	0x080170a0
 80073bc:	200026ec 	.word	0x200026ec

080073c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	extended_debug("USART2_IRQHandler\r\n");
 80073c4:	4b05      	ldr	r3, [pc, #20]	@ (80073dc <USART2_IRQHandler+0x1c>)
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7fe fc00 	bl	8005bcc <extended_debug>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80073cc:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <USART2_IRQHandler+0x20>)
 80073ce:	0018      	movs	r0, r3
 80073d0:	f005 fb3a 	bl	800ca48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			@ (mov r8, r8)
 80073dc:	080170b4 	.word	0x080170b4
 80073e0:	20002780 	.word	0x20002780

080073e4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */
//	debug("USART3_4_LPUART1_IRQHandler\r\n");
  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80073e8:	4b05      	ldr	r3, [pc, #20]	@ (8007400 <USART3_4_LPUART1_IRQHandler+0x1c>)
 80073ea:	0018      	movs	r0, r3
 80073ec:	f005 fb2c 	bl	800ca48 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80073f0:	4b04      	ldr	r3, [pc, #16]	@ (8007404 <USART3_4_LPUART1_IRQHandler+0x20>)
 80073f2:	0018      	movs	r0, r3
 80073f4:	f005 fb28 	bl	800ca48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80073f8:	46c0      	nop			@ (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	20002814 	.word	0x20002814
 8007404:	200028a8 	.word	0x200028a8

08007408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  return 1;
 800740c:	2301      	movs	r3, #1
}
 800740e:	0018      	movs	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_kill>:

int _kill(int pid, int sig)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800741e:	f00b fdf5 	bl	801300c <__errno>
 8007422:	0003      	movs	r3, r0
 8007424:	2216      	movs	r2, #22
 8007426:	601a      	str	r2, [r3, #0]
  return -1;
 8007428:	2301      	movs	r3, #1
 800742a:	425b      	negs	r3, r3
}
 800742c:	0018      	movs	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}

08007434 <_exit>:

void _exit (int status)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800743c:	2301      	movs	r3, #1
 800743e:	425a      	negs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f7ff ffe5 	bl	8007414 <_kill>
  while (1) {}    /* Make sure we hang here */
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	e7fd      	b.n	800744a <_exit+0x16>

0800744e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e00a      	b.n	8007476 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007460:	e000      	b.n	8007464 <_read+0x16>
 8007462:	bf00      	nop
 8007464:	0001      	movs	r1, r0
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	60ba      	str	r2, [r7, #8]
 800746c:	b2ca      	uxtb	r2, r1
 800746e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	3301      	adds	r3, #1
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	429a      	cmp	r2, r3
 800747c:	dbf0      	blt.n	8007460 <_read+0x12>
  }

  return len;
 800747e:	687b      	ldr	r3, [r7, #4]
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b006      	add	sp, #24
 8007486:	bd80      	pop	{r7, pc}

08007488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e009      	b.n	80074ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	60ba      	str	r2, [r7, #8]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	0018      	movs	r0, r3
 80074a4:	e000      	b.n	80074a8 <_write+0x20>
 80074a6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3301      	adds	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	dbf1      	blt.n	800749a <_write+0x12>
  }
  return len;
 80074b6:	687b      	ldr	r3, [r7, #4]
}
 80074b8:	0018      	movs	r0, r3
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b006      	add	sp, #24
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_close>:

int _close(int file)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80074c8:	2301      	movs	r3, #1
 80074ca:	425b      	negs	r3, r3
}
 80074cc:	0018      	movs	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b002      	add	sp, #8
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2280      	movs	r2, #128	@ 0x80
 80074e2:	0192      	lsls	r2, r2, #6
 80074e4:	605a      	str	r2, [r3, #4]
  return 0;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b002      	add	sp, #8
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_isatty>:

int _isatty(int file)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80074f8:	2301      	movs	r3, #1
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b002      	add	sp, #8
 8007500:	bd80      	pop	{r7, pc}

08007502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800750e:	2300      	movs	r3, #0
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b004      	add	sp, #16
 8007516:	bd80      	pop	{r7, pc}

08007518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007520:	4a14      	ldr	r2, [pc, #80]	@ (8007574 <_sbrk+0x5c>)
 8007522:	4b15      	ldr	r3, [pc, #84]	@ (8007578 <_sbrk+0x60>)
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800752c:	4b13      	ldr	r3, [pc, #76]	@ (800757c <_sbrk+0x64>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007534:	4b11      	ldr	r3, [pc, #68]	@ (800757c <_sbrk+0x64>)
 8007536:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <_sbrk+0x68>)
 8007538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <_sbrk+0x64>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	18d3      	adds	r3, r2, r3
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	429a      	cmp	r2, r3
 8007546:	d207      	bcs.n	8007558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007548:	f00b fd60 	bl	801300c <__errno>
 800754c:	0003      	movs	r3, r0
 800754e:	220c      	movs	r2, #12
 8007550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007552:	2301      	movs	r3, #1
 8007554:	425b      	negs	r3, r3
 8007556:	e009      	b.n	800756c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007558:	4b08      	ldr	r3, [pc, #32]	@ (800757c <_sbrk+0x64>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800755e:	4b07      	ldr	r3, [pc, #28]	@ (800757c <_sbrk+0x64>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	18d2      	adds	r2, r2, r3
 8007566:	4b05      	ldr	r3, [pc, #20]	@ (800757c <_sbrk+0x64>)
 8007568:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800756a:	68fb      	ldr	r3, [r7, #12]
}
 800756c:	0018      	movs	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	b006      	add	sp, #24
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20009000 	.word	0x20009000
 8007578:	00000400 	.word	0x00000400
 800757c:	20002650 	.word	0x20002650
 8007580:	20007288 	.word	0x20007288

08007584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007588:	46c0      	nop			@ (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007596:	2310      	movs	r3, #16
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	0018      	movs	r0, r3
 800759c:	2310      	movs	r3, #16
 800759e:	001a      	movs	r2, r3
 80075a0:	2100      	movs	r1, #0
 80075a2:	f00b fc79 	bl	8012e98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	0018      	movs	r0, r3
 80075aa:	230c      	movs	r3, #12
 80075ac:	001a      	movs	r2, r3
 80075ae:	2100      	movs	r1, #0
 80075b0:	f00b fc72 	bl	8012e98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80075b4:	4b21      	ldr	r3, [pc, #132]	@ (800763c <MX_TIM1_Init+0xac>)
 80075b6:	4a22      	ldr	r2, [pc, #136]	@ (8007640 <MX_TIM1_Init+0xb0>)
 80075b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80075ba:	4b20      	ldr	r3, [pc, #128]	@ (800763c <MX_TIM1_Init+0xac>)
 80075bc:	223f      	movs	r2, #63	@ 0x3f
 80075be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075c0:	4b1e      	ldr	r3, [pc, #120]	@ (800763c <MX_TIM1_Init+0xac>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80075c6:	4b1d      	ldr	r3, [pc, #116]	@ (800763c <MX_TIM1_Init+0xac>)
 80075c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007644 <MX_TIM1_Init+0xb4>)
 80075ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075cc:	4b1b      	ldr	r3, [pc, #108]	@ (800763c <MX_TIM1_Init+0xac>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80075d2:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <MX_TIM1_Init+0xac>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075d8:	4b18      	ldr	r3, [pc, #96]	@ (800763c <MX_TIM1_Init+0xac>)
 80075da:	2200      	movs	r2, #0
 80075dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80075de:	4b17      	ldr	r3, [pc, #92]	@ (800763c <MX_TIM1_Init+0xac>)
 80075e0:	0018      	movs	r0, r3
 80075e2:	f004 fb1b 	bl	800bc1c <HAL_TIM_Base_Init>
 80075e6:	1e03      	subs	r3, r0, #0
 80075e8:	d001      	beq.n	80075ee <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80075ea:	f7ff fbd9 	bl	8006da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075ee:	2110      	movs	r1, #16
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	2280      	movs	r2, #128	@ 0x80
 80075f4:	0152      	lsls	r2, r2, #5
 80075f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80075f8:	187a      	adds	r2, r7, r1
 80075fa:	4b10      	ldr	r3, [pc, #64]	@ (800763c <MX_TIM1_Init+0xac>)
 80075fc:	0011      	movs	r1, r2
 80075fe:	0018      	movs	r0, r3
 8007600:	f004 fcc8 	bl	800bf94 <HAL_TIM_ConfigClockSource>
 8007604:	1e03      	subs	r3, r0, #0
 8007606:	d001      	beq.n	800760c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007608:	f7ff fbca 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800760c:	1d3b      	adds	r3, r7, #4
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	2200      	movs	r2, #0
 8007616:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800761e:	1d3a      	adds	r2, r7, #4
 8007620:	4b06      	ldr	r3, [pc, #24]	@ (800763c <MX_TIM1_Init+0xac>)
 8007622:	0011      	movs	r1, r2
 8007624:	0018      	movs	r0, r3
 8007626:	f004 fed5 	bl	800c3d4 <HAL_TIMEx_MasterConfigSynchronization>
 800762a:	1e03      	subs	r3, r0, #0
 800762c:	d001      	beq.n	8007632 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800762e:	f7ff fbb7 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	46bd      	mov	sp, r7
 8007636:	b008      	add	sp, #32
 8007638:	bd80      	pop	{r7, pc}
 800763a:	46c0      	nop			@ (mov r8, r8)
 800763c:	20002654 	.word	0x20002654
 8007640:	40012c00 	.word	0x40012c00
 8007644:	0000ffff 	.word	0x0000ffff

08007648 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800764e:	2310      	movs	r3, #16
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	0018      	movs	r0, r3
 8007654:	2310      	movs	r3, #16
 8007656:	001a      	movs	r2, r3
 8007658:	2100      	movs	r1, #0
 800765a:	f00b fc1d 	bl	8012e98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	0018      	movs	r0, r3
 8007662:	230c      	movs	r3, #12
 8007664:	001a      	movs	r2, r3
 8007666:	2100      	movs	r1, #0
 8007668:	f00b fc16 	bl	8012e98 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800766c:	4b1e      	ldr	r3, [pc, #120]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 800766e:	2280      	movs	r2, #128	@ 0x80
 8007670:	05d2      	lsls	r2, r2, #23
 8007672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8007674:	4b1c      	ldr	r3, [pc, #112]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 8007676:	223f      	movs	r2, #63	@ 0x3f
 8007678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800767a:	4b1b      	ldr	r3, [pc, #108]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 800767c:	2200      	movs	r2, #0
 800767e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8007680:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 8007682:	2263      	movs	r2, #99	@ 0x63
 8007684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007686:	4b18      	ldr	r3, [pc, #96]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 8007688:	2200      	movs	r2, #0
 800768a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800768c:	4b16      	ldr	r3, [pc, #88]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 800768e:	2200      	movs	r2, #0
 8007690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007692:	4b15      	ldr	r3, [pc, #84]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 8007694:	0018      	movs	r0, r3
 8007696:	f004 fac1 	bl	800bc1c <HAL_TIM_Base_Init>
 800769a:	1e03      	subs	r3, r0, #0
 800769c:	d001      	beq.n	80076a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800769e:	f7ff fb7f 	bl	8006da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80076a2:	2110      	movs	r1, #16
 80076a4:	187b      	adds	r3, r7, r1
 80076a6:	2280      	movs	r2, #128	@ 0x80
 80076a8:	0152      	lsls	r2, r2, #5
 80076aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80076ac:	187a      	adds	r2, r7, r1
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f004 fc6e 	bl	800bf94 <HAL_TIM_ConfigClockSource>
 80076b8:	1e03      	subs	r3, r0, #0
 80076ba:	d001      	beq.n	80076c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80076bc:	f7ff fb70 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076c6:	1d3b      	adds	r3, r7, #4
 80076c8:	2200      	movs	r2, #0
 80076ca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80076cc:	1d3a      	adds	r2, r7, #4
 80076ce:	4b06      	ldr	r3, [pc, #24]	@ (80076e8 <MX_TIM2_Init+0xa0>)
 80076d0:	0011      	movs	r1, r2
 80076d2:	0018      	movs	r0, r3
 80076d4:	f004 fe7e 	bl	800c3d4 <HAL_TIMEx_MasterConfigSynchronization>
 80076d8:	1e03      	subs	r3, r0, #0
 80076da:	d001      	beq.n	80076e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80076dc:	f7ff fb60 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80076e0:	46c0      	nop			@ (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b008      	add	sp, #32
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200026a0 	.word	0x200026a0

080076ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b093      	sub	sp, #76	@ 0x4c
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076f4:	2414      	movs	r4, #20
 80076f6:	193b      	adds	r3, r7, r4
 80076f8:	0018      	movs	r0, r3
 80076fa:	2334      	movs	r3, #52	@ 0x34
 80076fc:	001a      	movs	r2, r3
 80076fe:	2100      	movs	r1, #0
 8007700:	f00b fbca 	bl	8012e98 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <HAL_TIM_Base_MspInit+0x9c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d11d      	bne.n	800774a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800770e:	193b      	adds	r3, r7, r4
 8007710:	2280      	movs	r2, #128	@ 0x80
 8007712:	0392      	lsls	r2, r2, #14
 8007714:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8007716:	193b      	adds	r3, r7, r4
 8007718:	2200      	movs	r2, #0
 800771a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800771c:	193b      	adds	r3, r7, r4
 800771e:	0018      	movs	r0, r3
 8007720:	f003 f81e 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8007724:	1e03      	subs	r3, r0, #0
 8007726:	d001      	beq.n	800772c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8007728:	f7ff fb3a 	bl	8006da0 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800772c:	4b17      	ldr	r3, [pc, #92]	@ (800778c <HAL_TIM_Base_MspInit+0xa0>)
 800772e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007730:	4b16      	ldr	r3, [pc, #88]	@ (800778c <HAL_TIM_Base_MspInit+0xa0>)
 8007732:	2180      	movs	r1, #128	@ 0x80
 8007734:	0109      	lsls	r1, r1, #4
 8007736:	430a      	orrs	r2, r1
 8007738:	641a      	str	r2, [r3, #64]	@ 0x40
 800773a:	4b14      	ldr	r3, [pc, #80]	@ (800778c <HAL_TIM_Base_MspInit+0xa0>)
 800773c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800773e:	2380      	movs	r3, #128	@ 0x80
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	4013      	ands	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007748:	e019      	b.n	800777e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	2380      	movs	r3, #128	@ 0x80
 8007750:	05db      	lsls	r3, r3, #23
 8007752:	429a      	cmp	r2, r3
 8007754:	d113      	bne.n	800777e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <HAL_TIM_Base_MspInit+0xa0>)
 8007758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800775a:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <HAL_TIM_Base_MspInit+0xa0>)
 800775c:	2101      	movs	r1, #1
 800775e:	430a      	orrs	r2, r1
 8007760:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007762:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <HAL_TIM_Base_MspInit+0xa0>)
 8007764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007766:	2201      	movs	r2, #1
 8007768:	4013      	ands	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800776e:	2200      	movs	r2, #0
 8007770:	2103      	movs	r1, #3
 8007772:	200f      	movs	r0, #15
 8007774:	f000 fba2 	bl	8007ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007778:	200f      	movs	r0, #15
 800777a:	f000 fbb4 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	46bd      	mov	sp, r7
 8007782:	b013      	add	sp, #76	@ 0x4c
 8007784:	bd90      	pop	{r4, r7, pc}
 8007786:	46c0      	nop			@ (mov r8, r8)
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40021000 	.word	0x40021000

08007790 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007794:	4b24      	ldr	r3, [pc, #144]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 8007796:	4a25      	ldr	r2, [pc, #148]	@ (800782c <MX_USART1_UART_Init+0x9c>)
 8007798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800779a:	4b23      	ldr	r3, [pc, #140]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 800779c:	22e1      	movs	r2, #225	@ 0xe1
 800779e:	0252      	lsls	r2, r2, #9
 80077a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80077a2:	4b21      	ldr	r3, [pc, #132]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80077a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80077ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80077b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077b6:	220c      	movs	r2, #12
 80077b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077bc:	2200      	movs	r2, #0
 80077be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80077c0:	4b19      	ldr	r3, [pc, #100]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80077c6:	4b18      	ldr	r3, [pc, #96]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80077cc:	4b16      	ldr	r3, [pc, #88]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80077d2:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80077d8:	4813      	ldr	r0, [pc, #76]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077da:	2300      	movs	r3, #0
 80077dc:	2200      	movs	r2, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	f007 f97e 	bl	800eae0 <HAL_RS485Ex_Init>
 80077e4:	1e03      	subs	r3, r0, #0
 80077e6:	d001      	beq.n	80077ec <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80077e8:	f7ff fada 	bl	8006da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80077ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 80077ee:	2100      	movs	r1, #0
 80077f0:	0018      	movs	r0, r3
 80077f2:	f007 fa77 	bl	800ece4 <HAL_UARTEx_SetTxFifoThreshold>
 80077f6:	1e03      	subs	r3, r0, #0
 80077f8:	d001      	beq.n	80077fe <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80077fa:	f7ff fad1 	bl	8006da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80077fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 8007800:	2100      	movs	r1, #0
 8007802:	0018      	movs	r0, r3
 8007804:	f007 faae 	bl	800ed64 <HAL_UARTEx_SetRxFifoThreshold>
 8007808:	1e03      	subs	r3, r0, #0
 800780a:	d001      	beq.n	8007810 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800780c:	f7ff fac8 	bl	8006da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <MX_USART1_UART_Init+0x98>)
 8007812:	0018      	movs	r0, r3
 8007814:	f007 fa2c 	bl	800ec70 <HAL_UARTEx_DisableFifoMode>
 8007818:	1e03      	subs	r3, r0, #0
 800781a:	d001      	beq.n	8007820 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800781c:	f7ff fac0 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007820:	46c0      	nop			@ (mov r8, r8)
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	46c0      	nop			@ (mov r8, r8)
 8007828:	200026ec 	.word	0x200026ec
 800782c:	40013800 	.word	0x40013800

08007830 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007834:	4b24      	ldr	r3, [pc, #144]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007836:	4a25      	ldr	r2, [pc, #148]	@ (80078cc <MX_USART2_UART_Init+0x9c>)
 8007838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800783a:	4b23      	ldr	r3, [pc, #140]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 800783c:	2296      	movs	r2, #150	@ 0x96
 800783e:	0212      	lsls	r2, r2, #8
 8007840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8007842:	4b21      	ldr	r3, [pc, #132]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007844:	2280      	movs	r2, #128	@ 0x80
 8007846:	0152      	lsls	r2, r2, #5
 8007848:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800784a:	4b1f      	ldr	r3, [pc, #124]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 800784c:	2200      	movs	r2, #0
 800784e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8007850:	4b1d      	ldr	r3, [pc, #116]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007852:	2280      	movs	r2, #128	@ 0x80
 8007854:	00d2      	lsls	r2, r2, #3
 8007856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007858:	4b1b      	ldr	r3, [pc, #108]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 800785a:	220c      	movs	r2, #12
 800785c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800785e:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007860:	2200      	movs	r2, #0
 8007862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007864:	4b18      	ldr	r3, [pc, #96]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007866:	2200      	movs	r2, #0
 8007868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800786a:	4b17      	ldr	r3, [pc, #92]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 800786c:	2200      	movs	r2, #0
 800786e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007870:	4b15      	ldr	r3, [pc, #84]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007872:	2200      	movs	r2, #0
 8007874:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007876:	4b14      	ldr	r3, [pc, #80]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 8007878:	2200      	movs	r2, #0
 800787a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800787c:	4b12      	ldr	r3, [pc, #72]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 800787e:	0018      	movs	r0, r3
 8007880:	f004 fe2e 	bl	800c4e0 <HAL_UART_Init>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d001      	beq.n	800788c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8007888:	f7ff fa8a 	bl	8006da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800788c:	4b0e      	ldr	r3, [pc, #56]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 800788e:	2100      	movs	r1, #0
 8007890:	0018      	movs	r0, r3
 8007892:	f007 fa27 	bl	800ece4 <HAL_UARTEx_SetTxFifoThreshold>
 8007896:	1e03      	subs	r3, r0, #0
 8007898:	d001      	beq.n	800789e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800789a:	f7ff fa81 	bl	8006da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800789e:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 80078a0:	2100      	movs	r1, #0
 80078a2:	0018      	movs	r0, r3
 80078a4:	f007 fa5e 	bl	800ed64 <HAL_UARTEx_SetRxFifoThreshold>
 80078a8:	1e03      	subs	r3, r0, #0
 80078aa:	d001      	beq.n	80078b0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80078ac:	f7ff fa78 	bl	8006da0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80078b0:	4b05      	ldr	r3, [pc, #20]	@ (80078c8 <MX_USART2_UART_Init+0x98>)
 80078b2:	0018      	movs	r0, r3
 80078b4:	f007 f99e 	bl	800ebf4 <HAL_UARTEx_EnableFifoMode>
 80078b8:	1e03      	subs	r3, r0, #0
 80078ba:	d001      	beq.n	80078c0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80078bc:	f7ff fa70 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80078c0:	46c0      	nop			@ (mov r8, r8)
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	20002780 	.word	0x20002780
 80078cc:	40004400 	.word	0x40004400

080078d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80078d4:	4b16      	ldr	r3, [pc, #88]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078d6:	4a17      	ldr	r2, [pc, #92]	@ (8007934 <MX_USART3_UART_Init+0x64>)
 80078d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80078da:	4b15      	ldr	r3, [pc, #84]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078dc:	22e1      	movs	r2, #225	@ 0xe1
 80078de:	0252      	lsls	r2, r2, #9
 80078e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80078e2:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80078e8:	4b11      	ldr	r3, [pc, #68]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80078ee:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80078f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078f6:	220c      	movs	r2, #12
 80078f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 8007902:	2200      	movs	r2, #0
 8007904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007906:	4b0a      	ldr	r3, [pc, #40]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 8007908:	2200      	movs	r2, #0
 800790a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800790c:	4b08      	ldr	r3, [pc, #32]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 800790e:	2200      	movs	r2, #0
 8007910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007912:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 8007914:	2200      	movs	r2, #0
 8007916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007918:	4b05      	ldr	r3, [pc, #20]	@ (8007930 <MX_USART3_UART_Init+0x60>)
 800791a:	0018      	movs	r0, r3
 800791c:	f004 fde0 	bl	800c4e0 <HAL_UART_Init>
 8007920:	1e03      	subs	r3, r0, #0
 8007922:	d001      	beq.n	8007928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007924:	f7ff fa3c 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007928:	46c0      	nop			@ (mov r8, r8)
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			@ (mov r8, r8)
 8007930:	20002814 	.word	0x20002814
 8007934:	40004800 	.word	0x40004800

08007938 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800793c:	4b16      	ldr	r3, [pc, #88]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 800793e:	4a17      	ldr	r2, [pc, #92]	@ (800799c <MX_USART4_UART_Init+0x64>)
 8007940:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007942:	4b15      	ldr	r3, [pc, #84]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007944:	22e1      	movs	r2, #225	@ 0xe1
 8007946:	0252      	lsls	r2, r2, #9
 8007948:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800794a:	4b13      	ldr	r3, [pc, #76]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 800794c:	2200      	movs	r2, #0
 800794e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007950:	4b11      	ldr	r3, [pc, #68]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007952:	2200      	movs	r2, #0
 8007954:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007956:	4b10      	ldr	r3, [pc, #64]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007958:	2200      	movs	r2, #0
 800795a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800795c:	4b0e      	ldr	r3, [pc, #56]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 800795e:	220c      	movs	r2, #12
 8007960:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007964:	2200      	movs	r2, #0
 8007966:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007968:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 800796a:	2200      	movs	r2, #0
 800796c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800796e:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007970:	2200      	movs	r2, #0
 8007972:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007974:	4b08      	ldr	r3, [pc, #32]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007976:	2200      	movs	r2, #0
 8007978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 800797c:	2200      	movs	r2, #0
 800797e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <MX_USART4_UART_Init+0x60>)
 8007982:	0018      	movs	r0, r3
 8007984:	f004 fdac 	bl	800c4e0 <HAL_UART_Init>
 8007988:	1e03      	subs	r3, r0, #0
 800798a:	d001      	beq.n	8007990 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 800798c:	f7ff fa08 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007990:	46c0      	nop			@ (mov r8, r8)
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	46c0      	nop			@ (mov r8, r8)
 8007998:	200028a8 	.word	0x200028a8
 800799c:	40004c00 	.word	0x40004c00

080079a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b09d      	sub	sp, #116	@ 0x74
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079a8:	235c      	movs	r3, #92	@ 0x5c
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	0018      	movs	r0, r3
 80079ae:	2314      	movs	r3, #20
 80079b0:	001a      	movs	r2, r3
 80079b2:	2100      	movs	r1, #0
 80079b4:	f00b fa70 	bl	8012e98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80079b8:	2428      	movs	r4, #40	@ 0x28
 80079ba:	193b      	adds	r3, r7, r4
 80079bc:	0018      	movs	r0, r3
 80079be:	2334      	movs	r3, #52	@ 0x34
 80079c0:	001a      	movs	r2, r3
 80079c2:	2100      	movs	r1, #0
 80079c4:	f00b fa68 	bl	8012e98 <memset>
  if(uartHandle->Instance==USART1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a96      	ldr	r2, [pc, #600]	@ (8007c28 <HAL_UART_MspInit+0x288>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d15c      	bne.n	8007a8c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80079d2:	193b      	adds	r3, r7, r4
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80079d8:	193b      	adds	r3, r7, r4
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079de:	193b      	adds	r3, r7, r4
 80079e0:	0018      	movs	r0, r3
 80079e2:	f002 febd 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 80079e6:	1e03      	subs	r3, r0, #0
 80079e8:	d001      	beq.n	80079ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80079ea:	f7ff f9d9 	bl	8006da0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80079ee:	4b8f      	ldr	r3, [pc, #572]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 80079f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079f2:	4b8e      	ldr	r3, [pc, #568]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 80079f4:	2180      	movs	r1, #128	@ 0x80
 80079f6:	01c9      	lsls	r1, r1, #7
 80079f8:	430a      	orrs	r2, r1
 80079fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80079fc:	4b8b      	ldr	r3, [pc, #556]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 80079fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a00:	2380      	movs	r3, #128	@ 0x80
 8007a02:	01db      	lsls	r3, r3, #7
 8007a04:	4013      	ands	r3, r2
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a0a:	4b88      	ldr	r3, [pc, #544]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a0e:	4b87      	ldr	r3, [pc, #540]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007a10:	2102      	movs	r1, #2
 8007a12:	430a      	orrs	r2, r1
 8007a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a16:	4b85      	ldr	r3, [pc, #532]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	623b      	str	r3, [r7, #32]
 8007a20:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007a22:	245c      	movs	r4, #92	@ 0x5c
 8007a24:	193b      	adds	r3, r7, r4
 8007a26:	2208      	movs	r2, #8
 8007a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a2a:	193b      	adds	r3, r7, r4
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a30:	193b      	adds	r3, r7, r4
 8007a32:	2200      	movs	r2, #0
 8007a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a36:	193b      	adds	r3, r7, r4
 8007a38:	2200      	movs	r2, #0
 8007a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007a3c:	193b      	adds	r3, r7, r4
 8007a3e:	2204      	movs	r2, #4
 8007a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a42:	193b      	adds	r3, r7, r4
 8007a44:	4a7a      	ldr	r2, [pc, #488]	@ (8007c30 <HAL_UART_MspInit+0x290>)
 8007a46:	0019      	movs	r1, r3
 8007a48:	0010      	movs	r0, r2
 8007a4a:	f000 fce7 	bl	800841c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a4e:	0021      	movs	r1, r4
 8007a50:	187b      	adds	r3, r7, r1
 8007a52:	22c0      	movs	r2, #192	@ 0xc0
 8007a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a56:	187b      	adds	r3, r7, r1
 8007a58:	2202      	movs	r2, #2
 8007a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5c:	187b      	adds	r3, r7, r1
 8007a5e:	2200      	movs	r2, #0
 8007a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a62:	187b      	adds	r3, r7, r1
 8007a64:	2200      	movs	r2, #0
 8007a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8007a68:	187b      	adds	r3, r7, r1
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a6e:	187b      	adds	r3, r7, r1
 8007a70:	4a6f      	ldr	r2, [pc, #444]	@ (8007c30 <HAL_UART_MspInit+0x290>)
 8007a72:	0019      	movs	r1, r3
 8007a74:	0010      	movs	r0, r2
 8007a76:	f000 fcd1 	bl	800841c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2103      	movs	r1, #3
 8007a7e:	201b      	movs	r0, #27
 8007a80:	f000 fa1c 	bl	8007ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007a84:	201b      	movs	r0, #27
 8007a86:	f000 fa2e 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007a8a:	e0c9      	b.n	8007c20 <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART2)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a68      	ldr	r2, [pc, #416]	@ (8007c34 <HAL_UART_MspInit+0x294>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d147      	bne.n	8007b26 <HAL_UART_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007a96:	2128      	movs	r1, #40	@ 0x28
 8007a98:	187b      	adds	r3, r7, r1
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007aa4:	187b      	adds	r3, r7, r1
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	f002 fe5a 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8007aac:	1e03      	subs	r3, r0, #0
 8007aae:	d001      	beq.n	8007ab4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8007ab0:	f7ff f976 	bl	8006da0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007aba:	2180      	movs	r1, #128	@ 0x80
 8007abc:	0289      	lsls	r1, r1, #10
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007ac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac6:	2380      	movs	r3, #128	@ 0x80
 8007ac8:	029b      	lsls	r3, r3, #10
 8007aca:	4013      	ands	r3, r2
 8007acc:	61fb      	str	r3, [r7, #28]
 8007ace:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ad0:	4b56      	ldr	r3, [pc, #344]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad4:	4b55      	ldr	r3, [pc, #340]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007ad6:	2108      	movs	r1, #8
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	635a      	str	r2, [r3, #52]	@ 0x34
 8007adc:	4b53      	ldr	r3, [pc, #332]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007ae8:	215c      	movs	r1, #92	@ 0x5c
 8007aea:	187b      	adds	r3, r7, r1
 8007aec:	2260      	movs	r2, #96	@ 0x60
 8007aee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	2202      	movs	r2, #2
 8007af4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af6:	187b      	adds	r3, r7, r1
 8007af8:	2200      	movs	r2, #0
 8007afa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007afc:	187b      	adds	r3, r7, r1
 8007afe:	2200      	movs	r2, #0
 8007b00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	2200      	movs	r2, #0
 8007b06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b08:	187b      	adds	r3, r7, r1
 8007b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8007c38 <HAL_UART_MspInit+0x298>)
 8007b0c:	0019      	movs	r1, r3
 8007b0e:	0010      	movs	r0, r2
 8007b10:	f000 fc84 	bl	800841c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007b14:	2200      	movs	r2, #0
 8007b16:	2103      	movs	r1, #3
 8007b18:	201c      	movs	r0, #28
 8007b1a:	f000 f9cf 	bl	8007ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007b1e:	201c      	movs	r0, #28
 8007b20:	f000 f9e1 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
}
 8007b24:	e07c      	b.n	8007c20 <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART3)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a44      	ldr	r2, [pc, #272]	@ (8007c3c <HAL_UART_MspInit+0x29c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d139      	bne.n	8007ba4 <HAL_UART_MspInit+0x204>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007b30:	4b3e      	ldr	r3, [pc, #248]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b34:	4b3d      	ldr	r3, [pc, #244]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007b36:	2180      	movs	r1, #128	@ 0x80
 8007b38:	02c9      	lsls	r1, r1, #11
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b42:	2380      	movs	r3, #128	@ 0x80
 8007b44:	02db      	lsls	r3, r3, #11
 8007b46:	4013      	ands	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b4c:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b50:	4b36      	ldr	r3, [pc, #216]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007b52:	2102      	movs	r1, #2
 8007b54:	430a      	orrs	r2, r1
 8007b56:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b58:	4b34      	ldr	r3, [pc, #208]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	4013      	ands	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007b64:	215c      	movs	r1, #92	@ 0x5c
 8007b66:	187b      	adds	r3, r7, r1
 8007b68:	22c0      	movs	r2, #192	@ 0xc0
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b6e:	187b      	adds	r3, r7, r1
 8007b70:	2202      	movs	r2, #2
 8007b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b74:	187b      	adds	r3, r7, r1
 8007b76:	2200      	movs	r2, #0
 8007b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b7a:	187b      	adds	r3, r7, r1
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007b80:	187b      	adds	r3, r7, r1
 8007b82:	2204      	movs	r2, #4
 8007b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b86:	187b      	adds	r3, r7, r1
 8007b88:	4a29      	ldr	r2, [pc, #164]	@ (8007c30 <HAL_UART_MspInit+0x290>)
 8007b8a:	0019      	movs	r1, r3
 8007b8c:	0010      	movs	r0, r2
 8007b8e:	f000 fc45 	bl	800841c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 8007b92:	2200      	movs	r2, #0
 8007b94:	2103      	movs	r1, #3
 8007b96:	201d      	movs	r0, #29
 8007b98:	f000 f990 	bl	8007ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007b9c:	201d      	movs	r0, #29
 8007b9e:	f000 f9a2 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
}
 8007ba2:	e03d      	b.n	8007c20 <HAL_UART_MspInit+0x280>
  else if(uartHandle->Instance==USART4)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a25      	ldr	r2, [pc, #148]	@ (8007c40 <HAL_UART_MspInit+0x2a0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d138      	bne.n	8007c20 <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007bae:	4b1f      	ldr	r3, [pc, #124]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007bb4:	2180      	movs	r1, #128	@ 0x80
 8007bb6:	0309      	lsls	r1, r1, #12
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc0:	2380      	movs	r3, #128	@ 0x80
 8007bc2:	031b      	lsls	r3, r3, #12
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bca:	4b18      	ldr	r3, [pc, #96]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bce:	4b17      	ldr	r3, [pc, #92]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007bd0:	2104      	movs	r1, #4
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8007bd6:	4b15      	ldr	r3, [pc, #84]	@ (8007c2c <HAL_UART_MspInit+0x28c>)
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bda:	2204      	movs	r2, #4
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8007be2:	215c      	movs	r1, #92	@ 0x5c
 8007be4:	187b      	adds	r3, r7, r1
 8007be6:	22c0      	movs	r2, #192	@ 0xc0
 8007be8:	0112      	lsls	r2, r2, #4
 8007bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bec:	187b      	adds	r3, r7, r1
 8007bee:	2202      	movs	r2, #2
 8007bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf2:	187b      	adds	r3, r7, r1
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bf8:	187b      	adds	r3, r7, r1
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 8007bfe:	187b      	adds	r3, r7, r1
 8007c00:	2201      	movs	r2, #1
 8007c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c04:	187b      	adds	r3, r7, r1
 8007c06:	4a0f      	ldr	r2, [pc, #60]	@ (8007c44 <HAL_UART_MspInit+0x2a4>)
 8007c08:	0019      	movs	r1, r3
 8007c0a:	0010      	movs	r0, r2
 8007c0c:	f000 fc06 	bl	800841c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3, 0);
 8007c10:	2200      	movs	r2, #0
 8007c12:	2103      	movs	r1, #3
 8007c14:	201d      	movs	r0, #29
 8007c16:	f000 f951 	bl	8007ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8007c1a:	201d      	movs	r0, #29
 8007c1c:	f000 f963 	bl	8007ee6 <HAL_NVIC_EnableIRQ>
}
 8007c20:	46c0      	nop			@ (mov r8, r8)
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b01d      	add	sp, #116	@ 0x74
 8007c26:	bd90      	pop	{r4, r7, pc}
 8007c28:	40013800 	.word	0x40013800
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	50000400 	.word	0x50000400
 8007c34:	40004400 	.word	0x40004400
 8007c38:	50000c00 	.word	0x50000c00
 8007c3c:	40004800 	.word	0x40004800
 8007c40:	40004c00 	.word	0x40004c00
 8007c44:	50000800 	.word	0x50000800

08007c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007c48:	480d      	ldr	r0, [pc, #52]	@ (8007c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007c4c:	f7ff fc9a 	bl	8007584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007c50:	480c      	ldr	r0, [pc, #48]	@ (8007c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8007c52:	490d      	ldr	r1, [pc, #52]	@ (8007c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007c54:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <LoopForever+0xe>)
  movs r3, #0
 8007c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c58:	e002      	b.n	8007c60 <LoopCopyDataInit>

08007c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c5e:	3304      	adds	r3, #4

08007c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c64:	d3f9      	bcc.n	8007c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c66:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007c68:	4c0a      	ldr	r4, [pc, #40]	@ (8007c94 <LoopForever+0x16>)
  movs r3, #0
 8007c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c6c:	e001      	b.n	8007c72 <LoopFillZerobss>

08007c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c70:	3204      	adds	r2, #4

08007c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c74:	d3fb      	bcc.n	8007c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007c76:	f00b f9cf 	bl	8013018 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007c7a:	f7fe ffa5 	bl	8006bc8 <main>

08007c7e <LoopForever>:

LoopForever:
  b LoopForever
 8007c7e:	e7fe      	b.n	8007c7e <LoopForever>
  ldr   r0, =_estack
 8007c80:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c88:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8007c8c:	08017754 	.word	0x08017754
  ldr r2, =_sbss
 8007c90:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8007c94:	20007288 	.word	0x20007288

08007c98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c98:	e7fe      	b.n	8007c98 <ADC1_COMP_IRQHandler>
	...

08007c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007ca2:	1dfb      	adds	r3, r7, #7
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd8 <HAL_Init+0x3c>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd8 <HAL_Init+0x3c>)
 8007cae:	2180      	movs	r1, #128	@ 0x80
 8007cb0:	0049      	lsls	r1, r1, #1
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007cb6:	2003      	movs	r0, #3
 8007cb8:	f7ff fa90 	bl	80071dc <HAL_InitTick>
 8007cbc:	1e03      	subs	r3, r0, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007cc0:	1dfb      	adds	r3, r7, #7
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e001      	b.n	8007ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007cc8:	f7ff fa58 	bl	800717c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007ccc:	1dfb      	adds	r3, r7, #7
 8007cce:	781b      	ldrb	r3, [r3, #0]
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40022000 	.word	0x40022000

08007cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <HAL_IncTick+0x1c>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	001a      	movs	r2, r3
 8007ce6:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <HAL_IncTick+0x20>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	18d2      	adds	r2, r2, r3
 8007cec:	4b03      	ldr	r3, [pc, #12]	@ (8007cfc <HAL_IncTick+0x20>)
 8007cee:	601a      	str	r2, [r3, #0]
}
 8007cf0:	46c0      	nop			@ (mov r8, r8)
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	46c0      	nop			@ (mov r8, r8)
 8007cf8:	20000078 	.word	0x20000078
 8007cfc:	2000293c 	.word	0x2000293c

08007d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  return uwTick;
 8007d04:	4b02      	ldr	r3, [pc, #8]	@ (8007d10 <HAL_GetTick+0x10>)
 8007d06:	681b      	ldr	r3, [r3, #0]
}
 8007d08:	0018      	movs	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	46c0      	nop			@ (mov r8, r8)
 8007d10:	2000293c 	.word	0x2000293c

08007d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d1c:	f7ff fff0 	bl	8007d00 <HAL_GetTick>
 8007d20:	0003      	movs	r3, r0
 8007d22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	d005      	beq.n	8007d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <HAL_Delay+0x44>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	001a      	movs	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	189b      	adds	r3, r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d3a:	46c0      	nop			@ (mov r8, r8)
 8007d3c:	f7ff ffe0 	bl	8007d00 <HAL_GetTick>
 8007d40:	0002      	movs	r2, r0
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d8f7      	bhi.n	8007d3c <HAL_Delay+0x28>
  {
  }
}
 8007d4c:	46c0      	nop			@ (mov r8, r8)
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b004      	add	sp, #16
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			@ (mov r8, r8)
 8007d58:	20000078 	.word	0x20000078

08007d5c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007d64:	4b06      	ldr	r3, [pc, #24]	@ (8007d80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a06      	ldr	r2, [pc, #24]	@ (8007d84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	0019      	movs	r1, r3
 8007d6e:	4b04      	ldr	r3, [pc, #16]	@ (8007d80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	601a      	str	r2, [r3, #0]
}
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b002      	add	sp, #8
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	40010000 	.word	0x40010000
 8007d84:	fffff9ff 	.word	0xfffff9ff

08007d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	0002      	movs	r2, r0
 8007d90:	1dfb      	adds	r3, r7, #7
 8007d92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007d94:	1dfb      	adds	r3, r7, #7
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d9a:	d809      	bhi.n	8007db0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d9c:	1dfb      	adds	r3, r7, #7
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	001a      	movs	r2, r3
 8007da2:	231f      	movs	r3, #31
 8007da4:	401a      	ands	r2, r3
 8007da6:	4b04      	ldr	r3, [pc, #16]	@ (8007db8 <__NVIC_EnableIRQ+0x30>)
 8007da8:	2101      	movs	r1, #1
 8007daa:	4091      	lsls	r1, r2
 8007dac:	000a      	movs	r2, r1
 8007dae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007db0:	46c0      	nop			@ (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000e100 	.word	0xe000e100

08007dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	1dfb      	adds	r3, r7, #7
 8007dc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007dca:	1dfb      	adds	r3, r7, #7
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dd0:	d828      	bhi.n	8007e24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8007e90 <__NVIC_SetPriority+0xd4>)
 8007dd4:	1dfb      	adds	r3, r7, #7
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	089b      	lsrs	r3, r3, #2
 8007ddc:	33c0      	adds	r3, #192	@ 0xc0
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	589b      	ldr	r3, [r3, r2]
 8007de2:	1dfa      	adds	r2, r7, #7
 8007de4:	7812      	ldrb	r2, [r2, #0]
 8007de6:	0011      	movs	r1, r2
 8007de8:	2203      	movs	r2, #3
 8007dea:	400a      	ands	r2, r1
 8007dec:	00d2      	lsls	r2, r2, #3
 8007dee:	21ff      	movs	r1, #255	@ 0xff
 8007df0:	4091      	lsls	r1, r2
 8007df2:	000a      	movs	r2, r1
 8007df4:	43d2      	mvns	r2, r2
 8007df6:	401a      	ands	r2, r3
 8007df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	019b      	lsls	r3, r3, #6
 8007dfe:	22ff      	movs	r2, #255	@ 0xff
 8007e00:	401a      	ands	r2, r3
 8007e02:	1dfb      	adds	r3, r7, #7
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	0018      	movs	r0, r3
 8007e08:	2303      	movs	r3, #3
 8007e0a:	4003      	ands	r3, r0
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e10:	481f      	ldr	r0, [pc, #124]	@ (8007e90 <__NVIC_SetPriority+0xd4>)
 8007e12:	1dfb      	adds	r3, r7, #7
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	089b      	lsrs	r3, r3, #2
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	33c0      	adds	r3, #192	@ 0xc0
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007e22:	e031      	b.n	8007e88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e24:	4a1b      	ldr	r2, [pc, #108]	@ (8007e94 <__NVIC_SetPriority+0xd8>)
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	0019      	movs	r1, r3
 8007e2c:	230f      	movs	r3, #15
 8007e2e:	400b      	ands	r3, r1
 8007e30:	3b08      	subs	r3, #8
 8007e32:	089b      	lsrs	r3, r3, #2
 8007e34:	3306      	adds	r3, #6
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	18d3      	adds	r3, r2, r3
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1dfa      	adds	r2, r7, #7
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	0011      	movs	r1, r2
 8007e44:	2203      	movs	r2, #3
 8007e46:	400a      	ands	r2, r1
 8007e48:	00d2      	lsls	r2, r2, #3
 8007e4a:	21ff      	movs	r1, #255	@ 0xff
 8007e4c:	4091      	lsls	r1, r2
 8007e4e:	000a      	movs	r2, r1
 8007e50:	43d2      	mvns	r2, r2
 8007e52:	401a      	ands	r2, r3
 8007e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	019b      	lsls	r3, r3, #6
 8007e5a:	22ff      	movs	r2, #255	@ 0xff
 8007e5c:	401a      	ands	r2, r3
 8007e5e:	1dfb      	adds	r3, r7, #7
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	0018      	movs	r0, r3
 8007e64:	2303      	movs	r3, #3
 8007e66:	4003      	ands	r3, r0
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e6c:	4809      	ldr	r0, [pc, #36]	@ (8007e94 <__NVIC_SetPriority+0xd8>)
 8007e6e:	1dfb      	adds	r3, r7, #7
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	001c      	movs	r4, r3
 8007e74:	230f      	movs	r3, #15
 8007e76:	4023      	ands	r3, r4
 8007e78:	3b08      	subs	r3, #8
 8007e7a:	089b      	lsrs	r3, r3, #2
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	3306      	adds	r3, #6
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	18c3      	adds	r3, r0, r3
 8007e84:	3304      	adds	r3, #4
 8007e86:	601a      	str	r2, [r3, #0]
}
 8007e88:	46c0      	nop			@ (mov r8, r8)
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b003      	add	sp, #12
 8007e8e:	bd90      	pop	{r4, r7, pc}
 8007e90:	e000e100 	.word	0xe000e100
 8007e94:	e000ed00 	.word	0xe000ed00

08007e98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e9c:	f3bf 8f4f 	dsb	sy
}
 8007ea0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ea2:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <__NVIC_SystemReset+0x1c>)
 8007ea4:	4a04      	ldr	r2, [pc, #16]	@ (8007eb8 <__NVIC_SystemReset+0x20>)
 8007ea6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ea8:	f3bf 8f4f 	dsb	sy
}
 8007eac:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007eae:	46c0      	nop			@ (mov r8, r8)
 8007eb0:	e7fd      	b.n	8007eae <__NVIC_SystemReset+0x16>
 8007eb2:	46c0      	nop			@ (mov r8, r8)
 8007eb4:	e000ed00 	.word	0xe000ed00
 8007eb8:	05fa0004 	.word	0x05fa0004

08007ebc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	210f      	movs	r1, #15
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	1c02      	adds	r2, r0, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	187b      	adds	r3, r7, r1
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	0011      	movs	r1, r2
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f7ff ff6f 	bl	8007dbc <__NVIC_SetPriority>
}
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b004      	add	sp, #16
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	0002      	movs	r2, r0
 8007eee:	1dfb      	adds	r3, r7, #7
 8007ef0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ef2:	1dfb      	adds	r3, r7, #7
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f7ff ff45 	bl	8007d88 <__NVIC_EnableIRQ>
}
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	46bd      	mov	sp, r7
 8007f02:	b002      	add	sp, #8
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007f0a:	f7ff ffc5 	bl	8007e98 <__NVIC_SystemReset>
	...

08007f10 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e050      	b.n	8007fc4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2225      	movs	r2, #37	@ 0x25
 8007f26:	5c9b      	ldrb	r3, [r3, r2]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d008      	beq.n	8007f40 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2204      	movs	r2, #4
 8007f32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2224      	movs	r2, #36	@ 0x24
 8007f38:	2100      	movs	r1, #0
 8007f3a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e041      	b.n	8007fc4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	210e      	movs	r1, #14
 8007f4c:	438a      	bics	r2, r1
 8007f4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5a:	491c      	ldr	r1, [pc, #112]	@ (8007fcc <HAL_DMA_Abort+0xbc>)
 8007f5c:	400a      	ands	r2, r1
 8007f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007f70:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <HAL_DMA_Abort+0xc0>)
 8007f72:	6859      	ldr	r1, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f78:	221c      	movs	r2, #28
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	409a      	lsls	r2, r3
 8007f80:	4b13      	ldr	r3, [pc, #76]	@ (8007fd0 <HAL_DMA_Abort+0xc0>)
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007f8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa2:	490a      	ldr	r1, [pc, #40]	@ (8007fcc <HAL_DMA_Abort+0xbc>)
 8007fa4:	400a      	ands	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007fb0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2225      	movs	r2, #37	@ 0x25
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2224      	movs	r2, #36	@ 0x24
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	fffffeff 	.word	0xfffffeff
 8007fd0:	40020000 	.word	0x40020000

08007fd4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fdc:	210f      	movs	r1, #15
 8007fde:	187b      	adds	r3, r7, r1
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2225      	movs	r2, #37	@ 0x25
 8007fe8:	5c9b      	ldrb	r3, [r3, r2]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d006      	beq.n	8007ffe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007ff6:	187b      	adds	r3, r7, r1
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	e049      	b.n	8008092 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	210e      	movs	r1, #14
 800800a:	438a      	bics	r2, r1
 800800c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2101      	movs	r1, #1
 800801a:	438a      	bics	r2, r1
 800801c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008028:	491d      	ldr	r1, [pc, #116]	@ (80080a0 <HAL_DMA_Abort_IT+0xcc>)
 800802a:	400a      	ands	r2, r1
 800802c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800802e:	4b1d      	ldr	r3, [pc, #116]	@ (80080a4 <HAL_DMA_Abort_IT+0xd0>)
 8008030:	6859      	ldr	r1, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008036:	221c      	movs	r2, #28
 8008038:	4013      	ands	r3, r2
 800803a:	2201      	movs	r2, #1
 800803c:	409a      	lsls	r2, r3
 800803e:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <HAL_DMA_Abort_IT+0xd0>)
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800804c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00c      	beq.n	8008070 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008060:	490f      	ldr	r1, [pc, #60]	@ (80080a0 <HAL_DMA_Abort_IT+0xcc>)
 8008062:	400a      	ands	r2, r1
 8008064:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800806e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2225      	movs	r2, #37	@ 0x25
 8008074:	2101      	movs	r1, #1
 8008076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2224      	movs	r2, #36	@ 0x24
 800807c:	2100      	movs	r1, #0
 800807e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	0010      	movs	r0, r2
 8008090:	4798      	blx	r3
    }
  }
  return status;
 8008092:	230f      	movs	r3, #15
 8008094:	18fb      	adds	r3, r7, r3
 8008096:	781b      	ldrb	r3, [r3, #0]
}
 8008098:	0018      	movs	r0, r3
 800809a:	46bd      	mov	sp, r7
 800809c:	b004      	add	sp, #16
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	fffffeff 	.word	0xfffffeff
 80080a4:	40020000 	.word	0x40020000

080080a8 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80080b4:	0018      	movs	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b002      	add	sp, #8
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80080bc:	b5b0      	push	{r4, r5, r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	603a      	str	r2, [r7, #0]
 80080c8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80080ca:	4b21      	ldr	r3, [pc, #132]	@ (8008150 <HAL_FLASH_Program+0x94>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_FLASH_Program+0x1a>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e038      	b.n	8008148 <HAL_FLASH_Program+0x8c>
 80080d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008150 <HAL_FLASH_Program+0x94>)
 80080d8:	2201      	movs	r2, #1
 80080da:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008150 <HAL_FLASH_Program+0x94>)
 80080de:	2200      	movs	r2, #0
 80080e0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80080e2:	2517      	movs	r5, #23
 80080e4:	197c      	adds	r4, r7, r5
 80080e6:	23fa      	movs	r3, #250	@ 0xfa
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 f884 	bl	80081f8 <FLASH_WaitForLastOperation>
 80080f0:	0003      	movs	r3, r0
 80080f2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80080f4:	197b      	adds	r3, r7, r5
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11f      	bne.n	800813c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d106      	bne.n	8008110 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	0008      	movs	r0, r1
 800810a:	f000 f8c3 	bl	8008294 <FLASH_Program_DoubleWord>
 800810e:	e005      	b.n	800811c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	0011      	movs	r1, r2
 8008116:	0018      	movs	r0, r3
 8008118:	f00e fbd6 	bl	80168c8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800811c:	2317      	movs	r3, #23
 800811e:	18fc      	adds	r4, r7, r3
 8008120:	23fa      	movs	r3, #250	@ 0xfa
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	0018      	movs	r0, r3
 8008126:	f000 f867 	bl	80081f8 <FLASH_WaitForLastOperation>
 800812a:	0003      	movs	r3, r0
 800812c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800812e:	4b09      	ldr	r3, [pc, #36]	@ (8008154 <HAL_FLASH_Program+0x98>)
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	43d9      	mvns	r1, r3
 8008136:	4b07      	ldr	r3, [pc, #28]	@ (8008154 <HAL_FLASH_Program+0x98>)
 8008138:	400a      	ands	r2, r1
 800813a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800813c:	4b04      	ldr	r3, [pc, #16]	@ (8008150 <HAL_FLASH_Program+0x94>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008142:	2317      	movs	r3, #23
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	781b      	ldrb	r3, [r3, #0]
}
 8008148:	0018      	movs	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	b006      	add	sp, #24
 800814e:	bdb0      	pop	{r4, r5, r7, pc}
 8008150:	20002940 	.word	0x20002940
 8008154:	40022000 	.word	0x40022000

08008158 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800815e:	1dfb      	adds	r3, r7, #7
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008164:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <HAL_FLASH_Unlock+0x3c>)
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da0c      	bge.n	8008186 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800816c:	4b09      	ldr	r3, [pc, #36]	@ (8008194 <HAL_FLASH_Unlock+0x3c>)
 800816e:	4a0a      	ldr	r2, [pc, #40]	@ (8008198 <HAL_FLASH_Unlock+0x40>)
 8008170:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008172:	4b08      	ldr	r3, [pc, #32]	@ (8008194 <HAL_FLASH_Unlock+0x3c>)
 8008174:	4a09      	ldr	r2, [pc, #36]	@ (800819c <HAL_FLASH_Unlock+0x44>)
 8008176:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008178:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <HAL_FLASH_Unlock+0x3c>)
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da02      	bge.n	8008186 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8008180:	1dfb      	adds	r3, r7, #7
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008186:	1dfb      	adds	r3, r7, #7
 8008188:	781b      	ldrb	r3, [r3, #0]
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	b002      	add	sp, #8
 8008190:	bd80      	pop	{r7, pc}
 8008192:	46c0      	nop			@ (mov r8, r8)
 8008194:	40022000 	.word	0x40022000
 8008198:	45670123 	.word	0x45670123
 800819c:	cdef89ab 	.word	0xcdef89ab

080081a0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80081a6:	1dfb      	adds	r3, r7, #7
 80081a8:	2201      	movs	r2, #1
 80081aa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80081ac:	23fa      	movs	r3, #250	@ 0xfa
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	0018      	movs	r0, r3
 80081b2:	f000 f821 	bl	80081f8 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80081b6:	4b0a      	ldr	r3, [pc, #40]	@ (80081e0 <HAL_FLASH_Lock+0x40>)
 80081b8:	695a      	ldr	r2, [r3, #20]
 80081ba:	4b09      	ldr	r3, [pc, #36]	@ (80081e0 <HAL_FLASH_Lock+0x40>)
 80081bc:	2180      	movs	r1, #128	@ 0x80
 80081be:	0609      	lsls	r1, r1, #24
 80081c0:	430a      	orrs	r2, r1
 80081c2:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80081c4:	4b06      	ldr	r3, [pc, #24]	@ (80081e0 <HAL_FLASH_Lock+0x40>)
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da02      	bge.n	80081d2 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 80081cc:	1dfb      	adds	r3, r7, #7
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80081d2:	1dfb      	adds	r3, r7, #7
 80081d4:	781b      	ldrb	r3, [r3, #0]
}
 80081d6:	0018      	movs	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	b002      	add	sp, #8
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			@ (mov r8, r8)
 80081e0:	40022000 	.word	0x40022000

080081e4 <HAL_FLASH_GetError>:
  *            @arg @ref HAL_FLASH_ERROR_OPTV Option validity error
  *            @arg @ref HAL_FLASH_ERROR_ECCD two ECC errors have been detected
  * @note (*) availability depends on devices
  */
uint32_t HAL_FLASH_GetError(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <HAL_FLASH_GetError+0x10>)
 80081ea:	685b      	ldr	r3, [r3, #4]
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	20002940 	.word	0x20002940

080081f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008200:	f7ff fd7e 	bl	8007d00 <HAL_GetTick>
 8008204:	0003      	movs	r3, r0
 8008206:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008208:	2380      	movs	r3, #128	@ 0x80
 800820a:	025b      	lsls	r3, r3, #9
 800820c:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800820e:	e00c      	b.n	800822a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3301      	adds	r3, #1
 8008214:	d009      	beq.n	800822a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008216:	f7ff fd73 	bl	8007d00 <HAL_GetTick>
 800821a:	0002      	movs	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d801      	bhi.n	800822a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e028      	b.n	800827c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800822a:	4b16      	ldr	r3, [pc, #88]	@ (8008284 <FLASH_WaitForLastOperation+0x8c>)
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4013      	ands	r3, r2
 8008232:	d1ed      	bne.n	8008210 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008234:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <FLASH_WaitForLastOperation+0x8c>)
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	4a13      	ldr	r2, [pc, #76]	@ (8008288 <FLASH_WaitForLastOperation+0x90>)
 800823a:	4013      	ands	r3, r2
 800823c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800823e:	4b11      	ldr	r3, [pc, #68]	@ (8008284 <FLASH_WaitForLastOperation+0x8c>)
 8008240:	4a12      	ldr	r2, [pc, #72]	@ (800828c <FLASH_WaitForLastOperation+0x94>)
 8008242:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d011      	beq.n	800826e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800824a:	4b11      	ldr	r3, [pc, #68]	@ (8008290 <FLASH_WaitForLastOperation+0x98>)
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e013      	b.n	800827c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3301      	adds	r3, #1
 8008258:	d009      	beq.n	800826e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800825a:	f7ff fd51 	bl	8007d00 <HAL_GetTick>
 800825e:	0002      	movs	r2, r0
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	429a      	cmp	r2, r3
 8008268:	d801      	bhi.n	800826e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e006      	b.n	800827c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800826e:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <FLASH_WaitForLastOperation+0x8c>)
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	2380      	movs	r3, #128	@ 0x80
 8008274:	02db      	lsls	r3, r3, #11
 8008276:	4013      	ands	r3, r2
 8008278:	d1ec      	bne.n	8008254 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b004      	add	sp, #16
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40022000 	.word	0x40022000
 8008288:	0000c3fa 	.word	0x0000c3fa
 800828c:	0000c3fb 	.word	0x0000c3fb
 8008290:	20002940 	.word	0x20002940

08008294 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008294:	b5b0      	push	{r4, r5, r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	603a      	str	r2, [r7, #0]
 800829e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80082a0:	4b0b      	ldr	r3, [pc, #44]	@ (80082d0 <FLASH_Program_DoubleWord+0x3c>)
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	4b0a      	ldr	r3, [pc, #40]	@ (80082d0 <FLASH_Program_DoubleWord+0x3c>)
 80082a6:	2101      	movs	r1, #1
 80082a8:	430a      	orrs	r2, r1
 80082aa:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80082b2:	f3bf 8f6f 	isb	sy
}
 80082b6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	001c      	movs	r4, r3
 80082bc:	2300      	movs	r3, #0
 80082be:	001d      	movs	r5, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3304      	adds	r3, #4
 80082c4:	0022      	movs	r2, r4
 80082c6:	601a      	str	r2, [r3, #0]
}
 80082c8:	46c0      	nop			@ (mov r8, r8)
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b004      	add	sp, #16
 80082ce:	bdb0      	pop	{r4, r5, r7, pc}
 80082d0:	40022000 	.word	0x40022000

080082d4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80082d4:	b5b0      	push	{r4, r5, r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80082de:	4b35      	ldr	r3, [pc, #212]	@ (80083b4 <HAL_FLASHEx_Erase+0xe0>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_FLASHEx_Erase+0x16>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e05f      	b.n	80083aa <HAL_FLASHEx_Erase+0xd6>
 80082ea:	4b32      	ldr	r3, [pc, #200]	@ (80083b4 <HAL_FLASHEx_Erase+0xe0>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80082f0:	4b30      	ldr	r3, [pc, #192]	@ (80083b4 <HAL_FLASHEx_Erase+0xe0>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80082f6:	250f      	movs	r5, #15
 80082f8:	197c      	adds	r4, r7, r5
 80082fa:	23fa      	movs	r3, #250	@ 0xfa
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	0018      	movs	r0, r3
 8008300:	f7ff ff7a 	bl	80081f8 <FLASH_WaitForLastOperation>
 8008304:	0003      	movs	r3, r0
 8008306:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008308:	002c      	movs	r4, r5
 800830a:	193b      	adds	r3, r7, r4
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d145      	bne.n	800839e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2204      	movs	r2, #4
 8008316:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b04      	cmp	r3, #4
 800831e:	d10d      	bne.n	800833c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	0018      	movs	r0, r3
 8008326:	f000 f849 	bl	80083bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800832a:	193c      	adds	r4, r7, r4
 800832c:	23fa      	movs	r3, #250	@ 0xfa
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	0018      	movs	r0, r3
 8008332:	f7ff ff61 	bl	80081f8 <FLASH_WaitForLastOperation>
 8008336:	0003      	movs	r3, r0
 8008338:	7023      	strb	r3, [r4, #0]
 800833a:	e030      	b.n	800839e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2201      	movs	r2, #1
 8008340:	4252      	negs	r2, r2
 8008342:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	e01a      	b.n	8008382 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	0011      	movs	r1, r2
 8008354:	0018      	movs	r0, r3
 8008356:	f000 f845 	bl	80083e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800835a:	250f      	movs	r5, #15
 800835c:	197c      	adds	r4, r7, r5
 800835e:	23fa      	movs	r3, #250	@ 0xfa
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	0018      	movs	r0, r3
 8008364:	f7ff ff48 	bl	80081f8 <FLASH_WaitForLastOperation>
 8008368:	0003      	movs	r3, r0
 800836a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800836c:	197b      	adds	r3, r7, r5
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	601a      	str	r2, [r3, #0]
          break;
 800837a:	e00a      	b.n	8008392 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3301      	adds	r3, #1
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	18d3      	adds	r3, r2, r3
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	d3dc      	bcc.n	800834c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008392:	4b09      	ldr	r3, [pc, #36]	@ (80083b8 <HAL_FLASHEx_Erase+0xe4>)
 8008394:	695a      	ldr	r2, [r3, #20]
 8008396:	4b08      	ldr	r3, [pc, #32]	@ (80083b8 <HAL_FLASHEx_Erase+0xe4>)
 8008398:	2102      	movs	r1, #2
 800839a:	438a      	bics	r2, r1
 800839c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800839e:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <HAL_FLASHEx_Erase+0xe0>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80083a4:	230f      	movs	r3, #15
 80083a6:	18fb      	adds	r3, r7, r3
 80083a8:	781b      	ldrb	r3, [r3, #0]
}
 80083aa:	0018      	movs	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	b004      	add	sp, #16
 80083b0:	bdb0      	pop	{r4, r5, r7, pc}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	20002940 	.word	0x20002940
 80083b8:	40022000 	.word	0x40022000

080083bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80083c4:	4b06      	ldr	r3, [pc, #24]	@ (80083e0 <FLASH_MassErase+0x24>)
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <FLASH_MassErase+0x24>)
 80083ce:	2180      	movs	r1, #128	@ 0x80
 80083d0:	0249      	lsls	r1, r1, #9
 80083d2:	430a      	orrs	r2, r1
 80083d4:	615a      	str	r2, [r3, #20]
}
 80083d6:	46c0      	nop			@ (mov r8, r8)
 80083d8:	46bd      	mov	sp, r7
 80083da:	b002      	add	sp, #8
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	40022000 	.word	0x40022000

080083e4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <FLASH_PageErase+0x2c>)
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4a08      	ldr	r2, [pc, #32]	@ (8008414 <FLASH_PageErase+0x30>)
 80083f4:	4013      	ands	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	00da      	lsls	r2, r3, #3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	431a      	orrs	r2, r3
 8008400:	4b03      	ldr	r3, [pc, #12]	@ (8008410 <FLASH_PageErase+0x2c>)
 8008402:	4905      	ldr	r1, [pc, #20]	@ (8008418 <FLASH_PageErase+0x34>)
 8008404:	430a      	orrs	r2, r1
 8008406:	615a      	str	r2, [r3, #20]
}
 8008408:	46c0      	nop			@ (mov r8, r8)
 800840a:	46bd      	mov	sp, r7
 800840c:	b004      	add	sp, #16
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40022000 	.word	0x40022000
 8008414:	ffffe007 	.word	0xffffe007
 8008418:	00010002 	.word	0x00010002

0800841c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800842a:	e147      	b.n	80086bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2101      	movs	r1, #1
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4091      	lsls	r1, r2
 8008436:	000a      	movs	r2, r1
 8008438:	4013      	ands	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d100      	bne.n	8008444 <HAL_GPIO_Init+0x28>
 8008442:	e138      	b.n	80086b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2203      	movs	r2, #3
 800844a:	4013      	ands	r3, r2
 800844c:	2b01      	cmp	r3, #1
 800844e:	d005      	beq.n	800845c <HAL_GPIO_Init+0x40>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	4013      	ands	r3, r2
 8008458:	2b02      	cmp	r3, #2
 800845a:	d130      	bne.n	80084be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	2203      	movs	r2, #3
 8008468:	409a      	lsls	r2, r3
 800846a:	0013      	movs	r3, r2
 800846c:	43da      	mvns	r2, r3
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	4013      	ands	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	409a      	lsls	r2, r3
 800847e:	0013      	movs	r3, r2
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008492:	2201      	movs	r2, #1
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	409a      	lsls	r2, r3
 8008498:	0013      	movs	r3, r2
 800849a:	43da      	mvns	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	4013      	ands	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	091b      	lsrs	r3, r3, #4
 80084a8:	2201      	movs	r2, #1
 80084aa:	401a      	ands	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	409a      	lsls	r2, r3
 80084b0:	0013      	movs	r3, r2
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2203      	movs	r2, #3
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d017      	beq.n	80084fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2203      	movs	r2, #3
 80084d6:	409a      	lsls	r2, r3
 80084d8:	0013      	movs	r3, r2
 80084da:	43da      	mvns	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4013      	ands	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	409a      	lsls	r2, r3
 80084ec:	0013      	movs	r3, r2
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2203      	movs	r2, #3
 8008500:	4013      	ands	r3, r2
 8008502:	2b02      	cmp	r3, #2
 8008504:	d123      	bne.n	800854e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	08da      	lsrs	r2, r3, #3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3208      	adds	r2, #8
 800850e:	0092      	lsls	r2, r2, #2
 8008510:	58d3      	ldr	r3, [r2, r3]
 8008512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2207      	movs	r2, #7
 8008518:	4013      	ands	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	220f      	movs	r2, #15
 800851e:	409a      	lsls	r2, r3
 8008520:	0013      	movs	r3, r2
 8008522:	43da      	mvns	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	4013      	ands	r3, r2
 8008528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	691a      	ldr	r2, [r3, #16]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2107      	movs	r1, #7
 8008532:	400b      	ands	r3, r1
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	409a      	lsls	r2, r3
 8008538:	0013      	movs	r3, r2
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	4313      	orrs	r3, r2
 800853e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	08da      	lsrs	r2, r3, #3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3208      	adds	r2, #8
 8008548:	0092      	lsls	r2, r2, #2
 800854a:	6939      	ldr	r1, [r7, #16]
 800854c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	2203      	movs	r2, #3
 800855a:	409a      	lsls	r2, r3
 800855c:	0013      	movs	r3, r2
 800855e:	43da      	mvns	r2, r3
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4013      	ands	r3, r2
 8008564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2203      	movs	r2, #3
 800856c:	401a      	ands	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	409a      	lsls	r2, r3
 8008574:	0013      	movs	r3, r2
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	23c0      	movs	r3, #192	@ 0xc0
 8008588:	029b      	lsls	r3, r3, #10
 800858a:	4013      	ands	r3, r2
 800858c:	d100      	bne.n	8008590 <HAL_GPIO_Init+0x174>
 800858e:	e092      	b.n	80086b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008590:	4a50      	ldr	r2, [pc, #320]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	089b      	lsrs	r3, r3, #2
 8008596:	3318      	adds	r3, #24
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	589b      	ldr	r3, [r3, r2]
 800859c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2203      	movs	r2, #3
 80085a2:	4013      	ands	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	220f      	movs	r2, #15
 80085a8:	409a      	lsls	r2, r3
 80085aa:	0013      	movs	r3, r2
 80085ac:	43da      	mvns	r2, r3
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	4013      	ands	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	23a0      	movs	r3, #160	@ 0xa0
 80085b8:	05db      	lsls	r3, r3, #23
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d013      	beq.n	80085e6 <HAL_GPIO_Init+0x1ca>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a45      	ldr	r2, [pc, #276]	@ (80086d8 <HAL_GPIO_Init+0x2bc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00d      	beq.n	80085e2 <HAL_GPIO_Init+0x1c6>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a44      	ldr	r2, [pc, #272]	@ (80086dc <HAL_GPIO_Init+0x2c0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d007      	beq.n	80085de <HAL_GPIO_Init+0x1c2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a43      	ldr	r2, [pc, #268]	@ (80086e0 <HAL_GPIO_Init+0x2c4>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d101      	bne.n	80085da <HAL_GPIO_Init+0x1be>
 80085d6:	2303      	movs	r3, #3
 80085d8:	e006      	b.n	80085e8 <HAL_GPIO_Init+0x1cc>
 80085da:	2305      	movs	r3, #5
 80085dc:	e004      	b.n	80085e8 <HAL_GPIO_Init+0x1cc>
 80085de:	2302      	movs	r3, #2
 80085e0:	e002      	b.n	80085e8 <HAL_GPIO_Init+0x1cc>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <HAL_GPIO_Init+0x1cc>
 80085e6:	2300      	movs	r3, #0
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	2103      	movs	r1, #3
 80085ec:	400a      	ands	r2, r1
 80085ee:	00d2      	lsls	r2, r2, #3
 80085f0:	4093      	lsls	r3, r2
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80085f8:	4936      	ldr	r1, [pc, #216]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	089b      	lsrs	r3, r3, #2
 80085fe:	3318      	adds	r3, #24
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008606:	4b33      	ldr	r3, [pc, #204]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	43da      	mvns	r2, r3
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	4013      	ands	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	2380      	movs	r3, #128	@ 0x80
 800861c:	035b      	lsls	r3, r3, #13
 800861e:	4013      	ands	r3, r2
 8008620:	d003      	beq.n	800862a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800862a:	4b2a      	ldr	r3, [pc, #168]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008630:	4b28      	ldr	r3, [pc, #160]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	43da      	mvns	r2, r3
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4013      	ands	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	2380      	movs	r3, #128	@ 0x80
 8008646:	039b      	lsls	r3, r3, #14
 8008648:	4013      	ands	r3, r2
 800864a:	d003      	beq.n	8008654 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008654:	4b1f      	ldr	r3, [pc, #124]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800865a:	4a1e      	ldr	r2, [pc, #120]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 800865c:	2384      	movs	r3, #132	@ 0x84
 800865e:	58d3      	ldr	r3, [r2, r3]
 8008660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	43da      	mvns	r2, r3
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4013      	ands	r3, r2
 800866a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	2380      	movs	r3, #128	@ 0x80
 8008672:	029b      	lsls	r3, r3, #10
 8008674:	4013      	ands	r3, r2
 8008676:	d003      	beq.n	8008680 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4313      	orrs	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008680:	4914      	ldr	r1, [pc, #80]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 8008682:	2284      	movs	r2, #132	@ 0x84
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008688:	4a12      	ldr	r2, [pc, #72]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 800868a:	2380      	movs	r3, #128	@ 0x80
 800868c:	58d3      	ldr	r3, [r2, r3]
 800868e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	43da      	mvns	r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	4013      	ands	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	2380      	movs	r3, #128	@ 0x80
 80086a0:	025b      	lsls	r3, r3, #9
 80086a2:	4013      	ands	r3, r2
 80086a4:	d003      	beq.n	80086ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80086ae:	4909      	ldr	r1, [pc, #36]	@ (80086d4 <HAL_GPIO_Init+0x2b8>)
 80086b0:	2280      	movs	r2, #128	@ 0x80
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	3301      	adds	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	40da      	lsrs	r2, r3
 80086c4:	1e13      	subs	r3, r2, #0
 80086c6:	d000      	beq.n	80086ca <HAL_GPIO_Init+0x2ae>
 80086c8:	e6b0      	b.n	800842c <HAL_GPIO_Init+0x10>
  }
}
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	46c0      	nop			@ (mov r8, r8)
 80086ce:	46bd      	mov	sp, r7
 80086d0:	b006      	add	sp, #24
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40021800 	.word	0x40021800
 80086d8:	50000400 	.word	0x50000400
 80086dc:	50000800 	.word	0x50000800
 80086e0:	50000c00 	.word	0x50000c00

080086e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	000a      	movs	r2, r1
 80086ee:	1cbb      	adds	r3, r7, #2
 80086f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	1cba      	adds	r2, r7, #2
 80086f8:	8812      	ldrh	r2, [r2, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	d004      	beq.n	8008708 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80086fe:	230f      	movs	r3, #15
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	2201      	movs	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e003      	b.n	8008710 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008708:	230f      	movs	r3, #15
 800870a:	18fb      	adds	r3, r7, r3
 800870c:	2200      	movs	r2, #0
 800870e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008710:	230f      	movs	r3, #15
 8008712:	18fb      	adds	r3, r7, r3
 8008714:	781b      	ldrb	r3, [r3, #0]
}
 8008716:	0018      	movs	r0, r3
 8008718:	46bd      	mov	sp, r7
 800871a:	b004      	add	sp, #16
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	0008      	movs	r0, r1
 8008728:	0011      	movs	r1, r2
 800872a:	1cbb      	adds	r3, r7, #2
 800872c:	1c02      	adds	r2, r0, #0
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	1c7b      	adds	r3, r7, #1
 8008732:	1c0a      	adds	r2, r1, #0
 8008734:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008736:	1c7b      	adds	r3, r7, #1
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800873e:	1cbb      	adds	r3, r7, #2
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008746:	e003      	b.n	8008750 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008748:	1cbb      	adds	r3, r7, #2
 800874a:	881a      	ldrh	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008750:	46c0      	nop			@ (mov r8, r8)
 8008752:	46bd      	mov	sp, r7
 8008754:	b002      	add	sp, #8
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	000a      	movs	r2, r1
 8008762:	1cbb      	adds	r3, r7, #2
 8008764:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800876c:	1cbb      	adds	r3, r7, #2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4013      	ands	r3, r2
 8008774:	041a      	lsls	r2, r3, #16
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	43db      	mvns	r3, r3
 800877a:	1cb9      	adds	r1, r7, #2
 800877c:	8809      	ldrh	r1, [r1, #0]
 800877e:	400b      	ands	r3, r1
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	619a      	str	r2, [r3, #24]
}
 8008786:	46c0      	nop			@ (mov r8, r8)
 8008788:	46bd      	mov	sp, r7
 800878a:	b004      	add	sp, #16
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e08f      	b.n	80088c2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2241      	movs	r2, #65	@ 0x41
 80087a6:	5c9b      	ldrb	r3, [r3, r2]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d107      	bne.n	80087be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2240      	movs	r2, #64	@ 0x40
 80087b2:	2100      	movs	r1, #0
 80087b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f7fd fd67 	bl	800628c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2241      	movs	r2, #65	@ 0x41
 80087c2:	2124      	movs	r1, #36	@ 0x24
 80087c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2101      	movs	r1, #1
 80087d2:	438a      	bics	r2, r1
 80087d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	493b      	ldr	r1, [pc, #236]	@ (80088cc <HAL_I2C_Init+0x13c>)
 80087e0:	400a      	ands	r2, r1
 80087e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4938      	ldr	r1, [pc, #224]	@ (80088d0 <HAL_I2C_Init+0x140>)
 80087f0:	400a      	ands	r2, r1
 80087f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d108      	bne.n	800880e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2180      	movs	r1, #128	@ 0x80
 8008806:	0209      	lsls	r1, r1, #8
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]
 800880c:	e007      	b.n	800881e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2184      	movs	r1, #132	@ 0x84
 8008818:	0209      	lsls	r1, r1, #8
 800881a:	430a      	orrs	r2, r1
 800881c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d109      	bne.n	800883a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2180      	movs	r1, #128	@ 0x80
 8008832:	0109      	lsls	r1, r1, #4
 8008834:	430a      	orrs	r2, r1
 8008836:	605a      	str	r2, [r3, #4]
 8008838:	e007      	b.n	800884a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4923      	ldr	r1, [pc, #140]	@ (80088d4 <HAL_I2C_Init+0x144>)
 8008846:	400a      	ands	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4920      	ldr	r1, [pc, #128]	@ (80088d8 <HAL_I2C_Init+0x148>)
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	491a      	ldr	r1, [pc, #104]	@ (80088d0 <HAL_I2C_Init+0x140>)
 8008866:	400a      	ands	r2, r1
 8008868:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	431a      	orrs	r2, r3
 8008874:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a1a      	ldr	r2, [r3, #32]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2101      	movs	r1, #1
 80088a0:	430a      	orrs	r2, r1
 80088a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2241      	movs	r2, #65	@ 0x41
 80088ae:	2120      	movs	r1, #32
 80088b0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2242      	movs	r2, #66	@ 0x42
 80088bc:	2100      	movs	r1, #0
 80088be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	0018      	movs	r0, r3
 80088c4:	46bd      	mov	sp, r7
 80088c6:	b002      	add	sp, #8
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	f0ffffff 	.word	0xf0ffffff
 80088d0:	ffff7fff 	.word	0xffff7fff
 80088d4:	fffff7ff 	.word	0xfffff7ff
 80088d8:	02008000 	.word	0x02008000

080088dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80088dc:	b590      	push	{r4, r7, lr}
 80088de:	b089      	sub	sp, #36	@ 0x24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	0008      	movs	r0, r1
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	0019      	movs	r1, r3
 80088ea:	230a      	movs	r3, #10
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	1c02      	adds	r2, r0, #0
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	2308      	movs	r3, #8
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	1c0a      	adds	r2, r1, #0
 80088f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2241      	movs	r2, #65	@ 0x41
 80088fe:	5c9b      	ldrb	r3, [r3, r2]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b20      	cmp	r3, #32
 8008904:	d000      	beq.n	8008908 <HAL_I2C_Master_Transmit+0x2c>
 8008906:	e10a      	b.n	8008b1e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2240      	movs	r2, #64	@ 0x40
 800890c:	5c9b      	ldrb	r3, [r3, r2]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_I2C_Master_Transmit+0x3a>
 8008912:	2302      	movs	r3, #2
 8008914:	e104      	b.n	8008b20 <HAL_I2C_Master_Transmit+0x244>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2240      	movs	r2, #64	@ 0x40
 800891a:	2101      	movs	r1, #1
 800891c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800891e:	f7ff f9ef 	bl	8007d00 <HAL_GetTick>
 8008922:	0003      	movs	r3, r0
 8008924:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008926:	2380      	movs	r3, #128	@ 0x80
 8008928:	0219      	lsls	r1, r3, #8
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	2319      	movs	r3, #25
 8008932:	2201      	movs	r2, #1
 8008934:	f000 fe4a 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8008938:	1e03      	subs	r3, r0, #0
 800893a:	d001      	beq.n	8008940 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0ef      	b.n	8008b20 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2241      	movs	r2, #65	@ 0x41
 8008944:	2121      	movs	r1, #33	@ 0x21
 8008946:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2242      	movs	r2, #66	@ 0x42
 800894c:	2110      	movs	r1, #16
 800894e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2208      	movs	r2, #8
 8008960:	18ba      	adds	r2, r7, r2
 8008962:	8812      	ldrh	r2, [r2, #0]
 8008964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008970:	b29b      	uxth	r3, r3
 8008972:	2bff      	cmp	r3, #255	@ 0xff
 8008974:	d906      	bls.n	8008984 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	22ff      	movs	r2, #255	@ 0xff
 800897a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800897c:	2380      	movs	r3, #128	@ 0x80
 800897e:	045b      	lsls	r3, r3, #17
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e007      	b.n	8008994 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800898e:	2380      	movs	r3, #128	@ 0x80
 8008990:	049b      	lsls	r3, r3, #18
 8008992:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008998:	2b00      	cmp	r3, #0
 800899a:	d027      	beq.n	80089ec <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	3301      	adds	r3, #1
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	697c      	ldr	r4, [r7, #20]
 80089d8:	230a      	movs	r3, #10
 80089da:	18fb      	adds	r3, r7, r3
 80089dc:	8819      	ldrh	r1, [r3, #0]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	4b51      	ldr	r3, [pc, #324]	@ (8008b28 <HAL_I2C_Master_Transmit+0x24c>)
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	0023      	movs	r3, r4
 80089e6:	f001 f869 	bl	8009abc <I2C_TransferConfig>
 80089ea:	e06f      	b.n	8008acc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	697c      	ldr	r4, [r7, #20]
 80089f4:	230a      	movs	r3, #10
 80089f6:	18fb      	adds	r3, r7, r3
 80089f8:	8819      	ldrh	r1, [r3, #0]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008b28 <HAL_I2C_Master_Transmit+0x24c>)
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	0023      	movs	r3, r4
 8008a02:	f001 f85b 	bl	8009abc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008a06:	e061      	b.n	8008acc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f000 fe34 	bl	800967c <I2C_WaitOnTXISFlagUntilTimeout>
 8008a14:	1e03      	subs	r3, r0, #0
 8008a16:	d001      	beq.n	8008a1c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e081      	b.n	8008b20 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d03a      	beq.n	8008acc <HAL_I2C_Master_Transmit+0x1f0>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d136      	bne.n	8008acc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	0013      	movs	r3, r2
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2180      	movs	r1, #128	@ 0x80
 8008a6c:	f000 fdae 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8008a70:	1e03      	subs	r3, r0, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e053      	b.n	8008b20 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2bff      	cmp	r3, #255	@ 0xff
 8008a80:	d911      	bls.n	8008aa6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	22ff      	movs	r2, #255	@ 0xff
 8008a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	2380      	movs	r3, #128	@ 0x80
 8008a90:	045c      	lsls	r4, r3, #17
 8008a92:	230a      	movs	r3, #10
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	8819      	ldrh	r1, [r3, #0]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	0023      	movs	r3, r4
 8008aa0:	f001 f80c 	bl	8009abc <I2C_TransferConfig>
 8008aa4:	e012      	b.n	8008acc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	2380      	movs	r3, #128	@ 0x80
 8008ab8:	049c      	lsls	r4, r3, #18
 8008aba:	230a      	movs	r3, #10
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	8819      	ldrh	r1, [r3, #0]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	0023      	movs	r3, r4
 8008ac8:	f000 fff8 	bl	8009abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d198      	bne.n	8008a08 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	0018      	movs	r0, r3
 8008ade:	f000 fe13 	bl	8009708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ae2:	1e03      	subs	r3, r0, #0
 8008ae4:	d001      	beq.n	8008aea <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e01a      	b.n	8008b20 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2220      	movs	r2, #32
 8008af0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	490b      	ldr	r1, [pc, #44]	@ (8008b2c <HAL_I2C_Master_Transmit+0x250>)
 8008afe:	400a      	ands	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2241      	movs	r2, #65	@ 0x41
 8008b06:	2120      	movs	r1, #32
 8008b08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2242      	movs	r2, #66	@ 0x42
 8008b0e:	2100      	movs	r1, #0
 8008b10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2240      	movs	r2, #64	@ 0x40
 8008b16:	2100      	movs	r1, #0
 8008b18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	0018      	movs	r0, r3
 8008b22:	46bd      	mov	sp, r7
 8008b24:	b007      	add	sp, #28
 8008b26:	bd90      	pop	{r4, r7, pc}
 8008b28:	80002000 	.word	0x80002000
 8008b2c:	fe00e800 	.word	0xfe00e800

08008b30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b089      	sub	sp, #36	@ 0x24
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	0008      	movs	r0, r1
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	230a      	movs	r3, #10
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	1c02      	adds	r2, r0, #0
 8008b44:	801a      	strh	r2, [r3, #0]
 8008b46:	2308      	movs	r3, #8
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	1c0a      	adds	r2, r1, #0
 8008b4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2241      	movs	r2, #65	@ 0x41
 8008b52:	5c9b      	ldrb	r3, [r3, r2]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d000      	beq.n	8008b5c <HAL_I2C_Master_Receive+0x2c>
 8008b5a:	e0e8      	b.n	8008d2e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2240      	movs	r2, #64	@ 0x40
 8008b60:	5c9b      	ldrb	r3, [r3, r2]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_I2C_Master_Receive+0x3a>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e0e2      	b.n	8008d30 <HAL_I2C_Master_Receive+0x200>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2240      	movs	r2, #64	@ 0x40
 8008b6e:	2101      	movs	r1, #1
 8008b70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b72:	f7ff f8c5 	bl	8007d00 <HAL_GetTick>
 8008b76:	0003      	movs	r3, r0
 8008b78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b7a:	2380      	movs	r3, #128	@ 0x80
 8008b7c:	0219      	lsls	r1, r3, #8
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2319      	movs	r3, #25
 8008b86:	2201      	movs	r2, #1
 8008b88:	f000 fd20 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8008b8c:	1e03      	subs	r3, r0, #0
 8008b8e:	d001      	beq.n	8008b94 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e0cd      	b.n	8008d30 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2241      	movs	r2, #65	@ 0x41
 8008b98:	2122      	movs	r1, #34	@ 0x22
 8008b9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2242      	movs	r2, #66	@ 0x42
 8008ba0:	2110      	movs	r1, #16
 8008ba2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2208      	movs	r2, #8
 8008bb4:	18ba      	adds	r2, r7, r2
 8008bb6:	8812      	ldrh	r2, [r2, #0]
 8008bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2bff      	cmp	r3, #255	@ 0xff
 8008bc8:	d911      	bls.n	8008bee <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	22ff      	movs	r2, #255	@ 0xff
 8008bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	2380      	movs	r3, #128	@ 0x80
 8008bd8:	045c      	lsls	r4, r3, #17
 8008bda:	230a      	movs	r3, #10
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	8819      	ldrh	r1, [r3, #0]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	4b55      	ldr	r3, [pc, #340]	@ (8008d38 <HAL_I2C_Master_Receive+0x208>)
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	0023      	movs	r3, r4
 8008be8:	f000 ff68 	bl	8009abc <I2C_TransferConfig>
 8008bec:	e076      	b.n	8008cdc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	2380      	movs	r3, #128	@ 0x80
 8008c00:	049c      	lsls	r4, r3, #18
 8008c02:	230a      	movs	r3, #10
 8008c04:	18fb      	adds	r3, r7, r3
 8008c06:	8819      	ldrh	r1, [r3, #0]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d38 <HAL_I2C_Master_Receive+0x208>)
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	0023      	movs	r3, r4
 8008c10:	f000 ff54 	bl	8009abc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008c14:	e062      	b.n	8008cdc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f000 fdb7 	bl	8009790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c22:	1e03      	subs	r3, r0, #0
 8008c24:	d001      	beq.n	8008c2a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e082      	b.n	8008d30 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d03a      	beq.n	8008cdc <HAL_I2C_Master_Receive+0x1ac>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d136      	bne.n	8008cdc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	0013      	movs	r3, r2
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2180      	movs	r1, #128	@ 0x80
 8008c7c:	f000 fca6 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8008c80:	1e03      	subs	r3, r0, #0
 8008c82:	d001      	beq.n	8008c88 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e053      	b.n	8008d30 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	2bff      	cmp	r3, #255	@ 0xff
 8008c90:	d911      	bls.n	8008cb6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	22ff      	movs	r2, #255	@ 0xff
 8008c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	2380      	movs	r3, #128	@ 0x80
 8008ca0:	045c      	lsls	r4, r3, #17
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	18fb      	adds	r3, r7, r3
 8008ca6:	8819      	ldrh	r1, [r3, #0]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	2300      	movs	r3, #0
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	0023      	movs	r3, r4
 8008cb0:	f000 ff04 	bl	8009abc <I2C_TransferConfig>
 8008cb4:	e012      	b.n	8008cdc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	2380      	movs	r3, #128	@ 0x80
 8008cc8:	049c      	lsls	r4, r3, #18
 8008cca:	230a      	movs	r3, #10
 8008ccc:	18fb      	adds	r3, r7, r3
 8008cce:	8819      	ldrh	r1, [r3, #0]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	0023      	movs	r3, r4
 8008cd8:	f000 fef0 	bl	8009abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d197      	bne.n	8008c16 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 fd0b 	bl	8009708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cf2:	1e03      	subs	r3, r0, #0
 8008cf4:	d001      	beq.n	8008cfa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e01a      	b.n	8008d30 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	490b      	ldr	r1, [pc, #44]	@ (8008d3c <HAL_I2C_Master_Receive+0x20c>)
 8008d0e:	400a      	ands	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2241      	movs	r2, #65	@ 0x41
 8008d16:	2120      	movs	r1, #32
 8008d18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2242      	movs	r2, #66	@ 0x42
 8008d1e:	2100      	movs	r1, #0
 8008d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2240      	movs	r2, #64	@ 0x40
 8008d26:	2100      	movs	r1, #0
 8008d28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e000      	b.n	8008d30 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8008d2e:	2302      	movs	r3, #2
  }
}
 8008d30:	0018      	movs	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b007      	add	sp, #28
 8008d36:	bd90      	pop	{r4, r7, pc}
 8008d38:	80002400 	.word	0x80002400
 8008d3c:	fe00e800 	.word	0xfe00e800

08008d40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b089      	sub	sp, #36	@ 0x24
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	000c      	movs	r4, r1
 8008d4a:	0010      	movs	r0, r2
 8008d4c:	0019      	movs	r1, r3
 8008d4e:	230a      	movs	r3, #10
 8008d50:	18fb      	adds	r3, r7, r3
 8008d52:	1c22      	adds	r2, r4, #0
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	2308      	movs	r3, #8
 8008d58:	18fb      	adds	r3, r7, r3
 8008d5a:	1c02      	adds	r2, r0, #0
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	1dbb      	adds	r3, r7, #6
 8008d60:	1c0a      	adds	r2, r1, #0
 8008d62:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2241      	movs	r2, #65	@ 0x41
 8008d68:	5c9b      	ldrb	r3, [r3, r2]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d000      	beq.n	8008d72 <HAL_I2C_Mem_Write+0x32>
 8008d70:	e10c      	b.n	8008f8c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <HAL_I2C_Mem_Write+0x42>
 8008d78:	232c      	movs	r3, #44	@ 0x2c
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2280      	movs	r2, #128	@ 0x80
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e0ff      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2240      	movs	r2, #64	@ 0x40
 8008d92:	5c9b      	ldrb	r3, [r3, r2]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_I2C_Mem_Write+0x5c>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e0f8      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2240      	movs	r2, #64	@ 0x40
 8008da0:	2101      	movs	r1, #1
 8008da2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008da4:	f7fe ffac 	bl	8007d00 <HAL_GetTick>
 8008da8:	0003      	movs	r3, r0
 8008daa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	0219      	lsls	r1, r3, #8
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2319      	movs	r3, #25
 8008db8:	2201      	movs	r2, #1
 8008dba:	f000 fc07 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8008dbe:	1e03      	subs	r3, r0, #0
 8008dc0:	d001      	beq.n	8008dc6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e0e3      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2241      	movs	r2, #65	@ 0x41
 8008dca:	2121      	movs	r1, #33	@ 0x21
 8008dcc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2242      	movs	r2, #66	@ 0x42
 8008dd2:	2140      	movs	r1, #64	@ 0x40
 8008dd4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008de0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	222c      	movs	r2, #44	@ 0x2c
 8008de6:	18ba      	adds	r2, r7, r2
 8008de8:	8812      	ldrh	r2, [r2, #0]
 8008dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008df2:	1dbb      	adds	r3, r7, #6
 8008df4:	881c      	ldrh	r4, [r3, #0]
 8008df6:	2308      	movs	r3, #8
 8008df8:	18fb      	adds	r3, r7, r3
 8008dfa:	881a      	ldrh	r2, [r3, #0]
 8008dfc:	230a      	movs	r3, #10
 8008dfe:	18fb      	adds	r3, r7, r3
 8008e00:	8819      	ldrh	r1, [r3, #0]
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	0023      	movs	r3, r4
 8008e0e:	f000 faf5 	bl	80093fc <I2C_RequestMemoryWrite>
 8008e12:	1e03      	subs	r3, r0, #0
 8008e14:	d005      	beq.n	8008e22 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2240      	movs	r2, #64	@ 0x40
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e0b5      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	2bff      	cmp	r3, #255	@ 0xff
 8008e2a:	d911      	bls.n	8008e50 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	22ff      	movs	r2, #255	@ 0xff
 8008e30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	2380      	movs	r3, #128	@ 0x80
 8008e3a:	045c      	lsls	r4, r3, #17
 8008e3c:	230a      	movs	r3, #10
 8008e3e:	18fb      	adds	r3, r7, r3
 8008e40:	8819      	ldrh	r1, [r3, #0]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	2300      	movs	r3, #0
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	0023      	movs	r3, r4
 8008e4a:	f000 fe37 	bl	8009abc <I2C_TransferConfig>
 8008e4e:	e012      	b.n	8008e76 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	2380      	movs	r3, #128	@ 0x80
 8008e62:	049c      	lsls	r4, r3, #18
 8008e64:	230a      	movs	r3, #10
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	8819      	ldrh	r1, [r3, #0]
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	0023      	movs	r3, r4
 8008e72:	f000 fe23 	bl	8009abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f000 fbfd 	bl	800967c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e82:	1e03      	subs	r3, r0, #0
 8008e84:	d001      	beq.n	8008e8a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e081      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d03a      	beq.n	8008f3a <HAL_I2C_Mem_Write+0x1fa>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d136      	bne.n	8008f3a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	0013      	movs	r3, r2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2180      	movs	r1, #128	@ 0x80
 8008eda:	f000 fb77 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8008ede:	1e03      	subs	r3, r0, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e053      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2bff      	cmp	r3, #255	@ 0xff
 8008eee:	d911      	bls.n	8008f14 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	22ff      	movs	r2, #255	@ 0xff
 8008ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	045c      	lsls	r4, r3, #17
 8008f00:	230a      	movs	r3, #10
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	8819      	ldrh	r1, [r3, #0]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	0023      	movs	r3, r4
 8008f0e:	f000 fdd5 	bl	8009abc <I2C_TransferConfig>
 8008f12:	e012      	b.n	8008f3a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	2380      	movs	r3, #128	@ 0x80
 8008f26:	049c      	lsls	r4, r3, #18
 8008f28:	230a      	movs	r3, #10
 8008f2a:	18fb      	adds	r3, r7, r3
 8008f2c:	8819      	ldrh	r1, [r3, #0]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	0023      	movs	r3, r4
 8008f36:	f000 fdc1 	bl	8009abc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d198      	bne.n	8008e76 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f000 fbdc 	bl	8009708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f50:	1e03      	subs	r3, r0, #0
 8008f52:	d001      	beq.n	8008f58 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e01a      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	490b      	ldr	r1, [pc, #44]	@ (8008f98 <HAL_I2C_Mem_Write+0x258>)
 8008f6c:	400a      	ands	r2, r1
 8008f6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2241      	movs	r2, #65	@ 0x41
 8008f74:	2120      	movs	r1, #32
 8008f76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2242      	movs	r2, #66	@ 0x42
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2240      	movs	r2, #64	@ 0x40
 8008f84:	2100      	movs	r1, #0
 8008f86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e000      	b.n	8008f8e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8008f8c:	2302      	movs	r3, #2
  }
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b007      	add	sp, #28
 8008f94:	bd90      	pop	{r4, r7, pc}
 8008f96:	46c0      	nop			@ (mov r8, r8)
 8008f98:	fe00e800 	.word	0xfe00e800

08008f9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b089      	sub	sp, #36	@ 0x24
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	000c      	movs	r4, r1
 8008fa6:	0010      	movs	r0, r2
 8008fa8:	0019      	movs	r1, r3
 8008faa:	230a      	movs	r3, #10
 8008fac:	18fb      	adds	r3, r7, r3
 8008fae:	1c22      	adds	r2, r4, #0
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	1c02      	adds	r2, r0, #0
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	1dbb      	adds	r3, r7, #6
 8008fbc:	1c0a      	adds	r2, r1, #0
 8008fbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2241      	movs	r2, #65	@ 0x41
 8008fc4:	5c9b      	ldrb	r3, [r3, r2]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d000      	beq.n	8008fce <HAL_I2C_Mem_Read+0x32>
 8008fcc:	e110      	b.n	80091f0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <HAL_I2C_Mem_Read+0x42>
 8008fd4:	232c      	movs	r3, #44	@ 0x2c
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d105      	bne.n	8008fea <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2280      	movs	r2, #128	@ 0x80
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e103      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2240      	movs	r2, #64	@ 0x40
 8008fee:	5c9b      	ldrb	r3, [r3, r2]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_I2C_Mem_Read+0x5c>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e0fc      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2240      	movs	r2, #64	@ 0x40
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009000:	f7fe fe7e 	bl	8007d00 <HAL_GetTick>
 8009004:	0003      	movs	r3, r0
 8009006:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009008:	2380      	movs	r3, #128	@ 0x80
 800900a:	0219      	lsls	r1, r3, #8
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	2319      	movs	r3, #25
 8009014:	2201      	movs	r2, #1
 8009016:	f000 fad9 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 800901a:	1e03      	subs	r3, r0, #0
 800901c:	d001      	beq.n	8009022 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e0e7      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2241      	movs	r2, #65	@ 0x41
 8009026:	2122      	movs	r1, #34	@ 0x22
 8009028:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2242      	movs	r2, #66	@ 0x42
 800902e:	2140      	movs	r1, #64	@ 0x40
 8009030:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800903c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	222c      	movs	r2, #44	@ 0x2c
 8009042:	18ba      	adds	r2, r7, r2
 8009044:	8812      	ldrh	r2, [r2, #0]
 8009046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800904e:	1dbb      	adds	r3, r7, #6
 8009050:	881c      	ldrh	r4, [r3, #0]
 8009052:	2308      	movs	r3, #8
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	230a      	movs	r3, #10
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	8819      	ldrh	r1, [r3, #0]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	0023      	movs	r3, r4
 800906a:	f000 fa2b 	bl	80094c4 <I2C_RequestMemoryRead>
 800906e:	1e03      	subs	r3, r0, #0
 8009070:	d005      	beq.n	800907e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2240      	movs	r2, #64	@ 0x40
 8009076:	2100      	movs	r1, #0
 8009078:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e0b9      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009082:	b29b      	uxth	r3, r3
 8009084:	2bff      	cmp	r3, #255	@ 0xff
 8009086:	d911      	bls.n	80090ac <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	22ff      	movs	r2, #255	@ 0xff
 800908c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009092:	b2da      	uxtb	r2, r3
 8009094:	2380      	movs	r3, #128	@ 0x80
 8009096:	045c      	lsls	r4, r3, #17
 8009098:	230a      	movs	r3, #10
 800909a:	18fb      	adds	r3, r7, r3
 800909c:	8819      	ldrh	r1, [r3, #0]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	4b56      	ldr	r3, [pc, #344]	@ (80091fc <HAL_I2C_Mem_Read+0x260>)
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	0023      	movs	r3, r4
 80090a6:	f000 fd09 	bl	8009abc <I2C_TransferConfig>
 80090aa:	e012      	b.n	80090d2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	2380      	movs	r3, #128	@ 0x80
 80090be:	049c      	lsls	r4, r3, #18
 80090c0:	230a      	movs	r3, #10
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	8819      	ldrh	r1, [r3, #0]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	4b4c      	ldr	r3, [pc, #304]	@ (80091fc <HAL_I2C_Mem_Read+0x260>)
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	0023      	movs	r3, r4
 80090ce:	f000 fcf5 	bl	8009abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80090d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	0013      	movs	r3, r2
 80090dc:	2200      	movs	r2, #0
 80090de:	2104      	movs	r1, #4
 80090e0:	f000 fa74 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 80090e4:	1e03      	subs	r3, r0, #0
 80090e6:	d001      	beq.n	80090ec <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e082      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	b2d2      	uxtb	r2, r2
 80090f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b01      	subs	r3, #1
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009122:	b29b      	uxth	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d03a      	beq.n	800919e <HAL_I2C_Mem_Read+0x202>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800912c:	2b00      	cmp	r3, #0
 800912e:	d136      	bne.n	800919e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	0013      	movs	r3, r2
 800913a:	2200      	movs	r2, #0
 800913c:	2180      	movs	r1, #128	@ 0x80
 800913e:	f000 fa45 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8009142:	1e03      	subs	r3, r0, #0
 8009144:	d001      	beq.n	800914a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e053      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800914e:	b29b      	uxth	r3, r3
 8009150:	2bff      	cmp	r3, #255	@ 0xff
 8009152:	d911      	bls.n	8009178 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	22ff      	movs	r2, #255	@ 0xff
 8009158:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800915e:	b2da      	uxtb	r2, r3
 8009160:	2380      	movs	r3, #128	@ 0x80
 8009162:	045c      	lsls	r4, r3, #17
 8009164:	230a      	movs	r3, #10
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	8819      	ldrh	r1, [r3, #0]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	2300      	movs	r3, #0
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	0023      	movs	r3, r4
 8009172:	f000 fca3 	bl	8009abc <I2C_TransferConfig>
 8009176:	e012      	b.n	800919e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009186:	b2da      	uxtb	r2, r3
 8009188:	2380      	movs	r3, #128	@ 0x80
 800918a:	049c      	lsls	r4, r3, #18
 800918c:	230a      	movs	r3, #10
 800918e:	18fb      	adds	r3, r7, r3
 8009190:	8819      	ldrh	r1, [r3, #0]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	2300      	movs	r3, #0
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	0023      	movs	r3, r4
 800919a:	f000 fc8f 	bl	8009abc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d194      	bne.n	80090d2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	0018      	movs	r0, r3
 80091b0:	f000 faaa 	bl	8009708 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091b4:	1e03      	subs	r3, r0, #0
 80091b6:	d001      	beq.n	80091bc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e01a      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2220      	movs	r2, #32
 80091c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	490c      	ldr	r1, [pc, #48]	@ (8009200 <HAL_I2C_Mem_Read+0x264>)
 80091d0:	400a      	ands	r2, r1
 80091d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2241      	movs	r2, #65	@ 0x41
 80091d8:	2120      	movs	r1, #32
 80091da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2242      	movs	r2, #66	@ 0x42
 80091e0:	2100      	movs	r1, #0
 80091e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2240      	movs	r2, #64	@ 0x40
 80091e8:	2100      	movs	r1, #0
 80091ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	e000      	b.n	80091f2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80091f0:	2302      	movs	r3, #2
  }
}
 80091f2:	0018      	movs	r0, r3
 80091f4:	46bd      	mov	sp, r7
 80091f6:	b007      	add	sp, #28
 80091f8:	bd90      	pop	{r4, r7, pc}
 80091fa:	46c0      	nop			@ (mov r8, r8)
 80091fc:	80002400 	.word	0x80002400
 8009200:	fe00e800 	.word	0xfe00e800

08009204 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	@ 0x28
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	230a      	movs	r3, #10
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	1c0a      	adds	r2, r1, #0
 8009216:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2241      	movs	r2, #65	@ 0x41
 8009220:	5c9b      	ldrb	r3, [r3, r2]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b20      	cmp	r3, #32
 8009226:	d000      	beq.n	800922a <HAL_I2C_IsDeviceReady+0x26>
 8009228:	e0df      	b.n	80093ea <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	2380      	movs	r3, #128	@ 0x80
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	401a      	ands	r2, r3
 8009236:	2380      	movs	r3, #128	@ 0x80
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	429a      	cmp	r2, r3
 800923c:	d101      	bne.n	8009242 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800923e:	2302      	movs	r3, #2
 8009240:	e0d4      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2240      	movs	r2, #64	@ 0x40
 8009246:	5c9b      	ldrb	r3, [r3, r2]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_I2C_IsDeviceReady+0x4c>
 800924c:	2302      	movs	r3, #2
 800924e:	e0cd      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2240      	movs	r2, #64	@ 0x40
 8009254:	2101      	movs	r1, #1
 8009256:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2241      	movs	r2, #65	@ 0x41
 800925c:	2124      	movs	r1, #36	@ 0x24
 800925e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d107      	bne.n	800927e <HAL_I2C_IsDeviceReady+0x7a>
 800926e:	230a      	movs	r3, #10
 8009270:	18fb      	adds	r3, r7, r3
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	059b      	lsls	r3, r3, #22
 8009276:	0d9b      	lsrs	r3, r3, #22
 8009278:	4a5e      	ldr	r2, [pc, #376]	@ (80093f4 <HAL_I2C_IsDeviceReady+0x1f0>)
 800927a:	431a      	orrs	r2, r3
 800927c:	e006      	b.n	800928c <HAL_I2C_IsDeviceReady+0x88>
 800927e:	230a      	movs	r3, #10
 8009280:	18fb      	adds	r3, r7, r3
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	059b      	lsls	r3, r3, #22
 8009286:	0d9b      	lsrs	r3, r3, #22
 8009288:	4a5b      	ldr	r2, [pc, #364]	@ (80093f8 <HAL_I2C_IsDeviceReady+0x1f4>)
 800928a:	431a      	orrs	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009292:	f7fe fd35 	bl	8007d00 <HAL_GetTick>
 8009296:	0003      	movs	r3, r0
 8009298:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	2220      	movs	r2, #32
 80092a2:	4013      	ands	r3, r2
 80092a4:	3b20      	subs	r3, #32
 80092a6:	425a      	negs	r2, r3
 80092a8:	4153      	adcs	r3, r2
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	231f      	movs	r3, #31
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	2210      	movs	r2, #16
 80092ba:	4013      	ands	r3, r2
 80092bc:	3b10      	subs	r3, #16
 80092be:	425a      	negs	r2, r3
 80092c0:	4153      	adcs	r3, r2
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	231e      	movs	r3, #30
 80092c6:	18fb      	adds	r3, r7, r3
 80092c8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80092ca:	e035      	b.n	8009338 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	d01a      	beq.n	8009308 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092d2:	f7fe fd15 	bl	8007d00 <HAL_GetTick>
 80092d6:	0002      	movs	r2, r0
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d302      	bcc.n	80092e8 <HAL_I2C_IsDeviceReady+0xe4>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10f      	bne.n	8009308 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2241      	movs	r2, #65	@ 0x41
 80092ec:	2120      	movs	r1, #32
 80092ee:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092f4:	2220      	movs	r2, #32
 80092f6:	431a      	orrs	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2240      	movs	r2, #64	@ 0x40
 8009300:	2100      	movs	r1, #0
 8009302:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e071      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2220      	movs	r2, #32
 8009310:	4013      	ands	r3, r2
 8009312:	3b20      	subs	r3, #32
 8009314:	425a      	negs	r2, r3
 8009316:	4153      	adcs	r3, r2
 8009318:	b2da      	uxtb	r2, r3
 800931a:	231f      	movs	r3, #31
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2210      	movs	r2, #16
 8009328:	4013      	ands	r3, r2
 800932a:	3b10      	subs	r3, #16
 800932c:	425a      	negs	r2, r3
 800932e:	4153      	adcs	r3, r2
 8009330:	b2da      	uxtb	r2, r3
 8009332:	231e      	movs	r3, #30
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009338:	231f      	movs	r3, #31
 800933a:	18fb      	adds	r3, r7, r3
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <HAL_I2C_IsDeviceReady+0x148>
 8009342:	231e      	movs	r3, #30
 8009344:	18fb      	adds	r3, r7, r3
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0bf      	beq.n	80092cc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	2210      	movs	r2, #16
 8009354:	4013      	ands	r3, r2
 8009356:	2b10      	cmp	r3, #16
 8009358:	d01a      	beq.n	8009390 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	0013      	movs	r3, r2
 8009364:	2200      	movs	r2, #0
 8009366:	2120      	movs	r1, #32
 8009368:	f000 f930 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 800936c:	1e03      	subs	r3, r0, #0
 800936e:	d001      	beq.n	8009374 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e03b      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2220      	movs	r2, #32
 800937a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2241      	movs	r2, #65	@ 0x41
 8009380:	2120      	movs	r1, #32
 8009382:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2240      	movs	r2, #64	@ 0x40
 8009388:	2100      	movs	r1, #0
 800938a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	e02d      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	0013      	movs	r3, r2
 800939a:	2200      	movs	r2, #0
 800939c:	2120      	movs	r1, #32
 800939e:	f000 f915 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 80093a2:	1e03      	subs	r3, r0, #0
 80093a4:	d001      	beq.n	80093aa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e020      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2210      	movs	r2, #16
 80093b0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2220      	movs	r2, #32
 80093b8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	3301      	adds	r3, #1
 80093be:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d900      	bls.n	80093ca <HAL_I2C_IsDeviceReady+0x1c6>
 80093c8:	e74d      	b.n	8009266 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2241      	movs	r2, #65	@ 0x41
 80093ce:	2120      	movs	r1, #32
 80093d0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d6:	2220      	movs	r2, #32
 80093d8:	431a      	orrs	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2240      	movs	r2, #64	@ 0x40
 80093e2:	2100      	movs	r1, #0
 80093e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
  }
}
 80093ec:	0018      	movs	r0, r3
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b008      	add	sp, #32
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	02002000 	.word	0x02002000
 80093f8:	02002800 	.word	0x02002800

080093fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80093fc:	b5b0      	push	{r4, r5, r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	000c      	movs	r4, r1
 8009406:	0010      	movs	r0, r2
 8009408:	0019      	movs	r1, r3
 800940a:	250a      	movs	r5, #10
 800940c:	197b      	adds	r3, r7, r5
 800940e:	1c22      	adds	r2, r4, #0
 8009410:	801a      	strh	r2, [r3, #0]
 8009412:	2308      	movs	r3, #8
 8009414:	18fb      	adds	r3, r7, r3
 8009416:	1c02      	adds	r2, r0, #0
 8009418:	801a      	strh	r2, [r3, #0]
 800941a:	1dbb      	adds	r3, r7, #6
 800941c:	1c0a      	adds	r2, r1, #0
 800941e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009420:	1dbb      	adds	r3, r7, #6
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b2da      	uxtb	r2, r3
 8009426:	2380      	movs	r3, #128	@ 0x80
 8009428:	045c      	lsls	r4, r3, #17
 800942a:	197b      	adds	r3, r7, r5
 800942c:	8819      	ldrh	r1, [r3, #0]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	4b23      	ldr	r3, [pc, #140]	@ (80094c0 <I2C_RequestMemoryWrite+0xc4>)
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	0023      	movs	r3, r4
 8009436:	f000 fb41 	bl	8009abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800943a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800943c:	6a39      	ldr	r1, [r7, #32]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	0018      	movs	r0, r3
 8009442:	f000 f91b 	bl	800967c <I2C_WaitOnTXISFlagUntilTimeout>
 8009446:	1e03      	subs	r3, r0, #0
 8009448:	d001      	beq.n	800944e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e033      	b.n	80094b6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800944e:	1dbb      	adds	r3, r7, #6
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d107      	bne.n	8009466 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009456:	2308      	movs	r3, #8
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	629a      	str	r2, [r3, #40]	@ 0x28
 8009464:	e019      	b.n	800949a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009466:	2308      	movs	r3, #8
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	0a1b      	lsrs	r3, r3, #8
 800946e:	b29b      	uxth	r3, r3
 8009470:	b2da      	uxtb	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947a:	6a39      	ldr	r1, [r7, #32]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	0018      	movs	r0, r3
 8009480:	f000 f8fc 	bl	800967c <I2C_WaitOnTXISFlagUntilTimeout>
 8009484:	1e03      	subs	r3, r0, #0
 8009486:	d001      	beq.n	800948c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e014      	b.n	80094b6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800948c:	2308      	movs	r3, #8
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b2da      	uxtb	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800949a:	6a3a      	ldr	r2, [r7, #32]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	0013      	movs	r3, r2
 80094a4:	2200      	movs	r2, #0
 80094a6:	2180      	movs	r1, #128	@ 0x80
 80094a8:	f000 f890 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 80094ac:	1e03      	subs	r3, r0, #0
 80094ae:	d001      	beq.n	80094b4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e000      	b.n	80094b6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	0018      	movs	r0, r3
 80094b8:	46bd      	mov	sp, r7
 80094ba:	b004      	add	sp, #16
 80094bc:	bdb0      	pop	{r4, r5, r7, pc}
 80094be:	46c0      	nop			@ (mov r8, r8)
 80094c0:	80002000 	.word	0x80002000

080094c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80094c4:	b5b0      	push	{r4, r5, r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	000c      	movs	r4, r1
 80094ce:	0010      	movs	r0, r2
 80094d0:	0019      	movs	r1, r3
 80094d2:	250a      	movs	r5, #10
 80094d4:	197b      	adds	r3, r7, r5
 80094d6:	1c22      	adds	r2, r4, #0
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	2308      	movs	r3, #8
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	1c02      	adds	r2, r0, #0
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	1dbb      	adds	r3, r7, #6
 80094e4:	1c0a      	adds	r2, r1, #0
 80094e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80094e8:	1dbb      	adds	r3, r7, #6
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	197b      	adds	r3, r7, r5
 80094f0:	8819      	ldrh	r1, [r3, #0]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	4b23      	ldr	r3, [pc, #140]	@ (8009584 <I2C_RequestMemoryRead+0xc0>)
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2300      	movs	r3, #0
 80094fa:	f000 fadf 	bl	8009abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009500:	6a39      	ldr	r1, [r7, #32]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	0018      	movs	r0, r3
 8009506:	f000 f8b9 	bl	800967c <I2C_WaitOnTXISFlagUntilTimeout>
 800950a:	1e03      	subs	r3, r0, #0
 800950c:	d001      	beq.n	8009512 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e033      	b.n	800957a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009512:	1dbb      	adds	r3, r7, #6
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d107      	bne.n	800952a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800951a:	2308      	movs	r3, #8
 800951c:	18fb      	adds	r3, r7, r3
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b2da      	uxtb	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	629a      	str	r2, [r3, #40]	@ 0x28
 8009528:	e019      	b.n	800955e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800952a:	2308      	movs	r3, #8
 800952c:	18fb      	adds	r3, r7, r3
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	0a1b      	lsrs	r3, r3, #8
 8009532:	b29b      	uxth	r3, r3
 8009534:	b2da      	uxtb	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800953c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800953e:	6a39      	ldr	r1, [r7, #32]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0018      	movs	r0, r3
 8009544:	f000 f89a 	bl	800967c <I2C_WaitOnTXISFlagUntilTimeout>
 8009548:	1e03      	subs	r3, r0, #0
 800954a:	d001      	beq.n	8009550 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e014      	b.n	800957a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009550:	2308      	movs	r3, #8
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	0013      	movs	r3, r2
 8009568:	2200      	movs	r2, #0
 800956a:	2140      	movs	r1, #64	@ 0x40
 800956c:	f000 f82e 	bl	80095cc <I2C_WaitOnFlagUntilTimeout>
 8009570:	1e03      	subs	r3, r0, #0
 8009572:	d001      	beq.n	8009578 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	0018      	movs	r0, r3
 800957c:	46bd      	mov	sp, r7
 800957e:	b004      	add	sp, #16
 8009580:	bdb0      	pop	{r4, r5, r7, pc}
 8009582:	46c0      	nop			@ (mov r8, r8)
 8009584:	80002000 	.word	0x80002000

08009588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	2202      	movs	r2, #2
 8009598:	4013      	ands	r3, r2
 800959a:	2b02      	cmp	r3, #2
 800959c:	d103      	bne.n	80095a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2201      	movs	r2, #1
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d007      	beq.n	80095c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2101      	movs	r1, #1
 80095c0:	430a      	orrs	r2, r1
 80095c2:	619a      	str	r2, [r3, #24]
  }
}
 80095c4:	46c0      	nop			@ (mov r8, r8)
 80095c6:	46bd      	mov	sp, r7
 80095c8:	b002      	add	sp, #8
 80095ca:	bd80      	pop	{r7, pc}

080095cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	1dfb      	adds	r3, r7, #7
 80095da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095dc:	e03a      	b.n	8009654 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	0018      	movs	r0, r3
 80095e6:	f000 f971 	bl	80098cc <I2C_IsErrorOccurred>
 80095ea:	1e03      	subs	r3, r0, #0
 80095ec:	d001      	beq.n	80095f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e040      	b.n	8009674 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	d02d      	beq.n	8009654 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f8:	f7fe fb82 	bl	8007d00 <HAL_GetTick>
 80095fc:	0002      	movs	r2, r0
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d302      	bcc.n	800960e <I2C_WaitOnFlagUntilTimeout+0x42>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d122      	bne.n	8009654 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	4013      	ands	r3, r2
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	425a      	negs	r2, r3
 800961e:	4153      	adcs	r3, r2
 8009620:	b2db      	uxtb	r3, r3
 8009622:	001a      	movs	r2, r3
 8009624:	1dfb      	adds	r3, r7, #7
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d113      	bne.n	8009654 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009630:	2220      	movs	r2, #32
 8009632:	431a      	orrs	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2241      	movs	r2, #65	@ 0x41
 800963c:	2120      	movs	r1, #32
 800963e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2242      	movs	r2, #66	@ 0x42
 8009644:	2100      	movs	r1, #0
 8009646:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2240      	movs	r2, #64	@ 0x40
 800964c:	2100      	movs	r1, #0
 800964e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e00f      	b.n	8009674 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	4013      	ands	r3, r2
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	425a      	negs	r2, r3
 8009664:	4153      	adcs	r3, r2
 8009666:	b2db      	uxtb	r3, r3
 8009668:	001a      	movs	r2, r3
 800966a:	1dfb      	adds	r3, r7, #7
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	429a      	cmp	r2, r3
 8009670:	d0b5      	beq.n	80095de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	0018      	movs	r0, r3
 8009676:	46bd      	mov	sp, r7
 8009678:	b004      	add	sp, #16
 800967a:	bd80      	pop	{r7, pc}

0800967c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009688:	e032      	b.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	0018      	movs	r0, r3
 8009692:	f000 f91b 	bl	80098cc <I2C_IsErrorOccurred>
 8009696:	1e03      	subs	r3, r0, #0
 8009698:	d001      	beq.n	800969e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e030      	b.n	8009700 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	3301      	adds	r3, #1
 80096a2:	d025      	beq.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a4:	f7fe fb2c 	bl	8007d00 <HAL_GetTick>
 80096a8:	0002      	movs	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d302      	bcc.n	80096ba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d11a      	bne.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	2202      	movs	r2, #2
 80096c2:	4013      	ands	r3, r2
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d013      	beq.n	80096f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096cc:	2220      	movs	r2, #32
 80096ce:	431a      	orrs	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2241      	movs	r2, #65	@ 0x41
 80096d8:	2120      	movs	r1, #32
 80096da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2242      	movs	r2, #66	@ 0x42
 80096e0:	2100      	movs	r1, #0
 80096e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2240      	movs	r2, #64	@ 0x40
 80096e8:	2100      	movs	r1, #0
 80096ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e007      	b.n	8009700 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	2202      	movs	r2, #2
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d1c5      	bne.n	800968a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	0018      	movs	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	b004      	add	sp, #16
 8009706:	bd80      	pop	{r7, pc}

08009708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009714:	e02f      	b.n	8009776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	0018      	movs	r0, r3
 800971e:	f000 f8d5 	bl	80098cc <I2C_IsErrorOccurred>
 8009722:	1e03      	subs	r3, r0, #0
 8009724:	d001      	beq.n	800972a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e02d      	b.n	8009786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800972a:	f7fe fae9 	bl	8007d00 <HAL_GetTick>
 800972e:	0002      	movs	r2, r0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	429a      	cmp	r2, r3
 8009738:	d302      	bcc.n	8009740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11a      	bne.n	8009776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	2220      	movs	r2, #32
 8009748:	4013      	ands	r3, r2
 800974a:	2b20      	cmp	r3, #32
 800974c:	d013      	beq.n	8009776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009752:	2220      	movs	r2, #32
 8009754:	431a      	orrs	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2241      	movs	r2, #65	@ 0x41
 800975e:	2120      	movs	r1, #32
 8009760:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2242      	movs	r2, #66	@ 0x42
 8009766:	2100      	movs	r1, #0
 8009768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2240      	movs	r2, #64	@ 0x40
 800976e:	2100      	movs	r1, #0
 8009770:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e007      	b.n	8009786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	2220      	movs	r2, #32
 800977e:	4013      	ands	r3, r2
 8009780:	2b20      	cmp	r3, #32
 8009782:	d1c8      	bne.n	8009716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	0018      	movs	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	b004      	add	sp, #16
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800979c:	2317      	movs	r3, #23
 800979e:	18fb      	adds	r3, r7, r3
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80097a4:	e07b      	b.n	800989e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	0018      	movs	r0, r3
 80097ae:	f000 f88d 	bl	80098cc <I2C_IsErrorOccurred>
 80097b2:	1e03      	subs	r3, r0, #0
 80097b4:	d003      	beq.n	80097be <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80097b6:	2317      	movs	r3, #23
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	2201      	movs	r2, #1
 80097bc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	2220      	movs	r2, #32
 80097c6:	4013      	ands	r3, r2
 80097c8:	2b20      	cmp	r3, #32
 80097ca:	d140      	bne.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80097cc:	2117      	movs	r1, #23
 80097ce:	187b      	adds	r3, r7, r1
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d13b      	bne.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	2204      	movs	r2, #4
 80097de:	4013      	ands	r3, r2
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d106      	bne.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80097ec:	187b      	adds	r3, r7, r1
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	2210      	movs	r2, #16
 80097fa:	4013      	ands	r3, r2
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d123      	bne.n	8009848 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2210      	movs	r2, #16
 8009806:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2204      	movs	r2, #4
 800980c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2220      	movs	r2, #32
 8009814:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4929      	ldr	r1, [pc, #164]	@ (80098c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8009822:	400a      	ands	r2, r1
 8009824:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2241      	movs	r2, #65	@ 0x41
 800982a:	2120      	movs	r1, #32
 800982c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2242      	movs	r2, #66	@ 0x42
 8009832:	2100      	movs	r1, #0
 8009834:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2240      	movs	r2, #64	@ 0x40
 800983a:	2100      	movs	r1, #0
 800983c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800983e:	2317      	movs	r3, #23
 8009840:	18fb      	adds	r3, r7, r3
 8009842:	2201      	movs	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	e002      	b.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800984e:	f7fe fa57 	bl	8007d00 <HAL_GetTick>
 8009852:	0002      	movs	r2, r0
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	429a      	cmp	r2, r3
 800985c:	d302      	bcc.n	8009864 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d11c      	bne.n	800989e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8009864:	2017      	movs	r0, #23
 8009866:	183b      	adds	r3, r7, r0
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d117      	bne.n	800989e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	2204      	movs	r2, #4
 8009876:	4013      	ands	r3, r2
 8009878:	2b04      	cmp	r3, #4
 800987a:	d010      	beq.n	800989e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009880:	2220      	movs	r2, #32
 8009882:	431a      	orrs	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2241      	movs	r2, #65	@ 0x41
 800988c:	2120      	movs	r1, #32
 800988e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2240      	movs	r2, #64	@ 0x40
 8009894:	2100      	movs	r1, #0
 8009896:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009898:	183b      	adds	r3, r7, r0
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	2204      	movs	r2, #4
 80098a6:	4013      	ands	r3, r2
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d005      	beq.n	80098b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80098ac:	2317      	movs	r3, #23
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d100      	bne.n	80098b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80098b6:	e776      	b.n	80097a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80098b8:	2317      	movs	r3, #23
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	781b      	ldrb	r3, [r3, #0]
}
 80098be:	0018      	movs	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	b006      	add	sp, #24
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	46c0      	nop			@ (mov r8, r8)
 80098c8:	fe00e800 	.word	0xfe00e800

080098cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	@ 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098d8:	2327      	movs	r3, #39	@ 0x27
 80098da:	18fb      	adds	r3, r7, r3
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2210      	movs	r2, #16
 80098f4:	4013      	ands	r3, r2
 80098f6:	d100      	bne.n	80098fa <I2C_IsErrorOccurred+0x2e>
 80098f8:	e079      	b.n	80099ee <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2210      	movs	r2, #16
 8009900:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009902:	e057      	b.n	80099b4 <I2C_IsErrorOccurred+0xe8>
 8009904:	2227      	movs	r2, #39	@ 0x27
 8009906:	18bb      	adds	r3, r7, r2
 8009908:	18ba      	adds	r2, r7, r2
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	3301      	adds	r3, #1
 8009912:	d04f      	beq.n	80099b4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009914:	f7fe f9f4 	bl	8007d00 <HAL_GetTick>
 8009918:	0002      	movs	r2, r0
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <I2C_IsErrorOccurred+0x5e>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d144      	bne.n	80099b4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	2380      	movs	r3, #128	@ 0x80
 8009932:	01db      	lsls	r3, r3, #7
 8009934:	4013      	ands	r3, r2
 8009936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009938:	2013      	movs	r0, #19
 800993a:	183b      	adds	r3, r7, r0
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	2142      	movs	r1, #66	@ 0x42
 8009940:	5c52      	ldrb	r2, [r2, r1]
 8009942:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699a      	ldr	r2, [r3, #24]
 800994a:	2380      	movs	r3, #128	@ 0x80
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	401a      	ands	r2, r3
 8009950:	2380      	movs	r3, #128	@ 0x80
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	429a      	cmp	r2, r3
 8009956:	d126      	bne.n	80099a6 <I2C_IsErrorOccurred+0xda>
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	2380      	movs	r3, #128	@ 0x80
 800995c:	01db      	lsls	r3, r3, #7
 800995e:	429a      	cmp	r2, r3
 8009960:	d021      	beq.n	80099a6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8009962:	183b      	adds	r3, r7, r0
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b20      	cmp	r3, #32
 8009968:	d01d      	beq.n	80099a6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2180      	movs	r1, #128	@ 0x80
 8009976:	01c9      	lsls	r1, r1, #7
 8009978:	430a      	orrs	r2, r1
 800997a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800997c:	f7fe f9c0 	bl	8007d00 <HAL_GetTick>
 8009980:	0003      	movs	r3, r0
 8009982:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009984:	e00f      	b.n	80099a6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009986:	f7fe f9bb 	bl	8007d00 <HAL_GetTick>
 800998a:	0002      	movs	r2, r0
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b19      	cmp	r3, #25
 8009992:	d908      	bls.n	80099a6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2220      	movs	r2, #32
 8009998:	4313      	orrs	r3, r2
 800999a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800999c:	2327      	movs	r3, #39	@ 0x27
 800999e:	18fb      	adds	r3, r7, r3
 80099a0:	2201      	movs	r2, #1
 80099a2:	701a      	strb	r2, [r3, #0]

              break;
 80099a4:	e006      	b.n	80099b4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	2220      	movs	r2, #32
 80099ae:	4013      	ands	r3, r2
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d1e8      	bne.n	8009986 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	2220      	movs	r2, #32
 80099bc:	4013      	ands	r3, r2
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d004      	beq.n	80099cc <I2C_IsErrorOccurred+0x100>
 80099c2:	2327      	movs	r3, #39	@ 0x27
 80099c4:	18fb      	adds	r3, r7, r3
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d09b      	beq.n	8009904 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80099cc:	2327      	movs	r3, #39	@ 0x27
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2220      	movs	r2, #32
 80099dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	2204      	movs	r2, #4
 80099e2:	4313      	orrs	r3, r2
 80099e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80099e6:	2327      	movs	r3, #39	@ 0x27
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	2201      	movs	r2, #1
 80099ec:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	2380      	movs	r3, #128	@ 0x80
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	4013      	ands	r3, r2
 80099fe:	d00c      	beq.n	8009a1a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	2201      	movs	r2, #1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2280      	movs	r2, #128	@ 0x80
 8009a0e:	0052      	lsls	r2, r2, #1
 8009a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a12:	2327      	movs	r3, #39	@ 0x27
 8009a14:	18fb      	adds	r3, r7, r3
 8009a16:	2201      	movs	r2, #1
 8009a18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	2380      	movs	r3, #128	@ 0x80
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	4013      	ands	r3, r2
 8009a22:	d00c      	beq.n	8009a3e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2208      	movs	r2, #8
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2280      	movs	r2, #128	@ 0x80
 8009a32:	00d2      	lsls	r2, r2, #3
 8009a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a36:	2327      	movs	r3, #39	@ 0x27
 8009a38:	18fb      	adds	r3, r7, r3
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	2380      	movs	r3, #128	@ 0x80
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4013      	ands	r3, r2
 8009a46:	d00c      	beq.n	8009a62 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2280      	movs	r2, #128	@ 0x80
 8009a56:	0092      	lsls	r2, r2, #2
 8009a58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a5a:	2327      	movs	r3, #39	@ 0x27
 8009a5c:	18fb      	adds	r3, r7, r3
 8009a5e:	2201      	movs	r2, #1
 8009a60:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009a62:	2327      	movs	r3, #39	@ 0x27
 8009a64:	18fb      	adds	r3, r7, r3
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d01d      	beq.n	8009aa8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f7ff fd8a 	bl	8009588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	490e      	ldr	r1, [pc, #56]	@ (8009ab8 <I2C_IsErrorOccurred+0x1ec>)
 8009a80:	400a      	ands	r2, r1
 8009a82:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2241      	movs	r2, #65	@ 0x41
 8009a94:	2120      	movs	r1, #32
 8009a96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2242      	movs	r2, #66	@ 0x42
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2240      	movs	r2, #64	@ 0x40
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009aa8:	2327      	movs	r3, #39	@ 0x27
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	781b      	ldrb	r3, [r3, #0]
}
 8009aae:	0018      	movs	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b00a      	add	sp, #40	@ 0x28
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	46c0      	nop			@ (mov r8, r8)
 8009ab8:	fe00e800 	.word	0xfe00e800

08009abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009abc:	b590      	push	{r4, r7, lr}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	0008      	movs	r0, r1
 8009ac6:	0011      	movs	r1, r2
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	240a      	movs	r4, #10
 8009acc:	193b      	adds	r3, r7, r4
 8009ace:	1c02      	adds	r2, r0, #0
 8009ad0:	801a      	strh	r2, [r3, #0]
 8009ad2:	2009      	movs	r0, #9
 8009ad4:	183b      	adds	r3, r7, r0
 8009ad6:	1c0a      	adds	r2, r1, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ada:	193b      	adds	r3, r7, r4
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	059b      	lsls	r3, r3, #22
 8009ae0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ae2:	183b      	adds	r3, r7, r0
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	0419      	lsls	r1, r3, #16
 8009ae8:	23ff      	movs	r3, #255	@ 0xff
 8009aea:	041b      	lsls	r3, r3, #16
 8009aec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009aee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af6:	4313      	orrs	r3, r2
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b06:	0d51      	lsrs	r1, r2, #21
 8009b08:	2280      	movs	r2, #128	@ 0x80
 8009b0a:	00d2      	lsls	r2, r2, #3
 8009b0c:	400a      	ands	r2, r1
 8009b0e:	4907      	ldr	r1, [pc, #28]	@ (8009b2c <I2C_TransferConfig+0x70>)
 8009b10:	430a      	orrs	r2, r1
 8009b12:	43d2      	mvns	r2, r2
 8009b14:	401a      	ands	r2, r3
 8009b16:	0011      	movs	r1, r2
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b22:	46c0      	nop			@ (mov r8, r8)
 8009b24:	46bd      	mov	sp, r7
 8009b26:	b007      	add	sp, #28
 8009b28:	bd90      	pop	{r4, r7, pc}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	03ff63ff 	.word	0x03ff63ff

08009b30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2241      	movs	r2, #65	@ 0x41
 8009b3e:	5c9b      	ldrb	r3, [r3, r2]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b20      	cmp	r3, #32
 8009b44:	d138      	bne.n	8009bb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2240      	movs	r2, #64	@ 0x40
 8009b4a:	5c9b      	ldrb	r3, [r3, r2]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e032      	b.n	8009bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2240      	movs	r2, #64	@ 0x40
 8009b58:	2101      	movs	r1, #1
 8009b5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2241      	movs	r2, #65	@ 0x41
 8009b60:	2124      	movs	r1, #36	@ 0x24
 8009b62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2101      	movs	r1, #1
 8009b70:	438a      	bics	r2, r1
 8009b72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4911      	ldr	r1, [pc, #68]	@ (8009bc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009b80:	400a      	ands	r2, r1
 8009b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6819      	ldr	r1, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2241      	movs	r2, #65	@ 0x41
 8009ba8:	2120      	movs	r1, #32
 8009baa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2240      	movs	r2, #64	@ 0x40
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e000      	b.n	8009bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bb8:	2302      	movs	r3, #2
  }
}
 8009bba:	0018      	movs	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	b002      	add	sp, #8
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	46c0      	nop			@ (mov r8, r8)
 8009bc4:	ffffefff 	.word	0xffffefff

08009bc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2241      	movs	r2, #65	@ 0x41
 8009bd6:	5c9b      	ldrb	r3, [r3, r2]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d139      	bne.n	8009c52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2240      	movs	r2, #64	@ 0x40
 8009be2:	5c9b      	ldrb	r3, [r3, r2]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e033      	b.n	8009c54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2240      	movs	r2, #64	@ 0x40
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2241      	movs	r2, #65	@ 0x41
 8009bf8:	2124      	movs	r1, #36	@ 0x24
 8009bfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2101      	movs	r1, #1
 8009c08:	438a      	bics	r2, r1
 8009c0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4a11      	ldr	r2, [pc, #68]	@ (8009c5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009c18:	4013      	ands	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2101      	movs	r1, #1
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2241      	movs	r2, #65	@ 0x41
 8009c42:	2120      	movs	r1, #32
 8009c44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2240      	movs	r2, #64	@ 0x40
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e000      	b.n	8009c54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c52:	2302      	movs	r3, #2
  }
}
 8009c54:	0018      	movs	r0, r3
 8009c56:	46bd      	mov	sp, r7
 8009c58:	b004      	add	sp, #16
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	fffff0ff 	.word	0xfffff0ff

08009c60 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c64:	4b04      	ldr	r3, [pc, #16]	@ (8009c78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4b03      	ldr	r3, [pc, #12]	@ (8009c78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8009c6a:	2180      	movs	r1, #128	@ 0x80
 8009c6c:	0049      	lsls	r1, r1, #1
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	46c0      	nop			@ (mov r8, r8)
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	40007000 	.word	0x40007000

08009c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009c84:	4b19      	ldr	r3, [pc, #100]	@ (8009cec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a19      	ldr	r2, [pc, #100]	@ (8009cf0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	4b17      	ldr	r3, [pc, #92]	@ (8009cec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	2380      	movs	r3, #128	@ 0x80
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d11f      	bne.n	8009ce0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009ca0:	4b14      	ldr	r3, [pc, #80]	@ (8009cf4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	0013      	movs	r3, r2
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	4912      	ldr	r1, [pc, #72]	@ (8009cf8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f7f6 fa46 	bl	8000140 <__udivsi3>
 8009cb4:	0003      	movs	r3, r0
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009cba:	e008      	b.n	8009cce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e001      	b.n	8009cce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e009      	b.n	8009ce2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009cce:	4b07      	ldr	r3, [pc, #28]	@ (8009cec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009cd0:	695a      	ldr	r2, [r3, #20]
 8009cd2:	2380      	movs	r3, #128	@ 0x80
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	401a      	ands	r2, r3
 8009cd8:	2380      	movs	r3, #128	@ 0x80
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d0ed      	beq.n	8009cbc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b004      	add	sp, #16
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	46c0      	nop			@ (mov r8, r8)
 8009cec:	40007000 	.word	0x40007000
 8009cf0:	fffff9ff 	.word	0xfffff9ff
 8009cf4:	20000068 	.word	0x20000068
 8009cf8:	000f4240 	.word	0x000f4240

08009cfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009d00:	4b03      	ldr	r3, [pc, #12]	@ (8009d10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	23e0      	movs	r3, #224	@ 0xe0
 8009d06:	01db      	lsls	r3, r3, #7
 8009d08:	4013      	ands	r3, r2
}
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	40021000 	.word	0x40021000

08009d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e2fe      	b.n	800a324 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	d100      	bne.n	8009d32 <HAL_RCC_OscConfig+0x1e>
 8009d30:	e07c      	b.n	8009e2c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d32:	4bc3      	ldr	r3, [pc, #780]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	2238      	movs	r2, #56	@ 0x38
 8009d38:	4013      	ands	r3, r2
 8009d3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d3c:	4bc0      	ldr	r3, [pc, #768]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	2203      	movs	r2, #3
 8009d42:	4013      	ands	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	2b10      	cmp	r3, #16
 8009d4a:	d102      	bne.n	8009d52 <HAL_RCC_OscConfig+0x3e>
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d002      	beq.n	8009d58 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d10b      	bne.n	8009d70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d58:	4bb9      	ldr	r3, [pc, #740]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	2380      	movs	r3, #128	@ 0x80
 8009d5e:	029b      	lsls	r3, r3, #10
 8009d60:	4013      	ands	r3, r2
 8009d62:	d062      	beq.n	8009e2a <HAL_RCC_OscConfig+0x116>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d15e      	bne.n	8009e2a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e2d9      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	2380      	movs	r3, #128	@ 0x80
 8009d76:	025b      	lsls	r3, r3, #9
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d107      	bne.n	8009d8c <HAL_RCC_OscConfig+0x78>
 8009d7c:	4bb0      	ldr	r3, [pc, #704]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	4baf      	ldr	r3, [pc, #700]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d82:	2180      	movs	r1, #128	@ 0x80
 8009d84:	0249      	lsls	r1, r1, #9
 8009d86:	430a      	orrs	r2, r1
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	e020      	b.n	8009dce <HAL_RCC_OscConfig+0xba>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	23a0      	movs	r3, #160	@ 0xa0
 8009d92:	02db      	lsls	r3, r3, #11
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d10e      	bne.n	8009db6 <HAL_RCC_OscConfig+0xa2>
 8009d98:	4ba9      	ldr	r3, [pc, #676]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	4ba8      	ldr	r3, [pc, #672]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009d9e:	2180      	movs	r1, #128	@ 0x80
 8009da0:	02c9      	lsls	r1, r1, #11
 8009da2:	430a      	orrs	r2, r1
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	4ba6      	ldr	r3, [pc, #664]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4ba5      	ldr	r3, [pc, #660]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009dac:	2180      	movs	r1, #128	@ 0x80
 8009dae:	0249      	lsls	r1, r1, #9
 8009db0:	430a      	orrs	r2, r1
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e00b      	b.n	8009dce <HAL_RCC_OscConfig+0xba>
 8009db6:	4ba2      	ldr	r3, [pc, #648]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	4ba1      	ldr	r3, [pc, #644]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009dbc:	49a1      	ldr	r1, [pc, #644]	@ (800a044 <HAL_RCC_OscConfig+0x330>)
 8009dbe:	400a      	ands	r2, r1
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	4b9f      	ldr	r3, [pc, #636]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4b9e      	ldr	r3, [pc, #632]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009dc8:	499f      	ldr	r1, [pc, #636]	@ (800a048 <HAL_RCC_OscConfig+0x334>)
 8009dca:	400a      	ands	r2, r1
 8009dcc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d014      	beq.n	8009e00 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd6:	f7fd ff93 	bl	8007d00 <HAL_GetTick>
 8009dda:	0003      	movs	r3, r0
 8009ddc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009de0:	f7fd ff8e 	bl	8007d00 <HAL_GetTick>
 8009de4:	0002      	movs	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b64      	cmp	r3, #100	@ 0x64
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e298      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009df2:	4b93      	ldr	r3, [pc, #588]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	2380      	movs	r3, #128	@ 0x80
 8009df8:	029b      	lsls	r3, r3, #10
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	d0f0      	beq.n	8009de0 <HAL_RCC_OscConfig+0xcc>
 8009dfe:	e015      	b.n	8009e2c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e00:	f7fd ff7e 	bl	8007d00 <HAL_GetTick>
 8009e04:	0003      	movs	r3, r0
 8009e06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e08:	e008      	b.n	8009e1c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e0a:	f7fd ff79 	bl	8007d00 <HAL_GetTick>
 8009e0e:	0002      	movs	r2, r0
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b64      	cmp	r3, #100	@ 0x64
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e283      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009e1c:	4b88      	ldr	r3, [pc, #544]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	2380      	movs	r3, #128	@ 0x80
 8009e22:	029b      	lsls	r3, r3, #10
 8009e24:	4013      	ands	r3, r2
 8009e26:	d1f0      	bne.n	8009e0a <HAL_RCC_OscConfig+0xf6>
 8009e28:	e000      	b.n	8009e2c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2202      	movs	r2, #2
 8009e32:	4013      	ands	r3, r2
 8009e34:	d100      	bne.n	8009e38 <HAL_RCC_OscConfig+0x124>
 8009e36:	e099      	b.n	8009f6c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e38:	4b81      	ldr	r3, [pc, #516]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	2238      	movs	r2, #56	@ 0x38
 8009e3e:	4013      	ands	r3, r2
 8009e40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e42:	4b7f      	ldr	r3, [pc, #508]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	2203      	movs	r2, #3
 8009e48:	4013      	ands	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	2b10      	cmp	r3, #16
 8009e50:	d102      	bne.n	8009e58 <HAL_RCC_OscConfig+0x144>
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d002      	beq.n	8009e5e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d135      	bne.n	8009eca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e5e:	4b78      	ldr	r3, [pc, #480]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	2380      	movs	r3, #128	@ 0x80
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4013      	ands	r3, r2
 8009e68:	d005      	beq.n	8009e76 <HAL_RCC_OscConfig+0x162>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e256      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e76:	4b72      	ldr	r3, [pc, #456]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	4a74      	ldr	r2, [pc, #464]	@ (800a04c <HAL_RCC_OscConfig+0x338>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	0019      	movs	r1, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	021a      	lsls	r2, r3, #8
 8009e86:	4b6e      	ldr	r3, [pc, #440]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d112      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e92:	4b6b      	ldr	r3, [pc, #428]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a6e      	ldr	r2, [pc, #440]	@ (800a050 <HAL_RCC_OscConfig+0x33c>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	0019      	movs	r1, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691a      	ldr	r2, [r3, #16]
 8009ea0:	4b67      	ldr	r3, [pc, #412]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009ea6:	4b66      	ldr	r3, [pc, #408]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	0adb      	lsrs	r3, r3, #11
 8009eac:	2207      	movs	r2, #7
 8009eae:	4013      	ands	r3, r2
 8009eb0:	4a68      	ldr	r2, [pc, #416]	@ (800a054 <HAL_RCC_OscConfig+0x340>)
 8009eb2:	40da      	lsrs	r2, r3
 8009eb4:	4b68      	ldr	r3, [pc, #416]	@ (800a058 <HAL_RCC_OscConfig+0x344>)
 8009eb6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009eb8:	4b68      	ldr	r3, [pc, #416]	@ (800a05c <HAL_RCC_OscConfig+0x348>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f7fd f98d 	bl	80071dc <HAL_InitTick>
 8009ec2:	1e03      	subs	r3, r0, #0
 8009ec4:	d051      	beq.n	8009f6a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e22c      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d030      	beq.n	8009f34 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009ed2:	4b5b      	ldr	r3, [pc, #364]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a5e      	ldr	r2, [pc, #376]	@ (800a050 <HAL_RCC_OscConfig+0x33c>)
 8009ed8:	4013      	ands	r3, r2
 8009eda:	0019      	movs	r1, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691a      	ldr	r2, [r3, #16]
 8009ee0:	4b57      	ldr	r3, [pc, #348]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009ee6:	4b56      	ldr	r3, [pc, #344]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4b55      	ldr	r3, [pc, #340]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009eec:	2180      	movs	r1, #128	@ 0x80
 8009eee:	0049      	lsls	r1, r1, #1
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef4:	f7fd ff04 	bl	8007d00 <HAL_GetTick>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009efc:	e008      	b.n	8009f10 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009efe:	f7fd feff 	bl	8007d00 <HAL_GetTick>
 8009f02:	0002      	movs	r2, r0
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d901      	bls.n	8009f10 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e209      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f10:	4b4b      	ldr	r3, [pc, #300]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	2380      	movs	r3, #128	@ 0x80
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	4013      	ands	r3, r2
 8009f1a:	d0f0      	beq.n	8009efe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f1c:	4b48      	ldr	r3, [pc, #288]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4a4a      	ldr	r2, [pc, #296]	@ (800a04c <HAL_RCC_OscConfig+0x338>)
 8009f22:	4013      	ands	r3, r2
 8009f24:	0019      	movs	r1, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	021a      	lsls	r2, r3, #8
 8009f2c:	4b44      	ldr	r3, [pc, #272]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	e01b      	b.n	8009f6c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009f34:	4b42      	ldr	r3, [pc, #264]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	4b41      	ldr	r3, [pc, #260]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f3a:	4949      	ldr	r1, [pc, #292]	@ (800a060 <HAL_RCC_OscConfig+0x34c>)
 8009f3c:	400a      	ands	r2, r1
 8009f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f40:	f7fd fede 	bl	8007d00 <HAL_GetTick>
 8009f44:	0003      	movs	r3, r0
 8009f46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f48:	e008      	b.n	8009f5c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f4a:	f7fd fed9 	bl	8007d00 <HAL_GetTick>
 8009f4e:	0002      	movs	r2, r0
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d901      	bls.n	8009f5c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e1e3      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f5c:	4b38      	ldr	r3, [pc, #224]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	2380      	movs	r3, #128	@ 0x80
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	4013      	ands	r3, r2
 8009f66:	d1f0      	bne.n	8009f4a <HAL_RCC_OscConfig+0x236>
 8009f68:	e000      	b.n	8009f6c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f6a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2208      	movs	r2, #8
 8009f72:	4013      	ands	r3, r2
 8009f74:	d047      	beq.n	800a006 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009f76:	4b32      	ldr	r3, [pc, #200]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2238      	movs	r2, #56	@ 0x38
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	2b18      	cmp	r3, #24
 8009f80:	d10a      	bne.n	8009f98 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009f82:	4b2f      	ldr	r3, [pc, #188]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f86:	2202      	movs	r2, #2
 8009f88:	4013      	ands	r3, r2
 8009f8a:	d03c      	beq.n	800a006 <HAL_RCC_OscConfig+0x2f2>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d138      	bne.n	800a006 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e1c5      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d019      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009fa0:	4b27      	ldr	r3, [pc, #156]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009fa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fa4:	4b26      	ldr	r3, [pc, #152]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fac:	f7fd fea8 	bl	8007d00 <HAL_GetTick>
 8009fb0:	0003      	movs	r3, r0
 8009fb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009fb4:	e008      	b.n	8009fc8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fb6:	f7fd fea3 	bl	8007d00 <HAL_GetTick>
 8009fba:	0002      	movs	r2, r0
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d901      	bls.n	8009fc8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e1ad      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009fc8:	4b1d      	ldr	r3, [pc, #116]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fcc:	2202      	movs	r2, #2
 8009fce:	4013      	ands	r3, r2
 8009fd0:	d0f1      	beq.n	8009fb6 <HAL_RCC_OscConfig+0x2a2>
 8009fd2:	e018      	b.n	800a006 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009fd4:	4b1a      	ldr	r3, [pc, #104]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009fd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fd8:	4b19      	ldr	r3, [pc, #100]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009fda:	2101      	movs	r1, #1
 8009fdc:	438a      	bics	r2, r1
 8009fde:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe0:	f7fd fe8e 	bl	8007d00 <HAL_GetTick>
 8009fe4:	0003      	movs	r3, r0
 8009fe6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fe8:	e008      	b.n	8009ffc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fea:	f7fd fe89 	bl	8007d00 <HAL_GetTick>
 8009fee:	0002      	movs	r2, r0
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d901      	bls.n	8009ffc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e193      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ffc:	4b10      	ldr	r3, [pc, #64]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 8009ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a000:	2202      	movs	r2, #2
 800a002:	4013      	ands	r3, r2
 800a004:	d1f1      	bne.n	8009fea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2204      	movs	r2, #4
 800a00c:	4013      	ands	r3, r2
 800a00e:	d100      	bne.n	800a012 <HAL_RCC_OscConfig+0x2fe>
 800a010:	e0c6      	b.n	800a1a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a012:	231f      	movs	r3, #31
 800a014:	18fb      	adds	r3, r7, r3
 800a016:	2200      	movs	r2, #0
 800a018:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a01a:	4b09      	ldr	r3, [pc, #36]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	2238      	movs	r2, #56	@ 0x38
 800a020:	4013      	ands	r3, r2
 800a022:	2b20      	cmp	r3, #32
 800a024:	d11e      	bne.n	800a064 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a026:	4b06      	ldr	r3, [pc, #24]	@ (800a040 <HAL_RCC_OscConfig+0x32c>)
 800a028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a02a:	2202      	movs	r2, #2
 800a02c:	4013      	ands	r3, r2
 800a02e:	d100      	bne.n	800a032 <HAL_RCC_OscConfig+0x31e>
 800a030:	e0b6      	b.n	800a1a0 <HAL_RCC_OscConfig+0x48c>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d000      	beq.n	800a03c <HAL_RCC_OscConfig+0x328>
 800a03a:	e0b1      	b.n	800a1a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e171      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
 800a040:	40021000 	.word	0x40021000
 800a044:	fffeffff 	.word	0xfffeffff
 800a048:	fffbffff 	.word	0xfffbffff
 800a04c:	ffff80ff 	.word	0xffff80ff
 800a050:	ffffc7ff 	.word	0xffffc7ff
 800a054:	00f42400 	.word	0x00f42400
 800a058:	20000068 	.word	0x20000068
 800a05c:	20000074 	.word	0x20000074
 800a060:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a064:	4bb1      	ldr	r3, [pc, #708]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a068:	2380      	movs	r3, #128	@ 0x80
 800a06a:	055b      	lsls	r3, r3, #21
 800a06c:	4013      	ands	r3, r2
 800a06e:	d101      	bne.n	800a074 <HAL_RCC_OscConfig+0x360>
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <HAL_RCC_OscConfig+0x362>
 800a074:	2300      	movs	r3, #0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d011      	beq.n	800a09e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a07a:	4bac      	ldr	r3, [pc, #688]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a07c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a07e:	4bab      	ldr	r3, [pc, #684]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a080:	2180      	movs	r1, #128	@ 0x80
 800a082:	0549      	lsls	r1, r1, #21
 800a084:	430a      	orrs	r2, r1
 800a086:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a088:	4ba8      	ldr	r3, [pc, #672]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a08a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a08c:	2380      	movs	r3, #128	@ 0x80
 800a08e:	055b      	lsls	r3, r3, #21
 800a090:	4013      	ands	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a096:	231f      	movs	r3, #31
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	2201      	movs	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a09e:	4ba4      	ldr	r3, [pc, #656]	@ (800a330 <HAL_RCC_OscConfig+0x61c>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	2380      	movs	r3, #128	@ 0x80
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	d11a      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0aa:	4ba1      	ldr	r3, [pc, #644]	@ (800a330 <HAL_RCC_OscConfig+0x61c>)
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	4ba0      	ldr	r3, [pc, #640]	@ (800a330 <HAL_RCC_OscConfig+0x61c>)
 800a0b0:	2180      	movs	r1, #128	@ 0x80
 800a0b2:	0049      	lsls	r1, r1, #1
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a0b8:	f7fd fe22 	bl	8007d00 <HAL_GetTick>
 800a0bc:	0003      	movs	r3, r0
 800a0be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0c0:	e008      	b.n	800a0d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0c2:	f7fd fe1d 	bl	8007d00 <HAL_GetTick>
 800a0c6:	0002      	movs	r2, r0
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d901      	bls.n	800a0d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e127      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0d4:	4b96      	ldr	r3, [pc, #600]	@ (800a330 <HAL_RCC_OscConfig+0x61c>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	2380      	movs	r3, #128	@ 0x80
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	4013      	ands	r3, r2
 800a0de:	d0f0      	beq.n	800a0c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d106      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x3e2>
 800a0e8:	4b90      	ldr	r3, [pc, #576]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a0ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0ec:	4b8f      	ldr	r3, [pc, #572]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0f4:	e01c      	b.n	800a130 <HAL_RCC_OscConfig+0x41c>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2b05      	cmp	r3, #5
 800a0fc:	d10c      	bne.n	800a118 <HAL_RCC_OscConfig+0x404>
 800a0fe:	4b8b      	ldr	r3, [pc, #556]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a100:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a102:	4b8a      	ldr	r3, [pc, #552]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a104:	2104      	movs	r1, #4
 800a106:	430a      	orrs	r2, r1
 800a108:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a10a:	4b88      	ldr	r3, [pc, #544]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a10c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a10e:	4b87      	ldr	r3, [pc, #540]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a110:	2101      	movs	r1, #1
 800a112:	430a      	orrs	r2, r1
 800a114:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a116:	e00b      	b.n	800a130 <HAL_RCC_OscConfig+0x41c>
 800a118:	4b84      	ldr	r3, [pc, #528]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a11a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a11c:	4b83      	ldr	r3, [pc, #524]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a11e:	2101      	movs	r1, #1
 800a120:	438a      	bics	r2, r1
 800a122:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a124:	4b81      	ldr	r3, [pc, #516]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a126:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a128:	4b80      	ldr	r3, [pc, #512]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a12a:	2104      	movs	r1, #4
 800a12c:	438a      	bics	r2, r1
 800a12e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d014      	beq.n	800a162 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a138:	f7fd fde2 	bl	8007d00 <HAL_GetTick>
 800a13c:	0003      	movs	r3, r0
 800a13e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a140:	e009      	b.n	800a156 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a142:	f7fd fddd 	bl	8007d00 <HAL_GetTick>
 800a146:	0002      	movs	r2, r0
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	4a79      	ldr	r2, [pc, #484]	@ (800a334 <HAL_RCC_OscConfig+0x620>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e0e6      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a156:	4b75      	ldr	r3, [pc, #468]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a15a:	2202      	movs	r2, #2
 800a15c:	4013      	ands	r3, r2
 800a15e:	d0f0      	beq.n	800a142 <HAL_RCC_OscConfig+0x42e>
 800a160:	e013      	b.n	800a18a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a162:	f7fd fdcd 	bl	8007d00 <HAL_GetTick>
 800a166:	0003      	movs	r3, r0
 800a168:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a16a:	e009      	b.n	800a180 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a16c:	f7fd fdc8 	bl	8007d00 <HAL_GetTick>
 800a170:	0002      	movs	r2, r0
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	4a6f      	ldr	r2, [pc, #444]	@ (800a334 <HAL_RCC_OscConfig+0x620>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d901      	bls.n	800a180 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e0d1      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a180:	4b6a      	ldr	r3, [pc, #424]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a184:	2202      	movs	r2, #2
 800a186:	4013      	ands	r3, r2
 800a188:	d1f0      	bne.n	800a16c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a18a:	231f      	movs	r3, #31
 800a18c:	18fb      	adds	r3, r7, r3
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d105      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a194:	4b65      	ldr	r3, [pc, #404]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a198:	4b64      	ldr	r3, [pc, #400]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a19a:	4967      	ldr	r1, [pc, #412]	@ (800a338 <HAL_RCC_OscConfig+0x624>)
 800a19c:	400a      	ands	r2, r1
 800a19e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d100      	bne.n	800a1aa <HAL_RCC_OscConfig+0x496>
 800a1a8:	e0bb      	b.n	800a322 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1aa:	4b60      	ldr	r3, [pc, #384]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	2238      	movs	r2, #56	@ 0x38
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d100      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x4a4>
 800a1b6:	e07b      	b.n	800a2b0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d156      	bne.n	800a26e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b59      	ldr	r3, [pc, #356]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a1c6:	495d      	ldr	r1, [pc, #372]	@ (800a33c <HAL_RCC_OscConfig+0x628>)
 800a1c8:	400a      	ands	r2, r1
 800a1ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1cc:	f7fd fd98 	bl	8007d00 <HAL_GetTick>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1d4:	e008      	b.n	800a1e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1d6:	f7fd fd93 	bl	8007d00 <HAL_GetTick>
 800a1da:	0002      	movs	r2, r0
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d901      	bls.n	800a1e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e09d      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1e8:	4b50      	ldr	r3, [pc, #320]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	2380      	movs	r3, #128	@ 0x80
 800a1ee:	049b      	lsls	r3, r3, #18
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	d1f0      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1f4:	4b4d      	ldr	r3, [pc, #308]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	4a51      	ldr	r2, [pc, #324]	@ (800a340 <HAL_RCC_OscConfig+0x62c>)
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	0019      	movs	r1, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1a      	ldr	r2, [r3, #32]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a220:	431a      	orrs	r2, r3
 800a222:	4b42      	ldr	r3, [pc, #264]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a224:	430a      	orrs	r2, r1
 800a226:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a228:	4b40      	ldr	r3, [pc, #256]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	4b3f      	ldr	r3, [pc, #252]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a22e:	2180      	movs	r1, #128	@ 0x80
 800a230:	0449      	lsls	r1, r1, #17
 800a232:	430a      	orrs	r2, r1
 800a234:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a236:	4b3d      	ldr	r3, [pc, #244]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	4b3c      	ldr	r3, [pc, #240]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a23c:	2180      	movs	r1, #128	@ 0x80
 800a23e:	0549      	lsls	r1, r1, #21
 800a240:	430a      	orrs	r2, r1
 800a242:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a244:	f7fd fd5c 	bl	8007d00 <HAL_GetTick>
 800a248:	0003      	movs	r3, r0
 800a24a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a24c:	e008      	b.n	800a260 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a24e:	f7fd fd57 	bl	8007d00 <HAL_GetTick>
 800a252:	0002      	movs	r2, r0
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d901      	bls.n	800a260 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e061      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a260:	4b32      	ldr	r3, [pc, #200]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	2380      	movs	r3, #128	@ 0x80
 800a266:	049b      	lsls	r3, r3, #18
 800a268:	4013      	ands	r3, r2
 800a26a:	d0f0      	beq.n	800a24e <HAL_RCC_OscConfig+0x53a>
 800a26c:	e059      	b.n	800a322 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a26e:	4b2f      	ldr	r3, [pc, #188]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b2e      	ldr	r3, [pc, #184]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a274:	4931      	ldr	r1, [pc, #196]	@ (800a33c <HAL_RCC_OscConfig+0x628>)
 800a276:	400a      	ands	r2, r1
 800a278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27a:	f7fd fd41 	bl	8007d00 <HAL_GetTick>
 800a27e:	0003      	movs	r3, r0
 800a280:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a284:	f7fd fd3c 	bl	8007d00 <HAL_GetTick>
 800a288:	0002      	movs	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e046      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a296:	4b25      	ldr	r3, [pc, #148]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	2380      	movs	r3, #128	@ 0x80
 800a29c:	049b      	lsls	r3, r3, #18
 800a29e:	4013      	ands	r3, r2
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a2a2:	4b22      	ldr	r3, [pc, #136]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	4b21      	ldr	r3, [pc, #132]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a2a8:	4926      	ldr	r1, [pc, #152]	@ (800a344 <HAL_RCC_OscConfig+0x630>)
 800a2aa:	400a      	ands	r2, r1
 800a2ac:	60da      	str	r2, [r3, #12]
 800a2ae:	e038      	b.n	800a322 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e033      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a2bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a32c <HAL_RCC_OscConfig+0x618>)
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	401a      	ands	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d126      	bne.n	800a31e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2270      	movs	r2, #112	@ 0x70
 800a2d4:	401a      	ands	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d11f      	bne.n	800a31e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	23fe      	movs	r3, #254	@ 0xfe
 800a2e2:	01db      	lsls	r3, r3, #7
 800a2e4:	401a      	ands	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d116      	bne.n	800a31e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	23f8      	movs	r3, #248	@ 0xf8
 800a2f4:	039b      	lsls	r3, r3, #14
 800a2f6:	401a      	ands	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d10e      	bne.n	800a31e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	23e0      	movs	r3, #224	@ 0xe0
 800a304:	051b      	lsls	r3, r3, #20
 800a306:	401a      	ands	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d106      	bne.n	800a31e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	0f5b      	lsrs	r3, r3, #29
 800a314:	075a      	lsls	r2, r3, #29
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d001      	beq.n	800a322 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	0018      	movs	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	b008      	add	sp, #32
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	40021000 	.word	0x40021000
 800a330:	40007000 	.word	0x40007000
 800a334:	00001388 	.word	0x00001388
 800a338:	efffffff 	.word	0xefffffff
 800a33c:	feffffff 	.word	0xfeffffff
 800a340:	11c1808c 	.word	0x11c1808c
 800a344:	eefefffc 	.word	0xeefefffc

0800a348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e0e9      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a35c:	4b76      	ldr	r3, [pc, #472]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2207      	movs	r2, #7
 800a362:	4013      	ands	r3, r2
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d91e      	bls.n	800a3a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a36a:	4b73      	ldr	r3, [pc, #460]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2207      	movs	r2, #7
 800a370:	4393      	bics	r3, r2
 800a372:	0019      	movs	r1, r3
 800a374:	4b70      	ldr	r3, [pc, #448]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a37c:	f7fd fcc0 	bl	8007d00 <HAL_GetTick>
 800a380:	0003      	movs	r3, r0
 800a382:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a384:	e009      	b.n	800a39a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a386:	f7fd fcbb 	bl	8007d00 <HAL_GetTick>
 800a38a:	0002      	movs	r2, r0
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	4a6a      	ldr	r2, [pc, #424]	@ (800a53c <HAL_RCC_ClockConfig+0x1f4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d901      	bls.n	800a39a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e0ca      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a39a:	4b67      	ldr	r3, [pc, #412]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2207      	movs	r2, #7
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d1ee      	bne.n	800a386 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	d015      	beq.n	800a3de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2204      	movs	r2, #4
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	d006      	beq.n	800a3ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a3bc:	4b60      	ldr	r3, [pc, #384]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a3be:	689a      	ldr	r2, [r3, #8]
 800a3c0:	4b5f      	ldr	r3, [pc, #380]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a3c2:	21e0      	movs	r1, #224	@ 0xe0
 800a3c4:	01c9      	lsls	r1, r1, #7
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3ca:	4b5d      	ldr	r3, [pc, #372]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	4a5d      	ldr	r2, [pc, #372]	@ (800a544 <HAL_RCC_ClockConfig+0x1fc>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	0019      	movs	r1, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	4b59      	ldr	r3, [pc, #356]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	d057      	beq.n	800a498 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d107      	bne.n	800a400 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3f0:	4b53      	ldr	r3, [pc, #332]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	2380      	movs	r3, #128	@ 0x80
 800a3f6:	029b      	lsls	r3, r3, #10
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	d12b      	bne.n	800a454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e097      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d107      	bne.n	800a418 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a408:	4b4d      	ldr	r3, [pc, #308]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	2380      	movs	r3, #128	@ 0x80
 800a40e:	049b      	lsls	r3, r3, #18
 800a410:	4013      	ands	r3, r2
 800a412:	d11f      	bne.n	800a454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e08b      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d107      	bne.n	800a430 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a420:	4b47      	ldr	r3, [pc, #284]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	2380      	movs	r3, #128	@ 0x80
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	4013      	ands	r3, r2
 800a42a:	d113      	bne.n	800a454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e07f      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b03      	cmp	r3, #3
 800a436:	d106      	bne.n	800a446 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a438:	4b41      	ldr	r3, [pc, #260]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a43a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a43c:	2202      	movs	r2, #2
 800a43e:	4013      	ands	r3, r2
 800a440:	d108      	bne.n	800a454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e074      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a446:	4b3e      	ldr	r3, [pc, #248]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a44a:	2202      	movs	r2, #2
 800a44c:	4013      	ands	r3, r2
 800a44e:	d101      	bne.n	800a454 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e06d      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a454:	4b3a      	ldr	r3, [pc, #232]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2207      	movs	r2, #7
 800a45a:	4393      	bics	r3, r2
 800a45c:	0019      	movs	r1, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	4b37      	ldr	r3, [pc, #220]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a464:	430a      	orrs	r2, r1
 800a466:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a468:	f7fd fc4a 	bl	8007d00 <HAL_GetTick>
 800a46c:	0003      	movs	r3, r0
 800a46e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a470:	e009      	b.n	800a486 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a472:	f7fd fc45 	bl	8007d00 <HAL_GetTick>
 800a476:	0002      	movs	r2, r0
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	4a2f      	ldr	r2, [pc, #188]	@ (800a53c <HAL_RCC_ClockConfig+0x1f4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d901      	bls.n	800a486 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e054      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a486:	4b2e      	ldr	r3, [pc, #184]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2238      	movs	r2, #56	@ 0x38
 800a48c:	401a      	ands	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	429a      	cmp	r2, r3
 800a496:	d1ec      	bne.n	800a472 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a498:	4b27      	ldr	r3, [pc, #156]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2207      	movs	r2, #7
 800a49e:	4013      	ands	r3, r2
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d21e      	bcs.n	800a4e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4a6:	4b24      	ldr	r3, [pc, #144]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2207      	movs	r2, #7
 800a4ac:	4393      	bics	r3, r2
 800a4ae:	0019      	movs	r1, r3
 800a4b0:	4b21      	ldr	r3, [pc, #132]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a4b8:	f7fd fc22 	bl	8007d00 <HAL_GetTick>
 800a4bc:	0003      	movs	r3, r0
 800a4be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a4c0:	e009      	b.n	800a4d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4c2:	f7fd fc1d 	bl	8007d00 <HAL_GetTick>
 800a4c6:	0002      	movs	r2, r0
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a53c <HAL_RCC_ClockConfig+0x1f4>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e02c      	b.n	800a530 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a4d6:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <HAL_RCC_ClockConfig+0x1f0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2207      	movs	r2, #7
 800a4dc:	4013      	ands	r3, r2
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d1ee      	bne.n	800a4c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	d009      	beq.n	800a502 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a4ee:	4b14      	ldr	r3, [pc, #80]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	4a15      	ldr	r2, [pc, #84]	@ (800a548 <HAL_RCC_ClockConfig+0x200>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	0019      	movs	r1, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	4b10      	ldr	r3, [pc, #64]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a4fe:	430a      	orrs	r2, r1
 800a500:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a502:	f000 f829 	bl	800a558 <HAL_RCC_GetSysClockFreq>
 800a506:	0001      	movs	r1, r0
 800a508:	4b0d      	ldr	r3, [pc, #52]	@ (800a540 <HAL_RCC_ClockConfig+0x1f8>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	0a1b      	lsrs	r3, r3, #8
 800a50e:	220f      	movs	r2, #15
 800a510:	401a      	ands	r2, r3
 800a512:	4b0e      	ldr	r3, [pc, #56]	@ (800a54c <HAL_RCC_ClockConfig+0x204>)
 800a514:	0092      	lsls	r2, r2, #2
 800a516:	58d3      	ldr	r3, [r2, r3]
 800a518:	221f      	movs	r2, #31
 800a51a:	4013      	ands	r3, r2
 800a51c:	000a      	movs	r2, r1
 800a51e:	40da      	lsrs	r2, r3
 800a520:	4b0b      	ldr	r3, [pc, #44]	@ (800a550 <HAL_RCC_ClockConfig+0x208>)
 800a522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a524:	4b0b      	ldr	r3, [pc, #44]	@ (800a554 <HAL_RCC_ClockConfig+0x20c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	0018      	movs	r0, r3
 800a52a:	f7fc fe57 	bl	80071dc <HAL_InitTick>
 800a52e:	0003      	movs	r3, r0
}
 800a530:	0018      	movs	r0, r3
 800a532:	46bd      	mov	sp, r7
 800a534:	b004      	add	sp, #16
 800a536:	bd80      	pop	{r7, pc}
 800a538:	40022000 	.word	0x40022000
 800a53c:	00001388 	.word	0x00001388
 800a540:	40021000 	.word	0x40021000
 800a544:	fffff0ff 	.word	0xfffff0ff
 800a548:	ffff8fff 	.word	0xffff8fff
 800a54c:	08017260 	.word	0x08017260
 800a550:	20000068 	.word	0x20000068
 800a554:	20000074 	.word	0x20000074

0800a558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a55e:	4b3c      	ldr	r3, [pc, #240]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	2238      	movs	r2, #56	@ 0x38
 800a564:	4013      	ands	r3, r2
 800a566:	d10f      	bne.n	800a588 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a568:	4b39      	ldr	r3, [pc, #228]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	0adb      	lsrs	r3, r3, #11
 800a56e:	2207      	movs	r2, #7
 800a570:	4013      	ands	r3, r2
 800a572:	2201      	movs	r2, #1
 800a574:	409a      	lsls	r2, r3
 800a576:	0013      	movs	r3, r2
 800a578:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	4835      	ldr	r0, [pc, #212]	@ (800a654 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a57e:	f7f5 fddf 	bl	8000140 <__udivsi3>
 800a582:	0003      	movs	r3, r0
 800a584:	613b      	str	r3, [r7, #16]
 800a586:	e05d      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a588:	4b31      	ldr	r3, [pc, #196]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2238      	movs	r2, #56	@ 0x38
 800a58e:	4013      	ands	r3, r2
 800a590:	2b08      	cmp	r3, #8
 800a592:	d102      	bne.n	800a59a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a594:	4b30      	ldr	r3, [pc, #192]	@ (800a658 <HAL_RCC_GetSysClockFreq+0x100>)
 800a596:	613b      	str	r3, [r7, #16]
 800a598:	e054      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a59a:	4b2d      	ldr	r3, [pc, #180]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	2238      	movs	r2, #56	@ 0x38
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d138      	bne.n	800a618 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a5a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	2203      	movs	r2, #3
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a5b0:	4b27      	ldr	r3, [pc, #156]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	091b      	lsrs	r3, r3, #4
 800a5b6:	2207      	movs	r2, #7
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d10d      	bne.n	800a5e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a5c4:	68b9      	ldr	r1, [r7, #8]
 800a5c6:	4824      	ldr	r0, [pc, #144]	@ (800a658 <HAL_RCC_GetSysClockFreq+0x100>)
 800a5c8:	f7f5 fdba 	bl	8000140 <__udivsi3>
 800a5cc:	0003      	movs	r3, r0
 800a5ce:	0019      	movs	r1, r3
 800a5d0:	4b1f      	ldr	r3, [pc, #124]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	0a1b      	lsrs	r3, r3, #8
 800a5d6:	227f      	movs	r2, #127	@ 0x7f
 800a5d8:	4013      	ands	r3, r2
 800a5da:	434b      	muls	r3, r1
 800a5dc:	617b      	str	r3, [r7, #20]
        break;
 800a5de:	e00d      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a5e0:	68b9      	ldr	r1, [r7, #8]
 800a5e2:	481c      	ldr	r0, [pc, #112]	@ (800a654 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a5e4:	f7f5 fdac 	bl	8000140 <__udivsi3>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	0019      	movs	r1, r3
 800a5ec:	4b18      	ldr	r3, [pc, #96]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	0a1b      	lsrs	r3, r3, #8
 800a5f2:	227f      	movs	r2, #127	@ 0x7f
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	434b      	muls	r3, r1
 800a5f8:	617b      	str	r3, [r7, #20]
        break;
 800a5fa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a5fc:	4b14      	ldr	r3, [pc, #80]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	0f5b      	lsrs	r3, r3, #29
 800a602:	2207      	movs	r2, #7
 800a604:	4013      	ands	r3, r2
 800a606:	3301      	adds	r3, #1
 800a608:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	6978      	ldr	r0, [r7, #20]
 800a60e:	f7f5 fd97 	bl	8000140 <__udivsi3>
 800a612:	0003      	movs	r3, r0
 800a614:	613b      	str	r3, [r7, #16]
 800a616:	e015      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a618:	4b0d      	ldr	r3, [pc, #52]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2238      	movs	r2, #56	@ 0x38
 800a61e:	4013      	ands	r3, r2
 800a620:	2b20      	cmp	r3, #32
 800a622:	d103      	bne.n	800a62c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a624:	2380      	movs	r3, #128	@ 0x80
 800a626:	021b      	lsls	r3, r3, #8
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	e00b      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a62c:	4b08      	ldr	r3, [pc, #32]	@ (800a650 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	2238      	movs	r2, #56	@ 0x38
 800a632:	4013      	ands	r3, r2
 800a634:	2b18      	cmp	r3, #24
 800a636:	d103      	bne.n	800a640 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a638:	23fa      	movs	r3, #250	@ 0xfa
 800a63a:	01db      	lsls	r3, r3, #7
 800a63c:	613b      	str	r3, [r7, #16]
 800a63e:	e001      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a644:	693b      	ldr	r3, [r7, #16]
}
 800a646:	0018      	movs	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	b006      	add	sp, #24
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	46c0      	nop			@ (mov r8, r8)
 800a650:	40021000 	.word	0x40021000
 800a654:	00f42400 	.word	0x00f42400
 800a658:	00b71b00 	.word	0x00b71b00

0800a65c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a660:	4b02      	ldr	r3, [pc, #8]	@ (800a66c <HAL_RCC_GetHCLKFreq+0x10>)
 800a662:	681b      	ldr	r3, [r3, #0]
}
 800a664:	0018      	movs	r0, r3
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	46c0      	nop			@ (mov r8, r8)
 800a66c:	20000068 	.word	0x20000068

0800a670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a670:	b5b0      	push	{r4, r5, r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a674:	f7ff fff2 	bl	800a65c <HAL_RCC_GetHCLKFreq>
 800a678:	0004      	movs	r4, r0
 800a67a:	f7ff fb3f 	bl	8009cfc <LL_RCC_GetAPB1Prescaler>
 800a67e:	0003      	movs	r3, r0
 800a680:	0b1a      	lsrs	r2, r3, #12
 800a682:	4b05      	ldr	r3, [pc, #20]	@ (800a698 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a684:	0092      	lsls	r2, r2, #2
 800a686:	58d3      	ldr	r3, [r2, r3]
 800a688:	221f      	movs	r2, #31
 800a68a:	4013      	ands	r3, r2
 800a68c:	40dc      	lsrs	r4, r3
 800a68e:	0023      	movs	r3, r4
}
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	bdb0      	pop	{r4, r5, r7, pc}
 800a696:	46c0      	nop			@ (mov r8, r8)
 800a698:	080172a0 	.word	0x080172a0

0800a69c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2207      	movs	r2, #7
 800a6aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a6e8 <HAL_RCC_GetClockConfig+0x4c>)
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2207      	movs	r2, #7
 800a6b2:	401a      	ands	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <HAL_RCC_GetClockConfig+0x4c>)
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	23f0      	movs	r3, #240	@ 0xf0
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	401a      	ands	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800a6c6:	4b08      	ldr	r3, [pc, #32]	@ (800a6e8 <HAL_RCC_GetClockConfig+0x4c>)
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	23e0      	movs	r3, #224	@ 0xe0
 800a6cc:	01db      	lsls	r3, r3, #7
 800a6ce:	401a      	ands	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6d4:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <HAL_RCC_GetClockConfig+0x50>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2207      	movs	r2, #7
 800a6da:	401a      	ands	r2, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	601a      	str	r2, [r3, #0]
}
 800a6e0:	46c0      	nop			@ (mov r8, r8)
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b002      	add	sp, #8
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	40021000 	.word	0x40021000
 800a6ec:	40022000 	.word	0x40022000

0800a6f0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800a6f4:	4b04      	ldr	r3, [pc, #16]	@ (800a708 <HAL_RCC_EnableCSS+0x18>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	4b03      	ldr	r3, [pc, #12]	@ (800a708 <HAL_RCC_EnableCSS+0x18>)
 800a6fa:	2180      	movs	r1, #128	@ 0x80
 800a6fc:	0309      	lsls	r1, r1, #12
 800a6fe:	430a      	orrs	r2, r1
 800a700:	601a      	str	r2, [r3, #0]
}
 800a702:	46c0      	nop			@ (mov r8, r8)
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	40021000 	.word	0x40021000

0800a70c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 800a712:	4b0d      	ldr	r3, [pc, #52]	@ (800a748 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800a718:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	22c0      	movs	r2, #192	@ 0xc0
 800a71e:	0092      	lsls	r2, r2, #2
 800a720:	400a      	ands	r2, r1
 800a722:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	2380      	movs	r3, #128	@ 0x80
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4013      	ands	r3, r2
 800a72c:	d001      	beq.n	800a732 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a72e:	f000 f80d 	bl	800a74c <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	2380      	movs	r3, #128	@ 0x80
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4013      	ands	r3, r2
 800a73a:	d001      	beq.n	800a740 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800a73c:	f000 f80b 	bl	800a756 <HAL_RCC_LSECSSCallback>
  }
}
 800a740:	46c0      	nop			@ (mov r8, r8)
 800a742:	46bd      	mov	sp, r7
 800a744:	b002      	add	sp, #8
 800a746:	bd80      	pop	{r7, pc}
 800a748:	40021000 	.word	0x40021000

0800a74c <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800a750:	46c0      	nop			@ (mov r8, r8)
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800a75a:	46c0      	nop			@ (mov r8, r8)
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a768:	2313      	movs	r3, #19
 800a76a:	18fb      	adds	r3, r7, r3
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a770:	2312      	movs	r3, #18
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	2380      	movs	r3, #128	@ 0x80
 800a77e:	029b      	lsls	r3, r3, #10
 800a780:	4013      	ands	r3, r2
 800a782:	d100      	bne.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a784:	e0a3      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a786:	2011      	movs	r0, #17
 800a788:	183b      	adds	r3, r7, r0
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a78e:	4bc3      	ldr	r3, [pc, #780]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a790:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a792:	2380      	movs	r3, #128	@ 0x80
 800a794:	055b      	lsls	r3, r3, #21
 800a796:	4013      	ands	r3, r2
 800a798:	d110      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a79a:	4bc0      	ldr	r3, [pc, #768]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a79c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a79e:	4bbf      	ldr	r3, [pc, #764]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7a0:	2180      	movs	r1, #128	@ 0x80
 800a7a2:	0549      	lsls	r1, r1, #21
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a7a8:	4bbc      	ldr	r3, [pc, #752]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7ac:	2380      	movs	r3, #128	@ 0x80
 800a7ae:	055b      	lsls	r3, r3, #21
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7b6:	183b      	adds	r3, r7, r0
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7bc:	4bb8      	ldr	r3, [pc, #736]	@ (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4bb7      	ldr	r3, [pc, #732]	@ (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a7c2:	2180      	movs	r1, #128	@ 0x80
 800a7c4:	0049      	lsls	r1, r1, #1
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7ca:	f7fd fa99 	bl	8007d00 <HAL_GetTick>
 800a7ce:	0003      	movs	r3, r0
 800a7d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7d2:	e00b      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7d4:	f7fd fa94 	bl	8007d00 <HAL_GetTick>
 800a7d8:	0002      	movs	r2, r0
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d904      	bls.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a7e2:	2313      	movs	r3, #19
 800a7e4:	18fb      	adds	r3, r7, r3
 800a7e6:	2203      	movs	r2, #3
 800a7e8:	701a      	strb	r2, [r3, #0]
        break;
 800a7ea:	e005      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7ec:	4bac      	ldr	r3, [pc, #688]	@ (800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	2380      	movs	r3, #128	@ 0x80
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	d0ed      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a7f8:	2313      	movs	r3, #19
 800a7fa:	18fb      	adds	r3, r7, r3
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d154      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a802:	4ba6      	ldr	r3, [pc, #664]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a804:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a806:	23c0      	movs	r3, #192	@ 0xc0
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4013      	ands	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d019      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d014      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a81e:	4b9f      	ldr	r3, [pc, #636]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a822:	4aa0      	ldr	r2, [pc, #640]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a824:	4013      	ands	r3, r2
 800a826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a828:	4b9c      	ldr	r3, [pc, #624]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a82a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a82c:	4b9b      	ldr	r3, [pc, #620]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a82e:	2180      	movs	r1, #128	@ 0x80
 800a830:	0249      	lsls	r1, r1, #9
 800a832:	430a      	orrs	r2, r1
 800a834:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a836:	4b99      	ldr	r3, [pc, #612]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a838:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a83a:	4b98      	ldr	r3, [pc, #608]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a83c:	499a      	ldr	r1, [pc, #616]	@ (800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800a83e:	400a      	ands	r2, r1
 800a840:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a842:	4b96      	ldr	r3, [pc, #600]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2201      	movs	r2, #1
 800a84c:	4013      	ands	r3, r2
 800a84e:	d016      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a850:	f7fd fa56 	bl	8007d00 <HAL_GetTick>
 800a854:	0003      	movs	r3, r0
 800a856:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a858:	e00c      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a85a:	f7fd fa51 	bl	8007d00 <HAL_GetTick>
 800a85e:	0002      	movs	r2, r0
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	4a91      	ldr	r2, [pc, #580]	@ (800aaac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d904      	bls.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a86a:	2313      	movs	r3, #19
 800a86c:	18fb      	adds	r3, r7, r3
 800a86e:	2203      	movs	r2, #3
 800a870:	701a      	strb	r2, [r3, #0]
            break;
 800a872:	e004      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a874:	4b89      	ldr	r3, [pc, #548]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a878:	2202      	movs	r2, #2
 800a87a:	4013      	ands	r3, r2
 800a87c:	d0ed      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a87e:	2313      	movs	r3, #19
 800a880:	18fb      	adds	r3, r7, r3
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a888:	4b84      	ldr	r3, [pc, #528]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a88a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a88c:	4a85      	ldr	r2, [pc, #532]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a88e:	4013      	ands	r3, r2
 800a890:	0019      	movs	r1, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a896:	4b81      	ldr	r3, [pc, #516]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a898:	430a      	orrs	r2, r1
 800a89a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a89c:	e00c      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a89e:	2312      	movs	r3, #18
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	2213      	movs	r2, #19
 800a8a4:	18ba      	adds	r2, r7, r2
 800a8a6:	7812      	ldrb	r2, [r2, #0]
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	e005      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ac:	2312      	movs	r3, #18
 800a8ae:	18fb      	adds	r3, r7, r3
 800a8b0:	2213      	movs	r2, #19
 800a8b2:	18ba      	adds	r2, r7, r2
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8b8:	2311      	movs	r3, #17
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d105      	bne.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8c2:	4b76      	ldr	r3, [pc, #472]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8c6:	4b75      	ldr	r3, [pc, #468]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8c8:	4979      	ldr	r1, [pc, #484]	@ (800aab0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800a8ca:	400a      	ands	r2, r1
 800a8cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	d009      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a8d8:	4b70      	ldr	r3, [pc, #448]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8dc:	2203      	movs	r2, #3
 800a8de:	4393      	bics	r3, r2
 800a8e0:	0019      	movs	r1, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	4b6d      	ldr	r3, [pc, #436]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	d009      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8f6:	4b69      	ldr	r3, [pc, #420]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fa:	220c      	movs	r2, #12
 800a8fc:	4393      	bics	r3, r2
 800a8fe:	0019      	movs	r1, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	4b65      	ldr	r3, [pc, #404]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a906:	430a      	orrs	r2, r1
 800a908:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2210      	movs	r2, #16
 800a910:	4013      	ands	r3, r2
 800a912:	d009      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a914:	4b61      	ldr	r3, [pc, #388]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a918:	4a66      	ldr	r2, [pc, #408]	@ (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800a91a:	4013      	ands	r3, r2
 800a91c:	0019      	movs	r1, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	4b5e      	ldr	r3, [pc, #376]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a924:	430a      	orrs	r2, r1
 800a926:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	2380      	movs	r3, #128	@ 0x80
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	4013      	ands	r3, r2
 800a932:	d009      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a934:	4b59      	ldr	r3, [pc, #356]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a938:	4a5f      	ldr	r2, [pc, #380]	@ (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a93a:	4013      	ands	r3, r2
 800a93c:	0019      	movs	r1, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	699a      	ldr	r2, [r3, #24]
 800a942:	4b56      	ldr	r3, [pc, #344]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a944:	430a      	orrs	r2, r1
 800a946:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	2380      	movs	r3, #128	@ 0x80
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	4013      	ands	r3, r2
 800a952:	d009      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a954:	4b51      	ldr	r3, [pc, #324]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a958:	4a58      	ldr	r2, [pc, #352]	@ (800aabc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	0019      	movs	r1, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	69da      	ldr	r2, [r3, #28]
 800a962:	4b4e      	ldr	r3, [pc, #312]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a964:	430a      	orrs	r2, r1
 800a966:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2220      	movs	r2, #32
 800a96e:	4013      	ands	r3, r2
 800a970:	d009      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a972:	4b4a      	ldr	r3, [pc, #296]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a976:	4a52      	ldr	r2, [pc, #328]	@ (800aac0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800a978:	4013      	ands	r3, r2
 800a97a:	0019      	movs	r1, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691a      	ldr	r2, [r3, #16]
 800a980:	4b46      	ldr	r3, [pc, #280]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a982:	430a      	orrs	r2, r1
 800a984:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	2380      	movs	r3, #128	@ 0x80
 800a98c:	01db      	lsls	r3, r3, #7
 800a98e:	4013      	ands	r3, r2
 800a990:	d015      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a992:	4b42      	ldr	r3, [pc, #264]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	0899      	lsrs	r1, r3, #2
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1a      	ldr	r2, [r3, #32]
 800a99e:	4b3f      	ldr	r3, [pc, #252]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1a      	ldr	r2, [r3, #32]
 800a9a8:	2380      	movs	r3, #128	@ 0x80
 800a9aa:	05db      	lsls	r3, r3, #23
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d106      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a9b0:	4b3a      	ldr	r3, [pc, #232]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9b2:	68da      	ldr	r2, [r3, #12]
 800a9b4:	4b39      	ldr	r3, [pc, #228]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9b6:	2180      	movs	r1, #128	@ 0x80
 800a9b8:	0249      	lsls	r1, r1, #9
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	2380      	movs	r3, #128	@ 0x80
 800a9c4:	031b      	lsls	r3, r3, #12
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	d009      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9ca:	4b34      	ldr	r3, [pc, #208]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ce:	2240      	movs	r2, #64	@ 0x40
 800a9d0:	4393      	bics	r3, r2
 800a9d2:	0019      	movs	r1, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9d8:	4b30      	ldr	r3, [pc, #192]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	2380      	movs	r3, #128	@ 0x80
 800a9e4:	039b      	lsls	r3, r3, #14
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	d016      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a9ea:	4b2c      	ldr	r3, [pc, #176]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ee:	4a35      	ldr	r2, [pc, #212]	@ (800aac4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	0019      	movs	r1, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9f8:	4b28      	ldr	r3, [pc, #160]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa02:	2380      	movs	r3, #128	@ 0x80
 800aa04:	03db      	lsls	r3, r3, #15
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d106      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800aa0a:	4b24      	ldr	r3, [pc, #144]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	4b23      	ldr	r3, [pc, #140]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa10:	2180      	movs	r1, #128	@ 0x80
 800aa12:	0449      	lsls	r1, r1, #17
 800aa14:	430a      	orrs	r2, r1
 800aa16:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	2380      	movs	r3, #128	@ 0x80
 800aa1e:	03db      	lsls	r3, r3, #15
 800aa20:	4013      	ands	r3, r2
 800aa22:	d016      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800aa24:	4b1d      	ldr	r3, [pc, #116]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa28:	4a27      	ldr	r2, [pc, #156]	@ (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	0019      	movs	r1, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa32:	4b1a      	ldr	r3, [pc, #104]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa34:	430a      	orrs	r2, r1
 800aa36:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa3c:	2380      	movs	r3, #128	@ 0x80
 800aa3e:	045b      	lsls	r3, r3, #17
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d106      	bne.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800aa44:	4b15      	ldr	r3, [pc, #84]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	4b14      	ldr	r3, [pc, #80]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa4a:	2180      	movs	r1, #128	@ 0x80
 800aa4c:	0449      	lsls	r1, r1, #17
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	2380      	movs	r3, #128	@ 0x80
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	d016      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800aa5e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa62:	4a1a      	ldr	r2, [pc, #104]	@ (800aacc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	0019      	movs	r1, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	695a      	ldr	r2, [r3, #20]
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	695a      	ldr	r2, [r3, #20]
 800aa76:	2380      	movs	r3, #128	@ 0x80
 800aa78:	01db      	lsls	r3, r3, #7
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d106      	bne.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aa7e:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	4b06      	ldr	r3, [pc, #24]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800aa84:	2180      	movs	r1, #128	@ 0x80
 800aa86:	0249      	lsls	r1, r1, #9
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800aa8c:	2312      	movs	r3, #18
 800aa8e:	18fb      	adds	r3, r7, r3
 800aa90:	781b      	ldrb	r3, [r3, #0]
}
 800aa92:	0018      	movs	r0, r3
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b006      	add	sp, #24
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	46c0      	nop			@ (mov r8, r8)
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	40007000 	.word	0x40007000
 800aaa4:	fffffcff 	.word	0xfffffcff
 800aaa8:	fffeffff 	.word	0xfffeffff
 800aaac:	00001388 	.word	0x00001388
 800aab0:	efffffff 	.word	0xefffffff
 800aab4:	fffff3ff 	.word	0xfffff3ff
 800aab8:	fff3ffff 	.word	0xfff3ffff
 800aabc:	ffcfffff 	.word	0xffcfffff
 800aac0:	ffffcfff 	.word	0xffffcfff
 800aac4:	ffbfffff 	.word	0xffbfffff
 800aac8:	feffffff 	.word	0xfeffffff
 800aacc:	ffff3fff 	.word	0xffff3fff

0800aad0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aad0:	b5b0      	push	{r4, r5, r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aad8:	230f      	movs	r3, #15
 800aada:	18fb      	adds	r3, r7, r3
 800aadc:	2201      	movs	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d100      	bne.n	800aae8 <HAL_RTC_Init+0x18>
 800aae6:	e08c      	b.n	800ac02 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2229      	movs	r2, #41	@ 0x29
 800aaec:	5c9b      	ldrb	r3, [r3, r2]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10b      	bne.n	800ab0c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2228      	movs	r2, #40	@ 0x28
 800aaf8:	2100      	movs	r1, #0
 800aafa:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2288      	movs	r2, #136	@ 0x88
 800ab00:	0212      	lsls	r2, r2, #8
 800ab02:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	0018      	movs	r0, r3
 800ab08:	f7fc f9a6 	bl	8006e58 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2229      	movs	r2, #41	@ 0x29
 800ab10:	2102      	movs	r1, #2
 800ab12:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	2210      	movs	r2, #16
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d062      	beq.n	800abe8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	22ca      	movs	r2, #202	@ 0xca
 800ab28:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2253      	movs	r2, #83	@ 0x53
 800ab30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ab32:	250f      	movs	r5, #15
 800ab34:	197c      	adds	r4, r7, r5
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f000 f891 	bl	800ac60 <RTC_EnterInitMode>
 800ab3e:	0003      	movs	r3, r0
 800ab40:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800ab42:	0028      	movs	r0, r5
 800ab44:	183b      	adds	r3, r7, r0
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d12c      	bne.n	800aba6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	492e      	ldr	r1, [pc, #184]	@ (800ac10 <HAL_RTC_Init+0x140>)
 800ab58:	400a      	ands	r2, r1
 800ab5a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6999      	ldr	r1, [r3, #24]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	6912      	ldr	r2, [r2, #16]
 800ab82:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6919      	ldr	r1, [r3, #16]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	041a      	lsls	r2, r3, #16
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ab98:	183c      	adds	r4, r7, r0
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	f000 f8a1 	bl	800ace4 <RTC_ExitInitMode>
 800aba2:	0003      	movs	r3, r0
 800aba4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800aba6:	230f      	movs	r3, #15
 800aba8:	18fb      	adds	r3, r7, r3
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d116      	bne.n	800abde <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	00d2      	lsls	r2, r2, #3
 800abbc:	08d2      	lsrs	r2, r2, #3
 800abbe:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6999      	ldr	r1, [r3, #24]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	22ff      	movs	r2, #255	@ 0xff
 800abe4:	625a      	str	r2, [r3, #36]	@ 0x24
 800abe6:	e003      	b.n	800abf0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800abe8:	230f      	movs	r3, #15
 800abea:	18fb      	adds	r3, r7, r3
 800abec:	2200      	movs	r2, #0
 800abee:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800abf0:	230f      	movs	r3, #15
 800abf2:	18fb      	adds	r3, r7, r3
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d103      	bne.n	800ac02 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2229      	movs	r2, #41	@ 0x29
 800abfe:	2101      	movs	r1, #1
 800ac00:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800ac02:	230f      	movs	r3, #15
 800ac04:	18fb      	adds	r3, r7, r3
 800ac06:	781b      	ldrb	r3, [r3, #0]
}
 800ac08:	0018      	movs	r0, r3
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	b004      	add	sp, #16
 800ac0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ac10:	fb8fffbf 	.word	0xfb8fffbf

0800ac14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a0e      	ldr	r2, [pc, #56]	@ (800ac5c <HAL_RTC_WaitForSynchro+0x48>)
 800ac22:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ac24:	f7fd f86c 	bl	8007d00 <HAL_GetTick>
 800ac28:	0003      	movs	r3, r0
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac2c:	e00a      	b.n	800ac44 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac2e:	f7fd f867 	bl	8007d00 <HAL_GetTick>
 800ac32:	0002      	movs	r2, r0
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	23fa      	movs	r3, #250	@ 0xfa
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d901      	bls.n	800ac44 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e006      	b.n	800ac52 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	d0ee      	beq.n	800ac2e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	0018      	movs	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	b004      	add	sp, #16
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	46c0      	nop			@ (mov r8, r8)
 800ac5c:	0001005f 	.word	0x0001005f

0800ac60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800ac68:	230f      	movs	r3, #15
 800ac6a:	18fb      	adds	r3, r7, r3
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	2240      	movs	r2, #64	@ 0x40
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d12c      	bne.n	800acd6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2180      	movs	r1, #128	@ 0x80
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ac8c:	f7fd f838 	bl	8007d00 <HAL_GetTick>
 800ac90:	0003      	movs	r3, r0
 800ac92:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ac94:	e014      	b.n	800acc0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac96:	f7fd f833 	bl	8007d00 <HAL_GetTick>
 800ac9a:	0002      	movs	r2, r0
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	200f      	movs	r0, #15
 800aca2:	183b      	adds	r3, r7, r0
 800aca4:	1839      	adds	r1, r7, r0
 800aca6:	7809      	ldrb	r1, [r1, #0]
 800aca8:	7019      	strb	r1, [r3, #0]
 800acaa:	23fa      	movs	r3, #250	@ 0xfa
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	429a      	cmp	r2, r3
 800acb0:	d906      	bls.n	800acc0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800acb2:	183b      	adds	r3, r7, r0
 800acb4:	2203      	movs	r2, #3
 800acb6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2229      	movs	r2, #41	@ 0x29
 800acbc:	2103      	movs	r1, #3
 800acbe:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	2240      	movs	r2, #64	@ 0x40
 800acc8:	4013      	ands	r3, r2
 800acca:	d104      	bne.n	800acd6 <RTC_EnterInitMode+0x76>
 800accc:	230f      	movs	r3, #15
 800acce:	18fb      	adds	r3, r7, r3
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d1df      	bne.n	800ac96 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800acd6:	230f      	movs	r3, #15
 800acd8:	18fb      	adds	r3, r7, r3
 800acda:	781b      	ldrb	r3, [r3, #0]
}
 800acdc:	0018      	movs	r0, r3
 800acde:	46bd      	mov	sp, r7
 800ace0:	b004      	add	sp, #16
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acec:	240f      	movs	r4, #15
 800acee:	193b      	adds	r3, r7, r4
 800acf0:	2200      	movs	r2, #0
 800acf2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800acf4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800acf6:	68da      	ldr	r2, [r3, #12]
 800acf8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800acfa:	2180      	movs	r1, #128	@ 0x80
 800acfc:	438a      	bics	r2, r1
 800acfe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ad00:	4b19      	ldr	r3, [pc, #100]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	2220      	movs	r2, #32
 800ad06:	4013      	ands	r3, r2
 800ad08:	d10d      	bne.n	800ad26 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f7ff ff81 	bl	800ac14 <HAL_RTC_WaitForSynchro>
 800ad12:	1e03      	subs	r3, r0, #0
 800ad14:	d021      	beq.n	800ad5a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2229      	movs	r2, #41	@ 0x29
 800ad1a:	2103      	movs	r1, #3
 800ad1c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad1e:	193b      	adds	r3, r7, r4
 800ad20:	2203      	movs	r2, #3
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	e019      	b.n	800ad5a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad26:	4b10      	ldr	r3, [pc, #64]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800ad28:	699a      	ldr	r2, [r3, #24]
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800ad2c:	2120      	movs	r1, #32
 800ad2e:	438a      	bics	r2, r1
 800ad30:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	0018      	movs	r0, r3
 800ad36:	f7ff ff6d 	bl	800ac14 <HAL_RTC_WaitForSynchro>
 800ad3a:	1e03      	subs	r3, r0, #0
 800ad3c:	d007      	beq.n	800ad4e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2229      	movs	r2, #41	@ 0x29
 800ad42:	2103      	movs	r1, #3
 800ad44:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad46:	230f      	movs	r3, #15
 800ad48:	18fb      	adds	r3, r7, r3
 800ad4a:	2203      	movs	r2, #3
 800ad4c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad4e:	4b06      	ldr	r3, [pc, #24]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800ad50:	699a      	ldr	r2, [r3, #24]
 800ad52:	4b05      	ldr	r3, [pc, #20]	@ (800ad68 <RTC_ExitInitMode+0x84>)
 800ad54:	2120      	movs	r1, #32
 800ad56:	430a      	orrs	r2, r1
 800ad58:	619a      	str	r2, [r3, #24]
  }

  return status;
 800ad5a:	230f      	movs	r3, #15
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	781b      	ldrb	r3, [r3, #0]
}
 800ad60:	0018      	movs	r0, r3
 800ad62:	46bd      	mov	sp, r7
 800ad64:	b005      	add	sp, #20
 800ad66:	bd90      	pop	{r4, r7, pc}
 800ad68:	40002800 	.word	0x40002800

0800ad6c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	001a      	movs	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	18d3      	adds	r3, r2, r3
 800ad84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	33ff      	adds	r3, #255	@ 0xff
 800ad8c:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	18d3      	adds	r3, r2, r3
 800ad96:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
}
 800ad9e:	46c0      	nop			@ (mov r8, r8)
 800ada0:	46bd      	mov	sp, r7
 800ada2:	b006      	add	sp, #24
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	001a      	movs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	18d3      	adds	r3, r2, r3
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	33ff      	adds	r3, #255	@ 0xff
 800adc4:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	18d3      	adds	r3, r2, r3
 800adce:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	681b      	ldr	r3, [r3, #0]
}
 800add4:	0018      	movs	r0, r3
 800add6:	46bd      	mov	sp, r7
 800add8:	b004      	add	sp, #16
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e0a8      	b.n	800af40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	2382      	movs	r3, #130	@ 0x82
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d009      	beq.n	800ae16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	61da      	str	r2, [r3, #28]
 800ae08:	e005      	b.n	800ae16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	225d      	movs	r2, #93	@ 0x5d
 800ae20:	5c9b      	ldrb	r3, [r3, r2]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d107      	bne.n	800ae38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	225c      	movs	r2, #92	@ 0x5c
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	0018      	movs	r0, r3
 800ae34:	f7fc f8ca 	bl	8006fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	225d      	movs	r2, #93	@ 0x5d
 800ae3c:	2102      	movs	r1, #2
 800ae3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2140      	movs	r1, #64	@ 0x40
 800ae4c:	438a      	bics	r2, r1
 800ae4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	23e0      	movs	r3, #224	@ 0xe0
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d902      	bls.n	800ae62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	e002      	b.n	800ae68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae62:	2380      	movs	r3, #128	@ 0x80
 800ae64:	015b      	lsls	r3, r3, #5
 800ae66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	23f0      	movs	r3, #240	@ 0xf0
 800ae6e:	011b      	lsls	r3, r3, #4
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d008      	beq.n	800ae86 <HAL_SPI_Init+0xaa>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	23e0      	movs	r3, #224	@ 0xe0
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d002      	beq.n	800ae86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	2382      	movs	r3, #130	@ 0x82
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	401a      	ands	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6899      	ldr	r1, [r3, #8]
 800ae94:	2384      	movs	r3, #132	@ 0x84
 800ae96:	021b      	lsls	r3, r3, #8
 800ae98:	400b      	ands	r3, r1
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	2102      	movs	r1, #2
 800aea2:	400b      	ands	r3, r1
 800aea4:	431a      	orrs	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	2101      	movs	r1, #1
 800aeac:	400b      	ands	r3, r1
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6999      	ldr	r1, [r3, #24]
 800aeb4:	2380      	movs	r3, #128	@ 0x80
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	400b      	ands	r3, r1
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	69db      	ldr	r3, [r3, #28]
 800aec0:	2138      	movs	r1, #56	@ 0x38
 800aec2:	400b      	ands	r3, r1
 800aec4:	431a      	orrs	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	2180      	movs	r1, #128	@ 0x80
 800aecc:	400b      	ands	r3, r1
 800aece:	431a      	orrs	r2, r3
 800aed0:	0011      	movs	r1, r2
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aed6:	2380      	movs	r3, #128	@ 0x80
 800aed8:	019b      	lsls	r3, r3, #6
 800aeda:	401a      	ands	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	0c1b      	lsrs	r3, r3, #16
 800aeea:	2204      	movs	r2, #4
 800aeec:	401a      	ands	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef2:	2110      	movs	r1, #16
 800aef4:	400b      	ands	r3, r1
 800aef6:	431a      	orrs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aefc:	2108      	movs	r1, #8
 800aefe:	400b      	ands	r3, r1
 800af00:	431a      	orrs	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68d9      	ldr	r1, [r3, #12]
 800af06:	23f0      	movs	r3, #240	@ 0xf0
 800af08:	011b      	lsls	r3, r3, #4
 800af0a:	400b      	ands	r3, r1
 800af0c:	431a      	orrs	r2, r3
 800af0e:	0011      	movs	r1, r2
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	2380      	movs	r3, #128	@ 0x80
 800af14:	015b      	lsls	r3, r3, #5
 800af16:	401a      	ands	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	69da      	ldr	r2, [r3, #28]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4907      	ldr	r1, [pc, #28]	@ (800af48 <HAL_SPI_Init+0x16c>)
 800af2c:	400a      	ands	r2, r1
 800af2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	225d      	movs	r2, #93	@ 0x5d
 800af3a:	2101      	movs	r1, #1
 800af3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	0018      	movs	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	b004      	add	sp, #16
 800af46:	bd80      	pop	{r7, pc}
 800af48:	fffff7ff 	.word	0xfffff7ff

0800af4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	1dbb      	adds	r3, r7, #6
 800af5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af5c:	231f      	movs	r3, #31
 800af5e:	18fb      	adds	r3, r7, r3
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	225c      	movs	r2, #92	@ 0x5c
 800af68:	5c9b      	ldrb	r3, [r3, r2]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d101      	bne.n	800af72 <HAL_SPI_Transmit+0x26>
 800af6e:	2302      	movs	r3, #2
 800af70:	e147      	b.n	800b202 <HAL_SPI_Transmit+0x2b6>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	225c      	movs	r2, #92	@ 0x5c
 800af76:	2101      	movs	r1, #1
 800af78:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af7a:	f7fc fec1 	bl	8007d00 <HAL_GetTick>
 800af7e:	0003      	movs	r3, r0
 800af80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800af82:	2316      	movs	r3, #22
 800af84:	18fb      	adds	r3, r7, r3
 800af86:	1dba      	adds	r2, r7, #6
 800af88:	8812      	ldrh	r2, [r2, #0]
 800af8a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	225d      	movs	r2, #93	@ 0x5d
 800af90:	5c9b      	ldrb	r3, [r3, r2]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b01      	cmp	r3, #1
 800af96:	d004      	beq.n	800afa2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800af98:	231f      	movs	r3, #31
 800af9a:	18fb      	adds	r3, r7, r3
 800af9c:	2202      	movs	r2, #2
 800af9e:	701a      	strb	r2, [r3, #0]
    goto error;
 800afa0:	e128      	b.n	800b1f4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d003      	beq.n	800afb0 <HAL_SPI_Transmit+0x64>
 800afa8:	1dbb      	adds	r3, r7, #6
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800afb0:	231f      	movs	r3, #31
 800afb2:	18fb      	adds	r3, r7, r3
 800afb4:	2201      	movs	r2, #1
 800afb6:	701a      	strb	r2, [r3, #0]
    goto error;
 800afb8:	e11c      	b.n	800b1f4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	225d      	movs	r2, #93	@ 0x5d
 800afbe:	2103      	movs	r1, #3
 800afc0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	1dba      	adds	r2, r7, #6
 800afd2:	8812      	ldrh	r2, [r2, #0]
 800afd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	1dba      	adds	r2, r7, #6
 800afda:	8812      	ldrh	r2, [r2, #0]
 800afdc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2244      	movs	r2, #68	@ 0x44
 800afe8:	2100      	movs	r1, #0
 800afea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2246      	movs	r2, #70	@ 0x46
 800aff0:	2100      	movs	r1, #0
 800aff2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	2380      	movs	r3, #128	@ 0x80
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	429a      	cmp	r2, r3
 800b00a:	d110      	bne.n	800b02e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2140      	movs	r1, #64	@ 0x40
 800b018:	438a      	bics	r2, r1
 800b01a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2180      	movs	r1, #128	@ 0x80
 800b028:	01c9      	lsls	r1, r1, #7
 800b02a:	430a      	orrs	r2, r1
 800b02c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2240      	movs	r2, #64	@ 0x40
 800b036:	4013      	ands	r3, r2
 800b038:	2b40      	cmp	r3, #64	@ 0x40
 800b03a:	d007      	beq.n	800b04c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2140      	movs	r1, #64	@ 0x40
 800b048:	430a      	orrs	r2, r1
 800b04a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	23e0      	movs	r3, #224	@ 0xe0
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	429a      	cmp	r2, r3
 800b056:	d952      	bls.n	800b0fe <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d004      	beq.n	800b06a <HAL_SPI_Transmit+0x11e>
 800b060:	2316      	movs	r3, #22
 800b062:	18fb      	adds	r3, r7, r3
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d143      	bne.n	800b0f2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06e:	881a      	ldrh	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	1c9a      	adds	r2, r3, #2
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b084:	b29b      	uxth	r3, r3
 800b086:	3b01      	subs	r3, #1
 800b088:	b29a      	uxth	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b08e:	e030      	b.n	800b0f2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2202      	movs	r2, #2
 800b098:	4013      	ands	r3, r2
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d112      	bne.n	800b0c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a2:	881a      	ldrh	r2, [r3, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ae:	1c9a      	adds	r2, r3, #2
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b0c2:	e016      	b.n	800b0f2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0c4:	f7fc fe1c 	bl	8007d00 <HAL_GetTick>
 800b0c8:	0002      	movs	r2, r0
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d802      	bhi.n	800b0da <HAL_SPI_Transmit+0x18e>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	d102      	bne.n	800b0e0 <HAL_SPI_Transmit+0x194>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d108      	bne.n	800b0f2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b0e0:	231f      	movs	r3, #31
 800b0e2:	18fb      	adds	r3, r7, r3
 800b0e4:	2203      	movs	r2, #3
 800b0e6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	225d      	movs	r2, #93	@ 0x5d
 800b0ec:	2101      	movs	r1, #1
 800b0ee:	5499      	strb	r1, [r3, r2]
          goto error;
 800b0f0:	e080      	b.n	800b1f4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1c9      	bne.n	800b090 <HAL_SPI_Transmit+0x144>
 800b0fc:	e053      	b.n	800b1a6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <HAL_SPI_Transmit+0x1c4>
 800b106:	2316      	movs	r3, #22
 800b108:	18fb      	adds	r3, r7, r3
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d145      	bne.n	800b19c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	330c      	adds	r3, #12
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	b29a      	uxth	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b136:	e031      	b.n	800b19c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	2202      	movs	r2, #2
 800b140:	4013      	ands	r3, r2
 800b142:	2b02      	cmp	r3, #2
 800b144:	d113      	bne.n	800b16e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	330c      	adds	r3, #12
 800b150:	7812      	ldrb	r2, [r2, #0]
 800b152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b162:	b29b      	uxth	r3, r3
 800b164:	3b01      	subs	r3, #1
 800b166:	b29a      	uxth	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b16c:	e016      	b.n	800b19c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b16e:	f7fc fdc7 	bl	8007d00 <HAL_GetTick>
 800b172:	0002      	movs	r2, r0
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d802      	bhi.n	800b184 <HAL_SPI_Transmit+0x238>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	d102      	bne.n	800b18a <HAL_SPI_Transmit+0x23e>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d108      	bne.n	800b19c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b18a:	231f      	movs	r3, #31
 800b18c:	18fb      	adds	r3, r7, r3
 800b18e:	2203      	movs	r2, #3
 800b190:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	225d      	movs	r2, #93	@ 0x5d
 800b196:	2101      	movs	r1, #1
 800b198:	5499      	strb	r1, [r3, r2]
          goto error;
 800b19a:	e02b      	b.n	800b1f4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1c8      	bne.n	800b138 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f000 fcef 	bl	800bb90 <SPI_EndRxTxTransaction>
 800b1b2:	1e03      	subs	r3, r0, #0
 800b1b4:	d002      	beq.n	800b1bc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	613b      	str	r3, [r7, #16]
 800b1d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b1e2:	231f      	movs	r3, #31
 800b1e4:	18fb      	adds	r3, r7, r3
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	e003      	b.n	800b1f4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	225d      	movs	r2, #93	@ 0x5d
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	225c      	movs	r2, #92	@ 0x5c
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b1fc:	231f      	movs	r3, #31
 800b1fe:	18fb      	adds	r3, r7, r3
 800b200:	781b      	ldrb	r3, [r3, #0]
}
 800b202:	0018      	movs	r0, r3
 800b204:	46bd      	mov	sp, r7
 800b206:	b008      	add	sp, #32
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b20c:	b590      	push	{r4, r7, lr}
 800b20e:	b089      	sub	sp, #36	@ 0x24
 800b210:	af02      	add	r7, sp, #8
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	603b      	str	r3, [r7, #0]
 800b218:	1dbb      	adds	r3, r7, #6
 800b21a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b21c:	2117      	movs	r1, #23
 800b21e:	187b      	adds	r3, r7, r1
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	225d      	movs	r2, #93	@ 0x5d
 800b228:	5c9b      	ldrb	r3, [r3, r2]
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d003      	beq.n	800b238 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800b230:	187b      	adds	r3, r7, r1
 800b232:	2202      	movs	r2, #2
 800b234:	701a      	strb	r2, [r3, #0]
    goto error;
 800b236:	e12b      	b.n	800b490 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	2382      	movs	r3, #130	@ 0x82
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	429a      	cmp	r2, r3
 800b242:	d113      	bne.n	800b26c <HAL_SPI_Receive+0x60>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10f      	bne.n	800b26c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	225d      	movs	r2, #93	@ 0x5d
 800b250:	2104      	movs	r1, #4
 800b252:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b254:	1dbb      	adds	r3, r7, #6
 800b256:	881c      	ldrh	r4, [r3, #0]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	68b9      	ldr	r1, [r7, #8]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	0023      	movs	r3, r4
 800b264:	f000 f924 	bl	800b4b0 <HAL_SPI_TransmitReceive>
 800b268:	0003      	movs	r3, r0
 800b26a:	e118      	b.n	800b49e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	225c      	movs	r2, #92	@ 0x5c
 800b270:	5c9b      	ldrb	r3, [r3, r2]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d101      	bne.n	800b27a <HAL_SPI_Receive+0x6e>
 800b276:	2302      	movs	r3, #2
 800b278:	e111      	b.n	800b49e <HAL_SPI_Receive+0x292>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	225c      	movs	r2, #92	@ 0x5c
 800b27e:	2101      	movs	r1, #1
 800b280:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b282:	f7fc fd3d 	bl	8007d00 <HAL_GetTick>
 800b286:	0003      	movs	r3, r0
 800b288:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <HAL_SPI_Receive+0x8c>
 800b290:	1dbb      	adds	r3, r7, #6
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d104      	bne.n	800b2a2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800b298:	2317      	movs	r3, #23
 800b29a:	18fb      	adds	r3, r7, r3
 800b29c:	2201      	movs	r2, #1
 800b29e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b2a0:	e0f6      	b.n	800b490 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	225d      	movs	r2, #93	@ 0x5d
 800b2a6:	2104      	movs	r1, #4
 800b2a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	1dba      	adds	r2, r7, #6
 800b2ba:	2144      	movs	r1, #68	@ 0x44
 800b2bc:	8812      	ldrh	r2, [r2, #0]
 800b2be:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	1dba      	adds	r2, r7, #6
 800b2c4:	2146      	movs	r1, #70	@ 0x46
 800b2c6:	8812      	ldrh	r2, [r2, #0]
 800b2c8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	23e0      	movs	r3, #224	@ 0xe0
 800b2ee:	00db      	lsls	r3, r3, #3
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d908      	bls.n	800b306 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	496a      	ldr	r1, [pc, #424]	@ (800b4a8 <HAL_SPI_Receive+0x29c>)
 800b300:	400a      	ands	r2, r1
 800b302:	605a      	str	r2, [r3, #4]
 800b304:	e008      	b.n	800b318 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2180      	movs	r1, #128	@ 0x80
 800b312:	0149      	lsls	r1, r1, #5
 800b314:	430a      	orrs	r2, r1
 800b316:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	2380      	movs	r3, #128	@ 0x80
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	429a      	cmp	r2, r3
 800b322:	d10f      	bne.n	800b344 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2140      	movs	r1, #64	@ 0x40
 800b330:	438a      	bics	r2, r1
 800b332:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	495b      	ldr	r1, [pc, #364]	@ (800b4ac <HAL_SPI_Receive+0x2a0>)
 800b340:	400a      	ands	r2, r1
 800b342:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2240      	movs	r2, #64	@ 0x40
 800b34c:	4013      	ands	r3, r2
 800b34e:	2b40      	cmp	r3, #64	@ 0x40
 800b350:	d007      	beq.n	800b362 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2140      	movs	r1, #64	@ 0x40
 800b35e:	430a      	orrs	r2, r1
 800b360:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	23e0      	movs	r3, #224	@ 0xe0
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d900      	bls.n	800b370 <HAL_SPI_Receive+0x164>
 800b36e:	e071      	b.n	800b454 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b370:	e035      	b.n	800b3de <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	2201      	movs	r2, #1
 800b37a:	4013      	ands	r3, r2
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d117      	bne.n	800b3b0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	330c      	adds	r3, #12
 800b386:	001a      	movs	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38c:	7812      	ldrb	r2, [r2, #0]
 800b38e:	b2d2      	uxtb	r2, r2
 800b390:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2246      	movs	r2, #70	@ 0x46
 800b3a0:	5a9b      	ldrh	r3, [r3, r2]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	b299      	uxth	r1, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2246      	movs	r2, #70	@ 0x46
 800b3ac:	5299      	strh	r1, [r3, r2]
 800b3ae:	e016      	b.n	800b3de <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3b0:	f7fc fca6 	bl	8007d00 <HAL_GetTick>
 800b3b4:	0002      	movs	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d802      	bhi.n	800b3c6 <HAL_SPI_Receive+0x1ba>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	d102      	bne.n	800b3cc <HAL_SPI_Receive+0x1c0>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d108      	bne.n	800b3de <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800b3cc:	2317      	movs	r3, #23
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	225d      	movs	r2, #93	@ 0x5d
 800b3d8:	2101      	movs	r1, #1
 800b3da:	5499      	strb	r1, [r3, r2]
          goto error;
 800b3dc:	e058      	b.n	800b490 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2246      	movs	r2, #70	@ 0x46
 800b3e2:	5a9b      	ldrh	r3, [r3, r2]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1c3      	bne.n	800b372 <HAL_SPI_Receive+0x166>
 800b3ea:	e039      	b.n	800b460 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d115      	bne.n	800b426 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68da      	ldr	r2, [r3, #12]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b404:	b292      	uxth	r2, r2
 800b406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b40c:	1c9a      	adds	r2, r3, #2
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2246      	movs	r2, #70	@ 0x46
 800b416:	5a9b      	ldrh	r3, [r3, r2]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	3b01      	subs	r3, #1
 800b41c:	b299      	uxth	r1, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2246      	movs	r2, #70	@ 0x46
 800b422:	5299      	strh	r1, [r3, r2]
 800b424:	e016      	b.n	800b454 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b426:	f7fc fc6b 	bl	8007d00 <HAL_GetTick>
 800b42a:	0002      	movs	r2, r0
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d802      	bhi.n	800b43c <HAL_SPI_Receive+0x230>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	3301      	adds	r3, #1
 800b43a:	d102      	bne.n	800b442 <HAL_SPI_Receive+0x236>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d108      	bne.n	800b454 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800b442:	2317      	movs	r3, #23
 800b444:	18fb      	adds	r3, r7, r3
 800b446:	2203      	movs	r2, #3
 800b448:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	225d      	movs	r2, #93	@ 0x5d
 800b44e:	2101      	movs	r1, #1
 800b450:	5499      	strb	r1, [r3, r2]
          goto error;
 800b452:	e01d      	b.n	800b490 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2246      	movs	r2, #70	@ 0x46
 800b458:	5a9b      	ldrh	r3, [r3, r2]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1c5      	bne.n	800b3ec <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	0018      	movs	r0, r3
 800b468:	f000 fb34 	bl	800bad4 <SPI_EndRxTransaction>
 800b46c:	1e03      	subs	r3, r0, #0
 800b46e:	d002      	beq.n	800b476 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2220      	movs	r2, #32
 800b474:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800b47e:	2317      	movs	r3, #23
 800b480:	18fb      	adds	r3, r7, r3
 800b482:	2201      	movs	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e003      	b.n	800b490 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	225d      	movs	r2, #93	@ 0x5d
 800b48c:	2101      	movs	r1, #1
 800b48e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	225c      	movs	r2, #92	@ 0x5c
 800b494:	2100      	movs	r1, #0
 800b496:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b498:	2317      	movs	r3, #23
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	781b      	ldrb	r3, [r3, #0]
}
 800b49e:	0018      	movs	r0, r3
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	b007      	add	sp, #28
 800b4a4:	bd90      	pop	{r4, r7, pc}
 800b4a6:	46c0      	nop			@ (mov r8, r8)
 800b4a8:	ffffefff 	.word	0xffffefff
 800b4ac:	ffffbfff 	.word	0xffffbfff

0800b4b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	@ 0x28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	001a      	movs	r2, r3
 800b4be:	1cbb      	adds	r3, r7, #2
 800b4c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b4c6:	2323      	movs	r3, #35	@ 0x23
 800b4c8:	18fb      	adds	r3, r7, r3
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	225c      	movs	r2, #92	@ 0x5c
 800b4d2:	5c9b      	ldrb	r3, [r3, r2]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_SPI_TransmitReceive+0x2c>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e1c4      	b.n	800b866 <HAL_SPI_TransmitReceive+0x3b6>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	225c      	movs	r2, #92	@ 0x5c
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4e4:	f7fc fc0c 	bl	8007d00 <HAL_GetTick>
 800b4e8:	0003      	movs	r3, r0
 800b4ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4ec:	201b      	movs	r0, #27
 800b4ee:	183b      	adds	r3, r7, r0
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	215d      	movs	r1, #93	@ 0x5d
 800b4f4:	5c52      	ldrb	r2, [r2, r1]
 800b4f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b4fe:	2312      	movs	r3, #18
 800b500:	18fb      	adds	r3, r7, r3
 800b502:	1cba      	adds	r2, r7, #2
 800b504:	8812      	ldrh	r2, [r2, #0]
 800b506:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b508:	183b      	adds	r3, r7, r0
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d011      	beq.n	800b534 <HAL_SPI_TransmitReceive+0x84>
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	2382      	movs	r3, #130	@ 0x82
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	429a      	cmp	r2, r3
 800b518:	d107      	bne.n	800b52a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d103      	bne.n	800b52a <HAL_SPI_TransmitReceive+0x7a>
 800b522:	183b      	adds	r3, r7, r0
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	2b04      	cmp	r3, #4
 800b528:	d004      	beq.n	800b534 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b52a:	2323      	movs	r3, #35	@ 0x23
 800b52c:	18fb      	adds	r3, r7, r3
 800b52e:	2202      	movs	r2, #2
 800b530:	701a      	strb	r2, [r3, #0]
    goto error;
 800b532:	e191      	b.n	800b858 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d006      	beq.n	800b548 <HAL_SPI_TransmitReceive+0x98>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <HAL_SPI_TransmitReceive+0x98>
 800b540:	1cbb      	adds	r3, r7, #2
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d104      	bne.n	800b552 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b548:	2323      	movs	r3, #35	@ 0x23
 800b54a:	18fb      	adds	r3, r7, r3
 800b54c:	2201      	movs	r2, #1
 800b54e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b550:	e182      	b.n	800b858 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	225d      	movs	r2, #93	@ 0x5d
 800b556:	5c9b      	ldrb	r3, [r3, r2]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	d003      	beq.n	800b566 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	225d      	movs	r2, #93	@ 0x5d
 800b562:	2105      	movs	r1, #5
 800b564:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	1cba      	adds	r2, r7, #2
 800b576:	2146      	movs	r1, #70	@ 0x46
 800b578:	8812      	ldrh	r2, [r2, #0]
 800b57a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	1cba      	adds	r2, r7, #2
 800b580:	2144      	movs	r1, #68	@ 0x44
 800b582:	8812      	ldrh	r2, [r2, #0]
 800b584:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	1cba      	adds	r2, r7, #2
 800b590:	8812      	ldrh	r2, [r2, #0]
 800b592:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	1cba      	adds	r2, r7, #2
 800b598:	8812      	ldrh	r2, [r2, #0]
 800b59a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	23e0      	movs	r3, #224	@ 0xe0
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d908      	bls.n	800b5c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	49ac      	ldr	r1, [pc, #688]	@ (800b870 <HAL_SPI_TransmitReceive+0x3c0>)
 800b5c0:	400a      	ands	r2, r1
 800b5c2:	605a      	str	r2, [r3, #4]
 800b5c4:	e008      	b.n	800b5d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2180      	movs	r1, #128	@ 0x80
 800b5d2:	0149      	lsls	r1, r1, #5
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2240      	movs	r2, #64	@ 0x40
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	2b40      	cmp	r3, #64	@ 0x40
 800b5e4:	d007      	beq.n	800b5f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2140      	movs	r1, #64	@ 0x40
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	23e0      	movs	r3, #224	@ 0xe0
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d800      	bhi.n	800b604 <HAL_SPI_TransmitReceive+0x154>
 800b602:	e083      	b.n	800b70c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d005      	beq.n	800b618 <HAL_SPI_TransmitReceive+0x168>
 800b60c:	2312      	movs	r3, #18
 800b60e:	18fb      	adds	r3, r7, r3
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d000      	beq.n	800b618 <HAL_SPI_TransmitReceive+0x168>
 800b616:	e06d      	b.n	800b6f4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61c:	881a      	ldrh	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b628:	1c9a      	adds	r2, r3, #2
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b632:	b29b      	uxth	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	b29a      	uxth	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b63c:	e05a      	b.n	800b6f4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2202      	movs	r2, #2
 800b646:	4013      	ands	r3, r2
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d11b      	bne.n	800b684 <HAL_SPI_TransmitReceive+0x1d4>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b650:	b29b      	uxth	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d016      	beq.n	800b684 <HAL_SPI_TransmitReceive+0x1d4>
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d113      	bne.n	800b684 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b660:	881a      	ldrh	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b66c:	1c9a      	adds	r2, r3, #2
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b676:	b29b      	uxth	r3, r3
 800b678:	3b01      	subs	r3, #1
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	2201      	movs	r2, #1
 800b68c:	4013      	ands	r3, r2
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d11c      	bne.n	800b6cc <HAL_SPI_TransmitReceive+0x21c>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2246      	movs	r2, #70	@ 0x46
 800b696:	5a9b      	ldrh	r3, [r3, r2]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d016      	beq.n	800b6cc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2246      	movs	r2, #70	@ 0x46
 800b6ba:	5a9b      	ldrh	r3, [r3, r2]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b299      	uxth	r1, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2246      	movs	r2, #70	@ 0x46
 800b6c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b6cc:	f7fc fb18 	bl	8007d00 <HAL_GetTick>
 800b6d0:	0002      	movs	r2, r0
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d80b      	bhi.n	800b6f4 <HAL_SPI_TransmitReceive+0x244>
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6de:	3301      	adds	r3, #1
 800b6e0:	d008      	beq.n	800b6f4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800b6e2:	2323      	movs	r3, #35	@ 0x23
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	2203      	movs	r2, #3
 800b6e8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	225d      	movs	r2, #93	@ 0x5d
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	5499      	strb	r1, [r3, r2]
        goto error;
 800b6f2:	e0b1      	b.n	800b858 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d19f      	bne.n	800b63e <HAL_SPI_TransmitReceive+0x18e>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2246      	movs	r2, #70	@ 0x46
 800b702:	5a9b      	ldrh	r3, [r3, r2]
 800b704:	b29b      	uxth	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d199      	bne.n	800b63e <HAL_SPI_TransmitReceive+0x18e>
 800b70a:	e089      	b.n	800b820 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <HAL_SPI_TransmitReceive+0x270>
 800b714:	2312      	movs	r3, #18
 800b716:	18fb      	adds	r3, r7, r3
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d000      	beq.n	800b720 <HAL_SPI_TransmitReceive+0x270>
 800b71e:	e074      	b.n	800b80a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	330c      	adds	r3, #12
 800b72a:	7812      	ldrb	r2, [r2, #0]
 800b72c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	b29a      	uxth	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b746:	e060      	b.n	800b80a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	2202      	movs	r2, #2
 800b750:	4013      	ands	r3, r2
 800b752:	2b02      	cmp	r3, #2
 800b754:	d11c      	bne.n	800b790 <HAL_SPI_TransmitReceive+0x2e0>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d017      	beq.n	800b790 <HAL_SPI_TransmitReceive+0x2e0>
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	2b01      	cmp	r3, #1
 800b764:	d114      	bne.n	800b790 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	330c      	adds	r3, #12
 800b770:	7812      	ldrb	r2, [r2, #0]
 800b772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b782:	b29b      	uxth	r3, r3
 800b784:	3b01      	subs	r3, #1
 800b786:	b29a      	uxth	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	2201      	movs	r2, #1
 800b798:	4013      	ands	r3, r2
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d11e      	bne.n	800b7dc <HAL_SPI_TransmitReceive+0x32c>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2246      	movs	r2, #70	@ 0x46
 800b7a2:	5a9b      	ldrh	r3, [r3, r2]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d018      	beq.n	800b7dc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	330c      	adds	r3, #12
 800b7b0:	001a      	movs	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2246      	movs	r2, #70	@ 0x46
 800b7ca:	5a9b      	ldrh	r3, [r3, r2]
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	b299      	uxth	r1, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2246      	movs	r2, #70	@ 0x46
 800b7d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b7dc:	f7fc fa90 	bl	8007d00 <HAL_GetTick>
 800b7e0:	0002      	movs	r2, r0
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d802      	bhi.n	800b7f2 <HAL_SPI_TransmitReceive+0x342>
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	d102      	bne.n	800b7f8 <HAL_SPI_TransmitReceive+0x348>
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d108      	bne.n	800b80a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800b7f8:	2323      	movs	r3, #35	@ 0x23
 800b7fa:	18fb      	adds	r3, r7, r3
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	225d      	movs	r2, #93	@ 0x5d
 800b804:	2101      	movs	r1, #1
 800b806:	5499      	strb	r1, [r3, r2]
        goto error;
 800b808:	e026      	b.n	800b858 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b80e:	b29b      	uxth	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d199      	bne.n	800b748 <HAL_SPI_TransmitReceive+0x298>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2246      	movs	r2, #70	@ 0x46
 800b818:	5a9b      	ldrh	r3, [r3, r2]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d193      	bne.n	800b748 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	0018      	movs	r0, r3
 800b828:	f000 f9b2 	bl	800bb90 <SPI_EndRxTxTransaction>
 800b82c:	1e03      	subs	r3, r0, #0
 800b82e:	d006      	beq.n	800b83e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800b830:	2323      	movs	r3, #35	@ 0x23
 800b832:	18fb      	adds	r3, r7, r3
 800b834:	2201      	movs	r2, #1
 800b836:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2220      	movs	r2, #32
 800b83c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800b846:	2323      	movs	r3, #35	@ 0x23
 800b848:	18fb      	adds	r3, r7, r3
 800b84a:	2201      	movs	r2, #1
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	e003      	b.n	800b858 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	225d      	movs	r2, #93	@ 0x5d
 800b854:	2101      	movs	r1, #1
 800b856:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	225c      	movs	r2, #92	@ 0x5c
 800b85c:	2100      	movs	r1, #0
 800b85e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b860:	2323      	movs	r3, #35	@ 0x23
 800b862:	18fb      	adds	r3, r7, r3
 800b864:	781b      	ldrb	r3, [r3, #0]
}
 800b866:	0018      	movs	r0, r3
 800b868:	46bd      	mov	sp, r7
 800b86a:	b00a      	add	sp, #40	@ 0x28
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	46c0      	nop			@ (mov r8, r8)
 800b870:	ffffefff 	.word	0xffffefff

0800b874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	1dfb      	adds	r3, r7, #7
 800b882:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b884:	f7fc fa3c 	bl	8007d00 <HAL_GetTick>
 800b888:	0002      	movs	r2, r0
 800b88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88c:	1a9b      	subs	r3, r3, r2
 800b88e:	683a      	ldr	r2, [r7, #0]
 800b890:	18d3      	adds	r3, r2, r3
 800b892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b894:	f7fc fa34 	bl	8007d00 <HAL_GetTick>
 800b898:	0003      	movs	r3, r0
 800b89a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b89c:	4b3a      	ldr	r3, [pc, #232]	@ (800b988 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	015b      	lsls	r3, r3, #5
 800b8a2:	0d1b      	lsrs	r3, r3, #20
 800b8a4:	69fa      	ldr	r2, [r7, #28]
 800b8a6:	4353      	muls	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8aa:	e058      	b.n	800b95e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	d055      	beq.n	800b95e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8b2:	f7fc fa25 	bl	8007d00 <HAL_GetTick>
 800b8b6:	0002      	movs	r2, r0
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	69fa      	ldr	r2, [r7, #28]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d902      	bls.n	800b8c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d142      	bne.n	800b94e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	21e0      	movs	r1, #224	@ 0xe0
 800b8d4:	438a      	bics	r2, r1
 800b8d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	2382      	movs	r3, #130	@ 0x82
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d113      	bne.n	800b90c <SPI_WaitFlagStateUntilTimeout+0x98>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689a      	ldr	r2, [r3, #8]
 800b8e8:	2380      	movs	r3, #128	@ 0x80
 800b8ea:	021b      	lsls	r3, r3, #8
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d005      	beq.n	800b8fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	689a      	ldr	r2, [r3, #8]
 800b8f4:	2380      	movs	r3, #128	@ 0x80
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d107      	bne.n	800b90c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2140      	movs	r1, #64	@ 0x40
 800b908:	438a      	bics	r2, r1
 800b90a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b910:	2380      	movs	r3, #128	@ 0x80
 800b912:	019b      	lsls	r3, r3, #6
 800b914:	429a      	cmp	r2, r3
 800b916:	d110      	bne.n	800b93a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	491a      	ldr	r1, [pc, #104]	@ (800b98c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b924:	400a      	ands	r2, r1
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2180      	movs	r1, #128	@ 0x80
 800b934:	0189      	lsls	r1, r1, #6
 800b936:	430a      	orrs	r2, r1
 800b938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	225d      	movs	r2, #93	@ 0x5d
 800b93e:	2101      	movs	r1, #1
 800b940:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	225c      	movs	r2, #92	@ 0x5c
 800b946:	2100      	movs	r1, #0
 800b948:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e017      	b.n	800b97e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b954:	2300      	movs	r3, #0
 800b956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	4013      	ands	r3, r2
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	425a      	negs	r2, r3
 800b96e:	4153      	adcs	r3, r2
 800b970:	b2db      	uxtb	r3, r3
 800b972:	001a      	movs	r2, r3
 800b974:	1dfb      	adds	r3, r7, #7
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d197      	bne.n	800b8ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	0018      	movs	r0, r3
 800b980:	46bd      	mov	sp, r7
 800b982:	b008      	add	sp, #32
 800b984:	bd80      	pop	{r7, pc}
 800b986:	46c0      	nop			@ (mov r8, r8)
 800b988:	20000068 	.word	0x20000068
 800b98c:	ffffdfff 	.word	0xffffdfff

0800b990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b08a      	sub	sp, #40	@ 0x28
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b99e:	2317      	movs	r3, #23
 800b9a0:	18fb      	adds	r3, r7, r3
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b9a6:	f7fc f9ab 	bl	8007d00 <HAL_GetTick>
 800b9aa:	0002      	movs	r2, r0
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ae:	1a9b      	subs	r3, r3, r2
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	18d3      	adds	r3, r2, r3
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b9b6:	f7fc f9a3 	bl	8007d00 <HAL_GetTick>
 800b9ba:	0003      	movs	r3, r0
 800b9bc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	330c      	adds	r3, #12
 800b9c4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b9c6:	4b41      	ldr	r3, [pc, #260]	@ (800bacc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	0013      	movs	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	189b      	adds	r3, r3, r2
 800b9d0:	00da      	lsls	r2, r3, #3
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	0d1b      	lsrs	r3, r3, #20
 800b9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9d8:	4353      	muls	r3, r2
 800b9da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b9dc:	e068      	b.n	800bab0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	23c0      	movs	r3, #192	@ 0xc0
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d10a      	bne.n	800b9fe <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d107      	bne.n	800b9fe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	2117      	movs	r1, #23
 800b9f6:	187b      	adds	r3, r7, r1
 800b9f8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b9fa:	187b      	adds	r3, r7, r1
 800b9fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	3301      	adds	r3, #1
 800ba02:	d055      	beq.n	800bab0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba04:	f7fc f97c 	bl	8007d00 <HAL_GetTick>
 800ba08:	0002      	movs	r2, r0
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d902      	bls.n	800ba1a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800ba14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d142      	bne.n	800baa0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	21e0      	movs	r1, #224	@ 0xe0
 800ba26:	438a      	bics	r2, r1
 800ba28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	2382      	movs	r3, #130	@ 0x82
 800ba30:	005b      	lsls	r3, r3, #1
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d113      	bne.n	800ba5e <SPI_WaitFifoStateUntilTimeout+0xce>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	2380      	movs	r3, #128	@ 0x80
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d005      	beq.n	800ba4e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	689a      	ldr	r2, [r3, #8]
 800ba46:	2380      	movs	r3, #128	@ 0x80
 800ba48:	00db      	lsls	r3, r3, #3
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d107      	bne.n	800ba5e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2140      	movs	r1, #64	@ 0x40
 800ba5a:	438a      	bics	r2, r1
 800ba5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba62:	2380      	movs	r3, #128	@ 0x80
 800ba64:	019b      	lsls	r3, r3, #6
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d110      	bne.n	800ba8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4916      	ldr	r1, [pc, #88]	@ (800bad0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800ba76:	400a      	ands	r2, r1
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2180      	movs	r1, #128	@ 0x80
 800ba86:	0189      	lsls	r1, r1, #6
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	225d      	movs	r2, #93	@ 0x5d
 800ba90:	2101      	movs	r1, #1
 800ba92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	225c      	movs	r2, #92	@ 0x5c
 800ba98:	2100      	movs	r1, #0
 800ba9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e010      	b.n	800bac2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	3b01      	subs	r3, #1
 800baae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	4013      	ands	r3, r2
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	429a      	cmp	r2, r3
 800babe:	d18e      	bne.n	800b9de <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	0018      	movs	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	b00a      	add	sp, #40	@ 0x28
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	46c0      	nop			@ (mov r8, r8)
 800bacc:	20000068 	.word	0x20000068
 800bad0:	ffffdfff 	.word	0xffffdfff

0800bad4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	2382      	movs	r3, #130	@ 0x82
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	429a      	cmp	r2, r3
 800baea:	d113      	bne.n	800bb14 <SPI_EndRxTransaction+0x40>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	689a      	ldr	r2, [r3, #8]
 800baf0:	2380      	movs	r3, #128	@ 0x80
 800baf2:	021b      	lsls	r3, r3, #8
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d005      	beq.n	800bb04 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689a      	ldr	r2, [r3, #8]
 800bafc:	2380      	movs	r3, #128	@ 0x80
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d107      	bne.n	800bb14 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2140      	movs	r1, #64	@ 0x40
 800bb10:	438a      	bics	r2, r1
 800bb12:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	0013      	movs	r3, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2180      	movs	r1, #128	@ 0x80
 800bb22:	f7ff fea7 	bl	800b874 <SPI_WaitFlagStateUntilTimeout>
 800bb26:	1e03      	subs	r3, r0, #0
 800bb28:	d007      	beq.n	800bb3a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb2e:	2220      	movs	r2, #32
 800bb30:	431a      	orrs	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bb36:	2303      	movs	r3, #3
 800bb38:	e026      	b.n	800bb88 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	2382      	movs	r3, #130	@ 0x82
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d11f      	bne.n	800bb86 <SPI_EndRxTransaction+0xb2>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	2380      	movs	r3, #128	@ 0x80
 800bb4c:	021b      	lsls	r3, r3, #8
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d005      	beq.n	800bb5e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	689a      	ldr	r2, [r3, #8]
 800bb56:	2380      	movs	r3, #128	@ 0x80
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d113      	bne.n	800bb86 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	23c0      	movs	r3, #192	@ 0xc0
 800bb62:	00d9      	lsls	r1, r3, #3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	0013      	movs	r3, r2
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f7ff ff0f 	bl	800b990 <SPI_WaitFifoStateUntilTimeout>
 800bb72:	1e03      	subs	r3, r0, #0
 800bb74:	d007      	beq.n	800bb86 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb7a:	2220      	movs	r2, #32
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e000      	b.n	800bb88 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	0018      	movs	r0, r3
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	b004      	add	sp, #16
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	23c0      	movs	r3, #192	@ 0xc0
 800bba0:	0159      	lsls	r1, r3, #5
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	0013      	movs	r3, r2
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f7ff fef0 	bl	800b990 <SPI_WaitFifoStateUntilTimeout>
 800bbb0:	1e03      	subs	r3, r0, #0
 800bbb2:	d007      	beq.n	800bbc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbb8:	2220      	movs	r2, #32
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e027      	b.n	800bc14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	0013      	movs	r3, r2
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2180      	movs	r1, #128	@ 0x80
 800bbd2:	f7ff fe4f 	bl	800b874 <SPI_WaitFlagStateUntilTimeout>
 800bbd6:	1e03      	subs	r3, r0, #0
 800bbd8:	d007      	beq.n	800bbea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbde:	2220      	movs	r2, #32
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e014      	b.n	800bc14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	23c0      	movs	r3, #192	@ 0xc0
 800bbee:	00d9      	lsls	r1, r3, #3
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	0013      	movs	r3, r2
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f7ff fec9 	bl	800b990 <SPI_WaitFifoStateUntilTimeout>
 800bbfe:	1e03      	subs	r3, r0, #0
 800bc00:	d007      	beq.n	800bc12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc06:	2220      	movs	r2, #32
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e000      	b.n	800bc14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	0018      	movs	r0, r3
 800bc16:	46bd      	mov	sp, r7
 800bc18:	b004      	add	sp, #16
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e04a      	b.n	800bcc4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	223d      	movs	r2, #61	@ 0x3d
 800bc32:	5c9b      	ldrb	r3, [r3, r2]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d107      	bne.n	800bc4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	223c      	movs	r2, #60	@ 0x3c
 800bc3e:	2100      	movs	r1, #0
 800bc40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	0018      	movs	r0, r3
 800bc46:	f7fb fd51 	bl	80076ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	223d      	movs	r2, #61	@ 0x3d
 800bc4e:	2102      	movs	r1, #2
 800bc50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	0019      	movs	r1, r3
 800bc5c:	0010      	movs	r0, r2
 800bc5e:	f000 fa8f 	bl	800c180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2248      	movs	r2, #72	@ 0x48
 800bc66:	2101      	movs	r1, #1
 800bc68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	223e      	movs	r2, #62	@ 0x3e
 800bc6e:	2101      	movs	r1, #1
 800bc70:	5499      	strb	r1, [r3, r2]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	223f      	movs	r2, #63	@ 0x3f
 800bc76:	2101      	movs	r1, #1
 800bc78:	5499      	strb	r1, [r3, r2]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2240      	movs	r2, #64	@ 0x40
 800bc7e:	2101      	movs	r1, #1
 800bc80:	5499      	strb	r1, [r3, r2]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2241      	movs	r2, #65	@ 0x41
 800bc86:	2101      	movs	r1, #1
 800bc88:	5499      	strb	r1, [r3, r2]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2242      	movs	r2, #66	@ 0x42
 800bc8e:	2101      	movs	r1, #1
 800bc90:	5499      	strb	r1, [r3, r2]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2243      	movs	r2, #67	@ 0x43
 800bc96:	2101      	movs	r1, #1
 800bc98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2244      	movs	r2, #68	@ 0x44
 800bc9e:	2101      	movs	r1, #1
 800bca0:	5499      	strb	r1, [r3, r2]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2245      	movs	r2, #69	@ 0x45
 800bca6:	2101      	movs	r1, #1
 800bca8:	5499      	strb	r1, [r3, r2]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2246      	movs	r2, #70	@ 0x46
 800bcae:	2101      	movs	r1, #1
 800bcb0:	5499      	strb	r1, [r3, r2]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2247      	movs	r2, #71	@ 0x47
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	223d      	movs	r2, #61	@ 0x3d
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b002      	add	sp, #8
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	223d      	movs	r2, #61	@ 0x3d
 800bcd8:	5c9b      	ldrb	r3, [r3, r2]
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d001      	beq.n	800bce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e042      	b.n	800bd6a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	223d      	movs	r2, #61	@ 0x3d
 800bce8:	2102      	movs	r1, #2
 800bcea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68da      	ldr	r2, [r3, #12]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1c      	ldr	r2, [pc, #112]	@ (800bd74 <HAL_TIM_Base_Start_IT+0xa8>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00f      	beq.n	800bd26 <HAL_TIM_Base_Start_IT+0x5a>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	2380      	movs	r3, #128	@ 0x80
 800bd0c:	05db      	lsls	r3, r3, #23
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d009      	beq.n	800bd26 <HAL_TIM_Base_Start_IT+0x5a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a18      	ldr	r2, [pc, #96]	@ (800bd78 <HAL_TIM_Base_Start_IT+0xac>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d004      	beq.n	800bd26 <HAL_TIM_Base_Start_IT+0x5a>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a16      	ldr	r2, [pc, #88]	@ (800bd7c <HAL_TIM_Base_Start_IT+0xb0>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d116      	bne.n	800bd54 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	4a14      	ldr	r2, [pc, #80]	@ (800bd80 <HAL_TIM_Base_Start_IT+0xb4>)
 800bd2e:	4013      	ands	r3, r2
 800bd30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2b06      	cmp	r3, #6
 800bd36:	d016      	beq.n	800bd66 <HAL_TIM_Base_Start_IT+0x9a>
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	2380      	movs	r3, #128	@ 0x80
 800bd3c:	025b      	lsls	r3, r3, #9
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d011      	beq.n	800bd66 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd52:	e008      	b.n	800bd66 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2101      	movs	r1, #1
 800bd60:	430a      	orrs	r2, r1
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	e000      	b.n	800bd68 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd66:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	b004      	add	sp, #16
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	46c0      	nop			@ (mov r8, r8)
 800bd74:	40012c00 	.word	0x40012c00
 800bd78:	40000400 	.word	0x40000400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	00010007 	.word	0x00010007

0800bd84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	4013      	ands	r3, r2
 800bda2:	d021      	beq.n	800bde8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2202      	movs	r2, #2
 800bda8:	4013      	ands	r3, r2
 800bdaa:	d01d      	beq.n	800bde8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2203      	movs	r2, #3
 800bdb2:	4252      	negs	r2, r2
 800bdb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	2203      	movs	r2, #3
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	d004      	beq.n	800bdd2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	0018      	movs	r0, r3
 800bdcc:	f000 f9c0 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800bdd0:	e007      	b.n	800bde2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f000 f9b3 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	0018      	movs	r0, r3
 800bdde:	f000 f9bf 	bl	800c160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2204      	movs	r2, #4
 800bdec:	4013      	ands	r3, r2
 800bdee:	d022      	beq.n	800be36 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	d01e      	beq.n	800be36 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	4252      	negs	r2, r2
 800be00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2202      	movs	r2, #2
 800be06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	699a      	ldr	r2, [r3, #24]
 800be0e:	23c0      	movs	r3, #192	@ 0xc0
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4013      	ands	r3, r2
 800be14:	d004      	beq.n	800be20 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	0018      	movs	r0, r3
 800be1a:	f000 f999 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800be1e:	e007      	b.n	800be30 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	0018      	movs	r0, r3
 800be24:	f000 f98c 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	0018      	movs	r0, r3
 800be2c:	f000 f998 	bl	800c160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2208      	movs	r2, #8
 800be3a:	4013      	ands	r3, r2
 800be3c:	d021      	beq.n	800be82 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2208      	movs	r2, #8
 800be42:	4013      	ands	r3, r2
 800be44:	d01d      	beq.n	800be82 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2209      	movs	r2, #9
 800be4c:	4252      	negs	r2, r2
 800be4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2204      	movs	r2, #4
 800be54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	2203      	movs	r2, #3
 800be5e:	4013      	ands	r3, r2
 800be60:	d004      	beq.n	800be6c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	0018      	movs	r0, r3
 800be66:	f000 f973 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800be6a:	e007      	b.n	800be7c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	0018      	movs	r0, r3
 800be70:	f000 f966 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	0018      	movs	r0, r3
 800be78:	f000 f972 	bl	800c160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2210      	movs	r2, #16
 800be86:	4013      	ands	r3, r2
 800be88:	d022      	beq.n	800bed0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2210      	movs	r2, #16
 800be8e:	4013      	ands	r3, r2
 800be90:	d01e      	beq.n	800bed0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2211      	movs	r2, #17
 800be98:	4252      	negs	r2, r2
 800be9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2208      	movs	r2, #8
 800bea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	69da      	ldr	r2, [r3, #28]
 800bea8:	23c0      	movs	r3, #192	@ 0xc0
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4013      	ands	r3, r2
 800beae:	d004      	beq.n	800beba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	0018      	movs	r0, r3
 800beb4:	f000 f94c 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800beb8:	e007      	b.n	800beca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	0018      	movs	r0, r3
 800bebe:	f000 f93f 	bl	800c140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	0018      	movs	r0, r3
 800bec6:	f000 f94b 	bl	800c160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2201      	movs	r2, #1
 800bed4:	4013      	ands	r3, r2
 800bed6:	d00c      	beq.n	800bef2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2201      	movs	r2, #1
 800bedc:	4013      	ands	r3, r2
 800bede:	d008      	beq.n	800bef2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2202      	movs	r2, #2
 800bee6:	4252      	negs	r2, r2
 800bee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	0018      	movs	r0, r3
 800beee:	f7fa ff3d 	bl	8006d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2280      	movs	r2, #128	@ 0x80
 800bef6:	4013      	ands	r3, r2
 800bef8:	d104      	bne.n	800bf04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	2380      	movs	r3, #128	@ 0x80
 800befe:	019b      	lsls	r3, r3, #6
 800bf00:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf02:	d00b      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2280      	movs	r2, #128	@ 0x80
 800bf08:	4013      	ands	r3, r2
 800bf0a:	d007      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a1e      	ldr	r2, [pc, #120]	@ (800bf8c <HAL_TIM_IRQHandler+0x208>)
 800bf12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	0018      	movs	r0, r3
 800bf18:	f000 fad2 	bl	800c4c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	2380      	movs	r3, #128	@ 0x80
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4013      	ands	r3, r2
 800bf24:	d00b      	beq.n	800bf3e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2280      	movs	r2, #128	@ 0x80
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	d007      	beq.n	800bf3e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a17      	ldr	r2, [pc, #92]	@ (800bf90 <HAL_TIM_IRQHandler+0x20c>)
 800bf34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f000 fac9 	bl	800c4d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2240      	movs	r2, #64	@ 0x40
 800bf42:	4013      	ands	r3, r2
 800bf44:	d00c      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2240      	movs	r2, #64	@ 0x40
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	d008      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2241      	movs	r2, #65	@ 0x41
 800bf54:	4252      	negs	r2, r2
 800bf56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	0018      	movs	r0, r3
 800bf5c:	f000 f908 	bl	800c170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2220      	movs	r2, #32
 800bf64:	4013      	ands	r3, r2
 800bf66:	d00c      	beq.n	800bf82 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	d008      	beq.n	800bf82 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2221      	movs	r2, #33	@ 0x21
 800bf76:	4252      	negs	r2, r2
 800bf78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	0018      	movs	r0, r3
 800bf7e:	f000 fa97 	bl	800c4b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf82:	46c0      	nop			@ (mov r8, r8)
 800bf84:	46bd      	mov	sp, r7
 800bf86:	b004      	add	sp, #16
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	46c0      	nop			@ (mov r8, r8)
 800bf8c:	ffffdf7f 	.word	0xffffdf7f
 800bf90:	fffffeff 	.word	0xfffffeff

0800bf94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf9e:	230f      	movs	r3, #15
 800bfa0:	18fb      	adds	r3, r7, r3
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	223c      	movs	r2, #60	@ 0x3c
 800bfaa:	5c9b      	ldrb	r3, [r3, r2]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_TIM_ConfigClockSource+0x20>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e0bc      	b.n	800c12e <HAL_TIM_ConfigClockSource+0x19a>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	223c      	movs	r2, #60	@ 0x3c
 800bfb8:	2101      	movs	r1, #1
 800bfba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	223d      	movs	r2, #61	@ 0x3d
 800bfc0:	2102      	movs	r1, #2
 800bfc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	4a5a      	ldr	r2, [pc, #360]	@ (800c138 <HAL_TIM_ConfigClockSource+0x1a4>)
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	4a59      	ldr	r2, [pc, #356]	@ (800c13c <HAL_TIM_ConfigClockSource+0x1a8>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2280      	movs	r2, #128	@ 0x80
 800bfea:	0192      	lsls	r2, r2, #6
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d040      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0xde>
 800bff0:	2280      	movs	r2, #128	@ 0x80
 800bff2:	0192      	lsls	r2, r2, #6
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d900      	bls.n	800bffa <HAL_TIM_ConfigClockSource+0x66>
 800bff8:	e088      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800bffa:	2280      	movs	r2, #128	@ 0x80
 800bffc:	0152      	lsls	r2, r2, #5
 800bffe:	4293      	cmp	r3, r2
 800c000:	d100      	bne.n	800c004 <HAL_TIM_ConfigClockSource+0x70>
 800c002:	e088      	b.n	800c116 <HAL_TIM_ConfigClockSource+0x182>
 800c004:	2280      	movs	r2, #128	@ 0x80
 800c006:	0152      	lsls	r2, r2, #5
 800c008:	4293      	cmp	r3, r2
 800c00a:	d900      	bls.n	800c00e <HAL_TIM_ConfigClockSource+0x7a>
 800c00c:	e07e      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c00e:	2b70      	cmp	r3, #112	@ 0x70
 800c010:	d018      	beq.n	800c044 <HAL_TIM_ConfigClockSource+0xb0>
 800c012:	d900      	bls.n	800c016 <HAL_TIM_ConfigClockSource+0x82>
 800c014:	e07a      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c016:	2b60      	cmp	r3, #96	@ 0x60
 800c018:	d04f      	beq.n	800c0ba <HAL_TIM_ConfigClockSource+0x126>
 800c01a:	d900      	bls.n	800c01e <HAL_TIM_ConfigClockSource+0x8a>
 800c01c:	e076      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c01e:	2b50      	cmp	r3, #80	@ 0x50
 800c020:	d03b      	beq.n	800c09a <HAL_TIM_ConfigClockSource+0x106>
 800c022:	d900      	bls.n	800c026 <HAL_TIM_ConfigClockSource+0x92>
 800c024:	e072      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c026:	2b40      	cmp	r3, #64	@ 0x40
 800c028:	d057      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x146>
 800c02a:	d900      	bls.n	800c02e <HAL_TIM_ConfigClockSource+0x9a>
 800c02c:	e06e      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c02e:	2b30      	cmp	r3, #48	@ 0x30
 800c030:	d063      	beq.n	800c0fa <HAL_TIM_ConfigClockSource+0x166>
 800c032:	d86b      	bhi.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c034:	2b20      	cmp	r3, #32
 800c036:	d060      	beq.n	800c0fa <HAL_TIM_ConfigClockSource+0x166>
 800c038:	d868      	bhi.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d05d      	beq.n	800c0fa <HAL_TIM_ConfigClockSource+0x166>
 800c03e:	2b10      	cmp	r3, #16
 800c040:	d05b      	beq.n	800c0fa <HAL_TIM_ConfigClockSource+0x166>
 800c042:	e063      	b.n	800c10c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c054:	f000 f99e 	bl	800c394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2277      	movs	r2, #119	@ 0x77
 800c064:	4313      	orrs	r3, r2
 800c066:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	609a      	str	r2, [r3, #8]
      break;
 800c070:	e052      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c082:	f000 f987 	bl	800c394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	689a      	ldr	r2, [r3, #8]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2180      	movs	r1, #128	@ 0x80
 800c092:	01c9      	lsls	r1, r1, #7
 800c094:	430a      	orrs	r2, r1
 800c096:	609a      	str	r2, [r3, #8]
      break;
 800c098:	e03e      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0a6:	001a      	movs	r2, r3
 800c0a8:	f000 f8f8 	bl	800c29c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2150      	movs	r1, #80	@ 0x50
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	f000 f952 	bl	800c35c <TIM_ITRx_SetConfig>
      break;
 800c0b8:	e02e      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0c6:	001a      	movs	r2, r3
 800c0c8:	f000 f916 	bl	800c2f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2160      	movs	r1, #96	@ 0x60
 800c0d2:	0018      	movs	r0, r3
 800c0d4:	f000 f942 	bl	800c35c <TIM_ITRx_SetConfig>
      break;
 800c0d8:	e01e      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0e6:	001a      	movs	r2, r3
 800c0e8:	f000 f8d8 	bl	800c29c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2140      	movs	r1, #64	@ 0x40
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f000 f932 	bl	800c35c <TIM_ITRx_SetConfig>
      break;
 800c0f8:	e00e      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	0019      	movs	r1, r3
 800c104:	0010      	movs	r0, r2
 800c106:	f000 f929 	bl	800c35c <TIM_ITRx_SetConfig>
      break;
 800c10a:	e005      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c10c:	230f      	movs	r3, #15
 800c10e:	18fb      	adds	r3, r7, r3
 800c110:	2201      	movs	r2, #1
 800c112:	701a      	strb	r2, [r3, #0]
      break;
 800c114:	e000      	b.n	800c118 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c116:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	223d      	movs	r2, #61	@ 0x3d
 800c11c:	2101      	movs	r1, #1
 800c11e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	223c      	movs	r2, #60	@ 0x3c
 800c124:	2100      	movs	r1, #0
 800c126:	5499      	strb	r1, [r3, r2]

  return status;
 800c128:	230f      	movs	r3, #15
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	781b      	ldrb	r3, [r3, #0]
}
 800c12e:	0018      	movs	r0, r3
 800c130:	46bd      	mov	sp, r7
 800c132:	b004      	add	sp, #16
 800c134:	bd80      	pop	{r7, pc}
 800c136:	46c0      	nop			@ (mov r8, r8)
 800c138:	ffceff88 	.word	0xffceff88
 800c13c:	ffff00ff 	.word	0xffff00ff

0800c140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c148:	46c0      	nop			@ (mov r8, r8)
 800c14a:	46bd      	mov	sp, r7
 800c14c:	b002      	add	sp, #8
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c158:	46c0      	nop			@ (mov r8, r8)
 800c15a:	46bd      	mov	sp, r7
 800c15c:	b002      	add	sp, #8
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c168:	46c0      	nop			@ (mov r8, r8)
 800c16a:	46bd      	mov	sp, r7
 800c16c:	b002      	add	sp, #8
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c178:	46c0      	nop			@ (mov r8, r8)
 800c17a:	46bd      	mov	sp, r7
 800c17c:	b002      	add	sp, #8
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a3b      	ldr	r2, [pc, #236]	@ (800c280 <TIM_Base_SetConfig+0x100>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d008      	beq.n	800c1aa <TIM_Base_SetConfig+0x2a>
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	2380      	movs	r3, #128	@ 0x80
 800c19c:	05db      	lsls	r3, r3, #23
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d003      	beq.n	800c1aa <TIM_Base_SetConfig+0x2a>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a37      	ldr	r2, [pc, #220]	@ (800c284 <TIM_Base_SetConfig+0x104>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d108      	bne.n	800c1bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2270      	movs	r2, #112	@ 0x70
 800c1ae:	4393      	bics	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a30      	ldr	r2, [pc, #192]	@ (800c280 <TIM_Base_SetConfig+0x100>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d018      	beq.n	800c1f6 <TIM_Base_SetConfig+0x76>
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	2380      	movs	r3, #128	@ 0x80
 800c1c8:	05db      	lsls	r3, r3, #23
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d013      	beq.n	800c1f6 <TIM_Base_SetConfig+0x76>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c284 <TIM_Base_SetConfig+0x104>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00f      	beq.n	800c1f6 <TIM_Base_SetConfig+0x76>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c288 <TIM_Base_SetConfig+0x108>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00b      	beq.n	800c1f6 <TIM_Base_SetConfig+0x76>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a2a      	ldr	r2, [pc, #168]	@ (800c28c <TIM_Base_SetConfig+0x10c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d007      	beq.n	800c1f6 <TIM_Base_SetConfig+0x76>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a29      	ldr	r2, [pc, #164]	@ (800c290 <TIM_Base_SetConfig+0x110>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d003      	beq.n	800c1f6 <TIM_Base_SetConfig+0x76>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a28      	ldr	r2, [pc, #160]	@ (800c294 <TIM_Base_SetConfig+0x114>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d108      	bne.n	800c208 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	4a27      	ldr	r2, [pc, #156]	@ (800c298 <TIM_Base_SetConfig+0x118>)
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4313      	orrs	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2280      	movs	r2, #128	@ 0x80
 800c20c:	4393      	bics	r3, r2
 800c20e:	001a      	movs	r2, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	4313      	orrs	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	689a      	ldr	r2, [r3, #8]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a13      	ldr	r2, [pc, #76]	@ (800c280 <TIM_Base_SetConfig+0x100>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d00b      	beq.n	800c24e <TIM_Base_SetConfig+0xce>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a14      	ldr	r2, [pc, #80]	@ (800c28c <TIM_Base_SetConfig+0x10c>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d007      	beq.n	800c24e <TIM_Base_SetConfig+0xce>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a13      	ldr	r2, [pc, #76]	@ (800c290 <TIM_Base_SetConfig+0x110>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d003      	beq.n	800c24e <TIM_Base_SetConfig+0xce>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a12      	ldr	r2, [pc, #72]	@ (800c294 <TIM_Base_SetConfig+0x114>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d103      	bne.n	800c256 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2201      	movs	r2, #1
 800c25a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	2201      	movs	r2, #1
 800c262:	4013      	ands	r3, r2
 800c264:	2b01      	cmp	r3, #1
 800c266:	d106      	bne.n	800c276 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	2201      	movs	r2, #1
 800c26e:	4393      	bics	r3, r2
 800c270:	001a      	movs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	611a      	str	r2, [r3, #16]
  }
}
 800c276:	46c0      	nop			@ (mov r8, r8)
 800c278:	46bd      	mov	sp, r7
 800c27a:	b004      	add	sp, #16
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	46c0      	nop			@ (mov r8, r8)
 800c280:	40012c00 	.word	0x40012c00
 800c284:	40000400 	.word	0x40000400
 800c288:	40002000 	.word	0x40002000
 800c28c:	40014000 	.word	0x40014000
 800c290:	40014400 	.word	0x40014400
 800c294:	40014800 	.word	0x40014800
 800c298:	fffffcff 	.word	0xfffffcff

0800c29c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
 800c2ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	4393      	bics	r3, r2
 800c2b6:	001a      	movs	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	22f0      	movs	r2, #240	@ 0xf0
 800c2c6:	4393      	bics	r3, r2
 800c2c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	220a      	movs	r2, #10
 800c2d8:	4393      	bics	r3, r2
 800c2da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	621a      	str	r2, [r3, #32]
}
 800c2f0:	46c0      	nop			@ (mov r8, r8)
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	b006      	add	sp, #24
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6a1b      	ldr	r3, [r3, #32]
 800c308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	2210      	movs	r2, #16
 800c310:	4393      	bics	r3, r2
 800c312:	001a      	movs	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	4a0d      	ldr	r2, [pc, #52]	@ (800c358 <TIM_TI2_ConfigInputStage+0x60>)
 800c322:	4013      	ands	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	031b      	lsls	r3, r3, #12
 800c32a:	693a      	ldr	r2, [r7, #16]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	22a0      	movs	r2, #160	@ 0xa0
 800c334:	4393      	bics	r3, r2
 800c336:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	4313      	orrs	r3, r2
 800c340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	621a      	str	r2, [r3, #32]
}
 800c34e:	46c0      	nop			@ (mov r8, r8)
 800c350:	46bd      	mov	sp, r7
 800c352:	b006      	add	sp, #24
 800c354:	bd80      	pop	{r7, pc}
 800c356:	46c0      	nop			@ (mov r8, r8)
 800c358:	ffff0fff 	.word	0xffff0fff

0800c35c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	4a08      	ldr	r2, [pc, #32]	@ (800c390 <TIM_ITRx_SetConfig+0x34>)
 800c370:	4013      	ands	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	4313      	orrs	r3, r2
 800c37a:	2207      	movs	r2, #7
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	609a      	str	r2, [r3, #8]
}
 800c386:	46c0      	nop			@ (mov r8, r8)
 800c388:	46bd      	mov	sp, r7
 800c38a:	b004      	add	sp, #16
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	46c0      	nop			@ (mov r8, r8)
 800c390:	ffcfff8f 	.word	0xffcfff8f

0800c394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	4a09      	ldr	r2, [pc, #36]	@ (800c3d0 <TIM_ETR_SetConfig+0x3c>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	021a      	lsls	r2, r3, #8
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	431a      	orrs	r2, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	609a      	str	r2, [r3, #8]
}
 800c3c8:	46c0      	nop			@ (mov r8, r8)
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	b006      	add	sp, #24
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	ffff00ff 	.word	0xffff00ff

0800c3d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	223c      	movs	r2, #60	@ 0x3c
 800c3e2:	5c9b      	ldrb	r3, [r3, r2]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d101      	bne.n	800c3ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	e055      	b.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	223c      	movs	r2, #60	@ 0x3c
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	223d      	movs	r2, #61	@ 0x3d
 800c3f8:	2102      	movs	r1, #2
 800c3fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a23      	ldr	r2, [pc, #140]	@ (800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d108      	bne.n	800c428 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4a22      	ldr	r2, [pc, #136]	@ (800c4a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c41a:	4013      	ands	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2270      	movs	r2, #112	@ 0x70
 800c42c:	4393      	bics	r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	4313      	orrs	r3, r2
 800c438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a16      	ldr	r2, [pc, #88]	@ (800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d00f      	beq.n	800c46c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	2380      	movs	r3, #128	@ 0x80
 800c452:	05db      	lsls	r3, r3, #23
 800c454:	429a      	cmp	r2, r3
 800c456:	d009      	beq.n	800c46c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a12      	ldr	r2, [pc, #72]	@ (800c4a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d004      	beq.n	800c46c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a11      	ldr	r2, [pc, #68]	@ (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d10c      	bne.n	800c486 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2280      	movs	r2, #128	@ 0x80
 800c470:	4393      	bics	r3, r2
 800c472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	223d      	movs	r2, #61	@ 0x3d
 800c48a:	2101      	movs	r1, #1
 800c48c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	223c      	movs	r2, #60	@ 0x3c
 800c492:	2100      	movs	r1, #0
 800c494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	0018      	movs	r0, r3
 800c49a:	46bd      	mov	sp, r7
 800c49c:	b004      	add	sp, #16
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	40012c00 	.word	0x40012c00
 800c4a4:	ff0fffff 	.word	0xff0fffff
 800c4a8:	40000400 	.word	0x40000400
 800c4ac:	40014000 	.word	0x40014000

0800c4b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4b8:	46c0      	nop			@ (mov r8, r8)
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	b002      	add	sp, #8
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4c8:	46c0      	nop			@ (mov r8, r8)
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	b002      	add	sp, #8
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4d8:	46c0      	nop			@ (mov r8, r8)
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	b002      	add	sp, #8
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e046      	b.n	800c580 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2288      	movs	r2, #136	@ 0x88
 800c4f6:	589b      	ldr	r3, [r3, r2]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d107      	bne.n	800c50c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2284      	movs	r2, #132	@ 0x84
 800c500:	2100      	movs	r1, #0
 800c502:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	0018      	movs	r0, r3
 800c508:	f7fb fa4a 	bl	80079a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2288      	movs	r2, #136	@ 0x88
 800c510:	2124      	movs	r1, #36	@ 0x24
 800c512:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2101      	movs	r1, #1
 800c520:	438a      	bics	r2, r1
 800c522:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	0018      	movs	r0, r3
 800c530:	f001 f882 	bl	800d638 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	0018      	movs	r0, r3
 800c538:	f000 fdc0 	bl	800d0bc <UART_SetConfig>
 800c53c:	0003      	movs	r3, r0
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d101      	bne.n	800c546 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e01c      	b.n	800c580 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	490d      	ldr	r1, [pc, #52]	@ (800c588 <HAL_UART_Init+0xa8>)
 800c552:	400a      	ands	r2, r1
 800c554:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	212a      	movs	r1, #42	@ 0x2a
 800c562:	438a      	bics	r2, r1
 800c564:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2101      	movs	r1, #1
 800c572:	430a      	orrs	r2, r1
 800c574:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	0018      	movs	r0, r3
 800c57a:	f001 f911 	bl	800d7a0 <UART_CheckIdleState>
 800c57e:	0003      	movs	r3, r0
}
 800c580:	0018      	movs	r0, r3
 800c582:	46bd      	mov	sp, r7
 800c584:	b002      	add	sp, #8
 800c586:	bd80      	pop	{r7, pc}
 800c588:	ffffb7ff 	.word	0xffffb7ff

0800c58c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08a      	sub	sp, #40	@ 0x28
 800c590:	af02      	add	r7, sp, #8
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	603b      	str	r3, [r7, #0]
 800c598:	1dbb      	adds	r3, r7, #6
 800c59a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2288      	movs	r2, #136	@ 0x88
 800c5a0:	589b      	ldr	r3, [r3, r2]
 800c5a2:	2b20      	cmp	r3, #32
 800c5a4:	d000      	beq.n	800c5a8 <HAL_UART_Transmit+0x1c>
 800c5a6:	e090      	b.n	800c6ca <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <HAL_UART_Transmit+0x2a>
 800c5ae:	1dbb      	adds	r3, r7, #6
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e088      	b.n	800c6cc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	689a      	ldr	r2, [r3, #8]
 800c5be:	2380      	movs	r3, #128	@ 0x80
 800c5c0:	015b      	lsls	r3, r3, #5
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d109      	bne.n	800c5da <HAL_UART_Transmit+0x4e>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d105      	bne.n	800c5da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	d001      	beq.n	800c5da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e078      	b.n	800c6cc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2290      	movs	r2, #144	@ 0x90
 800c5de:	2100      	movs	r1, #0
 800c5e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2288      	movs	r2, #136	@ 0x88
 800c5e6:	2121      	movs	r1, #33	@ 0x21
 800c5e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5ea:	f7fb fb89 	bl	8007d00 <HAL_GetTick>
 800c5ee:	0003      	movs	r3, r0
 800c5f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	1dba      	adds	r2, r7, #6
 800c5f6:	2154      	movs	r1, #84	@ 0x54
 800c5f8:	8812      	ldrh	r2, [r2, #0]
 800c5fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	1dba      	adds	r2, r7, #6
 800c600:	2156      	movs	r1, #86	@ 0x56
 800c602:	8812      	ldrh	r2, [r2, #0]
 800c604:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	689a      	ldr	r2, [r3, #8]
 800c60a:	2380      	movs	r3, #128	@ 0x80
 800c60c:	015b      	lsls	r3, r3, #5
 800c60e:	429a      	cmp	r2, r3
 800c610:	d108      	bne.n	800c624 <HAL_UART_Transmit+0x98>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d104      	bne.n	800c624 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	61bb      	str	r3, [r7, #24]
 800c622:	e003      	b.n	800c62c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c628:	2300      	movs	r3, #0
 800c62a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c62c:	e030      	b.n	800c690 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	0013      	movs	r3, r2
 800c638:	2200      	movs	r2, #0
 800c63a:	2180      	movs	r1, #128	@ 0x80
 800c63c:	f001 f95a 	bl	800d8f4 <UART_WaitOnFlagUntilTimeout>
 800c640:	1e03      	subs	r3, r0, #0
 800c642:	d005      	beq.n	800c650 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2288      	movs	r2, #136	@ 0x88
 800c648:	2120      	movs	r1, #32
 800c64a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e03d      	b.n	800c6cc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10b      	bne.n	800c66e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	001a      	movs	r2, r3
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	05d2      	lsls	r2, r2, #23
 800c662:	0dd2      	lsrs	r2, r2, #23
 800c664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	3302      	adds	r3, #2
 800c66a:	61bb      	str	r3, [r7, #24]
 800c66c:	e007      	b.n	800c67e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	781a      	ldrb	r2, [r3, #0]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	3301      	adds	r3, #1
 800c67c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2256      	movs	r2, #86	@ 0x56
 800c682:	5a9b      	ldrh	r3, [r3, r2]
 800c684:	b29b      	uxth	r3, r3
 800c686:	3b01      	subs	r3, #1
 800c688:	b299      	uxth	r1, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2256      	movs	r2, #86	@ 0x56
 800c68e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2256      	movs	r2, #86	@ 0x56
 800c694:	5a9b      	ldrh	r3, [r3, r2]
 800c696:	b29b      	uxth	r3, r3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1c8      	bne.n	800c62e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	0013      	movs	r3, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2140      	movs	r1, #64	@ 0x40
 800c6aa:	f001 f923 	bl	800d8f4 <UART_WaitOnFlagUntilTimeout>
 800c6ae:	1e03      	subs	r3, r0, #0
 800c6b0:	d005      	beq.n	800c6be <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2288      	movs	r2, #136	@ 0x88
 800c6b6:	2120      	movs	r1, #32
 800c6b8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	e006      	b.n	800c6cc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2288      	movs	r2, #136	@ 0x88
 800c6c2:	2120      	movs	r1, #32
 800c6c4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e000      	b.n	800c6cc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800c6ca:	2302      	movs	r3, #2
  }
}
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	b008      	add	sp, #32
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08c      	sub	sp, #48	@ 0x30
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	1dbb      	adds	r3, r7, #6
 800c6e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2288      	movs	r2, #136	@ 0x88
 800c6e6:	589b      	ldr	r3, [r3, r2]
 800c6e8:	2b20      	cmp	r3, #32
 800c6ea:	d000      	beq.n	800c6ee <HAL_UART_Transmit_IT+0x1a>
 800c6ec:	e08d      	b.n	800c80a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_UART_Transmit_IT+0x28>
 800c6f4:	1dbb      	adds	r3, r7, #6
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e085      	b.n	800c80c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	2380      	movs	r3, #128	@ 0x80
 800c706:	015b      	lsls	r3, r3, #5
 800c708:	429a      	cmp	r2, r3
 800c70a:	d109      	bne.n	800c720 <HAL_UART_Transmit_IT+0x4c>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2201      	movs	r2, #1
 800c718:	4013      	ands	r3, r2
 800c71a:	d001      	beq.n	800c720 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e075      	b.n	800c80c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	1dba      	adds	r2, r7, #6
 800c72a:	2154      	movs	r1, #84	@ 0x54
 800c72c:	8812      	ldrh	r2, [r2, #0]
 800c72e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	1dba      	adds	r2, r7, #6
 800c734:	2156      	movs	r1, #86	@ 0x56
 800c736:	8812      	ldrh	r2, [r2, #0]
 800c738:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2290      	movs	r2, #144	@ 0x90
 800c744:	2100      	movs	r1, #0
 800c746:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2288      	movs	r2, #136	@ 0x88
 800c74c:	2121      	movs	r1, #33	@ 0x21
 800c74e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c754:	2380      	movs	r3, #128	@ 0x80
 800c756:	059b      	lsls	r3, r3, #22
 800c758:	429a      	cmp	r2, r3
 800c75a:	d12a      	bne.n	800c7b2 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	2380      	movs	r3, #128	@ 0x80
 800c762:	015b      	lsls	r3, r3, #5
 800c764:	429a      	cmp	r2, r3
 800c766:	d107      	bne.n	800c778 <HAL_UART_Transmit_IT+0xa4>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4a28      	ldr	r2, [pc, #160]	@ (800c814 <HAL_UART_Transmit_IT+0x140>)
 800c774:	679a      	str	r2, [r3, #120]	@ 0x78
 800c776:	e002      	b.n	800c77e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	4a27      	ldr	r2, [pc, #156]	@ (800c818 <HAL_UART_Transmit_IT+0x144>)
 800c77c:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c77e:	f3ef 8310 	mrs	r3, PRIMASK
 800c782:	61fb      	str	r3, [r7, #28]
  return(result);
 800c784:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c786:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c788:	2301      	movs	r3, #1
 800c78a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	f383 8810 	msr	PRIMASK, r3
}
 800c792:	46c0      	nop			@ (mov r8, r8)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	689a      	ldr	r2, [r3, #8]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2180      	movs	r1, #128	@ 0x80
 800c7a0:	0409      	lsls	r1, r1, #16
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	609a      	str	r2, [r3, #8]
 800c7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ac:	f383 8810 	msr	PRIMASK, r3
}
 800c7b0:	e029      	b.n	800c806 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	2380      	movs	r3, #128	@ 0x80
 800c7b8:	015b      	lsls	r3, r3, #5
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d107      	bne.n	800c7ce <HAL_UART_Transmit_IT+0xfa>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d103      	bne.n	800c7ce <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	4a14      	ldr	r2, [pc, #80]	@ (800c81c <HAL_UART_Transmit_IT+0x148>)
 800c7ca:	679a      	str	r2, [r3, #120]	@ 0x78
 800c7cc:	e002      	b.n	800c7d4 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	4a13      	ldr	r2, [pc, #76]	@ (800c820 <HAL_UART_Transmit_IT+0x14c>)
 800c7d2:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c7da:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7de:	2301      	movs	r3, #1
 800c7e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f383 8810 	msr	PRIMASK, r3
}
 800c7e8:	46c0      	nop			@ (mov r8, r8)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2180      	movs	r1, #128	@ 0x80
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	f383 8810 	msr	PRIMASK, r3
}
 800c804:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	e000      	b.n	800c80c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800c80a:	2302      	movs	r3, #2
  }
}
 800c80c:	0018      	movs	r0, r3
 800c80e:	46bd      	mov	sp, r7
 800c810:	b00c      	add	sp, #48	@ 0x30
 800c812:	bd80      	pop	{r7, pc}
 800c814:	0800df75 	.word	0x0800df75
 800c818:	0800de89 	.word	0x0800de89
 800c81c:	0800ddcb 	.word	0x0800ddcb
 800c820:	0800dd17 	.word	0x0800dd17

0800c824 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	1dbb      	adds	r3, r7, #6
 800c830:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	228c      	movs	r2, #140	@ 0x8c
 800c836:	589b      	ldr	r3, [r3, r2]
 800c838:	2b20      	cmp	r3, #32
 800c83a:	d14a      	bne.n	800c8d2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_UART_Receive_IT+0x26>
 800c842:	1dbb      	adds	r3, r7, #6
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	e042      	b.n	800c8d4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	689a      	ldr	r2, [r3, #8]
 800c852:	2380      	movs	r3, #128	@ 0x80
 800c854:	015b      	lsls	r3, r3, #5
 800c856:	429a      	cmp	r2, r3
 800c858:	d109      	bne.n	800c86e <HAL_UART_Receive_IT+0x4a>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d105      	bne.n	800c86e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2201      	movs	r2, #1
 800c866:	4013      	ands	r3, r2
 800c868:	d001      	beq.n	800c86e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e032      	b.n	800c8d4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a18      	ldr	r2, [pc, #96]	@ (800c8dc <HAL_UART_Receive_IT+0xb8>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d020      	beq.n	800c8c0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	2380      	movs	r3, #128	@ 0x80
 800c886:	041b      	lsls	r3, r3, #16
 800c888:	4013      	ands	r3, r2
 800c88a:	d019      	beq.n	800c8c0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c88c:	f3ef 8310 	mrs	r3, PRIMASK
 800c890:	613b      	str	r3, [r7, #16]
  return(result);
 800c892:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	2301      	movs	r3, #1
 800c898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f383 8810 	msr	PRIMASK, r3
}
 800c8a0:	46c0      	nop			@ (mov r8, r8)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2180      	movs	r1, #128	@ 0x80
 800c8ae:	04c9      	lsls	r1, r1, #19
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	f383 8810 	msr	PRIMASK, r3
}
 800c8be:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c8c0:	1dbb      	adds	r3, r7, #6
 800c8c2:	881a      	ldrh	r2, [r3, #0]
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f001 f883 	bl	800d9d4 <UART_Start_Receive_IT>
 800c8ce:	0003      	movs	r3, r0
 800c8d0:	e000      	b.n	800c8d4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c8d2:	2302      	movs	r3, #2
  }
}
 800c8d4:	0018      	movs	r0, r3
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b008      	add	sp, #32
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	40008000 	.word	0x40008000

0800c8e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b092      	sub	sp, #72	@ 0x48
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ec:	623b      	str	r3, [r7, #32]
  return(result);
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f8:	f383 8810 	msr	PRIMASK, r3
}
 800c8fc:	46c0      	nop			@ (mov r8, r8)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	494d      	ldr	r1, [pc, #308]	@ (800ca40 <HAL_UART_AbortReceive+0x160>)
 800c90a:	400a      	ands	r2, r1
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c910:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c914:	f383 8810 	msr	PRIMASK, r3
}
 800c918:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c91a:	f3ef 8310 	mrs	r3, PRIMASK
 800c91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c922:	643b      	str	r3, [r7, #64]	@ 0x40
 800c924:	2301      	movs	r3, #1
 800c926:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92a:	f383 8810 	msr	PRIMASK, r3
}
 800c92e:	46c0      	nop			@ (mov r8, r8)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	689a      	ldr	r2, [r3, #8]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4942      	ldr	r1, [pc, #264]	@ (800ca44 <HAL_UART_AbortReceive+0x164>)
 800c93c:	400a      	ands	r2, r1
 800c93e:	609a      	str	r2, [r3, #8]
 800c940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c942:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c946:	f383 8810 	msr	PRIMASK, r3
}
 800c94a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c950:	2b01      	cmp	r3, #1
 800c952:	d118      	bne.n	800c986 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c954:	f3ef 8310 	mrs	r3, PRIMASK
 800c958:	617b      	str	r3, [r7, #20]
  return(result);
 800c95a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c95e:	2301      	movs	r3, #1
 800c960:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	f383 8810 	msr	PRIMASK, r3
}
 800c968:	46c0      	nop			@ (mov r8, r8)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2110      	movs	r1, #16
 800c976:	438a      	bics	r2, r1
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	f383 8810 	msr	PRIMASK, r3
}
 800c984:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	2240      	movs	r2, #64	@ 0x40
 800c98e:	4013      	ands	r3, r2
 800c990:	2b40      	cmp	r3, #64	@ 0x40
 800c992:	d139      	bne.n	800ca08 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c994:	f3ef 8310 	mrs	r3, PRIMASK
 800c998:	60bb      	str	r3, [r7, #8]
  return(result);
 800c99a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c99c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c99e:	2301      	movs	r3, #1
 800c9a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f383 8810 	msr	PRIMASK, r3
}
 800c9a8:	46c0      	nop			@ (mov r8, r8)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2140      	movs	r1, #64	@ 0x40
 800c9b6:	438a      	bics	r2, r1
 800c9b8:	609a      	str	r2, [r3, #8]
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f383 8810 	msr	PRIMASK, r3
}
 800c9c4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2280      	movs	r2, #128	@ 0x80
 800c9ca:	589b      	ldr	r3, [r3, r2]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d01b      	beq.n	800ca08 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2280      	movs	r2, #128	@ 0x80
 800c9d4:	589b      	ldr	r3, [r3, r2]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2280      	movs	r2, #128	@ 0x80
 800c9de:	589b      	ldr	r3, [r3, r2]
 800c9e0:	0018      	movs	r0, r3
 800c9e2:	f7fb fa95 	bl	8007f10 <HAL_DMA_Abort>
 800c9e6:	1e03      	subs	r3, r0, #0
 800c9e8:	d00e      	beq.n	800ca08 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2280      	movs	r2, #128	@ 0x80
 800c9ee:	589b      	ldr	r3, [r3, r2]
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	f7fb fb59 	bl	80080a8 <HAL_DMA_GetError>
 800c9f6:	0003      	movs	r3, r0
 800c9f8:	2b20      	cmp	r3, #32
 800c9fa:	d105      	bne.n	800ca08 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2290      	movs	r2, #144	@ 0x90
 800ca00:	2110      	movs	r1, #16
 800ca02:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ca04:	2303      	movs	r3, #3
 800ca06:	e017      	b.n	800ca38 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	225e      	movs	r2, #94	@ 0x5e
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	220f      	movs	r2, #15
 800ca16:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	699a      	ldr	r2, [r3, #24]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2108      	movs	r1, #8
 800ca24:	430a      	orrs	r2, r1
 800ca26:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	228c      	movs	r2, #140	@ 0x8c
 800ca2c:	2120      	movs	r1, #32
 800ca2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	0018      	movs	r0, r3
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	b012      	add	sp, #72	@ 0x48
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	fffffedf 	.word	0xfffffedf
 800ca44:	effffffe 	.word	0xeffffffe

0800ca48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca48:	b5b0      	push	{r4, r5, r7, lr}
 800ca4a:	b0aa      	sub	sp, #168	@ 0xa8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	22a4      	movs	r2, #164	@ 0xa4
 800ca58:	18b9      	adds	r1, r7, r2
 800ca5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	20a0      	movs	r0, #160	@ 0xa0
 800ca64:	1839      	adds	r1, r7, r0
 800ca66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	249c      	movs	r4, #156	@ 0x9c
 800ca70:	1939      	adds	r1, r7, r4
 800ca72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca74:	0011      	movs	r1, r2
 800ca76:	18bb      	adds	r3, r7, r2
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4aa2      	ldr	r2, [pc, #648]	@ (800cd04 <HAL_UART_IRQHandler+0x2bc>)
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	2298      	movs	r2, #152	@ 0x98
 800ca80:	18bd      	adds	r5, r7, r2
 800ca82:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800ca84:	18bb      	adds	r3, r7, r2
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d11a      	bne.n	800cac2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca8c:	187b      	adds	r3, r7, r1
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2220      	movs	r2, #32
 800ca92:	4013      	ands	r3, r2
 800ca94:	d015      	beq.n	800cac2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca96:	183b      	adds	r3, r7, r0
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2220      	movs	r2, #32
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	d105      	bne.n	800caac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800caa0:	193b      	adds	r3, r7, r4
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	2380      	movs	r3, #128	@ 0x80
 800caa6:	055b      	lsls	r3, r3, #21
 800caa8:	4013      	ands	r3, r2
 800caaa:	d00a      	beq.n	800cac2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d100      	bne.n	800cab6 <HAL_UART_IRQHandler+0x6e>
 800cab4:	e2dc      	b.n	800d070 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	0010      	movs	r0, r2
 800cabe:	4798      	blx	r3
      }
      return;
 800cac0:	e2d6      	b.n	800d070 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cac2:	2398      	movs	r3, #152	@ 0x98
 800cac4:	18fb      	adds	r3, r7, r3
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d100      	bne.n	800cace <HAL_UART_IRQHandler+0x86>
 800cacc:	e122      	b.n	800cd14 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cace:	239c      	movs	r3, #156	@ 0x9c
 800cad0:	18fb      	adds	r3, r7, r3
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a8c      	ldr	r2, [pc, #560]	@ (800cd08 <HAL_UART_IRQHandler+0x2c0>)
 800cad6:	4013      	ands	r3, r2
 800cad8:	d106      	bne.n	800cae8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cada:	23a0      	movs	r3, #160	@ 0xa0
 800cadc:	18fb      	adds	r3, r7, r3
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a8a      	ldr	r2, [pc, #552]	@ (800cd0c <HAL_UART_IRQHandler+0x2c4>)
 800cae2:	4013      	ands	r3, r2
 800cae4:	d100      	bne.n	800cae8 <HAL_UART_IRQHandler+0xa0>
 800cae6:	e115      	b.n	800cd14 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cae8:	23a4      	movs	r3, #164	@ 0xa4
 800caea:	18fb      	adds	r3, r7, r3
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2201      	movs	r2, #1
 800caf0:	4013      	ands	r3, r2
 800caf2:	d012      	beq.n	800cb1a <HAL_UART_IRQHandler+0xd2>
 800caf4:	23a0      	movs	r3, #160	@ 0xa0
 800caf6:	18fb      	adds	r3, r7, r3
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	2380      	movs	r3, #128	@ 0x80
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	4013      	ands	r3, r2
 800cb00:	d00b      	beq.n	800cb1a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2201      	movs	r2, #1
 800cb08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2290      	movs	r2, #144	@ 0x90
 800cb0e:	589b      	ldr	r3, [r3, r2]
 800cb10:	2201      	movs	r2, #1
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2190      	movs	r1, #144	@ 0x90
 800cb18:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb1a:	23a4      	movs	r3, #164	@ 0xa4
 800cb1c:	18fb      	adds	r3, r7, r3
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2202      	movs	r2, #2
 800cb22:	4013      	ands	r3, r2
 800cb24:	d011      	beq.n	800cb4a <HAL_UART_IRQHandler+0x102>
 800cb26:	239c      	movs	r3, #156	@ 0x9c
 800cb28:	18fb      	adds	r3, r7, r3
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	4013      	ands	r3, r2
 800cb30:	d00b      	beq.n	800cb4a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2202      	movs	r2, #2
 800cb38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2290      	movs	r2, #144	@ 0x90
 800cb3e:	589b      	ldr	r3, [r3, r2]
 800cb40:	2204      	movs	r2, #4
 800cb42:	431a      	orrs	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2190      	movs	r1, #144	@ 0x90
 800cb48:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb4a:	23a4      	movs	r3, #164	@ 0xa4
 800cb4c:	18fb      	adds	r3, r7, r3
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2204      	movs	r2, #4
 800cb52:	4013      	ands	r3, r2
 800cb54:	d011      	beq.n	800cb7a <HAL_UART_IRQHandler+0x132>
 800cb56:	239c      	movs	r3, #156	@ 0x9c
 800cb58:	18fb      	adds	r3, r7, r3
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	4013      	ands	r3, r2
 800cb60:	d00b      	beq.n	800cb7a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2204      	movs	r2, #4
 800cb68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2290      	movs	r2, #144	@ 0x90
 800cb6e:	589b      	ldr	r3, [r3, r2]
 800cb70:	2202      	movs	r2, #2
 800cb72:	431a      	orrs	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2190      	movs	r1, #144	@ 0x90
 800cb78:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb7a:	23a4      	movs	r3, #164	@ 0xa4
 800cb7c:	18fb      	adds	r3, r7, r3
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2208      	movs	r2, #8
 800cb82:	4013      	ands	r3, r2
 800cb84:	d017      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb86:	23a0      	movs	r3, #160	@ 0xa0
 800cb88:	18fb      	adds	r3, r7, r3
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2220      	movs	r2, #32
 800cb8e:	4013      	ands	r3, r2
 800cb90:	d105      	bne.n	800cb9e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb92:	239c      	movs	r3, #156	@ 0x9c
 800cb94:	18fb      	adds	r3, r7, r3
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a5b      	ldr	r2, [pc, #364]	@ (800cd08 <HAL_UART_IRQHandler+0x2c0>)
 800cb9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb9c:	d00b      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2208      	movs	r2, #8
 800cba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2290      	movs	r2, #144	@ 0x90
 800cbaa:	589b      	ldr	r3, [r3, r2]
 800cbac:	2208      	movs	r2, #8
 800cbae:	431a      	orrs	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2190      	movs	r1, #144	@ 0x90
 800cbb4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cbb6:	23a4      	movs	r3, #164	@ 0xa4
 800cbb8:	18fb      	adds	r3, r7, r3
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	2380      	movs	r3, #128	@ 0x80
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	d013      	beq.n	800cbec <HAL_UART_IRQHandler+0x1a4>
 800cbc4:	23a0      	movs	r3, #160	@ 0xa0
 800cbc6:	18fb      	adds	r3, r7, r3
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	2380      	movs	r3, #128	@ 0x80
 800cbcc:	04db      	lsls	r3, r3, #19
 800cbce:	4013      	ands	r3, r2
 800cbd0:	d00c      	beq.n	800cbec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2280      	movs	r2, #128	@ 0x80
 800cbd8:	0112      	lsls	r2, r2, #4
 800cbda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2290      	movs	r2, #144	@ 0x90
 800cbe0:	589b      	ldr	r3, [r3, r2]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	431a      	orrs	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2190      	movs	r1, #144	@ 0x90
 800cbea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2290      	movs	r2, #144	@ 0x90
 800cbf0:	589b      	ldr	r3, [r3, r2]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d100      	bne.n	800cbf8 <HAL_UART_IRQHandler+0x1b0>
 800cbf6:	e23d      	b.n	800d074 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbf8:	23a4      	movs	r3, #164	@ 0xa4
 800cbfa:	18fb      	adds	r3, r7, r3
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	4013      	ands	r3, r2
 800cc02:	d015      	beq.n	800cc30 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc04:	23a0      	movs	r3, #160	@ 0xa0
 800cc06:	18fb      	adds	r3, r7, r3
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	d106      	bne.n	800cc1e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc10:	239c      	movs	r3, #156	@ 0x9c
 800cc12:	18fb      	adds	r3, r7, r3
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	2380      	movs	r3, #128	@ 0x80
 800cc18:	055b      	lsls	r3, r3, #21
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	d008      	beq.n	800cc30 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d004      	beq.n	800cc30 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	0010      	movs	r0, r2
 800cc2e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2290      	movs	r2, #144	@ 0x90
 800cc34:	589b      	ldr	r3, [r3, r2]
 800cc36:	2194      	movs	r1, #148	@ 0x94
 800cc38:	187a      	adds	r2, r7, r1
 800cc3a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	2240      	movs	r2, #64	@ 0x40
 800cc44:	4013      	ands	r3, r2
 800cc46:	2b40      	cmp	r3, #64	@ 0x40
 800cc48:	d004      	beq.n	800cc54 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc4a:	187b      	adds	r3, r7, r1
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2228      	movs	r2, #40	@ 0x28
 800cc50:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc52:	d04c      	beq.n	800ccee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	0018      	movs	r0, r3
 800cc58:	f000 ffe0 	bl	800dc1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	2240      	movs	r2, #64	@ 0x40
 800cc64:	4013      	ands	r3, r2
 800cc66:	2b40      	cmp	r3, #64	@ 0x40
 800cc68:	d13c      	bne.n	800cce4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc6a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc6e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800cc70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc72:	2090      	movs	r0, #144	@ 0x90
 800cc74:	183a      	adds	r2, r7, r0
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	2301      	movs	r3, #1
 800cc7a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc7e:	f383 8810 	msr	PRIMASK, r3
}
 800cc82:	46c0      	nop			@ (mov r8, r8)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689a      	ldr	r2, [r3, #8]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2140      	movs	r1, #64	@ 0x40
 800cc90:	438a      	bics	r2, r1
 800cc92:	609a      	str	r2, [r3, #8]
 800cc94:	183b      	adds	r3, r7, r0
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc9c:	f383 8810 	msr	PRIMASK, r3
}
 800cca0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2280      	movs	r2, #128	@ 0x80
 800cca6:	589b      	ldr	r3, [r3, r2]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d016      	beq.n	800ccda <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2280      	movs	r2, #128	@ 0x80
 800ccb0:	589b      	ldr	r3, [r3, r2]
 800ccb2:	4a17      	ldr	r2, [pc, #92]	@ (800cd10 <HAL_UART_IRQHandler+0x2c8>)
 800ccb4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2280      	movs	r2, #128	@ 0x80
 800ccba:	589b      	ldr	r3, [r3, r2]
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	f7fb f989 	bl	8007fd4 <HAL_DMA_Abort_IT>
 800ccc2:	1e03      	subs	r3, r0, #0
 800ccc4:	d01c      	beq.n	800cd00 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2280      	movs	r2, #128	@ 0x80
 800ccca:	589b      	ldr	r3, [r3, r2]
 800cccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	2180      	movs	r1, #128	@ 0x80
 800ccd2:	5852      	ldr	r2, [r2, r1]
 800ccd4:	0010      	movs	r0, r2
 800ccd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccd8:	e012      	b.n	800cd00 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	0018      	movs	r0, r3
 800ccde:	f000 f9d9 	bl	800d094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cce2:	e00d      	b.n	800cd00 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	0018      	movs	r0, r3
 800cce8:	f000 f9d4 	bl	800d094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccec:	e008      	b.n	800cd00 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	f000 f9cf 	bl	800d094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2290      	movs	r2, #144	@ 0x90
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800ccfe:	e1b9      	b.n	800d074 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd00:	46c0      	nop			@ (mov r8, r8)
    return;
 800cd02:	e1b7      	b.n	800d074 <HAL_UART_IRQHandler+0x62c>
 800cd04:	0000080f 	.word	0x0000080f
 800cd08:	10000001 	.word	0x10000001
 800cd0c:	04000120 	.word	0x04000120
 800cd10:	0800dce9 	.word	0x0800dce9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d000      	beq.n	800cd1e <HAL_UART_IRQHandler+0x2d6>
 800cd1c:	e13e      	b.n	800cf9c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd1e:	23a4      	movs	r3, #164	@ 0xa4
 800cd20:	18fb      	adds	r3, r7, r3
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2210      	movs	r2, #16
 800cd26:	4013      	ands	r3, r2
 800cd28:	d100      	bne.n	800cd2c <HAL_UART_IRQHandler+0x2e4>
 800cd2a:	e137      	b.n	800cf9c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd2c:	23a0      	movs	r3, #160	@ 0xa0
 800cd2e:	18fb      	adds	r3, r7, r3
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2210      	movs	r2, #16
 800cd34:	4013      	ands	r3, r2
 800cd36:	d100      	bne.n	800cd3a <HAL_UART_IRQHandler+0x2f2>
 800cd38:	e130      	b.n	800cf9c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2210      	movs	r2, #16
 800cd40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	2240      	movs	r2, #64	@ 0x40
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	2b40      	cmp	r3, #64	@ 0x40
 800cd4e:	d000      	beq.n	800cd52 <HAL_UART_IRQHandler+0x30a>
 800cd50:	e0a4      	b.n	800ce9c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2280      	movs	r2, #128	@ 0x80
 800cd56:	589b      	ldr	r3, [r3, r2]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	217e      	movs	r1, #126	@ 0x7e
 800cd5e:	187b      	adds	r3, r7, r1
 800cd60:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cd62:	187b      	adds	r3, r7, r1
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d100      	bne.n	800cd6c <HAL_UART_IRQHandler+0x324>
 800cd6a:	e185      	b.n	800d078 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	225c      	movs	r2, #92	@ 0x5c
 800cd70:	5a9b      	ldrh	r3, [r3, r2]
 800cd72:	187a      	adds	r2, r7, r1
 800cd74:	8812      	ldrh	r2, [r2, #0]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d300      	bcc.n	800cd7c <HAL_UART_IRQHandler+0x334>
 800cd7a:	e17d      	b.n	800d078 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	187a      	adds	r2, r7, r1
 800cd80:	215e      	movs	r1, #94	@ 0x5e
 800cd82:	8812      	ldrh	r2, [r2, #0]
 800cd84:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2280      	movs	r2, #128	@ 0x80
 800cd8a:	589b      	ldr	r3, [r3, r2]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2220      	movs	r2, #32
 800cd92:	4013      	ands	r3, r2
 800cd94:	d170      	bne.n	800ce78 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd96:	f3ef 8310 	mrs	r3, PRIMASK
 800cd9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cda0:	2301      	movs	r3, #1
 800cda2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cda4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cda6:	f383 8810 	msr	PRIMASK, r3
}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	49b4      	ldr	r1, [pc, #720]	@ (800d088 <HAL_UART_IRQHandler+0x640>)
 800cdb8:	400a      	ands	r2, r1
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cdbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc2:	f383 8810 	msr	PRIMASK, r3
}
 800cdc6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800cdce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdd0:	677b      	str	r3, [r7, #116]	@ 0x74
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdd8:	f383 8810 	msr	PRIMASK, r3
}
 800cddc:	46c0      	nop			@ (mov r8, r8)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2101      	movs	r1, #1
 800cdea:	438a      	bics	r2, r1
 800cdec:	609a      	str	r2, [r3, #8]
 800cdee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdf0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf4:	f383 8810 	msr	PRIMASK, r3
}
 800cdf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdfa:	f3ef 8310 	mrs	r3, PRIMASK
 800cdfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800ce00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce02:	673b      	str	r3, [r7, #112]	@ 0x70
 800ce04:	2301      	movs	r3, #1
 800ce06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce0a:	f383 8810 	msr	PRIMASK, r3
}
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2140      	movs	r1, #64	@ 0x40
 800ce1c:	438a      	bics	r2, r1
 800ce1e:	609a      	str	r2, [r3, #8]
 800ce20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce22:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce26:	f383 8810 	msr	PRIMASK, r3
}
 800ce2a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	228c      	movs	r2, #140	@ 0x8c
 800ce30:	2120      	movs	r1, #32
 800ce32:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800ce40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce44:	2301      	movs	r3, #1
 800ce46:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce4a:	f383 8810 	msr	PRIMASK, r3
}
 800ce4e:	46c0      	nop			@ (mov r8, r8)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2110      	movs	r1, #16
 800ce5c:	438a      	bics	r2, r1
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce66:	f383 8810 	msr	PRIMASK, r3
}
 800ce6a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2280      	movs	r2, #128	@ 0x80
 800ce70:	589b      	ldr	r3, [r3, r2]
 800ce72:	0018      	movs	r0, r3
 800ce74:	f7fb f84c 	bl	8007f10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	225c      	movs	r2, #92	@ 0x5c
 800ce82:	5a9a      	ldrh	r2, [r3, r2]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	215e      	movs	r1, #94	@ 0x5e
 800ce88:	5a5b      	ldrh	r3, [r3, r1]
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	0011      	movs	r1, r2
 800ce94:	0018      	movs	r0, r3
 800ce96:	f000 f905 	bl	800d0a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce9a:	e0ed      	b.n	800d078 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	225c      	movs	r2, #92	@ 0x5c
 800cea0:	5a99      	ldrh	r1, [r3, r2]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	225e      	movs	r2, #94	@ 0x5e
 800cea6:	5a9b      	ldrh	r3, [r3, r2]
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	208e      	movs	r0, #142	@ 0x8e
 800ceac:	183b      	adds	r3, r7, r0
 800ceae:	1a8a      	subs	r2, r1, r2
 800ceb0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	225e      	movs	r2, #94	@ 0x5e
 800ceb6:	5a9b      	ldrh	r3, [r3, r2]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d100      	bne.n	800cec0 <HAL_UART_IRQHandler+0x478>
 800cebe:	e0dd      	b.n	800d07c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800cec0:	183b      	adds	r3, r7, r0
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d100      	bne.n	800ceca <HAL_UART_IRQHandler+0x482>
 800cec8:	e0d8      	b.n	800d07c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceca:	f3ef 8310 	mrs	r3, PRIMASK
 800cece:	60fb      	str	r3, [r7, #12]
  return(result);
 800ced0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ced2:	2488      	movs	r4, #136	@ 0x88
 800ced4:	193a      	adds	r2, r7, r4
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	2301      	movs	r3, #1
 800ceda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	f383 8810 	msr	PRIMASK, r3
}
 800cee2:	46c0      	nop			@ (mov r8, r8)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4967      	ldr	r1, [pc, #412]	@ (800d08c <HAL_UART_IRQHandler+0x644>)
 800cef0:	400a      	ands	r2, r1
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	193b      	adds	r3, r7, r4
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f383 8810 	msr	PRIMASK, r3
}
 800cf00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf02:	f3ef 8310 	mrs	r3, PRIMASK
 800cf06:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf08:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf0a:	2484      	movs	r4, #132	@ 0x84
 800cf0c:	193a      	adds	r2, r7, r4
 800cf0e:	6013      	str	r3, [r2, #0]
 800cf10:	2301      	movs	r3, #1
 800cf12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	f383 8810 	msr	PRIMASK, r3
}
 800cf1a:	46c0      	nop			@ (mov r8, r8)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	495a      	ldr	r1, [pc, #360]	@ (800d090 <HAL_UART_IRQHandler+0x648>)
 800cf28:	400a      	ands	r2, r1
 800cf2a:	609a      	str	r2, [r3, #8]
 800cf2c:	193b      	adds	r3, r7, r4
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	f383 8810 	msr	PRIMASK, r3
}
 800cf38:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	228c      	movs	r2, #140	@ 0x8c
 800cf3e:	2120      	movs	r1, #32
 800cf40:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf4e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf52:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf56:	2480      	movs	r4, #128	@ 0x80
 800cf58:	193a      	adds	r2, r7, r4
 800cf5a:	6013      	str	r3, [r2, #0]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf62:	f383 8810 	msr	PRIMASK, r3
}
 800cf66:	46c0      	nop			@ (mov r8, r8)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2110      	movs	r1, #16
 800cf74:	438a      	bics	r2, r1
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	193b      	adds	r3, r7, r4
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	f383 8810 	msr	PRIMASK, r3
}
 800cf84:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf8c:	183b      	adds	r3, r7, r0
 800cf8e:	881a      	ldrh	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	0011      	movs	r1, r2
 800cf94:	0018      	movs	r0, r3
 800cf96:	f000 f885 	bl	800d0a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf9a:	e06f      	b.n	800d07c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf9c:	23a4      	movs	r3, #164	@ 0xa4
 800cf9e:	18fb      	adds	r3, r7, r3
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	2380      	movs	r3, #128	@ 0x80
 800cfa4:	035b      	lsls	r3, r3, #13
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	d010      	beq.n	800cfcc <HAL_UART_IRQHandler+0x584>
 800cfaa:	239c      	movs	r3, #156	@ 0x9c
 800cfac:	18fb      	adds	r3, r7, r3
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	2380      	movs	r3, #128	@ 0x80
 800cfb2:	03db      	lsls	r3, r3, #15
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	d009      	beq.n	800cfcc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2280      	movs	r2, #128	@ 0x80
 800cfbe:	0352      	lsls	r2, r2, #13
 800cfc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f001 fdfd 	bl	800ebc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfca:	e05a      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cfcc:	23a4      	movs	r3, #164	@ 0xa4
 800cfce:	18fb      	adds	r3, r7, r3
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2280      	movs	r2, #128	@ 0x80
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	d016      	beq.n	800d006 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cfd8:	23a0      	movs	r3, #160	@ 0xa0
 800cfda:	18fb      	adds	r3, r7, r3
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2280      	movs	r2, #128	@ 0x80
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	d106      	bne.n	800cff2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cfe4:	239c      	movs	r3, #156	@ 0x9c
 800cfe6:	18fb      	adds	r3, r7, r3
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	2380      	movs	r3, #128	@ 0x80
 800cfec:	041b      	lsls	r3, r3, #16
 800cfee:	4013      	ands	r3, r2
 800cff0:	d009      	beq.n	800d006 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d042      	beq.n	800d080 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	0010      	movs	r0, r2
 800d002:	4798      	blx	r3
    }
    return;
 800d004:	e03c      	b.n	800d080 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d006:	23a4      	movs	r3, #164	@ 0xa4
 800d008:	18fb      	adds	r3, r7, r3
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2240      	movs	r2, #64	@ 0x40
 800d00e:	4013      	ands	r3, r2
 800d010:	d00a      	beq.n	800d028 <HAL_UART_IRQHandler+0x5e0>
 800d012:	23a0      	movs	r3, #160	@ 0xa0
 800d014:	18fb      	adds	r3, r7, r3
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2240      	movs	r2, #64	@ 0x40
 800d01a:	4013      	ands	r3, r2
 800d01c:	d004      	beq.n	800d028 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	0018      	movs	r0, r3
 800d022:	f001 f821 	bl	800e068 <UART_EndTransmit_IT>
    return;
 800d026:	e02c      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d028:	23a4      	movs	r3, #164	@ 0xa4
 800d02a:	18fb      	adds	r3, r7, r3
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	2380      	movs	r3, #128	@ 0x80
 800d030:	041b      	lsls	r3, r3, #16
 800d032:	4013      	ands	r3, r2
 800d034:	d00b      	beq.n	800d04e <HAL_UART_IRQHandler+0x606>
 800d036:	23a0      	movs	r3, #160	@ 0xa0
 800d038:	18fb      	adds	r3, r7, r3
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	2380      	movs	r3, #128	@ 0x80
 800d03e:	05db      	lsls	r3, r3, #23
 800d040:	4013      	ands	r3, r2
 800d042:	d004      	beq.n	800d04e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	0018      	movs	r0, r3
 800d048:	f001 fdcc 	bl	800ebe4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d04c:	e019      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d04e:	23a4      	movs	r3, #164	@ 0xa4
 800d050:	18fb      	adds	r3, r7, r3
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	2380      	movs	r3, #128	@ 0x80
 800d056:	045b      	lsls	r3, r3, #17
 800d058:	4013      	ands	r3, r2
 800d05a:	d012      	beq.n	800d082 <HAL_UART_IRQHandler+0x63a>
 800d05c:	23a0      	movs	r3, #160	@ 0xa0
 800d05e:	18fb      	adds	r3, r7, r3
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	da0d      	bge.n	800d082 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	0018      	movs	r0, r3
 800d06a:	f001 fdb3 	bl	800ebd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d06e:	e008      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
      return;
 800d070:	46c0      	nop			@ (mov r8, r8)
 800d072:	e006      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
    return;
 800d074:	46c0      	nop			@ (mov r8, r8)
 800d076:	e004      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
      return;
 800d078:	46c0      	nop			@ (mov r8, r8)
 800d07a:	e002      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
      return;
 800d07c:	46c0      	nop			@ (mov r8, r8)
 800d07e:	e000      	b.n	800d082 <HAL_UART_IRQHandler+0x63a>
    return;
 800d080:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d082:	46bd      	mov	sp, r7
 800d084:	b02a      	add	sp, #168	@ 0xa8
 800d086:	bdb0      	pop	{r4, r5, r7, pc}
 800d088:	fffffeff 	.word	0xfffffeff
 800d08c:	fffffedf 	.word	0xfffffedf
 800d090:	effffffe 	.word	0xeffffffe

0800d094 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d09c:	46c0      	nop			@ (mov r8, r8)
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	b002      	add	sp, #8
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	000a      	movs	r2, r1
 800d0ae:	1cbb      	adds	r3, r7, #2
 800d0b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d0b2:	46c0      	nop			@ (mov r8, r8)
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	b002      	add	sp, #8
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0bc:	b5b0      	push	{r4, r5, r7, lr}
 800d0be:	b090      	sub	sp, #64	@ 0x40
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0c4:	231a      	movs	r3, #26
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	189b      	adds	r3, r3, r2
 800d0ca:	19db      	adds	r3, r3, r7
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	431a      	orrs	r2, r3
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4aaf      	ldr	r2, [pc, #700]	@ (800d3ac <UART_SetConfig+0x2f0>)
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	0019      	movs	r1, r3
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0fa:	430b      	orrs	r3, r1
 800d0fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	4aaa      	ldr	r2, [pc, #680]	@ (800d3b0 <UART_SetConfig+0x2f4>)
 800d106:	4013      	ands	r3, r2
 800d108:	0018      	movs	r0, r3
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	68d9      	ldr	r1, [r3, #12]
 800d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	0003      	movs	r3, r0
 800d114:	430b      	orrs	r3, r1
 800d116:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4aa4      	ldr	r2, [pc, #656]	@ (800d3b4 <UART_SetConfig+0x2f8>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d004      	beq.n	800d132 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d12e:	4313      	orrs	r3, r2
 800d130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	4a9f      	ldr	r2, [pc, #636]	@ (800d3b8 <UART_SetConfig+0x2fc>)
 800d13a:	4013      	ands	r3, r2
 800d13c:	0019      	movs	r1, r3
 800d13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d144:	430b      	orrs	r3, r1
 800d146:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14e:	220f      	movs	r2, #15
 800d150:	4393      	bics	r3, r2
 800d152:	0018      	movs	r0, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	0003      	movs	r3, r0
 800d15e:	430b      	orrs	r3, r1
 800d160:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a95      	ldr	r2, [pc, #596]	@ (800d3bc <UART_SetConfig+0x300>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d131      	bne.n	800d1d0 <UART_SetConfig+0x114>
 800d16c:	4b94      	ldr	r3, [pc, #592]	@ (800d3c0 <UART_SetConfig+0x304>)
 800d16e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d170:	2203      	movs	r2, #3
 800d172:	4013      	ands	r3, r2
 800d174:	2b03      	cmp	r3, #3
 800d176:	d01d      	beq.n	800d1b4 <UART_SetConfig+0xf8>
 800d178:	d823      	bhi.n	800d1c2 <UART_SetConfig+0x106>
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d00c      	beq.n	800d198 <UART_SetConfig+0xdc>
 800d17e:	d820      	bhi.n	800d1c2 <UART_SetConfig+0x106>
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <UART_SetConfig+0xce>
 800d184:	2b01      	cmp	r3, #1
 800d186:	d00e      	beq.n	800d1a6 <UART_SetConfig+0xea>
 800d188:	e01b      	b.n	800d1c2 <UART_SetConfig+0x106>
 800d18a:	231b      	movs	r3, #27
 800d18c:	2220      	movs	r2, #32
 800d18e:	189b      	adds	r3, r3, r2
 800d190:	19db      	adds	r3, r3, r7
 800d192:	2200      	movs	r2, #0
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	e0b4      	b.n	800d302 <UART_SetConfig+0x246>
 800d198:	231b      	movs	r3, #27
 800d19a:	2220      	movs	r2, #32
 800d19c:	189b      	adds	r3, r3, r2
 800d19e:	19db      	adds	r3, r3, r7
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e0ad      	b.n	800d302 <UART_SetConfig+0x246>
 800d1a6:	231b      	movs	r3, #27
 800d1a8:	2220      	movs	r2, #32
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	19db      	adds	r3, r3, r7
 800d1ae:	2204      	movs	r2, #4
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	e0a6      	b.n	800d302 <UART_SetConfig+0x246>
 800d1b4:	231b      	movs	r3, #27
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	189b      	adds	r3, r3, r2
 800d1ba:	19db      	adds	r3, r3, r7
 800d1bc:	2208      	movs	r2, #8
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	e09f      	b.n	800d302 <UART_SetConfig+0x246>
 800d1c2:	231b      	movs	r3, #27
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	19db      	adds	r3, r3, r7
 800d1ca:	2210      	movs	r2, #16
 800d1cc:	701a      	strb	r2, [r3, #0]
 800d1ce:	e098      	b.n	800d302 <UART_SetConfig+0x246>
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a7b      	ldr	r2, [pc, #492]	@ (800d3c4 <UART_SetConfig+0x308>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d131      	bne.n	800d23e <UART_SetConfig+0x182>
 800d1da:	4b79      	ldr	r3, [pc, #484]	@ (800d3c0 <UART_SetConfig+0x304>)
 800d1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1de:	220c      	movs	r2, #12
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	2b0c      	cmp	r3, #12
 800d1e4:	d01d      	beq.n	800d222 <UART_SetConfig+0x166>
 800d1e6:	d823      	bhi.n	800d230 <UART_SetConfig+0x174>
 800d1e8:	2b08      	cmp	r3, #8
 800d1ea:	d00c      	beq.n	800d206 <UART_SetConfig+0x14a>
 800d1ec:	d820      	bhi.n	800d230 <UART_SetConfig+0x174>
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <UART_SetConfig+0x13c>
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	d00e      	beq.n	800d214 <UART_SetConfig+0x158>
 800d1f6:	e01b      	b.n	800d230 <UART_SetConfig+0x174>
 800d1f8:	231b      	movs	r3, #27
 800d1fa:	2220      	movs	r2, #32
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	19db      	adds	r3, r3, r7
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	e07d      	b.n	800d302 <UART_SetConfig+0x246>
 800d206:	231b      	movs	r3, #27
 800d208:	2220      	movs	r2, #32
 800d20a:	189b      	adds	r3, r3, r2
 800d20c:	19db      	adds	r3, r3, r7
 800d20e:	2202      	movs	r2, #2
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e076      	b.n	800d302 <UART_SetConfig+0x246>
 800d214:	231b      	movs	r3, #27
 800d216:	2220      	movs	r2, #32
 800d218:	189b      	adds	r3, r3, r2
 800d21a:	19db      	adds	r3, r3, r7
 800d21c:	2204      	movs	r2, #4
 800d21e:	701a      	strb	r2, [r3, #0]
 800d220:	e06f      	b.n	800d302 <UART_SetConfig+0x246>
 800d222:	231b      	movs	r3, #27
 800d224:	2220      	movs	r2, #32
 800d226:	189b      	adds	r3, r3, r2
 800d228:	19db      	adds	r3, r3, r7
 800d22a:	2208      	movs	r2, #8
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e068      	b.n	800d302 <UART_SetConfig+0x246>
 800d230:	231b      	movs	r3, #27
 800d232:	2220      	movs	r2, #32
 800d234:	189b      	adds	r3, r3, r2
 800d236:	19db      	adds	r3, r3, r7
 800d238:	2210      	movs	r2, #16
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	e061      	b.n	800d302 <UART_SetConfig+0x246>
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a61      	ldr	r2, [pc, #388]	@ (800d3c8 <UART_SetConfig+0x30c>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d106      	bne.n	800d256 <UART_SetConfig+0x19a>
 800d248:	231b      	movs	r3, #27
 800d24a:	2220      	movs	r2, #32
 800d24c:	189b      	adds	r3, r3, r2
 800d24e:	19db      	adds	r3, r3, r7
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
 800d254:	e055      	b.n	800d302 <UART_SetConfig+0x246>
 800d256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a5c      	ldr	r2, [pc, #368]	@ (800d3cc <UART_SetConfig+0x310>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d106      	bne.n	800d26e <UART_SetConfig+0x1b2>
 800d260:	231b      	movs	r3, #27
 800d262:	2220      	movs	r2, #32
 800d264:	189b      	adds	r3, r3, r2
 800d266:	19db      	adds	r3, r3, r7
 800d268:	2200      	movs	r2, #0
 800d26a:	701a      	strb	r2, [r3, #0]
 800d26c:	e049      	b.n	800d302 <UART_SetConfig+0x246>
 800d26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a50      	ldr	r2, [pc, #320]	@ (800d3b4 <UART_SetConfig+0x2f8>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d13e      	bne.n	800d2f6 <UART_SetConfig+0x23a>
 800d278:	4b51      	ldr	r3, [pc, #324]	@ (800d3c0 <UART_SetConfig+0x304>)
 800d27a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d27c:	23c0      	movs	r3, #192	@ 0xc0
 800d27e:	011b      	lsls	r3, r3, #4
 800d280:	4013      	ands	r3, r2
 800d282:	22c0      	movs	r2, #192	@ 0xc0
 800d284:	0112      	lsls	r2, r2, #4
 800d286:	4293      	cmp	r3, r2
 800d288:	d027      	beq.n	800d2da <UART_SetConfig+0x21e>
 800d28a:	22c0      	movs	r2, #192	@ 0xc0
 800d28c:	0112      	lsls	r2, r2, #4
 800d28e:	4293      	cmp	r3, r2
 800d290:	d82a      	bhi.n	800d2e8 <UART_SetConfig+0x22c>
 800d292:	2280      	movs	r2, #128	@ 0x80
 800d294:	0112      	lsls	r2, r2, #4
 800d296:	4293      	cmp	r3, r2
 800d298:	d011      	beq.n	800d2be <UART_SetConfig+0x202>
 800d29a:	2280      	movs	r2, #128	@ 0x80
 800d29c:	0112      	lsls	r2, r2, #4
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d822      	bhi.n	800d2e8 <UART_SetConfig+0x22c>
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d004      	beq.n	800d2b0 <UART_SetConfig+0x1f4>
 800d2a6:	2280      	movs	r2, #128	@ 0x80
 800d2a8:	00d2      	lsls	r2, r2, #3
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d00e      	beq.n	800d2cc <UART_SetConfig+0x210>
 800d2ae:	e01b      	b.n	800d2e8 <UART_SetConfig+0x22c>
 800d2b0:	231b      	movs	r3, #27
 800d2b2:	2220      	movs	r2, #32
 800d2b4:	189b      	adds	r3, r3, r2
 800d2b6:	19db      	adds	r3, r3, r7
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e021      	b.n	800d302 <UART_SetConfig+0x246>
 800d2be:	231b      	movs	r3, #27
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	189b      	adds	r3, r3, r2
 800d2c4:	19db      	adds	r3, r3, r7
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	e01a      	b.n	800d302 <UART_SetConfig+0x246>
 800d2cc:	231b      	movs	r3, #27
 800d2ce:	2220      	movs	r2, #32
 800d2d0:	189b      	adds	r3, r3, r2
 800d2d2:	19db      	adds	r3, r3, r7
 800d2d4:	2204      	movs	r2, #4
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	e013      	b.n	800d302 <UART_SetConfig+0x246>
 800d2da:	231b      	movs	r3, #27
 800d2dc:	2220      	movs	r2, #32
 800d2de:	189b      	adds	r3, r3, r2
 800d2e0:	19db      	adds	r3, r3, r7
 800d2e2:	2208      	movs	r2, #8
 800d2e4:	701a      	strb	r2, [r3, #0]
 800d2e6:	e00c      	b.n	800d302 <UART_SetConfig+0x246>
 800d2e8:	231b      	movs	r3, #27
 800d2ea:	2220      	movs	r2, #32
 800d2ec:	189b      	adds	r3, r3, r2
 800d2ee:	19db      	adds	r3, r3, r7
 800d2f0:	2210      	movs	r2, #16
 800d2f2:	701a      	strb	r2, [r3, #0]
 800d2f4:	e005      	b.n	800d302 <UART_SetConfig+0x246>
 800d2f6:	231b      	movs	r3, #27
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	189b      	adds	r3, r3, r2
 800d2fc:	19db      	adds	r3, r3, r7
 800d2fe:	2210      	movs	r2, #16
 800d300:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a2b      	ldr	r2, [pc, #172]	@ (800d3b4 <UART_SetConfig+0x2f8>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d000      	beq.n	800d30e <UART_SetConfig+0x252>
 800d30c:	e0a9      	b.n	800d462 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d30e:	231b      	movs	r3, #27
 800d310:	2220      	movs	r2, #32
 800d312:	189b      	adds	r3, r3, r2
 800d314:	19db      	adds	r3, r3, r7
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b08      	cmp	r3, #8
 800d31a:	d015      	beq.n	800d348 <UART_SetConfig+0x28c>
 800d31c:	dc18      	bgt.n	800d350 <UART_SetConfig+0x294>
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d00d      	beq.n	800d33e <UART_SetConfig+0x282>
 800d322:	dc15      	bgt.n	800d350 <UART_SetConfig+0x294>
 800d324:	2b00      	cmp	r3, #0
 800d326:	d002      	beq.n	800d32e <UART_SetConfig+0x272>
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d005      	beq.n	800d338 <UART_SetConfig+0x27c>
 800d32c:	e010      	b.n	800d350 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d32e:	f7fd f99f 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800d332:	0003      	movs	r3, r0
 800d334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d336:	e014      	b.n	800d362 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d338:	4b25      	ldr	r3, [pc, #148]	@ (800d3d0 <UART_SetConfig+0x314>)
 800d33a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d33c:	e011      	b.n	800d362 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d33e:	f7fd f90b 	bl	800a558 <HAL_RCC_GetSysClockFreq>
 800d342:	0003      	movs	r3, r0
 800d344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d346:	e00c      	b.n	800d362 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d348:	2380      	movs	r3, #128	@ 0x80
 800d34a:	021b      	lsls	r3, r3, #8
 800d34c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d34e:	e008      	b.n	800d362 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800d350:	2300      	movs	r3, #0
 800d352:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d354:	231a      	movs	r3, #26
 800d356:	2220      	movs	r2, #32
 800d358:	189b      	adds	r3, r3, r2
 800d35a:	19db      	adds	r3, r3, r7
 800d35c:	2201      	movs	r2, #1
 800d35e:	701a      	strb	r2, [r3, #0]
        break;
 800d360:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d364:	2b00      	cmp	r3, #0
 800d366:	d100      	bne.n	800d36a <UART_SetConfig+0x2ae>
 800d368:	e14b      	b.n	800d602 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d36e:	4b19      	ldr	r3, [pc, #100]	@ (800d3d4 <UART_SetConfig+0x318>)
 800d370:	0052      	lsls	r2, r2, #1
 800d372:	5ad3      	ldrh	r3, [r2, r3]
 800d374:	0019      	movs	r1, r3
 800d376:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d378:	f7f2 fee2 	bl	8000140 <__udivsi3>
 800d37c:	0003      	movs	r3, r0
 800d37e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	0013      	movs	r3, r2
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	189b      	adds	r3, r3, r2
 800d38a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d305      	bcc.n	800d39c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d398:	429a      	cmp	r2, r3
 800d39a:	d91d      	bls.n	800d3d8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800d39c:	231a      	movs	r3, #26
 800d39e:	2220      	movs	r2, #32
 800d3a0:	189b      	adds	r3, r3, r2
 800d3a2:	19db      	adds	r3, r3, r7
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	e12b      	b.n	800d602 <UART_SetConfig+0x546>
 800d3aa:	46c0      	nop			@ (mov r8, r8)
 800d3ac:	cfff69f3 	.word	0xcfff69f3
 800d3b0:	ffffcfff 	.word	0xffffcfff
 800d3b4:	40008000 	.word	0x40008000
 800d3b8:	11fff4ff 	.word	0x11fff4ff
 800d3bc:	40013800 	.word	0x40013800
 800d3c0:	40021000 	.word	0x40021000
 800d3c4:	40004400 	.word	0x40004400
 800d3c8:	40004800 	.word	0x40004800
 800d3cc:	40004c00 	.word	0x40004c00
 800d3d0:	00f42400 	.word	0x00f42400
 800d3d4:	080172c0 	.word	0x080172c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	2300      	movs	r3, #0
 800d3de:	61fb      	str	r3, [r7, #28]
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3e4:	4b92      	ldr	r3, [pc, #584]	@ (800d630 <UART_SetConfig+0x574>)
 800d3e6:	0052      	lsls	r2, r2, #1
 800d3e8:	5ad3      	ldrh	r3, [r2, r3]
 800d3ea:	613b      	str	r3, [r7, #16]
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	69b8      	ldr	r0, [r7, #24]
 800d3f6:	69f9      	ldr	r1, [r7, #28]
 800d3f8:	f7f3 f890 	bl	800051c <__aeabi_uldivmod>
 800d3fc:	0002      	movs	r2, r0
 800d3fe:	000b      	movs	r3, r1
 800d400:	0e11      	lsrs	r1, r2, #24
 800d402:	021d      	lsls	r5, r3, #8
 800d404:	430d      	orrs	r5, r1
 800d406:	0214      	lsls	r4, r2, #8
 800d408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	085b      	lsrs	r3, r3, #1
 800d40e:	60bb      	str	r3, [r7, #8]
 800d410:	2300      	movs	r3, #0
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	68b8      	ldr	r0, [r7, #8]
 800d416:	68f9      	ldr	r1, [r7, #12]
 800d418:	1900      	adds	r0, r0, r4
 800d41a:	4169      	adcs	r1, r5
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	603b      	str	r3, [r7, #0]
 800d422:	2300      	movs	r3, #0
 800d424:	607b      	str	r3, [r7, #4]
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f7f3 f877 	bl	800051c <__aeabi_uldivmod>
 800d42e:	0002      	movs	r2, r0
 800d430:	000b      	movs	r3, r1
 800d432:	0013      	movs	r3, r2
 800d434:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d438:	23c0      	movs	r3, #192	@ 0xc0
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d309      	bcc.n	800d454 <UART_SetConfig+0x398>
 800d440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d442:	2380      	movs	r3, #128	@ 0x80
 800d444:	035b      	lsls	r3, r3, #13
 800d446:	429a      	cmp	r2, r3
 800d448:	d204      	bcs.n	800d454 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d450:	60da      	str	r2, [r3, #12]
 800d452:	e0d6      	b.n	800d602 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800d454:	231a      	movs	r3, #26
 800d456:	2220      	movs	r2, #32
 800d458:	189b      	adds	r3, r3, r2
 800d45a:	19db      	adds	r3, r3, r7
 800d45c:	2201      	movs	r2, #1
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	e0cf      	b.n	800d602 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d464:	69da      	ldr	r2, [r3, #28]
 800d466:	2380      	movs	r3, #128	@ 0x80
 800d468:	021b      	lsls	r3, r3, #8
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d000      	beq.n	800d470 <UART_SetConfig+0x3b4>
 800d46e:	e070      	b.n	800d552 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800d470:	231b      	movs	r3, #27
 800d472:	2220      	movs	r2, #32
 800d474:	189b      	adds	r3, r3, r2
 800d476:	19db      	adds	r3, r3, r7
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b08      	cmp	r3, #8
 800d47c:	d015      	beq.n	800d4aa <UART_SetConfig+0x3ee>
 800d47e:	dc18      	bgt.n	800d4b2 <UART_SetConfig+0x3f6>
 800d480:	2b04      	cmp	r3, #4
 800d482:	d00d      	beq.n	800d4a0 <UART_SetConfig+0x3e4>
 800d484:	dc15      	bgt.n	800d4b2 <UART_SetConfig+0x3f6>
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <UART_SetConfig+0x3d4>
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d005      	beq.n	800d49a <UART_SetConfig+0x3de>
 800d48e:	e010      	b.n	800d4b2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d490:	f7fd f8ee 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800d494:	0003      	movs	r3, r0
 800d496:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d498:	e014      	b.n	800d4c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d49a:	4b66      	ldr	r3, [pc, #408]	@ (800d634 <UART_SetConfig+0x578>)
 800d49c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d49e:	e011      	b.n	800d4c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4a0:	f7fd f85a 	bl	800a558 <HAL_RCC_GetSysClockFreq>
 800d4a4:	0003      	movs	r3, r0
 800d4a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4a8:	e00c      	b.n	800d4c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4aa:	2380      	movs	r3, #128	@ 0x80
 800d4ac:	021b      	lsls	r3, r3, #8
 800d4ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4b0:	e008      	b.n	800d4c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d4b6:	231a      	movs	r3, #26
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	189b      	adds	r3, r3, r2
 800d4bc:	19db      	adds	r3, r3, r7
 800d4be:	2201      	movs	r2, #1
 800d4c0:	701a      	strb	r2, [r3, #0]
        break;
 800d4c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d100      	bne.n	800d4cc <UART_SetConfig+0x410>
 800d4ca:	e09a      	b.n	800d602 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4d0:	4b57      	ldr	r3, [pc, #348]	@ (800d630 <UART_SetConfig+0x574>)
 800d4d2:	0052      	lsls	r2, r2, #1
 800d4d4:	5ad3      	ldrh	r3, [r2, r3]
 800d4d6:	0019      	movs	r1, r3
 800d4d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d4da:	f7f2 fe31 	bl	8000140 <__udivsi3>
 800d4de:	0003      	movs	r3, r0
 800d4e0:	005a      	lsls	r2, r3, #1
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	085b      	lsrs	r3, r3, #1
 800d4e8:	18d2      	adds	r2, r2, r3
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	0019      	movs	r1, r3
 800d4f0:	0010      	movs	r0, r2
 800d4f2:	f7f2 fe25 	bl	8000140 <__udivsi3>
 800d4f6:	0003      	movs	r3, r0
 800d4f8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fc:	2b0f      	cmp	r3, #15
 800d4fe:	d921      	bls.n	800d544 <UART_SetConfig+0x488>
 800d500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d502:	2380      	movs	r3, #128	@ 0x80
 800d504:	025b      	lsls	r3, r3, #9
 800d506:	429a      	cmp	r2, r3
 800d508:	d21c      	bcs.n	800d544 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	200e      	movs	r0, #14
 800d510:	2420      	movs	r4, #32
 800d512:	1903      	adds	r3, r0, r4
 800d514:	19db      	adds	r3, r3, r7
 800d516:	210f      	movs	r1, #15
 800d518:	438a      	bics	r2, r1
 800d51a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51e:	085b      	lsrs	r3, r3, #1
 800d520:	b29b      	uxth	r3, r3
 800d522:	2207      	movs	r2, #7
 800d524:	4013      	ands	r3, r2
 800d526:	b299      	uxth	r1, r3
 800d528:	1903      	adds	r3, r0, r4
 800d52a:	19db      	adds	r3, r3, r7
 800d52c:	1902      	adds	r2, r0, r4
 800d52e:	19d2      	adds	r2, r2, r7
 800d530:	8812      	ldrh	r2, [r2, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	1902      	adds	r2, r0, r4
 800d53c:	19d2      	adds	r2, r2, r7
 800d53e:	8812      	ldrh	r2, [r2, #0]
 800d540:	60da      	str	r2, [r3, #12]
 800d542:	e05e      	b.n	800d602 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800d544:	231a      	movs	r3, #26
 800d546:	2220      	movs	r2, #32
 800d548:	189b      	adds	r3, r3, r2
 800d54a:	19db      	adds	r3, r3, r7
 800d54c:	2201      	movs	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e057      	b.n	800d602 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d552:	231b      	movs	r3, #27
 800d554:	2220      	movs	r2, #32
 800d556:	189b      	adds	r3, r3, r2
 800d558:	19db      	adds	r3, r3, r7
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	2b08      	cmp	r3, #8
 800d55e:	d015      	beq.n	800d58c <UART_SetConfig+0x4d0>
 800d560:	dc18      	bgt.n	800d594 <UART_SetConfig+0x4d8>
 800d562:	2b04      	cmp	r3, #4
 800d564:	d00d      	beq.n	800d582 <UART_SetConfig+0x4c6>
 800d566:	dc15      	bgt.n	800d594 <UART_SetConfig+0x4d8>
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <UART_SetConfig+0x4b6>
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d005      	beq.n	800d57c <UART_SetConfig+0x4c0>
 800d570:	e010      	b.n	800d594 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d572:	f7fd f87d 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 800d576:	0003      	movs	r3, r0
 800d578:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d57a:	e014      	b.n	800d5a6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d57c:	4b2d      	ldr	r3, [pc, #180]	@ (800d634 <UART_SetConfig+0x578>)
 800d57e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d580:	e011      	b.n	800d5a6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d582:	f7fc ffe9 	bl	800a558 <HAL_RCC_GetSysClockFreq>
 800d586:	0003      	movs	r3, r0
 800d588:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d58a:	e00c      	b.n	800d5a6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d58c:	2380      	movs	r3, #128	@ 0x80
 800d58e:	021b      	lsls	r3, r3, #8
 800d590:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d592:	e008      	b.n	800d5a6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800d594:	2300      	movs	r3, #0
 800d596:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d598:	231a      	movs	r3, #26
 800d59a:	2220      	movs	r2, #32
 800d59c:	189b      	adds	r3, r3, r2
 800d59e:	19db      	adds	r3, r3, r7
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	701a      	strb	r2, [r3, #0]
        break;
 800d5a4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d02a      	beq.n	800d602 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5b0:	4b1f      	ldr	r3, [pc, #124]	@ (800d630 <UART_SetConfig+0x574>)
 800d5b2:	0052      	lsls	r2, r2, #1
 800d5b4:	5ad3      	ldrh	r3, [r2, r3]
 800d5b6:	0019      	movs	r1, r3
 800d5b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d5ba:	f7f2 fdc1 	bl	8000140 <__udivsi3>
 800d5be:	0003      	movs	r3, r0
 800d5c0:	001a      	movs	r2, r3
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	085b      	lsrs	r3, r3, #1
 800d5c8:	18d2      	adds	r2, r2, r3
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	0019      	movs	r1, r3
 800d5d0:	0010      	movs	r0, r2
 800d5d2:	f7f2 fdb5 	bl	8000140 <__udivsi3>
 800d5d6:	0003      	movs	r3, r0
 800d5d8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	2b0f      	cmp	r3, #15
 800d5de:	d90a      	bls.n	800d5f6 <UART_SetConfig+0x53a>
 800d5e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5e2:	2380      	movs	r3, #128	@ 0x80
 800d5e4:	025b      	lsls	r3, r3, #9
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d205      	bcs.n	800d5f6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	60da      	str	r2, [r3, #12]
 800d5f4:	e005      	b.n	800d602 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800d5f6:	231a      	movs	r3, #26
 800d5f8:	2220      	movs	r2, #32
 800d5fa:	189b      	adds	r3, r3, r2
 800d5fc:	19db      	adds	r3, r3, r7
 800d5fe:	2201      	movs	r2, #1
 800d600:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	226a      	movs	r2, #106	@ 0x6a
 800d606:	2101      	movs	r1, #1
 800d608:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60c:	2268      	movs	r2, #104	@ 0x68
 800d60e:	2101      	movs	r1, #1
 800d610:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	2200      	movs	r2, #0
 800d616:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61a:	2200      	movs	r2, #0
 800d61c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d61e:	231a      	movs	r3, #26
 800d620:	2220      	movs	r2, #32
 800d622:	189b      	adds	r3, r3, r2
 800d624:	19db      	adds	r3, r3, r7
 800d626:	781b      	ldrb	r3, [r3, #0]
}
 800d628:	0018      	movs	r0, r3
 800d62a:	46bd      	mov	sp, r7
 800d62c:	b010      	add	sp, #64	@ 0x40
 800d62e:	bdb0      	pop	{r4, r5, r7, pc}
 800d630:	080172c0 	.word	0x080172c0
 800d634:	00f42400 	.word	0x00f42400

0800d638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d644:	2208      	movs	r2, #8
 800d646:	4013      	ands	r3, r2
 800d648:	d00b      	beq.n	800d662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	4a4a      	ldr	r2, [pc, #296]	@ (800d77c <UART_AdvFeatureConfig+0x144>)
 800d652:	4013      	ands	r3, r2
 800d654:	0019      	movs	r1, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	430a      	orrs	r2, r1
 800d660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d666:	2201      	movs	r2, #1
 800d668:	4013      	ands	r3, r2
 800d66a:	d00b      	beq.n	800d684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	4a43      	ldr	r2, [pc, #268]	@ (800d780 <UART_AdvFeatureConfig+0x148>)
 800d674:	4013      	ands	r3, r2
 800d676:	0019      	movs	r1, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	430a      	orrs	r2, r1
 800d682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d688:	2202      	movs	r2, #2
 800d68a:	4013      	ands	r3, r2
 800d68c:	d00b      	beq.n	800d6a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	4a3b      	ldr	r2, [pc, #236]	@ (800d784 <UART_AdvFeatureConfig+0x14c>)
 800d696:	4013      	ands	r3, r2
 800d698:	0019      	movs	r1, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6aa:	2204      	movs	r2, #4
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	d00b      	beq.n	800d6c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	4a34      	ldr	r2, [pc, #208]	@ (800d788 <UART_AdvFeatureConfig+0x150>)
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	0019      	movs	r1, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6cc:	2210      	movs	r2, #16
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	d00b      	beq.n	800d6ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d78c <UART_AdvFeatureConfig+0x154>)
 800d6da:	4013      	ands	r3, r2
 800d6dc:	0019      	movs	r1, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	430a      	orrs	r2, r1
 800d6e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ee:	2220      	movs	r2, #32
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	d00b      	beq.n	800d70c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	4a25      	ldr	r2, [pc, #148]	@ (800d790 <UART_AdvFeatureConfig+0x158>)
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	0019      	movs	r1, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	430a      	orrs	r2, r1
 800d70a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d710:	2240      	movs	r2, #64	@ 0x40
 800d712:	4013      	ands	r3, r2
 800d714:	d01d      	beq.n	800d752 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	4a1d      	ldr	r2, [pc, #116]	@ (800d794 <UART_AdvFeatureConfig+0x15c>)
 800d71e:	4013      	ands	r3, r2
 800d720:	0019      	movs	r1, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	430a      	orrs	r2, r1
 800d72c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	035b      	lsls	r3, r3, #13
 800d736:	429a      	cmp	r2, r3
 800d738:	d10b      	bne.n	800d752 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	4a15      	ldr	r2, [pc, #84]	@ (800d798 <UART_AdvFeatureConfig+0x160>)
 800d742:	4013      	ands	r3, r2
 800d744:	0019      	movs	r1, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	430a      	orrs	r2, r1
 800d750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d756:	2280      	movs	r2, #128	@ 0x80
 800d758:	4013      	ands	r3, r2
 800d75a:	d00b      	beq.n	800d774 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	4a0e      	ldr	r2, [pc, #56]	@ (800d79c <UART_AdvFeatureConfig+0x164>)
 800d764:	4013      	ands	r3, r2
 800d766:	0019      	movs	r1, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	430a      	orrs	r2, r1
 800d772:	605a      	str	r2, [r3, #4]
  }
}
 800d774:	46c0      	nop			@ (mov r8, r8)
 800d776:	46bd      	mov	sp, r7
 800d778:	b002      	add	sp, #8
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	ffff7fff 	.word	0xffff7fff
 800d780:	fffdffff 	.word	0xfffdffff
 800d784:	fffeffff 	.word	0xfffeffff
 800d788:	fffbffff 	.word	0xfffbffff
 800d78c:	ffffefff 	.word	0xffffefff
 800d790:	ffffdfff 	.word	0xffffdfff
 800d794:	ffefffff 	.word	0xffefffff
 800d798:	ff9fffff 	.word	0xff9fffff
 800d79c:	fff7ffff 	.word	0xfff7ffff

0800d7a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b092      	sub	sp, #72	@ 0x48
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2290      	movs	r2, #144	@ 0x90
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7b0:	f7fa faa6 	bl	8007d00 <HAL_GetTick>
 800d7b4:	0003      	movs	r3, r0
 800d7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2208      	movs	r2, #8
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d12d      	bne.n	800d822 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c8:	2280      	movs	r2, #128	@ 0x80
 800d7ca:	0391      	lsls	r1, r2, #14
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	4a47      	ldr	r2, [pc, #284]	@ (800d8ec <UART_CheckIdleState+0x14c>)
 800d7d0:	9200      	str	r2, [sp, #0]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f000 f88e 	bl	800d8f4 <UART_WaitOnFlagUntilTimeout>
 800d7d8:	1e03      	subs	r3, r0, #0
 800d7da:	d022      	beq.n	800d822 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ec:	f383 8810 	msr	PRIMASK, r3
}
 800d7f0:	46c0      	nop			@ (mov r8, r8)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2180      	movs	r1, #128	@ 0x80
 800d7fe:	438a      	bics	r2, r1
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d808:	f383 8810 	msr	PRIMASK, r3
}
 800d80c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2288      	movs	r2, #136	@ 0x88
 800d812:	2120      	movs	r1, #32
 800d814:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2284      	movs	r2, #132	@ 0x84
 800d81a:	2100      	movs	r1, #0
 800d81c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d81e:	2303      	movs	r3, #3
 800d820:	e060      	b.n	800d8e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2204      	movs	r2, #4
 800d82a:	4013      	ands	r3, r2
 800d82c:	2b04      	cmp	r3, #4
 800d82e:	d146      	bne.n	800d8be <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d832:	2280      	movs	r2, #128	@ 0x80
 800d834:	03d1      	lsls	r1, r2, #15
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	4a2c      	ldr	r2, [pc, #176]	@ (800d8ec <UART_CheckIdleState+0x14c>)
 800d83a:	9200      	str	r2, [sp, #0]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f000 f859 	bl	800d8f4 <UART_WaitOnFlagUntilTimeout>
 800d842:	1e03      	subs	r3, r0, #0
 800d844:	d03b      	beq.n	800d8be <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d846:	f3ef 8310 	mrs	r3, PRIMASK
 800d84a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d84c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d850:	2301      	movs	r3, #1
 800d852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	f383 8810 	msr	PRIMASK, r3
}
 800d85a:	46c0      	nop			@ (mov r8, r8)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4922      	ldr	r1, [pc, #136]	@ (800d8f0 <UART_CheckIdleState+0x150>)
 800d868:	400a      	ands	r2, r1
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f383 8810 	msr	PRIMASK, r3
}
 800d876:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d878:	f3ef 8310 	mrs	r3, PRIMASK
 800d87c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d87e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d880:	633b      	str	r3, [r7, #48]	@ 0x30
 800d882:	2301      	movs	r3, #1
 800d884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	f383 8810 	msr	PRIMASK, r3
}
 800d88c:	46c0      	nop			@ (mov r8, r8)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	689a      	ldr	r2, [r3, #8]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2101      	movs	r1, #1
 800d89a:	438a      	bics	r2, r1
 800d89c:	609a      	str	r2, [r3, #8]
 800d89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	f383 8810 	msr	PRIMASK, r3
}
 800d8a8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	228c      	movs	r2, #140	@ 0x8c
 800d8ae:	2120      	movs	r1, #32
 800d8b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2284      	movs	r2, #132	@ 0x84
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e012      	b.n	800d8e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2288      	movs	r2, #136	@ 0x88
 800d8c2:	2120      	movs	r1, #32
 800d8c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	228c      	movs	r2, #140	@ 0x8c
 800d8ca:	2120      	movs	r1, #32
 800d8cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2284      	movs	r2, #132	@ 0x84
 800d8de:	2100      	movs	r1, #0
 800d8e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8e2:	2300      	movs	r3, #0
}
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	b010      	add	sp, #64	@ 0x40
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	01ffffff 	.word	0x01ffffff
 800d8f0:	fffffedf 	.word	0xfffffedf

0800d8f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	603b      	str	r3, [r7, #0]
 800d900:	1dfb      	adds	r3, r7, #7
 800d902:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d904:	e051      	b.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	3301      	adds	r3, #1
 800d90a:	d04e      	beq.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d90c:	f7fa f9f8 	bl	8007d00 <HAL_GetTick>
 800d910:	0002      	movs	r2, r0
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	69ba      	ldr	r2, [r7, #24]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d302      	bcc.n	800d922 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d922:	2303      	movs	r3, #3
 800d924:	e051      	b.n	800d9ca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2204      	movs	r2, #4
 800d92e:	4013      	ands	r3, r2
 800d930:	d03b      	beq.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xb6>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2b80      	cmp	r3, #128	@ 0x80
 800d936:	d038      	beq.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xb6>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b40      	cmp	r3, #64	@ 0x40
 800d93c:	d035      	beq.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	69db      	ldr	r3, [r3, #28]
 800d944:	2208      	movs	r2, #8
 800d946:	4013      	ands	r3, r2
 800d948:	2b08      	cmp	r3, #8
 800d94a:	d111      	bne.n	800d970 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2208      	movs	r2, #8
 800d952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	0018      	movs	r0, r3
 800d958:	f000 f960 	bl	800dc1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2290      	movs	r2, #144	@ 0x90
 800d960:	2108      	movs	r1, #8
 800d962:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2284      	movs	r2, #132	@ 0x84
 800d968:	2100      	movs	r1, #0
 800d96a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d96c:	2301      	movs	r3, #1
 800d96e:	e02c      	b.n	800d9ca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	69da      	ldr	r2, [r3, #28]
 800d976:	2380      	movs	r3, #128	@ 0x80
 800d978:	011b      	lsls	r3, r3, #4
 800d97a:	401a      	ands	r2, r3
 800d97c:	2380      	movs	r3, #128	@ 0x80
 800d97e:	011b      	lsls	r3, r3, #4
 800d980:	429a      	cmp	r2, r3
 800d982:	d112      	bne.n	800d9aa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2280      	movs	r2, #128	@ 0x80
 800d98a:	0112      	lsls	r2, r2, #4
 800d98c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	0018      	movs	r0, r3
 800d992:	f000 f943 	bl	800dc1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2290      	movs	r2, #144	@ 0x90
 800d99a:	2120      	movs	r1, #32
 800d99c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2284      	movs	r2, #132	@ 0x84
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d9a6:	2303      	movs	r3, #3
 800d9a8:	e00f      	b.n	800d9ca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	425a      	negs	r2, r3
 800d9ba:	4153      	adcs	r3, r2
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	001a      	movs	r2, r3
 800d9c0:	1dfb      	adds	r3, r7, #7
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d09e      	beq.n	800d906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	0018      	movs	r0, r3
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	b004      	add	sp, #16
 800d9d0:	bd80      	pop	{r7, pc}
	...

0800d9d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b098      	sub	sp, #96	@ 0x60
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	1dbb      	adds	r3, r7, #6
 800d9e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	1dba      	adds	r2, r7, #6
 800d9ec:	215c      	movs	r1, #92	@ 0x5c
 800d9ee:	8812      	ldrh	r2, [r2, #0]
 800d9f0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	1dba      	adds	r2, r7, #6
 800d9f6:	215e      	movs	r1, #94	@ 0x5e
 800d9f8:	8812      	ldrh	r2, [r2, #0]
 800d9fa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2200      	movs	r2, #0
 800da00:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	689a      	ldr	r2, [r3, #8]
 800da06:	2380      	movs	r3, #128	@ 0x80
 800da08:	015b      	lsls	r3, r3, #5
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d10d      	bne.n	800da2a <UART_Start_Receive_IT+0x56>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d104      	bne.n	800da20 <UART_Start_Receive_IT+0x4c>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2260      	movs	r2, #96	@ 0x60
 800da1a:	497b      	ldr	r1, [pc, #492]	@ (800dc08 <UART_Start_Receive_IT+0x234>)
 800da1c:	5299      	strh	r1, [r3, r2]
 800da1e:	e02e      	b.n	800da7e <UART_Start_Receive_IT+0xaa>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2260      	movs	r2, #96	@ 0x60
 800da24:	21ff      	movs	r1, #255	@ 0xff
 800da26:	5299      	strh	r1, [r3, r2]
 800da28:	e029      	b.n	800da7e <UART_Start_Receive_IT+0xaa>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10d      	bne.n	800da4e <UART_Start_Receive_IT+0x7a>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d104      	bne.n	800da44 <UART_Start_Receive_IT+0x70>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2260      	movs	r2, #96	@ 0x60
 800da3e:	21ff      	movs	r1, #255	@ 0xff
 800da40:	5299      	strh	r1, [r3, r2]
 800da42:	e01c      	b.n	800da7e <UART_Start_Receive_IT+0xaa>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2260      	movs	r2, #96	@ 0x60
 800da48:	217f      	movs	r1, #127	@ 0x7f
 800da4a:	5299      	strh	r1, [r3, r2]
 800da4c:	e017      	b.n	800da7e <UART_Start_Receive_IT+0xaa>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	689a      	ldr	r2, [r3, #8]
 800da52:	2380      	movs	r3, #128	@ 0x80
 800da54:	055b      	lsls	r3, r3, #21
 800da56:	429a      	cmp	r2, r3
 800da58:	d10d      	bne.n	800da76 <UART_Start_Receive_IT+0xa2>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d104      	bne.n	800da6c <UART_Start_Receive_IT+0x98>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2260      	movs	r2, #96	@ 0x60
 800da66:	217f      	movs	r1, #127	@ 0x7f
 800da68:	5299      	strh	r1, [r3, r2]
 800da6a:	e008      	b.n	800da7e <UART_Start_Receive_IT+0xaa>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2260      	movs	r2, #96	@ 0x60
 800da70:	213f      	movs	r1, #63	@ 0x3f
 800da72:	5299      	strh	r1, [r3, r2]
 800da74:	e003      	b.n	800da7e <UART_Start_Receive_IT+0xaa>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2260      	movs	r2, #96	@ 0x60
 800da7a:	2100      	movs	r1, #0
 800da7c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2290      	movs	r2, #144	@ 0x90
 800da82:	2100      	movs	r1, #0
 800da84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	228c      	movs	r2, #140	@ 0x8c
 800da8a:	2122      	movs	r1, #34	@ 0x22
 800da8c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da8e:	f3ef 8310 	mrs	r3, PRIMASK
 800da92:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800da94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da98:	2301      	movs	r3, #1
 800da9a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da9e:	f383 8810 	msr	PRIMASK, r3
}
 800daa2:	46c0      	nop			@ (mov r8, r8)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	689a      	ldr	r2, [r3, #8]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2101      	movs	r1, #1
 800dab0:	430a      	orrs	r2, r1
 800dab2:	609a      	str	r2, [r3, #8]
 800dab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daba:	f383 8810 	msr	PRIMASK, r3
}
 800dabe:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dac4:	2380      	movs	r3, #128	@ 0x80
 800dac6:	059b      	lsls	r3, r3, #22
 800dac8:	429a      	cmp	r2, r3
 800daca:	d150      	bne.n	800db6e <UART_Start_Receive_IT+0x19a>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2268      	movs	r2, #104	@ 0x68
 800dad0:	5a9b      	ldrh	r3, [r3, r2]
 800dad2:	1dba      	adds	r2, r7, #6
 800dad4:	8812      	ldrh	r2, [r2, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d349      	bcc.n	800db6e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	689a      	ldr	r2, [r3, #8]
 800dade:	2380      	movs	r3, #128	@ 0x80
 800dae0:	015b      	lsls	r3, r3, #5
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d107      	bne.n	800daf6 <UART_Start_Receive_IT+0x122>
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d103      	bne.n	800daf6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	4a46      	ldr	r2, [pc, #280]	@ (800dc0c <UART_Start_Receive_IT+0x238>)
 800daf2:	675a      	str	r2, [r3, #116]	@ 0x74
 800daf4:	e002      	b.n	800dafc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	4a45      	ldr	r2, [pc, #276]	@ (800dc10 <UART_Start_Receive_IT+0x23c>)
 800dafa:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d019      	beq.n	800db38 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db04:	f3ef 8310 	mrs	r3, PRIMASK
 800db08:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800db0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db0e:	2301      	movs	r3, #1
 800db10:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db14:	f383 8810 	msr	PRIMASK, r3
}
 800db18:	46c0      	nop			@ (mov r8, r8)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2180      	movs	r1, #128	@ 0x80
 800db26:	0049      	lsls	r1, r1, #1
 800db28:	430a      	orrs	r2, r1
 800db2a:	601a      	str	r2, [r3, #0]
 800db2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db32:	f383 8810 	msr	PRIMASK, r3
}
 800db36:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db38:	f3ef 8310 	mrs	r3, PRIMASK
 800db3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800db3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db40:	657b      	str	r3, [r7, #84]	@ 0x54
 800db42:	2301      	movs	r3, #1
 800db44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	f383 8810 	msr	PRIMASK, r3
}
 800db4c:	46c0      	nop			@ (mov r8, r8)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	689a      	ldr	r2, [r3, #8]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2180      	movs	r1, #128	@ 0x80
 800db5a:	0549      	lsls	r1, r1, #21
 800db5c:	430a      	orrs	r2, r1
 800db5e:	609a      	str	r2, [r3, #8]
 800db60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db62:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db66:	f383 8810 	msr	PRIMASK, r3
}
 800db6a:	46c0      	nop			@ (mov r8, r8)
 800db6c:	e047      	b.n	800dbfe <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	689a      	ldr	r2, [r3, #8]
 800db72:	2380      	movs	r3, #128	@ 0x80
 800db74:	015b      	lsls	r3, r3, #5
 800db76:	429a      	cmp	r2, r3
 800db78:	d107      	bne.n	800db8a <UART_Start_Receive_IT+0x1b6>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d103      	bne.n	800db8a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	4a23      	ldr	r2, [pc, #140]	@ (800dc14 <UART_Start_Receive_IT+0x240>)
 800db86:	675a      	str	r2, [r3, #116]	@ 0x74
 800db88:	e002      	b.n	800db90 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	4a22      	ldr	r2, [pc, #136]	@ (800dc18 <UART_Start_Receive_IT+0x244>)
 800db8e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d019      	beq.n	800dbcc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db98:	f3ef 8310 	mrs	r3, PRIMASK
 800db9c:	61fb      	str	r3, [r7, #28]
  return(result);
 800db9e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dba2:	2301      	movs	r3, #1
 800dba4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	f383 8810 	msr	PRIMASK, r3
}
 800dbac:	46c0      	nop			@ (mov r8, r8)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2190      	movs	r1, #144	@ 0x90
 800dbba:	0049      	lsls	r1, r1, #1
 800dbbc:	430a      	orrs	r2, r1
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc6:	f383 8810 	msr	PRIMASK, r3
}
 800dbca:	e018      	b.n	800dbfe <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbcc:	f3ef 8310 	mrs	r3, PRIMASK
 800dbd0:	613b      	str	r3, [r7, #16]
  return(result);
 800dbd2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbd4:	653b      	str	r3, [r7, #80]	@ 0x50
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f383 8810 	msr	PRIMASK, r3
}
 800dbe0:	46c0      	nop			@ (mov r8, r8)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2120      	movs	r1, #32
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	f383 8810 	msr	PRIMASK, r3
}
 800dbfc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	0018      	movs	r0, r3
 800dc02:	46bd      	mov	sp, r7
 800dc04:	b018      	add	sp, #96	@ 0x60
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	000001ff 	.word	0x000001ff
 800dc0c:	0800e789 	.word	0x0800e789
 800dc10:	0800e449 	.word	0x0800e449
 800dc14:	0800e285 	.word	0x0800e285
 800dc18:	0800e0c1 	.word	0x0800e0c1

0800dc1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08e      	sub	sp, #56	@ 0x38
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc24:	f3ef 8310 	mrs	r3, PRIMASK
 800dc28:	617b      	str	r3, [r7, #20]
  return(result);
 800dc2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc2e:	2301      	movs	r3, #1
 800dc30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	f383 8810 	msr	PRIMASK, r3
}
 800dc38:	46c0      	nop			@ (mov r8, r8)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4926      	ldr	r1, [pc, #152]	@ (800dce0 <UART_EndRxTransfer+0xc4>)
 800dc46:	400a      	ands	r2, r1
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	f383 8810 	msr	PRIMASK, r3
}
 800dc54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc56:	f3ef 8310 	mrs	r3, PRIMASK
 800dc5a:	623b      	str	r3, [r7, #32]
  return(result);
 800dc5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc60:	2301      	movs	r3, #1
 800dc62:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc66:	f383 8810 	msr	PRIMASK, r3
}
 800dc6a:	46c0      	nop			@ (mov r8, r8)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	689a      	ldr	r2, [r3, #8]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	491b      	ldr	r1, [pc, #108]	@ (800dce4 <UART_EndRxTransfer+0xc8>)
 800dc78:	400a      	ands	r2, r1
 800dc7a:	609a      	str	r2, [r3, #8]
 800dc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc82:	f383 8810 	msr	PRIMASK, r3
}
 800dc86:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d118      	bne.n	800dcc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc90:	f3ef 8310 	mrs	r3, PRIMASK
 800dc94:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f383 8810 	msr	PRIMASK, r3
}
 800dca4:	46c0      	nop			@ (mov r8, r8)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2110      	movs	r1, #16
 800dcb2:	438a      	bics	r2, r1
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	f383 8810 	msr	PRIMASK, r3
}
 800dcc0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	228c      	movs	r2, #140	@ 0x8c
 800dcc6:	2120      	movs	r1, #32
 800dcc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	b00e      	add	sp, #56	@ 0x38
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	46c0      	nop			@ (mov r8, r8)
 800dce0:	fffffedf 	.word	0xfffffedf
 800dce4:	effffffe 	.word	0xeffffffe

0800dce8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	225e      	movs	r2, #94	@ 0x5e
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2256      	movs	r2, #86	@ 0x56
 800dd02:	2100      	movs	r1, #0
 800dd04:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	0018      	movs	r0, r3
 800dd0a:	f7ff f9c3 	bl	800d094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd0e:	46c0      	nop			@ (mov r8, r8)
 800dd10:	46bd      	mov	sp, r7
 800dd12:	b004      	add	sp, #16
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b08a      	sub	sp, #40	@ 0x28
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2288      	movs	r2, #136	@ 0x88
 800dd22:	589b      	ldr	r3, [r3, r2]
 800dd24:	2b21      	cmp	r3, #33	@ 0x21
 800dd26:	d14c      	bne.n	800ddc2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2256      	movs	r2, #86	@ 0x56
 800dd2c:	5a9b      	ldrh	r3, [r3, r2]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d132      	bne.n	800dd9a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd34:	f3ef 8310 	mrs	r3, PRIMASK
 800dd38:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dd3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd3e:	2301      	movs	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f383 8810 	msr	PRIMASK, r3
}
 800dd48:	46c0      	nop			@ (mov r8, r8)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2180      	movs	r1, #128	@ 0x80
 800dd56:	438a      	bics	r2, r1
 800dd58:	601a      	str	r2, [r3, #0]
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f383 8810 	msr	PRIMASK, r3
}
 800dd64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd66:	f3ef 8310 	mrs	r3, PRIMASK
 800dd6a:	617b      	str	r3, [r7, #20]
  return(result);
 800dd6c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd6e:	623b      	str	r3, [r7, #32]
 800dd70:	2301      	movs	r3, #1
 800dd72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	f383 8810 	msr	PRIMASK, r3
}
 800dd7a:	46c0      	nop			@ (mov r8, r8)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2140      	movs	r1, #64	@ 0x40
 800dd88:	430a      	orrs	r2, r1
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f383 8810 	msr	PRIMASK, r3
}
 800dd96:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dd98:	e013      	b.n	800ddc2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd9e:	781a      	ldrb	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2256      	movs	r2, #86	@ 0x56
 800ddb4:	5a9b      	ldrh	r3, [r3, r2]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	b299      	uxth	r1, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2256      	movs	r2, #86	@ 0x56
 800ddc0:	5299      	strh	r1, [r3, r2]
}
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	b00a      	add	sp, #40	@ 0x28
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b08c      	sub	sp, #48	@ 0x30
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2288      	movs	r2, #136	@ 0x88
 800ddd6:	589b      	ldr	r3, [r3, r2]
 800ddd8:	2b21      	cmp	r3, #33	@ 0x21
 800ddda:	d151      	bne.n	800de80 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2256      	movs	r2, #86	@ 0x56
 800dde0:	5a9b      	ldrh	r3, [r3, r2]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d132      	bne.n	800de4e <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dde8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddec:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ddf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f383 8810 	msr	PRIMASK, r3
}
 800ddfc:	46c0      	nop			@ (mov r8, r8)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2180      	movs	r1, #128	@ 0x80
 800de0a:	438a      	bics	r2, r1
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f383 8810 	msr	PRIMASK, r3
}
 800de18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de1a:	f3ef 8310 	mrs	r3, PRIMASK
 800de1e:	61bb      	str	r3, [r7, #24]
  return(result);
 800de20:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de22:	627b      	str	r3, [r7, #36]	@ 0x24
 800de24:	2301      	movs	r3, #1
 800de26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	f383 8810 	msr	PRIMASK, r3
}
 800de2e:	46c0      	nop			@ (mov r8, r8)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2140      	movs	r1, #64	@ 0x40
 800de3c:	430a      	orrs	r2, r1
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de44:	6a3b      	ldr	r3, [r7, #32]
 800de46:	f383 8810 	msr	PRIMASK, r3
}
 800de4a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800de4c:	e018      	b.n	800de80 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de56:	881b      	ldrh	r3, [r3, #0]
 800de58:	001a      	movs	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	05d2      	lsls	r2, r2, #23
 800de60:	0dd2      	lsrs	r2, r2, #23
 800de62:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de68:	1c9a      	adds	r2, r3, #2
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2256      	movs	r2, #86	@ 0x56
 800de72:	5a9b      	ldrh	r3, [r3, r2]
 800de74:	b29b      	uxth	r3, r3
 800de76:	3b01      	subs	r3, #1
 800de78:	b299      	uxth	r1, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2256      	movs	r2, #86	@ 0x56
 800de7e:	5299      	strh	r1, [r3, r2]
}
 800de80:	46c0      	nop			@ (mov r8, r8)
 800de82:	46bd      	mov	sp, r7
 800de84:	b00c      	add	sp, #48	@ 0x30
 800de86:	bd80      	pop	{r7, pc}

0800de88 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08c      	sub	sp, #48	@ 0x30
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2288      	movs	r2, #136	@ 0x88
 800de94:	589b      	ldr	r3, [r3, r2]
 800de96:	2b21      	cmp	r3, #33	@ 0x21
 800de98:	d165      	bne.n	800df66 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800de9a:	232e      	movs	r3, #46	@ 0x2e
 800de9c:	18fb      	adds	r3, r7, r3
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	216a      	movs	r1, #106	@ 0x6a
 800dea2:	5a52      	ldrh	r2, [r2, r1]
 800dea4:	801a      	strh	r2, [r3, #0]
 800dea6:	e059      	b.n	800df5c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2256      	movs	r2, #86	@ 0x56
 800deac:	5a9b      	ldrh	r3, [r3, r2]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d133      	bne.n	800df1c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deb4:	f3ef 8310 	mrs	r3, PRIMASK
 800deb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800deba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800debc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800debe:	2301      	movs	r3, #1
 800dec0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	f383 8810 	msr	PRIMASK, r3
}
 800dec8:	46c0      	nop			@ (mov r8, r8)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689a      	ldr	r2, [r3, #8]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4926      	ldr	r1, [pc, #152]	@ (800df70 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800ded6:	400a      	ands	r2, r1
 800ded8:	609a      	str	r2, [r3, #8]
 800deda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dedc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f383 8810 	msr	PRIMASK, r3
}
 800dee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dee6:	f3ef 8310 	mrs	r3, PRIMASK
 800deea:	61bb      	str	r3, [r7, #24]
  return(result);
 800deec:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800deee:	627b      	str	r3, [r7, #36]	@ 0x24
 800def0:	2301      	movs	r3, #1
 800def2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	f383 8810 	msr	PRIMASK, r3
}
 800defa:	46c0      	nop			@ (mov r8, r8)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2140      	movs	r1, #64	@ 0x40
 800df08:	430a      	orrs	r2, r1
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	f383 8810 	msr	PRIMASK, r3
}
 800df16:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800df18:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800df1a:	e024      	b.n	800df66 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	69db      	ldr	r3, [r3, #28]
 800df22:	2280      	movs	r2, #128	@ 0x80
 800df24:	4013      	ands	r3, r2
 800df26:	d013      	beq.n	800df50 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df2c:	781a      	ldrb	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2256      	movs	r2, #86	@ 0x56
 800df42:	5a9b      	ldrh	r3, [r3, r2]
 800df44:	b29b      	uxth	r3, r3
 800df46:	3b01      	subs	r3, #1
 800df48:	b299      	uxth	r1, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2256      	movs	r2, #86	@ 0x56
 800df4e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800df50:	212e      	movs	r1, #46	@ 0x2e
 800df52:	187b      	adds	r3, r7, r1
 800df54:	881a      	ldrh	r2, [r3, #0]
 800df56:	187b      	adds	r3, r7, r1
 800df58:	3a01      	subs	r2, #1
 800df5a:	801a      	strh	r2, [r3, #0]
 800df5c:	232e      	movs	r3, #46	@ 0x2e
 800df5e:	18fb      	adds	r3, r7, r3
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1a0      	bne.n	800dea8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800df66:	46c0      	nop			@ (mov r8, r8)
 800df68:	46bd      	mov	sp, r7
 800df6a:	b00c      	add	sp, #48	@ 0x30
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	46c0      	nop			@ (mov r8, r8)
 800df70:	ff7fffff 	.word	0xff7fffff

0800df74 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08c      	sub	sp, #48	@ 0x30
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2288      	movs	r2, #136	@ 0x88
 800df80:	589b      	ldr	r3, [r3, r2]
 800df82:	2b21      	cmp	r3, #33	@ 0x21
 800df84:	d16a      	bne.n	800e05c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800df86:	232e      	movs	r3, #46	@ 0x2e
 800df88:	18fb      	adds	r3, r7, r3
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	216a      	movs	r1, #106	@ 0x6a
 800df8e:	5a52      	ldrh	r2, [r2, r1]
 800df90:	801a      	strh	r2, [r3, #0]
 800df92:	e05e      	b.n	800e052 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2256      	movs	r2, #86	@ 0x56
 800df98:	5a9b      	ldrh	r3, [r3, r2]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d133      	bne.n	800e008 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfa0:	f3ef 8310 	mrs	r3, PRIMASK
 800dfa4:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfa6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dfa8:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfaa:	2301      	movs	r3, #1
 800dfac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f383 8810 	msr	PRIMASK, r3
}
 800dfb4:	46c0      	nop			@ (mov r8, r8)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	689a      	ldr	r2, [r3, #8]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4928      	ldr	r1, [pc, #160]	@ (800e064 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800dfc2:	400a      	ands	r2, r1
 800dfc4:	609a      	str	r2, [r3, #8]
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	f383 8810 	msr	PRIMASK, r3
}
 800dfd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd6:	617b      	str	r3, [r7, #20]
  return(result);
 800dfd8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dfda:	623b      	str	r3, [r7, #32]
 800dfdc:	2301      	movs	r3, #1
 800dfde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	f383 8810 	msr	PRIMASK, r3
}
 800dfe6:	46c0      	nop			@ (mov r8, r8)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2140      	movs	r1, #64	@ 0x40
 800dff4:	430a      	orrs	r2, r1
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	f383 8810 	msr	PRIMASK, r3
}
 800e002:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800e004:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800e006:	e029      	b.n	800e05c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	69db      	ldr	r3, [r3, #28]
 800e00e:	2280      	movs	r2, #128	@ 0x80
 800e010:	4013      	ands	r3, r2
 800e012:	d018      	beq.n	800e046 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e018:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	001a      	movs	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	05d2      	lsls	r2, r2, #23
 800e026:	0dd2      	lsrs	r2, r2, #23
 800e028:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e02e:	1c9a      	adds	r2, r3, #2
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2256      	movs	r2, #86	@ 0x56
 800e038:	5a9b      	ldrh	r3, [r3, r2]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	3b01      	subs	r3, #1
 800e03e:	b299      	uxth	r1, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2256      	movs	r2, #86	@ 0x56
 800e044:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e046:	212e      	movs	r1, #46	@ 0x2e
 800e048:	187b      	adds	r3, r7, r1
 800e04a:	881a      	ldrh	r2, [r3, #0]
 800e04c:	187b      	adds	r3, r7, r1
 800e04e:	3a01      	subs	r2, #1
 800e050:	801a      	strh	r2, [r3, #0]
 800e052:	232e      	movs	r3, #46	@ 0x2e
 800e054:	18fb      	adds	r3, r7, r3
 800e056:	881b      	ldrh	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d19b      	bne.n	800df94 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800e05c:	46c0      	nop			@ (mov r8, r8)
 800e05e:	46bd      	mov	sp, r7
 800e060:	b00c      	add	sp, #48	@ 0x30
 800e062:	bd80      	pop	{r7, pc}
 800e064:	ff7fffff 	.word	0xff7fffff

0800e068 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e070:	f3ef 8310 	mrs	r3, PRIMASK
 800e074:	60bb      	str	r3, [r7, #8]
  return(result);
 800e076:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e078:	617b      	str	r3, [r7, #20]
 800e07a:	2301      	movs	r3, #1
 800e07c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f383 8810 	msr	PRIMASK, r3
}
 800e084:	46c0      	nop			@ (mov r8, r8)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2140      	movs	r1, #64	@ 0x40
 800e092:	438a      	bics	r2, r1
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	f383 8810 	msr	PRIMASK, r3
}
 800e0a0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2288      	movs	r2, #136	@ 0x88
 800e0a6:	2120      	movs	r1, #32
 800e0a8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	0018      	movs	r0, r3
 800e0b4:	f7f6 ff12 	bl	8004edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0b8:	46c0      	nop			@ (mov r8, r8)
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	b006      	add	sp, #24
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b094      	sub	sp, #80	@ 0x50
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e0c8:	204e      	movs	r0, #78	@ 0x4e
 800e0ca:	183b      	adds	r3, r7, r0
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	2160      	movs	r1, #96	@ 0x60
 800e0d0:	5a52      	ldrh	r2, [r2, r1]
 800e0d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	228c      	movs	r2, #140	@ 0x8c
 800e0d8:	589b      	ldr	r3, [r3, r2]
 800e0da:	2b22      	cmp	r3, #34	@ 0x22
 800e0dc:	d000      	beq.n	800e0e0 <UART_RxISR_8BIT+0x20>
 800e0de:	e0bf      	b.n	800e260 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0e6:	214c      	movs	r1, #76	@ 0x4c
 800e0e8:	187b      	adds	r3, r7, r1
 800e0ea:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e0ec:	187b      	adds	r3, r7, r1
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	183b      	adds	r3, r7, r0
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	b2d9      	uxtb	r1, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0fc:	400a      	ands	r2, r1
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	225e      	movs	r2, #94	@ 0x5e
 800e110:	5a9b      	ldrh	r3, [r3, r2]
 800e112:	b29b      	uxth	r3, r3
 800e114:	3b01      	subs	r3, #1
 800e116:	b299      	uxth	r1, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	225e      	movs	r2, #94	@ 0x5e
 800e11c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	225e      	movs	r2, #94	@ 0x5e
 800e122:	5a9b      	ldrh	r3, [r3, r2]
 800e124:	b29b      	uxth	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d000      	beq.n	800e12c <UART_RxISR_8BIT+0x6c>
 800e12a:	e0a1      	b.n	800e270 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e12c:	f3ef 8310 	mrs	r3, PRIMASK
 800e130:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e134:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e136:	2301      	movs	r3, #1
 800e138:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13c:	f383 8810 	msr	PRIMASK, r3
}
 800e140:	46c0      	nop			@ (mov r8, r8)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	494a      	ldr	r1, [pc, #296]	@ (800e278 <UART_RxISR_8BIT+0x1b8>)
 800e14e:	400a      	ands	r2, r1
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e158:	f383 8810 	msr	PRIMASK, r3
}
 800e15c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e15e:	f3ef 8310 	mrs	r3, PRIMASK
 800e162:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e166:	647b      	str	r3, [r7, #68]	@ 0x44
 800e168:	2301      	movs	r3, #1
 800e16a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e16e:	f383 8810 	msr	PRIMASK, r3
}
 800e172:	46c0      	nop			@ (mov r8, r8)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	689a      	ldr	r2, [r3, #8]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2101      	movs	r1, #1
 800e180:	438a      	bics	r2, r1
 800e182:	609a      	str	r2, [r3, #8]
 800e184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e186:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e18a:	f383 8810 	msr	PRIMASK, r3
}
 800e18e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	228c      	movs	r2, #140	@ 0x8c
 800e194:	2120      	movs	r1, #32
 800e196:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a34      	ldr	r2, [pc, #208]	@ (800e27c <UART_RxISR_8BIT+0x1bc>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d01f      	beq.n	800e1ee <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	2380      	movs	r3, #128	@ 0x80
 800e1b6:	041b      	lsls	r3, r3, #16
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	d018      	beq.n	800e1ee <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e1c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800e1c2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	f383 8810 	msr	PRIMASK, r3
}
 800e1d0:	46c0      	nop			@ (mov r8, r8)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4928      	ldr	r1, [pc, #160]	@ (800e280 <UART_RxISR_8BIT+0x1c0>)
 800e1de:	400a      	ands	r2, r1
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	f383 8810 	msr	PRIMASK, r3
}
 800e1ec:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d12f      	bne.n	800e256 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800e200:	60fb      	str	r3, [r7, #12]
  return(result);
 800e202:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e206:	2301      	movs	r3, #1
 800e208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	f383 8810 	msr	PRIMASK, r3
}
 800e210:	46c0      	nop			@ (mov r8, r8)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2110      	movs	r1, #16
 800e21e:	438a      	bics	r2, r1
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e224:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	f383 8810 	msr	PRIMASK, r3
}
 800e22c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	69db      	ldr	r3, [r3, #28]
 800e234:	2210      	movs	r2, #16
 800e236:	4013      	ands	r3, r2
 800e238:	2b10      	cmp	r3, #16
 800e23a:	d103      	bne.n	800e244 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2210      	movs	r2, #16
 800e242:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	225c      	movs	r2, #92	@ 0x5c
 800e248:	5a9a      	ldrh	r2, [r3, r2]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	0011      	movs	r1, r2
 800e24e:	0018      	movs	r0, r3
 800e250:	f7fe ff28 	bl	800d0a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e254:	e00c      	b.n	800e270 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	0018      	movs	r0, r3
 800e25a:	f7f6 fcff 	bl	8004c5c <HAL_UART_RxCpltCallback>
}
 800e25e:	e007      	b.n	800e270 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	699a      	ldr	r2, [r3, #24]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2108      	movs	r1, #8
 800e26c:	430a      	orrs	r2, r1
 800e26e:	619a      	str	r2, [r3, #24]
}
 800e270:	46c0      	nop			@ (mov r8, r8)
 800e272:	46bd      	mov	sp, r7
 800e274:	b014      	add	sp, #80	@ 0x50
 800e276:	bd80      	pop	{r7, pc}
 800e278:	fffffedf 	.word	0xfffffedf
 800e27c:	40008000 	.word	0x40008000
 800e280:	fbffffff 	.word	0xfbffffff

0800e284 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b094      	sub	sp, #80	@ 0x50
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e28c:	204e      	movs	r0, #78	@ 0x4e
 800e28e:	183b      	adds	r3, r7, r0
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	2160      	movs	r1, #96	@ 0x60
 800e294:	5a52      	ldrh	r2, [r2, r1]
 800e296:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	228c      	movs	r2, #140	@ 0x8c
 800e29c:	589b      	ldr	r3, [r3, r2]
 800e29e:	2b22      	cmp	r3, #34	@ 0x22
 800e2a0:	d000      	beq.n	800e2a4 <UART_RxISR_16BIT+0x20>
 800e2a2:	e0bf      	b.n	800e424 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2aa:	214c      	movs	r1, #76	@ 0x4c
 800e2ac:	187b      	adds	r3, r7, r1
 800e2ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800e2b6:	187b      	adds	r3, r7, r1
 800e2b8:	183a      	adds	r2, r7, r0
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	8812      	ldrh	r2, [r2, #0]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2ca:	1c9a      	adds	r2, r3, #2
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	225e      	movs	r2, #94	@ 0x5e
 800e2d4:	5a9b      	ldrh	r3, [r3, r2]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	b299      	uxth	r1, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	225e      	movs	r2, #94	@ 0x5e
 800e2e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	225e      	movs	r2, #94	@ 0x5e
 800e2e6:	5a9b      	ldrh	r3, [r3, r2]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d000      	beq.n	800e2f0 <UART_RxISR_16BIT+0x6c>
 800e2ee:	e0a1      	b.n	800e434 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f4:	623b      	str	r3, [r7, #32]
  return(result);
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	f383 8810 	msr	PRIMASK, r3
}
 800e304:	46c0      	nop			@ (mov r8, r8)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	494a      	ldr	r1, [pc, #296]	@ (800e43c <UART_RxISR_16BIT+0x1b8>)
 800e312:	400a      	ands	r2, r1
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e318:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31c:	f383 8810 	msr	PRIMASK, r3
}
 800e320:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e322:	f3ef 8310 	mrs	r3, PRIMASK
 800e326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e32a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e32c:	2301      	movs	r3, #1
 800e32e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e332:	f383 8810 	msr	PRIMASK, r3
}
 800e336:	46c0      	nop			@ (mov r8, r8)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689a      	ldr	r2, [r3, #8]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2101      	movs	r1, #1
 800e344:	438a      	bics	r2, r1
 800e346:	609a      	str	r2, [r3, #8]
 800e348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e34a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34e:	f383 8810 	msr	PRIMASK, r3
}
 800e352:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	228c      	movs	r2, #140	@ 0x8c
 800e358:	2120      	movs	r1, #32
 800e35a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a34      	ldr	r2, [pc, #208]	@ (800e440 <UART_RxISR_16BIT+0x1bc>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d01f      	beq.n	800e3b2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	2380      	movs	r3, #128	@ 0x80
 800e37a:	041b      	lsls	r3, r3, #16
 800e37c:	4013      	ands	r3, r2
 800e37e:	d018      	beq.n	800e3b2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e380:	f3ef 8310 	mrs	r3, PRIMASK
 800e384:	617b      	str	r3, [r7, #20]
  return(result);
 800e386:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e38a:	2301      	movs	r3, #1
 800e38c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	f383 8810 	msr	PRIMASK, r3
}
 800e394:	46c0      	nop			@ (mov r8, r8)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4928      	ldr	r1, [pc, #160]	@ (800e444 <UART_RxISR_16BIT+0x1c0>)
 800e3a2:	400a      	ands	r2, r1
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	f383 8810 	msr	PRIMASK, r3
}
 800e3b0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d12f      	bne.n	800e41a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3c0:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3c6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f383 8810 	msr	PRIMASK, r3
}
 800e3d4:	46c0      	nop			@ (mov r8, r8)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2110      	movs	r1, #16
 800e3e2:	438a      	bics	r2, r1
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f383 8810 	msr	PRIMASK, r3
}
 800e3f0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	69db      	ldr	r3, [r3, #28]
 800e3f8:	2210      	movs	r2, #16
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	2b10      	cmp	r3, #16
 800e3fe:	d103      	bne.n	800e408 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2210      	movs	r2, #16
 800e406:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	225c      	movs	r2, #92	@ 0x5c
 800e40c:	5a9a      	ldrh	r2, [r3, r2]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	0011      	movs	r1, r2
 800e412:	0018      	movs	r0, r3
 800e414:	f7fe fe46 	bl	800d0a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e418:	e00c      	b.n	800e434 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	0018      	movs	r0, r3
 800e41e:	f7f6 fc1d 	bl	8004c5c <HAL_UART_RxCpltCallback>
}
 800e422:	e007      	b.n	800e434 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	699a      	ldr	r2, [r3, #24]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2108      	movs	r1, #8
 800e430:	430a      	orrs	r2, r1
 800e432:	619a      	str	r2, [r3, #24]
}
 800e434:	46c0      	nop			@ (mov r8, r8)
 800e436:	46bd      	mov	sp, r7
 800e438:	b014      	add	sp, #80	@ 0x50
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	fffffedf 	.word	0xfffffedf
 800e440:	40008000 	.word	0x40008000
 800e444:	fbffffff 	.word	0xfbffffff

0800e448 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b0a0      	sub	sp, #128	@ 0x80
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e450:	237a      	movs	r3, #122	@ 0x7a
 800e452:	18fb      	adds	r3, r7, r3
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	2160      	movs	r1, #96	@ 0x60
 800e458:	5a52      	ldrh	r2, [r2, r1]
 800e45a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	228c      	movs	r2, #140	@ 0x8c
 800e478:	589b      	ldr	r3, [r3, r2]
 800e47a:	2b22      	cmp	r3, #34	@ 0x22
 800e47c:	d000      	beq.n	800e480 <UART_RxISR_8BIT_FIFOEN+0x38>
 800e47e:	e16a      	b.n	800e756 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e480:	236e      	movs	r3, #110	@ 0x6e
 800e482:	18fb      	adds	r3, r7, r3
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	2168      	movs	r1, #104	@ 0x68
 800e488:	5a52      	ldrh	r2, [r2, r1]
 800e48a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e48c:	e111      	b.n	800e6b2 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e494:	216c      	movs	r1, #108	@ 0x6c
 800e496:	187b      	adds	r3, r7, r1
 800e498:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e49a:	187b      	adds	r3, r7, r1
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	237a      	movs	r3, #122	@ 0x7a
 800e4a2:	18fb      	adds	r3, r7, r3
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	b2d9      	uxtb	r1, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ac:	400a      	ands	r2, r1
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4b6:	1c5a      	adds	r2, r3, #1
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	225e      	movs	r2, #94	@ 0x5e
 800e4c0:	5a9b      	ldrh	r3, [r3, r2]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	b299      	uxth	r1, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	225e      	movs	r2, #94	@ 0x5e
 800e4cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4d8:	2207      	movs	r2, #7
 800e4da:	4013      	ands	r3, r2
 800e4dc:	d049      	beq.n	800e572 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	4013      	ands	r3, r2
 800e4e4:	d010      	beq.n	800e508 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800e4e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e4e8:	2380      	movs	r3, #128	@ 0x80
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	d00b      	beq.n	800e508 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2290      	movs	r2, #144	@ 0x90
 800e4fc:	589b      	ldr	r3, [r3, r2]
 800e4fe:	2201      	movs	r2, #1
 800e500:	431a      	orrs	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2190      	movs	r1, #144	@ 0x90
 800e506:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e50a:	2202      	movs	r2, #2
 800e50c:	4013      	ands	r3, r2
 800e50e:	d00f      	beq.n	800e530 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800e510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e512:	2201      	movs	r2, #1
 800e514:	4013      	ands	r3, r2
 800e516:	d00b      	beq.n	800e530 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2202      	movs	r2, #2
 800e51e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2290      	movs	r2, #144	@ 0x90
 800e524:	589b      	ldr	r3, [r3, r2]
 800e526:	2204      	movs	r2, #4
 800e528:	431a      	orrs	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2190      	movs	r1, #144	@ 0x90
 800e52e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e530:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e532:	2204      	movs	r2, #4
 800e534:	4013      	ands	r3, r2
 800e536:	d00f      	beq.n	800e558 <UART_RxISR_8BIT_FIFOEN+0x110>
 800e538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e53a:	2201      	movs	r2, #1
 800e53c:	4013      	ands	r3, r2
 800e53e:	d00b      	beq.n	800e558 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2204      	movs	r2, #4
 800e546:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2290      	movs	r2, #144	@ 0x90
 800e54c:	589b      	ldr	r3, [r3, r2]
 800e54e:	2202      	movs	r2, #2
 800e550:	431a      	orrs	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2190      	movs	r1, #144	@ 0x90
 800e556:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2290      	movs	r2, #144	@ 0x90
 800e55c:	589b      	ldr	r3, [r3, r2]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d007      	beq.n	800e572 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	0018      	movs	r0, r3
 800e566:	f7fe fd95 	bl	800d094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2290      	movs	r2, #144	@ 0x90
 800e56e:	2100      	movs	r1, #0
 800e570:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	225e      	movs	r2, #94	@ 0x5e
 800e576:	5a9b      	ldrh	r3, [r3, r2]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d000      	beq.n	800e580 <UART_RxISR_8BIT_FIFOEN+0x138>
 800e57e:	e098      	b.n	800e6b2 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e580:	f3ef 8310 	mrs	r3, PRIMASK
 800e584:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800e586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e588:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e58a:	2301      	movs	r3, #1
 800e58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e590:	f383 8810 	msr	PRIMASK, r3
}
 800e594:	46c0      	nop			@ (mov r8, r8)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4973      	ldr	r1, [pc, #460]	@ (800e770 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800e5a2:	400a      	ands	r2, r1
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5a8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ac:	f383 8810 	msr	PRIMASK, r3
}
 800e5b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5b6:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800e5b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5bc:	2301      	movs	r3, #1
 800e5be:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5c2:	f383 8810 	msr	PRIMASK, r3
}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	689a      	ldr	r2, [r3, #8]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4968      	ldr	r1, [pc, #416]	@ (800e774 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800e5d4:	400a      	ands	r2, r1
 800e5d6:	609a      	str	r2, [r3, #8]
 800e5d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5de:	f383 8810 	msr	PRIMASK, r3
}
 800e5e2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	228c      	movs	r2, #140	@ 0x8c
 800e5e8:	2120      	movs	r1, #32
 800e5ea:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a5e      	ldr	r2, [pc, #376]	@ (800e778 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d01f      	beq.n	800e642 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	685a      	ldr	r2, [r3, #4]
 800e608:	2380      	movs	r3, #128	@ 0x80
 800e60a:	041b      	lsls	r3, r3, #16
 800e60c:	4013      	ands	r3, r2
 800e60e:	d018      	beq.n	800e642 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e610:	f3ef 8310 	mrs	r3, PRIMASK
 800e614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800e616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e618:	663b      	str	r3, [r7, #96]	@ 0x60
 800e61a:	2301      	movs	r3, #1
 800e61c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e620:	f383 8810 	msr	PRIMASK, r3
}
 800e624:	46c0      	nop			@ (mov r8, r8)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4952      	ldr	r1, [pc, #328]	@ (800e77c <UART_RxISR_8BIT_FIFOEN+0x334>)
 800e632:	400a      	ands	r2, r1
 800e634:	601a      	str	r2, [r3, #0]
 800e636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e638:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e63c:	f383 8810 	msr	PRIMASK, r3
}
 800e640:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e646:	2b01      	cmp	r3, #1
 800e648:	d12f      	bne.n	800e6aa <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e650:	f3ef 8310 	mrs	r3, PRIMASK
 800e654:	623b      	str	r3, [r7, #32]
  return(result);
 800e656:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e65a:	2301      	movs	r3, #1
 800e65c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e660:	f383 8810 	msr	PRIMASK, r3
}
 800e664:	46c0      	nop			@ (mov r8, r8)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2110      	movs	r1, #16
 800e672:	438a      	bics	r2, r1
 800e674:	601a      	str	r2, [r3, #0]
 800e676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e678:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67c:	f383 8810 	msr	PRIMASK, r3
}
 800e680:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	2210      	movs	r2, #16
 800e68a:	4013      	ands	r3, r2
 800e68c:	2b10      	cmp	r3, #16
 800e68e:	d103      	bne.n	800e698 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2210      	movs	r2, #16
 800e696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	225c      	movs	r2, #92	@ 0x5c
 800e69c:	5a9a      	ldrh	r2, [r3, r2]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	0011      	movs	r1, r2
 800e6a2:	0018      	movs	r0, r3
 800e6a4:	f7fe fcfe 	bl	800d0a4 <HAL_UARTEx_RxEventCallback>
 800e6a8:	e003      	b.n	800e6b2 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f7f6 fad5 	bl	8004c5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6b2:	236e      	movs	r3, #110	@ 0x6e
 800e6b4:	18fb      	adds	r3, r7, r3
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d004      	beq.n	800e6c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 800e6bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6be:	2220      	movs	r2, #32
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	d000      	beq.n	800e6c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 800e6c4:	e6e3      	b.n	800e48e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6c6:	205a      	movs	r0, #90	@ 0x5a
 800e6c8:	183b      	adds	r3, r7, r0
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	215e      	movs	r1, #94	@ 0x5e
 800e6ce:	5a52      	ldrh	r2, [r2, r1]
 800e6d0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6d2:	0001      	movs	r1, r0
 800e6d4:	187b      	adds	r3, r7, r1
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d044      	beq.n	800e766 <UART_RxISR_8BIT_FIFOEN+0x31e>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2268      	movs	r2, #104	@ 0x68
 800e6e0:	5a9b      	ldrh	r3, [r3, r2]
 800e6e2:	187a      	adds	r2, r7, r1
 800e6e4:	8812      	ldrh	r2, [r2, #0]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d23d      	bcs.n	800e766 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f383 8810 	msr	PRIMASK, r3
}
 800e6fe:	46c0      	nop			@ (mov r8, r8)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	689a      	ldr	r2, [r3, #8]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	491d      	ldr	r1, [pc, #116]	@ (800e780 <UART_RxISR_8BIT_FIFOEN+0x338>)
 800e70c:	400a      	ands	r2, r1
 800e70e:	609a      	str	r2, [r3, #8]
 800e710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	f383 8810 	msr	PRIMASK, r3
}
 800e71a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4a19      	ldr	r2, [pc, #100]	@ (800e784 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 800e720:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e722:	f3ef 8310 	mrs	r3, PRIMASK
 800e726:	617b      	str	r3, [r7, #20]
  return(result);
 800e728:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e72a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e72c:	2301      	movs	r3, #1
 800e72e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	f383 8810 	msr	PRIMASK, r3
}
 800e736:	46c0      	nop			@ (mov r8, r8)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2120      	movs	r1, #32
 800e744:	430a      	orrs	r2, r1
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e74a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	f383 8810 	msr	PRIMASK, r3
}
 800e752:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e754:	e007      	b.n	800e766 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	699a      	ldr	r2, [r3, #24]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2108      	movs	r1, #8
 800e762:	430a      	orrs	r2, r1
 800e764:	619a      	str	r2, [r3, #24]
}
 800e766:	46c0      	nop			@ (mov r8, r8)
 800e768:	46bd      	mov	sp, r7
 800e76a:	b020      	add	sp, #128	@ 0x80
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	46c0      	nop			@ (mov r8, r8)
 800e770:	fffffeff 	.word	0xfffffeff
 800e774:	effffffe 	.word	0xeffffffe
 800e778:	40008000 	.word	0x40008000
 800e77c:	fbffffff 	.word	0xfbffffff
 800e780:	efffffff 	.word	0xefffffff
 800e784:	0800e0c1 	.word	0x0800e0c1

0800e788 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b0a2      	sub	sp, #136	@ 0x88
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e790:	2382      	movs	r3, #130	@ 0x82
 800e792:	18fb      	adds	r3, r7, r3
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	2160      	movs	r1, #96	@ 0x60
 800e798:	5a52      	ldrh	r2, [r2, r1]
 800e79a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	69db      	ldr	r3, [r3, #28]
 800e7a2:	2284      	movs	r2, #132	@ 0x84
 800e7a4:	18ba      	adds	r2, r7, r2
 800e7a6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	228c      	movs	r2, #140	@ 0x8c
 800e7bc:	589b      	ldr	r3, [r3, r2]
 800e7be:	2b22      	cmp	r3, #34	@ 0x22
 800e7c0:	d000      	beq.n	800e7c4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800e7c2:	e174      	b.n	800eaae <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e7c4:	2376      	movs	r3, #118	@ 0x76
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	2168      	movs	r1, #104	@ 0x68
 800e7cc:	5a52      	ldrh	r2, [r2, r1]
 800e7ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e7d0:	e119      	b.n	800ea06 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7d8:	2174      	movs	r1, #116	@ 0x74
 800e7da:	187b      	adds	r3, r7, r1
 800e7dc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7e2:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800e7e4:	187b      	adds	r3, r7, r1
 800e7e6:	2282      	movs	r2, #130	@ 0x82
 800e7e8:	18ba      	adds	r2, r7, r2
 800e7ea:	881b      	ldrh	r3, [r3, #0]
 800e7ec:	8812      	ldrh	r2, [r2, #0]
 800e7ee:	4013      	ands	r3, r2
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7fa:	1c9a      	adds	r2, r3, #2
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	225e      	movs	r2, #94	@ 0x5e
 800e804:	5a9b      	ldrh	r3, [r3, r2]
 800e806:	b29b      	uxth	r3, r3
 800e808:	3b01      	subs	r3, #1
 800e80a:	b299      	uxth	r1, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	225e      	movs	r2, #94	@ 0x5e
 800e810:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	2184      	movs	r1, #132	@ 0x84
 800e81a:	187a      	adds	r2, r7, r1
 800e81c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e81e:	187b      	adds	r3, r7, r1
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2207      	movs	r2, #7
 800e824:	4013      	ands	r3, r2
 800e826:	d04e      	beq.n	800e8c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e828:	187b      	adds	r3, r7, r1
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2201      	movs	r2, #1
 800e82e:	4013      	ands	r3, r2
 800e830:	d010      	beq.n	800e854 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800e832:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e834:	2380      	movs	r3, #128	@ 0x80
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	4013      	ands	r3, r2
 800e83a:	d00b      	beq.n	800e854 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2201      	movs	r2, #1
 800e842:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2290      	movs	r2, #144	@ 0x90
 800e848:	589b      	ldr	r3, [r3, r2]
 800e84a:	2201      	movs	r2, #1
 800e84c:	431a      	orrs	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2190      	movs	r1, #144	@ 0x90
 800e852:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e854:	2384      	movs	r3, #132	@ 0x84
 800e856:	18fb      	adds	r3, r7, r3
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2202      	movs	r2, #2
 800e85c:	4013      	ands	r3, r2
 800e85e:	d00f      	beq.n	800e880 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800e860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e862:	2201      	movs	r2, #1
 800e864:	4013      	ands	r3, r2
 800e866:	d00b      	beq.n	800e880 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2202      	movs	r2, #2
 800e86e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2290      	movs	r2, #144	@ 0x90
 800e874:	589b      	ldr	r3, [r3, r2]
 800e876:	2204      	movs	r2, #4
 800e878:	431a      	orrs	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2190      	movs	r1, #144	@ 0x90
 800e87e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e880:	2384      	movs	r3, #132	@ 0x84
 800e882:	18fb      	adds	r3, r7, r3
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2204      	movs	r2, #4
 800e888:	4013      	ands	r3, r2
 800e88a:	d00f      	beq.n	800e8ac <UART_RxISR_16BIT_FIFOEN+0x124>
 800e88c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e88e:	2201      	movs	r2, #1
 800e890:	4013      	ands	r3, r2
 800e892:	d00b      	beq.n	800e8ac <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2204      	movs	r2, #4
 800e89a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2290      	movs	r2, #144	@ 0x90
 800e8a0:	589b      	ldr	r3, [r3, r2]
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	431a      	orrs	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2190      	movs	r1, #144	@ 0x90
 800e8aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2290      	movs	r2, #144	@ 0x90
 800e8b0:	589b      	ldr	r3, [r3, r2]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d007      	beq.n	800e8c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	0018      	movs	r0, r3
 800e8ba:	f7fe fbeb 	bl	800d094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2290      	movs	r2, #144	@ 0x90
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	225e      	movs	r2, #94	@ 0x5e
 800e8ca:	5a9b      	ldrh	r3, [r3, r2]
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d000      	beq.n	800e8d4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800e8d2:	e098      	b.n	800ea06 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8d4:	f3ef 8310 	mrs	r3, PRIMASK
 800e8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800e8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8de:	2301      	movs	r3, #1
 800e8e0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8e4:	f383 8810 	msr	PRIMASK, r3
}
 800e8e8:	46c0      	nop			@ (mov r8, r8)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4974      	ldr	r1, [pc, #464]	@ (800eac8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800e8f6:	400a      	ands	r2, r1
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8fc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e900:	f383 8810 	msr	PRIMASK, r3
}
 800e904:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e906:	f3ef 8310 	mrs	r3, PRIMASK
 800e90a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800e90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e90e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e910:	2301      	movs	r3, #1
 800e912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e916:	f383 8810 	msr	PRIMASK, r3
}
 800e91a:	46c0      	nop			@ (mov r8, r8)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	689a      	ldr	r2, [r3, #8]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	4969      	ldr	r1, [pc, #420]	@ (800eacc <UART_RxISR_16BIT_FIFOEN+0x344>)
 800e928:	400a      	ands	r2, r1
 800e92a:	609a      	str	r2, [r3, #8]
 800e92c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e92e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e932:	f383 8810 	msr	PRIMASK, r3
}
 800e936:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	228c      	movs	r2, #140	@ 0x8c
 800e93c:	2120      	movs	r1, #32
 800e93e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a5f      	ldr	r2, [pc, #380]	@ (800ead0 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d01f      	beq.n	800e996 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	2380      	movs	r3, #128	@ 0x80
 800e95e:	041b      	lsls	r3, r3, #16
 800e960:	4013      	ands	r3, r2
 800e962:	d018      	beq.n	800e996 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e964:	f3ef 8310 	mrs	r3, PRIMASK
 800e968:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e96c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e96e:	2301      	movs	r3, #1
 800e970:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e974:	f383 8810 	msr	PRIMASK, r3
}
 800e978:	46c0      	nop			@ (mov r8, r8)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4953      	ldr	r1, [pc, #332]	@ (800ead4 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800e986:	400a      	ands	r2, r1
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e98c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e990:	f383 8810 	msr	PRIMASK, r3
}
 800e994:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d12f      	bne.n	800e9fe <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e9a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b4:	f383 8810 	msr	PRIMASK, r3
}
 800e9b8:	46c0      	nop			@ (mov r8, r8)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2110      	movs	r1, #16
 800e9c6:	438a      	bics	r2, r1
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d0:	f383 8810 	msr	PRIMASK, r3
}
 800e9d4:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	2210      	movs	r2, #16
 800e9de:	4013      	ands	r3, r2
 800e9e0:	2b10      	cmp	r3, #16
 800e9e2:	d103      	bne.n	800e9ec <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2210      	movs	r2, #16
 800e9ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	225c      	movs	r2, #92	@ 0x5c
 800e9f0:	5a9a      	ldrh	r2, [r3, r2]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	0011      	movs	r1, r2
 800e9f6:	0018      	movs	r0, r3
 800e9f8:	f7fe fb54 	bl	800d0a4 <HAL_UARTEx_RxEventCallback>
 800e9fc:	e003      	b.n	800ea06 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	0018      	movs	r0, r3
 800ea02:	f7f6 f92b 	bl	8004c5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea06:	2376      	movs	r3, #118	@ 0x76
 800ea08:	18fb      	adds	r3, r7, r3
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d006      	beq.n	800ea1e <UART_RxISR_16BIT_FIFOEN+0x296>
 800ea10:	2384      	movs	r3, #132	@ 0x84
 800ea12:	18fb      	adds	r3, r7, r3
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2220      	movs	r2, #32
 800ea18:	4013      	ands	r3, r2
 800ea1a:	d000      	beq.n	800ea1e <UART_RxISR_16BIT_FIFOEN+0x296>
 800ea1c:	e6d9      	b.n	800e7d2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ea1e:	205e      	movs	r0, #94	@ 0x5e
 800ea20:	183b      	adds	r3, r7, r0
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	215e      	movs	r1, #94	@ 0x5e
 800ea26:	5a52      	ldrh	r2, [r2, r1]
 800ea28:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ea2a:	0001      	movs	r1, r0
 800ea2c:	187b      	adds	r3, r7, r1
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d044      	beq.n	800eabe <UART_RxISR_16BIT_FIFOEN+0x336>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2268      	movs	r2, #104	@ 0x68
 800ea38:	5a9b      	ldrh	r3, [r3, r2]
 800ea3a:	187a      	adds	r2, r7, r1
 800ea3c:	8812      	ldrh	r2, [r2, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d23d      	bcs.n	800eabe <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea42:	f3ef 8310 	mrs	r3, PRIMASK
 800ea46:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea48:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	f383 8810 	msr	PRIMASK, r3
}
 800ea56:	46c0      	nop			@ (mov r8, r8)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	689a      	ldr	r2, [r3, #8]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	491d      	ldr	r1, [pc, #116]	@ (800ead8 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800ea64:	400a      	ands	r2, r1
 800ea66:	609a      	str	r2, [r3, #8]
 800ea68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	f383 8810 	msr	PRIMASK, r3
}
 800ea72:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a19      	ldr	r2, [pc, #100]	@ (800eadc <UART_RxISR_16BIT_FIFOEN+0x354>)
 800ea78:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea7a:	f3ef 8310 	mrs	r3, PRIMASK
 800ea7e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea80:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea82:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea84:	2301      	movs	r3, #1
 800ea86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	f383 8810 	msr	PRIMASK, r3
}
 800ea8e:	46c0      	nop			@ (mov r8, r8)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2120      	movs	r1, #32
 800ea9c:	430a      	orrs	r2, r1
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	f383 8810 	msr	PRIMASK, r3
}
 800eaaa:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eaac:	e007      	b.n	800eabe <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	699a      	ldr	r2, [r3, #24]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2108      	movs	r1, #8
 800eaba:	430a      	orrs	r2, r1
 800eabc:	619a      	str	r2, [r3, #24]
}
 800eabe:	46c0      	nop			@ (mov r8, r8)
 800eac0:	46bd      	mov	sp, r7
 800eac2:	b022      	add	sp, #136	@ 0x88
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	46c0      	nop			@ (mov r8, r8)
 800eac8:	fffffeff 	.word	0xfffffeff
 800eacc:	effffffe 	.word	0xeffffffe
 800ead0:	40008000 	.word	0x40008000
 800ead4:	fbffffff 	.word	0xfbffffff
 800ead8:	efffffff 	.word	0xefffffff
 800eadc:	0800e285 	.word	0x0800e285

0800eae0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e05d      	b.n	800ebb4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2288      	movs	r2, #136	@ 0x88
 800eafc:	589b      	ldr	r3, [r3, r2]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d107      	bne.n	800eb12 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2284      	movs	r2, #132	@ 0x84
 800eb06:	2100      	movs	r1, #0
 800eb08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	0018      	movs	r0, r3
 800eb0e:	f7f8 ff47 	bl	80079a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2288      	movs	r2, #136	@ 0x88
 800eb16:	2124      	movs	r1, #36	@ 0x24
 800eb18:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2101      	movs	r1, #1
 800eb26:	438a      	bics	r2, r1
 800eb28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d003      	beq.n	800eb3a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	0018      	movs	r0, r3
 800eb36:	f7fe fd7f 	bl	800d638 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	0018      	movs	r0, r3
 800eb3e:	f7fe fabd 	bl	800d0bc <UART_SetConfig>
 800eb42:	0003      	movs	r3, r0
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d101      	bne.n	800eb4c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e033      	b.n	800ebb4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	689a      	ldr	r2, [r3, #8]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2180      	movs	r1, #128	@ 0x80
 800eb58:	01c9      	lsls	r1, r1, #7
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	4a15      	ldr	r2, [pc, #84]	@ (800ebbc <HAL_RS485Ex_Init+0xdc>)
 800eb66:	4013      	ands	r3, r2
 800eb68:	0019      	movs	r1, r3
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	430a      	orrs	r2, r1
 800eb72:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	055b      	lsls	r3, r3, #21
 800eb78:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	041b      	lsls	r3, r3, #16
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a0d      	ldr	r2, [pc, #52]	@ (800ebc0 <HAL_RS485Ex_Init+0xe0>)
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	0019      	movs	r1, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	697a      	ldr	r2, [r7, #20]
 800eb96:	430a      	orrs	r2, r1
 800eb98:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2101      	movs	r1, #1
 800eba6:	430a      	orrs	r2, r1
 800eba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	0018      	movs	r0, r3
 800ebae:	f7fe fdf7 	bl	800d7a0 <UART_CheckIdleState>
 800ebb2:	0003      	movs	r3, r0
}
 800ebb4:	0018      	movs	r0, r3
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	b006      	add	sp, #24
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	ffff7fff 	.word	0xffff7fff
 800ebc0:	fc00ffff 	.word	0xfc00ffff

0800ebc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ebcc:	46c0      	nop			@ (mov r8, r8)
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	b002      	add	sp, #8
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ebdc:	46c0      	nop			@ (mov r8, r8)
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	b002      	add	sp, #8
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ebec:	46c0      	nop			@ (mov r8, r8)
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	b002      	add	sp, #8
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2284      	movs	r2, #132	@ 0x84
 800ec00:	5c9b      	ldrb	r3, [r3, r2]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d101      	bne.n	800ec0a <HAL_UARTEx_EnableFifoMode+0x16>
 800ec06:	2302      	movs	r3, #2
 800ec08:	e02d      	b.n	800ec66 <HAL_UARTEx_EnableFifoMode+0x72>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2284      	movs	r2, #132	@ 0x84
 800ec0e:	2101      	movs	r1, #1
 800ec10:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2288      	movs	r2, #136	@ 0x88
 800ec16:	2124      	movs	r1, #36	@ 0x24
 800ec18:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	438a      	bics	r2, r1
 800ec30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2280      	movs	r2, #128	@ 0x80
 800ec36:	0592      	lsls	r2, r2, #22
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2280      	movs	r2, #128	@ 0x80
 800ec40:	0592      	lsls	r2, r2, #22
 800ec42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	0018      	movs	r0, r3
 800ec50:	f000 f8ca 	bl	800ede8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2288      	movs	r2, #136	@ 0x88
 800ec58:	2120      	movs	r1, #32
 800ec5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2284      	movs	r2, #132	@ 0x84
 800ec60:	2100      	movs	r1, #0
 800ec62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	0018      	movs	r0, r3
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	b004      	add	sp, #16
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2284      	movs	r2, #132	@ 0x84
 800ec7c:	5c9b      	ldrb	r3, [r3, r2]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d101      	bne.n	800ec86 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec82:	2302      	movs	r3, #2
 800ec84:	e027      	b.n	800ecd6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2284      	movs	r2, #132	@ 0x84
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2288      	movs	r2, #136	@ 0x88
 800ec92:	2124      	movs	r1, #36	@ 0x24
 800ec94:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2101      	movs	r1, #1
 800ecaa:	438a      	bics	r2, r1
 800ecac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	4a0b      	ldr	r2, [pc, #44]	@ (800ece0 <HAL_UARTEx_DisableFifoMode+0x70>)
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2288      	movs	r2, #136	@ 0x88
 800ecc8:	2120      	movs	r1, #32
 800ecca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2284      	movs	r2, #132	@ 0x84
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	b004      	add	sp, #16
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	46c0      	nop			@ (mov r8, r8)
 800ece0:	dfffffff 	.word	0xdfffffff

0800ece4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2284      	movs	r2, #132	@ 0x84
 800ecf2:	5c9b      	ldrb	r3, [r3, r2]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d101      	bne.n	800ecfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	e02e      	b.n	800ed5a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2284      	movs	r2, #132	@ 0x84
 800ed00:	2101      	movs	r1, #1
 800ed02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2288      	movs	r2, #136	@ 0x88
 800ed08:	2124      	movs	r1, #36	@ 0x24
 800ed0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2101      	movs	r1, #1
 800ed20:	438a      	bics	r2, r1
 800ed22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	00db      	lsls	r3, r3, #3
 800ed2c:	08d9      	lsrs	r1, r3, #3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	0018      	movs	r0, r3
 800ed3c:	f000 f854 	bl	800ede8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2288      	movs	r2, #136	@ 0x88
 800ed4c:	2120      	movs	r1, #32
 800ed4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2284      	movs	r2, #132	@ 0x84
 800ed54:	2100      	movs	r1, #0
 800ed56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	0018      	movs	r0, r3
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	b004      	add	sp, #16
 800ed60:	bd80      	pop	{r7, pc}
	...

0800ed64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2284      	movs	r2, #132	@ 0x84
 800ed72:	5c9b      	ldrb	r3, [r3, r2]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d101      	bne.n	800ed7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed78:	2302      	movs	r3, #2
 800ed7a:	e02f      	b.n	800eddc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2284      	movs	r2, #132	@ 0x84
 800ed80:	2101      	movs	r1, #1
 800ed82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2288      	movs	r2, #136	@ 0x88
 800ed88:	2124      	movs	r1, #36	@ 0x24
 800ed8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2101      	movs	r1, #1
 800eda0:	438a      	bics	r2, r1
 800eda2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	4a0e      	ldr	r2, [pc, #56]	@ (800ede4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800edac:	4013      	ands	r3, r2
 800edae:	0019      	movs	r1, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	430a      	orrs	r2, r1
 800edb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	0018      	movs	r0, r3
 800edbe:	f000 f813 	bl	800ede8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2288      	movs	r2, #136	@ 0x88
 800edce:	2120      	movs	r1, #32
 800edd0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2284      	movs	r2, #132	@ 0x84
 800edd6:	2100      	movs	r1, #0
 800edd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800edda:	2300      	movs	r3, #0
}
 800eddc:	0018      	movs	r0, r3
 800edde:	46bd      	mov	sp, r7
 800ede0:	b004      	add	sp, #16
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	f1ffffff 	.word	0xf1ffffff

0800ede8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ede8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d108      	bne.n	800ee0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	226a      	movs	r2, #106	@ 0x6a
 800edfc:	2101      	movs	r1, #1
 800edfe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2268      	movs	r2, #104	@ 0x68
 800ee04:	2101      	movs	r1, #1
 800ee06:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee08:	e043      	b.n	800ee92 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee0a:	260f      	movs	r6, #15
 800ee0c:	19bb      	adds	r3, r7, r6
 800ee0e:	2208      	movs	r2, #8
 800ee10:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee12:	200e      	movs	r0, #14
 800ee14:	183b      	adds	r3, r7, r0
 800ee16:	2208      	movs	r2, #8
 800ee18:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	0e5b      	lsrs	r3, r3, #25
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	240d      	movs	r4, #13
 800ee26:	193b      	adds	r3, r7, r4
 800ee28:	2107      	movs	r1, #7
 800ee2a:	400a      	ands	r2, r1
 800ee2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	0f5b      	lsrs	r3, r3, #29
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	250c      	movs	r5, #12
 800ee3a:	197b      	adds	r3, r7, r5
 800ee3c:	2107      	movs	r1, #7
 800ee3e:	400a      	ands	r2, r1
 800ee40:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee42:	183b      	adds	r3, r7, r0
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	197a      	adds	r2, r7, r5
 800ee48:	7812      	ldrb	r2, [r2, #0]
 800ee4a:	4914      	ldr	r1, [pc, #80]	@ (800ee9c <UARTEx_SetNbDataToProcess+0xb4>)
 800ee4c:	5c8a      	ldrb	r2, [r1, r2]
 800ee4e:	435a      	muls	r2, r3
 800ee50:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee52:	197b      	adds	r3, r7, r5
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	4a12      	ldr	r2, [pc, #72]	@ (800eea0 <UARTEx_SetNbDataToProcess+0xb8>)
 800ee58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee5a:	0019      	movs	r1, r3
 800ee5c:	f7f1 f9fa 	bl	8000254 <__divsi3>
 800ee60:	0003      	movs	r3, r0
 800ee62:	b299      	uxth	r1, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	226a      	movs	r2, #106	@ 0x6a
 800ee68:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee6a:	19bb      	adds	r3, r7, r6
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	193a      	adds	r2, r7, r4
 800ee70:	7812      	ldrb	r2, [r2, #0]
 800ee72:	490a      	ldr	r1, [pc, #40]	@ (800ee9c <UARTEx_SetNbDataToProcess+0xb4>)
 800ee74:	5c8a      	ldrb	r2, [r1, r2]
 800ee76:	435a      	muls	r2, r3
 800ee78:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee7a:	193b      	adds	r3, r7, r4
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	4a08      	ldr	r2, [pc, #32]	@ (800eea0 <UARTEx_SetNbDataToProcess+0xb8>)
 800ee80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee82:	0019      	movs	r1, r3
 800ee84:	f7f1 f9e6 	bl	8000254 <__divsi3>
 800ee88:	0003      	movs	r3, r0
 800ee8a:	b299      	uxth	r1, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2268      	movs	r2, #104	@ 0x68
 800ee90:	5299      	strh	r1, [r3, r2]
}
 800ee92:	46c0      	nop			@ (mov r8, r8)
 800ee94:	46bd      	mov	sp, r7
 800ee96:	b005      	add	sp, #20
 800ee98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9a:	46c0      	nop			@ (mov r8, r8)
 800ee9c:	080172d8 	.word	0x080172d8
 800eea0:	080172e0 	.word	0x080172e0

0800eea4 <__NVIC_SetPriority>:
{
 800eea4:	b590      	push	{r4, r7, lr}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	0002      	movs	r2, r0
 800eeac:	6039      	str	r1, [r7, #0]
 800eeae:	1dfb      	adds	r3, r7, #7
 800eeb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eeb2:	1dfb      	adds	r3, r7, #7
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeb8:	d828      	bhi.n	800ef0c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eeba:	4a2f      	ldr	r2, [pc, #188]	@ (800ef78 <__NVIC_SetPriority+0xd4>)
 800eebc:	1dfb      	adds	r3, r7, #7
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	b25b      	sxtb	r3, r3
 800eec2:	089b      	lsrs	r3, r3, #2
 800eec4:	33c0      	adds	r3, #192	@ 0xc0
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	589b      	ldr	r3, [r3, r2]
 800eeca:	1dfa      	adds	r2, r7, #7
 800eecc:	7812      	ldrb	r2, [r2, #0]
 800eece:	0011      	movs	r1, r2
 800eed0:	2203      	movs	r2, #3
 800eed2:	400a      	ands	r2, r1
 800eed4:	00d2      	lsls	r2, r2, #3
 800eed6:	21ff      	movs	r1, #255	@ 0xff
 800eed8:	4091      	lsls	r1, r2
 800eeda:	000a      	movs	r2, r1
 800eedc:	43d2      	mvns	r2, r2
 800eede:	401a      	ands	r2, r3
 800eee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	019b      	lsls	r3, r3, #6
 800eee6:	22ff      	movs	r2, #255	@ 0xff
 800eee8:	401a      	ands	r2, r3
 800eeea:	1dfb      	adds	r3, r7, #7
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	0018      	movs	r0, r3
 800eef0:	2303      	movs	r3, #3
 800eef2:	4003      	ands	r3, r0
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eef8:	481f      	ldr	r0, [pc, #124]	@ (800ef78 <__NVIC_SetPriority+0xd4>)
 800eefa:	1dfb      	adds	r3, r7, #7
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	b25b      	sxtb	r3, r3
 800ef00:	089b      	lsrs	r3, r3, #2
 800ef02:	430a      	orrs	r2, r1
 800ef04:	33c0      	adds	r3, #192	@ 0xc0
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	501a      	str	r2, [r3, r0]
}
 800ef0a:	e031      	b.n	800ef70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ef0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ef7c <__NVIC_SetPriority+0xd8>)
 800ef0e:	1dfb      	adds	r3, r7, #7
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	0019      	movs	r1, r3
 800ef14:	230f      	movs	r3, #15
 800ef16:	400b      	ands	r3, r1
 800ef18:	3b08      	subs	r3, #8
 800ef1a:	089b      	lsrs	r3, r3, #2
 800ef1c:	3306      	adds	r3, #6
 800ef1e:	009b      	lsls	r3, r3, #2
 800ef20:	18d3      	adds	r3, r2, r3
 800ef22:	3304      	adds	r3, #4
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	1dfa      	adds	r2, r7, #7
 800ef28:	7812      	ldrb	r2, [r2, #0]
 800ef2a:	0011      	movs	r1, r2
 800ef2c:	2203      	movs	r2, #3
 800ef2e:	400a      	ands	r2, r1
 800ef30:	00d2      	lsls	r2, r2, #3
 800ef32:	21ff      	movs	r1, #255	@ 0xff
 800ef34:	4091      	lsls	r1, r2
 800ef36:	000a      	movs	r2, r1
 800ef38:	43d2      	mvns	r2, r2
 800ef3a:	401a      	ands	r2, r3
 800ef3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	019b      	lsls	r3, r3, #6
 800ef42:	22ff      	movs	r2, #255	@ 0xff
 800ef44:	401a      	ands	r2, r3
 800ef46:	1dfb      	adds	r3, r7, #7
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	0018      	movs	r0, r3
 800ef4c:	2303      	movs	r3, #3
 800ef4e:	4003      	ands	r3, r0
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ef54:	4809      	ldr	r0, [pc, #36]	@ (800ef7c <__NVIC_SetPriority+0xd8>)
 800ef56:	1dfb      	adds	r3, r7, #7
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	001c      	movs	r4, r3
 800ef5c:	230f      	movs	r3, #15
 800ef5e:	4023      	ands	r3, r4
 800ef60:	3b08      	subs	r3, #8
 800ef62:	089b      	lsrs	r3, r3, #2
 800ef64:	430a      	orrs	r2, r1
 800ef66:	3306      	adds	r3, #6
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	18c3      	adds	r3, r0, r3
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	601a      	str	r2, [r3, #0]
}
 800ef70:	46c0      	nop			@ (mov r8, r8)
 800ef72:	46bd      	mov	sp, r7
 800ef74:	b003      	add	sp, #12
 800ef76:	bd90      	pop	{r4, r7, pc}
 800ef78:	e000e100 	.word	0xe000e100
 800ef7c:	e000ed00 	.word	0xe000ed00

0800ef80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ef84:	4b05      	ldr	r3, [pc, #20]	@ (800ef9c <SysTick_Handler+0x1c>)
 800ef86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ef88:	f001 fca8 	bl	80108dc <xTaskGetSchedulerState>
 800ef8c:	0003      	movs	r3, r0
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d001      	beq.n	800ef96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ef92:	f002 fae9 	bl	8011568 <xPortSysTickHandler>
  }
}
 800ef96:	46c0      	nop			@ (mov r8, r8)
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	e000e010 	.word	0xe000e010

0800efa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800efa4:	2305      	movs	r3, #5
 800efa6:	425b      	negs	r3, r3
 800efa8:	2100      	movs	r1, #0
 800efaa:	0018      	movs	r0, r3
 800efac:	f7ff ff7a 	bl	800eea4 <__NVIC_SetPriority>
#endif
}
 800efb0:	46c0      	nop			@ (mov r8, r8)
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efbe:	f3ef 8305 	mrs	r3, IPSR
 800efc2:	603b      	str	r3, [r7, #0]
  return(result);
 800efc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d003      	beq.n	800efd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800efca:	2306      	movs	r3, #6
 800efcc:	425b      	negs	r3, r3
 800efce:	607b      	str	r3, [r7, #4]
 800efd0:	e00c      	b.n	800efec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800efd2:	4b09      	ldr	r3, [pc, #36]	@ (800eff8 <osKernelInitialize+0x40>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d105      	bne.n	800efe6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800efda:	4b07      	ldr	r3, [pc, #28]	@ (800eff8 <osKernelInitialize+0x40>)
 800efdc:	2201      	movs	r2, #1
 800efde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800efe0:	2300      	movs	r3, #0
 800efe2:	607b      	str	r3, [r7, #4]
 800efe4:	e002      	b.n	800efec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800efe6:	2301      	movs	r3, #1
 800efe8:	425b      	negs	r3, r3
 800efea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800efec:	687b      	ldr	r3, [r7, #4]
}
 800efee:	0018      	movs	r0, r3
 800eff0:	46bd      	mov	sp, r7
 800eff2:	b002      	add	sp, #8
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	46c0      	nop			@ (mov r8, r8)
 800eff8:	2000295c 	.word	0x2000295c

0800effc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f002:	f3ef 8305 	mrs	r3, IPSR
 800f006:	603b      	str	r3, [r7, #0]
  return(result);
 800f008:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d003      	beq.n	800f016 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f00e:	2306      	movs	r3, #6
 800f010:	425b      	negs	r3, r3
 800f012:	607b      	str	r3, [r7, #4]
 800f014:	e010      	b.n	800f038 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f016:	4b0b      	ldr	r3, [pc, #44]	@ (800f044 <osKernelStart+0x48>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d109      	bne.n	800f032 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f01e:	f7ff ffbf 	bl	800efa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f022:	4b08      	ldr	r3, [pc, #32]	@ (800f044 <osKernelStart+0x48>)
 800f024:	2202      	movs	r2, #2
 800f026:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f028:	f001 f864 	bl	80100f4 <vTaskStartScheduler>
      stat = osOK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	607b      	str	r3, [r7, #4]
 800f030:	e002      	b.n	800f038 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f032:	2301      	movs	r3, #1
 800f034:	425b      	negs	r3, r3
 800f036:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f038:	687b      	ldr	r3, [r7, #4]
}
 800f03a:	0018      	movs	r0, r3
 800f03c:	46bd      	mov	sp, r7
 800f03e:	b002      	add	sp, #8
 800f040:	bd80      	pop	{r7, pc}
 800f042:	46c0      	nop			@ (mov r8, r8)
 800f044:	2000295c 	.word	0x2000295c

0800f048 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f048:	b5b0      	push	{r4, r5, r7, lr}
 800f04a:	b08e      	sub	sp, #56	@ 0x38
 800f04c:	af04      	add	r7, sp, #16
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f054:	2300      	movs	r3, #0
 800f056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f058:	f3ef 8305 	mrs	r3, IPSR
 800f05c:	617b      	str	r3, [r7, #20]
  return(result);
 800f05e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f060:	2b00      	cmp	r3, #0
 800f062:	d000      	beq.n	800f066 <osThreadNew+0x1e>
 800f064:	e082      	b.n	800f16c <osThreadNew+0x124>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d100      	bne.n	800f06e <osThreadNew+0x26>
 800f06c:	e07e      	b.n	800f16c <osThreadNew+0x124>
    stack = configMINIMAL_STACK_SIZE;
 800f06e:	2380      	movs	r3, #128	@ 0x80
 800f070:	005b      	lsls	r3, r3, #1
 800f072:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f074:	2318      	movs	r3, #24
 800f076:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f078:	2300      	movs	r3, #0
 800f07a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f07c:	2301      	movs	r3, #1
 800f07e:	425b      	negs	r3, r3
 800f080:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d044      	beq.n	800f112 <osThreadNew+0xca>
      if (attr->name != NULL) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d002      	beq.n	800f096 <osThreadNew+0x4e>
        name = attr->name;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d002      	beq.n	800f0a4 <osThreadNew+0x5c>
        prio = (UBaseType_t)attr->priority;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	699b      	ldr	r3, [r3, #24]
 800f0a2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d007      	beq.n	800f0ba <osThreadNew+0x72>
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	2b38      	cmp	r3, #56	@ 0x38
 800f0ae:	d804      	bhi.n	800f0ba <osThreadNew+0x72>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	4013      	ands	r3, r2
 800f0b8:	d001      	beq.n	800f0be <osThreadNew+0x76>
        return (NULL);
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	e057      	b.n	800f16e <osThreadNew+0x126>
      }

      if (attr->stack_size > 0U) {
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	695b      	ldr	r3, [r3, #20]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d003      	beq.n	800f0ce <osThreadNew+0x86>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	695b      	ldr	r3, [r3, #20]
 800f0ca:	089b      	lsrs	r3, r3, #2
 800f0cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00e      	beq.n	800f0f4 <osThreadNew+0xac>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	2ba7      	cmp	r3, #167	@ 0xa7
 800f0dc:	d90a      	bls.n	800f0f4 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d006      	beq.n	800f0f4 <osThreadNew+0xac>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	695b      	ldr	r3, [r3, #20]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <osThreadNew+0xac>
        mem = 1;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	61bb      	str	r3, [r7, #24]
 800f0f2:	e010      	b.n	800f116 <osThreadNew+0xce>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10c      	bne.n	800f116 <osThreadNew+0xce>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d108      	bne.n	800f116 <osThreadNew+0xce>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d104      	bne.n	800f116 <osThreadNew+0xce>
          mem = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	61bb      	str	r3, [r7, #24]
 800f110:	e001      	b.n	800f116 <osThreadNew+0xce>
        }
      }
    }
    else {
      mem = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d112      	bne.n	800f142 <osThreadNew+0xfa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f124:	68bd      	ldr	r5, [r7, #8]
 800f126:	6a3c      	ldr	r4, [r7, #32]
 800f128:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	9201      	str	r2, [sp, #4]
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	002b      	movs	r3, r5
 800f136:	0022      	movs	r2, r4
 800f138:	f000 fe19 	bl	800fd6e <xTaskCreateStatic>
 800f13c:	0003      	movs	r3, r0
 800f13e:	613b      	str	r3, [r7, #16]
 800f140:	e014      	b.n	800f16c <osThreadNew+0x124>
      #endif
    }
    else {
      if (mem == 0) {
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d111      	bne.n	800f16c <osThreadNew+0x124>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	68bc      	ldr	r4, [r7, #8]
 800f14e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	2310      	movs	r3, #16
 800f154:	18fb      	adds	r3, r7, r3
 800f156:	9301      	str	r3, [sp, #4]
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	9300      	str	r3, [sp, #0]
 800f15c:	0023      	movs	r3, r4
 800f15e:	f000 fe4d 	bl	800fdfc <xTaskCreate>
 800f162:	0003      	movs	r3, r0
 800f164:	2b01      	cmp	r3, #1
 800f166:	d001      	beq.n	800f16c <osThreadNew+0x124>
            hTask = NULL;
 800f168:	2300      	movs	r3, #0
 800f16a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f16c:	693b      	ldr	r3, [r7, #16]
}
 800f16e:	0018      	movs	r0, r3
 800f170:	46bd      	mov	sp, r7
 800f172:	b00a      	add	sp, #40	@ 0x28
 800f174:	bdb0      	pop	{r4, r5, r7, pc}

0800f176 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f176:	b580      	push	{r7, lr}
 800f178:	b084      	sub	sp, #16
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f17e:	f3ef 8305 	mrs	r3, IPSR
 800f182:	60bb      	str	r3, [r7, #8]
  return(result);
 800f184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f186:	2b00      	cmp	r3, #0
 800f188:	d003      	beq.n	800f192 <osDelay+0x1c>
    stat = osErrorISR;
 800f18a:	2306      	movs	r3, #6
 800f18c:	425b      	negs	r3, r3
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	e008      	b.n	800f1a4 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d003      	beq.n	800f1a4 <osDelay+0x2e>
      vTaskDelay(ticks);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	0018      	movs	r0, r3
 800f1a0:	f000 ff82 	bl	80100a8 <vTaskDelay>
    }
  }

  return (stat);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
}
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	b004      	add	sp, #16
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b084      	sub	sp, #16
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	0018      	movs	r0, r3
 800f1ba:	f002 f8c3 	bl	8011344 <pvTimerGetTimerID>
 800f1be:	0003      	movs	r3, r0
 800f1c0:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d005      	beq.n	800f1d4 <TimerCallback+0x26>
    callb->func (callb->arg);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	0018      	movs	r0, r3
 800f1d2:	4790      	blx	r2
  }
}
 800f1d4:	46c0      	nop			@ (mov r8, r8)
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	b004      	add	sp, #16
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f1dc:	b590      	push	{r4, r7, lr}
 800f1de:	b08d      	sub	sp, #52	@ 0x34
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	607a      	str	r2, [r7, #4]
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	240b      	movs	r4, #11
 800f1ea:	193b      	adds	r3, r7, r4
 800f1ec:	1c0a      	adds	r2, r1, #0
 800f1ee:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1f4:	f3ef 8305 	mrs	r3, IPSR
 800f1f8:	613b      	str	r3, [r7, #16]
  return(result);
 800f1fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d000      	beq.n	800f202 <osTimerNew+0x26>
 800f200:	e06b      	b.n	800f2da <osTimerNew+0xfe>
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d100      	bne.n	800f20a <osTimerNew+0x2e>
 800f208:	e067      	b.n	800f2da <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f20a:	2008      	movs	r0, #8
 800f20c:	f002 f9e8 	bl	80115e0 <pvPortMalloc>
 800f210:	0003      	movs	r3, r0
 800f212:	617b      	str	r3, [r7, #20]

    if (callb != NULL) {
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d05f      	beq.n	800f2da <osTimerNew+0xfe>
      callb->func = func;
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f226:	193b      	adds	r3, r7, r4
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d102      	bne.n	800f234 <osTimerNew+0x58>
        reload = pdFALSE;
 800f22e:	2300      	movs	r3, #0
 800f230:	61fb      	str	r3, [r7, #28]
 800f232:	e001      	b.n	800f238 <osTimerNew+0x5c>
      } else {
        reload = pdTRUE;
 800f234:	2301      	movs	r3, #1
 800f236:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f238:	2301      	movs	r3, #1
 800f23a:	425b      	negs	r3, r3
 800f23c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d01c      	beq.n	800f282 <osTimerNew+0xa6>
        if (attr->name != NULL) {
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d002      	beq.n	800f256 <osTimerNew+0x7a>
          name = attr->name;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d006      	beq.n	800f26c <osTimerNew+0x90>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	2b2b      	cmp	r3, #43	@ 0x2b
 800f264:	d902      	bls.n	800f26c <osTimerNew+0x90>
          mem = 1;
 800f266:	2301      	movs	r3, #1
 800f268:	61bb      	str	r3, [r7, #24]
 800f26a:	e00c      	b.n	800f286 <osTimerNew+0xaa>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d108      	bne.n	800f286 <osTimerNew+0xaa>
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d104      	bne.n	800f286 <osTimerNew+0xaa>
            mem = 0;
 800f27c:	2300      	movs	r3, #0
 800f27e:	61bb      	str	r3, [r7, #24]
 800f280:	e001      	b.n	800f286 <osTimerNew+0xaa>
          }
        }
      }
      else {
        mem = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d10e      	bne.n	800f2aa <osTimerNew+0xce>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	6979      	ldr	r1, [r7, #20]
 800f292:	69fa      	ldr	r2, [r7, #28]
 800f294:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	4b12      	ldr	r3, [pc, #72]	@ (800f2e4 <osTimerNew+0x108>)
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	000b      	movs	r3, r1
 800f29e:	2101      	movs	r1, #1
 800f2a0:	f001 fd0f 	bl	8010cc2 <xTimerCreateStatic>
 800f2a4:	0003      	movs	r3, r0
 800f2a6:	623b      	str	r3, [r7, #32]
 800f2a8:	e00d      	b.n	800f2c6 <osTimerNew+0xea>
        #endif
      }
      else {
        if (mem == 0) {
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d10a      	bne.n	800f2c6 <osTimerNew+0xea>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f2b0:	6979      	ldr	r1, [r7, #20]
 800f2b2:	69fa      	ldr	r2, [r7, #28]
 800f2b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e4 <osTimerNew+0x108>)
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	000b      	movs	r3, r1
 800f2bc:	2101      	movs	r1, #1
 800f2be:	f001 fcdd 	bl	8010c7c <xTimerCreate>
 800f2c2:	0003      	movs	r3, r0
 800f2c4:	623b      	str	r3, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <osTimerNew+0xfe>
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <osTimerNew+0xfe>
        vPortFree (callb);
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	0018      	movs	r0, r3
 800f2d6:	f002 fa33 	bl	8011740 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f2da:	6a3b      	ldr	r3, [r7, #32]
}
 800f2dc:	0018      	movs	r0, r3
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	b00b      	add	sp, #44	@ 0x2c
 800f2e2:	bd90      	pop	{r4, r7, pc}
 800f2e4:	0800f1af 	.word	0x0800f1af

0800f2e8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b088      	sub	sp, #32
 800f2ec:	af02      	add	r7, sp, #8
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2f6:	f3ef 8305 	mrs	r3, IPSR
 800f2fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <osTimerStart+0x22>
    stat = osErrorISR;
 800f302:	2306      	movs	r3, #6
 800f304:	425b      	negs	r3, r3
 800f306:	617b      	str	r3, [r7, #20]
 800f308:	e017      	b.n	800f33a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d103      	bne.n	800f318 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f310:	2304      	movs	r3, #4
 800f312:	425b      	negs	r3, r3
 800f314:	617b      	str	r3, [r7, #20]
 800f316:	e010      	b.n	800f33a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	6938      	ldr	r0, [r7, #16]
 800f31c:	2300      	movs	r3, #0
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	2300      	movs	r3, #0
 800f322:	2104      	movs	r1, #4
 800f324:	f001 fd30 	bl	8010d88 <xTimerGenericCommand>
 800f328:	0003      	movs	r3, r0
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d102      	bne.n	800f334 <osTimerStart+0x4c>
      stat = osOK;
 800f32e:	2300      	movs	r3, #0
 800f330:	617b      	str	r3, [r7, #20]
 800f332:	e002      	b.n	800f33a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f334:	2303      	movs	r3, #3
 800f336:	425b      	negs	r3, r3
 800f338:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f33a:	697b      	ldr	r3, [r7, #20]
}
 800f33c:	0018      	movs	r0, r3
 800f33e:	46bd      	mov	sp, r7
 800f340:	b006      	add	sp, #24
 800f342:	bd80      	pop	{r7, pc}

0800f344 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	4a06      	ldr	r2, [pc, #24]	@ (800f36c <vApplicationGetIdleTaskMemory+0x28>)
 800f354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	4a05      	ldr	r2, [pc, #20]	@ (800f370 <vApplicationGetIdleTaskMemory+0x2c>)
 800f35a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2280      	movs	r2, #128	@ 0x80
 800f360:	0052      	lsls	r2, r2, #1
 800f362:	601a      	str	r2, [r3, #0]
}
 800f364:	46c0      	nop			@ (mov r8, r8)
 800f366:	46bd      	mov	sp, r7
 800f368:	b004      	add	sp, #16
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	20002960 	.word	0x20002960
 800f370:	20002a08 	.word	0x20002a08

0800f374 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	4a06      	ldr	r2, [pc, #24]	@ (800f39c <vApplicationGetTimerTaskMemory+0x28>)
 800f384:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	4a05      	ldr	r2, [pc, #20]	@ (800f3a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800f38a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2280      	movs	r2, #128	@ 0x80
 800f390:	0092      	lsls	r2, r2, #2
 800f392:	601a      	str	r2, [r3, #0]
}
 800f394:	46c0      	nop			@ (mov r8, r8)
 800f396:	46bd      	mov	sp, r7
 800f398:	b004      	add	sp, #16
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	20002e08 	.word	0x20002e08
 800f3a0:	20002eb0 	.word	0x20002eb0

0800f3a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3308      	adds	r3, #8
 800f3b0:	001a      	movs	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	4252      	negs	r2, r2
 800f3bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	001a      	movs	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3308      	adds	r3, #8
 800f3cc:	001a      	movs	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3d8:	46c0      	nop			@ (mov r8, r8)
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	b002      	add	sp, #8
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3ee:	46c0      	nop			@ (mov r8, r8)
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	b002      	add	sp, #8
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	689a      	ldr	r2, [r3, #8]
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	683a      	ldr	r2, [r7, #0]
 800f41a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	601a      	str	r2, [r3, #0]
}
 800f432:	46c0      	nop			@ (mov r8, r8)
 800f434:	46bd      	mov	sp, r7
 800f436:	b004      	add	sp, #16
 800f438:	bd80      	pop	{r7, pc}

0800f43a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b084      	sub	sp, #16
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	3301      	adds	r3, #1
 800f44e:	d103      	bne.n	800f458 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	60fb      	str	r3, [r7, #12]
 800f456:	e00c      	b.n	800f472 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3308      	adds	r3, #8
 800f45c:	60fb      	str	r3, [r7, #12]
 800f45e:	e002      	b.n	800f466 <vListInsert+0x2c>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d2f6      	bcs.n	800f460 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	685a      	ldr	r2, [r3, #4]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	683a      	ldr	r2, [r7, #0]
 800f48c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
}
 800f49e:	46c0      	nop			@ (mov r8, r8)
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	b004      	add	sp, #16
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b084      	sub	sp, #16
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	6892      	ldr	r2, [r2, #8]
 800f4bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	6852      	ldr	r2, [r2, #4]
 800f4c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d103      	bne.n	800f4da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	689a      	ldr	r2, [r3, #8]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	1e5a      	subs	r2, r3, #1
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
}
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	b004      	add	sp, #16
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b084      	sub	sp, #16
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
 800f4fe:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d102      	bne.n	800f510 <xQueueGenericReset+0x1a>
 800f50a:	b672      	cpsid	i
 800f50c:	46c0      	nop			@ (mov r8, r8)
 800f50e:	e7fd      	b.n	800f50c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800f510:	f001 ffce 	bl	80114b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f520:	434b      	muls	r3, r1
 800f522:	18d2      	adds	r2, r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2200      	movs	r2, #0
 800f52c:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f53e:	1e59      	subs	r1, r3, #1
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f544:	434b      	muls	r3, r1
 800f546:	18d2      	adds	r2, r2, r3
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2244      	movs	r2, #68	@ 0x44
 800f550:	21ff      	movs	r1, #255	@ 0xff
 800f552:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2245      	movs	r2, #69	@ 0x45
 800f558:	21ff      	movs	r1, #255	@ 0xff
 800f55a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10d      	bne.n	800f57e <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d013      	beq.n	800f592 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	3310      	adds	r3, #16
 800f56e:	0018      	movs	r0, r3
 800f570:	f001 f818 	bl	80105a4 <xTaskRemoveFromEventList>
 800f574:	1e03      	subs	r3, r0, #0
 800f576:	d00c      	beq.n	800f592 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f578:	f001 ff8a 	bl	8011490 <vPortYield>
 800f57c:	e009      	b.n	800f592 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3310      	adds	r3, #16
 800f582:	0018      	movs	r0, r3
 800f584:	f7ff ff0e 	bl	800f3a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	3324      	adds	r3, #36	@ 0x24
 800f58c:	0018      	movs	r0, r3
 800f58e:	f7ff ff09 	bl	800f3a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f592:	f001 ff9f 	bl	80114d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f596:	2301      	movs	r3, #1
}
 800f598:	0018      	movs	r0, r3
 800f59a:	46bd      	mov	sp, r7
 800f59c:	b004      	add	sp, #16
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f5a0:	b590      	push	{r4, r7, lr}
 800f5a2:	b089      	sub	sp, #36	@ 0x24
 800f5a4:	af02      	add	r7, sp, #8
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
 800f5ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d102      	bne.n	800f5ba <xQueueGenericCreateStatic+0x1a>
 800f5b4:	b672      	cpsid	i
 800f5b6:	46c0      	nop			@ (mov r8, r8)
 800f5b8:	e7fd      	b.n	800f5b6 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d102      	bne.n	800f5c6 <xQueueGenericCreateStatic+0x26>
 800f5c0:	b672      	cpsid	i
 800f5c2:	46c0      	nop			@ (mov r8, r8)
 800f5c4:	e7fd      	b.n	800f5c2 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d002      	beq.n	800f5d2 <xQueueGenericCreateStatic+0x32>
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <xQueueGenericCreateStatic+0x36>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e000      	b.n	800f5d8 <xQueueGenericCreateStatic+0x38>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d102      	bne.n	800f5e2 <xQueueGenericCreateStatic+0x42>
 800f5dc:	b672      	cpsid	i
 800f5de:	46c0      	nop			@ (mov r8, r8)
 800f5e0:	e7fd      	b.n	800f5de <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d102      	bne.n	800f5ee <xQueueGenericCreateStatic+0x4e>
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <xQueueGenericCreateStatic+0x52>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e000      	b.n	800f5f4 <xQueueGenericCreateStatic+0x54>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d102      	bne.n	800f5fe <xQueueGenericCreateStatic+0x5e>
 800f5f8:	b672      	cpsid	i
 800f5fa:	46c0      	nop			@ (mov r8, r8)
 800f5fc:	e7fd      	b.n	800f5fa <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5fe:	2350      	movs	r3, #80	@ 0x50
 800f600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	2b50      	cmp	r3, #80	@ 0x50
 800f606:	d002      	beq.n	800f60e <xQueueGenericCreateStatic+0x6e>
 800f608:	b672      	cpsid	i
 800f60a:	46c0      	nop			@ (mov r8, r8)
 800f60c:	e7fd      	b.n	800f60a <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f60e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00e      	beq.n	800f638 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	2246      	movs	r2, #70	@ 0x46
 800f61e:	2101      	movs	r1, #1
 800f620:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f622:	2328      	movs	r3, #40	@ 0x28
 800f624:	18fb      	adds	r3, r7, r3
 800f626:	781c      	ldrb	r4, [r3, #0]
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	68b9      	ldr	r1, [r7, #8]
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	0023      	movs	r3, r4
 800f634:	f000 f805 	bl	800f642 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f638:	697b      	ldr	r3, [r7, #20]
	}
 800f63a:	0018      	movs	r0, r3
 800f63c:	46bd      	mov	sp, r7
 800f63e:	b007      	add	sp, #28
 800f640:	bd90      	pop	{r4, r7, pc}

0800f642 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	60f8      	str	r0, [r7, #12]
 800f64a:	60b9      	str	r1, [r7, #8]
 800f64c:	607a      	str	r2, [r7, #4]
 800f64e:	001a      	movs	r2, r3
 800f650:	1cfb      	adds	r3, r7, #3
 800f652:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d103      	bne.n	800f662 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	69ba      	ldr	r2, [r7, #24]
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	e002      	b.n	800f668 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	2101      	movs	r1, #1
 800f678:	0018      	movs	r0, r3
 800f67a:	f7ff ff3c 	bl	800f4f6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	1cfa      	adds	r2, r7, #3
 800f682:	214c      	movs	r1, #76	@ 0x4c
 800f684:	7812      	ldrb	r2, [r2, #0]
 800f686:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f688:	46c0      	nop			@ (mov r8, r8)
 800f68a:	46bd      	mov	sp, r7
 800f68c:	b004      	add	sp, #16
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08a      	sub	sp, #40	@ 0x28
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f6a6:	6a3b      	ldr	r3, [r7, #32]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d102      	bne.n	800f6b2 <xQueueGenericSend+0x22>
 800f6ac:	b672      	cpsid	i
 800f6ae:	46c0      	nop			@ (mov r8, r8)
 800f6b0:	e7fd      	b.n	800f6ae <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d103      	bne.n	800f6c0 <xQueueGenericSend+0x30>
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d101      	bne.n	800f6c4 <xQueueGenericSend+0x34>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e000      	b.n	800f6c6 <xQueueGenericSend+0x36>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d102      	bne.n	800f6d0 <xQueueGenericSend+0x40>
 800f6ca:	b672      	cpsid	i
 800f6cc:	46c0      	nop			@ (mov r8, r8)
 800f6ce:	e7fd      	b.n	800f6cc <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d103      	bne.n	800f6de <xQueueGenericSend+0x4e>
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d101      	bne.n	800f6e2 <xQueueGenericSend+0x52>
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e000      	b.n	800f6e4 <xQueueGenericSend+0x54>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d102      	bne.n	800f6ee <xQueueGenericSend+0x5e>
 800f6e8:	b672      	cpsid	i
 800f6ea:	46c0      	nop			@ (mov r8, r8)
 800f6ec:	e7fd      	b.n	800f6ea <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6ee:	f001 f8f5 	bl	80108dc <xTaskGetSchedulerState>
 800f6f2:	1e03      	subs	r3, r0, #0
 800f6f4:	d102      	bne.n	800f6fc <xQueueGenericSend+0x6c>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <xQueueGenericSend+0x70>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e000      	b.n	800f702 <xQueueGenericSend+0x72>
 800f700:	2300      	movs	r3, #0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d102      	bne.n	800f70c <xQueueGenericSend+0x7c>
 800f706:	b672      	cpsid	i
 800f708:	46c0      	nop			@ (mov r8, r8)
 800f70a:	e7fd      	b.n	800f708 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f70c:	f001 fed0 	bl	80114b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f718:	429a      	cmp	r2, r3
 800f71a:	d302      	bcc.n	800f722 <xQueueGenericSend+0x92>
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2b02      	cmp	r3, #2
 800f720:	d11e      	bne.n	800f760 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	68b9      	ldr	r1, [r7, #8]
 800f726:	6a3b      	ldr	r3, [r7, #32]
 800f728:	0018      	movs	r0, r3
 800f72a:	f000 f9a8 	bl	800fa7e <prvCopyDataToQueue>
 800f72e:	0003      	movs	r3, r0
 800f730:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f732:	6a3b      	ldr	r3, [r7, #32]
 800f734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f736:	2b00      	cmp	r3, #0
 800f738:	d009      	beq.n	800f74e <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	3324      	adds	r3, #36	@ 0x24
 800f73e:	0018      	movs	r0, r3
 800f740:	f000 ff30 	bl	80105a4 <xTaskRemoveFromEventList>
 800f744:	1e03      	subs	r3, r0, #0
 800f746:	d007      	beq.n	800f758 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f748:	f001 fea2 	bl	8011490 <vPortYield>
 800f74c:	e004      	b.n	800f758 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f754:	f001 fe9c 	bl	8011490 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f758:	f001 febc 	bl	80114d4 <vPortExitCritical>
				return pdPASS;
 800f75c:	2301      	movs	r3, #1
 800f75e:	e05b      	b.n	800f818 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d103      	bne.n	800f76e <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f766:	f001 feb5 	bl	80114d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	e054      	b.n	800f818 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f770:	2b00      	cmp	r3, #0
 800f772:	d106      	bne.n	800f782 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f774:	2314      	movs	r3, #20
 800f776:	18fb      	adds	r3, r7, r3
 800f778:	0018      	movs	r0, r3
 800f77a:	f000 ff71 	bl	8010660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f77e:	2301      	movs	r3, #1
 800f780:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f782:	f001 fea7 	bl	80114d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f786:	f000 fd15 	bl	80101b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f78a:	f001 fe91 	bl	80114b0 <vPortEnterCritical>
 800f78e:	6a3b      	ldr	r3, [r7, #32]
 800f790:	2244      	movs	r2, #68	@ 0x44
 800f792:	5c9b      	ldrb	r3, [r3, r2]
 800f794:	b25b      	sxtb	r3, r3
 800f796:	3301      	adds	r3, #1
 800f798:	d103      	bne.n	800f7a2 <xQueueGenericSend+0x112>
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	2244      	movs	r2, #68	@ 0x44
 800f79e:	2100      	movs	r1, #0
 800f7a0:	5499      	strb	r1, [r3, r2]
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	2245      	movs	r2, #69	@ 0x45
 800f7a6:	5c9b      	ldrb	r3, [r3, r2]
 800f7a8:	b25b      	sxtb	r3, r3
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	d103      	bne.n	800f7b6 <xQueueGenericSend+0x126>
 800f7ae:	6a3b      	ldr	r3, [r7, #32]
 800f7b0:	2245      	movs	r2, #69	@ 0x45
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	5499      	strb	r1, [r3, r2]
 800f7b6:	f001 fe8d 	bl	80114d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7ba:	1d3a      	adds	r2, r7, #4
 800f7bc:	2314      	movs	r3, #20
 800f7be:	18fb      	adds	r3, r7, r3
 800f7c0:	0011      	movs	r1, r2
 800f7c2:	0018      	movs	r0, r3
 800f7c4:	f000 ff60 	bl	8010688 <xTaskCheckForTimeOut>
 800f7c8:	1e03      	subs	r3, r0, #0
 800f7ca:	d11e      	bne.n	800f80a <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	0018      	movs	r0, r3
 800f7d0:	f000 fa5a 	bl	800fc88 <prvIsQueueFull>
 800f7d4:	1e03      	subs	r3, r0, #0
 800f7d6:	d011      	beq.n	800f7fc <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f7d8:	6a3b      	ldr	r3, [r7, #32]
 800f7da:	3310      	adds	r3, #16
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	0011      	movs	r1, r2
 800f7e0:	0018      	movs	r0, r3
 800f7e2:	f000 fe97 	bl	8010514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f7e6:	6a3b      	ldr	r3, [r7, #32]
 800f7e8:	0018      	movs	r0, r3
 800f7ea:	f000 f9d9 	bl	800fba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f7ee:	f000 fced 	bl	80101cc <xTaskResumeAll>
 800f7f2:	1e03      	subs	r3, r0, #0
 800f7f4:	d18a      	bne.n	800f70c <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800f7f6:	f001 fe4b 	bl	8011490 <vPortYield>
 800f7fa:	e787      	b.n	800f70c <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f7fc:	6a3b      	ldr	r3, [r7, #32]
 800f7fe:	0018      	movs	r0, r3
 800f800:	f000 f9ce 	bl	800fba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f804:	f000 fce2 	bl	80101cc <xTaskResumeAll>
 800f808:	e780      	b.n	800f70c <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	0018      	movs	r0, r3
 800f80e:	f000 f9c7 	bl	800fba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f812:	f000 fcdb 	bl	80101cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f818:	0018      	movs	r0, r3
 800f81a:	46bd      	mov	sp, r7
 800f81c:	b00a      	add	sp, #40	@ 0x28
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f820:	b590      	push	{r4, r7, lr}
 800f822:	b08b      	sub	sp, #44	@ 0x2c
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
 800f82c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d102      	bne.n	800f83e <xQueueGenericSendFromISR+0x1e>
 800f838:	b672      	cpsid	i
 800f83a:	46c0      	nop			@ (mov r8, r8)
 800f83c:	e7fd      	b.n	800f83a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d103      	bne.n	800f84c <xQueueGenericSendFromISR+0x2c>
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d101      	bne.n	800f850 <xQueueGenericSendFromISR+0x30>
 800f84c:	2301      	movs	r3, #1
 800f84e:	e000      	b.n	800f852 <xQueueGenericSendFromISR+0x32>
 800f850:	2300      	movs	r3, #0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d102      	bne.n	800f85c <xQueueGenericSendFromISR+0x3c>
 800f856:	b672      	cpsid	i
 800f858:	46c0      	nop			@ (mov r8, r8)
 800f85a:	e7fd      	b.n	800f858 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	2b02      	cmp	r3, #2
 800f860:	d103      	bne.n	800f86a <xQueueGenericSendFromISR+0x4a>
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f866:	2b01      	cmp	r3, #1
 800f868:	d101      	bne.n	800f86e <xQueueGenericSendFromISR+0x4e>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e000      	b.n	800f870 <xQueueGenericSendFromISR+0x50>
 800f86e:	2300      	movs	r3, #0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d102      	bne.n	800f87a <xQueueGenericSendFromISR+0x5a>
 800f874:	b672      	cpsid	i
 800f876:	46c0      	nop			@ (mov r8, r8)
 800f878:	e7fd      	b.n	800f876 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f87a:	f001 fe43 	bl	8011504 <ulSetInterruptMaskFromISR>
 800f87e:	0003      	movs	r3, r0
 800f880:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f886:	6a3b      	ldr	r3, [r7, #32]
 800f888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d302      	bcc.n	800f894 <xQueueGenericSendFromISR+0x74>
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	2b02      	cmp	r3, #2
 800f892:	d131      	bne.n	800f8f8 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f894:	241b      	movs	r4, #27
 800f896:	193b      	adds	r3, r7, r4
 800f898:	6a3a      	ldr	r2, [r7, #32]
 800f89a:	2145      	movs	r1, #69	@ 0x45
 800f89c:	5c52      	ldrb	r2, [r2, r1]
 800f89e:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8a0:	6a3b      	ldr	r3, [r7, #32]
 800f8a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a4:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8a6:	683a      	ldr	r2, [r7, #0]
 800f8a8:	68b9      	ldr	r1, [r7, #8]
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	0018      	movs	r0, r3
 800f8ae:	f000 f8e6 	bl	800fa7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f8b2:	193b      	adds	r3, r7, r4
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	b25b      	sxtb	r3, r3
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	d111      	bne.n	800f8e0 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d016      	beq.n	800f8f2 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8c4:	6a3b      	ldr	r3, [r7, #32]
 800f8c6:	3324      	adds	r3, #36	@ 0x24
 800f8c8:	0018      	movs	r0, r3
 800f8ca:	f000 fe6b 	bl	80105a4 <xTaskRemoveFromEventList>
 800f8ce:	1e03      	subs	r3, r0, #0
 800f8d0:	d00f      	beq.n	800f8f2 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00c      	beq.n	800f8f2 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	e008      	b.n	800f8f2 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f8e0:	231b      	movs	r3, #27
 800f8e2:	18fb      	adds	r3, r7, r3
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	b259      	sxtb	r1, r3
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	2245      	movs	r2, #69	@ 0x45
 800f8f0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800f8f6:	e001      	b.n	800f8fc <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	0018      	movs	r0, r3
 800f900:	f001 fe06 	bl	8011510 <vClearInterruptMaskFromISR>

	return xReturn;
 800f904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f906:	0018      	movs	r0, r3
 800f908:	46bd      	mov	sp, r7
 800f90a:	b00b      	add	sp, #44	@ 0x2c
 800f90c:	bd90      	pop	{r4, r7, pc}

0800f90e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b08a      	sub	sp, #40	@ 0x28
 800f912:	af00      	add	r7, sp, #0
 800f914:	60f8      	str	r0, [r7, #12]
 800f916:	60b9      	str	r1, [r7, #8]
 800f918:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f91a:	2300      	movs	r3, #0
 800f91c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f922:	6a3b      	ldr	r3, [r7, #32]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d102      	bne.n	800f92e <xQueueReceive+0x20>
 800f928:	b672      	cpsid	i
 800f92a:	46c0      	nop			@ (mov r8, r8)
 800f92c:	e7fd      	b.n	800f92a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d103      	bne.n	800f93c <xQueueReceive+0x2e>
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <xQueueReceive+0x32>
 800f93c:	2301      	movs	r3, #1
 800f93e:	e000      	b.n	800f942 <xQueueReceive+0x34>
 800f940:	2300      	movs	r3, #0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d102      	bne.n	800f94c <xQueueReceive+0x3e>
 800f946:	b672      	cpsid	i
 800f948:	46c0      	nop			@ (mov r8, r8)
 800f94a:	e7fd      	b.n	800f948 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f94c:	f000 ffc6 	bl	80108dc <xTaskGetSchedulerState>
 800f950:	1e03      	subs	r3, r0, #0
 800f952:	d102      	bne.n	800f95a <xQueueReceive+0x4c>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d101      	bne.n	800f95e <xQueueReceive+0x50>
 800f95a:	2301      	movs	r3, #1
 800f95c:	e000      	b.n	800f960 <xQueueReceive+0x52>
 800f95e:	2300      	movs	r3, #0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d102      	bne.n	800f96a <xQueueReceive+0x5c>
 800f964:	b672      	cpsid	i
 800f966:	46c0      	nop			@ (mov r8, r8)
 800f968:	e7fd      	b.n	800f966 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f96a:	f001 fda1 	bl	80114b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f972:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d01a      	beq.n	800f9b0 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	6a3b      	ldr	r3, [r7, #32]
 800f97e:	0011      	movs	r1, r2
 800f980:	0018      	movs	r0, r3
 800f982:	f000 f8e7 	bl	800fb54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	1e5a      	subs	r2, r3, #1
 800f98a:	6a3b      	ldr	r3, [r7, #32]
 800f98c:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f98e:	6a3b      	ldr	r3, [r7, #32]
 800f990:	691b      	ldr	r3, [r3, #16]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d008      	beq.n	800f9a8 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f996:	6a3b      	ldr	r3, [r7, #32]
 800f998:	3310      	adds	r3, #16
 800f99a:	0018      	movs	r0, r3
 800f99c:	f000 fe02 	bl	80105a4 <xTaskRemoveFromEventList>
 800f9a0:	1e03      	subs	r3, r0, #0
 800f9a2:	d001      	beq.n	800f9a8 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f9a4:	f001 fd74 	bl	8011490 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f9a8:	f001 fd94 	bl	80114d4 <vPortExitCritical>
				return pdPASS;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e062      	b.n	800fa76 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d103      	bne.n	800f9be <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9b6:	f001 fd8d 	bl	80114d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e05b      	b.n	800fa76 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9c4:	2314      	movs	r3, #20
 800f9c6:	18fb      	adds	r3, r7, r3
 800f9c8:	0018      	movs	r0, r3
 800f9ca:	f000 fe49 	bl	8010660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9d2:	f001 fd7f 	bl	80114d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9d6:	f000 fbed 	bl	80101b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9da:	f001 fd69 	bl	80114b0 <vPortEnterCritical>
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	2244      	movs	r2, #68	@ 0x44
 800f9e2:	5c9b      	ldrb	r3, [r3, r2]
 800f9e4:	b25b      	sxtb	r3, r3
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	d103      	bne.n	800f9f2 <xQueueReceive+0xe4>
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	2244      	movs	r2, #68	@ 0x44
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	5499      	strb	r1, [r3, r2]
 800f9f2:	6a3b      	ldr	r3, [r7, #32]
 800f9f4:	2245      	movs	r2, #69	@ 0x45
 800f9f6:	5c9b      	ldrb	r3, [r3, r2]
 800f9f8:	b25b      	sxtb	r3, r3
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	d103      	bne.n	800fa06 <xQueueReceive+0xf8>
 800f9fe:	6a3b      	ldr	r3, [r7, #32]
 800fa00:	2245      	movs	r2, #69	@ 0x45
 800fa02:	2100      	movs	r1, #0
 800fa04:	5499      	strb	r1, [r3, r2]
 800fa06:	f001 fd65 	bl	80114d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa0a:	1d3a      	adds	r2, r7, #4
 800fa0c:	2314      	movs	r3, #20
 800fa0e:	18fb      	adds	r3, r7, r3
 800fa10:	0011      	movs	r1, r2
 800fa12:	0018      	movs	r0, r3
 800fa14:	f000 fe38 	bl	8010688 <xTaskCheckForTimeOut>
 800fa18:	1e03      	subs	r3, r0, #0
 800fa1a:	d11e      	bne.n	800fa5a <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	0018      	movs	r0, r3
 800fa20:	f000 f91c 	bl	800fc5c <prvIsQueueEmpty>
 800fa24:	1e03      	subs	r3, r0, #0
 800fa26:	d011      	beq.n	800fa4c <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	3324      	adds	r3, #36	@ 0x24
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	0011      	movs	r1, r2
 800fa30:	0018      	movs	r0, r3
 800fa32:	f000 fd6f 	bl	8010514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	0018      	movs	r0, r3
 800fa3a:	f000 f8b1 	bl	800fba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa3e:	f000 fbc5 	bl	80101cc <xTaskResumeAll>
 800fa42:	1e03      	subs	r3, r0, #0
 800fa44:	d191      	bne.n	800f96a <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800fa46:	f001 fd23 	bl	8011490 <vPortYield>
 800fa4a:	e78e      	b.n	800f96a <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa4c:	6a3b      	ldr	r3, [r7, #32]
 800fa4e:	0018      	movs	r0, r3
 800fa50:	f000 f8a6 	bl	800fba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa54:	f000 fbba 	bl	80101cc <xTaskResumeAll>
 800fa58:	e787      	b.n	800f96a <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa5a:	6a3b      	ldr	r3, [r7, #32]
 800fa5c:	0018      	movs	r0, r3
 800fa5e:	f000 f89f 	bl	800fba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa62:	f000 fbb3 	bl	80101cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa66:	6a3b      	ldr	r3, [r7, #32]
 800fa68:	0018      	movs	r0, r3
 800fa6a:	f000 f8f7 	bl	800fc5c <prvIsQueueEmpty>
 800fa6e:	1e03      	subs	r3, r0, #0
 800fa70:	d100      	bne.n	800fa74 <xQueueReceive+0x166>
 800fa72:	e77a      	b.n	800f96a <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa76:	0018      	movs	r0, r3
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	b00a      	add	sp, #40	@ 0x28
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b086      	sub	sp, #24
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	60f8      	str	r0, [r7, #12]
 800fa86:	60b9      	str	r1, [r7, #8]
 800fa88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10e      	bne.n	800faba <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d14e      	bne.n	800fb42 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	0018      	movs	r0, r3
 800faaa:	f000 ff33 	bl	8010914 <xTaskPriorityDisinherit>
 800faae:	0003      	movs	r3, r0
 800fab0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	609a      	str	r2, [r3, #8]
 800fab8:	e043      	b.n	800fb42 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d119      	bne.n	800faf4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6858      	ldr	r0, [r3, #4]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	0019      	movs	r1, r3
 800facc:	f003 fad6 	bl	801307c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	685a      	ldr	r2, [r3, #4]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fad8:	18d2      	adds	r2, r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	685a      	ldr	r2, [r3, #4]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d32b      	bcc.n	800fb42 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	605a      	str	r2, [r3, #4]
 800faf2:	e026      	b.n	800fb42 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	68d8      	ldr	r0, [r3, #12]
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	0019      	movs	r1, r3
 800fb00:	f003 fabc 	bl	801307c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	68da      	ldr	r2, [r3, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb0c:	425b      	negs	r3, r3
 800fb0e:	18d2      	adds	r2, r2, r3
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	68da      	ldr	r2, [r3, #12]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d207      	bcs.n	800fb30 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	689a      	ldr	r2, [r3, #8]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb28:	425b      	negs	r3, r3
 800fb2a:	18d2      	adds	r2, r2, r3
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d105      	bne.n	800fb42 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d002      	beq.n	800fb42 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	1c5a      	adds	r2, r3, #1
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fb4a:	697b      	ldr	r3, [r7, #20]
}
 800fb4c:	0018      	movs	r0, r3
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	b006      	add	sp, #24
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d018      	beq.n	800fb98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	68da      	ldr	r2, [r3, #12]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb6e:	18d2      	adds	r2, r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	68da      	ldr	r2, [r3, #12]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d303      	bcc.n	800fb88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68d9      	ldr	r1, [r3, #12]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	0018      	movs	r0, r3
 800fb94:	f003 fa72 	bl	801307c <memcpy>
	}
}
 800fb98:	46c0      	nop			@ (mov r8, r8)
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	b002      	add	sp, #8
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fba8:	f001 fc82 	bl	80114b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fbac:	230f      	movs	r3, #15
 800fbae:	18fb      	adds	r3, r7, r3
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	2145      	movs	r1, #69	@ 0x45
 800fbb4:	5c52      	ldrb	r2, [r2, r1]
 800fbb6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbb8:	e013      	b.n	800fbe2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d016      	beq.n	800fbf0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3324      	adds	r3, #36	@ 0x24
 800fbc6:	0018      	movs	r0, r3
 800fbc8:	f000 fcec 	bl	80105a4 <xTaskRemoveFromEventList>
 800fbcc:	1e03      	subs	r3, r0, #0
 800fbce:	d001      	beq.n	800fbd4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fbd0:	f000 fdac 	bl	801072c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fbd4:	210f      	movs	r1, #15
 800fbd6:	187b      	adds	r3, r7, r1
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	b2da      	uxtb	r2, r3
 800fbde:	187b      	adds	r3, r7, r1
 800fbe0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbe2:	230f      	movs	r3, #15
 800fbe4:	18fb      	adds	r3, r7, r3
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	b25b      	sxtb	r3, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	dce5      	bgt.n	800fbba <prvUnlockQueue+0x1a>
 800fbee:	e000      	b.n	800fbf2 <prvUnlockQueue+0x52>
					break;
 800fbf0:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2245      	movs	r2, #69	@ 0x45
 800fbf6:	21ff      	movs	r1, #255	@ 0xff
 800fbf8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800fbfa:	f001 fc6b 	bl	80114d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fbfe:	f001 fc57 	bl	80114b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fc02:	230e      	movs	r3, #14
 800fc04:	18fb      	adds	r3, r7, r3
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	2144      	movs	r1, #68	@ 0x44
 800fc0a:	5c52      	ldrb	r2, [r2, r1]
 800fc0c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc0e:	e013      	b.n	800fc38 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d016      	beq.n	800fc46 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	3310      	adds	r3, #16
 800fc1c:	0018      	movs	r0, r3
 800fc1e:	f000 fcc1 	bl	80105a4 <xTaskRemoveFromEventList>
 800fc22:	1e03      	subs	r3, r0, #0
 800fc24:	d001      	beq.n	800fc2a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800fc26:	f000 fd81 	bl	801072c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fc2a:	210e      	movs	r1, #14
 800fc2c:	187b      	adds	r3, r7, r1
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	187b      	adds	r3, r7, r1
 800fc36:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc38:	230e      	movs	r3, #14
 800fc3a:	18fb      	adds	r3, r7, r3
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	dce5      	bgt.n	800fc10 <prvUnlockQueue+0x70>
 800fc44:	e000      	b.n	800fc48 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800fc46:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2244      	movs	r2, #68	@ 0x44
 800fc4c:	21ff      	movs	r1, #255	@ 0xff
 800fc4e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800fc50:	f001 fc40 	bl	80114d4 <vPortExitCritical>
}
 800fc54:	46c0      	nop			@ (mov r8, r8)
 800fc56:	46bd      	mov	sp, r7
 800fc58:	b004      	add	sp, #16
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc64:	f001 fc24 	bl	80114b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d102      	bne.n	800fc76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fc70:	2301      	movs	r3, #1
 800fc72:	60fb      	str	r3, [r7, #12]
 800fc74:	e001      	b.n	800fc7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fc76:	2300      	movs	r3, #0
 800fc78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc7a:	f001 fc2b 	bl	80114d4 <vPortExitCritical>

	return xReturn;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
}
 800fc80:	0018      	movs	r0, r3
 800fc82:	46bd      	mov	sp, r7
 800fc84:	b004      	add	sp, #16
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc90:	f001 fc0e 	bl	80114b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d102      	bne.n	800fca6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fca0:	2301      	movs	r3, #1
 800fca2:	60fb      	str	r3, [r7, #12]
 800fca4:	e001      	b.n	800fcaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fca6:	2300      	movs	r3, #0
 800fca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fcaa:	f001 fc13 	bl	80114d4 <vPortExitCritical>

	return xReturn;
 800fcae:	68fb      	ldr	r3, [r7, #12]
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b004      	add	sp, #16
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	60fb      	str	r3, [r7, #12]
 800fcc6:	e015      	b.n	800fcf4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fcc8:	4b0e      	ldr	r3, [pc, #56]	@ (800fd04 <vQueueAddToRegistry+0x4c>)
 800fcca:	68fa      	ldr	r2, [r7, #12]
 800fccc:	00d2      	lsls	r2, r2, #3
 800fcce:	58d3      	ldr	r3, [r2, r3]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10c      	bne.n	800fcee <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fcd4:	4b0b      	ldr	r3, [pc, #44]	@ (800fd04 <vQueueAddToRegistry+0x4c>)
 800fcd6:	68fa      	ldr	r2, [r7, #12]
 800fcd8:	00d2      	lsls	r2, r2, #3
 800fcda:	6839      	ldr	r1, [r7, #0]
 800fcdc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fcde:	4a09      	ldr	r2, [pc, #36]	@ (800fd04 <vQueueAddToRegistry+0x4c>)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	00db      	lsls	r3, r3, #3
 800fce4:	18d3      	adds	r3, r2, r3
 800fce6:	3304      	adds	r3, #4
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fcec:	e006      	b.n	800fcfc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b07      	cmp	r3, #7
 800fcf8:	d9e6      	bls.n	800fcc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fcfa:	46c0      	nop			@ (mov r8, r8)
 800fcfc:	46c0      	nop			@ (mov r8, r8)
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	b004      	add	sp, #16
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	200036b0 	.word	0x200036b0

0800fd08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b086      	sub	sp, #24
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fd18:	f001 fbca 	bl	80114b0 <vPortEnterCritical>
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	2244      	movs	r2, #68	@ 0x44
 800fd20:	5c9b      	ldrb	r3, [r3, r2]
 800fd22:	b25b      	sxtb	r3, r3
 800fd24:	3301      	adds	r3, #1
 800fd26:	d103      	bne.n	800fd30 <vQueueWaitForMessageRestricted+0x28>
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	2244      	movs	r2, #68	@ 0x44
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	5499      	strb	r1, [r3, r2]
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	2245      	movs	r2, #69	@ 0x45
 800fd34:	5c9b      	ldrb	r3, [r3, r2]
 800fd36:	b25b      	sxtb	r3, r3
 800fd38:	3301      	adds	r3, #1
 800fd3a:	d103      	bne.n	800fd44 <vQueueWaitForMessageRestricted+0x3c>
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	2245      	movs	r2, #69	@ 0x45
 800fd40:	2100      	movs	r1, #0
 800fd42:	5499      	strb	r1, [r3, r2]
 800fd44:	f001 fbc6 	bl	80114d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d106      	bne.n	800fd5e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	3324      	adds	r3, #36	@ 0x24
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	68b9      	ldr	r1, [r7, #8]
 800fd58:	0018      	movs	r0, r3
 800fd5a:	f000 fbfb 	bl	8010554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	0018      	movs	r0, r3
 800fd62:	f7ff ff1d 	bl	800fba0 <prvUnlockQueue>
	}
 800fd66:	46c0      	nop			@ (mov r8, r8)
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	b006      	add	sp, #24
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fd6e:	b590      	push	{r4, r7, lr}
 800fd70:	b08d      	sub	sp, #52	@ 0x34
 800fd72:	af04      	add	r7, sp, #16
 800fd74:	60f8      	str	r0, [r7, #12]
 800fd76:	60b9      	str	r1, [r7, #8]
 800fd78:	607a      	str	r2, [r7, #4]
 800fd7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d102      	bne.n	800fd88 <xTaskCreateStatic+0x1a>
 800fd82:	b672      	cpsid	i
 800fd84:	46c0      	nop			@ (mov r8, r8)
 800fd86:	e7fd      	b.n	800fd84 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800fd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d102      	bne.n	800fd94 <xTaskCreateStatic+0x26>
 800fd8e:	b672      	cpsid	i
 800fd90:	46c0      	nop			@ (mov r8, r8)
 800fd92:	e7fd      	b.n	800fd90 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fd94:	23a8      	movs	r3, #168	@ 0xa8
 800fd96:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	2ba8      	cmp	r3, #168	@ 0xa8
 800fd9c:	d002      	beq.n	800fda4 <xTaskCreateStatic+0x36>
 800fd9e:	b672      	cpsid	i
 800fda0:	46c0      	nop			@ (mov r8, r8)
 800fda2:	e7fd      	b.n	800fda0 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fda4:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d020      	beq.n	800fdee <xTaskCreateStatic+0x80>
 800fdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d01d      	beq.n	800fdee <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fdba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	22a5      	movs	r2, #165	@ 0xa5
 800fdc0:	2102      	movs	r1, #2
 800fdc2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fdc4:	683c      	ldr	r4, [r7, #0]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9303      	str	r3, [sp, #12]
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	9302      	str	r3, [sp, #8]
 800fdd4:	2318      	movs	r3, #24
 800fdd6:	18fb      	adds	r3, r7, r3
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	0023      	movs	r3, r4
 800fde0:	f000 f858 	bl	800fe94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	0018      	movs	r0, r3
 800fde8:	f000 f8f6 	bl	800ffd8 <prvAddNewTaskToReadyList>
 800fdec:	e001      	b.n	800fdf2 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fdf2:	69bb      	ldr	r3, [r7, #24]
	}
 800fdf4:	0018      	movs	r0, r3
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	b009      	add	sp, #36	@ 0x24
 800fdfa:	bd90      	pop	{r4, r7, pc}

0800fdfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fdfc:	b590      	push	{r4, r7, lr}
 800fdfe:	b08d      	sub	sp, #52	@ 0x34
 800fe00:	af04      	add	r7, sp, #16
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	603b      	str	r3, [r7, #0]
 800fe08:	1dbb      	adds	r3, r7, #6
 800fe0a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fe0c:	1dbb      	adds	r3, r7, #6
 800fe0e:	881b      	ldrh	r3, [r3, #0]
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	0018      	movs	r0, r3
 800fe14:	f001 fbe4 	bl	80115e0 <pvPortMalloc>
 800fe18:	0003      	movs	r3, r0
 800fe1a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d010      	beq.n	800fe44 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fe22:	20a8      	movs	r0, #168	@ 0xa8
 800fe24:	f001 fbdc 	bl	80115e0 <pvPortMalloc>
 800fe28:	0003      	movs	r3, r0
 800fe2a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d003      	beq.n	800fe3a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	697a      	ldr	r2, [r7, #20]
 800fe36:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe38:	e006      	b.n	800fe48 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	0018      	movs	r0, r3
 800fe3e:	f001 fc7f 	bl	8011740 <vPortFree>
 800fe42:	e001      	b.n	800fe48 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fe44:	2300      	movs	r3, #0
 800fe46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d01a      	beq.n	800fe84 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	22a5      	movs	r2, #165	@ 0xa5
 800fe52:	2100      	movs	r1, #0
 800fe54:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fe56:	1dbb      	adds	r3, r7, #6
 800fe58:	881a      	ldrh	r2, [r3, #0]
 800fe5a:	683c      	ldr	r4, [r7, #0]
 800fe5c:	68b9      	ldr	r1, [r7, #8]
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	2300      	movs	r3, #0
 800fe62:	9303      	str	r3, [sp, #12]
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	9302      	str	r3, [sp, #8]
 800fe68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	0023      	movs	r3, r4
 800fe72:	f000 f80f 	bl	800fe94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	0018      	movs	r0, r3
 800fe7a:	f000 f8ad 	bl	800ffd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	61bb      	str	r3, [r7, #24]
 800fe82:	e002      	b.n	800fe8a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe84:	2301      	movs	r3, #1
 800fe86:	425b      	negs	r3, r3
 800fe88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fe8a:	69bb      	ldr	r3, [r7, #24]
	}
 800fe8c:	0018      	movs	r0, r3
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	b009      	add	sp, #36	@ 0x24
 800fe92:	bd90      	pop	{r4, r7, pc}

0800fe94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b086      	sub	sp, #24
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
 800fea0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	001a      	movs	r2, r3
 800feac:	21a5      	movs	r1, #165	@ 0xa5
 800feae:	f002 fff3 	bl	8012e98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800feb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4943      	ldr	r1, [pc, #268]	@ (800ffc8 <prvInitialiseNewTask+0x134>)
 800feba:	468c      	mov	ip, r1
 800febc:	4463      	add	r3, ip
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	18d3      	adds	r3, r2, r3
 800fec2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2207      	movs	r2, #7
 800fec8:	4393      	bics	r3, r2
 800feca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	2207      	movs	r2, #7
 800fed0:	4013      	ands	r3, r2
 800fed2:	d002      	beq.n	800feda <prvInitialiseNewTask+0x46>
 800fed4:	b672      	cpsid	i
 800fed6:	46c0      	nop			@ (mov r8, r8)
 800fed8:	e7fd      	b.n	800fed6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d020      	beq.n	800ff22 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fee0:	2300      	movs	r3, #0
 800fee2:	617b      	str	r3, [r7, #20]
 800fee4:	e013      	b.n	800ff0e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	18d3      	adds	r3, r2, r3
 800feec:	7818      	ldrb	r0, [r3, #0]
 800feee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fef0:	2134      	movs	r1, #52	@ 0x34
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	18d3      	adds	r3, r2, r3
 800fef6:	185b      	adds	r3, r3, r1
 800fef8:	1c02      	adds	r2, r0, #0
 800fefa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	18d3      	adds	r3, r2, r3
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d006      	beq.n	800ff16 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	617b      	str	r3, [r7, #20]
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b0f      	cmp	r3, #15
 800ff12:	d9e8      	bls.n	800fee6 <prvInitialiseNewTask+0x52>
 800ff14:	e000      	b.n	800ff18 <prvInitialiseNewTask+0x84>
			{
				break;
 800ff16:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1a:	2243      	movs	r2, #67	@ 0x43
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	5499      	strb	r1, [r3, r2]
 800ff20:	e003      	b.n	800ff2a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ff22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff24:	2234      	movs	r2, #52	@ 0x34
 800ff26:	2100      	movs	r1, #0
 800ff28:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	2b37      	cmp	r3, #55	@ 0x37
 800ff2e:	d901      	bls.n	800ff34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff30:	2337      	movs	r3, #55	@ 0x37
 800ff32:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff36:	6a3a      	ldr	r2, [r7, #32]
 800ff38:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ff3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3c:	6a3a      	ldr	r2, [r7, #32]
 800ff3e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ff40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff42:	2200      	movs	r2, #0
 800ff44:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff48:	3304      	adds	r3, #4
 800ff4a:	0018      	movs	r0, r3
 800ff4c:	f7ff fa48 	bl	800f3e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ff50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff52:	3318      	adds	r3, #24
 800ff54:	0018      	movs	r0, r3
 800ff56:	f7ff fa43 	bl	800f3e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ff5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff60:	6a3b      	ldr	r3, [r7, #32]
 800ff62:	2238      	movs	r2, #56	@ 0x38
 800ff64:	1ad2      	subs	r2, r2, r3
 800ff66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff6e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff72:	22a0      	movs	r2, #160	@ 0xa0
 800ff74:	2100      	movs	r1, #0
 800ff76:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7a:	22a4      	movs	r2, #164	@ 0xa4
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ff80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff82:	3354      	adds	r3, #84	@ 0x54
 800ff84:	224c      	movs	r2, #76	@ 0x4c
 800ff86:	2100      	movs	r1, #0
 800ff88:	0018      	movs	r0, r3
 800ff8a:	f002 ff85 	bl	8012e98 <memset>
 800ff8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff90:	4a0e      	ldr	r2, [pc, #56]	@ (800ffcc <prvInitialiseNewTask+0x138>)
 800ff92:	659a      	str	r2, [r3, #88]	@ 0x58
 800ff94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff96:	4a0e      	ldr	r2, [pc, #56]	@ (800ffd0 <prvInitialiseNewTask+0x13c>)
 800ff98:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ff9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff9c:	4a0d      	ldr	r2, [pc, #52]	@ (800ffd4 <prvInitialiseNewTask+0x140>)
 800ff9e:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	68f9      	ldr	r1, [r7, #12]
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	f001 f9e4 	bl	8011374 <pxPortInitialiseStack>
 800ffac:	0002      	movs	r2, r0
 800ffae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d002      	beq.n	800ffbe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ffb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ffbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffbe:	46c0      	nop			@ (mov r8, r8)
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	b006      	add	sp, #24
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	46c0      	nop			@ (mov r8, r8)
 800ffc8:	3fffffff 	.word	0x3fffffff
 800ffcc:	2000713c 	.word	0x2000713c
 800ffd0:	200071a4 	.word	0x200071a4
 800ffd4:	2000720c 	.word	0x2000720c

0800ffd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ffe0:	f001 fa66 	bl	80114b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ffe4:	4b2a      	ldr	r3, [pc, #168]	@ (8010090 <prvAddNewTaskToReadyList+0xb8>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	1c5a      	adds	r2, r3, #1
 800ffea:	4b29      	ldr	r3, [pc, #164]	@ (8010090 <prvAddNewTaskToReadyList+0xb8>)
 800ffec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ffee:	4b29      	ldr	r3, [pc, #164]	@ (8010094 <prvAddNewTaskToReadyList+0xbc>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d109      	bne.n	801000a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fff6:	4b27      	ldr	r3, [pc, #156]	@ (8010094 <prvAddNewTaskToReadyList+0xbc>)
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fffc:	4b24      	ldr	r3, [pc, #144]	@ (8010090 <prvAddNewTaskToReadyList+0xb8>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b01      	cmp	r3, #1
 8010002:	d110      	bne.n	8010026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010004:	f000 fbac 	bl	8010760 <prvInitialiseTaskLists>
 8010008:	e00d      	b.n	8010026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801000a:	4b23      	ldr	r3, [pc, #140]	@ (8010098 <prvAddNewTaskToReadyList+0xc0>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d109      	bne.n	8010026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010012:	4b20      	ldr	r3, [pc, #128]	@ (8010094 <prvAddNewTaskToReadyList+0xbc>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801001c:	429a      	cmp	r2, r3
 801001e:	d802      	bhi.n	8010026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010020:	4b1c      	ldr	r3, [pc, #112]	@ (8010094 <prvAddNewTaskToReadyList+0xbc>)
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010026:	4b1d      	ldr	r3, [pc, #116]	@ (801009c <prvAddNewTaskToReadyList+0xc4>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	1c5a      	adds	r2, r3, #1
 801002c:	4b1b      	ldr	r3, [pc, #108]	@ (801009c <prvAddNewTaskToReadyList+0xc4>)
 801002e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010030:	4b1a      	ldr	r3, [pc, #104]	@ (801009c <prvAddNewTaskToReadyList+0xc4>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801003c:	4b18      	ldr	r3, [pc, #96]	@ (80100a0 <prvAddNewTaskToReadyList+0xc8>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	d903      	bls.n	801004c <prvAddNewTaskToReadyList+0x74>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010048:	4b15      	ldr	r3, [pc, #84]	@ (80100a0 <prvAddNewTaskToReadyList+0xc8>)
 801004a:	601a      	str	r2, [r3, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010050:	0013      	movs	r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	189b      	adds	r3, r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4a12      	ldr	r2, [pc, #72]	@ (80100a4 <prvAddNewTaskToReadyList+0xcc>)
 801005a:	189a      	adds	r2, r3, r2
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3304      	adds	r3, #4
 8010060:	0019      	movs	r1, r3
 8010062:	0010      	movs	r0, r2
 8010064:	f7ff f9c7 	bl	800f3f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010068:	f001 fa34 	bl	80114d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801006c:	4b0a      	ldr	r3, [pc, #40]	@ (8010098 <prvAddNewTaskToReadyList+0xc0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d008      	beq.n	8010086 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010074:	4b07      	ldr	r3, [pc, #28]	@ (8010094 <prvAddNewTaskToReadyList+0xbc>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801007e:	429a      	cmp	r2, r3
 8010080:	d201      	bcs.n	8010086 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010082:	f001 fa05 	bl	8011490 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010086:	46c0      	nop			@ (mov r8, r8)
 8010088:	46bd      	mov	sp, r7
 801008a:	b002      	add	sp, #8
 801008c:	bd80      	pop	{r7, pc}
 801008e:	46c0      	nop			@ (mov r8, r8)
 8010090:	20003bc4 	.word	0x20003bc4
 8010094:	200036f0 	.word	0x200036f0
 8010098:	20003bd0 	.word	0x20003bd0
 801009c:	20003be0 	.word	0x20003be0
 80100a0:	20003bcc 	.word	0x20003bcc
 80100a4:	200036f4 	.word	0x200036f4

080100a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80100b0:	2300      	movs	r3, #0
 80100b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d011      	beq.n	80100de <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80100ba:	4b0d      	ldr	r3, [pc, #52]	@ (80100f0 <vTaskDelay+0x48>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d002      	beq.n	80100c8 <vTaskDelay+0x20>
 80100c2:	b672      	cpsid	i
 80100c4:	46c0      	nop			@ (mov r8, r8)
 80100c6:	e7fd      	b.n	80100c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80100c8:	f000 f874 	bl	80101b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2100      	movs	r1, #0
 80100d0:	0018      	movs	r0, r3
 80100d2:	f000 fd3f 	bl	8010b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80100d6:	f000 f879 	bl	80101cc <xTaskResumeAll>
 80100da:	0003      	movs	r3, r0
 80100dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d101      	bne.n	80100e8 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80100e4:	f001 f9d4 	bl	8011490 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100e8:	46c0      	nop			@ (mov r8, r8)
 80100ea:	46bd      	mov	sp, r7
 80100ec:	b004      	add	sp, #16
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	20003bec 	.word	0x20003bec

080100f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b089      	sub	sp, #36	@ 0x24
 80100f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80100fe:	2300      	movs	r3, #0
 8010100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010102:	003a      	movs	r2, r7
 8010104:	1d39      	adds	r1, r7, #4
 8010106:	2308      	movs	r3, #8
 8010108:	18fb      	adds	r3, r7, r3
 801010a:	0018      	movs	r0, r3
 801010c:	f7ff f91a 	bl	800f344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010110:	683c      	ldr	r4, [r7, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	491f      	ldr	r1, [pc, #124]	@ (8010194 <vTaskStartScheduler+0xa0>)
 8010118:	481f      	ldr	r0, [pc, #124]	@ (8010198 <vTaskStartScheduler+0xa4>)
 801011a:	9202      	str	r2, [sp, #8]
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	2300      	movs	r3, #0
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	2300      	movs	r3, #0
 8010124:	0022      	movs	r2, r4
 8010126:	f7ff fe22 	bl	800fd6e <xTaskCreateStatic>
 801012a:	0002      	movs	r2, r0
 801012c:	4b1b      	ldr	r3, [pc, #108]	@ (801019c <vTaskStartScheduler+0xa8>)
 801012e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010130:	4b1a      	ldr	r3, [pc, #104]	@ (801019c <vTaskStartScheduler+0xa8>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010138:	2301      	movs	r3, #1
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	e001      	b.n	8010142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d103      	bne.n	8010150 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8010148:	f000 fd58 	bl	8010bfc <xTimerCreateTimerTask>
 801014c:	0003      	movs	r3, r0
 801014e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d113      	bne.n	801017e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8010156:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010158:	4b11      	ldr	r3, [pc, #68]	@ (80101a0 <vTaskStartScheduler+0xac>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3354      	adds	r3, #84	@ 0x54
 801015e:	001a      	movs	r2, r3
 8010160:	4b10      	ldr	r3, [pc, #64]	@ (80101a4 <vTaskStartScheduler+0xb0>)
 8010162:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010164:	4b10      	ldr	r3, [pc, #64]	@ (80101a8 <vTaskStartScheduler+0xb4>)
 8010166:	2201      	movs	r2, #1
 8010168:	4252      	negs	r2, r2
 801016a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801016c:	4b0f      	ldr	r3, [pc, #60]	@ (80101ac <vTaskStartScheduler+0xb8>)
 801016e:	2201      	movs	r2, #1
 8010170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010172:	4b0f      	ldr	r3, [pc, #60]	@ (80101b0 <vTaskStartScheduler+0xbc>)
 8010174:	2200      	movs	r2, #0
 8010176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010178:	f001 f966 	bl	8011448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801017c:	e005      	b.n	801018a <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	3301      	adds	r3, #1
 8010182:	d102      	bne.n	801018a <vTaskStartScheduler+0x96>
 8010184:	b672      	cpsid	i
 8010186:	46c0      	nop			@ (mov r8, r8)
 8010188:	e7fd      	b.n	8010186 <vTaskStartScheduler+0x92>
}
 801018a:	46c0      	nop			@ (mov r8, r8)
 801018c:	46bd      	mov	sp, r7
 801018e:	b005      	add	sp, #20
 8010190:	bd90      	pop	{r4, r7, pc}
 8010192:	46c0      	nop			@ (mov r8, r8)
 8010194:	080170c8 	.word	0x080170c8
 8010198:	08010741 	.word	0x08010741
 801019c:	20003be8 	.word	0x20003be8
 80101a0:	200036f0 	.word	0x200036f0
 80101a4:	20000094 	.word	0x20000094
 80101a8:	20003be4 	.word	0x20003be4
 80101ac:	20003bd0 	.word	0x20003bd0
 80101b0:	20003bc8 	.word	0x20003bc8

080101b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80101b8:	4b03      	ldr	r3, [pc, #12]	@ (80101c8 <vTaskSuspendAll+0x14>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	1c5a      	adds	r2, r3, #1
 80101be:	4b02      	ldr	r3, [pc, #8]	@ (80101c8 <vTaskSuspendAll+0x14>)
 80101c0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80101c2:	46c0      	nop			@ (mov r8, r8)
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	20003bec 	.word	0x20003bec

080101cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80101d6:	2300      	movs	r3, #0
 80101d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80101da:	4b3a      	ldr	r3, [pc, #232]	@ (80102c4 <xTaskResumeAll+0xf8>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d102      	bne.n	80101e8 <xTaskResumeAll+0x1c>
 80101e2:	b672      	cpsid	i
 80101e4:	46c0      	nop			@ (mov r8, r8)
 80101e6:	e7fd      	b.n	80101e4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80101e8:	f001 f962 	bl	80114b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101ec:	4b35      	ldr	r3, [pc, #212]	@ (80102c4 <xTaskResumeAll+0xf8>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	1e5a      	subs	r2, r3, #1
 80101f2:	4b34      	ldr	r3, [pc, #208]	@ (80102c4 <xTaskResumeAll+0xf8>)
 80101f4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101f6:	4b33      	ldr	r3, [pc, #204]	@ (80102c4 <xTaskResumeAll+0xf8>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d15b      	bne.n	80102b6 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101fe:	4b32      	ldr	r3, [pc, #200]	@ (80102c8 <xTaskResumeAll+0xfc>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d057      	beq.n	80102b6 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010206:	e02f      	b.n	8010268 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010208:	4b30      	ldr	r3, [pc, #192]	@ (80102cc <xTaskResumeAll+0x100>)
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	3318      	adds	r3, #24
 8010214:	0018      	movs	r0, r3
 8010216:	f7ff f946 	bl	800f4a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	3304      	adds	r3, #4
 801021e:	0018      	movs	r0, r3
 8010220:	f7ff f941 	bl	800f4a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010228:	4b29      	ldr	r3, [pc, #164]	@ (80102d0 <xTaskResumeAll+0x104>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	429a      	cmp	r2, r3
 801022e:	d903      	bls.n	8010238 <xTaskResumeAll+0x6c>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010234:	4b26      	ldr	r3, [pc, #152]	@ (80102d0 <xTaskResumeAll+0x104>)
 8010236:	601a      	str	r2, [r3, #0]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801023c:	0013      	movs	r3, r2
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	189b      	adds	r3, r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4a23      	ldr	r2, [pc, #140]	@ (80102d4 <xTaskResumeAll+0x108>)
 8010246:	189a      	adds	r2, r3, r2
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	3304      	adds	r3, #4
 801024c:	0019      	movs	r1, r3
 801024e:	0010      	movs	r0, r2
 8010250:	f7ff f8d1 	bl	800f3f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010258:	4b1f      	ldr	r3, [pc, #124]	@ (80102d8 <xTaskResumeAll+0x10c>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025e:	429a      	cmp	r2, r3
 8010260:	d302      	bcc.n	8010268 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8010262:	4b1e      	ldr	r3, [pc, #120]	@ (80102dc <xTaskResumeAll+0x110>)
 8010264:	2201      	movs	r2, #1
 8010266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010268:	4b18      	ldr	r3, [pc, #96]	@ (80102cc <xTaskResumeAll+0x100>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1cb      	bne.n	8010208 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010276:	f000 fb13 	bl	80108a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801027a:	4b19      	ldr	r3, [pc, #100]	@ (80102e0 <xTaskResumeAll+0x114>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00f      	beq.n	80102a6 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010286:	f000 f83b 	bl	8010300 <xTaskIncrementTick>
 801028a:	1e03      	subs	r3, r0, #0
 801028c:	d002      	beq.n	8010294 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 801028e:	4b13      	ldr	r3, [pc, #76]	@ (80102dc <xTaskResumeAll+0x110>)
 8010290:	2201      	movs	r2, #1
 8010292:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	3b01      	subs	r3, #1
 8010298:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1f2      	bne.n	8010286 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80102a0:	4b0f      	ldr	r3, [pc, #60]	@ (80102e0 <xTaskResumeAll+0x114>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80102a6:	4b0d      	ldr	r3, [pc, #52]	@ (80102dc <xTaskResumeAll+0x110>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d003      	beq.n	80102b6 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80102ae:	2301      	movs	r3, #1
 80102b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80102b2:	f001 f8ed 	bl	8011490 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80102b6:	f001 f90d 	bl	80114d4 <vPortExitCritical>

	return xAlreadyYielded;
 80102ba:	68bb      	ldr	r3, [r7, #8]
}
 80102bc:	0018      	movs	r0, r3
 80102be:	46bd      	mov	sp, r7
 80102c0:	b004      	add	sp, #16
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	20003bec 	.word	0x20003bec
 80102c8:	20003bc4 	.word	0x20003bc4
 80102cc:	20003b84 	.word	0x20003b84
 80102d0:	20003bcc 	.word	0x20003bcc
 80102d4:	200036f4 	.word	0x200036f4
 80102d8:	200036f0 	.word	0x200036f0
 80102dc:	20003bd8 	.word	0x20003bd8
 80102e0:	20003bd4 	.word	0x20003bd4

080102e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80102ea:	4b04      	ldr	r3, [pc, #16]	@ (80102fc <xTaskGetTickCount+0x18>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80102f0:	687b      	ldr	r3, [r7, #4]
}
 80102f2:	0018      	movs	r0, r3
 80102f4:	46bd      	mov	sp, r7
 80102f6:	b002      	add	sp, #8
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	46c0      	nop			@ (mov r8, r8)
 80102fc:	20003bc8 	.word	0x20003bc8

08010300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010306:	2300      	movs	r3, #0
 8010308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801030a:	4b4a      	ldr	r3, [pc, #296]	@ (8010434 <xTaskIncrementTick+0x134>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d000      	beq.n	8010314 <xTaskIncrementTick+0x14>
 8010312:	e085      	b.n	8010420 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010314:	4b48      	ldr	r3, [pc, #288]	@ (8010438 <xTaskIncrementTick+0x138>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	3301      	adds	r3, #1
 801031a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801031c:	4b46      	ldr	r3, [pc, #280]	@ (8010438 <xTaskIncrementTick+0x138>)
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d118      	bne.n	801035a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010328:	4b44      	ldr	r3, [pc, #272]	@ (801043c <xTaskIncrementTick+0x13c>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d002      	beq.n	8010338 <xTaskIncrementTick+0x38>
 8010332:	b672      	cpsid	i
 8010334:	46c0      	nop			@ (mov r8, r8)
 8010336:	e7fd      	b.n	8010334 <xTaskIncrementTick+0x34>
 8010338:	4b40      	ldr	r3, [pc, #256]	@ (801043c <xTaskIncrementTick+0x13c>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	60fb      	str	r3, [r7, #12]
 801033e:	4b40      	ldr	r3, [pc, #256]	@ (8010440 <xTaskIncrementTick+0x140>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4b3e      	ldr	r3, [pc, #248]	@ (801043c <xTaskIncrementTick+0x13c>)
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	4b3e      	ldr	r3, [pc, #248]	@ (8010440 <xTaskIncrementTick+0x140>)
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	601a      	str	r2, [r3, #0]
 801034c:	4b3d      	ldr	r3, [pc, #244]	@ (8010444 <xTaskIncrementTick+0x144>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	1c5a      	adds	r2, r3, #1
 8010352:	4b3c      	ldr	r3, [pc, #240]	@ (8010444 <xTaskIncrementTick+0x144>)
 8010354:	601a      	str	r2, [r3, #0]
 8010356:	f000 faa3 	bl	80108a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801035a:	4b3b      	ldr	r3, [pc, #236]	@ (8010448 <xTaskIncrementTick+0x148>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	693a      	ldr	r2, [r7, #16]
 8010360:	429a      	cmp	r2, r3
 8010362:	d349      	bcc.n	80103f8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010364:	4b35      	ldr	r3, [pc, #212]	@ (801043c <xTaskIncrementTick+0x13c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d104      	bne.n	8010378 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801036e:	4b36      	ldr	r3, [pc, #216]	@ (8010448 <xTaskIncrementTick+0x148>)
 8010370:	2201      	movs	r2, #1
 8010372:	4252      	negs	r2, r2
 8010374:	601a      	str	r2, [r3, #0]
					break;
 8010376:	e03f      	b.n	80103f8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010378:	4b30      	ldr	r3, [pc, #192]	@ (801043c <xTaskIncrementTick+0x13c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	429a      	cmp	r2, r3
 801038e:	d203      	bcs.n	8010398 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010390:	4b2d      	ldr	r3, [pc, #180]	@ (8010448 <xTaskIncrementTick+0x148>)
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010396:	e02f      	b.n	80103f8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	3304      	adds	r3, #4
 801039c:	0018      	movs	r0, r3
 801039e:	f7ff f882 	bl	800f4a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d004      	beq.n	80103b4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	3318      	adds	r3, #24
 80103ae:	0018      	movs	r0, r3
 80103b0:	f7ff f879 	bl	800f4a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103b8:	4b24      	ldr	r3, [pc, #144]	@ (801044c <xTaskIncrementTick+0x14c>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d903      	bls.n	80103c8 <xTaskIncrementTick+0xc8>
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103c4:	4b21      	ldr	r3, [pc, #132]	@ (801044c <xTaskIncrementTick+0x14c>)
 80103c6:	601a      	str	r2, [r3, #0]
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103cc:	0013      	movs	r3, r2
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	189b      	adds	r3, r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	4a1e      	ldr	r2, [pc, #120]	@ (8010450 <xTaskIncrementTick+0x150>)
 80103d6:	189a      	adds	r2, r3, r2
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	3304      	adds	r3, #4
 80103dc:	0019      	movs	r1, r3
 80103de:	0010      	movs	r0, r2
 80103e0:	f7ff f809 	bl	800f3f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103e8:	4b1a      	ldr	r3, [pc, #104]	@ (8010454 <xTaskIncrementTick+0x154>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d3b8      	bcc.n	8010364 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80103f2:	2301      	movs	r3, #1
 80103f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103f6:	e7b5      	b.n	8010364 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103f8:	4b16      	ldr	r3, [pc, #88]	@ (8010454 <xTaskIncrementTick+0x154>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103fe:	4914      	ldr	r1, [pc, #80]	@ (8010450 <xTaskIncrementTick+0x150>)
 8010400:	0013      	movs	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	189b      	adds	r3, r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	585b      	ldr	r3, [r3, r1]
 801040a:	2b01      	cmp	r3, #1
 801040c:	d901      	bls.n	8010412 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 801040e:	2301      	movs	r3, #1
 8010410:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010412:	4b11      	ldr	r3, [pc, #68]	@ (8010458 <xTaskIncrementTick+0x158>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d007      	beq.n	801042a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 801041a:	2301      	movs	r3, #1
 801041c:	617b      	str	r3, [r7, #20]
 801041e:	e004      	b.n	801042a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010420:	4b0e      	ldr	r3, [pc, #56]	@ (801045c <xTaskIncrementTick+0x15c>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	1c5a      	adds	r2, r3, #1
 8010426:	4b0d      	ldr	r3, [pc, #52]	@ (801045c <xTaskIncrementTick+0x15c>)
 8010428:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801042a:	697b      	ldr	r3, [r7, #20]
}
 801042c:	0018      	movs	r0, r3
 801042e:	46bd      	mov	sp, r7
 8010430:	b006      	add	sp, #24
 8010432:	bd80      	pop	{r7, pc}
 8010434:	20003bec 	.word	0x20003bec
 8010438:	20003bc8 	.word	0x20003bc8
 801043c:	20003b7c 	.word	0x20003b7c
 8010440:	20003b80 	.word	0x20003b80
 8010444:	20003bdc 	.word	0x20003bdc
 8010448:	20003be4 	.word	0x20003be4
 801044c:	20003bcc 	.word	0x20003bcc
 8010450:	200036f4 	.word	0x200036f4
 8010454:	200036f0 	.word	0x200036f0
 8010458:	20003bd8 	.word	0x20003bd8
 801045c:	20003bd4 	.word	0x20003bd4

08010460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010466:	4b25      	ldr	r3, [pc, #148]	@ (80104fc <vTaskSwitchContext+0x9c>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d003      	beq.n	8010476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801046e:	4b24      	ldr	r3, [pc, #144]	@ (8010500 <vTaskSwitchContext+0xa0>)
 8010470:	2201      	movs	r2, #1
 8010472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010474:	e03e      	b.n	80104f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010476:	4b22      	ldr	r3, [pc, #136]	@ (8010500 <vTaskSwitchContext+0xa0>)
 8010478:	2200      	movs	r2, #0
 801047a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801047c:	4b21      	ldr	r3, [pc, #132]	@ (8010504 <vTaskSwitchContext+0xa4>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	607b      	str	r3, [r7, #4]
 8010482:	e008      	b.n	8010496 <vTaskSwitchContext+0x36>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d102      	bne.n	8010490 <vTaskSwitchContext+0x30>
 801048a:	b672      	cpsid	i
 801048c:	46c0      	nop			@ (mov r8, r8)
 801048e:	e7fd      	b.n	801048c <vTaskSwitchContext+0x2c>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3b01      	subs	r3, #1
 8010494:	607b      	str	r3, [r7, #4]
 8010496:	491c      	ldr	r1, [pc, #112]	@ (8010508 <vTaskSwitchContext+0xa8>)
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	0013      	movs	r3, r2
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	189b      	adds	r3, r3, r2
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	585b      	ldr	r3, [r3, r1]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d0ed      	beq.n	8010484 <vTaskSwitchContext+0x24>
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	0013      	movs	r3, r2
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	189b      	adds	r3, r3, r2
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	4a15      	ldr	r2, [pc, #84]	@ (8010508 <vTaskSwitchContext+0xa8>)
 80104b4:	189b      	adds	r3, r3, r2
 80104b6:	603b      	str	r3, [r7, #0]
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	685a      	ldr	r2, [r3, #4]
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	605a      	str	r2, [r3, #4]
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	3308      	adds	r3, #8
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d104      	bne.n	80104d8 <vTaskSwitchContext+0x78>
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	685a      	ldr	r2, [r3, #4]
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	605a      	str	r2, [r3, #4]
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	68da      	ldr	r2, [r3, #12]
 80104de:	4b0b      	ldr	r3, [pc, #44]	@ (801050c <vTaskSwitchContext+0xac>)
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	4b08      	ldr	r3, [pc, #32]	@ (8010504 <vTaskSwitchContext+0xa4>)
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104e8:	4b08      	ldr	r3, [pc, #32]	@ (801050c <vTaskSwitchContext+0xac>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	3354      	adds	r3, #84	@ 0x54
 80104ee:	001a      	movs	r2, r3
 80104f0:	4b07      	ldr	r3, [pc, #28]	@ (8010510 <vTaskSwitchContext+0xb0>)
 80104f2:	601a      	str	r2, [r3, #0]
}
 80104f4:	46c0      	nop			@ (mov r8, r8)
 80104f6:	46bd      	mov	sp, r7
 80104f8:	b002      	add	sp, #8
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	20003bec 	.word	0x20003bec
 8010500:	20003bd8 	.word	0x20003bd8
 8010504:	20003bcc 	.word	0x20003bcc
 8010508:	200036f4 	.word	0x200036f4
 801050c:	200036f0 	.word	0x200036f0
 8010510:	20000094 	.word	0x20000094

08010514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d102      	bne.n	801052a <vTaskPlaceOnEventList+0x16>
 8010524:	b672      	cpsid	i
 8010526:	46c0      	nop			@ (mov r8, r8)
 8010528:	e7fd      	b.n	8010526 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801052a:	4b09      	ldr	r3, [pc, #36]	@ (8010550 <vTaskPlaceOnEventList+0x3c>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	3318      	adds	r3, #24
 8010530:	001a      	movs	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	0011      	movs	r1, r2
 8010536:	0018      	movs	r0, r3
 8010538:	f7fe ff7f 	bl	800f43a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2101      	movs	r1, #1
 8010540:	0018      	movs	r0, r3
 8010542:	f000 fb07 	bl	8010b54 <prvAddCurrentTaskToDelayedList>
}
 8010546:	46c0      	nop			@ (mov r8, r8)
 8010548:	46bd      	mov	sp, r7
 801054a:	b002      	add	sp, #8
 801054c:	bd80      	pop	{r7, pc}
 801054e:	46c0      	nop			@ (mov r8, r8)
 8010550:	200036f0 	.word	0x200036f0

08010554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d102      	bne.n	801056c <vTaskPlaceOnEventListRestricted+0x18>
 8010566:	b672      	cpsid	i
 8010568:	46c0      	nop			@ (mov r8, r8)
 801056a:	e7fd      	b.n	8010568 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801056c:	4b0c      	ldr	r3, [pc, #48]	@ (80105a0 <vTaskPlaceOnEventListRestricted+0x4c>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	3318      	adds	r3, #24
 8010572:	001a      	movs	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	0011      	movs	r1, r2
 8010578:	0018      	movs	r0, r3
 801057a:	f7fe ff3c 	bl	800f3f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8010584:	2301      	movs	r3, #1
 8010586:	425b      	negs	r3, r3
 8010588:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	0011      	movs	r1, r2
 8010590:	0018      	movs	r0, r3
 8010592:	f000 fadf 	bl	8010b54 <prvAddCurrentTaskToDelayedList>
	}
 8010596:	46c0      	nop			@ (mov r8, r8)
 8010598:	46bd      	mov	sp, r7
 801059a:	b004      	add	sp, #16
 801059c:	bd80      	pop	{r7, pc}
 801059e:	46c0      	nop			@ (mov r8, r8)
 80105a0:	200036f0 	.word	0x200036f0

080105a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d102      	bne.n	80105c0 <xTaskRemoveFromEventList+0x1c>
 80105ba:	b672      	cpsid	i
 80105bc:	46c0      	nop			@ (mov r8, r8)
 80105be:	e7fd      	b.n	80105bc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	3318      	adds	r3, #24
 80105c4:	0018      	movs	r0, r3
 80105c6:	f7fe ff6e 	bl	800f4a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105ca:	4b1f      	ldr	r3, [pc, #124]	@ (8010648 <xTaskRemoveFromEventList+0xa4>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d11d      	bne.n	801060e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	3304      	adds	r3, #4
 80105d6:	0018      	movs	r0, r3
 80105d8:	f7fe ff65 	bl	800f4a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105e0:	4b1a      	ldr	r3, [pc, #104]	@ (801064c <xTaskRemoveFromEventList+0xa8>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d903      	bls.n	80105f0 <xTaskRemoveFromEventList+0x4c>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ec:	4b17      	ldr	r3, [pc, #92]	@ (801064c <xTaskRemoveFromEventList+0xa8>)
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105f4:	0013      	movs	r3, r2
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	189b      	adds	r3, r3, r2
 80105fa:	009b      	lsls	r3, r3, #2
 80105fc:	4a14      	ldr	r2, [pc, #80]	@ (8010650 <xTaskRemoveFromEventList+0xac>)
 80105fe:	189a      	adds	r2, r3, r2
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	3304      	adds	r3, #4
 8010604:	0019      	movs	r1, r3
 8010606:	0010      	movs	r0, r2
 8010608:	f7fe fef5 	bl	800f3f6 <vListInsertEnd>
 801060c:	e007      	b.n	801061e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	3318      	adds	r3, #24
 8010612:	001a      	movs	r2, r3
 8010614:	4b0f      	ldr	r3, [pc, #60]	@ (8010654 <xTaskRemoveFromEventList+0xb0>)
 8010616:	0011      	movs	r1, r2
 8010618:	0018      	movs	r0, r3
 801061a:	f7fe feec 	bl	800f3f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010622:	4b0d      	ldr	r3, [pc, #52]	@ (8010658 <xTaskRemoveFromEventList+0xb4>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010628:	429a      	cmp	r2, r3
 801062a:	d905      	bls.n	8010638 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801062c:	2301      	movs	r3, #1
 801062e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010630:	4b0a      	ldr	r3, [pc, #40]	@ (801065c <xTaskRemoveFromEventList+0xb8>)
 8010632:	2201      	movs	r2, #1
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	e001      	b.n	801063c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8010638:	2300      	movs	r3, #0
 801063a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801063c:	68fb      	ldr	r3, [r7, #12]
}
 801063e:	0018      	movs	r0, r3
 8010640:	46bd      	mov	sp, r7
 8010642:	b004      	add	sp, #16
 8010644:	bd80      	pop	{r7, pc}
 8010646:	46c0      	nop			@ (mov r8, r8)
 8010648:	20003bec 	.word	0x20003bec
 801064c:	20003bcc 	.word	0x20003bcc
 8010650:	200036f4 	.word	0x200036f4
 8010654:	20003b84 	.word	0x20003b84
 8010658:	200036f0 	.word	0x200036f0
 801065c:	20003bd8 	.word	0x20003bd8

08010660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010668:	4b05      	ldr	r3, [pc, #20]	@ (8010680 <vTaskInternalSetTimeOutState+0x20>)
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010670:	4b04      	ldr	r3, [pc, #16]	@ (8010684 <vTaskInternalSetTimeOutState+0x24>)
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	605a      	str	r2, [r3, #4]
}
 8010678:	46c0      	nop			@ (mov r8, r8)
 801067a:	46bd      	mov	sp, r7
 801067c:	b002      	add	sp, #8
 801067e:	bd80      	pop	{r7, pc}
 8010680:	20003bdc 	.word	0x20003bdc
 8010684:	20003bc8 	.word	0x20003bc8

08010688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <xTaskCheckForTimeOut+0x16>
 8010698:	b672      	cpsid	i
 801069a:	46c0      	nop			@ (mov r8, r8)
 801069c:	e7fd      	b.n	801069a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d102      	bne.n	80106aa <xTaskCheckForTimeOut+0x22>
 80106a4:	b672      	cpsid	i
 80106a6:	46c0      	nop			@ (mov r8, r8)
 80106a8:	e7fd      	b.n	80106a6 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80106aa:	f000 ff01 	bl	80114b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80106ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010724 <xTaskCheckForTimeOut+0x9c>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	1ad3      	subs	r3, r2, r3
 80106bc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3301      	adds	r3, #1
 80106c4:	d102      	bne.n	80106cc <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80106c6:	2300      	movs	r3, #0
 80106c8:	617b      	str	r3, [r7, #20]
 80106ca:	e024      	b.n	8010716 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	4b15      	ldr	r3, [pc, #84]	@ (8010728 <xTaskCheckForTimeOut+0xa0>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d007      	beq.n	80106e8 <xTaskCheckForTimeOut+0x60>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d302      	bcc.n	80106e8 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80106e2:	2301      	movs	r3, #1
 80106e4:	617b      	str	r3, [r7, #20]
 80106e6:	e016      	b.n	8010716 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d20c      	bcs.n	801070c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	681a      	ldr	r2, [r3, #0]
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	1ad2      	subs	r2, r2, r3
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	0018      	movs	r0, r3
 8010702:	f7ff ffad 	bl	8010660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010706:	2300      	movs	r3, #0
 8010708:	617b      	str	r3, [r7, #20]
 801070a:	e004      	b.n	8010716 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2200      	movs	r2, #0
 8010710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010712:	2301      	movs	r3, #1
 8010714:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8010716:	f000 fedd 	bl	80114d4 <vPortExitCritical>

	return xReturn;
 801071a:	697b      	ldr	r3, [r7, #20]
}
 801071c:	0018      	movs	r0, r3
 801071e:	46bd      	mov	sp, r7
 8010720:	b006      	add	sp, #24
 8010722:	bd80      	pop	{r7, pc}
 8010724:	20003bc8 	.word	0x20003bc8
 8010728:	20003bdc 	.word	0x20003bdc

0801072c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801072c:	b580      	push	{r7, lr}
 801072e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010730:	4b02      	ldr	r3, [pc, #8]	@ (801073c <vTaskMissedYield+0x10>)
 8010732:	2201      	movs	r2, #1
 8010734:	601a      	str	r2, [r3, #0]
}
 8010736:	46c0      	nop			@ (mov r8, r8)
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	20003bd8 	.word	0x20003bd8

08010740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010748:	f000 f84e 	bl	80107e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801074c:	4b03      	ldr	r3, [pc, #12]	@ (801075c <prvIdleTask+0x1c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d9f9      	bls.n	8010748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010754:	f000 fe9c 	bl	8011490 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010758:	e7f6      	b.n	8010748 <prvIdleTask+0x8>
 801075a:	46c0      	nop			@ (mov r8, r8)
 801075c:	200036f4 	.word	0x200036f4

08010760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010766:	2300      	movs	r3, #0
 8010768:	607b      	str	r3, [r7, #4]
 801076a:	e00c      	b.n	8010786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	0013      	movs	r3, r2
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	189b      	adds	r3, r3, r2
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	4a14      	ldr	r2, [pc, #80]	@ (80107c8 <prvInitialiseTaskLists+0x68>)
 8010778:	189b      	adds	r3, r3, r2
 801077a:	0018      	movs	r0, r3
 801077c:	f7fe fe12 	bl	800f3a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3301      	adds	r3, #1
 8010784:	607b      	str	r3, [r7, #4]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b37      	cmp	r3, #55	@ 0x37
 801078a:	d9ef      	bls.n	801076c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801078c:	4b0f      	ldr	r3, [pc, #60]	@ (80107cc <prvInitialiseTaskLists+0x6c>)
 801078e:	0018      	movs	r0, r3
 8010790:	f7fe fe08 	bl	800f3a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010794:	4b0e      	ldr	r3, [pc, #56]	@ (80107d0 <prvInitialiseTaskLists+0x70>)
 8010796:	0018      	movs	r0, r3
 8010798:	f7fe fe04 	bl	800f3a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801079c:	4b0d      	ldr	r3, [pc, #52]	@ (80107d4 <prvInitialiseTaskLists+0x74>)
 801079e:	0018      	movs	r0, r3
 80107a0:	f7fe fe00 	bl	800f3a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80107a4:	4b0c      	ldr	r3, [pc, #48]	@ (80107d8 <prvInitialiseTaskLists+0x78>)
 80107a6:	0018      	movs	r0, r3
 80107a8:	f7fe fdfc 	bl	800f3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80107ac:	4b0b      	ldr	r3, [pc, #44]	@ (80107dc <prvInitialiseTaskLists+0x7c>)
 80107ae:	0018      	movs	r0, r3
 80107b0:	f7fe fdf8 	bl	800f3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80107b4:	4b0a      	ldr	r3, [pc, #40]	@ (80107e0 <prvInitialiseTaskLists+0x80>)
 80107b6:	4a05      	ldr	r2, [pc, #20]	@ (80107cc <prvInitialiseTaskLists+0x6c>)
 80107b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80107ba:	4b0a      	ldr	r3, [pc, #40]	@ (80107e4 <prvInitialiseTaskLists+0x84>)
 80107bc:	4a04      	ldr	r2, [pc, #16]	@ (80107d0 <prvInitialiseTaskLists+0x70>)
 80107be:	601a      	str	r2, [r3, #0]
}
 80107c0:	46c0      	nop			@ (mov r8, r8)
 80107c2:	46bd      	mov	sp, r7
 80107c4:	b002      	add	sp, #8
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	200036f4 	.word	0x200036f4
 80107cc:	20003b54 	.word	0x20003b54
 80107d0:	20003b68 	.word	0x20003b68
 80107d4:	20003b84 	.word	0x20003b84
 80107d8:	20003b98 	.word	0x20003b98
 80107dc:	20003bb0 	.word	0x20003bb0
 80107e0:	20003b7c 	.word	0x20003b7c
 80107e4:	20003b80 	.word	0x20003b80

080107e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107ee:	e01a      	b.n	8010826 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80107f0:	f000 fe5e 	bl	80114b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107f4:	4b10      	ldr	r3, [pc, #64]	@ (8010838 <prvCheckTasksWaitingTermination+0x50>)
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3304      	adds	r3, #4
 8010800:	0018      	movs	r0, r3
 8010802:	f7fe fe50 	bl	800f4a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010806:	4b0d      	ldr	r3, [pc, #52]	@ (801083c <prvCheckTasksWaitingTermination+0x54>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	1e5a      	subs	r2, r3, #1
 801080c:	4b0b      	ldr	r3, [pc, #44]	@ (801083c <prvCheckTasksWaitingTermination+0x54>)
 801080e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010810:	4b0b      	ldr	r3, [pc, #44]	@ (8010840 <prvCheckTasksWaitingTermination+0x58>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	1e5a      	subs	r2, r3, #1
 8010816:	4b0a      	ldr	r3, [pc, #40]	@ (8010840 <prvCheckTasksWaitingTermination+0x58>)
 8010818:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 801081a:	f000 fe5b 	bl	80114d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	0018      	movs	r0, r3
 8010822:	f000 f80f 	bl	8010844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010826:	4b06      	ldr	r3, [pc, #24]	@ (8010840 <prvCheckTasksWaitingTermination+0x58>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1e0      	bne.n	80107f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801082e:	46c0      	nop			@ (mov r8, r8)
 8010830:	46c0      	nop			@ (mov r8, r8)
 8010832:	46bd      	mov	sp, r7
 8010834:	b002      	add	sp, #8
 8010836:	bd80      	pop	{r7, pc}
 8010838:	20003b98 	.word	0x20003b98
 801083c:	20003bc4 	.word	0x20003bc4
 8010840:	20003bac 	.word	0x20003bac

08010844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	3354      	adds	r3, #84	@ 0x54
 8010850:	0018      	movs	r0, r3
 8010852:	f002 fb3f 	bl	8012ed4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	22a5      	movs	r2, #165	@ 0xa5
 801085a:	5c9b      	ldrb	r3, [r3, r2]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d109      	bne.n	8010874 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010864:	0018      	movs	r0, r3
 8010866:	f000 ff6b 	bl	8011740 <vPortFree>
				vPortFree( pxTCB );
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	0018      	movs	r0, r3
 801086e:	f000 ff67 	bl	8011740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010872:	e011      	b.n	8010898 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	22a5      	movs	r2, #165	@ 0xa5
 8010878:	5c9b      	ldrb	r3, [r3, r2]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d104      	bne.n	8010888 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	0018      	movs	r0, r3
 8010882:	f000 ff5d 	bl	8011740 <vPortFree>
	}
 8010886:	e007      	b.n	8010898 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	22a5      	movs	r2, #165	@ 0xa5
 801088c:	5c9b      	ldrb	r3, [r3, r2]
 801088e:	2b02      	cmp	r3, #2
 8010890:	d002      	beq.n	8010898 <prvDeleteTCB+0x54>
 8010892:	b672      	cpsid	i
 8010894:	46c0      	nop			@ (mov r8, r8)
 8010896:	e7fd      	b.n	8010894 <prvDeleteTCB+0x50>
	}
 8010898:	46c0      	nop			@ (mov r8, r8)
 801089a:	46bd      	mov	sp, r7
 801089c:	b002      	add	sp, #8
 801089e:	bd80      	pop	{r7, pc}

080108a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108a6:	4b0b      	ldr	r3, [pc, #44]	@ (80108d4 <prvResetNextTaskUnblockTime+0x34>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d104      	bne.n	80108ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80108b0:	4b09      	ldr	r3, [pc, #36]	@ (80108d8 <prvResetNextTaskUnblockTime+0x38>)
 80108b2:	2201      	movs	r2, #1
 80108b4:	4252      	negs	r2, r2
 80108b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80108b8:	e008      	b.n	80108cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108ba:	4b06      	ldr	r3, [pc, #24]	@ (80108d4 <prvResetNextTaskUnblockTime+0x34>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	68db      	ldr	r3, [r3, #12]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	685a      	ldr	r2, [r3, #4]
 80108c8:	4b03      	ldr	r3, [pc, #12]	@ (80108d8 <prvResetNextTaskUnblockTime+0x38>)
 80108ca:	601a      	str	r2, [r3, #0]
}
 80108cc:	46c0      	nop			@ (mov r8, r8)
 80108ce:	46bd      	mov	sp, r7
 80108d0:	b002      	add	sp, #8
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	20003b7c 	.word	0x20003b7c
 80108d8:	20003be4 	.word	0x20003be4

080108dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80108e2:	4b0a      	ldr	r3, [pc, #40]	@ (801090c <xTaskGetSchedulerState+0x30>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d102      	bne.n	80108f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80108ea:	2301      	movs	r3, #1
 80108ec:	607b      	str	r3, [r7, #4]
 80108ee:	e008      	b.n	8010902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108f0:	4b07      	ldr	r3, [pc, #28]	@ (8010910 <xTaskGetSchedulerState+0x34>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108f8:	2302      	movs	r3, #2
 80108fa:	607b      	str	r3, [r7, #4]
 80108fc:	e001      	b.n	8010902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108fe:	2300      	movs	r3, #0
 8010900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010902:	687b      	ldr	r3, [r7, #4]
	}
 8010904:	0018      	movs	r0, r3
 8010906:	46bd      	mov	sp, r7
 8010908:	b002      	add	sp, #8
 801090a:	bd80      	pop	{r7, pc}
 801090c:	20003bd0 	.word	0x20003bd0
 8010910:	20003bec 	.word	0x20003bec

08010914 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010920:	2300      	movs	r3, #0
 8010922:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d046      	beq.n	80109b8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801092a:	4b26      	ldr	r3, [pc, #152]	@ (80109c4 <xTaskPriorityDisinherit+0xb0>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	429a      	cmp	r2, r3
 8010932:	d002      	beq.n	801093a <xTaskPriorityDisinherit+0x26>
 8010934:	b672      	cpsid	i
 8010936:	46c0      	nop			@ (mov r8, r8)
 8010938:	e7fd      	b.n	8010936 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801093e:	2b00      	cmp	r3, #0
 8010940:	d102      	bne.n	8010948 <xTaskPriorityDisinherit+0x34>
 8010942:	b672      	cpsid	i
 8010944:	46c0      	nop			@ (mov r8, r8)
 8010946:	e7fd      	b.n	8010944 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801094c:	1e5a      	subs	r2, r3, #1
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801095a:	429a      	cmp	r2, r3
 801095c:	d02c      	beq.n	80109b8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010962:	2b00      	cmp	r3, #0
 8010964:	d128      	bne.n	80109b8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	3304      	adds	r3, #4
 801096a:	0018      	movs	r0, r3
 801096c:	f7fe fd9b 	bl	800f4a6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801097c:	2238      	movs	r2, #56	@ 0x38
 801097e:	1ad2      	subs	r2, r2, r3
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010988:	4b0f      	ldr	r3, [pc, #60]	@ (80109c8 <xTaskPriorityDisinherit+0xb4>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	429a      	cmp	r2, r3
 801098e:	d903      	bls.n	8010998 <xTaskPriorityDisinherit+0x84>
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010994:	4b0c      	ldr	r3, [pc, #48]	@ (80109c8 <xTaskPriorityDisinherit+0xb4>)
 8010996:	601a      	str	r2, [r3, #0]
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801099c:	0013      	movs	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	189b      	adds	r3, r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4a09      	ldr	r2, [pc, #36]	@ (80109cc <xTaskPriorityDisinherit+0xb8>)
 80109a6:	189a      	adds	r2, r3, r2
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	3304      	adds	r3, #4
 80109ac:	0019      	movs	r1, r3
 80109ae:	0010      	movs	r0, r2
 80109b0:	f7fe fd21 	bl	800f3f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80109b4:	2301      	movs	r3, #1
 80109b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80109b8:	68fb      	ldr	r3, [r7, #12]
	}
 80109ba:	0018      	movs	r0, r3
 80109bc:	46bd      	mov	sp, r7
 80109be:	b004      	add	sp, #16
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	46c0      	nop			@ (mov r8, r8)
 80109c4:	200036f0 	.word	0x200036f0
 80109c8:	20003bcc 	.word	0x20003bcc
 80109cc:	200036f4 	.word	0x200036f4

080109d0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80109da:	f000 fd69 	bl	80114b0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80109de:	4b1e      	ldr	r3, [pc, #120]	@ (8010a58 <ulTaskNotifyTake+0x88>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	22a0      	movs	r2, #160	@ 0xa0
 80109e4:	589b      	ldr	r3, [r3, r2]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d10e      	bne.n	8010a08 <ulTaskNotifyTake+0x38>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80109ea:	4b1b      	ldr	r3, [pc, #108]	@ (8010a58 <ulTaskNotifyTake+0x88>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	22a4      	movs	r2, #164	@ 0xa4
 80109f0:	2101      	movs	r1, #1
 80109f2:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d006      	beq.n	8010a08 <ulTaskNotifyTake+0x38>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	2101      	movs	r1, #1
 80109fe:	0018      	movs	r0, r3
 8010a00:	f000 f8a8 	bl	8010b54 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010a04:	f000 fd44 	bl	8011490 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010a08:	f000 fd64 	bl	80114d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010a0c:	f000 fd50 	bl	80114b0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010a10:	4b11      	ldr	r3, [pc, #68]	@ (8010a58 <ulTaskNotifyTake+0x88>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	22a0      	movs	r2, #160	@ 0xa0
 8010a16:	589b      	ldr	r3, [r3, r2]
 8010a18:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00e      	beq.n	8010a3e <ulTaskNotifyTake+0x6e>
			{
				if( xClearCountOnExit != pdFALSE )
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d005      	beq.n	8010a32 <ulTaskNotifyTake+0x62>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010a26:	4b0c      	ldr	r3, [pc, #48]	@ (8010a58 <ulTaskNotifyTake+0x88>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	22a0      	movs	r2, #160	@ 0xa0
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	5099      	str	r1, [r3, r2]
 8010a30:	e005      	b.n	8010a3e <ulTaskNotifyTake+0x6e>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010a32:	4b09      	ldr	r3, [pc, #36]	@ (8010a58 <ulTaskNotifyTake+0x88>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	3a01      	subs	r2, #1
 8010a3a:	21a0      	movs	r1, #160	@ 0xa0
 8010a3c:	505a      	str	r2, [r3, r1]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a3e:	4b06      	ldr	r3, [pc, #24]	@ (8010a58 <ulTaskNotifyTake+0x88>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	22a4      	movs	r2, #164	@ 0xa4
 8010a44:	2100      	movs	r1, #0
 8010a46:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8010a48:	f000 fd44 	bl	80114d4 <vPortExitCritical>

		return ulReturn;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
	}
 8010a4e:	0018      	movs	r0, r3
 8010a50:	46bd      	mov	sp, r7
 8010a52:	b004      	add	sp, #16
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	46c0      	nop			@ (mov r8, r8)
 8010a58:	200036f0 	.word	0x200036f0

08010a5c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <vTaskNotifyGiveFromISR+0x16>
 8010a6c:	b672      	cpsid	i
 8010a6e:	46c0      	nop			@ (mov r8, r8)
 8010a70:	e7fd      	b.n	8010a6e <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a76:	f000 fd45 	bl	8011504 <ulSetInterruptMaskFromISR>
 8010a7a:	0003      	movs	r3, r0
 8010a7c:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010a7e:	200f      	movs	r0, #15
 8010a80:	183b      	adds	r3, r7, r0
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	21a4      	movs	r1, #164	@ 0xa4
 8010a86:	5c52      	ldrb	r2, [r2, r1]
 8010a88:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	22a4      	movs	r2, #164	@ 0xa4
 8010a8e:	2102      	movs	r1, #2
 8010a90:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	22a0      	movs	r2, #160	@ 0xa0
 8010a96:	589b      	ldr	r3, [r3, r2]
 8010a98:	1c5a      	adds	r2, r3, #1
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	21a0      	movs	r1, #160	@ 0xa0
 8010a9e:	505a      	str	r2, [r3, r1]

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010aa0:	183b      	adds	r3, r7, r0
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d140      	bne.n	8010b2a <vTaskNotifyGiveFromISR+0xce>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d002      	beq.n	8010ab6 <vTaskNotifyGiveFromISR+0x5a>
 8010ab0:	b672      	cpsid	i
 8010ab2:	46c0      	nop			@ (mov r8, r8)
 8010ab4:	e7fd      	b.n	8010ab2 <vTaskNotifyGiveFromISR+0x56>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ab6:	4b21      	ldr	r3, [pc, #132]	@ (8010b3c <vTaskNotifyGiveFromISR+0xe0>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d11d      	bne.n	8010afa <vTaskNotifyGiveFromISR+0x9e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	0018      	movs	r0, r3
 8010ac4:	f7fe fcef 	bl	800f4a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010acc:	4b1c      	ldr	r3, [pc, #112]	@ (8010b40 <vTaskNotifyGiveFromISR+0xe4>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d903      	bls.n	8010adc <vTaskNotifyGiveFromISR+0x80>
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ad8:	4b19      	ldr	r3, [pc, #100]	@ (8010b40 <vTaskNotifyGiveFromISR+0xe4>)
 8010ada:	601a      	str	r2, [r3, #0]
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ae0:	0013      	movs	r3, r2
 8010ae2:	009b      	lsls	r3, r3, #2
 8010ae4:	189b      	adds	r3, r3, r2
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	4a16      	ldr	r2, [pc, #88]	@ (8010b44 <vTaskNotifyGiveFromISR+0xe8>)
 8010aea:	189a      	adds	r2, r3, r2
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	3304      	adds	r3, #4
 8010af0:	0019      	movs	r1, r3
 8010af2:	0010      	movs	r0, r2
 8010af4:	f7fe fc7f 	bl	800f3f6 <vListInsertEnd>
 8010af8:	e007      	b.n	8010b0a <vTaskNotifyGiveFromISR+0xae>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	3318      	adds	r3, #24
 8010afe:	001a      	movs	r2, r3
 8010b00:	4b11      	ldr	r3, [pc, #68]	@ (8010b48 <vTaskNotifyGiveFromISR+0xec>)
 8010b02:	0011      	movs	r1, r2
 8010b04:	0018      	movs	r0, r3
 8010b06:	f7fe fc76 	bl	800f3f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8010b4c <vTaskNotifyGiveFromISR+0xf0>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d908      	bls.n	8010b2a <vTaskNotifyGiveFromISR+0xce>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d002      	beq.n	8010b24 <vTaskNotifyGiveFromISR+0xc8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	2201      	movs	r2, #1
 8010b22:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010b24:	4b0a      	ldr	r3, [pc, #40]	@ (8010b50 <vTaskNotifyGiveFromISR+0xf4>)
 8010b26:	2201      	movs	r2, #1
 8010b28:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	0018      	movs	r0, r3
 8010b2e:	f000 fcef 	bl	8011510 <vClearInterruptMaskFromISR>
	}
 8010b32:	46c0      	nop			@ (mov r8, r8)
 8010b34:	46bd      	mov	sp, r7
 8010b36:	b006      	add	sp, #24
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	46c0      	nop			@ (mov r8, r8)
 8010b3c:	20003bec 	.word	0x20003bec
 8010b40:	20003bcc 	.word	0x20003bcc
 8010b44:	200036f4 	.word	0x200036f4
 8010b48:	20003b84 	.word	0x20003b84
 8010b4c:	200036f0 	.word	0x200036f0
 8010b50:	20003bd8 	.word	0x20003bd8

08010b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010b5e:	4b21      	ldr	r3, [pc, #132]	@ (8010be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b64:	4b20      	ldr	r3, [pc, #128]	@ (8010be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	3304      	adds	r3, #4
 8010b6a:	0018      	movs	r0, r3
 8010b6c:	f7fe fc9b 	bl	800f4a6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	3301      	adds	r3, #1
 8010b74:	d10b      	bne.n	8010b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d008      	beq.n	8010b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8010be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	1d1a      	adds	r2, r3, #4
 8010b82:	4b1a      	ldr	r3, [pc, #104]	@ (8010bec <prvAddCurrentTaskToDelayedList+0x98>)
 8010b84:	0011      	movs	r1, r2
 8010b86:	0018      	movs	r0, r3
 8010b88:	f7fe fc35 	bl	800f3f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b8c:	e026      	b.n	8010bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	18d3      	adds	r3, r2, r3
 8010b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b96:	4b14      	ldr	r3, [pc, #80]	@ (8010be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b9e:	68ba      	ldr	r2, [r7, #8]
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d209      	bcs.n	8010bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ba6:	4b12      	ldr	r3, [pc, #72]	@ (8010bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	4b0f      	ldr	r3, [pc, #60]	@ (8010be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3304      	adds	r3, #4
 8010bb0:	0019      	movs	r1, r3
 8010bb2:	0010      	movs	r0, r2
 8010bb4:	f7fe fc41 	bl	800f43a <vListInsert>
}
 8010bb8:	e010      	b.n	8010bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010bba:	4b0e      	ldr	r3, [pc, #56]	@ (8010bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8010be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	3304      	adds	r3, #4
 8010bc4:	0019      	movs	r1, r3
 8010bc6:	0010      	movs	r0, r2
 8010bc8:	f7fe fc37 	bl	800f43a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8010bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d202      	bcs.n	8010bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010bd6:	4b08      	ldr	r3, [pc, #32]	@ (8010bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	601a      	str	r2, [r3, #0]
}
 8010bdc:	46c0      	nop			@ (mov r8, r8)
 8010bde:	46bd      	mov	sp, r7
 8010be0:	b004      	add	sp, #16
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	20003bc8 	.word	0x20003bc8
 8010be8:	200036f0 	.word	0x200036f0
 8010bec:	20003bb0 	.word	0x20003bb0
 8010bf0:	20003b80 	.word	0x20003b80
 8010bf4:	20003b7c 	.word	0x20003b7c
 8010bf8:	20003be4 	.word	0x20003be4

08010bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010bfc:	b590      	push	{r4, r7, lr}
 8010bfe:	b089      	sub	sp, #36	@ 0x24
 8010c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010c02:	2300      	movs	r3, #0
 8010c04:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010c06:	f000 fb5b 	bl	80112c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010c0a:	4b18      	ldr	r3, [pc, #96]	@ (8010c6c <xTimerCreateTimerTask+0x70>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d020      	beq.n	8010c54 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010c1a:	003a      	movs	r2, r7
 8010c1c:	1d39      	adds	r1, r7, #4
 8010c1e:	2308      	movs	r3, #8
 8010c20:	18fb      	adds	r3, r7, r3
 8010c22:	0018      	movs	r0, r3
 8010c24:	f7fe fba6 	bl	800f374 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010c28:	683c      	ldr	r4, [r7, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	4910      	ldr	r1, [pc, #64]	@ (8010c70 <xTimerCreateTimerTask+0x74>)
 8010c30:	4810      	ldr	r0, [pc, #64]	@ (8010c74 <xTimerCreateTimerTask+0x78>)
 8010c32:	9202      	str	r2, [sp, #8]
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	2300      	movs	r3, #0
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	0022      	movs	r2, r4
 8010c3e:	f7ff f896 	bl	800fd6e <xTaskCreateStatic>
 8010c42:	0002      	movs	r2, r0
 8010c44:	4b0c      	ldr	r3, [pc, #48]	@ (8010c78 <xTimerCreateTimerTask+0x7c>)
 8010c46:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010c48:	4b0b      	ldr	r3, [pc, #44]	@ (8010c78 <xTimerCreateTimerTask+0x7c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d001      	beq.n	8010c54 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8010c50:	2301      	movs	r3, #1
 8010c52:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d102      	bne.n	8010c60 <xTimerCreateTimerTask+0x64>
 8010c5a:	b672      	cpsid	i
 8010c5c:	46c0      	nop			@ (mov r8, r8)
 8010c5e:	e7fd      	b.n	8010c5c <xTimerCreateTimerTask+0x60>
	return xReturn;
 8010c60:	68fb      	ldr	r3, [r7, #12]
}
 8010c62:	0018      	movs	r0, r3
 8010c64:	46bd      	mov	sp, r7
 8010c66:	b005      	add	sp, #20
 8010c68:	bd90      	pop	{r4, r7, pc}
 8010c6a:	46c0      	nop			@ (mov r8, r8)
 8010c6c:	20003c20 	.word	0x20003c20
 8010c70:	080170d0 	.word	0x080170d0
 8010c74:	08010ead 	.word	0x08010ead
 8010c78:	20003c24 	.word	0x20003c24

08010c7c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010c7c:	b590      	push	{r4, r7, lr}
 8010c7e:	b089      	sub	sp, #36	@ 0x24
 8010c80:	af02      	add	r7, sp, #8
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
 8010c88:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010c8a:	202c      	movs	r0, #44	@ 0x2c
 8010c8c:	f000 fca8 	bl	80115e0 <pvPortMalloc>
 8010c90:	0003      	movs	r3, r0
 8010c92:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00e      	beq.n	8010cb8 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	2228      	movs	r2, #40	@ 0x28
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010ca2:	683c      	ldr	r4, [r7, #0]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	68b9      	ldr	r1, [r7, #8]
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	9301      	str	r3, [sp, #4]
 8010cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	0023      	movs	r3, r4
 8010cb4:	f000 f834 	bl	8010d20 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010cb8:	697b      	ldr	r3, [r7, #20]
	}
 8010cba:	0018      	movs	r0, r3
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	b007      	add	sp, #28
 8010cc0:	bd90      	pop	{r4, r7, pc}

08010cc2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8010cc2:	b590      	push	{r4, r7, lr}
 8010cc4:	b089      	sub	sp, #36	@ 0x24
 8010cc6:	af02      	add	r7, sp, #8
 8010cc8:	60f8      	str	r0, [r7, #12]
 8010cca:	60b9      	str	r1, [r7, #8]
 8010ccc:	607a      	str	r2, [r7, #4]
 8010cce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010cd0:	232c      	movs	r3, #44	@ 0x2c
 8010cd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	2b2c      	cmp	r3, #44	@ 0x2c
 8010cd8:	d002      	beq.n	8010ce0 <xTimerCreateStatic+0x1e>
 8010cda:	b672      	cpsid	i
 8010cdc:	46c0      	nop			@ (mov r8, r8)
 8010cde:	e7fd      	b.n	8010cdc <xTimerCreateStatic+0x1a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010ce0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d102      	bne.n	8010cee <xTimerCreateStatic+0x2c>
 8010ce8:	b672      	cpsid	i
 8010cea:	46c0      	nop			@ (mov r8, r8)
 8010cec:	e7fd      	b.n	8010cea <xTimerCreateStatic+0x28>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8010cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cf0:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00e      	beq.n	8010d16 <xTimerCreateStatic+0x54>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	2228      	movs	r2, #40	@ 0x28
 8010cfc:	2102      	movs	r1, #2
 8010cfe:	5499      	strb	r1, [r3, r2]

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010d00:	683c      	ldr	r4, [r7, #0]
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	68b9      	ldr	r1, [r7, #8]
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	9301      	str	r3, [sp, #4]
 8010d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d0e:	9300      	str	r3, [sp, #0]
 8010d10:	0023      	movs	r3, r4
 8010d12:	f000 f805 	bl	8010d20 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010d16:	697b      	ldr	r3, [r7, #20]
	}
 8010d18:	0018      	movs	r0, r3
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	b007      	add	sp, #28
 8010d1e:	bd90      	pop	{r4, r7, pc}

08010d20 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]
 8010d2c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d102      	bne.n	8010d3a <prvInitialiseNewTimer+0x1a>
 8010d34:	b672      	cpsid	i
 8010d36:	46c0      	nop			@ (mov r8, r8)
 8010d38:	e7fd      	b.n	8010d36 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d01e      	beq.n	8010d7e <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010d40:	f000 fabe 	bl	80112c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	68ba      	ldr	r2, [r7, #8]
 8010d4e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	69ba      	ldr	r2, [r7, #24]
 8010d5a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	0018      	movs	r0, r3
 8010d62:	f7fe fb3d 	bl	800f3e0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d008      	beq.n	8010d7e <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2228      	movs	r2, #40	@ 0x28
 8010d70:	5c9b      	ldrb	r3, [r3, r2]
 8010d72:	2204      	movs	r2, #4
 8010d74:	4313      	orrs	r3, r2
 8010d76:	b2d9      	uxtb	r1, r3
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	2228      	movs	r2, #40	@ 0x28
 8010d7c:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010d7e:	46c0      	nop			@ (mov r8, r8)
 8010d80:	46bd      	mov	sp, r7
 8010d82:	b004      	add	sp, #16
 8010d84:	bd80      	pop	{r7, pc}
	...

08010d88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010d88:	b590      	push	{r4, r7, lr}
 8010d8a:	b08b      	sub	sp, #44	@ 0x2c
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]
 8010d94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010d96:	2300      	movs	r3, #0
 8010d98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d102      	bne.n	8010da6 <xTimerGenericCommand+0x1e>
 8010da0:	b672      	cpsid	i
 8010da2:	46c0      	nop			@ (mov r8, r8)
 8010da4:	e7fd      	b.n	8010da2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010da6:	4b1d      	ldr	r3, [pc, #116]	@ (8010e1c <xTimerGenericCommand+0x94>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d030      	beq.n	8010e10 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010dae:	2414      	movs	r4, #20
 8010db0:	193b      	adds	r3, r7, r4
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010db6:	193b      	adds	r3, r7, r4
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010dbc:	193b      	adds	r3, r7, r4
 8010dbe:	68fa      	ldr	r2, [r7, #12]
 8010dc0:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	2b05      	cmp	r3, #5
 8010dc6:	dc19      	bgt.n	8010dfc <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010dc8:	f7ff fd88 	bl	80108dc <xTaskGetSchedulerState>
 8010dcc:	0003      	movs	r3, r0
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	d109      	bne.n	8010de6 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010dd2:	4b12      	ldr	r3, [pc, #72]	@ (8010e1c <xTimerGenericCommand+0x94>)
 8010dd4:	6818      	ldr	r0, [r3, #0]
 8010dd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dd8:	1939      	adds	r1, r7, r4
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f7fe fc58 	bl	800f690 <xQueueGenericSend>
 8010de0:	0003      	movs	r3, r0
 8010de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010de4:	e014      	b.n	8010e10 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010de6:	4b0d      	ldr	r3, [pc, #52]	@ (8010e1c <xTimerGenericCommand+0x94>)
 8010de8:	6818      	ldr	r0, [r3, #0]
 8010dea:	2314      	movs	r3, #20
 8010dec:	18f9      	adds	r1, r7, r3
 8010dee:	2300      	movs	r3, #0
 8010df0:	2200      	movs	r2, #0
 8010df2:	f7fe fc4d 	bl	800f690 <xQueueGenericSend>
 8010df6:	0003      	movs	r3, r0
 8010df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dfa:	e009      	b.n	8010e10 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010dfc:	4b07      	ldr	r3, [pc, #28]	@ (8010e1c <xTimerGenericCommand+0x94>)
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	683a      	ldr	r2, [r7, #0]
 8010e02:	2314      	movs	r3, #20
 8010e04:	18f9      	adds	r1, r7, r3
 8010e06:	2300      	movs	r3, #0
 8010e08:	f7fe fd0a 	bl	800f820 <xQueueGenericSendFromISR>
 8010e0c:	0003      	movs	r3, r0
 8010e0e:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010e12:	0018      	movs	r0, r3
 8010e14:	46bd      	mov	sp, r7
 8010e16:	b00b      	add	sp, #44	@ 0x2c
 8010e18:	bd90      	pop	{r4, r7, pc}
 8010e1a:	46c0      	nop			@ (mov r8, r8)
 8010e1c:	20003c20 	.word	0x20003c20

08010e20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af02      	add	r7, sp, #8
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ea8 <prvProcessExpiredTimer+0x88>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	3304      	adds	r3, #4
 8010e38:	0018      	movs	r0, r3
 8010e3a:	f7fe fb34 	bl	800f4a6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2228      	movs	r2, #40	@ 0x28
 8010e42:	5c9b      	ldrb	r3, [r3, r2]
 8010e44:	001a      	movs	r2, r3
 8010e46:	2304      	movs	r3, #4
 8010e48:	4013      	ands	r3, r2
 8010e4a:	d01a      	beq.n	8010e82 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	699a      	ldr	r2, [r3, #24]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	18d1      	adds	r1, r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f000 f8c7 	bl	8010fec <prvInsertTimerInActiveList>
 8010e5e:	1e03      	subs	r3, r0, #0
 8010e60:	d018      	beq.n	8010e94 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	2300      	movs	r3, #0
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	f7ff ff8b 	bl	8010d88 <xTimerGenericCommand>
 8010e72:	0003      	movs	r3, r0
 8010e74:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10b      	bne.n	8010e94 <prvProcessExpiredTimer+0x74>
 8010e7c:	b672      	cpsid	i
 8010e7e:	46c0      	nop			@ (mov r8, r8)
 8010e80:	e7fd      	b.n	8010e7e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2228      	movs	r2, #40	@ 0x28
 8010e86:	5c9b      	ldrb	r3, [r3, r2]
 8010e88:	2201      	movs	r2, #1
 8010e8a:	4393      	bics	r3, r2
 8010e8c:	b2d9      	uxtb	r1, r3
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2228      	movs	r2, #40	@ 0x28
 8010e92:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6a1b      	ldr	r3, [r3, #32]
 8010e98:	68fa      	ldr	r2, [r7, #12]
 8010e9a:	0010      	movs	r0, r2
 8010e9c:	4798      	blx	r3
}
 8010e9e:	46c0      	nop			@ (mov r8, r8)
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	b004      	add	sp, #16
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	46c0      	nop			@ (mov r8, r8)
 8010ea8:	20003c18 	.word	0x20003c18

08010eac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010eb4:	2308      	movs	r3, #8
 8010eb6:	18fb      	adds	r3, r7, r3
 8010eb8:	0018      	movs	r0, r3
 8010eba:	f000 f855 	bl	8010f68 <prvGetNextExpireTime>
 8010ebe:	0003      	movs	r3, r0
 8010ec0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	0011      	movs	r1, r2
 8010ec8:	0018      	movs	r0, r3
 8010eca:	f000 f805 	bl	8010ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010ece:	f000 f8cf 	bl	8011070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ed2:	46c0      	nop			@ (mov r8, r8)
 8010ed4:	e7ee      	b.n	8010eb4 <prvTimerTask+0x8>
	...

08010ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010ee2:	f7ff f967 	bl	80101b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ee6:	2308      	movs	r3, #8
 8010ee8:	18fb      	adds	r3, r7, r3
 8010eea:	0018      	movs	r0, r3
 8010eec:	f000 f85e 	bl	8010fac <prvSampleTimeNow>
 8010ef0:	0003      	movs	r3, r0
 8010ef2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d12b      	bne.n	8010f52 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d10c      	bne.n	8010f1a <prvProcessTimerOrBlockTask+0x42>
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d808      	bhi.n	8010f1a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8010f08:	f7ff f960 	bl	80101cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	0011      	movs	r1, r2
 8010f12:	0018      	movs	r0, r3
 8010f14:	f7ff ff84 	bl	8010e20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010f18:	e01d      	b.n	8010f56 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d008      	beq.n	8010f32 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010f20:	4b0f      	ldr	r3, [pc, #60]	@ (8010f60 <prvProcessTimerOrBlockTask+0x88>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <prvProcessTimerOrBlockTask+0x56>
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e000      	b.n	8010f30 <prvProcessTimerOrBlockTask+0x58>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010f32:	4b0c      	ldr	r3, [pc, #48]	@ (8010f64 <prvProcessTimerOrBlockTask+0x8c>)
 8010f34:	6818      	ldr	r0, [r3, #0]
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	683a      	ldr	r2, [r7, #0]
 8010f3e:	0019      	movs	r1, r3
 8010f40:	f7fe fee2 	bl	800fd08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010f44:	f7ff f942 	bl	80101cc <xTaskResumeAll>
 8010f48:	1e03      	subs	r3, r0, #0
 8010f4a:	d104      	bne.n	8010f56 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8010f4c:	f000 faa0 	bl	8011490 <vPortYield>
}
 8010f50:	e001      	b.n	8010f56 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8010f52:	f7ff f93b 	bl	80101cc <xTaskResumeAll>
}
 8010f56:	46c0      	nop			@ (mov r8, r8)
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	b004      	add	sp, #16
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	46c0      	nop			@ (mov r8, r8)
 8010f60:	20003c1c 	.word	0x20003c1c
 8010f64:	20003c20 	.word	0x20003c20

08010f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010f70:	4b0d      	ldr	r3, [pc, #52]	@ (8010fa8 <prvGetNextExpireTime+0x40>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d101      	bne.n	8010f7e <prvGetNextExpireTime+0x16>
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	e000      	b.n	8010f80 <prvGetNextExpireTime+0x18>
 8010f7e:	2200      	movs	r2, #0
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d105      	bne.n	8010f98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f8c:	4b06      	ldr	r3, [pc, #24]	@ (8010fa8 <prvGetNextExpireTime+0x40>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	60fb      	str	r3, [r7, #12]
 8010f96:	e001      	b.n	8010f9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
}
 8010f9e:	0018      	movs	r0, r3
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	b004      	add	sp, #16
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	46c0      	nop			@ (mov r8, r8)
 8010fa8:	20003c18 	.word	0x20003c18

08010fac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010fb4:	f7ff f996 	bl	80102e4 <xTaskGetTickCount>
 8010fb8:	0003      	movs	r3, r0
 8010fba:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8010fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe8 <prvSampleTimeNow+0x3c>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d205      	bcs.n	8010fd2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8010fc6:	f000 f91d 	bl	8011204 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	e002      	b.n	8010fd8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010fd8:	4b03      	ldr	r3, [pc, #12]	@ (8010fe8 <prvSampleTimeNow+0x3c>)
 8010fda:	68fa      	ldr	r2, [r7, #12]
 8010fdc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8010fde:	68fb      	ldr	r3, [r7, #12]
}
 8010fe0:	0018      	movs	r0, r3
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	b004      	add	sp, #16
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	20003c28 	.word	0x20003c28

08010fec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801100a:	68ba      	ldr	r2, [r7, #8]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d812      	bhi.n	8011038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	1ad2      	subs	r2, r2, r3
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	699b      	ldr	r3, [r3, #24]
 801101c:	429a      	cmp	r2, r3
 801101e:	d302      	bcc.n	8011026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011020:	2301      	movs	r3, #1
 8011022:	617b      	str	r3, [r7, #20]
 8011024:	e01b      	b.n	801105e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011026:	4b10      	ldr	r3, [pc, #64]	@ (8011068 <prvInsertTimerInActiveList+0x7c>)
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	3304      	adds	r3, #4
 801102e:	0019      	movs	r1, r3
 8011030:	0010      	movs	r0, r2
 8011032:	f7fe fa02 	bl	800f43a <vListInsert>
 8011036:	e012      	b.n	801105e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	429a      	cmp	r2, r3
 801103e:	d206      	bcs.n	801104e <prvInsertTimerInActiveList+0x62>
 8011040:	68ba      	ldr	r2, [r7, #8]
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	429a      	cmp	r2, r3
 8011046:	d302      	bcc.n	801104e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011048:	2301      	movs	r3, #1
 801104a:	617b      	str	r3, [r7, #20]
 801104c:	e007      	b.n	801105e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801104e:	4b07      	ldr	r3, [pc, #28]	@ (801106c <prvInsertTimerInActiveList+0x80>)
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	3304      	adds	r3, #4
 8011056:	0019      	movs	r1, r3
 8011058:	0010      	movs	r0, r2
 801105a:	f7fe f9ee 	bl	800f43a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801105e:	697b      	ldr	r3, [r7, #20]
}
 8011060:	0018      	movs	r0, r3
 8011062:	46bd      	mov	sp, r7
 8011064:	b006      	add	sp, #24
 8011066:	bd80      	pop	{r7, pc}
 8011068:	20003c1c 	.word	0x20003c1c
 801106c:	20003c18 	.word	0x20003c18

08011070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011070:	b590      	push	{r4, r7, lr}
 8011072:	b08d      	sub	sp, #52	@ 0x34
 8011074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011076:	e0b1      	b.n	80111dc <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011078:	2208      	movs	r2, #8
 801107a:	18bb      	adds	r3, r7, r2
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	da10      	bge.n	80110a4 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011082:	18bb      	adds	r3, r7, r2
 8011084:	3304      	adds	r3, #4
 8011086:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108a:	2b00      	cmp	r3, #0
 801108c:	d102      	bne.n	8011094 <prvProcessReceivedCommands+0x24>
 801108e:	b672      	cpsid	i
 8011090:	46c0      	nop			@ (mov r8, r8)
 8011092:	e7fd      	b.n	8011090 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109a:	6858      	ldr	r0, [r3, #4]
 801109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109e:	689b      	ldr	r3, [r3, #8]
 80110a0:	0019      	movs	r1, r3
 80110a2:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80110a4:	2208      	movs	r2, #8
 80110a6:	18bb      	adds	r3, r7, r2
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	da00      	bge.n	80110b0 <prvProcessReceivedCommands+0x40>
 80110ae:	e095      	b.n	80111dc <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80110b0:	18bb      	adds	r3, r7, r2
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	695b      	ldr	r3, [r3, #20]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d004      	beq.n	80110c8 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110be:	6a3b      	ldr	r3, [r7, #32]
 80110c0:	3304      	adds	r3, #4
 80110c2:	0018      	movs	r0, r3
 80110c4:	f7fe f9ef 	bl	800f4a6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80110c8:	1d3b      	adds	r3, r7, #4
 80110ca:	0018      	movs	r0, r3
 80110cc:	f7ff ff6e 	bl	8010fac <prvSampleTimeNow>
 80110d0:	0003      	movs	r3, r0
 80110d2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80110d4:	2308      	movs	r3, #8
 80110d6:	18fb      	adds	r3, r7, r3
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b09      	cmp	r3, #9
 80110dc:	d900      	bls.n	80110e0 <prvProcessReceivedCommands+0x70>
 80110de:	e07a      	b.n	80111d6 <prvProcessReceivedCommands+0x166>
 80110e0:	009a      	lsls	r2, r3, #2
 80110e2:	4b46      	ldr	r3, [pc, #280]	@ (80111fc <prvProcessReceivedCommands+0x18c>)
 80110e4:	18d3      	adds	r3, r2, r3
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	2228      	movs	r2, #40	@ 0x28
 80110ee:	5c9b      	ldrb	r3, [r3, r2]
 80110f0:	2201      	movs	r2, #1
 80110f2:	4313      	orrs	r3, r2
 80110f4:	b2d9      	uxtb	r1, r3
 80110f6:	6a3b      	ldr	r3, [r7, #32]
 80110f8:	2228      	movs	r2, #40	@ 0x28
 80110fa:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80110fc:	2408      	movs	r4, #8
 80110fe:	193b      	adds	r3, r7, r4
 8011100:	685a      	ldr	r2, [r3, #4]
 8011102:	6a3b      	ldr	r3, [r7, #32]
 8011104:	699b      	ldr	r3, [r3, #24]
 8011106:	18d1      	adds	r1, r2, r3
 8011108:	193b      	adds	r3, r7, r4
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	69fa      	ldr	r2, [r7, #28]
 801110e:	6a38      	ldr	r0, [r7, #32]
 8011110:	f7ff ff6c 	bl	8010fec <prvInsertTimerInActiveList>
 8011114:	1e03      	subs	r3, r0, #0
 8011116:	d060      	beq.n	80111da <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011118:	6a3b      	ldr	r3, [r7, #32]
 801111a:	6a1b      	ldr	r3, [r3, #32]
 801111c:	6a3a      	ldr	r2, [r7, #32]
 801111e:	0010      	movs	r0, r2
 8011120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011122:	6a3b      	ldr	r3, [r7, #32]
 8011124:	2228      	movs	r2, #40	@ 0x28
 8011126:	5c9b      	ldrb	r3, [r3, r2]
 8011128:	001a      	movs	r2, r3
 801112a:	2304      	movs	r3, #4
 801112c:	4013      	ands	r3, r2
 801112e:	d054      	beq.n	80111da <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011130:	193b      	adds	r3, r7, r4
 8011132:	685a      	ldr	r2, [r3, #4]
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	18d2      	adds	r2, r2, r3
 801113a:	6a38      	ldr	r0, [r7, #32]
 801113c:	2300      	movs	r3, #0
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	2300      	movs	r3, #0
 8011142:	2100      	movs	r1, #0
 8011144:	f7ff fe20 	bl	8010d88 <xTimerGenericCommand>
 8011148:	0003      	movs	r3, r0
 801114a:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d143      	bne.n	80111da <prvProcessReceivedCommands+0x16a>
 8011152:	b672      	cpsid	i
 8011154:	46c0      	nop			@ (mov r8, r8)
 8011156:	e7fd      	b.n	8011154 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011158:	6a3b      	ldr	r3, [r7, #32]
 801115a:	2228      	movs	r2, #40	@ 0x28
 801115c:	5c9b      	ldrb	r3, [r3, r2]
 801115e:	2201      	movs	r2, #1
 8011160:	4393      	bics	r3, r2
 8011162:	b2d9      	uxtb	r1, r3
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	2228      	movs	r2, #40	@ 0x28
 8011168:	5499      	strb	r1, [r3, r2]
					break;
 801116a:	e037      	b.n	80111dc <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801116c:	6a3b      	ldr	r3, [r7, #32]
 801116e:	2228      	movs	r2, #40	@ 0x28
 8011170:	5c9b      	ldrb	r3, [r3, r2]
 8011172:	2201      	movs	r2, #1
 8011174:	4313      	orrs	r3, r2
 8011176:	b2d9      	uxtb	r1, r3
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	2228      	movs	r2, #40	@ 0x28
 801117c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801117e:	2308      	movs	r3, #8
 8011180:	18fb      	adds	r3, r7, r3
 8011182:	685a      	ldr	r2, [r3, #4]
 8011184:	6a3b      	ldr	r3, [r7, #32]
 8011186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011188:	6a3b      	ldr	r3, [r7, #32]
 801118a:	699b      	ldr	r3, [r3, #24]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d102      	bne.n	8011196 <prvProcessReceivedCommands+0x126>
 8011190:	b672      	cpsid	i
 8011192:	46c0      	nop			@ (mov r8, r8)
 8011194:	e7fd      	b.n	8011192 <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011196:	6a3b      	ldr	r3, [r7, #32]
 8011198:	699a      	ldr	r2, [r3, #24]
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	18d1      	adds	r1, r2, r3
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	69fa      	ldr	r2, [r7, #28]
 80111a2:	6a38      	ldr	r0, [r7, #32]
 80111a4:	f7ff ff22 	bl	8010fec <prvInsertTimerInActiveList>
					break;
 80111a8:	e018      	b.n	80111dc <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80111aa:	6a3b      	ldr	r3, [r7, #32]
 80111ac:	2228      	movs	r2, #40	@ 0x28
 80111ae:	5c9b      	ldrb	r3, [r3, r2]
 80111b0:	001a      	movs	r2, r3
 80111b2:	2302      	movs	r3, #2
 80111b4:	4013      	ands	r3, r2
 80111b6:	d104      	bne.n	80111c2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80111b8:	6a3b      	ldr	r3, [r7, #32]
 80111ba:	0018      	movs	r0, r3
 80111bc:	f000 fac0 	bl	8011740 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80111c0:	e00c      	b.n	80111dc <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	2228      	movs	r2, #40	@ 0x28
 80111c6:	5c9b      	ldrb	r3, [r3, r2]
 80111c8:	2201      	movs	r2, #1
 80111ca:	4393      	bics	r3, r2
 80111cc:	b2d9      	uxtb	r1, r3
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	2228      	movs	r2, #40	@ 0x28
 80111d2:	5499      	strb	r1, [r3, r2]
					break;
 80111d4:	e002      	b.n	80111dc <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 80111d6:	46c0      	nop			@ (mov r8, r8)
 80111d8:	e000      	b.n	80111dc <prvProcessReceivedCommands+0x16c>
					break;
 80111da:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80111dc:	4b08      	ldr	r3, [pc, #32]	@ (8011200 <prvProcessReceivedCommands+0x190>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2208      	movs	r2, #8
 80111e2:	18b9      	adds	r1, r7, r2
 80111e4:	2200      	movs	r2, #0
 80111e6:	0018      	movs	r0, r3
 80111e8:	f7fe fb91 	bl	800f90e <xQueueReceive>
 80111ec:	1e03      	subs	r3, r0, #0
 80111ee:	d000      	beq.n	80111f2 <prvProcessReceivedCommands+0x182>
 80111f0:	e742      	b.n	8011078 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80111f2:	46c0      	nop			@ (mov r8, r8)
 80111f4:	46c0      	nop			@ (mov r8, r8)
 80111f6:	46bd      	mov	sp, r7
 80111f8:	b00b      	add	sp, #44	@ 0x2c
 80111fa:	bd90      	pop	{r4, r7, pc}
 80111fc:	080172e8 	.word	0x080172e8
 8011200:	20003c20 	.word	0x20003c20

08011204 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b088      	sub	sp, #32
 8011208:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801120a:	e042      	b.n	8011292 <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801120c:	4b2a      	ldr	r3, [pc, #168]	@ (80112b8 <prvSwitchTimerLists+0xb4>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011216:	4b28      	ldr	r3, [pc, #160]	@ (80112b8 <prvSwitchTimerLists+0xb4>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	3304      	adds	r3, #4
 8011224:	0018      	movs	r0, r3
 8011226:	f7fe f93e 	bl	800f4a6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	6a1b      	ldr	r3, [r3, #32]
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	0010      	movs	r0, r2
 8011232:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2228      	movs	r2, #40	@ 0x28
 8011238:	5c9b      	ldrb	r3, [r3, r2]
 801123a:	001a      	movs	r2, r3
 801123c:	2304      	movs	r3, #4
 801123e:	4013      	ands	r3, r2
 8011240:	d027      	beq.n	8011292 <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	693a      	ldr	r2, [r7, #16]
 8011248:	18d3      	adds	r3, r2, r3
 801124a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	429a      	cmp	r2, r3
 8011252:	d90e      	bls.n	8011272 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	68ba      	ldr	r2, [r7, #8]
 8011258:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	68fa      	ldr	r2, [r7, #12]
 801125e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011260:	4b15      	ldr	r3, [pc, #84]	@ (80112b8 <prvSwitchTimerLists+0xb4>)
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	3304      	adds	r3, #4
 8011268:	0019      	movs	r1, r3
 801126a:	0010      	movs	r0, r2
 801126c:	f7fe f8e5 	bl	800f43a <vListInsert>
 8011270:	e00f      	b.n	8011292 <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011272:	693a      	ldr	r2, [r7, #16]
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	2300      	movs	r3, #0
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	2300      	movs	r3, #0
 801127c:	2100      	movs	r1, #0
 801127e:	f7ff fd83 	bl	8010d88 <xTimerGenericCommand>
 8011282:	0003      	movs	r3, r0
 8011284:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d102      	bne.n	8011292 <prvSwitchTimerLists+0x8e>
 801128c:	b672      	cpsid	i
 801128e:	46c0      	nop			@ (mov r8, r8)
 8011290:	e7fd      	b.n	801128e <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011292:	4b09      	ldr	r3, [pc, #36]	@ (80112b8 <prvSwitchTimerLists+0xb4>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1b7      	bne.n	801120c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801129c:	4b06      	ldr	r3, [pc, #24]	@ (80112b8 <prvSwitchTimerLists+0xb4>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80112a2:	4b06      	ldr	r3, [pc, #24]	@ (80112bc <prvSwitchTimerLists+0xb8>)
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	4b04      	ldr	r3, [pc, #16]	@ (80112b8 <prvSwitchTimerLists+0xb4>)
 80112a8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80112aa:	4b04      	ldr	r3, [pc, #16]	@ (80112bc <prvSwitchTimerLists+0xb8>)
 80112ac:	697a      	ldr	r2, [r7, #20]
 80112ae:	601a      	str	r2, [r3, #0]
}
 80112b0:	46c0      	nop			@ (mov r8, r8)
 80112b2:	46bd      	mov	sp, r7
 80112b4:	b006      	add	sp, #24
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20003c18 	.word	0x20003c18
 80112bc:	20003c1c 	.word	0x20003c1c

080112c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80112c6:	f000 f8f3 	bl	80114b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80112ca:	4b16      	ldr	r3, [pc, #88]	@ (8011324 <prvCheckForValidListAndQueue+0x64>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d123      	bne.n	801131a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80112d2:	4b15      	ldr	r3, [pc, #84]	@ (8011328 <prvCheckForValidListAndQueue+0x68>)
 80112d4:	0018      	movs	r0, r3
 80112d6:	f7fe f865 	bl	800f3a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80112da:	4b14      	ldr	r3, [pc, #80]	@ (801132c <prvCheckForValidListAndQueue+0x6c>)
 80112dc:	0018      	movs	r0, r3
 80112de:	f7fe f861 	bl	800f3a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80112e2:	4b13      	ldr	r3, [pc, #76]	@ (8011330 <prvCheckForValidListAndQueue+0x70>)
 80112e4:	4a10      	ldr	r2, [pc, #64]	@ (8011328 <prvCheckForValidListAndQueue+0x68>)
 80112e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80112e8:	4b12      	ldr	r3, [pc, #72]	@ (8011334 <prvCheckForValidListAndQueue+0x74>)
 80112ea:	4a10      	ldr	r2, [pc, #64]	@ (801132c <prvCheckForValidListAndQueue+0x6c>)
 80112ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80112ee:	4b12      	ldr	r3, [pc, #72]	@ (8011338 <prvCheckForValidListAndQueue+0x78>)
 80112f0:	4a12      	ldr	r2, [pc, #72]	@ (801133c <prvCheckForValidListAndQueue+0x7c>)
 80112f2:	2100      	movs	r1, #0
 80112f4:	9100      	str	r1, [sp, #0]
 80112f6:	2110      	movs	r1, #16
 80112f8:	200a      	movs	r0, #10
 80112fa:	f7fe f951 	bl	800f5a0 <xQueueGenericCreateStatic>
 80112fe:	0002      	movs	r2, r0
 8011300:	4b08      	ldr	r3, [pc, #32]	@ (8011324 <prvCheckForValidListAndQueue+0x64>)
 8011302:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011304:	4b07      	ldr	r3, [pc, #28]	@ (8011324 <prvCheckForValidListAndQueue+0x64>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d006      	beq.n	801131a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801130c:	4b05      	ldr	r3, [pc, #20]	@ (8011324 <prvCheckForValidListAndQueue+0x64>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4a0b      	ldr	r2, [pc, #44]	@ (8011340 <prvCheckForValidListAndQueue+0x80>)
 8011312:	0011      	movs	r1, r2
 8011314:	0018      	movs	r0, r3
 8011316:	f7fe fccf 	bl	800fcb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801131a:	f000 f8db 	bl	80114d4 <vPortExitCritical>
}
 801131e:	46c0      	nop			@ (mov r8, r8)
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	20003c20 	.word	0x20003c20
 8011328:	20003bf0 	.word	0x20003bf0
 801132c:	20003c04 	.word	0x20003c04
 8011330:	20003c18 	.word	0x20003c18
 8011334:	20003c1c 	.word	0x20003c1c
 8011338:	20003ccc 	.word	0x20003ccc
 801133c:	20003c2c 	.word	0x20003c2c
 8011340:	080170d8 	.word	0x080170d8

08011344 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d102      	bne.n	801135c <pvTimerGetTimerID+0x18>
 8011356:	b672      	cpsid	i
 8011358:	46c0      	nop			@ (mov r8, r8)
 801135a:	e7fd      	b.n	8011358 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 801135c:	f000 f8a8 	bl	80114b0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	69db      	ldr	r3, [r3, #28]
 8011364:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8011366:	f000 f8b5 	bl	80114d4 <vPortExitCritical>

	return pvReturn;
 801136a:	68bb      	ldr	r3, [r7, #8]
}
 801136c:	0018      	movs	r0, r3
 801136e:	46bd      	mov	sp, r7
 8011370:	b004      	add	sp, #16
 8011372:	bd80      	pop	{r7, pc}

08011374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	3b04      	subs	r3, #4
 8011384:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2280      	movs	r2, #128	@ 0x80
 801138a:	0452      	lsls	r2, r2, #17
 801138c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	3b04      	subs	r3, #4
 8011392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	3b04      	subs	r3, #4
 801139e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80113a0:	4a08      	ldr	r2, [pc, #32]	@ (80113c4 <pxPortInitialiseStack+0x50>)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3b14      	subs	r3, #20
 80113aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3b20      	subs	r3, #32
 80113b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80113b8:	68fb      	ldr	r3, [r7, #12]
}
 80113ba:	0018      	movs	r0, r3
 80113bc:	46bd      	mov	sp, r7
 80113be:	b004      	add	sp, #16
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	46c0      	nop			@ (mov r8, r8)
 80113c4:	080113c9 	.word	0x080113c9

080113c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80113ce:	2300      	movs	r3, #0
 80113d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80113d2:	4b08      	ldr	r3, [pc, #32]	@ (80113f4 <prvTaskExitError+0x2c>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	3301      	adds	r3, #1
 80113d8:	d002      	beq.n	80113e0 <prvTaskExitError+0x18>
 80113da:	b672      	cpsid	i
 80113dc:	46c0      	nop			@ (mov r8, r8)
 80113de:	e7fd      	b.n	80113dc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80113e0:	b672      	cpsid	i
	while( ulDummy == 0 )
 80113e2:	46c0      	nop			@ (mov r8, r8)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d0fc      	beq.n	80113e4 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80113ea:	46c0      	nop			@ (mov r8, r8)
 80113ec:	46c0      	nop			@ (mov r8, r8)
 80113ee:	46bd      	mov	sp, r7
 80113f0:	b002      	add	sp, #8
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	2000007c 	.word	0x2000007c

080113f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80113fc:	46c0      	nop			@ (mov r8, r8)
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011410 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011410:	4a0b      	ldr	r2, [pc, #44]	@ (8011440 <pxCurrentTCBConst2>)
 8011412:	6813      	ldr	r3, [r2, #0]
 8011414:	6818      	ldr	r0, [r3, #0]
 8011416:	3020      	adds	r0, #32
 8011418:	f380 8809 	msr	PSP, r0
 801141c:	2002      	movs	r0, #2
 801141e:	f380 8814 	msr	CONTROL, r0
 8011422:	f3bf 8f6f 	isb	sy
 8011426:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011428:	46ae      	mov	lr, r5
 801142a:	bc08      	pop	{r3}
 801142c:	bc04      	pop	{r2}
 801142e:	b662      	cpsie	i
 8011430:	4718      	bx	r3
 8011432:	46c0      	nop			@ (mov r8, r8)
 8011434:	46c0      	nop			@ (mov r8, r8)
 8011436:	46c0      	nop			@ (mov r8, r8)
 8011438:	46c0      	nop			@ (mov r8, r8)
 801143a:	46c0      	nop			@ (mov r8, r8)
 801143c:	46c0      	nop			@ (mov r8, r8)
 801143e:	46c0      	nop			@ (mov r8, r8)

08011440 <pxCurrentTCBConst2>:
 8011440:	200036f0 	.word	0x200036f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8011444:	46c0      	nop			@ (mov r8, r8)
 8011446:	46c0      	nop			@ (mov r8, r8)

08011448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011448:	b580      	push	{r7, lr}
 801144a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801144c:	4b0e      	ldr	r3, [pc, #56]	@ (8011488 <xPortStartScheduler+0x40>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	4b0d      	ldr	r3, [pc, #52]	@ (8011488 <xPortStartScheduler+0x40>)
 8011452:	21ff      	movs	r1, #255	@ 0xff
 8011454:	0409      	lsls	r1, r1, #16
 8011456:	430a      	orrs	r2, r1
 8011458:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801145a:	4b0b      	ldr	r3, [pc, #44]	@ (8011488 <xPortStartScheduler+0x40>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	4b0a      	ldr	r3, [pc, #40]	@ (8011488 <xPortStartScheduler+0x40>)
 8011460:	21ff      	movs	r1, #255	@ 0xff
 8011462:	0609      	lsls	r1, r1, #24
 8011464:	430a      	orrs	r2, r1
 8011466:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011468:	f000 f898 	bl	801159c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801146c:	4b07      	ldr	r3, [pc, #28]	@ (801148c <xPortStartScheduler+0x44>)
 801146e:	2200      	movs	r2, #0
 8011470:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8011472:	f7ff ffcd 	bl	8011410 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011476:	f7fe fff3 	bl	8010460 <vTaskSwitchContext>
	prvTaskExitError();
 801147a:	f7ff ffa5 	bl	80113c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801147e:	2300      	movs	r3, #0
}
 8011480:	0018      	movs	r0, r3
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	46c0      	nop			@ (mov r8, r8)
 8011488:	e000ed20 	.word	0xe000ed20
 801148c:	2000007c 	.word	0x2000007c

08011490 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8011490:	b580      	push	{r7, lr}
 8011492:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011494:	4b05      	ldr	r3, [pc, #20]	@ (80114ac <vPortYield+0x1c>)
 8011496:	2280      	movs	r2, #128	@ 0x80
 8011498:	0552      	lsls	r2, r2, #21
 801149a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801149c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80114a0:	f3bf 8f6f 	isb	sy
}
 80114a4:	46c0      	nop			@ (mov r8, r8)
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	46c0      	nop			@ (mov r8, r8)
 80114ac:	e000ed04 	.word	0xe000ed04

080114b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80114b4:	b672      	cpsid	i
	uxCriticalNesting++;
 80114b6:	4b06      	ldr	r3, [pc, #24]	@ (80114d0 <vPortEnterCritical+0x20>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	1c5a      	adds	r2, r3, #1
 80114bc:	4b04      	ldr	r3, [pc, #16]	@ (80114d0 <vPortEnterCritical+0x20>)
 80114be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80114c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80114c4:	f3bf 8f6f 	isb	sy
}
 80114c8:	46c0      	nop			@ (mov r8, r8)
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	46c0      	nop			@ (mov r8, r8)
 80114d0:	2000007c 	.word	0x2000007c

080114d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114d8:	4b09      	ldr	r3, [pc, #36]	@ (8011500 <vPortExitCritical+0x2c>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d102      	bne.n	80114e6 <vPortExitCritical+0x12>
 80114e0:	b672      	cpsid	i
 80114e2:	46c0      	nop			@ (mov r8, r8)
 80114e4:	e7fd      	b.n	80114e2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80114e6:	4b06      	ldr	r3, [pc, #24]	@ (8011500 <vPortExitCritical+0x2c>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	1e5a      	subs	r2, r3, #1
 80114ec:	4b04      	ldr	r3, [pc, #16]	@ (8011500 <vPortExitCritical+0x2c>)
 80114ee:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80114f0:	4b03      	ldr	r3, [pc, #12]	@ (8011500 <vPortExitCritical+0x2c>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d100      	bne.n	80114fa <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 80114f8:	b662      	cpsie	i
	}
}
 80114fa:	46c0      	nop			@ (mov r8, r8)
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}
 8011500:	2000007c 	.word	0x2000007c

08011504 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8011504:	f3ef 8010 	mrs	r0, PRIMASK
 8011508:	b672      	cpsid	i
 801150a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801150c:	46c0      	nop			@ (mov r8, r8)
 801150e:	0018      	movs	r0, r3

08011510 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8011510:	f380 8810 	msr	PRIMASK, r0
 8011514:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8011516:	46c0      	nop			@ (mov r8, r8)
	...

08011520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011520:	f3ef 8009 	mrs	r0, PSP
 8011524:	4b0e      	ldr	r3, [pc, #56]	@ (8011560 <pxCurrentTCBConst>)
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	3820      	subs	r0, #32
 801152a:	6010      	str	r0, [r2, #0]
 801152c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801152e:	4644      	mov	r4, r8
 8011530:	464d      	mov	r5, r9
 8011532:	4656      	mov	r6, sl
 8011534:	465f      	mov	r7, fp
 8011536:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011538:	b508      	push	{r3, lr}
 801153a:	b672      	cpsid	i
 801153c:	f7fe ff90 	bl	8010460 <vTaskSwitchContext>
 8011540:	b662      	cpsie	i
 8011542:	bc0c      	pop	{r2, r3}
 8011544:	6811      	ldr	r1, [r2, #0]
 8011546:	6808      	ldr	r0, [r1, #0]
 8011548:	3010      	adds	r0, #16
 801154a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801154c:	46a0      	mov	r8, r4
 801154e:	46a9      	mov	r9, r5
 8011550:	46b2      	mov	sl, r6
 8011552:	46bb      	mov	fp, r7
 8011554:	f380 8809 	msr	PSP, r0
 8011558:	3820      	subs	r0, #32
 801155a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801155c:	4718      	bx	r3
 801155e:	46c0      	nop			@ (mov r8, r8)

08011560 <pxCurrentTCBConst>:
 8011560:	200036f0 	.word	0x200036f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8011564:	46c0      	nop			@ (mov r8, r8)
 8011566:	46c0      	nop			@ (mov r8, r8)

08011568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801156e:	f7ff ffc9 	bl	8011504 <ulSetInterruptMaskFromISR>
 8011572:	0003      	movs	r3, r0
 8011574:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011576:	f7fe fec3 	bl	8010300 <xTaskIncrementTick>
 801157a:	1e03      	subs	r3, r0, #0
 801157c:	d003      	beq.n	8011586 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801157e:	4b06      	ldr	r3, [pc, #24]	@ (8011598 <xPortSysTickHandler+0x30>)
 8011580:	2280      	movs	r2, #128	@ 0x80
 8011582:	0552      	lsls	r2, r2, #21
 8011584:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	0018      	movs	r0, r3
 801158a:	f7ff ffc1 	bl	8011510 <vClearInterruptMaskFromISR>
}
 801158e:	46c0      	nop			@ (mov r8, r8)
 8011590:	46bd      	mov	sp, r7
 8011592:	b002      	add	sp, #8
 8011594:	bd80      	pop	{r7, pc}
 8011596:	46c0      	nop			@ (mov r8, r8)
 8011598:	e000ed04 	.word	0xe000ed04

0801159c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80115a0:	4b0b      	ldr	r3, [pc, #44]	@ (80115d0 <vPortSetupTimerInterrupt+0x34>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80115a6:	4b0b      	ldr	r3, [pc, #44]	@ (80115d4 <vPortSetupTimerInterrupt+0x38>)
 80115a8:	2200      	movs	r2, #0
 80115aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80115ac:	4b0a      	ldr	r3, [pc, #40]	@ (80115d8 <vPortSetupTimerInterrupt+0x3c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	22fa      	movs	r2, #250	@ 0xfa
 80115b2:	0091      	lsls	r1, r2, #2
 80115b4:	0018      	movs	r0, r3
 80115b6:	f7ee fdc3 	bl	8000140 <__udivsi3>
 80115ba:	0003      	movs	r3, r0
 80115bc:	001a      	movs	r2, r3
 80115be:	4b07      	ldr	r3, [pc, #28]	@ (80115dc <vPortSetupTimerInterrupt+0x40>)
 80115c0:	3a01      	subs	r2, #1
 80115c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80115c4:	4b02      	ldr	r3, [pc, #8]	@ (80115d0 <vPortSetupTimerInterrupt+0x34>)
 80115c6:	2207      	movs	r2, #7
 80115c8:	601a      	str	r2, [r3, #0]
}
 80115ca:	46c0      	nop			@ (mov r8, r8)
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	e000e010 	.word	0xe000e010
 80115d4:	e000e018 	.word	0xe000e018
 80115d8:	20000068 	.word	0x20000068
 80115dc:	e000e014 	.word	0xe000e014

080115e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b086      	sub	sp, #24
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115e8:	2300      	movs	r3, #0
 80115ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80115ec:	f7fe fde2 	bl	80101b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115f0:	4b4d      	ldr	r3, [pc, #308]	@ (8011728 <pvPortMalloc+0x148>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d101      	bne.n	80115fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115f8:	f000 f8f2 	bl	80117e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115fc:	4b4b      	ldr	r3, [pc, #300]	@ (801172c <pvPortMalloc+0x14c>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	4013      	ands	r3, r2
 8011604:	d000      	beq.n	8011608 <pvPortMalloc+0x28>
 8011606:	e080      	b.n	801170a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d013      	beq.n	8011636 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 801160e:	2208      	movs	r2, #8
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	189b      	adds	r3, r3, r2
 8011614:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2207      	movs	r2, #7
 801161a:	4013      	ands	r3, r2
 801161c:	d00b      	beq.n	8011636 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2207      	movs	r2, #7
 8011622:	4393      	bics	r3, r2
 8011624:	3308      	adds	r3, #8
 8011626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2207      	movs	r2, #7
 801162c:	4013      	ands	r3, r2
 801162e:	d002      	beq.n	8011636 <pvPortMalloc+0x56>
 8011630:	b672      	cpsid	i
 8011632:	46c0      	nop			@ (mov r8, r8)
 8011634:	e7fd      	b.n	8011632 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d066      	beq.n	801170a <pvPortMalloc+0x12a>
 801163c:	4b3c      	ldr	r3, [pc, #240]	@ (8011730 <pvPortMalloc+0x150>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	429a      	cmp	r2, r3
 8011644:	d861      	bhi.n	801170a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011646:	4b3b      	ldr	r3, [pc, #236]	@ (8011734 <pvPortMalloc+0x154>)
 8011648:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801164a:	4b3a      	ldr	r3, [pc, #232]	@ (8011734 <pvPortMalloc+0x154>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011650:	e004      	b.n	801165c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	429a      	cmp	r2, r3
 8011664:	d903      	bls.n	801166e <pvPortMalloc+0x8e>
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d1f1      	bne.n	8011652 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801166e:	4b2e      	ldr	r3, [pc, #184]	@ (8011728 <pvPortMalloc+0x148>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	429a      	cmp	r2, r3
 8011676:	d048      	beq.n	801170a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2208      	movs	r2, #8
 801167e:	189b      	adds	r3, r3, r2
 8011680:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	1ad2      	subs	r2, r2, r3
 8011692:	2308      	movs	r3, #8
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	429a      	cmp	r2, r3
 8011698:	d917      	bls.n	80116ca <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801169a:	697a      	ldr	r2, [r7, #20]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	18d3      	adds	r3, r2, r3
 80116a0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	2207      	movs	r2, #7
 80116a6:	4013      	ands	r3, r2
 80116a8:	d002      	beq.n	80116b0 <pvPortMalloc+0xd0>
 80116aa:	b672      	cpsid	i
 80116ac:	46c0      	nop			@ (mov r8, r8)
 80116ae:	e7fd      	b.n	80116ac <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	685a      	ldr	r2, [r3, #4]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	1ad2      	subs	r2, r2, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	0018      	movs	r0, r3
 80116c6:	f000 f8eb 	bl	80118a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116ca:	4b19      	ldr	r3, [pc, #100]	@ (8011730 <pvPortMalloc+0x150>)
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	1ad2      	subs	r2, r2, r3
 80116d4:	4b16      	ldr	r3, [pc, #88]	@ (8011730 <pvPortMalloc+0x150>)
 80116d6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116d8:	4b15      	ldr	r3, [pc, #84]	@ (8011730 <pvPortMalloc+0x150>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	4b16      	ldr	r3, [pc, #88]	@ (8011738 <pvPortMalloc+0x158>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d203      	bcs.n	80116ec <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116e4:	4b12      	ldr	r3, [pc, #72]	@ (8011730 <pvPortMalloc+0x150>)
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	4b13      	ldr	r3, [pc, #76]	@ (8011738 <pvPortMalloc+0x158>)
 80116ea:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	685a      	ldr	r2, [r3, #4]
 80116f0:	4b0e      	ldr	r3, [pc, #56]	@ (801172c <pvPortMalloc+0x14c>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	431a      	orrs	r2, r3
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	2200      	movs	r2, #0
 80116fe:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011700:	4b0e      	ldr	r3, [pc, #56]	@ (801173c <pvPortMalloc+0x15c>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	1c5a      	adds	r2, r3, #1
 8011706:	4b0d      	ldr	r3, [pc, #52]	@ (801173c <pvPortMalloc+0x15c>)
 8011708:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801170a:	f7fe fd5f 	bl	80101cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2207      	movs	r2, #7
 8011712:	4013      	ands	r3, r2
 8011714:	d002      	beq.n	801171c <pvPortMalloc+0x13c>
 8011716:	b672      	cpsid	i
 8011718:	46c0      	nop			@ (mov r8, r8)
 801171a:	e7fd      	b.n	8011718 <pvPortMalloc+0x138>
	return pvReturn;
 801171c:	68fb      	ldr	r3, [r7, #12]
}
 801171e:	0018      	movs	r0, r3
 8011720:	46bd      	mov	sp, r7
 8011722:	b006      	add	sp, #24
 8011724:	bd80      	pop	{r7, pc}
 8011726:	46c0      	nop			@ (mov r8, r8)
 8011728:	20007124 	.word	0x20007124
 801172c:	20007138 	.word	0x20007138
 8011730:	20007128 	.word	0x20007128
 8011734:	2000711c 	.word	0x2000711c
 8011738:	2000712c 	.word	0x2000712c
 801173c:	20007130 	.word	0x20007130

08011740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d03c      	beq.n	80117cc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011752:	2308      	movs	r3, #8
 8011754:	425b      	negs	r3, r3
 8011756:	68fa      	ldr	r2, [r7, #12]
 8011758:	18d3      	adds	r3, r2, r3
 801175a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	4b1b      	ldr	r3, [pc, #108]	@ (80117d4 <vPortFree+0x94>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4013      	ands	r3, r2
 801176a:	d102      	bne.n	8011772 <vPortFree+0x32>
 801176c:	b672      	cpsid	i
 801176e:	46c0      	nop			@ (mov r8, r8)
 8011770:	e7fd      	b.n	801176e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d002      	beq.n	8011780 <vPortFree+0x40>
 801177a:	b672      	cpsid	i
 801177c:	46c0      	nop			@ (mov r8, r8)
 801177e:	e7fd      	b.n	801177c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	685a      	ldr	r2, [r3, #4]
 8011784:	4b13      	ldr	r3, [pc, #76]	@ (80117d4 <vPortFree+0x94>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4013      	ands	r3, r2
 801178a:	d01f      	beq.n	80117cc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d11b      	bne.n	80117cc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	685a      	ldr	r2, [r3, #4]
 8011798:	4b0e      	ldr	r3, [pc, #56]	@ (80117d4 <vPortFree+0x94>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	43db      	mvns	r3, r3
 801179e:	401a      	ands	r2, r3
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117a4:	f7fe fd06 	bl	80101b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	685a      	ldr	r2, [r3, #4]
 80117ac:	4b0a      	ldr	r3, [pc, #40]	@ (80117d8 <vPortFree+0x98>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	18d2      	adds	r2, r2, r3
 80117b2:	4b09      	ldr	r3, [pc, #36]	@ (80117d8 <vPortFree+0x98>)
 80117b4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	0018      	movs	r0, r3
 80117ba:	f000 f871 	bl	80118a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80117be:	4b07      	ldr	r3, [pc, #28]	@ (80117dc <vPortFree+0x9c>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	1c5a      	adds	r2, r3, #1
 80117c4:	4b05      	ldr	r3, [pc, #20]	@ (80117dc <vPortFree+0x9c>)
 80117c6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80117c8:	f7fe fd00 	bl	80101cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117cc:	46c0      	nop			@ (mov r8, r8)
 80117ce:	46bd      	mov	sp, r7
 80117d0:	b004      	add	sp, #16
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	20007138 	.word	0x20007138
 80117d8:	20007128 	.word	0x20007128
 80117dc:	20007134 	.word	0x20007134

080117e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80117e6:	23d0      	movs	r3, #208	@ 0xd0
 80117e8:	019b      	lsls	r3, r3, #6
 80117ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80117ec:	4b26      	ldr	r3, [pc, #152]	@ (8011888 <prvHeapInit+0xa8>)
 80117ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2207      	movs	r2, #7
 80117f4:	4013      	ands	r3, r2
 80117f6:	d00c      	beq.n	8011812 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	3307      	adds	r3, #7
 80117fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2207      	movs	r2, #7
 8011802:	4393      	bics	r3, r2
 8011804:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011806:	68ba      	ldr	r2, [r7, #8]
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	1ad2      	subs	r2, r2, r3
 801180c:	4b1e      	ldr	r3, [pc, #120]	@ (8011888 <prvHeapInit+0xa8>)
 801180e:	18d3      	adds	r3, r2, r3
 8011810:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011816:	4b1d      	ldr	r3, [pc, #116]	@ (801188c <prvHeapInit+0xac>)
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801181c:	4b1b      	ldr	r3, [pc, #108]	@ (801188c <prvHeapInit+0xac>)
 801181e:	2200      	movs	r2, #0
 8011820:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	18d3      	adds	r3, r2, r3
 8011828:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801182a:	2208      	movs	r2, #8
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	1a9b      	subs	r3, r3, r2
 8011830:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2207      	movs	r2, #7
 8011836:	4393      	bics	r3, r2
 8011838:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801183a:	68fa      	ldr	r2, [r7, #12]
 801183c:	4b14      	ldr	r3, [pc, #80]	@ (8011890 <prvHeapInit+0xb0>)
 801183e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8011840:	4b13      	ldr	r3, [pc, #76]	@ (8011890 <prvHeapInit+0xb0>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2200      	movs	r2, #0
 8011846:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011848:	4b11      	ldr	r3, [pc, #68]	@ (8011890 <prvHeapInit+0xb0>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	2200      	movs	r2, #0
 801184e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	68fa      	ldr	r2, [r7, #12]
 8011858:	1ad2      	subs	r2, r2, r3
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801185e:	4b0c      	ldr	r3, [pc, #48]	@ (8011890 <prvHeapInit+0xb0>)
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	4b0a      	ldr	r3, [pc, #40]	@ (8011894 <prvHeapInit+0xb4>)
 801186c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	685a      	ldr	r2, [r3, #4]
 8011872:	4b09      	ldr	r3, [pc, #36]	@ (8011898 <prvHeapInit+0xb8>)
 8011874:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011876:	4b09      	ldr	r3, [pc, #36]	@ (801189c <prvHeapInit+0xbc>)
 8011878:	2280      	movs	r2, #128	@ 0x80
 801187a:	0612      	lsls	r2, r2, #24
 801187c:	601a      	str	r2, [r3, #0]
}
 801187e:	46c0      	nop			@ (mov r8, r8)
 8011880:	46bd      	mov	sp, r7
 8011882:	b004      	add	sp, #16
 8011884:	bd80      	pop	{r7, pc}
 8011886:	46c0      	nop			@ (mov r8, r8)
 8011888:	20003d1c 	.word	0x20003d1c
 801188c:	2000711c 	.word	0x2000711c
 8011890:	20007124 	.word	0x20007124
 8011894:	2000712c 	.word	0x2000712c
 8011898:	20007128 	.word	0x20007128
 801189c:	20007138 	.word	0x20007138

080118a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118a8:	4b27      	ldr	r3, [pc, #156]	@ (8011948 <prvInsertBlockIntoFreeList+0xa8>)
 80118aa:	60fb      	str	r3, [r7, #12]
 80118ac:	e002      	b.n	80118b4 <prvInsertBlockIntoFreeList+0x14>
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d8f7      	bhi.n	80118ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	68ba      	ldr	r2, [r7, #8]
 80118c8:	18d3      	adds	r3, r2, r3
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d108      	bne.n	80118e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	685a      	ldr	r2, [r3, #4]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	18d2      	adds	r2, r2, r3
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	68ba      	ldr	r2, [r7, #8]
 80118ec:	18d2      	adds	r2, r2, r3
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d118      	bne.n	8011928 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	4b14      	ldr	r3, [pc, #80]	@ (801194c <prvInsertBlockIntoFreeList+0xac>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	429a      	cmp	r2, r3
 8011900:	d00d      	beq.n	801191e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	685a      	ldr	r2, [r3, #4]
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	685b      	ldr	r3, [r3, #4]
 801190c:	18d2      	adds	r2, r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	601a      	str	r2, [r3, #0]
 801191c:	e008      	b.n	8011930 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801191e:	4b0b      	ldr	r3, [pc, #44]	@ (801194c <prvInsertBlockIntoFreeList+0xac>)
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	e003      	b.n	8011930 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	429a      	cmp	r2, r3
 8011936:	d002      	beq.n	801193e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801193e:	46c0      	nop			@ (mov r8, r8)
 8011940:	46bd      	mov	sp, r7
 8011942:	b004      	add	sp, #16
 8011944:	bd80      	pop	{r7, pc}
 8011946:	46c0      	nop			@ (mov r8, r8)
 8011948:	2000711c 	.word	0x2000711c
 801194c:	20007124 	.word	0x20007124

08011950 <asinf>:
 8011950:	b570      	push	{r4, r5, r6, lr}
 8011952:	1c05      	adds	r5, r0, #0
 8011954:	f000 f94c 	bl	8011bf0 <__ieee754_asinf>
 8011958:	1c29      	adds	r1, r5, #0
 801195a:	1c04      	adds	r4, r0, #0
 801195c:	1c28      	adds	r0, r5, #0
 801195e:	f7ef fda1 	bl	80014a4 <__aeabi_fcmpun>
 8011962:	2800      	cmp	r0, #0
 8011964:	d110      	bne.n	8011988 <asinf+0x38>
 8011966:	1c28      	adds	r0, r5, #0
 8011968:	f000 f82e 	bl	80119c8 <fabsf>
 801196c:	21fe      	movs	r1, #254	@ 0xfe
 801196e:	0589      	lsls	r1, r1, #22
 8011970:	f7ee fdc0 	bl	80004f4 <__aeabi_fcmpgt>
 8011974:	2800      	cmp	r0, #0
 8011976:	d007      	beq.n	8011988 <asinf+0x38>
 8011978:	f001 fb48 	bl	801300c <__errno>
 801197c:	2321      	movs	r3, #33	@ 0x21
 801197e:	6003      	str	r3, [r0, #0]
 8011980:	4802      	ldr	r0, [pc, #8]	@ (801198c <asinf+0x3c>)
 8011982:	f000 f871 	bl	8011a68 <nanf>
 8011986:	1c04      	adds	r4, r0, #0
 8011988:	1c20      	adds	r0, r4, #0
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	080176dd 	.word	0x080176dd

08011990 <sqrtf>:
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	1c05      	adds	r5, r0, #0
 8011994:	f000 f8b4 	bl	8011b00 <__ieee754_sqrtf>
 8011998:	1c29      	adds	r1, r5, #0
 801199a:	1c04      	adds	r4, r0, #0
 801199c:	1c28      	adds	r0, r5, #0
 801199e:	f7ef fd81 	bl	80014a4 <__aeabi_fcmpun>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d10e      	bne.n	80119c4 <sqrtf+0x34>
 80119a6:	2100      	movs	r1, #0
 80119a8:	1c28      	adds	r0, r5, #0
 80119aa:	f7ee fd8f 	bl	80004cc <__aeabi_fcmplt>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d008      	beq.n	80119c4 <sqrtf+0x34>
 80119b2:	f001 fb2b 	bl	801300c <__errno>
 80119b6:	2321      	movs	r3, #33	@ 0x21
 80119b8:	2100      	movs	r1, #0
 80119ba:	6003      	str	r3, [r0, #0]
 80119bc:	1c08      	adds	r0, r1, #0
 80119be:	f7ef f8a9 	bl	8000b14 <__aeabi_fdiv>
 80119c2:	1c04      	adds	r4, r0, #0
 80119c4:	1c20      	adds	r0, r4, #0
 80119c6:	bd70      	pop	{r4, r5, r6, pc}

080119c8 <fabsf>:
 80119c8:	0040      	lsls	r0, r0, #1
 80119ca:	0840      	lsrs	r0, r0, #1
 80119cc:	4770      	bx	lr

080119ce <fmax>:
 80119ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d0:	0004      	movs	r4, r0
 80119d2:	000d      	movs	r5, r1
 80119d4:	0016      	movs	r6, r2
 80119d6:	001f      	movs	r7, r3
 80119d8:	f000 f816 	bl	8011a08 <__fpclassifyd>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d104      	bne.n	80119ea <fmax+0x1c>
 80119e0:	0034      	movs	r4, r6
 80119e2:	003d      	movs	r5, r7
 80119e4:	0029      	movs	r1, r5
 80119e6:	0020      	movs	r0, r4
 80119e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ea:	0030      	movs	r0, r6
 80119ec:	0039      	movs	r1, r7
 80119ee:	f000 f80b 	bl	8011a08 <__fpclassifyd>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d0f6      	beq.n	80119e4 <fmax+0x16>
 80119f6:	0032      	movs	r2, r6
 80119f8:	003b      	movs	r3, r7
 80119fa:	0020      	movs	r0, r4
 80119fc:	0029      	movs	r1, r5
 80119fe:	f7ee fd3f 	bl	8000480 <__aeabi_dcmpgt>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d0ec      	beq.n	80119e0 <fmax+0x12>
 8011a06:	e7ed      	b.n	80119e4 <fmax+0x16>

08011a08 <__fpclassifyd>:
 8011a08:	000b      	movs	r3, r1
 8011a0a:	b570      	push	{r4, r5, r6, lr}
 8011a0c:	0004      	movs	r4, r0
 8011a0e:	0002      	movs	r2, r0
 8011a10:	0001      	movs	r1, r0
 8011a12:	431c      	orrs	r4, r3
 8011a14:	2002      	movs	r0, #2
 8011a16:	2c00      	cmp	r4, #0
 8011a18:	d006      	beq.n	8011a28 <__fpclassifyd+0x20>
 8011a1a:	2080      	movs	r0, #128	@ 0x80
 8011a1c:	0600      	lsls	r0, r0, #24
 8011a1e:	4283      	cmp	r3, r0
 8011a20:	d103      	bne.n	8011a2a <__fpclassifyd+0x22>
 8011a22:	1e4b      	subs	r3, r1, #1
 8011a24:	4199      	sbcs	r1, r3
 8011a26:	1c88      	adds	r0, r1, #2
 8011a28:	bd70      	pop	{r4, r5, r6, pc}
 8011a2a:	480c      	ldr	r0, [pc, #48]	@ (8011a5c <__fpclassifyd+0x54>)
 8011a2c:	0059      	lsls	r1, r3, #1
 8011a2e:	0849      	lsrs	r1, r1, #1
 8011a30:	4c0b      	ldr	r4, [pc, #44]	@ (8011a60 <__fpclassifyd+0x58>)
 8011a32:	180e      	adds	r6, r1, r0
 8011a34:	2004      	movs	r0, #4
 8011a36:	42a6      	cmp	r6, r4
 8011a38:	d9f6      	bls.n	8011a28 <__fpclassifyd+0x20>
 8011a3a:	2480      	movs	r4, #128	@ 0x80
 8011a3c:	3801      	subs	r0, #1
 8011a3e:	0364      	lsls	r4, r4, #13
 8011a40:	42a3      	cmp	r3, r4
 8011a42:	d3f1      	bcc.n	8011a28 <__fpclassifyd+0x20>
 8011a44:	2580      	movs	r5, #128	@ 0x80
 8011a46:	062d      	lsls	r5, r5, #24
 8011a48:	195d      	adds	r5, r3, r5
 8011a4a:	42a5      	cmp	r5, r4
 8011a4c:	d3ec      	bcc.n	8011a28 <__fpclassifyd+0x20>
 8011a4e:	4c05      	ldr	r4, [pc, #20]	@ (8011a64 <__fpclassifyd+0x5c>)
 8011a50:	2000      	movs	r0, #0
 8011a52:	42a1      	cmp	r1, r4
 8011a54:	d1e8      	bne.n	8011a28 <__fpclassifyd+0x20>
 8011a56:	4250      	negs	r0, r2
 8011a58:	4150      	adcs	r0, r2
 8011a5a:	e7e5      	b.n	8011a28 <__fpclassifyd+0x20>
 8011a5c:	fff00000 	.word	0xfff00000
 8011a60:	7fdfffff 	.word	0x7fdfffff
 8011a64:	7ff00000 	.word	0x7ff00000

08011a68 <nanf>:
 8011a68:	4800      	ldr	r0, [pc, #0]	@ (8011a6c <nanf+0x4>)
 8011a6a:	4770      	bx	lr
 8011a6c:	7fc00000 	.word	0x7fc00000

08011a70 <fmaxf>:
 8011a70:	b570      	push	{r4, r5, r6, lr}
 8011a72:	1c04      	adds	r4, r0, #0
 8011a74:	1c0d      	adds	r5, r1, #0
 8011a76:	f000 f827 	bl	8011ac8 <__fpclassifyf>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d102      	bne.n	8011a84 <fmaxf+0x14>
 8011a7e:	1c2c      	adds	r4, r5, #0
 8011a80:	1c20      	adds	r0, r4, #0
 8011a82:	bd70      	pop	{r4, r5, r6, pc}
 8011a84:	1c28      	adds	r0, r5, #0
 8011a86:	f000 f81f 	bl	8011ac8 <__fpclassifyf>
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	d0f8      	beq.n	8011a80 <fmaxf+0x10>
 8011a8e:	1c29      	adds	r1, r5, #0
 8011a90:	1c20      	adds	r0, r4, #0
 8011a92:	f7ee fd2f 	bl	80004f4 <__aeabi_fcmpgt>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d0f1      	beq.n	8011a7e <fmaxf+0xe>
 8011a9a:	e7f1      	b.n	8011a80 <fmaxf+0x10>

08011a9c <fminf>:
 8011a9c:	b570      	push	{r4, r5, r6, lr}
 8011a9e:	1c04      	adds	r4, r0, #0
 8011aa0:	1c0d      	adds	r5, r1, #0
 8011aa2:	f000 f811 	bl	8011ac8 <__fpclassifyf>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d102      	bne.n	8011ab0 <fminf+0x14>
 8011aaa:	1c2c      	adds	r4, r5, #0
 8011aac:	1c20      	adds	r0, r4, #0
 8011aae:	bd70      	pop	{r4, r5, r6, pc}
 8011ab0:	1c28      	adds	r0, r5, #0
 8011ab2:	f000 f809 	bl	8011ac8 <__fpclassifyf>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	d0f8      	beq.n	8011aac <fminf+0x10>
 8011aba:	1c29      	adds	r1, r5, #0
 8011abc:	1c20      	adds	r0, r4, #0
 8011abe:	f7ee fd05 	bl	80004cc <__aeabi_fcmplt>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	d0f1      	beq.n	8011aaa <fminf+0xe>
 8011ac6:	e7f1      	b.n	8011aac <fminf+0x10>

08011ac8 <__fpclassifyf>:
 8011ac8:	0043      	lsls	r3, r0, #1
 8011aca:	085a      	lsrs	r2, r3, #1
 8011acc:	2002      	movs	r0, #2
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d00f      	beq.n	8011af2 <__fpclassifyf+0x2a>
 8011ad2:	21fe      	movs	r1, #254	@ 0xfe
 8011ad4:	4b07      	ldr	r3, [pc, #28]	@ (8011af4 <__fpclassifyf+0x2c>)
 8011ad6:	05c9      	lsls	r1, r1, #23
 8011ad8:	18d3      	adds	r3, r2, r3
 8011ada:	1800      	adds	r0, r0, r0
 8011adc:	428b      	cmp	r3, r1
 8011ade:	d308      	bcc.n	8011af2 <__fpclassifyf+0x2a>
 8011ae0:	4905      	ldr	r1, [pc, #20]	@ (8011af8 <__fpclassifyf+0x30>)
 8011ae2:	1e53      	subs	r3, r2, #1
 8011ae4:	3801      	subs	r0, #1
 8011ae6:	428b      	cmp	r3, r1
 8011ae8:	d903      	bls.n	8011af2 <__fpclassifyf+0x2a>
 8011aea:	4b04      	ldr	r3, [pc, #16]	@ (8011afc <__fpclassifyf+0x34>)
 8011aec:	18d0      	adds	r0, r2, r3
 8011aee:	4243      	negs	r3, r0
 8011af0:	4158      	adcs	r0, r3
 8011af2:	4770      	bx	lr
 8011af4:	ff800000 	.word	0xff800000
 8011af8:	007ffffe 	.word	0x007ffffe
 8011afc:	80800000 	.word	0x80800000

08011b00 <__ieee754_sqrtf>:
 8011b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b02:	0003      	movs	r3, r0
 8011b04:	0042      	lsls	r2, r0, #1
 8011b06:	1c04      	adds	r4, r0, #0
 8011b08:	20ff      	movs	r0, #255	@ 0xff
 8011b0a:	0852      	lsrs	r2, r2, #1
 8011b0c:	05c0      	lsls	r0, r0, #23
 8011b0e:	4282      	cmp	r2, r0
 8011b10:	d30a      	bcc.n	8011b28 <__ieee754_sqrtf+0x28>
 8011b12:	1c21      	adds	r1, r4, #0
 8011b14:	1c20      	adds	r0, r4, #0
 8011b16:	f7ef f9e3 	bl	8000ee0 <__aeabi_fmul>
 8011b1a:	1c01      	adds	r1, r0, #0
 8011b1c:	1c20      	adds	r0, r4, #0
 8011b1e:	f7ee fe6f 	bl	8000800 <__aeabi_fadd>
 8011b22:	1c04      	adds	r4, r0, #0
 8011b24:	1c20      	adds	r0, r4, #0
 8011b26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011b28:	2a00      	cmp	r2, #0
 8011b2a:	d0fb      	beq.n	8011b24 <__ieee754_sqrtf+0x24>
 8011b2c:	2c00      	cmp	r4, #0
 8011b2e:	da07      	bge.n	8011b40 <__ieee754_sqrtf+0x40>
 8011b30:	1c21      	adds	r1, r4, #0
 8011b32:	1c20      	adds	r0, r4, #0
 8011b34:	f7ef fb12 	bl	800115c <__aeabi_fsub>
 8011b38:	1c01      	adds	r1, r0, #0
 8011b3a:	f7ee ffeb 	bl	8000b14 <__aeabi_fdiv>
 8011b3e:	e7f0      	b.n	8011b22 <__ieee754_sqrtf+0x22>
 8011b40:	0022      	movs	r2, r4
 8011b42:	15e1      	asrs	r1, r4, #23
 8011b44:	4002      	ands	r2, r0
 8011b46:	4204      	tst	r4, r0
 8011b48:	d046      	beq.n	8011bd8 <__ieee754_sqrtf+0xd8>
 8011b4a:	2280      	movs	r2, #128	@ 0x80
 8011b4c:	000f      	movs	r7, r1
 8011b4e:	025b      	lsls	r3, r3, #9
 8011b50:	0a5b      	lsrs	r3, r3, #9
 8011b52:	0412      	lsls	r2, r2, #16
 8011b54:	3f7f      	subs	r7, #127	@ 0x7f
 8011b56:	4313      	orrs	r3, r2
 8011b58:	07c9      	lsls	r1, r1, #31
 8011b5a:	d400      	bmi.n	8011b5e <__ieee754_sqrtf+0x5e>
 8011b5c:	005b      	lsls	r3, r3, #1
 8011b5e:	2400      	movs	r4, #0
 8011b60:	2180      	movs	r1, #128	@ 0x80
 8011b62:	2019      	movs	r0, #25
 8011b64:	0026      	movs	r6, r4
 8011b66:	107f      	asrs	r7, r7, #1
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	0449      	lsls	r1, r1, #17
 8011b6c:	1875      	adds	r5, r6, r1
 8011b6e:	001a      	movs	r2, r3
 8011b70:	429d      	cmp	r5, r3
 8011b72:	dc02      	bgt.n	8011b7a <__ieee754_sqrtf+0x7a>
 8011b74:	186e      	adds	r6, r5, r1
 8011b76:	1b5a      	subs	r2, r3, r5
 8011b78:	1864      	adds	r4, r4, r1
 8011b7a:	3801      	subs	r0, #1
 8011b7c:	0053      	lsls	r3, r2, #1
 8011b7e:	0849      	lsrs	r1, r1, #1
 8011b80:	2800      	cmp	r0, #0
 8011b82:	d1f3      	bne.n	8011b6c <__ieee754_sqrtf+0x6c>
 8011b84:	2a00      	cmp	r2, #0
 8011b86:	d019      	beq.n	8011bbc <__ieee754_sqrtf+0xbc>
 8011b88:	4d17      	ldr	r5, [pc, #92]	@ (8011be8 <__ieee754_sqrtf+0xe8>)
 8011b8a:	4e18      	ldr	r6, [pc, #96]	@ (8011bec <__ieee754_sqrtf+0xec>)
 8011b8c:	6828      	ldr	r0, [r5, #0]
 8011b8e:	6831      	ldr	r1, [r6, #0]
 8011b90:	682b      	ldr	r3, [r5, #0]
 8011b92:	9301      	str	r3, [sp, #4]
 8011b94:	f7ef fae2 	bl	800115c <__aeabi_fsub>
 8011b98:	1c01      	adds	r1, r0, #0
 8011b9a:	9801      	ldr	r0, [sp, #4]
 8011b9c:	f7ee fca0 	bl	80004e0 <__aeabi_fcmple>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d00b      	beq.n	8011bbc <__ieee754_sqrtf+0xbc>
 8011ba4:	6828      	ldr	r0, [r5, #0]
 8011ba6:	6831      	ldr	r1, [r6, #0]
 8011ba8:	f7ee fe2a 	bl	8000800 <__aeabi_fadd>
 8011bac:	682d      	ldr	r5, [r5, #0]
 8011bae:	1c01      	adds	r1, r0, #0
 8011bb0:	1c28      	adds	r0, r5, #0
 8011bb2:	f7ee fc8b 	bl	80004cc <__aeabi_fcmplt>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d011      	beq.n	8011bde <__ieee754_sqrtf+0xde>
 8011bba:	3402      	adds	r4, #2
 8011bbc:	23fc      	movs	r3, #252	@ 0xfc
 8011bbe:	1064      	asrs	r4, r4, #1
 8011bc0:	059b      	lsls	r3, r3, #22
 8011bc2:	18e3      	adds	r3, r4, r3
 8011bc4:	05fc      	lsls	r4, r7, #23
 8011bc6:	18e4      	adds	r4, r4, r3
 8011bc8:	e7ac      	b.n	8011b24 <__ieee754_sqrtf+0x24>
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	3201      	adds	r2, #1
 8011bce:	4203      	tst	r3, r0
 8011bd0:	d0fb      	beq.n	8011bca <__ieee754_sqrtf+0xca>
 8011bd2:	3a01      	subs	r2, #1
 8011bd4:	1a89      	subs	r1, r1, r2
 8011bd6:	e7b8      	b.n	8011b4a <__ieee754_sqrtf+0x4a>
 8011bd8:	2080      	movs	r0, #128	@ 0x80
 8011bda:	0400      	lsls	r0, r0, #16
 8011bdc:	e7f7      	b.n	8011bce <__ieee754_sqrtf+0xce>
 8011bde:	2301      	movs	r3, #1
 8011be0:	3401      	adds	r4, #1
 8011be2:	439c      	bics	r4, r3
 8011be4:	e7ea      	b.n	8011bbc <__ieee754_sqrtf+0xbc>
 8011be6:	46c0      	nop			@ (mov r8, r8)
 8011be8:	20000084 	.word	0x20000084
 8011bec:	20000080 	.word	0x20000080

08011bf0 <__ieee754_asinf>:
 8011bf0:	23fe      	movs	r3, #254	@ 0xfe
 8011bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bf4:	0046      	lsls	r6, r0, #1
 8011bf6:	b085      	sub	sp, #20
 8011bf8:	1c04      	adds	r4, r0, #0
 8011bfa:	9002      	str	r0, [sp, #8]
 8011bfc:	0876      	lsrs	r6, r6, #1
 8011bfe:	059b      	lsls	r3, r3, #22
 8011c00:	429e      	cmp	r6, r3
 8011c02:	d10c      	bne.n	8011c1e <__ieee754_asinf+0x2e>
 8011c04:	498e      	ldr	r1, [pc, #568]	@ (8011e40 <__ieee754_asinf+0x250>)
 8011c06:	f7ef f96b 	bl	8000ee0 <__aeabi_fmul>
 8011c0a:	498e      	ldr	r1, [pc, #568]	@ (8011e44 <__ieee754_asinf+0x254>)
 8011c0c:	1c05      	adds	r5, r0, #0
 8011c0e:	1c20      	adds	r0, r4, #0
 8011c10:	f7ef f966 	bl	8000ee0 <__aeabi_fmul>
 8011c14:	1c01      	adds	r1, r0, #0
 8011c16:	1c28      	adds	r0, r5, #0
 8011c18:	f7ee fdf2 	bl	8000800 <__aeabi_fadd>
 8011c1c:	e007      	b.n	8011c2e <__ieee754_asinf+0x3e>
 8011c1e:	429e      	cmp	r6, r3
 8011c20:	d909      	bls.n	8011c36 <__ieee754_asinf+0x46>
 8011c22:	1c01      	adds	r1, r0, #0
 8011c24:	f7ef fa9a 	bl	800115c <__aeabi_fsub>
 8011c28:	1c01      	adds	r1, r0, #0
 8011c2a:	f7ee ff73 	bl	8000b14 <__aeabi_fdiv>
 8011c2e:	1c04      	adds	r4, r0, #0
 8011c30:	1c20      	adds	r0, r4, #0
 8011c32:	b005      	add	sp, #20
 8011c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c36:	23fc      	movs	r3, #252	@ 0xfc
 8011c38:	059b      	lsls	r3, r3, #22
 8011c3a:	429e      	cmp	r6, r3
 8011c3c:	d20c      	bcs.n	8011c58 <__ieee754_asinf+0x68>
 8011c3e:	23c8      	movs	r3, #200	@ 0xc8
 8011c40:	059b      	lsls	r3, r3, #22
 8011c42:	429e      	cmp	r6, r3
 8011c44:	d276      	bcs.n	8011d34 <__ieee754_asinf+0x144>
 8011c46:	4980      	ldr	r1, [pc, #512]	@ (8011e48 <__ieee754_asinf+0x258>)
 8011c48:	f7ee fdda 	bl	8000800 <__aeabi_fadd>
 8011c4c:	21fe      	movs	r1, #254	@ 0xfe
 8011c4e:	0589      	lsls	r1, r1, #22
 8011c50:	f7ee fc50 	bl	80004f4 <__aeabi_fcmpgt>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d1eb      	bne.n	8011c30 <__ieee754_asinf+0x40>
 8011c58:	1c20      	adds	r0, r4, #0
 8011c5a:	f7ff feb5 	bl	80119c8 <fabsf>
 8011c5e:	1c01      	adds	r1, r0, #0
 8011c60:	20fe      	movs	r0, #254	@ 0xfe
 8011c62:	0580      	lsls	r0, r0, #22
 8011c64:	f7ef fa7a 	bl	800115c <__aeabi_fsub>
 8011c68:	21fc      	movs	r1, #252	@ 0xfc
 8011c6a:	0589      	lsls	r1, r1, #22
 8011c6c:	f7ef f938 	bl	8000ee0 <__aeabi_fmul>
 8011c70:	4976      	ldr	r1, [pc, #472]	@ (8011e4c <__ieee754_asinf+0x25c>)
 8011c72:	1c04      	adds	r4, r0, #0
 8011c74:	f7ef f934 	bl	8000ee0 <__aeabi_fmul>
 8011c78:	4975      	ldr	r1, [pc, #468]	@ (8011e50 <__ieee754_asinf+0x260>)
 8011c7a:	f7ee fdc1 	bl	8000800 <__aeabi_fadd>
 8011c7e:	1c21      	adds	r1, r4, #0
 8011c80:	f7ef f92e 	bl	8000ee0 <__aeabi_fmul>
 8011c84:	4973      	ldr	r1, [pc, #460]	@ (8011e54 <__ieee754_asinf+0x264>)
 8011c86:	f7ef fa69 	bl	800115c <__aeabi_fsub>
 8011c8a:	1c21      	adds	r1, r4, #0
 8011c8c:	f7ef f928 	bl	8000ee0 <__aeabi_fmul>
 8011c90:	4971      	ldr	r1, [pc, #452]	@ (8011e58 <__ieee754_asinf+0x268>)
 8011c92:	f7ee fdb5 	bl	8000800 <__aeabi_fadd>
 8011c96:	1c21      	adds	r1, r4, #0
 8011c98:	f7ef f922 	bl	8000ee0 <__aeabi_fmul>
 8011c9c:	496f      	ldr	r1, [pc, #444]	@ (8011e5c <__ieee754_asinf+0x26c>)
 8011c9e:	f7ef fa5d 	bl	800115c <__aeabi_fsub>
 8011ca2:	1c21      	adds	r1, r4, #0
 8011ca4:	f7ef f91c 	bl	8000ee0 <__aeabi_fmul>
 8011ca8:	496d      	ldr	r1, [pc, #436]	@ (8011e60 <__ieee754_asinf+0x270>)
 8011caa:	f7ee fda9 	bl	8000800 <__aeabi_fadd>
 8011cae:	1c21      	adds	r1, r4, #0
 8011cb0:	f7ef f916 	bl	8000ee0 <__aeabi_fmul>
 8011cb4:	496b      	ldr	r1, [pc, #428]	@ (8011e64 <__ieee754_asinf+0x274>)
 8011cb6:	9001      	str	r0, [sp, #4]
 8011cb8:	1c20      	adds	r0, r4, #0
 8011cba:	f7ef f911 	bl	8000ee0 <__aeabi_fmul>
 8011cbe:	496a      	ldr	r1, [pc, #424]	@ (8011e68 <__ieee754_asinf+0x278>)
 8011cc0:	f7ef fa4c 	bl	800115c <__aeabi_fsub>
 8011cc4:	1c21      	adds	r1, r4, #0
 8011cc6:	f7ef f90b 	bl	8000ee0 <__aeabi_fmul>
 8011cca:	4968      	ldr	r1, [pc, #416]	@ (8011e6c <__ieee754_asinf+0x27c>)
 8011ccc:	f7ee fd98 	bl	8000800 <__aeabi_fadd>
 8011cd0:	1c21      	adds	r1, r4, #0
 8011cd2:	f7ef f905 	bl	8000ee0 <__aeabi_fmul>
 8011cd6:	4966      	ldr	r1, [pc, #408]	@ (8011e70 <__ieee754_asinf+0x280>)
 8011cd8:	f7ef fa40 	bl	800115c <__aeabi_fsub>
 8011cdc:	1c21      	adds	r1, r4, #0
 8011cde:	f7ef f8ff 	bl	8000ee0 <__aeabi_fmul>
 8011ce2:	21fe      	movs	r1, #254	@ 0xfe
 8011ce4:	0589      	lsls	r1, r1, #22
 8011ce6:	f7ee fd8b 	bl	8000800 <__aeabi_fadd>
 8011cea:	1c07      	adds	r7, r0, #0
 8011cec:	1c20      	adds	r0, r4, #0
 8011cee:	f7ff ff07 	bl	8011b00 <__ieee754_sqrtf>
 8011cf2:	4b60      	ldr	r3, [pc, #384]	@ (8011e74 <__ieee754_asinf+0x284>)
 8011cf4:	1c05      	adds	r5, r0, #0
 8011cf6:	429e      	cmp	r6, r3
 8011cf8:	d966      	bls.n	8011dc8 <__ieee754_asinf+0x1d8>
 8011cfa:	1c39      	adds	r1, r7, #0
 8011cfc:	9801      	ldr	r0, [sp, #4]
 8011cfe:	f7ee ff09 	bl	8000b14 <__aeabi_fdiv>
 8011d02:	1c29      	adds	r1, r5, #0
 8011d04:	f7ef f8ec 	bl	8000ee0 <__aeabi_fmul>
 8011d08:	1c29      	adds	r1, r5, #0
 8011d0a:	f7ee fd79 	bl	8000800 <__aeabi_fadd>
 8011d0e:	1c01      	adds	r1, r0, #0
 8011d10:	f7ee fd76 	bl	8000800 <__aeabi_fadd>
 8011d14:	4958      	ldr	r1, [pc, #352]	@ (8011e78 <__ieee754_asinf+0x288>)
 8011d16:	f7ee fd73 	bl	8000800 <__aeabi_fadd>
 8011d1a:	1c01      	adds	r1, r0, #0
 8011d1c:	4848      	ldr	r0, [pc, #288]	@ (8011e40 <__ieee754_asinf+0x250>)
 8011d1e:	f7ef fa1d 	bl	800115c <__aeabi_fsub>
 8011d22:	9b02      	ldr	r3, [sp, #8]
 8011d24:	1c04      	adds	r4, r0, #0
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	dd00      	ble.n	8011d2c <__ieee754_asinf+0x13c>
 8011d2a:	e781      	b.n	8011c30 <__ieee754_asinf+0x40>
 8011d2c:	2380      	movs	r3, #128	@ 0x80
 8011d2e:	061b      	lsls	r3, r3, #24
 8011d30:	18c4      	adds	r4, r0, r3
 8011d32:	e77d      	b.n	8011c30 <__ieee754_asinf+0x40>
 8011d34:	1c01      	adds	r1, r0, #0
 8011d36:	f7ef f8d3 	bl	8000ee0 <__aeabi_fmul>
 8011d3a:	4944      	ldr	r1, [pc, #272]	@ (8011e4c <__ieee754_asinf+0x25c>)
 8011d3c:	1c05      	adds	r5, r0, #0
 8011d3e:	f7ef f8cf 	bl	8000ee0 <__aeabi_fmul>
 8011d42:	4943      	ldr	r1, [pc, #268]	@ (8011e50 <__ieee754_asinf+0x260>)
 8011d44:	f7ee fd5c 	bl	8000800 <__aeabi_fadd>
 8011d48:	1c29      	adds	r1, r5, #0
 8011d4a:	f7ef f8c9 	bl	8000ee0 <__aeabi_fmul>
 8011d4e:	4941      	ldr	r1, [pc, #260]	@ (8011e54 <__ieee754_asinf+0x264>)
 8011d50:	f7ef fa04 	bl	800115c <__aeabi_fsub>
 8011d54:	1c29      	adds	r1, r5, #0
 8011d56:	f7ef f8c3 	bl	8000ee0 <__aeabi_fmul>
 8011d5a:	493f      	ldr	r1, [pc, #252]	@ (8011e58 <__ieee754_asinf+0x268>)
 8011d5c:	f7ee fd50 	bl	8000800 <__aeabi_fadd>
 8011d60:	1c29      	adds	r1, r5, #0
 8011d62:	f7ef f8bd 	bl	8000ee0 <__aeabi_fmul>
 8011d66:	493d      	ldr	r1, [pc, #244]	@ (8011e5c <__ieee754_asinf+0x26c>)
 8011d68:	f7ef f9f8 	bl	800115c <__aeabi_fsub>
 8011d6c:	1c29      	adds	r1, r5, #0
 8011d6e:	f7ef f8b7 	bl	8000ee0 <__aeabi_fmul>
 8011d72:	493b      	ldr	r1, [pc, #236]	@ (8011e60 <__ieee754_asinf+0x270>)
 8011d74:	f7ee fd44 	bl	8000800 <__aeabi_fadd>
 8011d78:	1c29      	adds	r1, r5, #0
 8011d7a:	f7ef f8b1 	bl	8000ee0 <__aeabi_fmul>
 8011d7e:	4939      	ldr	r1, [pc, #228]	@ (8011e64 <__ieee754_asinf+0x274>)
 8011d80:	1c06      	adds	r6, r0, #0
 8011d82:	1c28      	adds	r0, r5, #0
 8011d84:	f7ef f8ac 	bl	8000ee0 <__aeabi_fmul>
 8011d88:	4937      	ldr	r1, [pc, #220]	@ (8011e68 <__ieee754_asinf+0x278>)
 8011d8a:	f7ef f9e7 	bl	800115c <__aeabi_fsub>
 8011d8e:	1c29      	adds	r1, r5, #0
 8011d90:	f7ef f8a6 	bl	8000ee0 <__aeabi_fmul>
 8011d94:	4935      	ldr	r1, [pc, #212]	@ (8011e6c <__ieee754_asinf+0x27c>)
 8011d96:	f7ee fd33 	bl	8000800 <__aeabi_fadd>
 8011d9a:	1c29      	adds	r1, r5, #0
 8011d9c:	f7ef f8a0 	bl	8000ee0 <__aeabi_fmul>
 8011da0:	4933      	ldr	r1, [pc, #204]	@ (8011e70 <__ieee754_asinf+0x280>)
 8011da2:	f7ef f9db 	bl	800115c <__aeabi_fsub>
 8011da6:	1c29      	adds	r1, r5, #0
 8011da8:	f7ef f89a 	bl	8000ee0 <__aeabi_fmul>
 8011dac:	21fe      	movs	r1, #254	@ 0xfe
 8011dae:	0589      	lsls	r1, r1, #22
 8011db0:	f7ee fd26 	bl	8000800 <__aeabi_fadd>
 8011db4:	1c01      	adds	r1, r0, #0
 8011db6:	1c30      	adds	r0, r6, #0
 8011db8:	f7ee feac 	bl	8000b14 <__aeabi_fdiv>
 8011dbc:	1c21      	adds	r1, r4, #0
 8011dbe:	f7ef f88f 	bl	8000ee0 <__aeabi_fmul>
 8011dc2:	1c01      	adds	r1, r0, #0
 8011dc4:	1c20      	adds	r0, r4, #0
 8011dc6:	e727      	b.n	8011c18 <__ieee754_asinf+0x28>
 8011dc8:	1c01      	adds	r1, r0, #0
 8011dca:	0b06      	lsrs	r6, r0, #12
 8011dcc:	f7ee fd18 	bl	8000800 <__aeabi_fadd>
 8011dd0:	1c39      	adds	r1, r7, #0
 8011dd2:	9003      	str	r0, [sp, #12]
 8011dd4:	9801      	ldr	r0, [sp, #4]
 8011dd6:	f7ee fe9d 	bl	8000b14 <__aeabi_fdiv>
 8011dda:	1c01      	adds	r1, r0, #0
 8011ddc:	9803      	ldr	r0, [sp, #12]
 8011dde:	f7ef f87f 	bl	8000ee0 <__aeabi_fmul>
 8011de2:	0336      	lsls	r6, r6, #12
 8011de4:	1c07      	adds	r7, r0, #0
 8011de6:	1c31      	adds	r1, r6, #0
 8011de8:	1c30      	adds	r0, r6, #0
 8011dea:	f7ef f879 	bl	8000ee0 <__aeabi_fmul>
 8011dee:	1c01      	adds	r1, r0, #0
 8011df0:	1c20      	adds	r0, r4, #0
 8011df2:	f7ef f9b3 	bl	800115c <__aeabi_fsub>
 8011df6:	1c31      	adds	r1, r6, #0
 8011df8:	1c04      	adds	r4, r0, #0
 8011dfa:	1c28      	adds	r0, r5, #0
 8011dfc:	f7ee fd00 	bl	8000800 <__aeabi_fadd>
 8011e00:	1c01      	adds	r1, r0, #0
 8011e02:	1c20      	adds	r0, r4, #0
 8011e04:	f7ee fe86 	bl	8000b14 <__aeabi_fdiv>
 8011e08:	1c01      	adds	r1, r0, #0
 8011e0a:	f7ee fcf9 	bl	8000800 <__aeabi_fadd>
 8011e0e:	1c01      	adds	r1, r0, #0
 8011e10:	480c      	ldr	r0, [pc, #48]	@ (8011e44 <__ieee754_asinf+0x254>)
 8011e12:	f7ef f9a3 	bl	800115c <__aeabi_fsub>
 8011e16:	1c01      	adds	r1, r0, #0
 8011e18:	1c38      	adds	r0, r7, #0
 8011e1a:	f7ef f99f 	bl	800115c <__aeabi_fsub>
 8011e1e:	1c31      	adds	r1, r6, #0
 8011e20:	1c04      	adds	r4, r0, #0
 8011e22:	1c30      	adds	r0, r6, #0
 8011e24:	f7ee fcec 	bl	8000800 <__aeabi_fadd>
 8011e28:	1c01      	adds	r1, r0, #0
 8011e2a:	4814      	ldr	r0, [pc, #80]	@ (8011e7c <__ieee754_asinf+0x28c>)
 8011e2c:	f7ef f996 	bl	800115c <__aeabi_fsub>
 8011e30:	1c01      	adds	r1, r0, #0
 8011e32:	1c20      	adds	r0, r4, #0
 8011e34:	f7ef f992 	bl	800115c <__aeabi_fsub>
 8011e38:	1c01      	adds	r1, r0, #0
 8011e3a:	4810      	ldr	r0, [pc, #64]	@ (8011e7c <__ieee754_asinf+0x28c>)
 8011e3c:	e76f      	b.n	8011d1e <__ieee754_asinf+0x12e>
 8011e3e:	46c0      	nop			@ (mov r8, r8)
 8011e40:	3fc90fdb 	.word	0x3fc90fdb
 8011e44:	b33bbd2e 	.word	0xb33bbd2e
 8011e48:	7149f2ca 	.word	0x7149f2ca
 8011e4c:	3811ef08 	.word	0x3811ef08
 8011e50:	3a4f7f04 	.word	0x3a4f7f04
 8011e54:	3d241146 	.word	0x3d241146
 8011e58:	3e4e0aa8 	.word	0x3e4e0aa8
 8011e5c:	3ea6b090 	.word	0x3ea6b090
 8011e60:	3e2aaaab 	.word	0x3e2aaaab
 8011e64:	3d9dc62e 	.word	0x3d9dc62e
 8011e68:	3f303361 	.word	0x3f303361
 8011e6c:	4001572d 	.word	0x4001572d
 8011e70:	4019d139 	.word	0x4019d139
 8011e74:	3f799999 	.word	0x3f799999
 8011e78:	333bbd2e 	.word	0x333bbd2e
 8011e7c:	3f490fdb 	.word	0x3f490fdb

08011e80 <__cvt>:
 8011e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e82:	001f      	movs	r7, r3
 8011e84:	2300      	movs	r3, #0
 8011e86:	0016      	movs	r6, r2
 8011e88:	b08b      	sub	sp, #44	@ 0x2c
 8011e8a:	429f      	cmp	r7, r3
 8011e8c:	da04      	bge.n	8011e98 <__cvt+0x18>
 8011e8e:	2180      	movs	r1, #128	@ 0x80
 8011e90:	0609      	lsls	r1, r1, #24
 8011e92:	187b      	adds	r3, r7, r1
 8011e94:	001f      	movs	r7, r3
 8011e96:	232d      	movs	r3, #45	@ 0x2d
 8011e98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011e9a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011e9c:	7013      	strb	r3, [r2, #0]
 8011e9e:	2320      	movs	r3, #32
 8011ea0:	2203      	movs	r2, #3
 8011ea2:	439d      	bics	r5, r3
 8011ea4:	2d46      	cmp	r5, #70	@ 0x46
 8011ea6:	d007      	beq.n	8011eb8 <__cvt+0x38>
 8011ea8:	002b      	movs	r3, r5
 8011eaa:	3b45      	subs	r3, #69	@ 0x45
 8011eac:	4259      	negs	r1, r3
 8011eae:	414b      	adcs	r3, r1
 8011eb0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011eb2:	3a01      	subs	r2, #1
 8011eb4:	18cb      	adds	r3, r1, r3
 8011eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8011eb8:	ab09      	add	r3, sp, #36	@ 0x24
 8011eba:	9304      	str	r3, [sp, #16]
 8011ebc:	ab08      	add	r3, sp, #32
 8011ebe:	9303      	str	r3, [sp, #12]
 8011ec0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011ec2:	9200      	str	r2, [sp, #0]
 8011ec4:	9302      	str	r3, [sp, #8]
 8011ec6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ec8:	0032      	movs	r2, r6
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	003b      	movs	r3, r7
 8011ece:	f001 f96d 	bl	80131ac <_dtoa_r>
 8011ed2:	0004      	movs	r4, r0
 8011ed4:	2d47      	cmp	r5, #71	@ 0x47
 8011ed6:	d11b      	bne.n	8011f10 <__cvt+0x90>
 8011ed8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011eda:	07db      	lsls	r3, r3, #31
 8011edc:	d511      	bpl.n	8011f02 <__cvt+0x82>
 8011ede:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ee0:	18c3      	adds	r3, r0, r3
 8011ee2:	9307      	str	r3, [sp, #28]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	0030      	movs	r0, r6
 8011eea:	0039      	movs	r1, r7
 8011eec:	f7ee faae 	bl	800044c <__aeabi_dcmpeq>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d001      	beq.n	8011ef8 <__cvt+0x78>
 8011ef4:	9b07      	ldr	r3, [sp, #28]
 8011ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ef8:	2230      	movs	r2, #48	@ 0x30
 8011efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011efc:	9907      	ldr	r1, [sp, #28]
 8011efe:	428b      	cmp	r3, r1
 8011f00:	d320      	bcc.n	8011f44 <__cvt+0xc4>
 8011f02:	0020      	movs	r0, r4
 8011f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011f08:	1b1b      	subs	r3, r3, r4
 8011f0a:	6013      	str	r3, [r2, #0]
 8011f0c:	b00b      	add	sp, #44	@ 0x2c
 8011f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f12:	18c3      	adds	r3, r0, r3
 8011f14:	9307      	str	r3, [sp, #28]
 8011f16:	2d46      	cmp	r5, #70	@ 0x46
 8011f18:	d1e4      	bne.n	8011ee4 <__cvt+0x64>
 8011f1a:	7803      	ldrb	r3, [r0, #0]
 8011f1c:	2b30      	cmp	r3, #48	@ 0x30
 8011f1e:	d10c      	bne.n	8011f3a <__cvt+0xba>
 8011f20:	2200      	movs	r2, #0
 8011f22:	2300      	movs	r3, #0
 8011f24:	0030      	movs	r0, r6
 8011f26:	0039      	movs	r1, r7
 8011f28:	f7ee fa90 	bl	800044c <__aeabi_dcmpeq>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d104      	bne.n	8011f3a <__cvt+0xba>
 8011f30:	2301      	movs	r3, #1
 8011f32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011f34:	1a9b      	subs	r3, r3, r2
 8011f36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011f38:	6013      	str	r3, [r2, #0]
 8011f3a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f3c:	9a07      	ldr	r2, [sp, #28]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	18d3      	adds	r3, r2, r3
 8011f42:	e7ce      	b.n	8011ee2 <__cvt+0x62>
 8011f44:	1c59      	adds	r1, r3, #1
 8011f46:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f48:	701a      	strb	r2, [r3, #0]
 8011f4a:	e7d6      	b.n	8011efa <__cvt+0x7a>

08011f4c <__exponent>:
 8011f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f4e:	232b      	movs	r3, #43	@ 0x2b
 8011f50:	0005      	movs	r5, r0
 8011f52:	000c      	movs	r4, r1
 8011f54:	b085      	sub	sp, #20
 8011f56:	7002      	strb	r2, [r0, #0]
 8011f58:	2900      	cmp	r1, #0
 8011f5a:	da01      	bge.n	8011f60 <__exponent+0x14>
 8011f5c:	424c      	negs	r4, r1
 8011f5e:	3302      	adds	r3, #2
 8011f60:	706b      	strb	r3, [r5, #1]
 8011f62:	2c09      	cmp	r4, #9
 8011f64:	dd2c      	ble.n	8011fc0 <__exponent+0x74>
 8011f66:	ab02      	add	r3, sp, #8
 8011f68:	1dde      	adds	r6, r3, #7
 8011f6a:	0020      	movs	r0, r4
 8011f6c:	210a      	movs	r1, #10
 8011f6e:	f7ee fa57 	bl	8000420 <__aeabi_idivmod>
 8011f72:	0037      	movs	r7, r6
 8011f74:	3130      	adds	r1, #48	@ 0x30
 8011f76:	3e01      	subs	r6, #1
 8011f78:	0020      	movs	r0, r4
 8011f7a:	7031      	strb	r1, [r6, #0]
 8011f7c:	210a      	movs	r1, #10
 8011f7e:	9401      	str	r4, [sp, #4]
 8011f80:	f7ee f968 	bl	8000254 <__divsi3>
 8011f84:	9b01      	ldr	r3, [sp, #4]
 8011f86:	0004      	movs	r4, r0
 8011f88:	2b63      	cmp	r3, #99	@ 0x63
 8011f8a:	dcee      	bgt.n	8011f6a <__exponent+0x1e>
 8011f8c:	1eba      	subs	r2, r7, #2
 8011f8e:	1ca8      	adds	r0, r5, #2
 8011f90:	0001      	movs	r1, r0
 8011f92:	0013      	movs	r3, r2
 8011f94:	3430      	adds	r4, #48	@ 0x30
 8011f96:	7014      	strb	r4, [r2, #0]
 8011f98:	ac02      	add	r4, sp, #8
 8011f9a:	3407      	adds	r4, #7
 8011f9c:	429c      	cmp	r4, r3
 8011f9e:	d80a      	bhi.n	8011fb6 <__exponent+0x6a>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	42a2      	cmp	r2, r4
 8011fa4:	d803      	bhi.n	8011fae <__exponent+0x62>
 8011fa6:	3309      	adds	r3, #9
 8011fa8:	aa02      	add	r2, sp, #8
 8011faa:	189b      	adds	r3, r3, r2
 8011fac:	1bdb      	subs	r3, r3, r7
 8011fae:	18c0      	adds	r0, r0, r3
 8011fb0:	1b40      	subs	r0, r0, r5
 8011fb2:	b005      	add	sp, #20
 8011fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb6:	781c      	ldrb	r4, [r3, #0]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	700c      	strb	r4, [r1, #0]
 8011fbc:	3101      	adds	r1, #1
 8011fbe:	e7eb      	b.n	8011f98 <__exponent+0x4c>
 8011fc0:	2330      	movs	r3, #48	@ 0x30
 8011fc2:	18e4      	adds	r4, r4, r3
 8011fc4:	70ab      	strb	r3, [r5, #2]
 8011fc6:	1d28      	adds	r0, r5, #4
 8011fc8:	70ec      	strb	r4, [r5, #3]
 8011fca:	e7f1      	b.n	8011fb0 <__exponent+0x64>

08011fcc <_printf_float>:
 8011fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fce:	b097      	sub	sp, #92	@ 0x5c
 8011fd0:	000d      	movs	r5, r1
 8011fd2:	920a      	str	r2, [sp, #40]	@ 0x28
 8011fd4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8011fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8011fda:	f000 ff65 	bl	8012ea8 <_localeconv_r>
 8011fde:	6803      	ldr	r3, [r0, #0]
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	930d      	str	r3, [sp, #52]	@ 0x34
 8011fe4:	f7ee f890 	bl	8000108 <strlen>
 8011fe8:	2300      	movs	r3, #0
 8011fea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011fec:	9314      	str	r3, [sp, #80]	@ 0x50
 8011fee:	7e2b      	ldrb	r3, [r5, #24]
 8011ff0:	2207      	movs	r2, #7
 8011ff2:	930c      	str	r3, [sp, #48]	@ 0x30
 8011ff4:	682b      	ldr	r3, [r5, #0]
 8011ff6:	930e      	str	r3, [sp, #56]	@ 0x38
 8011ff8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011ffa:	6823      	ldr	r3, [r4, #0]
 8011ffc:	05c9      	lsls	r1, r1, #23
 8011ffe:	d545      	bpl.n	801208c <_printf_float+0xc0>
 8012000:	189b      	adds	r3, r3, r2
 8012002:	4393      	bics	r3, r2
 8012004:	001a      	movs	r2, r3
 8012006:	3208      	adds	r2, #8
 8012008:	6022      	str	r2, [r4, #0]
 801200a:	2201      	movs	r2, #1
 801200c:	681e      	ldr	r6, [r3, #0]
 801200e:	685f      	ldr	r7, [r3, #4]
 8012010:	007b      	lsls	r3, r7, #1
 8012012:	085b      	lsrs	r3, r3, #1
 8012014:	9311      	str	r3, [sp, #68]	@ 0x44
 8012016:	9610      	str	r6, [sp, #64]	@ 0x40
 8012018:	64ae      	str	r6, [r5, #72]	@ 0x48
 801201a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801201c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801201e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012020:	4ba7      	ldr	r3, [pc, #668]	@ (80122c0 <_printf_float+0x2f4>)
 8012022:	4252      	negs	r2, r2
 8012024:	f7f1 f90e 	bl	8003244 <__aeabi_dcmpun>
 8012028:	2800      	cmp	r0, #0
 801202a:	d131      	bne.n	8012090 <_printf_float+0xc4>
 801202c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801202e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012030:	2201      	movs	r2, #1
 8012032:	4ba3      	ldr	r3, [pc, #652]	@ (80122c0 <_printf_float+0x2f4>)
 8012034:	4252      	negs	r2, r2
 8012036:	f7ee fa19 	bl	800046c <__aeabi_dcmple>
 801203a:	2800      	cmp	r0, #0
 801203c:	d128      	bne.n	8012090 <_printf_float+0xc4>
 801203e:	2200      	movs	r2, #0
 8012040:	2300      	movs	r3, #0
 8012042:	0030      	movs	r0, r6
 8012044:	0039      	movs	r1, r7
 8012046:	f7ee fa07 	bl	8000458 <__aeabi_dcmplt>
 801204a:	2800      	cmp	r0, #0
 801204c:	d003      	beq.n	8012056 <_printf_float+0x8a>
 801204e:	002b      	movs	r3, r5
 8012050:	222d      	movs	r2, #45	@ 0x2d
 8012052:	3343      	adds	r3, #67	@ 0x43
 8012054:	701a      	strb	r2, [r3, #0]
 8012056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012058:	4f9a      	ldr	r7, [pc, #616]	@ (80122c4 <_printf_float+0x2f8>)
 801205a:	2b47      	cmp	r3, #71	@ 0x47
 801205c:	d900      	bls.n	8012060 <_printf_float+0x94>
 801205e:	4f9a      	ldr	r7, [pc, #616]	@ (80122c8 <_printf_float+0x2fc>)
 8012060:	2303      	movs	r3, #3
 8012062:	2400      	movs	r4, #0
 8012064:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012066:	612b      	str	r3, [r5, #16]
 8012068:	3301      	adds	r3, #1
 801206a:	439a      	bics	r2, r3
 801206c:	602a      	str	r2, [r5, #0]
 801206e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012070:	0029      	movs	r1, r5
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012078:	aa15      	add	r2, sp, #84	@ 0x54
 801207a:	f000 f9e5 	bl	8012448 <_printf_common>
 801207e:	3001      	adds	r0, #1
 8012080:	d000      	beq.n	8012084 <_printf_float+0xb8>
 8012082:	e09f      	b.n	80121c4 <_printf_float+0x1f8>
 8012084:	2001      	movs	r0, #1
 8012086:	4240      	negs	r0, r0
 8012088:	b017      	add	sp, #92	@ 0x5c
 801208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801208c:	3307      	adds	r3, #7
 801208e:	e7b8      	b.n	8012002 <_printf_float+0x36>
 8012090:	0032      	movs	r2, r6
 8012092:	003b      	movs	r3, r7
 8012094:	0030      	movs	r0, r6
 8012096:	0039      	movs	r1, r7
 8012098:	f7f1 f8d4 	bl	8003244 <__aeabi_dcmpun>
 801209c:	2800      	cmp	r0, #0
 801209e:	d00b      	beq.n	80120b8 <_printf_float+0xec>
 80120a0:	2f00      	cmp	r7, #0
 80120a2:	da03      	bge.n	80120ac <_printf_float+0xe0>
 80120a4:	002b      	movs	r3, r5
 80120a6:	222d      	movs	r2, #45	@ 0x2d
 80120a8:	3343      	adds	r3, #67	@ 0x43
 80120aa:	701a      	strb	r2, [r3, #0]
 80120ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120ae:	4f87      	ldr	r7, [pc, #540]	@ (80122cc <_printf_float+0x300>)
 80120b0:	2b47      	cmp	r3, #71	@ 0x47
 80120b2:	d9d5      	bls.n	8012060 <_printf_float+0x94>
 80120b4:	4f86      	ldr	r7, [pc, #536]	@ (80122d0 <_printf_float+0x304>)
 80120b6:	e7d3      	b.n	8012060 <_printf_float+0x94>
 80120b8:	2220      	movs	r2, #32
 80120ba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80120bc:	686b      	ldr	r3, [r5, #4]
 80120be:	4394      	bics	r4, r2
 80120c0:	1c5a      	adds	r2, r3, #1
 80120c2:	d146      	bne.n	8012152 <_printf_float+0x186>
 80120c4:	3307      	adds	r3, #7
 80120c6:	606b      	str	r3, [r5, #4]
 80120c8:	2380      	movs	r3, #128	@ 0x80
 80120ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120cc:	00db      	lsls	r3, r3, #3
 80120ce:	4313      	orrs	r3, r2
 80120d0:	2200      	movs	r2, #0
 80120d2:	602b      	str	r3, [r5, #0]
 80120d4:	9206      	str	r2, [sp, #24]
 80120d6:	aa14      	add	r2, sp, #80	@ 0x50
 80120d8:	9205      	str	r2, [sp, #20]
 80120da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80120dc:	a90a      	add	r1, sp, #40	@ 0x28
 80120de:	9204      	str	r2, [sp, #16]
 80120e0:	aa13      	add	r2, sp, #76	@ 0x4c
 80120e2:	9203      	str	r2, [sp, #12]
 80120e4:	2223      	movs	r2, #35	@ 0x23
 80120e6:	1852      	adds	r2, r2, r1
 80120e8:	9202      	str	r2, [sp, #8]
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	686b      	ldr	r3, [r5, #4]
 80120ee:	0032      	movs	r2, r6
 80120f0:	9300      	str	r3, [sp, #0]
 80120f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120f4:	003b      	movs	r3, r7
 80120f6:	f7ff fec3 	bl	8011e80 <__cvt>
 80120fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80120fc:	0007      	movs	r7, r0
 80120fe:	2c47      	cmp	r4, #71	@ 0x47
 8012100:	d12d      	bne.n	801215e <_printf_float+0x192>
 8012102:	1cd3      	adds	r3, r2, #3
 8012104:	db02      	blt.n	801210c <_printf_float+0x140>
 8012106:	686b      	ldr	r3, [r5, #4]
 8012108:	429a      	cmp	r2, r3
 801210a:	dd48      	ble.n	801219e <_printf_float+0x1d2>
 801210c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801210e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012110:	3b02      	subs	r3, #2
 8012112:	b2db      	uxtb	r3, r3
 8012114:	930c      	str	r3, [sp, #48]	@ 0x30
 8012116:	0028      	movs	r0, r5
 8012118:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801211a:	3901      	subs	r1, #1
 801211c:	3050      	adds	r0, #80	@ 0x50
 801211e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012120:	f7ff ff14 	bl	8011f4c <__exponent>
 8012124:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012126:	0004      	movs	r4, r0
 8012128:	1813      	adds	r3, r2, r0
 801212a:	612b      	str	r3, [r5, #16]
 801212c:	2a01      	cmp	r2, #1
 801212e:	dc02      	bgt.n	8012136 <_printf_float+0x16a>
 8012130:	682a      	ldr	r2, [r5, #0]
 8012132:	07d2      	lsls	r2, r2, #31
 8012134:	d501      	bpl.n	801213a <_printf_float+0x16e>
 8012136:	3301      	adds	r3, #1
 8012138:	612b      	str	r3, [r5, #16]
 801213a:	2323      	movs	r3, #35	@ 0x23
 801213c:	aa0a      	add	r2, sp, #40	@ 0x28
 801213e:	189b      	adds	r3, r3, r2
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d100      	bne.n	8012148 <_printf_float+0x17c>
 8012146:	e792      	b.n	801206e <_printf_float+0xa2>
 8012148:	002b      	movs	r3, r5
 801214a:	222d      	movs	r2, #45	@ 0x2d
 801214c:	3343      	adds	r3, #67	@ 0x43
 801214e:	701a      	strb	r2, [r3, #0]
 8012150:	e78d      	b.n	801206e <_printf_float+0xa2>
 8012152:	2c47      	cmp	r4, #71	@ 0x47
 8012154:	d1b8      	bne.n	80120c8 <_printf_float+0xfc>
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1b6      	bne.n	80120c8 <_printf_float+0xfc>
 801215a:	3301      	adds	r3, #1
 801215c:	e7b3      	b.n	80120c6 <_printf_float+0xfa>
 801215e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012160:	0011      	movs	r1, r2
 8012162:	2b65      	cmp	r3, #101	@ 0x65
 8012164:	d9d7      	bls.n	8012116 <_printf_float+0x14a>
 8012166:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012168:	2b66      	cmp	r3, #102	@ 0x66
 801216a:	d11a      	bne.n	80121a2 <_printf_float+0x1d6>
 801216c:	686b      	ldr	r3, [r5, #4]
 801216e:	2a00      	cmp	r2, #0
 8012170:	dd09      	ble.n	8012186 <_printf_float+0x1ba>
 8012172:	612a      	str	r2, [r5, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d102      	bne.n	801217e <_printf_float+0x1b2>
 8012178:	6829      	ldr	r1, [r5, #0]
 801217a:	07c9      	lsls	r1, r1, #31
 801217c:	d50b      	bpl.n	8012196 <_printf_float+0x1ca>
 801217e:	3301      	adds	r3, #1
 8012180:	189b      	adds	r3, r3, r2
 8012182:	612b      	str	r3, [r5, #16]
 8012184:	e007      	b.n	8012196 <_printf_float+0x1ca>
 8012186:	2b00      	cmp	r3, #0
 8012188:	d103      	bne.n	8012192 <_printf_float+0x1c6>
 801218a:	2201      	movs	r2, #1
 801218c:	6829      	ldr	r1, [r5, #0]
 801218e:	4211      	tst	r1, r2
 8012190:	d000      	beq.n	8012194 <_printf_float+0x1c8>
 8012192:	1c9a      	adds	r2, r3, #2
 8012194:	612a      	str	r2, [r5, #16]
 8012196:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012198:	2400      	movs	r4, #0
 801219a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801219c:	e7cd      	b.n	801213a <_printf_float+0x16e>
 801219e:	2367      	movs	r3, #103	@ 0x67
 80121a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80121a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80121a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80121a6:	4299      	cmp	r1, r3
 80121a8:	db06      	blt.n	80121b8 <_printf_float+0x1ec>
 80121aa:	682b      	ldr	r3, [r5, #0]
 80121ac:	6129      	str	r1, [r5, #16]
 80121ae:	07db      	lsls	r3, r3, #31
 80121b0:	d5f1      	bpl.n	8012196 <_printf_float+0x1ca>
 80121b2:	3101      	adds	r1, #1
 80121b4:	6129      	str	r1, [r5, #16]
 80121b6:	e7ee      	b.n	8012196 <_printf_float+0x1ca>
 80121b8:	2201      	movs	r2, #1
 80121ba:	2900      	cmp	r1, #0
 80121bc:	dce0      	bgt.n	8012180 <_printf_float+0x1b4>
 80121be:	1892      	adds	r2, r2, r2
 80121c0:	1a52      	subs	r2, r2, r1
 80121c2:	e7dd      	b.n	8012180 <_printf_float+0x1b4>
 80121c4:	682a      	ldr	r2, [r5, #0]
 80121c6:	0553      	lsls	r3, r2, #21
 80121c8:	d408      	bmi.n	80121dc <_printf_float+0x210>
 80121ca:	692b      	ldr	r3, [r5, #16]
 80121cc:	003a      	movs	r2, r7
 80121ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80121d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80121d4:	47a0      	blx	r4
 80121d6:	3001      	adds	r0, #1
 80121d8:	d129      	bne.n	801222e <_printf_float+0x262>
 80121da:	e753      	b.n	8012084 <_printf_float+0xb8>
 80121dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121de:	2b65      	cmp	r3, #101	@ 0x65
 80121e0:	d800      	bhi.n	80121e4 <_printf_float+0x218>
 80121e2:	e0da      	b.n	801239a <_printf_float+0x3ce>
 80121e4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80121e6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80121e8:	2200      	movs	r2, #0
 80121ea:	2300      	movs	r3, #0
 80121ec:	f7ee f92e 	bl	800044c <__aeabi_dcmpeq>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	d033      	beq.n	801225c <_printf_float+0x290>
 80121f4:	2301      	movs	r3, #1
 80121f6:	4a37      	ldr	r2, [pc, #220]	@ (80122d4 <_printf_float+0x308>)
 80121f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80121fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80121fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80121fe:	47a0      	blx	r4
 8012200:	3001      	adds	r0, #1
 8012202:	d100      	bne.n	8012206 <_printf_float+0x23a>
 8012204:	e73e      	b.n	8012084 <_printf_float+0xb8>
 8012206:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012208:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801220a:	42b3      	cmp	r3, r6
 801220c:	db02      	blt.n	8012214 <_printf_float+0x248>
 801220e:	682b      	ldr	r3, [r5, #0]
 8012210:	07db      	lsls	r3, r3, #31
 8012212:	d50c      	bpl.n	801222e <_printf_float+0x262>
 8012214:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012216:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801221a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801221c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801221e:	47a0      	blx	r4
 8012220:	2400      	movs	r4, #0
 8012222:	3001      	adds	r0, #1
 8012224:	d100      	bne.n	8012228 <_printf_float+0x25c>
 8012226:	e72d      	b.n	8012084 <_printf_float+0xb8>
 8012228:	1e73      	subs	r3, r6, #1
 801222a:	42a3      	cmp	r3, r4
 801222c:	dc0a      	bgt.n	8012244 <_printf_float+0x278>
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	079b      	lsls	r3, r3, #30
 8012232:	d500      	bpl.n	8012236 <_printf_float+0x26a>
 8012234:	e105      	b.n	8012442 <_printf_float+0x476>
 8012236:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012238:	68e8      	ldr	r0, [r5, #12]
 801223a:	4298      	cmp	r0, r3
 801223c:	db00      	blt.n	8012240 <_printf_float+0x274>
 801223e:	e723      	b.n	8012088 <_printf_float+0xbc>
 8012240:	0018      	movs	r0, r3
 8012242:	e721      	b.n	8012088 <_printf_float+0xbc>
 8012244:	002a      	movs	r2, r5
 8012246:	2301      	movs	r3, #1
 8012248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801224a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801224c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801224e:	321a      	adds	r2, #26
 8012250:	47b8      	blx	r7
 8012252:	3001      	adds	r0, #1
 8012254:	d100      	bne.n	8012258 <_printf_float+0x28c>
 8012256:	e715      	b.n	8012084 <_printf_float+0xb8>
 8012258:	3401      	adds	r4, #1
 801225a:	e7e5      	b.n	8012228 <_printf_float+0x25c>
 801225c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801225e:	2b00      	cmp	r3, #0
 8012260:	dc3a      	bgt.n	80122d8 <_printf_float+0x30c>
 8012262:	2301      	movs	r3, #1
 8012264:	4a1b      	ldr	r2, [pc, #108]	@ (80122d4 <_printf_float+0x308>)
 8012266:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012268:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801226a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801226c:	47a0      	blx	r4
 801226e:	3001      	adds	r0, #1
 8012270:	d100      	bne.n	8012274 <_printf_float+0x2a8>
 8012272:	e707      	b.n	8012084 <_printf_float+0xb8>
 8012274:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8012276:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012278:	4333      	orrs	r3, r6
 801227a:	d102      	bne.n	8012282 <_printf_float+0x2b6>
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	07db      	lsls	r3, r3, #31
 8012280:	d5d5      	bpl.n	801222e <_printf_float+0x262>
 8012282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012284:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012286:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012288:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801228a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801228c:	47a0      	blx	r4
 801228e:	2300      	movs	r3, #0
 8012290:	3001      	adds	r0, #1
 8012292:	d100      	bne.n	8012296 <_printf_float+0x2ca>
 8012294:	e6f6      	b.n	8012084 <_printf_float+0xb8>
 8012296:	930c      	str	r3, [sp, #48]	@ 0x30
 8012298:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801229a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801229c:	425b      	negs	r3, r3
 801229e:	4293      	cmp	r3, r2
 80122a0:	dc01      	bgt.n	80122a6 <_printf_float+0x2da>
 80122a2:	0033      	movs	r3, r6
 80122a4:	e792      	b.n	80121cc <_printf_float+0x200>
 80122a6:	002a      	movs	r2, r5
 80122a8:	2301      	movs	r3, #1
 80122aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80122ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80122b0:	321a      	adds	r2, #26
 80122b2:	47a0      	blx	r4
 80122b4:	3001      	adds	r0, #1
 80122b6:	d100      	bne.n	80122ba <_printf_float+0x2ee>
 80122b8:	e6e4      	b.n	8012084 <_printf_float+0xb8>
 80122ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122bc:	3301      	adds	r3, #1
 80122be:	e7ea      	b.n	8012296 <_printf_float+0x2ca>
 80122c0:	7fefffff 	.word	0x7fefffff
 80122c4:	08017310 	.word	0x08017310
 80122c8:	08017314 	.word	0x08017314
 80122cc:	08017318 	.word	0x08017318
 80122d0:	0801731c 	.word	0x0801731c
 80122d4:	08017320 	.word	0x08017320
 80122d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80122da:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80122dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80122de:	429e      	cmp	r6, r3
 80122e0:	dd00      	ble.n	80122e4 <_printf_float+0x318>
 80122e2:	001e      	movs	r6, r3
 80122e4:	2e00      	cmp	r6, #0
 80122e6:	dc31      	bgt.n	801234c <_printf_float+0x380>
 80122e8:	43f3      	mvns	r3, r6
 80122ea:	2400      	movs	r4, #0
 80122ec:	17db      	asrs	r3, r3, #31
 80122ee:	4033      	ands	r3, r6
 80122f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80122f2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80122f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122f6:	1af3      	subs	r3, r6, r3
 80122f8:	42a3      	cmp	r3, r4
 80122fa:	dc30      	bgt.n	801235e <_printf_float+0x392>
 80122fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012300:	429a      	cmp	r2, r3
 8012302:	dc38      	bgt.n	8012376 <_printf_float+0x3aa>
 8012304:	682b      	ldr	r3, [r5, #0]
 8012306:	07db      	lsls	r3, r3, #31
 8012308:	d435      	bmi.n	8012376 <_printf_float+0x3aa>
 801230a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801230c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801230e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012310:	1b9b      	subs	r3, r3, r6
 8012312:	1b14      	subs	r4, r2, r4
 8012314:	429c      	cmp	r4, r3
 8012316:	dd00      	ble.n	801231a <_printf_float+0x34e>
 8012318:	001c      	movs	r4, r3
 801231a:	2c00      	cmp	r4, #0
 801231c:	dc34      	bgt.n	8012388 <_printf_float+0x3bc>
 801231e:	43e3      	mvns	r3, r4
 8012320:	2600      	movs	r6, #0
 8012322:	17db      	asrs	r3, r3, #31
 8012324:	401c      	ands	r4, r3
 8012326:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	1b1b      	subs	r3, r3, r4
 801232e:	42b3      	cmp	r3, r6
 8012330:	dc00      	bgt.n	8012334 <_printf_float+0x368>
 8012332:	e77c      	b.n	801222e <_printf_float+0x262>
 8012334:	002a      	movs	r2, r5
 8012336:	2301      	movs	r3, #1
 8012338:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801233a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801233c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801233e:	321a      	adds	r2, #26
 8012340:	47b8      	blx	r7
 8012342:	3001      	adds	r0, #1
 8012344:	d100      	bne.n	8012348 <_printf_float+0x37c>
 8012346:	e69d      	b.n	8012084 <_printf_float+0xb8>
 8012348:	3601      	adds	r6, #1
 801234a:	e7ec      	b.n	8012326 <_printf_float+0x35a>
 801234c:	0033      	movs	r3, r6
 801234e:	003a      	movs	r2, r7
 8012350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012354:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012356:	47a0      	blx	r4
 8012358:	3001      	adds	r0, #1
 801235a:	d1c5      	bne.n	80122e8 <_printf_float+0x31c>
 801235c:	e692      	b.n	8012084 <_printf_float+0xb8>
 801235e:	002a      	movs	r2, r5
 8012360:	2301      	movs	r3, #1
 8012362:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012364:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012366:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012368:	321a      	adds	r2, #26
 801236a:	47b0      	blx	r6
 801236c:	3001      	adds	r0, #1
 801236e:	d100      	bne.n	8012372 <_printf_float+0x3a6>
 8012370:	e688      	b.n	8012084 <_printf_float+0xb8>
 8012372:	3401      	adds	r4, #1
 8012374:	e7bd      	b.n	80122f2 <_printf_float+0x326>
 8012376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012378:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801237a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801237c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801237e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8012380:	47a0      	blx	r4
 8012382:	3001      	adds	r0, #1
 8012384:	d1c1      	bne.n	801230a <_printf_float+0x33e>
 8012386:	e67d      	b.n	8012084 <_printf_float+0xb8>
 8012388:	19ba      	adds	r2, r7, r6
 801238a:	0023      	movs	r3, r4
 801238c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801238e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012390:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012392:	47b0      	blx	r6
 8012394:	3001      	adds	r0, #1
 8012396:	d1c2      	bne.n	801231e <_printf_float+0x352>
 8012398:	e674      	b.n	8012084 <_printf_float+0xb8>
 801239a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801239c:	930c      	str	r3, [sp, #48]	@ 0x30
 801239e:	2b01      	cmp	r3, #1
 80123a0:	dc02      	bgt.n	80123a8 <_printf_float+0x3dc>
 80123a2:	2301      	movs	r3, #1
 80123a4:	421a      	tst	r2, r3
 80123a6:	d039      	beq.n	801241c <_printf_float+0x450>
 80123a8:	2301      	movs	r3, #1
 80123aa:	003a      	movs	r2, r7
 80123ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80123b2:	47b0      	blx	r6
 80123b4:	3001      	adds	r0, #1
 80123b6:	d100      	bne.n	80123ba <_printf_float+0x3ee>
 80123b8:	e664      	b.n	8012084 <_printf_float+0xb8>
 80123ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80123c4:	47b0      	blx	r6
 80123c6:	3001      	adds	r0, #1
 80123c8:	d100      	bne.n	80123cc <_printf_float+0x400>
 80123ca:	e65b      	b.n	8012084 <_printf_float+0xb8>
 80123cc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80123ce:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80123d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123d2:	2200      	movs	r2, #0
 80123d4:	3b01      	subs	r3, #1
 80123d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80123d8:	2300      	movs	r3, #0
 80123da:	f7ee f837 	bl	800044c <__aeabi_dcmpeq>
 80123de:	2800      	cmp	r0, #0
 80123e0:	d11a      	bne.n	8012418 <_printf_float+0x44c>
 80123e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123e4:	1c7a      	adds	r2, r7, #1
 80123e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123ea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80123ec:	47b0      	blx	r6
 80123ee:	3001      	adds	r0, #1
 80123f0:	d10e      	bne.n	8012410 <_printf_float+0x444>
 80123f2:	e647      	b.n	8012084 <_printf_float+0xb8>
 80123f4:	002a      	movs	r2, r5
 80123f6:	2301      	movs	r3, #1
 80123f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80123fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80123fe:	321a      	adds	r2, #26
 8012400:	47b8      	blx	r7
 8012402:	3001      	adds	r0, #1
 8012404:	d100      	bne.n	8012408 <_printf_float+0x43c>
 8012406:	e63d      	b.n	8012084 <_printf_float+0xb8>
 8012408:	3601      	adds	r6, #1
 801240a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801240c:	429e      	cmp	r6, r3
 801240e:	dbf1      	blt.n	80123f4 <_printf_float+0x428>
 8012410:	002a      	movs	r2, r5
 8012412:	0023      	movs	r3, r4
 8012414:	3250      	adds	r2, #80	@ 0x50
 8012416:	e6da      	b.n	80121ce <_printf_float+0x202>
 8012418:	2600      	movs	r6, #0
 801241a:	e7f6      	b.n	801240a <_printf_float+0x43e>
 801241c:	003a      	movs	r2, r7
 801241e:	e7e2      	b.n	80123e6 <_printf_float+0x41a>
 8012420:	002a      	movs	r2, r5
 8012422:	2301      	movs	r3, #1
 8012424:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012428:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801242a:	3219      	adds	r2, #25
 801242c:	47b0      	blx	r6
 801242e:	3001      	adds	r0, #1
 8012430:	d100      	bne.n	8012434 <_printf_float+0x468>
 8012432:	e627      	b.n	8012084 <_printf_float+0xb8>
 8012434:	3401      	adds	r4, #1
 8012436:	68eb      	ldr	r3, [r5, #12]
 8012438:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801243a:	1a9b      	subs	r3, r3, r2
 801243c:	42a3      	cmp	r3, r4
 801243e:	dcef      	bgt.n	8012420 <_printf_float+0x454>
 8012440:	e6f9      	b.n	8012236 <_printf_float+0x26a>
 8012442:	2400      	movs	r4, #0
 8012444:	e7f7      	b.n	8012436 <_printf_float+0x46a>
 8012446:	46c0      	nop			@ (mov r8, r8)

08012448 <_printf_common>:
 8012448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801244a:	0016      	movs	r6, r2
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	688a      	ldr	r2, [r1, #8]
 8012450:	690b      	ldr	r3, [r1, #16]
 8012452:	000c      	movs	r4, r1
 8012454:	9000      	str	r0, [sp, #0]
 8012456:	4293      	cmp	r3, r2
 8012458:	da00      	bge.n	801245c <_printf_common+0x14>
 801245a:	0013      	movs	r3, r2
 801245c:	0022      	movs	r2, r4
 801245e:	6033      	str	r3, [r6, #0]
 8012460:	3243      	adds	r2, #67	@ 0x43
 8012462:	7812      	ldrb	r2, [r2, #0]
 8012464:	2a00      	cmp	r2, #0
 8012466:	d001      	beq.n	801246c <_printf_common+0x24>
 8012468:	3301      	adds	r3, #1
 801246a:	6033      	str	r3, [r6, #0]
 801246c:	6823      	ldr	r3, [r4, #0]
 801246e:	069b      	lsls	r3, r3, #26
 8012470:	d502      	bpl.n	8012478 <_printf_common+0x30>
 8012472:	6833      	ldr	r3, [r6, #0]
 8012474:	3302      	adds	r3, #2
 8012476:	6033      	str	r3, [r6, #0]
 8012478:	6822      	ldr	r2, [r4, #0]
 801247a:	2306      	movs	r3, #6
 801247c:	0015      	movs	r5, r2
 801247e:	401d      	ands	r5, r3
 8012480:	421a      	tst	r2, r3
 8012482:	d027      	beq.n	80124d4 <_printf_common+0x8c>
 8012484:	0023      	movs	r3, r4
 8012486:	3343      	adds	r3, #67	@ 0x43
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	1e5a      	subs	r2, r3, #1
 801248c:	4193      	sbcs	r3, r2
 801248e:	6822      	ldr	r2, [r4, #0]
 8012490:	0692      	lsls	r2, r2, #26
 8012492:	d430      	bmi.n	80124f6 <_printf_common+0xae>
 8012494:	0022      	movs	r2, r4
 8012496:	9901      	ldr	r1, [sp, #4]
 8012498:	9800      	ldr	r0, [sp, #0]
 801249a:	9d08      	ldr	r5, [sp, #32]
 801249c:	3243      	adds	r2, #67	@ 0x43
 801249e:	47a8      	blx	r5
 80124a0:	3001      	adds	r0, #1
 80124a2:	d025      	beq.n	80124f0 <_printf_common+0xa8>
 80124a4:	2206      	movs	r2, #6
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	2500      	movs	r5, #0
 80124aa:	4013      	ands	r3, r2
 80124ac:	2b04      	cmp	r3, #4
 80124ae:	d105      	bne.n	80124bc <_printf_common+0x74>
 80124b0:	6833      	ldr	r3, [r6, #0]
 80124b2:	68e5      	ldr	r5, [r4, #12]
 80124b4:	1aed      	subs	r5, r5, r3
 80124b6:	43eb      	mvns	r3, r5
 80124b8:	17db      	asrs	r3, r3, #31
 80124ba:	401d      	ands	r5, r3
 80124bc:	68a3      	ldr	r3, [r4, #8]
 80124be:	6922      	ldr	r2, [r4, #16]
 80124c0:	4293      	cmp	r3, r2
 80124c2:	dd01      	ble.n	80124c8 <_printf_common+0x80>
 80124c4:	1a9b      	subs	r3, r3, r2
 80124c6:	18ed      	adds	r5, r5, r3
 80124c8:	2600      	movs	r6, #0
 80124ca:	42b5      	cmp	r5, r6
 80124cc:	d120      	bne.n	8012510 <_printf_common+0xc8>
 80124ce:	2000      	movs	r0, #0
 80124d0:	e010      	b.n	80124f4 <_printf_common+0xac>
 80124d2:	3501      	adds	r5, #1
 80124d4:	68e3      	ldr	r3, [r4, #12]
 80124d6:	6832      	ldr	r2, [r6, #0]
 80124d8:	1a9b      	subs	r3, r3, r2
 80124da:	42ab      	cmp	r3, r5
 80124dc:	ddd2      	ble.n	8012484 <_printf_common+0x3c>
 80124de:	0022      	movs	r2, r4
 80124e0:	2301      	movs	r3, #1
 80124e2:	9901      	ldr	r1, [sp, #4]
 80124e4:	9800      	ldr	r0, [sp, #0]
 80124e6:	9f08      	ldr	r7, [sp, #32]
 80124e8:	3219      	adds	r2, #25
 80124ea:	47b8      	blx	r7
 80124ec:	3001      	adds	r0, #1
 80124ee:	d1f0      	bne.n	80124d2 <_printf_common+0x8a>
 80124f0:	2001      	movs	r0, #1
 80124f2:	4240      	negs	r0, r0
 80124f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80124f6:	2030      	movs	r0, #48	@ 0x30
 80124f8:	18e1      	adds	r1, r4, r3
 80124fa:	3143      	adds	r1, #67	@ 0x43
 80124fc:	7008      	strb	r0, [r1, #0]
 80124fe:	0021      	movs	r1, r4
 8012500:	1c5a      	adds	r2, r3, #1
 8012502:	3145      	adds	r1, #69	@ 0x45
 8012504:	7809      	ldrb	r1, [r1, #0]
 8012506:	18a2      	adds	r2, r4, r2
 8012508:	3243      	adds	r2, #67	@ 0x43
 801250a:	3302      	adds	r3, #2
 801250c:	7011      	strb	r1, [r2, #0]
 801250e:	e7c1      	b.n	8012494 <_printf_common+0x4c>
 8012510:	0022      	movs	r2, r4
 8012512:	2301      	movs	r3, #1
 8012514:	9901      	ldr	r1, [sp, #4]
 8012516:	9800      	ldr	r0, [sp, #0]
 8012518:	9f08      	ldr	r7, [sp, #32]
 801251a:	321a      	adds	r2, #26
 801251c:	47b8      	blx	r7
 801251e:	3001      	adds	r0, #1
 8012520:	d0e6      	beq.n	80124f0 <_printf_common+0xa8>
 8012522:	3601      	adds	r6, #1
 8012524:	e7d1      	b.n	80124ca <_printf_common+0x82>
	...

08012528 <_printf_i>:
 8012528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801252a:	b08b      	sub	sp, #44	@ 0x2c
 801252c:	9206      	str	r2, [sp, #24]
 801252e:	000a      	movs	r2, r1
 8012530:	3243      	adds	r2, #67	@ 0x43
 8012532:	9307      	str	r3, [sp, #28]
 8012534:	9005      	str	r0, [sp, #20]
 8012536:	9203      	str	r2, [sp, #12]
 8012538:	7e0a      	ldrb	r2, [r1, #24]
 801253a:	000c      	movs	r4, r1
 801253c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801253e:	2a78      	cmp	r2, #120	@ 0x78
 8012540:	d809      	bhi.n	8012556 <_printf_i+0x2e>
 8012542:	2a62      	cmp	r2, #98	@ 0x62
 8012544:	d80b      	bhi.n	801255e <_printf_i+0x36>
 8012546:	2a00      	cmp	r2, #0
 8012548:	d100      	bne.n	801254c <_printf_i+0x24>
 801254a:	e0bc      	b.n	80126c6 <_printf_i+0x19e>
 801254c:	497b      	ldr	r1, [pc, #492]	@ (801273c <_printf_i+0x214>)
 801254e:	9104      	str	r1, [sp, #16]
 8012550:	2a58      	cmp	r2, #88	@ 0x58
 8012552:	d100      	bne.n	8012556 <_printf_i+0x2e>
 8012554:	e090      	b.n	8012678 <_printf_i+0x150>
 8012556:	0025      	movs	r5, r4
 8012558:	3542      	adds	r5, #66	@ 0x42
 801255a:	702a      	strb	r2, [r5, #0]
 801255c:	e022      	b.n	80125a4 <_printf_i+0x7c>
 801255e:	0010      	movs	r0, r2
 8012560:	3863      	subs	r0, #99	@ 0x63
 8012562:	2815      	cmp	r0, #21
 8012564:	d8f7      	bhi.n	8012556 <_printf_i+0x2e>
 8012566:	f7ed fde1 	bl	800012c <__gnu_thumb1_case_shi>
 801256a:	0016      	.short	0x0016
 801256c:	fff6001f 	.word	0xfff6001f
 8012570:	fff6fff6 	.word	0xfff6fff6
 8012574:	001ffff6 	.word	0x001ffff6
 8012578:	fff6fff6 	.word	0xfff6fff6
 801257c:	fff6fff6 	.word	0xfff6fff6
 8012580:	003600a1 	.word	0x003600a1
 8012584:	fff60080 	.word	0xfff60080
 8012588:	00b2fff6 	.word	0x00b2fff6
 801258c:	0036fff6 	.word	0x0036fff6
 8012590:	fff6fff6 	.word	0xfff6fff6
 8012594:	0084      	.short	0x0084
 8012596:	0025      	movs	r5, r4
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	3542      	adds	r5, #66	@ 0x42
 801259c:	1d11      	adds	r1, r2, #4
 801259e:	6019      	str	r1, [r3, #0]
 80125a0:	6813      	ldr	r3, [r2, #0]
 80125a2:	702b      	strb	r3, [r5, #0]
 80125a4:	2301      	movs	r3, #1
 80125a6:	e0a0      	b.n	80126ea <_printf_i+0x1c2>
 80125a8:	6818      	ldr	r0, [r3, #0]
 80125aa:	6809      	ldr	r1, [r1, #0]
 80125ac:	1d02      	adds	r2, r0, #4
 80125ae:	060d      	lsls	r5, r1, #24
 80125b0:	d50b      	bpl.n	80125ca <_printf_i+0xa2>
 80125b2:	6806      	ldr	r6, [r0, #0]
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	2e00      	cmp	r6, #0
 80125b8:	da03      	bge.n	80125c2 <_printf_i+0x9a>
 80125ba:	232d      	movs	r3, #45	@ 0x2d
 80125bc:	9a03      	ldr	r2, [sp, #12]
 80125be:	4276      	negs	r6, r6
 80125c0:	7013      	strb	r3, [r2, #0]
 80125c2:	4b5e      	ldr	r3, [pc, #376]	@ (801273c <_printf_i+0x214>)
 80125c4:	270a      	movs	r7, #10
 80125c6:	9304      	str	r3, [sp, #16]
 80125c8:	e018      	b.n	80125fc <_printf_i+0xd4>
 80125ca:	6806      	ldr	r6, [r0, #0]
 80125cc:	601a      	str	r2, [r3, #0]
 80125ce:	0649      	lsls	r1, r1, #25
 80125d0:	d5f1      	bpl.n	80125b6 <_printf_i+0x8e>
 80125d2:	b236      	sxth	r6, r6
 80125d4:	e7ef      	b.n	80125b6 <_printf_i+0x8e>
 80125d6:	6808      	ldr	r0, [r1, #0]
 80125d8:	6819      	ldr	r1, [r3, #0]
 80125da:	c940      	ldmia	r1!, {r6}
 80125dc:	0605      	lsls	r5, r0, #24
 80125de:	d402      	bmi.n	80125e6 <_printf_i+0xbe>
 80125e0:	0640      	lsls	r0, r0, #25
 80125e2:	d500      	bpl.n	80125e6 <_printf_i+0xbe>
 80125e4:	b2b6      	uxth	r6, r6
 80125e6:	6019      	str	r1, [r3, #0]
 80125e8:	4b54      	ldr	r3, [pc, #336]	@ (801273c <_printf_i+0x214>)
 80125ea:	270a      	movs	r7, #10
 80125ec:	9304      	str	r3, [sp, #16]
 80125ee:	2a6f      	cmp	r2, #111	@ 0x6f
 80125f0:	d100      	bne.n	80125f4 <_printf_i+0xcc>
 80125f2:	3f02      	subs	r7, #2
 80125f4:	0023      	movs	r3, r4
 80125f6:	2200      	movs	r2, #0
 80125f8:	3343      	adds	r3, #67	@ 0x43
 80125fa:	701a      	strb	r2, [r3, #0]
 80125fc:	6863      	ldr	r3, [r4, #4]
 80125fe:	60a3      	str	r3, [r4, #8]
 8012600:	2b00      	cmp	r3, #0
 8012602:	db03      	blt.n	801260c <_printf_i+0xe4>
 8012604:	2104      	movs	r1, #4
 8012606:	6822      	ldr	r2, [r4, #0]
 8012608:	438a      	bics	r2, r1
 801260a:	6022      	str	r2, [r4, #0]
 801260c:	2e00      	cmp	r6, #0
 801260e:	d102      	bne.n	8012616 <_printf_i+0xee>
 8012610:	9d03      	ldr	r5, [sp, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d00c      	beq.n	8012630 <_printf_i+0x108>
 8012616:	9d03      	ldr	r5, [sp, #12]
 8012618:	0030      	movs	r0, r6
 801261a:	0039      	movs	r1, r7
 801261c:	f7ed fe16 	bl	800024c <__aeabi_uidivmod>
 8012620:	9b04      	ldr	r3, [sp, #16]
 8012622:	3d01      	subs	r5, #1
 8012624:	5c5b      	ldrb	r3, [r3, r1]
 8012626:	702b      	strb	r3, [r5, #0]
 8012628:	0033      	movs	r3, r6
 801262a:	0006      	movs	r6, r0
 801262c:	429f      	cmp	r7, r3
 801262e:	d9f3      	bls.n	8012618 <_printf_i+0xf0>
 8012630:	2f08      	cmp	r7, #8
 8012632:	d109      	bne.n	8012648 <_printf_i+0x120>
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	07db      	lsls	r3, r3, #31
 8012638:	d506      	bpl.n	8012648 <_printf_i+0x120>
 801263a:	6862      	ldr	r2, [r4, #4]
 801263c:	6923      	ldr	r3, [r4, #16]
 801263e:	429a      	cmp	r2, r3
 8012640:	dc02      	bgt.n	8012648 <_printf_i+0x120>
 8012642:	2330      	movs	r3, #48	@ 0x30
 8012644:	3d01      	subs	r5, #1
 8012646:	702b      	strb	r3, [r5, #0]
 8012648:	9b03      	ldr	r3, [sp, #12]
 801264a:	1b5b      	subs	r3, r3, r5
 801264c:	6123      	str	r3, [r4, #16]
 801264e:	9b07      	ldr	r3, [sp, #28]
 8012650:	0021      	movs	r1, r4
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	9805      	ldr	r0, [sp, #20]
 8012656:	9b06      	ldr	r3, [sp, #24]
 8012658:	aa09      	add	r2, sp, #36	@ 0x24
 801265a:	f7ff fef5 	bl	8012448 <_printf_common>
 801265e:	3001      	adds	r0, #1
 8012660:	d148      	bne.n	80126f4 <_printf_i+0x1cc>
 8012662:	2001      	movs	r0, #1
 8012664:	4240      	negs	r0, r0
 8012666:	b00b      	add	sp, #44	@ 0x2c
 8012668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801266a:	2220      	movs	r2, #32
 801266c:	6809      	ldr	r1, [r1, #0]
 801266e:	430a      	orrs	r2, r1
 8012670:	6022      	str	r2, [r4, #0]
 8012672:	2278      	movs	r2, #120	@ 0x78
 8012674:	4932      	ldr	r1, [pc, #200]	@ (8012740 <_printf_i+0x218>)
 8012676:	9104      	str	r1, [sp, #16]
 8012678:	0021      	movs	r1, r4
 801267a:	3145      	adds	r1, #69	@ 0x45
 801267c:	700a      	strb	r2, [r1, #0]
 801267e:	6819      	ldr	r1, [r3, #0]
 8012680:	6822      	ldr	r2, [r4, #0]
 8012682:	c940      	ldmia	r1!, {r6}
 8012684:	0610      	lsls	r0, r2, #24
 8012686:	d402      	bmi.n	801268e <_printf_i+0x166>
 8012688:	0650      	lsls	r0, r2, #25
 801268a:	d500      	bpl.n	801268e <_printf_i+0x166>
 801268c:	b2b6      	uxth	r6, r6
 801268e:	6019      	str	r1, [r3, #0]
 8012690:	07d3      	lsls	r3, r2, #31
 8012692:	d502      	bpl.n	801269a <_printf_i+0x172>
 8012694:	2320      	movs	r3, #32
 8012696:	4313      	orrs	r3, r2
 8012698:	6023      	str	r3, [r4, #0]
 801269a:	2e00      	cmp	r6, #0
 801269c:	d001      	beq.n	80126a2 <_printf_i+0x17a>
 801269e:	2710      	movs	r7, #16
 80126a0:	e7a8      	b.n	80125f4 <_printf_i+0xcc>
 80126a2:	2220      	movs	r2, #32
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	4393      	bics	r3, r2
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	e7f8      	b.n	801269e <_printf_i+0x176>
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	680d      	ldr	r5, [r1, #0]
 80126b0:	1d10      	adds	r0, r2, #4
 80126b2:	6949      	ldr	r1, [r1, #20]
 80126b4:	6018      	str	r0, [r3, #0]
 80126b6:	6813      	ldr	r3, [r2, #0]
 80126b8:	062e      	lsls	r6, r5, #24
 80126ba:	d501      	bpl.n	80126c0 <_printf_i+0x198>
 80126bc:	6019      	str	r1, [r3, #0]
 80126be:	e002      	b.n	80126c6 <_printf_i+0x19e>
 80126c0:	066d      	lsls	r5, r5, #25
 80126c2:	d5fb      	bpl.n	80126bc <_printf_i+0x194>
 80126c4:	8019      	strh	r1, [r3, #0]
 80126c6:	2300      	movs	r3, #0
 80126c8:	9d03      	ldr	r5, [sp, #12]
 80126ca:	6123      	str	r3, [r4, #16]
 80126cc:	e7bf      	b.n	801264e <_printf_i+0x126>
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	1d11      	adds	r1, r2, #4
 80126d2:	6019      	str	r1, [r3, #0]
 80126d4:	6815      	ldr	r5, [r2, #0]
 80126d6:	2100      	movs	r1, #0
 80126d8:	0028      	movs	r0, r5
 80126da:	6862      	ldr	r2, [r4, #4]
 80126dc:	f000 fcc3 	bl	8013066 <memchr>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d001      	beq.n	80126e8 <_printf_i+0x1c0>
 80126e4:	1b40      	subs	r0, r0, r5
 80126e6:	6060      	str	r0, [r4, #4]
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	6123      	str	r3, [r4, #16]
 80126ec:	2300      	movs	r3, #0
 80126ee:	9a03      	ldr	r2, [sp, #12]
 80126f0:	7013      	strb	r3, [r2, #0]
 80126f2:	e7ac      	b.n	801264e <_printf_i+0x126>
 80126f4:	002a      	movs	r2, r5
 80126f6:	6923      	ldr	r3, [r4, #16]
 80126f8:	9906      	ldr	r1, [sp, #24]
 80126fa:	9805      	ldr	r0, [sp, #20]
 80126fc:	9d07      	ldr	r5, [sp, #28]
 80126fe:	47a8      	blx	r5
 8012700:	3001      	adds	r0, #1
 8012702:	d0ae      	beq.n	8012662 <_printf_i+0x13a>
 8012704:	6823      	ldr	r3, [r4, #0]
 8012706:	079b      	lsls	r3, r3, #30
 8012708:	d415      	bmi.n	8012736 <_printf_i+0x20e>
 801270a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801270c:	68e0      	ldr	r0, [r4, #12]
 801270e:	4298      	cmp	r0, r3
 8012710:	daa9      	bge.n	8012666 <_printf_i+0x13e>
 8012712:	0018      	movs	r0, r3
 8012714:	e7a7      	b.n	8012666 <_printf_i+0x13e>
 8012716:	0022      	movs	r2, r4
 8012718:	2301      	movs	r3, #1
 801271a:	9906      	ldr	r1, [sp, #24]
 801271c:	9805      	ldr	r0, [sp, #20]
 801271e:	9e07      	ldr	r6, [sp, #28]
 8012720:	3219      	adds	r2, #25
 8012722:	47b0      	blx	r6
 8012724:	3001      	adds	r0, #1
 8012726:	d09c      	beq.n	8012662 <_printf_i+0x13a>
 8012728:	3501      	adds	r5, #1
 801272a:	68e3      	ldr	r3, [r4, #12]
 801272c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801272e:	1a9b      	subs	r3, r3, r2
 8012730:	42ab      	cmp	r3, r5
 8012732:	dcf0      	bgt.n	8012716 <_printf_i+0x1ee>
 8012734:	e7e9      	b.n	801270a <_printf_i+0x1e2>
 8012736:	2500      	movs	r5, #0
 8012738:	e7f7      	b.n	801272a <_printf_i+0x202>
 801273a:	46c0      	nop			@ (mov r8, r8)
 801273c:	08017322 	.word	0x08017322
 8012740:	08017333 	.word	0x08017333

08012744 <_scanf_float>:
 8012744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012746:	b08b      	sub	sp, #44	@ 0x2c
 8012748:	0016      	movs	r6, r2
 801274a:	9003      	str	r0, [sp, #12]
 801274c:	22ae      	movs	r2, #174	@ 0xae
 801274e:	2000      	movs	r0, #0
 8012750:	9307      	str	r3, [sp, #28]
 8012752:	688b      	ldr	r3, [r1, #8]
 8012754:	000c      	movs	r4, r1
 8012756:	1e59      	subs	r1, r3, #1
 8012758:	0052      	lsls	r2, r2, #1
 801275a:	9006      	str	r0, [sp, #24]
 801275c:	4291      	cmp	r1, r2
 801275e:	d905      	bls.n	801276c <_scanf_float+0x28>
 8012760:	3b5e      	subs	r3, #94	@ 0x5e
 8012762:	3bff      	subs	r3, #255	@ 0xff
 8012764:	9306      	str	r3, [sp, #24]
 8012766:	235e      	movs	r3, #94	@ 0x5e
 8012768:	33ff      	adds	r3, #255	@ 0xff
 801276a:	60a3      	str	r3, [r4, #8]
 801276c:	23f0      	movs	r3, #240	@ 0xf0
 801276e:	6822      	ldr	r2, [r4, #0]
 8012770:	00db      	lsls	r3, r3, #3
 8012772:	4313      	orrs	r3, r2
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	0023      	movs	r3, r4
 8012778:	2500      	movs	r5, #0
 801277a:	331c      	adds	r3, #28
 801277c:	001f      	movs	r7, r3
 801277e:	9304      	str	r3, [sp, #16]
 8012780:	9502      	str	r5, [sp, #8]
 8012782:	9509      	str	r5, [sp, #36]	@ 0x24
 8012784:	9508      	str	r5, [sp, #32]
 8012786:	9501      	str	r5, [sp, #4]
 8012788:	9505      	str	r5, [sp, #20]
 801278a:	68a2      	ldr	r2, [r4, #8]
 801278c:	2a00      	cmp	r2, #0
 801278e:	d00a      	beq.n	80127a6 <_scanf_float+0x62>
 8012790:	6833      	ldr	r3, [r6, #0]
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	2b4e      	cmp	r3, #78	@ 0x4e
 8012796:	d844      	bhi.n	8012822 <_scanf_float+0xde>
 8012798:	0018      	movs	r0, r3
 801279a:	2b40      	cmp	r3, #64	@ 0x40
 801279c:	d82c      	bhi.n	80127f8 <_scanf_float+0xb4>
 801279e:	382b      	subs	r0, #43	@ 0x2b
 80127a0:	b2c1      	uxtb	r1, r0
 80127a2:	290e      	cmp	r1, #14
 80127a4:	d92a      	bls.n	80127fc <_scanf_float+0xb8>
 80127a6:	9b01      	ldr	r3, [sp, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d003      	beq.n	80127b4 <_scanf_float+0x70>
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	4aa6      	ldr	r2, [pc, #664]	@ (8012a48 <_scanf_float+0x304>)
 80127b0:	4013      	ands	r3, r2
 80127b2:	6023      	str	r3, [r4, #0]
 80127b4:	9b02      	ldr	r3, [sp, #8]
 80127b6:	3b01      	subs	r3, #1
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d900      	bls.n	80127be <_scanf_float+0x7a>
 80127bc:	e0fe      	b.n	80129bc <_scanf_float+0x278>
 80127be:	25be      	movs	r5, #190	@ 0xbe
 80127c0:	006d      	lsls	r5, r5, #1
 80127c2:	9b04      	ldr	r3, [sp, #16]
 80127c4:	429f      	cmp	r7, r3
 80127c6:	d900      	bls.n	80127ca <_scanf_float+0x86>
 80127c8:	e0ee      	b.n	80129a8 <_scanf_float+0x264>
 80127ca:	2001      	movs	r0, #1
 80127cc:	b00b      	add	sp, #44	@ 0x2c
 80127ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127d0:	0018      	movs	r0, r3
 80127d2:	3861      	subs	r0, #97	@ 0x61
 80127d4:	280d      	cmp	r0, #13
 80127d6:	d8e6      	bhi.n	80127a6 <_scanf_float+0x62>
 80127d8:	f7ed fca8 	bl	800012c <__gnu_thumb1_case_shi>
 80127dc:	ffe50089 	.word	0xffe50089
 80127e0:	ffe5ffe5 	.word	0xffe5ffe5
 80127e4:	00a700bb 	.word	0x00a700bb
 80127e8:	ffe5ffe5 	.word	0xffe5ffe5
 80127ec:	ffe5008f 	.word	0xffe5008f
 80127f0:	ffe5ffe5 	.word	0xffe5ffe5
 80127f4:	006bffe5 	.word	0x006bffe5
 80127f8:	3841      	subs	r0, #65	@ 0x41
 80127fa:	e7eb      	b.n	80127d4 <_scanf_float+0x90>
 80127fc:	280e      	cmp	r0, #14
 80127fe:	d8d2      	bhi.n	80127a6 <_scanf_float+0x62>
 8012800:	f7ed fc94 	bl	800012c <__gnu_thumb1_case_shi>
 8012804:	ffd1004f 	.word	0xffd1004f
 8012808:	009d004f 	.word	0x009d004f
 801280c:	0021ffd1 	.word	0x0021ffd1
 8012810:	00410041 	.word	0x00410041
 8012814:	00410041 	.word	0x00410041
 8012818:	00410041 	.word	0x00410041
 801281c:	00410041 	.word	0x00410041
 8012820:	0041      	.short	0x0041
 8012822:	2b6e      	cmp	r3, #110	@ 0x6e
 8012824:	d80a      	bhi.n	801283c <_scanf_float+0xf8>
 8012826:	2b60      	cmp	r3, #96	@ 0x60
 8012828:	d8d2      	bhi.n	80127d0 <_scanf_float+0x8c>
 801282a:	2b54      	cmp	r3, #84	@ 0x54
 801282c:	d100      	bne.n	8012830 <_scanf_float+0xec>
 801282e:	e081      	b.n	8012934 <_scanf_float+0x1f0>
 8012830:	2b59      	cmp	r3, #89	@ 0x59
 8012832:	d1b8      	bne.n	80127a6 <_scanf_float+0x62>
 8012834:	2d07      	cmp	r5, #7
 8012836:	d1b6      	bne.n	80127a6 <_scanf_float+0x62>
 8012838:	2508      	movs	r5, #8
 801283a:	e02f      	b.n	801289c <_scanf_float+0x158>
 801283c:	2b74      	cmp	r3, #116	@ 0x74
 801283e:	d079      	beq.n	8012934 <_scanf_float+0x1f0>
 8012840:	2b79      	cmp	r3, #121	@ 0x79
 8012842:	d0f7      	beq.n	8012834 <_scanf_float+0xf0>
 8012844:	e7af      	b.n	80127a6 <_scanf_float+0x62>
 8012846:	6821      	ldr	r1, [r4, #0]
 8012848:	05c8      	lsls	r0, r1, #23
 801284a:	d51c      	bpl.n	8012886 <_scanf_float+0x142>
 801284c:	2380      	movs	r3, #128	@ 0x80
 801284e:	4399      	bics	r1, r3
 8012850:	9b01      	ldr	r3, [sp, #4]
 8012852:	6021      	str	r1, [r4, #0]
 8012854:	3301      	adds	r3, #1
 8012856:	9301      	str	r3, [sp, #4]
 8012858:	9b06      	ldr	r3, [sp, #24]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d003      	beq.n	8012866 <_scanf_float+0x122>
 801285e:	3b01      	subs	r3, #1
 8012860:	3201      	adds	r2, #1
 8012862:	9306      	str	r3, [sp, #24]
 8012864:	60a2      	str	r2, [r4, #8]
 8012866:	68a3      	ldr	r3, [r4, #8]
 8012868:	3b01      	subs	r3, #1
 801286a:	60a3      	str	r3, [r4, #8]
 801286c:	6923      	ldr	r3, [r4, #16]
 801286e:	3301      	adds	r3, #1
 8012870:	6123      	str	r3, [r4, #16]
 8012872:	6873      	ldr	r3, [r6, #4]
 8012874:	3b01      	subs	r3, #1
 8012876:	6073      	str	r3, [r6, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	dc00      	bgt.n	801287e <_scanf_float+0x13a>
 801287c:	e08a      	b.n	8012994 <_scanf_float+0x250>
 801287e:	6833      	ldr	r3, [r6, #0]
 8012880:	3301      	adds	r3, #1
 8012882:	6033      	str	r3, [r6, #0]
 8012884:	e781      	b.n	801278a <_scanf_float+0x46>
 8012886:	9a02      	ldr	r2, [sp, #8]
 8012888:	1951      	adds	r1, r2, r5
 801288a:	2900      	cmp	r1, #0
 801288c:	d000      	beq.n	8012890 <_scanf_float+0x14c>
 801288e:	e78a      	b.n	80127a6 <_scanf_float+0x62>
 8012890:	000d      	movs	r5, r1
 8012892:	6822      	ldr	r2, [r4, #0]
 8012894:	486d      	ldr	r0, [pc, #436]	@ (8012a4c <_scanf_float+0x308>)
 8012896:	9102      	str	r1, [sp, #8]
 8012898:	4002      	ands	r2, r0
 801289a:	6022      	str	r2, [r4, #0]
 801289c:	703b      	strb	r3, [r7, #0]
 801289e:	3701      	adds	r7, #1
 80128a0:	e7e1      	b.n	8012866 <_scanf_float+0x122>
 80128a2:	2180      	movs	r1, #128	@ 0x80
 80128a4:	6822      	ldr	r2, [r4, #0]
 80128a6:	420a      	tst	r2, r1
 80128a8:	d100      	bne.n	80128ac <_scanf_float+0x168>
 80128aa:	e77c      	b.n	80127a6 <_scanf_float+0x62>
 80128ac:	438a      	bics	r2, r1
 80128ae:	6022      	str	r2, [r4, #0]
 80128b0:	e7f4      	b.n	801289c <_scanf_float+0x158>
 80128b2:	9a02      	ldr	r2, [sp, #8]
 80128b4:	2a00      	cmp	r2, #0
 80128b6:	d10f      	bne.n	80128d8 <_scanf_float+0x194>
 80128b8:	9a01      	ldr	r2, [sp, #4]
 80128ba:	2a00      	cmp	r2, #0
 80128bc:	d10f      	bne.n	80128de <_scanf_float+0x19a>
 80128be:	6822      	ldr	r2, [r4, #0]
 80128c0:	21e0      	movs	r1, #224	@ 0xe0
 80128c2:	0010      	movs	r0, r2
 80128c4:	00c9      	lsls	r1, r1, #3
 80128c6:	4008      	ands	r0, r1
 80128c8:	4288      	cmp	r0, r1
 80128ca:	d108      	bne.n	80128de <_scanf_float+0x19a>
 80128cc:	4960      	ldr	r1, [pc, #384]	@ (8012a50 <_scanf_float+0x30c>)
 80128ce:	400a      	ands	r2, r1
 80128d0:	6022      	str	r2, [r4, #0]
 80128d2:	2201      	movs	r2, #1
 80128d4:	9202      	str	r2, [sp, #8]
 80128d6:	e7e1      	b.n	801289c <_scanf_float+0x158>
 80128d8:	9a02      	ldr	r2, [sp, #8]
 80128da:	2a02      	cmp	r2, #2
 80128dc:	d058      	beq.n	8012990 <_scanf_float+0x24c>
 80128de:	2d01      	cmp	r5, #1
 80128e0:	d002      	beq.n	80128e8 <_scanf_float+0x1a4>
 80128e2:	2d04      	cmp	r5, #4
 80128e4:	d000      	beq.n	80128e8 <_scanf_float+0x1a4>
 80128e6:	e75e      	b.n	80127a6 <_scanf_float+0x62>
 80128e8:	3501      	adds	r5, #1
 80128ea:	b2ed      	uxtb	r5, r5
 80128ec:	e7d6      	b.n	801289c <_scanf_float+0x158>
 80128ee:	9a02      	ldr	r2, [sp, #8]
 80128f0:	2a01      	cmp	r2, #1
 80128f2:	d000      	beq.n	80128f6 <_scanf_float+0x1b2>
 80128f4:	e757      	b.n	80127a6 <_scanf_float+0x62>
 80128f6:	2202      	movs	r2, #2
 80128f8:	e7ec      	b.n	80128d4 <_scanf_float+0x190>
 80128fa:	2d00      	cmp	r5, #0
 80128fc:	d110      	bne.n	8012920 <_scanf_float+0x1dc>
 80128fe:	9a01      	ldr	r2, [sp, #4]
 8012900:	2a00      	cmp	r2, #0
 8012902:	d000      	beq.n	8012906 <_scanf_float+0x1c2>
 8012904:	e752      	b.n	80127ac <_scanf_float+0x68>
 8012906:	6822      	ldr	r2, [r4, #0]
 8012908:	21e0      	movs	r1, #224	@ 0xe0
 801290a:	0010      	movs	r0, r2
 801290c:	00c9      	lsls	r1, r1, #3
 801290e:	4008      	ands	r0, r1
 8012910:	4288      	cmp	r0, r1
 8012912:	d000      	beq.n	8012916 <_scanf_float+0x1d2>
 8012914:	e11d      	b.n	8012b52 <_scanf_float+0x40e>
 8012916:	494e      	ldr	r1, [pc, #312]	@ (8012a50 <_scanf_float+0x30c>)
 8012918:	3501      	adds	r5, #1
 801291a:	400a      	ands	r2, r1
 801291c:	6022      	str	r2, [r4, #0]
 801291e:	e7bd      	b.n	801289c <_scanf_float+0x158>
 8012920:	21fd      	movs	r1, #253	@ 0xfd
 8012922:	1eea      	subs	r2, r5, #3
 8012924:	420a      	tst	r2, r1
 8012926:	d0df      	beq.n	80128e8 <_scanf_float+0x1a4>
 8012928:	e73d      	b.n	80127a6 <_scanf_float+0x62>
 801292a:	2d02      	cmp	r5, #2
 801292c:	d000      	beq.n	8012930 <_scanf_float+0x1ec>
 801292e:	e73a      	b.n	80127a6 <_scanf_float+0x62>
 8012930:	2503      	movs	r5, #3
 8012932:	e7b3      	b.n	801289c <_scanf_float+0x158>
 8012934:	2d06      	cmp	r5, #6
 8012936:	d000      	beq.n	801293a <_scanf_float+0x1f6>
 8012938:	e735      	b.n	80127a6 <_scanf_float+0x62>
 801293a:	2507      	movs	r5, #7
 801293c:	e7ae      	b.n	801289c <_scanf_float+0x158>
 801293e:	6822      	ldr	r2, [r4, #0]
 8012940:	0591      	lsls	r1, r2, #22
 8012942:	d400      	bmi.n	8012946 <_scanf_float+0x202>
 8012944:	e72f      	b.n	80127a6 <_scanf_float+0x62>
 8012946:	4943      	ldr	r1, [pc, #268]	@ (8012a54 <_scanf_float+0x310>)
 8012948:	400a      	ands	r2, r1
 801294a:	6022      	str	r2, [r4, #0]
 801294c:	9a01      	ldr	r2, [sp, #4]
 801294e:	9205      	str	r2, [sp, #20]
 8012950:	e7a4      	b.n	801289c <_scanf_float+0x158>
 8012952:	21a0      	movs	r1, #160	@ 0xa0
 8012954:	2080      	movs	r0, #128	@ 0x80
 8012956:	6822      	ldr	r2, [r4, #0]
 8012958:	00c9      	lsls	r1, r1, #3
 801295a:	4011      	ands	r1, r2
 801295c:	00c0      	lsls	r0, r0, #3
 801295e:	4281      	cmp	r1, r0
 8012960:	d006      	beq.n	8012970 <_scanf_float+0x22c>
 8012962:	4202      	tst	r2, r0
 8012964:	d100      	bne.n	8012968 <_scanf_float+0x224>
 8012966:	e71e      	b.n	80127a6 <_scanf_float+0x62>
 8012968:	9901      	ldr	r1, [sp, #4]
 801296a:	2900      	cmp	r1, #0
 801296c:	d100      	bne.n	8012970 <_scanf_float+0x22c>
 801296e:	e0f0      	b.n	8012b52 <_scanf_float+0x40e>
 8012970:	0591      	lsls	r1, r2, #22
 8012972:	d404      	bmi.n	801297e <_scanf_float+0x23a>
 8012974:	9901      	ldr	r1, [sp, #4]
 8012976:	9805      	ldr	r0, [sp, #20]
 8012978:	9709      	str	r7, [sp, #36]	@ 0x24
 801297a:	1a09      	subs	r1, r1, r0
 801297c:	9108      	str	r1, [sp, #32]
 801297e:	4934      	ldr	r1, [pc, #208]	@ (8012a50 <_scanf_float+0x30c>)
 8012980:	400a      	ands	r2, r1
 8012982:	21c0      	movs	r1, #192	@ 0xc0
 8012984:	0049      	lsls	r1, r1, #1
 8012986:	430a      	orrs	r2, r1
 8012988:	6022      	str	r2, [r4, #0]
 801298a:	2200      	movs	r2, #0
 801298c:	9201      	str	r2, [sp, #4]
 801298e:	e785      	b.n	801289c <_scanf_float+0x158>
 8012990:	2203      	movs	r2, #3
 8012992:	e79f      	b.n	80128d4 <_scanf_float+0x190>
 8012994:	23c0      	movs	r3, #192	@ 0xc0
 8012996:	005b      	lsls	r3, r3, #1
 8012998:	0031      	movs	r1, r6
 801299a:	58e3      	ldr	r3, [r4, r3]
 801299c:	9803      	ldr	r0, [sp, #12]
 801299e:	4798      	blx	r3
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d100      	bne.n	80129a6 <_scanf_float+0x262>
 80129a4:	e6f1      	b.n	801278a <_scanf_float+0x46>
 80129a6:	e6fe      	b.n	80127a6 <_scanf_float+0x62>
 80129a8:	3f01      	subs	r7, #1
 80129aa:	5963      	ldr	r3, [r4, r5]
 80129ac:	0032      	movs	r2, r6
 80129ae:	7839      	ldrb	r1, [r7, #0]
 80129b0:	9803      	ldr	r0, [sp, #12]
 80129b2:	4798      	blx	r3
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	3b01      	subs	r3, #1
 80129b8:	6123      	str	r3, [r4, #16]
 80129ba:	e702      	b.n	80127c2 <_scanf_float+0x7e>
 80129bc:	1e6b      	subs	r3, r5, #1
 80129be:	2b06      	cmp	r3, #6
 80129c0:	d80e      	bhi.n	80129e0 <_scanf_float+0x29c>
 80129c2:	9702      	str	r7, [sp, #8]
 80129c4:	2d02      	cmp	r5, #2
 80129c6:	d920      	bls.n	8012a0a <_scanf_float+0x2c6>
 80129c8:	1beb      	subs	r3, r5, r7
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	9306      	str	r3, [sp, #24]
 80129ce:	9b02      	ldr	r3, [sp, #8]
 80129d0:	9a06      	ldr	r2, [sp, #24]
 80129d2:	189b      	adds	r3, r3, r2
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	2b03      	cmp	r3, #3
 80129d8:	d127      	bne.n	8012a2a <_scanf_float+0x2e6>
 80129da:	3d03      	subs	r5, #3
 80129dc:	b2ed      	uxtb	r5, r5
 80129de:	1b7f      	subs	r7, r7, r5
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	05da      	lsls	r2, r3, #23
 80129e4:	d553      	bpl.n	8012a8e <_scanf_float+0x34a>
 80129e6:	055b      	lsls	r3, r3, #21
 80129e8:	d536      	bpl.n	8012a58 <_scanf_float+0x314>
 80129ea:	25be      	movs	r5, #190	@ 0xbe
 80129ec:	006d      	lsls	r5, r5, #1
 80129ee:	9b04      	ldr	r3, [sp, #16]
 80129f0:	429f      	cmp	r7, r3
 80129f2:	d800      	bhi.n	80129f6 <_scanf_float+0x2b2>
 80129f4:	e6e9      	b.n	80127ca <_scanf_float+0x86>
 80129f6:	3f01      	subs	r7, #1
 80129f8:	5963      	ldr	r3, [r4, r5]
 80129fa:	0032      	movs	r2, r6
 80129fc:	7839      	ldrb	r1, [r7, #0]
 80129fe:	9803      	ldr	r0, [sp, #12]
 8012a00:	4798      	blx	r3
 8012a02:	6923      	ldr	r3, [r4, #16]
 8012a04:	3b01      	subs	r3, #1
 8012a06:	6123      	str	r3, [r4, #16]
 8012a08:	e7f1      	b.n	80129ee <_scanf_float+0x2aa>
 8012a0a:	25be      	movs	r5, #190	@ 0xbe
 8012a0c:	006d      	lsls	r5, r5, #1
 8012a0e:	9b04      	ldr	r3, [sp, #16]
 8012a10:	429f      	cmp	r7, r3
 8012a12:	d800      	bhi.n	8012a16 <_scanf_float+0x2d2>
 8012a14:	e6d9      	b.n	80127ca <_scanf_float+0x86>
 8012a16:	3f01      	subs	r7, #1
 8012a18:	5963      	ldr	r3, [r4, r5]
 8012a1a:	0032      	movs	r2, r6
 8012a1c:	7839      	ldrb	r1, [r7, #0]
 8012a1e:	9803      	ldr	r0, [sp, #12]
 8012a20:	4798      	blx	r3
 8012a22:	6923      	ldr	r3, [r4, #16]
 8012a24:	3b01      	subs	r3, #1
 8012a26:	6123      	str	r3, [r4, #16]
 8012a28:	e7f1      	b.n	8012a0e <_scanf_float+0x2ca>
 8012a2a:	9b02      	ldr	r3, [sp, #8]
 8012a2c:	0032      	movs	r2, r6
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	7819      	ldrb	r1, [r3, #0]
 8012a32:	9302      	str	r3, [sp, #8]
 8012a34:	23be      	movs	r3, #190	@ 0xbe
 8012a36:	005b      	lsls	r3, r3, #1
 8012a38:	58e3      	ldr	r3, [r4, r3]
 8012a3a:	9803      	ldr	r0, [sp, #12]
 8012a3c:	4798      	blx	r3
 8012a3e:	6923      	ldr	r3, [r4, #16]
 8012a40:	3b01      	subs	r3, #1
 8012a42:	6123      	str	r3, [r4, #16]
 8012a44:	e7c3      	b.n	80129ce <_scanf_float+0x28a>
 8012a46:	46c0      	nop			@ (mov r8, r8)
 8012a48:	fffffeff 	.word	0xfffffeff
 8012a4c:	fffffe7f 	.word	0xfffffe7f
 8012a50:	fffff87f 	.word	0xfffff87f
 8012a54:	fffffd7f 	.word	0xfffffd7f
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	1e7d      	subs	r5, r7, #1
 8012a5c:	7829      	ldrb	r1, [r5, #0]
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	6123      	str	r3, [r4, #16]
 8012a62:	2965      	cmp	r1, #101	@ 0x65
 8012a64:	d00c      	beq.n	8012a80 <_scanf_float+0x33c>
 8012a66:	2945      	cmp	r1, #69	@ 0x45
 8012a68:	d00a      	beq.n	8012a80 <_scanf_float+0x33c>
 8012a6a:	23be      	movs	r3, #190	@ 0xbe
 8012a6c:	005b      	lsls	r3, r3, #1
 8012a6e:	58e3      	ldr	r3, [r4, r3]
 8012a70:	0032      	movs	r2, r6
 8012a72:	9803      	ldr	r0, [sp, #12]
 8012a74:	4798      	blx	r3
 8012a76:	6923      	ldr	r3, [r4, #16]
 8012a78:	1ebd      	subs	r5, r7, #2
 8012a7a:	3b01      	subs	r3, #1
 8012a7c:	7829      	ldrb	r1, [r5, #0]
 8012a7e:	6123      	str	r3, [r4, #16]
 8012a80:	23be      	movs	r3, #190	@ 0xbe
 8012a82:	005b      	lsls	r3, r3, #1
 8012a84:	0032      	movs	r2, r6
 8012a86:	58e3      	ldr	r3, [r4, r3]
 8012a88:	9803      	ldr	r0, [sp, #12]
 8012a8a:	4798      	blx	r3
 8012a8c:	002f      	movs	r7, r5
 8012a8e:	6821      	ldr	r1, [r4, #0]
 8012a90:	2310      	movs	r3, #16
 8012a92:	000a      	movs	r2, r1
 8012a94:	401a      	ands	r2, r3
 8012a96:	4219      	tst	r1, r3
 8012a98:	d001      	beq.n	8012a9e <_scanf_float+0x35a>
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	e696      	b.n	80127cc <_scanf_float+0x88>
 8012a9e:	21c0      	movs	r1, #192	@ 0xc0
 8012aa0:	703a      	strb	r2, [r7, #0]
 8012aa2:	6823      	ldr	r3, [r4, #0]
 8012aa4:	00c9      	lsls	r1, r1, #3
 8012aa6:	400b      	ands	r3, r1
 8012aa8:	2180      	movs	r1, #128	@ 0x80
 8012aaa:	00c9      	lsls	r1, r1, #3
 8012aac:	428b      	cmp	r3, r1
 8012aae:	d11c      	bne.n	8012aea <_scanf_float+0x3a6>
 8012ab0:	9b05      	ldr	r3, [sp, #20]
 8012ab2:	9a01      	ldr	r2, [sp, #4]
 8012ab4:	9905      	ldr	r1, [sp, #20]
 8012ab6:	1a9a      	subs	r2, r3, r2
 8012ab8:	9b01      	ldr	r3, [sp, #4]
 8012aba:	428b      	cmp	r3, r1
 8012abc:	d121      	bne.n	8012b02 <_scanf_float+0x3be>
 8012abe:	2200      	movs	r2, #0
 8012ac0:	9904      	ldr	r1, [sp, #16]
 8012ac2:	9803      	ldr	r0, [sp, #12]
 8012ac4:	f002 fd40 	bl	8015548 <_strtod_r>
 8012ac8:	9b07      	ldr	r3, [sp, #28]
 8012aca:	6822      	ldr	r2, [r4, #0]
 8012acc:	0006      	movs	r6, r0
 8012ace:	000f      	movs	r7, r1
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	0791      	lsls	r1, r2, #30
 8012ad4:	d522      	bpl.n	8012b1c <_scanf_float+0x3d8>
 8012ad6:	9907      	ldr	r1, [sp, #28]
 8012ad8:	1d1a      	adds	r2, r3, #4
 8012ada:	600a      	str	r2, [r1, #0]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	601e      	str	r6, [r3, #0]
 8012ae0:	605f      	str	r7, [r3, #4]
 8012ae2:	68e3      	ldr	r3, [r4, #12]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	60e3      	str	r3, [r4, #12]
 8012ae8:	e7d7      	b.n	8012a9a <_scanf_float+0x356>
 8012aea:	9b08      	ldr	r3, [sp, #32]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d0e6      	beq.n	8012abe <_scanf_float+0x37a>
 8012af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af2:	9803      	ldr	r0, [sp, #12]
 8012af4:	1c59      	adds	r1, r3, #1
 8012af6:	230a      	movs	r3, #10
 8012af8:	f002 fdb8 	bl	801566c <_strtol_r>
 8012afc:	9b08      	ldr	r3, [sp, #32]
 8012afe:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012b00:	1ac2      	subs	r2, r0, r3
 8012b02:	0023      	movs	r3, r4
 8012b04:	3370      	adds	r3, #112	@ 0x70
 8012b06:	33ff      	adds	r3, #255	@ 0xff
 8012b08:	429f      	cmp	r7, r3
 8012b0a:	d302      	bcc.n	8012b12 <_scanf_float+0x3ce>
 8012b0c:	0027      	movs	r7, r4
 8012b0e:	376f      	adds	r7, #111	@ 0x6f
 8012b10:	37ff      	adds	r7, #255	@ 0xff
 8012b12:	0038      	movs	r0, r7
 8012b14:	4910      	ldr	r1, [pc, #64]	@ (8012b58 <_scanf_float+0x414>)
 8012b16:	f000 f91b 	bl	8012d50 <siprintf>
 8012b1a:	e7d0      	b.n	8012abe <_scanf_float+0x37a>
 8012b1c:	1d19      	adds	r1, r3, #4
 8012b1e:	0752      	lsls	r2, r2, #29
 8012b20:	d502      	bpl.n	8012b28 <_scanf_float+0x3e4>
 8012b22:	9a07      	ldr	r2, [sp, #28]
 8012b24:	6011      	str	r1, [r2, #0]
 8012b26:	e7d9      	b.n	8012adc <_scanf_float+0x398>
 8012b28:	9a07      	ldr	r2, [sp, #28]
 8012b2a:	0030      	movs	r0, r6
 8012b2c:	6011      	str	r1, [r2, #0]
 8012b2e:	681d      	ldr	r5, [r3, #0]
 8012b30:	0032      	movs	r2, r6
 8012b32:	003b      	movs	r3, r7
 8012b34:	0039      	movs	r1, r7
 8012b36:	f7f0 fb85 	bl	8003244 <__aeabi_dcmpun>
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	d004      	beq.n	8012b48 <_scanf_float+0x404>
 8012b3e:	4807      	ldr	r0, [pc, #28]	@ (8012b5c <_scanf_float+0x418>)
 8012b40:	f7fe ff92 	bl	8011a68 <nanf>
 8012b44:	6028      	str	r0, [r5, #0]
 8012b46:	e7cc      	b.n	8012ae2 <_scanf_float+0x39e>
 8012b48:	0030      	movs	r0, r6
 8012b4a:	0039      	movs	r1, r7
 8012b4c:	f7f0 fc72 	bl	8003434 <__aeabi_d2f>
 8012b50:	e7f8      	b.n	8012b44 <_scanf_float+0x400>
 8012b52:	2300      	movs	r3, #0
 8012b54:	9301      	str	r3, [sp, #4]
 8012b56:	e62d      	b.n	80127b4 <_scanf_float+0x70>
 8012b58:	08017344 	.word	0x08017344
 8012b5c:	080176dd 	.word	0x080176dd

08012b60 <std>:
 8012b60:	2300      	movs	r3, #0
 8012b62:	b510      	push	{r4, lr}
 8012b64:	0004      	movs	r4, r0
 8012b66:	6003      	str	r3, [r0, #0]
 8012b68:	6043      	str	r3, [r0, #4]
 8012b6a:	6083      	str	r3, [r0, #8]
 8012b6c:	8181      	strh	r1, [r0, #12]
 8012b6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b70:	81c2      	strh	r2, [r0, #14]
 8012b72:	6103      	str	r3, [r0, #16]
 8012b74:	6143      	str	r3, [r0, #20]
 8012b76:	6183      	str	r3, [r0, #24]
 8012b78:	0019      	movs	r1, r3
 8012b7a:	2208      	movs	r2, #8
 8012b7c:	305c      	adds	r0, #92	@ 0x5c
 8012b7e:	f000 f98b 	bl	8012e98 <memset>
 8012b82:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb0 <std+0x50>)
 8012b84:	6224      	str	r4, [r4, #32]
 8012b86:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b88:	4b0a      	ldr	r3, [pc, #40]	@ (8012bb4 <std+0x54>)
 8012b8a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8012bb8 <std+0x58>)
 8012b8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b90:	4b0a      	ldr	r3, [pc, #40]	@ (8012bbc <std+0x5c>)
 8012b92:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b94:	4b0a      	ldr	r3, [pc, #40]	@ (8012bc0 <std+0x60>)
 8012b96:	429c      	cmp	r4, r3
 8012b98:	d005      	beq.n	8012ba6 <std+0x46>
 8012b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8012bc4 <std+0x64>)
 8012b9c:	429c      	cmp	r4, r3
 8012b9e:	d002      	beq.n	8012ba6 <std+0x46>
 8012ba0:	4b09      	ldr	r3, [pc, #36]	@ (8012bc8 <std+0x68>)
 8012ba2:	429c      	cmp	r4, r3
 8012ba4:	d103      	bne.n	8012bae <std+0x4e>
 8012ba6:	0020      	movs	r0, r4
 8012ba8:	3058      	adds	r0, #88	@ 0x58
 8012baa:	f000 fa59 	bl	8013060 <__retarget_lock_init_recursive>
 8012bae:	bd10      	pop	{r4, pc}
 8012bb0:	08012d91 	.word	0x08012d91
 8012bb4:	08012db9 	.word	0x08012db9
 8012bb8:	08012df1 	.word	0x08012df1
 8012bbc:	08012e1d 	.word	0x08012e1d
 8012bc0:	2000713c 	.word	0x2000713c
 8012bc4:	200071a4 	.word	0x200071a4
 8012bc8:	2000720c 	.word	0x2000720c

08012bcc <stdio_exit_handler>:
 8012bcc:	b510      	push	{r4, lr}
 8012bce:	4a03      	ldr	r2, [pc, #12]	@ (8012bdc <stdio_exit_handler+0x10>)
 8012bd0:	4903      	ldr	r1, [pc, #12]	@ (8012be0 <stdio_exit_handler+0x14>)
 8012bd2:	4804      	ldr	r0, [pc, #16]	@ (8012be4 <stdio_exit_handler+0x18>)
 8012bd4:	f000 f86c 	bl	8012cb0 <_fwalk_sglue>
 8012bd8:	bd10      	pop	{r4, pc}
 8012bda:	46c0      	nop			@ (mov r8, r8)
 8012bdc:	20000088 	.word	0x20000088
 8012be0:	08015a3d 	.word	0x08015a3d
 8012be4:	20000098 	.word	0x20000098

08012be8 <cleanup_stdio>:
 8012be8:	6841      	ldr	r1, [r0, #4]
 8012bea:	4b0b      	ldr	r3, [pc, #44]	@ (8012c18 <cleanup_stdio+0x30>)
 8012bec:	b510      	push	{r4, lr}
 8012bee:	0004      	movs	r4, r0
 8012bf0:	4299      	cmp	r1, r3
 8012bf2:	d001      	beq.n	8012bf8 <cleanup_stdio+0x10>
 8012bf4:	f002 ff22 	bl	8015a3c <_fflush_r>
 8012bf8:	68a1      	ldr	r1, [r4, #8]
 8012bfa:	4b08      	ldr	r3, [pc, #32]	@ (8012c1c <cleanup_stdio+0x34>)
 8012bfc:	4299      	cmp	r1, r3
 8012bfe:	d002      	beq.n	8012c06 <cleanup_stdio+0x1e>
 8012c00:	0020      	movs	r0, r4
 8012c02:	f002 ff1b 	bl	8015a3c <_fflush_r>
 8012c06:	68e1      	ldr	r1, [r4, #12]
 8012c08:	4b05      	ldr	r3, [pc, #20]	@ (8012c20 <cleanup_stdio+0x38>)
 8012c0a:	4299      	cmp	r1, r3
 8012c0c:	d002      	beq.n	8012c14 <cleanup_stdio+0x2c>
 8012c0e:	0020      	movs	r0, r4
 8012c10:	f002 ff14 	bl	8015a3c <_fflush_r>
 8012c14:	bd10      	pop	{r4, pc}
 8012c16:	46c0      	nop			@ (mov r8, r8)
 8012c18:	2000713c 	.word	0x2000713c
 8012c1c:	200071a4 	.word	0x200071a4
 8012c20:	2000720c 	.word	0x2000720c

08012c24 <global_stdio_init.part.0>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	4b09      	ldr	r3, [pc, #36]	@ (8012c4c <global_stdio_init.part.0+0x28>)
 8012c28:	4a09      	ldr	r2, [pc, #36]	@ (8012c50 <global_stdio_init.part.0+0x2c>)
 8012c2a:	2104      	movs	r1, #4
 8012c2c:	601a      	str	r2, [r3, #0]
 8012c2e:	4809      	ldr	r0, [pc, #36]	@ (8012c54 <global_stdio_init.part.0+0x30>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	f7ff ff95 	bl	8012b60 <std>
 8012c36:	2201      	movs	r2, #1
 8012c38:	2109      	movs	r1, #9
 8012c3a:	4807      	ldr	r0, [pc, #28]	@ (8012c58 <global_stdio_init.part.0+0x34>)
 8012c3c:	f7ff ff90 	bl	8012b60 <std>
 8012c40:	2202      	movs	r2, #2
 8012c42:	2112      	movs	r1, #18
 8012c44:	4805      	ldr	r0, [pc, #20]	@ (8012c5c <global_stdio_init.part.0+0x38>)
 8012c46:	f7ff ff8b 	bl	8012b60 <std>
 8012c4a:	bd10      	pop	{r4, pc}
 8012c4c:	20007274 	.word	0x20007274
 8012c50:	08012bcd 	.word	0x08012bcd
 8012c54:	2000713c 	.word	0x2000713c
 8012c58:	200071a4 	.word	0x200071a4
 8012c5c:	2000720c 	.word	0x2000720c

08012c60 <__sfp_lock_acquire>:
 8012c60:	b510      	push	{r4, lr}
 8012c62:	4802      	ldr	r0, [pc, #8]	@ (8012c6c <__sfp_lock_acquire+0xc>)
 8012c64:	f000 f9fd 	bl	8013062 <__retarget_lock_acquire_recursive>
 8012c68:	bd10      	pop	{r4, pc}
 8012c6a:	46c0      	nop			@ (mov r8, r8)
 8012c6c:	2000727d 	.word	0x2000727d

08012c70 <__sfp_lock_release>:
 8012c70:	b510      	push	{r4, lr}
 8012c72:	4802      	ldr	r0, [pc, #8]	@ (8012c7c <__sfp_lock_release+0xc>)
 8012c74:	f000 f9f6 	bl	8013064 <__retarget_lock_release_recursive>
 8012c78:	bd10      	pop	{r4, pc}
 8012c7a:	46c0      	nop			@ (mov r8, r8)
 8012c7c:	2000727d 	.word	0x2000727d

08012c80 <__sinit>:
 8012c80:	b510      	push	{r4, lr}
 8012c82:	0004      	movs	r4, r0
 8012c84:	f7ff ffec 	bl	8012c60 <__sfp_lock_acquire>
 8012c88:	6a23      	ldr	r3, [r4, #32]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d002      	beq.n	8012c94 <__sinit+0x14>
 8012c8e:	f7ff ffef 	bl	8012c70 <__sfp_lock_release>
 8012c92:	bd10      	pop	{r4, pc}
 8012c94:	4b04      	ldr	r3, [pc, #16]	@ (8012ca8 <__sinit+0x28>)
 8012c96:	6223      	str	r3, [r4, #32]
 8012c98:	4b04      	ldr	r3, [pc, #16]	@ (8012cac <__sinit+0x2c>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1f6      	bne.n	8012c8e <__sinit+0xe>
 8012ca0:	f7ff ffc0 	bl	8012c24 <global_stdio_init.part.0>
 8012ca4:	e7f3      	b.n	8012c8e <__sinit+0xe>
 8012ca6:	46c0      	nop			@ (mov r8, r8)
 8012ca8:	08012be9 	.word	0x08012be9
 8012cac:	20007274 	.word	0x20007274

08012cb0 <_fwalk_sglue>:
 8012cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cb2:	0014      	movs	r4, r2
 8012cb4:	2600      	movs	r6, #0
 8012cb6:	9000      	str	r0, [sp, #0]
 8012cb8:	9101      	str	r1, [sp, #4]
 8012cba:	68a5      	ldr	r5, [r4, #8]
 8012cbc:	6867      	ldr	r7, [r4, #4]
 8012cbe:	3f01      	subs	r7, #1
 8012cc0:	d504      	bpl.n	8012ccc <_fwalk_sglue+0x1c>
 8012cc2:	6824      	ldr	r4, [r4, #0]
 8012cc4:	2c00      	cmp	r4, #0
 8012cc6:	d1f8      	bne.n	8012cba <_fwalk_sglue+0xa>
 8012cc8:	0030      	movs	r0, r6
 8012cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012ccc:	89ab      	ldrh	r3, [r5, #12]
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d908      	bls.n	8012ce4 <_fwalk_sglue+0x34>
 8012cd2:	220e      	movs	r2, #14
 8012cd4:	5eab      	ldrsh	r3, [r5, r2]
 8012cd6:	3301      	adds	r3, #1
 8012cd8:	d004      	beq.n	8012ce4 <_fwalk_sglue+0x34>
 8012cda:	0029      	movs	r1, r5
 8012cdc:	9800      	ldr	r0, [sp, #0]
 8012cde:	9b01      	ldr	r3, [sp, #4]
 8012ce0:	4798      	blx	r3
 8012ce2:	4306      	orrs	r6, r0
 8012ce4:	3568      	adds	r5, #104	@ 0x68
 8012ce6:	e7ea      	b.n	8012cbe <_fwalk_sglue+0xe>

08012ce8 <sniprintf>:
 8012ce8:	b40c      	push	{r2, r3}
 8012cea:	b530      	push	{r4, r5, lr}
 8012cec:	4b17      	ldr	r3, [pc, #92]	@ (8012d4c <sniprintf+0x64>)
 8012cee:	000c      	movs	r4, r1
 8012cf0:	681d      	ldr	r5, [r3, #0]
 8012cf2:	b09d      	sub	sp, #116	@ 0x74
 8012cf4:	2900      	cmp	r1, #0
 8012cf6:	da08      	bge.n	8012d0a <sniprintf+0x22>
 8012cf8:	238b      	movs	r3, #139	@ 0x8b
 8012cfa:	2001      	movs	r0, #1
 8012cfc:	602b      	str	r3, [r5, #0]
 8012cfe:	4240      	negs	r0, r0
 8012d00:	b01d      	add	sp, #116	@ 0x74
 8012d02:	bc30      	pop	{r4, r5}
 8012d04:	bc08      	pop	{r3}
 8012d06:	b002      	add	sp, #8
 8012d08:	4718      	bx	r3
 8012d0a:	2382      	movs	r3, #130	@ 0x82
 8012d0c:	466a      	mov	r2, sp
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	8293      	strh	r3, [r2, #20]
 8012d12:	2300      	movs	r3, #0
 8012d14:	9002      	str	r0, [sp, #8]
 8012d16:	9006      	str	r0, [sp, #24]
 8012d18:	4299      	cmp	r1, r3
 8012d1a:	d000      	beq.n	8012d1e <sniprintf+0x36>
 8012d1c:	1e4b      	subs	r3, r1, #1
 8012d1e:	9304      	str	r3, [sp, #16]
 8012d20:	9307      	str	r3, [sp, #28]
 8012d22:	2301      	movs	r3, #1
 8012d24:	466a      	mov	r2, sp
 8012d26:	425b      	negs	r3, r3
 8012d28:	82d3      	strh	r3, [r2, #22]
 8012d2a:	0028      	movs	r0, r5
 8012d2c:	ab21      	add	r3, sp, #132	@ 0x84
 8012d2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012d30:	a902      	add	r1, sp, #8
 8012d32:	9301      	str	r3, [sp, #4]
 8012d34:	f002 fcfe 	bl	8015734 <_svfiprintf_r>
 8012d38:	1c43      	adds	r3, r0, #1
 8012d3a:	da01      	bge.n	8012d40 <sniprintf+0x58>
 8012d3c:	238b      	movs	r3, #139	@ 0x8b
 8012d3e:	602b      	str	r3, [r5, #0]
 8012d40:	2c00      	cmp	r4, #0
 8012d42:	d0dd      	beq.n	8012d00 <sniprintf+0x18>
 8012d44:	2200      	movs	r2, #0
 8012d46:	9b02      	ldr	r3, [sp, #8]
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	e7d9      	b.n	8012d00 <sniprintf+0x18>
 8012d4c:	20000094 	.word	0x20000094

08012d50 <siprintf>:
 8012d50:	b40e      	push	{r1, r2, r3}
 8012d52:	b500      	push	{lr}
 8012d54:	490b      	ldr	r1, [pc, #44]	@ (8012d84 <siprintf+0x34>)
 8012d56:	b09c      	sub	sp, #112	@ 0x70
 8012d58:	ab1d      	add	r3, sp, #116	@ 0x74
 8012d5a:	9002      	str	r0, [sp, #8]
 8012d5c:	9006      	str	r0, [sp, #24]
 8012d5e:	9107      	str	r1, [sp, #28]
 8012d60:	9104      	str	r1, [sp, #16]
 8012d62:	4809      	ldr	r0, [pc, #36]	@ (8012d88 <siprintf+0x38>)
 8012d64:	4909      	ldr	r1, [pc, #36]	@ (8012d8c <siprintf+0x3c>)
 8012d66:	cb04      	ldmia	r3!, {r2}
 8012d68:	9105      	str	r1, [sp, #20]
 8012d6a:	6800      	ldr	r0, [r0, #0]
 8012d6c:	a902      	add	r1, sp, #8
 8012d6e:	9301      	str	r3, [sp, #4]
 8012d70:	f002 fce0 	bl	8015734 <_svfiprintf_r>
 8012d74:	2200      	movs	r2, #0
 8012d76:	9b02      	ldr	r3, [sp, #8]
 8012d78:	701a      	strb	r2, [r3, #0]
 8012d7a:	b01c      	add	sp, #112	@ 0x70
 8012d7c:	bc08      	pop	{r3}
 8012d7e:	b003      	add	sp, #12
 8012d80:	4718      	bx	r3
 8012d82:	46c0      	nop			@ (mov r8, r8)
 8012d84:	7fffffff 	.word	0x7fffffff
 8012d88:	20000094 	.word	0x20000094
 8012d8c:	ffff0208 	.word	0xffff0208

08012d90 <__sread>:
 8012d90:	b570      	push	{r4, r5, r6, lr}
 8012d92:	000c      	movs	r4, r1
 8012d94:	250e      	movs	r5, #14
 8012d96:	5f49      	ldrsh	r1, [r1, r5]
 8012d98:	f000 f910 	bl	8012fbc <_read_r>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	db03      	blt.n	8012da8 <__sread+0x18>
 8012da0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012da2:	181b      	adds	r3, r3, r0
 8012da4:	6563      	str	r3, [r4, #84]	@ 0x54
 8012da6:	bd70      	pop	{r4, r5, r6, pc}
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	4a02      	ldr	r2, [pc, #8]	@ (8012db4 <__sread+0x24>)
 8012dac:	4013      	ands	r3, r2
 8012dae:	81a3      	strh	r3, [r4, #12]
 8012db0:	e7f9      	b.n	8012da6 <__sread+0x16>
 8012db2:	46c0      	nop			@ (mov r8, r8)
 8012db4:	ffffefff 	.word	0xffffefff

08012db8 <__swrite>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	001f      	movs	r7, r3
 8012dbc:	898b      	ldrh	r3, [r1, #12]
 8012dbe:	0005      	movs	r5, r0
 8012dc0:	000c      	movs	r4, r1
 8012dc2:	0016      	movs	r6, r2
 8012dc4:	05db      	lsls	r3, r3, #23
 8012dc6:	d505      	bpl.n	8012dd4 <__swrite+0x1c>
 8012dc8:	230e      	movs	r3, #14
 8012dca:	5ec9      	ldrsh	r1, [r1, r3]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2302      	movs	r3, #2
 8012dd0:	f000 f8e0 	bl	8012f94 <_lseek_r>
 8012dd4:	89a3      	ldrh	r3, [r4, #12]
 8012dd6:	4a05      	ldr	r2, [pc, #20]	@ (8012dec <__swrite+0x34>)
 8012dd8:	0028      	movs	r0, r5
 8012dda:	4013      	ands	r3, r2
 8012ddc:	81a3      	strh	r3, [r4, #12]
 8012dde:	0032      	movs	r2, r6
 8012de0:	230e      	movs	r3, #14
 8012de2:	5ee1      	ldrsh	r1, [r4, r3]
 8012de4:	003b      	movs	r3, r7
 8012de6:	f000 f8fd 	bl	8012fe4 <_write_r>
 8012dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dec:	ffffefff 	.word	0xffffefff

08012df0 <__sseek>:
 8012df0:	b570      	push	{r4, r5, r6, lr}
 8012df2:	000c      	movs	r4, r1
 8012df4:	250e      	movs	r5, #14
 8012df6:	5f49      	ldrsh	r1, [r1, r5]
 8012df8:	f000 f8cc 	bl	8012f94 <_lseek_r>
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	1c42      	adds	r2, r0, #1
 8012e00:	d103      	bne.n	8012e0a <__sseek+0x1a>
 8012e02:	4a05      	ldr	r2, [pc, #20]	@ (8012e18 <__sseek+0x28>)
 8012e04:	4013      	ands	r3, r2
 8012e06:	81a3      	strh	r3, [r4, #12]
 8012e08:	bd70      	pop	{r4, r5, r6, pc}
 8012e0a:	2280      	movs	r2, #128	@ 0x80
 8012e0c:	0152      	lsls	r2, r2, #5
 8012e0e:	4313      	orrs	r3, r2
 8012e10:	81a3      	strh	r3, [r4, #12]
 8012e12:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e14:	e7f8      	b.n	8012e08 <__sseek+0x18>
 8012e16:	46c0      	nop			@ (mov r8, r8)
 8012e18:	ffffefff 	.word	0xffffefff

08012e1c <__sclose>:
 8012e1c:	b510      	push	{r4, lr}
 8012e1e:	230e      	movs	r3, #14
 8012e20:	5ec9      	ldrsh	r1, [r1, r3]
 8012e22:	f000 f845 	bl	8012eb0 <_close_r>
 8012e26:	bd10      	pop	{r4, pc}

08012e28 <_vsniprintf_r>:
 8012e28:	b530      	push	{r4, r5, lr}
 8012e2a:	0014      	movs	r4, r2
 8012e2c:	0005      	movs	r5, r0
 8012e2e:	001a      	movs	r2, r3
 8012e30:	b09b      	sub	sp, #108	@ 0x6c
 8012e32:	2c00      	cmp	r4, #0
 8012e34:	da05      	bge.n	8012e42 <_vsniprintf_r+0x1a>
 8012e36:	238b      	movs	r3, #139	@ 0x8b
 8012e38:	6003      	str	r3, [r0, #0]
 8012e3a:	2001      	movs	r0, #1
 8012e3c:	4240      	negs	r0, r0
 8012e3e:	b01b      	add	sp, #108	@ 0x6c
 8012e40:	bd30      	pop	{r4, r5, pc}
 8012e42:	2382      	movs	r3, #130	@ 0x82
 8012e44:	4668      	mov	r0, sp
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	8183      	strh	r3, [r0, #12]
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	9100      	str	r1, [sp, #0]
 8012e4e:	9104      	str	r1, [sp, #16]
 8012e50:	429c      	cmp	r4, r3
 8012e52:	d000      	beq.n	8012e56 <_vsniprintf_r+0x2e>
 8012e54:	1e63      	subs	r3, r4, #1
 8012e56:	9302      	str	r3, [sp, #8]
 8012e58:	9305      	str	r3, [sp, #20]
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	4669      	mov	r1, sp
 8012e5e:	425b      	negs	r3, r3
 8012e60:	81cb      	strh	r3, [r1, #14]
 8012e62:	0028      	movs	r0, r5
 8012e64:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e66:	f002 fc65 	bl	8015734 <_svfiprintf_r>
 8012e6a:	1c43      	adds	r3, r0, #1
 8012e6c:	da01      	bge.n	8012e72 <_vsniprintf_r+0x4a>
 8012e6e:	238b      	movs	r3, #139	@ 0x8b
 8012e70:	602b      	str	r3, [r5, #0]
 8012e72:	2c00      	cmp	r4, #0
 8012e74:	d0e3      	beq.n	8012e3e <_vsniprintf_r+0x16>
 8012e76:	2200      	movs	r2, #0
 8012e78:	9b00      	ldr	r3, [sp, #0]
 8012e7a:	701a      	strb	r2, [r3, #0]
 8012e7c:	e7df      	b.n	8012e3e <_vsniprintf_r+0x16>
	...

08012e80 <vsniprintf>:
 8012e80:	b513      	push	{r0, r1, r4, lr}
 8012e82:	4c04      	ldr	r4, [pc, #16]	@ (8012e94 <vsniprintf+0x14>)
 8012e84:	9300      	str	r3, [sp, #0]
 8012e86:	0013      	movs	r3, r2
 8012e88:	000a      	movs	r2, r1
 8012e8a:	0001      	movs	r1, r0
 8012e8c:	6820      	ldr	r0, [r4, #0]
 8012e8e:	f7ff ffcb 	bl	8012e28 <_vsniprintf_r>
 8012e92:	bd16      	pop	{r1, r2, r4, pc}
 8012e94:	20000094 	.word	0x20000094

08012e98 <memset>:
 8012e98:	0003      	movs	r3, r0
 8012e9a:	1882      	adds	r2, r0, r2
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d100      	bne.n	8012ea2 <memset+0xa>
 8012ea0:	4770      	bx	lr
 8012ea2:	7019      	strb	r1, [r3, #0]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	e7f9      	b.n	8012e9c <memset+0x4>

08012ea8 <_localeconv_r>:
 8012ea8:	4800      	ldr	r0, [pc, #0]	@ (8012eac <_localeconv_r+0x4>)
 8012eaa:	4770      	bx	lr
 8012eac:	200001d4 	.word	0x200001d4

08012eb0 <_close_r>:
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	b570      	push	{r4, r5, r6, lr}
 8012eb4:	4d06      	ldr	r5, [pc, #24]	@ (8012ed0 <_close_r+0x20>)
 8012eb6:	0004      	movs	r4, r0
 8012eb8:	0008      	movs	r0, r1
 8012eba:	602b      	str	r3, [r5, #0]
 8012ebc:	f7f4 fb00 	bl	80074c0 <_close>
 8012ec0:	1c43      	adds	r3, r0, #1
 8012ec2:	d103      	bne.n	8012ecc <_close_r+0x1c>
 8012ec4:	682b      	ldr	r3, [r5, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d000      	beq.n	8012ecc <_close_r+0x1c>
 8012eca:	6023      	str	r3, [r4, #0]
 8012ecc:	bd70      	pop	{r4, r5, r6, pc}
 8012ece:	46c0      	nop			@ (mov r8, r8)
 8012ed0:	20007278 	.word	0x20007278

08012ed4 <_reclaim_reent>:
 8012ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8012f90 <_reclaim_reent+0xbc>)
 8012ed6:	b570      	push	{r4, r5, r6, lr}
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	0004      	movs	r4, r0
 8012edc:	4283      	cmp	r3, r0
 8012ede:	d04f      	beq.n	8012f80 <_reclaim_reent+0xac>
 8012ee0:	69c3      	ldr	r3, [r0, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d017      	beq.n	8012f16 <_reclaim_reent+0x42>
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d00d      	beq.n	8012f08 <_reclaim_reent+0x34>
 8012eec:	2500      	movs	r5, #0
 8012eee:	69e3      	ldr	r3, [r4, #28]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	5959      	ldr	r1, [r3, r5]
 8012ef4:	2900      	cmp	r1, #0
 8012ef6:	d144      	bne.n	8012f82 <_reclaim_reent+0xae>
 8012ef8:	3504      	adds	r5, #4
 8012efa:	2d80      	cmp	r5, #128	@ 0x80
 8012efc:	d1f7      	bne.n	8012eee <_reclaim_reent+0x1a>
 8012efe:	69e3      	ldr	r3, [r4, #28]
 8012f00:	0020      	movs	r0, r4
 8012f02:	68d9      	ldr	r1, [r3, #12]
 8012f04:	f000 ff46 	bl	8013d94 <_free_r>
 8012f08:	69e3      	ldr	r3, [r4, #28]
 8012f0a:	6819      	ldr	r1, [r3, #0]
 8012f0c:	2900      	cmp	r1, #0
 8012f0e:	d002      	beq.n	8012f16 <_reclaim_reent+0x42>
 8012f10:	0020      	movs	r0, r4
 8012f12:	f000 ff3f 	bl	8013d94 <_free_r>
 8012f16:	6961      	ldr	r1, [r4, #20]
 8012f18:	2900      	cmp	r1, #0
 8012f1a:	d002      	beq.n	8012f22 <_reclaim_reent+0x4e>
 8012f1c:	0020      	movs	r0, r4
 8012f1e:	f000 ff39 	bl	8013d94 <_free_r>
 8012f22:	69e1      	ldr	r1, [r4, #28]
 8012f24:	2900      	cmp	r1, #0
 8012f26:	d002      	beq.n	8012f2e <_reclaim_reent+0x5a>
 8012f28:	0020      	movs	r0, r4
 8012f2a:	f000 ff33 	bl	8013d94 <_free_r>
 8012f2e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012f30:	2900      	cmp	r1, #0
 8012f32:	d002      	beq.n	8012f3a <_reclaim_reent+0x66>
 8012f34:	0020      	movs	r0, r4
 8012f36:	f000 ff2d 	bl	8013d94 <_free_r>
 8012f3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f3c:	2900      	cmp	r1, #0
 8012f3e:	d002      	beq.n	8012f46 <_reclaim_reent+0x72>
 8012f40:	0020      	movs	r0, r4
 8012f42:	f000 ff27 	bl	8013d94 <_free_r>
 8012f46:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012f48:	2900      	cmp	r1, #0
 8012f4a:	d002      	beq.n	8012f52 <_reclaim_reent+0x7e>
 8012f4c:	0020      	movs	r0, r4
 8012f4e:	f000 ff21 	bl	8013d94 <_free_r>
 8012f52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012f54:	2900      	cmp	r1, #0
 8012f56:	d002      	beq.n	8012f5e <_reclaim_reent+0x8a>
 8012f58:	0020      	movs	r0, r4
 8012f5a:	f000 ff1b 	bl	8013d94 <_free_r>
 8012f5e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012f60:	2900      	cmp	r1, #0
 8012f62:	d002      	beq.n	8012f6a <_reclaim_reent+0x96>
 8012f64:	0020      	movs	r0, r4
 8012f66:	f000 ff15 	bl	8013d94 <_free_r>
 8012f6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012f6c:	2900      	cmp	r1, #0
 8012f6e:	d002      	beq.n	8012f76 <_reclaim_reent+0xa2>
 8012f70:	0020      	movs	r0, r4
 8012f72:	f000 ff0f 	bl	8013d94 <_free_r>
 8012f76:	6a23      	ldr	r3, [r4, #32]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d001      	beq.n	8012f80 <_reclaim_reent+0xac>
 8012f7c:	0020      	movs	r0, r4
 8012f7e:	4798      	blx	r3
 8012f80:	bd70      	pop	{r4, r5, r6, pc}
 8012f82:	680e      	ldr	r6, [r1, #0]
 8012f84:	0020      	movs	r0, r4
 8012f86:	f000 ff05 	bl	8013d94 <_free_r>
 8012f8a:	0031      	movs	r1, r6
 8012f8c:	e7b2      	b.n	8012ef4 <_reclaim_reent+0x20>
 8012f8e:	46c0      	nop			@ (mov r8, r8)
 8012f90:	20000094 	.word	0x20000094

08012f94 <_lseek_r>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	0004      	movs	r4, r0
 8012f98:	0008      	movs	r0, r1
 8012f9a:	0011      	movs	r1, r2
 8012f9c:	001a      	movs	r2, r3
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	4d05      	ldr	r5, [pc, #20]	@ (8012fb8 <_lseek_r+0x24>)
 8012fa2:	602b      	str	r3, [r5, #0]
 8012fa4:	f7f4 faad 	bl	8007502 <_lseek>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d103      	bne.n	8012fb4 <_lseek_r+0x20>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d000      	beq.n	8012fb4 <_lseek_r+0x20>
 8012fb2:	6023      	str	r3, [r4, #0]
 8012fb4:	bd70      	pop	{r4, r5, r6, pc}
 8012fb6:	46c0      	nop			@ (mov r8, r8)
 8012fb8:	20007278 	.word	0x20007278

08012fbc <_read_r>:
 8012fbc:	b570      	push	{r4, r5, r6, lr}
 8012fbe:	0004      	movs	r4, r0
 8012fc0:	0008      	movs	r0, r1
 8012fc2:	0011      	movs	r1, r2
 8012fc4:	001a      	movs	r2, r3
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	4d05      	ldr	r5, [pc, #20]	@ (8012fe0 <_read_r+0x24>)
 8012fca:	602b      	str	r3, [r5, #0]
 8012fcc:	f7f4 fa3f 	bl	800744e <_read>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d103      	bne.n	8012fdc <_read_r+0x20>
 8012fd4:	682b      	ldr	r3, [r5, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d000      	beq.n	8012fdc <_read_r+0x20>
 8012fda:	6023      	str	r3, [r4, #0]
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
 8012fde:	46c0      	nop			@ (mov r8, r8)
 8012fe0:	20007278 	.word	0x20007278

08012fe4 <_write_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	0004      	movs	r4, r0
 8012fe8:	0008      	movs	r0, r1
 8012fea:	0011      	movs	r1, r2
 8012fec:	001a      	movs	r2, r3
 8012fee:	2300      	movs	r3, #0
 8012ff0:	4d05      	ldr	r5, [pc, #20]	@ (8013008 <_write_r+0x24>)
 8012ff2:	602b      	str	r3, [r5, #0]
 8012ff4:	f7f4 fa48 	bl	8007488 <_write>
 8012ff8:	1c43      	adds	r3, r0, #1
 8012ffa:	d103      	bne.n	8013004 <_write_r+0x20>
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d000      	beq.n	8013004 <_write_r+0x20>
 8013002:	6023      	str	r3, [r4, #0]
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	46c0      	nop			@ (mov r8, r8)
 8013008:	20007278 	.word	0x20007278

0801300c <__errno>:
 801300c:	4b01      	ldr	r3, [pc, #4]	@ (8013014 <__errno+0x8>)
 801300e:	6818      	ldr	r0, [r3, #0]
 8013010:	4770      	bx	lr
 8013012:	46c0      	nop			@ (mov r8, r8)
 8013014:	20000094 	.word	0x20000094

08013018 <__libc_init_array>:
 8013018:	b570      	push	{r4, r5, r6, lr}
 801301a:	2600      	movs	r6, #0
 801301c:	4c0c      	ldr	r4, [pc, #48]	@ (8013050 <__libc_init_array+0x38>)
 801301e:	4d0d      	ldr	r5, [pc, #52]	@ (8013054 <__libc_init_array+0x3c>)
 8013020:	1b64      	subs	r4, r4, r5
 8013022:	10a4      	asrs	r4, r4, #2
 8013024:	42a6      	cmp	r6, r4
 8013026:	d109      	bne.n	801303c <__libc_init_array+0x24>
 8013028:	2600      	movs	r6, #0
 801302a:	f003 fc3f 	bl	80168ac <_init>
 801302e:	4c0a      	ldr	r4, [pc, #40]	@ (8013058 <__libc_init_array+0x40>)
 8013030:	4d0a      	ldr	r5, [pc, #40]	@ (801305c <__libc_init_array+0x44>)
 8013032:	1b64      	subs	r4, r4, r5
 8013034:	10a4      	asrs	r4, r4, #2
 8013036:	42a6      	cmp	r6, r4
 8013038:	d105      	bne.n	8013046 <__libc_init_array+0x2e>
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	00b3      	lsls	r3, r6, #2
 801303e:	58eb      	ldr	r3, [r5, r3]
 8013040:	4798      	blx	r3
 8013042:	3601      	adds	r6, #1
 8013044:	e7ee      	b.n	8013024 <__libc_init_array+0xc>
 8013046:	00b3      	lsls	r3, r6, #2
 8013048:	58eb      	ldr	r3, [r5, r3]
 801304a:	4798      	blx	r3
 801304c:	3601      	adds	r6, #1
 801304e:	e7f2      	b.n	8013036 <__libc_init_array+0x1e>
 8013050:	08017748 	.word	0x08017748
 8013054:	08017748 	.word	0x08017748
 8013058:	08017750 	.word	0x08017750
 801305c:	08017748 	.word	0x08017748

08013060 <__retarget_lock_init_recursive>:
 8013060:	4770      	bx	lr

08013062 <__retarget_lock_acquire_recursive>:
 8013062:	4770      	bx	lr

08013064 <__retarget_lock_release_recursive>:
 8013064:	4770      	bx	lr

08013066 <memchr>:
 8013066:	b2c9      	uxtb	r1, r1
 8013068:	1882      	adds	r2, r0, r2
 801306a:	4290      	cmp	r0, r2
 801306c:	d101      	bne.n	8013072 <memchr+0xc>
 801306e:	2000      	movs	r0, #0
 8013070:	4770      	bx	lr
 8013072:	7803      	ldrb	r3, [r0, #0]
 8013074:	428b      	cmp	r3, r1
 8013076:	d0fb      	beq.n	8013070 <memchr+0xa>
 8013078:	3001      	adds	r0, #1
 801307a:	e7f6      	b.n	801306a <memchr+0x4>

0801307c <memcpy>:
 801307c:	2300      	movs	r3, #0
 801307e:	b510      	push	{r4, lr}
 8013080:	429a      	cmp	r2, r3
 8013082:	d100      	bne.n	8013086 <memcpy+0xa>
 8013084:	bd10      	pop	{r4, pc}
 8013086:	5ccc      	ldrb	r4, [r1, r3]
 8013088:	54c4      	strb	r4, [r0, r3]
 801308a:	3301      	adds	r3, #1
 801308c:	e7f8      	b.n	8013080 <memcpy+0x4>

0801308e <quorem>:
 801308e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013090:	6902      	ldr	r2, [r0, #16]
 8013092:	690f      	ldr	r7, [r1, #16]
 8013094:	b087      	sub	sp, #28
 8013096:	0006      	movs	r6, r0
 8013098:	000b      	movs	r3, r1
 801309a:	2000      	movs	r0, #0
 801309c:	9102      	str	r1, [sp, #8]
 801309e:	42ba      	cmp	r2, r7
 80130a0:	db6d      	blt.n	801317e <quorem+0xf0>
 80130a2:	3f01      	subs	r7, #1
 80130a4:	00bc      	lsls	r4, r7, #2
 80130a6:	3314      	adds	r3, #20
 80130a8:	9305      	str	r3, [sp, #20]
 80130aa:	191b      	adds	r3, r3, r4
 80130ac:	9303      	str	r3, [sp, #12]
 80130ae:	0033      	movs	r3, r6
 80130b0:	3314      	adds	r3, #20
 80130b2:	191c      	adds	r4, r3, r4
 80130b4:	9301      	str	r3, [sp, #4]
 80130b6:	6823      	ldr	r3, [r4, #0]
 80130b8:	9304      	str	r3, [sp, #16]
 80130ba:	9b03      	ldr	r3, [sp, #12]
 80130bc:	9804      	ldr	r0, [sp, #16]
 80130be:	681d      	ldr	r5, [r3, #0]
 80130c0:	3501      	adds	r5, #1
 80130c2:	0029      	movs	r1, r5
 80130c4:	f7ed f83c 	bl	8000140 <__udivsi3>
 80130c8:	9b04      	ldr	r3, [sp, #16]
 80130ca:	9000      	str	r0, [sp, #0]
 80130cc:	42ab      	cmp	r3, r5
 80130ce:	d32b      	bcc.n	8013128 <quorem+0x9a>
 80130d0:	9b05      	ldr	r3, [sp, #20]
 80130d2:	9d01      	ldr	r5, [sp, #4]
 80130d4:	469c      	mov	ip, r3
 80130d6:	2300      	movs	r3, #0
 80130d8:	9305      	str	r3, [sp, #20]
 80130da:	9304      	str	r3, [sp, #16]
 80130dc:	4662      	mov	r2, ip
 80130de:	ca08      	ldmia	r2!, {r3}
 80130e0:	6828      	ldr	r0, [r5, #0]
 80130e2:	4694      	mov	ip, r2
 80130e4:	9a00      	ldr	r2, [sp, #0]
 80130e6:	b299      	uxth	r1, r3
 80130e8:	4351      	muls	r1, r2
 80130ea:	9a05      	ldr	r2, [sp, #20]
 80130ec:	0c1b      	lsrs	r3, r3, #16
 80130ee:	1889      	adds	r1, r1, r2
 80130f0:	9a00      	ldr	r2, [sp, #0]
 80130f2:	4353      	muls	r3, r2
 80130f4:	0c0a      	lsrs	r2, r1, #16
 80130f6:	189b      	adds	r3, r3, r2
 80130f8:	0c1a      	lsrs	r2, r3, #16
 80130fa:	b289      	uxth	r1, r1
 80130fc:	9205      	str	r2, [sp, #20]
 80130fe:	b282      	uxth	r2, r0
 8013100:	1a52      	subs	r2, r2, r1
 8013102:	9904      	ldr	r1, [sp, #16]
 8013104:	0c00      	lsrs	r0, r0, #16
 8013106:	1852      	adds	r2, r2, r1
 8013108:	b29b      	uxth	r3, r3
 801310a:	1411      	asrs	r1, r2, #16
 801310c:	1ac3      	subs	r3, r0, r3
 801310e:	185b      	adds	r3, r3, r1
 8013110:	1419      	asrs	r1, r3, #16
 8013112:	b292      	uxth	r2, r2
 8013114:	041b      	lsls	r3, r3, #16
 8013116:	431a      	orrs	r2, r3
 8013118:	9b03      	ldr	r3, [sp, #12]
 801311a:	9104      	str	r1, [sp, #16]
 801311c:	c504      	stmia	r5!, {r2}
 801311e:	4563      	cmp	r3, ip
 8013120:	d2dc      	bcs.n	80130dc <quorem+0x4e>
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d030      	beq.n	801318a <quorem+0xfc>
 8013128:	0030      	movs	r0, r6
 801312a:	9902      	ldr	r1, [sp, #8]
 801312c:	f001 fa12 	bl	8014554 <__mcmp>
 8013130:	2800      	cmp	r0, #0
 8013132:	db23      	blt.n	801317c <quorem+0xee>
 8013134:	0034      	movs	r4, r6
 8013136:	2500      	movs	r5, #0
 8013138:	9902      	ldr	r1, [sp, #8]
 801313a:	3414      	adds	r4, #20
 801313c:	3114      	adds	r1, #20
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	c901      	ldmia	r1!, {r0}
 8013142:	9302      	str	r3, [sp, #8]
 8013144:	466b      	mov	r3, sp
 8013146:	891b      	ldrh	r3, [r3, #8]
 8013148:	b282      	uxth	r2, r0
 801314a:	1a9a      	subs	r2, r3, r2
 801314c:	9b02      	ldr	r3, [sp, #8]
 801314e:	1952      	adds	r2, r2, r5
 8013150:	0c00      	lsrs	r0, r0, #16
 8013152:	0c1b      	lsrs	r3, r3, #16
 8013154:	1a1b      	subs	r3, r3, r0
 8013156:	1410      	asrs	r0, r2, #16
 8013158:	181b      	adds	r3, r3, r0
 801315a:	141d      	asrs	r5, r3, #16
 801315c:	b292      	uxth	r2, r2
 801315e:	041b      	lsls	r3, r3, #16
 8013160:	431a      	orrs	r2, r3
 8013162:	9b03      	ldr	r3, [sp, #12]
 8013164:	c404      	stmia	r4!, {r2}
 8013166:	428b      	cmp	r3, r1
 8013168:	d2e9      	bcs.n	801313e <quorem+0xb0>
 801316a:	9a01      	ldr	r2, [sp, #4]
 801316c:	00bb      	lsls	r3, r7, #2
 801316e:	18d3      	adds	r3, r2, r3
 8013170:	681a      	ldr	r2, [r3, #0]
 8013172:	2a00      	cmp	r2, #0
 8013174:	d013      	beq.n	801319e <quorem+0x110>
 8013176:	9b00      	ldr	r3, [sp, #0]
 8013178:	3301      	adds	r3, #1
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	9800      	ldr	r0, [sp, #0]
 801317e:	b007      	add	sp, #28
 8013180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013182:	6823      	ldr	r3, [r4, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d104      	bne.n	8013192 <quorem+0x104>
 8013188:	3f01      	subs	r7, #1
 801318a:	9b01      	ldr	r3, [sp, #4]
 801318c:	3c04      	subs	r4, #4
 801318e:	42a3      	cmp	r3, r4
 8013190:	d3f7      	bcc.n	8013182 <quorem+0xf4>
 8013192:	6137      	str	r7, [r6, #16]
 8013194:	e7c8      	b.n	8013128 <quorem+0x9a>
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	2a00      	cmp	r2, #0
 801319a:	d104      	bne.n	80131a6 <quorem+0x118>
 801319c:	3f01      	subs	r7, #1
 801319e:	9a01      	ldr	r2, [sp, #4]
 80131a0:	3b04      	subs	r3, #4
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d3f7      	bcc.n	8013196 <quorem+0x108>
 80131a6:	6137      	str	r7, [r6, #16]
 80131a8:	e7e5      	b.n	8013176 <quorem+0xe8>
	...

080131ac <_dtoa_r>:
 80131ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ae:	0014      	movs	r4, r2
 80131b0:	001d      	movs	r5, r3
 80131b2:	69c6      	ldr	r6, [r0, #28]
 80131b4:	b09d      	sub	sp, #116	@ 0x74
 80131b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80131b8:	950b      	str	r5, [sp, #44]	@ 0x2c
 80131ba:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80131bc:	9003      	str	r0, [sp, #12]
 80131be:	2e00      	cmp	r6, #0
 80131c0:	d10f      	bne.n	80131e2 <_dtoa_r+0x36>
 80131c2:	2010      	movs	r0, #16
 80131c4:	f000 fe30 	bl	8013e28 <malloc>
 80131c8:	9b03      	ldr	r3, [sp, #12]
 80131ca:	1e02      	subs	r2, r0, #0
 80131cc:	61d8      	str	r0, [r3, #28]
 80131ce:	d104      	bne.n	80131da <_dtoa_r+0x2e>
 80131d0:	21ef      	movs	r1, #239	@ 0xef
 80131d2:	4bc7      	ldr	r3, [pc, #796]	@ (80134f0 <_dtoa_r+0x344>)
 80131d4:	48c7      	ldr	r0, [pc, #796]	@ (80134f4 <_dtoa_r+0x348>)
 80131d6:	f002 fc99 	bl	8015b0c <__assert_func>
 80131da:	6046      	str	r6, [r0, #4]
 80131dc:	6086      	str	r6, [r0, #8]
 80131de:	6006      	str	r6, [r0, #0]
 80131e0:	60c6      	str	r6, [r0, #12]
 80131e2:	9b03      	ldr	r3, [sp, #12]
 80131e4:	69db      	ldr	r3, [r3, #28]
 80131e6:	6819      	ldr	r1, [r3, #0]
 80131e8:	2900      	cmp	r1, #0
 80131ea:	d00b      	beq.n	8013204 <_dtoa_r+0x58>
 80131ec:	685a      	ldr	r2, [r3, #4]
 80131ee:	2301      	movs	r3, #1
 80131f0:	4093      	lsls	r3, r2
 80131f2:	604a      	str	r2, [r1, #4]
 80131f4:	608b      	str	r3, [r1, #8]
 80131f6:	9803      	ldr	r0, [sp, #12]
 80131f8:	f000 ff16 	bl	8014028 <_Bfree>
 80131fc:	2200      	movs	r2, #0
 80131fe:	9b03      	ldr	r3, [sp, #12]
 8013200:	69db      	ldr	r3, [r3, #28]
 8013202:	601a      	str	r2, [r3, #0]
 8013204:	2d00      	cmp	r5, #0
 8013206:	da1e      	bge.n	8013246 <_dtoa_r+0x9a>
 8013208:	2301      	movs	r3, #1
 801320a:	603b      	str	r3, [r7, #0]
 801320c:	006b      	lsls	r3, r5, #1
 801320e:	085b      	lsrs	r3, r3, #1
 8013210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013212:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013214:	4bb8      	ldr	r3, [pc, #736]	@ (80134f8 <_dtoa_r+0x34c>)
 8013216:	4ab8      	ldr	r2, [pc, #736]	@ (80134f8 <_dtoa_r+0x34c>)
 8013218:	403b      	ands	r3, r7
 801321a:	4293      	cmp	r3, r2
 801321c:	d116      	bne.n	801324c <_dtoa_r+0xa0>
 801321e:	4bb7      	ldr	r3, [pc, #732]	@ (80134fc <_dtoa_r+0x350>)
 8013220:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013222:	6013      	str	r3, [r2, #0]
 8013224:	033b      	lsls	r3, r7, #12
 8013226:	0b1b      	lsrs	r3, r3, #12
 8013228:	4323      	orrs	r3, r4
 801322a:	d101      	bne.n	8013230 <_dtoa_r+0x84>
 801322c:	f000 fd83 	bl	8013d36 <_dtoa_r+0xb8a>
 8013230:	4bb3      	ldr	r3, [pc, #716]	@ (8013500 <_dtoa_r+0x354>)
 8013232:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013234:	9308      	str	r3, [sp, #32]
 8013236:	2a00      	cmp	r2, #0
 8013238:	d002      	beq.n	8013240 <_dtoa_r+0x94>
 801323a:	4bb2      	ldr	r3, [pc, #712]	@ (8013504 <_dtoa_r+0x358>)
 801323c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801323e:	6013      	str	r3, [r2, #0]
 8013240:	9808      	ldr	r0, [sp, #32]
 8013242:	b01d      	add	sp, #116	@ 0x74
 8013244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013246:	2300      	movs	r3, #0
 8013248:	603b      	str	r3, [r7, #0]
 801324a:	e7e2      	b.n	8013212 <_dtoa_r+0x66>
 801324c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801324e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013250:	9212      	str	r2, [sp, #72]	@ 0x48
 8013252:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013254:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013256:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013258:	2200      	movs	r2, #0
 801325a:	2300      	movs	r3, #0
 801325c:	f7ed f8f6 	bl	800044c <__aeabi_dcmpeq>
 8013260:	1e06      	subs	r6, r0, #0
 8013262:	d00b      	beq.n	801327c <_dtoa_r+0xd0>
 8013264:	2301      	movs	r3, #1
 8013266:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8013268:	6013      	str	r3, [r2, #0]
 801326a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801326c:	2b00      	cmp	r3, #0
 801326e:	d002      	beq.n	8013276 <_dtoa_r+0xca>
 8013270:	4ba5      	ldr	r3, [pc, #660]	@ (8013508 <_dtoa_r+0x35c>)
 8013272:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013274:	6013      	str	r3, [r2, #0]
 8013276:	4ba5      	ldr	r3, [pc, #660]	@ (801350c <_dtoa_r+0x360>)
 8013278:	9308      	str	r3, [sp, #32]
 801327a:	e7e1      	b.n	8013240 <_dtoa_r+0x94>
 801327c:	ab1a      	add	r3, sp, #104	@ 0x68
 801327e:	9301      	str	r3, [sp, #4]
 8013280:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013282:	9300      	str	r3, [sp, #0]
 8013284:	9803      	ldr	r0, [sp, #12]
 8013286:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013288:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801328a:	f001 fa85 	bl	8014798 <__d2b>
 801328e:	007a      	lsls	r2, r7, #1
 8013290:	9005      	str	r0, [sp, #20]
 8013292:	0d52      	lsrs	r2, r2, #21
 8013294:	d100      	bne.n	8013298 <_dtoa_r+0xec>
 8013296:	e07b      	b.n	8013390 <_dtoa_r+0x1e4>
 8013298:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801329a:	9618      	str	r6, [sp, #96]	@ 0x60
 801329c:	0319      	lsls	r1, r3, #12
 801329e:	4b9c      	ldr	r3, [pc, #624]	@ (8013510 <_dtoa_r+0x364>)
 80132a0:	0b09      	lsrs	r1, r1, #12
 80132a2:	430b      	orrs	r3, r1
 80132a4:	499b      	ldr	r1, [pc, #620]	@ (8013514 <_dtoa_r+0x368>)
 80132a6:	1857      	adds	r7, r2, r1
 80132a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80132aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80132ac:	0019      	movs	r1, r3
 80132ae:	2200      	movs	r2, #0
 80132b0:	4b99      	ldr	r3, [pc, #612]	@ (8013518 <_dtoa_r+0x36c>)
 80132b2:	f7ef fc2b 	bl	8002b0c <__aeabi_dsub>
 80132b6:	4a99      	ldr	r2, [pc, #612]	@ (801351c <_dtoa_r+0x370>)
 80132b8:	4b99      	ldr	r3, [pc, #612]	@ (8013520 <_dtoa_r+0x374>)
 80132ba:	f7ef f95f 	bl	800257c <__aeabi_dmul>
 80132be:	4a99      	ldr	r2, [pc, #612]	@ (8013524 <_dtoa_r+0x378>)
 80132c0:	4b99      	ldr	r3, [pc, #612]	@ (8013528 <_dtoa_r+0x37c>)
 80132c2:	f7ee f9b3 	bl	800162c <__aeabi_dadd>
 80132c6:	0004      	movs	r4, r0
 80132c8:	0038      	movs	r0, r7
 80132ca:	000d      	movs	r5, r1
 80132cc:	f7f0 f818 	bl	8003300 <__aeabi_i2d>
 80132d0:	4a96      	ldr	r2, [pc, #600]	@ (801352c <_dtoa_r+0x380>)
 80132d2:	4b97      	ldr	r3, [pc, #604]	@ (8013530 <_dtoa_r+0x384>)
 80132d4:	f7ef f952 	bl	800257c <__aeabi_dmul>
 80132d8:	0002      	movs	r2, r0
 80132da:	000b      	movs	r3, r1
 80132dc:	0020      	movs	r0, r4
 80132de:	0029      	movs	r1, r5
 80132e0:	f7ee f9a4 	bl	800162c <__aeabi_dadd>
 80132e4:	0004      	movs	r4, r0
 80132e6:	000d      	movs	r5, r1
 80132e8:	f7ef ffce 	bl	8003288 <__aeabi_d2iz>
 80132ec:	2200      	movs	r2, #0
 80132ee:	9004      	str	r0, [sp, #16]
 80132f0:	2300      	movs	r3, #0
 80132f2:	0020      	movs	r0, r4
 80132f4:	0029      	movs	r1, r5
 80132f6:	f7ed f8af 	bl	8000458 <__aeabi_dcmplt>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	d00b      	beq.n	8013316 <_dtoa_r+0x16a>
 80132fe:	9804      	ldr	r0, [sp, #16]
 8013300:	f7ef fffe 	bl	8003300 <__aeabi_i2d>
 8013304:	002b      	movs	r3, r5
 8013306:	0022      	movs	r2, r4
 8013308:	f7ed f8a0 	bl	800044c <__aeabi_dcmpeq>
 801330c:	4243      	negs	r3, r0
 801330e:	4158      	adcs	r0, r3
 8013310:	9b04      	ldr	r3, [sp, #16]
 8013312:	1a1b      	subs	r3, r3, r0
 8013314:	9304      	str	r3, [sp, #16]
 8013316:	2301      	movs	r3, #1
 8013318:	9315      	str	r3, [sp, #84]	@ 0x54
 801331a:	9b04      	ldr	r3, [sp, #16]
 801331c:	2b16      	cmp	r3, #22
 801331e:	d810      	bhi.n	8013342 <_dtoa_r+0x196>
 8013320:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013322:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013324:	9a04      	ldr	r2, [sp, #16]
 8013326:	4b83      	ldr	r3, [pc, #524]	@ (8013534 <_dtoa_r+0x388>)
 8013328:	00d2      	lsls	r2, r2, #3
 801332a:	189b      	adds	r3, r3, r2
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	f7ed f892 	bl	8000458 <__aeabi_dcmplt>
 8013334:	2800      	cmp	r0, #0
 8013336:	d047      	beq.n	80133c8 <_dtoa_r+0x21c>
 8013338:	9b04      	ldr	r3, [sp, #16]
 801333a:	3b01      	subs	r3, #1
 801333c:	9304      	str	r3, [sp, #16]
 801333e:	2300      	movs	r3, #0
 8013340:	9315      	str	r3, [sp, #84]	@ 0x54
 8013342:	2200      	movs	r2, #0
 8013344:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013346:	9206      	str	r2, [sp, #24]
 8013348:	1bdb      	subs	r3, r3, r7
 801334a:	1e5a      	subs	r2, r3, #1
 801334c:	d53e      	bpl.n	80133cc <_dtoa_r+0x220>
 801334e:	2201      	movs	r2, #1
 8013350:	1ad3      	subs	r3, r2, r3
 8013352:	9306      	str	r3, [sp, #24]
 8013354:	2300      	movs	r3, #0
 8013356:	930d      	str	r3, [sp, #52]	@ 0x34
 8013358:	9b04      	ldr	r3, [sp, #16]
 801335a:	2b00      	cmp	r3, #0
 801335c:	db38      	blt.n	80133d0 <_dtoa_r+0x224>
 801335e:	9a04      	ldr	r2, [sp, #16]
 8013360:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013362:	4694      	mov	ip, r2
 8013364:	4463      	add	r3, ip
 8013366:	930d      	str	r3, [sp, #52]	@ 0x34
 8013368:	2300      	movs	r3, #0
 801336a:	9214      	str	r2, [sp, #80]	@ 0x50
 801336c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801336e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013370:	2401      	movs	r4, #1
 8013372:	2b09      	cmp	r3, #9
 8013374:	d867      	bhi.n	8013446 <_dtoa_r+0x29a>
 8013376:	2b05      	cmp	r3, #5
 8013378:	dd02      	ble.n	8013380 <_dtoa_r+0x1d4>
 801337a:	2400      	movs	r4, #0
 801337c:	3b04      	subs	r3, #4
 801337e:	9322      	str	r3, [sp, #136]	@ 0x88
 8013380:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013382:	1e98      	subs	r0, r3, #2
 8013384:	2803      	cmp	r0, #3
 8013386:	d867      	bhi.n	8013458 <_dtoa_r+0x2ac>
 8013388:	f7ec fec6 	bl	8000118 <__gnu_thumb1_case_uqi>
 801338c:	5b383a2b 	.word	0x5b383a2b
 8013390:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013392:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8013394:	18f6      	adds	r6, r6, r3
 8013396:	4b68      	ldr	r3, [pc, #416]	@ (8013538 <_dtoa_r+0x38c>)
 8013398:	18f2      	adds	r2, r6, r3
 801339a:	2a20      	cmp	r2, #32
 801339c:	dd0f      	ble.n	80133be <_dtoa_r+0x212>
 801339e:	2340      	movs	r3, #64	@ 0x40
 80133a0:	1a9b      	subs	r3, r3, r2
 80133a2:	409f      	lsls	r7, r3
 80133a4:	4b65      	ldr	r3, [pc, #404]	@ (801353c <_dtoa_r+0x390>)
 80133a6:	0038      	movs	r0, r7
 80133a8:	18f3      	adds	r3, r6, r3
 80133aa:	40dc      	lsrs	r4, r3
 80133ac:	4320      	orrs	r0, r4
 80133ae:	f7ef ffd5 	bl	800335c <__aeabi_ui2d>
 80133b2:	2201      	movs	r2, #1
 80133b4:	4b62      	ldr	r3, [pc, #392]	@ (8013540 <_dtoa_r+0x394>)
 80133b6:	1e77      	subs	r7, r6, #1
 80133b8:	18cb      	adds	r3, r1, r3
 80133ba:	9218      	str	r2, [sp, #96]	@ 0x60
 80133bc:	e776      	b.n	80132ac <_dtoa_r+0x100>
 80133be:	2320      	movs	r3, #32
 80133c0:	0020      	movs	r0, r4
 80133c2:	1a9b      	subs	r3, r3, r2
 80133c4:	4098      	lsls	r0, r3
 80133c6:	e7f2      	b.n	80133ae <_dtoa_r+0x202>
 80133c8:	9015      	str	r0, [sp, #84]	@ 0x54
 80133ca:	e7ba      	b.n	8013342 <_dtoa_r+0x196>
 80133cc:	920d      	str	r2, [sp, #52]	@ 0x34
 80133ce:	e7c3      	b.n	8013358 <_dtoa_r+0x1ac>
 80133d0:	9b06      	ldr	r3, [sp, #24]
 80133d2:	9a04      	ldr	r2, [sp, #16]
 80133d4:	1a9b      	subs	r3, r3, r2
 80133d6:	9306      	str	r3, [sp, #24]
 80133d8:	4253      	negs	r3, r2
 80133da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80133dc:	2300      	movs	r3, #0
 80133de:	9314      	str	r3, [sp, #80]	@ 0x50
 80133e0:	e7c5      	b.n	801336e <_dtoa_r+0x1c2>
 80133e2:	2300      	movs	r3, #0
 80133e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80133e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80133e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80133ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	dc13      	bgt.n	8013418 <_dtoa_r+0x26c>
 80133f0:	2301      	movs	r3, #1
 80133f2:	001a      	movs	r2, r3
 80133f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80133f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80133f8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80133fa:	e00d      	b.n	8013418 <_dtoa_r+0x26c>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e7f1      	b.n	80133e4 <_dtoa_r+0x238>
 8013400:	2300      	movs	r3, #0
 8013402:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013404:	9310      	str	r3, [sp, #64]	@ 0x40
 8013406:	4694      	mov	ip, r2
 8013408:	9b04      	ldr	r3, [sp, #16]
 801340a:	4463      	add	r3, ip
 801340c:	930e      	str	r3, [sp, #56]	@ 0x38
 801340e:	3301      	adds	r3, #1
 8013410:	9309      	str	r3, [sp, #36]	@ 0x24
 8013412:	2b00      	cmp	r3, #0
 8013414:	dc00      	bgt.n	8013418 <_dtoa_r+0x26c>
 8013416:	2301      	movs	r3, #1
 8013418:	9a03      	ldr	r2, [sp, #12]
 801341a:	2100      	movs	r1, #0
 801341c:	69d0      	ldr	r0, [r2, #28]
 801341e:	2204      	movs	r2, #4
 8013420:	0015      	movs	r5, r2
 8013422:	3514      	adds	r5, #20
 8013424:	429d      	cmp	r5, r3
 8013426:	d91b      	bls.n	8013460 <_dtoa_r+0x2b4>
 8013428:	6041      	str	r1, [r0, #4]
 801342a:	9803      	ldr	r0, [sp, #12]
 801342c:	f000 fdb8 	bl	8013fa0 <_Balloc>
 8013430:	9008      	str	r0, [sp, #32]
 8013432:	2800      	cmp	r0, #0
 8013434:	d117      	bne.n	8013466 <_dtoa_r+0x2ba>
 8013436:	21b0      	movs	r1, #176	@ 0xb0
 8013438:	4b42      	ldr	r3, [pc, #264]	@ (8013544 <_dtoa_r+0x398>)
 801343a:	482e      	ldr	r0, [pc, #184]	@ (80134f4 <_dtoa_r+0x348>)
 801343c:	9a08      	ldr	r2, [sp, #32]
 801343e:	31ff      	adds	r1, #255	@ 0xff
 8013440:	e6c9      	b.n	80131d6 <_dtoa_r+0x2a>
 8013442:	2301      	movs	r3, #1
 8013444:	e7dd      	b.n	8013402 <_dtoa_r+0x256>
 8013446:	2300      	movs	r3, #0
 8013448:	9410      	str	r4, [sp, #64]	@ 0x40
 801344a:	9322      	str	r3, [sp, #136]	@ 0x88
 801344c:	3b01      	subs	r3, #1
 801344e:	930e      	str	r3, [sp, #56]	@ 0x38
 8013450:	9309      	str	r3, [sp, #36]	@ 0x24
 8013452:	2200      	movs	r2, #0
 8013454:	3313      	adds	r3, #19
 8013456:	e7cf      	b.n	80133f8 <_dtoa_r+0x24c>
 8013458:	2301      	movs	r3, #1
 801345a:	9310      	str	r3, [sp, #64]	@ 0x40
 801345c:	3b02      	subs	r3, #2
 801345e:	e7f6      	b.n	801344e <_dtoa_r+0x2a2>
 8013460:	3101      	adds	r1, #1
 8013462:	0052      	lsls	r2, r2, #1
 8013464:	e7dc      	b.n	8013420 <_dtoa_r+0x274>
 8013466:	9b03      	ldr	r3, [sp, #12]
 8013468:	9a08      	ldr	r2, [sp, #32]
 801346a:	69db      	ldr	r3, [r3, #28]
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013470:	2b0e      	cmp	r3, #14
 8013472:	d900      	bls.n	8013476 <_dtoa_r+0x2ca>
 8013474:	e0d9      	b.n	801362a <_dtoa_r+0x47e>
 8013476:	2c00      	cmp	r4, #0
 8013478:	d100      	bne.n	801347c <_dtoa_r+0x2d0>
 801347a:	e0d6      	b.n	801362a <_dtoa_r+0x47e>
 801347c:	9b04      	ldr	r3, [sp, #16]
 801347e:	2b00      	cmp	r3, #0
 8013480:	dd64      	ble.n	801354c <_dtoa_r+0x3a0>
 8013482:	210f      	movs	r1, #15
 8013484:	9a04      	ldr	r2, [sp, #16]
 8013486:	4b2b      	ldr	r3, [pc, #172]	@ (8013534 <_dtoa_r+0x388>)
 8013488:	400a      	ands	r2, r1
 801348a:	00d2      	lsls	r2, r2, #3
 801348c:	189b      	adds	r3, r3, r2
 801348e:	681e      	ldr	r6, [r3, #0]
 8013490:	685f      	ldr	r7, [r3, #4]
 8013492:	9b04      	ldr	r3, [sp, #16]
 8013494:	2402      	movs	r4, #2
 8013496:	111d      	asrs	r5, r3, #4
 8013498:	05db      	lsls	r3, r3, #23
 801349a:	d50a      	bpl.n	80134b2 <_dtoa_r+0x306>
 801349c:	4b2a      	ldr	r3, [pc, #168]	@ (8013548 <_dtoa_r+0x39c>)
 801349e:	400d      	ands	r5, r1
 80134a0:	6a1a      	ldr	r2, [r3, #32]
 80134a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80134a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80134a8:	f7ee fc24 	bl	8001cf4 <__aeabi_ddiv>
 80134ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80134ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 80134b0:	3401      	adds	r4, #1
 80134b2:	4b25      	ldr	r3, [pc, #148]	@ (8013548 <_dtoa_r+0x39c>)
 80134b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80134b6:	2d00      	cmp	r5, #0
 80134b8:	d108      	bne.n	80134cc <_dtoa_r+0x320>
 80134ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80134bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80134be:	0032      	movs	r2, r6
 80134c0:	003b      	movs	r3, r7
 80134c2:	f7ee fc17 	bl	8001cf4 <__aeabi_ddiv>
 80134c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80134c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80134ca:	e05a      	b.n	8013582 <_dtoa_r+0x3d6>
 80134cc:	2301      	movs	r3, #1
 80134ce:	421d      	tst	r5, r3
 80134d0:	d009      	beq.n	80134e6 <_dtoa_r+0x33a>
 80134d2:	18e4      	adds	r4, r4, r3
 80134d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80134d6:	0030      	movs	r0, r6
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	0039      	movs	r1, r7
 80134de:	f7ef f84d 	bl	800257c <__aeabi_dmul>
 80134e2:	0006      	movs	r6, r0
 80134e4:	000f      	movs	r7, r1
 80134e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80134e8:	106d      	asrs	r5, r5, #1
 80134ea:	3308      	adds	r3, #8
 80134ec:	e7e2      	b.n	80134b4 <_dtoa_r+0x308>
 80134ee:	46c0      	nop			@ (mov r8, r8)
 80134f0:	08017356 	.word	0x08017356
 80134f4:	0801736d 	.word	0x0801736d
 80134f8:	7ff00000 	.word	0x7ff00000
 80134fc:	0000270f 	.word	0x0000270f
 8013500:	08017352 	.word	0x08017352
 8013504:	08017355 	.word	0x08017355
 8013508:	08017321 	.word	0x08017321
 801350c:	08017320 	.word	0x08017320
 8013510:	3ff00000 	.word	0x3ff00000
 8013514:	fffffc01 	.word	0xfffffc01
 8013518:	3ff80000 	.word	0x3ff80000
 801351c:	636f4361 	.word	0x636f4361
 8013520:	3fd287a7 	.word	0x3fd287a7
 8013524:	8b60c8b3 	.word	0x8b60c8b3
 8013528:	3fc68a28 	.word	0x3fc68a28
 801352c:	509f79fb 	.word	0x509f79fb
 8013530:	3fd34413 	.word	0x3fd34413
 8013534:	08017468 	.word	0x08017468
 8013538:	00000432 	.word	0x00000432
 801353c:	00000412 	.word	0x00000412
 8013540:	fe100000 	.word	0xfe100000
 8013544:	080173c5 	.word	0x080173c5
 8013548:	08017440 	.word	0x08017440
 801354c:	9b04      	ldr	r3, [sp, #16]
 801354e:	2402      	movs	r4, #2
 8013550:	2b00      	cmp	r3, #0
 8013552:	d016      	beq.n	8013582 <_dtoa_r+0x3d6>
 8013554:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013556:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8013558:	220f      	movs	r2, #15
 801355a:	425d      	negs	r5, r3
 801355c:	402a      	ands	r2, r5
 801355e:	4bd7      	ldr	r3, [pc, #860]	@ (80138bc <_dtoa_r+0x710>)
 8013560:	00d2      	lsls	r2, r2, #3
 8013562:	189b      	adds	r3, r3, r2
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	f7ef f808 	bl	800257c <__aeabi_dmul>
 801356c:	2701      	movs	r7, #1
 801356e:	2300      	movs	r3, #0
 8013570:	900a      	str	r0, [sp, #40]	@ 0x28
 8013572:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013574:	4ed2      	ldr	r6, [pc, #840]	@ (80138c0 <_dtoa_r+0x714>)
 8013576:	112d      	asrs	r5, r5, #4
 8013578:	2d00      	cmp	r5, #0
 801357a:	d000      	beq.n	801357e <_dtoa_r+0x3d2>
 801357c:	e0ba      	b.n	80136f4 <_dtoa_r+0x548>
 801357e:	2b00      	cmp	r3, #0
 8013580:	d1a1      	bne.n	80134c6 <_dtoa_r+0x31a>
 8013582:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013584:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013586:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013588:	2b00      	cmp	r3, #0
 801358a:	d100      	bne.n	801358e <_dtoa_r+0x3e2>
 801358c:	e0bd      	b.n	801370a <_dtoa_r+0x55e>
 801358e:	2200      	movs	r2, #0
 8013590:	0030      	movs	r0, r6
 8013592:	0039      	movs	r1, r7
 8013594:	4bcb      	ldr	r3, [pc, #812]	@ (80138c4 <_dtoa_r+0x718>)
 8013596:	f7ec ff5f 	bl	8000458 <__aeabi_dcmplt>
 801359a:	2800      	cmp	r0, #0
 801359c:	d100      	bne.n	80135a0 <_dtoa_r+0x3f4>
 801359e:	e0b4      	b.n	801370a <_dtoa_r+0x55e>
 80135a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d100      	bne.n	80135a8 <_dtoa_r+0x3fc>
 80135a6:	e0b0      	b.n	801370a <_dtoa_r+0x55e>
 80135a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	dd39      	ble.n	8013622 <_dtoa_r+0x476>
 80135ae:	9b04      	ldr	r3, [sp, #16]
 80135b0:	2200      	movs	r2, #0
 80135b2:	3b01      	subs	r3, #1
 80135b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80135b6:	0030      	movs	r0, r6
 80135b8:	4bc3      	ldr	r3, [pc, #780]	@ (80138c8 <_dtoa_r+0x71c>)
 80135ba:	0039      	movs	r1, r7
 80135bc:	f7ee ffde 	bl	800257c <__aeabi_dmul>
 80135c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80135c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80135c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135c6:	3401      	adds	r4, #1
 80135c8:	0020      	movs	r0, r4
 80135ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80135cc:	f7ef fe98 	bl	8003300 <__aeabi_i2d>
 80135d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135d4:	f7ee ffd2 	bl	800257c <__aeabi_dmul>
 80135d8:	4bbc      	ldr	r3, [pc, #752]	@ (80138cc <_dtoa_r+0x720>)
 80135da:	2200      	movs	r2, #0
 80135dc:	f7ee f826 	bl	800162c <__aeabi_dadd>
 80135e0:	4bbb      	ldr	r3, [pc, #748]	@ (80138d0 <_dtoa_r+0x724>)
 80135e2:	0006      	movs	r6, r0
 80135e4:	18cf      	adds	r7, r1, r3
 80135e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d000      	beq.n	80135ee <_dtoa_r+0x442>
 80135ec:	e091      	b.n	8013712 <_dtoa_r+0x566>
 80135ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80135f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80135f2:	2200      	movs	r2, #0
 80135f4:	4bb7      	ldr	r3, [pc, #732]	@ (80138d4 <_dtoa_r+0x728>)
 80135f6:	f7ef fa89 	bl	8002b0c <__aeabi_dsub>
 80135fa:	0032      	movs	r2, r6
 80135fc:	003b      	movs	r3, r7
 80135fe:	0004      	movs	r4, r0
 8013600:	000d      	movs	r5, r1
 8013602:	f7ec ff3d 	bl	8000480 <__aeabi_dcmpgt>
 8013606:	2800      	cmp	r0, #0
 8013608:	d000      	beq.n	801360c <_dtoa_r+0x460>
 801360a:	e29d      	b.n	8013b48 <_dtoa_r+0x99c>
 801360c:	2180      	movs	r1, #128	@ 0x80
 801360e:	0609      	lsls	r1, r1, #24
 8013610:	187b      	adds	r3, r7, r1
 8013612:	0032      	movs	r2, r6
 8013614:	0020      	movs	r0, r4
 8013616:	0029      	movs	r1, r5
 8013618:	f7ec ff1e 	bl	8000458 <__aeabi_dcmplt>
 801361c:	2800      	cmp	r0, #0
 801361e:	d000      	beq.n	8013622 <_dtoa_r+0x476>
 8013620:	e130      	b.n	8013884 <_dtoa_r+0x6d8>
 8013622:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013624:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8013626:	930a      	str	r3, [sp, #40]	@ 0x28
 8013628:	940b      	str	r4, [sp, #44]	@ 0x2c
 801362a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801362c:	2b00      	cmp	r3, #0
 801362e:	da00      	bge.n	8013632 <_dtoa_r+0x486>
 8013630:	e177      	b.n	8013922 <_dtoa_r+0x776>
 8013632:	9a04      	ldr	r2, [sp, #16]
 8013634:	2a0e      	cmp	r2, #14
 8013636:	dd00      	ble.n	801363a <_dtoa_r+0x48e>
 8013638:	e173      	b.n	8013922 <_dtoa_r+0x776>
 801363a:	4ba0      	ldr	r3, [pc, #640]	@ (80138bc <_dtoa_r+0x710>)
 801363c:	00d2      	lsls	r2, r2, #3
 801363e:	189b      	adds	r3, r3, r2
 8013640:	685c      	ldr	r4, [r3, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	9306      	str	r3, [sp, #24]
 8013646:	9407      	str	r4, [sp, #28]
 8013648:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801364a:	2b00      	cmp	r3, #0
 801364c:	da03      	bge.n	8013656 <_dtoa_r+0x4aa>
 801364e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013650:	2b00      	cmp	r3, #0
 8013652:	dc00      	bgt.n	8013656 <_dtoa_r+0x4aa>
 8013654:	e106      	b.n	8013864 <_dtoa_r+0x6b8>
 8013656:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013658:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801365a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801365c:	9d08      	ldr	r5, [sp, #32]
 801365e:	3b01      	subs	r3, #1
 8013660:	195b      	adds	r3, r3, r5
 8013662:	930a      	str	r3, [sp, #40]	@ 0x28
 8013664:	9a06      	ldr	r2, [sp, #24]
 8013666:	9b07      	ldr	r3, [sp, #28]
 8013668:	0030      	movs	r0, r6
 801366a:	0039      	movs	r1, r7
 801366c:	f7ee fb42 	bl	8001cf4 <__aeabi_ddiv>
 8013670:	f7ef fe0a 	bl	8003288 <__aeabi_d2iz>
 8013674:	9009      	str	r0, [sp, #36]	@ 0x24
 8013676:	f7ef fe43 	bl	8003300 <__aeabi_i2d>
 801367a:	9a06      	ldr	r2, [sp, #24]
 801367c:	9b07      	ldr	r3, [sp, #28]
 801367e:	f7ee ff7d 	bl	800257c <__aeabi_dmul>
 8013682:	0002      	movs	r2, r0
 8013684:	000b      	movs	r3, r1
 8013686:	0030      	movs	r0, r6
 8013688:	0039      	movs	r1, r7
 801368a:	f7ef fa3f 	bl	8002b0c <__aeabi_dsub>
 801368e:	002b      	movs	r3, r5
 8013690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013692:	3501      	adds	r5, #1
 8013694:	3230      	adds	r2, #48	@ 0x30
 8013696:	701a      	strb	r2, [r3, #0]
 8013698:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801369a:	002c      	movs	r4, r5
 801369c:	429a      	cmp	r2, r3
 801369e:	d000      	beq.n	80136a2 <_dtoa_r+0x4f6>
 80136a0:	e131      	b.n	8013906 <_dtoa_r+0x75a>
 80136a2:	0002      	movs	r2, r0
 80136a4:	000b      	movs	r3, r1
 80136a6:	f7ed ffc1 	bl	800162c <__aeabi_dadd>
 80136aa:	9a06      	ldr	r2, [sp, #24]
 80136ac:	9b07      	ldr	r3, [sp, #28]
 80136ae:	0006      	movs	r6, r0
 80136b0:	000f      	movs	r7, r1
 80136b2:	f7ec fee5 	bl	8000480 <__aeabi_dcmpgt>
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d000      	beq.n	80136bc <_dtoa_r+0x510>
 80136ba:	e10f      	b.n	80138dc <_dtoa_r+0x730>
 80136bc:	9a06      	ldr	r2, [sp, #24]
 80136be:	9b07      	ldr	r3, [sp, #28]
 80136c0:	0030      	movs	r0, r6
 80136c2:	0039      	movs	r1, r7
 80136c4:	f7ec fec2 	bl	800044c <__aeabi_dcmpeq>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	d003      	beq.n	80136d4 <_dtoa_r+0x528>
 80136cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136ce:	07dd      	lsls	r5, r3, #31
 80136d0:	d500      	bpl.n	80136d4 <_dtoa_r+0x528>
 80136d2:	e103      	b.n	80138dc <_dtoa_r+0x730>
 80136d4:	9905      	ldr	r1, [sp, #20]
 80136d6:	9803      	ldr	r0, [sp, #12]
 80136d8:	f000 fca6 	bl	8014028 <_Bfree>
 80136dc:	2300      	movs	r3, #0
 80136de:	7023      	strb	r3, [r4, #0]
 80136e0:	9b04      	ldr	r3, [sp, #16]
 80136e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80136e4:	3301      	adds	r3, #1
 80136e6:	6013      	str	r3, [r2, #0]
 80136e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d100      	bne.n	80136f0 <_dtoa_r+0x544>
 80136ee:	e5a7      	b.n	8013240 <_dtoa_r+0x94>
 80136f0:	601c      	str	r4, [r3, #0]
 80136f2:	e5a5      	b.n	8013240 <_dtoa_r+0x94>
 80136f4:	423d      	tst	r5, r7
 80136f6:	d005      	beq.n	8013704 <_dtoa_r+0x558>
 80136f8:	6832      	ldr	r2, [r6, #0]
 80136fa:	6873      	ldr	r3, [r6, #4]
 80136fc:	f7ee ff3e 	bl	800257c <__aeabi_dmul>
 8013700:	003b      	movs	r3, r7
 8013702:	3401      	adds	r4, #1
 8013704:	106d      	asrs	r5, r5, #1
 8013706:	3608      	adds	r6, #8
 8013708:	e736      	b.n	8013578 <_dtoa_r+0x3cc>
 801370a:	9b04      	ldr	r3, [sp, #16]
 801370c:	930c      	str	r3, [sp, #48]	@ 0x30
 801370e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013710:	e75a      	b.n	80135c8 <_dtoa_r+0x41c>
 8013712:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013714:	4b69      	ldr	r3, [pc, #420]	@ (80138bc <_dtoa_r+0x710>)
 8013716:	3a01      	subs	r2, #1
 8013718:	00d2      	lsls	r2, r2, #3
 801371a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801371c:	189b      	adds	r3, r3, r2
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	2900      	cmp	r1, #0
 8013724:	d04c      	beq.n	80137c0 <_dtoa_r+0x614>
 8013726:	2000      	movs	r0, #0
 8013728:	496b      	ldr	r1, [pc, #428]	@ (80138d8 <_dtoa_r+0x72c>)
 801372a:	f7ee fae3 	bl	8001cf4 <__aeabi_ddiv>
 801372e:	0032      	movs	r2, r6
 8013730:	003b      	movs	r3, r7
 8013732:	f7ef f9eb 	bl	8002b0c <__aeabi_dsub>
 8013736:	9a08      	ldr	r2, [sp, #32]
 8013738:	0006      	movs	r6, r0
 801373a:	4694      	mov	ip, r2
 801373c:	000f      	movs	r7, r1
 801373e:	9b08      	ldr	r3, [sp, #32]
 8013740:	9316      	str	r3, [sp, #88]	@ 0x58
 8013742:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013744:	4463      	add	r3, ip
 8013746:	9311      	str	r3, [sp, #68]	@ 0x44
 8013748:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801374a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801374c:	f7ef fd9c 	bl	8003288 <__aeabi_d2iz>
 8013750:	0005      	movs	r5, r0
 8013752:	f7ef fdd5 	bl	8003300 <__aeabi_i2d>
 8013756:	0002      	movs	r2, r0
 8013758:	000b      	movs	r3, r1
 801375a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801375c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801375e:	f7ef f9d5 	bl	8002b0c <__aeabi_dsub>
 8013762:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013764:	3530      	adds	r5, #48	@ 0x30
 8013766:	1c5c      	adds	r4, r3, #1
 8013768:	701d      	strb	r5, [r3, #0]
 801376a:	0032      	movs	r2, r6
 801376c:	003b      	movs	r3, r7
 801376e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013770:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013772:	f7ec fe71 	bl	8000458 <__aeabi_dcmplt>
 8013776:	2800      	cmp	r0, #0
 8013778:	d16a      	bne.n	8013850 <_dtoa_r+0x6a4>
 801377a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801377c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801377e:	2000      	movs	r0, #0
 8013780:	4950      	ldr	r1, [pc, #320]	@ (80138c4 <_dtoa_r+0x718>)
 8013782:	f7ef f9c3 	bl	8002b0c <__aeabi_dsub>
 8013786:	0032      	movs	r2, r6
 8013788:	003b      	movs	r3, r7
 801378a:	f7ec fe65 	bl	8000458 <__aeabi_dcmplt>
 801378e:	2800      	cmp	r0, #0
 8013790:	d000      	beq.n	8013794 <_dtoa_r+0x5e8>
 8013792:	e0a5      	b.n	80138e0 <_dtoa_r+0x734>
 8013794:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013796:	42a3      	cmp	r3, r4
 8013798:	d100      	bne.n	801379c <_dtoa_r+0x5f0>
 801379a:	e742      	b.n	8013622 <_dtoa_r+0x476>
 801379c:	2200      	movs	r2, #0
 801379e:	0030      	movs	r0, r6
 80137a0:	0039      	movs	r1, r7
 80137a2:	4b49      	ldr	r3, [pc, #292]	@ (80138c8 <_dtoa_r+0x71c>)
 80137a4:	f7ee feea 	bl	800257c <__aeabi_dmul>
 80137a8:	2200      	movs	r2, #0
 80137aa:	0006      	movs	r6, r0
 80137ac:	000f      	movs	r7, r1
 80137ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80137b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137b2:	4b45      	ldr	r3, [pc, #276]	@ (80138c8 <_dtoa_r+0x71c>)
 80137b4:	f7ee fee2 	bl	800257c <__aeabi_dmul>
 80137b8:	9416      	str	r4, [sp, #88]	@ 0x58
 80137ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80137bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137be:	e7c3      	b.n	8013748 <_dtoa_r+0x59c>
 80137c0:	0030      	movs	r0, r6
 80137c2:	0039      	movs	r1, r7
 80137c4:	f7ee feda 	bl	800257c <__aeabi_dmul>
 80137c8:	9d08      	ldr	r5, [sp, #32]
 80137ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80137cc:	002b      	movs	r3, r5
 80137ce:	4694      	mov	ip, r2
 80137d0:	9016      	str	r0, [sp, #88]	@ 0x58
 80137d2:	9117      	str	r1, [sp, #92]	@ 0x5c
 80137d4:	4463      	add	r3, ip
 80137d6:	9319      	str	r3, [sp, #100]	@ 0x64
 80137d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80137da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137dc:	f7ef fd54 	bl	8003288 <__aeabi_d2iz>
 80137e0:	0004      	movs	r4, r0
 80137e2:	f7ef fd8d 	bl	8003300 <__aeabi_i2d>
 80137e6:	000b      	movs	r3, r1
 80137e8:	0002      	movs	r2, r0
 80137ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80137ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137ee:	f7ef f98d 	bl	8002b0c <__aeabi_dsub>
 80137f2:	3430      	adds	r4, #48	@ 0x30
 80137f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137f6:	702c      	strb	r4, [r5, #0]
 80137f8:	3501      	adds	r5, #1
 80137fa:	0006      	movs	r6, r0
 80137fc:	000f      	movs	r7, r1
 80137fe:	42ab      	cmp	r3, r5
 8013800:	d129      	bne.n	8013856 <_dtoa_r+0x6aa>
 8013802:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013804:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013806:	9b08      	ldr	r3, [sp, #32]
 8013808:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801380a:	469c      	mov	ip, r3
 801380c:	2200      	movs	r2, #0
 801380e:	4b32      	ldr	r3, [pc, #200]	@ (80138d8 <_dtoa_r+0x72c>)
 8013810:	4464      	add	r4, ip
 8013812:	f7ed ff0b 	bl	800162c <__aeabi_dadd>
 8013816:	0002      	movs	r2, r0
 8013818:	000b      	movs	r3, r1
 801381a:	0030      	movs	r0, r6
 801381c:	0039      	movs	r1, r7
 801381e:	f7ec fe2f 	bl	8000480 <__aeabi_dcmpgt>
 8013822:	2800      	cmp	r0, #0
 8013824:	d15c      	bne.n	80138e0 <_dtoa_r+0x734>
 8013826:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013828:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801382a:	2000      	movs	r0, #0
 801382c:	492a      	ldr	r1, [pc, #168]	@ (80138d8 <_dtoa_r+0x72c>)
 801382e:	f7ef f96d 	bl	8002b0c <__aeabi_dsub>
 8013832:	0002      	movs	r2, r0
 8013834:	000b      	movs	r3, r1
 8013836:	0030      	movs	r0, r6
 8013838:	0039      	movs	r1, r7
 801383a:	f7ec fe0d 	bl	8000458 <__aeabi_dcmplt>
 801383e:	2800      	cmp	r0, #0
 8013840:	d100      	bne.n	8013844 <_dtoa_r+0x698>
 8013842:	e6ee      	b.n	8013622 <_dtoa_r+0x476>
 8013844:	0023      	movs	r3, r4
 8013846:	3c01      	subs	r4, #1
 8013848:	7822      	ldrb	r2, [r4, #0]
 801384a:	2a30      	cmp	r2, #48	@ 0x30
 801384c:	d0fa      	beq.n	8013844 <_dtoa_r+0x698>
 801384e:	001c      	movs	r4, r3
 8013850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013852:	9304      	str	r3, [sp, #16]
 8013854:	e73e      	b.n	80136d4 <_dtoa_r+0x528>
 8013856:	2200      	movs	r2, #0
 8013858:	4b1b      	ldr	r3, [pc, #108]	@ (80138c8 <_dtoa_r+0x71c>)
 801385a:	f7ee fe8f 	bl	800257c <__aeabi_dmul>
 801385e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013860:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013862:	e7b9      	b.n	80137d8 <_dtoa_r+0x62c>
 8013864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013866:	2b00      	cmp	r3, #0
 8013868:	d10c      	bne.n	8013884 <_dtoa_r+0x6d8>
 801386a:	9806      	ldr	r0, [sp, #24]
 801386c:	9907      	ldr	r1, [sp, #28]
 801386e:	2200      	movs	r2, #0
 8013870:	4b18      	ldr	r3, [pc, #96]	@ (80138d4 <_dtoa_r+0x728>)
 8013872:	f7ee fe83 	bl	800257c <__aeabi_dmul>
 8013876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801387a:	f7ec fe0b 	bl	8000494 <__aeabi_dcmpge>
 801387e:	2800      	cmp	r0, #0
 8013880:	d100      	bne.n	8013884 <_dtoa_r+0x6d8>
 8013882:	e164      	b.n	8013b4e <_dtoa_r+0x9a2>
 8013884:	2600      	movs	r6, #0
 8013886:	0037      	movs	r7, r6
 8013888:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801388a:	9c08      	ldr	r4, [sp, #32]
 801388c:	43db      	mvns	r3, r3
 801388e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013890:	2300      	movs	r3, #0
 8013892:	9304      	str	r3, [sp, #16]
 8013894:	0031      	movs	r1, r6
 8013896:	9803      	ldr	r0, [sp, #12]
 8013898:	f000 fbc6 	bl	8014028 <_Bfree>
 801389c:	2f00      	cmp	r7, #0
 801389e:	d0d7      	beq.n	8013850 <_dtoa_r+0x6a4>
 80138a0:	9b04      	ldr	r3, [sp, #16]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d005      	beq.n	80138b2 <_dtoa_r+0x706>
 80138a6:	42bb      	cmp	r3, r7
 80138a8:	d003      	beq.n	80138b2 <_dtoa_r+0x706>
 80138aa:	0019      	movs	r1, r3
 80138ac:	9803      	ldr	r0, [sp, #12]
 80138ae:	f000 fbbb 	bl	8014028 <_Bfree>
 80138b2:	0039      	movs	r1, r7
 80138b4:	9803      	ldr	r0, [sp, #12]
 80138b6:	f000 fbb7 	bl	8014028 <_Bfree>
 80138ba:	e7c9      	b.n	8013850 <_dtoa_r+0x6a4>
 80138bc:	08017468 	.word	0x08017468
 80138c0:	08017440 	.word	0x08017440
 80138c4:	3ff00000 	.word	0x3ff00000
 80138c8:	40240000 	.word	0x40240000
 80138cc:	401c0000 	.word	0x401c0000
 80138d0:	fcc00000 	.word	0xfcc00000
 80138d4:	40140000 	.word	0x40140000
 80138d8:	3fe00000 	.word	0x3fe00000
 80138dc:	9b04      	ldr	r3, [sp, #16]
 80138de:	930c      	str	r3, [sp, #48]	@ 0x30
 80138e0:	0023      	movs	r3, r4
 80138e2:	001c      	movs	r4, r3
 80138e4:	3b01      	subs	r3, #1
 80138e6:	781a      	ldrb	r2, [r3, #0]
 80138e8:	2a39      	cmp	r2, #57	@ 0x39
 80138ea:	d108      	bne.n	80138fe <_dtoa_r+0x752>
 80138ec:	9a08      	ldr	r2, [sp, #32]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d1f7      	bne.n	80138e2 <_dtoa_r+0x736>
 80138f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80138f4:	9908      	ldr	r1, [sp, #32]
 80138f6:	3201      	adds	r2, #1
 80138f8:	920c      	str	r2, [sp, #48]	@ 0x30
 80138fa:	2230      	movs	r2, #48	@ 0x30
 80138fc:	700a      	strb	r2, [r1, #0]
 80138fe:	781a      	ldrb	r2, [r3, #0]
 8013900:	3201      	adds	r2, #1
 8013902:	701a      	strb	r2, [r3, #0]
 8013904:	e7a4      	b.n	8013850 <_dtoa_r+0x6a4>
 8013906:	2200      	movs	r2, #0
 8013908:	4bc6      	ldr	r3, [pc, #792]	@ (8013c24 <_dtoa_r+0xa78>)
 801390a:	f7ee fe37 	bl	800257c <__aeabi_dmul>
 801390e:	2200      	movs	r2, #0
 8013910:	2300      	movs	r3, #0
 8013912:	0006      	movs	r6, r0
 8013914:	000f      	movs	r7, r1
 8013916:	f7ec fd99 	bl	800044c <__aeabi_dcmpeq>
 801391a:	2800      	cmp	r0, #0
 801391c:	d100      	bne.n	8013920 <_dtoa_r+0x774>
 801391e:	e6a1      	b.n	8013664 <_dtoa_r+0x4b8>
 8013920:	e6d8      	b.n	80136d4 <_dtoa_r+0x528>
 8013922:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8013924:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013926:	9c06      	ldr	r4, [sp, #24]
 8013928:	2f00      	cmp	r7, #0
 801392a:	d014      	beq.n	8013956 <_dtoa_r+0x7aa>
 801392c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801392e:	2a01      	cmp	r2, #1
 8013930:	dd00      	ble.n	8013934 <_dtoa_r+0x788>
 8013932:	e0c8      	b.n	8013ac6 <_dtoa_r+0x91a>
 8013934:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013936:	2a00      	cmp	r2, #0
 8013938:	d100      	bne.n	801393c <_dtoa_r+0x790>
 801393a:	e0be      	b.n	8013aba <_dtoa_r+0x90e>
 801393c:	4aba      	ldr	r2, [pc, #744]	@ (8013c28 <_dtoa_r+0xa7c>)
 801393e:	189b      	adds	r3, r3, r2
 8013940:	9a06      	ldr	r2, [sp, #24]
 8013942:	2101      	movs	r1, #1
 8013944:	18d2      	adds	r2, r2, r3
 8013946:	9206      	str	r2, [sp, #24]
 8013948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801394a:	9803      	ldr	r0, [sp, #12]
 801394c:	18d3      	adds	r3, r2, r3
 801394e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013950:	f000 fc6e 	bl	8014230 <__i2b>
 8013954:	0007      	movs	r7, r0
 8013956:	2c00      	cmp	r4, #0
 8013958:	d00e      	beq.n	8013978 <_dtoa_r+0x7cc>
 801395a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801395c:	2b00      	cmp	r3, #0
 801395e:	dd0b      	ble.n	8013978 <_dtoa_r+0x7cc>
 8013960:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013962:	0023      	movs	r3, r4
 8013964:	4294      	cmp	r4, r2
 8013966:	dd00      	ble.n	801396a <_dtoa_r+0x7be>
 8013968:	0013      	movs	r3, r2
 801396a:	9a06      	ldr	r2, [sp, #24]
 801396c:	1ae4      	subs	r4, r4, r3
 801396e:	1ad2      	subs	r2, r2, r3
 8013970:	9206      	str	r2, [sp, #24]
 8013972:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013974:	1ad3      	subs	r3, r2, r3
 8013976:	930d      	str	r3, [sp, #52]	@ 0x34
 8013978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801397a:	2b00      	cmp	r3, #0
 801397c:	d01f      	beq.n	80139be <_dtoa_r+0x812>
 801397e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013980:	2b00      	cmp	r3, #0
 8013982:	d100      	bne.n	8013986 <_dtoa_r+0x7da>
 8013984:	e0b5      	b.n	8013af2 <_dtoa_r+0x946>
 8013986:	2d00      	cmp	r5, #0
 8013988:	d010      	beq.n	80139ac <_dtoa_r+0x800>
 801398a:	0039      	movs	r1, r7
 801398c:	002a      	movs	r2, r5
 801398e:	9803      	ldr	r0, [sp, #12]
 8013990:	f000 fd18 	bl	80143c4 <__pow5mult>
 8013994:	9a05      	ldr	r2, [sp, #20]
 8013996:	0001      	movs	r1, r0
 8013998:	0007      	movs	r7, r0
 801399a:	9803      	ldr	r0, [sp, #12]
 801399c:	f000 fc60 	bl	8014260 <__multiply>
 80139a0:	0006      	movs	r6, r0
 80139a2:	9905      	ldr	r1, [sp, #20]
 80139a4:	9803      	ldr	r0, [sp, #12]
 80139a6:	f000 fb3f 	bl	8014028 <_Bfree>
 80139aa:	9605      	str	r6, [sp, #20]
 80139ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ae:	1b5a      	subs	r2, r3, r5
 80139b0:	42ab      	cmp	r3, r5
 80139b2:	d004      	beq.n	80139be <_dtoa_r+0x812>
 80139b4:	9905      	ldr	r1, [sp, #20]
 80139b6:	9803      	ldr	r0, [sp, #12]
 80139b8:	f000 fd04 	bl	80143c4 <__pow5mult>
 80139bc:	9005      	str	r0, [sp, #20]
 80139be:	2101      	movs	r1, #1
 80139c0:	9803      	ldr	r0, [sp, #12]
 80139c2:	f000 fc35 	bl	8014230 <__i2b>
 80139c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80139c8:	0006      	movs	r6, r0
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d100      	bne.n	80139d0 <_dtoa_r+0x824>
 80139ce:	e1bc      	b.n	8013d4a <_dtoa_r+0xb9e>
 80139d0:	001a      	movs	r2, r3
 80139d2:	0001      	movs	r1, r0
 80139d4:	9803      	ldr	r0, [sp, #12]
 80139d6:	f000 fcf5 	bl	80143c4 <__pow5mult>
 80139da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80139dc:	0006      	movs	r6, r0
 80139de:	2500      	movs	r5, #0
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	dc16      	bgt.n	8013a12 <_dtoa_r+0x866>
 80139e4:	2500      	movs	r5, #0
 80139e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139e8:	42ab      	cmp	r3, r5
 80139ea:	d10e      	bne.n	8013a0a <_dtoa_r+0x85e>
 80139ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139ee:	031b      	lsls	r3, r3, #12
 80139f0:	42ab      	cmp	r3, r5
 80139f2:	d10a      	bne.n	8013a0a <_dtoa_r+0x85e>
 80139f4:	4b8d      	ldr	r3, [pc, #564]	@ (8013c2c <_dtoa_r+0xa80>)
 80139f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80139f8:	4213      	tst	r3, r2
 80139fa:	d006      	beq.n	8013a0a <_dtoa_r+0x85e>
 80139fc:	9b06      	ldr	r3, [sp, #24]
 80139fe:	3501      	adds	r5, #1
 8013a00:	3301      	adds	r3, #1
 8013a02:	9306      	str	r3, [sp, #24]
 8013a04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a06:	3301      	adds	r3, #1
 8013a08:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013a0c:	2001      	movs	r0, #1
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d008      	beq.n	8013a24 <_dtoa_r+0x878>
 8013a12:	6933      	ldr	r3, [r6, #16]
 8013a14:	3303      	adds	r3, #3
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	18f3      	adds	r3, r6, r3
 8013a1a:	6858      	ldr	r0, [r3, #4]
 8013a1c:	f000 fbb8 	bl	8014190 <__hi0bits>
 8013a20:	2320      	movs	r3, #32
 8013a22:	1a18      	subs	r0, r3, r0
 8013a24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a26:	1818      	adds	r0, r3, r0
 8013a28:	0002      	movs	r2, r0
 8013a2a:	231f      	movs	r3, #31
 8013a2c:	401a      	ands	r2, r3
 8013a2e:	4218      	tst	r0, r3
 8013a30:	d065      	beq.n	8013afe <_dtoa_r+0x952>
 8013a32:	3301      	adds	r3, #1
 8013a34:	1a9b      	subs	r3, r3, r2
 8013a36:	2b04      	cmp	r3, #4
 8013a38:	dd5d      	ble.n	8013af6 <_dtoa_r+0x94a>
 8013a3a:	231c      	movs	r3, #28
 8013a3c:	1a9b      	subs	r3, r3, r2
 8013a3e:	9a06      	ldr	r2, [sp, #24]
 8013a40:	18e4      	adds	r4, r4, r3
 8013a42:	18d2      	adds	r2, r2, r3
 8013a44:	9206      	str	r2, [sp, #24]
 8013a46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a48:	18d3      	adds	r3, r2, r3
 8013a4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8013a4c:	9b06      	ldr	r3, [sp, #24]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	dd05      	ble.n	8013a5e <_dtoa_r+0x8b2>
 8013a52:	001a      	movs	r2, r3
 8013a54:	9905      	ldr	r1, [sp, #20]
 8013a56:	9803      	ldr	r0, [sp, #12]
 8013a58:	f000 fd10 	bl	801447c <__lshift>
 8013a5c:	9005      	str	r0, [sp, #20]
 8013a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	dd05      	ble.n	8013a70 <_dtoa_r+0x8c4>
 8013a64:	0031      	movs	r1, r6
 8013a66:	001a      	movs	r2, r3
 8013a68:	9803      	ldr	r0, [sp, #12]
 8013a6a:	f000 fd07 	bl	801447c <__lshift>
 8013a6e:	0006      	movs	r6, r0
 8013a70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d045      	beq.n	8013b02 <_dtoa_r+0x956>
 8013a76:	0031      	movs	r1, r6
 8013a78:	9805      	ldr	r0, [sp, #20]
 8013a7a:	f000 fd6b 	bl	8014554 <__mcmp>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	da3f      	bge.n	8013b02 <_dtoa_r+0x956>
 8013a82:	9b04      	ldr	r3, [sp, #16]
 8013a84:	220a      	movs	r2, #10
 8013a86:	3b01      	subs	r3, #1
 8013a88:	930c      	str	r3, [sp, #48]	@ 0x30
 8013a8a:	9905      	ldr	r1, [sp, #20]
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	9803      	ldr	r0, [sp, #12]
 8013a90:	f000 faee 	bl	8014070 <__multadd>
 8013a94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a96:	9005      	str	r0, [sp, #20]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d100      	bne.n	8013a9e <_dtoa_r+0x8f2>
 8013a9c:	e15c      	b.n	8013d58 <_dtoa_r+0xbac>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	0039      	movs	r1, r7
 8013aa2:	220a      	movs	r2, #10
 8013aa4:	9803      	ldr	r0, [sp, #12]
 8013aa6:	f000 fae3 	bl	8014070 <__multadd>
 8013aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013aac:	0007      	movs	r7, r0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	dc55      	bgt.n	8013b5e <_dtoa_r+0x9b2>
 8013ab2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013ab4:	2b02      	cmp	r3, #2
 8013ab6:	dc2d      	bgt.n	8013b14 <_dtoa_r+0x968>
 8013ab8:	e051      	b.n	8013b5e <_dtoa_r+0x9b2>
 8013aba:	2336      	movs	r3, #54	@ 0x36
 8013abc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013abe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8013ac0:	9c06      	ldr	r4, [sp, #24]
 8013ac2:	1a9b      	subs	r3, r3, r2
 8013ac4:	e73c      	b.n	8013940 <_dtoa_r+0x794>
 8013ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ac8:	1e5d      	subs	r5, r3, #1
 8013aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013acc:	42ab      	cmp	r3, r5
 8013ace:	db08      	blt.n	8013ae2 <_dtoa_r+0x936>
 8013ad0:	1b5d      	subs	r5, r3, r5
 8013ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ad4:	9c06      	ldr	r4, [sp, #24]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	db00      	blt.n	8013adc <_dtoa_r+0x930>
 8013ada:	e731      	b.n	8013940 <_dtoa_r+0x794>
 8013adc:	1ae4      	subs	r4, r4, r3
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e72e      	b.n	8013940 <_dtoa_r+0x794>
 8013ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ae4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013ae6:	1aeb      	subs	r3, r5, r3
 8013ae8:	18d3      	adds	r3, r2, r3
 8013aea:	950f      	str	r5, [sp, #60]	@ 0x3c
 8013aec:	9314      	str	r3, [sp, #80]	@ 0x50
 8013aee:	2500      	movs	r5, #0
 8013af0:	e7ef      	b.n	8013ad2 <_dtoa_r+0x926>
 8013af2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013af4:	e75e      	b.n	80139b4 <_dtoa_r+0x808>
 8013af6:	2b04      	cmp	r3, #4
 8013af8:	d0a8      	beq.n	8013a4c <_dtoa_r+0x8a0>
 8013afa:	331c      	adds	r3, #28
 8013afc:	e79f      	b.n	8013a3e <_dtoa_r+0x892>
 8013afe:	0013      	movs	r3, r2
 8013b00:	e7fb      	b.n	8013afa <_dtoa_r+0x94e>
 8013b02:	9b04      	ldr	r3, [sp, #16]
 8013b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b08:	930e      	str	r3, [sp, #56]	@ 0x38
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	dc23      	bgt.n	8013b56 <_dtoa_r+0x9aa>
 8013b0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013b10:	2b02      	cmp	r3, #2
 8013b12:	dd20      	ble.n	8013b56 <_dtoa_r+0x9aa>
 8013b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d000      	beq.n	8013b1c <_dtoa_r+0x970>
 8013b1a:	e6b5      	b.n	8013888 <_dtoa_r+0x6dc>
 8013b1c:	0031      	movs	r1, r6
 8013b1e:	2205      	movs	r2, #5
 8013b20:	9803      	ldr	r0, [sp, #12]
 8013b22:	f000 faa5 	bl	8014070 <__multadd>
 8013b26:	0006      	movs	r6, r0
 8013b28:	0001      	movs	r1, r0
 8013b2a:	9805      	ldr	r0, [sp, #20]
 8013b2c:	f000 fd12 	bl	8014554 <__mcmp>
 8013b30:	2800      	cmp	r0, #0
 8013b32:	dc00      	bgt.n	8013b36 <_dtoa_r+0x98a>
 8013b34:	e6a8      	b.n	8013888 <_dtoa_r+0x6dc>
 8013b36:	9b08      	ldr	r3, [sp, #32]
 8013b38:	9a08      	ldr	r2, [sp, #32]
 8013b3a:	1c5c      	adds	r4, r3, #1
 8013b3c:	2331      	movs	r3, #49	@ 0x31
 8013b3e:	7013      	strb	r3, [r2, #0]
 8013b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b42:	3301      	adds	r3, #1
 8013b44:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b46:	e6a3      	b.n	8013890 <_dtoa_r+0x6e4>
 8013b48:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013b4a:	0037      	movs	r7, r6
 8013b4c:	e7f3      	b.n	8013b36 <_dtoa_r+0x98a>
 8013b4e:	9b04      	ldr	r3, [sp, #16]
 8013b50:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013b52:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b54:	e7f9      	b.n	8013b4a <_dtoa_r+0x99e>
 8013b56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d100      	bne.n	8013b5e <_dtoa_r+0x9b2>
 8013b5c:	e100      	b.n	8013d60 <_dtoa_r+0xbb4>
 8013b5e:	2c00      	cmp	r4, #0
 8013b60:	dd05      	ble.n	8013b6e <_dtoa_r+0x9c2>
 8013b62:	0039      	movs	r1, r7
 8013b64:	0022      	movs	r2, r4
 8013b66:	9803      	ldr	r0, [sp, #12]
 8013b68:	f000 fc88 	bl	801447c <__lshift>
 8013b6c:	0007      	movs	r7, r0
 8013b6e:	0038      	movs	r0, r7
 8013b70:	2d00      	cmp	r5, #0
 8013b72:	d018      	beq.n	8013ba6 <_dtoa_r+0x9fa>
 8013b74:	6879      	ldr	r1, [r7, #4]
 8013b76:	9803      	ldr	r0, [sp, #12]
 8013b78:	f000 fa12 	bl	8013fa0 <_Balloc>
 8013b7c:	1e04      	subs	r4, r0, #0
 8013b7e:	d105      	bne.n	8013b8c <_dtoa_r+0x9e0>
 8013b80:	0022      	movs	r2, r4
 8013b82:	4b2b      	ldr	r3, [pc, #172]	@ (8013c30 <_dtoa_r+0xa84>)
 8013b84:	482b      	ldr	r0, [pc, #172]	@ (8013c34 <_dtoa_r+0xa88>)
 8013b86:	492c      	ldr	r1, [pc, #176]	@ (8013c38 <_dtoa_r+0xa8c>)
 8013b88:	f7ff fb25 	bl	80131d6 <_dtoa_r+0x2a>
 8013b8c:	0039      	movs	r1, r7
 8013b8e:	693a      	ldr	r2, [r7, #16]
 8013b90:	310c      	adds	r1, #12
 8013b92:	3202      	adds	r2, #2
 8013b94:	0092      	lsls	r2, r2, #2
 8013b96:	300c      	adds	r0, #12
 8013b98:	f7ff fa70 	bl	801307c <memcpy>
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	0021      	movs	r1, r4
 8013ba0:	9803      	ldr	r0, [sp, #12]
 8013ba2:	f000 fc6b 	bl	801447c <__lshift>
 8013ba6:	9b08      	ldr	r3, [sp, #32]
 8013ba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013baa:	9306      	str	r3, [sp, #24]
 8013bac:	3b01      	subs	r3, #1
 8013bae:	189b      	adds	r3, r3, r2
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	9704      	str	r7, [sp, #16]
 8013bb4:	0007      	movs	r7, r0
 8013bb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bba:	4013      	ands	r3, r2
 8013bbc:	930e      	str	r3, [sp, #56]	@ 0x38
 8013bbe:	0031      	movs	r1, r6
 8013bc0:	9805      	ldr	r0, [sp, #20]
 8013bc2:	f7ff fa64 	bl	801308e <quorem>
 8013bc6:	9904      	ldr	r1, [sp, #16]
 8013bc8:	0005      	movs	r5, r0
 8013bca:	900a      	str	r0, [sp, #40]	@ 0x28
 8013bcc:	9805      	ldr	r0, [sp, #20]
 8013bce:	f000 fcc1 	bl	8014554 <__mcmp>
 8013bd2:	003a      	movs	r2, r7
 8013bd4:	900d      	str	r0, [sp, #52]	@ 0x34
 8013bd6:	0031      	movs	r1, r6
 8013bd8:	9803      	ldr	r0, [sp, #12]
 8013bda:	f000 fcd7 	bl	801458c <__mdiff>
 8013bde:	2201      	movs	r2, #1
 8013be0:	68c3      	ldr	r3, [r0, #12]
 8013be2:	0004      	movs	r4, r0
 8013be4:	3530      	adds	r5, #48	@ 0x30
 8013be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d104      	bne.n	8013bf6 <_dtoa_r+0xa4a>
 8013bec:	0001      	movs	r1, r0
 8013bee:	9805      	ldr	r0, [sp, #20]
 8013bf0:	f000 fcb0 	bl	8014554 <__mcmp>
 8013bf4:	9009      	str	r0, [sp, #36]	@ 0x24
 8013bf6:	0021      	movs	r1, r4
 8013bf8:	9803      	ldr	r0, [sp, #12]
 8013bfa:	f000 fa15 	bl	8014028 <_Bfree>
 8013bfe:	9b06      	ldr	r3, [sp, #24]
 8013c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c02:	1c5c      	adds	r4, r3, #1
 8013c04:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013c06:	4313      	orrs	r3, r2
 8013c08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c0a:	4313      	orrs	r3, r2
 8013c0c:	d116      	bne.n	8013c3c <_dtoa_r+0xa90>
 8013c0e:	2d39      	cmp	r5, #57	@ 0x39
 8013c10:	d02f      	beq.n	8013c72 <_dtoa_r+0xac6>
 8013c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	dd01      	ble.n	8013c1c <_dtoa_r+0xa70>
 8013c18:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013c1a:	3531      	adds	r5, #49	@ 0x31
 8013c1c:	9b06      	ldr	r3, [sp, #24]
 8013c1e:	701d      	strb	r5, [r3, #0]
 8013c20:	e638      	b.n	8013894 <_dtoa_r+0x6e8>
 8013c22:	46c0      	nop			@ (mov r8, r8)
 8013c24:	40240000 	.word	0x40240000
 8013c28:	00000433 	.word	0x00000433
 8013c2c:	7ff00000 	.word	0x7ff00000
 8013c30:	080173c5 	.word	0x080173c5
 8013c34:	0801736d 	.word	0x0801736d
 8013c38:	000002ef 	.word	0x000002ef
 8013c3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	db04      	blt.n	8013c4c <_dtoa_r+0xaa0>
 8013c42:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013c44:	4313      	orrs	r3, r2
 8013c46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c48:	4313      	orrs	r3, r2
 8013c4a:	d11e      	bne.n	8013c8a <_dtoa_r+0xade>
 8013c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	dde4      	ble.n	8013c1c <_dtoa_r+0xa70>
 8013c52:	9905      	ldr	r1, [sp, #20]
 8013c54:	2201      	movs	r2, #1
 8013c56:	9803      	ldr	r0, [sp, #12]
 8013c58:	f000 fc10 	bl	801447c <__lshift>
 8013c5c:	0031      	movs	r1, r6
 8013c5e:	9005      	str	r0, [sp, #20]
 8013c60:	f000 fc78 	bl	8014554 <__mcmp>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	dc02      	bgt.n	8013c6e <_dtoa_r+0xac2>
 8013c68:	d1d8      	bne.n	8013c1c <_dtoa_r+0xa70>
 8013c6a:	07eb      	lsls	r3, r5, #31
 8013c6c:	d5d6      	bpl.n	8013c1c <_dtoa_r+0xa70>
 8013c6e:	2d39      	cmp	r5, #57	@ 0x39
 8013c70:	d1d2      	bne.n	8013c18 <_dtoa_r+0xa6c>
 8013c72:	2339      	movs	r3, #57	@ 0x39
 8013c74:	9a06      	ldr	r2, [sp, #24]
 8013c76:	7013      	strb	r3, [r2, #0]
 8013c78:	0023      	movs	r3, r4
 8013c7a:	001c      	movs	r4, r3
 8013c7c:	3b01      	subs	r3, #1
 8013c7e:	781a      	ldrb	r2, [r3, #0]
 8013c80:	2a39      	cmp	r2, #57	@ 0x39
 8013c82:	d04f      	beq.n	8013d24 <_dtoa_r+0xb78>
 8013c84:	3201      	adds	r2, #1
 8013c86:	701a      	strb	r2, [r3, #0]
 8013c88:	e604      	b.n	8013894 <_dtoa_r+0x6e8>
 8013c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dd03      	ble.n	8013c98 <_dtoa_r+0xaec>
 8013c90:	2d39      	cmp	r5, #57	@ 0x39
 8013c92:	d0ee      	beq.n	8013c72 <_dtoa_r+0xac6>
 8013c94:	3501      	adds	r5, #1
 8013c96:	e7c1      	b.n	8013c1c <_dtoa_r+0xa70>
 8013c98:	9b06      	ldr	r3, [sp, #24]
 8013c9a:	9a06      	ldr	r2, [sp, #24]
 8013c9c:	701d      	strb	r5, [r3, #0]
 8013c9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ca0:	4293      	cmp	r3, r2
 8013ca2:	d02a      	beq.n	8013cfa <_dtoa_r+0xb4e>
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	220a      	movs	r2, #10
 8013ca8:	9905      	ldr	r1, [sp, #20]
 8013caa:	9803      	ldr	r0, [sp, #12]
 8013cac:	f000 f9e0 	bl	8014070 <__multadd>
 8013cb0:	9b04      	ldr	r3, [sp, #16]
 8013cb2:	9005      	str	r0, [sp, #20]
 8013cb4:	42bb      	cmp	r3, r7
 8013cb6:	d109      	bne.n	8013ccc <_dtoa_r+0xb20>
 8013cb8:	2300      	movs	r3, #0
 8013cba:	220a      	movs	r2, #10
 8013cbc:	9904      	ldr	r1, [sp, #16]
 8013cbe:	9803      	ldr	r0, [sp, #12]
 8013cc0:	f000 f9d6 	bl	8014070 <__multadd>
 8013cc4:	9004      	str	r0, [sp, #16]
 8013cc6:	0007      	movs	r7, r0
 8013cc8:	9406      	str	r4, [sp, #24]
 8013cca:	e778      	b.n	8013bbe <_dtoa_r+0xa12>
 8013ccc:	9904      	ldr	r1, [sp, #16]
 8013cce:	2300      	movs	r3, #0
 8013cd0:	220a      	movs	r2, #10
 8013cd2:	9803      	ldr	r0, [sp, #12]
 8013cd4:	f000 f9cc 	bl	8014070 <__multadd>
 8013cd8:	2300      	movs	r3, #0
 8013cda:	9004      	str	r0, [sp, #16]
 8013cdc:	220a      	movs	r2, #10
 8013cde:	0039      	movs	r1, r7
 8013ce0:	9803      	ldr	r0, [sp, #12]
 8013ce2:	f000 f9c5 	bl	8014070 <__multadd>
 8013ce6:	e7ee      	b.n	8013cc6 <_dtoa_r+0xb1a>
 8013ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cea:	2401      	movs	r4, #1
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	dd00      	ble.n	8013cf2 <_dtoa_r+0xb46>
 8013cf0:	001c      	movs	r4, r3
 8013cf2:	9b08      	ldr	r3, [sp, #32]
 8013cf4:	191c      	adds	r4, r3, r4
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	9304      	str	r3, [sp, #16]
 8013cfa:	9905      	ldr	r1, [sp, #20]
 8013cfc:	2201      	movs	r2, #1
 8013cfe:	9803      	ldr	r0, [sp, #12]
 8013d00:	f000 fbbc 	bl	801447c <__lshift>
 8013d04:	0031      	movs	r1, r6
 8013d06:	9005      	str	r0, [sp, #20]
 8013d08:	f000 fc24 	bl	8014554 <__mcmp>
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	dcb3      	bgt.n	8013c78 <_dtoa_r+0xacc>
 8013d10:	d101      	bne.n	8013d16 <_dtoa_r+0xb6a>
 8013d12:	07ed      	lsls	r5, r5, #31
 8013d14:	d4b0      	bmi.n	8013c78 <_dtoa_r+0xacc>
 8013d16:	0023      	movs	r3, r4
 8013d18:	001c      	movs	r4, r3
 8013d1a:	3b01      	subs	r3, #1
 8013d1c:	781a      	ldrb	r2, [r3, #0]
 8013d1e:	2a30      	cmp	r2, #48	@ 0x30
 8013d20:	d0fa      	beq.n	8013d18 <_dtoa_r+0xb6c>
 8013d22:	e5b7      	b.n	8013894 <_dtoa_r+0x6e8>
 8013d24:	9a08      	ldr	r2, [sp, #32]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d1a7      	bne.n	8013c7a <_dtoa_r+0xace>
 8013d2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013d30:	2331      	movs	r3, #49	@ 0x31
 8013d32:	7013      	strb	r3, [r2, #0]
 8013d34:	e5ae      	b.n	8013894 <_dtoa_r+0x6e8>
 8013d36:	4b15      	ldr	r3, [pc, #84]	@ (8013d8c <_dtoa_r+0xbe0>)
 8013d38:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8013d3a:	9308      	str	r3, [sp, #32]
 8013d3c:	4b14      	ldr	r3, [pc, #80]	@ (8013d90 <_dtoa_r+0xbe4>)
 8013d3e:	2a00      	cmp	r2, #0
 8013d40:	d001      	beq.n	8013d46 <_dtoa_r+0xb9a>
 8013d42:	f7ff fa7b 	bl	801323c <_dtoa_r+0x90>
 8013d46:	f7ff fa7b 	bl	8013240 <_dtoa_r+0x94>
 8013d4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	dc00      	bgt.n	8013d52 <_dtoa_r+0xba6>
 8013d50:	e648      	b.n	80139e4 <_dtoa_r+0x838>
 8013d52:	2001      	movs	r0, #1
 8013d54:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8013d56:	e665      	b.n	8013a24 <_dtoa_r+0x878>
 8013d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	dc00      	bgt.n	8013d60 <_dtoa_r+0xbb4>
 8013d5e:	e6d6      	b.n	8013b0e <_dtoa_r+0x962>
 8013d60:	2400      	movs	r4, #0
 8013d62:	0031      	movs	r1, r6
 8013d64:	9805      	ldr	r0, [sp, #20]
 8013d66:	f7ff f992 	bl	801308e <quorem>
 8013d6a:	9b08      	ldr	r3, [sp, #32]
 8013d6c:	3030      	adds	r0, #48	@ 0x30
 8013d6e:	5518      	strb	r0, [r3, r4]
 8013d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d72:	3401      	adds	r4, #1
 8013d74:	0005      	movs	r5, r0
 8013d76:	429c      	cmp	r4, r3
 8013d78:	dab6      	bge.n	8013ce8 <_dtoa_r+0xb3c>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	220a      	movs	r2, #10
 8013d7e:	9905      	ldr	r1, [sp, #20]
 8013d80:	9803      	ldr	r0, [sp, #12]
 8013d82:	f000 f975 	bl	8014070 <__multadd>
 8013d86:	9005      	str	r0, [sp, #20]
 8013d88:	e7eb      	b.n	8013d62 <_dtoa_r+0xbb6>
 8013d8a:	46c0      	nop			@ (mov r8, r8)
 8013d8c:	08017349 	.word	0x08017349
 8013d90:	08017351 	.word	0x08017351

08013d94 <_free_r>:
 8013d94:	b570      	push	{r4, r5, r6, lr}
 8013d96:	0005      	movs	r5, r0
 8013d98:	1e0c      	subs	r4, r1, #0
 8013d9a:	d010      	beq.n	8013dbe <_free_r+0x2a>
 8013d9c:	3c04      	subs	r4, #4
 8013d9e:	6823      	ldr	r3, [r4, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	da00      	bge.n	8013da6 <_free_r+0x12>
 8013da4:	18e4      	adds	r4, r4, r3
 8013da6:	0028      	movs	r0, r5
 8013da8:	f000 f8ea 	bl	8013f80 <__malloc_lock>
 8013dac:	4a1d      	ldr	r2, [pc, #116]	@ (8013e24 <_free_r+0x90>)
 8013dae:	6813      	ldr	r3, [r2, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d105      	bne.n	8013dc0 <_free_r+0x2c>
 8013db4:	6063      	str	r3, [r4, #4]
 8013db6:	6014      	str	r4, [r2, #0]
 8013db8:	0028      	movs	r0, r5
 8013dba:	f000 f8e9 	bl	8013f90 <__malloc_unlock>
 8013dbe:	bd70      	pop	{r4, r5, r6, pc}
 8013dc0:	42a3      	cmp	r3, r4
 8013dc2:	d908      	bls.n	8013dd6 <_free_r+0x42>
 8013dc4:	6820      	ldr	r0, [r4, #0]
 8013dc6:	1821      	adds	r1, r4, r0
 8013dc8:	428b      	cmp	r3, r1
 8013dca:	d1f3      	bne.n	8013db4 <_free_r+0x20>
 8013dcc:	6819      	ldr	r1, [r3, #0]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	1809      	adds	r1, r1, r0
 8013dd2:	6021      	str	r1, [r4, #0]
 8013dd4:	e7ee      	b.n	8013db4 <_free_r+0x20>
 8013dd6:	001a      	movs	r2, r3
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d001      	beq.n	8013de2 <_free_r+0x4e>
 8013dde:	42a3      	cmp	r3, r4
 8013de0:	d9f9      	bls.n	8013dd6 <_free_r+0x42>
 8013de2:	6811      	ldr	r1, [r2, #0]
 8013de4:	1850      	adds	r0, r2, r1
 8013de6:	42a0      	cmp	r0, r4
 8013de8:	d10b      	bne.n	8013e02 <_free_r+0x6e>
 8013dea:	6820      	ldr	r0, [r4, #0]
 8013dec:	1809      	adds	r1, r1, r0
 8013dee:	1850      	adds	r0, r2, r1
 8013df0:	6011      	str	r1, [r2, #0]
 8013df2:	4283      	cmp	r3, r0
 8013df4:	d1e0      	bne.n	8013db8 <_free_r+0x24>
 8013df6:	6818      	ldr	r0, [r3, #0]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	1841      	adds	r1, r0, r1
 8013dfc:	6011      	str	r1, [r2, #0]
 8013dfe:	6053      	str	r3, [r2, #4]
 8013e00:	e7da      	b.n	8013db8 <_free_r+0x24>
 8013e02:	42a0      	cmp	r0, r4
 8013e04:	d902      	bls.n	8013e0c <_free_r+0x78>
 8013e06:	230c      	movs	r3, #12
 8013e08:	602b      	str	r3, [r5, #0]
 8013e0a:	e7d5      	b.n	8013db8 <_free_r+0x24>
 8013e0c:	6820      	ldr	r0, [r4, #0]
 8013e0e:	1821      	adds	r1, r4, r0
 8013e10:	428b      	cmp	r3, r1
 8013e12:	d103      	bne.n	8013e1c <_free_r+0x88>
 8013e14:	6819      	ldr	r1, [r3, #0]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	1809      	adds	r1, r1, r0
 8013e1a:	6021      	str	r1, [r4, #0]
 8013e1c:	6063      	str	r3, [r4, #4]
 8013e1e:	6054      	str	r4, [r2, #4]
 8013e20:	e7ca      	b.n	8013db8 <_free_r+0x24>
 8013e22:	46c0      	nop			@ (mov r8, r8)
 8013e24:	20007284 	.word	0x20007284

08013e28 <malloc>:
 8013e28:	b510      	push	{r4, lr}
 8013e2a:	4b03      	ldr	r3, [pc, #12]	@ (8013e38 <malloc+0x10>)
 8013e2c:	0001      	movs	r1, r0
 8013e2e:	6818      	ldr	r0, [r3, #0]
 8013e30:	f000 f826 	bl	8013e80 <_malloc_r>
 8013e34:	bd10      	pop	{r4, pc}
 8013e36:	46c0      	nop			@ (mov r8, r8)
 8013e38:	20000094 	.word	0x20000094

08013e3c <sbrk_aligned>:
 8013e3c:	b570      	push	{r4, r5, r6, lr}
 8013e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8013e7c <sbrk_aligned+0x40>)
 8013e40:	000d      	movs	r5, r1
 8013e42:	6831      	ldr	r1, [r6, #0]
 8013e44:	0004      	movs	r4, r0
 8013e46:	2900      	cmp	r1, #0
 8013e48:	d102      	bne.n	8013e50 <sbrk_aligned+0x14>
 8013e4a:	f001 fe47 	bl	8015adc <_sbrk_r>
 8013e4e:	6030      	str	r0, [r6, #0]
 8013e50:	0029      	movs	r1, r5
 8013e52:	0020      	movs	r0, r4
 8013e54:	f001 fe42 	bl	8015adc <_sbrk_r>
 8013e58:	1c43      	adds	r3, r0, #1
 8013e5a:	d103      	bne.n	8013e64 <sbrk_aligned+0x28>
 8013e5c:	2501      	movs	r5, #1
 8013e5e:	426d      	negs	r5, r5
 8013e60:	0028      	movs	r0, r5
 8013e62:	bd70      	pop	{r4, r5, r6, pc}
 8013e64:	2303      	movs	r3, #3
 8013e66:	1cc5      	adds	r5, r0, #3
 8013e68:	439d      	bics	r5, r3
 8013e6a:	42a8      	cmp	r0, r5
 8013e6c:	d0f8      	beq.n	8013e60 <sbrk_aligned+0x24>
 8013e6e:	1a29      	subs	r1, r5, r0
 8013e70:	0020      	movs	r0, r4
 8013e72:	f001 fe33 	bl	8015adc <_sbrk_r>
 8013e76:	3001      	adds	r0, #1
 8013e78:	d1f2      	bne.n	8013e60 <sbrk_aligned+0x24>
 8013e7a:	e7ef      	b.n	8013e5c <sbrk_aligned+0x20>
 8013e7c:	20007280 	.word	0x20007280

08013e80 <_malloc_r>:
 8013e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e82:	2203      	movs	r2, #3
 8013e84:	1ccb      	adds	r3, r1, #3
 8013e86:	4393      	bics	r3, r2
 8013e88:	3308      	adds	r3, #8
 8013e8a:	0005      	movs	r5, r0
 8013e8c:	001f      	movs	r7, r3
 8013e8e:	2b0c      	cmp	r3, #12
 8013e90:	d234      	bcs.n	8013efc <_malloc_r+0x7c>
 8013e92:	270c      	movs	r7, #12
 8013e94:	42b9      	cmp	r1, r7
 8013e96:	d833      	bhi.n	8013f00 <_malloc_r+0x80>
 8013e98:	0028      	movs	r0, r5
 8013e9a:	f000 f871 	bl	8013f80 <__malloc_lock>
 8013e9e:	4e37      	ldr	r6, [pc, #220]	@ (8013f7c <_malloc_r+0xfc>)
 8013ea0:	6833      	ldr	r3, [r6, #0]
 8013ea2:	001c      	movs	r4, r3
 8013ea4:	2c00      	cmp	r4, #0
 8013ea6:	d12f      	bne.n	8013f08 <_malloc_r+0x88>
 8013ea8:	0039      	movs	r1, r7
 8013eaa:	0028      	movs	r0, r5
 8013eac:	f7ff ffc6 	bl	8013e3c <sbrk_aligned>
 8013eb0:	0004      	movs	r4, r0
 8013eb2:	1c43      	adds	r3, r0, #1
 8013eb4:	d15f      	bne.n	8013f76 <_malloc_r+0xf6>
 8013eb6:	6834      	ldr	r4, [r6, #0]
 8013eb8:	9400      	str	r4, [sp, #0]
 8013eba:	9b00      	ldr	r3, [sp, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d14a      	bne.n	8013f56 <_malloc_r+0xd6>
 8013ec0:	2c00      	cmp	r4, #0
 8013ec2:	d052      	beq.n	8013f6a <_malloc_r+0xea>
 8013ec4:	6823      	ldr	r3, [r4, #0]
 8013ec6:	0028      	movs	r0, r5
 8013ec8:	18e3      	adds	r3, r4, r3
 8013eca:	9900      	ldr	r1, [sp, #0]
 8013ecc:	9301      	str	r3, [sp, #4]
 8013ece:	f001 fe05 	bl	8015adc <_sbrk_r>
 8013ed2:	9b01      	ldr	r3, [sp, #4]
 8013ed4:	4283      	cmp	r3, r0
 8013ed6:	d148      	bne.n	8013f6a <_malloc_r+0xea>
 8013ed8:	6823      	ldr	r3, [r4, #0]
 8013eda:	0028      	movs	r0, r5
 8013edc:	1aff      	subs	r7, r7, r3
 8013ede:	0039      	movs	r1, r7
 8013ee0:	f7ff ffac 	bl	8013e3c <sbrk_aligned>
 8013ee4:	3001      	adds	r0, #1
 8013ee6:	d040      	beq.n	8013f6a <_malloc_r+0xea>
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	19db      	adds	r3, r3, r7
 8013eec:	6023      	str	r3, [r4, #0]
 8013eee:	6833      	ldr	r3, [r6, #0]
 8013ef0:	685a      	ldr	r2, [r3, #4]
 8013ef2:	2a00      	cmp	r2, #0
 8013ef4:	d133      	bne.n	8013f5e <_malloc_r+0xde>
 8013ef6:	9b00      	ldr	r3, [sp, #0]
 8013ef8:	6033      	str	r3, [r6, #0]
 8013efa:	e019      	b.n	8013f30 <_malloc_r+0xb0>
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	dac9      	bge.n	8013e94 <_malloc_r+0x14>
 8013f00:	230c      	movs	r3, #12
 8013f02:	602b      	str	r3, [r5, #0]
 8013f04:	2000      	movs	r0, #0
 8013f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013f08:	6821      	ldr	r1, [r4, #0]
 8013f0a:	1bc9      	subs	r1, r1, r7
 8013f0c:	d420      	bmi.n	8013f50 <_malloc_r+0xd0>
 8013f0e:	290b      	cmp	r1, #11
 8013f10:	d90a      	bls.n	8013f28 <_malloc_r+0xa8>
 8013f12:	19e2      	adds	r2, r4, r7
 8013f14:	6027      	str	r7, [r4, #0]
 8013f16:	42a3      	cmp	r3, r4
 8013f18:	d104      	bne.n	8013f24 <_malloc_r+0xa4>
 8013f1a:	6032      	str	r2, [r6, #0]
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	6011      	str	r1, [r2, #0]
 8013f20:	6053      	str	r3, [r2, #4]
 8013f22:	e005      	b.n	8013f30 <_malloc_r+0xb0>
 8013f24:	605a      	str	r2, [r3, #4]
 8013f26:	e7f9      	b.n	8013f1c <_malloc_r+0x9c>
 8013f28:	6862      	ldr	r2, [r4, #4]
 8013f2a:	42a3      	cmp	r3, r4
 8013f2c:	d10e      	bne.n	8013f4c <_malloc_r+0xcc>
 8013f2e:	6032      	str	r2, [r6, #0]
 8013f30:	0028      	movs	r0, r5
 8013f32:	f000 f82d 	bl	8013f90 <__malloc_unlock>
 8013f36:	0020      	movs	r0, r4
 8013f38:	2207      	movs	r2, #7
 8013f3a:	300b      	adds	r0, #11
 8013f3c:	1d23      	adds	r3, r4, #4
 8013f3e:	4390      	bics	r0, r2
 8013f40:	1ac2      	subs	r2, r0, r3
 8013f42:	4298      	cmp	r0, r3
 8013f44:	d0df      	beq.n	8013f06 <_malloc_r+0x86>
 8013f46:	1a1b      	subs	r3, r3, r0
 8013f48:	50a3      	str	r3, [r4, r2]
 8013f4a:	e7dc      	b.n	8013f06 <_malloc_r+0x86>
 8013f4c:	605a      	str	r2, [r3, #4]
 8013f4e:	e7ef      	b.n	8013f30 <_malloc_r+0xb0>
 8013f50:	0023      	movs	r3, r4
 8013f52:	6864      	ldr	r4, [r4, #4]
 8013f54:	e7a6      	b.n	8013ea4 <_malloc_r+0x24>
 8013f56:	9c00      	ldr	r4, [sp, #0]
 8013f58:	6863      	ldr	r3, [r4, #4]
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	e7ad      	b.n	8013eba <_malloc_r+0x3a>
 8013f5e:	001a      	movs	r2, r3
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	42a3      	cmp	r3, r4
 8013f64:	d1fb      	bne.n	8013f5e <_malloc_r+0xde>
 8013f66:	2300      	movs	r3, #0
 8013f68:	e7da      	b.n	8013f20 <_malloc_r+0xa0>
 8013f6a:	230c      	movs	r3, #12
 8013f6c:	0028      	movs	r0, r5
 8013f6e:	602b      	str	r3, [r5, #0]
 8013f70:	f000 f80e 	bl	8013f90 <__malloc_unlock>
 8013f74:	e7c6      	b.n	8013f04 <_malloc_r+0x84>
 8013f76:	6007      	str	r7, [r0, #0]
 8013f78:	e7da      	b.n	8013f30 <_malloc_r+0xb0>
 8013f7a:	46c0      	nop			@ (mov r8, r8)
 8013f7c:	20007284 	.word	0x20007284

08013f80 <__malloc_lock>:
 8013f80:	b510      	push	{r4, lr}
 8013f82:	4802      	ldr	r0, [pc, #8]	@ (8013f8c <__malloc_lock+0xc>)
 8013f84:	f7ff f86d 	bl	8013062 <__retarget_lock_acquire_recursive>
 8013f88:	bd10      	pop	{r4, pc}
 8013f8a:	46c0      	nop			@ (mov r8, r8)
 8013f8c:	2000727c 	.word	0x2000727c

08013f90 <__malloc_unlock>:
 8013f90:	b510      	push	{r4, lr}
 8013f92:	4802      	ldr	r0, [pc, #8]	@ (8013f9c <__malloc_unlock+0xc>)
 8013f94:	f7ff f866 	bl	8013064 <__retarget_lock_release_recursive>
 8013f98:	bd10      	pop	{r4, pc}
 8013f9a:	46c0      	nop			@ (mov r8, r8)
 8013f9c:	2000727c 	.word	0x2000727c

08013fa0 <_Balloc>:
 8013fa0:	b570      	push	{r4, r5, r6, lr}
 8013fa2:	69c5      	ldr	r5, [r0, #28]
 8013fa4:	0006      	movs	r6, r0
 8013fa6:	000c      	movs	r4, r1
 8013fa8:	2d00      	cmp	r5, #0
 8013faa:	d10e      	bne.n	8013fca <_Balloc+0x2a>
 8013fac:	2010      	movs	r0, #16
 8013fae:	f7ff ff3b 	bl	8013e28 <malloc>
 8013fb2:	1e02      	subs	r2, r0, #0
 8013fb4:	61f0      	str	r0, [r6, #28]
 8013fb6:	d104      	bne.n	8013fc2 <_Balloc+0x22>
 8013fb8:	216b      	movs	r1, #107	@ 0x6b
 8013fba:	4b19      	ldr	r3, [pc, #100]	@ (8014020 <_Balloc+0x80>)
 8013fbc:	4819      	ldr	r0, [pc, #100]	@ (8014024 <_Balloc+0x84>)
 8013fbe:	f001 fda5 	bl	8015b0c <__assert_func>
 8013fc2:	6045      	str	r5, [r0, #4]
 8013fc4:	6085      	str	r5, [r0, #8]
 8013fc6:	6005      	str	r5, [r0, #0]
 8013fc8:	60c5      	str	r5, [r0, #12]
 8013fca:	69f5      	ldr	r5, [r6, #28]
 8013fcc:	68eb      	ldr	r3, [r5, #12]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d013      	beq.n	8013ffa <_Balloc+0x5a>
 8013fd2:	69f3      	ldr	r3, [r6, #28]
 8013fd4:	00a2      	lsls	r2, r4, #2
 8013fd6:	68db      	ldr	r3, [r3, #12]
 8013fd8:	189b      	adds	r3, r3, r2
 8013fda:	6818      	ldr	r0, [r3, #0]
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d118      	bne.n	8014012 <_Balloc+0x72>
 8013fe0:	2101      	movs	r1, #1
 8013fe2:	000d      	movs	r5, r1
 8013fe4:	40a5      	lsls	r5, r4
 8013fe6:	1d6a      	adds	r2, r5, #5
 8013fe8:	0030      	movs	r0, r6
 8013fea:	0092      	lsls	r2, r2, #2
 8013fec:	f001 fdac 	bl	8015b48 <_calloc_r>
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	d00c      	beq.n	801400e <_Balloc+0x6e>
 8013ff4:	6044      	str	r4, [r0, #4]
 8013ff6:	6085      	str	r5, [r0, #8]
 8013ff8:	e00d      	b.n	8014016 <_Balloc+0x76>
 8013ffa:	2221      	movs	r2, #33	@ 0x21
 8013ffc:	2104      	movs	r1, #4
 8013ffe:	0030      	movs	r0, r6
 8014000:	f001 fda2 	bl	8015b48 <_calloc_r>
 8014004:	69f3      	ldr	r3, [r6, #28]
 8014006:	60e8      	str	r0, [r5, #12]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d1e1      	bne.n	8013fd2 <_Balloc+0x32>
 801400e:	2000      	movs	r0, #0
 8014010:	bd70      	pop	{r4, r5, r6, pc}
 8014012:	6802      	ldr	r2, [r0, #0]
 8014014:	601a      	str	r2, [r3, #0]
 8014016:	2300      	movs	r3, #0
 8014018:	6103      	str	r3, [r0, #16]
 801401a:	60c3      	str	r3, [r0, #12]
 801401c:	e7f8      	b.n	8014010 <_Balloc+0x70>
 801401e:	46c0      	nop			@ (mov r8, r8)
 8014020:	08017356 	.word	0x08017356
 8014024:	080173d6 	.word	0x080173d6

08014028 <_Bfree>:
 8014028:	b570      	push	{r4, r5, r6, lr}
 801402a:	69c6      	ldr	r6, [r0, #28]
 801402c:	0005      	movs	r5, r0
 801402e:	000c      	movs	r4, r1
 8014030:	2e00      	cmp	r6, #0
 8014032:	d10e      	bne.n	8014052 <_Bfree+0x2a>
 8014034:	2010      	movs	r0, #16
 8014036:	f7ff fef7 	bl	8013e28 <malloc>
 801403a:	1e02      	subs	r2, r0, #0
 801403c:	61e8      	str	r0, [r5, #28]
 801403e:	d104      	bne.n	801404a <_Bfree+0x22>
 8014040:	218f      	movs	r1, #143	@ 0x8f
 8014042:	4b09      	ldr	r3, [pc, #36]	@ (8014068 <_Bfree+0x40>)
 8014044:	4809      	ldr	r0, [pc, #36]	@ (801406c <_Bfree+0x44>)
 8014046:	f001 fd61 	bl	8015b0c <__assert_func>
 801404a:	6046      	str	r6, [r0, #4]
 801404c:	6086      	str	r6, [r0, #8]
 801404e:	6006      	str	r6, [r0, #0]
 8014050:	60c6      	str	r6, [r0, #12]
 8014052:	2c00      	cmp	r4, #0
 8014054:	d007      	beq.n	8014066 <_Bfree+0x3e>
 8014056:	69eb      	ldr	r3, [r5, #28]
 8014058:	6862      	ldr	r2, [r4, #4]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	0092      	lsls	r2, r2, #2
 801405e:	189b      	adds	r3, r3, r2
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	6022      	str	r2, [r4, #0]
 8014064:	601c      	str	r4, [r3, #0]
 8014066:	bd70      	pop	{r4, r5, r6, pc}
 8014068:	08017356 	.word	0x08017356
 801406c:	080173d6 	.word	0x080173d6

08014070 <__multadd>:
 8014070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014072:	000f      	movs	r7, r1
 8014074:	9001      	str	r0, [sp, #4]
 8014076:	000c      	movs	r4, r1
 8014078:	001e      	movs	r6, r3
 801407a:	2000      	movs	r0, #0
 801407c:	690d      	ldr	r5, [r1, #16]
 801407e:	3714      	adds	r7, #20
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	3001      	adds	r0, #1
 8014084:	b299      	uxth	r1, r3
 8014086:	4351      	muls	r1, r2
 8014088:	0c1b      	lsrs	r3, r3, #16
 801408a:	4353      	muls	r3, r2
 801408c:	1989      	adds	r1, r1, r6
 801408e:	0c0e      	lsrs	r6, r1, #16
 8014090:	199b      	adds	r3, r3, r6
 8014092:	0c1e      	lsrs	r6, r3, #16
 8014094:	b289      	uxth	r1, r1
 8014096:	041b      	lsls	r3, r3, #16
 8014098:	185b      	adds	r3, r3, r1
 801409a:	c708      	stmia	r7!, {r3}
 801409c:	4285      	cmp	r5, r0
 801409e:	dcef      	bgt.n	8014080 <__multadd+0x10>
 80140a0:	2e00      	cmp	r6, #0
 80140a2:	d022      	beq.n	80140ea <__multadd+0x7a>
 80140a4:	68a3      	ldr	r3, [r4, #8]
 80140a6:	42ab      	cmp	r3, r5
 80140a8:	dc19      	bgt.n	80140de <__multadd+0x6e>
 80140aa:	6861      	ldr	r1, [r4, #4]
 80140ac:	9801      	ldr	r0, [sp, #4]
 80140ae:	3101      	adds	r1, #1
 80140b0:	f7ff ff76 	bl	8013fa0 <_Balloc>
 80140b4:	1e07      	subs	r7, r0, #0
 80140b6:	d105      	bne.n	80140c4 <__multadd+0x54>
 80140b8:	003a      	movs	r2, r7
 80140ba:	21ba      	movs	r1, #186	@ 0xba
 80140bc:	4b0c      	ldr	r3, [pc, #48]	@ (80140f0 <__multadd+0x80>)
 80140be:	480d      	ldr	r0, [pc, #52]	@ (80140f4 <__multadd+0x84>)
 80140c0:	f001 fd24 	bl	8015b0c <__assert_func>
 80140c4:	0021      	movs	r1, r4
 80140c6:	6922      	ldr	r2, [r4, #16]
 80140c8:	310c      	adds	r1, #12
 80140ca:	3202      	adds	r2, #2
 80140cc:	0092      	lsls	r2, r2, #2
 80140ce:	300c      	adds	r0, #12
 80140d0:	f7fe ffd4 	bl	801307c <memcpy>
 80140d4:	0021      	movs	r1, r4
 80140d6:	9801      	ldr	r0, [sp, #4]
 80140d8:	f7ff ffa6 	bl	8014028 <_Bfree>
 80140dc:	003c      	movs	r4, r7
 80140de:	1d2b      	adds	r3, r5, #4
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	18e3      	adds	r3, r4, r3
 80140e4:	3501      	adds	r5, #1
 80140e6:	605e      	str	r6, [r3, #4]
 80140e8:	6125      	str	r5, [r4, #16]
 80140ea:	0020      	movs	r0, r4
 80140ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80140ee:	46c0      	nop			@ (mov r8, r8)
 80140f0:	080173c5 	.word	0x080173c5
 80140f4:	080173d6 	.word	0x080173d6

080140f8 <__s2b>:
 80140f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140fa:	0007      	movs	r7, r0
 80140fc:	0018      	movs	r0, r3
 80140fe:	000c      	movs	r4, r1
 8014100:	3008      	adds	r0, #8
 8014102:	2109      	movs	r1, #9
 8014104:	9301      	str	r3, [sp, #4]
 8014106:	0015      	movs	r5, r2
 8014108:	f7ec f8a4 	bl	8000254 <__divsi3>
 801410c:	2301      	movs	r3, #1
 801410e:	2100      	movs	r1, #0
 8014110:	4283      	cmp	r3, r0
 8014112:	db0a      	blt.n	801412a <__s2b+0x32>
 8014114:	0038      	movs	r0, r7
 8014116:	f7ff ff43 	bl	8013fa0 <_Balloc>
 801411a:	1e01      	subs	r1, r0, #0
 801411c:	d108      	bne.n	8014130 <__s2b+0x38>
 801411e:	000a      	movs	r2, r1
 8014120:	4b19      	ldr	r3, [pc, #100]	@ (8014188 <__s2b+0x90>)
 8014122:	481a      	ldr	r0, [pc, #104]	@ (801418c <__s2b+0x94>)
 8014124:	31d3      	adds	r1, #211	@ 0xd3
 8014126:	f001 fcf1 	bl	8015b0c <__assert_func>
 801412a:	005b      	lsls	r3, r3, #1
 801412c:	3101      	adds	r1, #1
 801412e:	e7ef      	b.n	8014110 <__s2b+0x18>
 8014130:	9b08      	ldr	r3, [sp, #32]
 8014132:	6143      	str	r3, [r0, #20]
 8014134:	2301      	movs	r3, #1
 8014136:	6103      	str	r3, [r0, #16]
 8014138:	2d09      	cmp	r5, #9
 801413a:	dd18      	ble.n	801416e <__s2b+0x76>
 801413c:	0023      	movs	r3, r4
 801413e:	3309      	adds	r3, #9
 8014140:	001e      	movs	r6, r3
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	1964      	adds	r4, r4, r5
 8014146:	7833      	ldrb	r3, [r6, #0]
 8014148:	220a      	movs	r2, #10
 801414a:	0038      	movs	r0, r7
 801414c:	3b30      	subs	r3, #48	@ 0x30
 801414e:	f7ff ff8f 	bl	8014070 <__multadd>
 8014152:	3601      	adds	r6, #1
 8014154:	0001      	movs	r1, r0
 8014156:	42a6      	cmp	r6, r4
 8014158:	d1f5      	bne.n	8014146 <__s2b+0x4e>
 801415a:	002c      	movs	r4, r5
 801415c:	9b00      	ldr	r3, [sp, #0]
 801415e:	3c08      	subs	r4, #8
 8014160:	191c      	adds	r4, r3, r4
 8014162:	002e      	movs	r6, r5
 8014164:	9b01      	ldr	r3, [sp, #4]
 8014166:	429e      	cmp	r6, r3
 8014168:	db04      	blt.n	8014174 <__s2b+0x7c>
 801416a:	0008      	movs	r0, r1
 801416c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801416e:	2509      	movs	r5, #9
 8014170:	340a      	adds	r4, #10
 8014172:	e7f6      	b.n	8014162 <__s2b+0x6a>
 8014174:	1b63      	subs	r3, r4, r5
 8014176:	5d9b      	ldrb	r3, [r3, r6]
 8014178:	220a      	movs	r2, #10
 801417a:	0038      	movs	r0, r7
 801417c:	3b30      	subs	r3, #48	@ 0x30
 801417e:	f7ff ff77 	bl	8014070 <__multadd>
 8014182:	3601      	adds	r6, #1
 8014184:	0001      	movs	r1, r0
 8014186:	e7ed      	b.n	8014164 <__s2b+0x6c>
 8014188:	080173c5 	.word	0x080173c5
 801418c:	080173d6 	.word	0x080173d6

08014190 <__hi0bits>:
 8014190:	2280      	movs	r2, #128	@ 0x80
 8014192:	0003      	movs	r3, r0
 8014194:	0252      	lsls	r2, r2, #9
 8014196:	2000      	movs	r0, #0
 8014198:	4293      	cmp	r3, r2
 801419a:	d201      	bcs.n	80141a0 <__hi0bits+0x10>
 801419c:	041b      	lsls	r3, r3, #16
 801419e:	3010      	adds	r0, #16
 80141a0:	2280      	movs	r2, #128	@ 0x80
 80141a2:	0452      	lsls	r2, r2, #17
 80141a4:	4293      	cmp	r3, r2
 80141a6:	d201      	bcs.n	80141ac <__hi0bits+0x1c>
 80141a8:	3008      	adds	r0, #8
 80141aa:	021b      	lsls	r3, r3, #8
 80141ac:	2280      	movs	r2, #128	@ 0x80
 80141ae:	0552      	lsls	r2, r2, #21
 80141b0:	4293      	cmp	r3, r2
 80141b2:	d201      	bcs.n	80141b8 <__hi0bits+0x28>
 80141b4:	3004      	adds	r0, #4
 80141b6:	011b      	lsls	r3, r3, #4
 80141b8:	2280      	movs	r2, #128	@ 0x80
 80141ba:	05d2      	lsls	r2, r2, #23
 80141bc:	4293      	cmp	r3, r2
 80141be:	d201      	bcs.n	80141c4 <__hi0bits+0x34>
 80141c0:	3002      	adds	r0, #2
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	db03      	blt.n	80141d0 <__hi0bits+0x40>
 80141c8:	3001      	adds	r0, #1
 80141ca:	4213      	tst	r3, r2
 80141cc:	d100      	bne.n	80141d0 <__hi0bits+0x40>
 80141ce:	2020      	movs	r0, #32
 80141d0:	4770      	bx	lr

080141d2 <__lo0bits>:
 80141d2:	6803      	ldr	r3, [r0, #0]
 80141d4:	0001      	movs	r1, r0
 80141d6:	2207      	movs	r2, #7
 80141d8:	0018      	movs	r0, r3
 80141da:	4010      	ands	r0, r2
 80141dc:	4213      	tst	r3, r2
 80141de:	d00d      	beq.n	80141fc <__lo0bits+0x2a>
 80141e0:	3a06      	subs	r2, #6
 80141e2:	2000      	movs	r0, #0
 80141e4:	4213      	tst	r3, r2
 80141e6:	d105      	bne.n	80141f4 <__lo0bits+0x22>
 80141e8:	3002      	adds	r0, #2
 80141ea:	4203      	tst	r3, r0
 80141ec:	d003      	beq.n	80141f6 <__lo0bits+0x24>
 80141ee:	40d3      	lsrs	r3, r2
 80141f0:	0010      	movs	r0, r2
 80141f2:	600b      	str	r3, [r1, #0]
 80141f4:	4770      	bx	lr
 80141f6:	089b      	lsrs	r3, r3, #2
 80141f8:	600b      	str	r3, [r1, #0]
 80141fa:	e7fb      	b.n	80141f4 <__lo0bits+0x22>
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	2a00      	cmp	r2, #0
 8014200:	d101      	bne.n	8014206 <__lo0bits+0x34>
 8014202:	2010      	movs	r0, #16
 8014204:	0c1b      	lsrs	r3, r3, #16
 8014206:	b2da      	uxtb	r2, r3
 8014208:	2a00      	cmp	r2, #0
 801420a:	d101      	bne.n	8014210 <__lo0bits+0x3e>
 801420c:	3008      	adds	r0, #8
 801420e:	0a1b      	lsrs	r3, r3, #8
 8014210:	071a      	lsls	r2, r3, #28
 8014212:	d101      	bne.n	8014218 <__lo0bits+0x46>
 8014214:	3004      	adds	r0, #4
 8014216:	091b      	lsrs	r3, r3, #4
 8014218:	079a      	lsls	r2, r3, #30
 801421a:	d101      	bne.n	8014220 <__lo0bits+0x4e>
 801421c:	3002      	adds	r0, #2
 801421e:	089b      	lsrs	r3, r3, #2
 8014220:	07da      	lsls	r2, r3, #31
 8014222:	d4e9      	bmi.n	80141f8 <__lo0bits+0x26>
 8014224:	3001      	adds	r0, #1
 8014226:	085b      	lsrs	r3, r3, #1
 8014228:	d1e6      	bne.n	80141f8 <__lo0bits+0x26>
 801422a:	2020      	movs	r0, #32
 801422c:	e7e2      	b.n	80141f4 <__lo0bits+0x22>
	...

08014230 <__i2b>:
 8014230:	b510      	push	{r4, lr}
 8014232:	000c      	movs	r4, r1
 8014234:	2101      	movs	r1, #1
 8014236:	f7ff feb3 	bl	8013fa0 <_Balloc>
 801423a:	2800      	cmp	r0, #0
 801423c:	d107      	bne.n	801424e <__i2b+0x1e>
 801423e:	2146      	movs	r1, #70	@ 0x46
 8014240:	4c05      	ldr	r4, [pc, #20]	@ (8014258 <__i2b+0x28>)
 8014242:	0002      	movs	r2, r0
 8014244:	4b05      	ldr	r3, [pc, #20]	@ (801425c <__i2b+0x2c>)
 8014246:	0020      	movs	r0, r4
 8014248:	31ff      	adds	r1, #255	@ 0xff
 801424a:	f001 fc5f 	bl	8015b0c <__assert_func>
 801424e:	2301      	movs	r3, #1
 8014250:	6144      	str	r4, [r0, #20]
 8014252:	6103      	str	r3, [r0, #16]
 8014254:	bd10      	pop	{r4, pc}
 8014256:	46c0      	nop			@ (mov r8, r8)
 8014258:	080173d6 	.word	0x080173d6
 801425c:	080173c5 	.word	0x080173c5

08014260 <__multiply>:
 8014260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014262:	0014      	movs	r4, r2
 8014264:	690a      	ldr	r2, [r1, #16]
 8014266:	6923      	ldr	r3, [r4, #16]
 8014268:	000d      	movs	r5, r1
 801426a:	b08b      	sub	sp, #44	@ 0x2c
 801426c:	429a      	cmp	r2, r3
 801426e:	db02      	blt.n	8014276 <__multiply+0x16>
 8014270:	0023      	movs	r3, r4
 8014272:	000c      	movs	r4, r1
 8014274:	001d      	movs	r5, r3
 8014276:	6927      	ldr	r7, [r4, #16]
 8014278:	692e      	ldr	r6, [r5, #16]
 801427a:	6861      	ldr	r1, [r4, #4]
 801427c:	19bb      	adds	r3, r7, r6
 801427e:	9303      	str	r3, [sp, #12]
 8014280:	68a3      	ldr	r3, [r4, #8]
 8014282:	19ba      	adds	r2, r7, r6
 8014284:	4293      	cmp	r3, r2
 8014286:	da00      	bge.n	801428a <__multiply+0x2a>
 8014288:	3101      	adds	r1, #1
 801428a:	f7ff fe89 	bl	8013fa0 <_Balloc>
 801428e:	9002      	str	r0, [sp, #8]
 8014290:	2800      	cmp	r0, #0
 8014292:	d106      	bne.n	80142a2 <__multiply+0x42>
 8014294:	21b1      	movs	r1, #177	@ 0xb1
 8014296:	4b49      	ldr	r3, [pc, #292]	@ (80143bc <__multiply+0x15c>)
 8014298:	4849      	ldr	r0, [pc, #292]	@ (80143c0 <__multiply+0x160>)
 801429a:	9a02      	ldr	r2, [sp, #8]
 801429c:	0049      	lsls	r1, r1, #1
 801429e:	f001 fc35 	bl	8015b0c <__assert_func>
 80142a2:	9b02      	ldr	r3, [sp, #8]
 80142a4:	2200      	movs	r2, #0
 80142a6:	3314      	adds	r3, #20
 80142a8:	469c      	mov	ip, r3
 80142aa:	19bb      	adds	r3, r7, r6
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4463      	add	r3, ip
 80142b0:	9304      	str	r3, [sp, #16]
 80142b2:	4663      	mov	r3, ip
 80142b4:	9904      	ldr	r1, [sp, #16]
 80142b6:	428b      	cmp	r3, r1
 80142b8:	d32a      	bcc.n	8014310 <__multiply+0xb0>
 80142ba:	0023      	movs	r3, r4
 80142bc:	00bf      	lsls	r7, r7, #2
 80142be:	3314      	adds	r3, #20
 80142c0:	3514      	adds	r5, #20
 80142c2:	9308      	str	r3, [sp, #32]
 80142c4:	00b6      	lsls	r6, r6, #2
 80142c6:	19db      	adds	r3, r3, r7
 80142c8:	9305      	str	r3, [sp, #20]
 80142ca:	19ab      	adds	r3, r5, r6
 80142cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80142ce:	2304      	movs	r3, #4
 80142d0:	9306      	str	r3, [sp, #24]
 80142d2:	0023      	movs	r3, r4
 80142d4:	9a05      	ldr	r2, [sp, #20]
 80142d6:	3315      	adds	r3, #21
 80142d8:	9501      	str	r5, [sp, #4]
 80142da:	429a      	cmp	r2, r3
 80142dc:	d305      	bcc.n	80142ea <__multiply+0x8a>
 80142de:	1b13      	subs	r3, r2, r4
 80142e0:	3b15      	subs	r3, #21
 80142e2:	089b      	lsrs	r3, r3, #2
 80142e4:	3301      	adds	r3, #1
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	9306      	str	r3, [sp, #24]
 80142ea:	9b01      	ldr	r3, [sp, #4]
 80142ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142ee:	4293      	cmp	r3, r2
 80142f0:	d310      	bcc.n	8014314 <__multiply+0xb4>
 80142f2:	9b03      	ldr	r3, [sp, #12]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	dd05      	ble.n	8014304 <__multiply+0xa4>
 80142f8:	9b04      	ldr	r3, [sp, #16]
 80142fa:	3b04      	subs	r3, #4
 80142fc:	9304      	str	r3, [sp, #16]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d056      	beq.n	80143b2 <__multiply+0x152>
 8014304:	9b02      	ldr	r3, [sp, #8]
 8014306:	9a03      	ldr	r2, [sp, #12]
 8014308:	0018      	movs	r0, r3
 801430a:	611a      	str	r2, [r3, #16]
 801430c:	b00b      	add	sp, #44	@ 0x2c
 801430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014310:	c304      	stmia	r3!, {r2}
 8014312:	e7cf      	b.n	80142b4 <__multiply+0x54>
 8014314:	9b01      	ldr	r3, [sp, #4]
 8014316:	6818      	ldr	r0, [r3, #0]
 8014318:	b280      	uxth	r0, r0
 801431a:	2800      	cmp	r0, #0
 801431c:	d01e      	beq.n	801435c <__multiply+0xfc>
 801431e:	4667      	mov	r7, ip
 8014320:	2500      	movs	r5, #0
 8014322:	9e08      	ldr	r6, [sp, #32]
 8014324:	ce02      	ldmia	r6!, {r1}
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	9307      	str	r3, [sp, #28]
 801432a:	b28b      	uxth	r3, r1
 801432c:	4343      	muls	r3, r0
 801432e:	001a      	movs	r2, r3
 8014330:	466b      	mov	r3, sp
 8014332:	0c09      	lsrs	r1, r1, #16
 8014334:	8b9b      	ldrh	r3, [r3, #28]
 8014336:	4341      	muls	r1, r0
 8014338:	18d3      	adds	r3, r2, r3
 801433a:	9a07      	ldr	r2, [sp, #28]
 801433c:	195b      	adds	r3, r3, r5
 801433e:	0c12      	lsrs	r2, r2, #16
 8014340:	1889      	adds	r1, r1, r2
 8014342:	0c1a      	lsrs	r2, r3, #16
 8014344:	188a      	adds	r2, r1, r2
 8014346:	b29b      	uxth	r3, r3
 8014348:	0c15      	lsrs	r5, r2, #16
 801434a:	0412      	lsls	r2, r2, #16
 801434c:	431a      	orrs	r2, r3
 801434e:	9b05      	ldr	r3, [sp, #20]
 8014350:	c704      	stmia	r7!, {r2}
 8014352:	42b3      	cmp	r3, r6
 8014354:	d8e6      	bhi.n	8014324 <__multiply+0xc4>
 8014356:	4663      	mov	r3, ip
 8014358:	9a06      	ldr	r2, [sp, #24]
 801435a:	509d      	str	r5, [r3, r2]
 801435c:	9b01      	ldr	r3, [sp, #4]
 801435e:	6818      	ldr	r0, [r3, #0]
 8014360:	0c00      	lsrs	r0, r0, #16
 8014362:	d020      	beq.n	80143a6 <__multiply+0x146>
 8014364:	4663      	mov	r3, ip
 8014366:	0025      	movs	r5, r4
 8014368:	4661      	mov	r1, ip
 801436a:	2700      	movs	r7, #0
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	3514      	adds	r5, #20
 8014370:	682a      	ldr	r2, [r5, #0]
 8014372:	680e      	ldr	r6, [r1, #0]
 8014374:	b292      	uxth	r2, r2
 8014376:	4342      	muls	r2, r0
 8014378:	0c36      	lsrs	r6, r6, #16
 801437a:	1992      	adds	r2, r2, r6
 801437c:	19d2      	adds	r2, r2, r7
 801437e:	0416      	lsls	r6, r2, #16
 8014380:	b29b      	uxth	r3, r3
 8014382:	431e      	orrs	r6, r3
 8014384:	600e      	str	r6, [r1, #0]
 8014386:	cd40      	ldmia	r5!, {r6}
 8014388:	684b      	ldr	r3, [r1, #4]
 801438a:	0c36      	lsrs	r6, r6, #16
 801438c:	4346      	muls	r6, r0
 801438e:	b29b      	uxth	r3, r3
 8014390:	0c12      	lsrs	r2, r2, #16
 8014392:	18f3      	adds	r3, r6, r3
 8014394:	189b      	adds	r3, r3, r2
 8014396:	9a05      	ldr	r2, [sp, #20]
 8014398:	0c1f      	lsrs	r7, r3, #16
 801439a:	3104      	adds	r1, #4
 801439c:	42aa      	cmp	r2, r5
 801439e:	d8e7      	bhi.n	8014370 <__multiply+0x110>
 80143a0:	4662      	mov	r2, ip
 80143a2:	9906      	ldr	r1, [sp, #24]
 80143a4:	5053      	str	r3, [r2, r1]
 80143a6:	9b01      	ldr	r3, [sp, #4]
 80143a8:	3304      	adds	r3, #4
 80143aa:	9301      	str	r3, [sp, #4]
 80143ac:	2304      	movs	r3, #4
 80143ae:	449c      	add	ip, r3
 80143b0:	e79b      	b.n	80142ea <__multiply+0x8a>
 80143b2:	9b03      	ldr	r3, [sp, #12]
 80143b4:	3b01      	subs	r3, #1
 80143b6:	9303      	str	r3, [sp, #12]
 80143b8:	e79b      	b.n	80142f2 <__multiply+0x92>
 80143ba:	46c0      	nop			@ (mov r8, r8)
 80143bc:	080173c5 	.word	0x080173c5
 80143c0:	080173d6 	.word	0x080173d6

080143c4 <__pow5mult>:
 80143c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143c6:	2303      	movs	r3, #3
 80143c8:	0015      	movs	r5, r2
 80143ca:	0007      	movs	r7, r0
 80143cc:	000e      	movs	r6, r1
 80143ce:	401a      	ands	r2, r3
 80143d0:	421d      	tst	r5, r3
 80143d2:	d008      	beq.n	80143e6 <__pow5mult+0x22>
 80143d4:	4925      	ldr	r1, [pc, #148]	@ (801446c <__pow5mult+0xa8>)
 80143d6:	3a01      	subs	r2, #1
 80143d8:	0092      	lsls	r2, r2, #2
 80143da:	5852      	ldr	r2, [r2, r1]
 80143dc:	2300      	movs	r3, #0
 80143de:	0031      	movs	r1, r6
 80143e0:	f7ff fe46 	bl	8014070 <__multadd>
 80143e4:	0006      	movs	r6, r0
 80143e6:	10ad      	asrs	r5, r5, #2
 80143e8:	d03d      	beq.n	8014466 <__pow5mult+0xa2>
 80143ea:	69fc      	ldr	r4, [r7, #28]
 80143ec:	2c00      	cmp	r4, #0
 80143ee:	d10f      	bne.n	8014410 <__pow5mult+0x4c>
 80143f0:	2010      	movs	r0, #16
 80143f2:	f7ff fd19 	bl	8013e28 <malloc>
 80143f6:	1e02      	subs	r2, r0, #0
 80143f8:	61f8      	str	r0, [r7, #28]
 80143fa:	d105      	bne.n	8014408 <__pow5mult+0x44>
 80143fc:	21b4      	movs	r1, #180	@ 0xb4
 80143fe:	4b1c      	ldr	r3, [pc, #112]	@ (8014470 <__pow5mult+0xac>)
 8014400:	481c      	ldr	r0, [pc, #112]	@ (8014474 <__pow5mult+0xb0>)
 8014402:	31ff      	adds	r1, #255	@ 0xff
 8014404:	f001 fb82 	bl	8015b0c <__assert_func>
 8014408:	6044      	str	r4, [r0, #4]
 801440a:	6084      	str	r4, [r0, #8]
 801440c:	6004      	str	r4, [r0, #0]
 801440e:	60c4      	str	r4, [r0, #12]
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	689c      	ldr	r4, [r3, #8]
 8014414:	9301      	str	r3, [sp, #4]
 8014416:	2c00      	cmp	r4, #0
 8014418:	d108      	bne.n	801442c <__pow5mult+0x68>
 801441a:	0038      	movs	r0, r7
 801441c:	4916      	ldr	r1, [pc, #88]	@ (8014478 <__pow5mult+0xb4>)
 801441e:	f7ff ff07 	bl	8014230 <__i2b>
 8014422:	9b01      	ldr	r3, [sp, #4]
 8014424:	0004      	movs	r4, r0
 8014426:	6098      	str	r0, [r3, #8]
 8014428:	2300      	movs	r3, #0
 801442a:	6003      	str	r3, [r0, #0]
 801442c:	2301      	movs	r3, #1
 801442e:	421d      	tst	r5, r3
 8014430:	d00a      	beq.n	8014448 <__pow5mult+0x84>
 8014432:	0031      	movs	r1, r6
 8014434:	0022      	movs	r2, r4
 8014436:	0038      	movs	r0, r7
 8014438:	f7ff ff12 	bl	8014260 <__multiply>
 801443c:	0031      	movs	r1, r6
 801443e:	9001      	str	r0, [sp, #4]
 8014440:	0038      	movs	r0, r7
 8014442:	f7ff fdf1 	bl	8014028 <_Bfree>
 8014446:	9e01      	ldr	r6, [sp, #4]
 8014448:	106d      	asrs	r5, r5, #1
 801444a:	d00c      	beq.n	8014466 <__pow5mult+0xa2>
 801444c:	6820      	ldr	r0, [r4, #0]
 801444e:	2800      	cmp	r0, #0
 8014450:	d107      	bne.n	8014462 <__pow5mult+0x9e>
 8014452:	0022      	movs	r2, r4
 8014454:	0021      	movs	r1, r4
 8014456:	0038      	movs	r0, r7
 8014458:	f7ff ff02 	bl	8014260 <__multiply>
 801445c:	2300      	movs	r3, #0
 801445e:	6020      	str	r0, [r4, #0]
 8014460:	6003      	str	r3, [r0, #0]
 8014462:	0004      	movs	r4, r0
 8014464:	e7e2      	b.n	801442c <__pow5mult+0x68>
 8014466:	0030      	movs	r0, r6
 8014468:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801446a:	46c0      	nop			@ (mov r8, r8)
 801446c:	08017430 	.word	0x08017430
 8014470:	08017356 	.word	0x08017356
 8014474:	080173d6 	.word	0x080173d6
 8014478:	00000271 	.word	0x00000271

0801447c <__lshift>:
 801447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801447e:	000c      	movs	r4, r1
 8014480:	0016      	movs	r6, r2
 8014482:	6923      	ldr	r3, [r4, #16]
 8014484:	1157      	asrs	r7, r2, #5
 8014486:	b085      	sub	sp, #20
 8014488:	18fb      	adds	r3, r7, r3
 801448a:	9301      	str	r3, [sp, #4]
 801448c:	3301      	adds	r3, #1
 801448e:	9300      	str	r3, [sp, #0]
 8014490:	6849      	ldr	r1, [r1, #4]
 8014492:	68a3      	ldr	r3, [r4, #8]
 8014494:	9002      	str	r0, [sp, #8]
 8014496:	9a00      	ldr	r2, [sp, #0]
 8014498:	4293      	cmp	r3, r2
 801449a:	db10      	blt.n	80144be <__lshift+0x42>
 801449c:	9802      	ldr	r0, [sp, #8]
 801449e:	f7ff fd7f 	bl	8013fa0 <_Balloc>
 80144a2:	2300      	movs	r3, #0
 80144a4:	0001      	movs	r1, r0
 80144a6:	0005      	movs	r5, r0
 80144a8:	001a      	movs	r2, r3
 80144aa:	3114      	adds	r1, #20
 80144ac:	4298      	cmp	r0, r3
 80144ae:	d10c      	bne.n	80144ca <__lshift+0x4e>
 80144b0:	21ef      	movs	r1, #239	@ 0xef
 80144b2:	002a      	movs	r2, r5
 80144b4:	4b25      	ldr	r3, [pc, #148]	@ (801454c <__lshift+0xd0>)
 80144b6:	4826      	ldr	r0, [pc, #152]	@ (8014550 <__lshift+0xd4>)
 80144b8:	0049      	lsls	r1, r1, #1
 80144ba:	f001 fb27 	bl	8015b0c <__assert_func>
 80144be:	3101      	adds	r1, #1
 80144c0:	005b      	lsls	r3, r3, #1
 80144c2:	e7e8      	b.n	8014496 <__lshift+0x1a>
 80144c4:	0098      	lsls	r0, r3, #2
 80144c6:	500a      	str	r2, [r1, r0]
 80144c8:	3301      	adds	r3, #1
 80144ca:	42bb      	cmp	r3, r7
 80144cc:	dbfa      	blt.n	80144c4 <__lshift+0x48>
 80144ce:	43fb      	mvns	r3, r7
 80144d0:	17db      	asrs	r3, r3, #31
 80144d2:	401f      	ands	r7, r3
 80144d4:	00bf      	lsls	r7, r7, #2
 80144d6:	0023      	movs	r3, r4
 80144d8:	201f      	movs	r0, #31
 80144da:	19c9      	adds	r1, r1, r7
 80144dc:	0037      	movs	r7, r6
 80144de:	6922      	ldr	r2, [r4, #16]
 80144e0:	3314      	adds	r3, #20
 80144e2:	0092      	lsls	r2, r2, #2
 80144e4:	189a      	adds	r2, r3, r2
 80144e6:	4007      	ands	r7, r0
 80144e8:	4206      	tst	r6, r0
 80144ea:	d029      	beq.n	8014540 <__lshift+0xc4>
 80144ec:	3001      	adds	r0, #1
 80144ee:	1bc0      	subs	r0, r0, r7
 80144f0:	9003      	str	r0, [sp, #12]
 80144f2:	468c      	mov	ip, r1
 80144f4:	2000      	movs	r0, #0
 80144f6:	681e      	ldr	r6, [r3, #0]
 80144f8:	40be      	lsls	r6, r7
 80144fa:	4306      	orrs	r6, r0
 80144fc:	4660      	mov	r0, ip
 80144fe:	c040      	stmia	r0!, {r6}
 8014500:	4684      	mov	ip, r0
 8014502:	9e03      	ldr	r6, [sp, #12]
 8014504:	cb01      	ldmia	r3!, {r0}
 8014506:	40f0      	lsrs	r0, r6
 8014508:	429a      	cmp	r2, r3
 801450a:	d8f4      	bhi.n	80144f6 <__lshift+0x7a>
 801450c:	0026      	movs	r6, r4
 801450e:	3615      	adds	r6, #21
 8014510:	2304      	movs	r3, #4
 8014512:	42b2      	cmp	r2, r6
 8014514:	d304      	bcc.n	8014520 <__lshift+0xa4>
 8014516:	1b13      	subs	r3, r2, r4
 8014518:	3b15      	subs	r3, #21
 801451a:	089b      	lsrs	r3, r3, #2
 801451c:	3301      	adds	r3, #1
 801451e:	009b      	lsls	r3, r3, #2
 8014520:	50c8      	str	r0, [r1, r3]
 8014522:	2800      	cmp	r0, #0
 8014524:	d002      	beq.n	801452c <__lshift+0xb0>
 8014526:	9b01      	ldr	r3, [sp, #4]
 8014528:	3302      	adds	r3, #2
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	9b00      	ldr	r3, [sp, #0]
 801452e:	9802      	ldr	r0, [sp, #8]
 8014530:	3b01      	subs	r3, #1
 8014532:	0021      	movs	r1, r4
 8014534:	612b      	str	r3, [r5, #16]
 8014536:	f7ff fd77 	bl	8014028 <_Bfree>
 801453a:	0028      	movs	r0, r5
 801453c:	b005      	add	sp, #20
 801453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014540:	cb01      	ldmia	r3!, {r0}
 8014542:	c101      	stmia	r1!, {r0}
 8014544:	429a      	cmp	r2, r3
 8014546:	d8fb      	bhi.n	8014540 <__lshift+0xc4>
 8014548:	e7f0      	b.n	801452c <__lshift+0xb0>
 801454a:	46c0      	nop			@ (mov r8, r8)
 801454c:	080173c5 	.word	0x080173c5
 8014550:	080173d6 	.word	0x080173d6

08014554 <__mcmp>:
 8014554:	b530      	push	{r4, r5, lr}
 8014556:	690b      	ldr	r3, [r1, #16]
 8014558:	6904      	ldr	r4, [r0, #16]
 801455a:	0002      	movs	r2, r0
 801455c:	1ae0      	subs	r0, r4, r3
 801455e:	429c      	cmp	r4, r3
 8014560:	d10f      	bne.n	8014582 <__mcmp+0x2e>
 8014562:	3214      	adds	r2, #20
 8014564:	009b      	lsls	r3, r3, #2
 8014566:	3114      	adds	r1, #20
 8014568:	0014      	movs	r4, r2
 801456a:	18c9      	adds	r1, r1, r3
 801456c:	18d2      	adds	r2, r2, r3
 801456e:	3a04      	subs	r2, #4
 8014570:	3904      	subs	r1, #4
 8014572:	6815      	ldr	r5, [r2, #0]
 8014574:	680b      	ldr	r3, [r1, #0]
 8014576:	429d      	cmp	r5, r3
 8014578:	d004      	beq.n	8014584 <__mcmp+0x30>
 801457a:	2001      	movs	r0, #1
 801457c:	429d      	cmp	r5, r3
 801457e:	d200      	bcs.n	8014582 <__mcmp+0x2e>
 8014580:	3802      	subs	r0, #2
 8014582:	bd30      	pop	{r4, r5, pc}
 8014584:	4294      	cmp	r4, r2
 8014586:	d3f2      	bcc.n	801456e <__mcmp+0x1a>
 8014588:	e7fb      	b.n	8014582 <__mcmp+0x2e>
	...

0801458c <__mdiff>:
 801458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801458e:	000c      	movs	r4, r1
 8014590:	b087      	sub	sp, #28
 8014592:	9000      	str	r0, [sp, #0]
 8014594:	0011      	movs	r1, r2
 8014596:	0020      	movs	r0, r4
 8014598:	0017      	movs	r7, r2
 801459a:	f7ff ffdb 	bl	8014554 <__mcmp>
 801459e:	1e05      	subs	r5, r0, #0
 80145a0:	d110      	bne.n	80145c4 <__mdiff+0x38>
 80145a2:	0001      	movs	r1, r0
 80145a4:	9800      	ldr	r0, [sp, #0]
 80145a6:	f7ff fcfb 	bl	8013fa0 <_Balloc>
 80145aa:	1e02      	subs	r2, r0, #0
 80145ac:	d104      	bne.n	80145b8 <__mdiff+0x2c>
 80145ae:	4b40      	ldr	r3, [pc, #256]	@ (80146b0 <__mdiff+0x124>)
 80145b0:	4840      	ldr	r0, [pc, #256]	@ (80146b4 <__mdiff+0x128>)
 80145b2:	4941      	ldr	r1, [pc, #260]	@ (80146b8 <__mdiff+0x12c>)
 80145b4:	f001 faaa 	bl	8015b0c <__assert_func>
 80145b8:	2301      	movs	r3, #1
 80145ba:	6145      	str	r5, [r0, #20]
 80145bc:	6103      	str	r3, [r0, #16]
 80145be:	0010      	movs	r0, r2
 80145c0:	b007      	add	sp, #28
 80145c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145c4:	2600      	movs	r6, #0
 80145c6:	42b0      	cmp	r0, r6
 80145c8:	da03      	bge.n	80145d2 <__mdiff+0x46>
 80145ca:	0023      	movs	r3, r4
 80145cc:	003c      	movs	r4, r7
 80145ce:	001f      	movs	r7, r3
 80145d0:	3601      	adds	r6, #1
 80145d2:	6861      	ldr	r1, [r4, #4]
 80145d4:	9800      	ldr	r0, [sp, #0]
 80145d6:	f7ff fce3 	bl	8013fa0 <_Balloc>
 80145da:	1e02      	subs	r2, r0, #0
 80145dc:	d103      	bne.n	80145e6 <__mdiff+0x5a>
 80145de:	4b34      	ldr	r3, [pc, #208]	@ (80146b0 <__mdiff+0x124>)
 80145e0:	4834      	ldr	r0, [pc, #208]	@ (80146b4 <__mdiff+0x128>)
 80145e2:	4936      	ldr	r1, [pc, #216]	@ (80146bc <__mdiff+0x130>)
 80145e4:	e7e6      	b.n	80145b4 <__mdiff+0x28>
 80145e6:	6923      	ldr	r3, [r4, #16]
 80145e8:	3414      	adds	r4, #20
 80145ea:	9300      	str	r3, [sp, #0]
 80145ec:	009b      	lsls	r3, r3, #2
 80145ee:	18e3      	adds	r3, r4, r3
 80145f0:	0021      	movs	r1, r4
 80145f2:	9401      	str	r4, [sp, #4]
 80145f4:	003c      	movs	r4, r7
 80145f6:	9302      	str	r3, [sp, #8]
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	3414      	adds	r4, #20
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	18e3      	adds	r3, r4, r3
 8014600:	9303      	str	r3, [sp, #12]
 8014602:	0003      	movs	r3, r0
 8014604:	60c6      	str	r6, [r0, #12]
 8014606:	468c      	mov	ip, r1
 8014608:	2000      	movs	r0, #0
 801460a:	3314      	adds	r3, #20
 801460c:	9304      	str	r3, [sp, #16]
 801460e:	9305      	str	r3, [sp, #20]
 8014610:	4663      	mov	r3, ip
 8014612:	cb20      	ldmia	r3!, {r5}
 8014614:	b2a9      	uxth	r1, r5
 8014616:	000e      	movs	r6, r1
 8014618:	469c      	mov	ip, r3
 801461a:	cc08      	ldmia	r4!, {r3}
 801461c:	0c2d      	lsrs	r5, r5, #16
 801461e:	b299      	uxth	r1, r3
 8014620:	1a71      	subs	r1, r6, r1
 8014622:	1809      	adds	r1, r1, r0
 8014624:	0c1b      	lsrs	r3, r3, #16
 8014626:	1408      	asrs	r0, r1, #16
 8014628:	1aeb      	subs	r3, r5, r3
 801462a:	181b      	adds	r3, r3, r0
 801462c:	1418      	asrs	r0, r3, #16
 801462e:	b289      	uxth	r1, r1
 8014630:	041b      	lsls	r3, r3, #16
 8014632:	4319      	orrs	r1, r3
 8014634:	9b05      	ldr	r3, [sp, #20]
 8014636:	c302      	stmia	r3!, {r1}
 8014638:	9305      	str	r3, [sp, #20]
 801463a:	9b03      	ldr	r3, [sp, #12]
 801463c:	42a3      	cmp	r3, r4
 801463e:	d8e7      	bhi.n	8014610 <__mdiff+0x84>
 8014640:	0039      	movs	r1, r7
 8014642:	9c03      	ldr	r4, [sp, #12]
 8014644:	3115      	adds	r1, #21
 8014646:	2304      	movs	r3, #4
 8014648:	428c      	cmp	r4, r1
 801464a:	d304      	bcc.n	8014656 <__mdiff+0xca>
 801464c:	1be3      	subs	r3, r4, r7
 801464e:	3b15      	subs	r3, #21
 8014650:	089b      	lsrs	r3, r3, #2
 8014652:	3301      	adds	r3, #1
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	9901      	ldr	r1, [sp, #4]
 8014658:	18cd      	adds	r5, r1, r3
 801465a:	9904      	ldr	r1, [sp, #16]
 801465c:	002e      	movs	r6, r5
 801465e:	18cb      	adds	r3, r1, r3
 8014660:	001f      	movs	r7, r3
 8014662:	9902      	ldr	r1, [sp, #8]
 8014664:	428e      	cmp	r6, r1
 8014666:	d311      	bcc.n	801468c <__mdiff+0x100>
 8014668:	9c02      	ldr	r4, [sp, #8]
 801466a:	1ee9      	subs	r1, r5, #3
 801466c:	2000      	movs	r0, #0
 801466e:	428c      	cmp	r4, r1
 8014670:	d304      	bcc.n	801467c <__mdiff+0xf0>
 8014672:	0021      	movs	r1, r4
 8014674:	3103      	adds	r1, #3
 8014676:	1b49      	subs	r1, r1, r5
 8014678:	0889      	lsrs	r1, r1, #2
 801467a:	0088      	lsls	r0, r1, #2
 801467c:	181b      	adds	r3, r3, r0
 801467e:	3b04      	subs	r3, #4
 8014680:	6819      	ldr	r1, [r3, #0]
 8014682:	2900      	cmp	r1, #0
 8014684:	d010      	beq.n	80146a8 <__mdiff+0x11c>
 8014686:	9b00      	ldr	r3, [sp, #0]
 8014688:	6113      	str	r3, [r2, #16]
 801468a:	e798      	b.n	80145be <__mdiff+0x32>
 801468c:	4684      	mov	ip, r0
 801468e:	ce02      	ldmia	r6!, {r1}
 8014690:	b288      	uxth	r0, r1
 8014692:	4460      	add	r0, ip
 8014694:	1400      	asrs	r0, r0, #16
 8014696:	0c0c      	lsrs	r4, r1, #16
 8014698:	1904      	adds	r4, r0, r4
 801469a:	4461      	add	r1, ip
 801469c:	1420      	asrs	r0, r4, #16
 801469e:	b289      	uxth	r1, r1
 80146a0:	0424      	lsls	r4, r4, #16
 80146a2:	4321      	orrs	r1, r4
 80146a4:	c702      	stmia	r7!, {r1}
 80146a6:	e7dc      	b.n	8014662 <__mdiff+0xd6>
 80146a8:	9900      	ldr	r1, [sp, #0]
 80146aa:	3901      	subs	r1, #1
 80146ac:	9100      	str	r1, [sp, #0]
 80146ae:	e7e6      	b.n	801467e <__mdiff+0xf2>
 80146b0:	080173c5 	.word	0x080173c5
 80146b4:	080173d6 	.word	0x080173d6
 80146b8:	00000237 	.word	0x00000237
 80146bc:	00000245 	.word	0x00000245

080146c0 <__ulp>:
 80146c0:	b510      	push	{r4, lr}
 80146c2:	2400      	movs	r4, #0
 80146c4:	4b0c      	ldr	r3, [pc, #48]	@ (80146f8 <__ulp+0x38>)
 80146c6:	4a0d      	ldr	r2, [pc, #52]	@ (80146fc <__ulp+0x3c>)
 80146c8:	400b      	ands	r3, r1
 80146ca:	189b      	adds	r3, r3, r2
 80146cc:	42a3      	cmp	r3, r4
 80146ce:	dc06      	bgt.n	80146de <__ulp+0x1e>
 80146d0:	425b      	negs	r3, r3
 80146d2:	151a      	asrs	r2, r3, #20
 80146d4:	2a13      	cmp	r2, #19
 80146d6:	dc05      	bgt.n	80146e4 <__ulp+0x24>
 80146d8:	2380      	movs	r3, #128	@ 0x80
 80146da:	031b      	lsls	r3, r3, #12
 80146dc:	4113      	asrs	r3, r2
 80146de:	0019      	movs	r1, r3
 80146e0:	0020      	movs	r0, r4
 80146e2:	bd10      	pop	{r4, pc}
 80146e4:	3a14      	subs	r2, #20
 80146e6:	2401      	movs	r4, #1
 80146e8:	2a1e      	cmp	r2, #30
 80146ea:	dc02      	bgt.n	80146f2 <__ulp+0x32>
 80146ec:	2480      	movs	r4, #128	@ 0x80
 80146ee:	0624      	lsls	r4, r4, #24
 80146f0:	40d4      	lsrs	r4, r2
 80146f2:	2300      	movs	r3, #0
 80146f4:	e7f3      	b.n	80146de <__ulp+0x1e>
 80146f6:	46c0      	nop			@ (mov r8, r8)
 80146f8:	7ff00000 	.word	0x7ff00000
 80146fc:	fcc00000 	.word	0xfcc00000

08014700 <__b2d>:
 8014700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014702:	0006      	movs	r6, r0
 8014704:	6903      	ldr	r3, [r0, #16]
 8014706:	3614      	adds	r6, #20
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	18f3      	adds	r3, r6, r3
 801470c:	1f1d      	subs	r5, r3, #4
 801470e:	682c      	ldr	r4, [r5, #0]
 8014710:	000f      	movs	r7, r1
 8014712:	0020      	movs	r0, r4
 8014714:	9301      	str	r3, [sp, #4]
 8014716:	f7ff fd3b 	bl	8014190 <__hi0bits>
 801471a:	2220      	movs	r2, #32
 801471c:	1a12      	subs	r2, r2, r0
 801471e:	603a      	str	r2, [r7, #0]
 8014720:	0003      	movs	r3, r0
 8014722:	4a1c      	ldr	r2, [pc, #112]	@ (8014794 <__b2d+0x94>)
 8014724:	280a      	cmp	r0, #10
 8014726:	dc15      	bgt.n	8014754 <__b2d+0x54>
 8014728:	210b      	movs	r1, #11
 801472a:	0027      	movs	r7, r4
 801472c:	1a09      	subs	r1, r1, r0
 801472e:	40cf      	lsrs	r7, r1
 8014730:	433a      	orrs	r2, r7
 8014732:	468c      	mov	ip, r1
 8014734:	0011      	movs	r1, r2
 8014736:	2200      	movs	r2, #0
 8014738:	42ae      	cmp	r6, r5
 801473a:	d202      	bcs.n	8014742 <__b2d+0x42>
 801473c:	9a01      	ldr	r2, [sp, #4]
 801473e:	3a08      	subs	r2, #8
 8014740:	6812      	ldr	r2, [r2, #0]
 8014742:	3315      	adds	r3, #21
 8014744:	409c      	lsls	r4, r3
 8014746:	4663      	mov	r3, ip
 8014748:	0027      	movs	r7, r4
 801474a:	40da      	lsrs	r2, r3
 801474c:	4317      	orrs	r7, r2
 801474e:	0038      	movs	r0, r7
 8014750:	b003      	add	sp, #12
 8014752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014754:	2700      	movs	r7, #0
 8014756:	42ae      	cmp	r6, r5
 8014758:	d202      	bcs.n	8014760 <__b2d+0x60>
 801475a:	9d01      	ldr	r5, [sp, #4]
 801475c:	3d08      	subs	r5, #8
 801475e:	682f      	ldr	r7, [r5, #0]
 8014760:	210b      	movs	r1, #11
 8014762:	4249      	negs	r1, r1
 8014764:	468c      	mov	ip, r1
 8014766:	449c      	add	ip, r3
 8014768:	2b0b      	cmp	r3, #11
 801476a:	d010      	beq.n	801478e <__b2d+0x8e>
 801476c:	4661      	mov	r1, ip
 801476e:	2320      	movs	r3, #32
 8014770:	408c      	lsls	r4, r1
 8014772:	1a5b      	subs	r3, r3, r1
 8014774:	0039      	movs	r1, r7
 8014776:	40d9      	lsrs	r1, r3
 8014778:	430c      	orrs	r4, r1
 801477a:	4322      	orrs	r2, r4
 801477c:	0011      	movs	r1, r2
 801477e:	2200      	movs	r2, #0
 8014780:	42b5      	cmp	r5, r6
 8014782:	d901      	bls.n	8014788 <__b2d+0x88>
 8014784:	3d04      	subs	r5, #4
 8014786:	682a      	ldr	r2, [r5, #0]
 8014788:	4664      	mov	r4, ip
 801478a:	40a7      	lsls	r7, r4
 801478c:	e7dd      	b.n	801474a <__b2d+0x4a>
 801478e:	4322      	orrs	r2, r4
 8014790:	0011      	movs	r1, r2
 8014792:	e7dc      	b.n	801474e <__b2d+0x4e>
 8014794:	3ff00000 	.word	0x3ff00000

08014798 <__d2b>:
 8014798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801479a:	2101      	movs	r1, #1
 801479c:	0016      	movs	r6, r2
 801479e:	001f      	movs	r7, r3
 80147a0:	f7ff fbfe 	bl	8013fa0 <_Balloc>
 80147a4:	1e04      	subs	r4, r0, #0
 80147a6:	d105      	bne.n	80147b4 <__d2b+0x1c>
 80147a8:	0022      	movs	r2, r4
 80147aa:	4b25      	ldr	r3, [pc, #148]	@ (8014840 <__d2b+0xa8>)
 80147ac:	4825      	ldr	r0, [pc, #148]	@ (8014844 <__d2b+0xac>)
 80147ae:	4926      	ldr	r1, [pc, #152]	@ (8014848 <__d2b+0xb0>)
 80147b0:	f001 f9ac 	bl	8015b0c <__assert_func>
 80147b4:	033b      	lsls	r3, r7, #12
 80147b6:	007d      	lsls	r5, r7, #1
 80147b8:	0b1b      	lsrs	r3, r3, #12
 80147ba:	0d6d      	lsrs	r5, r5, #21
 80147bc:	d002      	beq.n	80147c4 <__d2b+0x2c>
 80147be:	2280      	movs	r2, #128	@ 0x80
 80147c0:	0352      	lsls	r2, r2, #13
 80147c2:	4313      	orrs	r3, r2
 80147c4:	9301      	str	r3, [sp, #4]
 80147c6:	2e00      	cmp	r6, #0
 80147c8:	d025      	beq.n	8014816 <__d2b+0x7e>
 80147ca:	4668      	mov	r0, sp
 80147cc:	9600      	str	r6, [sp, #0]
 80147ce:	f7ff fd00 	bl	80141d2 <__lo0bits>
 80147d2:	9b01      	ldr	r3, [sp, #4]
 80147d4:	9900      	ldr	r1, [sp, #0]
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d01b      	beq.n	8014812 <__d2b+0x7a>
 80147da:	2220      	movs	r2, #32
 80147dc:	001e      	movs	r6, r3
 80147de:	1a12      	subs	r2, r2, r0
 80147e0:	4096      	lsls	r6, r2
 80147e2:	0032      	movs	r2, r6
 80147e4:	40c3      	lsrs	r3, r0
 80147e6:	430a      	orrs	r2, r1
 80147e8:	6162      	str	r2, [r4, #20]
 80147ea:	9301      	str	r3, [sp, #4]
 80147ec:	9e01      	ldr	r6, [sp, #4]
 80147ee:	61a6      	str	r6, [r4, #24]
 80147f0:	1e73      	subs	r3, r6, #1
 80147f2:	419e      	sbcs	r6, r3
 80147f4:	3601      	adds	r6, #1
 80147f6:	6126      	str	r6, [r4, #16]
 80147f8:	2d00      	cmp	r5, #0
 80147fa:	d014      	beq.n	8014826 <__d2b+0x8e>
 80147fc:	2635      	movs	r6, #53	@ 0x35
 80147fe:	4b13      	ldr	r3, [pc, #76]	@ (801484c <__d2b+0xb4>)
 8014800:	18ed      	adds	r5, r5, r3
 8014802:	9b08      	ldr	r3, [sp, #32]
 8014804:	182d      	adds	r5, r5, r0
 8014806:	601d      	str	r5, [r3, #0]
 8014808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801480a:	1a36      	subs	r6, r6, r0
 801480c:	601e      	str	r6, [r3, #0]
 801480e:	0020      	movs	r0, r4
 8014810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014812:	6161      	str	r1, [r4, #20]
 8014814:	e7ea      	b.n	80147ec <__d2b+0x54>
 8014816:	a801      	add	r0, sp, #4
 8014818:	f7ff fcdb 	bl	80141d2 <__lo0bits>
 801481c:	9b01      	ldr	r3, [sp, #4]
 801481e:	2601      	movs	r6, #1
 8014820:	6163      	str	r3, [r4, #20]
 8014822:	3020      	adds	r0, #32
 8014824:	e7e7      	b.n	80147f6 <__d2b+0x5e>
 8014826:	4b0a      	ldr	r3, [pc, #40]	@ (8014850 <__d2b+0xb8>)
 8014828:	18c0      	adds	r0, r0, r3
 801482a:	9b08      	ldr	r3, [sp, #32]
 801482c:	6018      	str	r0, [r3, #0]
 801482e:	4b09      	ldr	r3, [pc, #36]	@ (8014854 <__d2b+0xbc>)
 8014830:	18f3      	adds	r3, r6, r3
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	18e3      	adds	r3, r4, r3
 8014836:	6958      	ldr	r0, [r3, #20]
 8014838:	f7ff fcaa 	bl	8014190 <__hi0bits>
 801483c:	0176      	lsls	r6, r6, #5
 801483e:	e7e3      	b.n	8014808 <__d2b+0x70>
 8014840:	080173c5 	.word	0x080173c5
 8014844:	080173d6 	.word	0x080173d6
 8014848:	0000030f 	.word	0x0000030f
 801484c:	fffffbcd 	.word	0xfffffbcd
 8014850:	fffffbce 	.word	0xfffffbce
 8014854:	3fffffff 	.word	0x3fffffff

08014858 <__ratio>:
 8014858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801485a:	b087      	sub	sp, #28
 801485c:	000f      	movs	r7, r1
 801485e:	a904      	add	r1, sp, #16
 8014860:	0006      	movs	r6, r0
 8014862:	f7ff ff4d 	bl	8014700 <__b2d>
 8014866:	9000      	str	r0, [sp, #0]
 8014868:	9101      	str	r1, [sp, #4]
 801486a:	9b00      	ldr	r3, [sp, #0]
 801486c:	9c01      	ldr	r4, [sp, #4]
 801486e:	0038      	movs	r0, r7
 8014870:	a905      	add	r1, sp, #20
 8014872:	9302      	str	r3, [sp, #8]
 8014874:	9403      	str	r4, [sp, #12]
 8014876:	f7ff ff43 	bl	8014700 <__b2d>
 801487a:	000d      	movs	r5, r1
 801487c:	0002      	movs	r2, r0
 801487e:	000b      	movs	r3, r1
 8014880:	6930      	ldr	r0, [r6, #16]
 8014882:	6939      	ldr	r1, [r7, #16]
 8014884:	9e04      	ldr	r6, [sp, #16]
 8014886:	1a40      	subs	r0, r0, r1
 8014888:	9905      	ldr	r1, [sp, #20]
 801488a:	0140      	lsls	r0, r0, #5
 801488c:	1a71      	subs	r1, r6, r1
 801488e:	1841      	adds	r1, r0, r1
 8014890:	0508      	lsls	r0, r1, #20
 8014892:	2900      	cmp	r1, #0
 8014894:	dd08      	ble.n	80148a8 <__ratio+0x50>
 8014896:	9901      	ldr	r1, [sp, #4]
 8014898:	1841      	adds	r1, r0, r1
 801489a:	9103      	str	r1, [sp, #12]
 801489c:	9802      	ldr	r0, [sp, #8]
 801489e:	9903      	ldr	r1, [sp, #12]
 80148a0:	f7ed fa28 	bl	8001cf4 <__aeabi_ddiv>
 80148a4:	b007      	add	sp, #28
 80148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148a8:	1a2b      	subs	r3, r5, r0
 80148aa:	e7f7      	b.n	801489c <__ratio+0x44>

080148ac <__copybits>:
 80148ac:	b570      	push	{r4, r5, r6, lr}
 80148ae:	0014      	movs	r4, r2
 80148b0:	0005      	movs	r5, r0
 80148b2:	3901      	subs	r1, #1
 80148b4:	6913      	ldr	r3, [r2, #16]
 80148b6:	1149      	asrs	r1, r1, #5
 80148b8:	3101      	adds	r1, #1
 80148ba:	0089      	lsls	r1, r1, #2
 80148bc:	3414      	adds	r4, #20
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	1841      	adds	r1, r0, r1
 80148c2:	18e3      	adds	r3, r4, r3
 80148c4:	42a3      	cmp	r3, r4
 80148c6:	d80d      	bhi.n	80148e4 <__copybits+0x38>
 80148c8:	0014      	movs	r4, r2
 80148ca:	3411      	adds	r4, #17
 80148cc:	2500      	movs	r5, #0
 80148ce:	429c      	cmp	r4, r3
 80148d0:	d803      	bhi.n	80148da <__copybits+0x2e>
 80148d2:	1a9b      	subs	r3, r3, r2
 80148d4:	3b11      	subs	r3, #17
 80148d6:	089b      	lsrs	r3, r3, #2
 80148d8:	009d      	lsls	r5, r3, #2
 80148da:	2300      	movs	r3, #0
 80148dc:	1940      	adds	r0, r0, r5
 80148de:	4281      	cmp	r1, r0
 80148e0:	d803      	bhi.n	80148ea <__copybits+0x3e>
 80148e2:	bd70      	pop	{r4, r5, r6, pc}
 80148e4:	cc40      	ldmia	r4!, {r6}
 80148e6:	c540      	stmia	r5!, {r6}
 80148e8:	e7ec      	b.n	80148c4 <__copybits+0x18>
 80148ea:	c008      	stmia	r0!, {r3}
 80148ec:	e7f7      	b.n	80148de <__copybits+0x32>

080148ee <__any_on>:
 80148ee:	0002      	movs	r2, r0
 80148f0:	6900      	ldr	r0, [r0, #16]
 80148f2:	b510      	push	{r4, lr}
 80148f4:	3214      	adds	r2, #20
 80148f6:	114b      	asrs	r3, r1, #5
 80148f8:	4298      	cmp	r0, r3
 80148fa:	db13      	blt.n	8014924 <__any_on+0x36>
 80148fc:	dd0c      	ble.n	8014918 <__any_on+0x2a>
 80148fe:	241f      	movs	r4, #31
 8014900:	0008      	movs	r0, r1
 8014902:	4020      	ands	r0, r4
 8014904:	4221      	tst	r1, r4
 8014906:	d007      	beq.n	8014918 <__any_on+0x2a>
 8014908:	0099      	lsls	r1, r3, #2
 801490a:	588c      	ldr	r4, [r1, r2]
 801490c:	0021      	movs	r1, r4
 801490e:	40c1      	lsrs	r1, r0
 8014910:	4081      	lsls	r1, r0
 8014912:	2001      	movs	r0, #1
 8014914:	428c      	cmp	r4, r1
 8014916:	d104      	bne.n	8014922 <__any_on+0x34>
 8014918:	009b      	lsls	r3, r3, #2
 801491a:	18d3      	adds	r3, r2, r3
 801491c:	4293      	cmp	r3, r2
 801491e:	d803      	bhi.n	8014928 <__any_on+0x3a>
 8014920:	2000      	movs	r0, #0
 8014922:	bd10      	pop	{r4, pc}
 8014924:	0003      	movs	r3, r0
 8014926:	e7f7      	b.n	8014918 <__any_on+0x2a>
 8014928:	3b04      	subs	r3, #4
 801492a:	6819      	ldr	r1, [r3, #0]
 801492c:	2900      	cmp	r1, #0
 801492e:	d0f5      	beq.n	801491c <__any_on+0x2e>
 8014930:	2001      	movs	r0, #1
 8014932:	e7f6      	b.n	8014922 <__any_on+0x34>

08014934 <sulp>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	0016      	movs	r6, r2
 8014938:	000d      	movs	r5, r1
 801493a:	f7ff fec1 	bl	80146c0 <__ulp>
 801493e:	2e00      	cmp	r6, #0
 8014940:	d00d      	beq.n	801495e <sulp+0x2a>
 8014942:	236b      	movs	r3, #107	@ 0x6b
 8014944:	006a      	lsls	r2, r5, #1
 8014946:	0d52      	lsrs	r2, r2, #21
 8014948:	1a9b      	subs	r3, r3, r2
 801494a:	2b00      	cmp	r3, #0
 801494c:	dd07      	ble.n	801495e <sulp+0x2a>
 801494e:	2400      	movs	r4, #0
 8014950:	4a03      	ldr	r2, [pc, #12]	@ (8014960 <sulp+0x2c>)
 8014952:	051b      	lsls	r3, r3, #20
 8014954:	189d      	adds	r5, r3, r2
 8014956:	002b      	movs	r3, r5
 8014958:	0022      	movs	r2, r4
 801495a:	f7ed fe0f 	bl	800257c <__aeabi_dmul>
 801495e:	bd70      	pop	{r4, r5, r6, pc}
 8014960:	3ff00000 	.word	0x3ff00000

08014964 <_strtod_l>:
 8014964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014966:	b0a3      	sub	sp, #140	@ 0x8c
 8014968:	921b      	str	r2, [sp, #108]	@ 0x6c
 801496a:	2200      	movs	r2, #0
 801496c:	2600      	movs	r6, #0
 801496e:	2700      	movs	r7, #0
 8014970:	9005      	str	r0, [sp, #20]
 8014972:	9109      	str	r1, [sp, #36]	@ 0x24
 8014974:	921e      	str	r2, [sp, #120]	@ 0x78
 8014976:	911d      	str	r1, [sp, #116]	@ 0x74
 8014978:	780a      	ldrb	r2, [r1, #0]
 801497a:	2a2b      	cmp	r2, #43	@ 0x2b
 801497c:	d053      	beq.n	8014a26 <_strtod_l+0xc2>
 801497e:	d83f      	bhi.n	8014a00 <_strtod_l+0x9c>
 8014980:	2a0d      	cmp	r2, #13
 8014982:	d839      	bhi.n	80149f8 <_strtod_l+0x94>
 8014984:	2a08      	cmp	r2, #8
 8014986:	d839      	bhi.n	80149fc <_strtod_l+0x98>
 8014988:	2a00      	cmp	r2, #0
 801498a:	d042      	beq.n	8014a12 <_strtod_l+0xae>
 801498c:	2200      	movs	r2, #0
 801498e:	9212      	str	r2, [sp, #72]	@ 0x48
 8014990:	2100      	movs	r1, #0
 8014992:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8014994:	910c      	str	r1, [sp, #48]	@ 0x30
 8014996:	782a      	ldrb	r2, [r5, #0]
 8014998:	2a30      	cmp	r2, #48	@ 0x30
 801499a:	d000      	beq.n	801499e <_strtod_l+0x3a>
 801499c:	e083      	b.n	8014aa6 <_strtod_l+0x142>
 801499e:	786a      	ldrb	r2, [r5, #1]
 80149a0:	3120      	adds	r1, #32
 80149a2:	438a      	bics	r2, r1
 80149a4:	2a58      	cmp	r2, #88	@ 0x58
 80149a6:	d000      	beq.n	80149aa <_strtod_l+0x46>
 80149a8:	e073      	b.n	8014a92 <_strtod_l+0x12e>
 80149aa:	9302      	str	r3, [sp, #8]
 80149ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80149ae:	4a95      	ldr	r2, [pc, #596]	@ (8014c04 <_strtod_l+0x2a0>)
 80149b0:	9301      	str	r3, [sp, #4]
 80149b2:	ab1e      	add	r3, sp, #120	@ 0x78
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	9805      	ldr	r0, [sp, #20]
 80149b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80149ba:	a91d      	add	r1, sp, #116	@ 0x74
 80149bc:	f001 f95a 	bl	8015c74 <__gethex>
 80149c0:	230f      	movs	r3, #15
 80149c2:	0002      	movs	r2, r0
 80149c4:	401a      	ands	r2, r3
 80149c6:	0004      	movs	r4, r0
 80149c8:	9206      	str	r2, [sp, #24]
 80149ca:	4218      	tst	r0, r3
 80149cc:	d005      	beq.n	80149da <_strtod_l+0x76>
 80149ce:	2a06      	cmp	r2, #6
 80149d0:	d12b      	bne.n	8014a2a <_strtod_l+0xc6>
 80149d2:	2300      	movs	r3, #0
 80149d4:	3501      	adds	r5, #1
 80149d6:	951d      	str	r5, [sp, #116]	@ 0x74
 80149d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80149da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d002      	beq.n	80149e6 <_strtod_l+0x82>
 80149e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80149e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80149e4:	6013      	str	r3, [r2, #0]
 80149e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d019      	beq.n	8014a20 <_strtod_l+0xbc>
 80149ec:	2380      	movs	r3, #128	@ 0x80
 80149ee:	0030      	movs	r0, r6
 80149f0:	061b      	lsls	r3, r3, #24
 80149f2:	18f9      	adds	r1, r7, r3
 80149f4:	b023      	add	sp, #140	@ 0x8c
 80149f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149f8:	2a20      	cmp	r2, #32
 80149fa:	d1c7      	bne.n	801498c <_strtod_l+0x28>
 80149fc:	3101      	adds	r1, #1
 80149fe:	e7ba      	b.n	8014976 <_strtod_l+0x12>
 8014a00:	2a2d      	cmp	r2, #45	@ 0x2d
 8014a02:	d1c3      	bne.n	801498c <_strtod_l+0x28>
 8014a04:	3a2c      	subs	r2, #44	@ 0x2c
 8014a06:	9212      	str	r2, [sp, #72]	@ 0x48
 8014a08:	1c4a      	adds	r2, r1, #1
 8014a0a:	921d      	str	r2, [sp, #116]	@ 0x74
 8014a0c:	784a      	ldrb	r2, [r1, #1]
 8014a0e:	2a00      	cmp	r2, #0
 8014a10:	d1be      	bne.n	8014990 <_strtod_l+0x2c>
 8014a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a14:	931d      	str	r3, [sp, #116]	@ 0x74
 8014a16:	2300      	movs	r3, #0
 8014a18:	9312      	str	r3, [sp, #72]	@ 0x48
 8014a1a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d1df      	bne.n	80149e0 <_strtod_l+0x7c>
 8014a20:	0030      	movs	r0, r6
 8014a22:	0039      	movs	r1, r7
 8014a24:	e7e6      	b.n	80149f4 <_strtod_l+0x90>
 8014a26:	2200      	movs	r2, #0
 8014a28:	e7ed      	b.n	8014a06 <_strtod_l+0xa2>
 8014a2a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8014a2c:	2a00      	cmp	r2, #0
 8014a2e:	d007      	beq.n	8014a40 <_strtod_l+0xdc>
 8014a30:	2135      	movs	r1, #53	@ 0x35
 8014a32:	a820      	add	r0, sp, #128	@ 0x80
 8014a34:	f7ff ff3a 	bl	80148ac <__copybits>
 8014a38:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8014a3a:	9805      	ldr	r0, [sp, #20]
 8014a3c:	f7ff faf4 	bl	8014028 <_Bfree>
 8014a40:	9806      	ldr	r0, [sp, #24]
 8014a42:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014a44:	3801      	subs	r0, #1
 8014a46:	2804      	cmp	r0, #4
 8014a48:	d806      	bhi.n	8014a58 <_strtod_l+0xf4>
 8014a4a:	f7eb fb65 	bl	8000118 <__gnu_thumb1_case_uqi>
 8014a4e:	0312      	.short	0x0312
 8014a50:	1e1c      	.short	0x1e1c
 8014a52:	12          	.byte	0x12
 8014a53:	00          	.byte	0x00
 8014a54:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014a56:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8014a58:	05e4      	lsls	r4, r4, #23
 8014a5a:	d502      	bpl.n	8014a62 <_strtod_l+0xfe>
 8014a5c:	2380      	movs	r3, #128	@ 0x80
 8014a5e:	061b      	lsls	r3, r3, #24
 8014a60:	431f      	orrs	r7, r3
 8014a62:	4b69      	ldr	r3, [pc, #420]	@ (8014c08 <_strtod_l+0x2a4>)
 8014a64:	423b      	tst	r3, r7
 8014a66:	d1b8      	bne.n	80149da <_strtod_l+0x76>
 8014a68:	f7fe fad0 	bl	801300c <__errno>
 8014a6c:	2322      	movs	r3, #34	@ 0x22
 8014a6e:	6003      	str	r3, [r0, #0]
 8014a70:	e7b3      	b.n	80149da <_strtod_l+0x76>
 8014a72:	4966      	ldr	r1, [pc, #408]	@ (8014c0c <_strtod_l+0x2a8>)
 8014a74:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014a76:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014a78:	400a      	ands	r2, r1
 8014a7a:	4965      	ldr	r1, [pc, #404]	@ (8014c10 <_strtod_l+0x2ac>)
 8014a7c:	185b      	adds	r3, r3, r1
 8014a7e:	051b      	lsls	r3, r3, #20
 8014a80:	431a      	orrs	r2, r3
 8014a82:	0017      	movs	r7, r2
 8014a84:	e7e8      	b.n	8014a58 <_strtod_l+0xf4>
 8014a86:	4f60      	ldr	r7, [pc, #384]	@ (8014c08 <_strtod_l+0x2a4>)
 8014a88:	e7e6      	b.n	8014a58 <_strtod_l+0xf4>
 8014a8a:	2601      	movs	r6, #1
 8014a8c:	4f61      	ldr	r7, [pc, #388]	@ (8014c14 <_strtod_l+0x2b0>)
 8014a8e:	4276      	negs	r6, r6
 8014a90:	e7e2      	b.n	8014a58 <_strtod_l+0xf4>
 8014a92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014a94:	1c5a      	adds	r2, r3, #1
 8014a96:	921d      	str	r2, [sp, #116]	@ 0x74
 8014a98:	785b      	ldrb	r3, [r3, #1]
 8014a9a:	2b30      	cmp	r3, #48	@ 0x30
 8014a9c:	d0f9      	beq.n	8014a92 <_strtod_l+0x12e>
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d09b      	beq.n	80149da <_strtod_l+0x76>
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8014aa6:	2500      	movs	r5, #0
 8014aa8:	220a      	movs	r2, #10
 8014aaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014aac:	950d      	str	r5, [sp, #52]	@ 0x34
 8014aae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014ab0:	9508      	str	r5, [sp, #32]
 8014ab2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8014ab4:	7804      	ldrb	r4, [r0, #0]
 8014ab6:	0023      	movs	r3, r4
 8014ab8:	3b30      	subs	r3, #48	@ 0x30
 8014aba:	b2d9      	uxtb	r1, r3
 8014abc:	2909      	cmp	r1, #9
 8014abe:	d927      	bls.n	8014b10 <_strtod_l+0x1ac>
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	4955      	ldr	r1, [pc, #340]	@ (8014c18 <_strtod_l+0x2b4>)
 8014ac4:	f000 fff8 	bl	8015ab8 <strncmp>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d031      	beq.n	8014b30 <_strtod_l+0x1cc>
 8014acc:	2000      	movs	r0, #0
 8014ace:	0023      	movs	r3, r4
 8014ad0:	4684      	mov	ip, r0
 8014ad2:	9a08      	ldr	r2, [sp, #32]
 8014ad4:	900e      	str	r0, [sp, #56]	@ 0x38
 8014ad6:	9206      	str	r2, [sp, #24]
 8014ad8:	2220      	movs	r2, #32
 8014ada:	0019      	movs	r1, r3
 8014adc:	4391      	bics	r1, r2
 8014ade:	000a      	movs	r2, r1
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	9107      	str	r1, [sp, #28]
 8014ae4:	2a45      	cmp	r2, #69	@ 0x45
 8014ae6:	d000      	beq.n	8014aea <_strtod_l+0x186>
 8014ae8:	e0c0      	b.n	8014c6c <_strtod_l+0x308>
 8014aea:	9b06      	ldr	r3, [sp, #24]
 8014aec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014aee:	4303      	orrs	r3, r0
 8014af0:	4313      	orrs	r3, r2
 8014af2:	428b      	cmp	r3, r1
 8014af4:	d08d      	beq.n	8014a12 <_strtod_l+0xae>
 8014af6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014afa:	3301      	adds	r3, #1
 8014afc:	931d      	str	r3, [sp, #116]	@ 0x74
 8014afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b00:	785b      	ldrb	r3, [r3, #1]
 8014b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b04:	d070      	beq.n	8014be8 <_strtod_l+0x284>
 8014b06:	000c      	movs	r4, r1
 8014b08:	2b2d      	cmp	r3, #45	@ 0x2d
 8014b0a:	d173      	bne.n	8014bf4 <_strtod_l+0x290>
 8014b0c:	2401      	movs	r4, #1
 8014b0e:	e06c      	b.n	8014bea <_strtod_l+0x286>
 8014b10:	9908      	ldr	r1, [sp, #32]
 8014b12:	2908      	cmp	r1, #8
 8014b14:	dc09      	bgt.n	8014b2a <_strtod_l+0x1c6>
 8014b16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014b18:	4351      	muls	r1, r2
 8014b1a:	185b      	adds	r3, r3, r1
 8014b1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b1e:	9b08      	ldr	r3, [sp, #32]
 8014b20:	3001      	adds	r0, #1
 8014b22:	3301      	adds	r3, #1
 8014b24:	9308      	str	r3, [sp, #32]
 8014b26:	901d      	str	r0, [sp, #116]	@ 0x74
 8014b28:	e7c3      	b.n	8014ab2 <_strtod_l+0x14e>
 8014b2a:	4355      	muls	r5, r2
 8014b2c:	195d      	adds	r5, r3, r5
 8014b2e:	e7f6      	b.n	8014b1e <_strtod_l+0x1ba>
 8014b30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b32:	1c5a      	adds	r2, r3, #1
 8014b34:	921d      	str	r2, [sp, #116]	@ 0x74
 8014b36:	9a08      	ldr	r2, [sp, #32]
 8014b38:	785b      	ldrb	r3, [r3, #1]
 8014b3a:	2a00      	cmp	r2, #0
 8014b3c:	d03a      	beq.n	8014bb4 <_strtod_l+0x250>
 8014b3e:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b40:	9206      	str	r2, [sp, #24]
 8014b42:	001a      	movs	r2, r3
 8014b44:	3a30      	subs	r2, #48	@ 0x30
 8014b46:	2a09      	cmp	r2, #9
 8014b48:	d912      	bls.n	8014b70 <_strtod_l+0x20c>
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	4694      	mov	ip, r2
 8014b4e:	e7c3      	b.n	8014ad8 <_strtod_l+0x174>
 8014b50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b52:	3001      	adds	r0, #1
 8014b54:	1c5a      	adds	r2, r3, #1
 8014b56:	921d      	str	r2, [sp, #116]	@ 0x74
 8014b58:	785b      	ldrb	r3, [r3, #1]
 8014b5a:	2b30      	cmp	r3, #48	@ 0x30
 8014b5c:	d0f8      	beq.n	8014b50 <_strtod_l+0x1ec>
 8014b5e:	001a      	movs	r2, r3
 8014b60:	3a31      	subs	r2, #49	@ 0x31
 8014b62:	2a08      	cmp	r2, #8
 8014b64:	d83b      	bhi.n	8014bde <_strtod_l+0x27a>
 8014b66:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b68:	2000      	movs	r0, #0
 8014b6a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014b6c:	9006      	str	r0, [sp, #24]
 8014b6e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8014b70:	001a      	movs	r2, r3
 8014b72:	1c41      	adds	r1, r0, #1
 8014b74:	3a30      	subs	r2, #48	@ 0x30
 8014b76:	2b30      	cmp	r3, #48	@ 0x30
 8014b78:	d016      	beq.n	8014ba8 <_strtod_l+0x244>
 8014b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b7c:	185b      	adds	r3, r3, r1
 8014b7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8014b80:	9b06      	ldr	r3, [sp, #24]
 8014b82:	210a      	movs	r1, #10
 8014b84:	469c      	mov	ip, r3
 8014b86:	4484      	add	ip, r0
 8014b88:	459c      	cmp	ip, r3
 8014b8a:	d115      	bne.n	8014bb8 <_strtod_l+0x254>
 8014b8c:	9906      	ldr	r1, [sp, #24]
 8014b8e:	9b06      	ldr	r3, [sp, #24]
 8014b90:	3101      	adds	r1, #1
 8014b92:	1809      	adds	r1, r1, r0
 8014b94:	181b      	adds	r3, r3, r0
 8014b96:	9106      	str	r1, [sp, #24]
 8014b98:	2b08      	cmp	r3, #8
 8014b9a:	dc19      	bgt.n	8014bd0 <_strtod_l+0x26c>
 8014b9c:	230a      	movs	r3, #10
 8014b9e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014ba0:	434b      	muls	r3, r1
 8014ba2:	2100      	movs	r1, #0
 8014ba4:	18d3      	adds	r3, r2, r3
 8014ba6:	930d      	str	r3, [sp, #52]	@ 0x34
 8014ba8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014baa:	0008      	movs	r0, r1
 8014bac:	1c5a      	adds	r2, r3, #1
 8014bae:	921d      	str	r2, [sp, #116]	@ 0x74
 8014bb0:	785b      	ldrb	r3, [r3, #1]
 8014bb2:	e7c6      	b.n	8014b42 <_strtod_l+0x1de>
 8014bb4:	9808      	ldr	r0, [sp, #32]
 8014bb6:	e7d0      	b.n	8014b5a <_strtod_l+0x1f6>
 8014bb8:	1c5c      	adds	r4, r3, #1
 8014bba:	2b08      	cmp	r3, #8
 8014bbc:	dc04      	bgt.n	8014bc8 <_strtod_l+0x264>
 8014bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014bc0:	434b      	muls	r3, r1
 8014bc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8014bc4:	0023      	movs	r3, r4
 8014bc6:	e7df      	b.n	8014b88 <_strtod_l+0x224>
 8014bc8:	2c10      	cmp	r4, #16
 8014bca:	dcfb      	bgt.n	8014bc4 <_strtod_l+0x260>
 8014bcc:	434d      	muls	r5, r1
 8014bce:	e7f9      	b.n	8014bc4 <_strtod_l+0x260>
 8014bd0:	2100      	movs	r1, #0
 8014bd2:	2b0f      	cmp	r3, #15
 8014bd4:	dce8      	bgt.n	8014ba8 <_strtod_l+0x244>
 8014bd6:	230a      	movs	r3, #10
 8014bd8:	435d      	muls	r5, r3
 8014bda:	1955      	adds	r5, r2, r5
 8014bdc:	e7e4      	b.n	8014ba8 <_strtod_l+0x244>
 8014bde:	2200      	movs	r2, #0
 8014be0:	920e      	str	r2, [sp, #56]	@ 0x38
 8014be2:	9206      	str	r2, [sp, #24]
 8014be4:	3201      	adds	r2, #1
 8014be6:	e7b1      	b.n	8014b4c <_strtod_l+0x1e8>
 8014be8:	2400      	movs	r4, #0
 8014bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bec:	3302      	adds	r3, #2
 8014bee:	931d      	str	r3, [sp, #116]	@ 0x74
 8014bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bf2:	789b      	ldrb	r3, [r3, #2]
 8014bf4:	001a      	movs	r2, r3
 8014bf6:	3a30      	subs	r2, #48	@ 0x30
 8014bf8:	2a09      	cmp	r2, #9
 8014bfa:	d913      	bls.n	8014c24 <_strtod_l+0x2c0>
 8014bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bfe:	921d      	str	r2, [sp, #116]	@ 0x74
 8014c00:	2200      	movs	r2, #0
 8014c02:	e032      	b.n	8014c6a <_strtod_l+0x306>
 8014c04:	08017548 	.word	0x08017548
 8014c08:	7ff00000 	.word	0x7ff00000
 8014c0c:	ffefffff 	.word	0xffefffff
 8014c10:	00000433 	.word	0x00000433
 8014c14:	7fffffff 	.word	0x7fffffff
 8014c18:	08017530 	.word	0x08017530
 8014c1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c1e:	1c5a      	adds	r2, r3, #1
 8014c20:	921d      	str	r2, [sp, #116]	@ 0x74
 8014c22:	785b      	ldrb	r3, [r3, #1]
 8014c24:	2b30      	cmp	r3, #48	@ 0x30
 8014c26:	d0f9      	beq.n	8014c1c <_strtod_l+0x2b8>
 8014c28:	2200      	movs	r2, #0
 8014c2a:	9207      	str	r2, [sp, #28]
 8014c2c:	001a      	movs	r2, r3
 8014c2e:	3a31      	subs	r2, #49	@ 0x31
 8014c30:	2a08      	cmp	r2, #8
 8014c32:	d81b      	bhi.n	8014c6c <_strtod_l+0x308>
 8014c34:	3b30      	subs	r3, #48	@ 0x30
 8014c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c3a:	9307      	str	r3, [sp, #28]
 8014c3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c3e:	1c59      	adds	r1, r3, #1
 8014c40:	911d      	str	r1, [sp, #116]	@ 0x74
 8014c42:	785b      	ldrb	r3, [r3, #1]
 8014c44:	001a      	movs	r2, r3
 8014c46:	3a30      	subs	r2, #48	@ 0x30
 8014c48:	2a09      	cmp	r2, #9
 8014c4a:	d93a      	bls.n	8014cc2 <_strtod_l+0x35e>
 8014c4c:	9a07      	ldr	r2, [sp, #28]
 8014c4e:	1a8a      	subs	r2, r1, r2
 8014c50:	49b4      	ldr	r1, [pc, #720]	@ (8014f24 <_strtod_l+0x5c0>)
 8014c52:	9107      	str	r1, [sp, #28]
 8014c54:	2a08      	cmp	r2, #8
 8014c56:	dc04      	bgt.n	8014c62 <_strtod_l+0x2fe>
 8014c58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014c5a:	9207      	str	r2, [sp, #28]
 8014c5c:	428a      	cmp	r2, r1
 8014c5e:	dd00      	ble.n	8014c62 <_strtod_l+0x2fe>
 8014c60:	9107      	str	r1, [sp, #28]
 8014c62:	2c00      	cmp	r4, #0
 8014c64:	d002      	beq.n	8014c6c <_strtod_l+0x308>
 8014c66:	9a07      	ldr	r2, [sp, #28]
 8014c68:	4252      	negs	r2, r2
 8014c6a:	9207      	str	r2, [sp, #28]
 8014c6c:	9a06      	ldr	r2, [sp, #24]
 8014c6e:	2a00      	cmp	r2, #0
 8014c70:	d14d      	bne.n	8014d0e <_strtod_l+0x3aa>
 8014c72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014c74:	4310      	orrs	r0, r2
 8014c76:	d000      	beq.n	8014c7a <_strtod_l+0x316>
 8014c78:	e6af      	b.n	80149da <_strtod_l+0x76>
 8014c7a:	4662      	mov	r2, ip
 8014c7c:	2a00      	cmp	r2, #0
 8014c7e:	d000      	beq.n	8014c82 <_strtod_l+0x31e>
 8014c80:	e6c7      	b.n	8014a12 <_strtod_l+0xae>
 8014c82:	2b69      	cmp	r3, #105	@ 0x69
 8014c84:	d027      	beq.n	8014cd6 <_strtod_l+0x372>
 8014c86:	dc23      	bgt.n	8014cd0 <_strtod_l+0x36c>
 8014c88:	2b49      	cmp	r3, #73	@ 0x49
 8014c8a:	d024      	beq.n	8014cd6 <_strtod_l+0x372>
 8014c8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8014c8e:	d000      	beq.n	8014c92 <_strtod_l+0x32e>
 8014c90:	e6bf      	b.n	8014a12 <_strtod_l+0xae>
 8014c92:	49a5      	ldr	r1, [pc, #660]	@ (8014f28 <_strtod_l+0x5c4>)
 8014c94:	a81d      	add	r0, sp, #116	@ 0x74
 8014c96:	f001 fa23 	bl	80160e0 <__match>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d100      	bne.n	8014ca0 <_strtod_l+0x33c>
 8014c9e:	e6b8      	b.n	8014a12 <_strtod_l+0xae>
 8014ca0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	2b28      	cmp	r3, #40	@ 0x28
 8014ca6:	d12c      	bne.n	8014d02 <_strtod_l+0x39e>
 8014ca8:	49a0      	ldr	r1, [pc, #640]	@ (8014f2c <_strtod_l+0x5c8>)
 8014caa:	aa20      	add	r2, sp, #128	@ 0x80
 8014cac:	a81d      	add	r0, sp, #116	@ 0x74
 8014cae:	f001 fa2b 	bl	8016108 <__hexnan>
 8014cb2:	2805      	cmp	r0, #5
 8014cb4:	d125      	bne.n	8014d02 <_strtod_l+0x39e>
 8014cb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014cb8:	4a9d      	ldr	r2, [pc, #628]	@ (8014f30 <_strtod_l+0x5cc>)
 8014cba:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014cbc:	431a      	orrs	r2, r3
 8014cbe:	0017      	movs	r7, r2
 8014cc0:	e68b      	b.n	80149da <_strtod_l+0x76>
 8014cc2:	220a      	movs	r2, #10
 8014cc4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014cc6:	434a      	muls	r2, r1
 8014cc8:	18d2      	adds	r2, r2, r3
 8014cca:	3a30      	subs	r2, #48	@ 0x30
 8014ccc:	9210      	str	r2, [sp, #64]	@ 0x40
 8014cce:	e7b5      	b.n	8014c3c <_strtod_l+0x2d8>
 8014cd0:	2b6e      	cmp	r3, #110	@ 0x6e
 8014cd2:	d0de      	beq.n	8014c92 <_strtod_l+0x32e>
 8014cd4:	e69d      	b.n	8014a12 <_strtod_l+0xae>
 8014cd6:	4997      	ldr	r1, [pc, #604]	@ (8014f34 <_strtod_l+0x5d0>)
 8014cd8:	a81d      	add	r0, sp, #116	@ 0x74
 8014cda:	f001 fa01 	bl	80160e0 <__match>
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	d100      	bne.n	8014ce4 <_strtod_l+0x380>
 8014ce2:	e696      	b.n	8014a12 <_strtod_l+0xae>
 8014ce4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ce6:	4994      	ldr	r1, [pc, #592]	@ (8014f38 <_strtod_l+0x5d4>)
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	a81d      	add	r0, sp, #116	@ 0x74
 8014cec:	931d      	str	r3, [sp, #116]	@ 0x74
 8014cee:	f001 f9f7 	bl	80160e0 <__match>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d102      	bne.n	8014cfc <_strtod_l+0x398>
 8014cf6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	931d      	str	r3, [sp, #116]	@ 0x74
 8014cfc:	2600      	movs	r6, #0
 8014cfe:	4f8c      	ldr	r7, [pc, #560]	@ (8014f30 <_strtod_l+0x5cc>)
 8014d00:	e66b      	b.n	80149da <_strtod_l+0x76>
 8014d02:	488e      	ldr	r0, [pc, #568]	@ (8014f3c <_strtod_l+0x5d8>)
 8014d04:	f000 fefc 	bl	8015b00 <nan>
 8014d08:	0006      	movs	r6, r0
 8014d0a:	000f      	movs	r7, r1
 8014d0c:	e665      	b.n	80149da <_strtod_l+0x76>
 8014d0e:	9b07      	ldr	r3, [sp, #28]
 8014d10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d12:	1a9b      	subs	r3, r3, r2
 8014d14:	930c      	str	r3, [sp, #48]	@ 0x30
 8014d16:	9b08      	ldr	r3, [sp, #32]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d101      	bne.n	8014d20 <_strtod_l+0x3bc>
 8014d1c:	9b06      	ldr	r3, [sp, #24]
 8014d1e:	9308      	str	r3, [sp, #32]
 8014d20:	9c06      	ldr	r4, [sp, #24]
 8014d22:	2c10      	cmp	r4, #16
 8014d24:	dd00      	ble.n	8014d28 <_strtod_l+0x3c4>
 8014d26:	2410      	movs	r4, #16
 8014d28:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8014d2a:	f7ee fb17 	bl	800335c <__aeabi_ui2d>
 8014d2e:	9b06      	ldr	r3, [sp, #24]
 8014d30:	0006      	movs	r6, r0
 8014d32:	000f      	movs	r7, r1
 8014d34:	2b09      	cmp	r3, #9
 8014d36:	dc13      	bgt.n	8014d60 <_strtod_l+0x3fc>
 8014d38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d100      	bne.n	8014d40 <_strtod_l+0x3dc>
 8014d3e:	e64c      	b.n	80149da <_strtod_l+0x76>
 8014d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	dc00      	bgt.n	8014d48 <_strtod_l+0x3e4>
 8014d46:	e07e      	b.n	8014e46 <_strtod_l+0x4e2>
 8014d48:	2b16      	cmp	r3, #22
 8014d4a:	dc63      	bgt.n	8014e14 <_strtod_l+0x4b0>
 8014d4c:	497c      	ldr	r1, [pc, #496]	@ (8014f40 <_strtod_l+0x5dc>)
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	18c9      	adds	r1, r1, r3
 8014d52:	0032      	movs	r2, r6
 8014d54:	6808      	ldr	r0, [r1, #0]
 8014d56:	6849      	ldr	r1, [r1, #4]
 8014d58:	003b      	movs	r3, r7
 8014d5a:	f7ed fc0f 	bl	800257c <__aeabi_dmul>
 8014d5e:	e7d3      	b.n	8014d08 <_strtod_l+0x3a4>
 8014d60:	0022      	movs	r2, r4
 8014d62:	4b77      	ldr	r3, [pc, #476]	@ (8014f40 <_strtod_l+0x5dc>)
 8014d64:	3a09      	subs	r2, #9
 8014d66:	00d2      	lsls	r2, r2, #3
 8014d68:	189b      	adds	r3, r3, r2
 8014d6a:	681a      	ldr	r2, [r3, #0]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	f7ed fc05 	bl	800257c <__aeabi_dmul>
 8014d72:	0006      	movs	r6, r0
 8014d74:	0028      	movs	r0, r5
 8014d76:	000f      	movs	r7, r1
 8014d78:	f7ee faf0 	bl	800335c <__aeabi_ui2d>
 8014d7c:	000b      	movs	r3, r1
 8014d7e:	0002      	movs	r2, r0
 8014d80:	0039      	movs	r1, r7
 8014d82:	0030      	movs	r0, r6
 8014d84:	f7ec fc52 	bl	800162c <__aeabi_dadd>
 8014d88:	9b06      	ldr	r3, [sp, #24]
 8014d8a:	0006      	movs	r6, r0
 8014d8c:	000f      	movs	r7, r1
 8014d8e:	2b0f      	cmp	r3, #15
 8014d90:	ddd2      	ble.n	8014d38 <_strtod_l+0x3d4>
 8014d92:	9b06      	ldr	r3, [sp, #24]
 8014d94:	1b1c      	subs	r4, r3, r4
 8014d96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d98:	18e4      	adds	r4, r4, r3
 8014d9a:	2c00      	cmp	r4, #0
 8014d9c:	dc00      	bgt.n	8014da0 <_strtod_l+0x43c>
 8014d9e:	e09b      	b.n	8014ed8 <_strtod_l+0x574>
 8014da0:	220f      	movs	r2, #15
 8014da2:	0023      	movs	r3, r4
 8014da4:	4013      	ands	r3, r2
 8014da6:	4214      	tst	r4, r2
 8014da8:	d00a      	beq.n	8014dc0 <_strtod_l+0x45c>
 8014daa:	4965      	ldr	r1, [pc, #404]	@ (8014f40 <_strtod_l+0x5dc>)
 8014dac:	00db      	lsls	r3, r3, #3
 8014dae:	18c9      	adds	r1, r1, r3
 8014db0:	0032      	movs	r2, r6
 8014db2:	6808      	ldr	r0, [r1, #0]
 8014db4:	6849      	ldr	r1, [r1, #4]
 8014db6:	003b      	movs	r3, r7
 8014db8:	f7ed fbe0 	bl	800257c <__aeabi_dmul>
 8014dbc:	0006      	movs	r6, r0
 8014dbe:	000f      	movs	r7, r1
 8014dc0:	230f      	movs	r3, #15
 8014dc2:	439c      	bics	r4, r3
 8014dc4:	d073      	beq.n	8014eae <_strtod_l+0x54a>
 8014dc6:	3326      	adds	r3, #38	@ 0x26
 8014dc8:	33ff      	adds	r3, #255	@ 0xff
 8014dca:	429c      	cmp	r4, r3
 8014dcc:	dd4b      	ble.n	8014e66 <_strtod_l+0x502>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	9306      	str	r3, [sp, #24]
 8014dd2:	9307      	str	r3, [sp, #28]
 8014dd4:	930d      	str	r3, [sp, #52]	@ 0x34
 8014dd6:	9308      	str	r3, [sp, #32]
 8014dd8:	2322      	movs	r3, #34	@ 0x22
 8014dda:	2600      	movs	r6, #0
 8014ddc:	9a05      	ldr	r2, [sp, #20]
 8014dde:	4f54      	ldr	r7, [pc, #336]	@ (8014f30 <_strtod_l+0x5cc>)
 8014de0:	6013      	str	r3, [r2, #0]
 8014de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014de4:	42b3      	cmp	r3, r6
 8014de6:	d100      	bne.n	8014dea <_strtod_l+0x486>
 8014de8:	e5f7      	b.n	80149da <_strtod_l+0x76>
 8014dea:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8014dec:	9805      	ldr	r0, [sp, #20]
 8014dee:	f7ff f91b 	bl	8014028 <_Bfree>
 8014df2:	9908      	ldr	r1, [sp, #32]
 8014df4:	9805      	ldr	r0, [sp, #20]
 8014df6:	f7ff f917 	bl	8014028 <_Bfree>
 8014dfa:	9907      	ldr	r1, [sp, #28]
 8014dfc:	9805      	ldr	r0, [sp, #20]
 8014dfe:	f7ff f913 	bl	8014028 <_Bfree>
 8014e02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014e04:	9805      	ldr	r0, [sp, #20]
 8014e06:	f7ff f90f 	bl	8014028 <_Bfree>
 8014e0a:	9906      	ldr	r1, [sp, #24]
 8014e0c:	9805      	ldr	r0, [sp, #20]
 8014e0e:	f7ff f90b 	bl	8014028 <_Bfree>
 8014e12:	e5e2      	b.n	80149da <_strtod_l+0x76>
 8014e14:	2325      	movs	r3, #37	@ 0x25
 8014e16:	9a06      	ldr	r2, [sp, #24]
 8014e18:	1a9b      	subs	r3, r3, r2
 8014e1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	dbb8      	blt.n	8014d92 <_strtod_l+0x42e>
 8014e20:	240f      	movs	r4, #15
 8014e22:	9b06      	ldr	r3, [sp, #24]
 8014e24:	4d46      	ldr	r5, [pc, #280]	@ (8014f40 <_strtod_l+0x5dc>)
 8014e26:	1ae4      	subs	r4, r4, r3
 8014e28:	00e1      	lsls	r1, r4, #3
 8014e2a:	1869      	adds	r1, r5, r1
 8014e2c:	0032      	movs	r2, r6
 8014e2e:	6808      	ldr	r0, [r1, #0]
 8014e30:	6849      	ldr	r1, [r1, #4]
 8014e32:	003b      	movs	r3, r7
 8014e34:	f7ed fba2 	bl	800257c <__aeabi_dmul>
 8014e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e3a:	1b1c      	subs	r4, r3, r4
 8014e3c:	00e4      	lsls	r4, r4, #3
 8014e3e:	192d      	adds	r5, r5, r4
 8014e40:	682a      	ldr	r2, [r5, #0]
 8014e42:	686b      	ldr	r3, [r5, #4]
 8014e44:	e789      	b.n	8014d5a <_strtod_l+0x3f6>
 8014e46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e48:	3316      	adds	r3, #22
 8014e4a:	dba2      	blt.n	8014d92 <_strtod_l+0x42e>
 8014e4c:	9907      	ldr	r1, [sp, #28]
 8014e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e50:	4b3b      	ldr	r3, [pc, #236]	@ (8014f40 <_strtod_l+0x5dc>)
 8014e52:	1a52      	subs	r2, r2, r1
 8014e54:	00d2      	lsls	r2, r2, #3
 8014e56:	189b      	adds	r3, r3, r2
 8014e58:	0030      	movs	r0, r6
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	0039      	movs	r1, r7
 8014e60:	f7ec ff48 	bl	8001cf4 <__aeabi_ddiv>
 8014e64:	e750      	b.n	8014d08 <_strtod_l+0x3a4>
 8014e66:	2300      	movs	r3, #0
 8014e68:	0030      	movs	r0, r6
 8014e6a:	0039      	movs	r1, r7
 8014e6c:	4d35      	ldr	r5, [pc, #212]	@ (8014f44 <_strtod_l+0x5e0>)
 8014e6e:	1124      	asrs	r4, r4, #4
 8014e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e72:	2c01      	cmp	r4, #1
 8014e74:	dc1e      	bgt.n	8014eb4 <_strtod_l+0x550>
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <_strtod_l+0x51a>
 8014e7a:	0006      	movs	r6, r0
 8014e7c:	000f      	movs	r7, r1
 8014e7e:	4b32      	ldr	r3, [pc, #200]	@ (8014f48 <_strtod_l+0x5e4>)
 8014e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e82:	18ff      	adds	r7, r7, r3
 8014e84:	4b2f      	ldr	r3, [pc, #188]	@ (8014f44 <_strtod_l+0x5e0>)
 8014e86:	00d5      	lsls	r5, r2, #3
 8014e88:	195d      	adds	r5, r3, r5
 8014e8a:	0032      	movs	r2, r6
 8014e8c:	6828      	ldr	r0, [r5, #0]
 8014e8e:	6869      	ldr	r1, [r5, #4]
 8014e90:	003b      	movs	r3, r7
 8014e92:	f7ed fb73 	bl	800257c <__aeabi_dmul>
 8014e96:	4b26      	ldr	r3, [pc, #152]	@ (8014f30 <_strtod_l+0x5cc>)
 8014e98:	4a2c      	ldr	r2, [pc, #176]	@ (8014f4c <_strtod_l+0x5e8>)
 8014e9a:	0006      	movs	r6, r0
 8014e9c:	400b      	ands	r3, r1
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d895      	bhi.n	8014dce <_strtod_l+0x46a>
 8014ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8014f50 <_strtod_l+0x5ec>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d913      	bls.n	8014ed0 <_strtod_l+0x56c>
 8014ea8:	2601      	movs	r6, #1
 8014eaa:	4f2a      	ldr	r7, [pc, #168]	@ (8014f54 <_strtod_l+0x5f0>)
 8014eac:	4276      	negs	r6, r6
 8014eae:	2300      	movs	r3, #0
 8014eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014eb2:	e086      	b.n	8014fc2 <_strtod_l+0x65e>
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	4214      	tst	r4, r2
 8014eb8:	d004      	beq.n	8014ec4 <_strtod_l+0x560>
 8014eba:	682a      	ldr	r2, [r5, #0]
 8014ebc:	686b      	ldr	r3, [r5, #4]
 8014ebe:	f7ed fb5d 	bl	800257c <__aeabi_dmul>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ec6:	1064      	asrs	r4, r4, #1
 8014ec8:	3201      	adds	r2, #1
 8014eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ecc:	3508      	adds	r5, #8
 8014ece:	e7d0      	b.n	8014e72 <_strtod_l+0x50e>
 8014ed0:	23d4      	movs	r3, #212	@ 0xd4
 8014ed2:	049b      	lsls	r3, r3, #18
 8014ed4:	18cf      	adds	r7, r1, r3
 8014ed6:	e7ea      	b.n	8014eae <_strtod_l+0x54a>
 8014ed8:	2c00      	cmp	r4, #0
 8014eda:	d0e8      	beq.n	8014eae <_strtod_l+0x54a>
 8014edc:	4264      	negs	r4, r4
 8014ede:	230f      	movs	r3, #15
 8014ee0:	0022      	movs	r2, r4
 8014ee2:	401a      	ands	r2, r3
 8014ee4:	421c      	tst	r4, r3
 8014ee6:	d00a      	beq.n	8014efe <_strtod_l+0x59a>
 8014ee8:	4b15      	ldr	r3, [pc, #84]	@ (8014f40 <_strtod_l+0x5dc>)
 8014eea:	00d2      	lsls	r2, r2, #3
 8014eec:	189b      	adds	r3, r3, r2
 8014eee:	0030      	movs	r0, r6
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	0039      	movs	r1, r7
 8014ef6:	f7ec fefd 	bl	8001cf4 <__aeabi_ddiv>
 8014efa:	0006      	movs	r6, r0
 8014efc:	000f      	movs	r7, r1
 8014efe:	1124      	asrs	r4, r4, #4
 8014f00:	d0d5      	beq.n	8014eae <_strtod_l+0x54a>
 8014f02:	2c1f      	cmp	r4, #31
 8014f04:	dd28      	ble.n	8014f58 <_strtod_l+0x5f4>
 8014f06:	2300      	movs	r3, #0
 8014f08:	9306      	str	r3, [sp, #24]
 8014f0a:	9307      	str	r3, [sp, #28]
 8014f0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014f0e:	9308      	str	r3, [sp, #32]
 8014f10:	2322      	movs	r3, #34	@ 0x22
 8014f12:	9a05      	ldr	r2, [sp, #20]
 8014f14:	2600      	movs	r6, #0
 8014f16:	6013      	str	r3, [r2, #0]
 8014f18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014f1a:	2700      	movs	r7, #0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d000      	beq.n	8014f22 <_strtod_l+0x5be>
 8014f20:	e763      	b.n	8014dea <_strtod_l+0x486>
 8014f22:	e55a      	b.n	80149da <_strtod_l+0x76>
 8014f24:	00004e1f 	.word	0x00004e1f
 8014f28:	0801731d 	.word	0x0801731d
 8014f2c:	08017534 	.word	0x08017534
 8014f30:	7ff00000 	.word	0x7ff00000
 8014f34:	08017315 	.word	0x08017315
 8014f38:	0801734c 	.word	0x0801734c
 8014f3c:	080176dd 	.word	0x080176dd
 8014f40:	08017468 	.word	0x08017468
 8014f44:	08017440 	.word	0x08017440
 8014f48:	fcb00000 	.word	0xfcb00000
 8014f4c:	7ca00000 	.word	0x7ca00000
 8014f50:	7c900000 	.word	0x7c900000
 8014f54:	7fefffff 	.word	0x7fefffff
 8014f58:	2310      	movs	r3, #16
 8014f5a:	0022      	movs	r2, r4
 8014f5c:	401a      	ands	r2, r3
 8014f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f60:	421c      	tst	r4, r3
 8014f62:	d001      	beq.n	8014f68 <_strtod_l+0x604>
 8014f64:	335a      	adds	r3, #90	@ 0x5a
 8014f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f68:	0030      	movs	r0, r6
 8014f6a:	0039      	movs	r1, r7
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	4dbf      	ldr	r5, [pc, #764]	@ (801526c <_strtod_l+0x908>)
 8014f70:	2201      	movs	r2, #1
 8014f72:	4214      	tst	r4, r2
 8014f74:	d004      	beq.n	8014f80 <_strtod_l+0x61c>
 8014f76:	682a      	ldr	r2, [r5, #0]
 8014f78:	686b      	ldr	r3, [r5, #4]
 8014f7a:	f7ed faff 	bl	800257c <__aeabi_dmul>
 8014f7e:	2301      	movs	r3, #1
 8014f80:	1064      	asrs	r4, r4, #1
 8014f82:	3508      	adds	r5, #8
 8014f84:	2c00      	cmp	r4, #0
 8014f86:	d1f3      	bne.n	8014f70 <_strtod_l+0x60c>
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <_strtod_l+0x62c>
 8014f8c:	0006      	movs	r6, r0
 8014f8e:	000f      	movs	r7, r1
 8014f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d00d      	beq.n	8014fb2 <_strtod_l+0x64e>
 8014f96:	236b      	movs	r3, #107	@ 0x6b
 8014f98:	007a      	lsls	r2, r7, #1
 8014f9a:	0d52      	lsrs	r2, r2, #21
 8014f9c:	0039      	movs	r1, r7
 8014f9e:	1a9b      	subs	r3, r3, r2
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	dd06      	ble.n	8014fb2 <_strtod_l+0x64e>
 8014fa4:	2b1f      	cmp	r3, #31
 8014fa6:	dd5a      	ble.n	801505e <_strtod_l+0x6fa>
 8014fa8:	2600      	movs	r6, #0
 8014faa:	2b34      	cmp	r3, #52	@ 0x34
 8014fac:	dd50      	ble.n	8015050 <_strtod_l+0x6ec>
 8014fae:	27dc      	movs	r7, #220	@ 0xdc
 8014fb0:	04bf      	lsls	r7, r7, #18
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	0030      	movs	r0, r6
 8014fb8:	0039      	movs	r1, r7
 8014fba:	f7eb fa47 	bl	800044c <__aeabi_dcmpeq>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d1a1      	bne.n	8014f06 <_strtod_l+0x5a2>
 8014fc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fc4:	9a08      	ldr	r2, [sp, #32]
 8014fc6:	9300      	str	r3, [sp, #0]
 8014fc8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8014fca:	9b06      	ldr	r3, [sp, #24]
 8014fcc:	9805      	ldr	r0, [sp, #20]
 8014fce:	f7ff f893 	bl	80140f8 <__s2b>
 8014fd2:	900d      	str	r0, [sp, #52]	@ 0x34
 8014fd4:	2800      	cmp	r0, #0
 8014fd6:	d100      	bne.n	8014fda <_strtod_l+0x676>
 8014fd8:	e6f9      	b.n	8014dce <_strtod_l+0x46a>
 8014fda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fdc:	9907      	ldr	r1, [sp, #28]
 8014fde:	17da      	asrs	r2, r3, #31
 8014fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fe2:	1a5b      	subs	r3, r3, r1
 8014fe4:	401a      	ands	r2, r3
 8014fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fe8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014fea:	43db      	mvns	r3, r3
 8014fec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014fee:	17db      	asrs	r3, r3, #31
 8014ff0:	401a      	ands	r2, r3
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	921a      	str	r2, [sp, #104]	@ 0x68
 8014ff6:	9306      	str	r3, [sp, #24]
 8014ff8:	9307      	str	r3, [sp, #28]
 8014ffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ffc:	9805      	ldr	r0, [sp, #20]
 8014ffe:	6859      	ldr	r1, [r3, #4]
 8015000:	f7fe ffce 	bl	8013fa0 <_Balloc>
 8015004:	9008      	str	r0, [sp, #32]
 8015006:	2800      	cmp	r0, #0
 8015008:	d100      	bne.n	801500c <_strtod_l+0x6a8>
 801500a:	e6e5      	b.n	8014dd8 <_strtod_l+0x474>
 801500c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801500e:	300c      	adds	r0, #12
 8015010:	0019      	movs	r1, r3
 8015012:	691a      	ldr	r2, [r3, #16]
 8015014:	310c      	adds	r1, #12
 8015016:	3202      	adds	r2, #2
 8015018:	0092      	lsls	r2, r2, #2
 801501a:	f7fe f82f 	bl	801307c <memcpy>
 801501e:	ab20      	add	r3, sp, #128	@ 0x80
 8015020:	9301      	str	r3, [sp, #4]
 8015022:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015024:	9300      	str	r3, [sp, #0]
 8015026:	0032      	movs	r2, r6
 8015028:	003b      	movs	r3, r7
 801502a:	9805      	ldr	r0, [sp, #20]
 801502c:	9610      	str	r6, [sp, #64]	@ 0x40
 801502e:	9711      	str	r7, [sp, #68]	@ 0x44
 8015030:	f7ff fbb2 	bl	8014798 <__d2b>
 8015034:	901e      	str	r0, [sp, #120]	@ 0x78
 8015036:	2800      	cmp	r0, #0
 8015038:	d100      	bne.n	801503c <_strtod_l+0x6d8>
 801503a:	e6cd      	b.n	8014dd8 <_strtod_l+0x474>
 801503c:	2101      	movs	r1, #1
 801503e:	9805      	ldr	r0, [sp, #20]
 8015040:	f7ff f8f6 	bl	8014230 <__i2b>
 8015044:	9007      	str	r0, [sp, #28]
 8015046:	2800      	cmp	r0, #0
 8015048:	d10e      	bne.n	8015068 <_strtod_l+0x704>
 801504a:	2300      	movs	r3, #0
 801504c:	9307      	str	r3, [sp, #28]
 801504e:	e6c3      	b.n	8014dd8 <_strtod_l+0x474>
 8015050:	234b      	movs	r3, #75	@ 0x4b
 8015052:	1a9a      	subs	r2, r3, r2
 8015054:	3b4c      	subs	r3, #76	@ 0x4c
 8015056:	4093      	lsls	r3, r2
 8015058:	4019      	ands	r1, r3
 801505a:	000f      	movs	r7, r1
 801505c:	e7a9      	b.n	8014fb2 <_strtod_l+0x64e>
 801505e:	2201      	movs	r2, #1
 8015060:	4252      	negs	r2, r2
 8015062:	409a      	lsls	r2, r3
 8015064:	4016      	ands	r6, r2
 8015066:	e7a4      	b.n	8014fb2 <_strtod_l+0x64e>
 8015068:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801506a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801506c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801506e:	1ad4      	subs	r4, r2, r3
 8015070:	2b00      	cmp	r3, #0
 8015072:	db01      	blt.n	8015078 <_strtod_l+0x714>
 8015074:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8015076:	195d      	adds	r5, r3, r5
 8015078:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801507a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801507c:	1a5b      	subs	r3, r3, r1
 801507e:	2136      	movs	r1, #54	@ 0x36
 8015080:	189b      	adds	r3, r3, r2
 8015082:	1a8a      	subs	r2, r1, r2
 8015084:	497a      	ldr	r1, [pc, #488]	@ (8015270 <_strtod_l+0x90c>)
 8015086:	2001      	movs	r0, #1
 8015088:	468c      	mov	ip, r1
 801508a:	2100      	movs	r1, #0
 801508c:	3b01      	subs	r3, #1
 801508e:	9116      	str	r1, [sp, #88]	@ 0x58
 8015090:	9014      	str	r0, [sp, #80]	@ 0x50
 8015092:	4563      	cmp	r3, ip
 8015094:	da06      	bge.n	80150a4 <_strtod_l+0x740>
 8015096:	4661      	mov	r1, ip
 8015098:	1ac9      	subs	r1, r1, r3
 801509a:	1a52      	subs	r2, r2, r1
 801509c:	291f      	cmp	r1, #31
 801509e:	dc3f      	bgt.n	8015120 <_strtod_l+0x7bc>
 80150a0:	4088      	lsls	r0, r1
 80150a2:	9014      	str	r0, [sp, #80]	@ 0x50
 80150a4:	18ab      	adds	r3, r5, r2
 80150a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80150a8:	18a4      	adds	r4, r4, r2
 80150aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80150ae:	191c      	adds	r4, r3, r4
 80150b0:	002b      	movs	r3, r5
 80150b2:	4295      	cmp	r5, r2
 80150b4:	dd00      	ble.n	80150b8 <_strtod_l+0x754>
 80150b6:	0013      	movs	r3, r2
 80150b8:	42a3      	cmp	r3, r4
 80150ba:	dd00      	ble.n	80150be <_strtod_l+0x75a>
 80150bc:	0023      	movs	r3, r4
 80150be:	2b00      	cmp	r3, #0
 80150c0:	dd04      	ble.n	80150cc <_strtod_l+0x768>
 80150c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80150c4:	1ae4      	subs	r4, r4, r3
 80150c6:	1ad2      	subs	r2, r2, r3
 80150c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80150ca:	1aed      	subs	r5, r5, r3
 80150cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	dd16      	ble.n	8015100 <_strtod_l+0x79c>
 80150d2:	001a      	movs	r2, r3
 80150d4:	9907      	ldr	r1, [sp, #28]
 80150d6:	9805      	ldr	r0, [sp, #20]
 80150d8:	f7ff f974 	bl	80143c4 <__pow5mult>
 80150dc:	9007      	str	r0, [sp, #28]
 80150de:	2800      	cmp	r0, #0
 80150e0:	d0b3      	beq.n	801504a <_strtod_l+0x6e6>
 80150e2:	0001      	movs	r1, r0
 80150e4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80150e6:	9805      	ldr	r0, [sp, #20]
 80150e8:	f7ff f8ba 	bl	8014260 <__multiply>
 80150ec:	9013      	str	r0, [sp, #76]	@ 0x4c
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d100      	bne.n	80150f4 <_strtod_l+0x790>
 80150f2:	e671      	b.n	8014dd8 <_strtod_l+0x474>
 80150f4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80150f6:	9805      	ldr	r0, [sp, #20]
 80150f8:	f7fe ff96 	bl	8014028 <_Bfree>
 80150fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80150fe:	931e      	str	r3, [sp, #120]	@ 0x78
 8015100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015102:	2b00      	cmp	r3, #0
 8015104:	dc12      	bgt.n	801512c <_strtod_l+0x7c8>
 8015106:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015108:	2b00      	cmp	r3, #0
 801510a:	dd18      	ble.n	801513e <_strtod_l+0x7da>
 801510c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801510e:	9908      	ldr	r1, [sp, #32]
 8015110:	9805      	ldr	r0, [sp, #20]
 8015112:	f7ff f957 	bl	80143c4 <__pow5mult>
 8015116:	9008      	str	r0, [sp, #32]
 8015118:	2800      	cmp	r0, #0
 801511a:	d110      	bne.n	801513e <_strtod_l+0x7da>
 801511c:	2300      	movs	r3, #0
 801511e:	e65a      	b.n	8014dd6 <_strtod_l+0x472>
 8015120:	4954      	ldr	r1, [pc, #336]	@ (8015274 <_strtod_l+0x910>)
 8015122:	1acb      	subs	r3, r1, r3
 8015124:	0001      	movs	r1, r0
 8015126:	4099      	lsls	r1, r3
 8015128:	9116      	str	r1, [sp, #88]	@ 0x58
 801512a:	e7ba      	b.n	80150a2 <_strtod_l+0x73e>
 801512c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801512e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8015130:	9805      	ldr	r0, [sp, #20]
 8015132:	f7ff f9a3 	bl	801447c <__lshift>
 8015136:	901e      	str	r0, [sp, #120]	@ 0x78
 8015138:	2800      	cmp	r0, #0
 801513a:	d1e4      	bne.n	8015106 <_strtod_l+0x7a2>
 801513c:	e64c      	b.n	8014dd8 <_strtod_l+0x474>
 801513e:	2c00      	cmp	r4, #0
 8015140:	dd07      	ble.n	8015152 <_strtod_l+0x7ee>
 8015142:	0022      	movs	r2, r4
 8015144:	9908      	ldr	r1, [sp, #32]
 8015146:	9805      	ldr	r0, [sp, #20]
 8015148:	f7ff f998 	bl	801447c <__lshift>
 801514c:	9008      	str	r0, [sp, #32]
 801514e:	2800      	cmp	r0, #0
 8015150:	d0e4      	beq.n	801511c <_strtod_l+0x7b8>
 8015152:	2d00      	cmp	r5, #0
 8015154:	dd08      	ble.n	8015168 <_strtod_l+0x804>
 8015156:	002a      	movs	r2, r5
 8015158:	9907      	ldr	r1, [sp, #28]
 801515a:	9805      	ldr	r0, [sp, #20]
 801515c:	f7ff f98e 	bl	801447c <__lshift>
 8015160:	9007      	str	r0, [sp, #28]
 8015162:	2800      	cmp	r0, #0
 8015164:	d100      	bne.n	8015168 <_strtod_l+0x804>
 8015166:	e637      	b.n	8014dd8 <_strtod_l+0x474>
 8015168:	9a08      	ldr	r2, [sp, #32]
 801516a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801516c:	9805      	ldr	r0, [sp, #20]
 801516e:	f7ff fa0d 	bl	801458c <__mdiff>
 8015172:	9006      	str	r0, [sp, #24]
 8015174:	2800      	cmp	r0, #0
 8015176:	d100      	bne.n	801517a <_strtod_l+0x816>
 8015178:	e62e      	b.n	8014dd8 <_strtod_l+0x474>
 801517a:	68c3      	ldr	r3, [r0, #12]
 801517c:	9907      	ldr	r1, [sp, #28]
 801517e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015180:	2300      	movs	r3, #0
 8015182:	60c3      	str	r3, [r0, #12]
 8015184:	f7ff f9e6 	bl	8014554 <__mcmp>
 8015188:	2800      	cmp	r0, #0
 801518a:	da3b      	bge.n	8015204 <_strtod_l+0x8a0>
 801518c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801518e:	4333      	orrs	r3, r6
 8015190:	d167      	bne.n	8015262 <_strtod_l+0x8fe>
 8015192:	033b      	lsls	r3, r7, #12
 8015194:	d165      	bne.n	8015262 <_strtod_l+0x8fe>
 8015196:	22d6      	movs	r2, #214	@ 0xd6
 8015198:	4b37      	ldr	r3, [pc, #220]	@ (8015278 <_strtod_l+0x914>)
 801519a:	04d2      	lsls	r2, r2, #19
 801519c:	403b      	ands	r3, r7
 801519e:	4293      	cmp	r3, r2
 80151a0:	d95f      	bls.n	8015262 <_strtod_l+0x8fe>
 80151a2:	9b06      	ldr	r3, [sp, #24]
 80151a4:	695b      	ldr	r3, [r3, #20]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d103      	bne.n	80151b2 <_strtod_l+0x84e>
 80151aa:	9b06      	ldr	r3, [sp, #24]
 80151ac:	691b      	ldr	r3, [r3, #16]
 80151ae:	2b01      	cmp	r3, #1
 80151b0:	dd57      	ble.n	8015262 <_strtod_l+0x8fe>
 80151b2:	9906      	ldr	r1, [sp, #24]
 80151b4:	2201      	movs	r2, #1
 80151b6:	9805      	ldr	r0, [sp, #20]
 80151b8:	f7ff f960 	bl	801447c <__lshift>
 80151bc:	9907      	ldr	r1, [sp, #28]
 80151be:	9006      	str	r0, [sp, #24]
 80151c0:	f7ff f9c8 	bl	8014554 <__mcmp>
 80151c4:	2800      	cmp	r0, #0
 80151c6:	dd4c      	ble.n	8015262 <_strtod_l+0x8fe>
 80151c8:	4b2b      	ldr	r3, [pc, #172]	@ (8015278 <_strtod_l+0x914>)
 80151ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151cc:	403b      	ands	r3, r7
 80151ce:	2a00      	cmp	r2, #0
 80151d0:	d074      	beq.n	80152bc <_strtod_l+0x958>
 80151d2:	22d6      	movs	r2, #214	@ 0xd6
 80151d4:	04d2      	lsls	r2, r2, #19
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d870      	bhi.n	80152bc <_strtod_l+0x958>
 80151da:	22dc      	movs	r2, #220	@ 0xdc
 80151dc:	0492      	lsls	r2, r2, #18
 80151de:	4293      	cmp	r3, r2
 80151e0:	d800      	bhi.n	80151e4 <_strtod_l+0x880>
 80151e2:	e695      	b.n	8014f10 <_strtod_l+0x5ac>
 80151e4:	0030      	movs	r0, r6
 80151e6:	0039      	movs	r1, r7
 80151e8:	4b24      	ldr	r3, [pc, #144]	@ (801527c <_strtod_l+0x918>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	f7ed f9c6 	bl	800257c <__aeabi_dmul>
 80151f0:	4b21      	ldr	r3, [pc, #132]	@ (8015278 <_strtod_l+0x914>)
 80151f2:	0006      	movs	r6, r0
 80151f4:	000f      	movs	r7, r1
 80151f6:	420b      	tst	r3, r1
 80151f8:	d000      	beq.n	80151fc <_strtod_l+0x898>
 80151fa:	e5f6      	b.n	8014dea <_strtod_l+0x486>
 80151fc:	2322      	movs	r3, #34	@ 0x22
 80151fe:	9a05      	ldr	r2, [sp, #20]
 8015200:	6013      	str	r3, [r2, #0]
 8015202:	e5f2      	b.n	8014dea <_strtod_l+0x486>
 8015204:	970e      	str	r7, [sp, #56]	@ 0x38
 8015206:	2800      	cmp	r0, #0
 8015208:	d175      	bne.n	80152f6 <_strtod_l+0x992>
 801520a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801520c:	033b      	lsls	r3, r7, #12
 801520e:	0b1b      	lsrs	r3, r3, #12
 8015210:	2a00      	cmp	r2, #0
 8015212:	d039      	beq.n	8015288 <_strtod_l+0x924>
 8015214:	4a1a      	ldr	r2, [pc, #104]	@ (8015280 <_strtod_l+0x91c>)
 8015216:	4293      	cmp	r3, r2
 8015218:	d138      	bne.n	801528c <_strtod_l+0x928>
 801521a:	2101      	movs	r1, #1
 801521c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801521e:	4249      	negs	r1, r1
 8015220:	0032      	movs	r2, r6
 8015222:	0008      	movs	r0, r1
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00b      	beq.n	8015240 <_strtod_l+0x8dc>
 8015228:	24d4      	movs	r4, #212	@ 0xd4
 801522a:	4b13      	ldr	r3, [pc, #76]	@ (8015278 <_strtod_l+0x914>)
 801522c:	0008      	movs	r0, r1
 801522e:	403b      	ands	r3, r7
 8015230:	04e4      	lsls	r4, r4, #19
 8015232:	42a3      	cmp	r3, r4
 8015234:	d804      	bhi.n	8015240 <_strtod_l+0x8dc>
 8015236:	306c      	adds	r0, #108	@ 0x6c
 8015238:	0d1b      	lsrs	r3, r3, #20
 801523a:	1ac3      	subs	r3, r0, r3
 801523c:	4099      	lsls	r1, r3
 801523e:	0008      	movs	r0, r1
 8015240:	4282      	cmp	r2, r0
 8015242:	d123      	bne.n	801528c <_strtod_l+0x928>
 8015244:	4b0f      	ldr	r3, [pc, #60]	@ (8015284 <_strtod_l+0x920>)
 8015246:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015248:	4299      	cmp	r1, r3
 801524a:	d102      	bne.n	8015252 <_strtod_l+0x8ee>
 801524c:	3201      	adds	r2, #1
 801524e:	d100      	bne.n	8015252 <_strtod_l+0x8ee>
 8015250:	e5c2      	b.n	8014dd8 <_strtod_l+0x474>
 8015252:	4b09      	ldr	r3, [pc, #36]	@ (8015278 <_strtod_l+0x914>)
 8015254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015256:	2600      	movs	r6, #0
 8015258:	401a      	ands	r2, r3
 801525a:	0013      	movs	r3, r2
 801525c:	2280      	movs	r2, #128	@ 0x80
 801525e:	0352      	lsls	r2, r2, #13
 8015260:	189f      	adds	r7, r3, r2
 8015262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015264:	2b00      	cmp	r3, #0
 8015266:	d1bd      	bne.n	80151e4 <_strtod_l+0x880>
 8015268:	e5bf      	b.n	8014dea <_strtod_l+0x486>
 801526a:	46c0      	nop			@ (mov r8, r8)
 801526c:	08017560 	.word	0x08017560
 8015270:	fffffc02 	.word	0xfffffc02
 8015274:	fffffbe2 	.word	0xfffffbe2
 8015278:	7ff00000 	.word	0x7ff00000
 801527c:	39500000 	.word	0x39500000
 8015280:	000fffff 	.word	0x000fffff
 8015284:	7fefffff 	.word	0x7fefffff
 8015288:	4333      	orrs	r3, r6
 801528a:	d09d      	beq.n	80151c8 <_strtod_l+0x864>
 801528c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801528e:	2b00      	cmp	r3, #0
 8015290:	d01c      	beq.n	80152cc <_strtod_l+0x968>
 8015292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015294:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015296:	4213      	tst	r3, r2
 8015298:	d0e3      	beq.n	8015262 <_strtod_l+0x8fe>
 801529a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801529c:	0030      	movs	r0, r6
 801529e:	0039      	movs	r1, r7
 80152a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d016      	beq.n	80152d4 <_strtod_l+0x970>
 80152a6:	f7ff fb45 	bl	8014934 <sulp>
 80152aa:	0002      	movs	r2, r0
 80152ac:	000b      	movs	r3, r1
 80152ae:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80152b0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80152b2:	f7ec f9bb 	bl	800162c <__aeabi_dadd>
 80152b6:	0006      	movs	r6, r0
 80152b8:	000f      	movs	r7, r1
 80152ba:	e7d2      	b.n	8015262 <_strtod_l+0x8fe>
 80152bc:	2601      	movs	r6, #1
 80152be:	4a92      	ldr	r2, [pc, #584]	@ (8015508 <_strtod_l+0xba4>)
 80152c0:	4276      	negs	r6, r6
 80152c2:	189b      	adds	r3, r3, r2
 80152c4:	4a91      	ldr	r2, [pc, #580]	@ (801550c <_strtod_l+0xba8>)
 80152c6:	431a      	orrs	r2, r3
 80152c8:	0017      	movs	r7, r2
 80152ca:	e7ca      	b.n	8015262 <_strtod_l+0x8fe>
 80152cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80152ce:	4233      	tst	r3, r6
 80152d0:	d0c7      	beq.n	8015262 <_strtod_l+0x8fe>
 80152d2:	e7e2      	b.n	801529a <_strtod_l+0x936>
 80152d4:	f7ff fb2e 	bl	8014934 <sulp>
 80152d8:	0002      	movs	r2, r0
 80152da:	000b      	movs	r3, r1
 80152dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80152de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80152e0:	f7ed fc14 	bl	8002b0c <__aeabi_dsub>
 80152e4:	2200      	movs	r2, #0
 80152e6:	2300      	movs	r3, #0
 80152e8:	0006      	movs	r6, r0
 80152ea:	000f      	movs	r7, r1
 80152ec:	f7eb f8ae 	bl	800044c <__aeabi_dcmpeq>
 80152f0:	2800      	cmp	r0, #0
 80152f2:	d0b6      	beq.n	8015262 <_strtod_l+0x8fe>
 80152f4:	e60c      	b.n	8014f10 <_strtod_l+0x5ac>
 80152f6:	9907      	ldr	r1, [sp, #28]
 80152f8:	9806      	ldr	r0, [sp, #24]
 80152fa:	f7ff faad 	bl	8014858 <__ratio>
 80152fe:	2380      	movs	r3, #128	@ 0x80
 8015300:	2200      	movs	r2, #0
 8015302:	05db      	lsls	r3, r3, #23
 8015304:	0004      	movs	r4, r0
 8015306:	000d      	movs	r5, r1
 8015308:	f7eb f8b0 	bl	800046c <__aeabi_dcmple>
 801530c:	2800      	cmp	r0, #0
 801530e:	d06c      	beq.n	80153ea <_strtod_l+0xa86>
 8015310:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015312:	2b00      	cmp	r3, #0
 8015314:	d177      	bne.n	8015406 <_strtod_l+0xaa2>
 8015316:	2e00      	cmp	r6, #0
 8015318:	d157      	bne.n	80153ca <_strtod_l+0xa66>
 801531a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801531c:	031b      	lsls	r3, r3, #12
 801531e:	d15a      	bne.n	80153d6 <_strtod_l+0xa72>
 8015320:	2200      	movs	r2, #0
 8015322:	0020      	movs	r0, r4
 8015324:	0029      	movs	r1, r5
 8015326:	4b7a      	ldr	r3, [pc, #488]	@ (8015510 <_strtod_l+0xbac>)
 8015328:	f7eb f896 	bl	8000458 <__aeabi_dcmplt>
 801532c:	2800      	cmp	r0, #0
 801532e:	d159      	bne.n	80153e4 <_strtod_l+0xa80>
 8015330:	0020      	movs	r0, r4
 8015332:	0029      	movs	r1, r5
 8015334:	2200      	movs	r2, #0
 8015336:	4b77      	ldr	r3, [pc, #476]	@ (8015514 <_strtod_l+0xbb0>)
 8015338:	f7ed f920 	bl	800257c <__aeabi_dmul>
 801533c:	0004      	movs	r4, r0
 801533e:	000d      	movs	r5, r1
 8015340:	2380      	movs	r3, #128	@ 0x80
 8015342:	061b      	lsls	r3, r3, #24
 8015344:	18eb      	adds	r3, r5, r3
 8015346:	940a      	str	r4, [sp, #40]	@ 0x28
 8015348:	930b      	str	r3, [sp, #44]	@ 0x2c
 801534a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801534c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801534e:	9214      	str	r2, [sp, #80]	@ 0x50
 8015350:	9315      	str	r3, [sp, #84]	@ 0x54
 8015352:	4a71      	ldr	r2, [pc, #452]	@ (8015518 <_strtod_l+0xbb4>)
 8015354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015356:	4013      	ands	r3, r2
 8015358:	9316      	str	r3, [sp, #88]	@ 0x58
 801535a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801535c:	4b6f      	ldr	r3, [pc, #444]	@ (801551c <_strtod_l+0xbb8>)
 801535e:	429a      	cmp	r2, r3
 8015360:	d000      	beq.n	8015364 <_strtod_l+0xa00>
 8015362:	e087      	b.n	8015474 <_strtod_l+0xb10>
 8015364:	4a6e      	ldr	r2, [pc, #440]	@ (8015520 <_strtod_l+0xbbc>)
 8015366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015368:	4694      	mov	ip, r2
 801536a:	4463      	add	r3, ip
 801536c:	001f      	movs	r7, r3
 801536e:	0030      	movs	r0, r6
 8015370:	0019      	movs	r1, r3
 8015372:	f7ff f9a5 	bl	80146c0 <__ulp>
 8015376:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801537a:	f7ed f8ff 	bl	800257c <__aeabi_dmul>
 801537e:	0032      	movs	r2, r6
 8015380:	003b      	movs	r3, r7
 8015382:	f7ec f953 	bl	800162c <__aeabi_dadd>
 8015386:	4a64      	ldr	r2, [pc, #400]	@ (8015518 <_strtod_l+0xbb4>)
 8015388:	4b66      	ldr	r3, [pc, #408]	@ (8015524 <_strtod_l+0xbc0>)
 801538a:	0006      	movs	r6, r0
 801538c:	400a      	ands	r2, r1
 801538e:	429a      	cmp	r2, r3
 8015390:	d940      	bls.n	8015414 <_strtod_l+0xab0>
 8015392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015394:	4a64      	ldr	r2, [pc, #400]	@ (8015528 <_strtod_l+0xbc4>)
 8015396:	4293      	cmp	r3, r2
 8015398:	d103      	bne.n	80153a2 <_strtod_l+0xa3e>
 801539a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801539c:	3301      	adds	r3, #1
 801539e:	d100      	bne.n	80153a2 <_strtod_l+0xa3e>
 80153a0:	e51a      	b.n	8014dd8 <_strtod_l+0x474>
 80153a2:	2601      	movs	r6, #1
 80153a4:	4f60      	ldr	r7, [pc, #384]	@ (8015528 <_strtod_l+0xbc4>)
 80153a6:	4276      	negs	r6, r6
 80153a8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80153aa:	9805      	ldr	r0, [sp, #20]
 80153ac:	f7fe fe3c 	bl	8014028 <_Bfree>
 80153b0:	9908      	ldr	r1, [sp, #32]
 80153b2:	9805      	ldr	r0, [sp, #20]
 80153b4:	f7fe fe38 	bl	8014028 <_Bfree>
 80153b8:	9907      	ldr	r1, [sp, #28]
 80153ba:	9805      	ldr	r0, [sp, #20]
 80153bc:	f7fe fe34 	bl	8014028 <_Bfree>
 80153c0:	9906      	ldr	r1, [sp, #24]
 80153c2:	9805      	ldr	r0, [sp, #20]
 80153c4:	f7fe fe30 	bl	8014028 <_Bfree>
 80153c8:	e617      	b.n	8014ffa <_strtod_l+0x696>
 80153ca:	2e01      	cmp	r6, #1
 80153cc:	d103      	bne.n	80153d6 <_strtod_l+0xa72>
 80153ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d100      	bne.n	80153d6 <_strtod_l+0xa72>
 80153d4:	e59c      	b.n	8014f10 <_strtod_l+0x5ac>
 80153d6:	2300      	movs	r3, #0
 80153d8:	4c54      	ldr	r4, [pc, #336]	@ (801552c <_strtod_l+0xbc8>)
 80153da:	4d4d      	ldr	r5, [pc, #308]	@ (8015510 <_strtod_l+0xbac>)
 80153dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80153de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80153e0:	2400      	movs	r4, #0
 80153e2:	e7b2      	b.n	801534a <_strtod_l+0x9e6>
 80153e4:	2400      	movs	r4, #0
 80153e6:	4d4b      	ldr	r5, [pc, #300]	@ (8015514 <_strtod_l+0xbb0>)
 80153e8:	e7aa      	b.n	8015340 <_strtod_l+0x9dc>
 80153ea:	0020      	movs	r0, r4
 80153ec:	0029      	movs	r1, r5
 80153ee:	4b49      	ldr	r3, [pc, #292]	@ (8015514 <_strtod_l+0xbb0>)
 80153f0:	2200      	movs	r2, #0
 80153f2:	f7ed f8c3 	bl	800257c <__aeabi_dmul>
 80153f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80153f8:	0004      	movs	r4, r0
 80153fa:	000d      	movs	r5, r1
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d09f      	beq.n	8015340 <_strtod_l+0x9dc>
 8015400:	940a      	str	r4, [sp, #40]	@ 0x28
 8015402:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015404:	e7a1      	b.n	801534a <_strtod_l+0x9e6>
 8015406:	2300      	movs	r3, #0
 8015408:	4c41      	ldr	r4, [pc, #260]	@ (8015510 <_strtod_l+0xbac>)
 801540a:	0025      	movs	r5, r4
 801540c:	930a      	str	r3, [sp, #40]	@ 0x28
 801540e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015410:	001c      	movs	r4, r3
 8015412:	e79a      	b.n	801534a <_strtod_l+0x9e6>
 8015414:	23d4      	movs	r3, #212	@ 0xd4
 8015416:	049b      	lsls	r3, r3, #18
 8015418:	18cf      	adds	r7, r1, r3
 801541a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801541c:	9710      	str	r7, [sp, #64]	@ 0x40
 801541e:	2b00      	cmp	r3, #0
 8015420:	d1c2      	bne.n	80153a8 <_strtod_l+0xa44>
 8015422:	4b3d      	ldr	r3, [pc, #244]	@ (8015518 <_strtod_l+0xbb4>)
 8015424:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015426:	403b      	ands	r3, r7
 8015428:	429a      	cmp	r2, r3
 801542a:	d1bd      	bne.n	80153a8 <_strtod_l+0xa44>
 801542c:	0020      	movs	r0, r4
 801542e:	0029      	movs	r1, r5
 8015430:	f7eb f8ca 	bl	80005c8 <__aeabi_d2lz>
 8015434:	f7eb f902 	bl	800063c <__aeabi_l2d>
 8015438:	0002      	movs	r2, r0
 801543a:	000b      	movs	r3, r1
 801543c:	0020      	movs	r0, r4
 801543e:	0029      	movs	r1, r5
 8015440:	f7ed fb64 	bl	8002b0c <__aeabi_dsub>
 8015444:	033c      	lsls	r4, r7, #12
 8015446:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015448:	0b24      	lsrs	r4, r4, #12
 801544a:	4334      	orrs	r4, r6
 801544c:	900e      	str	r0, [sp, #56]	@ 0x38
 801544e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015450:	4a37      	ldr	r2, [pc, #220]	@ (8015530 <_strtod_l+0xbcc>)
 8015452:	431c      	orrs	r4, r3
 8015454:	d052      	beq.n	80154fc <_strtod_l+0xb98>
 8015456:	4b37      	ldr	r3, [pc, #220]	@ (8015534 <_strtod_l+0xbd0>)
 8015458:	f7ea fffe 	bl	8000458 <__aeabi_dcmplt>
 801545c:	2800      	cmp	r0, #0
 801545e:	d000      	beq.n	8015462 <_strtod_l+0xafe>
 8015460:	e4c3      	b.n	8014dea <_strtod_l+0x486>
 8015462:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015464:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015466:	4a34      	ldr	r2, [pc, #208]	@ (8015538 <_strtod_l+0xbd4>)
 8015468:	4b2a      	ldr	r3, [pc, #168]	@ (8015514 <_strtod_l+0xbb0>)
 801546a:	f7eb f809 	bl	8000480 <__aeabi_dcmpgt>
 801546e:	2800      	cmp	r0, #0
 8015470:	d09a      	beq.n	80153a8 <_strtod_l+0xa44>
 8015472:	e4ba      	b.n	8014dea <_strtod_l+0x486>
 8015474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015476:	2b00      	cmp	r3, #0
 8015478:	d02a      	beq.n	80154d0 <_strtod_l+0xb6c>
 801547a:	23d4      	movs	r3, #212	@ 0xd4
 801547c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801547e:	04db      	lsls	r3, r3, #19
 8015480:	429a      	cmp	r2, r3
 8015482:	d825      	bhi.n	80154d0 <_strtod_l+0xb6c>
 8015484:	0020      	movs	r0, r4
 8015486:	0029      	movs	r1, r5
 8015488:	4a2c      	ldr	r2, [pc, #176]	@ (801553c <_strtod_l+0xbd8>)
 801548a:	4b2d      	ldr	r3, [pc, #180]	@ (8015540 <_strtod_l+0xbdc>)
 801548c:	f7ea ffee 	bl	800046c <__aeabi_dcmple>
 8015490:	2800      	cmp	r0, #0
 8015492:	d016      	beq.n	80154c2 <_strtod_l+0xb5e>
 8015494:	0020      	movs	r0, r4
 8015496:	0029      	movs	r1, r5
 8015498:	f7eb f878 	bl	800058c <__aeabi_d2uiz>
 801549c:	2800      	cmp	r0, #0
 801549e:	d100      	bne.n	80154a2 <_strtod_l+0xb3e>
 80154a0:	3001      	adds	r0, #1
 80154a2:	f7ed ff5b 	bl	800335c <__aeabi_ui2d>
 80154a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80154a8:	0004      	movs	r4, r0
 80154aa:	000d      	movs	r5, r1
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d122      	bne.n	80154f6 <_strtod_l+0xb92>
 80154b0:	2380      	movs	r3, #128	@ 0x80
 80154b2:	061b      	lsls	r3, r3, #24
 80154b4:	18cb      	adds	r3, r1, r3
 80154b6:	9018      	str	r0, [sp, #96]	@ 0x60
 80154b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80154ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80154bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154be:	9214      	str	r2, [sp, #80]	@ 0x50
 80154c0:	9315      	str	r3, [sp, #84]	@ 0x54
 80154c2:	22d6      	movs	r2, #214	@ 0xd6
 80154c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80154c6:	04d2      	lsls	r2, r2, #19
 80154c8:	189b      	adds	r3, r3, r2
 80154ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80154cc:	1a9b      	subs	r3, r3, r2
 80154ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80154d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80154d2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80154d4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80154d6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80154d8:	f7ff f8f2 	bl	80146c0 <__ulp>
 80154dc:	0002      	movs	r2, r0
 80154de:	000b      	movs	r3, r1
 80154e0:	0030      	movs	r0, r6
 80154e2:	0039      	movs	r1, r7
 80154e4:	f7ed f84a 	bl	800257c <__aeabi_dmul>
 80154e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80154ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80154ec:	f7ec f89e 	bl	800162c <__aeabi_dadd>
 80154f0:	0006      	movs	r6, r0
 80154f2:	000f      	movs	r7, r1
 80154f4:	e791      	b.n	801541a <_strtod_l+0xab6>
 80154f6:	9418      	str	r4, [sp, #96]	@ 0x60
 80154f8:	9519      	str	r5, [sp, #100]	@ 0x64
 80154fa:	e7de      	b.n	80154ba <_strtod_l+0xb56>
 80154fc:	4b11      	ldr	r3, [pc, #68]	@ (8015544 <_strtod_l+0xbe0>)
 80154fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015500:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015502:	f7ea ffa9 	bl	8000458 <__aeabi_dcmplt>
 8015506:	e7b2      	b.n	801546e <_strtod_l+0xb0a>
 8015508:	fff00000 	.word	0xfff00000
 801550c:	000fffff 	.word	0x000fffff
 8015510:	3ff00000 	.word	0x3ff00000
 8015514:	3fe00000 	.word	0x3fe00000
 8015518:	7ff00000 	.word	0x7ff00000
 801551c:	7fe00000 	.word	0x7fe00000
 8015520:	fcb00000 	.word	0xfcb00000
 8015524:	7c9fffff 	.word	0x7c9fffff
 8015528:	7fefffff 	.word	0x7fefffff
 801552c:	bff00000 	.word	0xbff00000
 8015530:	94a03595 	.word	0x94a03595
 8015534:	3fdfffff 	.word	0x3fdfffff
 8015538:	35afe535 	.word	0x35afe535
 801553c:	ffc00000 	.word	0xffc00000
 8015540:	41dfffff 	.word	0x41dfffff
 8015544:	3fcfffff 	.word	0x3fcfffff

08015548 <_strtod_r>:
 8015548:	b510      	push	{r4, lr}
 801554a:	4b02      	ldr	r3, [pc, #8]	@ (8015554 <_strtod_r+0xc>)
 801554c:	f7ff fa0a 	bl	8014964 <_strtod_l>
 8015550:	bd10      	pop	{r4, pc}
 8015552:	46c0      	nop			@ (mov r8, r8)
 8015554:	200000e4 	.word	0x200000e4

08015558 <_strtol_l.constprop.0>:
 8015558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801555a:	b085      	sub	sp, #20
 801555c:	0017      	movs	r7, r2
 801555e:	001e      	movs	r6, r3
 8015560:	9003      	str	r0, [sp, #12]
 8015562:	9101      	str	r1, [sp, #4]
 8015564:	2b24      	cmp	r3, #36	@ 0x24
 8015566:	d844      	bhi.n	80155f2 <_strtol_l.constprop.0+0x9a>
 8015568:	000c      	movs	r4, r1
 801556a:	2b01      	cmp	r3, #1
 801556c:	d041      	beq.n	80155f2 <_strtol_l.constprop.0+0x9a>
 801556e:	4b3d      	ldr	r3, [pc, #244]	@ (8015664 <_strtol_l.constprop.0+0x10c>)
 8015570:	2208      	movs	r2, #8
 8015572:	469c      	mov	ip, r3
 8015574:	0023      	movs	r3, r4
 8015576:	4661      	mov	r1, ip
 8015578:	781d      	ldrb	r5, [r3, #0]
 801557a:	3401      	adds	r4, #1
 801557c:	5d48      	ldrb	r0, [r1, r5]
 801557e:	0001      	movs	r1, r0
 8015580:	4011      	ands	r1, r2
 8015582:	4210      	tst	r0, r2
 8015584:	d1f6      	bne.n	8015574 <_strtol_l.constprop.0+0x1c>
 8015586:	2d2d      	cmp	r5, #45	@ 0x2d
 8015588:	d13a      	bne.n	8015600 <_strtol_l.constprop.0+0xa8>
 801558a:	7825      	ldrb	r5, [r4, #0]
 801558c:	1c9c      	adds	r4, r3, #2
 801558e:	2301      	movs	r3, #1
 8015590:	9300      	str	r3, [sp, #0]
 8015592:	2210      	movs	r2, #16
 8015594:	0033      	movs	r3, r6
 8015596:	4393      	bics	r3, r2
 8015598:	d109      	bne.n	80155ae <_strtol_l.constprop.0+0x56>
 801559a:	2d30      	cmp	r5, #48	@ 0x30
 801559c:	d136      	bne.n	801560c <_strtol_l.constprop.0+0xb4>
 801559e:	2120      	movs	r1, #32
 80155a0:	7823      	ldrb	r3, [r4, #0]
 80155a2:	438b      	bics	r3, r1
 80155a4:	2b58      	cmp	r3, #88	@ 0x58
 80155a6:	d131      	bne.n	801560c <_strtol_l.constprop.0+0xb4>
 80155a8:	0016      	movs	r6, r2
 80155aa:	7865      	ldrb	r5, [r4, #1]
 80155ac:	3402      	adds	r4, #2
 80155ae:	4a2e      	ldr	r2, [pc, #184]	@ (8015668 <_strtol_l.constprop.0+0x110>)
 80155b0:	9b00      	ldr	r3, [sp, #0]
 80155b2:	4694      	mov	ip, r2
 80155b4:	4463      	add	r3, ip
 80155b6:	0031      	movs	r1, r6
 80155b8:	0018      	movs	r0, r3
 80155ba:	9302      	str	r3, [sp, #8]
 80155bc:	f7ea fe46 	bl	800024c <__aeabi_uidivmod>
 80155c0:	2200      	movs	r2, #0
 80155c2:	4684      	mov	ip, r0
 80155c4:	0010      	movs	r0, r2
 80155c6:	002b      	movs	r3, r5
 80155c8:	3b30      	subs	r3, #48	@ 0x30
 80155ca:	2b09      	cmp	r3, #9
 80155cc:	d825      	bhi.n	801561a <_strtol_l.constprop.0+0xc2>
 80155ce:	001d      	movs	r5, r3
 80155d0:	42ae      	cmp	r6, r5
 80155d2:	dd31      	ble.n	8015638 <_strtol_l.constprop.0+0xe0>
 80155d4:	1c53      	adds	r3, r2, #1
 80155d6:	d009      	beq.n	80155ec <_strtol_l.constprop.0+0x94>
 80155d8:	2201      	movs	r2, #1
 80155da:	4252      	negs	r2, r2
 80155dc:	4584      	cmp	ip, r0
 80155de:	d305      	bcc.n	80155ec <_strtol_l.constprop.0+0x94>
 80155e0:	d101      	bne.n	80155e6 <_strtol_l.constprop.0+0x8e>
 80155e2:	42a9      	cmp	r1, r5
 80155e4:	db25      	blt.n	8015632 <_strtol_l.constprop.0+0xda>
 80155e6:	2201      	movs	r2, #1
 80155e8:	4370      	muls	r0, r6
 80155ea:	1828      	adds	r0, r5, r0
 80155ec:	7825      	ldrb	r5, [r4, #0]
 80155ee:	3401      	adds	r4, #1
 80155f0:	e7e9      	b.n	80155c6 <_strtol_l.constprop.0+0x6e>
 80155f2:	f7fd fd0b 	bl	801300c <__errno>
 80155f6:	2316      	movs	r3, #22
 80155f8:	6003      	str	r3, [r0, #0]
 80155fa:	2000      	movs	r0, #0
 80155fc:	b005      	add	sp, #20
 80155fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015600:	9100      	str	r1, [sp, #0]
 8015602:	2d2b      	cmp	r5, #43	@ 0x2b
 8015604:	d1c5      	bne.n	8015592 <_strtol_l.constprop.0+0x3a>
 8015606:	7825      	ldrb	r5, [r4, #0]
 8015608:	1c9c      	adds	r4, r3, #2
 801560a:	e7c2      	b.n	8015592 <_strtol_l.constprop.0+0x3a>
 801560c:	2e00      	cmp	r6, #0
 801560e:	d1ce      	bne.n	80155ae <_strtol_l.constprop.0+0x56>
 8015610:	3608      	adds	r6, #8
 8015612:	2d30      	cmp	r5, #48	@ 0x30
 8015614:	d0cb      	beq.n	80155ae <_strtol_l.constprop.0+0x56>
 8015616:	3602      	adds	r6, #2
 8015618:	e7c9      	b.n	80155ae <_strtol_l.constprop.0+0x56>
 801561a:	002b      	movs	r3, r5
 801561c:	3b41      	subs	r3, #65	@ 0x41
 801561e:	2b19      	cmp	r3, #25
 8015620:	d801      	bhi.n	8015626 <_strtol_l.constprop.0+0xce>
 8015622:	3d37      	subs	r5, #55	@ 0x37
 8015624:	e7d4      	b.n	80155d0 <_strtol_l.constprop.0+0x78>
 8015626:	002b      	movs	r3, r5
 8015628:	3b61      	subs	r3, #97	@ 0x61
 801562a:	2b19      	cmp	r3, #25
 801562c:	d804      	bhi.n	8015638 <_strtol_l.constprop.0+0xe0>
 801562e:	3d57      	subs	r5, #87	@ 0x57
 8015630:	e7ce      	b.n	80155d0 <_strtol_l.constprop.0+0x78>
 8015632:	2201      	movs	r2, #1
 8015634:	4252      	negs	r2, r2
 8015636:	e7d9      	b.n	80155ec <_strtol_l.constprop.0+0x94>
 8015638:	1c53      	adds	r3, r2, #1
 801563a:	d108      	bne.n	801564e <_strtol_l.constprop.0+0xf6>
 801563c:	2322      	movs	r3, #34	@ 0x22
 801563e:	9a03      	ldr	r2, [sp, #12]
 8015640:	9802      	ldr	r0, [sp, #8]
 8015642:	6013      	str	r3, [r2, #0]
 8015644:	2f00      	cmp	r7, #0
 8015646:	d0d9      	beq.n	80155fc <_strtol_l.constprop.0+0xa4>
 8015648:	1e63      	subs	r3, r4, #1
 801564a:	9301      	str	r3, [sp, #4]
 801564c:	e007      	b.n	801565e <_strtol_l.constprop.0+0x106>
 801564e:	9b00      	ldr	r3, [sp, #0]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d000      	beq.n	8015656 <_strtol_l.constprop.0+0xfe>
 8015654:	4240      	negs	r0, r0
 8015656:	2f00      	cmp	r7, #0
 8015658:	d0d0      	beq.n	80155fc <_strtol_l.constprop.0+0xa4>
 801565a:	2a00      	cmp	r2, #0
 801565c:	d1f4      	bne.n	8015648 <_strtol_l.constprop.0+0xf0>
 801565e:	9b01      	ldr	r3, [sp, #4]
 8015660:	603b      	str	r3, [r7, #0]
 8015662:	e7cb      	b.n	80155fc <_strtol_l.constprop.0+0xa4>
 8015664:	08017589 	.word	0x08017589
 8015668:	7fffffff 	.word	0x7fffffff

0801566c <_strtol_r>:
 801566c:	b510      	push	{r4, lr}
 801566e:	f7ff ff73 	bl	8015558 <_strtol_l.constprop.0>
 8015672:	bd10      	pop	{r4, pc}

08015674 <__ssputs_r>:
 8015674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015676:	688e      	ldr	r6, [r1, #8]
 8015678:	b085      	sub	sp, #20
 801567a:	001f      	movs	r7, r3
 801567c:	000c      	movs	r4, r1
 801567e:	680b      	ldr	r3, [r1, #0]
 8015680:	9002      	str	r0, [sp, #8]
 8015682:	9203      	str	r2, [sp, #12]
 8015684:	42be      	cmp	r6, r7
 8015686:	d830      	bhi.n	80156ea <__ssputs_r+0x76>
 8015688:	210c      	movs	r1, #12
 801568a:	5e62      	ldrsh	r2, [r4, r1]
 801568c:	2190      	movs	r1, #144	@ 0x90
 801568e:	00c9      	lsls	r1, r1, #3
 8015690:	420a      	tst	r2, r1
 8015692:	d028      	beq.n	80156e6 <__ssputs_r+0x72>
 8015694:	2003      	movs	r0, #3
 8015696:	6921      	ldr	r1, [r4, #16]
 8015698:	1a5b      	subs	r3, r3, r1
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	6963      	ldr	r3, [r4, #20]
 801569e:	4343      	muls	r3, r0
 80156a0:	9801      	ldr	r0, [sp, #4]
 80156a2:	0fdd      	lsrs	r5, r3, #31
 80156a4:	18ed      	adds	r5, r5, r3
 80156a6:	1c7b      	adds	r3, r7, #1
 80156a8:	181b      	adds	r3, r3, r0
 80156aa:	106d      	asrs	r5, r5, #1
 80156ac:	42ab      	cmp	r3, r5
 80156ae:	d900      	bls.n	80156b2 <__ssputs_r+0x3e>
 80156b0:	001d      	movs	r5, r3
 80156b2:	0552      	lsls	r2, r2, #21
 80156b4:	d528      	bpl.n	8015708 <__ssputs_r+0x94>
 80156b6:	0029      	movs	r1, r5
 80156b8:	9802      	ldr	r0, [sp, #8]
 80156ba:	f7fe fbe1 	bl	8013e80 <_malloc_r>
 80156be:	1e06      	subs	r6, r0, #0
 80156c0:	d02c      	beq.n	801571c <__ssputs_r+0xa8>
 80156c2:	9a01      	ldr	r2, [sp, #4]
 80156c4:	6921      	ldr	r1, [r4, #16]
 80156c6:	f7fd fcd9 	bl	801307c <memcpy>
 80156ca:	89a2      	ldrh	r2, [r4, #12]
 80156cc:	4b18      	ldr	r3, [pc, #96]	@ (8015730 <__ssputs_r+0xbc>)
 80156ce:	401a      	ands	r2, r3
 80156d0:	2380      	movs	r3, #128	@ 0x80
 80156d2:	4313      	orrs	r3, r2
 80156d4:	81a3      	strh	r3, [r4, #12]
 80156d6:	9b01      	ldr	r3, [sp, #4]
 80156d8:	6126      	str	r6, [r4, #16]
 80156da:	18f6      	adds	r6, r6, r3
 80156dc:	6026      	str	r6, [r4, #0]
 80156de:	003e      	movs	r6, r7
 80156e0:	6165      	str	r5, [r4, #20]
 80156e2:	1aed      	subs	r5, r5, r3
 80156e4:	60a5      	str	r5, [r4, #8]
 80156e6:	42be      	cmp	r6, r7
 80156e8:	d900      	bls.n	80156ec <__ssputs_r+0x78>
 80156ea:	003e      	movs	r6, r7
 80156ec:	0032      	movs	r2, r6
 80156ee:	9903      	ldr	r1, [sp, #12]
 80156f0:	6820      	ldr	r0, [r4, #0]
 80156f2:	f000 f9ce 	bl	8015a92 <memmove>
 80156f6:	2000      	movs	r0, #0
 80156f8:	68a3      	ldr	r3, [r4, #8]
 80156fa:	1b9b      	subs	r3, r3, r6
 80156fc:	60a3      	str	r3, [r4, #8]
 80156fe:	6823      	ldr	r3, [r4, #0]
 8015700:	199b      	adds	r3, r3, r6
 8015702:	6023      	str	r3, [r4, #0]
 8015704:	b005      	add	sp, #20
 8015706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015708:	002a      	movs	r2, r5
 801570a:	9802      	ldr	r0, [sp, #8]
 801570c:	f000 fdb6 	bl	801627c <_realloc_r>
 8015710:	1e06      	subs	r6, r0, #0
 8015712:	d1e0      	bne.n	80156d6 <__ssputs_r+0x62>
 8015714:	6921      	ldr	r1, [r4, #16]
 8015716:	9802      	ldr	r0, [sp, #8]
 8015718:	f7fe fb3c 	bl	8013d94 <_free_r>
 801571c:	230c      	movs	r3, #12
 801571e:	2001      	movs	r0, #1
 8015720:	9a02      	ldr	r2, [sp, #8]
 8015722:	4240      	negs	r0, r0
 8015724:	6013      	str	r3, [r2, #0]
 8015726:	89a2      	ldrh	r2, [r4, #12]
 8015728:	3334      	adds	r3, #52	@ 0x34
 801572a:	4313      	orrs	r3, r2
 801572c:	81a3      	strh	r3, [r4, #12]
 801572e:	e7e9      	b.n	8015704 <__ssputs_r+0x90>
 8015730:	fffffb7f 	.word	0xfffffb7f

08015734 <_svfiprintf_r>:
 8015734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015736:	b0a1      	sub	sp, #132	@ 0x84
 8015738:	9003      	str	r0, [sp, #12]
 801573a:	001d      	movs	r5, r3
 801573c:	898b      	ldrh	r3, [r1, #12]
 801573e:	000f      	movs	r7, r1
 8015740:	0016      	movs	r6, r2
 8015742:	061b      	lsls	r3, r3, #24
 8015744:	d511      	bpl.n	801576a <_svfiprintf_r+0x36>
 8015746:	690b      	ldr	r3, [r1, #16]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d10e      	bne.n	801576a <_svfiprintf_r+0x36>
 801574c:	2140      	movs	r1, #64	@ 0x40
 801574e:	f7fe fb97 	bl	8013e80 <_malloc_r>
 8015752:	6038      	str	r0, [r7, #0]
 8015754:	6138      	str	r0, [r7, #16]
 8015756:	2800      	cmp	r0, #0
 8015758:	d105      	bne.n	8015766 <_svfiprintf_r+0x32>
 801575a:	230c      	movs	r3, #12
 801575c:	9a03      	ldr	r2, [sp, #12]
 801575e:	6013      	str	r3, [r2, #0]
 8015760:	2001      	movs	r0, #1
 8015762:	4240      	negs	r0, r0
 8015764:	e0cf      	b.n	8015906 <_svfiprintf_r+0x1d2>
 8015766:	2340      	movs	r3, #64	@ 0x40
 8015768:	617b      	str	r3, [r7, #20]
 801576a:	2300      	movs	r3, #0
 801576c:	ac08      	add	r4, sp, #32
 801576e:	6163      	str	r3, [r4, #20]
 8015770:	3320      	adds	r3, #32
 8015772:	7663      	strb	r3, [r4, #25]
 8015774:	3310      	adds	r3, #16
 8015776:	76a3      	strb	r3, [r4, #26]
 8015778:	9507      	str	r5, [sp, #28]
 801577a:	0035      	movs	r5, r6
 801577c:	782b      	ldrb	r3, [r5, #0]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d001      	beq.n	8015786 <_svfiprintf_r+0x52>
 8015782:	2b25      	cmp	r3, #37	@ 0x25
 8015784:	d148      	bne.n	8015818 <_svfiprintf_r+0xe4>
 8015786:	1bab      	subs	r3, r5, r6
 8015788:	9305      	str	r3, [sp, #20]
 801578a:	42b5      	cmp	r5, r6
 801578c:	d00b      	beq.n	80157a6 <_svfiprintf_r+0x72>
 801578e:	0032      	movs	r2, r6
 8015790:	0039      	movs	r1, r7
 8015792:	9803      	ldr	r0, [sp, #12]
 8015794:	f7ff ff6e 	bl	8015674 <__ssputs_r>
 8015798:	3001      	adds	r0, #1
 801579a:	d100      	bne.n	801579e <_svfiprintf_r+0x6a>
 801579c:	e0ae      	b.n	80158fc <_svfiprintf_r+0x1c8>
 801579e:	6963      	ldr	r3, [r4, #20]
 80157a0:	9a05      	ldr	r2, [sp, #20]
 80157a2:	189b      	adds	r3, r3, r2
 80157a4:	6163      	str	r3, [r4, #20]
 80157a6:	782b      	ldrb	r3, [r5, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d100      	bne.n	80157ae <_svfiprintf_r+0x7a>
 80157ac:	e0a6      	b.n	80158fc <_svfiprintf_r+0x1c8>
 80157ae:	2201      	movs	r2, #1
 80157b0:	2300      	movs	r3, #0
 80157b2:	4252      	negs	r2, r2
 80157b4:	6062      	str	r2, [r4, #4]
 80157b6:	a904      	add	r1, sp, #16
 80157b8:	3254      	adds	r2, #84	@ 0x54
 80157ba:	1852      	adds	r2, r2, r1
 80157bc:	1c6e      	adds	r6, r5, #1
 80157be:	6023      	str	r3, [r4, #0]
 80157c0:	60e3      	str	r3, [r4, #12]
 80157c2:	60a3      	str	r3, [r4, #8]
 80157c4:	7013      	strb	r3, [r2, #0]
 80157c6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80157c8:	4b54      	ldr	r3, [pc, #336]	@ (801591c <_svfiprintf_r+0x1e8>)
 80157ca:	2205      	movs	r2, #5
 80157cc:	0018      	movs	r0, r3
 80157ce:	7831      	ldrb	r1, [r6, #0]
 80157d0:	9305      	str	r3, [sp, #20]
 80157d2:	f7fd fc48 	bl	8013066 <memchr>
 80157d6:	1c75      	adds	r5, r6, #1
 80157d8:	2800      	cmp	r0, #0
 80157da:	d11f      	bne.n	801581c <_svfiprintf_r+0xe8>
 80157dc:	6822      	ldr	r2, [r4, #0]
 80157de:	06d3      	lsls	r3, r2, #27
 80157e0:	d504      	bpl.n	80157ec <_svfiprintf_r+0xb8>
 80157e2:	2353      	movs	r3, #83	@ 0x53
 80157e4:	a904      	add	r1, sp, #16
 80157e6:	185b      	adds	r3, r3, r1
 80157e8:	2120      	movs	r1, #32
 80157ea:	7019      	strb	r1, [r3, #0]
 80157ec:	0713      	lsls	r3, r2, #28
 80157ee:	d504      	bpl.n	80157fa <_svfiprintf_r+0xc6>
 80157f0:	2353      	movs	r3, #83	@ 0x53
 80157f2:	a904      	add	r1, sp, #16
 80157f4:	185b      	adds	r3, r3, r1
 80157f6:	212b      	movs	r1, #43	@ 0x2b
 80157f8:	7019      	strb	r1, [r3, #0]
 80157fa:	7833      	ldrb	r3, [r6, #0]
 80157fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80157fe:	d016      	beq.n	801582e <_svfiprintf_r+0xfa>
 8015800:	0035      	movs	r5, r6
 8015802:	2100      	movs	r1, #0
 8015804:	200a      	movs	r0, #10
 8015806:	68e3      	ldr	r3, [r4, #12]
 8015808:	782a      	ldrb	r2, [r5, #0]
 801580a:	1c6e      	adds	r6, r5, #1
 801580c:	3a30      	subs	r2, #48	@ 0x30
 801580e:	2a09      	cmp	r2, #9
 8015810:	d950      	bls.n	80158b4 <_svfiprintf_r+0x180>
 8015812:	2900      	cmp	r1, #0
 8015814:	d111      	bne.n	801583a <_svfiprintf_r+0x106>
 8015816:	e017      	b.n	8015848 <_svfiprintf_r+0x114>
 8015818:	3501      	adds	r5, #1
 801581a:	e7af      	b.n	801577c <_svfiprintf_r+0x48>
 801581c:	9b05      	ldr	r3, [sp, #20]
 801581e:	6822      	ldr	r2, [r4, #0]
 8015820:	1ac0      	subs	r0, r0, r3
 8015822:	2301      	movs	r3, #1
 8015824:	4083      	lsls	r3, r0
 8015826:	4313      	orrs	r3, r2
 8015828:	002e      	movs	r6, r5
 801582a:	6023      	str	r3, [r4, #0]
 801582c:	e7cc      	b.n	80157c8 <_svfiprintf_r+0x94>
 801582e:	9b07      	ldr	r3, [sp, #28]
 8015830:	1d19      	adds	r1, r3, #4
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	9107      	str	r1, [sp, #28]
 8015836:	2b00      	cmp	r3, #0
 8015838:	db01      	blt.n	801583e <_svfiprintf_r+0x10a>
 801583a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801583c:	e004      	b.n	8015848 <_svfiprintf_r+0x114>
 801583e:	425b      	negs	r3, r3
 8015840:	60e3      	str	r3, [r4, #12]
 8015842:	2302      	movs	r3, #2
 8015844:	4313      	orrs	r3, r2
 8015846:	6023      	str	r3, [r4, #0]
 8015848:	782b      	ldrb	r3, [r5, #0]
 801584a:	2b2e      	cmp	r3, #46	@ 0x2e
 801584c:	d10c      	bne.n	8015868 <_svfiprintf_r+0x134>
 801584e:	786b      	ldrb	r3, [r5, #1]
 8015850:	2b2a      	cmp	r3, #42	@ 0x2a
 8015852:	d134      	bne.n	80158be <_svfiprintf_r+0x18a>
 8015854:	9b07      	ldr	r3, [sp, #28]
 8015856:	3502      	adds	r5, #2
 8015858:	1d1a      	adds	r2, r3, #4
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	9207      	str	r2, [sp, #28]
 801585e:	2b00      	cmp	r3, #0
 8015860:	da01      	bge.n	8015866 <_svfiprintf_r+0x132>
 8015862:	2301      	movs	r3, #1
 8015864:	425b      	negs	r3, r3
 8015866:	9309      	str	r3, [sp, #36]	@ 0x24
 8015868:	4e2d      	ldr	r6, [pc, #180]	@ (8015920 <_svfiprintf_r+0x1ec>)
 801586a:	2203      	movs	r2, #3
 801586c:	0030      	movs	r0, r6
 801586e:	7829      	ldrb	r1, [r5, #0]
 8015870:	f7fd fbf9 	bl	8013066 <memchr>
 8015874:	2800      	cmp	r0, #0
 8015876:	d006      	beq.n	8015886 <_svfiprintf_r+0x152>
 8015878:	2340      	movs	r3, #64	@ 0x40
 801587a:	1b80      	subs	r0, r0, r6
 801587c:	4083      	lsls	r3, r0
 801587e:	6822      	ldr	r2, [r4, #0]
 8015880:	3501      	adds	r5, #1
 8015882:	4313      	orrs	r3, r2
 8015884:	6023      	str	r3, [r4, #0]
 8015886:	7829      	ldrb	r1, [r5, #0]
 8015888:	2206      	movs	r2, #6
 801588a:	4826      	ldr	r0, [pc, #152]	@ (8015924 <_svfiprintf_r+0x1f0>)
 801588c:	1c6e      	adds	r6, r5, #1
 801588e:	7621      	strb	r1, [r4, #24]
 8015890:	f7fd fbe9 	bl	8013066 <memchr>
 8015894:	2800      	cmp	r0, #0
 8015896:	d038      	beq.n	801590a <_svfiprintf_r+0x1d6>
 8015898:	4b23      	ldr	r3, [pc, #140]	@ (8015928 <_svfiprintf_r+0x1f4>)
 801589a:	2b00      	cmp	r3, #0
 801589c:	d122      	bne.n	80158e4 <_svfiprintf_r+0x1b0>
 801589e:	2207      	movs	r2, #7
 80158a0:	9b07      	ldr	r3, [sp, #28]
 80158a2:	3307      	adds	r3, #7
 80158a4:	4393      	bics	r3, r2
 80158a6:	3308      	adds	r3, #8
 80158a8:	9307      	str	r3, [sp, #28]
 80158aa:	6963      	ldr	r3, [r4, #20]
 80158ac:	9a04      	ldr	r2, [sp, #16]
 80158ae:	189b      	adds	r3, r3, r2
 80158b0:	6163      	str	r3, [r4, #20]
 80158b2:	e762      	b.n	801577a <_svfiprintf_r+0x46>
 80158b4:	4343      	muls	r3, r0
 80158b6:	0035      	movs	r5, r6
 80158b8:	2101      	movs	r1, #1
 80158ba:	189b      	adds	r3, r3, r2
 80158bc:	e7a4      	b.n	8015808 <_svfiprintf_r+0xd4>
 80158be:	2300      	movs	r3, #0
 80158c0:	200a      	movs	r0, #10
 80158c2:	0019      	movs	r1, r3
 80158c4:	3501      	adds	r5, #1
 80158c6:	6063      	str	r3, [r4, #4]
 80158c8:	782a      	ldrb	r2, [r5, #0]
 80158ca:	1c6e      	adds	r6, r5, #1
 80158cc:	3a30      	subs	r2, #48	@ 0x30
 80158ce:	2a09      	cmp	r2, #9
 80158d0:	d903      	bls.n	80158da <_svfiprintf_r+0x1a6>
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d0c8      	beq.n	8015868 <_svfiprintf_r+0x134>
 80158d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80158d8:	e7c6      	b.n	8015868 <_svfiprintf_r+0x134>
 80158da:	4341      	muls	r1, r0
 80158dc:	0035      	movs	r5, r6
 80158de:	2301      	movs	r3, #1
 80158e0:	1889      	adds	r1, r1, r2
 80158e2:	e7f1      	b.n	80158c8 <_svfiprintf_r+0x194>
 80158e4:	aa07      	add	r2, sp, #28
 80158e6:	9200      	str	r2, [sp, #0]
 80158e8:	0021      	movs	r1, r4
 80158ea:	003a      	movs	r2, r7
 80158ec:	4b0f      	ldr	r3, [pc, #60]	@ (801592c <_svfiprintf_r+0x1f8>)
 80158ee:	9803      	ldr	r0, [sp, #12]
 80158f0:	f7fc fb6c 	bl	8011fcc <_printf_float>
 80158f4:	9004      	str	r0, [sp, #16]
 80158f6:	9b04      	ldr	r3, [sp, #16]
 80158f8:	3301      	adds	r3, #1
 80158fa:	d1d6      	bne.n	80158aa <_svfiprintf_r+0x176>
 80158fc:	89bb      	ldrh	r3, [r7, #12]
 80158fe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8015900:	065b      	lsls	r3, r3, #25
 8015902:	d500      	bpl.n	8015906 <_svfiprintf_r+0x1d2>
 8015904:	e72c      	b.n	8015760 <_svfiprintf_r+0x2c>
 8015906:	b021      	add	sp, #132	@ 0x84
 8015908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801590a:	aa07      	add	r2, sp, #28
 801590c:	9200      	str	r2, [sp, #0]
 801590e:	0021      	movs	r1, r4
 8015910:	003a      	movs	r2, r7
 8015912:	4b06      	ldr	r3, [pc, #24]	@ (801592c <_svfiprintf_r+0x1f8>)
 8015914:	9803      	ldr	r0, [sp, #12]
 8015916:	f7fc fe07 	bl	8012528 <_printf_i>
 801591a:	e7eb      	b.n	80158f4 <_svfiprintf_r+0x1c0>
 801591c:	08017689 	.word	0x08017689
 8015920:	0801768f 	.word	0x0801768f
 8015924:	08017693 	.word	0x08017693
 8015928:	08011fcd 	.word	0x08011fcd
 801592c:	08015675 	.word	0x08015675

08015930 <__sflush_r>:
 8015930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015932:	220c      	movs	r2, #12
 8015934:	5e8b      	ldrsh	r3, [r1, r2]
 8015936:	0005      	movs	r5, r0
 8015938:	000c      	movs	r4, r1
 801593a:	071a      	lsls	r2, r3, #28
 801593c:	d456      	bmi.n	80159ec <__sflush_r+0xbc>
 801593e:	684a      	ldr	r2, [r1, #4]
 8015940:	2a00      	cmp	r2, #0
 8015942:	dc02      	bgt.n	801594a <__sflush_r+0x1a>
 8015944:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8015946:	2a00      	cmp	r2, #0
 8015948:	dd4e      	ble.n	80159e8 <__sflush_r+0xb8>
 801594a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801594c:	2f00      	cmp	r7, #0
 801594e:	d04b      	beq.n	80159e8 <__sflush_r+0xb8>
 8015950:	2200      	movs	r2, #0
 8015952:	2080      	movs	r0, #128	@ 0x80
 8015954:	682e      	ldr	r6, [r5, #0]
 8015956:	602a      	str	r2, [r5, #0]
 8015958:	001a      	movs	r2, r3
 801595a:	0140      	lsls	r0, r0, #5
 801595c:	6a21      	ldr	r1, [r4, #32]
 801595e:	4002      	ands	r2, r0
 8015960:	4203      	tst	r3, r0
 8015962:	d033      	beq.n	80159cc <__sflush_r+0x9c>
 8015964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015966:	89a3      	ldrh	r3, [r4, #12]
 8015968:	075b      	lsls	r3, r3, #29
 801596a:	d506      	bpl.n	801597a <__sflush_r+0x4a>
 801596c:	6863      	ldr	r3, [r4, #4]
 801596e:	1ad2      	subs	r2, r2, r3
 8015970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015972:	2b00      	cmp	r3, #0
 8015974:	d001      	beq.n	801597a <__sflush_r+0x4a>
 8015976:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015978:	1ad2      	subs	r2, r2, r3
 801597a:	2300      	movs	r3, #0
 801597c:	0028      	movs	r0, r5
 801597e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8015980:	6a21      	ldr	r1, [r4, #32]
 8015982:	47b8      	blx	r7
 8015984:	89a2      	ldrh	r2, [r4, #12]
 8015986:	1c43      	adds	r3, r0, #1
 8015988:	d106      	bne.n	8015998 <__sflush_r+0x68>
 801598a:	6829      	ldr	r1, [r5, #0]
 801598c:	291d      	cmp	r1, #29
 801598e:	d846      	bhi.n	8015a1e <__sflush_r+0xee>
 8015990:	4b29      	ldr	r3, [pc, #164]	@ (8015a38 <__sflush_r+0x108>)
 8015992:	410b      	asrs	r3, r1
 8015994:	07db      	lsls	r3, r3, #31
 8015996:	d442      	bmi.n	8015a1e <__sflush_r+0xee>
 8015998:	2300      	movs	r3, #0
 801599a:	6063      	str	r3, [r4, #4]
 801599c:	6923      	ldr	r3, [r4, #16]
 801599e:	6023      	str	r3, [r4, #0]
 80159a0:	04d2      	lsls	r2, r2, #19
 80159a2:	d505      	bpl.n	80159b0 <__sflush_r+0x80>
 80159a4:	1c43      	adds	r3, r0, #1
 80159a6:	d102      	bne.n	80159ae <__sflush_r+0x7e>
 80159a8:	682b      	ldr	r3, [r5, #0]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d100      	bne.n	80159b0 <__sflush_r+0x80>
 80159ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80159b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80159b2:	602e      	str	r6, [r5, #0]
 80159b4:	2900      	cmp	r1, #0
 80159b6:	d017      	beq.n	80159e8 <__sflush_r+0xb8>
 80159b8:	0023      	movs	r3, r4
 80159ba:	3344      	adds	r3, #68	@ 0x44
 80159bc:	4299      	cmp	r1, r3
 80159be:	d002      	beq.n	80159c6 <__sflush_r+0x96>
 80159c0:	0028      	movs	r0, r5
 80159c2:	f7fe f9e7 	bl	8013d94 <_free_r>
 80159c6:	2300      	movs	r3, #0
 80159c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80159ca:	e00d      	b.n	80159e8 <__sflush_r+0xb8>
 80159cc:	2301      	movs	r3, #1
 80159ce:	0028      	movs	r0, r5
 80159d0:	47b8      	blx	r7
 80159d2:	0002      	movs	r2, r0
 80159d4:	1c43      	adds	r3, r0, #1
 80159d6:	d1c6      	bne.n	8015966 <__sflush_r+0x36>
 80159d8:	682b      	ldr	r3, [r5, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d0c3      	beq.n	8015966 <__sflush_r+0x36>
 80159de:	2b1d      	cmp	r3, #29
 80159e0:	d001      	beq.n	80159e6 <__sflush_r+0xb6>
 80159e2:	2b16      	cmp	r3, #22
 80159e4:	d11a      	bne.n	8015a1c <__sflush_r+0xec>
 80159e6:	602e      	str	r6, [r5, #0]
 80159e8:	2000      	movs	r0, #0
 80159ea:	e01e      	b.n	8015a2a <__sflush_r+0xfa>
 80159ec:	690e      	ldr	r6, [r1, #16]
 80159ee:	2e00      	cmp	r6, #0
 80159f0:	d0fa      	beq.n	80159e8 <__sflush_r+0xb8>
 80159f2:	680f      	ldr	r7, [r1, #0]
 80159f4:	600e      	str	r6, [r1, #0]
 80159f6:	1bba      	subs	r2, r7, r6
 80159f8:	9201      	str	r2, [sp, #4]
 80159fa:	2200      	movs	r2, #0
 80159fc:	079b      	lsls	r3, r3, #30
 80159fe:	d100      	bne.n	8015a02 <__sflush_r+0xd2>
 8015a00:	694a      	ldr	r2, [r1, #20]
 8015a02:	60a2      	str	r2, [r4, #8]
 8015a04:	9b01      	ldr	r3, [sp, #4]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	ddee      	ble.n	80159e8 <__sflush_r+0xb8>
 8015a0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015a0c:	0032      	movs	r2, r6
 8015a0e:	001f      	movs	r7, r3
 8015a10:	0028      	movs	r0, r5
 8015a12:	9b01      	ldr	r3, [sp, #4]
 8015a14:	6a21      	ldr	r1, [r4, #32]
 8015a16:	47b8      	blx	r7
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	dc07      	bgt.n	8015a2c <__sflush_r+0xfc>
 8015a1c:	89a2      	ldrh	r2, [r4, #12]
 8015a1e:	2340      	movs	r3, #64	@ 0x40
 8015a20:	2001      	movs	r0, #1
 8015a22:	4313      	orrs	r3, r2
 8015a24:	b21b      	sxth	r3, r3
 8015a26:	81a3      	strh	r3, [r4, #12]
 8015a28:	4240      	negs	r0, r0
 8015a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015a2c:	9b01      	ldr	r3, [sp, #4]
 8015a2e:	1836      	adds	r6, r6, r0
 8015a30:	1a1b      	subs	r3, r3, r0
 8015a32:	9301      	str	r3, [sp, #4]
 8015a34:	e7e6      	b.n	8015a04 <__sflush_r+0xd4>
 8015a36:	46c0      	nop			@ (mov r8, r8)
 8015a38:	dfbffffe 	.word	0xdfbffffe

08015a3c <_fflush_r>:
 8015a3c:	690b      	ldr	r3, [r1, #16]
 8015a3e:	b570      	push	{r4, r5, r6, lr}
 8015a40:	0005      	movs	r5, r0
 8015a42:	000c      	movs	r4, r1
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d102      	bne.n	8015a4e <_fflush_r+0x12>
 8015a48:	2500      	movs	r5, #0
 8015a4a:	0028      	movs	r0, r5
 8015a4c:	bd70      	pop	{r4, r5, r6, pc}
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	d004      	beq.n	8015a5c <_fflush_r+0x20>
 8015a52:	6a03      	ldr	r3, [r0, #32]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d101      	bne.n	8015a5c <_fflush_r+0x20>
 8015a58:	f7fd f912 	bl	8012c80 <__sinit>
 8015a5c:	220c      	movs	r2, #12
 8015a5e:	5ea3      	ldrsh	r3, [r4, r2]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d0f1      	beq.n	8015a48 <_fflush_r+0xc>
 8015a64:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015a66:	07d2      	lsls	r2, r2, #31
 8015a68:	d404      	bmi.n	8015a74 <_fflush_r+0x38>
 8015a6a:	059b      	lsls	r3, r3, #22
 8015a6c:	d402      	bmi.n	8015a74 <_fflush_r+0x38>
 8015a6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a70:	f7fd faf7 	bl	8013062 <__retarget_lock_acquire_recursive>
 8015a74:	0028      	movs	r0, r5
 8015a76:	0021      	movs	r1, r4
 8015a78:	f7ff ff5a 	bl	8015930 <__sflush_r>
 8015a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a7e:	0005      	movs	r5, r0
 8015a80:	07db      	lsls	r3, r3, #31
 8015a82:	d4e2      	bmi.n	8015a4a <_fflush_r+0xe>
 8015a84:	89a3      	ldrh	r3, [r4, #12]
 8015a86:	059b      	lsls	r3, r3, #22
 8015a88:	d4df      	bmi.n	8015a4a <_fflush_r+0xe>
 8015a8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a8c:	f7fd faea 	bl	8013064 <__retarget_lock_release_recursive>
 8015a90:	e7db      	b.n	8015a4a <_fflush_r+0xe>

08015a92 <memmove>:
 8015a92:	b510      	push	{r4, lr}
 8015a94:	4288      	cmp	r0, r1
 8015a96:	d806      	bhi.n	8015aa6 <memmove+0x14>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d008      	beq.n	8015ab0 <memmove+0x1e>
 8015a9e:	5ccc      	ldrb	r4, [r1, r3]
 8015aa0:	54c4      	strb	r4, [r0, r3]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	e7f9      	b.n	8015a9a <memmove+0x8>
 8015aa6:	188b      	adds	r3, r1, r2
 8015aa8:	4298      	cmp	r0, r3
 8015aaa:	d2f5      	bcs.n	8015a98 <memmove+0x6>
 8015aac:	3a01      	subs	r2, #1
 8015aae:	d200      	bcs.n	8015ab2 <memmove+0x20>
 8015ab0:	bd10      	pop	{r4, pc}
 8015ab2:	5c8b      	ldrb	r3, [r1, r2]
 8015ab4:	5483      	strb	r3, [r0, r2]
 8015ab6:	e7f9      	b.n	8015aac <memmove+0x1a>

08015ab8 <strncmp>:
 8015ab8:	b530      	push	{r4, r5, lr}
 8015aba:	0005      	movs	r5, r0
 8015abc:	1e10      	subs	r0, r2, #0
 8015abe:	d00b      	beq.n	8015ad8 <strncmp+0x20>
 8015ac0:	2400      	movs	r4, #0
 8015ac2:	3a01      	subs	r2, #1
 8015ac4:	5d2b      	ldrb	r3, [r5, r4]
 8015ac6:	5d08      	ldrb	r0, [r1, r4]
 8015ac8:	4283      	cmp	r3, r0
 8015aca:	d104      	bne.n	8015ad6 <strncmp+0x1e>
 8015acc:	42a2      	cmp	r2, r4
 8015ace:	d002      	beq.n	8015ad6 <strncmp+0x1e>
 8015ad0:	3401      	adds	r4, #1
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d1f6      	bne.n	8015ac4 <strncmp+0xc>
 8015ad6:	1a18      	subs	r0, r3, r0
 8015ad8:	bd30      	pop	{r4, r5, pc}
	...

08015adc <_sbrk_r>:
 8015adc:	2300      	movs	r3, #0
 8015ade:	b570      	push	{r4, r5, r6, lr}
 8015ae0:	4d06      	ldr	r5, [pc, #24]	@ (8015afc <_sbrk_r+0x20>)
 8015ae2:	0004      	movs	r4, r0
 8015ae4:	0008      	movs	r0, r1
 8015ae6:	602b      	str	r3, [r5, #0]
 8015ae8:	f7f1 fd16 	bl	8007518 <_sbrk>
 8015aec:	1c43      	adds	r3, r0, #1
 8015aee:	d103      	bne.n	8015af8 <_sbrk_r+0x1c>
 8015af0:	682b      	ldr	r3, [r5, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d000      	beq.n	8015af8 <_sbrk_r+0x1c>
 8015af6:	6023      	str	r3, [r4, #0]
 8015af8:	bd70      	pop	{r4, r5, r6, pc}
 8015afa:	46c0      	nop			@ (mov r8, r8)
 8015afc:	20007278 	.word	0x20007278

08015b00 <nan>:
 8015b00:	2000      	movs	r0, #0
 8015b02:	4901      	ldr	r1, [pc, #4]	@ (8015b08 <nan+0x8>)
 8015b04:	4770      	bx	lr
 8015b06:	46c0      	nop			@ (mov r8, r8)
 8015b08:	7ff80000 	.word	0x7ff80000

08015b0c <__assert_func>:
 8015b0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015b0e:	0014      	movs	r4, r2
 8015b10:	001a      	movs	r2, r3
 8015b12:	4b09      	ldr	r3, [pc, #36]	@ (8015b38 <__assert_func+0x2c>)
 8015b14:	0005      	movs	r5, r0
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	000e      	movs	r6, r1
 8015b1a:	68d8      	ldr	r0, [r3, #12]
 8015b1c:	4b07      	ldr	r3, [pc, #28]	@ (8015b3c <__assert_func+0x30>)
 8015b1e:	2c00      	cmp	r4, #0
 8015b20:	d101      	bne.n	8015b26 <__assert_func+0x1a>
 8015b22:	4b07      	ldr	r3, [pc, #28]	@ (8015b40 <__assert_func+0x34>)
 8015b24:	001c      	movs	r4, r3
 8015b26:	4907      	ldr	r1, [pc, #28]	@ (8015b44 <__assert_func+0x38>)
 8015b28:	9301      	str	r3, [sp, #4]
 8015b2a:	9402      	str	r4, [sp, #8]
 8015b2c:	002b      	movs	r3, r5
 8015b2e:	9600      	str	r6, [sp, #0]
 8015b30:	f000 fbe0 	bl	80162f4 <fiprintf>
 8015b34:	f000 fbee 	bl	8016314 <abort>
 8015b38:	20000094 	.word	0x20000094
 8015b3c:	080176a2 	.word	0x080176a2
 8015b40:	080176dd 	.word	0x080176dd
 8015b44:	080176af 	.word	0x080176af

08015b48 <_calloc_r>:
 8015b48:	b570      	push	{r4, r5, r6, lr}
 8015b4a:	0c0b      	lsrs	r3, r1, #16
 8015b4c:	0c15      	lsrs	r5, r2, #16
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d11e      	bne.n	8015b90 <_calloc_r+0x48>
 8015b52:	2d00      	cmp	r5, #0
 8015b54:	d10c      	bne.n	8015b70 <_calloc_r+0x28>
 8015b56:	b289      	uxth	r1, r1
 8015b58:	b294      	uxth	r4, r2
 8015b5a:	434c      	muls	r4, r1
 8015b5c:	0021      	movs	r1, r4
 8015b5e:	f7fe f98f 	bl	8013e80 <_malloc_r>
 8015b62:	1e05      	subs	r5, r0, #0
 8015b64:	d01a      	beq.n	8015b9c <_calloc_r+0x54>
 8015b66:	0022      	movs	r2, r4
 8015b68:	2100      	movs	r1, #0
 8015b6a:	f7fd f995 	bl	8012e98 <memset>
 8015b6e:	e016      	b.n	8015b9e <_calloc_r+0x56>
 8015b70:	1c2b      	adds	r3, r5, #0
 8015b72:	1c0c      	adds	r4, r1, #0
 8015b74:	b289      	uxth	r1, r1
 8015b76:	b292      	uxth	r2, r2
 8015b78:	434a      	muls	r2, r1
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	b2a1      	uxth	r1, r4
 8015b7e:	4359      	muls	r1, r3
 8015b80:	0c14      	lsrs	r4, r2, #16
 8015b82:	190c      	adds	r4, r1, r4
 8015b84:	0c23      	lsrs	r3, r4, #16
 8015b86:	d107      	bne.n	8015b98 <_calloc_r+0x50>
 8015b88:	0424      	lsls	r4, r4, #16
 8015b8a:	b292      	uxth	r2, r2
 8015b8c:	4314      	orrs	r4, r2
 8015b8e:	e7e5      	b.n	8015b5c <_calloc_r+0x14>
 8015b90:	2d00      	cmp	r5, #0
 8015b92:	d101      	bne.n	8015b98 <_calloc_r+0x50>
 8015b94:	1c14      	adds	r4, r2, #0
 8015b96:	e7ed      	b.n	8015b74 <_calloc_r+0x2c>
 8015b98:	230c      	movs	r3, #12
 8015b9a:	6003      	str	r3, [r0, #0]
 8015b9c:	2500      	movs	r5, #0
 8015b9e:	0028      	movs	r0, r5
 8015ba0:	bd70      	pop	{r4, r5, r6, pc}

08015ba2 <rshift>:
 8015ba2:	0002      	movs	r2, r0
 8015ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ba6:	6904      	ldr	r4, [r0, #16]
 8015ba8:	b085      	sub	sp, #20
 8015baa:	3214      	adds	r2, #20
 8015bac:	114b      	asrs	r3, r1, #5
 8015bae:	0016      	movs	r6, r2
 8015bb0:	9302      	str	r3, [sp, #8]
 8015bb2:	429c      	cmp	r4, r3
 8015bb4:	dd31      	ble.n	8015c1a <rshift+0x78>
 8015bb6:	261f      	movs	r6, #31
 8015bb8:	000f      	movs	r7, r1
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	00a5      	lsls	r5, r4, #2
 8015bbe:	18d3      	adds	r3, r2, r3
 8015bc0:	4037      	ands	r7, r6
 8015bc2:	1955      	adds	r5, r2, r5
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	9701      	str	r7, [sp, #4]
 8015bc8:	4231      	tst	r1, r6
 8015bca:	d10d      	bne.n	8015be8 <rshift+0x46>
 8015bcc:	0016      	movs	r6, r2
 8015bce:	0019      	movs	r1, r3
 8015bd0:	428d      	cmp	r5, r1
 8015bd2:	d836      	bhi.n	8015c42 <rshift+0xa0>
 8015bd4:	9b00      	ldr	r3, [sp, #0]
 8015bd6:	2600      	movs	r6, #0
 8015bd8:	3b03      	subs	r3, #3
 8015bda:	429d      	cmp	r5, r3
 8015bdc:	d302      	bcc.n	8015be4 <rshift+0x42>
 8015bde:	9b02      	ldr	r3, [sp, #8]
 8015be0:	1ae4      	subs	r4, r4, r3
 8015be2:	00a6      	lsls	r6, r4, #2
 8015be4:	1996      	adds	r6, r2, r6
 8015be6:	e018      	b.n	8015c1a <rshift+0x78>
 8015be8:	2120      	movs	r1, #32
 8015bea:	9e01      	ldr	r6, [sp, #4]
 8015bec:	9f01      	ldr	r7, [sp, #4]
 8015bee:	1b89      	subs	r1, r1, r6
 8015bf0:	9e00      	ldr	r6, [sp, #0]
 8015bf2:	9103      	str	r1, [sp, #12]
 8015bf4:	ce02      	ldmia	r6!, {r1}
 8015bf6:	4694      	mov	ip, r2
 8015bf8:	40f9      	lsrs	r1, r7
 8015bfa:	42b5      	cmp	r5, r6
 8015bfc:	d816      	bhi.n	8015c2c <rshift+0x8a>
 8015bfe:	9b00      	ldr	r3, [sp, #0]
 8015c00:	2600      	movs	r6, #0
 8015c02:	3301      	adds	r3, #1
 8015c04:	429d      	cmp	r5, r3
 8015c06:	d303      	bcc.n	8015c10 <rshift+0x6e>
 8015c08:	9b02      	ldr	r3, [sp, #8]
 8015c0a:	1ae4      	subs	r4, r4, r3
 8015c0c:	00a6      	lsls	r6, r4, #2
 8015c0e:	3e04      	subs	r6, #4
 8015c10:	1996      	adds	r6, r2, r6
 8015c12:	6031      	str	r1, [r6, #0]
 8015c14:	2900      	cmp	r1, #0
 8015c16:	d000      	beq.n	8015c1a <rshift+0x78>
 8015c18:	3604      	adds	r6, #4
 8015c1a:	1ab1      	subs	r1, r6, r2
 8015c1c:	1089      	asrs	r1, r1, #2
 8015c1e:	6101      	str	r1, [r0, #16]
 8015c20:	4296      	cmp	r6, r2
 8015c22:	d101      	bne.n	8015c28 <rshift+0x86>
 8015c24:	2300      	movs	r3, #0
 8015c26:	6143      	str	r3, [r0, #20]
 8015c28:	b005      	add	sp, #20
 8015c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c2c:	6837      	ldr	r7, [r6, #0]
 8015c2e:	9b03      	ldr	r3, [sp, #12]
 8015c30:	409f      	lsls	r7, r3
 8015c32:	430f      	orrs	r7, r1
 8015c34:	4661      	mov	r1, ip
 8015c36:	c180      	stmia	r1!, {r7}
 8015c38:	468c      	mov	ip, r1
 8015c3a:	9b01      	ldr	r3, [sp, #4]
 8015c3c:	ce02      	ldmia	r6!, {r1}
 8015c3e:	40d9      	lsrs	r1, r3
 8015c40:	e7db      	b.n	8015bfa <rshift+0x58>
 8015c42:	c980      	ldmia	r1!, {r7}
 8015c44:	c680      	stmia	r6!, {r7}
 8015c46:	e7c3      	b.n	8015bd0 <rshift+0x2e>

08015c48 <__hexdig_fun>:
 8015c48:	0002      	movs	r2, r0
 8015c4a:	3a30      	subs	r2, #48	@ 0x30
 8015c4c:	0003      	movs	r3, r0
 8015c4e:	2a09      	cmp	r2, #9
 8015c50:	d802      	bhi.n	8015c58 <__hexdig_fun+0x10>
 8015c52:	3b20      	subs	r3, #32
 8015c54:	b2d8      	uxtb	r0, r3
 8015c56:	4770      	bx	lr
 8015c58:	0002      	movs	r2, r0
 8015c5a:	3a61      	subs	r2, #97	@ 0x61
 8015c5c:	2a05      	cmp	r2, #5
 8015c5e:	d801      	bhi.n	8015c64 <__hexdig_fun+0x1c>
 8015c60:	3b47      	subs	r3, #71	@ 0x47
 8015c62:	e7f7      	b.n	8015c54 <__hexdig_fun+0xc>
 8015c64:	001a      	movs	r2, r3
 8015c66:	3a41      	subs	r2, #65	@ 0x41
 8015c68:	2000      	movs	r0, #0
 8015c6a:	2a05      	cmp	r2, #5
 8015c6c:	d8f3      	bhi.n	8015c56 <__hexdig_fun+0xe>
 8015c6e:	3b27      	subs	r3, #39	@ 0x27
 8015c70:	e7f0      	b.n	8015c54 <__hexdig_fun+0xc>
	...

08015c74 <__gethex>:
 8015c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c76:	b089      	sub	sp, #36	@ 0x24
 8015c78:	9307      	str	r3, [sp, #28]
 8015c7a:	680b      	ldr	r3, [r1, #0]
 8015c7c:	9201      	str	r2, [sp, #4]
 8015c7e:	9003      	str	r0, [sp, #12]
 8015c80:	9106      	str	r1, [sp, #24]
 8015c82:	1c9a      	adds	r2, r3, #2
 8015c84:	0011      	movs	r1, r2
 8015c86:	3201      	adds	r2, #1
 8015c88:	1e50      	subs	r0, r2, #1
 8015c8a:	7800      	ldrb	r0, [r0, #0]
 8015c8c:	2830      	cmp	r0, #48	@ 0x30
 8015c8e:	d0f9      	beq.n	8015c84 <__gethex+0x10>
 8015c90:	1acb      	subs	r3, r1, r3
 8015c92:	3b02      	subs	r3, #2
 8015c94:	9305      	str	r3, [sp, #20]
 8015c96:	9100      	str	r1, [sp, #0]
 8015c98:	f7ff ffd6 	bl	8015c48 <__hexdig_fun>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	001d      	movs	r5, r3
 8015ca0:	9302      	str	r3, [sp, #8]
 8015ca2:	4298      	cmp	r0, r3
 8015ca4:	d11e      	bne.n	8015ce4 <__gethex+0x70>
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	49a6      	ldr	r1, [pc, #664]	@ (8015f44 <__gethex+0x2d0>)
 8015caa:	9800      	ldr	r0, [sp, #0]
 8015cac:	f7ff ff04 	bl	8015ab8 <strncmp>
 8015cb0:	0007      	movs	r7, r0
 8015cb2:	42a8      	cmp	r0, r5
 8015cb4:	d000      	beq.n	8015cb8 <__gethex+0x44>
 8015cb6:	e06a      	b.n	8015d8e <__gethex+0x11a>
 8015cb8:	9b00      	ldr	r3, [sp, #0]
 8015cba:	7858      	ldrb	r0, [r3, #1]
 8015cbc:	1c5c      	adds	r4, r3, #1
 8015cbe:	f7ff ffc3 	bl	8015c48 <__hexdig_fun>
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	9302      	str	r3, [sp, #8]
 8015cc6:	42a8      	cmp	r0, r5
 8015cc8:	d02f      	beq.n	8015d2a <__gethex+0xb6>
 8015cca:	9400      	str	r4, [sp, #0]
 8015ccc:	9b00      	ldr	r3, [sp, #0]
 8015cce:	7818      	ldrb	r0, [r3, #0]
 8015cd0:	2830      	cmp	r0, #48	@ 0x30
 8015cd2:	d009      	beq.n	8015ce8 <__gethex+0x74>
 8015cd4:	f7ff ffb8 	bl	8015c48 <__hexdig_fun>
 8015cd8:	4242      	negs	r2, r0
 8015cda:	4142      	adcs	r2, r0
 8015cdc:	2301      	movs	r3, #1
 8015cde:	0025      	movs	r5, r4
 8015ce0:	9202      	str	r2, [sp, #8]
 8015ce2:	9305      	str	r3, [sp, #20]
 8015ce4:	9c00      	ldr	r4, [sp, #0]
 8015ce6:	e004      	b.n	8015cf2 <__gethex+0x7e>
 8015ce8:	9b00      	ldr	r3, [sp, #0]
 8015cea:	3301      	adds	r3, #1
 8015cec:	9300      	str	r3, [sp, #0]
 8015cee:	e7ed      	b.n	8015ccc <__gethex+0x58>
 8015cf0:	3401      	adds	r4, #1
 8015cf2:	7820      	ldrb	r0, [r4, #0]
 8015cf4:	f7ff ffa8 	bl	8015c48 <__hexdig_fun>
 8015cf8:	1e07      	subs	r7, r0, #0
 8015cfa:	d1f9      	bne.n	8015cf0 <__gethex+0x7c>
 8015cfc:	2201      	movs	r2, #1
 8015cfe:	0020      	movs	r0, r4
 8015d00:	4990      	ldr	r1, [pc, #576]	@ (8015f44 <__gethex+0x2d0>)
 8015d02:	f7ff fed9 	bl	8015ab8 <strncmp>
 8015d06:	2800      	cmp	r0, #0
 8015d08:	d10d      	bne.n	8015d26 <__gethex+0xb2>
 8015d0a:	2d00      	cmp	r5, #0
 8015d0c:	d106      	bne.n	8015d1c <__gethex+0xa8>
 8015d0e:	3401      	adds	r4, #1
 8015d10:	0025      	movs	r5, r4
 8015d12:	7820      	ldrb	r0, [r4, #0]
 8015d14:	f7ff ff98 	bl	8015c48 <__hexdig_fun>
 8015d18:	2800      	cmp	r0, #0
 8015d1a:	d102      	bne.n	8015d22 <__gethex+0xae>
 8015d1c:	1b2d      	subs	r5, r5, r4
 8015d1e:	00af      	lsls	r7, r5, #2
 8015d20:	e003      	b.n	8015d2a <__gethex+0xb6>
 8015d22:	3401      	adds	r4, #1
 8015d24:	e7f5      	b.n	8015d12 <__gethex+0x9e>
 8015d26:	2d00      	cmp	r5, #0
 8015d28:	d1f8      	bne.n	8015d1c <__gethex+0xa8>
 8015d2a:	2220      	movs	r2, #32
 8015d2c:	7823      	ldrb	r3, [r4, #0]
 8015d2e:	0026      	movs	r6, r4
 8015d30:	4393      	bics	r3, r2
 8015d32:	2b50      	cmp	r3, #80	@ 0x50
 8015d34:	d11d      	bne.n	8015d72 <__gethex+0xfe>
 8015d36:	7863      	ldrb	r3, [r4, #1]
 8015d38:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d3a:	d02d      	beq.n	8015d98 <__gethex+0x124>
 8015d3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8015d3e:	d02f      	beq.n	8015da0 <__gethex+0x12c>
 8015d40:	2300      	movs	r3, #0
 8015d42:	1c66      	adds	r6, r4, #1
 8015d44:	9304      	str	r3, [sp, #16]
 8015d46:	7830      	ldrb	r0, [r6, #0]
 8015d48:	f7ff ff7e 	bl	8015c48 <__hexdig_fun>
 8015d4c:	1e43      	subs	r3, r0, #1
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	0005      	movs	r5, r0
 8015d52:	2b18      	cmp	r3, #24
 8015d54:	d82a      	bhi.n	8015dac <__gethex+0x138>
 8015d56:	7870      	ldrb	r0, [r6, #1]
 8015d58:	f7ff ff76 	bl	8015c48 <__hexdig_fun>
 8015d5c:	1e43      	subs	r3, r0, #1
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	3601      	adds	r6, #1
 8015d62:	3d10      	subs	r5, #16
 8015d64:	2b18      	cmp	r3, #24
 8015d66:	d91d      	bls.n	8015da4 <__gethex+0x130>
 8015d68:	9b04      	ldr	r3, [sp, #16]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d000      	beq.n	8015d70 <__gethex+0xfc>
 8015d6e:	426d      	negs	r5, r5
 8015d70:	197f      	adds	r7, r7, r5
 8015d72:	9b06      	ldr	r3, [sp, #24]
 8015d74:	601e      	str	r6, [r3, #0]
 8015d76:	9b02      	ldr	r3, [sp, #8]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d019      	beq.n	8015db0 <__gethex+0x13c>
 8015d7c:	9b05      	ldr	r3, [sp, #20]
 8015d7e:	2606      	movs	r6, #6
 8015d80:	425a      	negs	r2, r3
 8015d82:	4153      	adcs	r3, r2
 8015d84:	425b      	negs	r3, r3
 8015d86:	401e      	ands	r6, r3
 8015d88:	0030      	movs	r0, r6
 8015d8a:	b009      	add	sp, #36	@ 0x24
 8015d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d8e:	2301      	movs	r3, #1
 8015d90:	2700      	movs	r7, #0
 8015d92:	9c00      	ldr	r4, [sp, #0]
 8015d94:	9302      	str	r3, [sp, #8]
 8015d96:	e7c8      	b.n	8015d2a <__gethex+0xb6>
 8015d98:	2300      	movs	r3, #0
 8015d9a:	9304      	str	r3, [sp, #16]
 8015d9c:	1ca6      	adds	r6, r4, #2
 8015d9e:	e7d2      	b.n	8015d46 <__gethex+0xd2>
 8015da0:	2301      	movs	r3, #1
 8015da2:	e7fa      	b.n	8015d9a <__gethex+0x126>
 8015da4:	230a      	movs	r3, #10
 8015da6:	435d      	muls	r5, r3
 8015da8:	182d      	adds	r5, r5, r0
 8015daa:	e7d4      	b.n	8015d56 <__gethex+0xe2>
 8015dac:	0026      	movs	r6, r4
 8015dae:	e7e0      	b.n	8015d72 <__gethex+0xfe>
 8015db0:	9b00      	ldr	r3, [sp, #0]
 8015db2:	9902      	ldr	r1, [sp, #8]
 8015db4:	1ae3      	subs	r3, r4, r3
 8015db6:	3b01      	subs	r3, #1
 8015db8:	2b07      	cmp	r3, #7
 8015dba:	dc0a      	bgt.n	8015dd2 <__gethex+0x15e>
 8015dbc:	9803      	ldr	r0, [sp, #12]
 8015dbe:	f7fe f8ef 	bl	8013fa0 <_Balloc>
 8015dc2:	1e05      	subs	r5, r0, #0
 8015dc4:	d108      	bne.n	8015dd8 <__gethex+0x164>
 8015dc6:	002a      	movs	r2, r5
 8015dc8:	21e4      	movs	r1, #228	@ 0xe4
 8015dca:	4b5f      	ldr	r3, [pc, #380]	@ (8015f48 <__gethex+0x2d4>)
 8015dcc:	485f      	ldr	r0, [pc, #380]	@ (8015f4c <__gethex+0x2d8>)
 8015dce:	f7ff fe9d 	bl	8015b0c <__assert_func>
 8015dd2:	3101      	adds	r1, #1
 8015dd4:	105b      	asrs	r3, r3, #1
 8015dd6:	e7ef      	b.n	8015db8 <__gethex+0x144>
 8015dd8:	0003      	movs	r3, r0
 8015dda:	3314      	adds	r3, #20
 8015ddc:	9302      	str	r3, [sp, #8]
 8015dde:	9305      	str	r3, [sp, #20]
 8015de0:	2300      	movs	r3, #0
 8015de2:	001e      	movs	r6, r3
 8015de4:	9304      	str	r3, [sp, #16]
 8015de6:	9b00      	ldr	r3, [sp, #0]
 8015de8:	42a3      	cmp	r3, r4
 8015dea:	d338      	bcc.n	8015e5e <__gethex+0x1ea>
 8015dec:	9c05      	ldr	r4, [sp, #20]
 8015dee:	9b02      	ldr	r3, [sp, #8]
 8015df0:	c440      	stmia	r4!, {r6}
 8015df2:	1ae4      	subs	r4, r4, r3
 8015df4:	10a4      	asrs	r4, r4, #2
 8015df6:	0030      	movs	r0, r6
 8015df8:	612c      	str	r4, [r5, #16]
 8015dfa:	f7fe f9c9 	bl	8014190 <__hi0bits>
 8015dfe:	9b01      	ldr	r3, [sp, #4]
 8015e00:	0164      	lsls	r4, r4, #5
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	1a26      	subs	r6, r4, r0
 8015e06:	9300      	str	r3, [sp, #0]
 8015e08:	429e      	cmp	r6, r3
 8015e0a:	dd52      	ble.n	8015eb2 <__gethex+0x23e>
 8015e0c:	1af6      	subs	r6, r6, r3
 8015e0e:	0031      	movs	r1, r6
 8015e10:	0028      	movs	r0, r5
 8015e12:	f7fe fd6c 	bl	80148ee <__any_on>
 8015e16:	1e04      	subs	r4, r0, #0
 8015e18:	d00f      	beq.n	8015e3a <__gethex+0x1c6>
 8015e1a:	2401      	movs	r4, #1
 8015e1c:	231f      	movs	r3, #31
 8015e1e:	0020      	movs	r0, r4
 8015e20:	1e72      	subs	r2, r6, #1
 8015e22:	4013      	ands	r3, r2
 8015e24:	4098      	lsls	r0, r3
 8015e26:	0003      	movs	r3, r0
 8015e28:	1151      	asrs	r1, r2, #5
 8015e2a:	9802      	ldr	r0, [sp, #8]
 8015e2c:	0089      	lsls	r1, r1, #2
 8015e2e:	5809      	ldr	r1, [r1, r0]
 8015e30:	4219      	tst	r1, r3
 8015e32:	d002      	beq.n	8015e3a <__gethex+0x1c6>
 8015e34:	42a2      	cmp	r2, r4
 8015e36:	dc34      	bgt.n	8015ea2 <__gethex+0x22e>
 8015e38:	2402      	movs	r4, #2
 8015e3a:	0031      	movs	r1, r6
 8015e3c:	0028      	movs	r0, r5
 8015e3e:	f7ff feb0 	bl	8015ba2 <rshift>
 8015e42:	19bf      	adds	r7, r7, r6
 8015e44:	9b01      	ldr	r3, [sp, #4]
 8015e46:	689b      	ldr	r3, [r3, #8]
 8015e48:	42bb      	cmp	r3, r7
 8015e4a:	da42      	bge.n	8015ed2 <__gethex+0x25e>
 8015e4c:	0029      	movs	r1, r5
 8015e4e:	9803      	ldr	r0, [sp, #12]
 8015e50:	f7fe f8ea 	bl	8014028 <_Bfree>
 8015e54:	2300      	movs	r3, #0
 8015e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e58:	26a3      	movs	r6, #163	@ 0xa3
 8015e5a:	6013      	str	r3, [r2, #0]
 8015e5c:	e794      	b.n	8015d88 <__gethex+0x114>
 8015e5e:	3c01      	subs	r4, #1
 8015e60:	7823      	ldrb	r3, [r4, #0]
 8015e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8015e64:	d012      	beq.n	8015e8c <__gethex+0x218>
 8015e66:	9b04      	ldr	r3, [sp, #16]
 8015e68:	2b20      	cmp	r3, #32
 8015e6a:	d104      	bne.n	8015e76 <__gethex+0x202>
 8015e6c:	9b05      	ldr	r3, [sp, #20]
 8015e6e:	c340      	stmia	r3!, {r6}
 8015e70:	2600      	movs	r6, #0
 8015e72:	9305      	str	r3, [sp, #20]
 8015e74:	9604      	str	r6, [sp, #16]
 8015e76:	7820      	ldrb	r0, [r4, #0]
 8015e78:	f7ff fee6 	bl	8015c48 <__hexdig_fun>
 8015e7c:	230f      	movs	r3, #15
 8015e7e:	4018      	ands	r0, r3
 8015e80:	9b04      	ldr	r3, [sp, #16]
 8015e82:	4098      	lsls	r0, r3
 8015e84:	3304      	adds	r3, #4
 8015e86:	4306      	orrs	r6, r0
 8015e88:	9304      	str	r3, [sp, #16]
 8015e8a:	e7ac      	b.n	8015de6 <__gethex+0x172>
 8015e8c:	9b00      	ldr	r3, [sp, #0]
 8015e8e:	42a3      	cmp	r3, r4
 8015e90:	d8e9      	bhi.n	8015e66 <__gethex+0x1f2>
 8015e92:	2201      	movs	r2, #1
 8015e94:	0020      	movs	r0, r4
 8015e96:	492b      	ldr	r1, [pc, #172]	@ (8015f44 <__gethex+0x2d0>)
 8015e98:	f7ff fe0e 	bl	8015ab8 <strncmp>
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	d1e2      	bne.n	8015e66 <__gethex+0x1f2>
 8015ea0:	e7a1      	b.n	8015de6 <__gethex+0x172>
 8015ea2:	0028      	movs	r0, r5
 8015ea4:	1eb1      	subs	r1, r6, #2
 8015ea6:	f7fe fd22 	bl	80148ee <__any_on>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d0c4      	beq.n	8015e38 <__gethex+0x1c4>
 8015eae:	2403      	movs	r4, #3
 8015eb0:	e7c3      	b.n	8015e3a <__gethex+0x1c6>
 8015eb2:	9b00      	ldr	r3, [sp, #0]
 8015eb4:	2400      	movs	r4, #0
 8015eb6:	429e      	cmp	r6, r3
 8015eb8:	dac4      	bge.n	8015e44 <__gethex+0x1d0>
 8015eba:	1b9e      	subs	r6, r3, r6
 8015ebc:	0029      	movs	r1, r5
 8015ebe:	0032      	movs	r2, r6
 8015ec0:	9803      	ldr	r0, [sp, #12]
 8015ec2:	f7fe fadb 	bl	801447c <__lshift>
 8015ec6:	0003      	movs	r3, r0
 8015ec8:	3314      	adds	r3, #20
 8015eca:	0005      	movs	r5, r0
 8015ecc:	1bbf      	subs	r7, r7, r6
 8015ece:	9302      	str	r3, [sp, #8]
 8015ed0:	e7b8      	b.n	8015e44 <__gethex+0x1d0>
 8015ed2:	9b01      	ldr	r3, [sp, #4]
 8015ed4:	685e      	ldr	r6, [r3, #4]
 8015ed6:	42be      	cmp	r6, r7
 8015ed8:	dd6f      	ble.n	8015fba <__gethex+0x346>
 8015eda:	9b00      	ldr	r3, [sp, #0]
 8015edc:	1bf6      	subs	r6, r6, r7
 8015ede:	42b3      	cmp	r3, r6
 8015ee0:	dc36      	bgt.n	8015f50 <__gethex+0x2dc>
 8015ee2:	9b01      	ldr	r3, [sp, #4]
 8015ee4:	68db      	ldr	r3, [r3, #12]
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	d024      	beq.n	8015f34 <__gethex+0x2c0>
 8015eea:	2b03      	cmp	r3, #3
 8015eec:	d026      	beq.n	8015f3c <__gethex+0x2c8>
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	d117      	bne.n	8015f22 <__gethex+0x2ae>
 8015ef2:	9b00      	ldr	r3, [sp, #0]
 8015ef4:	42b3      	cmp	r3, r6
 8015ef6:	d114      	bne.n	8015f22 <__gethex+0x2ae>
 8015ef8:	2b01      	cmp	r3, #1
 8015efa:	d10b      	bne.n	8015f14 <__gethex+0x2a0>
 8015efc:	9b01      	ldr	r3, [sp, #4]
 8015efe:	9a07      	ldr	r2, [sp, #28]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	2662      	movs	r6, #98	@ 0x62
 8015f04:	6013      	str	r3, [r2, #0]
 8015f06:	2301      	movs	r3, #1
 8015f08:	9a02      	ldr	r2, [sp, #8]
 8015f0a:	612b      	str	r3, [r5, #16]
 8015f0c:	6013      	str	r3, [r2, #0]
 8015f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f10:	601d      	str	r5, [r3, #0]
 8015f12:	e739      	b.n	8015d88 <__gethex+0x114>
 8015f14:	9900      	ldr	r1, [sp, #0]
 8015f16:	0028      	movs	r0, r5
 8015f18:	3901      	subs	r1, #1
 8015f1a:	f7fe fce8 	bl	80148ee <__any_on>
 8015f1e:	2800      	cmp	r0, #0
 8015f20:	d1ec      	bne.n	8015efc <__gethex+0x288>
 8015f22:	0029      	movs	r1, r5
 8015f24:	9803      	ldr	r0, [sp, #12]
 8015f26:	f7fe f87f 	bl	8014028 <_Bfree>
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f2e:	2650      	movs	r6, #80	@ 0x50
 8015f30:	6013      	str	r3, [r2, #0]
 8015f32:	e729      	b.n	8015d88 <__gethex+0x114>
 8015f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d1f3      	bne.n	8015f22 <__gethex+0x2ae>
 8015f3a:	e7df      	b.n	8015efc <__gethex+0x288>
 8015f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1dc      	bne.n	8015efc <__gethex+0x288>
 8015f42:	e7ee      	b.n	8015f22 <__gethex+0x2ae>
 8015f44:	08017530 	.word	0x08017530
 8015f48:	080173c5 	.word	0x080173c5
 8015f4c:	080176de 	.word	0x080176de
 8015f50:	1e77      	subs	r7, r6, #1
 8015f52:	2c00      	cmp	r4, #0
 8015f54:	d12f      	bne.n	8015fb6 <__gethex+0x342>
 8015f56:	2f00      	cmp	r7, #0
 8015f58:	d004      	beq.n	8015f64 <__gethex+0x2f0>
 8015f5a:	0039      	movs	r1, r7
 8015f5c:	0028      	movs	r0, r5
 8015f5e:	f7fe fcc6 	bl	80148ee <__any_on>
 8015f62:	0004      	movs	r4, r0
 8015f64:	231f      	movs	r3, #31
 8015f66:	117a      	asrs	r2, r7, #5
 8015f68:	401f      	ands	r7, r3
 8015f6a:	3b1e      	subs	r3, #30
 8015f6c:	40bb      	lsls	r3, r7
 8015f6e:	9902      	ldr	r1, [sp, #8]
 8015f70:	0092      	lsls	r2, r2, #2
 8015f72:	5852      	ldr	r2, [r2, r1]
 8015f74:	421a      	tst	r2, r3
 8015f76:	d001      	beq.n	8015f7c <__gethex+0x308>
 8015f78:	2302      	movs	r3, #2
 8015f7a:	431c      	orrs	r4, r3
 8015f7c:	9b00      	ldr	r3, [sp, #0]
 8015f7e:	0031      	movs	r1, r6
 8015f80:	1b9b      	subs	r3, r3, r6
 8015f82:	2602      	movs	r6, #2
 8015f84:	0028      	movs	r0, r5
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	f7ff fe0b 	bl	8015ba2 <rshift>
 8015f8c:	9b01      	ldr	r3, [sp, #4]
 8015f8e:	685f      	ldr	r7, [r3, #4]
 8015f90:	2c00      	cmp	r4, #0
 8015f92:	d03f      	beq.n	8016014 <__gethex+0x3a0>
 8015f94:	9b01      	ldr	r3, [sp, #4]
 8015f96:	68db      	ldr	r3, [r3, #12]
 8015f98:	2b02      	cmp	r3, #2
 8015f9a:	d010      	beq.n	8015fbe <__gethex+0x34a>
 8015f9c:	2b03      	cmp	r3, #3
 8015f9e:	d012      	beq.n	8015fc6 <__gethex+0x352>
 8015fa0:	2b01      	cmp	r3, #1
 8015fa2:	d106      	bne.n	8015fb2 <__gethex+0x33e>
 8015fa4:	07a2      	lsls	r2, r4, #30
 8015fa6:	d504      	bpl.n	8015fb2 <__gethex+0x33e>
 8015fa8:	9a02      	ldr	r2, [sp, #8]
 8015faa:	6812      	ldr	r2, [r2, #0]
 8015fac:	4314      	orrs	r4, r2
 8015fae:	421c      	tst	r4, r3
 8015fb0:	d10c      	bne.n	8015fcc <__gethex+0x358>
 8015fb2:	2310      	movs	r3, #16
 8015fb4:	e02d      	b.n	8016012 <__gethex+0x39e>
 8015fb6:	2401      	movs	r4, #1
 8015fb8:	e7d4      	b.n	8015f64 <__gethex+0x2f0>
 8015fba:	2601      	movs	r6, #1
 8015fbc:	e7e8      	b.n	8015f90 <__gethex+0x31c>
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015fc2:	1a9b      	subs	r3, r3, r2
 8015fc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d0f2      	beq.n	8015fb2 <__gethex+0x33e>
 8015fcc:	692b      	ldr	r3, [r5, #16]
 8015fce:	2000      	movs	r0, #0
 8015fd0:	9302      	str	r3, [sp, #8]
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	9304      	str	r3, [sp, #16]
 8015fd6:	002b      	movs	r3, r5
 8015fd8:	9a04      	ldr	r2, [sp, #16]
 8015fda:	3314      	adds	r3, #20
 8015fdc:	1899      	adds	r1, r3, r2
 8015fde:	681a      	ldr	r2, [r3, #0]
 8015fe0:	1c54      	adds	r4, r2, #1
 8015fe2:	d01c      	beq.n	801601e <__gethex+0x3aa>
 8015fe4:	3201      	adds	r2, #1
 8015fe6:	601a      	str	r2, [r3, #0]
 8015fe8:	002b      	movs	r3, r5
 8015fea:	3314      	adds	r3, #20
 8015fec:	2e02      	cmp	r6, #2
 8015fee:	d13f      	bne.n	8016070 <__gethex+0x3fc>
 8015ff0:	9a01      	ldr	r2, [sp, #4]
 8015ff2:	9900      	ldr	r1, [sp, #0]
 8015ff4:	6812      	ldr	r2, [r2, #0]
 8015ff6:	3a01      	subs	r2, #1
 8015ff8:	428a      	cmp	r2, r1
 8015ffa:	d109      	bne.n	8016010 <__gethex+0x39c>
 8015ffc:	000a      	movs	r2, r1
 8015ffe:	201f      	movs	r0, #31
 8016000:	4010      	ands	r0, r2
 8016002:	2201      	movs	r2, #1
 8016004:	4082      	lsls	r2, r0
 8016006:	1149      	asrs	r1, r1, #5
 8016008:	0089      	lsls	r1, r1, #2
 801600a:	58cb      	ldr	r3, [r1, r3]
 801600c:	4213      	tst	r3, r2
 801600e:	d13d      	bne.n	801608c <__gethex+0x418>
 8016010:	2320      	movs	r3, #32
 8016012:	431e      	orrs	r6, r3
 8016014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016016:	601d      	str	r5, [r3, #0]
 8016018:	9b07      	ldr	r3, [sp, #28]
 801601a:	601f      	str	r7, [r3, #0]
 801601c:	e6b4      	b.n	8015d88 <__gethex+0x114>
 801601e:	c301      	stmia	r3!, {r0}
 8016020:	4299      	cmp	r1, r3
 8016022:	d8dc      	bhi.n	8015fde <__gethex+0x36a>
 8016024:	68ab      	ldr	r3, [r5, #8]
 8016026:	9a02      	ldr	r2, [sp, #8]
 8016028:	429a      	cmp	r2, r3
 801602a:	db18      	blt.n	801605e <__gethex+0x3ea>
 801602c:	6869      	ldr	r1, [r5, #4]
 801602e:	9803      	ldr	r0, [sp, #12]
 8016030:	3101      	adds	r1, #1
 8016032:	f7fd ffb5 	bl	8013fa0 <_Balloc>
 8016036:	1e04      	subs	r4, r0, #0
 8016038:	d104      	bne.n	8016044 <__gethex+0x3d0>
 801603a:	0022      	movs	r2, r4
 801603c:	2184      	movs	r1, #132	@ 0x84
 801603e:	4b1d      	ldr	r3, [pc, #116]	@ (80160b4 <__gethex+0x440>)
 8016040:	481d      	ldr	r0, [pc, #116]	@ (80160b8 <__gethex+0x444>)
 8016042:	e6c4      	b.n	8015dce <__gethex+0x15a>
 8016044:	0029      	movs	r1, r5
 8016046:	692a      	ldr	r2, [r5, #16]
 8016048:	310c      	adds	r1, #12
 801604a:	3202      	adds	r2, #2
 801604c:	0092      	lsls	r2, r2, #2
 801604e:	300c      	adds	r0, #12
 8016050:	f7fd f814 	bl	801307c <memcpy>
 8016054:	0029      	movs	r1, r5
 8016056:	9803      	ldr	r0, [sp, #12]
 8016058:	f7fd ffe6 	bl	8014028 <_Bfree>
 801605c:	0025      	movs	r5, r4
 801605e:	692b      	ldr	r3, [r5, #16]
 8016060:	1c5a      	adds	r2, r3, #1
 8016062:	612a      	str	r2, [r5, #16]
 8016064:	2201      	movs	r2, #1
 8016066:	3304      	adds	r3, #4
 8016068:	009b      	lsls	r3, r3, #2
 801606a:	18eb      	adds	r3, r5, r3
 801606c:	605a      	str	r2, [r3, #4]
 801606e:	e7bb      	b.n	8015fe8 <__gethex+0x374>
 8016070:	692a      	ldr	r2, [r5, #16]
 8016072:	9902      	ldr	r1, [sp, #8]
 8016074:	428a      	cmp	r2, r1
 8016076:	dd0b      	ble.n	8016090 <__gethex+0x41c>
 8016078:	2101      	movs	r1, #1
 801607a:	0028      	movs	r0, r5
 801607c:	f7ff fd91 	bl	8015ba2 <rshift>
 8016080:	9b01      	ldr	r3, [sp, #4]
 8016082:	3701      	adds	r7, #1
 8016084:	689b      	ldr	r3, [r3, #8]
 8016086:	42bb      	cmp	r3, r7
 8016088:	da00      	bge.n	801608c <__gethex+0x418>
 801608a:	e6df      	b.n	8015e4c <__gethex+0x1d8>
 801608c:	2601      	movs	r6, #1
 801608e:	e7bf      	b.n	8016010 <__gethex+0x39c>
 8016090:	221f      	movs	r2, #31
 8016092:	9c00      	ldr	r4, [sp, #0]
 8016094:	9900      	ldr	r1, [sp, #0]
 8016096:	4014      	ands	r4, r2
 8016098:	4211      	tst	r1, r2
 801609a:	d0f7      	beq.n	801608c <__gethex+0x418>
 801609c:	9a04      	ldr	r2, [sp, #16]
 801609e:	189b      	adds	r3, r3, r2
 80160a0:	3b04      	subs	r3, #4
 80160a2:	6818      	ldr	r0, [r3, #0]
 80160a4:	f7fe f874 	bl	8014190 <__hi0bits>
 80160a8:	2320      	movs	r3, #32
 80160aa:	1b1b      	subs	r3, r3, r4
 80160ac:	4298      	cmp	r0, r3
 80160ae:	dbe3      	blt.n	8016078 <__gethex+0x404>
 80160b0:	e7ec      	b.n	801608c <__gethex+0x418>
 80160b2:	46c0      	nop			@ (mov r8, r8)
 80160b4:	080173c5 	.word	0x080173c5
 80160b8:	080176de 	.word	0x080176de

080160bc <L_shift>:
 80160bc:	2308      	movs	r3, #8
 80160be:	b570      	push	{r4, r5, r6, lr}
 80160c0:	2520      	movs	r5, #32
 80160c2:	1a9a      	subs	r2, r3, r2
 80160c4:	0092      	lsls	r2, r2, #2
 80160c6:	1aad      	subs	r5, r5, r2
 80160c8:	6843      	ldr	r3, [r0, #4]
 80160ca:	6804      	ldr	r4, [r0, #0]
 80160cc:	001e      	movs	r6, r3
 80160ce:	40ae      	lsls	r6, r5
 80160d0:	40d3      	lsrs	r3, r2
 80160d2:	4334      	orrs	r4, r6
 80160d4:	6004      	str	r4, [r0, #0]
 80160d6:	6043      	str	r3, [r0, #4]
 80160d8:	3004      	adds	r0, #4
 80160da:	4288      	cmp	r0, r1
 80160dc:	d3f4      	bcc.n	80160c8 <L_shift+0xc>
 80160de:	bd70      	pop	{r4, r5, r6, pc}

080160e0 <__match>:
 80160e0:	b530      	push	{r4, r5, lr}
 80160e2:	6803      	ldr	r3, [r0, #0]
 80160e4:	780c      	ldrb	r4, [r1, #0]
 80160e6:	3301      	adds	r3, #1
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	d102      	bne.n	80160f2 <__match+0x12>
 80160ec:	6003      	str	r3, [r0, #0]
 80160ee:	2001      	movs	r0, #1
 80160f0:	bd30      	pop	{r4, r5, pc}
 80160f2:	781a      	ldrb	r2, [r3, #0]
 80160f4:	0015      	movs	r5, r2
 80160f6:	3d41      	subs	r5, #65	@ 0x41
 80160f8:	2d19      	cmp	r5, #25
 80160fa:	d800      	bhi.n	80160fe <__match+0x1e>
 80160fc:	3220      	adds	r2, #32
 80160fe:	3101      	adds	r1, #1
 8016100:	42a2      	cmp	r2, r4
 8016102:	d0ef      	beq.n	80160e4 <__match+0x4>
 8016104:	2000      	movs	r0, #0
 8016106:	e7f3      	b.n	80160f0 <__match+0x10>

08016108 <__hexnan>:
 8016108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801610a:	680b      	ldr	r3, [r1, #0]
 801610c:	b08b      	sub	sp, #44	@ 0x2c
 801610e:	9201      	str	r2, [sp, #4]
 8016110:	9901      	ldr	r1, [sp, #4]
 8016112:	115a      	asrs	r2, r3, #5
 8016114:	0092      	lsls	r2, r2, #2
 8016116:	188a      	adds	r2, r1, r2
 8016118:	9202      	str	r2, [sp, #8]
 801611a:	0019      	movs	r1, r3
 801611c:	221f      	movs	r2, #31
 801611e:	4011      	ands	r1, r2
 8016120:	9008      	str	r0, [sp, #32]
 8016122:	9106      	str	r1, [sp, #24]
 8016124:	4213      	tst	r3, r2
 8016126:	d002      	beq.n	801612e <__hexnan+0x26>
 8016128:	9b02      	ldr	r3, [sp, #8]
 801612a:	3304      	adds	r3, #4
 801612c:	9302      	str	r3, [sp, #8]
 801612e:	9b02      	ldr	r3, [sp, #8]
 8016130:	2500      	movs	r5, #0
 8016132:	1f1f      	subs	r7, r3, #4
 8016134:	003e      	movs	r6, r7
 8016136:	003c      	movs	r4, r7
 8016138:	9b08      	ldr	r3, [sp, #32]
 801613a:	603d      	str	r5, [r7, #0]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	9507      	str	r5, [sp, #28]
 8016140:	9305      	str	r3, [sp, #20]
 8016142:	9503      	str	r5, [sp, #12]
 8016144:	9b05      	ldr	r3, [sp, #20]
 8016146:	3301      	adds	r3, #1
 8016148:	9309      	str	r3, [sp, #36]	@ 0x24
 801614a:	9b05      	ldr	r3, [sp, #20]
 801614c:	785b      	ldrb	r3, [r3, #1]
 801614e:	9304      	str	r3, [sp, #16]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d028      	beq.n	80161a6 <__hexnan+0x9e>
 8016154:	9804      	ldr	r0, [sp, #16]
 8016156:	f7ff fd77 	bl	8015c48 <__hexdig_fun>
 801615a:	2800      	cmp	r0, #0
 801615c:	d155      	bne.n	801620a <__hexnan+0x102>
 801615e:	9b04      	ldr	r3, [sp, #16]
 8016160:	2b20      	cmp	r3, #32
 8016162:	d819      	bhi.n	8016198 <__hexnan+0x90>
 8016164:	9b03      	ldr	r3, [sp, #12]
 8016166:	9a07      	ldr	r2, [sp, #28]
 8016168:	4293      	cmp	r3, r2
 801616a:	dd12      	ble.n	8016192 <__hexnan+0x8a>
 801616c:	42b4      	cmp	r4, r6
 801616e:	d206      	bcs.n	801617e <__hexnan+0x76>
 8016170:	2d07      	cmp	r5, #7
 8016172:	dc04      	bgt.n	801617e <__hexnan+0x76>
 8016174:	002a      	movs	r2, r5
 8016176:	0031      	movs	r1, r6
 8016178:	0020      	movs	r0, r4
 801617a:	f7ff ff9f 	bl	80160bc <L_shift>
 801617e:	9b01      	ldr	r3, [sp, #4]
 8016180:	2508      	movs	r5, #8
 8016182:	429c      	cmp	r4, r3
 8016184:	d905      	bls.n	8016192 <__hexnan+0x8a>
 8016186:	1f26      	subs	r6, r4, #4
 8016188:	2500      	movs	r5, #0
 801618a:	0034      	movs	r4, r6
 801618c:	9b03      	ldr	r3, [sp, #12]
 801618e:	6035      	str	r5, [r6, #0]
 8016190:	9307      	str	r3, [sp, #28]
 8016192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016194:	9305      	str	r3, [sp, #20]
 8016196:	e7d5      	b.n	8016144 <__hexnan+0x3c>
 8016198:	9b04      	ldr	r3, [sp, #16]
 801619a:	2b29      	cmp	r3, #41	@ 0x29
 801619c:	d15a      	bne.n	8016254 <__hexnan+0x14c>
 801619e:	9b05      	ldr	r3, [sp, #20]
 80161a0:	9a08      	ldr	r2, [sp, #32]
 80161a2:	3302      	adds	r3, #2
 80161a4:	6013      	str	r3, [r2, #0]
 80161a6:	9b03      	ldr	r3, [sp, #12]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d053      	beq.n	8016254 <__hexnan+0x14c>
 80161ac:	42b4      	cmp	r4, r6
 80161ae:	d206      	bcs.n	80161be <__hexnan+0xb6>
 80161b0:	2d07      	cmp	r5, #7
 80161b2:	dc04      	bgt.n	80161be <__hexnan+0xb6>
 80161b4:	002a      	movs	r2, r5
 80161b6:	0031      	movs	r1, r6
 80161b8:	0020      	movs	r0, r4
 80161ba:	f7ff ff7f 	bl	80160bc <L_shift>
 80161be:	9b01      	ldr	r3, [sp, #4]
 80161c0:	429c      	cmp	r4, r3
 80161c2:	d936      	bls.n	8016232 <__hexnan+0x12a>
 80161c4:	001a      	movs	r2, r3
 80161c6:	0023      	movs	r3, r4
 80161c8:	cb02      	ldmia	r3!, {r1}
 80161ca:	c202      	stmia	r2!, {r1}
 80161cc:	429f      	cmp	r7, r3
 80161ce:	d2fb      	bcs.n	80161c8 <__hexnan+0xc0>
 80161d0:	9b02      	ldr	r3, [sp, #8]
 80161d2:	1c61      	adds	r1, r4, #1
 80161d4:	1eda      	subs	r2, r3, #3
 80161d6:	2304      	movs	r3, #4
 80161d8:	4291      	cmp	r1, r2
 80161da:	d805      	bhi.n	80161e8 <__hexnan+0xe0>
 80161dc:	9b02      	ldr	r3, [sp, #8]
 80161de:	3b04      	subs	r3, #4
 80161e0:	1b1b      	subs	r3, r3, r4
 80161e2:	089b      	lsrs	r3, r3, #2
 80161e4:	3301      	adds	r3, #1
 80161e6:	009b      	lsls	r3, r3, #2
 80161e8:	9a01      	ldr	r2, [sp, #4]
 80161ea:	18d3      	adds	r3, r2, r3
 80161ec:	2200      	movs	r2, #0
 80161ee:	c304      	stmia	r3!, {r2}
 80161f0:	429f      	cmp	r7, r3
 80161f2:	d2fc      	bcs.n	80161ee <__hexnan+0xe6>
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d104      	bne.n	8016204 <__hexnan+0xfc>
 80161fa:	9b01      	ldr	r3, [sp, #4]
 80161fc:	429f      	cmp	r7, r3
 80161fe:	d127      	bne.n	8016250 <__hexnan+0x148>
 8016200:	2301      	movs	r3, #1
 8016202:	603b      	str	r3, [r7, #0]
 8016204:	2005      	movs	r0, #5
 8016206:	b00b      	add	sp, #44	@ 0x2c
 8016208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801620a:	9b03      	ldr	r3, [sp, #12]
 801620c:	3501      	adds	r5, #1
 801620e:	3301      	adds	r3, #1
 8016210:	9303      	str	r3, [sp, #12]
 8016212:	2d08      	cmp	r5, #8
 8016214:	dd06      	ble.n	8016224 <__hexnan+0x11c>
 8016216:	9b01      	ldr	r3, [sp, #4]
 8016218:	429c      	cmp	r4, r3
 801621a:	d9ba      	bls.n	8016192 <__hexnan+0x8a>
 801621c:	2300      	movs	r3, #0
 801621e:	2501      	movs	r5, #1
 8016220:	3c04      	subs	r4, #4
 8016222:	6023      	str	r3, [r4, #0]
 8016224:	220f      	movs	r2, #15
 8016226:	6823      	ldr	r3, [r4, #0]
 8016228:	4010      	ands	r0, r2
 801622a:	011b      	lsls	r3, r3, #4
 801622c:	4303      	orrs	r3, r0
 801622e:	6023      	str	r3, [r4, #0]
 8016230:	e7af      	b.n	8016192 <__hexnan+0x8a>
 8016232:	9b06      	ldr	r3, [sp, #24]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d0dd      	beq.n	80161f4 <__hexnan+0xec>
 8016238:	2320      	movs	r3, #32
 801623a:	9a06      	ldr	r2, [sp, #24]
 801623c:	9902      	ldr	r1, [sp, #8]
 801623e:	1a9b      	subs	r3, r3, r2
 8016240:	2201      	movs	r2, #1
 8016242:	4252      	negs	r2, r2
 8016244:	40da      	lsrs	r2, r3
 8016246:	3904      	subs	r1, #4
 8016248:	680b      	ldr	r3, [r1, #0]
 801624a:	4013      	ands	r3, r2
 801624c:	600b      	str	r3, [r1, #0]
 801624e:	e7d1      	b.n	80161f4 <__hexnan+0xec>
 8016250:	3f04      	subs	r7, #4
 8016252:	e7cf      	b.n	80161f4 <__hexnan+0xec>
 8016254:	2004      	movs	r0, #4
 8016256:	e7d6      	b.n	8016206 <__hexnan+0xfe>

08016258 <__ascii_mbtowc>:
 8016258:	b082      	sub	sp, #8
 801625a:	2900      	cmp	r1, #0
 801625c:	d100      	bne.n	8016260 <__ascii_mbtowc+0x8>
 801625e:	a901      	add	r1, sp, #4
 8016260:	1e10      	subs	r0, r2, #0
 8016262:	d006      	beq.n	8016272 <__ascii_mbtowc+0x1a>
 8016264:	2b00      	cmp	r3, #0
 8016266:	d006      	beq.n	8016276 <__ascii_mbtowc+0x1e>
 8016268:	7813      	ldrb	r3, [r2, #0]
 801626a:	600b      	str	r3, [r1, #0]
 801626c:	7810      	ldrb	r0, [r2, #0]
 801626e:	1e43      	subs	r3, r0, #1
 8016270:	4198      	sbcs	r0, r3
 8016272:	b002      	add	sp, #8
 8016274:	4770      	bx	lr
 8016276:	2002      	movs	r0, #2
 8016278:	4240      	negs	r0, r0
 801627a:	e7fa      	b.n	8016272 <__ascii_mbtowc+0x1a>

0801627c <_realloc_r>:
 801627c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801627e:	0006      	movs	r6, r0
 8016280:	000c      	movs	r4, r1
 8016282:	0015      	movs	r5, r2
 8016284:	2900      	cmp	r1, #0
 8016286:	d105      	bne.n	8016294 <_realloc_r+0x18>
 8016288:	0011      	movs	r1, r2
 801628a:	f7fd fdf9 	bl	8013e80 <_malloc_r>
 801628e:	0004      	movs	r4, r0
 8016290:	0020      	movs	r0, r4
 8016292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016294:	2a00      	cmp	r2, #0
 8016296:	d103      	bne.n	80162a0 <_realloc_r+0x24>
 8016298:	f7fd fd7c 	bl	8013d94 <_free_r>
 801629c:	2400      	movs	r4, #0
 801629e:	e7f7      	b.n	8016290 <_realloc_r+0x14>
 80162a0:	f000 f83f 	bl	8016322 <_malloc_usable_size_r>
 80162a4:	0007      	movs	r7, r0
 80162a6:	4285      	cmp	r5, r0
 80162a8:	d802      	bhi.n	80162b0 <_realloc_r+0x34>
 80162aa:	0843      	lsrs	r3, r0, #1
 80162ac:	42ab      	cmp	r3, r5
 80162ae:	d3ef      	bcc.n	8016290 <_realloc_r+0x14>
 80162b0:	0029      	movs	r1, r5
 80162b2:	0030      	movs	r0, r6
 80162b4:	f7fd fde4 	bl	8013e80 <_malloc_r>
 80162b8:	9001      	str	r0, [sp, #4]
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d0ee      	beq.n	801629c <_realloc_r+0x20>
 80162be:	002a      	movs	r2, r5
 80162c0:	42bd      	cmp	r5, r7
 80162c2:	d900      	bls.n	80162c6 <_realloc_r+0x4a>
 80162c4:	003a      	movs	r2, r7
 80162c6:	0021      	movs	r1, r4
 80162c8:	9801      	ldr	r0, [sp, #4]
 80162ca:	f7fc fed7 	bl	801307c <memcpy>
 80162ce:	0021      	movs	r1, r4
 80162d0:	0030      	movs	r0, r6
 80162d2:	f7fd fd5f 	bl	8013d94 <_free_r>
 80162d6:	9c01      	ldr	r4, [sp, #4]
 80162d8:	e7da      	b.n	8016290 <_realloc_r+0x14>

080162da <__ascii_wctomb>:
 80162da:	0003      	movs	r3, r0
 80162dc:	1e08      	subs	r0, r1, #0
 80162de:	d005      	beq.n	80162ec <__ascii_wctomb+0x12>
 80162e0:	2aff      	cmp	r2, #255	@ 0xff
 80162e2:	d904      	bls.n	80162ee <__ascii_wctomb+0x14>
 80162e4:	228a      	movs	r2, #138	@ 0x8a
 80162e6:	2001      	movs	r0, #1
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	4240      	negs	r0, r0
 80162ec:	4770      	bx	lr
 80162ee:	2001      	movs	r0, #1
 80162f0:	700a      	strb	r2, [r1, #0]
 80162f2:	e7fb      	b.n	80162ec <__ascii_wctomb+0x12>

080162f4 <fiprintf>:
 80162f4:	b40e      	push	{r1, r2, r3}
 80162f6:	b517      	push	{r0, r1, r2, r4, lr}
 80162f8:	4c05      	ldr	r4, [pc, #20]	@ (8016310 <fiprintf+0x1c>)
 80162fa:	ab05      	add	r3, sp, #20
 80162fc:	cb04      	ldmia	r3!, {r2}
 80162fe:	0001      	movs	r1, r0
 8016300:	6820      	ldr	r0, [r4, #0]
 8016302:	9301      	str	r3, [sp, #4]
 8016304:	f000 f83c 	bl	8016380 <_vfiprintf_r>
 8016308:	bc1e      	pop	{r1, r2, r3, r4}
 801630a:	bc08      	pop	{r3}
 801630c:	b003      	add	sp, #12
 801630e:	4718      	bx	r3
 8016310:	20000094 	.word	0x20000094

08016314 <abort>:
 8016314:	2006      	movs	r0, #6
 8016316:	b510      	push	{r4, lr}
 8016318:	f000 fa18 	bl	801674c <raise>
 801631c:	2001      	movs	r0, #1
 801631e:	f7f1 f889 	bl	8007434 <_exit>

08016322 <_malloc_usable_size_r>:
 8016322:	1f0b      	subs	r3, r1, #4
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	1f18      	subs	r0, r3, #4
 8016328:	2b00      	cmp	r3, #0
 801632a:	da01      	bge.n	8016330 <_malloc_usable_size_r+0xe>
 801632c:	580b      	ldr	r3, [r1, r0]
 801632e:	18c0      	adds	r0, r0, r3
 8016330:	4770      	bx	lr

08016332 <__sfputc_r>:
 8016332:	6893      	ldr	r3, [r2, #8]
 8016334:	b510      	push	{r4, lr}
 8016336:	3b01      	subs	r3, #1
 8016338:	6093      	str	r3, [r2, #8]
 801633a:	2b00      	cmp	r3, #0
 801633c:	da04      	bge.n	8016348 <__sfputc_r+0x16>
 801633e:	6994      	ldr	r4, [r2, #24]
 8016340:	42a3      	cmp	r3, r4
 8016342:	db07      	blt.n	8016354 <__sfputc_r+0x22>
 8016344:	290a      	cmp	r1, #10
 8016346:	d005      	beq.n	8016354 <__sfputc_r+0x22>
 8016348:	6813      	ldr	r3, [r2, #0]
 801634a:	1c58      	adds	r0, r3, #1
 801634c:	6010      	str	r0, [r2, #0]
 801634e:	7019      	strb	r1, [r3, #0]
 8016350:	0008      	movs	r0, r1
 8016352:	bd10      	pop	{r4, pc}
 8016354:	f000 f930 	bl	80165b8 <__swbuf_r>
 8016358:	0001      	movs	r1, r0
 801635a:	e7f9      	b.n	8016350 <__sfputc_r+0x1e>

0801635c <__sfputs_r>:
 801635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801635e:	0006      	movs	r6, r0
 8016360:	000f      	movs	r7, r1
 8016362:	0014      	movs	r4, r2
 8016364:	18d5      	adds	r5, r2, r3
 8016366:	42ac      	cmp	r4, r5
 8016368:	d101      	bne.n	801636e <__sfputs_r+0x12>
 801636a:	2000      	movs	r0, #0
 801636c:	e007      	b.n	801637e <__sfputs_r+0x22>
 801636e:	7821      	ldrb	r1, [r4, #0]
 8016370:	003a      	movs	r2, r7
 8016372:	0030      	movs	r0, r6
 8016374:	f7ff ffdd 	bl	8016332 <__sfputc_r>
 8016378:	3401      	adds	r4, #1
 801637a:	1c43      	adds	r3, r0, #1
 801637c:	d1f3      	bne.n	8016366 <__sfputs_r+0xa>
 801637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016380 <_vfiprintf_r>:
 8016380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016382:	b0a1      	sub	sp, #132	@ 0x84
 8016384:	000f      	movs	r7, r1
 8016386:	0015      	movs	r5, r2
 8016388:	001e      	movs	r6, r3
 801638a:	9003      	str	r0, [sp, #12]
 801638c:	2800      	cmp	r0, #0
 801638e:	d004      	beq.n	801639a <_vfiprintf_r+0x1a>
 8016390:	6a03      	ldr	r3, [r0, #32]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d101      	bne.n	801639a <_vfiprintf_r+0x1a>
 8016396:	f7fc fc73 	bl	8012c80 <__sinit>
 801639a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801639c:	07db      	lsls	r3, r3, #31
 801639e:	d405      	bmi.n	80163ac <_vfiprintf_r+0x2c>
 80163a0:	89bb      	ldrh	r3, [r7, #12]
 80163a2:	059b      	lsls	r3, r3, #22
 80163a4:	d402      	bmi.n	80163ac <_vfiprintf_r+0x2c>
 80163a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80163a8:	f7fc fe5b 	bl	8013062 <__retarget_lock_acquire_recursive>
 80163ac:	89bb      	ldrh	r3, [r7, #12]
 80163ae:	071b      	lsls	r3, r3, #28
 80163b0:	d502      	bpl.n	80163b8 <_vfiprintf_r+0x38>
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d113      	bne.n	80163e0 <_vfiprintf_r+0x60>
 80163b8:	0039      	movs	r1, r7
 80163ba:	9803      	ldr	r0, [sp, #12]
 80163bc:	f000 f93e 	bl	801663c <__swsetup_r>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	d00d      	beq.n	80163e0 <_vfiprintf_r+0x60>
 80163c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80163c6:	07db      	lsls	r3, r3, #31
 80163c8:	d503      	bpl.n	80163d2 <_vfiprintf_r+0x52>
 80163ca:	2001      	movs	r0, #1
 80163cc:	4240      	negs	r0, r0
 80163ce:	b021      	add	sp, #132	@ 0x84
 80163d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d2:	89bb      	ldrh	r3, [r7, #12]
 80163d4:	059b      	lsls	r3, r3, #22
 80163d6:	d4f8      	bmi.n	80163ca <_vfiprintf_r+0x4a>
 80163d8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80163da:	f7fc fe43 	bl	8013064 <__retarget_lock_release_recursive>
 80163de:	e7f4      	b.n	80163ca <_vfiprintf_r+0x4a>
 80163e0:	2300      	movs	r3, #0
 80163e2:	ac08      	add	r4, sp, #32
 80163e4:	6163      	str	r3, [r4, #20]
 80163e6:	3320      	adds	r3, #32
 80163e8:	7663      	strb	r3, [r4, #25]
 80163ea:	3310      	adds	r3, #16
 80163ec:	76a3      	strb	r3, [r4, #26]
 80163ee:	9607      	str	r6, [sp, #28]
 80163f0:	002e      	movs	r6, r5
 80163f2:	7833      	ldrb	r3, [r6, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d001      	beq.n	80163fc <_vfiprintf_r+0x7c>
 80163f8:	2b25      	cmp	r3, #37	@ 0x25
 80163fa:	d148      	bne.n	801648e <_vfiprintf_r+0x10e>
 80163fc:	1b73      	subs	r3, r6, r5
 80163fe:	9305      	str	r3, [sp, #20]
 8016400:	42ae      	cmp	r6, r5
 8016402:	d00b      	beq.n	801641c <_vfiprintf_r+0x9c>
 8016404:	002a      	movs	r2, r5
 8016406:	0039      	movs	r1, r7
 8016408:	9803      	ldr	r0, [sp, #12]
 801640a:	f7ff ffa7 	bl	801635c <__sfputs_r>
 801640e:	3001      	adds	r0, #1
 8016410:	d100      	bne.n	8016414 <_vfiprintf_r+0x94>
 8016412:	e0ae      	b.n	8016572 <_vfiprintf_r+0x1f2>
 8016414:	6963      	ldr	r3, [r4, #20]
 8016416:	9a05      	ldr	r2, [sp, #20]
 8016418:	189b      	adds	r3, r3, r2
 801641a:	6163      	str	r3, [r4, #20]
 801641c:	7833      	ldrb	r3, [r6, #0]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d100      	bne.n	8016424 <_vfiprintf_r+0xa4>
 8016422:	e0a6      	b.n	8016572 <_vfiprintf_r+0x1f2>
 8016424:	2201      	movs	r2, #1
 8016426:	2300      	movs	r3, #0
 8016428:	4252      	negs	r2, r2
 801642a:	6062      	str	r2, [r4, #4]
 801642c:	a904      	add	r1, sp, #16
 801642e:	3254      	adds	r2, #84	@ 0x54
 8016430:	1852      	adds	r2, r2, r1
 8016432:	1c75      	adds	r5, r6, #1
 8016434:	6023      	str	r3, [r4, #0]
 8016436:	60e3      	str	r3, [r4, #12]
 8016438:	60a3      	str	r3, [r4, #8]
 801643a:	7013      	strb	r3, [r2, #0]
 801643c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801643e:	4b59      	ldr	r3, [pc, #356]	@ (80165a4 <_vfiprintf_r+0x224>)
 8016440:	2205      	movs	r2, #5
 8016442:	0018      	movs	r0, r3
 8016444:	7829      	ldrb	r1, [r5, #0]
 8016446:	9305      	str	r3, [sp, #20]
 8016448:	f7fc fe0d 	bl	8013066 <memchr>
 801644c:	1c6e      	adds	r6, r5, #1
 801644e:	2800      	cmp	r0, #0
 8016450:	d11f      	bne.n	8016492 <_vfiprintf_r+0x112>
 8016452:	6822      	ldr	r2, [r4, #0]
 8016454:	06d3      	lsls	r3, r2, #27
 8016456:	d504      	bpl.n	8016462 <_vfiprintf_r+0xe2>
 8016458:	2353      	movs	r3, #83	@ 0x53
 801645a:	a904      	add	r1, sp, #16
 801645c:	185b      	adds	r3, r3, r1
 801645e:	2120      	movs	r1, #32
 8016460:	7019      	strb	r1, [r3, #0]
 8016462:	0713      	lsls	r3, r2, #28
 8016464:	d504      	bpl.n	8016470 <_vfiprintf_r+0xf0>
 8016466:	2353      	movs	r3, #83	@ 0x53
 8016468:	a904      	add	r1, sp, #16
 801646a:	185b      	adds	r3, r3, r1
 801646c:	212b      	movs	r1, #43	@ 0x2b
 801646e:	7019      	strb	r1, [r3, #0]
 8016470:	782b      	ldrb	r3, [r5, #0]
 8016472:	2b2a      	cmp	r3, #42	@ 0x2a
 8016474:	d016      	beq.n	80164a4 <_vfiprintf_r+0x124>
 8016476:	002e      	movs	r6, r5
 8016478:	2100      	movs	r1, #0
 801647a:	200a      	movs	r0, #10
 801647c:	68e3      	ldr	r3, [r4, #12]
 801647e:	7832      	ldrb	r2, [r6, #0]
 8016480:	1c75      	adds	r5, r6, #1
 8016482:	3a30      	subs	r2, #48	@ 0x30
 8016484:	2a09      	cmp	r2, #9
 8016486:	d950      	bls.n	801652a <_vfiprintf_r+0x1aa>
 8016488:	2900      	cmp	r1, #0
 801648a:	d111      	bne.n	80164b0 <_vfiprintf_r+0x130>
 801648c:	e017      	b.n	80164be <_vfiprintf_r+0x13e>
 801648e:	3601      	adds	r6, #1
 8016490:	e7af      	b.n	80163f2 <_vfiprintf_r+0x72>
 8016492:	9b05      	ldr	r3, [sp, #20]
 8016494:	6822      	ldr	r2, [r4, #0]
 8016496:	1ac0      	subs	r0, r0, r3
 8016498:	2301      	movs	r3, #1
 801649a:	4083      	lsls	r3, r0
 801649c:	4313      	orrs	r3, r2
 801649e:	0035      	movs	r5, r6
 80164a0:	6023      	str	r3, [r4, #0]
 80164a2:	e7cc      	b.n	801643e <_vfiprintf_r+0xbe>
 80164a4:	9b07      	ldr	r3, [sp, #28]
 80164a6:	1d19      	adds	r1, r3, #4
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	9107      	str	r1, [sp, #28]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	db01      	blt.n	80164b4 <_vfiprintf_r+0x134>
 80164b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80164b2:	e004      	b.n	80164be <_vfiprintf_r+0x13e>
 80164b4:	425b      	negs	r3, r3
 80164b6:	60e3      	str	r3, [r4, #12]
 80164b8:	2302      	movs	r3, #2
 80164ba:	4313      	orrs	r3, r2
 80164bc:	6023      	str	r3, [r4, #0]
 80164be:	7833      	ldrb	r3, [r6, #0]
 80164c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80164c2:	d10c      	bne.n	80164de <_vfiprintf_r+0x15e>
 80164c4:	7873      	ldrb	r3, [r6, #1]
 80164c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80164c8:	d134      	bne.n	8016534 <_vfiprintf_r+0x1b4>
 80164ca:	9b07      	ldr	r3, [sp, #28]
 80164cc:	3602      	adds	r6, #2
 80164ce:	1d1a      	adds	r2, r3, #4
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	9207      	str	r2, [sp, #28]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	da01      	bge.n	80164dc <_vfiprintf_r+0x15c>
 80164d8:	2301      	movs	r3, #1
 80164da:	425b      	negs	r3, r3
 80164dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80164de:	4d32      	ldr	r5, [pc, #200]	@ (80165a8 <_vfiprintf_r+0x228>)
 80164e0:	2203      	movs	r2, #3
 80164e2:	0028      	movs	r0, r5
 80164e4:	7831      	ldrb	r1, [r6, #0]
 80164e6:	f7fc fdbe 	bl	8013066 <memchr>
 80164ea:	2800      	cmp	r0, #0
 80164ec:	d006      	beq.n	80164fc <_vfiprintf_r+0x17c>
 80164ee:	2340      	movs	r3, #64	@ 0x40
 80164f0:	1b40      	subs	r0, r0, r5
 80164f2:	4083      	lsls	r3, r0
 80164f4:	6822      	ldr	r2, [r4, #0]
 80164f6:	3601      	adds	r6, #1
 80164f8:	4313      	orrs	r3, r2
 80164fa:	6023      	str	r3, [r4, #0]
 80164fc:	7831      	ldrb	r1, [r6, #0]
 80164fe:	2206      	movs	r2, #6
 8016500:	482a      	ldr	r0, [pc, #168]	@ (80165ac <_vfiprintf_r+0x22c>)
 8016502:	1c75      	adds	r5, r6, #1
 8016504:	7621      	strb	r1, [r4, #24]
 8016506:	f7fc fdae 	bl	8013066 <memchr>
 801650a:	2800      	cmp	r0, #0
 801650c:	d040      	beq.n	8016590 <_vfiprintf_r+0x210>
 801650e:	4b28      	ldr	r3, [pc, #160]	@ (80165b0 <_vfiprintf_r+0x230>)
 8016510:	2b00      	cmp	r3, #0
 8016512:	d122      	bne.n	801655a <_vfiprintf_r+0x1da>
 8016514:	2207      	movs	r2, #7
 8016516:	9b07      	ldr	r3, [sp, #28]
 8016518:	3307      	adds	r3, #7
 801651a:	4393      	bics	r3, r2
 801651c:	3308      	adds	r3, #8
 801651e:	9307      	str	r3, [sp, #28]
 8016520:	6963      	ldr	r3, [r4, #20]
 8016522:	9a04      	ldr	r2, [sp, #16]
 8016524:	189b      	adds	r3, r3, r2
 8016526:	6163      	str	r3, [r4, #20]
 8016528:	e762      	b.n	80163f0 <_vfiprintf_r+0x70>
 801652a:	4343      	muls	r3, r0
 801652c:	002e      	movs	r6, r5
 801652e:	2101      	movs	r1, #1
 8016530:	189b      	adds	r3, r3, r2
 8016532:	e7a4      	b.n	801647e <_vfiprintf_r+0xfe>
 8016534:	2300      	movs	r3, #0
 8016536:	200a      	movs	r0, #10
 8016538:	0019      	movs	r1, r3
 801653a:	3601      	adds	r6, #1
 801653c:	6063      	str	r3, [r4, #4]
 801653e:	7832      	ldrb	r2, [r6, #0]
 8016540:	1c75      	adds	r5, r6, #1
 8016542:	3a30      	subs	r2, #48	@ 0x30
 8016544:	2a09      	cmp	r2, #9
 8016546:	d903      	bls.n	8016550 <_vfiprintf_r+0x1d0>
 8016548:	2b00      	cmp	r3, #0
 801654a:	d0c8      	beq.n	80164de <_vfiprintf_r+0x15e>
 801654c:	9109      	str	r1, [sp, #36]	@ 0x24
 801654e:	e7c6      	b.n	80164de <_vfiprintf_r+0x15e>
 8016550:	4341      	muls	r1, r0
 8016552:	002e      	movs	r6, r5
 8016554:	2301      	movs	r3, #1
 8016556:	1889      	adds	r1, r1, r2
 8016558:	e7f1      	b.n	801653e <_vfiprintf_r+0x1be>
 801655a:	aa07      	add	r2, sp, #28
 801655c:	9200      	str	r2, [sp, #0]
 801655e:	0021      	movs	r1, r4
 8016560:	003a      	movs	r2, r7
 8016562:	4b14      	ldr	r3, [pc, #80]	@ (80165b4 <_vfiprintf_r+0x234>)
 8016564:	9803      	ldr	r0, [sp, #12]
 8016566:	f7fb fd31 	bl	8011fcc <_printf_float>
 801656a:	9004      	str	r0, [sp, #16]
 801656c:	9b04      	ldr	r3, [sp, #16]
 801656e:	3301      	adds	r3, #1
 8016570:	d1d6      	bne.n	8016520 <_vfiprintf_r+0x1a0>
 8016572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016574:	07db      	lsls	r3, r3, #31
 8016576:	d405      	bmi.n	8016584 <_vfiprintf_r+0x204>
 8016578:	89bb      	ldrh	r3, [r7, #12]
 801657a:	059b      	lsls	r3, r3, #22
 801657c:	d402      	bmi.n	8016584 <_vfiprintf_r+0x204>
 801657e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016580:	f7fc fd70 	bl	8013064 <__retarget_lock_release_recursive>
 8016584:	89bb      	ldrh	r3, [r7, #12]
 8016586:	065b      	lsls	r3, r3, #25
 8016588:	d500      	bpl.n	801658c <_vfiprintf_r+0x20c>
 801658a:	e71e      	b.n	80163ca <_vfiprintf_r+0x4a>
 801658c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801658e:	e71e      	b.n	80163ce <_vfiprintf_r+0x4e>
 8016590:	aa07      	add	r2, sp, #28
 8016592:	9200      	str	r2, [sp, #0]
 8016594:	0021      	movs	r1, r4
 8016596:	003a      	movs	r2, r7
 8016598:	4b06      	ldr	r3, [pc, #24]	@ (80165b4 <_vfiprintf_r+0x234>)
 801659a:	9803      	ldr	r0, [sp, #12]
 801659c:	f7fb ffc4 	bl	8012528 <_printf_i>
 80165a0:	e7e3      	b.n	801656a <_vfiprintf_r+0x1ea>
 80165a2:	46c0      	nop			@ (mov r8, r8)
 80165a4:	08017689 	.word	0x08017689
 80165a8:	0801768f 	.word	0x0801768f
 80165ac:	08017693 	.word	0x08017693
 80165b0:	08011fcd 	.word	0x08011fcd
 80165b4:	0801635d 	.word	0x0801635d

080165b8 <__swbuf_r>:
 80165b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ba:	0006      	movs	r6, r0
 80165bc:	000d      	movs	r5, r1
 80165be:	0014      	movs	r4, r2
 80165c0:	2800      	cmp	r0, #0
 80165c2:	d004      	beq.n	80165ce <__swbuf_r+0x16>
 80165c4:	6a03      	ldr	r3, [r0, #32]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <__swbuf_r+0x16>
 80165ca:	f7fc fb59 	bl	8012c80 <__sinit>
 80165ce:	69a3      	ldr	r3, [r4, #24]
 80165d0:	60a3      	str	r3, [r4, #8]
 80165d2:	89a3      	ldrh	r3, [r4, #12]
 80165d4:	071b      	lsls	r3, r3, #28
 80165d6:	d502      	bpl.n	80165de <__swbuf_r+0x26>
 80165d8:	6923      	ldr	r3, [r4, #16]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d109      	bne.n	80165f2 <__swbuf_r+0x3a>
 80165de:	0021      	movs	r1, r4
 80165e0:	0030      	movs	r0, r6
 80165e2:	f000 f82b 	bl	801663c <__swsetup_r>
 80165e6:	2800      	cmp	r0, #0
 80165e8:	d003      	beq.n	80165f2 <__swbuf_r+0x3a>
 80165ea:	2501      	movs	r5, #1
 80165ec:	426d      	negs	r5, r5
 80165ee:	0028      	movs	r0, r5
 80165f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165f2:	6923      	ldr	r3, [r4, #16]
 80165f4:	6820      	ldr	r0, [r4, #0]
 80165f6:	b2ef      	uxtb	r7, r5
 80165f8:	1ac0      	subs	r0, r0, r3
 80165fa:	6963      	ldr	r3, [r4, #20]
 80165fc:	b2ed      	uxtb	r5, r5
 80165fe:	4283      	cmp	r3, r0
 8016600:	dc05      	bgt.n	801660e <__swbuf_r+0x56>
 8016602:	0021      	movs	r1, r4
 8016604:	0030      	movs	r0, r6
 8016606:	f7ff fa19 	bl	8015a3c <_fflush_r>
 801660a:	2800      	cmp	r0, #0
 801660c:	d1ed      	bne.n	80165ea <__swbuf_r+0x32>
 801660e:	68a3      	ldr	r3, [r4, #8]
 8016610:	3001      	adds	r0, #1
 8016612:	3b01      	subs	r3, #1
 8016614:	60a3      	str	r3, [r4, #8]
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	1c5a      	adds	r2, r3, #1
 801661a:	6022      	str	r2, [r4, #0]
 801661c:	701f      	strb	r7, [r3, #0]
 801661e:	6963      	ldr	r3, [r4, #20]
 8016620:	4283      	cmp	r3, r0
 8016622:	d004      	beq.n	801662e <__swbuf_r+0x76>
 8016624:	89a3      	ldrh	r3, [r4, #12]
 8016626:	07db      	lsls	r3, r3, #31
 8016628:	d5e1      	bpl.n	80165ee <__swbuf_r+0x36>
 801662a:	2d0a      	cmp	r5, #10
 801662c:	d1df      	bne.n	80165ee <__swbuf_r+0x36>
 801662e:	0021      	movs	r1, r4
 8016630:	0030      	movs	r0, r6
 8016632:	f7ff fa03 	bl	8015a3c <_fflush_r>
 8016636:	2800      	cmp	r0, #0
 8016638:	d0d9      	beq.n	80165ee <__swbuf_r+0x36>
 801663a:	e7d6      	b.n	80165ea <__swbuf_r+0x32>

0801663c <__swsetup_r>:
 801663c:	4b2d      	ldr	r3, [pc, #180]	@ (80166f4 <__swsetup_r+0xb8>)
 801663e:	b570      	push	{r4, r5, r6, lr}
 8016640:	0005      	movs	r5, r0
 8016642:	6818      	ldr	r0, [r3, #0]
 8016644:	000c      	movs	r4, r1
 8016646:	2800      	cmp	r0, #0
 8016648:	d004      	beq.n	8016654 <__swsetup_r+0x18>
 801664a:	6a03      	ldr	r3, [r0, #32]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d101      	bne.n	8016654 <__swsetup_r+0x18>
 8016650:	f7fc fb16 	bl	8012c80 <__sinit>
 8016654:	230c      	movs	r3, #12
 8016656:	5ee2      	ldrsh	r2, [r4, r3]
 8016658:	0713      	lsls	r3, r2, #28
 801665a:	d423      	bmi.n	80166a4 <__swsetup_r+0x68>
 801665c:	06d3      	lsls	r3, r2, #27
 801665e:	d407      	bmi.n	8016670 <__swsetup_r+0x34>
 8016660:	2309      	movs	r3, #9
 8016662:	602b      	str	r3, [r5, #0]
 8016664:	2340      	movs	r3, #64	@ 0x40
 8016666:	2001      	movs	r0, #1
 8016668:	4313      	orrs	r3, r2
 801666a:	81a3      	strh	r3, [r4, #12]
 801666c:	4240      	negs	r0, r0
 801666e:	e03a      	b.n	80166e6 <__swsetup_r+0xaa>
 8016670:	0752      	lsls	r2, r2, #29
 8016672:	d513      	bpl.n	801669c <__swsetup_r+0x60>
 8016674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016676:	2900      	cmp	r1, #0
 8016678:	d008      	beq.n	801668c <__swsetup_r+0x50>
 801667a:	0023      	movs	r3, r4
 801667c:	3344      	adds	r3, #68	@ 0x44
 801667e:	4299      	cmp	r1, r3
 8016680:	d002      	beq.n	8016688 <__swsetup_r+0x4c>
 8016682:	0028      	movs	r0, r5
 8016684:	f7fd fb86 	bl	8013d94 <_free_r>
 8016688:	2300      	movs	r3, #0
 801668a:	6363      	str	r3, [r4, #52]	@ 0x34
 801668c:	2224      	movs	r2, #36	@ 0x24
 801668e:	89a3      	ldrh	r3, [r4, #12]
 8016690:	4393      	bics	r3, r2
 8016692:	81a3      	strh	r3, [r4, #12]
 8016694:	2300      	movs	r3, #0
 8016696:	6063      	str	r3, [r4, #4]
 8016698:	6923      	ldr	r3, [r4, #16]
 801669a:	6023      	str	r3, [r4, #0]
 801669c:	2308      	movs	r3, #8
 801669e:	89a2      	ldrh	r2, [r4, #12]
 80166a0:	4313      	orrs	r3, r2
 80166a2:	81a3      	strh	r3, [r4, #12]
 80166a4:	6923      	ldr	r3, [r4, #16]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d10b      	bne.n	80166c2 <__swsetup_r+0x86>
 80166aa:	21a0      	movs	r1, #160	@ 0xa0
 80166ac:	2280      	movs	r2, #128	@ 0x80
 80166ae:	89a3      	ldrh	r3, [r4, #12]
 80166b0:	0089      	lsls	r1, r1, #2
 80166b2:	0092      	lsls	r2, r2, #2
 80166b4:	400b      	ands	r3, r1
 80166b6:	4293      	cmp	r3, r2
 80166b8:	d003      	beq.n	80166c2 <__swsetup_r+0x86>
 80166ba:	0021      	movs	r1, r4
 80166bc:	0028      	movs	r0, r5
 80166be:	f000 f88f 	bl	80167e0 <__smakebuf_r>
 80166c2:	230c      	movs	r3, #12
 80166c4:	5ee2      	ldrsh	r2, [r4, r3]
 80166c6:	2101      	movs	r1, #1
 80166c8:	0013      	movs	r3, r2
 80166ca:	400b      	ands	r3, r1
 80166cc:	420a      	tst	r2, r1
 80166ce:	d00b      	beq.n	80166e8 <__swsetup_r+0xac>
 80166d0:	2300      	movs	r3, #0
 80166d2:	60a3      	str	r3, [r4, #8]
 80166d4:	6963      	ldr	r3, [r4, #20]
 80166d6:	425b      	negs	r3, r3
 80166d8:	61a3      	str	r3, [r4, #24]
 80166da:	2000      	movs	r0, #0
 80166dc:	6923      	ldr	r3, [r4, #16]
 80166de:	4283      	cmp	r3, r0
 80166e0:	d101      	bne.n	80166e6 <__swsetup_r+0xaa>
 80166e2:	0613      	lsls	r3, r2, #24
 80166e4:	d4be      	bmi.n	8016664 <__swsetup_r+0x28>
 80166e6:	bd70      	pop	{r4, r5, r6, pc}
 80166e8:	0791      	lsls	r1, r2, #30
 80166ea:	d400      	bmi.n	80166ee <__swsetup_r+0xb2>
 80166ec:	6963      	ldr	r3, [r4, #20]
 80166ee:	60a3      	str	r3, [r4, #8]
 80166f0:	e7f3      	b.n	80166da <__swsetup_r+0x9e>
 80166f2:	46c0      	nop			@ (mov r8, r8)
 80166f4:	20000094 	.word	0x20000094

080166f8 <_raise_r>:
 80166f8:	b570      	push	{r4, r5, r6, lr}
 80166fa:	0004      	movs	r4, r0
 80166fc:	000d      	movs	r5, r1
 80166fe:	291f      	cmp	r1, #31
 8016700:	d904      	bls.n	801670c <_raise_r+0x14>
 8016702:	2316      	movs	r3, #22
 8016704:	6003      	str	r3, [r0, #0]
 8016706:	2001      	movs	r0, #1
 8016708:	4240      	negs	r0, r0
 801670a:	bd70      	pop	{r4, r5, r6, pc}
 801670c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801670e:	2b00      	cmp	r3, #0
 8016710:	d004      	beq.n	801671c <_raise_r+0x24>
 8016712:	008a      	lsls	r2, r1, #2
 8016714:	189b      	adds	r3, r3, r2
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	2a00      	cmp	r2, #0
 801671a:	d108      	bne.n	801672e <_raise_r+0x36>
 801671c:	0020      	movs	r0, r4
 801671e:	f000 f831 	bl	8016784 <_getpid_r>
 8016722:	002a      	movs	r2, r5
 8016724:	0001      	movs	r1, r0
 8016726:	0020      	movs	r0, r4
 8016728:	f000 f81a 	bl	8016760 <_kill_r>
 801672c:	e7ed      	b.n	801670a <_raise_r+0x12>
 801672e:	2a01      	cmp	r2, #1
 8016730:	d009      	beq.n	8016746 <_raise_r+0x4e>
 8016732:	1c51      	adds	r1, r2, #1
 8016734:	d103      	bne.n	801673e <_raise_r+0x46>
 8016736:	2316      	movs	r3, #22
 8016738:	6003      	str	r3, [r0, #0]
 801673a:	2001      	movs	r0, #1
 801673c:	e7e5      	b.n	801670a <_raise_r+0x12>
 801673e:	2100      	movs	r1, #0
 8016740:	0028      	movs	r0, r5
 8016742:	6019      	str	r1, [r3, #0]
 8016744:	4790      	blx	r2
 8016746:	2000      	movs	r0, #0
 8016748:	e7df      	b.n	801670a <_raise_r+0x12>
	...

0801674c <raise>:
 801674c:	b510      	push	{r4, lr}
 801674e:	4b03      	ldr	r3, [pc, #12]	@ (801675c <raise+0x10>)
 8016750:	0001      	movs	r1, r0
 8016752:	6818      	ldr	r0, [r3, #0]
 8016754:	f7ff ffd0 	bl	80166f8 <_raise_r>
 8016758:	bd10      	pop	{r4, pc}
 801675a:	46c0      	nop			@ (mov r8, r8)
 801675c:	20000094 	.word	0x20000094

08016760 <_kill_r>:
 8016760:	2300      	movs	r3, #0
 8016762:	b570      	push	{r4, r5, r6, lr}
 8016764:	4d06      	ldr	r5, [pc, #24]	@ (8016780 <_kill_r+0x20>)
 8016766:	0004      	movs	r4, r0
 8016768:	0008      	movs	r0, r1
 801676a:	0011      	movs	r1, r2
 801676c:	602b      	str	r3, [r5, #0]
 801676e:	f7f0 fe51 	bl	8007414 <_kill>
 8016772:	1c43      	adds	r3, r0, #1
 8016774:	d103      	bne.n	801677e <_kill_r+0x1e>
 8016776:	682b      	ldr	r3, [r5, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d000      	beq.n	801677e <_kill_r+0x1e>
 801677c:	6023      	str	r3, [r4, #0]
 801677e:	bd70      	pop	{r4, r5, r6, pc}
 8016780:	20007278 	.word	0x20007278

08016784 <_getpid_r>:
 8016784:	b510      	push	{r4, lr}
 8016786:	f7f0 fe3f 	bl	8007408 <_getpid>
 801678a:	bd10      	pop	{r4, pc}

0801678c <__swhatbuf_r>:
 801678c:	b570      	push	{r4, r5, r6, lr}
 801678e:	000e      	movs	r6, r1
 8016790:	001d      	movs	r5, r3
 8016792:	230e      	movs	r3, #14
 8016794:	5ec9      	ldrsh	r1, [r1, r3]
 8016796:	0014      	movs	r4, r2
 8016798:	b096      	sub	sp, #88	@ 0x58
 801679a:	2900      	cmp	r1, #0
 801679c:	da0c      	bge.n	80167b8 <__swhatbuf_r+0x2c>
 801679e:	89b2      	ldrh	r2, [r6, #12]
 80167a0:	2380      	movs	r3, #128	@ 0x80
 80167a2:	0011      	movs	r1, r2
 80167a4:	4019      	ands	r1, r3
 80167a6:	421a      	tst	r2, r3
 80167a8:	d114      	bne.n	80167d4 <__swhatbuf_r+0x48>
 80167aa:	2380      	movs	r3, #128	@ 0x80
 80167ac:	00db      	lsls	r3, r3, #3
 80167ae:	2000      	movs	r0, #0
 80167b0:	6029      	str	r1, [r5, #0]
 80167b2:	6023      	str	r3, [r4, #0]
 80167b4:	b016      	add	sp, #88	@ 0x58
 80167b6:	bd70      	pop	{r4, r5, r6, pc}
 80167b8:	466a      	mov	r2, sp
 80167ba:	f000 f853 	bl	8016864 <_fstat_r>
 80167be:	2800      	cmp	r0, #0
 80167c0:	dbed      	blt.n	801679e <__swhatbuf_r+0x12>
 80167c2:	23f0      	movs	r3, #240	@ 0xf0
 80167c4:	9901      	ldr	r1, [sp, #4]
 80167c6:	021b      	lsls	r3, r3, #8
 80167c8:	4019      	ands	r1, r3
 80167ca:	4b04      	ldr	r3, [pc, #16]	@ (80167dc <__swhatbuf_r+0x50>)
 80167cc:	18c9      	adds	r1, r1, r3
 80167ce:	424b      	negs	r3, r1
 80167d0:	4159      	adcs	r1, r3
 80167d2:	e7ea      	b.n	80167aa <__swhatbuf_r+0x1e>
 80167d4:	2100      	movs	r1, #0
 80167d6:	2340      	movs	r3, #64	@ 0x40
 80167d8:	e7e9      	b.n	80167ae <__swhatbuf_r+0x22>
 80167da:	46c0      	nop			@ (mov r8, r8)
 80167dc:	ffffe000 	.word	0xffffe000

080167e0 <__smakebuf_r>:
 80167e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167e2:	2602      	movs	r6, #2
 80167e4:	898b      	ldrh	r3, [r1, #12]
 80167e6:	0005      	movs	r5, r0
 80167e8:	000c      	movs	r4, r1
 80167ea:	b085      	sub	sp, #20
 80167ec:	4233      	tst	r3, r6
 80167ee:	d007      	beq.n	8016800 <__smakebuf_r+0x20>
 80167f0:	0023      	movs	r3, r4
 80167f2:	3347      	adds	r3, #71	@ 0x47
 80167f4:	6023      	str	r3, [r4, #0]
 80167f6:	6123      	str	r3, [r4, #16]
 80167f8:	2301      	movs	r3, #1
 80167fa:	6163      	str	r3, [r4, #20]
 80167fc:	b005      	add	sp, #20
 80167fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016800:	ab03      	add	r3, sp, #12
 8016802:	aa02      	add	r2, sp, #8
 8016804:	f7ff ffc2 	bl	801678c <__swhatbuf_r>
 8016808:	9f02      	ldr	r7, [sp, #8]
 801680a:	9001      	str	r0, [sp, #4]
 801680c:	0039      	movs	r1, r7
 801680e:	0028      	movs	r0, r5
 8016810:	f7fd fb36 	bl	8013e80 <_malloc_r>
 8016814:	2800      	cmp	r0, #0
 8016816:	d108      	bne.n	801682a <__smakebuf_r+0x4a>
 8016818:	220c      	movs	r2, #12
 801681a:	5ea3      	ldrsh	r3, [r4, r2]
 801681c:	059a      	lsls	r2, r3, #22
 801681e:	d4ed      	bmi.n	80167fc <__smakebuf_r+0x1c>
 8016820:	2203      	movs	r2, #3
 8016822:	4393      	bics	r3, r2
 8016824:	431e      	orrs	r6, r3
 8016826:	81a6      	strh	r6, [r4, #12]
 8016828:	e7e2      	b.n	80167f0 <__smakebuf_r+0x10>
 801682a:	2380      	movs	r3, #128	@ 0x80
 801682c:	89a2      	ldrh	r2, [r4, #12]
 801682e:	6020      	str	r0, [r4, #0]
 8016830:	4313      	orrs	r3, r2
 8016832:	81a3      	strh	r3, [r4, #12]
 8016834:	9b03      	ldr	r3, [sp, #12]
 8016836:	6120      	str	r0, [r4, #16]
 8016838:	6167      	str	r7, [r4, #20]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d00c      	beq.n	8016858 <__smakebuf_r+0x78>
 801683e:	0028      	movs	r0, r5
 8016840:	230e      	movs	r3, #14
 8016842:	5ee1      	ldrsh	r1, [r4, r3]
 8016844:	f000 f820 	bl	8016888 <_isatty_r>
 8016848:	2800      	cmp	r0, #0
 801684a:	d005      	beq.n	8016858 <__smakebuf_r+0x78>
 801684c:	2303      	movs	r3, #3
 801684e:	89a2      	ldrh	r2, [r4, #12]
 8016850:	439a      	bics	r2, r3
 8016852:	3b02      	subs	r3, #2
 8016854:	4313      	orrs	r3, r2
 8016856:	81a3      	strh	r3, [r4, #12]
 8016858:	89a3      	ldrh	r3, [r4, #12]
 801685a:	9a01      	ldr	r2, [sp, #4]
 801685c:	4313      	orrs	r3, r2
 801685e:	81a3      	strh	r3, [r4, #12]
 8016860:	e7cc      	b.n	80167fc <__smakebuf_r+0x1c>
	...

08016864 <_fstat_r>:
 8016864:	2300      	movs	r3, #0
 8016866:	b570      	push	{r4, r5, r6, lr}
 8016868:	4d06      	ldr	r5, [pc, #24]	@ (8016884 <_fstat_r+0x20>)
 801686a:	0004      	movs	r4, r0
 801686c:	0008      	movs	r0, r1
 801686e:	0011      	movs	r1, r2
 8016870:	602b      	str	r3, [r5, #0]
 8016872:	f7f0 fe2f 	bl	80074d4 <_fstat>
 8016876:	1c43      	adds	r3, r0, #1
 8016878:	d103      	bne.n	8016882 <_fstat_r+0x1e>
 801687a:	682b      	ldr	r3, [r5, #0]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d000      	beq.n	8016882 <_fstat_r+0x1e>
 8016880:	6023      	str	r3, [r4, #0]
 8016882:	bd70      	pop	{r4, r5, r6, pc}
 8016884:	20007278 	.word	0x20007278

08016888 <_isatty_r>:
 8016888:	2300      	movs	r3, #0
 801688a:	b570      	push	{r4, r5, r6, lr}
 801688c:	4d06      	ldr	r5, [pc, #24]	@ (80168a8 <_isatty_r+0x20>)
 801688e:	0004      	movs	r4, r0
 8016890:	0008      	movs	r0, r1
 8016892:	602b      	str	r3, [r5, #0]
 8016894:	f7f0 fe2c 	bl	80074f0 <_isatty>
 8016898:	1c43      	adds	r3, r0, #1
 801689a:	d103      	bne.n	80168a4 <_isatty_r+0x1c>
 801689c:	682b      	ldr	r3, [r5, #0]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d000      	beq.n	80168a4 <_isatty_r+0x1c>
 80168a2:	6023      	str	r3, [r4, #0]
 80168a4:	bd70      	pop	{r4, r5, r6, pc}
 80168a6:	46c0      	nop			@ (mov r8, r8)
 80168a8:	20007278 	.word	0x20007278

080168ac <_init>:
 80168ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ae:	46c0      	nop			@ (mov r8, r8)
 80168b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168b2:	bc08      	pop	{r3}
 80168b4:	469e      	mov	lr, r3
 80168b6:	4770      	bx	lr

080168b8 <_fini>:
 80168b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ba:	46c0      	nop			@ (mov r8, r8)
 80168bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168be:	bc08      	pop	{r3}
 80168c0:	469e      	mov	lr, r3
 80168c2:	4770      	bx	lr
 80168c4:	0000      	movs	r0, r0
	...

080168c8 <__FLASH_Program_Fast_veneer>:
 80168c8:	b401      	push	{r0}
 80168ca:	4802      	ldr	r0, [pc, #8]	@ (80168d4 <__FLASH_Program_Fast_veneer+0xc>)
 80168cc:	4684      	mov	ip, r0
 80168ce:	bc01      	pop	{r0}
 80168d0:	4760      	bx	ip
 80168d2:	bf00      	nop
 80168d4:	20000251 	.word	0x20000251

Disassembly of section .data:

20000000 <counter_ads_max>:
20000000:	00000032                                2...

20000004 <terminal_parser_state>:
20000004:	00000009                                ....

20000008 <config>:
	...
20000014:	00010000 00000000 00000000 00000000     ................
	...

2000004c <platform_number>:
2000004c:	00003030                                00..

20000050 <maxmin_timeout_ms>:
20000050:	0001d4c0                                ....

20000054 <in_window>:
20000054:	200003f8                                ... 

20000058 <current_debug_buffer_pointer>:
20000058:	200004ac                                ... 

2000005c <need_logging>:
2000005c:	00000001                                ....

20000060 <SENSORS_I2C>:
20000060:	200024b4                                .$. 

20000064 <ACCELEROMETER_SPI>:
20000064:	200025a0                                .%. 

20000068 <SystemCoreClock>:
20000068:	00f42400                                .$..

2000006c <debug_uart>:
2000006c:	20002814                                .(. 

20000070 <terminal_uart>:
20000070:	20002780                                .'. 

20000074 <uwTickPrio>:
20000074:	00000004                                ....

20000078 <uwTickFreq>:
20000078:	00000001                                ....

2000007c <uxCriticalNesting>:
2000007c:	aaaaaaaa                                ....

20000080 <tiny>:
20000080:	0da24260                                `B..

20000084 <one>:
20000084:	3f800000                                ...?

20000088 <__sglue>:
20000088:	00000000 00000003 2000713c              ........<q. 

20000094 <_impure_ptr>:
20000094:	20000098                                ... 

20000098 <_impure_data>:
20000098:	00000000 2000713c 200071a4 2000720c     ....<q. .q. .r. 
	...

200000e4 <__global_locale>:
200000e4:	00000043 00000000 00000000 00000000     C...............
	...
20000104:	00000043 00000000 00000000 00000000     C...............
	...
20000124:	00000043 00000000 00000000 00000000     C...............
	...
20000144:	00000043 00000000 00000000 00000000     C...............
	...
20000164:	00000043 00000000 00000000 00000000     C...............
	...
20000184:	00000043 00000000 00000000 00000000     C...............
	...
200001a4:	00000043 00000000 00000000 00000000     C...............
	...
200001c4:	080162db 08016259 00000000 08017588     .b..Yb.......u..
200001d4:	08017530 080176dd 080176dd 080176dd     0u...v...v...v..
200001e4:	080176dd 080176dd 080176dd 080176dd     .v...v...v...v..
200001f4:	080176dd 080176dd ffffffff ffffffff     .v...v..........
20000204:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2000022c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000250 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000250:	b580      	push	{r7, lr}
20000252:	b088      	sub	sp, #32
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
20000258:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000025a:	231f      	movs	r3, #31
2000025c:	18fb      	adds	r3, r7, r3
2000025e:	2200      	movs	r2, #0
20000260:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b1a      	ldr	r3, [pc, #104]	@ (200002d4 <FLASH_Program_Fast+0x84>)
2000026c:	695a      	ldr	r2, [r3, #20]
2000026e:	4b19      	ldr	r3, [pc, #100]	@ (200002d4 <FLASH_Program_Fast+0x84>)
20000270:	2180      	movs	r1, #128	@ 0x80
20000272:	02c9      	lsls	r1, r1, #11
20000274:	430a      	orrs	r2, r1
20000276:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000278:	f3ef 8310 	mrs	r3, PRIMASK
2000027c:	60fb      	str	r3, [r7, #12]
  return(result);
2000027e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000282:	b672      	cpsid	i
}
20000284:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000286:	e00f      	b.n	200002a8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000288:	697a      	ldr	r2, [r7, #20]
2000028a:	69bb      	ldr	r3, [r7, #24]
2000028c:	6812      	ldr	r2, [r2, #0]
2000028e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000290:	697b      	ldr	r3, [r7, #20]
20000292:	3304      	adds	r3, #4
20000294:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000296:	69bb      	ldr	r3, [r7, #24]
20000298:	3304      	adds	r3, #4
2000029a:	61bb      	str	r3, [r7, #24]
    index++;
2000029c:	211f      	movs	r1, #31
2000029e:	187b      	adds	r3, r7, r1
200002a0:	781a      	ldrb	r2, [r3, #0]
200002a2:	187b      	adds	r3, r7, r1
200002a4:	3201      	adds	r2, #1
200002a6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002a8:	231f      	movs	r3, #31
200002aa:	18fb      	adds	r3, r7, r3
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b3f      	cmp	r3, #63	@ 0x3f
200002b0:	d9ea      	bls.n	20000288 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200002b2:	46c0      	nop			@ (mov r8, r8)
200002b4:	4b07      	ldr	r3, [pc, #28]	@ (200002d4 <FLASH_Program_Fast+0x84>)
200002b6:	691a      	ldr	r2, [r3, #16]
200002b8:	2380      	movs	r3, #128	@ 0x80
200002ba:	025b      	lsls	r3, r3, #9
200002bc:	4013      	ands	r3, r2
200002be:	d1f9      	bne.n	200002b4 <FLASH_Program_Fast+0x64>
200002c0:	693b      	ldr	r3, [r7, #16]
200002c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002c4:	68bb      	ldr	r3, [r7, #8]
200002c6:	f383 8810 	msr	PRIMASK, r3
}
200002ca:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002cc:	46c0      	nop			@ (mov r8, r8)
200002ce:	46bd      	mov	sp, r7
200002d0:	b008      	add	sp, #32
200002d2:	bd80      	pop	{r7, pc}
200002d4:	40022000 	.word	0x40022000
